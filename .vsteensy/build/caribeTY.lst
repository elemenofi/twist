
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004f78 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff1594 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003a3c l     F .text	0000000c startup_default_early_hook
00003a48 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1594 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff1598 l       .bss	00000000 object.8610
00004f70 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 sequencer.cpp
00000000 l    df *ABS*	00000000 button.cpp
00000000 l    df *ABS*	00000000 piano.cpp
00000000 l    df *ABS*	00000000 led.cpp
00000000 l    df *ABS*	00000000 main.cpp
000009ac l     F .text	00000018 _GLOBAL__sub_I_sequencer
00000000 l    df *ABS*	00000000 note.cpp
00000000 l    df *ABS*	00000000 transport.cpp
00000000 l    df *ABS*	00000000 paginator.cpp
00000000 l    df *ABS*	00000000 step.cpp
00000000 l    df *ABS*	00000000 knob.cpp
00000000 l    df *ABS*	00000000 controller.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
1fff15b5 l     O .bss	00000001 tx_noautoflush
1fff15b8 l     O .bss	00000004 tx_packet
1fff15bc l     O .bss	00000001 transmit_previous_timeout
1fff15c0 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00001c1c l     F .text	00000144 wait_for_cal
1fff15c5 l     O .bss	00000001 analog_right_shift
1fff15c6 l     O .bss	00000001 calibrating
00004c8c l     O .text	00000048 pin2sc1a
1fff0c40 l     O .data	00000001 analog_config_bits
1fff15c7 l     O .bss	00000001 analogReadBusyADC1
1fff15c8 l     O .bss	00000001 analogReadBusyADC0
1fff15c9 l     O .bss	00000001 analog_reference_internal
1fff0c41 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00001f3c l     F .text	0000004c digitalWrite.part.1
00001f88 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002268 l     F .text	00000048 sysex_byte
1fff15e4 l     O .bss	00000001 tx_noautoflush
1fff1610 l     O .bss	00000004 tx_packet
1fff1614 l     O .bss	00000001 transmit_previous_timeout
1fff161c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c44 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1630 l     O .bss	00000004 ep0_tx_ptr
1fff1634 l     O .bss	00000014 rx_last
1fff1648 l     O .bss	00000002 ep0_tx_len
1fff164c l     O .bss	00000040 ep0_rx0_buf
1fff168c l     O .bss	00000014 rx_first
1fff16a0 l     O .bss	00000001 ep0_tx_data_toggle
1fff16a4 l     O .bss	00000040 ep0_rx1_buf
1fff16e4 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff16f8 l     O .bss	00000014 tx_last
1fff170c l     O .bss	00000008 setup
1fff1714 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1718 l     O .bss	00000008 reply_buffer
1fff1724 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1729 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 WMath.cpp
00003650 l     F .text	00000070 random(unsigned long) [clone .part.0]
1fff172c l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1730 l     O .bss	00000004 rts_pin
1fff1734 l     O .bss	00000001 rx_buffer_head
1fff1735 l     O .bss	00000001 rx_buffer_tail
1fff1738 l     O .bss	00000028 tx_buffer
1fff1760 l     O .bss	00000040 rx_buffer
1fff17a0 l     O .bss	00000001 transmitting
1fff17a1 l     O .bss	00000001 tx_buffer_tail
1fff17a4 l     O .bss	00000004 transmit_pin
1fff17a8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff17ac l     O .bss	00000004 rts_pin
1fff17b0 l     O .bss	00000001 transmitting
1fff17b1 l     O .bss	00000001 rx_buffer_tail
1fff17b4 l     O .bss	00000028 tx_buffer
1fff17dc l     O .bss	00000040 rx_buffer
1fff181c l     O .bss	00000001 rx_buffer_head
1fff181d l     O .bss	00000001 tx_buffer_tail
1fff1820 l     O .bss	00000004 transmit_pin
1fff1824 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1828 l     O .bss	00000004 rts_pin
1fff182c l     O .bss	00000001 rx_buffer_head
1fff182d l     O .bss	00000001 rx_buffer_tail
1fff1830 l     O .bss	00000028 tx_buffer
1fff1858 l     O .bss	00000040 rx_buffer
1fff1898 l     O .bss	00000001 transmitting
1fff1899 l     O .bss	00000001 tx_buffer_tail
1fff189c l     O .bss	00000004 transmit_pin
1fff18a0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff18a4 l     O .bss	00000004 rts_pin
1fff18a8 l     O .bss	00000001 rx_buffer_head
1fff18a9 l     O .bss	00000001 rx_buffer_tail
1fff18ac l     O .bss	00000040 tx_buffer
1fff18ec l     O .bss	00000040 rx_buffer
1fff192c l     O .bss	00000001 transmitting
1fff192d l     O .bss	00000001 tx_buffer_tail
1fff1930 l     O .bss	00000004 transmit_pin
1fff1934 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1938 l     O .bss	00000004 rts_pin
1fff193c l     O .bss	00000001 rx_buffer_head
1fff193d l     O .bss	00000001 rx_buffer_tail
1fff1940 l     O .bss	00000028 tx_buffer
1fff1968 l     O .bss	00000040 rx_buffer
1fff19a8 l     O .bss	00000001 transmitting
1fff19a9 l     O .bss	00000001 tx_buffer_tail
1fff19ac l     O .bss	00000004 transmit_pin
1fff19b0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c5c l     O .data	00000012 device_descriptor
1fff0c88 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff19b4 l     O .bss	00000004 rts_pin
1fff19b8 l     O .bss	00000001 rx_buffer_head
1fff19b9 l     O .bss	00000001 rx_buffer_tail
1fff19bc l     O .bss	00000028 tx_buffer
1fff19e4 l     O .bss	00000040 rx_buffer
1fff1a24 l     O .bss	00000001 transmitting
1fff1a25 l     O .bss	00000001 tx_buffer_tail
1fff1a28 l     O .bss	00000004 transmit_pin
1fff1a2c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004778 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d58 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1594 l       .bss	00000000 __bss_start__
1fff1bc8 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00003a34  w    F .text	00000006 adc0_isr
000019c0 g     F .text	0000001c usb_serial_available
000038f4 g     F .text	00000020 serial4_available
00003494  w    F .text	000000c4 yield
1fff0c70 g     O .data	00000018 usb_string_manufacturer_name_default
00003ae0 g     F .text	00000020 serial_available
1fff15e8 g     O .bss	00000004 usb_midi_handleProgramChange
000017a0 g     F .text	0000000a Controller::exitSwingMode()
000039ec  w    F .text	00000048 hard_fault_isr
00003a34  w    F .text	00000006 dma_ch6_isr
00003588 g     F .text	00000020 Print::println()
000037c8 g     F .text	00000020 serial2_available
00003a34  w    F .text	00000006 uart0_lon_isr
000028a8 g     F .text	000000e8 usb_rx_memory
00003558  w    F .text	00000002 serialEvent5()
00001804 g     F .text	00000006 Controller::getShiftMode()
00003a34  w    F .text	00000006 dma_ch8_isr
00003c0c g     F .text	00000020 serial6_available
00004750 g     F .text	00000002 __malloc_unlock
1fff15fc g     O .bss	00000004 usb_midi_handleAfterTouch
00000518 g     F .text	00000050 Sequencer::step()
00001d60 g     F .text	000000e0 analog_init
00002990 g     F .text	00000084 usb_tx
00003a34  w    F .text	00000006 portcd_isr
1fff160c g     O .bss	00000004 usb_midi_handleSysExComplete
00001598 g     F .text	00000058 Controller::printCurrentMode()
0000402c g     F .text	00000098 MillisTimer::runFromTimer()
00003a34  w    F .text	00000006 can1_rx_warn_isr
00004f7c g       .fini	00000000 __exidx_end
00003a34  w    F .text	00000006 dma_error_isr
1fff1a8c g     O .bss	00000001 usb_midi_msg_type
1fff1a44 g     O .bss	00000001 EventResponder::runningFromYield
00003a34  w    F .text	00000006 i2c0_isr
000040d4 g     F .text	0000000c __errno
00003a34  w    F .text	00000006 portd_isr
00003a34  w    F .text	00000006 enet_error_isr
1fff1a30 g     O .bss	00000004 EventResponder::firstInterrupt
00000a58 g     F .text	0000002c Note::tick()
00001380 g     F .text	0000002a Knob::tick()
00000cc8 g     F .text	00000024 Paginator::copyStep(Step*, Step*)
00003a34  w    F .text	00000006 tpm1_isr
00003574  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00004cd4 g     O .text	00000200 digital_pin_to_info_PGM
0000180c g     F .text	00000006 Controller::getMode()
1fff1bc4 g     O .bss	00000004 errno
00004f7c g       .fini	00000000 _etext
1fff1594 g       .bss	00000000 _sbss
000036c8  w    F .text	00000002 serialEvent6()
1fff15f8 g     O .bss	00000004 usb_midi_handleVelocityChange
00002030 g     F .text	0000001c digitalRead
00003a34  w    F .text	00000006 porte_isr
000009a0 g     F .text	0000000c loop
00003a34  w    F .text	00000006 portb_isr
000004f8 g     F .text	00000014 Sequencer::tick()
0000234c g     F .text	0000002c usb_midi_flush_output
00003a34  w    F .text	00000006 spi1_isr
00003914 g     F .text	000000d8 uart3_status_isr
00003ed8  w    F .text	00000002 serialEvent1()
0000156c g     F .text	0000002c Controller::tick()
00003a34  w    F .text	00000006 mcm_isr
00003fc4 g     F .text	00000068 MillisTimer::addToActiveList()
00002378 g     F .text	0000043c usb_midi_read
00001684 g     F .text	00000060 Controller::enterShiftMode()
1fff15d4 g     O .bss	00000004 usb_midi_handleSystemReset
000007c4 g     F .text	00000038 Piano::Piano(Sequencer*)
00000658 g     F .text	0000006c Button::onHold()
1fff1a34 g     O .bss	00000004 EventResponder::lastInterrupt
000017fc g     F .text	00000006 Controller::getCopyMode()
000037e8 g     F .text	0000010c uart1_status_isr
00000924 g     F .text	00000078 Led::tick()
1fff1a8e g     O .bss	00000002 usb_midi_msg_sysex_len
00001814 g     F .text	00000134 memcpy
00000568 g     F .text	00000006 Sequencer::resetStep()
00003a34  w    F .text	00000006 randnum_isr
000009d4 g     F .text	0000002e Note::noteOn(unsigned char, unsigned char, unsigned char)
1fff15dc g     O .bss	00000004 usb_midi_handleRealTimeSystem
00001734 g     F .text	00000008 Controller::exitCopyMode()
1fff15cc g     O .bss	00000004 systick_millis_count
000039ec  w    F .text	00000048 bus_fault_isr
000008dc g     F .text	0000002c Led::toggle()
00003a34  w    F .text	00000006 watchdog_isr
00003a34  w    F .text	00000006 i2c1_isr
1fff1720 g     O .bss	00000001 usb_configuration
00003a34  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00003638  w    F .text	00000002 serialEvent2()
00003a34  w    F .text	00000006 i2c2_isr
1fff0c70  w    O .data	00000018 usb_string_manufacturer_name
1fff1bb8 g     O .bss	0000000a usb_rx_byte_count_data
00003a34  w    F .text	00000006 pit1_isr
00000f2c g     F .text	00000034 Paginator::previousPage()
00004130 g     F .text	00000010 malloc
00003a34  w    F .text	00000006 dma_ch4_isr
00003a34  w    F .text	00000006 software_isr
00003a34  w    F .text	00000006 dma_ch7_isr
00003f60  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
000033c4 g     F .text	000000d0 usb_init
00003a34  w    F .text	00000006 lptmr_isr
00000bd8 g     F .text	00000060 Transport::processMidi()
1fff1a54 g     O .bss	00000004 __malloc_top_pad
00002000 g     F .text	00000024 rtc_set
000005dc g     F .text	0000007c Button::onRelease()
00000f88 g     F .text	00000048 Step::controlLength(int)
1fff0c40 g       .data	00000000 _sdata
1fff162c g     O .bss	00000004 usb_midi_handleNoteOn
00000a28 g     F .text	0000002e Note::noteOff(unsigned char, unsigned char, unsigned char)
00003aac g     F .text	00000034 kinetis_hsrun_enable
00004754 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00001948 g     F .text	00000048 usb_serial_getchar
00003a34  w    F .text	00000006 can1_bus_off_isr
00003a34  w    F .text	00000006 ftm2_isr
00000570 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1a80 g     O .bss	00000008 usb_cdc_line_coding
00002024 g     F .text	0000000a digitalWrite
00003a34  w    F .text	00000006 uart5_status_isr
00003c2c g     F .text	000000e4 lpuart0_status_isr
1fff1a3c g     O .bss	00000004 EventResponder::lastYield
00000a9c g     F .text	0000004c Transport::controlTempo(int)
00004f00 g     O .text	00000005 usb_endpoint_config_table
000013ac g     F .text	000001be Controller::Controller(Sequencer*)
00003a34  w    F .text	00000006 dma_ch9_isr
00003a34  w    F .text	00000006 pit2_isr
00003de0 g     F .text	00000020 serial3_available
000017d8 g     F .text	0000000a Controller::exitMotionMode()
1fff1a50 g     O .bss	00000004 __malloc_max_sbrked_mem
0000173c g     F .text	00000030 Controller::enterChanceMode()
0000204c g     F .text	0000000a pinMode
000027f4 g     F .text	0000004c usb_free
00003a34  w    F .text	00000006 i2c3_isr
1fff15f4 g     O .bss	00000004 usb_midi_handleSysExPartial
00004f7c g       .fini	00000000 __exidx_start
00003a34  w    F .text	00000006 pit0_isr
1fff1a90 g     O .bss	00000001 usb_midi_msg_data1
1fff1a40 g     O .bss	00000004 EventResponder::firstYield
00004f5c g     O .text	00000004 _global_impure_ptr
00003a34  w    F .text	00000006 can1_error_isr
000040e0 g     F .text	00000050 __libc_init_array
1fff1bc8 g       .bss	00000000 __bss_end
00003a34  w    F .text	00000006 can0_wakeup_isr
00003a34  w    F .text	00000006 flash_cmd_isr
0000355c  w    F .text	00000004 usb_serial_class::clear()
00003e00 g     F .text	000000d8 uart2_status_isr
00003a4c g     F .text	0000002c _sbrk
1fff1a48 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c58 g     O .data	00000004 __brkval
1fff15c4 g     O .bss	00000001 usb_cdc_line_rtsdtr
00001bd4 g     F .text	00000048 usb_serial_flush_callback
00004f60 g     F .text	00000000 _init
00003a34  w    F .text	00000006 svcall_isr
0000104c g     F .text	00000044 Step::controlChance(int)
00003a34  w    F .text	00000006 dma_ch15_isr
00003a34  w    F .text	00000006 uart1_error_isr
00004798 g     F .text	00000028 __libc_fini_array
00003a34  w    F .text	00000006 usbhs_phy_isr
00000c50 g     F .text	0000001e Paginator::Paginator(Sequencer*)
00000570 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1bc8 g       .bss	00000000 _ebss
00003a34 g     F .text	00000006 unused_isr
000010cc g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
00003a34  w    F .text	00000006 spi0_isr
000017ac g     F .text	0000002c Controller::enterMotionMode()
00003a34  w    F .text	00000006 dma_ch3_isr
00000ef8 g     F .text	00000032 Paginator::nextPage()
00000f60 g     F .text	0000001c Step::Step(Sequencer*)
00000f60 g     F .text	0000001c Step::Step(Sequencer*)
00003a34  w    F .text	00000006 flash_error_isr
000036d0 g     F .text	00000020 serial5_available
00003a34  w    F .text	00000006 uart5_error_isr
000017f4 g     F .text	00000006 Controller::getMotionMode()
00003a34  w    F .text	00000006 rtc_seconds_isr
00003a34  w    F .text	00000006 pdb_isr
000039ec  w    F .text	00000048 usage_fault_isr
00003a34  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00000c38 g     F .text	00000018 Transport::tick()
00003a34  w    F .text	00000006 dma_ch14_isr
000010dc g     F .text	000002a4 Knob::onChange()
000009c4 g     F .text	0000000e Note::Note()
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1a88 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00000a84 g     F .text	00000016 Transport::Transport(Sequencer*)
000040c4 g     F .text	00000010 systick_isr
00003a34  w    F .text	00000006 rtc_alarm_isr
0000046c g     F .text	0000008c Sequencer::Sequencer()
00003a34  w    F .text	00000006 dma_ch2_isr
1fff0c48 g     O .data	00000010 Serial
00000a84 g     F .text	00000016 Transport::Transport(Sequencer*)
00003a34  w    F .text	00000006 ftm1_isr
0000357c  w    F .text	00000006 usb_serial_class::write(unsigned char)
00003a3c  w    F .text	0000000c startup_early_hook
00003a34  w    F .text	00000006 dma_ch13_isr
00003a34  w    F .text	00000006 uart2_error_isr
00001990 g     F .text	00000030 usb_serial_peekchar
000008a8 g     F .text	00000034 Led::blink(int)
1fff0d3c g     O .data	00000016 usb_string_serial_number_default
000039ec g     F .text	00000048 fault_isr
0000485c g     F .text	000001d0 _free_r
1fff1618 g     O .bss	00000004 usb_midi_handleStop
00003a34  w    F .text	00000006 usb_charge_isr
0000356c  w    F .text	00000004 usb_serial_class::flush()
00003a34  w    F .text	00000006 cmt_isr
00003a34  w    F .text	00000006 usbhs_isr
1fff1628 g     O .bss	00000004 usb_midi_handleControlChange
1fff1590 g     O .data	00000004 __malloc_sbrk_base
00003564  w    F .text	00000004 usb_serial_class::read()
00003a34  w    F .text	00000006 ftm3_isr
000007c4 g     F .text	00000038 Piano::Piano(Sequencer*)
00003a34  w    F .text	00000006 tsi0_isr
00003a34  w    F .text	00000006 spi2_isr
0000363c  w    F .text	00000002 serialEvent4()
00003584  w    F .text	00000002 serialEvent()
1fff16a1 g     O .bss	00000001 usb_reboot_timer
00004a2c g     F .text	000000a4 __register_exitproc
000019dc g     F .text	00000038 usb_serial_flush_input
00001b1c g     F .text	00000018 usb_serial_putchar
1fff1a58 g     O .bss	00000028 __malloc_current_mallinfo
00003a34  w    F .text	00000006 can0_bus_off_isr
000013ac g     F .text	000001be Controller::Controller(Sequencer*)
1fff1715 g     O .bss	00000001 usb_rx_memory_needed
0000050c g     F .text	0000000a Sequencer::reverse()
00002a14 g     F .text	000009b0 usb_isr
00000bb8 g     F .text	0000001e Transport::stopPPQN()
1fff1624 g     O .bss	00000004 usb_midi_handleNoteOff
000009c4 g     F .text	0000000e Note::Note()
000036c0 g     F .text	00000008 random(unsigned long)
00004ed4  w    O .text	00000028 vtable for usb_serial_class
0000071c g     F .text	000000a8 Button::tick()
00003a34  w    F .text	00000006 uart3_error_isr
1fff1a38 g     O .bss	00000004 MillisTimer::listActive
00003a34  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00003a34  w    F .text	00000006 low_voltage_isr
1fff1184 g     O .data	00000408 __malloc_av_
00003a34  w    F .text	00000006 can0_error_isr
000016e4 g     F .text	00000028 Controller::exitShiftMode()
000020fc g     F .text	0000016c _init_Teensyduino_internal_
000010cc g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
00001b7c g     F .text	00000058 usb_serial_flush_output
00003a34  w    F .text	00000006 dma_ch12_isr
0000474c g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00003a34  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00003a34  w    F .text	00000006 pit3_isr
0000059c g     F .text	00000040 Button::onPressWhileHolding()
00000814 g     F .text	00000026 Piano::play(Step*)
00000c50 g     F .text	0000001e Paginator::Paginator(Sequencer*)
00003a34  w    F .text	00000006 enet_rx_isr
00003a34  w    F .text	00000006 portc_isr
000046b0 g     F .text	0000009a memset
00003640 g     F .text	00000010 main
1fff1a4c g     O .bss	00000004 __malloc_max_total_mem
00000914 g     F .text	0000000e Led::on()
000039ec  w    F .text	00000048 memmanage_fault_isr
00003d10 g     F .text	00000084 usb_init_serialnumber
00004f78 g       .text	00000000 __init_array_end
00004140 g     F .text	00000570 _malloc_r
00003a34  w    F .text	00000006 debugmonitor_isr
1fff15f0 g     O .bss	00000004 usb_midi_handleSongPosition
0000176c g     F .text	0000000a Controller::exitChanceMode()
00003ee0 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff15e0 g     O .bss	00000004 usb_midi_handleContinue
1fff1a91 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00003a34  w    F .text	00000006 cmp1_isr
00003a34  w    F .text	00000006 ftm0_isr
000047c0 g     F .text	0000009c _malloc_trim_r
1fff0d38 g     O .data	00000004 string0
00001a14 g     F .text	00000108 usb_serial_write
00003a48  w    F .text	00000002 startup_late_hook
00000fd0 g     F .text	0000003c Step::controlPitch(int)
00003568  w    F .text	00000004 usb_serial_class::available()
1fff1a92 g     O .bss	00000001 usb_midi_msg_cable
1fff0d20  w    O .data	00000018 usb_string_product_name
00000c70 g     F .text	00000056 Paginator::getNextPlaybackPage(int)
00002058 g     F .text	000000a4 delay
0000170c g     F .text	00000028 Controller::enterCopyMode()
00003a34  w    F .text	00000006 tpm0_isr
00004f78 g     F .fini	00000000 _fini
00003a34  w    F .text	00000006 i2s0_rx_isr
00000ae8 g     F .text	00000094 Transport::advancePPQN()
00003a34  w    F .text	00000006 uart4_error_isr
00003628 g     F .text	00000010 Print::print(long)
000022b0 g     F .text	0000009c usb_midi_write_packed
00000d08 g     F .text	000001c0 Paginator::changePage(int)
0000478c g     F .text	0000000c atexit
00003a34  w    F .text	00000006 can0_message_isr
000015f0 g     F .text	00000094 Controller::toggleMode()
1fff1180 g     O .data	00000004 _impure_ptr
00003a34  w    F .text	00000006 can1_message_isr
00003a34  w    F .text	00000006 nmi_isr
00000880 g     F .text	00000026 Led::Led(int, int)
0000046c g     F .text	0000008c Sequencer::Sequencer()
1fff1608 g     O .bss	00000004 usb_midi_handleTuneRequest
000007fc g     F .text	00000016 Piano::tick()
00004f6c g       .text	00000000 __preinit_array_end
00000f7c g     F .text	0000000a Step::toggle()
00003a34  w    F .text	00000006 sdhc_isr
00001090 g     F .text	0000003c Step::controlSwing(int)
1fff1a93 g     O .bss	00000001 usb_midi_msg_channel
0000099c g     F .text	00000002 setup
00004f08 g     O .text	00000054 usb_descriptor_list
00002840 g     F .text	0000003c usb_rx
00000880 g     F .text	00000026 Led::Led(int, int)
00000ec8 g     F .text	00000030 Paginator::debugPages()
00003a34  w    F .text	00000006 dma_ch10_isr
1fff1600 g     O .bss	00000004 usb_midi_handleStart
00003a34  w    F .text	00000006 uart0_error_isr
000017ec g     F .text	00000006 Controller::getSwingMode()
00000a04 g     F .text	00000022 Note::play(Step*, int*)
000027b4 g     F .text	00000040 usb_malloc
0000083c g     F .text	00000044 Piano::transpose(int)
00003a34  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00001b34 g     F .text	00000048 usb_serial_write_buffer_free
00003a34  w    F .text	00000006 enet_timer_isr
1fff1594 g       .data	00000000 _edata
00003a34  w    F .text	00000006 i2s0_tx_isr
00003a34  w    F .text	00000006 adc1_isr
0000100c g     F .text	00000040 Step::controlVelocity(int)
00003570  w    F .text	00000004 usb_serial_class::availableForWrite()
00003a34  w    F .text	00000006 cmp0_isr
1fff15d0 g     O .bss	00000004 usb_midi_handleClock
00003d94 g     F .text	0000004c ultoa
000006c4 g     F .text	00000056 Button::onHoldRelease()
000036cc g     F .text	00000004 operator new(unsigned int)
00003f7c g     F .text	00000044 EventResponder::runFromInterrupt()
1fff158c g     O .data	00000004 __malloc_trim_threshold
00003560  w    F .text	00000004 usb_serial_class::peek()
000017e4 g     F .text	00000006 Controller::getChanceMode()
1fff15b4 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff15ec g     O .bss	00000004 usb_midi_handlePitchChange
00003a34  w    F .text	00000006 pit_isr
1fff1604 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00003a34  w    F .text	00000006 dac0_isr
00004f6c g       .text	00000000 __init_array_start
00003a34  w    F .text	00000006 can1_tx_warn_isr
00001e40 g     F .text	000000fc analogRead
1fff1a94 g     O .bss	00000122 usb_midi_msg_sysex
00003b00 g     F .text	0000010c uart0_status_isr
00003a34  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d20 g     O .data	00000018 usb_string_product_name_default
00003a34  w    F .text	00000006 dma_ch1_isr
00000b7c g     F .text	0000003c Transport::startPPQN()
0000287c g     F .text	0000002c usb_tx_packet_count
00003a34  w    F .text	00000006 dma_ch5_isr
00003a34  w    F .text	00000006 can0_rx_warn_isr
00003a34  w    F .text	00000006 can0_tx_warn_isr
000036f0 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00003a78 g     F .text	00000034 kinetis_hsrun_disable
00004f6c g       .text	00000000 __preinit_array_start
1fff15b0 g     O .bss	00000004 sequencer
00003edc  w    F .text	00000002 serialEvent3()
1fff1620 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
00003a34  w    F .text	00000006 cmp2_isr
00003fc0 g     F .text	00000004 pendablesrvreq_isr
00003a34  w    F .text	00000006 wakeup_isr
00000cec g     F .text	0000001c Paginator::setLeds(unsigned int)
00003a34  w    F .text	00000006 cmp3_isr
000035a8 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00000908 g     F .text	0000000c Led::off()
1fff15d8 g     O .bss	00000004 usb_midi_handleActiveSensing
00001778 g     F .text	00000028 Controller::enterSwingMode()
00003a34  w    F .text	00000006 tpm2_isr
00003a34  w    F .text	00000006 dma_ch0_isr
1fff0d3c  w    O .data	00000016 usb_string_serial_number
00003a34  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
  free(ptr);
}

void operator delete[](void * ptr)
{
  free(ptr);
       0:	... ....5:...9..
      10:	.9...9...9...9..
      20:	.9...9...9..5:..
      30:	5:...9...?...@..
      40:	5:..5:..5:..5:..
      50:	5:..5:..5:..5:..
      60:	5:..5:..5:..5:..
      70:	5:..5:..5:..5:..
      80:	5:..5:..5:..5:..
      90:	5:..5:..5:..5:..
      a0:	5:..5:..5:..5:..
      b0:	5:..5:..5:...;..
      c0:	5:...7..5:...>..
      d0:	5:...9..5:..5:..
      e0:	5:..5:..5:..5:..
      f0:	5:..5:..5:..5:..
     100:	5:..5:..5:..5:..
     110:	5:...*..5:..5:..
     120:	5:..5:..5:..5:..
     130:	5:..5:..5:..5:..
     140:	5:..5:...6..5:..
     150:	5:..5:..5:..5:..
     160:	5:..5:..5:..5:..
     170:	5:..5:..5:..5:..
     180:	5:..5:..5:..5:..
     190:	5:..5:..-<..5:..
     1a0:	5:..5:..5:..5:..
     1b0:	5:..5:..5:..5:..
     1c0:	5:..5:..5:..5:..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	3a3c <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	20fc <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	2000 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	2000 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	40e0 <__libc_init_array>

	startup_late_hook();
     33a:	bl	3a48 <startup_late_hook>
	main();
     33e:	bl	3640 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff1594
     374:	.word	0x00004f78
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff1594
     380:	.word	0x1fff1bc8
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1594
     42c:	.word	0x00000000
     430:	.word	0x00004f7c

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff1598
     460:	.word	0x00004f7c
     464:	.word	0x1fff1594
     468:	.word	0x00000000

0000046c <Sequencer::Sequencer()>:
#include "paginator.h"
#include "step.h"
#include "led.h"
#include "piano.h"

Sequencer::Sequencer () {
     46c:	push	{r3, r4, r5, r6, r7, lr}
     46e:	mov	r4, r0
  _controller = new Controller(this);
     470:	movs	r0, #88	; 0x58
     472:	bl	36cc <operator new(unsigned int)>
     476:	mov	r1, r4
     478:	mov	r5, r0
     47a:	bl	13ac <Controller::Controller(Sequencer*)>
     47e:	str	r5, [r4, #8]
  _transport = new Transport(this);
     480:	movs	r0, #20
     482:	bl	36cc <operator new(unsigned int)>
     486:	mov	r1, r4
     488:	mov	r5, r0
     48a:	bl	a84 <Transport::Transport(Sequencer*)>
     48e:	str	r5, [r4, #4]
  _paginator = new Paginator(this);
     490:	movs	r0, #80	; 0x50
     492:	bl	36cc <operator new(unsigned int)>
     496:	mov	r1, r4
     498:	mov	r5, r0
     49a:	bl	c50 <Paginator::Paginator(Sequencer*)>
     49e:	str	r5, [r4, #12]
  _piano = new Piano(this);
     4a0:	movs	r0, #120	; 0x78
     4a2:	bl	36cc <operator new(unsigned int)>
  _reversed = false;
     4a6:	movs	r5, #0

Sequencer::Sequencer () {
  _controller = new Controller(this);
  _transport = new Transport(this);
  _paginator = new Paginator(this);
  _piano = new Piano(this);
     4a8:	mov	r6, r0
     4aa:	mov	r1, r4
     4ac:	bl	7c4 <Piano::Piano(Sequencer*)>
     4b0:	str	r6, [r4, #52]	; 0x34
  _reversed = false;
     4b2:	strb	r5, [r4, #0]
  _currentStep = 0;
     4b4:	str	r5, [r4, #48]	; 0x30
     4b6:	add.w	r6, r4, #12

  for (int i = 0; i < 4; i++) {
    _stepsEdit[i] = new Step(this);
     4ba:	movs	r0, #32
     4bc:	bl	36cc <operator new(unsigned int)>
     4c0:	mov	r1, r4
     4c2:	mov	r7, r0
     4c4:	bl	f60 <Step::Step(Sequencer*)>
     4c8:	str.w	r7, [r6, #4]!
    _stepsPlayback[i] = _stepsEdit[i];

    // creating steps in paginator memory
    // to prevent motion record bug in non existing pages
    // in the beggining
    Step * step = new Step(this);
     4cc:	movs	r0, #32
  _reversed = false;
  _currentStep = 0;

  for (int i = 0; i < 4; i++) {
    _stepsEdit[i] = new Step(this);
    _stepsPlayback[i] = _stepsEdit[i];
     4ce:	str	r7, [r6, #16]

    // creating steps in paginator memory
    // to prevent motion record bug in non existing pages
    // in the beggining
    Step * step = new Step(this);
     4d0:	bl	36cc <operator new(unsigned int)>
     4d4:	mov	r1, r4
     4d6:	mov	r7, r0
     4d8:	bl	f60 <Step::Step(Sequencer*)>
    _paginator->copyStep(step, _stepsEdit[i]);
     4dc:	ldr	r2, [r6, #0]
     4de:	ldr	r0, [r4, #12]
     4e0:	mov	r1, r7
     4e2:	bl	cc8 <Paginator::copyStep(Step*, Step*)>
    _paginator->_pages[0][i] = step;
     4e6:	adds	r2, r5, #4
     4e8:	ldr	r3, [r4, #12]
  _paginator = new Paginator(this);
  _piano = new Piano(this);
  _reversed = false;
  _currentStep = 0;

  for (int i = 0; i < 4; i++) {
     4ea:	adds	r5, #1
     4ec:	cmp	r5, #4
    // creating steps in paginator memory
    // to prevent motion record bug in non existing pages
    // in the beggining
    Step * step = new Step(this);
    _paginator->copyStep(step, _stepsEdit[i]);
    _paginator->_pages[0][i] = step;
     4ee:	str.w	r7, [r3, r2, lsl #2]
  _paginator = new Paginator(this);
  _piano = new Piano(this);
  _reversed = false;
  _currentStep = 0;

  for (int i = 0; i < 4; i++) {
     4f2:	bne.n	4ba <Sequencer::Sequencer()+0x4e>
    // in the beggining
    Step * step = new Step(this);
    _paginator->copyStep(step, _stepsEdit[i]);
    _paginator->_pages[0][i] = step;
  };
};
     4f4:	mov	r0, r4
     4f6:	pop	{r3, r4, r5, r6, r7, pc}

000004f8 <Sequencer::tick()>:

// todo: implement sequencer motion record
// todo: implement multi midi channel

void Sequencer::tick() {
     4f8:	push	{r4, lr}
     4fa:	mov	r4, r0
  _transport->tick();
     4fc:	ldr	r0, [r0, #4]
     4fe:	bl	c38 <Transport::tick()>
  _controller->tick();
     502:	ldr	r0, [r4, #8]
}
     504:	ldmia.w	sp!, {r4, lr}
// todo: implement sequencer motion record
// todo: implement multi midi channel

void Sequencer::tick() {
  _transport->tick();
  _controller->tick();
     508:	b.w	156c <Controller::tick()>

0000050c <Sequencer::reverse()>:
}

void Sequencer::reverse() {
  _reversed = !_reversed;
     50c:	ldrb	r3, [r0, #0]
     50e:	eor.w	r3, r3, #1
     512:	strb	r3, [r0, #0]
     514:	bx	lr
     516:	nop

00000518 <Sequencer::step()>:
}

void Sequencer::step () {  
     518:	push	{r3, r4, r5, lr}
     51a:	mov	r4, r0
  if (!_controller->getShiftMode()) {
     51c:	ldr	r0, [r0, #8]
     51e:	bl	1804 <Controller::getShiftMode()>
     522:	cbz	r0, 54a <Sequencer::step()+0x32>
    _controller->_leds[_currentStep]->blink();
  }

  if (!_reversed) {
     524:	ldrb	r5, [r4, #0]
     526:	cbnz	r5, 534 <Sequencer::step()+0x1c>
    _currentStep++;
     528:	ldr	r3, [r4, #48]	; 0x30
     52a:	adds	r3, #1

    if (_currentStep > 3) {
     52c:	cmp	r3, #3
  if (!_controller->getShiftMode()) {
    _controller->_leds[_currentStep]->blink();
  }

  if (!_reversed) {
    _currentStep++;
     52e:	str	r3, [r4, #48]	; 0x30

    if (_currentStep > 3) {
     530:	bgt.n	55c <Sequencer::step()+0x44>
     532:	pop	{r3, r4, r5, pc}
      _paginator->getNextPlaybackPage(1);
      _currentStep = 0;
    }
  } else {
    _currentStep--;
     534:	ldr	r1, [r4, #48]	; 0x30
     536:	subs	r1, #1

    if (_currentStep == -1) {
     538:	adds	r3, r1, #1
    if (_currentStep > 3) {
      _paginator->getNextPlaybackPage(1);
      _currentStep = 0;
    }
  } else {
    _currentStep--;
     53a:	str	r1, [r4, #48]	; 0x30

    if (_currentStep == -1) {
     53c:	bne.n	532 <Sequencer::step()+0x1a>
      _paginator->getNextPlaybackPage(-1);
     53e:	ldr	r0, [r4, #12]
     540:	bl	c70 <Paginator::getNextPlaybackPage(int)>
      _currentStep = 3;
     544:	movs	r3, #3
     546:	str	r3, [r4, #48]	; 0x30
    }
  }
};
     548:	b.n	532 <Sequencer::step()+0x1a>
  _reversed = !_reversed;
}

void Sequencer::step () {  
  if (!_controller->getShiftMode()) {
    _controller->_leds[_currentStep]->blink();
     54a:	ldr	r3, [r4, #48]	; 0x30
     54c:	ldr	r2, [r4, #8]
     54e:	adds	r3, #14
     550:	mov	r1, r0
     552:	ldr.w	r0, [r2, r3, lsl #2]
     556:	bl	8a8 <Led::blink(int)>
     55a:	b.n	524 <Sequencer::step()+0xc>

  if (!_reversed) {
    _currentStep++;

    if (_currentStep > 3) {
      _paginator->getNextPlaybackPage(1);
     55c:	movs	r1, #1
     55e:	ldr	r0, [r4, #12]
     560:	bl	c70 <Paginator::getNextPlaybackPage(int)>
      _currentStep = 0;
     564:	str	r5, [r4, #48]	; 0x30
     566:	pop	{r3, r4, r5, pc}

00000568 <Sequencer::resetStep()>:
    }
  }
};

void Sequencer::resetStep () {
  _currentStep = 0;
     568:	movs	r3, #0
     56a:	str	r3, [r0, #48]	; 0x30
     56c:	bx	lr
     56e:	nop

00000570 <Button::Button(int, int, Led*, bool, bool, Controller*)>:
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     570:	push	{r3, r4, r5, r6, r7, lr}
     572:	mov	r4, r0
  Led* led,
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
     574:	str	r1, [r0, #0]
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     576:	ldrb.w	r7, [sp, #24]
     57a:	ldrb.w	r6, [sp, #28]
     57e:	ldr	r5, [sp, #32]
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 300;
  _led = led;
     580:	str	r3, [r0, #52]	; 0x34
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 300;
     582:	mov.w	r1, #300	; 0x12c
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
     586:	str	r2, [r0, #24]
  _reverseButton = reverseButton;
  _holdThreshold = 300;
  _led = led;
  _controller = controller;

  pinMode(pin, INPUT);
     588:	uxtb	r0, r2
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 300;
     58a:	str	r1, [r4, #44]	; 0x2c
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
     58c:	strb	r7, [r4, #16]
  _reverseButton = reverseButton;
     58e:	strb	r6, [r4, #17]
  _holdThreshold = 300;
  _led = led;
  _controller = controller;
     590:	str	r5, [r4, #48]	; 0x30

  pinMode(pin, INPUT);
     592:	movs	r1, #0
     594:	bl	204c <pinMode>
};
     598:	mov	r0, r4
     59a:	pop	{r3, r4, r5, r6, r7, pc}

0000059c <Button::onPressWhileHolding()>:
// in the tick function, i have to take a look at refactoring this
// im handling only shift and reverse
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
     59c:	ldr	r3, [r0, #4]
     59e:	cmp	r3, #1
     5a0:	beq.n	5a4 <Button::onPressWhileHolding()+0x8>
     5a2:	bx	lr
     5a4:	mov	r3, r0
// and maybe i dont need this function, there is
// also a redundancy with _state == HIGH 
// in the tick function, i have to take a look at refactoring this
// im handling only shift and reverse
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;
     5a6:	ldr	r0, [r0, #48]	; 0x30

  if (_state == HIGH && _shiftButton) {
     5a8:	ldrb	r2, [r3, #16]
// and maybe i dont need this function, there is
// also a redundancy with _state == HIGH 
// in the tick function, i have to take a look at refactoring this
// im handling only shift and reverse
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;
     5aa:	ldr	r1, [r0, #80]	; 0x50
// this is actually on press while hold
// and maybe i dont need this function, there is
// also a redundancy with _state == HIGH 
// in the tick function, i have to take a look at refactoring this
// im handling only shift and reverse
void Button::onPressWhileHolding () {
     5ac:	push	{r4, lr}
  Paginator * paginator = _controller->_sequencer->_paginator;
     5ae:	ldr	r4, [r1, #12]

  if (_state == HIGH && _shiftButton) {
     5b0:	cbnz	r2, 5b8 <Button::onPressWhileHolding()+0x1c>
    if (_controller->getShiftMode()) {
      paginator->previousPage();
    }
  } else if (_state == HIGH && _reverseButton) {
     5b2:	ldrb	r3, [r3, #17]
     5b4:	cbnz	r3, 5ca <Button::onPressWhileHolding()+0x2e>
     5b6:	pop	{r4, pc}
// im handling only shift and reverse
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
     5b8:	bl	1804 <Controller::getShiftMode()>
     5bc:	cmp	r0, #0
     5be:	beq.n	5b6 <Button::onPressWhileHolding()+0x1a>
      paginator->previousPage();
     5c0:	mov	r0, r4
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
      paginator->nextPage();
    }
  }
}
     5c2:	ldmia.w	sp!, {r4, lr}
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
      paginator->previousPage();
     5c6:	b.w	f2c <Paginator::previousPage()>
    }
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
     5ca:	bl	1804 <Controller::getShiftMode()>
     5ce:	cmp	r0, #0
     5d0:	beq.n	5b6 <Button::onPressWhileHolding()+0x1a>
      paginator->nextPage();
     5d2:	mov	r0, r4
    }
  }
}
     5d4:	ldmia.w	sp!, {r4, lr}
    if (_controller->getShiftMode()) {
      paginator->previousPage();
    }
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
      paginator->nextPage();
     5d8:	b.w	ef8 <Paginator::nextPage()>

000005dc <Button::onRelease()>:
    }
  }
}

void Button::onRelease () {
     5dc:	push	{r4, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5de:	ldr	r3, [pc, #116]	; (654 <Button::onRelease()+0x78>)
  if (timeSincePress() < _holdThreshold) {
     5e0:	ldr	r1, [r0, #36]	; 0x24
     5e2:	ldr	r3, [r3, #0]
     5e4:	ldr	r2, [r0, #44]	; 0x2c
      paginator->nextPage();
    }
  }
}

void Button::onRelease () {
     5e6:	sub	sp, #8
     5e8:	str	r3, [sp, #4]
	return ret;
     5ea:	ldr	r3, [sp, #4]
  if (timeSincePress() < _holdThreshold) {
     5ec:	subs	r3, r3, r1
     5ee:	cmp	r2, r3
     5f0:	bls.n	612 <Button::onRelease()+0x36>
    if (_shiftButton && !_controller->getShiftMode()) {
     5f2:	ldrb	r3, [r0, #16]
     5f4:	mov	r4, r0
     5f6:	cbnz	r3, 616 <Button::onRelease()+0x3a>
      _controller->toggleMode();
    } else if (_reverseButton && !_controller->getShiftMode()) {
     5f8:	ldrb	r3, [r0, #17]
     5fa:	cbz	r3, 62a <Button::onRelease()+0x4e>
     5fc:	ldr	r0, [r4, #48]	; 0x30
     5fe:	bl	1804 <Controller::getShiftMode()>
     602:	cbnz	r0, 64c <Button::onRelease()+0x70>
      // todo: make reverse wait until current page is done
      _controller->_sequencer->reverse();
     604:	ldr	r3, [r4, #48]	; 0x30
     606:	ldr	r0, [r3, #80]	; 0x50
     608:	bl	50c <Sequencer::reverse()>
      _led->toggle();
     60c:	ldr	r0, [r4, #52]	; 0x34
     60e:	bl	8dc <Led::toggle()>
    } else if (!_reverseButton && !_shiftButton) {
      _led->toggle();
      _controller->_sequencer->_stepsEdit[_id - 1]->toggle();
    }
  } 
};
     612:	add	sp, #8
     614:	pop	{r4, pc}
  }
}

void Button::onRelease () {
  if (timeSincePress() < _holdThreshold) {
    if (_shiftButton && !_controller->getShiftMode()) {
     616:	ldr	r0, [r0, #48]	; 0x30
     618:	bl	1804 <Controller::getShiftMode()>
     61c:	cbz	r0, 642 <Button::onRelease()+0x66>
      _controller->toggleMode();
    } else if (_reverseButton && !_controller->getShiftMode()) {
     61e:	ldrb	r3, [r4, #17]
     620:	cmp	r3, #0
     622:	bne.n	5fc <Button::onRelease()+0x20>
      // todo: make reverse wait until current page is done
      _controller->_sequencer->reverse();
      _led->toggle();
    } else if (!_reverseButton && !_shiftButton) {
     624:	ldrb	r3, [r4, #16]
     626:	cmp	r3, #0
     628:	bne.n	612 <Button::onRelease()+0x36>
      _led->toggle();
     62a:	ldr	r0, [r4, #52]	; 0x34
     62c:	bl	8dc <Led::toggle()>
      _controller->_sequencer->_stepsEdit[_id - 1]->toggle();
     630:	ldr	r2, [r4, #48]	; 0x30
     632:	ldr	r3, [r4, #0]
     634:	ldr	r2, [r2, #80]	; 0x50
     636:	adds	r3, #3
     638:	ldr.w	r0, [r2, r3, lsl #2]
     63c:	bl	f7c <Step::toggle()>
    }
  } 
};
     640:	b.n	612 <Button::onRelease()+0x36>
}

void Button::onRelease () {
  if (timeSincePress() < _holdThreshold) {
    if (_shiftButton && !_controller->getShiftMode()) {
      _controller->toggleMode();
     642:	ldr	r0, [r4, #48]	; 0x30
     644:	bl	15f0 <Controller::toggleMode()>
    } else if (!_reverseButton && !_shiftButton) {
      _led->toggle();
      _controller->_sequencer->_stepsEdit[_id - 1]->toggle();
    }
  } 
};
     648:	add	sp, #8
     64a:	pop	{r4, pc}
      _controller->toggleMode();
    } else if (_reverseButton && !_controller->getShiftMode()) {
      // todo: make reverse wait until current page is done
      _controller->_sequencer->reverse();
      _led->toggle();
    } else if (!_reverseButton && !_shiftButton) {
     64c:	ldrb	r3, [r4, #17]
     64e:	cmp	r3, #0
     650:	bne.n	612 <Button::onRelease()+0x36>
     652:	b.n	624 <Button::onRelease()+0x48>
     654:	.word	0x1fff15cc

00000658 <Button::onHold()>:
// i have to check if shift mode is true when holding _id 2 after
// changing it all to be ifs or a switch maybe is even better
// the problem is that copy mode is accessed through shift mode
// and swing mode is accessed through chance mode, which is also strange
void Button::onHold () {
  if (_id == 1) {
     658:	ldr	r3, [r0, #0]
     65a:	cmp	r3, #1
     65c:	beq.n	686 <Button::onHold()+0x2e>
    _controller->enterShiftMode();
  } else if (_id == 2 && _controller->getShiftMode()) {
     65e:	cmp	r3, #2
// there two ifs and then two else ifs and that is a bit strange
// i have to check if shift mode is true when holding _id 2 after
// changing it all to be ifs or a switch maybe is even better
// the problem is that copy mode is accessed through shift mode
// and swing mode is accessed through chance mode, which is also strange
void Button::onHold () {
     660:	push	{r4, lr}
     662:	mov	r4, r0
  if (_id == 1) {
    _controller->enterShiftMode();
  } else if (_id == 2 && _controller->getShiftMode()) {
     664:	beq.n	670 <Button::onHold()+0x18>
    _controller->enterCopyMode();
  } else if (_id == 5) {
     666:	cmp	r3, #5
     668:	beq.n	6b8 <Button::onHold()+0x60>
    _controller->enterChanceMode();
  } else if (_id == 6 && _controller->getChanceMode()) {
     66a:	cmp	r3, #6
     66c:	beq.n	68c <Button::onHold()+0x34>
     66e:	pop	{r4, pc}
// the problem is that copy mode is accessed through shift mode
// and swing mode is accessed through chance mode, which is also strange
void Button::onHold () {
  if (_id == 1) {
    _controller->enterShiftMode();
  } else if (_id == 2 && _controller->getShiftMode()) {
     670:	ldr	r0, [r0, #48]	; 0x30
     672:	bl	1804 <Controller::getShiftMode()>
     676:	cbnz	r0, 67c <Button::onHold()+0x24>
     678:	ldr	r3, [r4, #0]
     67a:	b.n	666 <Button::onHold()+0xe>
    _controller->enterCopyMode();
     67c:	ldr	r0, [r4, #48]	; 0x30
  } else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
  } else if (_id == 6 && !_controller->getSwingMode()) {
    _controller->enterMotionMode();
  }
}
     67e:	ldmia.w	sp!, {r4, lr}
// and swing mode is accessed through chance mode, which is also strange
void Button::onHold () {
  if (_id == 1) {
    _controller->enterShiftMode();
  } else if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
     682:	b.w	170c <Controller::enterCopyMode()>
// changing it all to be ifs or a switch maybe is even better
// the problem is that copy mode is accessed through shift mode
// and swing mode is accessed through chance mode, which is also strange
void Button::onHold () {
  if (_id == 1) {
    _controller->enterShiftMode();
     686:	ldr	r0, [r0, #48]	; 0x30
     688:	b.w	1684 <Controller::enterShiftMode()>
  } else if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
  } else if (_id == 5) {
    _controller->enterChanceMode();
  } else if (_id == 6 && _controller->getChanceMode()) {
     68c:	ldr	r0, [r4, #48]	; 0x30
     68e:	bl	17e4 <Controller::getChanceMode()>
     692:	cbnz	r0, 6ae <Button::onHold()+0x56>
    _controller->enterSwingMode();
  } else if (_id == 6 && !_controller->getSwingMode()) {
     694:	ldr	r3, [r4, #0]
     696:	cmp	r3, #6
     698:	bne.n	6c2 <Button::onHold()+0x6a>
     69a:	ldr	r0, [r4, #48]	; 0x30
     69c:	bl	17ec <Controller::getSwingMode()>
     6a0:	cmp	r0, #0
     6a2:	bne.n	66e <Button::onHold()+0x16>
    _controller->enterMotionMode();
     6a4:	ldr	r0, [r4, #48]	; 0x30
  }
}
     6a6:	ldmia.w	sp!, {r4, lr}
  } else if (_id == 5) {
    _controller->enterChanceMode();
  } else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
  } else if (_id == 6 && !_controller->getSwingMode()) {
    _controller->enterMotionMode();
     6aa:	b.w	17ac <Controller::enterMotionMode()>
  } else if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
  } else if (_id == 5) {
    _controller->enterChanceMode();
  } else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
     6ae:	ldr	r0, [r4, #48]	; 0x30
  } else if (_id == 6 && !_controller->getSwingMode()) {
    _controller->enterMotionMode();
  }
}
     6b0:	ldmia.w	sp!, {r4, lr}
  } else if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
  } else if (_id == 5) {
    _controller->enterChanceMode();
  } else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
     6b4:	b.w	1778 <Controller::enterSwingMode()>
  if (_id == 1) {
    _controller->enterShiftMode();
  } else if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
  } else if (_id == 5) {
    _controller->enterChanceMode();
     6b8:	ldr	r0, [r4, #48]	; 0x30
  } else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
  } else if (_id == 6 && !_controller->getSwingMode()) {
    _controller->enterMotionMode();
  }
}
     6ba:	ldmia.w	sp!, {r4, lr}
  if (_id == 1) {
    _controller->enterShiftMode();
  } else if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
  } else if (_id == 5) {
    _controller->enterChanceMode();
     6be:	b.w	173c <Controller::enterChanceMode()>
     6c2:	pop	{r4, pc}

000006c4 <Button::onHoldRelease()>:
// we still want to quit both modes, but if the user
// releases 2 but still holds 1, we want to stay in shift mode
// == behavior for chance mode and swing mode, maybe they
// could be refactored into 1
void Button::onHoldRelease () {
  if (_id == 1) {
     6c4:	ldr	r3, [r0, #0]
     6c6:	cmp	r3, #1
// both shift and copy. if user releases 1 but not 2 
// we still want to quit both modes, but if the user
// releases 2 but still holds 1, we want to stay in shift mode
// == behavior for chance mode and swing mode, maybe they
// could be refactored into 1
void Button::onHoldRelease () {
     6c8:	push	{r4, lr}
     6ca:	mov	r4, r0
  if (_id == 1) {
     6cc:	beq.n	6dc <Button::onHoldRelease()+0x18>
    _controller->exitShiftMode();

    if (_controller->getCopyMode()) {
      _controller->exitCopyMode();
    }
  } else if (_id == 2) {
     6ce:	cmp	r3, #2
     6d0:	beq.n	6ec <Button::onHoldRelease()+0x28>
    _controller->exitCopyMode();
  } else if (_id == 5) {
     6d2:	cmp	r3, #5
     6d4:	beq.n	700 <Button::onHoldRelease()+0x3c>
    _controller->exitChanceMode();

    if (_controller->getSwingMode()) {
      _controller->exitSwingMode();
    }
  } else if (_id == 6) {
     6d6:	cmp	r3, #6
     6d8:	beq.n	6f6 <Button::onHoldRelease()+0x32>
     6da:	pop	{r4, pc}
// releases 2 but still holds 1, we want to stay in shift mode
// == behavior for chance mode and swing mode, maybe they
// could be refactored into 1
void Button::onHoldRelease () {
  if (_id == 1) {
    _controller->exitShiftMode();
     6dc:	ldr	r0, [r0, #48]	; 0x30
     6de:	bl	16e4 <Controller::exitShiftMode()>

    if (_controller->getCopyMode()) {
     6e2:	ldr	r0, [r4, #48]	; 0x30
     6e4:	bl	17fc <Controller::getCopyMode()>
     6e8:	cmp	r0, #0
     6ea:	beq.n	6da <Button::onHoldRelease()+0x16>
      _controller->exitCopyMode();
    }
  } else if (_id == 2) {
    _controller->exitCopyMode();
     6ec:	ldr	r0, [r4, #48]	; 0x30
      _controller->exitSwingMode();
    }
  } else if (_id == 6) {
    _controller->exitMotionMode();
  }
};
     6ee:	ldmia.w	sp!, {r4, lr}

    if (_controller->getCopyMode()) {
      _controller->exitCopyMode();
    }
  } else if (_id == 2) {
    _controller->exitCopyMode();
     6f2:	b.w	1734 <Controller::exitCopyMode()>

    if (_controller->getSwingMode()) {
      _controller->exitSwingMode();
    }
  } else if (_id == 6) {
    _controller->exitMotionMode();
     6f6:	ldr	r0, [r0, #48]	; 0x30
  }
};
     6f8:	ldmia.w	sp!, {r4, lr}

    if (_controller->getSwingMode()) {
      _controller->exitSwingMode();
    }
  } else if (_id == 6) {
    _controller->exitMotionMode();
     6fc:	b.w	17d8 <Controller::exitMotionMode()>
      _controller->exitCopyMode();
    }
  } else if (_id == 2) {
    _controller->exitCopyMode();
  } else if (_id == 5) {
    _controller->exitChanceMode();
     700:	ldr	r0, [r0, #48]	; 0x30
     702:	bl	176c <Controller::exitChanceMode()>

    if (_controller->getSwingMode()) {
     706:	ldr	r0, [r4, #48]	; 0x30
     708:	bl	17ec <Controller::getSwingMode()>
     70c:	cmp	r0, #0
     70e:	beq.n	6da <Button::onHoldRelease()+0x16>
      _controller->exitSwingMode();
     710:	ldr	r0, [r4, #48]	; 0x30
    }
  } else if (_id == 6) {
    _controller->exitMotionMode();
  }
};
     712:	ldmia.w	sp!, {r4, lr}
    _controller->exitCopyMode();
  } else if (_id == 5) {
    _controller->exitChanceMode();

    if (_controller->getSwingMode()) {
      _controller->exitSwingMode();
     716:	b.w	17a0 <Controller::exitSwingMode()>
     71a:	nop

0000071c <Button::tick()>:
  } else if (_id == 6) {
    _controller->exitMotionMode();
  }
};

void Button::tick () {
     71c:	push	{r4, r5, lr}
     71e:	mov	r4, r0
     720:	sub	sp, #28
  _current = digitalRead(_pin);
     722:	ldrb	r0, [r0, #24]
     724:	bl	2030 <digitalRead>
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     728:	cmp	r0, #1
    _controller->exitMotionMode();
  }
};

void Button::tick () {
  _current = digitalRead(_pin);
     72a:	str	r0, [r4, #28]
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     72c:	beq.n	768 <Button::tick()+0x4c>
     72e:	ldr	r3, [r4, #36]	; 0x24
     730:	ldr	r5, [pc, #140]	; (7c0 <Button::tick()+0xa4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     732:	ldr	r2, [r5, #0]
     734:	str	r2, [sp, #16]
	return ret;
     736:	ldr	r2, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     738:	ldr	r1, [pc, #132]	; (7c0 <Button::tick()+0xa4>)
    };
    //Serial.println("onHold");
    onHold();
  }

  if (timeSincePress() > 10) {    
     73a:	subs	r2, r2, r3
     73c:	cmp	r2, #10
     73e:	bls.n	762 <Button::tick()+0x46>
    if (_state != _current) {
     740:	ldr	r2, [r4, #4]
     742:	cmp	r0, r2
     744:	beq.n	762 <Button::tick()+0x46>
      _state = _current;

      if (_state == HIGH) {
     746:	cmp	r0, #1
    onHold();
  }

  if (timeSincePress() > 10) {    
    if (_state != _current) {
      _state = _current;
     748:	str	r0, [r4, #4]

      if (_state == HIGH) {
     74a:	beq.n	7b4 <Button::tick()+0x98>
     74c:	ldr	r2, [r1, #0]
     74e:	str	r2, [sp, #20]
	return ret;
     750:	ldr	r2, [sp, #20]
        //Serial.println("onPressWhileHolding");      
        onPressWhileHolding();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
     752:	ldr	r1, [r4, #44]	; 0x2c
     754:	subs	r3, r2, r3
     756:	cmp	r1, r3
          //Serial.println("onHoldRelease");
          onHoldRelease();
     758:	mov	r0, r4
      if (_state == HIGH) {
        //Serial.println("onPressWhileHolding");      
        onPressWhileHolding();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
     75a:	bls.n	7a8 <Button::tick()+0x8c>
          //Serial.println("onHoldRelease");
          onHoldRelease();
        } else {
          onRelease();
     75c:	bl	5dc <Button::onRelease()>
     760:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     762:	str	r0, [r4, #32]
};
     764:	add	sp, #28
     766:	pop	{r4, r5, pc}
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     768:	ldr	r2, [r4, #32]
     76a:	cbz	r2, 79c <Button::tick()+0x80>

  _previous = _current;
};

bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
     76c:	cmp	r2, #1
     76e:	ldr	r3, [r4, #36]	; 0x24
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     770:	ldr	r5, [pc, #76]	; (7c0 <Button::tick()+0xa4>)
     772:	bne.n	732 <Button::tick()+0x16>
     774:	ldr	r2, [r5, #0]
     776:	str	r2, [sp, #12]
	return ret;
     778:	ldr	r2, [sp, #12]

  if (currentWentUp()) {
    _firstTime = millis();
  }

  if (currentIsUp() && timeSincePress() > _holdThreshold) {
     77a:	ldr	r1, [r4, #44]	; 0x2c
     77c:	subs	r2, r2, r3
     77e:	cmp	r1, r2
     780:	bcs.n	732 <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     782:	ldr	r3, [r5, #0]
     784:	str	r3, [sp, #8]
	return ret;
     786:	ldr	r3, [sp, #8]
    _firstHoldTime = millis();
     788:	str	r3, [r4, #40]	; 0x28
    if (!_controller->getShiftMode()) {
     78a:	ldr	r0, [r4, #48]	; 0x30
     78c:	bl	1804 <Controller::getShiftMode()>
      //Serial.println("shiftMode")
    };
    //Serial.println("onHold");
    onHold();
     790:	mov	r0, r4
     792:	bl	658 <Button::onHold()>
     796:	ldr	r0, [r4, #28]
     798:	ldr	r3, [r4, #36]	; 0x24
     79a:	b.n	732 <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     79c:	ldr	r5, [pc, #32]	; (7c0 <Button::tick()+0xa4>)
     79e:	ldr	r3, [r5, #0]
     7a0:	str	r3, [sp, #4]
	return ret;
     7a2:	ldr	r3, [sp, #4]

void Button::tick () {
  _current = digitalRead(_pin);

  if (currentWentUp()) {
    _firstTime = millis();
     7a4:	str	r3, [r4, #36]	; 0x24
     7a6:	b.n	732 <Button::tick()+0x16>
        onPressWhileHolding();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
          //Serial.println("onHoldRelease");
          onHoldRelease();
     7a8:	bl	6c4 <Button::onHoldRelease()>
     7ac:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     7ae:	str	r0, [r4, #32]
};
     7b0:	add	sp, #28
     7b2:	pop	{r4, r5, pc}
    if (_state != _current) {
      _state = _current;

      if (_state == HIGH) {
        //Serial.println("onPressWhileHolding");      
        onPressWhileHolding();
     7b4:	mov	r0, r4
     7b6:	bl	59c <Button::onPressWhileHolding()>
     7ba:	ldr	r0, [r4, #28]
     7bc:	b.n	762 <Button::tick()+0x46>
     7be:	nop
     7c0:	.word	0x1fff15cc

000007c4 <Piano::Piano(Sequencer*)>:
#include "note.h"
#include "piano.h"
#include "step.h"
#include "sequencer.h"

Piano::Piano (Sequencer* sequencer) {
     7c4:	push	{r3, r4, r5, r6, r7, lr}
     7c6:	movs	r2, #96	; 0x60
     7c8:	mov	r6, r0
     7ca:	mov	r4, r1
     7cc:	adds	r0, #20
     7ce:	ldr	r1, [pc, #40]	; (7f8 <Piano::Piano(Sequencer*)+0x34>)
     7d0:	bl	1814 <memcpy>
  _sequencer = sequencer;

  _currentScale = 0;
     7d4:	movs	r3, #0
#include "piano.h"
#include "step.h"
#include "sequencer.h"

Piano::Piano (Sequencer* sequencer) {
  _sequencer = sequencer;
     7d6:	str	r4, [r6, #16]

  _currentScale = 0;
     7d8:	str	r3, [r6, #116]	; 0x74
     7da:	subs	r4, r6, #4
     7dc:	add.w	r7, r6, #12

  for (int i = 0; i < 4; i++) {
    _notes[i] = new Note();
     7e0:	movs	r0, #20
     7e2:	bl	36cc <operator new(unsigned int)>
     7e6:	mov	r5, r0
     7e8:	bl	9c4 <Note::Note()>
     7ec:	str.w	r5, [r4, #4]!
Piano::Piano (Sequencer* sequencer) {
  _sequencer = sequencer;

  _currentScale = 0;

  for (int i = 0; i < 4; i++) {
     7f0:	cmp	r4, r7
     7f2:	bne.n	7e0 <Piano::Piano(Sequencer*)+0x1c>
    _notes[i] = new Note();
  } 
};
     7f4:	mov	r0, r6
     7f6:	pop	{r3, r4, r5, r6, r7, pc}
     7f8:	.word	0x00004ad0

000007fc <Piano::tick()>:

void Piano::tick () {
     7fc:	push	{r3, r4, r5, lr}
     7fe:	subs	r4, r0, #4
     800:	add.w	r5, r0, #12
  for (int i = 0; i < 4; i++) {
    _notes[i]->tick();
     804:	ldr.w	r0, [r4, #4]!
     808:	bl	a58 <Note::tick()>
    _notes[i] = new Note();
  } 
};

void Piano::tick () {
  for (int i = 0; i < 4; i++) {
     80c:	cmp	r4, r5
     80e:	bne.n	804 <Piano::tick()+0x8>
    _notes[i]->tick();
  } 
};
     810:	pop	{r3, r4, r5, pc}
     812:	nop

00000814 <Piano::play(Step*)>:
  }

  return 0; // <-- hack to get rid of a warning, hate my life
};

void Piano::play (Step* step) {
     814:	push	{r4, r5}
     816:	subs	r3, r0, #4
     818:	add.w	r2, r0, #12
  } 
};

Note* Piano::findNote() {
  for (int i = 0; i < 4; i++) {
    if (!_notes[i]->_active) {
     81c:	ldr.w	r4, [r3, #4]!
     820:	ldr	r5, [r4, #16]
     822:	cbz	r5, 82a <Piano::play(Step*)+0x16>
    _notes[i]->tick();
  } 
};

Note* Piano::findNote() {
  for (int i = 0; i < 4; i++) {
     824:	cmp	r3, r2
     826:	bne.n	81c <Piano::play(Step*)+0x8>
    if (!_notes[i]->_active) {
      return _notes[i];
    }
  }

  return 0; // <-- hack to get rid of a warning, hate my life
     828:	movs	r4, #0
};

void Piano::play (Step* step) {
  Note* note = findNote();
  auto& scale = _scale[step->pitchScale];
     82a:	ldr	r2, [r1, #4]
     82c:	add.w	r2, r0, r2, lsl #5
  note->play(step, scale);
     830:	adds	r2, #20
     832:	mov	r0, r4
};
     834:	pop	{r4, r5}
};

void Piano::play (Step* step) {
  Note* note = findNote();
  auto& scale = _scale[step->pitchScale];
  note->play(step, scale);
     836:	b.w	a04 <Note::play(Step*, int*)>
     83a:	nop

0000083c <Piano::transpose(int)>:

// todo: implement global transpose
void Piano::transpose (int value) {
  int newValue = value;

  if (value < 330) {
     83c:	cmp.w	r1, #330	; 0x14a
     840:	blt.n	854 <Piano::transpose(int)+0x18>
    newValue = 2;
  } else if (value < 660) {
     842:	cmp.w	r1, #660	; 0x294
     846:	bge.n	876 <Piano::transpose(int)+0x3a>
    newValue = 1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  if (_currentScale != newValue) {
     848:	ldr	r3, [r0, #116]	; 0x74
  int newValue = value;

  if (value < 330) {
    newValue = 2;
  } else if (value < 660) {
    newValue = 1;
     84a:	movs	r1, #1
  } else if (value <= 1023) {
    newValue = 0;
  }

  if (_currentScale != newValue) {
     84c:	cmp	r1, r3
     84e:	bne.n	85c <Piano::transpose(int)+0x20>
    for (size_t i = 0; i < 4; i++) {
      _sequencer->_stepsEdit[i]->pitchScale = newValue;
    }
  }

  _currentScale = newValue;
     850:	str	r1, [r0, #116]	; 0x74
     852:	bx	lr
// todo: implement global transpose
void Piano::transpose (int value) {
  int newValue = value;

  if (value < 330) {
    newValue = 2;
     854:	movs	r1, #2
    newValue = 1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  if (_currentScale != newValue) {
     856:	ldr	r3, [r0, #116]	; 0x74
     858:	cmp	r1, r3
     85a:	beq.n	850 <Piano::transpose(int)+0x14>
  auto& scale = _scale[step->pitchScale];
  note->play(step, scale);
};

// todo: implement global transpose
void Piano::transpose (int value) {
     85c:	push	{r4, r5}
     85e:	ldr	r3, [r0, #16]
    newValue = 0;
  }

  if (_currentScale != newValue) {
    for (size_t i = 0; i < 4; i++) {
      _sequencer->_stepsEdit[i]->pitchScale = newValue;
     860:	ldr	r5, [r3, #16]
     862:	ldr	r4, [r3, #20]
     864:	ldr	r2, [r3, #24]
     866:	ldr	r3, [r3, #28]
     868:	str	r1, [r5, #4]
     86a:	str	r1, [r4, #4]
     86c:	str	r1, [r2, #4]
    }
  }

  _currentScale = newValue;
};
     86e:	pop	{r4, r5}
    newValue = 0;
  }

  if (_currentScale != newValue) {
    for (size_t i = 0; i < 4; i++) {
      _sequencer->_stepsEdit[i]->pitchScale = newValue;
     870:	str	r1, [r3, #4]
    }
  }

  _currentScale = newValue;
     872:	str	r1, [r0, #116]	; 0x74
};
     874:	bx	lr

  if (value < 330) {
    newValue = 2;
  } else if (value < 660) {
    newValue = 1;
  } else if (value <= 1023) {
     876:	cmp.w	r1, #1024	; 0x400
    newValue = 0;
     87a:	it	lt
     87c:	movlt	r1, #0
     87e:	b.n	856 <Piano::transpose(int)+0x1a>

00000880 <Led::Led(int, int)>:
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
     880:	push	{r3, r4, r5, lr}
     882:	mov	r4, r0
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     884:	movs	r3, #0
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     886:	movs	r5, #75	; 0x4b
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
     888:	stmia.w	r0, {r1, r2}
  _state = state;
  _blinkLength = 75;
  _blinking = false;
  _blinkingCounter = 0;

  pinMode(_pin, OUTPUT);
     88c:	uxtb	r0, r1

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     88e:	strb	r3, [r4, #16]
  _blinkingCounter = 0;
     890:	str	r3, [r4, #20]
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     892:	str	r5, [r4, #12]
  _blinking = false;
  _blinkingCounter = 0;

  pinMode(_pin, OUTPUT);
     894:	movs	r1, #1
     896:	bl	204c <pinMode>
  digitalWrite(_pin, _state);
     89a:	ldrb	r0, [r4, #0]
     89c:	ldrb	r1, [r4, #4]
     89e:	bl	2024 <digitalWrite>
};
     8a2:	mov	r0, r4
     8a4:	pop	{r3, r4, r5, pc}
     8a6:	nop

000008a8 <Led::blink(int)>:

void Led::blink (int times) {
     8a8:	push	{r4, r5, r6, lr}
  digitalWrite(_pin, !digitalRead(_pin));
     8aa:	ldrb	r5, [r0, #0]

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     8ac:	sub	sp, #8
     8ae:	mov	r4, r0
  digitalWrite(_pin, !digitalRead(_pin));
     8b0:	mov	r0, r5

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     8b2:	mov	r6, r1
  digitalWrite(_pin, !digitalRead(_pin));
     8b4:	bl	2030 <digitalRead>
     8b8:	clz	r1, r0
     8bc:	lsrs	r1, r1, #5
     8be:	mov	r0, r5
     8c0:	bl	2024 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8c4:	ldr	r3, [pc, #16]	; (8d8 <Led::blink(int)+0x30>)
  _blinking = true;
  _blinkingCounter = times;
     8c6:	str	r6, [r4, #20]
     8c8:	ldr	r3, [r3, #0]
     8ca:	str	r3, [sp, #4]
	return ret;
     8cc:	ldr	r3, [sp, #4]
  _lastBlink = millis();  
     8ce:	str	r3, [r4, #8]
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
  digitalWrite(_pin, !digitalRead(_pin));
  _blinking = true;
     8d0:	movs	r2, #1
     8d2:	strb	r2, [r4, #16]
  _blinkingCounter = times;
  _lastBlink = millis();  
};
     8d4:	add	sp, #8
     8d6:	pop	{r4, r5, r6, pc}
     8d8:	.word	0x1fff15cc

000008dc <Led::toggle()>:

void Led::toggle () {
  _state = !_state;
     8dc:	ldr	r1, [r0, #4]
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     8de:	push	{r4, lr}
  _state = !_state;
     8e0:	clz	r1, r1
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     8e4:	mov	r4, r0
  _state = !_state;
     8e6:	lsrs	r1, r1, #5

  digitalWrite(_pin, _state);
     8e8:	ldrb	r0, [r0, #0]
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
  _state = !_state;
     8ea:	str	r1, [r4, #4]

  digitalWrite(_pin, _state);
     8ec:	bl	2024 <digitalWrite>

  if (_blinking) {
     8f0:	ldrb	r3, [r4, #16]
     8f2:	cbnz	r3, 8f6 <Led::toggle()+0x1a>
     8f4:	pop	{r4, pc}
    digitalWrite(_pin, !_state);
     8f6:	ldr	r1, [r4, #4]
     8f8:	ldrb	r0, [r4, #0]
     8fa:	clz	r1, r1
     8fe:	lsrs	r1, r1, #5
  }
};
     900:	ldmia.w	sp!, {r4, lr}
  _state = !_state;

  digitalWrite(_pin, _state);

  if (_blinking) {
    digitalWrite(_pin, !_state);
     904:	b.w	2024 <digitalWrite>

00000908 <Led::off()>:
  }
};

void Led::off () {
  _blinking = false;
     908:	movs	r1, #0
     90a:	strb	r1, [r0, #16]
  _state = 0;
     90c:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     90e:	ldrb	r0, [r0, #0]
     910:	b.w	2024 <digitalWrite>

00000914 <Led::on()>:
}

void Led::on () {
  _blinking = false;
     914:	movs	r3, #0
  _state = 1;
     916:	movs	r1, #1
  _state = 0;
  digitalWrite(_pin, _state);
}

void Led::on () {
  _blinking = false;
     918:	strb	r3, [r0, #16]
  _state = 1;
     91a:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     91c:	ldrb	r0, [r0, #0]
     91e:	b.w	2024 <digitalWrite>
     922:	nop

00000924 <Led::tick()>:

bool Led::blinkTimePassed () {
  return millis() - _lastBlink > _blinkLength;
};

void Led::tick () {
     924:	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     926:	ldr	r5, [pc, #112]	; (998 <Led::tick()+0x74>)
     928:	sub	sp, #16
     92a:	ldr	r3, [r5, #0]
     92c:	str	r3, [sp, #0]
	return ret;
     92e:	ldr	r2, [sp, #0]
  // hack
  if (millis() < 3000) return; 
     930:	movw	r3, #2999	; 0xbb7
     934:	cmp	r2, r3
     936:	bls.n	962 <Led::tick()+0x3e>

  if (_blinking && blinkTimePassed()) {
     938:	ldrb	r3, [r0, #16]
     93a:	mov	r4, r0
     93c:	cbnz	r3, 966 <Led::tick()+0x42>
    digitalWrite(_pin, !digitalRead(_pin));
    _blinking = false;
    _lastBlink = millis();        
  }

  if (!_blinking && _blinkingCounter > 0 && blinkTimePassed()) {
     93e:	ldr	r1, [r4, #20]
     940:	cmp	r1, #0
     942:	ble.n	962 <Led::tick()+0x3e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     944:	ldr	r3, [r5, #0]
     946:	str	r3, [sp, #12]
	return ret;
     948:	ldr	r3, [sp, #12]
     94a:	ldr	r0, [r4, #8]
     94c:	ldr	r2, [r4, #12]
     94e:	subs	r3, r3, r0
     950:	cmp	r3, r2
     952:	bls.n	962 <Led::tick()+0x3e>
    blink(_blinkingCounter - 1);
     954:	subs	r1, #1
     956:	mov	r0, r4
     958:	bl	8a8 <Led::blink(int)>
    _blinkingCounter--;
     95c:	ldr	r3, [r4, #20]
     95e:	subs	r3, #1
     960:	str	r3, [r4, #20]
  }
};
     962:	add	sp, #16
     964:	pop	{r4, r5, r6, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     966:	ldr	r3, [r5, #0]
     968:	str	r3, [sp, #8]
	return ret;
     96a:	ldr	r3, [sp, #8]

void Led::tick () {
  // hack
  if (millis() < 3000) return; 

  if (_blinking && blinkTimePassed()) {
     96c:	ldr	r1, [r0, #8]
     96e:	ldr	r2, [r0, #12]
     970:	subs	r3, r3, r1
     972:	cmp	r3, r2
     974:	bls.n	962 <Led::tick()+0x3e>
    digitalWrite(_pin, !digitalRead(_pin));
     976:	ldrb	r6, [r0, #0]
     978:	mov	r0, r6
     97a:	bl	2030 <digitalRead>
     97e:	clz	r1, r0
     982:	lsrs	r1, r1, #5
     984:	mov	r0, r6
     986:	bl	2024 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     98a:	ldr	r3, [r5, #0]
     98c:	str	r3, [sp, #4]
	return ret;
     98e:	ldr	r3, [sp, #4]
    _blinking = false;
    _lastBlink = millis();        
     990:	str	r3, [r4, #8]
  // hack
  if (millis() < 3000) return; 

  if (_blinking && blinkTimePassed()) {
    digitalWrite(_pin, !digitalRead(_pin));
    _blinking = false;
     992:	movs	r3, #0
     994:	strb	r3, [r4, #16]
     996:	b.n	93e <Led::tick()+0x1a>
     998:	.word	0x1fff15cc

0000099c <setup>:
// channel, this would be cool to program
// for example drum machines or maybe more 
// complex polyphonic stuff
Sequencer* sequencer = new Sequencer();

void setup() {
     99c:	bx	lr
     99e:	nop

000009a0 <loop>:
  Serial.begin(9600); 
}

void loop() {
  sequencer->tick();
     9a0:	ldr	r3, [pc, #4]	; (9a8 <loop+0x8>)
     9a2:	ldr	r0, [r3, #0]
     9a4:	b.w	4f8 <Sequencer::tick()>
     9a8:	.word	0x1fff15b0

000009ac <_GLOBAL__sub_I_sequencer>:
     9ac:	push	{r4, lr}
// but actually many tracks with each one 
// having a sequencer but all in the same
// channel, this would be cool to program
// for example drum machines or maybe more 
// complex polyphonic stuff
Sequencer* sequencer = new Sequencer();
     9ae:	movs	r0, #56	; 0x38
     9b0:	bl	36cc <operator new(unsigned int)>
     9b4:	mov	r4, r0
     9b6:	bl	46c <Sequencer::Sequencer()>
     9ba:	ldr	r3, [pc, #4]	; (9c0 <_GLOBAL__sub_I_sequencer+0x14>)
     9bc:	str	r4, [r3, #0]
     9be:	pop	{r4, pc}
     9c0:	.word	0x1fff15b0

000009c4 <Note::Note()>:
bool Note::isActive() {
  return _active;
};

void Note::reset() {
  _length = 0;
     9c4:	movs	r2, #0
     9c6:	str	r2, [r0, #8]
  _pitch = 0;
     9c8:	str	r2, [r0, #0]
  _velocity = 0;
     9ca:	str	r2, [r0, #4]
  _channel = 0;
     9cc:	str	r2, [r0, #12]
  _active = false;
     9ce:	str	r2, [r0, #16]
#include "step.h"
#include "note.h"

Note::Note () {
  reset();
};
     9d0:	bx	lr
     9d2:	nop

000009d4 <Note::noteOn(unsigned char, unsigned char, unsigned char)>:
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     9d4:	subs	r1, #1
// First parameter is the event type (0x09 = note on, 0x08 = note off).
// Second parameter is note-on/note-off, combined with the channel.
// Channel can be anything between 0-15. Typically reported to the user as 1-16.
// Third parameter is the note number (48 = middle C).
// Fourth parameter is the velocity (64 = normal, 127 = fastest).
void Note::noteOn(byte channel, byte pitch, byte velocity) {
     9d6:	push	{r3, lr}
     9d8:	lsls	r1, r1, #8
     9da:	lsls	r3, r3, #24
     9dc:	and.w	r1, r1, #3840	; 0xf00
     9e0:	and.w	r3, r3, #2130706432	; 0x7f000000
     9e4:	orrs	r3, r1
     9e6:	lsls	r2, r2, #16
     9e8:	orr.w	r3, r3, #36864	; 0x9000
     9ec:	orr.w	r3, r3, #9
     9f0:	and.w	r0, r2, #8323072	; 0x7f0000
     9f4:	orrs	r0, r3
     9f6:	bl	22b0 <usb_midi_write_packed>
  usbMIDI.sendNoteOn(pitch, velocity, channel);
  usbMIDI.send_now();
};
     9fa:	ldmia.w	sp!, {r3, lr}
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     9fe:	b.w	234c <usb_midi_flush_output>
     a02:	nop

00000a04 <Note::play(Step*, int*)>:
  _velocity = 0;
  _channel = 0;
  _active = false;
};

void Note::play(Step* step, int scale[3]) {
     a04:	push	{r4, r5}
  _active = true;
  _length = step->length;
     a06:	ldr	r5, [r1, #16]
  _pitch = scale[step->pitchGrade];
     a08:	ldr	r3, [r1, #8]
  _active = false;
};

void Note::play(Step* step, int scale[3]) {
  _active = true;
  _length = step->length;
     a0a:	str	r5, [r0, #8]
  _channel = 0;
  _active = false;
};

void Note::play(Step* step, int scale[3]) {
  _active = true;
     a0c:	movs	r5, #1
     a0e:	str	r5, [r0, #16]
  _length = step->length;
  _pitch = scale[step->pitchGrade];
     a10:	ldr.w	r2, [r2, r3, lsl #2]
  _velocity = step->velocity;
     a14:	ldr	r3, [r1, #12]
     a16:	str	r3, [r0, #4]
};

void Note::play(Step* step, int scale[3]) {
  _active = true;
  _length = step->length;
  _pitch = scale[step->pitchGrade];
     a18:	str	r2, [r0, #0]
  _velocity = step->velocity;
  noteOn(_channel, _pitch, _velocity);
     a1a:	uxtb	r3, r3
     a1c:	uxtb	r2, r2
     a1e:	ldrb	r1, [r0, #12]
};
     a20:	pop	{r4, r5}
void Note::play(Step* step, int scale[3]) {
  _active = true;
  _length = step->length;
  _pitch = scale[step->pitchGrade];
  _velocity = step->velocity;
  noteOn(_channel, _pitch, _velocity);
     a22:	b.w	9d4 <Note::noteOn(unsigned char, unsigned char, unsigned char)>
     a26:	nop

00000a28 <Note::noteOff(unsigned char, unsigned char, unsigned char)>:
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     a28:	subs	r1, #1
void Note::noteOn(byte channel, byte pitch, byte velocity) {
  usbMIDI.sendNoteOn(pitch, velocity, channel);
  usbMIDI.send_now();
};

void Note::noteOff(byte channel, byte pitch, byte velocity) {
     a2a:	push	{r3, lr}
     a2c:	lsls	r1, r1, #8
     a2e:	lsls	r3, r3, #24
     a30:	and.w	r1, r1, #3840	; 0xf00
     a34:	and.w	r3, r3, #2130706432	; 0x7f000000
     a38:	orrs	r3, r1
     a3a:	lsls	r2, r2, #16
     a3c:	orr.w	r3, r3, #32768	; 0x8000
     a40:	orr.w	r3, r3, #8
     a44:	and.w	r0, r2, #8323072	; 0x7f0000
     a48:	orrs	r0, r3
     a4a:	bl	22b0 <usb_midi_write_packed>
  usbMIDI.sendNoteOff(pitch, velocity, channel);
  usbMIDI.send_now();
};
     a4e:	ldmia.w	sp!, {r3, lr}
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     a52:	b.w	234c <usb_midi_flush_output>
     a56:	nop

00000a58 <Note::tick()>:
Note::Note () {
  reset();
};

void Note::tick() {
  if (!_active) return;
     a58:	ldr	r2, [r0, #16]
     a5a:	cbz	r2, a66 <Note::tick()+0xe>
  _length--;
     a5c:	ldr	r2, [r0, #8]
     a5e:	subs	r2, #1

  if (_length <= 0) {
     a60:	cmp	r2, #0
  reset();
};

void Note::tick() {
  if (!_active) return;
  _length--;
     a62:	str	r2, [r0, #8]

  if (_length <= 0) {
     a64:	ble.n	a68 <Note::tick()+0x10>
     a66:	bx	lr

Note::Note () {
  reset();
};

void Note::tick() {
     a68:	push	{r4, lr}
  _length--;

  if (_length <= 0) {
    // String noteLog = "Note off, pitch: ";
    // //Serial.println(noteLog + _pitch);    
    noteOff(_channel, _pitch, _velocity);
     a6a:	ldrb	r3, [r0, #4]
     a6c:	ldrb	r2, [r0, #0]
     a6e:	ldrb	r1, [r0, #12]
     a70:	mov	r4, r0
     a72:	bl	a28 <Note::noteOff(unsigned char, unsigned char, unsigned char)>
bool Note::isActive() {
  return _active;
};

void Note::reset() {
  _length = 0;
     a76:	movs	r3, #0
     a78:	str	r3, [r4, #8]
  _pitch = 0;
     a7a:	str	r3, [r4, #0]
  _velocity = 0;
     a7c:	str	r3, [r4, #4]
  _channel = 0;
     a7e:	str	r3, [r4, #12]
  _active = false;
     a80:	str	r3, [r4, #16]
     a82:	pop	{r4, pc}

00000a84 <Transport::Transport(Sequencer*)>:
// and its job is also to tell the sequence when the next step starts
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     a84:	movs	r2, #0
// this class has to keep track of the midi packets coming from the outside
// it also has the implementation of the top right knob that controls resolution
// and its job is also to tell the sequence when the next step starts
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
     a86:	push	{r4}
  _sequencer = sequencer;
  _state = false;
  max_ppqn = 24;
     a88:	movs	r4, #24
     a8a:	stmia.w	r0, {r1, r4}
// and its job is also to tell the sequence when the next step starts
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     a8e:	str	r2, [r0, #16]
  max_ppqn = 24;
  ppqn = 0;
     a90:	str	r2, [r0, #8]
  swingPpqn = 0;
     a92:	str	r2, [r0, #12]
};
     a94:	ldr.w	r4, [sp], #4
     a98:	bx	lr
     a9a:	nop

00000a9c <Transport::controlTempo(int)>:
int Transport::getPPQN () {
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 250) {
     a9c:	cmp	r1, #249	; 0xf9
     a9e:	bgt.n	ab0 <Transport::controlTempo(int)+0x14>
    max_ppqn = 6;

    if (ppqn >= 6) {
     aa0:	ldr	r3, [r0, #8]
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 250) {
    max_ppqn = 6;
     aa2:	movs	r2, #6

    if (ppqn >= 6) {
     aa4:	cmp	r3, #5
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 250) {
    max_ppqn = 6;
     aa6:	str	r2, [r0, #4]

    if (ppqn >= 6) {
     aa8:	ble.n	ace <Transport::controlTempo(int)+0x32>
      ppqn = 0;
     aaa:	movs	r3, #0
     aac:	str	r3, [r0, #8]
     aae:	bx	lr
    }
  } else if (value >= 250 && value < 500) {
     ab0:	sub.w	r3, r1, #250	; 0xfa
     ab4:	cmp	r3, #249	; 0xf9
     ab6:	bls.n	ad0 <Transport::controlTempo(int)+0x34>
    max_ppqn = 8;

    if (ppqn >= 8) {
      ppqn = 0;
    }
  } else if (value >= 500 && value < 750) {
     ab8:	sub.w	r3, r1, #500	; 0x1f4
     abc:	cmp	r3, #249	; 0xf9
     abe:	bls.n	adc <Transport::controlTempo(int)+0x40>
    max_ppqn = 10;

    if (ppqn >= 10) {
      ppqn = 0;
    }
  } else if (value >= 750 && value <= 1023) {
     ac0:	subw	r1, r1, #750	; 0x2ee
     ac4:	cmp.w	r1, #274	; 0x112
    max_ppqn = 24;
     ac8:	itt	cc
     aca:	movcc	r3, #24
     acc:	strcc	r3, [r0, #4]
     ace:	bx	lr
      ppqn = 0;
    }
  } else if (value >= 250 && value < 500) {
    max_ppqn = 8;

    if (ppqn >= 8) {
     ad0:	ldr	r3, [r0, #8]

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 250 && value < 500) {
    max_ppqn = 8;
     ad2:	movs	r2, #8

    if (ppqn >= 8) {
     ad4:	cmp	r3, #7

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 250 && value < 500) {
    max_ppqn = 8;
     ad6:	str	r2, [r0, #4]

    if (ppqn >= 8) {
     ad8:	bgt.n	aaa <Transport::controlTempo(int)+0xe>
     ada:	bx	lr
      ppqn = 0;
    }
  } else if (value >= 500 && value < 750) {
    max_ppqn = 10;

    if (ppqn >= 10) {
     adc:	ldr	r3, [r0, #8]

    if (ppqn >= 8) {
      ppqn = 0;
    }
  } else if (value >= 500 && value < 750) {
    max_ppqn = 10;
     ade:	movs	r2, #10

    if (ppqn >= 10) {
     ae0:	cmp	r3, #9

    if (ppqn >= 8) {
      ppqn = 0;
    }
  } else if (value >= 500 && value < 750) {
    max_ppqn = 10;
     ae2:	str	r2, [r0, #4]

    if (ppqn >= 10) {
     ae4:	bgt.n	aaa <Transport::controlTempo(int)+0xe>
     ae6:	bx	lr

00000ae8 <Transport::advancePPQN()>:
    default:;
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
     ae8:	push	{r3, r4, r5, lr}
  ++ppqn;
     aea:	ldr	r3, [r0, #8]

  _sequencer->_piano->tick();
     aec:	ldr	r2, [r0, #0]
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
  ++ppqn;
     aee:	adds	r3, #1
    default:;
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
     af0:	mov	r4, r0
  ++ppqn;
     af2:	str	r3, [r0, #8]

  _sequencer->_piano->tick();
     af4:	ldr	r0, [r2, #52]	; 0x34
     af6:	bl	7fc <Piano::tick()>
  // so sequencer should have a play step function that
  // gets called when the transport knows about a steps swing
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing

  if (ppqn == (max_ppqn + current->swing) && current->_state) {
     afa:	ldmia.w	r4, {r0, r1}
void Transport::advancePPQN () {
  ++ppqn;

  _sequencer->_piano->tick();

  Step* current = _sequencer->_stepsPlayback[_sequencer->_currentStep];
     afe:	ldr	r2, [r0, #48]	; 0x30
  // so sequencer should have a play step function that
  // gets called when the transport knows about a steps swing
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing

  if (ppqn == (max_ppqn + current->swing) && current->_state) {
     b00:	ldr	r3, [r4, #8]
void Transport::advancePPQN () {
  ++ppqn;

  _sequencer->_piano->tick();

  Step* current = _sequencer->_stepsPlayback[_sequencer->_currentStep];
     b02:	adds	r2, #8
     b04:	ldr.w	r5, [r0, r2, lsl #2]
  // so sequencer should have a play step function that
  // gets called when the transport knows about a steps swing
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing

  if (ppqn == (max_ppqn + current->swing) && current->_state) {
     b08:	ldr	r2, [r5, #28]
     b0a:	add	r2, r1
     b0c:	cmp	r3, r2
     b0e:	beq.n	b1c <Transport::advancePPQN()+0x34>
    int rand = random(100);
    if (rand <= current->chance) _sequencer->_piano->play(current);
  } else if (ppqn == swingPpqn && ppqn > 0) {
     b10:	ldr	r2, [r4, #12]
     b12:	cmp	r3, r2
     b14:	beq.n	b34 <Transport::advancePPQN()+0x4c>
    swingPpqn = 0; 
  }

  // this maybe should go before so that the sequencer does not get
  // out of sync from the master
  if (ppqn == max_ppqn) {
     b16:	cmp	r3, r1
     b18:	beq.n	b50 <Transport::advancePPQN()+0x68>
     b1a:	pop	{r3, r4, r5, pc}
  // so sequencer should have a play step function that
  // gets called when the transport knows about a steps swing
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing

  if (ppqn == (max_ppqn + current->swing) && current->_state) {
     b1c:	ldrb	r2, [r5, #20]
     b1e:	cmp	r2, #0
     b20:	beq.n	b10 <Transport::advancePPQN()+0x28>
    int rand = random(100);
     b22:	movs	r0, #100	; 0x64
     b24:	bl	36c0 <random(unsigned long)>
    if (rand <= current->chance) _sequencer->_piano->play(current);
     b28:	ldr	r3, [r5, #24]
     b2a:	cmp	r0, r3
     b2c:	ble.n	b70 <Transport::advancePPQN()+0x88>
     b2e:	ldr	r3, [r4, #8]
     b30:	ldr	r1, [r4, #4]
     b32:	b.n	b16 <Transport::advancePPQN()+0x2e>
  } else if (ppqn == swingPpqn && ppqn > 0) {
     b34:	cmp	r3, #0
     b36:	ble.n	b16 <Transport::advancePPQN()+0x2e>
    int rand = random(100);
     b38:	movs	r0, #100	; 0x64
     b3a:	bl	36c0 <random(unsigned long)>
    if (rand <= current->chance) _sequencer->_piano->play(current);
     b3e:	ldr	r3, [r5, #24]
     b40:	cmp	r0, r3
     b42:	ble.n	b64 <Transport::advancePPQN()+0x7c>
     b44:	ldr	r3, [r4, #8]
     b46:	ldr	r1, [r4, #4]
    swingPpqn = 0; 
     b48:	movs	r2, #0
  }

  // this maybe should go before so that the sequencer does not get
  // out of sync from the master
  if (ppqn == max_ppqn) {
     b4a:	cmp	r3, r1
    int rand = random(100);
    if (rand <= current->chance) _sequencer->_piano->play(current);
  } else if (ppqn == swingPpqn && ppqn > 0) {
    int rand = random(100);
    if (rand <= current->chance) _sequencer->_piano->play(current);
    swingPpqn = 0; 
     b4c:	str	r2, [r4, #12]
  }

  // this maybe should go before so that the sequencer does not get
  // out of sync from the master
  if (ppqn == max_ppqn) {
     b4e:	bne.n	b1a <Transport::advancePPQN()+0x32>
    _sequencer->step();
     b50:	ldr	r0, [r4, #0]
     b52:	bl	518 <Sequencer::step()>
    
    ppqn = 0;

    if (current->swing > 0) {
     b56:	ldr	r3, [r5, #28]
  // this maybe should go before so that the sequencer does not get
  // out of sync from the master
  if (ppqn == max_ppqn) {
    _sequencer->step();
    
    ppqn = 0;
     b58:	movs	r2, #0

    if (current->swing > 0) {
     b5a:	cmp	r3, r2
  // this maybe should go before so that the sequencer does not get
  // out of sync from the master
  if (ppqn == max_ppqn) {
    _sequencer->step();
    
    ppqn = 0;
     b5c:	str	r2, [r4, #8]

    if (current->swing > 0) {
      swingPpqn = current->swing;
     b5e:	it	gt
     b60:	strgt	r3, [r4, #12]
     b62:	pop	{r3, r4, r5, pc}
  if (ppqn == (max_ppqn + current->swing) && current->_state) {
    int rand = random(100);
    if (rand <= current->chance) _sequencer->_piano->play(current);
  } else if (ppqn == swingPpqn && ppqn > 0) {
    int rand = random(100);
    if (rand <= current->chance) _sequencer->_piano->play(current);
     b64:	ldr	r3, [r4, #0]
     b66:	mov	r1, r5
     b68:	ldr	r0, [r3, #52]	; 0x34
     b6a:	bl	814 <Piano::play(Step*)>
     b6e:	b.n	b44 <Transport::advancePPQN()+0x5c>
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing

  if (ppqn == (max_ppqn + current->swing) && current->_state) {
    int rand = random(100);
    if (rand <= current->chance) _sequencer->_piano->play(current);
     b70:	ldr	r3, [r4, #0]
     b72:	mov	r1, r5
     b74:	ldr	r0, [r3, #52]	; 0x34
     b76:	bl	814 <Piano::play(Step*)>
     b7a:	b.n	b2e <Transport::advancePPQN()+0x46>

00000b7c <Transport::startPPQN()>:
      swingPpqn = current->swing;
    }
  }
};

void Transport::startPPQN () {
     b7c:	push	{r4, lr}
  _state = true;
     b7e:	movs	r2, #1
      swingPpqn = current->swing;
    }
  }
};

void Transport::startPPQN () {
     b80:	mov	r4, r0
  _state = true;
  ppqn = 0;
     b82:	movs	r3, #0
    }
  }
};

void Transport::startPPQN () {
  _state = true;
     b84:	str	r2, [r0, #16]
  ppqn = 0;
     b86:	str	r3, [r0, #8]
  _sequencer->step();
     b88:	ldr	r0, [r0, #0]
     b8a:	bl	518 <Sequencer::step()>
  _sequencer->_piano->tick();
     b8e:	ldr	r3, [r4, #0]
     b90:	ldr	r0, [r3, #52]	; 0x34
     b92:	bl	7fc <Piano::tick()>
  Step* current = _sequencer->_stepsPlayback[_sequencer->_currentStep];
     b96:	ldr	r3, [r4, #0]
     b98:	ldr	r2, [r3, #48]	; 0x30
     b9a:	adds	r2, #8
     b9c:	ldr.w	r1, [r3, r2, lsl #2]
  if (current->_state) _sequencer->_piano->play(current);
     ba0:	ldrb	r2, [r1, #20]
     ba2:	cbz	r2, bac <Transport::startPPQN()+0x30>
     ba4:	ldr	r0, [r3, #52]	; 0x34
     ba6:	bl	814 <Piano::play(Step*)>
     baa:	ldr	r3, [r4, #0]
  _sequencer->_controller->_leds[5]->toggle();
     bac:	ldr	r3, [r3, #8]
};
     bae:	ldmia.w	sp!, {r4, lr}
  ppqn = 0;
  _sequencer->step();
  _sequencer->_piano->tick();
  Step* current = _sequencer->_stepsPlayback[_sequencer->_currentStep];
  if (current->_state) _sequencer->_piano->play(current);
  _sequencer->_controller->_leds[5]->toggle();
     bb2:	ldr	r0, [r3, #76]	; 0x4c
     bb4:	b.w	8dc <Led::toggle()>

00000bb8 <Transport::stopPPQN()>:
};

void Transport::stopPPQN () {
     bb8:	push	{r4, lr}
  _state = false;
     bba:	movs	r3, #0
  Step* current = _sequencer->_stepsPlayback[_sequencer->_currentStep];
  if (current->_state) _sequencer->_piano->play(current);
  _sequencer->_controller->_leds[5]->toggle();
};

void Transport::stopPPQN () {
     bbc:	mov	r4, r0
  _state = false;
     bbe:	str	r3, [r0, #16]
  ppqn = 0;
     bc0:	str	r3, [r0, #8]
  _sequencer->resetStep();
     bc2:	ldr	r0, [r0, #0]
     bc4:	bl	568 <Sequencer::resetStep()>
  _sequencer->_controller->_leds[5]->toggle();
     bc8:	ldr	r3, [r4, #0]
     bca:	ldr	r3, [r3, #8]
};
     bcc:	ldmia.w	sp!, {r4, lr}

void Transport::stopPPQN () {
  _state = false;
  ppqn = 0;
  _sequencer->resetStep();
  _sequencer->_controller->_leds[5]->toggle();
     bd0:	ldr	r0, [r3, #76]	; 0x4c
     bd2:	b.w	8dc <Led::toggle()>
     bd6:	nop

00000bd8 <Transport::processMidi()>:
  } else if (value >= 750 && value <= 1023) {
    max_ppqn = 24;
  }
};

void Transport::processMidi () {
     bd8:	push	{r4, lr}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     bda:	ldr	r3, [pc, #76]	; (c28 <Transport::processMidi()+0x50>)
  // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
  // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
  // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
  // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

  switch (type) {
     bdc:	ldrb	r3, [r3, #0]
     bde:	cmp	r3, #250	; 0xfa
  } else if (value >= 750 && value <= 1023) {
    max_ppqn = 24;
  }
};

void Transport::processMidi () {
     be0:	mov	r4, r0
  // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
  // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
  // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
  // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

  switch (type) {
     be2:	beq.n	c0e <Transport::processMidi()+0x36>
     be4:	cmp	r3, #252	; 0xfc
     be6:	beq.n	bf6 <Transport::processMidi()+0x1e>
     be8:	cmp	r3, #248	; 0xf8
     bea:	beq.n	bee <Transport::processMidi()+0x16>
     bec:	pop	{r4, pc}
      break;

    default:;
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}
     bee:	ldmia.w	sp!, {r4, lr}
  // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
  // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

  switch (type) {
    case usbMIDI.Clock: // 0xF8 
      advancePPQN();
     bf2:	b.w	ae8 <Transport::advancePPQN()>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     bf6:	movs	r1, #4
     bf8:	ldr	r0, [pc, #48]	; (c2c <Transport::processMidi()+0x54>)
     bfa:	bl	1a14 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     bfe:	ldr	r0, [pc, #48]	; (c30 <Transport::processMidi()+0x58>)
     c00:	bl	3588 <Print::println()>
      startPPQN();
      break;

    case usbMIDI.Stop: // 0xFC
      Serial.println("STOP");
      stopPPQN();
     c04:	mov	r0, r4
      break;

    default:;
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}
     c06:	ldmia.w	sp!, {r4, lr}
      startPPQN();
      break;

    case usbMIDI.Stop: // 0xFC
      Serial.println("STOP");
      stopPPQN();
     c0a:	b.w	bb8 <Transport::stopPPQN()>
     c0e:	movs	r1, #5
     c10:	ldr	r0, [pc, #32]	; (c34 <Transport::processMidi()+0x5c>)
     c12:	bl	1a14 <usb_serial_write>
     c16:	ldr	r0, [pc, #24]	; (c30 <Transport::processMidi()+0x58>)
     c18:	bl	3588 <Print::println()>
      advancePPQN();
      break;

    case usbMIDI.Start: // 0xFA
      Serial.println("START");
      startPPQN();
     c1c:	mov	r0, r4
      break;

    default:;
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}
     c1e:	ldmia.w	sp!, {r4, lr}
      advancePPQN();
      break;

    case usbMIDI.Start: // 0xFA
      Serial.println("START");
      startPPQN();
     c22:	b.w	b7c <Transport::startPPQN()>
     c26:	nop
     c28:	.word	0x1fff1a8c
     c2c:	.word	0x00004b38
     c30:	.word	0x1fff0c48
     c34:	.word	0x00004b30

00000c38 <Transport::tick()>:
  max_ppqn = 24;
  ppqn = 0;
  swingPpqn = 0;
};

void Transport::tick () {
     c38:	push	{r4, lr}
     c3a:	mov	r4, r0
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     c3c:	movs	r0, #0
     c3e:	bl	2378 <usb_midi_read>
  if (usbMIDI.read()) {
     c42:	cbnz	r0, c46 <Transport::tick()+0xe>
     c44:	pop	{r4, pc}
    processMidi();
     c46:	mov	r0, r4
  }
};
     c48:	ldmia.w	sp!, {r4, lr}
  swingPpqn = 0;
};

void Transport::tick () {
  if (usbMIDI.read()) {
    processMidi();
     c4c:	b.w	bd8 <Transport::processMidi()>

00000c50 <Paginator::Paginator(Sequencer*)>:
#include "paginator.h"
#include "step.h"
#include "controller.h"
#include "led.h"

Paginator::Paginator (Sequencer* sequencer) {
     c50:	push	{r3, r4, r5, lr}
     c52:	movs	r2, #64	; 0x40
     c54:	mov	r4, r0
     c56:	mov	r5, r1
     c58:	adds	r0, #16
     c5a:	movs	r1, #0
     c5c:	bl	46b0 <memset>
  _sequencer = sequencer;
  _currentEditPage = 0;
     c60:	movs	r3, #0
#include "step.h"
#include "controller.h"
#include "led.h"

Paginator::Paginator (Sequencer* sequencer) {
  _sequencer = sequencer;
     c62:	str	r5, [r4, #0]
  _currentEditPage = 0;
     c64:	str	r3, [r4, #4]
  _createdPages = 0;
     c66:	str	r3, [r4, #12]
  _currentPlaybackPage = 0;
     c68:	str	r3, [r4, #8]
};
     c6a:	mov	r0, r4
     c6c:	pop	{r3, r4, r5, pc}
     c6e:	nop

00000c70 <Paginator::getNextPlaybackPage(int)>:
int Paginator::getPage () {
  return _currentEditPage;
};

void Paginator::getNextPlaybackPage (int direction) {
  if (_createdPages == 0) return;
     c70:	ldr	r2, [r0, #12]
     c72:	cbz	r2, ca6 <Paginator::getNextPlaybackPage(int)+0x36>

  if (_currentPlaybackPage < _createdPages && direction == 1) {
     c74:	ldr	r3, [r0, #8]
     c76:	cmp	r2, r3

int Paginator::getPage () {
  return _currentEditPage;
};

void Paginator::getNextPlaybackPage (int direction) {
     c78:	push	{r4}
  if (_createdPages == 0) return;

  if (_currentPlaybackPage < _createdPages && direction == 1) {
     c7a:	ble.n	c80 <Paginator::getNextPlaybackPage(int)+0x10>
     c7c:	cmp	r1, #1
     c7e:	beq.n	cba <Paginator::getNextPlaybackPage(int)+0x4a>
    _currentPlaybackPage++;
  } else if (_currentPlaybackPage > 0 && direction == -1) {
     c80:	cmp	r3, #0
     c82:	ble.n	ca8 <Paginator::getNextPlaybackPage(int)+0x38>
     c84:	adds	r1, #1
     c86:	beq.n	cc0 <Paginator::getNextPlaybackPage(int)+0x50>
    _currentPlaybackPage--;
  } else if (_currentPlaybackPage == 0 && direction == -1) {
    _currentPlaybackPage = _createdPages;
  } else if (_currentPlaybackPage == _createdPages) {
     c88:	cmp	r2, r3
     c8a:	beq.n	cb4 <Paginator::getNextPlaybackPage(int)+0x44>

  // Serial.println("Current playback page");
  // Serial.println(_currentPlaybackPage);

  for (size_t i = 0; i < 4; i++) {
    _sequencer->_stepsPlayback[i] = _pages[_currentPlaybackPage][i];
     c8c:	add.w	r1, r0, r3, lsl #4
     c90:	ldr	r2, [r0, #0]
     c92:	ldr	r4, [r1, #16]
     c94:	add.w	r0, r1, #20
     c98:	ldmia	r0, {r0, r1, r3}
     c9a:	str	r4, [r2, #32]
  }
};
     c9c:	ldr.w	r4, [sp], #4

  // Serial.println("Current playback page");
  // Serial.println(_currentPlaybackPage);

  for (size_t i = 0; i < 4; i++) {
    _sequencer->_stepsPlayback[i] = _pages[_currentPlaybackPage][i];
     ca0:	str	r0, [r2, #36]	; 0x24
     ca2:	str	r1, [r2, #40]	; 0x28
     ca4:	str	r3, [r2, #44]	; 0x2c
  }
};
     ca6:	bx	lr

  if (_currentPlaybackPage < _createdPages && direction == 1) {
    _currentPlaybackPage++;
  } else if (_currentPlaybackPage > 0 && direction == -1) {
    _currentPlaybackPage--;
  } else if (_currentPlaybackPage == 0 && direction == -1) {
     ca8:	bne.n	c88 <Paginator::getNextPlaybackPage(int)+0x18>
     caa:	adds	r1, #1
     cac:	bne.n	c8c <Paginator::getNextPlaybackPage(int)+0x1c>
    _currentPlaybackPage = _createdPages;
     cae:	str	r2, [r0, #8]
     cb0:	mov	r3, r2
     cb2:	b.n	c8c <Paginator::getNextPlaybackPage(int)+0x1c>
  } else if (_currentPlaybackPage == _createdPages) {
    _currentPlaybackPage = 0;
     cb4:	movs	r3, #0
     cb6:	str	r3, [r0, #8]
     cb8:	b.n	c8c <Paginator::getNextPlaybackPage(int)+0x1c>

void Paginator::getNextPlaybackPage (int direction) {
  if (_createdPages == 0) return;

  if (_currentPlaybackPage < _createdPages && direction == 1) {
    _currentPlaybackPage++;
     cba:	adds	r3, #1
     cbc:	str	r3, [r0, #8]
     cbe:	b.n	c8c <Paginator::getNextPlaybackPage(int)+0x1c>
  } else if (_currentPlaybackPage > 0 && direction == -1) {
    _currentPlaybackPage--;
     cc0:	subs	r3, #1
     cc2:	str	r3, [r0, #8]
     cc4:	b.n	c8c <Paginator::getNextPlaybackPage(int)+0x1c>
     cc6:	nop

00000cc8 <Paginator::copyStep(Step*, Step*)>:
    setLeds(i);
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
     cc8:	push	{r4, r5, r6, r7, lr}
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
  step1->_state = step2->_state;
  step1->chance = step2->chance;
     cca:	ldr	r0, [r2, #24]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     ccc:	ldr	r7, [r2, #4]
  step1->pitchGrade = step2->pitchGrade;
     cce:	ldr	r6, [r2, #8]
  step1->velocity = step2->velocity;
     cd0:	ldr	r5, [r2, #12]
  step1->length = step2->length;
     cd2:	ldr	r4, [r2, #16]
  step1->_state = step2->_state;
     cd4:	ldrb.w	lr, [r2, #20]
  step1->chance = step2->chance;
  step1->swing = step2->swing;
     cd8:	ldr	r3, [r2, #28]
     cda:	str	r3, [r1, #28]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     cdc:	str	r7, [r1, #4]
  step1->pitchGrade = step2->pitchGrade;
     cde:	str	r6, [r1, #8]
  step1->velocity = step2->velocity;
     ce0:	str	r5, [r1, #12]
  step1->length = step2->length;
     ce2:	str	r4, [r1, #16]
  step1->_state = step2->_state;
     ce4:	strb.w	lr, [r1, #20]
  step1->chance = step2->chance;
     ce8:	str	r0, [r1, #24]
  step1->swing = step2->swing;
     cea:	pop	{r4, r5, r6, r7, pc}

00000cec <Paginator::setLeds(unsigned int)>:
};

void Paginator::setLeds (size_t i) {
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
     cec:	ldr	r3, [r0, #0]
     cee:	adds	r0, r1, #4
  Led * newStepLed = _sequencer->_controller->_leds[i];
     cf0:	ldr	r2, [r3, #8]

  if (newStep->_state == 0) {
     cf2:	ldr.w	r3, [r3, r0, lsl #2]
};

void Paginator::setLeds (size_t i) {
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
  Led * newStepLed = _sequencer->_controller->_leds[i];
     cf6:	adds	r1, #14

  if (newStep->_state == 0) {
     cf8:	ldrb	r3, [r3, #20]
};

void Paginator::setLeds (size_t i) {
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
  Led * newStepLed = _sequencer->_controller->_leds[i];
     cfa:	ldr.w	r0, [r2, r1, lsl #2]

  if (newStep->_state == 0) {
     cfe:	cbz	r3, d04 <Paginator::setLeds(unsigned int)+0x18>
    newStepLed->off();
  } else {
    newStepLed->on();
     d00:	b.w	914 <Led::on()>
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
  Led * newStepLed = _sequencer->_controller->_leds[i];

  if (newStep->_state == 0) {
    newStepLed->off();
     d04:	b.w	908 <Led::off()>

00000d08 <Paginator::changePage(int)>:
  };

  debugPages();
};

void Paginator::changePage (int direction) {
     d08:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (direction == 1 && _createdPages < 3 && _currentEditPage == _createdPages) {
     d0c:	cmp	r1, #1
  };

  debugPages();
};

void Paginator::changePage (int direction) {
     d0e:	sub	sp, #8
     d10:	mov	r7, r1
     d12:	mov	r4, r0
  if (direction == 1 && _createdPages < 3 && _currentEditPage == _createdPages) {
     d14:	beq.w	e9c <Paginator::changePage(int)+0x194>
     d18:	ldr	r3, [r4, #4]
  };

  debugPages();
};

void Paginator::changePage (int direction) {
     d1a:	movs	r5, #0
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
    // put current page steps in memory
    _pages[_currentEditPage][i] = _sequencer->_stepsEdit[i];
     d1c:	add.w	r2, r5, r3, lsl #2
     d20:	ldr	r1, [r4, #0]
     d22:	adds	r6, r5, #4
     d24:	adds	r2, #4

    // if there is not a defined step for the page then create steps
    // if there are steps put them into the stepsEdit of the sequencer
    if (_pages[_currentEditPage + direction][i] == 0) {
     d26:	add	r3, r7
     d28:	add.w	r3, r5, r3, lsl #2
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
    // put current page steps in memory
    _pages[_currentEditPage][i] = _sequencer->_stepsEdit[i];
     d2c:	ldr.w	r1, [r1, r6, lsl #2]
     d30:	str.w	r1, [r4, r2, lsl #2]

    // if there is not a defined step for the page then create steps
    // if there are steps put them into the stepsEdit of the sequencer
    if (_pages[_currentEditPage + direction][i] == 0) {
     d34:	adds	r3, #4
     d36:	ldr.w	r3, [r4, r3, lsl #2]
     d3a:	cmp	r3, #0
     d3c:	beq.n	e2e <Paginator::changePage(int)+0x126>
     d3e:	movs	r1, #19
     d40:	ldr	r0, [pc, #364]	; (eb0 <Paginator::changePage(int)+0x1a8>)
     d42:	bl	1a14 <usb_serial_write>
     d46:	ldr	r0, [pc, #364]	; (eb4 <Paginator::changePage(int)+0x1ac>)
     d48:	bl	3588 <Print::println()>
      _sequencer->_stepsEdit[i] = step;
      _pages[_currentEditPage + direction][i] = step;
    } else {
      Serial.println("loading from memory");

      Step * step = new Step(_sequencer);
     d4c:	movs	r0, #32
     d4e:	bl	36cc <operator new(unsigned int)>
     d52:	ldr	r1, [r4, #0]
     d54:	mov	r8, r0
     d56:	bl	f60 <Step::Step(Sequencer*)>

      if (_sequencer->_controller->getCopyMode()) {
     d5a:	ldr	r3, [r4, #0]
     d5c:	ldr	r0, [r3, #8]
     d5e:	bl	17fc <Controller::getCopyMode()>
     d62:	cmp	r0, #0
     d64:	beq.n	dde <Paginator::changePage(int)+0xd6>
     d66:	movs	r1, #29
     d68:	ldr	r0, [pc, #332]	; (eb8 <Paginator::changePage(int)+0x1b0>)
     d6a:	bl	1a14 <usb_serial_write>
     d6e:	ldr	r0, [pc, #324]	; (eb4 <Paginator::changePage(int)+0x1ac>)
     d70:	bl	3588 <Print::println()>
        Serial.println("copying and setting in memory");

        copyStep(step, _sequencer->_stepsEdit[i]);
     d74:	ldr	r3, [r4, #0]
     d76:	ldr.w	r3, [r3, r6, lsl #2]
// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
     d7a:	add.w	r0, r3, #8
     d7e:	ldmia	r0, {r0, r1, r2}
     d80:	str	r2, [sp, #4]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     d82:	ldr	r2, [r3, #4]
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
  step1->_state = step2->_state;
     d84:	ldrb.w	ip, [r3, #20]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     d88:	str.w	r2, [r8, #4]
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
  step1->_state = step2->_state;
  step1->chance = step2->chance;
     d8c:	ldr	r2, [r3, #24]
  step1->swing = step2->swing;
     d8e:	ldr	r3, [r3, #28]
     d90:	str.w	r3, [r8, #28]
// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
     d94:	ldr	r3, [sp, #4]
  step1->_state = step2->_state;
  step1->chance = step2->chance;
     d96:	str.w	r2, [r8, #24]
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
     d9a:	str.w	r0, [r8, #8]
  step1->velocity = step2->velocity;
     d9e:	str.w	r1, [r8, #12]
  step1->length = step2->length;
     da2:	str.w	r3, [r8, #16]
  step1->_state = step2->_state;
     da6:	strb.w	ip, [r8, #20]
     daa:	movs	r1, #25
     dac:	ldr	r0, [pc, #268]	; (ebc <Paginator::changePage(int)+0x1b4>)
     dae:	bl	1a14 <usb_serial_write>
     db2:	ldr	r0, [pc, #256]	; (eb4 <Paginator::changePage(int)+0x1ac>)
     db4:	bl	3588 <Print::println()>
        copyStep(step, _pages[_currentEditPage + direction][i]);
      }

      Serial.println("Setting steps for editing");
      _pages[_currentEditPage + direction][i] = step;
      _sequencer->_stepsEdit[i] = step;
     db8:	ldmia.w	r4, {r2, r3}

        copyStep(step, _pages[_currentEditPage + direction][i]);
      }

      Serial.println("Setting steps for editing");
      _pages[_currentEditPage + direction][i] = step;
     dbc:	add	r3, r7
     dbe:	add.w	r3, r5, r3, lsl #2
     dc2:	adds	r3, #4
     dc4:	str.w	r8, [r4, r3, lsl #2]
      _sequencer->_stepsEdit[i] = step;
     dc8:	str.w	r8, [r2, r6, lsl #2]
    }
    
    setLeds(i);
     dcc:	mov	r1, r5
     dce:	mov	r0, r4
    _createdPages++;
    // //Serial.println("Incrementing created pages to:");
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
     dd0:	adds	r5, #1
      Serial.println("Setting steps for editing");
      _pages[_currentEditPage + direction][i] = step;
      _sequencer->_stepsEdit[i] = step;
    }
    
    setLeds(i);
     dd2:	bl	cec <Paginator::setLeds(unsigned int)>
    _createdPages++;
    // //Serial.println("Incrementing created pages to:");
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
     dd6:	cmp	r5, #4
     dd8:	beq.n	e28 <Paginator::changePage(int)+0x120>
     dda:	ldr	r3, [r4, #4]
     ddc:	b.n	d1c <Paginator::changePage(int)+0x14>
     dde:	movs	r1, #24
     de0:	ldr	r0, [pc, #220]	; (ec0 <Paginator::changePage(int)+0x1b8>)
     de2:	bl	1a14 <usb_serial_write>
     de6:	ldr	r0, [pc, #204]	; (eb4 <Paginator::changePage(int)+0x1ac>)
     de8:	bl	3588 <Print::println()>

        copyStep(step, _sequencer->_stepsEdit[i]);
      } else {
        Serial.println("copying only from memory");

        copyStep(step, _pages[_currentEditPage + direction][i]);
     dec:	ldr	r3, [r4, #4]
     dee:	add	r3, r7
     df0:	add.w	r3, r5, r3, lsl #2
     df4:	adds	r3, #4
     df6:	ldr.w	r3, [r4, r3, lsl #2]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     dfa:	ldr	r1, [r3, #4]
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
     dfc:	ldr	r0, [r3, #12]
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
     dfe:	ldr	r2, [r3, #8]
  step1->velocity = step2->velocity;
  step1->length = step2->length;
  step1->_state = step2->_state;
     e00:	ldrb.w	ip, [r3, #20]

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
     e04:	str.w	r0, [r8, #12]
  step1->length = step2->length;
     e08:	ldr	r0, [r3, #16]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     e0a:	str.w	r1, [r8, #4]
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
  step1->_state = step2->_state;
  step1->chance = step2->chance;
     e0e:	ldr	r1, [r3, #24]
  step1->swing = step2->swing;
     e10:	ldr	r3, [r3, #28]
     e12:	str.w	r3, [r8, #28]
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
     e16:	str.w	r2, [r8, #8]
  step1->velocity = step2->velocity;
  step1->length = step2->length;
     e1a:	str.w	r0, [r8, #16]
  step1->_state = step2->_state;
     e1e:	strb.w	ip, [r8, #20]
  step1->chance = step2->chance;
     e22:	str.w	r1, [r8, #24]
     e26:	b.n	daa <Paginator::changePage(int)+0xa2>
      _sequencer->_stepsEdit[i] = step;
    }
    
    setLeds(i);
  }
};
     e28:	add	sp, #8
     e2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e2e:	movs	r1, #12
     e30:	ldr	r0, [pc, #144]	; (ec4 <Paginator::changePage(int)+0x1bc>)
     e32:	bl	1a14 <usb_serial_write>
     e36:	ldr	r0, [pc, #124]	; (eb4 <Paginator::changePage(int)+0x1ac>)
     e38:	bl	3588 <Print::println()>

    // if there is not a defined step for the page then create steps
    // if there are steps put them into the stepsEdit of the sequencer
    if (_pages[_currentEditPage + direction][i] == 0) {
      Serial.println("no steps yet");
      Step * step = new Step(_sequencer);
     e3c:	movs	r0, #32
     e3e:	bl	36cc <operator new(unsigned int)>
     e42:	ldr	r1, [r4, #0]
     e44:	mov	r8, r0
     e46:	bl	f60 <Step::Step(Sequencer*)>

      if (_sequencer->_controller->getCopyMode()) {
     e4a:	ldr	r3, [r4, #0]
     e4c:	ldr	r0, [r3, #8]
     e4e:	bl	17fc <Controller::getCopyMode()>
     e52:	cbnz	r0, e6a <Paginator::changePage(int)+0x162>
     e54:	ldr	r0, [r4, #0]
        copyStep(step, _sequencer->_stepsEdit[i]);
      }

      _sequencer->_stepsEdit[i] = step;
      _pages[_currentEditPage + direction][i] = step;
     e56:	ldr	r3, [r4, #4]

      if (_sequencer->_controller->getCopyMode()) {
        copyStep(step, _sequencer->_stepsEdit[i]);
      }

      _sequencer->_stepsEdit[i] = step;
     e58:	str.w	r8, [r0, r6, lsl #2]
      _pages[_currentEditPage + direction][i] = step;
     e5c:	add	r3, r7
     e5e:	add.w	r3, r5, r3, lsl #2
     e62:	adds	r3, #4
     e64:	str.w	r8, [r4, r3, lsl #2]
     e68:	b.n	dcc <Paginator::changePage(int)+0xc4>
    if (_pages[_currentEditPage + direction][i] == 0) {
      Serial.println("no steps yet");
      Step * step = new Step(_sequencer);

      if (_sequencer->_controller->getCopyMode()) {
        copyStep(step, _sequencer->_stepsEdit[i]);
     e6a:	ldr	r0, [r4, #0]
     e6c:	ldr.w	r3, [r0, r6, lsl #2]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     e70:	ldr	r1, [r3, #4]
  step1->pitchGrade = step2->pitchGrade;
     e72:	ldr	r2, [r3, #8]
  }
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
     e74:	str.w	r1, [r8, #4]
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
     e78:	ldr	r1, [r3, #12]
};

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
     e7a:	str.w	r2, [r8, #8]
  step1->velocity = step2->velocity;
  step1->length = step2->length;
     e7e:	ldr	r2, [r3, #16]

// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
     e80:	str.w	r1, [r8, #12]
  step1->length = step2->length;
  step1->_state = step2->_state;
     e84:	ldrb	r1, [r3, #20]
// maybe this function should be in the
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
     e86:	str.w	r2, [r8, #16]
  step1->_state = step2->_state;
  step1->chance = step2->chance;
     e8a:	ldr	r2, [r3, #24]
  step1->swing = step2->swing;
     e8c:	ldr	r3, [r3, #28]
     e8e:	str.w	r3, [r8, #28]
void Paginator::copyStep (Step* step1, Step* step2) {
  step1->pitchScale = step2->pitchScale;
  step1->pitchGrade = step2->pitchGrade;
  step1->velocity = step2->velocity;
  step1->length = step2->length;
  step1->_state = step2->_state;
     e92:	strb.w	r1, [r8, #20]
  step1->chance = step2->chance;
     e96:	str.w	r2, [r8, #24]
     e9a:	b.n	e56 <Paginator::changePage(int)+0x14e>

  debugPages();
};

void Paginator::changePage (int direction) {
  if (direction == 1 && _createdPages < 3 && _currentEditPage == _createdPages) {
     e9c:	ldr	r2, [r0, #12]
     e9e:	cmp	r2, #2
     ea0:	bgt.w	d18 <Paginator::changePage(int)+0x10>
     ea4:	ldr	r3, [r0, #4]
     ea6:	cmp	r2, r3
    // this is a nasty flag i should get rid of
    _createdPages++;
     ea8:	itt	eq
     eaa:	addeq	r2, r3, #1
     eac:	streq	r2, [r0, #12]
     eae:	b.n	d1a <Paginator::changePage(int)+0x12>
     eb0:	.word	0x00004b50
     eb4:	.word	0x1fff0c48
     eb8:	.word	0x00004b64
     ebc:	.word	0x00004ba0
     ec0:	.word	0x00004b84
     ec4:	.word	0x00004b40

00000ec8 <Paginator::debugPages()>:
  } else {
    newStepLed->on();
  }
};

void Paginator::debugPages () {
     ec8:	push	{r4, r5, r6, lr}
     eca:	add.w	r4, r0, #16
     ece:	add.w	r6, r0, #80	; 0x50
     ed2:	add.w	r5, r4, #16
  for (size_t i = 0; i < 4; i++) {
    for (size_t y = 0; y < 4; y++) {
      Step * step = _pages[i][y];
     ed6:	ldr.w	r3, [r4], #4
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     eda:	ldr	r0, [pc, #24]	; (ef4 <Paginator::debugPages()+0x2c>)
     edc:	ldrb	r1, [r3, #20]
     ede:	bl	3628 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ee2:	ldr	r0, [pc, #16]	; (ef4 <Paginator::debugPages()+0x2c>)
     ee4:	bl	3588 <Print::println()>
  }
};

void Paginator::debugPages () {
  for (size_t i = 0; i < 4; i++) {
    for (size_t y = 0; y < 4; y++) {
     ee8:	cmp	r4, r5
     eea:	bne.n	ed6 <Paginator::debugPages()+0xe>
    newStepLed->on();
  }
};

void Paginator::debugPages () {
  for (size_t i = 0; i < 4; i++) {
     eec:	cmp	r6, r4
     eee:	bne.n	ed2 <Paginator::debugPages()+0xa>
    for (size_t y = 0; y < 4; y++) {
      Step * step = _pages[i][y];
      Serial.println(step->_state);
    }
  }
};
     ef0:	pop	{r4, r5, r6, pc}
     ef2:	nop
     ef4:	.word	0x1fff0c48

00000ef8 <Paginator::nextPage()>:
    _sequencer->_stepsPlayback[i] = _pages[_currentPlaybackPage][i];
  }
};

void Paginator::nextPage () {
  if (_currentEditPage < 3) {
     ef8:	ldr	r3, [r0, #4]
     efa:	cmp	r3, #2
  for (size_t i = 0; i < 4; i++) {
    _sequencer->_stepsPlayback[i] = _pages[_currentPlaybackPage][i];
  }
};

void Paginator::nextPage () {
     efc:	push	{r4, lr}
     efe:	mov	r4, r0
  if (_currentEditPage < 3) {
     f00:	bgt.n	f20 <Paginator::nextPage()+0x28>
    changePage(1);
     f02:	movs	r1, #1
     f04:	bl	d08 <Paginator::changePage(int)>
    _currentEditPage++;
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     f08:	ldmia.w	r4, {r2, r3}
     f0c:	add.w	r1, r3, #15
     f10:	ldr	r2, [r2, #8]
};

void Paginator::nextPage () {
  if (_currentEditPage < 3) {
    changePage(1);
    _currentEditPage++;
     f12:	adds	r3, #1
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     f14:	ldr.w	r0, [r2, r1, lsl #2]
};

void Paginator::nextPage () {
  if (_currentEditPage < 3) {
    changePage(1);
    _currentEditPage++;
     f18:	str	r3, [r4, #4]
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     f1a:	movs	r1, #3
     f1c:	bl	8a8 <Led::blink(int)>
  }

  debugPages();
     f20:	mov	r0, r4
};
     f22:	ldmia.w	sp!, {r4, lr}
    changePage(1);
    _currentEditPage++;
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
  }

  debugPages();
     f26:	b.w	ec8 <Paginator::debugPages()>
     f2a:	nop

00000f2c <Paginator::previousPage()>:
};

void Paginator::previousPage () {
  if (_currentEditPage > 0) {
     f2c:	ldr	r3, [r0, #4]
     f2e:	cmp	r3, #0
  }

  debugPages();
};

void Paginator::previousPage () {
     f30:	push	{r4, lr}
     f32:	mov	r4, r0
  if (_currentEditPage > 0) {
     f34:	ble.n	f56 <Paginator::previousPage()+0x2a>
    changePage(-1);
     f36:	mov.w	r1, #4294967295
     f3a:	bl	d08 <Paginator::changePage(int)>
    _currentEditPage--;
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     f3e:	ldmia.w	r4, {r2, r3}
     f42:	add.w	r1, r3, #13
     f46:	ldr	r2, [r2, #8]
};

void Paginator::previousPage () {
  if (_currentEditPage > 0) {
    changePage(-1);
    _currentEditPage--;
     f48:	subs	r3, #1
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     f4a:	ldr.w	r0, [r2, r1, lsl #2]
};

void Paginator::previousPage () {
  if (_currentEditPage > 0) {
    changePage(-1);
    _currentEditPage--;
     f4e:	str	r3, [r4, #4]
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     f50:	movs	r1, #3
     f52:	bl	8a8 <Led::blink(int)>
  };

  debugPages();
     f56:	mov	r0, r4
};
     f58:	ldmia.w	sp!, {r4, lr}
    changePage(-1);
    _currentEditPage--;
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
  };

  debugPages();
     f5c:	b.w	ec8 <Paginator::debugPages()>

00000f60 <Step::Step(Sequencer*)>:
#include <Arduino.h>
#include "step.h"
#include "sequencer.h"
#include "piano.h"

Step::Step(Sequencer* sequencer) {
     f60:	push	{r4, r5}
  _state = false;
     f62:	movs	r2, #0
  _sequencer = sequencer;
  pitchScale = 0;
  pitchGrade = 0;
  velocity = 100;
     f64:	movs	r4, #100	; 0x64
  length = 4;
     f66:	movs	r5, #4
     f68:	str	r5, [r0, #16]
Step::Step(Sequencer* sequencer) {
  _state = false;
  _sequencer = sequencer;
  pitchScale = 0;
  pitchGrade = 0;
  velocity = 100;
     f6a:	str	r4, [r0, #12]
  length = 4;
  chance = 100;
     f6c:	str	r4, [r0, #24]
#include "sequencer.h"
#include "piano.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
  _sequencer = sequencer;
     f6e:	str	r1, [r0, #0]
#include "step.h"
#include "sequencer.h"
#include "piano.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
     f70:	strb	r2, [r0, #20]
  _sequencer = sequencer;
  pitchScale = 0;
     f72:	str	r2, [r0, #4]
  pitchGrade = 0;
     f74:	str	r2, [r0, #8]
  velocity = 100;
  length = 4;
  chance = 100;
  swing = 0;
     f76:	str	r2, [r0, #28]
};
     f78:	pop	{r4, r5}
     f7a:	bx	lr

00000f7c <Step::toggle()>:
void Step::setStep (Step* step) {
  _state = step->_state;
};

void Step::toggle () {
  _state = !_state;
     f7c:	ldrb	r3, [r0, #20]
     f7e:	eor.w	r3, r3, #1
     f82:	strb	r3, [r0, #20]
     f84:	bx	lr
     f86:	nop

00000f88 <Step::controlLength(int)>:
};

void Step::controlLength (int value) {
     f88:	push	{r3, r4, r5, lr}
  int newValue = map(value, 0, 1000, 16, 0); // <- hack i guess
  length = newValue;
     f8a:	ldr	r3, [pc, #56]	; (fc4 <Step::controlLength(int)+0x3c>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     f8c:	ldr	r4, [pc, #56]	; (fc8 <Step::controlLength(int)+0x40>)
     f8e:	sub.w	r1, r1, r1, lsl #4
     f92:	smull	r2, r3, r3, r1
     f96:	asrs	r1, r1, #31
     f98:	rsb	r1, r1, r3, asr #8
     f9c:	adds	r1, #16

void Step::toggle () {
  _state = !_state;
};

void Step::controlLength (int value) {
     f9e:	mov	r5, r0
  int newValue = map(value, 0, 1000, 16, 0); // <- hack i guess
  length = newValue;
     fa0:	str	r1, [r0, #16]
     fa2:	movs	r1, #6
     fa4:	ldr	r0, [pc, #36]	; (fcc <Step::controlLength(int)+0x44>)
     fa6:	bl	1a14 <usb_serial_write>
     faa:	mov	r0, r4
     fac:	bl	3588 <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     fb0:	ldr	r1, [r5, #16]
     fb2:	mov	r0, r4
     fb4:	bl	3628 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     fb8:	mov	r0, r4
  Serial.println("length");
  Serial.println(length);
};
     fba:	ldmia.w	sp!, {r3, r4, r5, lr}
     fbe:	b.w	3588 <Print::println()>
     fc2:	nop
     fc4:	.word	0x4178749f
     fc8:	.word	0x1fff0c48
     fcc:	.word	0x00004bbc

00000fd0 <Step::controlPitch(int)>:

void Step::controlPitch (int value) {
  int newValue = map(value, 0, 1023, 6, -2);
  pitchGrade = newValue;
     fd0:	subs.w	r1, r1, r1, lsl #3
     fd4:	it	mi
     fd6:	addwmi	r1, r1, #1023	; 0x3ff
  length = newValue;
  Serial.println("length");
  Serial.println(length);
};

void Step::controlPitch (int value) {
     fda:	push	{r4, lr}
  int newValue = map(value, 0, 1023, 6, -2);
  pitchGrade = newValue;
     fdc:	asrs	r1, r1, #10
     fde:	adds	r1, #6
  length = newValue;
  Serial.println("length");
  Serial.println(length);
};

void Step::controlPitch (int value) {
     fe0:	mov	r4, r0
  int newValue = map(value, 0, 1023, 6, -2);
  pitchGrade = newValue;
     fe2:	str	r1, [r0, #8]
     fe4:	movs	r1, #10
     fe6:	ldr	r0, [pc, #28]	; (1004 <Step::controlPitch(int)+0x34>)
     fe8:	bl	1a14 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     fec:	ldr	r0, [pc, #24]	; (1008 <Step::controlPitch(int)+0x38>)
     fee:	bl	3588 <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ff2:	ldr	r1, [r4, #8]
     ff4:	ldr	r0, [pc, #16]	; (1008 <Step::controlPitch(int)+0x38>)
     ff6:	bl	3628 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ffa:	ldr	r0, [pc, #12]	; (1008 <Step::controlPitch(int)+0x38>)
  Serial.println("pitchGrade");
  Serial.println(pitchGrade);
};
     ffc:	ldmia.w	sp!, {r4, lr}
    1000:	b.w	3588 <Print::println()>
    1004:	.word	0x00004bc4
    1008:	.word	0x1fff0c48

0000100c <Step::controlVelocity(int)>:

void Step::controlVelocity (int value) {
  int newValue = map(value, 0, 1023, 127, 0);
  velocity = newValue;
    100c:	sub.w	r1, r1, r1, lsl #6
    1010:	lsls	r1, r1, #1
    1012:	it	mi
    1014:	addwmi	r1, r1, #1023	; 0x3ff
  pitchGrade = newValue;
  Serial.println("pitchGrade");
  Serial.println(pitchGrade);
};

void Step::controlVelocity (int value) {
    1018:	push	{r4, lr}
  int newValue = map(value, 0, 1023, 127, 0);
  velocity = newValue;
    101a:	asrs	r1, r1, #10
    101c:	adds	r1, #127	; 0x7f
  pitchGrade = newValue;
  Serial.println("pitchGrade");
  Serial.println(pitchGrade);
};

void Step::controlVelocity (int value) {
    101e:	mov	r4, r0
  int newValue = map(value, 0, 1023, 127, 0);
  velocity = newValue;
    1020:	str	r1, [r0, #12]
    1022:	movs	r1, #8
    1024:	ldr	r0, [pc, #28]	; (1044 <Step::controlVelocity(int)+0x38>)
    1026:	bl	1a14 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    102a:	ldr	r0, [pc, #28]	; (1048 <Step::controlVelocity(int)+0x3c>)
    102c:	bl	3588 <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1030:	ldr	r1, [r4, #12]
    1032:	ldr	r0, [pc, #20]	; (1048 <Step::controlVelocity(int)+0x3c>)
    1034:	bl	3628 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1038:	ldr	r0, [pc, #12]	; (1048 <Step::controlVelocity(int)+0x3c>)
  Serial.println("velocity");
  Serial.println(velocity);
};
    103a:	ldmia.w	sp!, {r4, lr}
    103e:	b.w	3588 <Print::println()>
    1042:	nop
    1044:	.word	0x00004bd0
    1048:	.word	0x1fff0c48

0000104c <Step::controlChance(int)>:

void Step::controlChance (int value) {
  int newValue = map(value, 0, 1023, 100, 0);
  chance = newValue;
    104c:	mvn.w	r3, #98	; 0x62
    1050:	mul.w	r1, r3, r1
    1054:	cmp	r1, #0
    1056:	it	lt
    1058:	addwlt	r1, r1, #1023	; 0x3ff
  velocity = newValue;
  Serial.println("velocity");
  Serial.println(velocity);
};

void Step::controlChance (int value) {
    105c:	push	{r4, lr}
  int newValue = map(value, 0, 1023, 100, 0);
  chance = newValue;
    105e:	asrs	r1, r1, #10
    1060:	adds	r1, #100	; 0x64
  velocity = newValue;
  Serial.println("velocity");
  Serial.println(velocity);
};

void Step::controlChance (int value) {
    1062:	mov	r4, r0
  int newValue = map(value, 0, 1023, 100, 0);
  chance = newValue;
    1064:	str	r1, [r0, #24]
    1066:	movs	r1, #6
    1068:	ldr	r0, [pc, #28]	; (1088 <Step::controlChance(int)+0x3c>)
    106a:	bl	1a14 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    106e:	ldr	r0, [pc, #28]	; (108c <Step::controlChance(int)+0x40>)
    1070:	bl	3588 <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1074:	ldr	r1, [r4, #24]
    1076:	ldr	r0, [pc, #20]	; (108c <Step::controlChance(int)+0x40>)
    1078:	bl	3628 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    107c:	ldr	r0, [pc, #12]	; (108c <Step::controlChance(int)+0x40>)
  Serial.println("chance");
  Serial.println(chance);
};
    107e:	ldmia.w	sp!, {r4, lr}
    1082:	b.w	3588 <Print::println()>
    1086:	nop
    1088:	.word	0x00004bdc
    108c:	.word	0x1fff0c48

00001090 <Step::controlSwing(int)>:

void Step::controlSwing (int value) {
  int newValue = map(value, 0, 1023,  4, -4);
  swing = newValue;
    1090:	subs.w	r1, r1, r1, lsl #3
    1094:	it	mi
    1096:	addwmi	r1, r1, #1023	; 0x3ff
  chance = newValue;
  Serial.println("chance");
  Serial.println(chance);
};

void Step::controlSwing (int value) {
    109a:	push	{r4, lr}
  int newValue = map(value, 0, 1023,  4, -4);
  swing = newValue;
    109c:	asrs	r1, r1, #10
    109e:	adds	r1, #4
  chance = newValue;
  Serial.println("chance");
  Serial.println(chance);
};

void Step::controlSwing (int value) {
    10a0:	mov	r4, r0
  int newValue = map(value, 0, 1023,  4, -4);
  swing = newValue;
    10a2:	str	r1, [r0, #28]
    10a4:	movs	r1, #5
    10a6:	ldr	r0, [pc, #28]	; (10c4 <Step::controlSwing(int)+0x34>)
    10a8:	bl	1a14 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    10ac:	ldr	r0, [pc, #24]	; (10c8 <Step::controlSwing(int)+0x38>)
    10ae:	bl	3588 <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    10b2:	ldr	r1, [r4, #28]
    10b4:	ldr	r0, [pc, #16]	; (10c8 <Step::controlSwing(int)+0x38>)
    10b6:	bl	3628 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    10ba:	ldr	r0, [pc, #12]	; (10c8 <Step::controlSwing(int)+0x38>)
  Serial.println("swing");
  Serial.println(swing);
};
    10bc:	ldmia.w	sp!, {r4, lr}
    10c0:	b.w	3588 <Print::println()>
    10c4:	.word	0x00004be4
    10c8:	.word	0x1fff0c48

000010cc <Knob::Knob(unsigned char, int, Controller*)>:
#include "sequencer.h"
#include "transport.h"
#include "paginator.h"
#include "piano.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
    10cc:	push	{r4, r5}
  _pin = pin;
  _id = id;
  _controller = controller;
  _value = 0;
    10ce:	movs	r5, #0
    10d0:	str	r5, [r0, #4]
#include "transport.h"
#include "paginator.h"
#include "piano.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
  _pin = pin;
    10d2:	str	r1, [r0, #0]
  _id = id;
    10d4:	str	r2, [r0, #12]
  _controller = controller;
    10d6:	str	r3, [r0, #16]
  _value = 0;
};
    10d8:	pop	{r4, r5}
    10da:	bx	lr

000010dc <Knob::onChange()>:
// pitch mode, knob 1 controls the pitch of step 1.
// when in motion mode, knob 1 controls pitch
// of the current step being played, and knob 2
// controls the velocity and knob 3 the length
// and 4 the chance
void Knob::onChange () {
    10dc:	push	{r4, r5, r6, lr}
    10de:	mov	r4, r0
  if (_controller->getMotionMode() && !_controller->getSwingMode()) {
    10e0:	ldr	r0, [r0, #16]
    10e2:	bl	17f4 <Controller::getMotionMode()>
    10e6:	cbnz	r0, 1140 <Knob::onChange()+0x64>
    } else if (_id == 4) {
      sequencer->_stepsEdit[_controller->_sequencer->_currentStep]->controlSwing(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlSwing(_value);
    }
  } else {
    if (_id == 4) {
    10e8:	ldr	r3, [r4, #12]
    10ea:	cmp	r3, #4
    10ec:	beq.n	11c4 <Knob::onChange()+0xe8>
      _controller->_sequencer->_piano->transpose(_value);
    } else if (_id == 5) {
    10ee:	cmp	r3, #5
    10f0:	beq.n	11b4 <Knob::onChange()+0xd8>
      _controller->_sequencer->_transport->controlTempo(_value);
    } else if (_controller->getSwingMode()) {
    10f2:	ldr	r0, [r4, #16]
    10f4:	bl	17ec <Controller::getSwingMode()>
    10f8:	cbnz	r0, 112a <Knob::onChange()+0x4e>
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    } else if (_controller->getChanceMode()) {
    10fa:	ldr	r0, [r4, #16]
    10fc:	bl	17e4 <Controller::getChanceMode()>
    1100:	cmp	r0, #0
    1102:	bne.n	119e <Knob::onChange()+0xc2>
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    } else if (_controller->getMode() == VELOCITY && !_controller->getChanceMode() && !_controller->getSwingMode()) {
    1104:	ldr	r0, [r4, #16]
    1106:	bl	180c <Controller::getMode()>
    110a:	cmp	r0, #1
    110c:	beq.w	12be <Knob::onChange()+0x1e2>
      _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
    } else if (_controller->getMode() == PITCH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
    1110:	ldr	r0, [r4, #16]
    1112:	bl	180c <Controller::getMode()>
    1116:	cmp	r0, #0
    1118:	beq.w	1290 <Knob::onChange()+0x1b4>
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
    111c:	ldr	r0, [r4, #16]
    111e:	bl	180c <Controller::getMode()>
    1122:	cmp	r0, #2
    1124:	beq.w	1338 <Knob::onChange()+0x25c>
    1128:	pop	{r4, r5, r6, pc}
    if (_id == 4) {
      _controller->_sequencer->_piano->transpose(_value);
    } else if (_id == 5) {
      _controller->_sequencer->_transport->controlTempo(_value);
    } else if (_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    112a:	ldr	r2, [r4, #16]
    112c:	ldr	r3, [r4, #12]
    112e:	ldr	r2, [r2, #80]	; 0x50
    1130:	ldr	r1, [r4, #4]
    1132:	adds	r3, #4
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    }  
  }
}
    1134:	ldmia.w	sp!, {r4, r5, r6, lr}
    if (_id == 4) {
      _controller->_sequencer->_piano->transpose(_value);
    } else if (_id == 5) {
      _controller->_sequencer->_transport->controlTempo(_value);
    } else if (_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    1138:	ldr.w	r0, [r2, r3, lsl #2]
    113c:	b.w	1090 <Step::controlSwing(int)>
// when in motion mode, knob 1 controls pitch
// of the current step being played, and knob 2
// controls the velocity and knob 3 the length
// and 4 the chance
void Knob::onChange () {
  if (_controller->getMotionMode() && !_controller->getSwingMode()) {
    1140:	ldr	r0, [r4, #16]
    1142:	bl	17ec <Controller::getSwingMode()>
    1146:	cmp	r0, #0
    1148:	bne.n	10e8 <Knob::onChange()+0xc>
    114a:	movs	r1, #6
    114c:	ldr	r0, [pc, #536]	; (1368 <Knob::onChange()+0x28c>)
    114e:	bl	1a14 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1152:	ldr	r0, [pc, #536]	; (136c <Knob::onChange()+0x290>)
    1154:	bl	3588 <Print::println()>
    Serial.println("motion");
    Paginator * paginator = _controller->_sequencer->_paginator;
    1158:	ldr	r2, [r4, #16]
    Sequencer * sequencer = _controller->_sequencer;

    // todo: there is a bug when you only have 1 page,
    // the sequencer crashes when you use motion record
    if (_id == 0) {
    115a:	ldr	r3, [r4, #12]
// controls the velocity and knob 3 the length
// and 4 the chance
void Knob::onChange () {
  if (_controller->getMotionMode() && !_controller->getSwingMode()) {
    Serial.println("motion");
    Paginator * paginator = _controller->_sequencer->_paginator;
    115c:	ldr	r5, [r2, #80]	; 0x50
    115e:	ldr	r6, [r5, #12]
    Sequencer * sequencer = _controller->_sequencer;

    // todo: there is a bug when you only have 1 page,
    // the sequencer crashes when you use motion record
    if (_id == 0) {
    1160:	cmp	r3, #0
    1162:	beq.n	11d4 <Knob::onChange()+0xf8>
      Serial.println("current paginator step pitch");
      Serial.println(paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->pitchGrade);
      sequencer->_stepsEdit[sequencer->_currentStep]->controlPitch(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlPitch(_value);
      Serial.println("a");
    } else if (_id == 1) {
    1164:	cmp	r3, #1
    1166:	beq.w	12ec <Knob::onChange()+0x210>
      sequencer->_stepsEdit[sequencer->_currentStep]->controlVelocity(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlVelocity(_value);
    } else if (_id == 2) {
    116a:	cmp	r3, #2
    116c:	beq.n	126a <Knob::onChange()+0x18e>
      sequencer->_stepsEdit[sequencer->_currentStep]->controlLength(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlLength(_value);
    } else if (_id == 3) {
    116e:	cmp	r3, #3
    1170:	beq.w	1312 <Knob::onChange()+0x236>
      sequencer->_stepsEdit[_controller->_sequencer->_currentStep]->controlChance(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlChance(_value);
    } else if (_id == 4) {
    1174:	cmp	r3, #4
    1176:	bne.n	1128 <Knob::onChange()+0x4c>
      sequencer->_stepsEdit[_controller->_sequencer->_currentStep]->controlSwing(_value);
    1178:	ldr	r3, [r5, #48]	; 0x30
    117a:	ldr	r1, [r4, #4]
    117c:	adds	r3, #4
    117e:	ldr.w	r0, [r5, r3, lsl #2]
    1182:	bl	1090 <Step::controlSwing(int)>
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlSwing(_value);
    1186:	ldr	r3, [r5, #48]	; 0x30
    1188:	ldr	r2, [r6, #8]
    118a:	ldr	r1, [r4, #4]
    118c:	add.w	r3, r3, r2, lsl #2
    1190:	adds	r3, #4
    1192:	ldr.w	r0, [r6, r3, lsl #2]
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    }  
  }
}
    1196:	ldmia.w	sp!, {r4, r5, r6, lr}
    } else if (_id == 3) {
      sequencer->_stepsEdit[_controller->_sequencer->_currentStep]->controlChance(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlChance(_value);
    } else if (_id == 4) {
      sequencer->_stepsEdit[_controller->_sequencer->_currentStep]->controlSwing(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlSwing(_value);
    119a:	b.w	1090 <Step::controlSwing(int)>
    } else if (_id == 5) {
      _controller->_sequencer->_transport->controlTempo(_value);
    } else if (_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    } else if (_controller->getChanceMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    119e:	ldr	r2, [r4, #16]
    11a0:	ldr	r3, [r4, #12]
    11a2:	ldr	r2, [r2, #80]	; 0x50
    11a4:	ldr	r1, [r4, #4]
    11a6:	adds	r3, #4
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    }  
  }
}
    11a8:	ldmia.w	sp!, {r4, r5, r6, lr}
    } else if (_id == 5) {
      _controller->_sequencer->_transport->controlTempo(_value);
    } else if (_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    } else if (_controller->getChanceMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    11ac:	ldr.w	r0, [r2, r3, lsl #2]
    11b0:	b.w	104c <Step::controlChance(int)>
    }
  } else {
    if (_id == 4) {
      _controller->_sequencer->_piano->transpose(_value);
    } else if (_id == 5) {
      _controller->_sequencer->_transport->controlTempo(_value);
    11b4:	ldr	r3, [r4, #16]
    11b6:	ldr	r1, [r4, #4]
    11b8:	ldr	r3, [r3, #80]	; 0x50
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    }  
  }
}
    11ba:	ldmia.w	sp!, {r4, r5, r6, lr}
    }
  } else {
    if (_id == 4) {
      _controller->_sequencer->_piano->transpose(_value);
    } else if (_id == 5) {
      _controller->_sequencer->_transport->controlTempo(_value);
    11be:	ldr	r0, [r3, #4]
    11c0:	b.w	a9c <Transport::controlTempo(int)>
      sequencer->_stepsEdit[_controller->_sequencer->_currentStep]->controlSwing(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlSwing(_value);
    }
  } else {
    if (_id == 4) {
      _controller->_sequencer->_piano->transpose(_value);
    11c4:	ldr	r3, [r4, #16]
    11c6:	ldr	r1, [r4, #4]
    11c8:	ldr	r3, [r3, #80]	; 0x50
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    }  
  }
}
    11ca:	ldmia.w	sp!, {r4, r5, r6, lr}
      sequencer->_stepsEdit[_controller->_sequencer->_currentStep]->controlSwing(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlSwing(_value);
    }
  } else {
    if (_id == 4) {
      _controller->_sequencer->_piano->transpose(_value);
    11ce:	ldr	r0, [r3, #52]	; 0x34
    11d0:	b.w	83c <Piano::transpose(int)>
    11d4:	movs	r1, #12
    11d6:	ldr	r0, [pc, #408]	; (1370 <Knob::onChange()+0x294>)
    11d8:	bl	1a14 <usb_serial_write>
    11dc:	ldr	r0, [pc, #396]	; (136c <Knob::onChange()+0x290>)
    11de:	bl	3588 <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    11e2:	ldr	r1, [r5, #48]	; 0x30
    11e4:	ldr	r0, [pc, #388]	; (136c <Knob::onChange()+0x290>)
    11e6:	bl	3628 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    11ea:	ldr	r0, [pc, #384]	; (136c <Knob::onChange()+0x290>)
    11ec:	bl	3588 <Print::println()>
    11f0:	movs	r1, #21
    11f2:	ldr	r0, [pc, #384]	; (1374 <Knob::onChange()+0x298>)
    11f4:	bl	1a14 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    11f8:	ldr	r0, [pc, #368]	; (136c <Knob::onChange()+0x290>)
    11fa:	bl	3588 <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    11fe:	ldr	r1, [r6, #8]
    1200:	ldr	r0, [pc, #360]	; (136c <Knob::onChange()+0x290>)
    1202:	bl	3628 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1206:	ldr	r0, [pc, #356]	; (136c <Knob::onChange()+0x290>)
    1208:	bl	3588 <Print::println()>
    120c:	movs	r1, #28
    120e:	ldr	r0, [pc, #360]	; (1378 <Knob::onChange()+0x29c>)
    1210:	bl	1a14 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1214:	ldr	r0, [pc, #340]	; (136c <Knob::onChange()+0x290>)
    1216:	bl	3588 <Print::println()>
      Serial.println("current step");
      Serial.println(sequencer->_currentStep);
      Serial.println("current playback page");
      Serial.println(paginator->_currentPlaybackPage);
      Serial.println("current paginator step pitch");
      Serial.println(paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->pitchGrade);
    121a:	ldr	r2, [r6, #8]
    121c:	ldr	r3, [r5, #48]	; 0x30
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    121e:	ldr	r0, [pc, #332]	; (136c <Knob::onChange()+0x290>)
    1220:	add.w	r3, r3, r2, lsl #2
    1224:	adds	r3, #4
    1226:	ldr.w	r3, [r6, r3, lsl #2]
    122a:	ldr	r1, [r3, #8]
    122c:	bl	3628 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1230:	ldr	r0, [pc, #312]	; (136c <Knob::onChange()+0x290>)
    1232:	bl	3588 <Print::println()>
      sequencer->_stepsEdit[sequencer->_currentStep]->controlPitch(_value);
    1236:	ldr	r3, [r5, #48]	; 0x30
    1238:	ldr	r1, [r4, #4]
    123a:	adds	r3, #4
    123c:	ldr.w	r0, [r5, r3, lsl #2]
    1240:	bl	fd0 <Step::controlPitch(int)>
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlPitch(_value);
    1244:	ldr	r2, [r6, #8]
    1246:	ldr	r3, [r5, #48]	; 0x30
    1248:	ldr	r1, [r4, #4]
    124a:	add.w	r3, r3, r2, lsl #2
    124e:	adds	r3, #4
    1250:	ldr.w	r0, [r6, r3, lsl #2]
    1254:	bl	fd0 <Step::controlPitch(int)>
    1258:	movs	r1, #1
    125a:	ldr	r0, [pc, #288]	; (137c <Knob::onChange()+0x2a0>)
    125c:	bl	1a14 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1260:	ldr	r0, [pc, #264]	; (136c <Knob::onChange()+0x290>)
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    }  
  }
}
    1262:	ldmia.w	sp!, {r4, r5, r6, lr}
    1266:	b.w	3588 <Print::println()>
      Serial.println("a");
    } else if (_id == 1) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlVelocity(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlVelocity(_value);
    } else if (_id == 2) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlLength(_value);
    126a:	ldr	r3, [r5, #48]	; 0x30
    126c:	ldr	r1, [r4, #4]
    126e:	adds	r3, #4
    1270:	ldr.w	r0, [r5, r3, lsl #2]
    1274:	bl	f88 <Step::controlLength(int)>
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlLength(_value);
    1278:	ldr	r3, [r5, #48]	; 0x30
    127a:	ldr	r2, [r6, #8]
    127c:	ldr	r1, [r4, #4]
    127e:	add.w	r3, r3, r2, lsl #2
    1282:	adds	r3, #4
    1284:	ldr.w	r0, [r6, r3, lsl #2]
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    }  
  }
}
    1288:	ldmia.w	sp!, {r4, r5, r6, lr}
    } else if (_id == 1) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlVelocity(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlVelocity(_value);
    } else if (_id == 2) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlLength(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlLength(_value);
    128c:	b.w	f88 <Step::controlLength(int)>
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    } else if (_controller->getChanceMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    } else if (_controller->getMode() == VELOCITY && !_controller->getChanceMode() && !_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
    } else if (_controller->getMode() == PITCH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
    1290:	ldr	r0, [r4, #16]
    1292:	bl	17e4 <Controller::getChanceMode()>
    1296:	cmp	r0, #0
    1298:	bne.w	111c <Knob::onChange()+0x40>
    129c:	ldr	r0, [r4, #16]
    129e:	bl	17ec <Controller::getSwingMode()>
    12a2:	cmp	r0, #0
    12a4:	bne.w	111c <Knob::onChange()+0x40>
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    12a8:	ldr	r2, [r4, #16]
    12aa:	ldr	r3, [r4, #12]
    12ac:	ldr	r2, [r2, #80]	; 0x50
    12ae:	ldr	r1, [r4, #4]
    12b0:	adds	r3, #4
    } else if (_controller->getMode() == NOTELENGTH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    }  
  }
}
    12b2:	ldmia.w	sp!, {r4, r5, r6, lr}
    } else if (_controller->getChanceMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    } else if (_controller->getMode() == VELOCITY && !_controller->getChanceMode() && !_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
    } else if (_controller->getMode() == PITCH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    12b6:	ldr.w	r0, [r2, r3, lsl #2]
    12ba:	b.w	fd0 <Step::controlPitch(int)>
      _controller->_sequencer->_transport->controlTempo(_value);
    } else if (_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    } else if (_controller->getChanceMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    } else if (_controller->getMode() == VELOCITY && !_controller->getChanceMode() && !_controller->getSwingMode()) {
    12be:	ldr	r0, [r4, #16]
    12c0:	bl	17e4 <Controller::getChanceMode()>
    12c4:	cmp	r0, #0
    12c6:	bne.w	1110 <Knob::onChange()+0x34>
    12ca:	ldr	r0, [r4, #16]
    12cc:	bl	17ec <Controller::getSwingMode()>
    12d0:	cmp	r0, #0
    12d2:	bne.w	1110 <Knob::onChange()+0x34>
      _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
    12d6:	ldr	r2, [r4, #16]
    12d8:	ldr	r3, [r4, #12]
    12da:	ldr	r2, [r2, #80]	; 0x50
    12dc:	ldr	r1, [r4, #4]
    12de:	adds	r3, #4
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    }  
  }
}
    12e0:	ldmia.w	sp!, {r4, r5, r6, lr}
    } else if (_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
    } else if (_controller->getChanceMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    } else if (_controller->getMode() == VELOCITY && !_controller->getChanceMode() && !_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
    12e4:	ldr.w	r0, [r2, r3, lsl #2]
    12e8:	b.w	100c <Step::controlVelocity(int)>
      Serial.println(paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->pitchGrade);
      sequencer->_stepsEdit[sequencer->_currentStep]->controlPitch(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlPitch(_value);
      Serial.println("a");
    } else if (_id == 1) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlVelocity(_value);
    12ec:	ldr	r3, [r5, #48]	; 0x30
    12ee:	ldr	r1, [r4, #4]
    12f0:	adds	r3, #4
    12f2:	ldr.w	r0, [r5, r3, lsl #2]
    12f6:	bl	100c <Step::controlVelocity(int)>
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlVelocity(_value);
    12fa:	ldr	r3, [r5, #48]	; 0x30
    12fc:	ldr	r2, [r6, #8]
    12fe:	ldr	r1, [r4, #4]
    1300:	add.w	r3, r3, r2, lsl #2
    1304:	adds	r3, #4
    1306:	ldr.w	r0, [r6, r3, lsl #2]
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    }  
  }
}
    130a:	ldmia.w	sp!, {r4, r5, r6, lr}
      sequencer->_stepsEdit[sequencer->_currentStep]->controlPitch(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlPitch(_value);
      Serial.println("a");
    } else if (_id == 1) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlVelocity(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlVelocity(_value);
    130e:	b.w	100c <Step::controlVelocity(int)>
    } else if (_id == 2) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlLength(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlLength(_value);
    } else if (_id == 3) {
      sequencer->_stepsEdit[_controller->_sequencer->_currentStep]->controlChance(_value);
    1312:	ldr	r3, [r5, #48]	; 0x30
    1314:	ldr	r1, [r4, #4]
    1316:	adds	r3, #4
    1318:	ldr.w	r0, [r5, r3, lsl #2]
    131c:	bl	104c <Step::controlChance(int)>
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlChance(_value);
    1320:	ldr	r3, [r5, #48]	; 0x30
    1322:	ldr	r2, [r6, #8]
    1324:	ldr	r1, [r4, #4]
    1326:	add.w	r3, r3, r2, lsl #2
    132a:	adds	r3, #4
    132c:	ldr.w	r0, [r6, r3, lsl #2]
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    }  
  }
}
    1330:	ldmia.w	sp!, {r4, r5, r6, lr}
    } else if (_id == 2) {
      sequencer->_stepsEdit[sequencer->_currentStep]->controlLength(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlLength(_value);
    } else if (_id == 3) {
      sequencer->_stepsEdit[_controller->_sequencer->_currentStep]->controlChance(_value);
      paginator->_pages[paginator->_currentPlaybackPage][sequencer->_currentStep]->controlChance(_value);
    1334:	b.w	104c <Step::controlChance(int)>
      _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
    } else if (_controller->getMode() == VELOCITY && !_controller->getChanceMode() && !_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
    } else if (_controller->getMode() == PITCH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
    1338:	ldr	r0, [r4, #16]
    133a:	bl	17e4 <Controller::getChanceMode()>
    133e:	cmp	r0, #0
    1340:	bne.w	1128 <Knob::onChange()+0x4c>
    1344:	ldr	r0, [r4, #16]
    1346:	bl	17ec <Controller::getSwingMode()>
    134a:	cmp	r0, #0
    134c:	bne.w	1128 <Knob::onChange()+0x4c>
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    1350:	ldr	r2, [r4, #16]
    1352:	ldr	r3, [r4, #12]
    1354:	ldr	r2, [r2, #80]	; 0x50
    1356:	ldr	r1, [r4, #4]
    1358:	adds	r3, #4
    }  
  }
}
    135a:	ldmia.w	sp!, {r4, r5, r6, lr}
    } else if (_controller->getMode() == VELOCITY && !_controller->getChanceMode() && !_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
    } else if (_controller->getMode() == PITCH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
    _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
    } else if (_controller->getMode() == NOTELENGTH && !_controller->getChanceMode() && !_controller->getSwingMode()) {
      _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
    135e:	ldr.w	r0, [r2, r3, lsl #2]
    1362:	b.w	f88 <Step::controlLength(int)>
    1366:	nop
    1368:	.word	0x00004c38
    136c:	.word	0x1fff0c48
    1370:	.word	0x00004bec
    1374:	.word	0x00004bfc
    1378:	.word	0x00004c14
    137c:	.word	0x00004c34

00001380 <Knob::tick()>:
    }  
  }
}

// todo latch
void Knob::tick () {
    1380:	push	{r4, lr}
    1382:	mov	r4, r0
  _value = analogRead(_pin);
    1384:	ldrb	r0, [r0, #0]
    1386:	bl	1e40 <analogRead>

  int diff = abs(_value - _lastValue);
    138a:	ldr	r3, [r4, #8]
  }
}

// todo latch
void Knob::tick () {
  _value = analogRead(_pin);
    138c:	str	r0, [r4, #4]

  int diff = abs(_value - _lastValue);

  // "filter"
  const boolean isChanging = _value != _lastValue && diff > 10;
    138e:	cmp	r0, r3
    1390:	beq.n	13a8 <Knob::tick()+0x28>
    1392:	subs	r0, r0, r3
    1394:	cmp	r0, #0
    1396:	it	lt
    1398:	neglt	r0, r0
    139a:	cmp	r0, #10
    139c:	ble.n	13a8 <Knob::tick()+0x28>

  if (isChanging) {
    onChange();
    139e:	mov	r0, r4
    13a0:	bl	10dc <Knob::onChange()>

    _lastValue = _value;
    13a4:	ldr	r3, [r4, #4]
    13a6:	str	r3, [r4, #8]
    13a8:	pop	{r4, pc}
    13aa:	nop

000013ac <Controller::Controller(Sequencer*)>:
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"
#include "paginator.h"

Controller::Controller (Sequencer* sequencer) {
    13ac:	push	{r4, r5, r6, r7, lr}
  _sequencer = sequencer;
  _modeBeforeChance = PITCH;
    13ae:	movs	r5, #0
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"
#include "paginator.h"

Controller::Controller (Sequencer* sequencer) {
    13b0:	sub	sp, #20
    13b2:	mov	r4, r0
  _sequencer = sequencer;
    13b4:	str	r1, [r0, #80]	; 0x50
  _modeBeforeChance = PITCH;
    13b6:	strb.w	r5, [r0, #53]	; 0x35
  _modeBeforeMotion = PITCH;
    13ba:	strb.w	r5, [r0, #54]	; 0x36
  _currentMode = PITCH;
    13be:	strb.w	r5, [r0, #52]	; 0x34
  _shiftMode = false;
    13c2:	strb.w	r5, [r0, #48]	; 0x30
  _copyMode = false;
    13c6:	strb.w	r5, [r0, #84]	; 0x54
  _chanceMode = false;
    13ca:	strb.w	r5, [r0, #51]	; 0x33
  _swingMode = false;
    13ce:	strb.w	r5, [r0, #49]	; 0x31
  _motionMode = false;
    13d2:	strb.w	r5, [r0, #50]	; 0x32
  
  _leds[0] = new Led(3, LOW);
    13d6:	movs	r0, #24
    13d8:	bl	36cc <operator new(unsigned int)>
    13dc:	mov	r2, r5
    13de:	mov	r6, r0
    13e0:	movs	r1, #3
    13e2:	bl	880 <Led::Led(int, int)>
    13e6:	str	r6, [r4, #56]	; 0x38
  _leds[1] = new Led(5, LOW);
    13e8:	movs	r0, #24
    13ea:	bl	36cc <operator new(unsigned int)>
    13ee:	mov	r2, r5
    13f0:	mov	r6, r0
    13f2:	movs	r1, #5
    13f4:	bl	880 <Led::Led(int, int)>
    13f8:	str	r6, [r4, #60]	; 0x3c
  _leds[2] = new Led(7, LOW);
    13fa:	movs	r0, #24
    13fc:	bl	36cc <operator new(unsigned int)>
    1400:	mov	r2, r5
    1402:	mov	r6, r0
    1404:	movs	r1, #7
    1406:	bl	880 <Led::Led(int, int)>
    140a:	str	r6, [r4, #64]	; 0x40
  _leds[3] = new Led(9, LOW);
    140c:	movs	r0, #24
    140e:	bl	36cc <operator new(unsigned int)>
    1412:	mov	r2, r5
    1414:	mov	r6, r0
    1416:	movs	r1, #9
    1418:	bl	880 <Led::Led(int, int)>
    141c:	str	r6, [r4, #68]	; 0x44
  _leds[4] = new Led(11, LOW);
    141e:	movs	r0, #24
    1420:	bl	36cc <operator new(unsigned int)>
    1424:	mov	r2, r5
    1426:	mov	r6, r0
    1428:	movs	r1, #11
    142a:	bl	880 <Led::Led(int, int)>
    142e:	str	r6, [r4, #72]	; 0x48
  _leds[5] = new Led(24, LOW);
    1430:	movs	r0, #24
    1432:	bl	36cc <operator new(unsigned int)>
    1436:	mov	r2, r5
    1438:	movs	r1, #24
    143a:	mov	r6, r0
    143c:	bl	880 <Led::Led(int, int)>
    1440:	str	r6, [r4, #76]	; 0x4c

  _leds[4]->toggle();
    1442:	ldr	r0, [r4, #72]	; 0x48
    1444:	bl	8dc <Led::toggle()>
  _leds[5]->toggle();
    1448:	ldr	r0, [r4, #76]	; 0x4c
    144a:	bl	8dc <Led::toggle()>

  _buttons[0] = new Button(1, step1pin, _leds[0], false, false, this);
    144e:	movs	r0, #56	; 0x38
    1450:	bl	36cc <operator new(unsigned int)>
    1454:	ldr	r3, [r4, #56]	; 0x38
    1456:	str	r5, [sp, #4]
    1458:	mov	r6, r0
    145a:	str	r5, [sp, #0]
    145c:	movs	r2, #2
    145e:	movs	r1, #1
    1460:	str	r4, [sp, #8]
    1462:	bl	570 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    1466:	str	r6, [r4, #0]
  _buttons[1] = new Button(2, step2pin, _leds[1], false, false, this);
    1468:	movs	r0, #56	; 0x38
    146a:	bl	36cc <operator new(unsigned int)>
    146e:	ldr	r3, [r4, #60]	; 0x3c
    1470:	str	r5, [sp, #4]
    1472:	mov	r6, r0
    1474:	str	r5, [sp, #0]
    1476:	movs	r2, #4
    1478:	movs	r1, #2
    147a:	str	r4, [sp, #8]
    147c:	bl	570 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    1480:	str	r6, [r4, #4]
  _buttons[2] = new Button(3, step3pin, _leds[2], false, false, this);
    1482:	movs	r0, #56	; 0x38
    1484:	bl	36cc <operator new(unsigned int)>
    1488:	ldr	r3, [r4, #64]	; 0x40
    148a:	str	r5, [sp, #4]
    148c:	mov	r6, r0
    148e:	str	r5, [sp, #0]
    1490:	movs	r2, #6
    1492:	movs	r1, #3
    1494:	str	r4, [sp, #8]
    1496:	bl	570 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    149a:	str	r6, [r4, #8]
  _buttons[3] = new Button(4, step4pin, _leds[3], false, false, this);
    149c:	movs	r0, #56	; 0x38
    149e:	bl	36cc <operator new(unsigned int)>
    14a2:	ldr	r3, [r4, #68]	; 0x44
    14a4:	str	r5, [sp, #4]
    14a6:	mov	r6, r0
    14a8:	str	r5, [sp, #0]
    14aa:	movs	r2, #8
    14ac:	movs	r1, #4
    14ae:	str	r4, [sp, #8]
    14b0:	bl	570 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    14b4:	str	r6, [r4, #12]
  _buttons[4] = new Button(5, shiftPin, _leds[4], true, false, this);
    14b6:	movs	r0, #56	; 0x38
    14b8:	bl	36cc <operator new(unsigned int)>
    14bc:	movs	r6, #1
    14be:	ldr	r3, [r4, #72]	; 0x48
    14c0:	str	r5, [sp, #4]
    14c2:	mov	r7, r0
    14c4:	movs	r2, #10
    14c6:	movs	r1, #5
    14c8:	str	r4, [sp, #8]
    14ca:	str	r6, [sp, #0]
    14cc:	bl	570 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    14d0:	str	r7, [r4, #16]
  _buttons[5] = new Button(6, playPin, _leds[5], false, true, this);
    14d2:	movs	r0, #56	; 0x38
    14d4:	bl	36cc <operator new(unsigned int)>
    14d8:	ldr	r3, [r4, #76]	; 0x4c
    14da:	str	r4, [sp, #8]
    14dc:	mov	r7, r0
    14de:	stmia.w	sp, {r5, r6}
    14e2:	movs	r2, #12
    14e4:	movs	r1, #6
    14e6:	bl	570 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    14ea:	str	r7, [r4, #20]

  _knobs[0] = new Knob(A0, 0, this);
    14ec:	movs	r0, #20
    14ee:	bl	36cc <operator new(unsigned int)>
    14f2:	mov	r3, r4
    14f4:	mov	r2, r5
    14f6:	mov	r7, r0
    14f8:	movs	r1, #14
    14fa:	bl	10cc <Knob::Knob(unsigned char, int, Controller*)>
    14fe:	str	r7, [r4, #24]
  _knobs[1] = new Knob(A1, 1, this);
    1500:	movs	r0, #20
    1502:	bl	36cc <operator new(unsigned int)>
    1506:	mov	r3, r4
    1508:	mov	r2, r6
    150a:	mov	r5, r0
    150c:	movs	r1, #15
    150e:	bl	10cc <Knob::Knob(unsigned char, int, Controller*)>
    1512:	str	r5, [r4, #28]
  _knobs[2] = new Knob(A2, 2, this);
    1514:	movs	r0, #20
    1516:	bl	36cc <operator new(unsigned int)>
    151a:	mov	r3, r4
    151c:	mov	r5, r0
    151e:	movs	r2, #2
    1520:	movs	r1, #16
    1522:	bl	10cc <Knob::Knob(unsigned char, int, Controller*)>
    1526:	str	r5, [r4, #32]
  _knobs[3] = new Knob(A3, 3, this);
    1528:	movs	r0, #20
    152a:	bl	36cc <operator new(unsigned int)>
    152e:	mov	r3, r4
    1530:	mov	r5, r0
    1532:	movs	r2, #3
    1534:	movs	r1, #17
    1536:	bl	10cc <Knob::Knob(unsigned char, int, Controller*)>
    153a:	str	r5, [r4, #36]	; 0x24
  _knobs[4] = new Knob(A4, 4, this);
    153c:	movs	r0, #20
    153e:	bl	36cc <operator new(unsigned int)>
    1542:	mov	r3, r4
    1544:	mov	r5, r0
    1546:	movs	r2, #4
    1548:	movs	r1, #18
    154a:	bl	10cc <Knob::Knob(unsigned char, int, Controller*)>
    154e:	str	r5, [r4, #40]	; 0x28
  _knobs[5] = new Knob(A5, 5, this);
    1550:	movs	r0, #20
    1552:	bl	36cc <operator new(unsigned int)>
    1556:	mov	r3, r4
    1558:	movs	r2, #5
    155a:	movs	r1, #19
    155c:	mov	r5, r0
    155e:	bl	10cc <Knob::Knob(unsigned char, int, Controller*)>
};
    1562:	mov	r0, r4
  _knobs[0] = new Knob(A0, 0, this);
  _knobs[1] = new Knob(A1, 1, this);
  _knobs[2] = new Knob(A2, 2, this);
  _knobs[3] = new Knob(A3, 3, this);
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
    1564:	str	r5, [r4, #44]	; 0x2c
};
    1566:	add	sp, #20
    1568:	pop	{r4, r5, r6, r7, pc}
    156a:	nop

0000156c <Controller::tick()>:

void Controller::tick() {
    156c:	push	{r3, r4, r5, r6, r7, lr}
    156e:	add.w	r7, r0, #20
    1572:	mov	r6, r7
    1574:	subs	r4, r0, #4
    1576:	add.w	r5, r0, #52	; 0x34
  for (size_t i = 0; i < 6; i++) {
    _buttons[i]->tick();
    157a:	ldr.w	r0, [r4, #4]!
    157e:	bl	71c <Button::tick()>
    _leds[i]->tick();
    1582:	ldr.w	r0, [r5, #4]!
    1586:	bl	924 <Led::tick()>
    _knobs[i]->tick();
    158a:	ldr.w	r0, [r6, #4]!
    158e:	bl	1380 <Knob::tick()>
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
};

void Controller::tick() {
  for (size_t i = 0; i < 6; i++) {
    1592:	cmp	r4, r7
    1594:	bne.n	157a <Controller::tick()+0xe>
    _buttons[i]->tick();
    _leds[i]->tick();
    _knobs[i]->tick();
  }
}
    1596:	pop	{r3, r4, r5, r6, r7, pc}

00001598 <Controller::printCurrentMode()>:

void Controller::printCurrentMode () {
    1598:	push	{r3, lr}
  if (_currentMode == PITCH) {
    159a:	ldrb.w	r3, [r0, #52]	; 0x34
    159e:	cbz	r3, 15aa <Controller::printCurrentMode()+0x12>
    Serial.println("PITCH");
  } else if (_currentMode == VELOCITY) {
    15a0:	cmp	r3, #1
    15a2:	beq.n	15ce <Controller::printCurrentMode()+0x36>
    Serial.println("VELOCITY");
  } else if (_currentMode == NOTELENGTH) {
    15a4:	cmp	r3, #2
    15a6:	beq.n	15bc <Controller::printCurrentMode()+0x24>
    15a8:	pop	{r3, pc}
    15aa:	movs	r1, #5
    15ac:	ldr	r0, [pc, #48]	; (15e0 <Controller::printCurrentMode()+0x48>)
    15ae:	bl	1a14 <usb_serial_write>
    15b2:	ldr	r0, [pc, #48]	; (15e4 <Controller::printCurrentMode()+0x4c>)
    Serial.println("NOTELENGTH");
  }
}
    15b4:	ldmia.w	sp!, {r3, lr}
    15b8:	b.w	3588 <Print::println()>
    15bc:	movs	r1, #10
    15be:	ldr	r0, [pc, #40]	; (15e8 <Controller::printCurrentMode()+0x50>)
    15c0:	bl	1a14 <usb_serial_write>
    15c4:	ldr	r0, [pc, #28]	; (15e4 <Controller::printCurrentMode()+0x4c>)
    15c6:	ldmia.w	sp!, {r3, lr}
    15ca:	b.w	3588 <Print::println()>
    15ce:	movs	r1, #8
    15d0:	ldr	r0, [pc, #24]	; (15ec <Controller::printCurrentMode()+0x54>)
    15d2:	bl	1a14 <usb_serial_write>
    15d6:	ldr	r0, [pc, #12]	; (15e4 <Controller::printCurrentMode()+0x4c>)
    15d8:	ldmia.w	sp!, {r3, lr}
    15dc:	b.w	3588 <Print::println()>
    15e0:	.word	0x00004c40
    15e4:	.word	0x1fff0c48
    15e8:	.word	0x00004c54
    15ec:	.word	0x00004c48

000015f0 <Controller::toggleMode()>:

void Controller::toggleMode () {
    15f0:	push	{r3, r4, r5, lr}
  if (_currentMode == PITCH) {
    15f2:	ldrb.w	r3, [r0, #52]	; 0x34
  } else if (_currentMode == NOTELENGTH) {
    Serial.println("NOTELENGTH");
  }
}

void Controller::toggleMode () {
    15f6:	mov	r4, r0
  if (_currentMode == PITCH) {
    15f8:	cbz	r3, 1604 <Controller::toggleMode()+0x14>
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    15fa:	cmp	r3, #1
    15fc:	beq.n	164c <Controller::toggleMode()+0x5c>
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    15fe:	cmp	r3, #2
    1600:	beq.n	1626 <Controller::toggleMode()+0x36>
    1602:	pop	{r3, r4, r5, pc}
  }
}

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    1604:	movs	r3, #1
    1606:	strb.w	r3, [r0, #52]	; 0x34
    160a:	movs	r1, #8
    160c:	ldr	r0, [pc, #100]	; (1674 <Controller::toggleMode()+0x84>)
    160e:	bl	1a14 <usb_serial_write>
    1612:	ldr	r0, [pc, #100]	; (1678 <Controller::toggleMode()+0x88>)
    1614:	bl	3588 <Print::println()>
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
    1618:	ldr	r0, [r4, #72]	; 0x48
    161a:	movw	r1, #999	; 0x3e7
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};
    161e:	ldmia.w	sp!, {r3, r4, r5, lr}

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
    1622:	b.w	8a8 <Led::blink(int)>
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
    1626:	movs	r5, #0
    1628:	strb.w	r5, [r0, #52]	; 0x34
    162c:	movs	r1, #5
    162e:	ldr	r0, [pc, #76]	; (167c <Controller::toggleMode()+0x8c>)
    1630:	bl	1a14 <usb_serial_write>
    1634:	ldr	r0, [pc, #64]	; (1678 <Controller::toggleMode()+0x88>)
    1636:	bl	3588 <Print::println()>
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    163a:	ldr	r0, [r4, #72]	; 0x48
    163c:	mov	r1, r5
    163e:	bl	8a8 <Led::blink(int)>
    _leds[4]->on();
    1642:	ldr	r0, [r4, #72]	; 0x48
  }
};
    1644:	ldmia.w	sp!, {r3, r4, r5, lr}
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
    1648:	b.w	914 <Led::on()>
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
    164c:	movs	r3, #2
    164e:	strb.w	r3, [r0, #52]	; 0x34
    1652:	movs	r1, #10
    1654:	ldr	r0, [pc, #40]	; (1680 <Controller::toggleMode()+0x90>)
    1656:	bl	1a14 <usb_serial_write>
    165a:	ldr	r0, [pc, #28]	; (1678 <Controller::toggleMode()+0x88>)
    165c:	bl	3588 <Print::println()>
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    1660:	ldr	r0, [r4, #72]	; 0x48
    1662:	movs	r1, #0
    1664:	bl	8a8 <Led::blink(int)>
    _leds[4]->off();
    1668:	ldr	r0, [r4, #72]	; 0x48
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};
    166a:	ldmia.w	sp!, {r3, r4, r5, lr}
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
    166e:	b.w	908 <Led::off()>
    1672:	nop
    1674:	.word	0x00004c48
    1678:	.word	0x1fff0c48
    167c:	.word	0x00004c40
    1680:	.word	0x00004c54

00001684 <Controller::enterShiftMode()>:
  }
};

void Controller::enterShiftMode () {

  if (!_shiftMode) {
    1684:	ldrb.w	r3, [r0, #48]	; 0x30
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};

void Controller::enterShiftMode () {
    1688:	push	{r4, r5, r6, lr}
    168a:	mov	r6, r0

  if (!_shiftMode) {
    168c:	cbz	r3, 16ca <Controller::enterShiftMode()+0x46>
    168e:	ldr	r3, [r6, #80]	; 0x50
    1690:	ldr	r3, [r3, #12]
    Serial.println("NAVIGATE");
  } 

  _shiftMode = true;
    1692:	movs	r2, #1
    1694:	ldr	r3, [r3, #4]
    1696:	strb.w	r2, [r6, #48]	; 0x30
    169a:	add.w	r5, r6, #56	; 0x38

  for (int i = 0; i < 4; i++) {
    169e:	movs	r4, #0
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
    16a0:	cmp	r4, r3
    Serial.println("NAVIGATE");
  } 

  _shiftMode = true;

  for (int i = 0; i < 4; i++) {
    16a2:	add.w	r4, r4, #1
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
    16a6:	beq.n	16b4 <Controller::enterShiftMode()+0x30>
    16a8:	ldr	r0, [r5, #0]
    16aa:	bl	908 <Led::off()>
    16ae:	ldr	r3, [r6, #80]	; 0x50
    16b0:	ldr	r3, [r3, #12]
    16b2:	ldr	r3, [r3, #4]
    Serial.println("NAVIGATE");
  } 

  _shiftMode = true;

  for (int i = 0; i < 4; i++) {
    16b4:	cmp	r4, #4
    16b6:	add.w	r5, r5, #4
    16ba:	bne.n	16a0 <Controller::enterShiftMode()+0x1c>
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
  }

  _leds[_sequencer->_paginator->_currentEditPage]->on();
    16bc:	adds	r3, #14
    16be:	ldr.w	r0, [r6, r3, lsl #2]
};
    16c2:	ldmia.w	sp!, {r4, r5, r6, lr}

  for (int i = 0; i < 4; i++) {
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
  }

  _leds[_sequencer->_paginator->_currentEditPage]->on();
    16c6:	b.w	914 <Led::on()>
    16ca:	movs	r1, #8
    16cc:	ldr	r0, [pc, #12]	; (16dc <Controller::enterShiftMode()+0x58>)
    16ce:	bl	1a14 <usb_serial_write>
    16d2:	ldr	r0, [pc, #12]	; (16e0 <Controller::enterShiftMode()+0x5c>)
    16d4:	bl	3588 <Print::println()>
    16d8:	b.n	168e <Controller::enterShiftMode()+0xa>
    16da:	nop
    16dc:	.word	0x00004c60
    16e0:	.word	0x1fff0c48

000016e4 <Controller::exitShiftMode()>:
};

void Controller::exitShiftMode () {
    16e4:	push	{r4, r5, r6, lr}
  _shiftMode = false;
    16e6:	movs	r4, #0
  }

  _leds[_sequencer->_paginator->_currentEditPage]->on();
};

void Controller::exitShiftMode () {
    16e8:	mov	r6, r0
  _shiftMode = false;
    16ea:	strb.w	r4, [r0, #48]	; 0x30
    16ee:	add.w	r5, r0, #52	; 0x34

  for (size_t i = 0; i < 4; i++) {
    _leds[i]->off();
    16f2:	ldr.w	r0, [r5, #4]!
    16f6:	bl	908 <Led::off()>
    _sequencer->_paginator->setLeds(i);
    16fa:	ldr	r3, [r6, #80]	; 0x50
    16fc:	mov	r1, r4
    16fe:	ldr	r0, [r3, #12]
};

void Controller::exitShiftMode () {
  _shiftMode = false;

  for (size_t i = 0; i < 4; i++) {
    1700:	adds	r4, #1
    _leds[i]->off();
    _sequencer->_paginator->setLeds(i);
    1702:	bl	cec <Paginator::setLeds(unsigned int)>
};

void Controller::exitShiftMode () {
  _shiftMode = false;

  for (size_t i = 0; i < 4; i++) {
    1706:	cmp	r4, #4
    1708:	bne.n	16f2 <Controller::exitShiftMode()+0xe>
    _leds[i]->off();
    _sequencer->_paginator->setLeds(i);
  }
};
    170a:	pop	{r4, r5, r6, pc}

0000170c <Controller::enterCopyMode()>:

void Controller::enterCopyMode () {
  if (!_copyMode) {
    170c:	ldrb.w	r3, [r0, #84]	; 0x54
    _leds[i]->off();
    _sequencer->_paginator->setLeds(i);
  }
};

void Controller::enterCopyMode () {
    1710:	push	{r4, lr}
    1712:	mov	r4, r0
  if (!_copyMode) {
    1714:	cbnz	r3, 1724 <Controller::enterCopyMode()+0x18>
    1716:	movs	r1, #4
    1718:	ldr	r0, [pc, #16]	; (172c <Controller::enterCopyMode()+0x20>)
    171a:	bl	1a14 <usb_serial_write>
    171e:	ldr	r0, [pc, #16]	; (1730 <Controller::enterCopyMode()+0x24>)
    1720:	bl	3588 <Print::println()>
    Serial.println("COPY");
  }

  _copyMode = true;
    1724:	movs	r3, #1
    1726:	strb.w	r3, [r4, #84]	; 0x54
    172a:	pop	{r4, pc}
    172c:	.word	0x00004c6c
    1730:	.word	0x1fff0c48

00001734 <Controller::exitCopyMode()>:
}

void Controller::exitCopyMode () {
  _copyMode = false;
    1734:	movs	r3, #0
    1736:	strb.w	r3, [r0, #84]	; 0x54
    173a:	bx	lr

0000173c <Controller::enterChanceMode()>:
}

void Controller::enterChanceMode () {
    173c:	push	{r3, lr}
  // this if is so that it happens only the first
  // clock cycle in which the user enters the chance mode
  // so it checks that the chance mode is not already true
  if (!_chanceMode && !_swingMode) {
    173e:	ldrb.w	r3, [r0, #51]	; 0x33
    1742:	cbnz	r3, 174a <Controller::enterChanceMode()+0xe>
    1744:	ldrb.w	r3, [r0, #49]	; 0x31
    1748:	cbz	r3, 174c <Controller::enterChanceMode()+0x10>
    174a:	pop	{r3, pc}
    _chanceMode = true;
    174c:	movs	r3, #1
    174e:	strb.w	r3, [r0, #51]	; 0x33
    1752:	movs	r1, #6
    1754:	ldr	r0, [pc, #12]	; (1764 <Controller::enterChanceMode()+0x28>)
    1756:	bl	1a14 <usb_serial_write>
    175a:	ldr	r0, [pc, #12]	; (1768 <Controller::enterChanceMode()+0x2c>)
    Serial.println("CHANCE");
  }
};
    175c:	ldmia.w	sp!, {r3, lr}
    1760:	b.w	3588 <Print::println()>
    1764:	.word	0x00004c74
    1768:	.word	0x1fff0c48

0000176c <Controller::exitChanceMode()>:

void Controller::exitChanceMode () {
  _chanceMode = false;
    176c:	movs	r2, #0
    176e:	strb.w	r2, [r0, #51]	; 0x33

  printCurrentMode();
    1772:	b.w	1598 <Controller::printCurrentMode()>
    1776:	nop

00001778 <Controller::enterSwingMode()>:
};

void Controller::enterSwingMode () {
  if (!_swingMode) {
    1778:	ldrb.w	r3, [r0, #49]	; 0x31
  _chanceMode = false;

  printCurrentMode();
};

void Controller::enterSwingMode () {
    177c:	push	{r4, lr}
    177e:	mov	r4, r0
  if (!_swingMode) {
    1780:	cbnz	r3, 1790 <Controller::enterSwingMode()+0x18>
    1782:	movs	r1, #5
    1784:	ldr	r0, [pc, #16]	; (1798 <Controller::enterSwingMode()+0x20>)
    1786:	bl	1a14 <usb_serial_write>
    178a:	ldr	r0, [pc, #16]	; (179c <Controller::enterSwingMode()+0x24>)
    178c:	bl	3588 <Print::println()>
    Serial.println("SWING");
  }

  _swingMode = true;
    1790:	movs	r3, #1
    1792:	strb.w	r3, [r4, #49]	; 0x31
    1796:	pop	{r4, pc}
    1798:	.word	0x00004c7c
    179c:	.word	0x1fff0c48

000017a0 <Controller::exitSwingMode()>:
};

void Controller::exitSwingMode () {
  _swingMode = false;
    17a0:	movs	r2, #0
    17a2:	strb.w	r2, [r0, #49]	; 0x31

  printCurrentMode();
    17a6:	b.w	1598 <Controller::printCurrentMode()>
    17aa:	nop

000017ac <Controller::enterMotionMode()>:
};

void Controller::enterMotionMode () {
  if (!_motionMode) {
    17ac:	ldrb.w	r3, [r0, #50]	; 0x32
    17b0:	cbz	r3, 17b4 <Controller::enterMotionMode()+0x8>
    17b2:	bx	lr
  _swingMode = false;

  printCurrentMode();
};

void Controller::enterMotionMode () {
    17b4:	push	{r4, lr}
    17b6:	movs	r1, #6
    17b8:	mov	r4, r0
    17ba:	ldr	r0, [pc, #20]	; (17d0 <Controller::enterMotionMode()+0x24>)
    17bc:	bl	1a14 <usb_serial_write>
    17c0:	ldr	r0, [pc, #16]	; (17d4 <Controller::enterMotionMode()+0x28>)
    17c2:	bl	3588 <Print::println()>
  if (!_motionMode) {
    Serial.println("MOTION");
    _motionMode = true;
    17c6:	movs	r3, #1
    17c8:	strb.w	r3, [r4, #50]	; 0x32
    17cc:	pop	{r4, pc}
    17ce:	nop
    17d0:	.word	0x00004c84
    17d4:	.word	0x1fff0c48

000017d8 <Controller::exitMotionMode()>:
  }
};

void Controller::exitMotionMode () {
  _motionMode = false;
    17d8:	movs	r2, #0
    17da:	strb.w	r2, [r0, #50]	; 0x32
  
  printCurrentMode();
    17de:	b.w	1598 <Controller::printCurrentMode()>
    17e2:	nop

000017e4 <Controller::getChanceMode()>:
};

bool Controller::getChanceMode () {
  return _chanceMode == true;
};
    17e4:	ldrb.w	r0, [r0, #51]	; 0x33
    17e8:	bx	lr
    17ea:	nop

000017ec <Controller::getSwingMode()>:

bool Controller::getSwingMode () {
  return _swingMode == true;
}
    17ec:	ldrb.w	r0, [r0, #49]	; 0x31
    17f0:	bx	lr
    17f2:	nop

000017f4 <Controller::getMotionMode()>:

bool Controller::getMotionMode () {
  return _motionMode == true;
}
    17f4:	ldrb.w	r0, [r0, #50]	; 0x32
    17f8:	bx	lr
    17fa:	nop

000017fc <Controller::getCopyMode()>:

bool Controller::getCopyMode () {
  return _copyMode;
}
    17fc:	ldrb.w	r0, [r0, #84]	; 0x54
    1800:	bx	lr
    1802:	nop

00001804 <Controller::getShiftMode()>:

bool Controller::getShiftMode () {
  return _shiftMode;
};
    1804:	ldrb.w	r0, [r0, #48]	; 0x30
    1808:	bx	lr
    180a:	nop

0000180c <Controller::getMode()>:

Modes Controller::getMode() {
  return _currentMode;
};
    180c:	ldrb.w	r0, [r0, #52]	; 0x34
    1810:	bx	lr
    1812:	nop

00001814 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1814:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1816:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    181a:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    181e:	bne.n	18fc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1820:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1822:	bcc.n	18a8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1824:	ldr.w	r3, [r1], #4
    1828:	str.w	r3, [r0], #4
    182c:	ldr.w	r3, [r1], #4
    1830:	str.w	r3, [r0], #4
    1834:	ldr.w	r3, [r1], #4
    1838:	str.w	r3, [r0], #4
    183c:	ldr.w	r3, [r1], #4
    1840:	str.w	r3, [r0], #4
    1844:	ldr.w	r3, [r1], #4
    1848:	str.w	r3, [r0], #4
    184c:	ldr.w	r3, [r1], #4
    1850:	str.w	r3, [r0], #4
    1854:	ldr.w	r3, [r1], #4
    1858:	str.w	r3, [r0], #4
    185c:	ldr.w	r3, [r1], #4
    1860:	str.w	r3, [r0], #4
    1864:	ldr.w	r3, [r1], #4
    1868:	str.w	r3, [r0], #4
    186c:	ldr.w	r3, [r1], #4
    1870:	str.w	r3, [r0], #4
    1874:	ldr.w	r3, [r1], #4
    1878:	str.w	r3, [r0], #4
    187c:	ldr.w	r3, [r1], #4
    1880:	str.w	r3, [r0], #4
    1884:	ldr.w	r3, [r1], #4
    1888:	str.w	r3, [r0], #4
    188c:	ldr.w	r3, [r1], #4
    1890:	str.w	r3, [r0], #4
    1894:	ldr.w	r3, [r1], #4
    1898:	str.w	r3, [r0], #4
    189c:	ldr.w	r3, [r1], #4
    18a0:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    18a4:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    18a6:	bcs.n	1824 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    18a8:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    18aa:	bcc.n	18d0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    18ac:	ldr.w	r3, [r1], #4
    18b0:	str.w	r3, [r0], #4
    18b4:	ldr.w	r3, [r1], #4
    18b8:	str.w	r3, [r0], #4
    18bc:	ldr.w	r3, [r1], #4
    18c0:	str.w	r3, [r0], #4
    18c4:	ldr.w	r3, [r1], #4
    18c8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    18cc:	subs	r2, #16
	bhs	.Lmid_block_loop
    18ce:	bcs.n	18ac <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    18d0:	adds	r2, #12
	blo	.Lcopy_less_than_4
    18d2:	bcc.n	18e0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    18d4:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    18d8:	str.w	r3, [r0], #4
	subs	r2, #4
    18dc:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    18de:	bcs.n	18d4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    18e0:	adds	r2, #4
	beq	.Ldone
    18e2:	beq.n	18f6 <memcpy+0xe2>

	lsls	r2, r2, #31
    18e4:	lsls	r2, r2, #31
	itt ne
    18e6:	itt	ne
	ldrbne  r3, [r1], #1
    18e8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    18ec:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    18f0:	bcc.n	18f6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    18f2:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    18f4:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    18f6:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    18f8:	bx	lr
    18fa:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    18fc:	cmp	r2, #8
	blo	.Lbyte_copy
    18fe:	bcc.n	1928 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    1900:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    1902:	beq.n	1820 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    1904:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    1908:	beq.n	1820 <memcpy+0xc>

	rsb	r3, #4
    190a:	rsb	r3, r3, #4
	subs	r2, r3
    190e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    1910:	lsls	r3, r3, #31
	itt ne
    1912:	itt	ne
	ldrbne  r3, [r1], #1
    1914:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    1918:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    191c:	bcc.n	1820 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    191e:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    1922:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    1926:	b.n	1820 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    1928:	subs	r2, #4
	blo	.Lcopy_less_than_4
    192a:	bcc.n	18e0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    192c:	subs	r2, #1
	ldrb    r3, [r1], #1
    192e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    1932:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    1936:	bcs.n	192c <memcpy+0x118>

	ldrb	r3, [r1]
    1938:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    193a:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    193c:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    193e:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    1940:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    1942:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    1944:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    1946:	bx	lr

00001948 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1948:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    194a:	ldr	r5, [pc, #60]	; (1988 <usb_serial_getchar+0x40>)
    194c:	ldr	r0, [r5, #0]
    194e:	cbz	r0, 1970 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1950:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    1952:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1954:	adds	r1, r0, r3
    1956:	adds	r3, #1
	if (i >= rx_packet->len) {
    1958:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    195a:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    195c:	bcs.n	1964 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    195e:	strh	r3, [r0, #2]
	}
	return c;
    1960:	mov	r0, r4
}
    1962:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    1964:	bl	27f4 <usb_free>
		rx_packet = NULL;
    1968:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    196a:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    196c:	str	r3, [r5, #0]
    196e:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1970:	ldr	r3, [pc, #24]	; (198c <usb_serial_getchar+0x44>)
    1972:	ldrb	r3, [r3, #0]
    1974:	cbz	r3, 1982 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1976:	movs	r0, #2
    1978:	bl	2840 <usb_rx>
    197c:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    197e:	cmp	r0, #0
    1980:	bne.n	1950 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1982:	mov.w	r0, #4294967295
    1986:	pop	{r3, r4, r5, pc}
    1988:	.word	0x1fff15c0
    198c:	.word	0x1fff1720

00001990 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1990:	push	{r4, lr}
	if (!rx_packet) {
    1992:	ldr	r4, [pc, #36]	; (19b8 <usb_serial_peekchar+0x28>)
    1994:	ldr	r0, [r4, #0]
    1996:	cbz	r0, 19a0 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    1998:	ldrh	r3, [r0, #2]
    199a:	add	r0, r3
    199c:	ldrb	r0, [r0, #8]
}
    199e:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    19a0:	ldr	r3, [pc, #24]	; (19bc <usb_serial_peekchar+0x2c>)
    19a2:	ldrb	r3, [r3, #0]
    19a4:	cbz	r3, 19b2 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    19a6:	movs	r0, #2
    19a8:	bl	2840 <usb_rx>
    19ac:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    19ae:	cmp	r0, #0
    19b0:	bne.n	1998 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    19b2:	mov.w	r0, #4294967295
    19b6:	pop	{r4, pc}
    19b8:	.word	0x1fff15c0
    19bc:	.word	0x1fff1720

000019c0 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    19c0:	ldr	r3, [pc, #16]	; (19d4 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    19c2:	ldr	r2, [pc, #20]	; (19d8 <usb_serial_available+0x18>)
    19c4:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    19c6:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    19c8:	cbz	r3, 19d2 <usb_serial_available+0x12>
    19ca:	ldrh	r2, [r3, #0]
    19cc:	ldrh	r3, [r3, #2]
    19ce:	subs	r3, r2, r3
    19d0:	add	r0, r3
	return count;
}
    19d2:	bx	lr
    19d4:	.word	0x1fff15c0
    19d8:	.word	0x1fff1bb8

000019dc <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    19dc:	ldr	r3, [pc, #44]	; (1a0c <usb_serial_flush_input+0x30>)
    19de:	ldrb	r3, [r3, #0]
    19e0:	cbz	r3, 1a0a <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    19e2:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    19e4:	ldr	r4, [pc, #40]	; (1a10 <usb_serial_flush_input+0x34>)
    19e6:	ldr	r0, [r4, #0]
    19e8:	cbz	r0, 19fe <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    19ea:	bl	27f4 <usb_free>
		rx_packet = NULL;
    19ee:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    19f0:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    19f2:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    19f4:	bl	2840 <usb_rx>
		if (!rx) break;
    19f8:	cbz	r0, 1a08 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    19fa:	bl	27f4 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    19fe:	movs	r0, #2
    1a00:	bl	2840 <usb_rx>
		if (!rx) break;
    1a04:	cmp	r0, #0
    1a06:	bne.n	19fa <usb_serial_flush_input+0x1e>
    1a08:	pop	{r4, pc}
    1a0a:	bx	lr
    1a0c:	.word	0x1fff1720
    1a10:	.word	0x1fff15c0

00001a14 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1a14:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1a18:	ldr.w	r9, [pc, #248]	; 1b14 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1a1c:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1a1e:	movs	r2, #1
    1a20:	strb.w	r2, [r9]
	while (size > 0) {
    1a24:	str	r1, [sp, #4]
    1a26:	cbz	r1, 1a84 <usb_serial_write+0x70>
    1a28:	ldr.w	r8, [pc, #236]	; 1b18 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1a2c:	ldr	r7, [pc, #212]	; (1b04 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1a2e:	ldr	r6, [sp, #4]
    1a30:	mov	fp, r0
		if (!tx_packet) {
    1a32:	ldr.w	r0, [r8]
    1a36:	cbz	r0, 1aa6 <usb_serial_write+0x92>
    1a38:	ldr	r5, [pc, #204]	; (1b08 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    1a3a:	ldrh	r4, [r0, #2]
    1a3c:	rsb	r1, r4, #64	; 0x40
    1a40:	cmp	r1, r6
    1a42:	it	cs
    1a44:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1a46:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1a4a:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1a4c:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1a50:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1a52:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1a54:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1a58:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1a5c:	cbz	r1, 1a74 <usb_serial_write+0x60>
    1a5e:	subs	r4, #1
    1a60:	add	r2, r4
    1a62:	add	r1, fp
    1a64:	ldrb.w	r4, [fp], #1
    1a68:	strb.w	r4, [r2, #1]!
    1a6c:	cmp	fp, r1
    1a6e:	bne.n	1a64 <usb_serial_write+0x50>
    1a70:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1a74:	cmp.w	lr, #63	; 0x3f
    1a78:	bhi.n	1a92 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1a7a:	ldr	r2, [pc, #144]	; (1b0c <usb_serial_write+0xf8>)
    1a7c:	movs	r1, #5
    1a7e:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1a80:	cmp	r6, #0
    1a82:	bne.n	1a32 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1a84:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    1a86:	movs	r3, #0
    1a88:	strb.w	r3, [r9]
	return ret;
}
    1a8c:	add	sp, #12
    1a8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1a92:	movs	r2, #64	; 0x40
    1a94:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1a96:	mov	r1, r0
    1a98:	movs	r0, #3
    1a9a:	bl	2990 <usb_tx>
			tx_packet = NULL;
    1a9e:	movs	r2, #0
    1aa0:	str.w	r2, [r8]
    1aa4:	b.n	1a7a <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1aa6:	ldrb	r2, [r7, #0]
    1aa8:	cbz	r2, 1af4 <usb_serial_write+0xe0>
    1aaa:	ldr	r4, [pc, #100]	; (1b10 <usb_serial_write+0xfc>)
    1aac:	ldr	r5, [pc, #88]	; (1b08 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1aae:	mov.w	sl, #1
    1ab2:	b.n	1ac4 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1ab4:	subs	r4, #1
    1ab6:	beq.n	1ae6 <usb_serial_write+0xd2>
    1ab8:	ldrb	r2, [r5, #0]
    1aba:	cbnz	r2, 1ae6 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    1abc:	bl	3494 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1ac0:	ldrb	r2, [r7, #0]
    1ac2:	cbz	r2, 1af4 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1ac4:	movs	r0, #3
    1ac6:	bl	287c <usb_tx_packet_count>
    1aca:	cmp	r0, #7
    1acc:	bhi.n	1ab4 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    1ace:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    1ad2:	bl	27b4 <usb_malloc>
    1ad6:	str.w	r0, [r8]
					if (tx_packet) break;
    1ada:	cmp	r0, #0
    1adc:	bne.n	1a3a <usb_serial_write+0x26>
					tx_noautoflush = 0;
    1ade:	ldr	r3, [pc, #52]	; (1b14 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1ae0:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    1ae2:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1ae4:	bne.n	1ab8 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    1ae6:	movs	r3, #1
					return -1;
    1ae8:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    1aec:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1aee:	add	sp, #12
    1af0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1af4:	movs	r3, #0
					return -1;
    1af6:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1afa:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1afe:	add	sp, #12
    1b00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b04:	.word	0x1fff1720
    1b08:	.word	0x1fff15bc
    1b0c:	.word	0x1fff15b4
    1b10:	.word	0x00014821
    1b14:	.word	0x1fff15b5
    1b18:	.word	0x1fff15b8

00001b1c <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1b1c:	push	{lr}
    1b1e:	sub	sp, #12
    1b20:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    1b22:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1b24:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    1b28:	mov	r0, r3
    1b2a:	bl	1a14 <usb_serial_write>
}
    1b2e:	add	sp, #12
    1b30:	ldr.w	pc, [sp], #4

00001b34 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    1b34:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1b36:	ldr	r5, [pc, #56]	; (1b70 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1b38:	ldr	r4, [pc, #56]	; (1b74 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    1b3a:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1b3c:	movs	r3, #1
    1b3e:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1b40:	cbz	r0, 1b4e <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1b42:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1b44:	movs	r3, #0
    1b46:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1b48:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1b4c:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1b4e:	ldr	r3, [pc, #40]	; (1b78 <usb_serial_write_buffer_free+0x44>)
    1b50:	ldrb	r3, [r3, #0]
    1b52:	cbnz	r3, 1b5a <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    1b54:	movs	r0, #0
    1b56:	strb	r0, [r4, #0]
			return 0;
    1b58:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1b5a:	movs	r0, #3
    1b5c:	bl	287c <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1b60:	cmp	r0, #7
    1b62:	bhi.n	1b54 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    1b64:	bl	27b4 <usb_malloc>
    1b68:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1b6a:	cmp	r0, #0
    1b6c:	bne.n	1b42 <usb_serial_write_buffer_free+0xe>
    1b6e:	b.n	1b54 <usb_serial_write_buffer_free+0x20>
    1b70:	.word	0x1fff15b8
    1b74:	.word	0x1fff15b5
    1b78:	.word	0x1fff1720

00001b7c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1b7c:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1b7e:	ldr	r3, [pc, #68]	; (1bc4 <usb_serial_flush_output+0x48>)
    1b80:	ldrb	r3, [r3, #0]
    1b82:	cbz	r3, 1ba8 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    1b84:	ldr	r6, [pc, #64]	; (1bc8 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1b86:	ldr	r5, [pc, #68]	; (1bcc <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    1b88:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1b8a:	movs	r7, #1
    1b8c:	strb	r7, [r5, #0]
	if (tx_packet) {
    1b8e:	cbz	r4, 1baa <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1b90:	ldr	r2, [pc, #60]	; (1bd0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    1b92:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    1b94:	movs	r7, #0
    1b96:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1b98:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    1b9a:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1b9c:	movs	r0, #3
    1b9e:	bl	2990 <usb_tx>
		tx_packet = NULL;
    1ba2:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    1ba4:	movs	r3, #0
    1ba6:	strb	r3, [r5, #0]
    1ba8:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1baa:	bl	27b4 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1bae:	ldr	r3, [pc, #32]	; (1bd0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1bb0:	cbz	r0, 1bbe <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    1bb2:	mov	r1, r0
    1bb4:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1bb6:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    1bb8:	bl	2990 <usb_tx>
    1bbc:	b.n	1ba4 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1bbe:	strb	r7, [r3, #0]
    1bc0:	b.n	1ba4 <usb_serial_flush_output+0x28>
    1bc2:	nop
    1bc4:	.word	0x1fff1720
    1bc8:	.word	0x1fff15b8
    1bcc:	.word	0x1fff15b5
    1bd0:	.word	0x1fff15b4

00001bd4 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    1bd4:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    1bd6:	ldr	r3, [pc, #56]	; (1c10 <usb_serial_flush_callback+0x3c>)
    1bd8:	ldrb	r3, [r3, #0]
    1bda:	cbnz	r3, 1bfa <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    1bdc:	ldr	r4, [pc, #52]	; (1c14 <usb_serial_flush_callback+0x40>)
    1bde:	ldr	r1, [r4, #0]
    1be0:	cbz	r1, 1bfc <usb_serial_flush_callback+0x28>
    1be2:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    1be6:	ldrh	r3, [r1, #2]
    1be8:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1bea:	movs	r0, #3
    1bec:	bl	2990 <usb_tx>
		tx_packet = NULL;
    1bf0:	str	r5, [r4, #0]
    1bf2:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1bf4:	ldr	r3, [pc, #32]	; (1c18 <usb_serial_flush_callback+0x44>)
    1bf6:	movs	r2, #1
    1bf8:	strb	r2, [r3, #0]
    1bfa:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1bfc:	bl	27b4 <usb_malloc>
		if (tx) {
    1c00:	cmp	r0, #0
    1c02:	beq.n	1bf4 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    1c04:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    1c06:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    1c0a:	movs	r0, #3
    1c0c:	b.w	2990 <usb_tx>
    1c10:	.word	0x1fff15b5
    1c14:	.word	0x1fff15b8
    1c18:	.word	0x1fff15b4

00001c1c <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1c1c:	ldr	r2, [pc, #220]	; (1cfc <wait_for_cal+0xe0>)
    1c1e:	ldr	r1, [pc, #224]	; (1d00 <wait_for_cal+0xe4>)
    1c20:	ldr	r3, [r2, #0]
    1c22:	lsls	r3, r3, #24
    1c24:	bmi.n	1c20 <wait_for_cal+0x4>
    1c26:	ldr	r3, [r1, #0]
    1c28:	ands.w	r3, r3, #128	; 0x80
    1c2c:	bne.n	1c20 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    1c2e:	cpsid	i
	if (calibrating) {
    1c30:	ldr	r1, [pc, #208]	; (1d04 <wait_for_cal+0xe8>)
    1c32:	ldrb	r2, [r1, #0]
    1c34:	cmp	r2, #0
    1c36:	beq.n	1cf8 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1c38:	ldr	r2, [pc, #204]	; (1d08 <wait_for_cal+0xec>)
    1c3a:	ldr	r0, [pc, #208]	; (1d0c <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1c3c:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1c3e:	ldr	r4, [pc, #208]	; (1d10 <wait_for_cal+0xf4>)
    1c40:	ldr	r7, [r2, #0]
    1c42:	ldr	r6, [r0, #0]
    1c44:	ldr	r5, [r4, #0]
    1c46:	ldr	r4, [r2, #12]
    1c48:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1c4a:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1c4c:	adds	r2, #20
    1c4e:	ldr	r0, [r0, #0]
    1c50:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1c52:	ldr	r7, [pc, #192]	; (1d14 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1c54:	add	r5, r6
    1c56:	add	r4, r5
    1c58:	add	r0, r4
    1c5a:	add	r2, r0
    1c5c:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1c60:	ldr	r6, [pc, #180]	; (1d18 <wait_for_cal+0xfc>)
    1c62:	ldr	r0, [pc, #184]	; (1d1c <wait_for_cal+0x100>)
    1c64:	ldr	r5, [pc, #184]	; (1d20 <wait_for_cal+0x104>)
    1c66:	ldr	r4, [pc, #188]	; (1d24 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1c68:	orr.w	r2, r2, #32768	; 0x8000
    1c6c:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1c6e:	ldr	r7, [r6, #0]
    1c70:	ldr	r6, [r0, #0]
    1c72:	ldr	r5, [r5, #0]
    1c74:	ldr	r2, [pc, #176]	; (1d28 <wait_for_cal+0x10c>)
    1c76:	ldr	r4, [r4, #0]
    1c78:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1c7a:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1c7c:	ldr	r0, [r0, #0]
    1c7e:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1c80:	ldr	r7, [pc, #168]	; (1d2c <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    1c82:	add	r5, r6
    1c84:	add	r4, r5
    1c86:	add	r0, r4
    1c88:	add	r2, r0
    1c8a:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1c8e:	ldr	r6, [pc, #160]	; (1d30 <wait_for_cal+0x114>)
    1c90:	ldr	r0, [pc, #160]	; (1d34 <wait_for_cal+0x118>)
    1c92:	ldr	r5, [pc, #164]	; (1d38 <wait_for_cal+0x11c>)
    1c94:	ldr	r4, [pc, #164]	; (1d3c <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1c96:	orr.w	r2, r2, #32768	; 0x8000
    1c9a:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1c9c:	ldr	r7, [r6, #0]
    1c9e:	ldr	r6, [r0, #0]
    1ca0:	ldr	r5, [r5, #0]
    1ca2:	ldr	r2, [pc, #156]	; (1d40 <wait_for_cal+0x124>)
    1ca4:	ldr	r4, [r4, #0]
    1ca6:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1ca8:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1caa:	ldr	r0, [r0, #0]
    1cac:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1cae:	ldr	r7, [pc, #148]	; (1d44 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1cb0:	add	r5, r6
    1cb2:	add	r4, r5
    1cb4:	add	r0, r4
    1cb6:	add	r2, r0
    1cb8:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1cbc:	ldr	r6, [pc, #136]	; (1d48 <wait_for_cal+0x12c>)
    1cbe:	ldr	r0, [pc, #140]	; (1d4c <wait_for_cal+0x130>)
    1cc0:	ldr	r5, [pc, #140]	; (1d50 <wait_for_cal+0x134>)
    1cc2:	ldr	r4, [pc, #144]	; (1d54 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1cc4:	orr.w	r2, r2, #32768	; 0x8000
    1cc8:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1cca:	ldr	r7, [r6, #0]
    1ccc:	ldr	r6, [r0, #0]
    1cce:	ldr	r5, [r5, #0]
    1cd0:	ldr	r2, [pc, #132]	; (1d58 <wait_for_cal+0x13c>)
    1cd2:	ldr	r4, [r4, #0]
    1cd4:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1cd6:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1cd8:	ldr	r0, [r0, #0]
    1cda:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    1cdc:	add	r5, r6
    1cde:	add	r4, r5
    1ce0:	add	r0, r4
    1ce2:	add	r2, r0
    1ce4:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    1ce8:	ldr	r0, [pc, #112]	; (1d5c <wait_for_cal+0x140>)
    1cea:	orr.w	r2, r2, #32768	; 0x8000
    1cee:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    1cf0:	strb	r3, [r1, #0]
	}
	__enable_irq();
    1cf2:	cpsie	i
}
    1cf4:	pop	{r4, r5, r6, r7}
    1cf6:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    1cf8:	cpsie	i
    1cfa:	bx	lr
    1cfc:	.word	0x4003b024
    1d00:	.word	0x400bb024
    1d04:	.word	0x1fff15c6
    1d08:	.word	0x4003b038
    1d0c:	.word	0x4003b03c
    1d10:	.word	0x4003b040
    1d14:	.word	0x4003b02c
    1d18:	.word	0x4003b058
    1d1c:	.word	0x4003b05c
    1d20:	.word	0x4003b060
    1d24:	.word	0x4003b064
    1d28:	.word	0x4003b06c
    1d2c:	.word	0x4003b030
    1d30:	.word	0x400bb038
    1d34:	.word	0x400bb03c
    1d38:	.word	0x400bb040
    1d3c:	.word	0x400bb044
    1d40:	.word	0x400bb04c
    1d44:	.word	0x400bb02c
    1d48:	.word	0x400bb058
    1d4c:	.word	0x400bb05c
    1d50:	.word	0x400bb060
    1d54:	.word	0x400bb064
    1d58:	.word	0x400bb06c
    1d5c:	.word	0x400bb030

00001d60 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1d60:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1d62:	ldr	r0, [pc, #164]	; (1e08 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1d64:	ldr	r2, [pc, #164]	; (1e0c <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    1d66:	ldr	r3, [pc, #168]	; (1e10 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1d68:	ldr	r5, [pc, #168]	; (1e14 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1d6a:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1d6c:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1d6e:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1d70:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    1d72:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1d74:	ldr	r4, [pc, #160]	; (1e18 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    1d76:	cmp	r3, #8
    1d78:	beq.n	1ddc <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1d7a:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1d7c:	ldr	r0, [pc, #156]	; (1e1c <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1d7e:	ldr	r1, [pc, #160]	; (1e20 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1d80:	beq.n	1df2 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    1d82:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    1d84:	ite	eq
    1d86:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1d88:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1d8a:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1d8c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1d8e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1d90:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1d92:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1d94:	ldr	r3, [pc, #140]	; (1e24 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1d96:	ldr	r1, [pc, #144]	; (1e28 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1d98:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1d9a:	ldr	r2, [pc, #144]	; (1e2c <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1d9c:	cbz	r3, 1dce <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1d9e:	movs	r3, #1
    1da0:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1da2:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1da4:	ldr	r3, [pc, #136]	; (1e30 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1da6:	ldr	r1, [pc, #140]	; (1e34 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1da8:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1daa:	ldr	r2, [pc, #140]	; (1e38 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    1dac:	cmp	r3, #1
    1dae:	bls.n	1dfe <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    1db0:	cmp	r3, #4
    1db2:	bls.n	1dd4 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    1db4:	cmp	r3, #8
    1db6:	bls.n	1df6 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    1db8:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    1dba:	ite	ls
    1dbc:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1dbe:	movhi	r3, #135	; 0x87
    1dc0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1dc2:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    1dc4:	ldr	r3, [pc, #116]	; (1e3c <analog_init+0xdc>)
    1dc6:	movs	r2, #1
    1dc8:	strb	r2, [r3, #0]
}
    1dca:	pop	{r4, r5}
    1dcc:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1dce:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1dd0:	str	r3, [r2, #0]
    1dd2:	b.n	1da4 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1dd4:	movs	r3, #132	; 0x84
    1dd6:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1dd8:	str	r3, [r2, #0]
    1dda:	b.n	1dc4 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1ddc:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1de0:	ldr	r1, [pc, #60]	; (1e20 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1de2:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1de4:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1de6:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1de8:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1dea:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1dec:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1dee:	str	r3, [r1, #0]
    1df0:	b.n	1d94 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1df2:	movs	r2, #57	; 0x39
    1df4:	b.n	1de6 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1df6:	movs	r3, #133	; 0x85
    1df8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1dfa:	str	r3, [r2, #0]
    1dfc:	b.n	1dc4 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1dfe:	movs	r3, #128	; 0x80
    1e00:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1e02:	str	r3, [r2, #0]
    1e04:	b.n	1dc4 <analog_init+0x64>
    1e06:	nop
    1e08:	.word	0x40074000
    1e0c:	.word	0x40074001
    1e10:	.word	0x1fff0c40
    1e14:	.word	0x4003b008
    1e18:	.word	0x4003b00c
    1e1c:	.word	0x400bb008
    1e20:	.word	0x400bb00c
    1e24:	.word	0x1fff15c9
    1e28:	.word	0x4003b020
    1e2c:	.word	0x400bb020
    1e30:	.word	0x1fff0c41
    1e34:	.word	0x4003b024
    1e38:	.word	0x400bb024
    1e3c:	.word	0x1fff15c6

00001e40 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1e40:	cmp	r0, #71	; 0x47
    1e42:	bhi.n	1ea4 <analogRead+0x64>
	channel = pin2sc1a[pin];
    1e44:	ldr	r3, [pc, #204]	; (1f14 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    1e46:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    1e4a:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    1e4c:	cmp	r6, #255	; 0xff
    1e4e:	beq.n	1ea8 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1e50:	ldr	r3, [pc, #196]	; (1f18 <analogRead+0xd8>)
    1e52:	ldrb	r3, [r3, #0]
    1e54:	cmp	r3, #0
    1e56:	bne.n	1eae <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1e58:	lsls	r2, r6, #24
    1e5a:	bmi.n	1eb6 <analogRead+0x76>
#endif

	__disable_irq();
    1e5c:	cpsid	i
    1e5e:	ldr	r5, [pc, #188]	; (1f1c <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1e60:	ldr	r4, [pc, #188]	; (1f20 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    1e62:	mov	r7, r5
    1e64:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1e66:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    1e68:	strb	r3, [r5, #0]
	__enable_irq();
    1e6a:	cpsie	i
	while (1) {
		__disable_irq();
    1e6c:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1e6e:	ldr	r3, [r4, #0]
    1e70:	lsls	r3, r3, #24
    1e72:	bmi.n	1e8e <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    1e74:	ldrb	r3, [r7, #0]
    1e76:	cbnz	r3, 1e80 <analogRead+0x40>
    1e78:	b.n	1e64 <analogRead+0x24>
    1e7a:	ldrb	r3, [r5, #0]
    1e7c:	cmp	r3, #0
    1e7e:	beq.n	1e64 <analogRead+0x24>
		__enable_irq();
    1e80:	cpsie	i
		yield();
    1e82:	bl	3494 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    1e86:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1e88:	ldr	r3, [r4, #0]
    1e8a:	lsls	r0, r3, #24
    1e8c:	bpl.n	1e7a <analogRead+0x3a>
			result = ADC0_RA;
    1e8e:	ldr	r3, [pc, #148]	; (1f24 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    1e90:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    1e92:	movs	r2, #0
    1e94:	strb	r2, [r5, #0]
			__enable_irq();
    1e96:	cpsie	i
			result >>= analog_right_shift;
    1e98:	ldr	r2, [pc, #140]	; (1f28 <analogRead+0xe8>)
    1e9a:	ldrb	r0, [r2, #0]
    1e9c:	asr.w	r0, r3, r0
			return result;
    1ea0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1ea4:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    1ea6:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1ea8:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    1eaa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    1eae:	bl	1c1c <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1eb2:	lsls	r2, r6, #24
    1eb4:	bpl.n	1e5c <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    1eb6:	cpsid	i
    1eb8:	ldr	r5, [pc, #112]	; (1f2c <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    1eba:	ldr.w	r8, [pc, #124]	; 1f38 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    1ebe:	ldr	r4, [pc, #112]	; (1f30 <analogRead+0xf0>)
    1ec0:	and.w	r7, r6, #64	; 0x40
    1ec4:	uxtb	r7, r7
    1ec6:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1eca:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    1ece:	cbz	r7, 1f08 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1ed0:	bic.w	r3, r3, #16
    1ed4:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    1ed8:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    1eda:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    1edc:	ldr	r2, [pc, #76]	; (1f2c <analogRead+0xec>)
    1ede:	strb	r3, [r5, #0]
	__enable_irq();
    1ee0:	cpsie	i
	while (1) {
		__disable_irq();
    1ee2:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    1ee4:	ldr	r3, [r4, #0]
    1ee6:	lsls	r1, r3, #24
    1ee8:	bmi.n	1f04 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    1eea:	ldrb	r3, [r2, #0]
    1eec:	cbnz	r3, 1ef6 <analogRead+0xb6>
    1eee:	b.n	1eca <analogRead+0x8a>
    1ef0:	ldrb	r3, [r5, #0]
    1ef2:	cmp	r3, #0
    1ef4:	beq.n	1eca <analogRead+0x8a>
		__enable_irq();
    1ef6:	cpsie	i
		yield();
    1ef8:	bl	3494 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    1efc:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    1efe:	ldr	r3, [r4, #0]
    1f00:	lsls	r3, r3, #24
    1f02:	bpl.n	1ef0 <analogRead+0xb0>
			result = ADC1_RA;
    1f04:	ldr	r3, [pc, #44]	; (1f34 <analogRead+0xf4>)
    1f06:	b.n	1e90 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    1f08:	orr.w	r3, r3, #16
    1f0c:	str.w	r3, [r8]
    1f10:	b.n	1ed8 <analogRead+0x98>
    1f12:	nop
    1f14:	.word	0x00004c8c
    1f18:	.word	0x1fff15c6
    1f1c:	.word	0x1fff15c8
    1f20:	.word	0x4003b000
    1f24:	.word	0x4003b010
    1f28:	.word	0x1fff15c5
    1f2c:	.word	0x1fff15c7
    1f30:	.word	0x400bb000
    1f34:	.word	0x400bb010
    1f38:	.word	0x400bb00c

00001f3c <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    1f3c:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    1f3e:	ldr	r3, [pc, #68]	; (1f84 <digitalWrite.part.1+0x48>)
    1f40:	ldr.w	r2, [r3, r0, lsl #3]
    1f44:	ldrb.w	r4, [r2, #640]	; 0x280
    1f48:	cbz	r4, 1f58 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    1f4a:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    1f4c:	cbz	r1, 1f6e <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    1f4e:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1f52:	ldr.w	r4, [sp], #4
    1f56:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    1f58:	add.w	r3, r3, r0, lsl #3
    1f5c:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1f5e:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    1f60:	cbnz	r1, 1f78 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    1f62:	bic.w	r2, r2, #2
    1f66:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1f68:	ldr.w	r4, [sp], #4
    1f6c:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    1f6e:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1f72:	ldr.w	r4, [sp], #4
    1f76:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1f78:	orr.w	r2, r2, #3
    1f7c:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1f7e:	ldr.w	r4, [sp], #4
    1f82:	bx	lr
    1f84:	.word	0x00004cd4

00001f88 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1f88:	ldr	r2, [pc, #112]	; (1ffc <pinMode.part.2+0x74>)
    1f8a:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1f8e:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1f90:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1f92:	beq.n	1fb8 <pinMode.part.2+0x30>
    1f94:	cmp	r1, #4
    1f96:	beq.n	1fd0 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    1f98:	ldr.w	r0, [r2, r0, lsl #3]
    1f9c:	movs	r2, #0
    1f9e:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    1fa2:	cbz	r1, 1fb0 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    1fa4:	cmp	r1, #2
    1fa6:	beq.n	1fea <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    1fa8:	cmp	r1, #3
    1faa:	beq.n	1ff2 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1fac:	str	r2, [r3, #0]
    1fae:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    1fb0:	mov.w	r2, #256	; 0x100
    1fb4:	str	r2, [r3, #0]
    1fb6:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1fb8:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1fbc:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1fc0:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1fc4:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1fc6:	ldr	r2, [r3, #0]
    1fc8:	bic.w	r2, r2, #32
    1fcc:	str	r2, [r3, #0]
    1fce:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1fd0:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1fd4:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1fd8:	movs	r0, #1
    1fda:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1fde:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    1fe0:	ldr	r2, [r3, #0]
    1fe2:	orr.w	r2, r2, #32
    1fe6:	str	r2, [r3, #0]
    1fe8:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    1fea:	movw	r2, #259	; 0x103
    1fee:	str	r2, [r3, #0]
    1ff0:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    1ff2:	mov.w	r2, #258	; 0x102
    1ff6:	str	r2, [r3, #0]
    1ff8:	bx	lr
    1ffa:	nop
    1ffc:	.word	0x00004cd4

00002000 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    2000:	push	{r4, r5}
	RTC_SR = 0;
    2002:	ldr	r3, [pc, #20]	; (2018 <rtc_set+0x18>)
	RTC_TPR = 0;
    2004:	ldr	r5, [pc, #20]	; (201c <rtc_set+0x1c>)
	RTC_TSR = t;
    2006:	ldr	r4, [pc, #24]	; (2020 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2008:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    200a:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    200c:	str	r2, [r3, #0]
	RTC_TPR = 0;
    200e:	str	r2, [r5, #0]
	RTC_TSR = t;
    2010:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    2012:	str	r1, [r3, #0]
}
    2014:	pop	{r4, r5}
    2016:	bx	lr
    2018:	.word	0x4003d014
    201c:	.word	0x4003d004
    2020:	.word	0x4003d000

00002024 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    2024:	cmp	r0, #63	; 0x3f
    2026:	bhi.n	202c <digitalWrite+0x8>
    2028:	b.w	1f3c <digitalWrite.part.1>
    202c:	bx	lr
    202e:	nop

00002030 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2030:	cmp	r0, #63	; 0x3f
    2032:	bhi.n	2042 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    2034:	ldr	r3, [pc, #16]	; (2048 <digitalRead+0x18>)
    2036:	ldr.w	r3, [r3, r0, lsl #3]
    203a:	ldrb.w	r0, [r3, #512]	; 0x200
    203e:	uxtb	r0, r0
    2040:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2042:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    2044:	bx	lr
    2046:	nop
    2048:	.word	0x00004cd4

0000204c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    204c:	cmp	r0, #63	; 0x3f
    204e:	bhi.n	2054 <pinMode+0x8>
    2050:	b.w	1f88 <pinMode.part.2>
    2054:	bx	lr
    2056:	nop

00002058 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    2058:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    205c:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    205e:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2060:	ldr	r7, [pc, #136]	; (20ec <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2062:	ldr	r3, [pc, #140]	; (20f0 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2064:	ldr	r2, [pc, #140]	; (20f4 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2066:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2068:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    206a:	ldr	r2, [r2, #0]
	__enable_irq();
    206c:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    206e:	lsls	r2, r2, #5
    2070:	bpl.n	2078 <delay+0x20>
    2072:	cmp	r3, #50	; 0x32
    2074:	it	hi
    2076:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2078:	cbz	r5, 20e8 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    207a:	rsb	r3, r3, #179200	; 0x2bc00
    207e:	addw	r3, r3, #799	; 0x31f
    2082:	ldr	r6, [pc, #116]	; (20f8 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2084:	ldr.w	r9, [pc, #104]	; 20f0 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2088:	ldr.w	r8, [pc, #104]	; 20f4 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    208c:	lsrs	r3, r3, #2
    208e:	mov.w	r2, #1000	; 0x3e8
    2092:	umull	r1, r3, r6, r3
    2096:	mul.w	r4, r2, r4
    209a:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    209e:	cpsid	i
	current = SYST_CVR;
    20a0:	ldr.w	r1, [r9]
	count = systick_millis_count;
    20a4:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    20a6:	ldr.w	lr, [r8]
	__enable_irq();
    20aa:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    20ac:	rsb	r3, r1, #179200	; 0x2bc00
    20b0:	addw	r3, r3, #799	; 0x31f
    20b4:	lsrs	r3, r3, #2
    20b6:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    20ba:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    20be:	rsb	r3, r4, r3, lsr #2
    20c2:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    20c6:	beq.n	20ce <delay+0x76>
    20c8:	cmp	r1, #50	; 0x32
    20ca:	it	hi
    20cc:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    20ce:	mla	r3, r0, r2, r3
    20d2:	cmp.w	r3, #1000	; 0x3e8
    20d6:	bcc.n	20e2 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    20d8:	subs	r5, #1
    20da:	beq.n	20e8 <delay+0x90>
				start += 1000;
    20dc:	add.w	r4, r4, #1000	; 0x3e8
    20e0:	b.n	209e <delay+0x46>
			}
			yield();
    20e2:	bl	3494 <yield>
		}
    20e6:	b.n	209e <delay+0x46>
    20e8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    20ec:	.word	0x1fff15cc
    20f0:	.word	0xe000e018
    20f4:	.word	0xe000ed04
    20f8:	.word	0x16c16c17

000020fc <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    20fc:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    20fe:	ldr	r3, [pc, #312]	; (2238 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2100:	ldr	r0, [pc, #312]	; (223c <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    2102:	ldr.w	ip, [pc, #348]	; 2260 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    2106:	ldr	r4, [pc, #312]	; (2240 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    2108:	ldr	r1, [pc, #312]	; (2244 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    210a:	ldr.w	lr, [pc, #344]	; 2264 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    210e:	ldr	r6, [pc, #312]	; (2248 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    2110:	ldr	r5, [pc, #312]	; (224c <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    2112:	ldr	r7, [pc, #316]	; (2250 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2114:	mov.w	r2, #134217728	; 0x8000000
    2118:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    211a:	mov.w	r2, #268435456	; 0x10000000
    211e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    2120:	mov.w	r2, #536870912	; 0x20000000
    2124:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    2126:	mov.w	r2, #1073741824	; 0x40000000
    212a:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    212c:	mov.w	r2, #2147483648	; 0x80000000
    2130:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2132:	movs	r2, #0
    2134:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2136:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2138:	movw	r0, #61439	; 0xefff
    213c:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2140:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    2144:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2146:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    214a:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    214c:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    214e:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2150:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    2154:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    2156:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    215a:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    215c:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    2160:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2162:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    2166:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    216a:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    216e:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2172:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    2176:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2178:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    217c:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    217e:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2180:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    2182:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    2186:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2188:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    218a:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    218c:	ldr	r4, [pc, #196]	; (2254 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    218e:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2190:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2192:	movs	r1, #9
    2194:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    2196:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    219a:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    219e:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    21a0:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    21a2:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    21a4:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    21a6:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    21a8:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    21aa:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    21ae:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    21b2:	add.w	r7, r7, #520192	; 0x7f000
    21b6:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    21b8:	addw	r4, r4, #2044	; 0x7fc
    21bc:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    21be:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    21c0:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    21c2:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    21c4:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    21c8:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    21ca:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    21ce:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    21d2:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    21d4:	sub.w	r4, r4, #460800	; 0x70800
    21d8:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    21dc:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    21de:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    21e0:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    21e4:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    21e6:	ldr	r0, [pc, #112]	; (2258 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    21e8:	orr.w	r1, r1, #512	; 0x200
    21ec:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    21ee:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    21f0:	ldr	r4, [pc, #104]	; (225c <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    21f2:	add.w	lr, lr, #65280	; 0xff00
    21f6:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    21fa:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    21fe:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    2202:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2206:	orr.w	r1, r1, #33554432	; 0x2000000
    220a:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    220c:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    2210:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2214:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    2216:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    2218:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    221a:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    221c:	str	r2, [r4, #0]
#endif
	analog_init();
    221e:	bl	1d60 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    2222:	movs	r0, #25
    2224:	bl	2058 <delay>
	usb_init();
    2228:	bl	33c4 <usb_init>
	delay(275);
    222c:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    2230:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    2234:	b.w	2058 <delay>
    2238:	.word	0xe000e104
    223c:	.word	0x40038004
    2240:	.word	0x40038014
    2244:	.word	0x4003801c
    2248:	.word	0x40038024
    224c:	.word	0x4003802c
    2250:	.word	0x40038034
    2254:	.word	0x40038000
    2258:	.word	0x40048004
    225c:	.word	0x400c9000
    2260:	.word	0x40038008
    2264:	.word	0x4003800c

00002268 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2268:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    226a:	ldr	r3, [pc, #56]	; (22a4 <sysex_byte+0x3c>)
    226c:	ldr	r4, [pc, #56]	; (22a8 <sysex_byte+0x40>)
    226e:	ldr	r3, [r3, #0]
    2270:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2272:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2274:	cbz	r3, 229a <sysex_byte+0x32>
    2276:	cmp.w	r1, #290	; 0x122
    227a:	bcs.n	2288 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    227c:	ldr	r2, [pc, #44]	; (22ac <sysex_byte+0x44>)
    227e:	adds	r3, r1, #1
    2280:	strb	r5, [r2, r1]
    2282:	uxth	r3, r3
    2284:	strh	r3, [r4, #0]
	}
}
    2286:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2288:	movs	r2, #0
    228a:	ldr	r0, [pc, #32]	; (22ac <sysex_byte+0x44>)
    228c:	blx	r3
    228e:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2290:	ldr	r2, [pc, #24]	; (22ac <sysex_byte+0x44>)
    2292:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2294:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2296:	strh	r3, [r4, #0]
	}
}
    2298:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    229a:	cmp.w	r1, #290	; 0x122
    229e:	bcc.n	227c <sysex_byte+0x14>
    22a0:	pop	{r3, r4, r5, pc}
    22a2:	nop
    22a4:	.word	0x1fff15f4
    22a8:	.word	0x1fff1a8e
    22ac:	.word	0x1fff1a94

000022b0 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    22b0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    22b4:	ldr	r6, [pc, #132]	; (233c <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    22b6:	ldr	r7, [pc, #136]	; (2340 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    22b8:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    22ba:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    22bc:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    22be:	strb	r3, [r7, #0]
	if (!tx_packet) {
    22c0:	cbz	r1, 22f0 <usb_midi_write_packed+0x40>
    22c2:	ldr	r5, [pc, #128]	; (2344 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    22c4:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    22c6:	add.w	r2, r1, r3, lsl #2
    22ca:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    22cc:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    22ce:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    22d0:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    22d4:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    22d6:	bhi.n	22e2 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    22d8:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    22da:	movs	r3, #0
    22dc:	strb	r3, [r7, #0]
    22de:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    22e2:	movs	r3, #64	; 0x40
    22e4:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    22e6:	movs	r0, #4
    22e8:	bl	2990 <usb_tx>
		tx_packet = NULL;
    22ec:	str	r4, [r6, #0]
    22ee:	b.n	22da <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    22f0:	ldr.w	r9, [pc, #84]	; 2348 <usb_midi_write_packed+0x98>
    22f4:	ldrb.w	r3, [r9]
    22f8:	cmp	r3, #0
    22fa:	beq.n	22de <usb_midi_write_packed+0x2e>
    22fc:	ldr	r5, [pc, #68]	; (2344 <usb_midi_write_packed+0x94>)
    22fe:	movw	r4, #48001	; 0xbb81
    2302:	b.n	2316 <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2304:	subs	r4, #1
    2306:	beq.n	232e <usb_midi_write_packed+0x7e>
    2308:	ldrb	r3, [r5, #0]
    230a:	cbnz	r3, 232e <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    230c:	bl	3494 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2310:	ldrb.w	r3, [r9]
    2314:	cbz	r3, 2336 <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2316:	movs	r0, #4
    2318:	bl	287c <usb_tx_packet_count>
    231c:	cmp	r0, #5
    231e:	bhi.n	2304 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    2320:	bl	27b4 <usb_malloc>
    2324:	mov	r1, r0
    2326:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    2328:	cmp	r0, #0
    232a:	beq.n	2304 <usb_midi_write_packed+0x54>
    232c:	b.n	22c4 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    232e:	movs	r3, #1
    2330:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    2332:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2336:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    233a:	nop
    233c:	.word	0x1fff1610
    2340:	.word	0x1fff15e4
    2344:	.word	0x1fff1614
    2348:	.word	0x1fff1720

0000234c <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    234c:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    234e:	ldr	r3, [pc, #32]	; (2370 <usb_midi_flush_output+0x24>)
    2350:	ldrb	r4, [r3, #0]
    2352:	cbnz	r4, 235e <usb_midi_flush_output+0x12>
    2354:	ldr	r5, [pc, #28]	; (2374 <usb_midi_flush_output+0x28>)
    2356:	ldr	r1, [r5, #0]
    2358:	cbz	r1, 235e <usb_midi_flush_output+0x12>
    235a:	ldrh	r3, [r1, #2]
    235c:	cbnz	r3, 2360 <usb_midi_flush_output+0x14>
    235e:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    2360:	lsls	r3, r3, #2
    2362:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2364:	movs	r0, #4
    2366:	bl	2990 <usb_tx>
		tx_packet = NULL;
    236a:	str	r4, [r5, #0]
    236c:	pop	{r3, r4, r5, pc}
    236e:	nop
    2370:	.word	0x1fff15e4
    2374:	.word	0x1fff1610

00002378 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2378:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    237c:	ldr	r6, [pc, #692]	; (2634 <usb_midi_read+0x2bc>)
    237e:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2380:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2382:	cmp	r3, #0
    2384:	beq.w	24ac <usb_midi_read+0x134>
    2388:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    238a:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    238c:	lsrs	r1, r2, #2
    238e:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    2392:	adds	r2, #4
	if (index < rx_packet->len) {
    2394:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2396:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    2398:	bcs.n	2420 <usb_midi_read+0xa8>
		rx_packet->index = index;
    239a:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    239c:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    23a0:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    23a4:	ldr	r1, [pc, #656]	; (2638 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    23a6:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    23aa:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    23ae:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    23b2:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    23b4:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    23b8:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    23ba:	bls.n	23f2 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    23bc:	subs	r3, r6, #2
    23be:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    23c0:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    23c4:	bls.n	2464 <usb_midi_read+0xec>
    23c6:	cmp	r6, #5
    23c8:	beq.n	245c <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    23ca:	cmp	r6, #4
    23cc:	beq.w	2718 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    23d0:	subs	r3, r6, #5
    23d2:	cmp	r3, #2
    23d4:	bls.n	24d6 <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    23d6:	cmp	r6, #15
    23d8:	bne.n	23f8 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    23da:	cmp	r0, #247	; 0xf7
    23dc:	bhi.n	2464 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    23de:	cmp	r0, #240	; 0xf0
    23e0:	beq.n	23e8 <usb_midi_read+0x70>
    23e2:	ldr	r3, [pc, #600]	; (263c <usb_midi_read+0x2c4>)
    23e4:	ldrh	r3, [r3, #0]
    23e6:	cbz	r3, 23f8 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    23e8:	bl	2268 <sysex_byte>
		}
	}
	return 0;
    23ec:	movs	r0, #0
    23ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    23f2:	cbz	r7, 23fe <usb_midi_read+0x86>
    23f4:	cmp	r5, r7
    23f6:	beq.n	23fe <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    23f8:	movs	r0, #0
    23fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    23fe:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    2400:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2404:	beq.w	2516 <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    2408:	cmp	r6, #9
    240a:	beq.n	2430 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    240c:	cmp	r6, #10
    240e:	bne.w	253a <usb_midi_read+0x1c2>
    2412:	cmp	r3, #10
    2414:	bne.n	23f8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    2416:	ldr	r3, [pc, #552]	; (2640 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    2418:	ldr	r2, [pc, #552]	; (2644 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    241a:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    241c:	movs	r1, #160	; 0xa0
    241e:	b.n	2524 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    2420:	mov	r0, r3
    2422:	bl	27f4 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2426:	movs	r0, #5
    2428:	bl	2840 <usb_rx>
    242c:	str	r0, [r6, #0]
    242e:	b.n	239c <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    2430:	cmp	r3, #9
    2432:	bne.n	23f8 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    2434:	lsrs	r7, r4, #24
    2436:	beq.w	2730 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    243a:	ldr	r3, [pc, #524]	; (2648 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    243c:	ldr	r2, [pc, #516]	; (2644 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    243e:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2440:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2442:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2446:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2448:	uxtb	r5, r5
    244a:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    244c:	cmp	r3, #0
    244e:	beq.w	258c <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2452:	mov	r2, r4
    2454:	mov	r1, r6
    2456:	mov	r0, r5
    2458:	blx	r3
    245a:	b.n	258c <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    245c:	cmp	r0, #240	; 0xf0
    245e:	bls.n	24e8 <usb_midi_read+0x170>
    2460:	cmp	r0, #247	; 0xf7
    2462:	beq.n	24e8 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    2464:	subs	r0, #241	; 0xf1
    2466:	cmp	r0, #14
    2468:	bhi.n	23f8 <usb_midi_read+0x80>
    246a:	add	r3, pc, #4	; (adr r3, 2470 <usb_midi_read+0xf8>)
    246c:	ldr.w	pc, [r3, r0, lsl #2]
    2470:	.word	0x00002627
    2474:	.word	0x0000260b
    2478:	.word	0x000025f9
    247c:	.word	0x000023f9
    2480:	.word	0x000023f9
    2484:	.word	0x000025eb
    2488:	.word	0x000023f9
    248c:	.word	0x000026cb
    2490:	.word	0x000023f9
    2494:	.word	0x00002695
    2498:	.word	0x000026af
    249c:	.word	0x000025d3
    24a0:	.word	0x000023f9
    24a4:	.word	0x000025bb
    24a8:	.word	0x0000259f
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    24ac:	ldr	r3, [pc, #412]	; (264c <usb_midi_read+0x2d4>)
    24ae:	ldrb	r3, [r3, #0]
    24b0:	cmp	r3, #0
    24b2:	beq.n	23f8 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    24b4:	movs	r0, #5
    24b6:	bl	2840 <usb_rx>
    24ba:	mov	r3, r0
    24bc:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    24be:	cmp	r0, #0
    24c0:	beq.n	23f8 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    24c2:	ldrh	r5, [r0, #0]
    24c4:	cmp	r5, #0
    24c6:	bne.w	238a <usb_midi_read+0x12>
			usb_free(rx_packet);
    24ca:	bl	27f4 <usb_free>
			rx_packet = NULL;
    24ce:	str	r5, [r6, #0]
			return 0;
    24d0:	mov	r0, r5
    24d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    24d6:	bl	2268 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    24da:	ubfx	r0, r4, #16, #8
    24de:	bl	2268 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    24e2:	cmp	r6, #7
    24e4:	bne.n	24ec <usb_midi_read+0x174>
    24e6:	lsrs	r0, r4, #24
    24e8:	bl	2268 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    24ec:	ldr	r3, [pc, #332]	; (263c <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    24ee:	ldr	r2, [pc, #352]	; (2650 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    24f0:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    24f2:	ldr	r0, [pc, #352]	; (2654 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    24f4:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    24f6:	ldr	r5, [pc, #352]	; (2658 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    24f8:	ldr	r2, [pc, #328]	; (2644 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    24fa:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    24fc:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    24fe:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2500:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2502:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2504:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2506:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    2508:	cbz	r4, 254e <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    250a:	movs	r2, #1
    250c:	ldr	r0, [pc, #332]	; (265c <usb_midi_read+0x2e4>)
    250e:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2510:	movs	r0, #1
    2512:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2516:	cmp	r3, #8
    2518:	bne.w	23f8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    251c:	ldr	r3, [pc, #320]	; (2660 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    251e:	ldr	r2, [pc, #292]	; (2644 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    2520:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    2522:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    2524:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2528:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    252a:	uxtb	r5, r5
    252c:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    252e:	cbz	r3, 258c <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    2530:	mov	r0, r5
    2532:	mov	r2, r4
    2534:	mov	r1, r6
    2536:	blx	r3
    2538:	b.n	258c <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    253a:	cmp	r6, #11
    253c:	bne.n	2562 <usb_midi_read+0x1ea>
    253e:	cmp	r3, #11
    2540:	bne.w	23f8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    2544:	ldr	r3, [pc, #284]	; (2664 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2546:	ldr	r2, [pc, #252]	; (2644 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    2548:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    254a:	movs	r1, #176	; 0xb0
    254c:	b.n	2524 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    254e:	ldr	r3, [pc, #280]	; (2668 <usb_midi_read+0x2f0>)
    2550:	ldr	r3, [r3, #0]
    2552:	cmp	r3, #0
    2554:	beq.w	274e <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    2558:	ldr	r0, [pc, #256]	; (265c <usb_midi_read+0x2e4>)
    255a:	blx	r3
		}
		return 1;
    255c:	movs	r0, #1
    255e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    2562:	cmp	r6, #12
    2564:	bne.w	2768 <usb_midi_read+0x3f0>
    2568:	cmp	r3, #12
    256a:	bne.w	23f8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    256e:	ldr	r3, [pc, #252]	; (266c <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2570:	ldr	r2, [pc, #208]	; (2644 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    2572:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2574:	movs	r1, #192	; 0xc0
    2576:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    2578:	uxtb	r5, r5
    257a:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    257e:	cmp	r3, #0
    2580:	beq.w	2714 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2584:	mov	r0, r5
    2586:	mov	r1, r6
    2588:	lsrs	r4, r4, #24
    258a:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    258c:	ldr	r1, [pc, #224]	; (2670 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    258e:	ldr	r2, [pc, #196]	; (2654 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    2590:	ldr	r3, [pc, #196]	; (2658 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2592:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    2594:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    2596:	strb	r4, [r3, #0]
		return 1;
    2598:	movs	r0, #1
    259a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    259e:	ldr	r3, [pc, #212]	; (2674 <usb_midi_read+0x2fc>)
    25a0:	ldr	r3, [r3, #0]
    25a2:	cmp	r3, #0
    25a4:	beq.w	2754 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    25a8:	blx	r3
    25aa:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    25ae:	ldr	r3, [pc, #148]	; (2644 <usb_midi_read+0x2cc>)
    25b0:	uxtb	r5, r5
    25b2:	lsrs	r4, r4, #24
    25b4:	strb.w	r8, [r3]
		goto return_message;
    25b8:	b.n	258c <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    25ba:	ldr	r3, [pc, #188]	; (2678 <usb_midi_read+0x300>)
    25bc:	ldr	r3, [r3, #0]
    25be:	cmp	r3, #0
    25c0:	bne.n	25a8 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    25c2:	ldr	r3, [pc, #184]	; (267c <usb_midi_read+0x304>)
    25c4:	ldr	r3, [r3, #0]
    25c6:	cbz	r3, 25f2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    25c8:	movs	r0, #254	; 0xfe
    25ca:	blx	r3
    25cc:	ubfx	r6, r4, #16, #8
    25d0:	b.n	25ae <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    25d2:	ldr	r3, [pc, #172]	; (2680 <usb_midi_read+0x308>)
    25d4:	ldr	r3, [r3, #0]
    25d6:	cmp	r3, #0
    25d8:	bne.n	25a8 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    25da:	ldr	r3, [pc, #160]	; (267c <usb_midi_read+0x304>)
    25dc:	ldr	r3, [r3, #0]
    25de:	cbz	r3, 25f2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    25e0:	movs	r0, #252	; 0xfc
    25e2:	blx	r3
    25e4:	ubfx	r6, r4, #16, #8
    25e8:	b.n	25ae <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    25ea:	ldr	r3, [pc, #152]	; (2684 <usb_midi_read+0x30c>)
    25ec:	ldr	r3, [r3, #0]
    25ee:	cmp	r3, #0
    25f0:	bne.n	25a8 <usb_midi_read+0x230>
    25f2:	ubfx	r6, r4, #16, #8
    25f6:	b.n	25ae <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    25f8:	ldr	r3, [pc, #140]	; (2688 <usb_midi_read+0x310>)
    25fa:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    25fc:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2600:	cmp	r3, #0
    2602:	beq.n	25ae <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    2604:	mov	r0, r6
    2606:	blx	r3
    2608:	b.n	25ae <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    260a:	ldr	r3, [pc, #128]	; (268c <usb_midi_read+0x314>)
    260c:	ldr	r2, [r3, #0]
    260e:	cmp	r2, #0
    2610:	beq.n	25f2 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    2612:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    2614:	lsrs	r3, r4, #17
    2616:	and.w	r0, r6, #127	; 0x7f
    261a:	and.w	r3, r3, #16256	; 0x3f80
    261e:	orrs	r0, r3
    2620:	uxtb	r6, r6
    2622:	blx	r2
    2624:	b.n	25ae <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    2626:	ldr	r3, [pc, #104]	; (2690 <usb_midi_read+0x318>)
    2628:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    262a:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    262e:	cmp	r3, #0
    2630:	bne.n	2604 <usb_midi_read+0x28c>
    2632:	b.n	25ae <usb_midi_read+0x236>
    2634:	.word	0x1fff161c
    2638:	.word	0x1fff1a92
    263c:	.word	0x1fff1a8e
    2640:	.word	0x1fff15f8
    2644:	.word	0x1fff1a8c
    2648:	.word	0x1fff162c
    264c:	.word	0x1fff1720
    2650:	.word	0x1fff15f4
    2654:	.word	0x1fff1a90
    2658:	.word	0x1fff1a91
    265c:	.word	0x1fff1a94
    2660:	.word	0x1fff1624
    2664:	.word	0x1fff1628
    2668:	.word	0x1fff160c
    266c:	.word	0x1fff15e8
    2670:	.word	0x1fff1a93
    2674:	.word	0x1fff15d4
    2678:	.word	0x1fff15d8
    267c:	.word	0x1fff15dc
    2680:	.word	0x1fff1618
    2684:	.word	0x1fff1608
    2688:	.word	0x1fff1620
    268c:	.word	0x1fff15f0
    2690:	.word	0x1fff1604
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    2694:	ldr	r3, [pc, #252]	; (2794 <usb_midi_read+0x41c>)
    2696:	ldr	r3, [r3, #0]
    2698:	cmp	r3, #0
    269a:	bne.n	25a8 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    269c:	ldr	r3, [pc, #248]	; (2798 <usb_midi_read+0x420>)
    269e:	ldr	r3, [r3, #0]
    26a0:	cmp	r3, #0
    26a2:	beq.n	25f2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    26a4:	movs	r0, #250	; 0xfa
    26a6:	blx	r3
    26a8:	ubfx	r6, r4, #16, #8
    26ac:	b.n	25ae <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    26ae:	ldr	r3, [pc, #236]	; (279c <usb_midi_read+0x424>)
    26b0:	ldr	r3, [r3, #0]
    26b2:	cmp	r3, #0
    26b4:	bne.w	25a8 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    26b8:	ldr	r3, [pc, #220]	; (2798 <usb_midi_read+0x420>)
    26ba:	ldr	r3, [r3, #0]
    26bc:	cmp	r3, #0
    26be:	beq.n	25f2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    26c0:	movs	r0, #251	; 0xfb
    26c2:	blx	r3
    26c4:	ubfx	r6, r4, #16, #8
    26c8:	b.n	25ae <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    26ca:	ldr	r3, [pc, #212]	; (27a0 <usb_midi_read+0x428>)
    26cc:	ldr	r3, [r3, #0]
    26ce:	cmp	r3, #0
    26d0:	bne.w	25a8 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    26d4:	ldr	r3, [pc, #192]	; (2798 <usb_midi_read+0x420>)
    26d6:	ldr	r3, [r3, #0]
    26d8:	cmp	r3, #0
    26da:	beq.n	25f2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    26dc:	movs	r0, #248	; 0xf8
    26de:	blx	r3
    26e0:	ubfx	r6, r4, #16, #8
    26e4:	b.n	25ae <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    26e6:	cmp	r3, #14
    26e8:	bne.w	23f8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    26ec:	ldr	r2, [pc, #180]	; (27a4 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    26ee:	ldr	r3, [pc, #184]	; (27a8 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    26f0:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    26f2:	movs	r1, #224	; 0xe0
    26f4:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    26f6:	cmp	r2, #0
    26f8:	beq.n	278a <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    26fa:	lsrs	r6, r4, #16
    26fc:	lsrs	r1, r4, #17
    26fe:	and.w	r3, r6, #127	; 0x7f
    2702:	and.w	r1, r1, #16256	; 0x3f80
    2706:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    2708:	uxtb	r5, r5
    270a:	sub.w	r1, r1, #8192	; 0x2000
    270e:	mov	r0, r5
    2710:	blx	r2
    2712:	uxtb	r6, r6
    2714:	lsrs	r4, r4, #24
    2716:	b.n	258c <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    2718:	bl	2268 <sysex_byte>
		sysex_byte(n >> 16);
    271c:	ubfx	r0, r4, #16, #8
    2720:	bl	2268 <sysex_byte>
		sysex_byte(n >> 24);
    2724:	lsrs	r0, r4, #24
    2726:	bl	2268 <sysex_byte>
		return 0;
    272a:	movs	r0, #0
    272c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2730:	ldr	r3, [pc, #120]	; (27ac <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2732:	ldr	r2, [pc, #116]	; (27a8 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    2734:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2736:	movs	r1, #128	; 0x80
    2738:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    273a:	uxtb	r5, r5
    273c:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2740:	cbz	r3, 2764 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2742:	mov	r1, r6
    2744:	mov	r0, r5
    2746:	mov	r2, r7
    2748:	blx	r3
    274a:	mov	r4, r7
    274c:	b.n	258c <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    274e:	movs	r0, #1
    2750:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    2754:	ldr	r3, [pc, #64]	; (2798 <usb_midi_read+0x420>)
    2756:	ldr	r3, [r3, #0]
    2758:	cmp	r3, #0
    275a:	beq.w	25f2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    275e:	movs	r0, #255	; 0xff
    2760:	blx	r3
    2762:	b.n	25f2 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2764:	mov	r4, r3
    2766:	b.n	258c <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    2768:	cmp	r6, #13
    276a:	bne.n	26e6 <usb_midi_read+0x36e>
    276c:	cmp	r3, #13
    276e:	bne.w	23f8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2772:	ldr	r3, [pc, #60]	; (27b0 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2774:	ldr	r2, [pc, #48]	; (27a8 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    2776:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2778:	movs	r1, #208	; 0xd0
    277a:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    277c:	uxtb	r5, r5
    277e:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2782:	cmp	r3, #0
    2784:	bne.w	2584 <usb_midi_read+0x20c>
    2788:	b.n	2714 <usb_midi_read+0x39c>
    278a:	ubfx	r6, r4, #16, #8
    278e:	uxtb	r5, r5
    2790:	lsrs	r4, r4, #24
    2792:	b.n	258c <usb_midi_read+0x214>
    2794:	.word	0x1fff1600
    2798:	.word	0x1fff15dc
    279c:	.word	0x1fff15e0
    27a0:	.word	0x1fff15d0
    27a4:	.word	0x1fff15ec
    27a8:	.word	0x1fff1a8c
    27ac:	.word	0x1fff1624
    27b0:	.word	0x1fff15fc

000027b4 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    27b4:	cpsid	i
	avail = usb_buffer_available;
    27b6:	ldr	r0, [pc, #52]	; (27ec <usb_malloc+0x38>)
    27b8:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    27ba:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    27be:	cmp	r3, #29
    27c0:	bgt.n	27e4 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    27c2:	mov.w	r1, #2147483648	; 0x80000000
    27c6:	lsrs	r1, r3
    27c8:	bic.w	r2, r2, r1
    27cc:	str	r2, [r0, #0]
	__enable_irq();
    27ce:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    27d0:	ldr	r0, [pc, #28]	; (27f0 <usb_malloc+0x3c>)
    27d2:	add.w	r3, r3, r3, lsl #3
    27d6:	lsls	r3, r3, #3
    27d8:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    27da:	movs	r1, #0
    27dc:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    27de:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    27e0:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    27e2:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    27e4:	cpsie	i
		return NULL;
    27e6:	movs	r0, #0
    27e8:	bx	lr
    27ea:	nop
    27ec:	.word	0x1fff0c44
    27f0:	.word	0x1fff03d0

000027f4 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    27f4:	ldr	r3, [pc, #52]	; (282c <usb_free+0x38>)
    27f6:	ldr	r2, [pc, #56]	; (2830 <usb_free+0x3c>)
    27f8:	subs	r3, r0, r3
    27fa:	umull	r2, r3, r2, r3
    27fe:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    2800:	cmp	r3, #29
    2802:	bhi.n	281e <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2804:	ldr	r2, [pc, #44]	; (2834 <usb_free+0x40>)
    2806:	ldrb	r2, [r2, #0]
    2808:	cbnz	r2, 2820 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    280a:	cpsid	i
	usb_buffer_available |= mask;
    280c:	ldr	r0, [pc, #40]	; (2838 <usb_free+0x44>)
    280e:	mov.w	r1, #2147483648	; 0x80000000
    2812:	ldr	r2, [r0, #0]
    2814:	lsr.w	r3, r1, r3
    2818:	orrs	r2, r3
    281a:	str	r2, [r0, #0]
	__enable_irq();
    281c:	cpsie	i
    281e:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2820:	ldr	r2, [pc, #24]	; (283c <usb_free+0x48>)
    2822:	ldrb	r2, [r2, #0]
    2824:	cmp	r2, #0
    2826:	beq.n	280a <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    2828:	b.w	28a8 <usb_rx_memory>
    282c:	.word	0x1fff03d0
    2830:	.word	0x38e38e39
    2834:	.word	0x1fff1715
    2838:	.word	0x1fff0c44
    283c:	.word	0x1fff1720

00002840 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    2840:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2842:	cmp	r3, #4
    2844:	bhi.n	2870 <usb_rx+0x30>
	__disable_irq();
    2846:	cpsid	i
	ret = rx_first[endpoint];
    2848:	ldr	r1, [pc, #40]	; (2874 <usb_rx+0x34>)
    284a:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    284e:	cbz	r0, 286c <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2850:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2852:	ldr	r4, [pc, #36]	; (2878 <usb_rx+0x38>)
    2854:	ldrh	r5, [r0, #0]
    2856:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    285a:	ldr	r6, [r0, #4]
    285c:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2860:	subs	r2, r2, r5
    2862:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    2866:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2868:	pop	{r4, r5, r6}
    286a:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    286c:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    286e:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2870:	movs	r0, #0
    2872:	bx	lr
    2874:	.word	0x1fff168c
    2878:	.word	0x1fff1bb8

0000287c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    287c:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    287e:	cmp	r0, #4
    2880:	bhi.n	289a <usb_tx_packet_count+0x1e>
	__disable_irq();
    2882:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    2884:	ldr	r3, [pc, #28]	; (28a4 <usb_tx_packet_count+0x28>)
    2886:	ldr.w	r3, [r3, r0, lsl #2]
    288a:	cbz	r3, 289e <usb_tx_packet_count+0x22>
    288c:	movs	r0, #0
    288e:	ldr	r3, [r3, #4]
    2890:	adds	r0, #1
    2892:	cmp	r3, #0
    2894:	bne.n	288e <usb_tx_packet_count+0x12>
	__enable_irq();
    2896:	cpsie	i
	return count;
    2898:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    289a:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    289c:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    289e:	mov	r0, r3
    28a0:	b.n	2896 <usb_tx_packet_count+0x1a>
    28a2:	nop
    28a4:	.word	0x1fff16e4

000028a8 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    28a8:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    28aa:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    28ac:	ldr	r2, [pc, #204]	; (297c <usb_rx_memory+0xd4>)
    28ae:	ldrb	r3, [r2, #0]
    28b0:	lsls	r3, r3, #28
    28b2:	bpl.n	28c2 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    28b4:	ldr	r3, [pc, #200]	; (2980 <usb_rx_memory+0xd8>)
    28b6:	ldr	r1, [r3, #32]
    28b8:	cmp	r1, #0
    28ba:	beq.n	2944 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    28bc:	ldr	r1, [r3, #40]	; 0x28
    28be:	cmp	r1, #0
    28c0:	beq.n	2960 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    28c2:	ldrb	r3, [r2, #1]
    28c4:	lsls	r5, r3, #28
    28c6:	bpl.n	28d6 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    28c8:	ldr	r3, [pc, #180]	; (2980 <usb_rx_memory+0xd8>)
    28ca:	ldr	r1, [r3, #64]	; 0x40
    28cc:	cmp	r1, #0
    28ce:	beq.n	296c <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    28d0:	ldr	r1, [r3, #72]	; 0x48
    28d2:	cmp	r1, #0
    28d4:	beq.n	2964 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    28d6:	ldrb	r3, [r2, #2]
    28d8:	lsls	r4, r3, #28
    28da:	bpl.n	28ea <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    28dc:	ldr	r3, [pc, #160]	; (2980 <usb_rx_memory+0xd8>)
    28de:	ldr	r1, [r3, #96]	; 0x60
    28e0:	cmp	r1, #0
    28e2:	beq.n	2970 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    28e4:	ldr	r1, [r3, #104]	; 0x68
    28e6:	cmp	r1, #0
    28e8:	beq.n	2968 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    28ea:	ldrb	r3, [r2, #3]
    28ec:	lsls	r1, r3, #28
    28ee:	bpl.n	2900 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    28f0:	ldr	r3, [pc, #140]	; (2980 <usb_rx_memory+0xd8>)
    28f2:	ldr.w	r1, [r3, #128]	; 0x80
    28f6:	cmp	r1, #0
    28f8:	beq.n	2978 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    28fa:	ldr.w	r1, [r3, #136]	; 0x88
    28fe:	cbz	r1, 2926 <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2900:	ldrb	r3, [r2, #4]
    2902:	lsls	r3, r3, #28
    2904:	bpl.n	2918 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2906:	ldr	r3, [pc, #120]	; (2980 <usb_rx_memory+0xd8>)
    2908:	ldr.w	r2, [r3, #160]	; 0xa0
    290c:	cmp	r2, #0
    290e:	beq.n	2974 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2910:	ldr.w	r2, [r3, #168]	; 0xa8
    2914:	movs	r4, #21
    2916:	cbz	r2, 2928 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2918:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    291a:	ldr	r3, [pc, #104]	; (2984 <usb_rx_memory+0xdc>)
    291c:	movs	r2, #0
    291e:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2920:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2922:	b.w	27f4 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2926:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2928:	ldr	r1, [pc, #88]	; (2984 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    292a:	ldr	r5, [pc, #92]	; (2988 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    292c:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    292e:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2932:	add.w	r3, r3, r4, lsl #3
    2936:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2938:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    293a:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    293c:	strb	r2, [r1, #0]
				__enable_irq();
    293e:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2940:	pop	{r4, r5}
    2942:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2944:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2946:	ldr	r4, [pc, #60]	; (2984 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2948:	ldr	r5, [pc, #64]	; (298c <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    294a:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    294c:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2950:	add.w	r3, r3, r2, lsl #3
    2954:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2956:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2958:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    295a:	strb	r2, [r4, #0]
				__enable_irq();
    295c:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    295e:	b.n	2940 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2960:	movs	r4, #5
    2962:	b.n	2928 <usb_rx_memory+0x80>
    2964:	movs	r4, #9
    2966:	b.n	2928 <usb_rx_memory+0x80>
    2968:	movs	r4, #13
    296a:	b.n	2928 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    296c:	movs	r2, #8
    296e:	b.n	2946 <usb_rx_memory+0x9e>
    2970:	movs	r2, #12
    2972:	b.n	2946 <usb_rx_memory+0x9e>
    2974:	movs	r2, #20
    2976:	b.n	2946 <usb_rx_memory+0x9e>
    2978:	movs	r2, #16
    297a:	b.n	2946 <usb_rx_memory+0x9e>
    297c:	.word	0x00004f00
    2980:	.word	0x1fff0000
    2984:	.word	0x1fff1715
    2988:	.word	0x004000c8
    298c:	.word	0x00400088

00002990 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2990:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2992:	cmp	r3, #4
    2994:	bhi.n	29d2 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2996:	ldr	r2, [pc, #108]	; (2a04 <usb_tx+0x74>)
    2998:	lsls	r0, r0, #5
    299a:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    299e:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    29a0:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    29a2:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    29a4:	ldr	r4, [pc, #96]	; (2a08 <usb_tx+0x78>)
    29a6:	ldrb	r2, [r4, r3]
    29a8:	cmp	r2, #3
    29aa:	bhi.n	29e4 <usb_tx+0x54>
    29ac:	tbb	[pc, r2]
    29b0:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    29b4:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    29b6:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    29b8:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    29ba:	tst.w	r0, #8
    29be:	ite	ne
    29c0:	movne	r3, #200	; 0xc8
    29c2:	moveq	r3, #136	; 0x88
    29c4:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    29c8:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    29ca:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    29cc:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    29ce:	cpsie	i
}
    29d0:	pop	{r4, r5}
    29d2:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    29d4:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    29d6:	movs	r2, #2
		break;
    29d8:	b.n	29b6 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    29da:	movs	r2, #5
    29dc:	b.n	29b6 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    29de:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    29e0:	movs	r2, #4
		break;
    29e2:	b.n	29b6 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    29e4:	ldr	r2, [pc, #36]	; (2a0c <usb_tx+0x7c>)
    29e6:	ldr.w	r0, [r2, r3, lsl #2]
    29ea:	cbz	r0, 29fc <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    29ec:	ldr	r2, [pc, #32]	; (2a10 <usb_tx+0x80>)
    29ee:	ldr.w	r0, [r2, r3, lsl #2]
    29f2:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    29f4:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    29f8:	cpsie	i
		return;
    29fa:	b.n	29d0 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    29fc:	str.w	r1, [r2, r3, lsl #2]
    2a00:	ldr	r2, [pc, #12]	; (2a10 <usb_tx+0x80>)
    2a02:	b.n	29f4 <usb_tx+0x64>
    2a04:	.word	0x1fff0000
    2a08:	.word	0x1fff1724
    2a0c:	.word	0x1fff16e4
    2a10:	.word	0x1fff16f8

00002a14 <usb_isr>:
}



void usb_isr(void)
{
    2a14:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2a18:	ldr.w	fp, [pc, #776]	; 2d24 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2a1c:	ldr.w	sl, [pc, #776]	; 2d28 <usb_isr+0x314>
}



void usb_isr(void)
{
    2a20:	sub	sp, #28
    2a22:	b.n	2aae <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2a24:	ldr	r7, [pc, #680]	; (2cd0 <usb_isr+0x2bc>)
    2a26:	mov.w	r8, r3, lsr #2
    2a2a:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2a2e:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2a30:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2a34:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2a38:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2a3a:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2a3e:	and.w	r4, r3, #255	; 0xff
    2a42:	cmp	r3, #0
    2a44:	bne.w	2c48 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2a48:	ldr.w	r3, [r7, r8, lsl #3]
    2a4c:	lsrs	r3, r3, #16
    2a4e:	uxth	r1, r3
    2a50:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2a54:	cmp	r3, #0
    2a56:	beq.w	2c36 <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    2a5a:	ldr	r3, [pc, #632]	; (2cd4 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2a5c:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2a60:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2a64:	ldr.w	r2, [r3, r6, lsl #2]
    2a68:	cmp	r2, #0
    2a6a:	beq.w	2ed8 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2a6e:	ldr	r5, [pc, #616]	; (2cd8 <usb_isr+0x2c4>)
    2a70:	ldr.w	r3, [r5, r6, lsl #2]
    2a74:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    2a76:	ldr	r4, [pc, #612]	; (2cdc <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2a78:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2a7c:	ldrh.w	r3, [r4, r6, lsl #1]
    2a80:	add	r1, r3
    2a82:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    2a86:	bl	27b4 <usb_malloc>
					if (packet) {
    2a8a:	cmp	r0, #0
    2a8c:	beq.w	2eca <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2a90:	ldr	r2, [pc, #588]	; (2ce0 <usb_isr+0x2cc>)
    2a92:	ldr	r3, [pc, #592]	; (2ce4 <usb_isr+0x2d0>)
    2a94:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2a98:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2a9c:	it	ne
    2a9e:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2aa0:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2aa4:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2aa8:	movs	r3, #8
    2aaa:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2aae:	ldrb.w	r4, [fp]
    2ab2:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2ab4:	lsls	r0, r4, #29
    2ab6:	bpl.n	2af2 <usb_isr+0xde>
		if (usb_configuration) {
    2ab8:	ldr	r3, [pc, #556]	; (2ce8 <usb_isr+0x2d4>)
    2aba:	ldrb	r3, [r3, #0]
    2abc:	cbz	r3, 2aec <usb_isr+0xd8>
			t = usb_reboot_timer;
    2abe:	ldr	r1, [pc, #556]	; (2cec <usb_isr+0x2d8>)
    2ac0:	ldrb	r2, [r1, #0]
			if (t) {
    2ac2:	and.w	r3, r2, #255	; 0xff
    2ac6:	cbz	r2, 2ad2 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    2ac8:	subs	r3, #1
    2aca:	uxtb	r3, r3
    2acc:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2ace:	cbnz	r3, 2ad2 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2ad0:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    2ad2:	ldr	r1, [pc, #540]	; (2cf0 <usb_isr+0x2dc>)
    2ad4:	ldrb	r2, [r1, #0]
			if (t) {
    2ad6:	and.w	r3, r2, #255	; 0xff
    2ada:	cbz	r2, 2ae8 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    2adc:	subs	r3, #1
    2ade:	uxtb	r3, r3
    2ae0:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    2ae2:	cmp	r3, #0
    2ae4:	beq.w	2e76 <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    2ae8:	bl	234c <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2aec:	movs	r3, #4
    2aee:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2af2:	and.w	r3, r4, #8
    2af6:	and.w	r2, r3, #255	; 0xff
    2afa:	cmp	r3, #0
    2afc:	beq.w	2c90 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    2b00:	ldrb.w	r3, [sl]
    2b04:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    2b06:	lsrs	r6, r3, #4
    2b08:	bne.n	2a24 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2b0a:	lsrs	r4, r3, #2
    2b0c:	ldr.w	r9, [pc, #448]	; 2cd0 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2b10:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2b14:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2b18:	ubfx	r2, r2, #2, #4
    2b1c:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2b1e:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2b20:	cmp	r2, #12
    2b22:	bhi.w	2c2e <usb_isr+0x21a>
    2b26:	tbb	[pc, r2]
    2b2a:	.short	0x7878
    2b2c:	.word	0x82828282
    2b30:	.word	0x82438282
    2b34:	.short	0x8282
    2b36:	.byte	0x07
    2b37:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2b38:	ldr	r0, [r1, #0]
    2b3a:	ldr	r5, [pc, #440]	; (2cf4 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2b3c:	ldr	r3, [pc, #416]	; (2ce0 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2b3e:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2b40:	ldr	r7, [pc, #436]	; (2cf8 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2b42:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2b46:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2b48:	ldr	r6, [pc, #432]	; (2cfc <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2b4a:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2b4c:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2b50:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2b52:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2b54:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2b56:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2b5a:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2b5c:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2b60:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2b64:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2b66:	bhi.w	2d2c <usb_isr+0x318>
    2b6a:	cmp.w	r1, #1664	; 0x680
    2b6e:	bcs.w	3198 <usb_isr+0x784>
    2b72:	cmp.w	r1, #258	; 0x102
    2b76:	beq.w	2f46 <usb_isr+0x532>
    2b7a:	bhi.w	2f10 <usb_isr+0x4fc>
    2b7e:	cmp	r1, #128	; 0x80
    2b80:	beq.w	31cc <usb_isr+0x7b8>
    2b84:	cmp	r1, #130	; 0x82
    2b86:	bne.w	2f52 <usb_isr+0x53e>
    2b8a:	ldrh	r1, [r5, #4]
    2b8c:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2b90:	cmp	r1, #5
    2b92:	bhi.w	2f52 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2b96:	ldr	r3, [pc, #360]	; (2d00 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2b98:	ldr	r4, [pc, #360]	; (2d04 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2b9a:	lsls	r1, r1, #2
    2b9c:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2b9e:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2ba0:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2ba2:	ldrb	r2, [r3, #0]
    2ba4:	lsls	r3, r2, #30
    2ba6:	bpl.w	32dc <usb_isr+0x8c8>
    2baa:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    2bac:	movs	r0, #2
    2bae:	b.n	2fda <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2bb0:	ldr	r7, [pc, #324]	; (2cf8 <usb_isr+0x2e4>)
    2bb2:	ldr	r2, [r7, #0]
		if (data) {
    2bb4:	cbz	r2, 2c04 <usb_isr+0x1f0>
			size = ep0_tx_len;
    2bb6:	ldr	r3, [pc, #336]	; (2d08 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2bb8:	ldr	r6, [pc, #320]	; (2cfc <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2bba:	ldr	r1, [pc, #336]	; (2d0c <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2bbc:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2bbe:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2bc0:	ldrb	r5, [r1, #0]
    2bc2:	cmp	r0, #64	; 0x40
    2bc4:	mov	lr, r0
    2bc6:	orr.w	r8, r5, #2
    2bca:	it	cs
    2bcc:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2bd0:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    2bd2:	eor.w	r4, r4, #1
    2bd6:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2bd8:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2bdc:	ite	eq
    2bde:	moveq	r4, #136	; 0x88
    2be0:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2be2:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2be6:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2be8:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2bec:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2bf0:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2bf2:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2bf4:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    2bf8:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2bfa:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2bfc:	cmp	r0, #0
    2bfe:	beq.w	2d6e <usb_isr+0x35a>
    2c02:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    2c04:	ldr	r3, [pc, #236]	; (2cf4 <usb_isr+0x2e0>)
    2c06:	ldrh	r2, [r3, #0]
    2c08:	cmp.w	r2, #1280	; 0x500
    2c0c:	bne.n	2c2e <usb_isr+0x21a>
			setup.bRequest = 0;
    2c0e:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2c10:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    2c12:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2c14:	ldr	r3, [pc, #248]	; (2d10 <usb_isr+0x2fc>)
    2c16:	strb	r2, [r3, #0]
    2c18:	b.n	2c2e <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    2c1a:	ldr	r2, [pc, #216]	; (2cf4 <usb_isr+0x2e0>)
    2c1c:	ldrh	r0, [r2, #0]
    2c1e:	movw	r2, #8225	; 0x2021
    2c22:	cmp	r0, r2
    2c24:	beq.w	2d78 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2c28:	ldr	r2, [pc, #180]	; (2ce0 <usb_isr+0x2cc>)
    2c2a:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2c2e:	ldr	r2, [pc, #228]	; (2d14 <usb_isr+0x300>)
    2c30:	movs	r3, #1
    2c32:	strb	r3, [r2, #0]
    2c34:	b.n	2aa8 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2c36:	ldr	r2, [pc, #168]	; (2ce0 <usb_isr+0x2cc>)
    2c38:	ldr	r3, [pc, #168]	; (2ce4 <usb_isr+0x2d0>)
    2c3a:	tst.w	r9, #8
    2c3e:	it	ne
    2c40:	movne	r3, r2
    2c42:	str.w	r3, [r7, r8, lsl #3]
    2c46:	b.n	2aa8 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2c48:	bl	27f4 <usb_free>
				packet = tx_first[endpoint];
    2c4c:	ldr	r2, [pc, #200]	; (2d18 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2c4e:	ldr	r1, [pc, #204]	; (2d1c <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2c50:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2c54:	cmp	r3, #0
    2c56:	beq.w	2ee0 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2c5a:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2c5c:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2c5e:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    2c62:	add.w	r2, r3, #8
    2c66:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    2c6a:	cmp	r4, #3
    2c6c:	bhi.n	2c7a <usb_isr+0x266>
    2c6e:	tbb	[pc, r4]
    2c72:	.short	0x022c
    2c74:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    2c76:	movs	r2, #2
    2c78:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    2c7a:	ldrh	r2, [r3, #0]
    2c7c:	tst.w	r9, #8
    2c80:	ite	eq
    2c82:	moveq	r3, #136	; 0x88
    2c84:	movne	r3, #200	; 0xc8
    2c86:	orr.w	r3, r3, r2, lsl #16
    2c8a:	str.w	r3, [r7, r8, lsl #3]
    2c8e:	b.n	2aa8 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2c90:	lsls	r0, r4, #31
    2c92:	bmi.w	2e7c <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    2c96:	lsls	r1, r4, #24
    2c98:	bmi.w	2efc <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2c9c:	lsls	r2, r4, #30
    2c9e:	bpl.n	2cae <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2ca0:	ldr	r2, [pc, #124]	; (2d20 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2ca2:	ldr	r1, [pc, #128]	; (2d24 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2ca4:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2ca6:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2ca8:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    2caa:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2cac:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2cae:	lsls	r3, r4, #27
    2cb0:	bpl.n	2cb8 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2cb2:	ldr	r3, [pc, #112]	; (2d24 <usb_isr+0x310>)
    2cb4:	movs	r2, #16
    2cb6:	strb	r2, [r3, #0]
	}

}
    2cb8:	add	sp, #28
    2cba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2cbe:	movs	r2, #4
    2cc0:	strb	r2, [r1, r6]
						break;
    2cc2:	b.n	2c7a <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2cc4:	movs	r2, #5
    2cc6:	strb	r2, [r1, r6]
						break;
    2cc8:	b.n	2c7a <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    2cca:	movs	r2, #3
    2ccc:	strb	r2, [r1, r6]
						break;
    2cce:	b.n	2c7a <usb_isr+0x266>
    2cd0:	.word	0x1fff0000
    2cd4:	.word	0x1fff168c
    2cd8:	.word	0x1fff1634
    2cdc:	.word	0x1fff1bb8
    2ce0:	.word	0x004000c8
    2ce4:	.word	0x00400088
    2ce8:	.word	0x1fff1720
    2cec:	.word	0x1fff16a1
    2cf0:	.word	0x1fff15b4
    2cf4:	.word	0x1fff170c
    2cf8:	.word	0x1fff1630
    2cfc:	.word	0x1fff16a0
    2d00:	.word	0x400720c0
    2d04:	.word	0x1fff1718
    2d08:	.word	0x1fff1648
    2d0c:	.word	0x1fff1714
    2d10:	.word	0x40072098
    2d14:	.word	0x40072094
    2d18:	.word	0x1fff16e4
    2d1c:	.word	0x1fff1724
    2d20:	.word	0x40072088
    2d24:	.word	0x40072080
    2d28:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2d2c:	movw	r4, #8225	; 0x2021
    2d30:	cmp	r1, r4
    2d32:	beq.w	2e6e <usb_isr+0x45a>
    2d36:	bhi.n	2dcc <usb_isr+0x3b8>
    2d38:	cmp.w	r1, #2176	; 0x880
    2d3c:	beq.w	2fd2 <usb_isr+0x5be>
    2d40:	cmp.w	r1, #2304	; 0x900
    2d44:	bne.w	2f52 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2d48:	ldr	r2, [pc, #712]	; (3014 <usb_isr+0x600>)
    2d4a:	ldr	r4, [pc, #716]	; (3018 <usb_isr+0x604>)
    2d4c:	ldrb	r1, [r5, #2]
    2d4e:	strb	r1, [r2, #0]
    2d50:	add.w	r5, r4, #160	; 0xa0
    2d54:	b.n	2d5e <usb_isr+0x34a>
    2d56:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2d58:	cmp	r5, r4
    2d5a:	beq.w	3070 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    2d5e:	ldr	r3, [r4, #32]
    2d60:	lsls	r1, r3, #24
    2d62:	bpl.n	2d56 <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2d64:	ldr	r0, [r4, #36]	; 0x24
    2d66:	subs	r0, #8
    2d68:	bl	27f4 <usb_free>
    2d6c:	b.n	2d56 <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2d6e:	cmp.w	lr, #64	; 0x40
    2d72:	it	ne
    2d74:	movne	r2, #0
    2d76:	b.n	2c02 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2d78:	ldr	r2, [pc, #672]	; (301c <usb_isr+0x608>)
    2d7a:	ldrb	r5, [r1, #0]
    2d7c:	ldrb	r0, [r1, #1]
    2d7e:	strb	r5, [r2, #0]
    2d80:	strb	r0, [r2, #1]
    2d82:	ldrb	r5, [r1, #2]
    2d84:	ldrb	r0, [r1, #3]
    2d86:	strb	r5, [r2, #2]
    2d88:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2d8a:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2d8c:	ldrb	r5, [r1, #4]
    2d8e:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2d90:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2d92:	ldrb	r5, [r1, #5]
    2d94:	ldrb	r1, [r1, #6]
    2d96:	strb	r5, [r2, #5]
    2d98:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2d9a:	beq.w	2fca <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2d9e:	ldr	r1, [pc, #640]	; (3020 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2da0:	ldr	r6, [pc, #640]	; (3024 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2da2:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2da4:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2da6:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2daa:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2dac:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2db0:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2db2:	ite	eq
    2db4:	moveq	r1, #136	; 0x88
    2db6:	movne	r1, #200	; 0xc8
    2db8:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2dbc:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2dc0:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2dc4:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2dc6:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2dc8:	str	r1, [r2, #4]
    2dca:	b.n	2c28 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2dcc:	movw	r4, #8737	; 0x2221
    2dd0:	cmp	r1, r4
    2dd2:	bne.w	31e6 <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2dd6:	ldr.w	ip, [pc, #656]	; 3068 <usb_isr+0x654>
    2dda:	ldr	r3, [pc, #588]	; (3028 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    2ddc:	ldr	r1, [pc, #588]	; (302c <usb_isr+0x618>)
    2dde:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2de0:	ldr.w	r5, [ip]
    2de4:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    2de6:	str	r0, [sp, #4]
    2de8:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2dea:	movs	r0, #0
    2dec:	str	r0, [sp, #8]
    2dee:	mov	r8, r0
    2df0:	mov	ip, r0
    2df2:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2df4:	ldr	r1, [pc, #552]	; (3020 <usb_isr+0x60c>)
    2df6:	ldrb	r5, [r1, #0]
    2df8:	orr.w	lr, r5, #2
    2dfc:	add.w	r3, r9, lr, lsl #3
    2e00:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e02:	ldr	r3, [sp, #4]
    2e04:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e06:	ldr	r3, [sp, #12]
    2e08:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e0a:	ite	eq
    2e0c:	moveq	r4, #136	; 0x88
    2e0e:	movne	r4, #200	; 0xc8
    2e10:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2e14:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e18:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    2e1c:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2e1e:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e20:	ldr.w	lr, [pc, #500]	; 3018 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    2e24:	ldr	r3, [pc, #508]	; (3024 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    2e26:	ldr.w	r8, [pc, #504]	; 3020 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2e2a:	cmp	r0, #0
    2e2c:	bne.w	2f60 <usb_isr+0x54c>
    2e30:	cmp.w	ip, #64	; 0x40
    2e34:	bne.n	2e6e <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e36:	orr.w	ip, r4, #2
    2e3a:	add.w	r3, r9, ip, lsl #3
    2e3e:	ldr	r4, [sp, #8]
    2e40:	ldr.w	lr, [pc, #468]	; 3018 <usb_isr+0x604>
    2e44:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e46:	cmp	r2, #0
    2e48:	bne.w	2f8c <usb_isr+0x578>
    2e4c:	lsls	r2, r0, #16
    2e4e:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    2e52:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e56:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2e5a:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2e5c:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2e5e:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2e60:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2e62:	cmp	r0, #64	; 0x40
    2e64:	bne.n	2e6e <usb_isr+0x45a>
    2e66:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    2e68:	ldr	r2, [pc, #452]	; (3030 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    2e6a:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    2e6c:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2e6e:	ldr	r2, [pc, #452]	; (3034 <usb_isr+0x620>)
    2e70:	movs	r3, #1
    2e72:	strb	r3, [r2, #0]
    2e74:	b.n	2c2e <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    2e76:	bl	1bd4 <usb_serial_flush_callback>
    2e7a:	b.n	2ae8 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2e7c:	ldr	r3, [pc, #408]	; (3018 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2e7e:	ldr	r0, [pc, #436]	; (3034 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    2e80:	ldr	r1, [pc, #412]	; (3020 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    2e82:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2e84:	mov.w	lr, #2
    2e88:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2e8c:	ldr	r7, [pc, #424]	; (3038 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    2e8e:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2e90:	ldr	r1, [pc, #424]	; (303c <usb_isr+0x628>)
    2e92:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    2e94:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2e96:	ldr	r6, [pc, #424]	; (3040 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    2e98:	ldr	r5, [pc, #424]	; (3044 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2e9a:	ldr	r4, [pc, #428]	; (3048 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    2e9c:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2e9e:	movs	r1, #13
    2ea0:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2ea2:	movs	r1, #255	; 0xff
    2ea4:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2ea6:	ldr.w	lr, [pc, #452]	; 306c <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    2eaa:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2eac:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2eae:	ldr	r5, [pc, #412]	; (304c <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2eb0:	ldr	r2, [pc, #412]	; (3050 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2eb2:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2eb6:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2eb8:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2eba:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2ebe:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2ec0:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2ec2:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    2ec4:	add	sp, #28
    2ec6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    2eca:	ldr	r2, [pc, #392]	; (3054 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    2ecc:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    2ed0:	ldrb	r3, [r2, #0]
    2ed2:	adds	r3, #1
    2ed4:	strb	r3, [r2, #0]
    2ed6:	b.n	2aa8 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    2ed8:	str.w	r0, [r3, r6, lsl #2]
    2edc:	ldr	r5, [pc, #376]	; (3058 <usb_isr+0x644>)
    2ede:	b.n	2a76 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    2ee0:	ldrb	r3, [r1, r6]
    2ee2:	cmp	r3, #3
    2ee4:	bhi.n	2fbc <usb_isr+0x5a8>
    2ee6:	add	r2, pc, #4	; (adr r2, 2eec <usb_isr+0x4d8>)
    2ee8:	ldr.w	pc, [r2, r3, lsl #2]
    2eec:	.word	0x00002aa9
    2ef0:	.word	0x00002aa9
    2ef4:	.word	0x00002f41
    2ef8:	.word	0x00002f3b
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2efc:	ldr	r1, [pc, #312]	; (3038 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    2efe:	ldr	r3, [pc, #324]	; (3044 <usb_isr+0x630>)
    2f00:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2f02:	movs	r0, #13
    2f04:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    2f06:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2f08:	lsls	r2, r4, #30
    2f0a:	bpl.w	2cae <usb_isr+0x29a>
    2f0e:	b.n	2ca0 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2f10:	movw	r2, #770	; 0x302
    2f14:	cmp	r1, r2
    2f16:	bne.w	31d6 <usb_isr+0x7c2>
    2f1a:	ldrh	r1, [r5, #4]
    2f1c:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2f20:	cmp	r1, #5
    2f22:	bhi.n	2f52 <usb_isr+0x53e>
    2f24:	ldrh	r2, [r5, #2]
    2f26:	cbnz	r2, 2f52 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    2f28:	ldr	r4, [pc, #268]	; (3038 <usb_isr+0x624>)
    2f2a:	str	r0, [sp, #4]
    2f2c:	lsls	r1, r1, #2
    2f2e:	add	r4, r1
    2f30:	ldrb	r1, [r4, #0]
    2f32:	orr.w	r1, r1, #2
    2f36:	strb	r1, [r4, #0]
    2f38:	b.n	2dea <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2f3a:	movs	r3, #1
    2f3c:	strb	r3, [r1, r6]
						break;
    2f3e:	b.n	2aa8 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2f40:	movs	r3, #0
    2f42:	strb	r3, [r1, r6]
						break;
    2f44:	b.n	2aa8 <usb_isr+0x94>
    2f46:	ldrh	r1, [r5, #4]
    2f48:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2f4c:	cmp	r1, #5
    2f4e:	bls.w	31f0 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2f52:	ldr	r2, [pc, #228]	; (3038 <usb_isr+0x624>)
    2f54:	movs	r3, #15
    2f56:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2f58:	ldr	r2, [pc, #216]	; (3034 <usb_isr+0x620>)
    2f5a:	movs	r3, #1
    2f5c:	strb	r3, [r2, #0]
    2f5e:	b.n	2c2e <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2f60:	cmp	r0, #64	; 0x40
    2f62:	bls.w	2e36 <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2f66:	orr.w	r4, r4, #2
    2f6a:	add.w	r1, lr, r4, lsl #3
    2f6e:	ldr	r6, [sp, #8]
    2f70:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f72:	cbz	r2, 2fa4 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    2f74:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f78:	ldr	r2, [pc, #224]	; (305c <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    2f7a:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2f7c:	mov	r3, r6
    2f7e:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2f80:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2f84:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f86:	str.w	r2, [lr, r4, lsl #3]
    2f8a:	b.n	2e68 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    2f8c:	ldrb.w	r3, [sp, #4]
    2f90:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f92:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2f94:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2f96:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f98:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2f9c:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f9e:	str.w	r2, [lr, ip, lsl #3]
    2fa2:	b.n	2e62 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    2fa4:	ldrb.w	r1, [sp, #4]
    2fa8:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2faa:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2fac:	ldr	r2, [pc, #140]	; (303c <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2fae:	strb.w	r5, [r8]
    2fb2:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2fb4:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2fb6:	str.w	r2, [lr, r4, lsl #3]
    2fba:	b.n	2e68 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    2fbc:	tst.w	r9, #8
    2fc0:	ite	eq
    2fc2:	moveq	r3, #2
    2fc4:	movne	r3, #3
    2fc6:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    2fc8:	b.n	2aa8 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2fca:	ldr	r2, [pc, #148]	; (3060 <usb_isr+0x64c>)
    2fcc:	movs	r1, #15
    2fce:	strb	r1, [r2, #0]
    2fd0:	b.n	2d9e <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2fd2:	ldr	r2, [pc, #64]	; (3014 <usb_isr+0x600>)
    2fd4:	ldr	r4, [pc, #140]	; (3064 <usb_isr+0x650>)
    2fd6:	ldrb	r2, [r2, #0]
    2fd8:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2fda:	ldrh	r2, [r5, #6]
    2fdc:	cmp	r2, r0
    2fde:	bcs.w	33a4 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2fe2:	ldr	r1, [pc, #60]	; (3020 <usb_isr+0x60c>)
    2fe4:	ldrb	r5, [r1, #0]
    2fe6:	cmp	r2, #64	; 0x40
    2fe8:	mov	ip, r2
    2fea:	orr.w	lr, r5, #2
    2fee:	it	cs
    2ff0:	movcs.w	ip, #64	; 0x40
    2ff4:	add.w	r3, r4, ip
    2ff8:	add.w	r0, r9, lr, lsl #3
    2ffc:	str	r3, [sp, #8]
    2ffe:	movs	r3, #1
    3000:	str	r4, [r0, #4]
    3002:	mov.w	r8, ip, lsl #16
    3006:	rsb	r0, ip, r2
    300a:	str	r3, [sp, #4]
    300c:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    300e:	movs	r4, #200	; 0xc8
    3010:	b.n	2e10 <usb_isr+0x3fc>
    3012:	nop
    3014:	.word	0x1fff1720
    3018:	.word	0x1fff0000
    301c:	.word	0x1fff1a80
    3020:	.word	0x1fff1714
    3024:	.word	0x1fff16a0
    3028:	.word	0x1fff1a88
    302c:	.word	0x1fff15c4
    3030:	.word	0x1fff1648
    3034:	.word	0x40072094
    3038:	.word	0x400720c0
    303c:	.word	0x00400088
    3040:	.word	0x40072088
    3044:	.word	0x40072080
    3048:	.word	0x40072098
    304c:	.word	0x1fff164c
    3050:	.word	0x1fff16a4
    3054:	.word	0x1fff1715
    3058:	.word	0x1fff1634
    305c:	.word	0x004000c8
    3060:	.word	0x1fff16a1
    3064:	.word	0x1fff1718
    3068:	.word	0x1fff15cc
    306c:	.word	0x4007208c
    3070:	ldr	r4, [pc, #704]	; (3334 <usb_isr+0x920>)
    3072:	ldr	r2, [pc, #708]	; (3338 <usb_isr+0x924>)
    3074:	ldr	r1, [pc, #708]	; (333c <usb_isr+0x928>)
    3076:	ldr	r0, [pc, #712]	; (3340 <usb_isr+0x92c>)
    3078:	ldr	r5, [pc, #712]	; (3344 <usb_isr+0x930>)
    307a:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    307c:	movs	r3, #0
    307e:	ldr	r4, [pc, #712]	; (3348 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3080:	str	r4, [sp, #8]
    3082:	str	r6, [sp, #20]
    3084:	str	r5, [sp, #12]
    3086:	mov	r8, r0
    3088:	mov	r4, r3
    308a:	str	r7, [sp, #16]
    308c:	mov	r6, r2
    308e:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3090:	ldr	r0, [r6, #0]
			while (p) {
    3092:	cbz	r0, 30a0 <usb_isr+0x68c>
				n = p->next;
    3094:	ldr	r7, [r0, #4]
				usb_free(p);
    3096:	bl	27f4 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    309a:	mov	r0, r7
    309c:	cmp	r7, #0
    309e:	bne.n	3094 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    30a0:	movs	r3, #0
    30a2:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    30a4:	ldr	r3, [sp, #12]
			p = tx_first[i];
    30a6:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    30a8:	mov	r2, r3
    30aa:	movs	r3, #0
    30ac:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    30b0:	cbz	r0, 30be <usb_isr+0x6aa>
				n = p->next;
    30b2:	ldr	r7, [r0, #4]
				usb_free(p);
    30b4:	bl	27f4 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    30b8:	mov	r0, r7
    30ba:	cmp	r7, #0
    30bc:	bne.n	30b2 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    30be:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    30c0:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    30c2:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    30c4:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    30c6:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    30ca:	ldr	r2, [sp, #8]
    30cc:	mov.w	r1, #0
			switch (tx_state[i]) {
    30d0:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    30d2:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    30d6:	cmp	r3, #3
    30d8:	bhi.n	30ea <usb_isr+0x6d6>
    30da:	tbb	[pc, r3]
    30de:	.short	0x0258
    30e0:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    30e2:	ldr	r3, [sp, #4]
    30e4:	mov.w	r2, #1
    30e8:	strb	r2, [r3, #0]
    30ea:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    30ec:	adds	r4, #1
    30ee:	adds	r3, #1
    30f0:	cmp	r4, #5
    30f2:	add.w	r6, r6, #4
    30f6:	add.w	r5, r5, #4
    30fa:	str	r3, [sp, #4]
    30fc:	bne.n	3090 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    30fe:	ldr	r4, [pc, #588]	; (334c <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3100:	ldr	r5, [pc, #588]	; (3350 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3102:	ldrb	r2, [r4, #0]
			*reg = epconf;
    3104:	ldr	r3, [pc, #588]	; (3354 <usb_isr+0x940>)
    3106:	ldr	r7, [sp, #16]
    3108:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    310a:	movs	r1, #0
    310c:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    310e:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3110:	lsls	r2, r2, #28
    3112:	bmi.n	320a <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3114:	ldrb	r2, [r4, #1]
			*reg = epconf;
    3116:	ldr	r1, [pc, #576]	; (3358 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3118:	ldr.w	r8, [pc, #588]	; 3368 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    311c:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    311e:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3120:	mov.w	r1, #0
    3124:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    3128:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    312c:	bmi.w	32b6 <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3130:	ldrb	r2, [r4, #2]
			*reg = epconf;
    3132:	ldr	r1, [pc, #552]	; (335c <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3134:	ldr.w	r8, [pc, #560]	; 3368 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3138:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    313a:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    313c:	mov.w	r1, #0
    3140:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    3144:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3148:	bmi.w	328e <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    314c:	ldr	r1, [pc, #528]	; (3360 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    314e:	ldrb	r2, [r4, #3]
			*reg = epconf;
    3150:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3152:	movs	r1, #0
    3154:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3158:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    315c:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    315e:	ldr.w	r8, [pc, #520]	; 3368 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3162:	bmi.n	3260 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3164:	ldrb	r2, [r4, #4]
			*reg = epconf;
    3166:	ldr	r1, [pc, #508]	; (3364 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3168:	ldr	r4, [pc, #508]	; (3368 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    316a:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    316c:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    316e:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3170:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3174:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3178:	bmi.n	3236 <usb_isr+0x822>
    317a:	ldrb	r3, [r6, #0]
    317c:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    317e:	movs	r1, #0
    3180:	eor.w	r2, r3, #1
    3184:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3188:	str.w	r1, [r9, #184]	; 0xb8
    318c:	b.n	2dea <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    318e:	ldr	r3, [sp, #4]
    3190:	mov.w	r2, #0
    3194:	strb	r2, [r3, #0]
    3196:	b.n	30ea <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3198:	ldr	r2, [pc, #464]	; (336c <usb_isr+0x958>)
    319a:	ldr	r4, [r2, #4]
    319c:	cmp	r4, #0
    319e:	beq.w	2f52 <usb_isr+0x53e>
    31a2:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    31a4:	ldrh.w	lr, [r5, #4]
    31a8:	b.n	31b4 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    31aa:	adds	r2, #12
			if (list->addr == NULL) break;
    31ac:	ldr	r4, [r2, #4]
    31ae:	cmp	r4, #0
    31b0:	beq.w	2f52 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    31b4:	ldrh	r3, [r2, #0]
    31b6:	cmp	r3, r0
    31b8:	bne.n	31aa <usb_isr+0x796>
    31ba:	ldrh	r3, [r2, #2]
    31bc:	cmp	r3, lr
    31be:	bne.n	31aa <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    31c0:	lsrs	r0, r0, #8
    31c2:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    31c4:	ite	eq
    31c6:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    31c8:	ldrhne	r0, [r2, #8]
    31ca:	b.n	2fda <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    31cc:	ldr	r4, [pc, #416]	; (3370 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    31ce:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    31d0:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    31d2:	strb	r2, [r4, #1]
    31d4:	b.n	2fda <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    31d6:	cmp.w	r1, #1280	; 0x500
    31da:	bne.w	2f52 <usb_isr+0x53e>
    31de:	movs	r3, #1
    31e0:	movs	r2, #0
    31e2:	str	r3, [sp, #4]
    31e4:	b.n	2dea <usb_isr+0x3d6>
    31e6:	movw	r2, #8993	; 0x2321
    31ea:	cmp	r1, r2
    31ec:	beq.n	31de <usb_isr+0x7ca>
    31ee:	b.n	2f52 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    31f0:	ldrh	r2, [r5, #2]
    31f2:	cmp	r2, #0
    31f4:	bne.w	2f52 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    31f8:	ldr	r4, [pc, #376]	; (3374 <usb_isr+0x960>)
    31fa:	str	r0, [sp, #4]
    31fc:	lsls	r1, r1, #2
    31fe:	add	r4, r1
    3200:	ldrb	r1, [r4, #0]
    3202:	bic.w	r1, r1, #2
    3206:	strb	r1, [r4, #0]
    3208:	b.n	2dea <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    320a:	bl	27b4 <usb_malloc>
				if (p) {
    320e:	cmp	r0, #0
    3210:	beq.w	3380 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    3214:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3216:	ldr	r2, [pc, #352]	; (3378 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3218:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    321c:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3220:	bl	27b4 <usb_malloc>
				if (p) {
    3224:	cmp	r0, #0
    3226:	beq.n	3328 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    3228:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    322a:	ldr	r2, [pc, #336]	; (337c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    322c:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3230:	str.w	r2, [r9, #40]	; 0x28
    3234:	b.n	3114 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3236:	bl	27b4 <usb_malloc>
				if (p) {
    323a:	cmp	r0, #0
    323c:	beq.n	32ec <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    323e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3240:	ldr	r2, [pc, #308]	; (3378 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3242:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3246:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    324a:	bl	27b4 <usb_malloc>
				if (p) {
    324e:	cmp	r0, #0
    3250:	beq.n	32e0 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    3252:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3254:	ldr	r2, [pc, #292]	; (337c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3256:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    325a:	str.w	r2, [r9, #168]	; 0xa8
    325e:	b.n	317a <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3260:	bl	27b4 <usb_malloc>
				if (p) {
    3264:	cmp	r0, #0
    3266:	beq.w	3398 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    326a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    326c:	ldr	r2, [pc, #264]	; (3378 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    326e:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3272:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3276:	bl	27b4 <usb_malloc>
				if (p) {
    327a:	cmp	r0, #0
    327c:	beq.w	338c <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    3280:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3282:	ldr	r2, [pc, #248]	; (337c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3284:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3288:	str.w	r2, [r9, #136]	; 0x88
    328c:	b.n	3164 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    328e:	bl	27b4 <usb_malloc>
				if (p) {
    3292:	cmp	r0, #0
    3294:	beq.n	331c <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    3296:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3298:	ldr	r2, [pc, #220]	; (3378 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    329a:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    329e:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    32a2:	bl	27b4 <usb_malloc>
				if (p) {
    32a6:	cbz	r0, 3310 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    32a8:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    32aa:	ldr	r2, [pc, #208]	; (337c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    32ac:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    32b0:	str.w	r2, [r9, #104]	; 0x68
    32b4:	b.n	314c <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    32b6:	bl	27b4 <usb_malloc>
				if (p) {
    32ba:	cbz	r0, 3304 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    32bc:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    32be:	ldr	r2, [pc, #184]	; (3378 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    32c0:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    32c4:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    32c8:	bl	27b4 <usb_malloc>
				if (p) {
    32cc:	cbz	r0, 32f8 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    32ce:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    32d0:	ldr	r2, [pc, #168]	; (337c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    32d2:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    32d6:	str.w	r2, [r9, #72]	; 0x48
    32da:	b.n	3130 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    32dc:	movs	r0, #2
    32de:	b.n	2fda <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    32e0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    32e2:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    32e6:	adds	r2, #1
    32e8:	strb	r2, [r5, #0]
    32ea:	b.n	317a <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    32ec:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    32ee:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    32f2:	adds	r2, #1
    32f4:	strb	r2, [r5, #0]
    32f6:	b.n	324a <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    32f8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    32fa:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    32fe:	adds	r2, #1
    3300:	strb	r2, [r5, #0]
    3302:	b.n	3130 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3304:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3306:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    330a:	adds	r2, #1
    330c:	strb	r2, [r5, #0]
    330e:	b.n	32c8 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3310:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3312:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    3316:	adds	r2, #1
    3318:	strb	r2, [r5, #0]
    331a:	b.n	314c <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    331c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    331e:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    3322:	adds	r2, #1
    3324:	strb	r2, [r5, #0]
    3326:	b.n	32a2 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3328:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    332a:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    332e:	adds	r2, #1
    3330:	strb	r2, [r5, #0]
    3332:	b.n	3114 <usb_isr+0x700>
    3334:	.word	0x1fff1724
    3338:	.word	0x1fff168c
    333c:	.word	0x1fff16e4
    3340:	.word	0x1fff16f8
    3344:	.word	0x1fff1634
    3348:	.word	0x1fff1bb8
    334c:	.word	0x00004f00
    3350:	.word	0x1fff1715
    3354:	.word	0x400720c4
    3358:	.word	0x400720c8
    335c:	.word	0x400720cc
    3360:	.word	0x400720d0
    3364:	.word	0x400720d4
    3368:	.word	0x1fff0000
    336c:	.word	0x00004f08
    3370:	.word	0x1fff1718
    3374:	.word	0x400720c0
    3378:	.word	0x00400088
    337c:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3380:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3382:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    3386:	adds	r2, #1
    3388:	strb	r2, [r5, #0]
    338a:	b.n	3220 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    338c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    338e:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    3392:	adds	r2, #1
    3394:	strb	r2, [r5, #0]
    3396:	b.n	3164 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3398:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    339a:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    339e:	adds	r2, #1
    33a0:	strb	r2, [r5, #0]
    33a2:	b.n	3276 <usb_isr+0x862>
    33a4:	cmp	r0, #64	; 0x40
    33a6:	mov	ip, r0
    33a8:	it	cs
    33aa:	movcs.w	ip, #64	; 0x40
    33ae:	add.w	r3, r4, ip
    33b2:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    33b4:	movs	r3, #1
    33b6:	rsb	r0, ip, r0
    33ba:	mov.w	r8, ip, lsl #16
    33be:	movs	r2, #0
    33c0:	str	r3, [sp, #4]
    33c2:	b.n	2df4 <usb_isr+0x3e0>

000033c4 <usb_init>:
}



void usb_init(void)
{
    33c4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33c8:	ldr	r4, [pc, #156]	; (3468 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    33ca:	bl	3d10 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    33ce:	movs	r2, #0
    33d0:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    33d4:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    33d6:	str	r2, [r3, #0]
		table[i].addr = 0;
    33d8:	str	r2, [r3, #4]
    33da:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    33dc:	cmp	r3, r0
		table[i].desc = 0;
    33de:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    33e2:	bne.n	33d6 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    33e4:	ldr	r0, [pc, #132]	; (346c <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    33e6:	ldr	r2, [pc, #136]	; (3470 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    33e8:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    33ea:	ldr.w	lr, [pc, #156]	; 3488 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    33ee:	ldr	r6, [pc, #132]	; (3474 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    33f0:	ldr	r5, [pc, #132]	; (3478 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    33f2:	ldr	r7, [pc, #136]	; (347c <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    33f4:	ldr.w	ip, [pc, #148]	; 348c <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    33f8:	ldr.w	r8, [pc, #148]	; 3490 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    33fc:	orr.w	r3, r3, #262144	; 0x40000
    3400:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3402:	ldr	r3, [r2, #0]
    3404:	orr.w	r3, r3, #50331648	; 0x3000000
    3408:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    340a:	movs	r3, #3
    340c:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3410:	movs	r3, #160	; 0xa0
    3412:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3414:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3418:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    341c:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3420:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3422:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3424:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3428:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    342a:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    342c:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    342e:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3430:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3432:	ldr	r5, [pc, #76]	; (3480 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3434:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3438:	ldr	r0, [pc, #72]	; (3484 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    343a:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    343e:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3440:	movs	r3, #1
    3442:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3446:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    344a:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    344e:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3450:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    3452:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3456:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3458:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    345a:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    345e:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3462:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3466:	nop
    3468:	.word	0x1fff0000
    346c:	.word	0x40048034
    3470:	.word	0x4000d800
    3474:	.word	0x40072140
    3478:	.word	0x4007209c
    347c:	.word	0x400720b0
    3480:	.word	0xe000e435
    3484:	.word	0xe000e104
    3488:	.word	0x40072144
    348c:	.word	0x40072080
    3490:	.word	0x40072088

00003494 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3494:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    3496:	ldr	r4, [pc, #176]	; (3548 <yield+0xb4>)
    3498:	ldrb	r3, [r4, #0]
    349a:	cbz	r3, 349e <yield+0xa>
    349c:	pop	{r3, r4, r5, pc}
	running = 1;
    349e:	movs	r3, #1
    34a0:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    34a2:	bl	19c0 <usb_serial_available>
	if (Serial.available()) serialEvent();
    34a6:	cmp	r0, #0
    34a8:	bne.n	3530 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    34aa:	bl	3ae0 <serial_available>
	if (Serial1.available()) serialEvent1();
    34ae:	cmp	r0, #0
    34b0:	bne.n	352a <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    34b2:	bl	37c8 <serial2_available>
	if (Serial2.available()) serialEvent2();
    34b6:	cmp	r0, #0
    34b8:	bne.n	3524 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    34ba:	bl	3de0 <serial3_available>
	if (Serial3.available()) serialEvent3();
    34be:	cbnz	r0, 351e <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    34c0:	bl	38f4 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    34c4:	cbnz	r0, 3518 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    34c6:	bl	36d0 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    34ca:	cbnz	r0, 3512 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    34cc:	bl	3c0c <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    34d0:	cbnz	r0, 350c <yield+0x78>
#endif
	running = 0;
    34d2:	movs	r3, #0
    34d4:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    34d6:	mrs	r3, IPSR
		if (ipsr != 0) return;
    34da:	cmp	r3, #0
    34dc:	bne.n	349c <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    34de:	mrs	r1, PRIMASK
		__disable_irq();
    34e2:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    34e4:	ldr	r3, [pc, #100]	; (354c <yield+0xb8>)
    34e6:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    34e8:	cbz	r0, 3536 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    34ea:	ldr	r4, [pc, #100]	; (3550 <yield+0xbc>)
    34ec:	ldrb	r2, [r4, #0]
    34ee:	cbnz	r2, 3536 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    34f0:	ldr	r5, [r0, #20]
    34f2:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    34f4:	movs	r3, #1
    34f6:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    34f8:	cbz	r5, 353e <yield+0xaa>
			firstYield->_prev = nullptr;
    34fa:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    34fc:	cbnz	r1, 3500 <yield+0x6c>
    34fe:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3500:	movs	r5, #0
    3502:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    3504:	ldr	r3, [r0, #8]
    3506:	blx	r3
		runningFromYield = false;
    3508:	strb	r5, [r4, #0]
    350a:	b.n	349c <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    350c:	bl	36c8 <serialEvent6()>
    3510:	b.n	34d2 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3512:	bl	3558 <serialEvent5()>
    3516:	b.n	34cc <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3518:	bl	363c <serialEvent4()>
    351c:	b.n	34c6 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    351e:	bl	3edc <serialEvent3()>
    3522:	b.n	34c0 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    3524:	bl	3638 <serialEvent2()>
    3528:	b.n	34ba <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    352a:	bl	3ed8 <serialEvent1()>
    352e:	b.n	34b2 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    3530:	bl	3584 <serialEvent()>
    3534:	b.n	34aa <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3536:	cmp	r1, #0
    3538:	bne.n	349c <yield+0x8>
    353a:	cpsie	i
    353c:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    353e:	ldr	r3, [pc, #20]	; (3554 <yield+0xc0>)
    3540:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3542:	cmp	r1, #0
    3544:	bne.n	3500 <yield+0x6c>
    3546:	b.n	34fe <yield+0x6a>
    3548:	.word	0x1fff1729
    354c:	.word	0x1fff1a40
    3550:	.word	0x1fff1a44
    3554:	.word	0x1fff1a3c

00003558 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    3558:	bx	lr
    355a:	nop

0000355c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    355c:	b.w	19dc <usb_serial_flush_input>

00003560 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    3560:	b.w	1990 <usb_serial_peekchar>

00003564 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3564:	b.w	1948 <usb_serial_getchar>

00003568 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3568:	b.w	19c0 <usb_serial_available>

0000356c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    356c:	b.w	1b7c <usb_serial_flush_output>

00003570 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3570:	b.w	1b34 <usb_serial_write_buffer_free>

00003574 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3574:	mov	r0, r1
    3576:	mov	r1, r2
    3578:	b.w	1a14 <usb_serial_write>

0000357c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    357c:	mov	r0, r1
    357e:	b.w	1b1c <usb_serial_putchar>
    3582:	nop

00003584 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    3584:	bx	lr
    3586:	nop

00003588 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3588:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    358a:	ldr	r2, [pc, #24]	; (35a4 <Print::println()+0x1c>)
	return write(buf, 2);
    358c:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    358e:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    3590:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3592:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3594:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3596:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    359a:	movs	r2, #2
    359c:	blx	r3
}
    359e:	add	sp, #12
    35a0:	ldr.w	pc, [sp], #4
    35a4:	.word	0x00004efc

000035a8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    35a8:	push	{r4, r5, r6, r7, lr}
    35aa:	mov	r7, r0
    35ac:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    35ae:	cmp	r2, #0
    35b0:	beq.n	361a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    35b2:	cmp	r2, #1
    35b4:	it	eq
    35b6:	moveq	r2, #10
	}


	if (n == 0) {
    35b8:	cbz	r1, 3610 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    35ba:	movs	r4, #33	; 0x21
    35bc:	b.n	35c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    35be:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    35c0:	udiv	r5, r1, r2
    35c4:	mls	r1, r2, r5, r1
    35c8:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    35ca:	cmp	r1, #9
    35cc:	add.w	r1, r0, #48	; 0x30
    35d0:	it	ls
    35d2:	uxtbls	r0, r1
    35d4:	add	r1, sp, #40	; 0x28
    35d6:	it	hi
    35d8:	addhi	r0, #55	; 0x37
    35da:	add	r1, r4
    35dc:	it	hi
    35de:	uxtbhi	r0, r0
    35e0:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    35e4:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    35e6:	mov	r1, r5
    35e8:	cmp	r5, #0
    35ea:	bne.n	35be <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    35ec:	cbz	r3, 35fc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    35ee:	subs	r4, #1
    35f0:	uxtb	r4, r4
		buf[i] = '-';
    35f2:	add	r3, sp, #40	; 0x28
    35f4:	add	r3, r4
    35f6:	movs	r2, #45	; 0x2d
    35f8:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    35fc:	ldr	r3, [r7, #0]
    35fe:	add	r2, sp, #4
    3600:	adds	r1, r2, r4
    3602:	ldr	r3, [r3, #4]
    3604:	mov	r0, r7
    3606:	rsb	r2, r4, #34	; 0x22
    360a:	blx	r3
}
    360c:	add	sp, #44	; 0x2c
    360e:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    3610:	movs	r2, #48	; 0x30
    3612:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    3616:	movs	r4, #33	; 0x21
    3618:	b.n	35ec <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    361a:	ldr	r3, [r0, #0]
    361c:	uxtb	r1, r1
    361e:	ldr	r3, [r3, #0]
    3620:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    3622:	add	sp, #44	; 0x2c
    3624:	pop	{r4, r5, r6, r7, pc}
    3626:	nop

00003628 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    3628:	cmp	r1, #0
		sign = '-';
		n = -n;
    362a:	itte	lt
    362c:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    362e:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    3630:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    3632:	movs	r2, #10
    3634:	b.w	35a8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00003638 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    3638:	bx	lr
    363a:	nop

0000363c <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    363c:	bx	lr
    363e:	nop

00003640 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3640:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3642:	bl	99c <setup>
	while (1) {
		loop();
    3646:	bl	9a0 <loop>
		yield();
    364a:	bl	3494 <yield>
    364e:	b.n	3646 <main+0x6>

00003650 <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    3650:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    3652:	ldr	r5, [pc, #88]	; (36ac <random(unsigned long) [clone .part.0]+0x5c>)
    3654:	ldr	r2, [r5, #0]
	if (x == 0) x = 123459876;
    3656:	cbz	r2, 369c <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    3658:	ldr	r1, [pc, #84]	; (36b0 <random(unsigned long) [clone .part.0]+0x60>)
    365a:	ldr	r3, [pc, #88]	; (36b4 <random(unsigned long) [clone .part.0]+0x64>)
    365c:	ldr.w	lr, [pc, #92]	; 36bc <random(unsigned long) [clone .part.0]+0x6c>
    3660:	smull	r6, r7, r2, r1
    3664:	smull	r1, r4, r1, r2
    3668:	asrs	r6, r2, #31
    366a:	adds	r1, r2, r7
    366c:	add	r4, r2
    366e:	rsb	r1, r6, r1, asr #16
    3672:	rsb	r4, r6, r4, asr #16
    3676:	mul.w	r4, r3, r4
    367a:	mls	r2, lr, r1, r2
    367e:	movw	r3, #16807	; 0x41a7
    3682:	mla	r3, r3, r2, r4
	if (x < 0) x += 0x7FFFFFFF;
    3686:	cmp	r3, #0
    3688:	bge.n	3690 <random(unsigned long) [clone .part.0]+0x40>
    368a:	add.w	r3, r3, #2147483648	; 0x80000000
    368e:	subs	r3, #1
    3690:	udiv	r2, r3, r0
	seed = x;
    3694:	str	r3, [r5, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    3696:	mls	r0, r0, r2, r3
    369a:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    369c:	ldr	r3, [pc, #24]	; (36b8 <random(unsigned long) [clone .part.0]+0x68>)
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    369e:	str	r3, [r5, #0]
    36a0:	udiv	r2, r3, r0

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    36a4:	mls	r0, r0, r2, r3
    36a8:	pop	{r4, r5, r6, r7, pc}
    36aa:	nop
    36ac:	.word	0x1fff172c
    36b0:	.word	0x834e0b5f
    36b4:	.word	0xfffff4ec
    36b8:	.word	0x1f0cce42
    36bc:	.word	0x0001f31d

000036c0 <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    36c0:	cbz	r0, 36c6 <random(unsigned long)+0x6>
    36c2:	b.w	3650 <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    36c6:	bx	lr

000036c8 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    36c8:	bx	lr
    36ca:	nop

000036cc <operator new(unsigned int)>:
    36cc:	b.w	4130 <malloc>

000036d0 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    36d0:	ldr	r2, [pc, #20]	; (36e8 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    36d2:	ldr	r3, [pc, #24]	; (36ec <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    36d4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    36d6:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    36d8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    36da:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    36dc:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    36de:	it	cc
    36e0:	addcc	r0, #64	; 0x40
    36e2:	subs	r0, r0, r3
}
    36e4:	bx	lr
    36e6:	nop
    36e8:	.word	0x1fff1734
    36ec:	.word	0x1fff1735

000036f0 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    36f0:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    36f2:	ldr	r3, [pc, #172]	; (37a0 <uart4_status_isr+0xb0>)
    36f4:	ldrb	r2, [r3, #4]
    36f6:	lsls	r4, r2, #26
    36f8:	bpl.n	373a <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    36fa:	ldr	r0, [pc, #168]	; (37a4 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    36fc:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    36fe:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3700:	ldr	r1, [pc, #164]	; (37a8 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3702:	adds	r3, #1
    3704:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3706:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3708:	it	gt
    370a:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    370c:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    370e:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3710:	beq.n	371a <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    3712:	ldr	r4, [pc, #152]	; (37ac <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    3714:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3716:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3718:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    371a:	ldr	r2, [pc, #148]	; (37b0 <uart4_status_isr+0xc0>)
    371c:	ldr	r1, [r2, #0]
    371e:	cbz	r1, 373a <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3720:	ldr	r2, [pc, #144]	; (37b4 <uart4_status_isr+0xc4>)
    3722:	ldrb	r2, [r2, #0]
    3724:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3726:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3728:	itet	cc
    372a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    372e:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3730:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3732:	cmp	r3, #39	; 0x27
    3734:	itt	gt
    3736:	movgt	r3, #1
    3738:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    373a:	ldr	r2, [pc, #100]	; (37a0 <uart4_status_isr+0xb0>)
    373c:	ldrb	r3, [r2, #3]
    373e:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3740:	lsls	r0, r3, #24
    3742:	bmi.n	3768 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    3744:	lsls	r2, r3, #25
    3746:	bpl.n	3764 <uart4_status_isr+0x74>
    3748:	ldr	r3, [pc, #84]	; (37a0 <uart4_status_isr+0xb0>)
    374a:	ldrb	r3, [r3, #4]
    374c:	lsls	r3, r3, #25
    374e:	bpl.n	3764 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3750:	ldr	r3, [pc, #100]	; (37b8 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3752:	ldr	r1, [pc, #104]	; (37bc <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3754:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3756:	movs	r2, #0
    3758:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    375a:	cbz	r3, 375e <uart4_status_isr+0x6e>
    375c:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    375e:	ldr	r3, [pc, #64]	; (37a0 <uart4_status_isr+0xb0>)
    3760:	movs	r2, #44	; 0x2c
    3762:	strb	r2, [r3, #3]
	}
}
    3764:	pop	{r4, r5}
    3766:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3768:	ldrb	r1, [r2, #4]
    376a:	lsls	r1, r1, #24
    376c:	bpl.n	3744 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    376e:	ldr	r1, [pc, #80]	; (37c0 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3770:	ldr	r0, [pc, #64]	; (37b4 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3772:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3774:	ldrb	r1, [r0, #0]
    3776:	uxtb	r1, r1
		if (head == tail) {
    3778:	cmp	r4, r1
    377a:	beq.n	3798 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    377c:	adds	r2, r1, #1
    377e:	cmp	r2, #39	; 0x27
    3780:	itt	hi
    3782:	movhi	r1, #0
    3784:	movhi	r2, r1
			n = tx_buffer[tail];
    3786:	ldr	r5, [pc, #60]	; (37c4 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3788:	ldr	r4, [pc, #20]	; (37a0 <uart4_status_isr+0xb0>)
    378a:	it	ls
    378c:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    378e:	ldrb	r2, [r5, r2]
    3790:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3792:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3794:	strb	r1, [r0, #0]
    3796:	b.n	3744 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    3798:	movs	r1, #108	; 0x6c
    379a:	strb	r1, [r2, #3]
    379c:	b.n	3744 <uart4_status_isr+0x54>
    379e:	nop
    37a0:	.word	0x400ea000
    37a4:	.word	0x1fff1734
    37a8:	.word	0x1fff1735
    37ac:	.word	0x1fff1760
    37b0:	.word	0x1fff1730
    37b4:	.word	0x1fff17a1
    37b8:	.word	0x1fff17a4
    37bc:	.word	0x1fff17a0
    37c0:	.word	0x1fff17a8
    37c4:	.word	0x1fff1738

000037c8 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    37c8:	ldr	r2, [pc, #20]	; (37e0 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    37ca:	ldr	r3, [pc, #24]	; (37e4 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    37cc:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    37ce:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    37d0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    37d2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    37d4:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    37d6:	it	cc
    37d8:	addcc	r0, #64	; 0x40
    37da:	subs	r0, r0, r3
}
    37dc:	bx	lr
    37de:	nop
    37e0:	.word	0x1fff181c
    37e4:	.word	0x1fff17b1

000037e8 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    37e8:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    37ea:	ldr	r3, [pc, #224]	; (38cc <uart1_status_isr+0xe4>)
    37ec:	ldrb	r2, [r3, #4]
    37ee:	tst.w	r2, #48	; 0x30
    37f2:	beq.n	384e <uart1_status_isr+0x66>
		__disable_irq();
    37f4:	cpsid	i
		avail = UART1_RCFIFO;
    37f6:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    37f8:	and.w	r2, r1, #255	; 0xff
    37fc:	cmp	r1, #0
    37fe:	beq.n	387c <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3800:	cpsie	i
			head = rx_buffer_head;
    3802:	ldr	r7, [pc, #204]	; (38d0 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3804:	ldr	r1, [pc, #204]	; (38d4 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3806:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3808:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    380a:	ldr	r6, [pc, #204]	; (38d8 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    380c:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    380e:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3810:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    3812:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3814:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3816:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3818:	it	cs
    381a:	movcs	r3, #0
				if (newhead != tail) {
    381c:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    381e:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3822:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3824:	itt	ne
    3826:	strbne	r1, [r6, r3]
    3828:	movne	r0, r3
				}
			} while (--avail > 0);
    382a:	ands.w	r2, r2, #255	; 0xff
    382e:	bne.n	3812 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3830:	ldr	r3, [pc, #168]	; (38dc <uart1_status_isr+0xf4>)
    3832:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3834:	uxtb	r2, r0
    3836:	strb	r2, [r7, #0]
			if (rts_pin) {
    3838:	cbz	r3, 384e <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    383a:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    383c:	itet	cc
    383e:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3842:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3844:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3846:	cmp	r0, #39	; 0x27
    3848:	itt	gt
    384a:	movgt	r2, #1
    384c:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    384e:	ldr	r1, [pc, #124]	; (38cc <uart1_status_isr+0xe4>)
    3850:	ldrb	r2, [r1, #3]
    3852:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3854:	lsls	r5, r2, #24
    3856:	bmi.n	3886 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    3858:	lsls	r2, r2, #25
    385a:	bpl.n	3878 <uart1_status_isr+0x90>
    385c:	ldr	r3, [pc, #108]	; (38cc <uart1_status_isr+0xe4>)
    385e:	ldrb	r3, [r3, #4]
    3860:	lsls	r3, r3, #25
    3862:	bpl.n	3878 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3864:	ldr	r3, [pc, #120]	; (38e0 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3866:	ldr	r1, [pc, #124]	; (38e4 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3868:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    386a:	movs	r2, #0
    386c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    386e:	cbz	r3, 3872 <uart1_status_isr+0x8a>
    3870:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    3872:	ldr	r3, [pc, #88]	; (38cc <uart1_status_isr+0xe4>)
    3874:	movs	r2, #60	; 0x3c
    3876:	strb	r2, [r3, #3]
	}
}
    3878:	pop	{r4, r5, r6, r7}
    387a:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    387c:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    387e:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3880:	strb	r2, [r3, #17]
			__enable_irq();
    3882:	cpsie	i
    3884:	b.n	384e <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3886:	ldrb	r3, [r1, #4]
    3888:	lsls	r4, r3, #24
    388a:	bpl.n	3858 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    388c:	ldr	r3, [pc, #88]	; (38e8 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    388e:	ldr	r6, [pc, #92]	; (38ec <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3890:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3892:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3894:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3896:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3898:	cmp	r4, r3
    389a:	beq.n	38ba <uart1_status_isr+0xd2>
    389c:	ldr	r5, [pc, #80]	; (38f0 <uart1_status_isr+0x108>)
    389e:	b.n	38a4 <uart1_status_isr+0xbc>
    38a0:	cmp	r3, r4
    38a2:	beq.n	38ba <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    38a4:	adds	r3, #1
    38a6:	cmp	r3, #40	; 0x28
    38a8:	it	cs
    38aa:	movcs	r3, #0
			avail = UART1_S1;
    38ac:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    38ae:	ldrb	r0, [r5, r3]
    38b0:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    38b2:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    38b4:	ldrb	r0, [r1, #20]
    38b6:	cmp	r0, #7
    38b8:	bls.n	38a0 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    38ba:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    38bc:	ldr	r1, [pc, #12]	; (38cc <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    38be:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    38c0:	ldrb	r3, [r1, #4]
    38c2:	lsls	r0, r3, #24
    38c4:	itt	mi
    38c6:	movmi	r3, #124	; 0x7c
    38c8:	strbmi	r3, [r1, #3]
    38ca:	b.n	3858 <uart1_status_isr+0x70>
    38cc:	.word	0x4006b000
    38d0:	.word	0x1fff181c
    38d4:	.word	0x1fff17b1
    38d8:	.word	0x1fff17dc
    38dc:	.word	0x1fff17ac
    38e0:	.word	0x1fff1820
    38e4:	.word	0x1fff17b0
    38e8:	.word	0x1fff1824
    38ec:	.word	0x1fff181d
    38f0:	.word	0x1fff17b4

000038f4 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    38f4:	ldr	r2, [pc, #20]	; (390c <serial4_available+0x18>)
	tail = rx_buffer_tail;
    38f6:	ldr	r3, [pc, #24]	; (3910 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    38f8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    38fa:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    38fc:	uxtb	r0, r0
	tail = rx_buffer_tail;
    38fe:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3900:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    3902:	it	cc
    3904:	addcc	r0, #64	; 0x40
    3906:	subs	r0, r0, r3
}
    3908:	bx	lr
    390a:	nop
    390c:	.word	0x1fff182c
    3910:	.word	0x1fff182d

00003914 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    3914:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    3916:	ldr	r3, [pc, #172]	; (39c4 <uart3_status_isr+0xb0>)
    3918:	ldrb	r2, [r3, #4]
    391a:	lsls	r4, r2, #26
    391c:	bpl.n	395e <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    391e:	ldr	r0, [pc, #168]	; (39c8 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3920:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3922:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3924:	ldr	r1, [pc, #164]	; (39cc <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3926:	adds	r3, #1
    3928:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    392a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    392c:	it	gt
    392e:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3930:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3932:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3934:	beq.n	393e <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    3936:	ldr	r4, [pc, #152]	; (39d0 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    3938:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    393a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    393c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    393e:	ldr	r2, [pc, #148]	; (39d4 <uart3_status_isr+0xc0>)
    3940:	ldr	r1, [r2, #0]
    3942:	cbz	r1, 395e <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3944:	ldr	r2, [pc, #144]	; (39d8 <uart3_status_isr+0xc4>)
    3946:	ldrb	r2, [r2, #0]
    3948:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    394a:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    394c:	itet	cc
    394e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3952:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3954:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3956:	cmp	r3, #39	; 0x27
    3958:	itt	gt
    395a:	movgt	r3, #1
    395c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    395e:	ldr	r2, [pc, #100]	; (39c4 <uart3_status_isr+0xb0>)
    3960:	ldrb	r3, [r2, #3]
    3962:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3964:	lsls	r0, r3, #24
    3966:	bmi.n	398c <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    3968:	lsls	r2, r3, #25
    396a:	bpl.n	3988 <uart3_status_isr+0x74>
    396c:	ldr	r3, [pc, #84]	; (39c4 <uart3_status_isr+0xb0>)
    396e:	ldrb	r3, [r3, #4]
    3970:	lsls	r3, r3, #25
    3972:	bpl.n	3988 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3974:	ldr	r3, [pc, #100]	; (39dc <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3976:	ldr	r1, [pc, #104]	; (39e0 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3978:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    397a:	movs	r2, #0
    397c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    397e:	cbz	r3, 3982 <uart3_status_isr+0x6e>
    3980:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    3982:	ldr	r3, [pc, #64]	; (39c4 <uart3_status_isr+0xb0>)
    3984:	movs	r2, #44	; 0x2c
    3986:	strb	r2, [r3, #3]
	}
}
    3988:	pop	{r4, r5}
    398a:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    398c:	ldrb	r1, [r2, #4]
    398e:	lsls	r1, r1, #24
    3990:	bpl.n	3968 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    3992:	ldr	r1, [pc, #80]	; (39e4 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3994:	ldr	r0, [pc, #64]	; (39d8 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3996:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3998:	ldrb	r1, [r0, #0]
    399a:	uxtb	r1, r1
		if (head == tail) {
    399c:	cmp	r4, r1
    399e:	beq.n	39bc <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    39a0:	adds	r2, r1, #1
    39a2:	cmp	r2, #39	; 0x27
    39a4:	itt	hi
    39a6:	movhi	r1, #0
    39a8:	movhi	r2, r1
			n = tx_buffer[tail];
    39aa:	ldr	r5, [pc, #60]	; (39e8 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    39ac:	ldr	r4, [pc, #20]	; (39c4 <uart3_status_isr+0xb0>)
    39ae:	it	ls
    39b0:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    39b2:	ldrb	r2, [r5, r2]
    39b4:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    39b6:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    39b8:	strb	r1, [r0, #0]
    39ba:	b.n	3968 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    39bc:	movs	r1, #108	; 0x6c
    39be:	strb	r1, [r2, #3]
    39c0:	b.n	3968 <uart3_status_isr+0x54>
    39c2:	nop
    39c4:	.word	0x4006d000
    39c8:	.word	0x1fff182c
    39cc:	.word	0x1fff182d
    39d0:	.word	0x1fff1858
    39d4:	.word	0x1fff1828
    39d8:	.word	0x1fff1899
    39dc:	.word	0x1fff189c
    39e0:	.word	0x1fff1898
    39e4:	.word	0x1fff18a0
    39e8:	.word	0x1fff1830

000039ec <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    39ec:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    39ee:	ldr	r4, [pc, #64]	; (3a30 <fault_isr+0x44>)
    39f0:	b.n	3a04 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    39f2:	ldr	r3, [r4, #0]
    39f4:	lsls	r1, r3, #21
    39f6:	bmi.n	3a14 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    39f8:	ldr	r3, [r4, #0]
    39fa:	lsls	r2, r3, #20
    39fc:	bmi.n	3a1e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    39fe:	ldr	r3, [r4, #0]
    3a00:	lsls	r3, r3, #19
    3a02:	bmi.n	3a28 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3a04:	ldr	r3, [r4, #0]
    3a06:	lsls	r0, r3, #13
    3a08:	bpl.n	39f2 <fault_isr+0x6>
    3a0a:	bl	2a14 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3a0e:	ldr	r3, [r4, #0]
    3a10:	lsls	r1, r3, #21
    3a12:	bpl.n	39f8 <fault_isr+0xc>
    3a14:	bl	3b00 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3a18:	ldr	r3, [r4, #0]
    3a1a:	lsls	r2, r3, #20
    3a1c:	bpl.n	39fe <fault_isr+0x12>
    3a1e:	bl	37e8 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3a22:	ldr	r3, [r4, #0]
    3a24:	lsls	r3, r3, #19
    3a26:	bpl.n	3a04 <fault_isr+0x18>
    3a28:	bl	3e00 <uart2_status_isr>
    3a2c:	b.n	3a04 <fault_isr+0x18>
    3a2e:	nop
    3a30:	.word	0x40048034

00003a34 <unused_isr>:
	}
}

void unused_isr(void)
{
    3a34:	push	{r3, lr}
	fault_isr();
    3a36:	bl	39ec <fault_isr>
    3a3a:	nop

00003a3c <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3a3c:	ldr	r3, [pc, #4]	; (3a44 <startup_early_hook+0x8>)
    3a3e:	movs	r2, #16
    3a40:	strh	r2, [r3, #0]
    3a42:	bx	lr
    3a44:	.word	0x40052000

00003a48 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3a48:	bx	lr
    3a4a:	nop

00003a4c <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3a4c:	ldr	r1, [pc, #36]	; (3a74 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3a4e:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3a50:	ldr	r3, [r1, #0]
	if (incr != 0) {
    3a52:	cbz	r0, 3a62 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    3a54:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    3a56:	add	r0, r3
    3a58:	sub.w	r2, r2, #8192	; 0x2000
    3a5c:	cmp	r0, r2
    3a5e:	bcs.n	3a66 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3a60:	str	r0, [r1, #0]
	}
	return prev;
    3a62:	mov	r0, r3
}
    3a64:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    3a66:	bl	40d4 <__errno>
    3a6a:	movs	r3, #12
    3a6c:	str	r3, [r0, #0]
			return (void *)-1;
    3a6e:	mov.w	r0, #4294967295
    3a72:	pop	{r3, pc}
    3a74:	.word	0x1fff0c58

00003a78 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    3a78:	ldr	r2, [pc, #32]	; (3a9c <kinetis_hsrun_disable+0x24>)
    3a7a:	ldrb	r3, [r2, #0]
    3a7c:	cmp	r3, #128	; 0x80
    3a7e:	beq.n	3a84 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3a80:	movs	r0, #0
}
    3a82:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3a84:	ldr	r1, [pc, #24]	; (3aa0 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3a86:	ldr	r3, [pc, #28]	; (3aa4 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3a88:	ldr	r0, [pc, #28]	; (3aa8 <kinetis_hsrun_disable+0x30>)
    3a8a:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3a8c:	movs	r1, #0
    3a8e:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3a90:	ldrb	r3, [r2, #0]
    3a92:	cmp	r3, #128	; 0x80
    3a94:	beq.n	3a90 <kinetis_hsrun_disable+0x18>
		return 1;
    3a96:	movs	r0, #1
    3a98:	bx	lr
    3a9a:	nop
    3a9c:	.word	0x4007e003
    3aa0:	.word	0x40048044
    3aa4:	.word	0x4007e001
    3aa8:	.word	0x22280000

00003aac <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3aac:	ldr	r2, [pc, #36]	; (3ad4 <kinetis_hsrun_enable+0x28>)
    3aae:	ldrb	r3, [r2, #0]
    3ab0:	cmp	r3, #1
    3ab2:	beq.n	3ab8 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3ab4:	movs	r0, #0
}
    3ab6:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3ab8:	add.w	r3, r3, #1073741824	; 0x40000000
    3abc:	add.w	r3, r3, #516096	; 0x7e000
    3ac0:	movs	r1, #96	; 0x60
    3ac2:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3ac4:	ldrb	r3, [r2, #0]
    3ac6:	cmp	r3, #128	; 0x80
    3ac8:	bne.n	3ac4 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3aca:	ldr	r3, [pc, #12]	; (3ad8 <kinetis_hsrun_enable+0x2c>)
    3acc:	ldr	r2, [pc, #12]	; (3adc <kinetis_hsrun_enable+0x30>)
    3ace:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3ad0:	movs	r0, #1
    3ad2:	bx	lr
    3ad4:	.word	0x4007e003
    3ad8:	.word	0x40048044
    3adc:	.word	0x02060000

00003ae0 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ae0:	ldr	r2, [pc, #20]	; (3af8 <serial_available+0x18>)
	tail = rx_buffer_tail;
    3ae2:	ldr	r3, [pc, #24]	; (3afc <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ae4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3ae6:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ae8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3aea:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3aec:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3aee:	it	cc
    3af0:	addcc	r0, #64	; 0x40
    3af2:	subs	r0, r0, r3
}
    3af4:	bx	lr
    3af6:	nop
    3af8:	.word	0x1fff18a8
    3afc:	.word	0x1fff18a9

00003b00 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3b00:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3b02:	ldr	r3, [pc, #224]	; (3be4 <uart0_status_isr+0xe4>)
    3b04:	ldrb	r2, [r3, #4]
    3b06:	tst.w	r2, #48	; 0x30
    3b0a:	beq.n	3b66 <uart0_status_isr+0x66>
		__disable_irq();
    3b0c:	cpsid	i
		avail = UART0_RCFIFO;
    3b0e:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3b10:	and.w	r2, r1, #255	; 0xff
    3b14:	cmp	r1, #0
    3b16:	beq.n	3b94 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3b18:	cpsie	i
			head = rx_buffer_head;
    3b1a:	ldr	r7, [pc, #204]	; (3be8 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3b1c:	ldr	r1, [pc, #204]	; (3bec <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3b1e:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3b20:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3b22:	ldr	r6, [pc, #204]	; (3bf0 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3b24:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3b26:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3b28:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    3b2a:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3b2c:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3b2e:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3b30:	it	cs
    3b32:	movcs	r3, #0
				if (newhead != tail) {
    3b34:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3b36:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3b3a:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3b3c:	itt	ne
    3b3e:	strbne	r1, [r6, r3]
    3b40:	movne	r0, r3
				}
			} while (--avail > 0);
    3b42:	ands.w	r2, r2, #255	; 0xff
    3b46:	bne.n	3b2a <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3b48:	ldr	r3, [pc, #168]	; (3bf4 <uart0_status_isr+0xf4>)
    3b4a:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3b4c:	uxtb	r2, r0
    3b4e:	strb	r2, [r7, #0]
			if (rts_pin) {
    3b50:	cbz	r3, 3b66 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3b52:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3b54:	itet	cc
    3b56:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3b5a:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3b5c:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3b5e:	cmp	r0, #39	; 0x27
    3b60:	itt	gt
    3b62:	movgt	r2, #1
    3b64:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    3b66:	ldr	r1, [pc, #124]	; (3be4 <uart0_status_isr+0xe4>)
    3b68:	ldrb	r2, [r1, #3]
    3b6a:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3b6c:	lsls	r5, r2, #24
    3b6e:	bmi.n	3b9e <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3b70:	lsls	r2, r2, #25
    3b72:	bpl.n	3b90 <uart0_status_isr+0x90>
    3b74:	ldr	r3, [pc, #108]	; (3be4 <uart0_status_isr+0xe4>)
    3b76:	ldrb	r3, [r3, #4]
    3b78:	lsls	r3, r3, #25
    3b7a:	bpl.n	3b90 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3b7c:	ldr	r3, [pc, #120]	; (3bf8 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3b7e:	ldr	r1, [pc, #124]	; (3bfc <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3b80:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3b82:	movs	r2, #0
    3b84:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3b86:	cbz	r3, 3b8a <uart0_status_isr+0x8a>
    3b88:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3b8a:	ldr	r3, [pc, #88]	; (3be4 <uart0_status_isr+0xe4>)
    3b8c:	movs	r2, #60	; 0x3c
    3b8e:	strb	r2, [r3, #3]
	}
}
    3b90:	pop	{r4, r5, r6, r7}
    3b92:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3b94:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    3b96:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3b98:	strb	r2, [r3, #17]
			__enable_irq();
    3b9a:	cpsie	i
    3b9c:	b.n	3b66 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3b9e:	ldrb	r3, [r1, #4]
    3ba0:	lsls	r4, r3, #24
    3ba2:	bpl.n	3b70 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3ba4:	ldr	r3, [pc, #88]	; (3c00 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    3ba6:	ldr	r6, [pc, #92]	; (3c04 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3ba8:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3baa:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3bac:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3bae:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3bb0:	cmp	r4, r3
    3bb2:	beq.n	3bd2 <uart0_status_isr+0xd2>
    3bb4:	ldr	r5, [pc, #80]	; (3c08 <uart0_status_isr+0x108>)
    3bb6:	b.n	3bbc <uart0_status_isr+0xbc>
    3bb8:	cmp	r3, r4
    3bba:	beq.n	3bd2 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3bbc:	adds	r3, #1
    3bbe:	cmp	r3, #64	; 0x40
    3bc0:	it	cs
    3bc2:	movcs	r3, #0
			avail = UART0_S1;
    3bc4:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3bc6:	ldrb	r0, [r5, r3]
    3bc8:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3bca:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3bcc:	ldrb	r0, [r1, #20]
    3bce:	cmp	r0, #7
    3bd0:	bls.n	3bb8 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    3bd2:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3bd4:	ldr	r1, [pc, #12]	; (3be4 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    3bd6:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3bd8:	ldrb	r3, [r1, #4]
    3bda:	lsls	r0, r3, #24
    3bdc:	itt	mi
    3bde:	movmi	r3, #124	; 0x7c
    3be0:	strbmi	r3, [r1, #3]
    3be2:	b.n	3b70 <uart0_status_isr+0x70>
    3be4:	.word	0x4006a000
    3be8:	.word	0x1fff18a8
    3bec:	.word	0x1fff18a9
    3bf0:	.word	0x1fff18ec
    3bf4:	.word	0x1fff18a4
    3bf8:	.word	0x1fff1930
    3bfc:	.word	0x1fff192c
    3c00:	.word	0x1fff1934
    3c04:	.word	0x1fff192d
    3c08:	.word	0x1fff18ac

00003c0c <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c0c:	ldr	r2, [pc, #20]	; (3c24 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    3c0e:	ldr	r3, [pc, #24]	; (3c28 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c10:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3c12:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c14:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3c16:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3c18:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    3c1a:	it	cc
    3c1c:	addcc	r0, #64	; 0x40
    3c1e:	subs	r0, r0, r3
}
    3c20:	bx	lr
    3c22:	nop
    3c24:	.word	0x1fff193c
    3c28:	.word	0x1fff193d

00003c2c <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    3c2c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    3c2e:	ldr	r3, [pc, #176]	; (3ce0 <lpuart0_status_isr+0xb4>)
    3c30:	ldr	r2, [r3, #4]
    3c32:	lsls	r4, r2, #10
    3c34:	bpl.n	3c76 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3c36:	ldr	r0, [pc, #172]	; (3ce4 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    3c38:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    3c3a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3c3c:	ldr	r1, [pc, #168]	; (3ce8 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3c3e:	adds	r3, #1
    3c40:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3c42:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3c44:	it	gt
    3c46:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3c48:	cmp	r3, r1
    3c4a:	beq.n	3c56 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3c4c:	ldr	r4, [pc, #156]	; (3cec <lpuart0_status_isr+0xc0>)
    3c4e:	uxtb	r2, r2
			rx_buffer_head = head;
    3c50:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3c52:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3c54:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3c56:	ldr	r2, [pc, #152]	; (3cf0 <lpuart0_status_isr+0xc4>)
    3c58:	ldr	r1, [r2, #0]
    3c5a:	cbz	r1, 3c76 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3c5c:	ldr	r2, [pc, #148]	; (3cf4 <lpuart0_status_isr+0xc8>)
    3c5e:	ldrb	r2, [r2, #0]
    3c60:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3c62:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3c64:	itet	cc
    3c66:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3c6a:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3c6c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3c6e:	cmp	r3, #39	; 0x27
    3c70:	itt	gt
    3c72:	movgt	r3, #1
    3c74:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    3c76:	ldr	r2, [pc, #104]	; (3ce0 <lpuart0_status_isr+0xb4>)
    3c78:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    3c7a:	lsls	r0, r3, #8
    3c7c:	bpl.n	3c84 <lpuart0_status_isr+0x58>
    3c7e:	ldr	r2, [r2, #4]
    3c80:	lsls	r1, r2, #8
    3c82:	bmi.n	3ca8 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    3c84:	lsls	r2, r3, #9
    3c86:	bpl.n	3ca4 <lpuart0_status_isr+0x78>
    3c88:	ldr	r3, [pc, #84]	; (3ce0 <lpuart0_status_isr+0xb4>)
    3c8a:	ldr	r3, [r3, #4]
    3c8c:	lsls	r3, r3, #9
    3c8e:	bpl.n	3ca4 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3c90:	ldr	r3, [pc, #100]	; (3cf8 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3c92:	ldr	r1, [pc, #104]	; (3cfc <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    3c94:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3c96:	movs	r2, #0
    3c98:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3c9a:	cbz	r3, 3c9e <lpuart0_status_isr+0x72>
    3c9c:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3c9e:	ldr	r3, [pc, #96]	; (3d00 <lpuart0_status_isr+0xd4>)
    3ca0:	movs	r2, #0
    3ca2:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    3ca4:	pop	{r4, r5}
    3ca6:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3ca8:	ldr	r2, [pc, #88]	; (3d04 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    3caa:	ldr	r1, [pc, #72]	; (3cf4 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3cac:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3cae:	ldrb	r2, [r1, #0]
    3cb0:	uxtb	r2, r2
		if (head == tail) {
    3cb2:	cmp	r0, r2
    3cb4:	beq.n	3cd2 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    3cb6:	adds	r2, #1
    3cb8:	cmp	r2, #39	; 0x27
    3cba:	itt	hi
    3cbc:	movhi	r0, #0
    3cbe:	movhi	r2, r0
			n = tx_buffer[tail];
    3cc0:	ldr	r5, [pc, #68]	; (3d08 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3cc2:	ldr	r4, [pc, #28]	; (3ce0 <lpuart0_status_isr+0xb4>)
    3cc4:	it	ls
    3cc6:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3cc8:	ldrb	r2, [r5, r2]
    3cca:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3ccc:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3cce:	strb	r0, [r1, #0]
    3cd0:	b.n	3c84 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3cd2:	ldr	r0, [pc, #56]	; (3d0c <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3cd4:	ldr	r2, [pc, #40]	; (3d00 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3cd6:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3cd8:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3cda:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3cdc:	str	r1, [r2, #0]
    3cde:	b.n	3c84 <lpuart0_status_isr+0x58>
    3ce0:	.word	0x400c4000
    3ce4:	.word	0x1fff193c
    3ce8:	.word	0x1fff193d
    3cec:	.word	0x1fff1968
    3cf0:	.word	0x1fff1938
    3cf4:	.word	0x1fff19a9
    3cf8:	.word	0x1fff19ac
    3cfc:	.word	0x1fff19a8
    3d00:	.word	0x43880158
    3d04:	.word	0x1fff19b0
    3d08:	.word	0x1fff1940
    3d0c:	.word	0x4388015c

00003d10 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3d10:	push	{r4, lr}
    3d12:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3d14:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    3d16:	bl	3a78 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3d1a:	ldr	r2, [pc, #96]	; (3d7c <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3d1c:	ldr	r3, [pc, #96]	; (3d80 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3d1e:	ldr	r1, [pc, #100]	; (3d84 <usb_init_serialnumber+0x74>)
    3d20:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3d22:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3d24:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3d26:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3d28:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3d2a:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3d2c:	ldrb	r3, [r2, #0]
    3d2e:	lsls	r3, r3, #24
    3d30:	bpl.n	3d2c <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    3d32:	ldr	r3, [pc, #84]	; (3d88 <usb_init_serialnumber+0x78>)
    3d34:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    3d36:	bl	3aac <kinetis_hsrun_enable>
#endif
	__enable_irq();
    3d3a:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3d3c:	ldr	r3, [pc, #76]	; (3d8c <usb_init_serialnumber+0x7c>)
    3d3e:	cmp	r4, r3
    3d40:	itt	ls
    3d42:	addls.w	r4, r4, r4, lsl #2
    3d46:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    3d48:	mov	r0, r4
    3d4a:	ldr	r4, [pc, #68]	; (3d90 <usb_init_serialnumber+0x80>)
    3d4c:	add	r1, sp, #4
    3d4e:	movs	r2, #10
    3d50:	bl	3d94 <ultoa>
    3d54:	add	r1, sp, #4
    3d56:	mov	r0, r4
	for (i=0; i<10; i++) {
    3d58:	movs	r3, #0
		char c = buf[i];
    3d5a:	ldrb.w	r2, [r1], #1
    3d5e:	adds	r3, #1
		if (!c) break;
    3d60:	cbz	r2, 3d72 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3d62:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3d64:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3d68:	bne.n	3d5a <usb_init_serialnumber+0x4a>
    3d6a:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3d6c:	strb	r3, [r4, #0]
}
    3d6e:	add	sp, #16
    3d70:	pop	{r4, pc}
    3d72:	lsls	r3, r3, #1
    3d74:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3d76:	strb	r3, [r4, #0]
}
    3d78:	add	sp, #16
    3d7a:	pop	{r4, pc}
    3d7c:	.word	0x40020004
    3d80:	.word	0x40020000
    3d84:	.word	0x41070000
    3d88:	.word	0x4002000c
    3d8c:	.word	0x0098967f
    3d90:	.word	0x1fff0d3c

00003d94 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3d94:	push	{r4, r5, r6, r7}
    3d96:	subs	r5, r1, #1
    3d98:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3d9a:	movs	r4, #0
    3d9c:	b.n	3da0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3d9e:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3da0:	udiv	r3, r0, r2
    3da4:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3da8:	cmp	r0, #9
    3daa:	add.w	r7, r0, #48	; 0x30
    3dae:	itet	hi
    3db0:	addhi	r0, #55	; 0x37
    3db2:	uxtbls	r0, r7
    3db4:	uxtbhi	r0, r0
    3db6:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3dba:	mov	r0, r3
    3dbc:	cmp	r3, #0
    3dbe:	bne.n	3d9e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3dc0:	adds	r2, r1, r4
    3dc2:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3dc4:	cbz	r4, 3dda <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    3dc6:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3dc8:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3dcc:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3dce:	adds	r3, #1
    3dd0:	subs	r0, r4, r3
    3dd2:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3dd4:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3dd8:	blt.n	3dc6 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3dda:	mov	r0, r1
    3ddc:	pop	{r4, r5, r6, r7}
    3dde:	bx	lr

00003de0 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3de0:	ldr	r2, [pc, #20]	; (3df8 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    3de2:	ldr	r3, [pc, #24]	; (3dfc <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3de4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3de6:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3de8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3dea:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3dec:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3dee:	it	cc
    3df0:	addcc	r0, #64	; 0x40
    3df2:	subs	r0, r0, r3
}
    3df4:	bx	lr
    3df6:	nop
    3df8:	.word	0x1fff19b8
    3dfc:	.word	0x1fff19b9

00003e00 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3e00:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    3e02:	ldr	r3, [pc, #172]	; (3eb0 <uart2_status_isr+0xb0>)
    3e04:	ldrb	r2, [r3, #4]
    3e06:	lsls	r4, r2, #26
    3e08:	bpl.n	3e4a <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3e0a:	ldr	r0, [pc, #168]	; (3eb4 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3e0c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3e0e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3e10:	ldr	r1, [pc, #164]	; (3eb8 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3e12:	adds	r3, #1
    3e14:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3e16:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3e18:	it	gt
    3e1a:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3e1c:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3e1e:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3e20:	beq.n	3e2a <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    3e22:	ldr	r4, [pc, #152]	; (3ebc <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    3e24:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3e26:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3e28:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3e2a:	ldr	r2, [pc, #148]	; (3ec0 <uart2_status_isr+0xc0>)
    3e2c:	ldr	r1, [r2, #0]
    3e2e:	cbz	r1, 3e4a <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3e30:	ldr	r2, [pc, #144]	; (3ec4 <uart2_status_isr+0xc4>)
    3e32:	ldrb	r2, [r2, #0]
    3e34:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3e36:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3e38:	itet	cc
    3e3a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3e3e:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3e40:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3e42:	cmp	r3, #39	; 0x27
    3e44:	itt	gt
    3e46:	movgt	r3, #1
    3e48:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    3e4a:	ldr	r2, [pc, #100]	; (3eb0 <uart2_status_isr+0xb0>)
    3e4c:	ldrb	r3, [r2, #3]
    3e4e:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3e50:	lsls	r0, r3, #24
    3e52:	bmi.n	3e78 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    3e54:	lsls	r2, r3, #25
    3e56:	bpl.n	3e74 <uart2_status_isr+0x74>
    3e58:	ldr	r3, [pc, #84]	; (3eb0 <uart2_status_isr+0xb0>)
    3e5a:	ldrb	r3, [r3, #4]
    3e5c:	lsls	r3, r3, #25
    3e5e:	bpl.n	3e74 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3e60:	ldr	r3, [pc, #100]	; (3ec8 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3e62:	ldr	r1, [pc, #104]	; (3ecc <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3e64:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3e66:	movs	r2, #0
    3e68:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3e6a:	cbz	r3, 3e6e <uart2_status_isr+0x6e>
    3e6c:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3e6e:	ldr	r3, [pc, #64]	; (3eb0 <uart2_status_isr+0xb0>)
    3e70:	movs	r2, #44	; 0x2c
    3e72:	strb	r2, [r3, #3]
	}
}
    3e74:	pop	{r4, r5}
    3e76:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3e78:	ldrb	r1, [r2, #4]
    3e7a:	lsls	r1, r1, #24
    3e7c:	bpl.n	3e54 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    3e7e:	ldr	r1, [pc, #80]	; (3ed0 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3e80:	ldr	r0, [pc, #64]	; (3ec4 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3e82:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3e84:	ldrb	r1, [r0, #0]
    3e86:	uxtb	r1, r1
		if (head == tail) {
    3e88:	cmp	r4, r1
    3e8a:	beq.n	3ea8 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3e8c:	adds	r2, r1, #1
    3e8e:	cmp	r2, #39	; 0x27
    3e90:	itt	hi
    3e92:	movhi	r1, #0
    3e94:	movhi	r2, r1
			n = tx_buffer[tail];
    3e96:	ldr	r5, [pc, #60]	; (3ed4 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3e98:	ldr	r4, [pc, #20]	; (3eb0 <uart2_status_isr+0xb0>)
    3e9a:	it	ls
    3e9c:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3e9e:	ldrb	r2, [r5, r2]
    3ea0:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3ea2:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3ea4:	strb	r1, [r0, #0]
    3ea6:	b.n	3e54 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    3ea8:	movs	r1, #108	; 0x6c
    3eaa:	strb	r1, [r2, #3]
    3eac:	b.n	3e54 <uart2_status_isr+0x54>
    3eae:	nop
    3eb0:	.word	0x4006c000
    3eb4:	.word	0x1fff19b8
    3eb8:	.word	0x1fff19b9
    3ebc:	.word	0x1fff19e4
    3ec0:	.word	0x1fff19b4
    3ec4:	.word	0x1fff1a25
    3ec8:	.word	0x1fff1a28
    3ecc:	.word	0x1fff1a24
    3ed0:	.word	0x1fff1a2c
    3ed4:	.word	0x1fff19bc

00003ed8 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    3ed8:	bx	lr
    3eda:	nop

00003edc <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    3edc:	bx	lr
    3ede:	nop

00003ee0 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    3ee0:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3ee2:	mrs	r2, PRIMASK
		__disable_irq();
    3ee6:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3ee8:	ldrb	r3, [r0, #29]
    3eea:	cbnz	r3, 3efa <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3eec:	ldrb	r1, [r0, #28]
    3eee:	cmp	r1, #1
    3ef0:	beq.n	3f04 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    3ef2:	cmp	r1, #3
    3ef4:	beq.n	3f18 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    3ef6:	movs	r3, #1
    3ef8:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3efa:	cbnz	r2, 3efe <EventResponder::triggerEventNotImmediate()+0x1e>
    3efc:	cpsie	i
	}
	enableInterrupts(irq);
}
    3efe:	ldr.w	r4, [sp], #4
    3f02:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3f04:	ldr	r4, [pc, #68]	; (3f4c <EventResponder::triggerEventNotImmediate()+0x6c>)
    3f06:	ldr	r1, [r4, #0]
    3f08:	cbz	r1, 3f34 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3f0a:	ldr	r1, [pc, #68]	; (3f50 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3f0c:	str	r3, [r0, #20]
				_prev = lastYield;
    3f0e:	ldr	r3, [r1, #0]
    3f10:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    3f12:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    3f14:	str	r0, [r3, #20]
    3f16:	b.n	3ef6 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3f18:	ldr	r4, [pc, #56]	; (3f54 <EventResponder::triggerEventNotImmediate()+0x74>)
    3f1a:	ldr	r1, [r4, #0]
    3f1c:	cbz	r1, 3f40 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3f1e:	ldr	r1, [pc, #56]	; (3f58 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3f20:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    3f22:	ldr	r3, [r1, #0]
    3f24:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    3f26:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    3f28:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3f2a:	ldr	r3, [pc, #48]	; (3f5c <EventResponder::triggerEventNotImmediate()+0x7c>)
    3f2c:	mov.w	r1, #268435456	; 0x10000000
    3f30:	str	r1, [r3, #0]
    3f32:	b.n	3ef6 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3f34:	ldr	r3, [pc, #24]	; (3f50 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    3f36:	str	r1, [r0, #20]
				_prev = nullptr;
    3f38:	str	r1, [r0, #24]
				firstYield = this;
    3f3a:	str	r0, [r4, #0]
				lastYield = this;
    3f3c:	str	r0, [r3, #0]
    3f3e:	b.n	3ef6 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3f40:	ldr	r3, [pc, #20]	; (3f58 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    3f42:	str	r1, [r0, #20]
				_prev = nullptr;
    3f44:	str	r1, [r0, #24]
				firstInterrupt = this;
    3f46:	str	r0, [r4, #0]
				lastInterrupt = this;
    3f48:	str	r0, [r3, #0]
    3f4a:	b.n	3f2a <EventResponder::triggerEventNotImmediate()+0x4a>
    3f4c:	.word	0x1fff1a40
    3f50:	.word	0x1fff1a3c
    3f54:	.word	0x1fff1a30
    3f58:	.word	0x1fff1a34
    3f5c:	.word	0xe000ed04

00003f60 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    3f60:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3f62:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3f64:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3f66:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3f68:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3f6a:	beq.n	3f74 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    3f6c:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3f70:	b.w	3ee0 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3f74:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    3f76:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3f7a:	bx	r3

00003f7c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3f7c:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3f7e:	mrs	r2, PRIMASK
		__disable_irq();
    3f82:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3f84:	ldr	r4, [pc, #48]	; (3fb8 <EventResponder::runFromInterrupt()+0x3c>)
    3f86:	ldr	r0, [r4, #0]
		if (first) {
    3f88:	cbz	r0, 3fac <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3f8a:	ldr	r6, [pc, #48]	; (3fbc <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3f8c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3f8e:	ldr	r3, [r0, #20]
    3f90:	str	r3, [r4, #0]
			if (firstInterrupt) {
    3f92:	cbz	r3, 3fb2 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    3f94:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3f96:	cbnz	r2, 3f9a <EventResponder::runFromInterrupt()+0x1e>
    3f98:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3f9a:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3f9c:	ldr	r3, [r0, #8]
    3f9e:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3fa0:	mrs	r2, PRIMASK
		__disable_irq();
    3fa4:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3fa6:	ldr	r0, [r4, #0]
		if (first) {
    3fa8:	cmp	r0, #0
    3faa:	bne.n	3f8e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3fac:	cbnz	r2, 3fb0 <EventResponder::runFromInterrupt()+0x34>
    3fae:	cpsie	i
    3fb0:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3fb2:	str	r3, [r6, #0]
    3fb4:	b.n	3f96 <EventResponder::runFromInterrupt()+0x1a>
    3fb6:	nop
    3fb8:	.word	0x1fff1a30
    3fbc:	.word	0x1fff1a34

00003fc0 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3fc0:	b.w	3f7c <EventResponder::runFromInterrupt()>

00003fc4 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    3fc4:	ldr	r2, [pc, #96]	; (4028 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    3fc6:	push	{r4, r5}
	if (listActive == nullptr) {
    3fc8:	ldr	r4, [r2, #0]
    3fca:	cmp	r4, #0
    3fcc:	beq.n	401e <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    3fce:	ldr	r3, [r0, #0]
    3fd0:	ldr	r1, [r4, #0]
    3fd2:	cmp	r3, r1
    3fd4:	bcs.n	3ff4 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3fd6:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    3fd8:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    3fda:	str	r4, [r0, #8]
		_prev = nullptr;
    3fdc:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3fde:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    3fe0:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    3fe2:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3fe4:	movs	r3, #2
    3fe6:	strb	r3, [r0, #20]
}
    3fe8:	pop	{r4, r5}
    3fea:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    3fec:	ldr	r1, [r2, #0]
    3fee:	cmp	r3, r1
    3ff0:	mov	r4, r2
    3ff2:	bcc.n	4006 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3ff4:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    3ff6:	subs	r3, r3, r1
    3ff8:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3ffa:	cmp	r2, #0
    3ffc:	bne.n	3fec <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    3ffe:	str	r2, [r0, #8]
		_prev = timer;
    4000:	str	r4, [r0, #12]
		timer->_next = this;
    4002:	str	r0, [r4, #8]
    4004:	b.n	3fe4 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    4006:	ldr	r2, [r2, #12]
    4008:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    400a:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    400c:	str	r0, [r4, #12]
				_prev->_next = this;
    400e:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    4010:	subs	r3, r1, r3
				_state = TimerActive;
    4012:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    4014:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    4016:	str	r3, [r4, #0]
				_state = TimerActive;
    4018:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    401a:	pop	{r4, r5}
    401c:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    401e:	str	r4, [r0, #8]
		_prev = nullptr;
    4020:	str	r4, [r0, #12]
		listActive = this;
    4022:	str	r0, [r2, #0]
    4024:	b.n	3fe4 <MillisTimer::addToActiveList()+0x20>
    4026:	nop
    4028:	.word	0x1fff1a38

0000402c <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    402c:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    402e:	ldr	r6, [pc, #136]	; (40b8 <MillisTimer::runFromTimer()+0x8c>)
    4030:	ldr	r4, [r6, #0]
	while (timer) {
    4032:	cbz	r4, 4080 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4034:	ldr	r3, [r4, #0]
    4036:	cmp	r3, #0
    4038:	bne.n	40b0 <MillisTimer::runFromTimer()+0x84>
    403a:	ldr	r7, [pc, #128]	; (40bc <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    403c:	mov	r5, r3
    403e:	b.n	404a <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    4040:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4042:	cbz	r4, 4080 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4044:	ldr	r3, [r4, #0]
    4046:	cmp	r3, #0
    4048:	bne.n	40b0 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    404a:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    404c:	cbz	r3, 4050 <MillisTimer::runFromTimer()+0x24>
    404e:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    4050:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    4052:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4054:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    4056:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4058:	ldr	r3, [r3, #0]
    405a:	cmp	r3, r7
    405c:	bne.n	40a2 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    405e:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4060:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4062:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4064:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    4066:	beq.n	40aa <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4068:	bl	3ee0 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    406c:	ldr	r3, [r4, #4]
    406e:	cmp	r3, #0
    4070:	beq.n	4040 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    4072:	str	r3, [r4, #0]
				timer->addToActiveList();
    4074:	mov	r0, r4
    4076:	bl	3fc4 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    407a:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    407c:	cmp	r4, #0
    407e:	bne.n	4044 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4080:	mrs	r3, PRIMASK
		__disable_irq();
    4084:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4086:	ldr	r2, [pc, #56]	; (40c0 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4088:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    408a:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    408c:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    408e:	cbnz	r3, 4092 <MillisTimer::runFromTimer()+0x66>
    4090:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    4092:	cbz	r0, 40a0 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4094:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    4096:	bl	3fc4 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    409a:	mov	r0, r4
    409c:	cmp	r0, #0
    409e:	bne.n	4094 <MillisTimer::runFromTimer()+0x68>
    40a0:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    40a2:	mov	r2, r4
    40a4:	movs	r1, #0
    40a6:	blx	r3
    40a8:	b.n	406c <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    40aa:	ldr	r3, [r0, #8]
    40ac:	blx	r3
    40ae:	b.n	406c <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    40b0:	subs	r3, #1
    40b2:	str	r3, [r4, #0]
			break;
    40b4:	b.n	4080 <MillisTimer::runFromTimer()+0x54>
    40b6:	nop
    40b8:	.word	0x1fff1a38
    40bc:	.word	0x00003f61
    40c0:	.word	0x1fff1a48

000040c4 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    40c4:	ldr	r2, [pc, #8]	; (40d0 <systick_isr+0xc>)
    40c6:	ldr	r3, [r2, #0]
    40c8:	adds	r3, #1
    40ca:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    40cc:	b.w	402c <MillisTimer::runFromTimer()>
    40d0:	.word	0x1fff15cc

000040d4 <__errno>:
    40d4:	ldr	r3, [pc, #4]	; (40dc <__errno+0x8>)
    40d6:	ldr	r0, [r3, #0]
    40d8:	bx	lr
    40da:	nop
    40dc:	.word	0x1fff1180

000040e0 <__libc_init_array>:
    40e0:	push	{r4, r5, r6, lr}
    40e2:	ldr	r6, [pc, #60]	; (4120 <__libc_init_array+0x40>)
    40e4:	ldr	r5, [pc, #60]	; (4124 <__libc_init_array+0x44>)
    40e6:	subs	r6, r6, r5
    40e8:	asrs	r6, r6, #2
    40ea:	it	ne
    40ec:	movne	r4, #0
    40ee:	beq.n	40fc <__libc_init_array+0x1c>
    40f0:	adds	r4, #1
    40f2:	ldr.w	r3, [r5], #4
    40f6:	blx	r3
    40f8:	cmp	r6, r4
    40fa:	bne.n	40f0 <__libc_init_array+0x10>
    40fc:	ldr	r6, [pc, #40]	; (4128 <__libc_init_array+0x48>)
    40fe:	ldr	r5, [pc, #44]	; (412c <__libc_init_array+0x4c>)
    4100:	subs	r6, r6, r5
    4102:	bl	4f60 <_init>
    4106:	asrs	r6, r6, #2
    4108:	it	ne
    410a:	movne	r4, #0
    410c:	beq.n	411c <__libc_init_array+0x3c>
    410e:	adds	r4, #1
    4110:	ldr.w	r3, [r5], #4
    4114:	blx	r3
    4116:	cmp	r6, r4
    4118:	bne.n	410e <__libc_init_array+0x2e>
    411a:	pop	{r4, r5, r6, pc}
    411c:	pop	{r4, r5, r6, pc}
    411e:	nop
    4120:	.word	0x00004f6c
    4124:	.word	0x00004f6c
    4128:	.word	0x00004f78
    412c:	.word	0x00004f6c

00004130 <malloc>:
    4130:	ldr	r3, [pc, #8]	; (413c <malloc+0xc>)
    4132:	mov	r1, r0
    4134:	ldr	r0, [r3, #0]
    4136:	b.w	4140 <_malloc_r>
    413a:	nop
    413c:	.word	0x1fff1180

00004140 <_malloc_r>:
    4140:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4144:	add.w	r5, r1, #11
    4148:	cmp	r5, #22
    414a:	sub	sp, #12
    414c:	mov	r6, r0
    414e:	bls.w	4290 <_malloc_r+0x150>
    4152:	bics.w	r5, r5, #7
    4156:	bmi.w	42d8 <_malloc_r+0x198>
    415a:	cmp	r1, r5
    415c:	bhi.w	42d8 <_malloc_r+0x198>
    4160:	bl	474c <__malloc_lock>
    4164:	cmp.w	r5, #504	; 0x1f8
    4168:	bcc.w	46a4 <_malloc_r+0x564>
    416c:	lsrs	r3, r5, #9
    416e:	beq.w	42e6 <_malloc_r+0x1a6>
    4172:	cmp	r3, #4
    4174:	bhi.w	447e <_malloc_r+0x33e>
    4178:	lsrs	r0, r5, #6
    417a:	add.w	lr, r0, #57	; 0x39
    417e:	mov.w	r3, lr, lsl #1
    4182:	adds	r0, #56	; 0x38
    4184:	ldr	r7, [pc, #784]	; (4498 <_malloc_r+0x358>)
    4186:	add.w	r3, r7, r3, lsl #2
    418a:	sub.w	r1, r3, #8
    418e:	ldr	r4, [r3, #4]
    4190:	cmp	r1, r4
    4192:	bne.n	41a4 <_malloc_r+0x64>
    4194:	b.n	42f0 <_malloc_r+0x1b0>
    4196:	cmp	r2, #0
    4198:	bge.w	42f4 <_malloc_r+0x1b4>
    419c:	ldr	r4, [r4, #12]
    419e:	cmp	r1, r4
    41a0:	beq.w	42f0 <_malloc_r+0x1b0>
    41a4:	ldr	r3, [r4, #4]
    41a6:	bic.w	r3, r3, #3
    41aa:	subs	r2, r3, r5
    41ac:	cmp	r2, #15
    41ae:	ble.n	4196 <_malloc_r+0x56>
    41b0:	ldr	r1, [pc, #740]	; (4498 <_malloc_r+0x358>)
    41b2:	ldr	r4, [r7, #16]
    41b4:	add.w	lr, r1, #8
    41b8:	cmp	r4, lr
    41ba:	beq.w	4524 <_malloc_r+0x3e4>
    41be:	ldr	r3, [r4, #4]
    41c0:	bic.w	r3, r3, #3
    41c4:	subs	r2, r3, r5
    41c6:	cmp	r2, #15
    41c8:	bgt.w	44fe <_malloc_r+0x3be>
    41cc:	cmp	r2, #0
    41ce:	str.w	lr, [r1, #20]
    41d2:	str.w	lr, [r1, #16]
    41d6:	bge.w	4316 <_malloc_r+0x1d6>
    41da:	cmp.w	r3, #512	; 0x200
    41de:	bcs.w	44b0 <_malloc_r+0x370>
    41e2:	lsrs	r3, r3, #3
    41e4:	add.w	ip, r3, #1
    41e8:	movs	r2, #1
    41ea:	asrs	r3, r3, #2
    41ec:	lsl.w	r3, r2, r3
    41f0:	ldr	r2, [r1, #4]
    41f2:	ldr.w	r8, [r1, ip, lsl #3]
    41f6:	str.w	r8, [r4, #8]
    41fa:	add.w	r9, r1, ip, lsl #3
    41fe:	orrs	r2, r3
    4200:	sub.w	r3, r9, #8
    4204:	str	r3, [r4, #12]
    4206:	str	r2, [r1, #4]
    4208:	str.w	r4, [r1, ip, lsl #3]
    420c:	str.w	r4, [r8, #12]
    4210:	asrs	r3, r0, #2
    4212:	movs	r4, #1
    4214:	lsls	r4, r3
    4216:	cmp	r4, r2
    4218:	bhi.w	4330 <_malloc_r+0x1f0>
    421c:	tst	r4, r2
    421e:	bne.n	422e <_malloc_r+0xee>
    4220:	bic.w	r0, r0, #3
    4224:	lsls	r4, r4, #1
    4226:	tst	r4, r2
    4228:	add.w	r0, r0, #4
    422c:	beq.n	4224 <_malloc_r+0xe4>
    422e:	add.w	r9, r7, r0, lsl #3
    4232:	mov	ip, r9
    4234:	mov	r8, r0
    4236:	ldr.w	r1, [ip, #12]
    423a:	cmp	ip, r1
    423c:	bne.n	424e <_malloc_r+0x10e>
    423e:	b.n	4528 <_malloc_r+0x3e8>
    4240:	cmp	r2, #0
    4242:	bge.w	4548 <_malloc_r+0x408>
    4246:	ldr	r1, [r1, #12]
    4248:	cmp	ip, r1
    424a:	beq.w	4528 <_malloc_r+0x3e8>
    424e:	ldr	r3, [r1, #4]
    4250:	bic.w	r3, r3, #3
    4254:	subs	r2, r3, r5
    4256:	cmp	r2, #15
    4258:	ble.n	4240 <_malloc_r+0x100>
    425a:	mov	r4, r1
    425c:	ldr.w	ip, [r1, #12]
    4260:	ldr.w	r8, [r4, #8]!
    4264:	adds	r3, r1, r5
    4266:	orr.w	r5, r5, #1
    426a:	str	r5, [r1, #4]
    426c:	orr.w	r1, r2, #1
    4270:	str.w	ip, [r8, #12]
    4274:	mov	r0, r6
    4276:	str.w	r8, [ip, #8]
    427a:	str	r3, [r7, #20]
    427c:	str	r3, [r7, #16]
    427e:	str.w	lr, [r3, #12]
    4282:	str.w	lr, [r3, #8]
    4286:	str	r1, [r3, #4]
    4288:	str	r2, [r3, r2]
    428a:	bl	4750 <__malloc_unlock>
    428e:	b.n	42d0 <_malloc_r+0x190>
    4290:	cmp	r1, #16
    4292:	bhi.n	42d8 <_malloc_r+0x198>
    4294:	bl	474c <__malloc_lock>
    4298:	movs	r5, #16
    429a:	movs	r3, #6
    429c:	movs	r0, #2
    429e:	ldr	r7, [pc, #504]	; (4498 <_malloc_r+0x358>)
    42a0:	add.w	r3, r7, r3, lsl #2
    42a4:	sub.w	r2, r3, #8
    42a8:	ldr	r4, [r3, #4]
    42aa:	cmp	r4, r2
    42ac:	beq.w	453a <_malloc_r+0x3fa>
    42b0:	ldr	r3, [r4, #4]
    42b2:	ldr	r1, [r4, #12]
    42b4:	ldr	r5, [r4, #8]
    42b6:	bic.w	r3, r3, #3
    42ba:	add	r3, r4
    42bc:	mov	r0, r6
    42be:	ldr	r2, [r3, #4]
    42c0:	str	r1, [r5, #12]
    42c2:	orr.w	r2, r2, #1
    42c6:	str	r5, [r1, #8]
    42c8:	str	r2, [r3, #4]
    42ca:	bl	4750 <__malloc_unlock>
    42ce:	adds	r4, #8
    42d0:	mov	r0, r4
    42d2:	add	sp, #12
    42d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42d8:	movs	r4, #0
    42da:	movs	r3, #12
    42dc:	mov	r0, r4
    42de:	str	r3, [r6, #0]
    42e0:	add	sp, #12
    42e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42e6:	movs	r3, #128	; 0x80
    42e8:	mov.w	lr, #64	; 0x40
    42ec:	movs	r0, #63	; 0x3f
    42ee:	b.n	4184 <_malloc_r+0x44>
    42f0:	mov	r0, lr
    42f2:	b.n	41b0 <_malloc_r+0x70>
    42f4:	add	r3, r4
    42f6:	ldr	r1, [r4, #12]
    42f8:	ldr	r2, [r3, #4]
    42fa:	ldr	r5, [r4, #8]
    42fc:	orr.w	r2, r2, #1
    4300:	str	r1, [r5, #12]
    4302:	mov	r0, r6
    4304:	str	r5, [r1, #8]
    4306:	str	r2, [r3, #4]
    4308:	bl	4750 <__malloc_unlock>
    430c:	adds	r4, #8
    430e:	mov	r0, r4
    4310:	add	sp, #12
    4312:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4316:	add	r3, r4
    4318:	mov	r0, r6
    431a:	ldr	r2, [r3, #4]
    431c:	orr.w	r2, r2, #1
    4320:	str	r2, [r3, #4]
    4322:	bl	4750 <__malloc_unlock>
    4326:	adds	r4, #8
    4328:	mov	r0, r4
    432a:	add	sp, #12
    432c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4330:	ldr	r4, [r7, #8]
    4332:	ldr	r3, [r4, #4]
    4334:	bic.w	r8, r3, #3
    4338:	cmp	r8, r5
    433a:	bcc.n	4346 <_malloc_r+0x206>
    433c:	rsb	r3, r5, r8
    4340:	cmp	r3, #15
    4342:	bgt.w	445e <_malloc_r+0x31e>
    4346:	ldr	r3, [pc, #340]	; (449c <_malloc_r+0x35c>)
    4348:	ldr.w	r9, [pc, #352]	; 44ac <_malloc_r+0x36c>
    434c:	ldr	r2, [r3, #0]
    434e:	ldr.w	r3, [r9]
    4352:	adds	r3, #1
    4354:	add	r2, r5
    4356:	add.w	sl, r4, r8
    435a:	beq.w	461e <_malloc_r+0x4de>
    435e:	add.w	r2, r2, #4096	; 0x1000
    4362:	adds	r2, #15
    4364:	bic.w	r2, r2, #4080	; 0xff0
    4368:	bic.w	r2, r2, #15
    436c:	mov	r1, r2
    436e:	mov	r0, r6
    4370:	str	r2, [sp, #4]
    4372:	bl	4754 <_sbrk_r>
    4376:	cmp.w	r0, #4294967295
    437a:	mov	fp, r0
    437c:	ldr	r2, [sp, #4]
    437e:	beq.w	4632 <_malloc_r+0x4f2>
    4382:	cmp	sl, r0
    4384:	bhi.w	4580 <_malloc_r+0x440>
    4388:	ldr	r3, [pc, #276]	; (44a0 <_malloc_r+0x360>)
    438a:	ldr	r1, [r3, #0]
    438c:	cmp	sl, fp
    438e:	add	r1, r2
    4390:	str	r1, [r3, #0]
    4392:	beq.w	463c <_malloc_r+0x4fc>
    4396:	ldr.w	r0, [r9]
    439a:	ldr.w	lr, [pc, #272]	; 44ac <_malloc_r+0x36c>
    439e:	adds	r0, #1
    43a0:	ittet	ne
    43a2:	rsbne	sl, sl, fp
    43a6:	addne	r1, sl
    43a8:	streq.w	fp, [lr]
    43ac:	strne	r1, [r3, #0]
    43ae:	ands.w	r1, fp, #7
    43b2:	beq.w	45e4 <_malloc_r+0x4a4>
    43b6:	rsb	r0, r1, #8
    43ba:	rsb	r1, r1, #4096	; 0x1000
    43be:	add	fp, r0
    43c0:	adds	r1, #8
    43c2:	add	r2, fp
    43c4:	ubfx	r2, r2, #0, #12
    43c8:	rsb	r9, r2, r1
    43cc:	mov	r1, r9
    43ce:	mov	r0, r6
    43d0:	str	r3, [sp, #4]
    43d2:	bl	4754 <_sbrk_r>
    43d6:	adds	r3, r0, #1
    43d8:	ldr	r3, [sp, #4]
    43da:	beq.w	465c <_malloc_r+0x51c>
    43de:	rsb	r2, fp, r0
    43e2:	add	r2, r9
    43e4:	orr.w	r2, r2, #1
    43e8:	ldr	r1, [r3, #0]
    43ea:	str.w	fp, [r7, #8]
    43ee:	add	r1, r9
    43f0:	cmp	r4, r7
    43f2:	str.w	r2, [fp, #4]
    43f6:	str	r1, [r3, #0]
    43f8:	ldr.w	r9, [pc, #164]	; 44a0 <_malloc_r+0x360>
    43fc:	beq.n	442c <_malloc_r+0x2ec>
    43fe:	cmp.w	r8, #15
    4402:	bls.w	4600 <_malloc_r+0x4c0>
    4406:	ldr	r2, [r4, #4]
    4408:	sub.w	r3, r8, #12
    440c:	bic.w	r3, r3, #7
    4410:	adds	r0, r4, r3
    4412:	and.w	r2, r2, #1
    4416:	mov.w	lr, #5
    441a:	orrs	r2, r3
    441c:	cmp	r3, #15
    441e:	str	r2, [r4, #4]
    4420:	str.w	lr, [r0, #4]
    4424:	str.w	lr, [r0, #8]
    4428:	bhi.w	4664 <_malloc_r+0x524>
    442c:	ldr	r3, [pc, #116]	; (44a4 <_malloc_r+0x364>)
    442e:	ldr	r4, [r7, #8]
    4430:	ldr	r2, [r3, #0]
    4432:	cmp	r1, r2
    4434:	it	hi
    4436:	strhi	r1, [r3, #0]
    4438:	ldr	r3, [pc, #108]	; (44a8 <_malloc_r+0x368>)
    443a:	ldr	r2, [r3, #0]
    443c:	cmp	r1, r2
    443e:	ldr	r2, [r4, #4]
    4440:	it	hi
    4442:	strhi	r1, [r3, #0]
    4444:	bic.w	r2, r2, #3
    4448:	cmp	r5, r2
    444a:	sub.w	r3, r2, r5
    444e:	bhi.n	4454 <_malloc_r+0x314>
    4450:	cmp	r3, #15
    4452:	bgt.n	445e <_malloc_r+0x31e>
    4454:	mov	r0, r6
    4456:	bl	4750 <__malloc_unlock>
    445a:	movs	r4, #0
    445c:	b.n	42d0 <_malloc_r+0x190>
    445e:	adds	r2, r4, r5
    4460:	orr.w	r3, r3, #1
    4464:	orr.w	r5, r5, #1
    4468:	str	r5, [r4, #4]
    446a:	mov	r0, r6
    446c:	str	r2, [r7, #8]
    446e:	str	r3, [r2, #4]
    4470:	bl	4750 <__malloc_unlock>
    4474:	adds	r4, #8
    4476:	mov	r0, r4
    4478:	add	sp, #12
    447a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    447e:	cmp	r3, #20
    4480:	bls.n	4566 <_malloc_r+0x426>
    4482:	cmp	r3, #84	; 0x54
    4484:	bhi.w	45d0 <_malloc_r+0x490>
    4488:	lsrs	r0, r5, #12
    448a:	add.w	lr, r0, #111	; 0x6f
    448e:	mov.w	r3, lr, lsl #1
    4492:	adds	r0, #110	; 0x6e
    4494:	b.n	4184 <_malloc_r+0x44>
    4496:	nop
    4498:	.word	0x1fff1184
    449c:	.word	0x1fff1a54
    44a0:	.word	0x1fff1a58
    44a4:	.word	0x1fff1a50
    44a8:	.word	0x1fff1a4c
    44ac:	.word	0x1fff1590
    44b0:	lsrs	r2, r3, #9
    44b2:	cmp	r2, #4
    44b4:	bls.n	4574 <_malloc_r+0x434>
    44b6:	cmp	r2, #20
    44b8:	bhi.w	4622 <_malloc_r+0x4e2>
    44bc:	add.w	r1, r2, #92	; 0x5c
    44c0:	lsls	r1, r1, #1
    44c2:	adds	r2, #91	; 0x5b
    44c4:	add.w	ip, r7, r1, lsl #2
    44c8:	ldr.w	r1, [r7, r1, lsl #2]
    44cc:	ldr.w	r8, [pc, #476]	; 46ac <_malloc_r+0x56c>
    44d0:	sub.w	ip, ip, #8
    44d4:	cmp	ip, r1
    44d6:	beq.w	45ea <_malloc_r+0x4aa>
    44da:	ldr	r2, [r1, #4]
    44dc:	bic.w	r2, r2, #3
    44e0:	cmp	r3, r2
    44e2:	bcs.n	44ea <_malloc_r+0x3aa>
    44e4:	ldr	r1, [r1, #8]
    44e6:	cmp	ip, r1
    44e8:	bne.n	44da <_malloc_r+0x39a>
    44ea:	ldr.w	ip, [r1, #12]
    44ee:	ldr	r2, [r7, #4]
    44f0:	str.w	ip, [r4, #12]
    44f4:	str	r1, [r4, #8]
    44f6:	str.w	r4, [ip, #8]
    44fa:	str	r4, [r1, #12]
    44fc:	b.n	4210 <_malloc_r+0xd0>
    44fe:	adds	r3, r4, r5
    4500:	orr.w	r7, r2, #1
    4504:	orr.w	r5, r5, #1
    4508:	str	r5, [r4, #4]
    450a:	mov	r0, r6
    450c:	str	r3, [r1, #20]
    450e:	str	r3, [r1, #16]
    4510:	str.w	lr, [r3, #12]
    4514:	str.w	lr, [r3, #8]
    4518:	str	r7, [r3, #4]
    451a:	str	r2, [r3, r2]
    451c:	adds	r4, #8
    451e:	bl	4750 <__malloc_unlock>
    4522:	b.n	42d0 <_malloc_r+0x190>
    4524:	ldr	r2, [r1, #4]
    4526:	b.n	4210 <_malloc_r+0xd0>
    4528:	add.w	r8, r8, #1
    452c:	tst.w	r8, #3
    4530:	add.w	ip, ip, #8
    4534:	bne.w	4236 <_malloc_r+0xf6>
    4538:	b.n	459c <_malloc_r+0x45c>
    453a:	ldr	r4, [r3, #12]
    453c:	cmp	r3, r4
    453e:	it	eq
    4540:	addeq	r0, #2
    4542:	beq.w	41b0 <_malloc_r+0x70>
    4546:	b.n	42b0 <_malloc_r+0x170>
    4548:	add	r3, r1
    454a:	mov	r4, r1
    454c:	ldr	r2, [r3, #4]
    454e:	ldr	r1, [r1, #12]
    4550:	ldr.w	r5, [r4, #8]!
    4554:	orr.w	r2, r2, #1
    4558:	str	r2, [r3, #4]
    455a:	mov	r0, r6
    455c:	str	r1, [r5, #12]
    455e:	str	r5, [r1, #8]
    4560:	bl	4750 <__malloc_unlock>
    4564:	b.n	42d0 <_malloc_r+0x190>
    4566:	add.w	lr, r3, #92	; 0x5c
    456a:	add.w	r0, r3, #91	; 0x5b
    456e:	mov.w	r3, lr, lsl #1
    4572:	b.n	4184 <_malloc_r+0x44>
    4574:	lsrs	r2, r3, #6
    4576:	add.w	r1, r2, #57	; 0x39
    457a:	lsls	r1, r1, #1
    457c:	adds	r2, #56	; 0x38
    457e:	b.n	44c4 <_malloc_r+0x384>
    4580:	cmp	r4, r7
    4582:	ldr	r3, [pc, #296]	; (46ac <_malloc_r+0x56c>)
    4584:	beq.w	4388 <_malloc_r+0x248>
    4588:	ldr	r4, [r3, #8]
    458a:	ldr	r2, [r4, #4]
    458c:	bic.w	r2, r2, #3
    4590:	b.n	4448 <_malloc_r+0x308>
    4592:	ldr.w	r3, [r9], #-8
    4596:	cmp	r9, r3
    4598:	bne.w	46a0 <_malloc_r+0x560>
    459c:	tst.w	r0, #3
    45a0:	add.w	r0, r0, #4294967295
    45a4:	bne.n	4592 <_malloc_r+0x452>
    45a6:	ldr	r3, [r7, #4]
    45a8:	bic.w	r3, r3, r4
    45ac:	str	r3, [r7, #4]
    45ae:	lsls	r4, r4, #1
    45b0:	cmp	r4, r3
    45b2:	bhi.w	4330 <_malloc_r+0x1f0>
    45b6:	cmp	r4, #0
    45b8:	beq.w	4330 <_malloc_r+0x1f0>
    45bc:	tst	r4, r3
    45be:	mov	r0, r8
    45c0:	bne.w	422e <_malloc_r+0xee>
    45c4:	lsls	r4, r4, #1
    45c6:	tst	r4, r3
    45c8:	add.w	r0, r0, #4
    45cc:	beq.n	45c4 <_malloc_r+0x484>
    45ce:	b.n	422e <_malloc_r+0xee>
    45d0:	cmp.w	r3, #340	; 0x154
    45d4:	bhi.n	4608 <_malloc_r+0x4c8>
    45d6:	lsrs	r0, r5, #15
    45d8:	add.w	lr, r0, #120	; 0x78
    45dc:	mov.w	r3, lr, lsl #1
    45e0:	adds	r0, #119	; 0x77
    45e2:	b.n	4184 <_malloc_r+0x44>
    45e4:	mov.w	r1, #4096	; 0x1000
    45e8:	b.n	43c2 <_malloc_r+0x282>
    45ea:	movs	r1, #1
    45ec:	ldr.w	r3, [r8, #4]
    45f0:	asrs	r2, r2, #2
    45f2:	lsl.w	r2, r1, r2
    45f6:	orrs	r2, r3
    45f8:	str.w	r2, [r8, #4]
    45fc:	mov	r1, ip
    45fe:	b.n	44f0 <_malloc_r+0x3b0>
    4600:	movs	r3, #1
    4602:	str.w	r3, [fp, #4]
    4606:	b.n	4454 <_malloc_r+0x314>
    4608:	movw	r2, #1364	; 0x554
    460c:	cmp	r3, r2
    460e:	bhi.n	4652 <_malloc_r+0x512>
    4610:	lsrs	r0, r5, #18
    4612:	add.w	lr, r0, #125	; 0x7d
    4616:	mov.w	r3, lr, lsl #1
    461a:	adds	r0, #124	; 0x7c
    461c:	b.n	4184 <_malloc_r+0x44>
    461e:	adds	r2, #16
    4620:	b.n	436c <_malloc_r+0x22c>
    4622:	cmp	r2, #84	; 0x54
    4624:	bhi.n	4674 <_malloc_r+0x534>
    4626:	lsrs	r2, r3, #12
    4628:	add.w	r1, r2, #111	; 0x6f
    462c:	lsls	r1, r1, #1
    462e:	adds	r2, #110	; 0x6e
    4630:	b.n	44c4 <_malloc_r+0x384>
    4632:	ldr	r4, [r7, #8]
    4634:	ldr	r2, [r4, #4]
    4636:	bic.w	r2, r2, #3
    463a:	b.n	4448 <_malloc_r+0x308>
    463c:	ubfx	r0, sl, #0, #12
    4640:	cmp	r0, #0
    4642:	bne.w	4396 <_malloc_r+0x256>
    4646:	add	r2, r8
    4648:	ldr	r3, [r7, #8]
    464a:	orr.w	r2, r2, #1
    464e:	str	r2, [r3, #4]
    4650:	b.n	442c <_malloc_r+0x2ec>
    4652:	movs	r3, #254	; 0xfe
    4654:	mov.w	lr, #127	; 0x7f
    4658:	movs	r0, #126	; 0x7e
    465a:	b.n	4184 <_malloc_r+0x44>
    465c:	movs	r2, #1
    465e:	mov.w	r9, #0
    4662:	b.n	43e8 <_malloc_r+0x2a8>
    4664:	add.w	r1, r4, #8
    4668:	mov	r0, r6
    466a:	bl	485c <_free_r>
    466e:	ldr.w	r1, [r9]
    4672:	b.n	442c <_malloc_r+0x2ec>
    4674:	cmp.w	r2, #340	; 0x154
    4678:	bhi.n	4686 <_malloc_r+0x546>
    467a:	lsrs	r2, r3, #15
    467c:	add.w	r1, r2, #120	; 0x78
    4680:	lsls	r1, r1, #1
    4682:	adds	r2, #119	; 0x77
    4684:	b.n	44c4 <_malloc_r+0x384>
    4686:	movw	r1, #1364	; 0x554
    468a:	cmp	r2, r1
    468c:	bhi.n	469a <_malloc_r+0x55a>
    468e:	lsrs	r2, r3, #18
    4690:	add.w	r1, r2, #125	; 0x7d
    4694:	lsls	r1, r1, #1
    4696:	adds	r2, #124	; 0x7c
    4698:	b.n	44c4 <_malloc_r+0x384>
    469a:	movs	r1, #254	; 0xfe
    469c:	movs	r2, #126	; 0x7e
    469e:	b.n	44c4 <_malloc_r+0x384>
    46a0:	ldr	r3, [r7, #4]
    46a2:	b.n	45ae <_malloc_r+0x46e>
    46a4:	lsrs	r0, r5, #3
    46a6:	adds	r3, r0, #1
    46a8:	lsls	r3, r3, #1
    46aa:	b.n	429e <_malloc_r+0x15e>
    46ac:	.word	0x1fff1184

000046b0 <memset>:
    46b0:	push	{r4, r5, r6}
    46b2:	lsls	r4, r0, #30
    46b4:	beq.n	4744 <memset+0x94>
    46b6:	subs	r4, r2, #1
    46b8:	cmp	r2, #0
    46ba:	beq.n	4740 <memset+0x90>
    46bc:	uxtb	r5, r1
    46be:	mov	r3, r0
    46c0:	b.n	46c8 <memset+0x18>
    46c2:	subs	r2, r4, #1
    46c4:	cbz	r4, 4740 <memset+0x90>
    46c6:	mov	r4, r2
    46c8:	strb.w	r5, [r3], #1
    46cc:	lsls	r2, r3, #30
    46ce:	bne.n	46c2 <memset+0x12>
    46d0:	cmp	r4, #3
    46d2:	bls.n	4732 <memset+0x82>
    46d4:	uxtb	r5, r1
    46d6:	orr.w	r5, r5, r5, lsl #8
    46da:	cmp	r4, #15
    46dc:	orr.w	r5, r5, r5, lsl #16
    46e0:	bls.n	4716 <memset+0x66>
    46e2:	add.w	r2, r3, #16
    46e6:	mov	r6, r4
    46e8:	subs	r6, #16
    46ea:	cmp	r6, #15
    46ec:	str.w	r5, [r2, #-16]
    46f0:	str.w	r5, [r2, #-12]
    46f4:	str.w	r5, [r2, #-8]
    46f8:	str.w	r5, [r2, #-4]
    46fc:	add.w	r2, r2, #16
    4700:	bhi.n	46e8 <memset+0x38>
    4702:	sub.w	r2, r4, #16
    4706:	bic.w	r2, r2, #15
    470a:	and.w	r4, r4, #15
    470e:	adds	r2, #16
    4710:	cmp	r4, #3
    4712:	add	r3, r2
    4714:	bls.n	4732 <memset+0x82>
    4716:	mov	r6, r3
    4718:	mov	r2, r4
    471a:	subs	r2, #4
    471c:	cmp	r2, #3
    471e:	str.w	r5, [r6], #4
    4722:	bhi.n	471a <memset+0x6a>
    4724:	subs	r2, r4, #4
    4726:	bic.w	r2, r2, #3
    472a:	adds	r2, #4
    472c:	add	r3, r2
    472e:	and.w	r4, r4, #3
    4732:	cbz	r4, 4740 <memset+0x90>
    4734:	uxtb	r1, r1
    4736:	add	r4, r3
    4738:	strb.w	r1, [r3], #1
    473c:	cmp	r3, r4
    473e:	bne.n	4738 <memset+0x88>
    4740:	pop	{r4, r5, r6}
    4742:	bx	lr
    4744:	mov	r4, r2
    4746:	mov	r3, r0
    4748:	b.n	46d0 <memset+0x20>
    474a:	nop

0000474c <__malloc_lock>:
    474c:	bx	lr
    474e:	nop

00004750 <__malloc_unlock>:
    4750:	bx	lr
    4752:	nop

00004754 <_sbrk_r>:
    4754:	push	{r3, r4, r5, lr}
    4756:	ldr	r4, [pc, #28]	; (4774 <_sbrk_r+0x20>)
    4758:	movs	r3, #0
    475a:	mov	r5, r0
    475c:	mov	r0, r1
    475e:	str	r3, [r4, #0]
    4760:	bl	3a4c <_sbrk>
    4764:	adds	r3, r0, #1
    4766:	beq.n	476a <_sbrk_r+0x16>
    4768:	pop	{r3, r4, r5, pc}
    476a:	ldr	r3, [r4, #0]
    476c:	cmp	r3, #0
    476e:	beq.n	4768 <_sbrk_r+0x14>
    4770:	str	r3, [r5, #0]
    4772:	pop	{r3, r4, r5, pc}
    4774:	.word	0x1fff1bc4

00004778 <register_fini>:
    4778:	ldr	r3, [pc, #8]	; (4784 <register_fini+0xc>)
    477a:	cbz	r3, 4782 <register_fini+0xa>
    477c:	ldr	r0, [pc, #8]	; (4788 <register_fini+0x10>)
    477e:	b.w	478c <atexit>
    4782:	bx	lr
    4784:	.word	0x00000000
    4788:	.word	0x00004799

0000478c <atexit>:
    478c:	movs	r3, #0
    478e:	mov	r1, r0
    4790:	mov	r2, r3
    4792:	mov	r0, r3
    4794:	b.w	4a2c <__register_exitproc>

00004798 <__libc_fini_array>:
    4798:	push	{r3, r4, r5, lr}
    479a:	ldr	r5, [pc, #28]	; (47b8 <__libc_fini_array+0x20>)
    479c:	ldr	r4, [pc, #28]	; (47bc <__libc_fini_array+0x24>)
    479e:	subs	r4, r5, r4
    47a0:	asrs	r4, r4, #2
    47a2:	beq.n	47b0 <__libc_fini_array+0x18>
    47a4:	subs	r4, #1
    47a6:	ldr.w	r3, [r5, #-4]!
    47aa:	blx	r3
    47ac:	cmp	r4, #0
    47ae:	bne.n	47a4 <__libc_fini_array+0xc>
    47b0:	ldmia.w	sp!, {r3, r4, r5, lr}
    47b4:	b.w	4f78 <__init_array_end>
	...

000047c0 <_malloc_trim_r>:
    47c0:	push	{r3, r4, r5, r6, r7, lr}
    47c2:	ldr	r7, [pc, #140]	; (4850 <_malloc_trim_r+0x90>)
    47c4:	mov	r4, r1
    47c6:	mov	r6, r0
    47c8:	bl	474c <__malloc_lock>
    47cc:	ldr	r3, [r7, #8]
    47ce:	ldr	r5, [r3, #4]
    47d0:	bic.w	r5, r5, #3
    47d4:	subs	r1, r5, r4
    47d6:	addw	r1, r1, #4079	; 0xfef
    47da:	bic.w	r1, r1, #4080	; 0xff0
    47de:	bic.w	r1, r1, #15
    47e2:	sub.w	r4, r1, #4096	; 0x1000
    47e6:	cmp.w	r4, #4096	; 0x1000
    47ea:	blt.n	47fc <_malloc_trim_r+0x3c>
    47ec:	movs	r1, #0
    47ee:	mov	r0, r6
    47f0:	bl	4754 <_sbrk_r>
    47f4:	ldr	r3, [r7, #8]
    47f6:	add	r3, r5
    47f8:	cmp	r0, r3
    47fa:	beq.n	4806 <_malloc_trim_r+0x46>
    47fc:	mov	r0, r6
    47fe:	bl	4750 <__malloc_unlock>
    4802:	movs	r0, #0
    4804:	pop	{r3, r4, r5, r6, r7, pc}
    4806:	negs	r1, r4
    4808:	mov	r0, r6
    480a:	bl	4754 <_sbrk_r>
    480e:	adds	r0, #1
    4810:	beq.n	482e <_malloc_trim_r+0x6e>
    4812:	ldr	r3, [pc, #64]	; (4854 <_malloc_trim_r+0x94>)
    4814:	ldr	r2, [r7, #8]
    4816:	ldr	r1, [r3, #0]
    4818:	subs	r5, r5, r4
    481a:	orr.w	r5, r5, #1
    481e:	mov	r0, r6
    4820:	subs	r1, r1, r4
    4822:	str	r5, [r2, #4]
    4824:	str	r1, [r3, #0]
    4826:	bl	4750 <__malloc_unlock>
    482a:	movs	r0, #1
    482c:	pop	{r3, r4, r5, r6, r7, pc}
    482e:	movs	r1, #0
    4830:	mov	r0, r6
    4832:	bl	4754 <_sbrk_r>
    4836:	ldr	r2, [r7, #8]
    4838:	subs	r3, r0, r2
    483a:	cmp	r3, #15
    483c:	ble.n	47fc <_malloc_trim_r+0x3c>
    483e:	ldr	r4, [pc, #24]	; (4858 <_malloc_trim_r+0x98>)
    4840:	ldr	r1, [pc, #16]	; (4854 <_malloc_trim_r+0x94>)
    4842:	ldr	r4, [r4, #0]
    4844:	orr.w	r3, r3, #1
    4848:	subs	r0, r0, r4
    484a:	str	r3, [r2, #4]
    484c:	str	r0, [r1, #0]
    484e:	b.n	47fc <_malloc_trim_r+0x3c>
    4850:	.word	0x1fff1184
    4854:	.word	0x1fff1a58
    4858:	.word	0x1fff1590

0000485c <_free_r>:
    485c:	cmp	r1, #0
    485e:	beq.n	48ec <_free_r+0x90>
    4860:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4864:	mov	r5, r1
    4866:	mov	r8, r0
    4868:	bl	474c <__malloc_lock>
    486c:	ldr.w	r7, [r5, #-4]
    4870:	ldr	r1, [pc, #424]	; (4a1c <_free_r+0x1c0>)
    4872:	bic.w	r3, r7, #1
    4876:	sub.w	r4, r5, #8
    487a:	adds	r2, r4, r3
    487c:	ldr	r6, [r1, #8]
    487e:	ldr	r0, [r2, #4]
    4880:	cmp	r2, r6
    4882:	bic.w	r0, r0, #3
    4886:	beq.n	494e <_free_r+0xf2>
    4888:	lsls	r6, r7, #31
    488a:	str	r0, [r2, #4]
    488c:	bmi.n	48a6 <_free_r+0x4a>
    488e:	ldr.w	r7, [r5, #-8]
    4892:	subs	r4, r4, r7
    4894:	add.w	lr, r1, #8
    4898:	ldr	r5, [r4, #8]
    489a:	cmp	r5, lr
    489c:	add	r3, r7
    489e:	beq.n	4980 <_free_r+0x124>
    48a0:	ldr	r7, [r4, #12]
    48a2:	str	r7, [r5, #12]
    48a4:	str	r5, [r7, #8]
    48a6:	adds	r5, r2, r0
    48a8:	ldr	r5, [r5, #4]
    48aa:	lsls	r5, r5, #31
    48ac:	bpl.n	4934 <_free_r+0xd8>
    48ae:	orr.w	r2, r3, #1
    48b2:	str	r2, [r4, #4]
    48b4:	str	r3, [r4, r3]
    48b6:	cmp.w	r3, #512	; 0x200
    48ba:	bcs.n	48ee <_free_r+0x92>
    48bc:	lsrs	r3, r3, #3
    48be:	adds	r2, r3, #1
    48c0:	ldr	r5, [r1, #4]
    48c2:	ldr.w	r7, [r1, r2, lsl #3]
    48c6:	str	r7, [r4, #8]
    48c8:	movs	r0, #1
    48ca:	asrs	r3, r3, #2
    48cc:	lsl.w	r3, r0, r3
    48d0:	add.w	r0, r1, r2, lsl #3
    48d4:	orrs	r5, r3
    48d6:	subs	r0, #8
    48d8:	str	r0, [r4, #12]
    48da:	str	r5, [r1, #4]
    48dc:	str.w	r4, [r1, r2, lsl #3]
    48e0:	str	r4, [r7, #12]
    48e2:	mov	r0, r8
    48e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    48e8:	b.w	4750 <__malloc_unlock>
    48ec:	bx	lr
    48ee:	lsrs	r2, r3, #9
    48f0:	cmp	r2, #4
    48f2:	bhi.n	499c <_free_r+0x140>
    48f4:	lsrs	r2, r3, #6
    48f6:	add.w	r7, r2, #57	; 0x39
    48fa:	lsls	r7, r7, #1
    48fc:	add.w	r5, r2, #56	; 0x38
    4900:	add.w	r0, r1, r7, lsl #2
    4904:	ldr.w	r2, [r1, r7, lsl #2]
    4908:	ldr	r1, [pc, #272]	; (4a1c <_free_r+0x1c0>)
    490a:	subs	r0, #8
    490c:	cmp	r0, r2
    490e:	beq.n	49ac <_free_r+0x150>
    4910:	ldr	r1, [r2, #4]
    4912:	bic.w	r1, r1, #3
    4916:	cmp	r3, r1
    4918:	bcs.n	4920 <_free_r+0xc4>
    491a:	ldr	r2, [r2, #8]
    491c:	cmp	r0, r2
    491e:	bne.n	4910 <_free_r+0xb4>
    4920:	ldr	r0, [r2, #12]
    4922:	str	r0, [r4, #12]
    4924:	str	r2, [r4, #8]
    4926:	str	r4, [r0, #8]
    4928:	str	r4, [r2, #12]
    492a:	mov	r0, r8
    492c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4930:	b.w	4750 <__malloc_unlock>
    4934:	ldr	r5, [r2, #8]
    4936:	ldr	r7, [pc, #232]	; (4a20 <_free_r+0x1c4>)
    4938:	cmp	r5, r7
    493a:	add	r3, r0
    493c:	beq.n	49be <_free_r+0x162>
    493e:	ldr	r0, [r2, #12]
    4940:	str	r0, [r5, #12]
    4942:	orr.w	r2, r3, #1
    4946:	str	r5, [r0, #8]
    4948:	str	r2, [r4, #4]
    494a:	str	r3, [r4, r3]
    494c:	b.n	48b6 <_free_r+0x5a>
    494e:	lsls	r7, r7, #31
    4950:	add	r3, r0
    4952:	bmi.n	4964 <_free_r+0x108>
    4954:	ldr.w	r2, [r5, #-8]
    4958:	subs	r4, r4, r2
    495a:	add	r3, r2
    495c:	ldr	r0, [r4, #8]
    495e:	ldr	r2, [r4, #12]
    4960:	str	r2, [r0, #12]
    4962:	str	r0, [r2, #8]
    4964:	ldr	r2, [pc, #188]	; (4a24 <_free_r+0x1c8>)
    4966:	ldr	r2, [r2, #0]
    4968:	orr.w	r0, r3, #1
    496c:	cmp	r3, r2
    496e:	str	r0, [r4, #4]
    4970:	str	r4, [r1, #8]
    4972:	bcc.n	48e2 <_free_r+0x86>
    4974:	ldr	r3, [pc, #176]	; (4a28 <_free_r+0x1cc>)
    4976:	mov	r0, r8
    4978:	ldr	r1, [r3, #0]
    497a:	bl	47c0 <_malloc_trim_r>
    497e:	b.n	48e2 <_free_r+0x86>
    4980:	adds	r1, r2, r0
    4982:	ldr	r1, [r1, #4]
    4984:	lsls	r1, r1, #31
    4986:	bmi.n	4a12 <_free_r+0x1b6>
    4988:	ldr	r1, [r2, #8]
    498a:	ldr	r2, [r2, #12]
    498c:	str	r2, [r1, #12]
    498e:	add	r3, r0
    4990:	orr.w	r0, r3, #1
    4994:	str	r1, [r2, #8]
    4996:	str	r0, [r4, #4]
    4998:	str	r3, [r4, r3]
    499a:	b.n	48e2 <_free_r+0x86>
    499c:	cmp	r2, #20
    499e:	bhi.n	49d0 <_free_r+0x174>
    49a0:	add.w	r7, r2, #92	; 0x5c
    49a4:	lsls	r7, r7, #1
    49a6:	add.w	r5, r2, #91	; 0x5b
    49aa:	b.n	4900 <_free_r+0xa4>
    49ac:	asrs	r2, r5, #2
    49ae:	ldr	r3, [r1, #4]
    49b0:	movs	r5, #1
    49b2:	lsl.w	r2, r5, r2
    49b6:	orrs	r3, r2
    49b8:	str	r3, [r1, #4]
    49ba:	mov	r2, r0
    49bc:	b.n	4922 <_free_r+0xc6>
    49be:	orr.w	r2, r3, #1
    49c2:	str	r4, [r1, #20]
    49c4:	str	r4, [r1, #16]
    49c6:	str	r5, [r4, #12]
    49c8:	str	r5, [r4, #8]
    49ca:	str	r2, [r4, #4]
    49cc:	str	r3, [r4, r3]
    49ce:	b.n	48e2 <_free_r+0x86>
    49d0:	cmp	r2, #84	; 0x54
    49d2:	bhi.n	49e2 <_free_r+0x186>
    49d4:	lsrs	r2, r3, #12
    49d6:	add.w	r7, r2, #111	; 0x6f
    49da:	lsls	r7, r7, #1
    49dc:	add.w	r5, r2, #110	; 0x6e
    49e0:	b.n	4900 <_free_r+0xa4>
    49e2:	cmp.w	r2, #340	; 0x154
    49e6:	bhi.n	49f6 <_free_r+0x19a>
    49e8:	lsrs	r2, r3, #15
    49ea:	add.w	r7, r2, #120	; 0x78
    49ee:	lsls	r7, r7, #1
    49f0:	add.w	r5, r2, #119	; 0x77
    49f4:	b.n	4900 <_free_r+0xa4>
    49f6:	movw	r0, #1364	; 0x554
    49fa:	cmp	r2, r0
    49fc:	bhi.n	4a0c <_free_r+0x1b0>
    49fe:	lsrs	r2, r3, #18
    4a00:	add.w	r7, r2, #125	; 0x7d
    4a04:	lsls	r7, r7, #1
    4a06:	add.w	r5, r2, #124	; 0x7c
    4a0a:	b.n	4900 <_free_r+0xa4>
    4a0c:	movs	r7, #254	; 0xfe
    4a0e:	movs	r5, #126	; 0x7e
    4a10:	b.n	4900 <_free_r+0xa4>
    4a12:	orr.w	r2, r3, #1
    4a16:	str	r2, [r4, #4]
    4a18:	str	r3, [r4, r3]
    4a1a:	b.n	48e2 <_free_r+0x86>
    4a1c:	.word	0x1fff1184
    4a20:	.word	0x1fff118c
    4a24:	.word	0x1fff158c
    4a28:	.word	0x1fff1a54

00004a2c <__register_exitproc>:
    4a2c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a30:	ldr	r4, [pc, #148]	; (4ac8 <__register_exitproc+0x9c>)
    4a32:	ldr	r5, [r4, #0]
    4a34:	ldr.w	r4, [r5, #328]	; 0x148
    4a38:	mov	r6, r0
    4a3a:	mov	r8, r1
    4a3c:	mov	sl, r2
    4a3e:	mov	r9, r3
    4a40:	cbz	r4, 4ab4 <__register_exitproc+0x88>
    4a42:	ldr	r0, [r4, #4]
    4a44:	cmp	r0, #31
    4a46:	bgt.n	4a78 <__register_exitproc+0x4c>
    4a48:	adds	r3, r0, #1
    4a4a:	cbz	r6, 4a6a <__register_exitproc+0x3e>
    4a4c:	add.w	r5, r4, r0, lsl #2
    4a50:	movs	r2, #1
    4a52:	str.w	sl, [r5, #136]	; 0x88
    4a56:	ldr.w	r1, [r4, #392]	; 0x188
    4a5a:	lsls	r2, r0
    4a5c:	orrs	r1, r2
    4a5e:	cmp	r6, #2
    4a60:	str.w	r1, [r4, #392]	; 0x188
    4a64:	str.w	r9, [r5, #264]	; 0x108
    4a68:	beq.n	4aa8 <__register_exitproc+0x7c>
    4a6a:	adds	r0, #2
    4a6c:	str	r3, [r4, #4]
    4a6e:	str.w	r8, [r4, r0, lsl #2]
    4a72:	movs	r0, #0
    4a74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4a78:	ldr	r3, [pc, #80]	; (4acc <__register_exitproc+0xa0>)
    4a7a:	cbz	r3, 4abe <__register_exitproc+0x92>
    4a7c:	mov.w	r0, #400	; 0x190
    4a80:	bl	4130 <malloc>
    4a84:	mov	r4, r0
    4a86:	cbz	r0, 4abe <__register_exitproc+0x92>
    4a88:	ldr.w	r3, [r5, #328]	; 0x148
    4a8c:	movs	r7, #0
    4a8e:	stmia.w	r0, {r3, r7}
    4a92:	str.w	r4, [r5, #328]	; 0x148
    4a96:	mov	r0, r7
    4a98:	movs	r3, #1
    4a9a:	str.w	r7, [r4, #392]	; 0x188
    4a9e:	str.w	r7, [r4, #396]	; 0x18c
    4aa2:	cmp	r6, #0
    4aa4:	beq.n	4a6a <__register_exitproc+0x3e>
    4aa6:	b.n	4a4c <__register_exitproc+0x20>
    4aa8:	ldr.w	r1, [r4, #396]	; 0x18c
    4aac:	orrs	r2, r1
    4aae:	str.w	r2, [r4, #396]	; 0x18c
    4ab2:	b.n	4a6a <__register_exitproc+0x3e>
    4ab4:	add.w	r4, r5, #332	; 0x14c
    4ab8:	str.w	r4, [r5, #328]	; 0x148
    4abc:	b.n	4a42 <__register_exitproc+0x16>
    4abe:	mov.w	r0, #4294967295
    4ac2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4ac6:	nop
    4ac8:	.word	0x00004f5c
    4acc:	.word	0x00004131
    4ad0:	.word	0x0000003c
    4ad4:	.word	0x0000003e
    4ad8:	.word	0x0000003f
    4adc:	.word	0x00000041
    4ae0:	.word	0x00000043
    4ae4:	.word	0x00000045
    4ae8:	.word	0x00000046
    4aec:	.word	0x00000048
    4af0:	.word	0x0000003e
    4af4:	.word	0x00000040
    4af8:	.word	0x00000041
    4afc:	.word	0x00000043
    4b00:	.word	0x00000045
    4b04:	.word	0x00000047
    4b08:	.word	0x00000048
    4b0c:	.word	0x0000004a
    4b10:	.word	0x00000040
    4b14:	.word	0x00000042
    4b18:	.word	0x00000043
    4b1c:	.word	0x00000045
    4b20:	.word	0x00000047
    4b24:	.word	0x00000049
    4b28:	.word	0x0000004a
    4b2c:	.word	0x0000004c
    4b30:	.word	0x52415453
    4b34:	.word	0x00000054
    4b38:	.word	0x504f5453
    4b3c:	.word	0xffffff00
    4b40:	.word	0x73206f6e
    4b44:	.word	0x73706574
    4b48:	.word	0x74657920
    4b4c:	.word	0x00000000
    4b50:	.word	0x64616f6c
    4b54:	.word	0x20676e69
    4b58:	.word	0x6d6f7266
    4b5c:	.word	0x6d656d20
    4b60:	.word	0x0079726f
    4b64:	.word	0x79706f63
    4b68:	.word	0x20676e69
    4b6c:	.word	0x20646e61
    4b70:	.word	0x74746573
    4b74:	.word	0x20676e69
    4b78:	.word	0x6d206e69
    4b7c:	.word	0x726f6d65
    4b80:	.word	0x00000079
    4b84:	.word	0x79706f63
    4b88:	.word	0x20676e69
    4b8c:	.word	0x796c6e6f
    4b90:	.word	0x6f726620
    4b94:	.word	0x656d206d
    4b98:	.word	0x79726f6d
    4b9c:	.word	0x00000000
    4ba0:	.word	0x74746553
    4ba4:	.word	0x20676e69
    4ba8:	.word	0x70657473
    4bac:	.word	0x6f662073
    4bb0:	.word	0x64652072
    4bb4:	.word	0x6e697469
    4bb8:	.word	0xffff0067
    4bbc:	.word	0x676e656c
    4bc0:	.word	0x00006874
    4bc4:	.word	0x63746970
    4bc8:	.word	0x61724768
    4bcc:	.word	0x00006564
    4bd0:	.word	0x6f6c6576
    4bd4:	.word	0x79746963
    4bd8:	.word	0x00000000
    4bdc:	.word	0x6e616863
    4be0:	.word	0x00006563
    4be4:	.word	0x6e697773
    4be8:	.word	0xffff0067
    4bec:	.word	0x72727563
    4bf0:	.word	0x20746e65
    4bf4:	.word	0x70657473
    4bf8:	.word	0x00000000
    4bfc:	.word	0x72727563
    4c00:	.word	0x20746e65
    4c04:	.word	0x79616c70
    4c08:	.word	0x6b636162
    4c0c:	.word	0x67617020
    4c10:	.word	0x00000065
    4c14:	.word	0x72727563
    4c18:	.word	0x20746e65
    4c1c:	.word	0x69676170
    4c20:	.word	0x6f74616e
    4c24:	.word	0x74732072
    4c28:	.word	0x70207065
    4c2c:	.word	0x68637469
    4c30:	.word	0x00000000
    4c34:	.word	0x00000061
    4c38:	.word	0x69746f6d
    4c3c:	.word	0xff006e6f
    4c40:	.word	0x43544950
    4c44:	.word	0x00000048
    4c48:	.word	0x4f4c4556
    4c4c:	.word	0x59544943
    4c50:	.word	0x00000000
    4c54:	.word	0x45544f4e
    4c58:	.word	0x474e454c
    4c5c:	.word	0x00004854
    4c60:	.word	0x4956414e
    4c64:	.word	0x45544147
    4c68:	.word	0x00000000
    4c6c:	.word	0x59504f43
    4c70:	.word	0x00000000
    4c74:	.word	0x4e414843
    4c78:	.word	0x00004543
    4c7c:	.word	0x4e495753
    4c80:	.word	0x00000047
    4c84:	.word	0x49544f4d
    4c88:	.word	0x00004e4f

00004c8c <pin2sc1a>:
    4c8c:	................
    4c9c:	................
    4cac:	................
    4cbc:	................
    4ccc:	........

00004cd4 <digital_pin_to_info_PGM>:
    4cd4:	@..C@..@D..CD..@
    4ce4:	...C...@0..C0..@
    4cf4:	4..C4..@...C...@
    4d04:	...C...@...C...@
    4d14:	...C...@...C...@
    4d24:	...C...@...C...@
    4d34:	...C...@...C...@
    4d44:	...C...@...C...@
    4d54:	...C...@...C...@
    4d64:	...C...@...C...@
    4d74:	...C...@...C...@
    4d84:	...C...@...C...@
    4d94:	h .Ch..@...C...@
    4da4:	8..C8..@<..C<..@
    4db4:	@..C@..@H..CH..@
    4dc4:	L..CL..@(..C(..@
    4dd4:	,..C,..@` .C`..@
    4de4:	d .Cd..@ ..C ..@
    4df4:	$..C$..@(..C(..@
    4e04:	,..C,..@D..CD..@
    4e14:	p..Cp..@t..Ct..@
    4e24:	h..Ch..@P..CP..@
    4e34:	X..CX..@\..C\..@
    4e44:	T..CT..@ ..C ..@
    4e54:	$..C$..@...C...@
    4e64:	...C...@8..C8..@
    4e74:	4..C4..@0..C0..@
    4e84:	<..C<..@,..C,..@
    4e94:	( .C(..@, .C,..@
    4ea4:	. .C...@. .C...@
    4eb4:	. .C...@. .C...@
    4ec4:	. .C...@. .C...@

00004ed4 <vtable for usb_serial_class>:
	...
    4edc:	}5..u5..q5..m5..
    4eec:	i5..e5..a5..]5..
    4efc:	....

00004f00 <usb_endpoint_config_table>:
    4f00:	........

00004f08 <usb_descriptor_list>:
    4f08:	....\...........
    4f18:	............8...
    4f28:	........p.......
    4f38:	.... ...........
    4f48:	<...............
    4f58:	....

00004f5c <_global_impure_ptr>:
    4f5c:	X...

00004f60 <_init>:
    4f60:	push	{r3, r4, r5, r6, r7, lr}
    4f62:	nop
    4f64:	pop	{r3, r4, r5, r6, r7}
    4f66:	pop	{r3}
    4f68:	mov	lr, r3
    4f6a:	bx	lr

00004f6c <__init_array_start>:
    4f6c:	.word	0x00004779

00004f70 <__frame_dummy_init_array_entry>:
    4f70:	5.......

Disassembly of section .fini:

00004f78 <_fini>:
    4f78:	push	{r3, r4, r5, r6, r7, lr}
    4f7a:	nop


.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000040a0 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff1594 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00002d44 l     F .text	0000000c startup_default_early_hook
00002d50 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1594 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff1598 l       .bss	00000000 object.8610
00004098 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 sequencer.cpp
00000000 l    df *ABS*	00000000 button.cpp
00000000 l    df *ABS*	00000000 piano.cpp
00000000 l    df *ABS*	00000000 led.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000878 l     F .text	00000018 _GLOBAL__sub_I_sequencer
00000000 l    df *ABS*	00000000 note.cpp
00000000 l    df *ABS*	00000000 transport.cpp
00000000 l    df *ABS*	00000000 paginator.cpp
00000000 l    df *ABS*	00000000 step.cpp
00000000 l    df *ABS*	00000000 knob.cpp
00000000 l    df *ABS*	00000000 controller.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
1fff15b5 l     O .bss	00000001 tx_noautoflush
1fff15b8 l     O .bss	00000004 tx_packet
1fff15bc l     O .bss	00000001 transmit_previous_timeout
1fff15c0 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00001038 l     F .text	00000144 wait_for_cal
1fff15c5 l     O .bss	00000001 analog_right_shift
1fff15c6 l     O .bss	00000001 calibrating
00003db4 l     O .text	00000048 pin2sc1a
1fff0c40 l     O .data	00000001 analog_config_bits
1fff15c7 l     O .bss	00000001 analogReadBusyADC1
1fff15c8 l     O .bss	00000001 analogReadBusyADC0
1fff15c9 l     O .bss	00000001 analog_reference_internal
1fff0c41 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00001358 l     F .text	0000004c digitalWrite.part.1
000013a4 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00001684 l     F .text	00000048 sysex_byte
1fff15e4 l     O .bss	00000001 tx_noautoflush
1fff1610 l     O .bss	00000004 tx_packet
1fff1618 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c44 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff162c l     O .bss	00000004 ep0_tx_ptr
1fff1630 l     O .bss	00000014 rx_last
1fff1644 l     O .bss	00000002 ep0_tx_len
1fff1648 l     O .bss	00000040 ep0_rx0_buf
1fff1688 l     O .bss	00000014 rx_first
1fff169c l     O .bss	00000001 ep0_tx_data_toggle
1fff16a0 l     O .bss	00000040 ep0_rx1_buf
1fff16e0 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff16f4 l     O .bss	00000014 tx_last
1fff1708 l     O .bss	00000008 setup
1fff1710 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1714 l     O .bss	00000008 reply_buffer
1fff1720 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1725 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1728 l     O .bss	00000004 rts_pin
1fff172c l     O .bss	00000001 rx_buffer_head
1fff172d l     O .bss	00000001 rx_buffer_tail
1fff1730 l     O .bss	00000028 tx_buffer
1fff1758 l     O .bss	00000040 rx_buffer
1fff1798 l     O .bss	00000001 transmitting
1fff1799 l     O .bss	00000001 tx_buffer_tail
1fff179c l     O .bss	00000004 transmit_pin
1fff17a0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff17a4 l     O .bss	00000004 rts_pin
1fff17a8 l     O .bss	00000001 transmitting
1fff17a9 l     O .bss	00000001 rx_buffer_tail
1fff17ac l     O .bss	00000028 tx_buffer
1fff17d4 l     O .bss	00000040 rx_buffer
1fff1814 l     O .bss	00000001 rx_buffer_head
1fff1815 l     O .bss	00000001 tx_buffer_tail
1fff1818 l     O .bss	00000004 transmit_pin
1fff181c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1820 l     O .bss	00000004 rts_pin
1fff1824 l     O .bss	00000001 rx_buffer_head
1fff1825 l     O .bss	00000001 rx_buffer_tail
1fff1828 l     O .bss	00000028 tx_buffer
1fff1850 l     O .bss	00000040 rx_buffer
1fff1890 l     O .bss	00000001 transmitting
1fff1891 l     O .bss	00000001 tx_buffer_tail
1fff1894 l     O .bss	00000004 transmit_pin
1fff1898 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff189c l     O .bss	00000004 rts_pin
1fff18a0 l     O .bss	00000001 rx_buffer_head
1fff18a1 l     O .bss	00000001 rx_buffer_tail
1fff18a4 l     O .bss	00000040 tx_buffer
1fff18e4 l     O .bss	00000040 rx_buffer
1fff1924 l     O .bss	00000001 transmitting
1fff1925 l     O .bss	00000001 tx_buffer_tail
1fff1928 l     O .bss	00000004 transmit_pin
1fff192c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1930 l     O .bss	00000004 rts_pin
1fff1934 l     O .bss	00000001 rx_buffer_head
1fff1935 l     O .bss	00000001 rx_buffer_tail
1fff1938 l     O .bss	00000028 tx_buffer
1fff1960 l     O .bss	00000040 rx_buffer
1fff19a0 l     O .bss	00000001 transmitting
1fff19a1 l     O .bss	00000001 tx_buffer_tail
1fff19a4 l     O .bss	00000004 transmit_pin
1fff19a8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c5c l     O .data	00000012 device_descriptor
1fff0c88 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff19ac l     O .bss	00000004 rts_pin
1fff19b0 l     O .bss	00000001 rx_buffer_head
1fff19b1 l     O .bss	00000001 rx_buffer_tail
1fff19b4 l     O .bss	00000028 tx_buffer
1fff19dc l     O .bss	00000040 rx_buffer
1fff1a1c l     O .bss	00000001 transmitting
1fff1a1d l     O .bss	00000001 tx_buffer_tail
1fff1a20 l     O .bss	00000004 transmit_pin
1fff1a24 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000039e4 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d58 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1594 l       .bss	00000000 __bss_start__
1fff1bc0 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00002d3c  w    F .text	00000006 adc0_isr
00000ddc g     F .text	0000001c usb_serial_available
00002bfc g     F .text	00000020 serial4_available
00002814  w    F .text	000000c4 yield
1fff0c70 g     O .data	00000018 usb_string_manufacturer_name_default
00002de8 g     F .text	00000020 serial_available
1fff15e8 g     O .bss	00000004 usb_midi_handleProgramChange
00002cf4  w    F .text	00000048 hard_fault_isr
00002d3c  w    F .text	00000006 dma_ch6_isr
00002908 g     F .text	00000020 Print::println()
00002ad0 g     F .text	00000020 serial2_available
00002d3c  w    F .text	00000006 uart0_lon_isr
00001c28 g     F .text	000000e8 usb_rx_memory
000028d8  w    F .text	00000002 serialEvent5()
00000d54 g     F .text	00000006 Controller::getShiftMode()
00002d3c  w    F .text	00000006 dma_ch8_isr
00002f14 g     F .text	00000020 serial6_available
000039bc g     F .text	00000002 __malloc_unlock
1fff15fc g     O .bss	00000004 usb_midi_handleAfterTouch
000004f8 g     F .text	0000004e Sequencer::step()
0000117c g     F .text	000000e0 analog_init
00001d10 g     F .text	00000084 usb_tx
00002d3c  w    F .text	00000006 portcd_isr
0000057c g     F .text	00000088 Button::onPress()
1fff160c g     O .bss	00000004 usb_midi_handleSysExComplete
00003334 g     F .text	00000098 MillisTimer::runFromTimer()
00002d3c  w    F .text	00000006 can1_rx_warn_isr
000040a4 g       .fini	00000000 __exidx_end
00002d3c  w    F .text	00000006 dma_error_isr
1fff1a84 g     O .bss	00000001 usb_midi_msg_type
1fff1a3c g     O .bss	00000001 EventResponder::runningFromYield
00002d3c  w    F .text	00000006 i2c0_isr
000033dc g     F .text	0000000c __errno
00002d3c  w    F .text	00000006 portd_isr
00002d3c  w    F .text	00000006 enet_error_isr
1fff1a28 g     O .bss	00000004 EventResponder::firstInterrupt
00000ab0 g     F .text	0000002a Knob::tick()
00002d3c  w    F .text	00000006 tpm1_isr
000028f4  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00003dfc g     O .text	00000200 digital_pin_to_info_PGM
00000d5c g     F .text	00000006 Controller::getMode()
1fff1bbc g     O .bss	00000004 errno
000040a4 g       .fini	00000000 _etext
1fff1594 g       .bss	00000000 _sbss
000029d0  w    F .text	00000002 serialEvent6()
1fff15f8 g     O .bss	00000004 usb_midi_handleVelocityChange
0000144c g     F .text	0000001c digitalRead
00002d3c  w    F .text	00000006 porte_isr
0000086c g     F .text	0000000c loop
00002d3c  w    F .text	00000006 portb_isr
000004d8 g     F .text	00000014 Sequencer::tick()
000016cc g     F .text	0000002c usb_midi_flush_output
00002d3c  w    F .text	00000006 spi1_isr
00002c1c g     F .text	000000d8 uart3_status_isr
000031e0  w    F .text	00000002 serialEvent1()
00000c84 g     F .text	0000002c Controller::tick()
00002d3c  w    F .text	00000006 mcm_isr
000032cc g     F .text	00000068 MillisTimer::addToActiveList()
000016f8 g     F .text	0000043c usb_midi_read
00000d44 g     F .text	00000008 Controller::enterShiftMode()
1fff15d4 g     O .bss	00000004 usb_midi_handleSystemReset
000006f8 g     F .text	00000042 Piano::Piano(Sequencer*)
1fff1a2c g     O .bss	00000004 EventResponder::lastInterrupt
00002af0 g     F .text	0000010c uart1_status_isr
000007fc g     F .text	0000006c Led::tick()
1fff1a86 g     O .bss	00000002 usb_midi_msg_sysex_len
00000548 g     F .text	00000006 Sequencer::resetStep()
00002d3c  w    F .text	00000006 randnum_isr
1fff15dc g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff15cc g     O .bss	00000004 systick_millis_count
00002cf4  w    F .text	00000048 bus_fault_isr
000007b4 g     F .text	0000002c Led::toggle()
00002d3c  w    F .text	00000006 watchdog_isr
00002d3c  w    F .text	00000006 i2c1_isr
1fff171c g     O .bss	00000001 usb_configuration
00002d3c  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
000029b8  w    F .text	00000002 serialEvent2()
00002d3c  w    F .text	00000006 i2c2_isr
1fff0c70  w    O .data	00000018 usb_string_manufacturer_name
1fff1bb0 g     O .bss	0000000a usb_rx_byte_count_data
00002d3c  w    F .text	00000006 pit1_isr
000009b4 g     F .text	0000000e Paginator::previousPage()
00003438 g     F .text	00000010 malloc
00002d3c  w    F .text	00000006 dma_ch4_isr
00002d3c  w    F .text	00000006 software_isr
00002d3c  w    F .text	00000006 dma_ch7_isr
00003268  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00002744 g     F .text	000000d0 usb_init
00002d3c  w    F .text	00000006 lptmr_isr
00000930 g     F .text	00000054 Transport::processMidi()
1fff1a4c g     O .bss	00000004 __malloc_top_pad
0000141c g     F .text	00000024 rtc_set
000009e8 g     F .text	00000018 Step::controlLength(int)
1fff0c40 g       .data	00000000 _sdata
1fff1628 g     O .bss	00000004 usb_midi_handleNoteOn
00002db4 g     F .text	00000034 kinetis_hsrun_enable
000039c0 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00000d64 g     F .text	00000048 usb_serial_getchar
00002d3c  w    F .text	00000006 can1_bus_off_isr
00002d3c  w    F .text	00000006 ftm2_isr
00000550 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1a78 g     O .bss	00000008 usb_cdc_line_coding
00001440 g     F .text	0000000a digitalWrite
00002d3c  w    F .text	00000006 uart5_status_isr
00002f34 g     F .text	000000e4 lpuart0_status_isr
1fff1a34 g     O .bss	00000004 EventResponder::lastYield
000008b4 g     F .text	0000003a Transport::controlTempo(int)
00004028 g     O .text	00000005 usb_endpoint_config_table
00000adc g     F .text	000001a6 Controller::Controller(Sequencer*)
00002d3c  w    F .text	00000006 dma_ch9_isr
00002d3c  w    F .text	00000006 pit2_isr
000030e8 g     F .text	00000020 serial3_available
1fff1a48 g     O .bss	00000004 __malloc_max_sbrked_mem
00001468 g     F .text	0000000a pinMode
00001b74 g     F .text	0000004c usb_free
00002d3c  w    F .text	00000006 i2c3_isr
1fff15f4 g     O .bss	00000004 usb_midi_handleSysExPartial
000040a4 g       .fini	00000000 __exidx_start
00002d3c  w    F .text	00000006 pit0_isr
1fff1a88 g     O .bss	00000001 usb_midi_msg_data1
1fff1a38 g     O .bss	00000004 EventResponder::firstYield
00004084 g     O .text	00000004 _global_impure_ptr
00002d3c  w    F .text	00000006 can1_error_isr
000033e8 g     F .text	00000050 __libc_init_array
1fff1bc0 g       .bss	00000000 __bss_end
00002d3c  w    F .text	00000006 can0_wakeup_isr
00002d3c  w    F .text	00000006 flash_cmd_isr
000028dc  w    F .text	00000004 usb_serial_class::clear()
00003108 g     F .text	000000d8 uart2_status_isr
00002d54 g     F .text	0000002c _sbrk
1fff1a40 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c58 g     O .data	00000004 __brkval
1fff15c4 g     O .bss	00000001 usb_cdc_line_rtsdtr
00000ff0 g     F .text	00000048 usb_serial_flush_callback
00004088 g     F .text	00000000 _init
00002d3c  w    F .text	00000006 svcall_isr
00002d3c  w    F .text	00000006 dma_ch15_isr
00002d3c  w    F .text	00000006 uart1_error_isr
00003a04 g     F .text	00000028 __libc_fini_array
00002d3c  w    F .text	00000006 usbhs_phy_isr
0000099c g     F .text	00000008 Paginator::Paginator(Sequencer*)
00000550 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1bc0 g       .bss	00000000 _ebss
00002d3c g     F .text	00000006 unused_isr
00000a28 g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
00002d3c  w    F .text	00000006 spi0_isr
00002d3c  w    F .text	00000006 dma_ch3_isr
000009a8 g     F .text	0000000c Paginator::nextPage()
000009c4 g     F .text	00000018 Step::Step(Sequencer*)
000009c4 g     F .text	00000018 Step::Step(Sequencer*)
00002d3c  w    F .text	00000006 flash_error_isr
000029d8 g     F .text	00000020 serial5_available
00002d3c  w    F .text	00000006 uart5_error_isr
00002d3c  w    F .text	00000006 rtc_seconds_isr
00002d3c  w    F .text	00000006 pdb_isr
00002cf4  w    F .text	00000048 usage_fault_isr
00002d3c  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00000984 g     F .text	00000018 Transport::tick()
00002d3c  w    F .text	00000006 dma_ch14_isr
00000a38 g     F .text	00000076 Knob::onChange()
00000890 g     F .text	0000000e Note::Note()
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1a80 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
000008a0 g     F .text	00000014 Transport::Transport(Sequencer*)
000033cc g     F .text	00000010 systick_isr
00002d3c  w    F .text	00000006 rtc_alarm_isr
0000046c g     F .text	0000006c Sequencer::Sequencer()
00002d3c  w    F .text	00000006 dma_ch2_isr
1fff0c48 g     O .data	00000010 Serial
000008a0 g     F .text	00000014 Transport::Transport(Sequencer*)
00002d3c  w    F .text	00000006 ftm1_isr
000028fc  w    F .text	00000006 usb_serial_class::write(unsigned char)
00002d44  w    F .text	0000000c startup_early_hook
00002d3c  w    F .text	00000006 dma_ch13_isr
00002d3c  w    F .text	00000006 uart2_error_isr
00000dac g     F .text	00000030 usb_serial_peekchar
00000780 g     F .text	00000034 Led::blink(int)
1fff0d3c g     O .data	00000016 usb_string_serial_number_default
00002cf4 g     F .text	00000048 fault_isr
00003ac8 g     F .text	000001d0 _free_r
1fff1614 g     O .bss	00000004 usb_midi_handleStop
00002d3c  w    F .text	00000006 usb_charge_isr
000028ec  w    F .text	00000004 usb_serial_class::flush()
00002d3c  w    F .text	00000006 cmt_isr
00002d3c  w    F .text	00000006 usbhs_isr
1fff1624 g     O .bss	00000004 usb_midi_handleControlChange
1fff1590 g     O .data	00000004 __malloc_sbrk_base
000028e4  w    F .text	00000004 usb_serial_class::read()
00002d3c  w    F .text	00000006 ftm3_isr
000006f8 g     F .text	00000042 Piano::Piano(Sequencer*)
00002d3c  w    F .text	00000006 tsi0_isr
00002d3c  w    F .text	00000006 spi2_isr
000029bc  w    F .text	00000002 serialEvent4()
00002904  w    F .text	00000002 serialEvent()
1fff169d g     O .bss	00000001 usb_reboot_timer
00003c98 g     F .text	000000a4 __register_exitproc
00000df8 g     F .text	00000038 usb_serial_flush_input
00000f38 g     F .text	00000018 usb_serial_putchar
1fff1a50 g     O .bss	00000028 __malloc_current_mallinfo
00002d3c  w    F .text	00000006 can0_bus_off_isr
00000adc g     F .text	000001a6 Controller::Controller(Sequencer*)
1fff1711 g     O .bss	00000001 usb_rx_memory_needed
000004ec g     F .text	0000000a Sequencer::reverse()
00001d94 g     F .text	000009b0 usb_isr
00000910 g     F .text	0000001e Transport::stopPPQN()
1fff1620 g     O .bss	00000004 usb_midi_handleNoteOff
00000890 g     F .text	0000000e Note::Note()
00003ffc  w    O .text	00000028 vtable for usb_serial_class
00000604 g     F .text	000000f4 Button::tick()
00002d3c  w    F .text	00000006 uart3_error_isr
1fff1a30 g     O .bss	00000004 MillisTimer::listActive
00002d3c  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00002d3c  w    F .text	00000006 low_voltage_isr
1fff1184 g     O .data	00000408 __malloc_av_
00002d3c  w    F .text	00000006 can0_error_isr
00000d4c g     F .text	00000008 Controller::exitShiftMode()
00001518 g     F .text	0000016c _init_Teensyduino_internal_
00000a28 g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
00000f98 g     F .text	00000058 usb_serial_flush_output
00002d3c  w    F .text	00000006 dma_ch12_isr
000039b8 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00002d3c  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00002d3c  w    F .text	00000006 pit3_isr
00000740 g     F .text	0000001c Piano::play(Step*)
0000099c g     F .text	00000008 Paginator::Paginator(Sequencer*)
00002d3c  w    F .text	00000006 enet_rx_isr
00002d3c  w    F .text	00000006 portc_isr
000029c0 g     F .text	00000010 main
1fff1a44 g     O .bss	00000004 __malloc_max_total_mem
000007ec g     F .text	0000000e Led::on()
00002cf4  w    F .text	00000048 memmanage_fault_isr
00003018 g     F .text	00000084 usb_init_serialnumber
000040a0 g       .text	00000000 __init_array_end
00003448 g     F .text	00000570 _malloc_r
00002d3c  w    F .text	00000006 debugmonitor_isr
1fff15f0 g     O .bss	00000004 usb_midi_handleSongPosition
000031e8 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff15e0 g     O .bss	00000004 usb_midi_handleContinue
1fff1a89 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00002d3c  w    F .text	00000006 cmp1_isr
00002d3c  w    F .text	00000006 ftm0_isr
00003a2c g     F .text	0000009c _malloc_trim_r
1fff0d38 g     O .data	00000004 string0
00000e30 g     F .text	00000108 usb_serial_write
00002d50  w    F .text	00000002 startup_late_hook
00000a00 g     F .text	00000014 Step::controlPitch(int)
000028e8  w    F .text	00000004 usb_serial_class::available()
1fff1a8a g     O .bss	00000001 usb_midi_msg_cable
1fff0d20  w    O .data	00000018 usb_string_product_name
00001474 g     F .text	000000a4 delay
00002d3c  w    F .text	00000006 tpm0_isr
000040a0 g     F .fini	00000000 _fini
00002d3c  w    F .text	00000006 i2s0_rx_isr
00002d3c  w    F .text	00000006 uart4_error_isr
000029a8 g     F .text	00000010 Print::print(long)
000039f8 g     F .text	0000000c atexit
00002d3c  w    F .text	00000006 can0_message_isr
00000cb0 g     F .text	00000094 Controller::toggleMode()
1fff1180 g     O .data	00000004 _impure_ptr
00002d3c  w    F .text	00000006 can1_message_isr
00002d3c  w    F .text	00000006 nmi_isr
0000075c g     F .text	00000024 Led::Led(int, int)
0000046c g     F .text	0000006c Sequencer::Sequencer()
1fff1608 g     O .bss	00000004 usb_midi_handleTuneRequest
0000073c g     F .text	00000002 Piano::tick()
00004094 g       .text	00000000 __preinit_array_end
000009dc g     F .text	0000000a Step::toggle()
00002d3c  w    F .text	00000006 sdhc_isr
1fff1a8b g     O .bss	00000001 usb_midi_msg_channel
00000868 g     F .text	00000002 setup
00004030 g     O .text	00000054 usb_descriptor_list
00001bc0 g     F .text	0000003c usb_rx
0000075c g     F .text	00000024 Led::Led(int, int)
00002d3c  w    F .text	00000006 dma_ch10_isr
1fff1600 g     O .bss	00000004 usb_midi_handleStart
00002d3c  w    F .text	00000006 uart0_error_isr
00001b34 g     F .text	00000040 usb_malloc
00002d3c  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00000f50 g     F .text	00000048 usb_serial_write_buffer_free
00002d3c  w    F .text	00000006 enet_timer_isr
1fff1594 g       .data	00000000 _edata
00002d3c  w    F .text	00000006 i2s0_tx_isr
00002d3c  w    F .text	00000006 adc1_isr
00000a14 g     F .text	00000012 Step::controlVelocity(int)
000028f0  w    F .text	00000004 usb_serial_class::availableForWrite()
00002d3c  w    F .text	00000006 cmp0_isr
1fff15d0 g     O .bss	00000004 usb_midi_handleClock
0000309c g     F .text	0000004c ultoa
000029d4 g     F .text	00000004 operator new(unsigned int)
00003284 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff158c g     O .data	00000004 __malloc_trim_threshold
000028e0  w    F .text	00000004 usb_serial_class::peek()
1fff15b4 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff15ec g     O .bss	00000004 usb_midi_handlePitchChange
00002d3c  w    F .text	00000006 pit_isr
1fff1604 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00002d3c  w    F .text	00000006 dac0_isr
00004094 g       .text	00000000 __init_array_start
00002d3c  w    F .text	00000006 can1_tx_warn_isr
0000125c g     F .text	000000fc analogRead
1fff1a8c g     O .bss	00000122 usb_midi_msg_sysex
00002e08 g     F .text	0000010c uart0_status_isr
00002d3c  w    F .text	00000006 mcg_isr
000009a4 g     F .text	00000004 Paginator::getPage()
00000400 g     O .text	00000010 flashconfigbytes
1fff0d20 g     O .data	00000018 usb_string_product_name_default
00002d3c  w    F .text	00000006 dma_ch1_isr
000008f0 g     F .text	00000020 Transport::startPPQN()
00001bfc g     F .text	0000002c usb_tx_packet_count
00002d3c  w    F .text	00000006 dma_ch5_isr
00002d3c  w    F .text	00000006 can0_rx_warn_isr
00002d3c  w    F .text	00000006 can0_tx_warn_isr
000029f8 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00002d80 g     F .text	00000034 kinetis_hsrun_disable
00004094 g       .text	00000000 __preinit_array_start
1fff15b0 g     O .bss	00000004 sequencer
000031e4  w    F .text	00000002 serialEvent3()
1fff161c g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
00002d3c  w    F .text	00000006 cmp2_isr
000032c8 g     F .text	00000004 pendablesrvreq_isr
00002d3c  w    F .text	00000006 wakeup_isr
00002d3c  w    F .text	00000006 cmp3_isr
00002928 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
000007e0 g     F .text	0000000c Led::off()
1fff15d8 g     O .bss	00000004 usb_midi_handleActiveSensing
00002d3c  w    F .text	00000006 tpm2_isr
00002d3c  w    F .text	00000006 dma_ch0_isr
1fff0d3c  w    O .data	00000016 usb_string_serial_number
00002d3c  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
  free(ptr);
}

void operator delete[](void * ptr)
{
  free(ptr);
       0:	... ....=-...,..
      10:	.,...,...,...,..
      20:	.,...,...,..=-..
      30:	=-...,...2...3..
      40:	=-..=-..=-..=-..
      50:	=-..=-..=-..=-..
      60:	=-..=-..=-..=-..
      70:	=-..=-..=-..=-..
      80:	=-..=-..=-..=-..
      90:	=-..=-..=-..=-..
      a0:	=-..=-..=-..=-..
      b0:	=-..=-..=-......
      c0:	=-...*..=-...1..
      d0:	=-...,..=-..=-..
      e0:	=-..=-..=-..=-..
      f0:	=-..=-..=-..=-..
     100:	=-..=-..=-..=-..
     110:	=-......=-..=-..
     120:	=-..=-..=-..=-..
     130:	=-..=-..=-..=-..
     140:	=-..=-...)..=-..
     150:	=-..=-..=-..=-..
     160:	=-..=-..=-..=-..
     170:	=-..=-..=-..=-..
     180:	=-..=-..=-..=-..
     190:	=-..=-..5/..=-..
     1a0:	=-..=-..=-..=-..
     1b0:	=-..=-..=-..=-..
     1c0:	=-..=-..=-..=-..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	2d44 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	1518 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	141c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	141c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	33e8 <__libc_init_array>

	startup_late_hook();
     33a:	bl	2d50 <startup_late_hook>
	main();
     33e:	bl	29c0 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff1594
     374:	.word	0x000040a0
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff1594
     380:	.word	0x1fff1bc0
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1594
     42c:	.word	0x00000000
     430:	.word	0x000040a4

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff1598
     460:	.word	0x000040a4
     464:	.word	0x1fff1594
     468:	.word	0x00000000

0000046c <Sequencer::Sequencer()>:
#include "paginator.h"
#include "step.h"
#include "led.h"
#include "piano.h"

Sequencer::Sequencer () {
     46c:	push	{r3, r4, r5, r6, r7, lr}
     46e:	mov	r4, r0
  _controller = new Controller(this);
     470:	movs	r0, #80	; 0x50
     472:	bl	29d4 <operator new(unsigned int)>
     476:	mov	r1, r4
     478:	mov	r5, r0
     47a:	bl	adc <Controller::Controller(Sequencer*)>
     47e:	str	r5, [r4, #16]
  _transport = new Transport(this);
     480:	movs	r0, #16
     482:	bl	29d4 <operator new(unsigned int)>
     486:	mov	r1, r4
     488:	mov	r5, r0
     48a:	bl	8a0 <Transport::Transport(Sequencer*)>
     48e:	str	r5, [r4, #12]
  _paginator = new Paginator(this);
     490:	movs	r0, #8
     492:	bl	29d4 <operator new(unsigned int)>
     496:	mov	r1, r4
     498:	mov	r5, r0
     49a:	bl	99c <Paginator::Paginator(Sequencer*)>
     49e:	str	r5, [r4, #20]
  _piano = new Piano(this);
     4a0:	movs	r0, #20
     4a2:	bl	29d4 <operator new(unsigned int)>
     4a6:	mov	r1, r4
     4a8:	mov	r5, r0
     4aa:	bl	6f8 <Piano::Piano(Sequencer*)>
  _reversed = false;
     4ae:	movs	r3, #0

Sequencer::Sequencer () {
  _controller = new Controller(this);
  _transport = new Transport(this);
  _paginator = new Paginator(this);
  _piano = new Piano(this);
     4b0:	str	r5, [r4, #0]
  _reversed = false;
     4b2:	strb	r3, [r4, #4]
  _currentStep = 0;
     4b4:	str	r3, [r4, #8]
     4b6:	add.w	r5, r4, #20
     4ba:	add.w	r7, r4, #36	; 0x24

  for (int i = 0; i < 4; i++){
    _steps[i] = new Step(this);
     4be:	movs	r0, #20
     4c0:	bl	29d4 <operator new(unsigned int)>
     4c4:	mov	r1, r4
     4c6:	mov	r6, r0
     4c8:	bl	9c4 <Step::Step(Sequencer*)>
     4cc:	str.w	r6, [r5, #4]!
  _paginator = new Paginator(this);
  _piano = new Piano(this);
  _reversed = false;
  _currentStep = 0;

  for (int i = 0; i < 4; i++){
     4d0:	cmp	r5, r7
     4d2:	bne.n	4be <Sequencer::Sequencer()+0x52>
    _steps[i] = new Step(this);
  }
};
     4d4:	mov	r0, r4
     4d6:	pop	{r3, r4, r5, r6, r7, pc}

000004d8 <Sequencer::tick()>:

void Sequencer::tick() {
     4d8:	push	{r4, lr}
     4da:	mov	r4, r0
  _transport->tick();
     4dc:	ldr	r0, [r0, #12]
     4de:	bl	984 <Transport::tick()>
  _controller->tick();
     4e2:	ldr	r0, [r4, #16]
}
     4e4:	ldmia.w	sp!, {r4, lr}
  }
};

void Sequencer::tick() {
  _transport->tick();
  _controller->tick();
     4e8:	b.w	c84 <Controller::tick()>

000004ec <Sequencer::reverse()>:
}

void Sequencer::reverse() {
  _reversed = !_reversed;
     4ec:	ldrb	r3, [r0, #4]
     4ee:	eor.w	r3, r3, #1
     4f2:	strb	r3, [r0, #4]
     4f4:	bx	lr
     4f6:	nop

000004f8 <Sequencer::step()>:
}

void Sequencer::step () {  
     4f8:	push	{r4, lr}
     4fa:	mov	r4, r0
  _piano->tick();
     4fc:	ldr	r0, [r0, #0]
     4fe:	bl	73c <Piano::tick()>

  _controller->_leds[_currentStep]->blink();
     502:	ldr	r2, [r4, #8]
     504:	ldr	r3, [r4, #16]
     506:	add.w	r3, r3, r2, lsl #2
     50a:	movs	r1, #0
     50c:	ldr	r0, [r3, #52]	; 0x34
     50e:	bl	780 <Led::blink(int)>

  Step* current = _steps[_currentStep];
     512:	ldr	r3, [r4, #8]
     514:	adds	r2, r3, #6
     516:	ldr.w	r1, [r4, r2, lsl #2]

  if (current->_state) {
     51a:	ldrb	r2, [r1, #16]
     51c:	cbnz	r2, 536 <Sequencer::step()+0x3e>
    _piano->play(current);
  }

  if (!_reversed) {
     51e:	ldrb	r2, [r4, #4]
     520:	cbnz	r2, 52e <Sequencer::step()+0x36>
    _currentStep++;
     522:	adds	r3, #1
     524:	cmp	r3, #3
     526:	it	gt
     528:	movgt	r3, #0
     52a:	str	r3, [r4, #8]
     52c:	pop	{r4, pc}
      _currentStep = 0;
    }
  } else {
    _currentStep--;

    if (_currentStep == -1) {
     52e:	subs	r2, r3, #1
     530:	cbz	r3, 540 <Sequencer::step()+0x48>

    if (_currentStep > 3) {
      _currentStep = 0;
    }
  } else {
    _currentStep--;
     532:	str	r2, [r4, #8]
     534:	pop	{r4, pc}
  _controller->_leds[_currentStep]->blink();

  Step* current = _steps[_currentStep];

  if (current->_state) {
    _piano->play(current);
     536:	ldr	r0, [r4, #0]
     538:	bl	740 <Piano::play(Step*)>
     53c:	ldr	r3, [r4, #8]
     53e:	b.n	51e <Sequencer::step()+0x26>
    }
  } else {
    _currentStep--;

    if (_currentStep == -1) {
      _currentStep = 3;
     540:	movs	r3, #3
     542:	str	r3, [r4, #8]
     544:	pop	{r4, pc}
     546:	nop

00000548 <Sequencer::resetStep()>:
    }
  }
};

void Sequencer::resetStep () {
  _currentStep = 0;
     548:	movs	r3, #0
     54a:	str	r3, [r0, #8]
     54c:	bx	lr
     54e:	nop

00000550 <Button::Button(int, int, Led*, bool, bool, Controller*)>:
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     550:	push	{r3, r4, r5, r6, r7, lr}
     552:	mov	r4, r0
  Led* led,
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
     554:	str	r1, [r0, #0]
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     556:	ldrb.w	r7, [sp, #24]
     55a:	ldrb.w	r6, [sp, #28]
     55e:	ldr	r5, [sp, #32]
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 1000;
  _led = led;
     560:	str	r3, [r0, #52]	; 0x34
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 1000;
     562:	mov.w	r1, #1000	; 0x3e8
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
     566:	str	r2, [r0, #24]
  _reverseButton = reverseButton;
  _holdThreshold = 1000;
  _led = led;
  _controller = controller;

  pinMode(pin, INPUT);
     568:	uxtb	r0, r2
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 1000;
     56a:	str	r1, [r4, #44]	; 0x2c
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
     56c:	strb	r7, [r4, #16]
  _reverseButton = reverseButton;
     56e:	strb	r6, [r4, #17]
  _holdThreshold = 1000;
  _led = led;
  _controller = controller;
     570:	str	r5, [r4, #48]	; 0x30

  pinMode(pin, INPUT);
     572:	movs	r1, #0
     574:	bl	1468 <pinMode>
};
     578:	mov	r0, r4
     57a:	pop	{r3, r4, r5, r6, r7, pc}

0000057c <Button::onPress()>:

void Button::onPress () {
     57c:	push	{r3, r4, r5, lr}
  // Serial.println(_controller.getShiftMode());
  // Serial.println("currentPage");
  // Serial.println(_controller._paginator->getPage());
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
     57e:	ldr	r3, [r0, #4]
     580:	cmp	r3, #1
     582:	beq.n	586 <Button::onPress()+0xa>
     584:	pop	{r3, r4, r5, pc}
     586:	mov	r4, r0
void Button::onPress () {
  // Serial.println(_id);
  // Serial.println(_controller.getShiftMode());
  // Serial.println("currentPage");
  // Serial.println(_controller._paginator->getPage());
  Paginator * paginator = _controller->_sequencer->_paginator;
     588:	ldr	r0, [r0, #48]	; 0x30

  if (_state == HIGH && _shiftButton) {
     58a:	ldrb	r3, [r4, #16]
void Button::onPress () {
  // Serial.println(_id);
  // Serial.println(_controller.getShiftMode());
  // Serial.println("currentPage");
  // Serial.println(_controller._paginator->getPage());
  Paginator * paginator = _controller->_sequencer->_paginator;
     58c:	ldr	r2, [r0, #76]	; 0x4c
     58e:	ldr	r5, [r2, #20]

  if (_state == HIGH && _shiftButton) {
     590:	cbnz	r3, 5b0 <Button::onPress()+0x34>
      paginator->previousPage();
      Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
    }
  } else if (_state == HIGH && _reverseButton) {
     592:	ldrb	r3, [r4, #17]
     594:	cbnz	r3, 5d4 <Button::onPress()+0x58>
    } else {
      _controller->_sequencer->reverse();
      _led->toggle();
    }
  } else if (_state == HIGH) {
    _led->toggle();
     596:	ldr	r0, [r4, #52]	; 0x34
     598:	bl	7b4 <Led::toggle()>
    _controller->_sequencer->_steps[_id - 1]->toggle();
     59c:	ldr	r2, [r4, #48]	; 0x30
     59e:	ldr	r3, [r4, #0]
     5a0:	ldr	r2, [r2, #76]	; 0x4c
     5a2:	adds	r3, #5
     5a4:	ldr.w	r0, [r2, r3, lsl #2]
  } 
}
     5a8:	ldmia.w	sp!, {r3, r4, r5, lr}
      _controller->_sequencer->reverse();
      _led->toggle();
    }
  } else if (_state == HIGH) {
    _led->toggle();
    _controller->_sequencer->_steps[_id - 1]->toggle();
     5ac:	b.w	9dc <Step::toggle()>
  // Serial.println("currentPage");
  // Serial.println(_controller._paginator->getPage());
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
     5b0:	bl	d54 <Controller::getShiftMode()>
     5b4:	cbz	r0, 5e2 <Button::onPress()+0x66>
      paginator->previousPage();
     5b6:	mov	r0, r5
     5b8:	bl	9b4 <Paginator::previousPage()>
      _controller->toggleMode();
    }
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
      paginator->nextPage();
      Serial.println(paginator->getPage());
     5bc:	mov	r0, r5
     5be:	bl	9a4 <Paginator::getPage()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     5c2:	mov	r1, r0
     5c4:	ldr	r0, [pc, #56]	; (600 <Button::onPress()+0x84>)
     5c6:	bl	29a8 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     5ca:	ldr	r0, [pc, #52]	; (600 <Button::onPress()+0x84>)
    }
  } else if (_state == HIGH) {
    _led->toggle();
    _controller->_sequencer->_steps[_id - 1]->toggle();
  } 
}
     5cc:	ldmia.w	sp!, {r3, r4, r5, lr}
     5d0:	b.w	2908 <Print::println()>
      Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
    }
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
     5d4:	bl	d54 <Controller::getShiftMode()>
     5d8:	cbz	r0, 5ec <Button::onPress()+0x70>
      paginator->nextPage();
     5da:	mov	r0, r5
     5dc:	bl	9a8 <Paginator::nextPage()>
     5e0:	b.n	5bc <Button::onPress()+0x40>
  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
      paginator->previousPage();
      Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
     5e2:	ldr	r0, [r4, #48]	; 0x30
    }
  } else if (_state == HIGH) {
    _led->toggle();
    _controller->_sequencer->_steps[_id - 1]->toggle();
  } 
}
     5e4:	ldmia.w	sp!, {r3, r4, r5, lr}
  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
      paginator->previousPage();
      Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
     5e8:	b.w	cb0 <Controller::toggleMode()>
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
      paginator->nextPage();
      Serial.println(paginator->getPage());
    } else {
      _controller->_sequencer->reverse();
     5ec:	ldr	r3, [r4, #48]	; 0x30
     5ee:	ldr	r0, [r3, #76]	; 0x4c
     5f0:	bl	4ec <Sequencer::reverse()>
      _led->toggle();
     5f4:	ldr	r0, [r4, #52]	; 0x34
    }
  } else if (_state == HIGH) {
    _led->toggle();
    _controller->_sequencer->_steps[_id - 1]->toggle();
  } 
}
     5f6:	ldmia.w	sp!, {r3, r4, r5, lr}
    if (_controller->getShiftMode()) {
      paginator->nextPage();
      Serial.println(paginator->getPage());
    } else {
      _controller->_sequencer->reverse();
      _led->toggle();
     5fa:	b.w	7b4 <Led::toggle()>
     5fe:	nop
     600:	.word	0x1fff0c48

00000604 <Button::tick()>:

unsigned long Button::timeSincePress () {
  return (millis() - _firstTime);
}

void Button::tick () {
     604:	push	{r4, r5, lr}
     606:	mov	r4, r0
     608:	sub	sp, #28
  _current = digitalRead(_pin);
     60a:	ldrb	r0, [r0, #24]
     60c:	bl	144c <digitalRead>
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     610:	cmp	r0, #1
unsigned long Button::timeSincePress () {
  return (millis() - _firstTime);
}

void Button::tick () {
  _current = digitalRead(_pin);
     612:	str	r0, [r4, #28]
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     614:	beq.n	658 <Button::tick()+0x54>
     616:	ldr	r3, [r4, #36]	; 0x24
     618:	ldr	r5, [pc, #196]	; (6e0 <Button::tick()+0xdc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     61a:	ldr	r2, [r5, #0]
     61c:	str	r2, [sp, #16]
	return ret;
     61e:	ldr	r2, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     620:	ldr	r1, [pc, #188]	; (6e0 <Button::tick()+0xdc>)
    _firstHoldTime = millis();
    if (!_controller->getShiftMode()) Serial.println("onHold");
    _controller->enterShiftMode();
  }

  if (timeSincePress() > 10) {    
     622:	subs	r2, r2, r3
     624:	cmp	r2, #10
     626:	bls.n	652 <Button::tick()+0x4e>
    if (_state != _current) {
     628:	ldr	r2, [r4, #4]
     62a:	cmp	r0, r2
     62c:	beq.n	652 <Button::tick()+0x4e>
      _state = _current;

      if (_state == HIGH) {
     62e:	cmp	r0, #1
    _controller->enterShiftMode();
  }

  if (timeSincePress() > 10) {    
    if (_state != _current) {
      _state = _current;
     630:	str	r0, [r4, #4]

      if (_state == HIGH) {
     632:	beq.n	6c6 <Button::tick()+0xc2>
     634:	ldr	r2, [r1, #0]
     636:	str	r2, [sp, #20]
	return ret;
     638:	ldr	r2, [sp, #20]
        Serial.println("onPress");      
        onPress();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
     63a:	ldr	r1, [r4, #44]	; 0x2c
     63c:	subs	r3, r2, r3
     63e:	cmp	r1, r3
     640:	bls.n	69a <Button::tick()+0x96>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     642:	movs	r1, #9
     644:	ldr	r0, [pc, #156]	; (6e4 <Button::tick()+0xe0>)
     646:	bl	e30 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     64a:	ldr	r0, [pc, #156]	; (6e8 <Button::tick()+0xe4>)
     64c:	bl	2908 <Print::println()>
     650:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     652:	str	r0, [r4, #32]
};
     654:	add	sp, #28
     656:	pop	{r4, r5, pc}
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     658:	ldr	r2, [r4, #32]
     65a:	cbz	r2, 68e <Button::tick()+0x8a>
    _controller->_sequencer->_steps[_id - 1]->toggle();
  } 
}

bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
     65c:	cmp	r2, #1
     65e:	ldr	r3, [r4, #36]	; 0x24
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     660:	ldr	r5, [pc, #124]	; (6e0 <Button::tick()+0xdc>)
     662:	bne.n	61a <Button::tick()+0x16>
     664:	ldr	r2, [r5, #0]
     666:	str	r2, [sp, #12]
	return ret;
     668:	ldr	r2, [sp, #12]

  if (currentWentUp()) {
    _firstTime = millis();
  }

  if (currentIsUp() && timeSincePress() > _holdThreshold) {
     66a:	ldr	r1, [r4, #44]	; 0x2c
     66c:	subs	r2, r2, r3
     66e:	cmp	r1, r2
     670:	bcs.n	61a <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     672:	ldr	r3, [r5, #0]
     674:	str	r3, [sp, #8]
	return ret;
     676:	ldr	r3, [sp, #8]
    _firstHoldTime = millis();
     678:	str	r3, [r4, #40]	; 0x28
    if (!_controller->getShiftMode()) Serial.println("onHold");
     67a:	ldr	r0, [r4, #48]	; 0x30
     67c:	bl	d54 <Controller::getShiftMode()>
     680:	cbz	r0, 6b6 <Button::tick()+0xb2>
    _controller->enterShiftMode();
     682:	ldr	r0, [r4, #48]	; 0x30
     684:	bl	d44 <Controller::enterShiftMode()>
     688:	ldr	r0, [r4, #28]
     68a:	ldr	r3, [r4, #36]	; 0x24
     68c:	b.n	61a <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     68e:	ldr	r5, [pc, #80]	; (6e0 <Button::tick()+0xdc>)
     690:	ldr	r3, [r5, #0]
     692:	str	r3, [sp, #4]
	return ret;
     694:	ldr	r3, [sp, #4]

void Button::tick () {
  _current = digitalRead(_pin);

  if (currentWentUp()) {
    _firstTime = millis();
     696:	str	r3, [r4, #36]	; 0x24
     698:	b.n	61a <Button::tick()+0x16>
     69a:	movs	r1, #13
     69c:	ldr	r0, [pc, #76]	; (6ec <Button::tick()+0xe8>)
     69e:	bl	e30 <usb_serial_write>
     6a2:	ldr	r0, [pc, #68]	; (6e8 <Button::tick()+0xe4>)
     6a4:	bl	2908 <Print::println()>
        onPress();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
          Serial.println("onHoldRelease");
          _controller->exitShiftMode();
     6a8:	ldr	r0, [r4, #48]	; 0x30
     6aa:	bl	d4c <Controller::exitShiftMode()>
     6ae:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     6b0:	str	r0, [r4, #32]
};
     6b2:	add	sp, #28
     6b4:	pop	{r4, r5, pc}
     6b6:	movs	r1, #6
     6b8:	ldr	r0, [pc, #52]	; (6f0 <Button::tick()+0xec>)
     6ba:	bl	e30 <usb_serial_write>
     6be:	ldr	r0, [pc, #40]	; (6e8 <Button::tick()+0xe4>)
     6c0:	bl	2908 <Print::println()>
     6c4:	b.n	682 <Button::tick()+0x7e>
     6c6:	movs	r1, #7
     6c8:	ldr	r0, [pc, #40]	; (6f4 <Button::tick()+0xf0>)
     6ca:	bl	e30 <usb_serial_write>
     6ce:	ldr	r0, [pc, #24]	; (6e8 <Button::tick()+0xe4>)
     6d0:	bl	2908 <Print::println()>
    if (_state != _current) {
      _state = _current;

      if (_state == HIGH) {
        Serial.println("onPress");      
        onPress();
     6d4:	mov	r0, r4
     6d6:	bl	57c <Button::onPress()>
     6da:	ldr	r0, [r4, #28]
     6dc:	b.n	652 <Button::tick()+0x4e>
     6de:	nop
     6e0:	.word	0x1fff15cc
     6e4:	.word	0x00003d5c
     6e8:	.word	0x1fff0c48
     6ec:	.word	0x00003d4c
     6f0:	.word	0x00003d3c
     6f4:	.word	0x00003d44

000006f8 <Piano::Piano(Sequencer*)>:
#include "note.h"
#include "piano.h"
#include "step.h"


Piano::Piano (Sequencer* sequencer) {
     6f8:	push	{r3, r4, r5, lr}
     6fa:	mov	r4, r0
  _sequencer = sequencer;
  _notes[0] = new Note();
     6fc:	movs	r0, #20
#include "piano.h"
#include "step.h"


Piano::Piano (Sequencer* sequencer) {
  _sequencer = sequencer;
     6fe:	str	r1, [r4, #16]
  _notes[0] = new Note();
     700:	bl	29d4 <operator new(unsigned int)>
     704:	mov	r5, r0
     706:	bl	890 <Note::Note()>
     70a:	str	r5, [r4, #0]
  _notes[1] = new Note();
     70c:	movs	r0, #20
     70e:	bl	29d4 <operator new(unsigned int)>
     712:	mov	r5, r0
     714:	bl	890 <Note::Note()>
     718:	str	r5, [r4, #4]
  _notes[2] = new Note();
     71a:	movs	r0, #20
     71c:	bl	29d4 <operator new(unsigned int)>
     720:	mov	r5, r0
     722:	bl	890 <Note::Note()>
     726:	str	r5, [r4, #8]
  _notes[3] = new Note();
     728:	movs	r0, #20
     72a:	bl	29d4 <operator new(unsigned int)>
     72e:	mov	r5, r0
     730:	bl	890 <Note::Note()>
     734:	str	r5, [r4, #12]
};
     736:	mov	r0, r4
     738:	pop	{r3, r4, r5, pc}
     73a:	nop

0000073c <Piano::tick()>:

void Piano::tick () {
     73c:	bx	lr
     73e:	nop

00000740 <Piano::play(Step*)>:
  
};

void Piano::play (Step* step) {
     740:	push	{r3, lr}
     742:	movs	r1, #4
     744:	ldr	r0, [pc, #12]	; (754 <Piano::play(Step*)+0x14>)
     746:	bl	e30 <usb_serial_write>
     74a:	ldr	r0, [pc, #12]	; (758 <Piano::play(Step*)+0x18>)
  Serial.println("Play");
};
     74c:	ldmia.w	sp!, {r3, lr}
     750:	b.w	2908 <Print::println()>
     754:	.word	0x00003d68
     758:	.word	0x1fff0c48

0000075c <Led::Led(int, int)>:
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
     75c:	push	{r3, r4, r5, lr}
     75e:	mov	r4, r0
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     760:	movs	r3, #0
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     762:	movs	r5, #75	; 0x4b
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
     764:	stmia.w	r0, {r1, r2}
  _state = state;
  _blinkLength = 75;
  _blinking = false;

  pinMode(_pin, OUTPUT);
     768:	uxtb	r0, r1

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     76a:	strb	r3, [r4, #16]
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     76c:	str	r5, [r4, #12]
  _blinking = false;

  pinMode(_pin, OUTPUT);
     76e:	movs	r1, #1
     770:	bl	1468 <pinMode>
  digitalWrite(_pin, _state);
     774:	ldrb	r0, [r4, #0]
     776:	ldrb	r1, [r4, #4]
     778:	bl	1440 <digitalWrite>
};
     77c:	mov	r0, r4
     77e:	pop	{r3, r4, r5, pc}

00000780 <Led::blink(int)>:

void Led::blink (int times) {
     780:	push	{r4, r5, r6, lr}
  digitalWrite(_pin, !digitalRead(_pin));
     782:	ldrb	r5, [r0, #0]

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     784:	sub	sp, #8
     786:	mov	r4, r0
  digitalWrite(_pin, !digitalRead(_pin));
     788:	mov	r0, r5

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     78a:	mov	r6, r1
  digitalWrite(_pin, !digitalRead(_pin));
     78c:	bl	144c <digitalRead>
     790:	clz	r1, r0
     794:	lsrs	r1, r1, #5
     796:	mov	r0, r5
     798:	bl	1440 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     79c:	ldr	r3, [pc, #16]	; (7b0 <Led::blink(int)+0x30>)
  _blinking = true;
  _blinkingCounter = times;
     79e:	str	r6, [r4, #20]
     7a0:	ldr	r3, [r3, #0]
     7a2:	str	r3, [sp, #4]
	return ret;
     7a4:	ldr	r3, [sp, #4]
  _lastBlink = millis();  
     7a6:	str	r3, [r4, #8]
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
  digitalWrite(_pin, !digitalRead(_pin));
  _blinking = true;
     7a8:	movs	r2, #1
     7aa:	strb	r2, [r4, #16]
  _blinkingCounter = times;
  _lastBlink = millis();  
};
     7ac:	add	sp, #8
     7ae:	pop	{r4, r5, r6, pc}
     7b0:	.word	0x1fff15cc

000007b4 <Led::toggle()>:

void Led::toggle () {
  _state = !_state;
     7b4:	ldr	r1, [r0, #4]
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     7b6:	push	{r4, lr}
  _state = !_state;
     7b8:	clz	r1, r1
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     7bc:	mov	r4, r0
  _state = !_state;
     7be:	lsrs	r1, r1, #5

  digitalWrite(_pin, _state);
     7c0:	ldrb	r0, [r0, #0]
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
  _state = !_state;
     7c2:	str	r1, [r4, #4]

  digitalWrite(_pin, _state);
     7c4:	bl	1440 <digitalWrite>

  if (_blinking) {
     7c8:	ldrb	r3, [r4, #16]
     7ca:	cbnz	r3, 7ce <Led::toggle()+0x1a>
     7cc:	pop	{r4, pc}
    digitalWrite(_pin, !_state);
     7ce:	ldr	r1, [r4, #4]
     7d0:	ldrb	r0, [r4, #0]
     7d2:	clz	r1, r1
     7d6:	lsrs	r1, r1, #5
  }
};
     7d8:	ldmia.w	sp!, {r4, lr}
  _state = !_state;

  digitalWrite(_pin, _state);

  if (_blinking) {
    digitalWrite(_pin, !_state);
     7dc:	b.w	1440 <digitalWrite>

000007e0 <Led::off()>:
  }
};

void Led::off () {
  _blinking = false;
     7e0:	movs	r1, #0
     7e2:	strb	r1, [r0, #16]
  _state = 0;
     7e4:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     7e6:	ldrb	r0, [r0, #0]
     7e8:	b.w	1440 <digitalWrite>

000007ec <Led::on()>:
}

void Led::on () {
  _blinking = false;
     7ec:	movs	r3, #0
  _state = 1;
     7ee:	movs	r1, #1
  _state = 0;
  digitalWrite(_pin, _state);
}

void Led::on () {
  _blinking = false;
     7f0:	strb	r3, [r0, #16]
  _state = 1;
     7f2:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     7f4:	ldrb	r0, [r0, #0]
     7f6:	b.w	1440 <digitalWrite>
     7fa:	nop

000007fc <Led::tick()>:

bool Led::blinkTimePassed () {
  return millis() - _lastBlink > _blinkLength;
};

void Led::tick () {
     7fc:	push	{r4, r5, r6, lr}
  if (_blinking && blinkTimePassed()) {
     7fe:	ldrb	r3, [r0, #16]

bool Led::blinkTimePassed () {
  return millis() - _lastBlink > _blinkLength;
};

void Led::tick () {
     800:	sub	sp, #16
     802:	mov	r4, r0
  if (_blinking && blinkTimePassed()) {
     804:	cbz	r3, 838 <Led::tick()+0x3c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     806:	ldr	r5, [pc, #92]	; (864 <Led::tick()+0x68>)
     808:	ldr	r1, [r0, #8]
     80a:	ldr	r3, [r5, #0]
     80c:	str	r3, [sp, #8]
	return ret;
     80e:	ldr	r3, [sp, #8]
     810:	ldr	r2, [r0, #12]
     812:	subs	r3, r3, r1
     814:	cmp	r3, r2
     816:	bls.n	85e <Led::tick()+0x62>
    digitalWrite(_pin, !digitalRead(_pin));
     818:	ldrb	r6, [r0, #0]
     81a:	mov	r0, r6
     81c:	bl	144c <digitalRead>
     820:	clz	r1, r0
     824:	lsrs	r1, r1, #5
     826:	mov	r0, r6
     828:	bl	1440 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     82c:	ldr	r3, [r5, #0]
     82e:	str	r3, [sp, #4]
	return ret;
     830:	ldr	r3, [sp, #4]
    _blinking = false;
    _lastBlink = millis();        
     832:	str	r3, [r4, #8]
};

void Led::tick () {
  if (_blinking && blinkTimePassed()) {
    digitalWrite(_pin, !digitalRead(_pin));
    _blinking = false;
     834:	movs	r3, #0
     836:	strb	r3, [r4, #16]
    _lastBlink = millis();        
  }

  if (!_blinking && _blinkingCounter > 0 && blinkTimePassed()) {
     838:	ldr	r1, [r4, #20]
     83a:	cmp	r1, #0
     83c:	ble.n	85e <Led::tick()+0x62>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     83e:	ldr	r3, [pc, #36]	; (864 <Led::tick()+0x68>)
     840:	ldr	r0, [r4, #8]
     842:	ldr	r3, [r3, #0]
     844:	str	r3, [sp, #12]
	return ret;
     846:	ldr	r3, [sp, #12]
     848:	ldr	r2, [r4, #12]
     84a:	subs	r3, r3, r0
     84c:	cmp	r3, r2
     84e:	bls.n	85e <Led::tick()+0x62>
    blink(_blinkingCounter - 1);
     850:	subs	r1, #1
     852:	mov	r0, r4
     854:	bl	780 <Led::blink(int)>
    _blinkingCounter--;
     858:	ldr	r3, [r4, #20]
     85a:	subs	r3, #1
     85c:	str	r3, [r4, #20]
  }
};
     85e:	add	sp, #16
     860:	pop	{r4, r5, r6, pc}
     862:	nop
     864:	.word	0x1fff15cc

00000868 <setup>:
#include <Arduino.h>
#include "sequencer.h"

Sequencer* sequencer = new Sequencer();

void setup() {
     868:	bx	lr
     86a:	nop

0000086c <loop>:
  Serial.begin(9600);
}

void loop() {
  sequencer->tick();
     86c:	ldr	r3, [pc, #4]	; (874 <loop+0x8>)
     86e:	ldr	r0, [r3, #0]
     870:	b.w	4d8 <Sequencer::tick()>
     874:	.word	0x1fff15b0

00000878 <_GLOBAL__sub_I_sequencer>:
     878:	push	{r4, lr}
#include <Arduino.h>
#include "sequencer.h"

Sequencer* sequencer = new Sequencer();
     87a:	movs	r0, #40	; 0x28
     87c:	bl	29d4 <operator new(unsigned int)>
     880:	mov	r4, r0
     882:	bl	46c <Sequencer::Sequencer()>
     886:	ldr	r3, [pc, #4]	; (88c <_GLOBAL__sub_I_sequencer+0x14>)
     888:	str	r4, [r3, #0]
     88a:	pop	{r4, pc}
     88c:	.word	0x1fff15b0

00000890 <Note::Note()>:
#include <Arduino.h>
#include "step.h"
#include "note.h"

Note::Note () {
  _length = 0;
     890:	movs	r2, #0
     892:	str	r2, [r0, #8]
  _pitch = 0;
     894:	str	r2, [r0, #0]
  _velocity = 0;
     896:	str	r2, [r0, #4]
  _channel = 0;
     898:	str	r2, [r0, #12]
  _active = false;
     89a:	str	r2, [r0, #16]
};
     89c:	bx	lr
     89e:	nop

000008a0 <Transport::Transport(Sequencer*)>:
// and its job is also to tell the sequence when the next step starts
// its then responsibility of the controller to create the note and its responsibility
// of the note when to stop sounding. 
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
     8a0:	push	{r4}
  _sequencer = sequencer;
  _state = false;
  max_ppqn = 24;
     8a2:	movs	r4, #24
// of the note when to stop sounding. 
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     8a4:	movs	r2, #0
  max_ppqn = 24;
     8a6:	stmia.w	r0, {r1, r4}
// of the note when to stop sounding. 
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     8aa:	str	r2, [r0, #12]
  max_ppqn = 24;
  ppqn = 0;
     8ac:	str	r2, [r0, #8]
};
     8ae:	ldr.w	r4, [sp], #4
     8b2:	bx	lr

000008b4 <Transport::controlTempo(int)>:
int Transport::getPPQN () {
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
     8b4:	cmp.w	r1, #400	; 0x190
     8b8:	bge.n	8ca <Transport::controlTempo(int)+0x16>
    max_ppqn = 6;

    if (ppqn >= 6) {
     8ba:	ldr	r3, [r0, #8]
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
    max_ppqn = 6;
     8bc:	movs	r2, #6

    if (ppqn >= 6) {
     8be:	cmp	r3, #5
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
    max_ppqn = 6;
     8c0:	str	r2, [r0, #4]

    if (ppqn >= 6) {
     8c2:	ble.n	8e0 <Transport::controlTempo(int)+0x2c>
      ppqn = 0;
     8c4:	movs	r3, #0
     8c6:	str	r3, [r0, #8]
     8c8:	bx	lr
    }
  } else if (value >= 400 && value < 800) {
     8ca:	sub.w	r3, r1, #400	; 0x190
     8ce:	cmp.w	r3, #400	; 0x190
     8d2:	bcc.n	8e2 <Transport::controlTempo(int)+0x2e>
    max_ppqn = 8;

    if (ppqn >= 8) {
      ppqn = 0;
    }
  } else if (value >= 800 && value <= 1023) {
     8d4:	sub.w	r1, r1, #800	; 0x320
     8d8:	cmp	r1, #223	; 0xdf
    max_ppqn = 10;
     8da:	itt	ls
     8dc:	movls	r3, #10
     8de:	strls	r3, [r0, #4]
     8e0:	bx	lr
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;

    if (ppqn >= 8) {
     8e2:	ldr	r3, [r0, #8]

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;
     8e4:	movs	r2, #8

    if (ppqn >= 8) {
     8e6:	cmp	r3, #7

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;
     8e8:	str	r2, [r0, #4]

    if (ppqn >= 8) {
     8ea:	bgt.n	8c4 <Transport::controlTempo(int)+0x10>
     8ec:	bx	lr
     8ee:	nop

000008f0 <Transport::startPPQN()>:
    _sequencer->step(); 
    ppqn = 0;
  }
};

void Transport::startPPQN () {
     8f0:	push	{r4, lr}
  _state = true;
  ppqn = 0;
     8f2:	movs	r3, #0
    _sequencer->step(); 
    ppqn = 0;
  }
};

void Transport::startPPQN () {
     8f4:	mov	r4, r0
  _state = true;
     8f6:	movs	r2, #1
  ppqn = 0;
     8f8:	str	r3, [r0, #8]
    ppqn = 0;
  }
};

void Transport::startPPQN () {
  _state = true;
     8fa:	str	r2, [r0, #12]
  ppqn = 0;
  _sequencer->step(); 
     8fc:	ldr	r0, [r0, #0]
     8fe:	bl	4f8 <Sequencer::step()>
  _sequencer->_controller->_leds[5]->toggle();
     902:	ldr	r3, [r4, #0]
     904:	ldr	r3, [r3, #16]
};
     906:	ldmia.w	sp!, {r4, lr}

void Transport::startPPQN () {
  _state = true;
  ppqn = 0;
  _sequencer->step(); 
  _sequencer->_controller->_leds[5]->toggle();
     90a:	ldr	r0, [r3, #72]	; 0x48
     90c:	b.w	7b4 <Led::toggle()>

00000910 <Transport::stopPPQN()>:
};

void Transport::stopPPQN () {
     910:	push	{r4, lr}
  _state = false;
     912:	movs	r3, #0
  ppqn = 0;
  _sequencer->step(); 
  _sequencer->_controller->_leds[5]->toggle();
};

void Transport::stopPPQN () {
     914:	mov	r4, r0
  _state = false;
     916:	str	r3, [r0, #12]
  ppqn = 0;
     918:	str	r3, [r0, #8]
  _sequencer->resetStep();
     91a:	ldr	r0, [r0, #0]
     91c:	bl	548 <Sequencer::resetStep()>
  _sequencer->_controller->_leds[5]->toggle();
     920:	ldr	r3, [r4, #0]
     922:	ldr	r3, [r3, #16]
};
     924:	ldmia.w	sp!, {r4, lr}

void Transport::stopPPQN () {
  _state = false;
  ppqn = 0;
  _sequencer->resetStep();
  _sequencer->_controller->_leds[5]->toggle();
     928:	ldr	r0, [r3, #72]	; 0x48
     92a:	b.w	7b4 <Led::toggle()>
     92e:	nop

00000930 <Transport::processMidi()>:
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     930:	ldr	r3, [pc, #68]	; (978 <Transport::processMidi()+0x48>)
  // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
  // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
  // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
  // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

  switch (type) {
     932:	ldrb	r3, [r3, #0]
     934:	cmp	r3, #250	; 0xfa
     936:	beq.n	968 <Transport::processMidi()+0x38>
     938:	cmp	r3, #252	; 0xfc
     93a:	beq.n	964 <Transport::processMidi()+0x34>
     93c:	cmp	r3, #248	; 0xf8
    max_ppqn = 10;
  }
};

  // move midi to midi class
void Transport::processMidi () {
     93e:	push	{r4, lr}
     940:	mov	r4, r0
  // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
  // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
  // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
  // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

  switch (type) {
     942:	beq.n	956 <Transport::processMidi()+0x26>
     944:	movs	r1, #35	; 0x23
     946:	ldr	r0, [pc, #52]	; (97c <Transport::processMidi()+0x4c>)
     948:	bl	e30 <usb_serial_write>
     94c:	ldr	r0, [pc, #48]	; (980 <Transport::processMidi()+0x50>)
      break;

    default:
      Serial.println("Opps, an unknown MIDI message type!");
  }
}
     94e:	ldmia.w	sp!, {r4, lr}
     952:	b.w	2908 <Print::println()>

void Transport::advancePPQN () {
  ++ppqn;
     956:	ldr	r3, [r0, #8]

  if (ppqn == max_ppqn) {
     958:	ldr	r1, [r0, #4]
      Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
  ++ppqn;
     95a:	adds	r3, #1

  if (ppqn == max_ppqn) {
     95c:	cmp	r3, r1
      Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
  ++ppqn;
     95e:	str	r3, [r0, #8]

  if (ppqn == max_ppqn) {
     960:	beq.n	96c <Transport::processMidi()+0x3c>
     962:	pop	{r4, pc}
    case usbMIDI.Start: // 0xFA
      startPPQN();
      break;

    case usbMIDI.Stop: // 0xFC
      stopPPQN();
     964:	b.w	910 <Transport::stopPPQN()>
    case usbMIDI.Clock: // 0xF8 
      advancePPQN();
      break;

    case usbMIDI.Start: // 0xFA
      startPPQN();
     968:	b.w	8f0 <Transport::startPPQN()>

void Transport::advancePPQN () {
  ++ppqn;

  if (ppqn == max_ppqn) {
    _sequencer->step(); 
     96c:	ldr	r0, [r0, #0]
     96e:	bl	4f8 <Sequencer::step()>
    ppqn = 0;
     972:	movs	r3, #0
     974:	str	r3, [r4, #8]
     976:	pop	{r4, pc}
     978:	.word	0x1fff1a84
     97c:	.word	0x00003d70
     980:	.word	0x1fff0c48

00000984 <Transport::tick()>:
  _state = false;
  max_ppqn = 24;
  ppqn = 0;
};

void Transport::tick () {
     984:	push	{r4, lr}
     986:	mov	r4, r0
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     988:	movs	r0, #0
     98a:	bl	16f8 <usb_midi_read>
  if (usbMIDI.read()) {
     98e:	cbnz	r0, 992 <Transport::tick()+0xe>
     990:	pop	{r4, pc}
    processMidi();
     992:	mov	r0, r4
  }
};
     994:	ldmia.w	sp!, {r4, lr}
  ppqn = 0;
};

void Transport::tick () {
  if (usbMIDI.read()) {
    processMidi();
     998:	b.w	930 <Transport::processMidi()>

0000099c <Paginator::Paginator(Sequencer*)>:
#include "paginator.h"

Paginator::Paginator (Sequencer* sequencer) {
  _sequencer = sequencer;
  _page = 1;
     99c:	movs	r2, #1
#include "paginator.h"

Paginator::Paginator (Sequencer* sequencer) {
  _sequencer = sequencer;
     99e:	str	r1, [r0, #4]
  _page = 1;
     9a0:	str	r2, [r0, #0]
};
     9a2:	bx	lr

000009a4 <Paginator::getPage()>:

int Paginator::getPage () {
  return _page;
}
     9a4:	ldr	r0, [r0, #0]
     9a6:	bx	lr

000009a8 <Paginator::nextPage()>:

void Paginator::nextPage () {
  if (_page < 4) _page++;
     9a8:	ldr	r3, [r0, #0]
     9aa:	cmp	r3, #3
     9ac:	itt	le
     9ae:	addle	r3, #1
     9b0:	strle	r3, [r0, #0]
     9b2:	bx	lr

000009b4 <Paginator::previousPage()>:
};

void Paginator::previousPage () {
  if (_page > 1) _page--;
     9b4:	ldr	r3, [r0, #0]
     9b6:	cmp	r3, #1
     9b8:	itt	gt
     9ba:	addgt.w	r3, r3, #4294967295
     9be:	strgt	r3, [r0, #0]
     9c0:	bx	lr
     9c2:	nop

000009c4 <Step::Step(Sequencer*)>:
#include <Arduino.h>
#include "step.h"

Step::Step(Sequencer* sequencer) {
     9c4:	push	{r4, r5, r6}
  _state = false;
     9c6:	movs	r6, #0
  _sequencer = sequencer;
  pitch = 38;
     9c8:	movs	r5, #38	; 0x26
  velocity = 100;
     9ca:	movs	r4, #100	; 0x64
  length = 1;
     9cc:	movs	r2, #1
#include <Arduino.h>
#include "step.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
     9ce:	strb	r6, [r0, #16]
  _sequencer = sequencer;
  pitch = 38;
     9d0:	str	r5, [r0, #4]
  velocity = 100;
     9d2:	str	r4, [r0, #8]
#include <Arduino.h>
#include "step.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
  _sequencer = sequencer;
     9d4:	str	r1, [r0, #0]
  pitch = 38;
  velocity = 100;
  length = 1;
     9d6:	str	r2, [r0, #12]
};
     9d8:	pop	{r4, r5, r6}
     9da:	bx	lr

000009dc <Step::toggle()>:

void Step::toggle () {
  _state = !_state;
     9dc:	ldrb	r3, [r0, #16]
     9de:	eor.w	r3, r3, #1
     9e2:	strb	r3, [r0, #16]
     9e4:	bx	lr
     9e6:	nop

000009e8 <Step::controlLength(int)>:
};

void Step::controlLength (int value) {
  int newValue = map(value, 0, 1023, 24, 1);
  length = newValue;
     9e8:	mvn.w	r3, #21
     9ec:	mul.w	r1, r3, r1
     9f0:	cmp	r1, #0
     9f2:	it	lt
     9f4:	addwlt	r1, r1, #1023	; 0x3ff
     9f8:	asrs	r1, r1, #10
     9fa:	adds	r1, #24
     9fc:	str	r1, [r0, #12]
     9fe:	bx	lr

00000a00 <Step::controlPitch(int)>:
};

void Step::controlPitch (int value) {
  int newValue = map(value, 0, 1023, 51, 38);
  pitch = newValue;
     a00:	sub.w	r1, r1, r1, lsl #2
     a04:	lsls	r1, r1, #2
     a06:	it	mi
     a08:	addwmi	r1, r1, #1023	; 0x3ff
     a0c:	asrs	r1, r1, #10
     a0e:	adds	r1, #51	; 0x33
     a10:	str	r1, [r0, #4]
     a12:	bx	lr

00000a14 <Step::controlVelocity(int)>:
};

void Step::controlVelocity (int value) {
  int newValue = map(value, 0, 1023, 127, 63);
  velocity = newValue;
     a14:	subs.w	r1, r1, r1, lsl #6
     a18:	it	mi
     a1a:	addwmi	r1, r1, #1023	; 0x3ff
     a1e:	asrs	r1, r1, #10
     a20:	adds	r1, #127	; 0x7f
     a22:	str	r1, [r0, #8]
     a24:	bx	lr
     a26:	nop

00000a28 <Knob::Knob(unsigned char, int, Controller*)>:
#include "controller.h"
#include "step.h"
#include "sequencer.h"
#include "transport.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
     a28:	push	{r4, r5}
  _pin = pin;
  _id = id;
  _controller = controller;
  _value = 0;
     a2a:	movs	r5, #0
     a2c:	str	r5, [r0, #4]
#include "step.h"
#include "sequencer.h"
#include "transport.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
  _pin = pin;
     a2e:	str	r1, [r0, #0]
  _id = id;
     a30:	str	r2, [r0, #12]
  _controller = controller;
     a32:	str	r3, [r0, #16]
  _value = 0;
};
     a34:	pop	{r4, r5}
     a36:	bx	lr

00000a38 <Knob::onChange()>:

void Knob::onChange () {
  if (_id == 5) {
     a38:	ldr	r3, [r0, #12]
     a3a:	cmp	r3, #5
     a3c:	beq.n	a76 <Knob::onChange()+0x3e>
  _id = id;
  _controller = controller;
  _value = 0;
};

void Knob::onChange () {
     a3e:	push	{r4, lr}
     a40:	mov	r4, r0
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
     a42:	ldr	r0, [r0, #16]
     a44:	bl	d5c <Controller::getMode()>
     a48:	cmp	r0, #1
     a4a:	beq.n	a82 <Knob::onChange()+0x4a>
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
     a4c:	ldr	r0, [r4, #16]
     a4e:	bl	d5c <Controller::getMode()>
     a52:	cbz	r0, a60 <Knob::onChange()+0x28>
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
     a54:	ldr	r0, [r4, #16]
     a56:	bl	d5c <Controller::getMode()>
     a5a:	cmp	r0, #2
     a5c:	beq.n	a98 <Knob::onChange()+0x60>
     a5e:	pop	{r4, pc}
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
     a60:	ldr	r2, [r4, #16]
     a62:	ldr	r3, [r4, #12]
     a64:	ldr	r2, [r2, #76]	; 0x4c
     a66:	ldr	r1, [r4, #4]
     a68:	adds	r3, #6
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_steps[_id]->controlLength(_value);
  }
}
     a6a:	ldmia.w	sp!, {r4, lr}
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
     a6e:	ldr.w	r0, [r2, r3, lsl #2]
     a72:	b.w	a00 <Step::controlPitch(int)>
  _value = 0;
};

void Knob::onChange () {
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
     a76:	ldr	r3, [r0, #16]
     a78:	ldr	r1, [r0, #4]
     a7a:	ldr	r3, [r3, #76]	; 0x4c
     a7c:	ldr	r0, [r3, #12]
     a7e:	b.w	8b4 <Transport::controlTempo(int)>
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
     a82:	ldr	r2, [r4, #16]
     a84:	ldr	r3, [r4, #12]
     a86:	ldr	r2, [r2, #76]	; 0x4c
     a88:	ldr	r1, [r4, #4]
     a8a:	adds	r3, #6
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_steps[_id]->controlLength(_value);
  }
}
     a8c:	ldmia.w	sp!, {r4, lr}

void Knob::onChange () {
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
     a90:	ldr.w	r0, [r2, r3, lsl #2]
     a94:	b.w	a14 <Step::controlVelocity(int)>
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_steps[_id]->controlLength(_value);
     a98:	ldr	r2, [r4, #16]
     a9a:	ldr	r3, [r4, #12]
     a9c:	ldr	r2, [r2, #76]	; 0x4c
     a9e:	ldr	r1, [r4, #4]
     aa0:	adds	r3, #6
  }
}
     aa2:	ldmia.w	sp!, {r4, lr}
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_steps[_id]->controlLength(_value);
     aa6:	ldr.w	r0, [r2, r3, lsl #2]
     aaa:	b.w	9e8 <Step::controlLength(int)>
     aae:	nop

00000ab0 <Knob::tick()>:
  }
}

// todo latch
void Knob::tick () {
     ab0:	push	{r4, lr}
     ab2:	mov	r4, r0
  _value = analogRead(_pin);
     ab4:	ldrb	r0, [r0, #0]
     ab6:	bl	125c <analogRead>

  int diff = abs(_value - _lastValue);
     aba:	ldr	r3, [r4, #8]
  }
}

// todo latch
void Knob::tick () {
  _value = analogRead(_pin);
     abc:	str	r0, [r4, #4]

  int diff = abs(_value - _lastValue);

  // "filter"
  const boolean isChanging = _value != _lastValue && diff > 10;
     abe:	cmp	r0, r3
     ac0:	beq.n	ad8 <Knob::tick()+0x28>
     ac2:	subs	r0, r0, r3
     ac4:	cmp	r0, #0
     ac6:	it	lt
     ac8:	neglt	r0, r0
     aca:	cmp	r0, #10
     acc:	ble.n	ad8 <Knob::tick()+0x28>

  if (isChanging) {
    onChange();
     ace:	mov	r0, r4
     ad0:	bl	a38 <Knob::onChange()>

    _lastValue = _value;
     ad4:	ldr	r3, [r4, #4]
     ad6:	str	r3, [r4, #8]
     ad8:	pop	{r4, pc}
     ada:	nop

00000adc <Controller::Controller(Sequencer*)>:
#include "button.h"
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"

Controller::Controller (Sequencer* sequencer) {
     adc:	push	{r4, r5, r6, r7, lr}
  _sequencer = sequencer;
  _currentMode = PITCH;
     ade:	movs	r5, #0
#include "button.h"
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"

Controller::Controller (Sequencer* sequencer) {
     ae0:	sub	sp, #20
     ae2:	mov	r4, r0
  _sequencer = sequencer;
     ae4:	str	r1, [r0, #76]	; 0x4c
  _currentMode = PITCH;
     ae6:	strb.w	r5, [r0, #49]	; 0x31
  _shiftMode = false;
     aea:	strb.w	r5, [r0, #48]	; 0x30
  
  _leds[0] = new Led(3, LOW);
     aee:	movs	r0, #24
     af0:	bl	29d4 <operator new(unsigned int)>
     af4:	mov	r2, r5
     af6:	mov	r6, r0
     af8:	movs	r1, #3
     afa:	bl	75c <Led::Led(int, int)>
     afe:	str	r6, [r4, #52]	; 0x34
  _leds[1] = new Led(5, LOW);
     b00:	movs	r0, #24
     b02:	bl	29d4 <operator new(unsigned int)>
     b06:	mov	r2, r5
     b08:	mov	r6, r0
     b0a:	movs	r1, #5
     b0c:	bl	75c <Led::Led(int, int)>
     b10:	str	r6, [r4, #56]	; 0x38
  _leds[2] = new Led(7, LOW);
     b12:	movs	r0, #24
     b14:	bl	29d4 <operator new(unsigned int)>
     b18:	mov	r2, r5
     b1a:	mov	r6, r0
     b1c:	movs	r1, #7
     b1e:	bl	75c <Led::Led(int, int)>
     b22:	str	r6, [r4, #60]	; 0x3c
  _leds[3] = new Led(9, LOW);
     b24:	movs	r0, #24
     b26:	bl	29d4 <operator new(unsigned int)>
     b2a:	mov	r2, r5
     b2c:	mov	r6, r0
     b2e:	movs	r1, #9
     b30:	bl	75c <Led::Led(int, int)>
     b34:	str	r6, [r4, #64]	; 0x40
  _leds[4] = new Led(11, LOW);
     b36:	movs	r0, #24
     b38:	bl	29d4 <operator new(unsigned int)>
     b3c:	mov	r2, r5
     b3e:	mov	r6, r0
     b40:	movs	r1, #11
     b42:	bl	75c <Led::Led(int, int)>
     b46:	str	r6, [r4, #68]	; 0x44
  _leds[5] = new Led(24, LOW);
     b48:	movs	r0, #24
     b4a:	bl	29d4 <operator new(unsigned int)>
     b4e:	mov	r2, r5
     b50:	movs	r1, #24
     b52:	mov	r6, r0
     b54:	bl	75c <Led::Led(int, int)>
     b58:	str	r6, [r4, #72]	; 0x48

  _leds[4]->toggle();
     b5a:	ldr	r0, [r4, #68]	; 0x44
     b5c:	bl	7b4 <Led::toggle()>
  _leds[5]->toggle();
     b60:	ldr	r0, [r4, #72]	; 0x48
     b62:	bl	7b4 <Led::toggle()>

  _buttons[0] = new Button(1, step1pin, _leds[0], false, false, this);
     b66:	movs	r0, #56	; 0x38
     b68:	bl	29d4 <operator new(unsigned int)>
     b6c:	ldr	r3, [r4, #52]	; 0x34
     b6e:	str	r5, [sp, #4]
     b70:	mov	r6, r0
     b72:	str	r5, [sp, #0]
     b74:	movs	r2, #2
     b76:	movs	r1, #1
     b78:	str	r4, [sp, #8]
     b7a:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     b7e:	str	r6, [r4, #0]
  _buttons[1] = new Button(2, step2pin, _leds[1], false, false, this);
     b80:	movs	r0, #56	; 0x38
     b82:	bl	29d4 <operator new(unsigned int)>
     b86:	ldr	r3, [r4, #56]	; 0x38
     b88:	str	r5, [sp, #4]
     b8a:	mov	r6, r0
     b8c:	str	r5, [sp, #0]
     b8e:	movs	r2, #4
     b90:	movs	r1, #2
     b92:	str	r4, [sp, #8]
     b94:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     b98:	str	r6, [r4, #4]
  _buttons[2] = new Button(3, step3pin, _leds[2], false, false, this);
     b9a:	movs	r0, #56	; 0x38
     b9c:	bl	29d4 <operator new(unsigned int)>
     ba0:	ldr	r3, [r4, #60]	; 0x3c
     ba2:	str	r5, [sp, #4]
     ba4:	mov	r6, r0
     ba6:	str	r5, [sp, #0]
     ba8:	movs	r2, #6
     baa:	movs	r1, #3
     bac:	str	r4, [sp, #8]
     bae:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     bb2:	str	r6, [r4, #8]
  _buttons[3] = new Button(4, step4pin, _leds[3], false, false, this);
     bb4:	movs	r0, #56	; 0x38
     bb6:	bl	29d4 <operator new(unsigned int)>
     bba:	ldr	r3, [r4, #64]	; 0x40
     bbc:	str	r5, [sp, #4]
     bbe:	mov	r6, r0
     bc0:	str	r5, [sp, #0]
     bc2:	movs	r2, #8
     bc4:	movs	r1, #4
     bc6:	str	r4, [sp, #8]
     bc8:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     bcc:	str	r6, [r4, #12]
  _buttons[4] = new Button(5, shiftPin, _leds[4], true, false, this);
     bce:	movs	r0, #56	; 0x38
     bd0:	bl	29d4 <operator new(unsigned int)>
     bd4:	movs	r6, #1
     bd6:	ldr	r3, [r4, #68]	; 0x44
     bd8:	str	r5, [sp, #4]
     bda:	mov	r7, r0
     bdc:	movs	r2, #10
     bde:	movs	r1, #5
     be0:	str	r4, [sp, #8]
     be2:	str	r6, [sp, #0]
     be4:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     be8:	str	r7, [r4, #16]
  _buttons[5] = new Button(6, playPin, _leds[5], false, true, this);
     bea:	movs	r0, #56	; 0x38
     bec:	bl	29d4 <operator new(unsigned int)>
     bf0:	ldr	r3, [r4, #72]	; 0x48
     bf2:	str	r4, [sp, #8]
     bf4:	mov	r7, r0
     bf6:	stmia.w	sp, {r5, r6}
     bfa:	movs	r2, #12
     bfc:	movs	r1, #6
     bfe:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     c02:	str	r7, [r4, #20]

  _knobs[0] = new Knob(A0, 0, this);
     c04:	movs	r0, #20
     c06:	bl	29d4 <operator new(unsigned int)>
     c0a:	mov	r3, r4
     c0c:	mov	r2, r5
     c0e:	mov	r7, r0
     c10:	movs	r1, #14
     c12:	bl	a28 <Knob::Knob(unsigned char, int, Controller*)>
     c16:	str	r7, [r4, #24]
  _knobs[1] = new Knob(A1, 1, this);
     c18:	movs	r0, #20
     c1a:	bl	29d4 <operator new(unsigned int)>
     c1e:	mov	r3, r4
     c20:	mov	r2, r6
     c22:	mov	r5, r0
     c24:	movs	r1, #15
     c26:	bl	a28 <Knob::Knob(unsigned char, int, Controller*)>
     c2a:	str	r5, [r4, #28]
  _knobs[2] = new Knob(A2, 2, this);
     c2c:	movs	r0, #20
     c2e:	bl	29d4 <operator new(unsigned int)>
     c32:	mov	r3, r4
     c34:	mov	r5, r0
     c36:	movs	r2, #2
     c38:	movs	r1, #16
     c3a:	bl	a28 <Knob::Knob(unsigned char, int, Controller*)>
     c3e:	str	r5, [r4, #32]
  _knobs[3] = new Knob(A3, 3, this);
     c40:	movs	r0, #20
     c42:	bl	29d4 <operator new(unsigned int)>
     c46:	mov	r3, r4
     c48:	mov	r5, r0
     c4a:	movs	r2, #3
     c4c:	movs	r1, #17
     c4e:	bl	a28 <Knob::Knob(unsigned char, int, Controller*)>
     c52:	str	r5, [r4, #36]	; 0x24
  _knobs[4] = new Knob(A4, 4, this);
     c54:	movs	r0, #20
     c56:	bl	29d4 <operator new(unsigned int)>
     c5a:	mov	r3, r4
     c5c:	mov	r5, r0
     c5e:	movs	r2, #4
     c60:	movs	r1, #18
     c62:	bl	a28 <Knob::Knob(unsigned char, int, Controller*)>
     c66:	str	r5, [r4, #40]	; 0x28
  _knobs[5] = new Knob(A5, 5, this);
     c68:	movs	r0, #20
     c6a:	bl	29d4 <operator new(unsigned int)>
     c6e:	mov	r3, r4
     c70:	movs	r2, #5
     c72:	movs	r1, #19
     c74:	mov	r5, r0
     c76:	bl	a28 <Knob::Knob(unsigned char, int, Controller*)>
};
     c7a:	mov	r0, r4
  _knobs[0] = new Knob(A0, 0, this);
  _knobs[1] = new Knob(A1, 1, this);
  _knobs[2] = new Knob(A2, 2, this);
  _knobs[3] = new Knob(A3, 3, this);
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
     c7c:	str	r5, [r4, #44]	; 0x2c
};
     c7e:	add	sp, #20
     c80:	pop	{r4, r5, r6, r7, pc}
     c82:	nop

00000c84 <Controller::tick()>:

void Controller::tick() {
     c84:	push	{r3, r4, r5, r6, r7, lr}
     c86:	add.w	r7, r0, #20
     c8a:	mov	r6, r7
     c8c:	subs	r4, r0, #4
     c8e:	add.w	r5, r0, #48	; 0x30
  for (size_t i = 0; i < 6; i++) {
    _buttons[i]->tick();
     c92:	ldr.w	r0, [r4, #4]!
     c96:	bl	604 <Button::tick()>
    _leds[i]->tick();
     c9a:	ldr.w	r0, [r5, #4]!
     c9e:	bl	7fc <Led::tick()>
    _knobs[i]->tick();
     ca2:	ldr.w	r0, [r6, #4]!
     ca6:	bl	ab0 <Knob::tick()>
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
};

void Controller::tick() {
  for (size_t i = 0; i < 6; i++) {
     caa:	cmp	r4, r7
     cac:	bne.n	c92 <Controller::tick()+0xe>
    _buttons[i]->tick();
    _leds[i]->tick();
    _knobs[i]->tick();
  }
}
     cae:	pop	{r3, r4, r5, r6, r7, pc}

00000cb0 <Controller::toggleMode()>:

void Controller::toggleMode () {
     cb0:	push	{r3, r4, r5, lr}
  if (_currentMode == PITCH) {
     cb2:	ldrb.w	r3, [r0, #49]	; 0x31
    _leds[i]->tick();
    _knobs[i]->tick();
  }
}

void Controller::toggleMode () {
     cb6:	mov	r4, r0
  if (_currentMode == PITCH) {
     cb8:	cbz	r3, cc4 <Controller::toggleMode()+0x14>
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
     cba:	cmp	r3, #1
     cbc:	beq.n	d0c <Controller::toggleMode()+0x5c>
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
     cbe:	cmp	r3, #2
     cc0:	beq.n	ce6 <Controller::toggleMode()+0x36>
     cc2:	pop	{r3, r4, r5, pc}
  }
}

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
     cc4:	movs	r3, #1
     cc6:	strb.w	r3, [r0, #49]	; 0x31
     cca:	movs	r1, #8
     ccc:	ldr	r0, [pc, #100]	; (d34 <Controller::toggleMode()+0x84>)
     cce:	bl	e30 <usb_serial_write>
     cd2:	ldr	r0, [pc, #100]	; (d38 <Controller::toggleMode()+0x88>)
     cd4:	bl	2908 <Print::println()>
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
     cd8:	ldr	r0, [r4, #68]	; 0x44
     cda:	movw	r1, #999	; 0x3e7
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};
     cde:	ldmia.w	sp!, {r3, r4, r5, lr}

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
     ce2:	b.w	780 <Led::blink(int)>
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
     ce6:	movs	r5, #0
     ce8:	strb.w	r5, [r0, #49]	; 0x31
     cec:	movs	r1, #5
     cee:	ldr	r0, [pc, #76]	; (d3c <Controller::toggleMode()+0x8c>)
     cf0:	bl	e30 <usb_serial_write>
     cf4:	ldr	r0, [pc, #64]	; (d38 <Controller::toggleMode()+0x88>)
     cf6:	bl	2908 <Print::println()>
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
     cfa:	ldr	r0, [r4, #68]	; 0x44
     cfc:	mov	r1, r5
     cfe:	bl	780 <Led::blink(int)>
    _leds[4]->on();
     d02:	ldr	r0, [r4, #68]	; 0x44
  }
};
     d04:	ldmia.w	sp!, {r3, r4, r5, lr}
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
     d08:	b.w	7ec <Led::on()>
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
     d0c:	movs	r3, #2
     d0e:	strb.w	r3, [r0, #49]	; 0x31
     d12:	movs	r1, #10
     d14:	ldr	r0, [pc, #40]	; (d40 <Controller::toggleMode()+0x90>)
     d16:	bl	e30 <usb_serial_write>
     d1a:	ldr	r0, [pc, #28]	; (d38 <Controller::toggleMode()+0x88>)
     d1c:	bl	2908 <Print::println()>
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
     d20:	ldr	r0, [r4, #68]	; 0x44
     d22:	movs	r1, #0
     d24:	bl	780 <Led::blink(int)>
    _leds[4]->off();
     d28:	ldr	r0, [r4, #68]	; 0x44
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};
     d2a:	ldmia.w	sp!, {r3, r4, r5, lr}
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
     d2e:	b.w	7e0 <Led::off()>
     d32:	nop
     d34:	.word	0x00003d94
     d38:	.word	0x1fff0c48
     d3c:	.word	0x00003dac
     d40:	.word	0x00003da0

00000d44 <Controller::enterShiftMode()>:
    _leds[4]->on();
  }
};

void Controller::enterShiftMode () {
  _shiftMode = true;
     d44:	movs	r3, #1
     d46:	strb.w	r3, [r0, #48]	; 0x30
     d4a:	bx	lr

00000d4c <Controller::exitShiftMode()>:
};

void Controller::exitShiftMode () {
  _shiftMode = false;
     d4c:	movs	r3, #0
     d4e:	strb.w	r3, [r0, #48]	; 0x30
     d52:	bx	lr

00000d54 <Controller::getShiftMode()>:
};

bool Controller::getShiftMode () {
  return _shiftMode;
};
     d54:	ldrb.w	r0, [r0, #48]	; 0x30
     d58:	bx	lr
     d5a:	nop

00000d5c <Controller::getMode()>:

Modes Controller::getMode() {
  return _currentMode;
};
     d5c:	ldrb.w	r0, [r0, #49]	; 0x31
     d60:	bx	lr
     d62:	nop

00000d64 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
     d64:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
     d66:	ldr	r5, [pc, #60]	; (da4 <usb_serial_getchar+0x40>)
     d68:	ldr	r0, [r5, #0]
     d6a:	cbz	r0, d8c <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
     d6c:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
     d6e:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
     d70:	adds	r1, r0, r3
     d72:	adds	r3, #1
	if (i >= rx_packet->len) {
     d74:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
     d76:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
     d78:	bcs.n	d80 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
     d7a:	strh	r3, [r0, #2]
	}
	return c;
     d7c:	mov	r0, r4
}
     d7e:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
     d80:	bl	1b74 <usb_free>
		rx_packet = NULL;
     d84:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
     d86:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
     d88:	str	r3, [r5, #0]
     d8a:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
     d8c:	ldr	r3, [pc, #24]	; (da8 <usb_serial_getchar+0x44>)
     d8e:	ldrb	r3, [r3, #0]
     d90:	cbz	r3, d9e <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
     d92:	movs	r0, #2
     d94:	bl	1bc0 <usb_rx>
     d98:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
     d9a:	cmp	r0, #0
     d9c:	bne.n	d6c <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
     d9e:	mov.w	r0, #4294967295
     da2:	pop	{r3, r4, r5, pc}
     da4:	.word	0x1fff15c0
     da8:	.word	0x1fff171c

00000dac <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
     dac:	push	{r4, lr}
	if (!rx_packet) {
     dae:	ldr	r4, [pc, #36]	; (dd4 <usb_serial_peekchar+0x28>)
     db0:	ldr	r0, [r4, #0]
     db2:	cbz	r0, dbc <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
     db4:	ldrh	r3, [r0, #2]
     db6:	add	r0, r3
     db8:	ldrb	r0, [r0, #8]
}
     dba:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
     dbc:	ldr	r3, [pc, #24]	; (dd8 <usb_serial_peekchar+0x2c>)
     dbe:	ldrb	r3, [r3, #0]
     dc0:	cbz	r3, dce <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
     dc2:	movs	r0, #2
     dc4:	bl	1bc0 <usb_rx>
     dc8:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
     dca:	cmp	r0, #0
     dcc:	bne.n	db4 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
     dce:	mov.w	r0, #4294967295
     dd2:	pop	{r4, pc}
     dd4:	.word	0x1fff15c0
     dd8:	.word	0x1fff171c

00000ddc <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
     ddc:	ldr	r3, [pc, #16]	; (df0 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
     dde:	ldr	r2, [pc, #20]	; (df4 <usb_serial_available+0x18>)
     de0:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
     de2:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
     de4:	cbz	r3, dee <usb_serial_available+0x12>
     de6:	ldrh	r2, [r3, #0]
     de8:	ldrh	r3, [r3, #2]
     dea:	subs	r3, r2, r3
     dec:	add	r0, r3
	return count;
}
     dee:	bx	lr
     df0:	.word	0x1fff15c0
     df4:	.word	0x1fff1bb0

00000df8 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
     df8:	ldr	r3, [pc, #44]	; (e28 <usb_serial_flush_input+0x30>)
     dfa:	ldrb	r3, [r3, #0]
     dfc:	cbz	r3, e26 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
     dfe:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
     e00:	ldr	r4, [pc, #40]	; (e2c <usb_serial_flush_input+0x34>)
     e02:	ldr	r0, [r4, #0]
     e04:	cbz	r0, e1a <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
     e06:	bl	1b74 <usb_free>
		rx_packet = NULL;
     e0a:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     e0c:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
     e0e:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     e10:	bl	1bc0 <usb_rx>
		if (!rx) break;
     e14:	cbz	r0, e24 <usb_serial_flush_input+0x2c>
		usb_free(rx);
     e16:	bl	1b74 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     e1a:	movs	r0, #2
     e1c:	bl	1bc0 <usb_rx>
		if (!rx) break;
     e20:	cmp	r0, #0
     e22:	bne.n	e16 <usb_serial_flush_input+0x1e>
     e24:	pop	{r4, pc}
     e26:	bx	lr
     e28:	.word	0x1fff171c
     e2c:	.word	0x1fff15c0

00000e30 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
     e30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
     e34:	ldr.w	r9, [pc, #248]	; f30 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
     e38:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
     e3a:	movs	r2, #1
     e3c:	strb.w	r2, [r9]
	while (size > 0) {
     e40:	str	r1, [sp, #4]
     e42:	cbz	r1, ea0 <usb_serial_write+0x70>
     e44:	ldr.w	r8, [pc, #236]	; f34 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
     e48:	ldr	r7, [pc, #212]	; (f20 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
     e4a:	ldr	r6, [sp, #4]
     e4c:	mov	fp, r0
		if (!tx_packet) {
     e4e:	ldr.w	r0, [r8]
     e52:	cbz	r0, ec2 <usb_serial_write+0x92>
     e54:	ldr	r5, [pc, #204]	; (f24 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
     e56:	ldrh	r4, [r0, #2]
     e58:	rsb	r1, r4, #64	; 0x40
     e5c:	cmp	r1, r6
     e5e:	it	cs
     e60:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
     e62:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
     e66:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
     e68:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
     e6c:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
     e6e:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
     e70:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
     e74:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
     e78:	cbz	r1, e90 <usb_serial_write+0x60>
     e7a:	subs	r4, #1
     e7c:	add	r2, r4
     e7e:	add	r1, fp
     e80:	ldrb.w	r4, [fp], #1
     e84:	strb.w	r4, [r2, #1]!
     e88:	cmp	fp, r1
     e8a:	bne.n	e80 <usb_serial_write+0x50>
     e8c:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
     e90:	cmp.w	lr, #63	; 0x3f
     e94:	bhi.n	eae <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     e96:	ldr	r2, [pc, #144]	; (f28 <usb_serial_write+0xf8>)
     e98:	movs	r1, #5
     e9a:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
     e9c:	cmp	r6, #0
     e9e:	bne.n	e4e <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
     ea0:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
     ea2:	movs	r3, #0
     ea4:	strb.w	r3, [r9]
	return ret;
}
     ea8:	add	sp, #12
     eaa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
     eae:	movs	r2, #64	; 0x40
     eb0:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
     eb2:	mov	r1, r0
     eb4:	movs	r0, #3
     eb6:	bl	1d10 <usb_tx>
			tx_packet = NULL;
     eba:	movs	r2, #0
     ebc:	str.w	r2, [r8]
     ec0:	b.n	e96 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
     ec2:	ldrb	r2, [r7, #0]
     ec4:	cbz	r2, f10 <usb_serial_write+0xe0>
     ec6:	ldr	r4, [pc, #100]	; (f2c <usb_serial_write+0xfc>)
     ec8:	ldr	r5, [pc, #88]	; (f24 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
     eca:	mov.w	sl, #1
     ece:	b.n	ee0 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
     ed0:	subs	r4, #1
     ed2:	beq.n	f02 <usb_serial_write+0xd2>
     ed4:	ldrb	r2, [r5, #0]
     ed6:	cbnz	r2, f02 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
     ed8:	bl	2814 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
     edc:	ldrb	r2, [r7, #0]
     ede:	cbz	r2, f10 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
     ee0:	movs	r0, #3
     ee2:	bl	1bfc <usb_tx_packet_count>
     ee6:	cmp	r0, #7
     ee8:	bhi.n	ed0 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
     eea:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
     eee:	bl	1b34 <usb_malloc>
     ef2:	str.w	r0, [r8]
					if (tx_packet) break;
     ef6:	cmp	r0, #0
     ef8:	bne.n	e56 <usb_serial_write+0x26>
					tx_noautoflush = 0;
     efa:	ldr	r3, [pc, #52]	; (f30 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
     efc:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
     efe:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
     f00:	bne.n	ed4 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
     f02:	movs	r3, #1
					return -1;
     f04:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
     f08:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
     f0a:	add	sp, #12
     f0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
     f10:	movs	r3, #0
					return -1;
     f12:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
     f16:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
     f1a:	add	sp, #12
     f1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f20:	.word	0x1fff171c
     f24:	.word	0x1fff15bc
     f28:	.word	0x1fff15b4
     f2c:	.word	0x00014821
     f30:	.word	0x1fff15b5
     f34:	.word	0x1fff15b8

00000f38 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     f38:	push	{lr}
     f3a:	sub	sp, #12
     f3c:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
     f3e:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     f40:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
     f44:	mov	r0, r3
     f46:	bl	e30 <usb_serial_write>
}
     f4a:	add	sp, #12
     f4c:	ldr.w	pc, [sp], #4

00000f50 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
     f50:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
     f52:	ldr	r5, [pc, #56]	; (f8c <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
     f54:	ldr	r4, [pc, #56]	; (f90 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
     f56:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
     f58:	movs	r3, #1
     f5a:	strb	r3, [r4, #0]
	if (!tx_packet) {
     f5c:	cbz	r0, f6a <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
     f5e:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
     f60:	movs	r3, #0
     f62:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
     f64:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
     f68:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
     f6a:	ldr	r3, [pc, #40]	; (f94 <usb_serial_write_buffer_free+0x44>)
     f6c:	ldrb	r3, [r3, #0]
     f6e:	cbnz	r3, f76 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
     f70:	movs	r0, #0
     f72:	strb	r0, [r4, #0]
			return 0;
     f74:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
     f76:	movs	r0, #3
     f78:	bl	1bfc <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
     f7c:	cmp	r0, #7
     f7e:	bhi.n	f70 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
     f80:	bl	1b34 <usb_malloc>
     f84:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
     f86:	cmp	r0, #0
     f88:	bne.n	f5e <usb_serial_write_buffer_free+0xe>
     f8a:	b.n	f70 <usb_serial_write_buffer_free+0x20>
     f8c:	.word	0x1fff15b8
     f90:	.word	0x1fff15b5
     f94:	.word	0x1fff171c

00000f98 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
     f98:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
     f9a:	ldr	r3, [pc, #68]	; (fe0 <usb_serial_flush_output+0x48>)
     f9c:	ldrb	r3, [r3, #0]
     f9e:	cbz	r3, fc4 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
     fa0:	ldr	r6, [pc, #64]	; (fe4 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
     fa2:	ldr	r5, [pc, #68]	; (fe8 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
     fa4:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
     fa6:	movs	r7, #1
     fa8:	strb	r7, [r5, #0]
	if (tx_packet) {
     faa:	cbz	r4, fc6 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
     fac:	ldr	r2, [pc, #60]	; (fec <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
     fae:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
     fb0:	movs	r7, #0
     fb2:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
     fb4:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
     fb6:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
     fb8:	movs	r0, #3
     fba:	bl	1d10 <usb_tx>
		tx_packet = NULL;
     fbe:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
     fc0:	movs	r3, #0
     fc2:	strb	r3, [r5, #0]
     fc4:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
     fc6:	bl	1b34 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
     fca:	ldr	r3, [pc, #32]	; (fec <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
     fcc:	cbz	r0, fda <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
     fce:	mov	r1, r0
     fd0:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
     fd2:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
     fd4:	bl	1d10 <usb_tx>
     fd8:	b.n	fc0 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
     fda:	strb	r7, [r3, #0]
     fdc:	b.n	fc0 <usb_serial_flush_output+0x28>
     fde:	nop
     fe0:	.word	0x1fff171c
     fe4:	.word	0x1fff15b8
     fe8:	.word	0x1fff15b5
     fec:	.word	0x1fff15b4

00000ff0 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
     ff0:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
     ff2:	ldr	r3, [pc, #56]	; (102c <usb_serial_flush_callback+0x3c>)
     ff4:	ldrb	r3, [r3, #0]
     ff6:	cbnz	r3, 1016 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
     ff8:	ldr	r4, [pc, #52]	; (1030 <usb_serial_flush_callback+0x40>)
     ffa:	ldr	r1, [r4, #0]
     ffc:	cbz	r1, 1018 <usb_serial_flush_callback+0x28>
     ffe:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    1002:	ldrh	r3, [r1, #2]
    1004:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1006:	movs	r0, #3
    1008:	bl	1d10 <usb_tx>
		tx_packet = NULL;
    100c:	str	r5, [r4, #0]
    100e:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1010:	ldr	r3, [pc, #32]	; (1034 <usb_serial_flush_callback+0x44>)
    1012:	movs	r2, #1
    1014:	strb	r2, [r3, #0]
    1016:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1018:	bl	1b34 <usb_malloc>
		if (tx) {
    101c:	cmp	r0, #0
    101e:	beq.n	1010 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    1020:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    1022:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    1026:	movs	r0, #3
    1028:	b.w	1d10 <usb_tx>
    102c:	.word	0x1fff15b5
    1030:	.word	0x1fff15b8
    1034:	.word	0x1fff15b4

00001038 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1038:	ldr	r2, [pc, #220]	; (1118 <wait_for_cal+0xe0>)
    103a:	ldr	r1, [pc, #224]	; (111c <wait_for_cal+0xe4>)
    103c:	ldr	r3, [r2, #0]
    103e:	lsls	r3, r3, #24
    1040:	bmi.n	103c <wait_for_cal+0x4>
    1042:	ldr	r3, [r1, #0]
    1044:	ands.w	r3, r3, #128	; 0x80
    1048:	bne.n	103c <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    104a:	cpsid	i
	if (calibrating) {
    104c:	ldr	r1, [pc, #208]	; (1120 <wait_for_cal+0xe8>)
    104e:	ldrb	r2, [r1, #0]
    1050:	cmp	r2, #0
    1052:	beq.n	1114 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1054:	ldr	r2, [pc, #204]	; (1124 <wait_for_cal+0xec>)
    1056:	ldr	r0, [pc, #208]	; (1128 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1058:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    105a:	ldr	r4, [pc, #208]	; (112c <wait_for_cal+0xf4>)
    105c:	ldr	r7, [r2, #0]
    105e:	ldr	r6, [r0, #0]
    1060:	ldr	r5, [r4, #0]
    1062:	ldr	r4, [r2, #12]
    1064:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1066:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1068:	adds	r2, #20
    106a:	ldr	r0, [r0, #0]
    106c:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    106e:	ldr	r7, [pc, #192]	; (1130 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1070:	add	r5, r6
    1072:	add	r4, r5
    1074:	add	r0, r4
    1076:	add	r2, r0
    1078:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    107c:	ldr	r6, [pc, #180]	; (1134 <wait_for_cal+0xfc>)
    107e:	ldr	r0, [pc, #184]	; (1138 <wait_for_cal+0x100>)
    1080:	ldr	r5, [pc, #184]	; (113c <wait_for_cal+0x104>)
    1082:	ldr	r4, [pc, #188]	; (1140 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1084:	orr.w	r2, r2, #32768	; 0x8000
    1088:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    108a:	ldr	r7, [r6, #0]
    108c:	ldr	r6, [r0, #0]
    108e:	ldr	r5, [r5, #0]
    1090:	ldr	r2, [pc, #176]	; (1144 <wait_for_cal+0x10c>)
    1092:	ldr	r4, [r4, #0]
    1094:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1096:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1098:	ldr	r0, [r0, #0]
    109a:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    109c:	ldr	r7, [pc, #168]	; (1148 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    109e:	add	r5, r6
    10a0:	add	r4, r5
    10a2:	add	r0, r4
    10a4:	add	r2, r0
    10a6:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    10aa:	ldr	r6, [pc, #160]	; (114c <wait_for_cal+0x114>)
    10ac:	ldr	r0, [pc, #160]	; (1150 <wait_for_cal+0x118>)
    10ae:	ldr	r5, [pc, #164]	; (1154 <wait_for_cal+0x11c>)
    10b0:	ldr	r4, [pc, #164]	; (1158 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    10b2:	orr.w	r2, r2, #32768	; 0x8000
    10b6:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    10b8:	ldr	r7, [r6, #0]
    10ba:	ldr	r6, [r0, #0]
    10bc:	ldr	r5, [r5, #0]
    10be:	ldr	r2, [pc, #156]	; (115c <wait_for_cal+0x124>)
    10c0:	ldr	r4, [r4, #0]
    10c2:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    10c4:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    10c6:	ldr	r0, [r0, #0]
    10c8:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    10ca:	ldr	r7, [pc, #148]	; (1160 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    10cc:	add	r5, r6
    10ce:	add	r4, r5
    10d0:	add	r0, r4
    10d2:	add	r2, r0
    10d4:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    10d8:	ldr	r6, [pc, #136]	; (1164 <wait_for_cal+0x12c>)
    10da:	ldr	r0, [pc, #140]	; (1168 <wait_for_cal+0x130>)
    10dc:	ldr	r5, [pc, #140]	; (116c <wait_for_cal+0x134>)
    10de:	ldr	r4, [pc, #144]	; (1170 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    10e0:	orr.w	r2, r2, #32768	; 0x8000
    10e4:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    10e6:	ldr	r7, [r6, #0]
    10e8:	ldr	r6, [r0, #0]
    10ea:	ldr	r5, [r5, #0]
    10ec:	ldr	r2, [pc, #132]	; (1174 <wait_for_cal+0x13c>)
    10ee:	ldr	r4, [r4, #0]
    10f0:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    10f2:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    10f4:	ldr	r0, [r0, #0]
    10f6:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    10f8:	add	r5, r6
    10fa:	add	r4, r5
    10fc:	add	r0, r4
    10fe:	add	r2, r0
    1100:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    1104:	ldr	r0, [pc, #112]	; (1178 <wait_for_cal+0x140>)
    1106:	orr.w	r2, r2, #32768	; 0x8000
    110a:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    110c:	strb	r3, [r1, #0]
	}
	__enable_irq();
    110e:	cpsie	i
}
    1110:	pop	{r4, r5, r6, r7}
    1112:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    1114:	cpsie	i
    1116:	bx	lr
    1118:	.word	0x4003b024
    111c:	.word	0x400bb024
    1120:	.word	0x1fff15c6
    1124:	.word	0x4003b038
    1128:	.word	0x4003b03c
    112c:	.word	0x4003b040
    1130:	.word	0x4003b02c
    1134:	.word	0x4003b058
    1138:	.word	0x4003b05c
    113c:	.word	0x4003b060
    1140:	.word	0x4003b064
    1144:	.word	0x4003b06c
    1148:	.word	0x4003b030
    114c:	.word	0x400bb038
    1150:	.word	0x400bb03c
    1154:	.word	0x400bb040
    1158:	.word	0x400bb044
    115c:	.word	0x400bb04c
    1160:	.word	0x400bb02c
    1164:	.word	0x400bb058
    1168:	.word	0x400bb05c
    116c:	.word	0x400bb060
    1170:	.word	0x400bb064
    1174:	.word	0x400bb06c
    1178:	.word	0x400bb030

0000117c <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    117c:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    117e:	ldr	r0, [pc, #164]	; (1224 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1180:	ldr	r2, [pc, #164]	; (1228 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    1182:	ldr	r3, [pc, #168]	; (122c <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1184:	ldr	r5, [pc, #168]	; (1230 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1186:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1188:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    118a:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    118c:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    118e:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1190:	ldr	r4, [pc, #160]	; (1234 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    1192:	cmp	r3, #8
    1194:	beq.n	11f8 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1196:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1198:	ldr	r0, [pc, #156]	; (1238 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    119a:	ldr	r1, [pc, #160]	; (123c <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    119c:	beq.n	120e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    119e:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    11a0:	ite	eq
    11a2:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    11a4:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    11a6:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    11a8:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    11aa:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    11ac:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    11ae:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    11b0:	ldr	r3, [pc, #140]	; (1240 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    11b2:	ldr	r1, [pc, #144]	; (1244 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    11b4:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    11b6:	ldr	r2, [pc, #144]	; (1248 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    11b8:	cbz	r3, 11ea <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    11ba:	movs	r3, #1
    11bc:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    11be:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    11c0:	ldr	r3, [pc, #136]	; (124c <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    11c2:	ldr	r1, [pc, #140]	; (1250 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    11c4:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    11c6:	ldr	r2, [pc, #140]	; (1254 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    11c8:	cmp	r3, #1
    11ca:	bls.n	121a <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    11cc:	cmp	r3, #4
    11ce:	bls.n	11f0 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    11d0:	cmp	r3, #8
    11d2:	bls.n	1212 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    11d4:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    11d6:	ite	ls
    11d8:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    11da:	movhi	r3, #135	; 0x87
    11dc:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    11de:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    11e0:	ldr	r3, [pc, #116]	; (1258 <analog_init+0xdc>)
    11e2:	movs	r2, #1
    11e4:	strb	r2, [r3, #0]
}
    11e6:	pop	{r4, r5}
    11e8:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    11ea:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    11ec:	str	r3, [r2, #0]
    11ee:	b.n	11c0 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    11f0:	movs	r3, #132	; 0x84
    11f2:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    11f4:	str	r3, [r2, #0]
    11f6:	b.n	11e0 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    11f8:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    11fc:	ldr	r1, [pc, #60]	; (123c <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    11fe:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1200:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1202:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1204:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1206:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1208:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    120a:	str	r3, [r1, #0]
    120c:	b.n	11b0 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    120e:	movs	r2, #57	; 0x39
    1210:	b.n	1202 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1212:	movs	r3, #133	; 0x85
    1214:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1216:	str	r3, [r2, #0]
    1218:	b.n	11e0 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    121a:	movs	r3, #128	; 0x80
    121c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    121e:	str	r3, [r2, #0]
    1220:	b.n	11e0 <analog_init+0x64>
    1222:	nop
    1224:	.word	0x40074000
    1228:	.word	0x40074001
    122c:	.word	0x1fff0c40
    1230:	.word	0x4003b008
    1234:	.word	0x4003b00c
    1238:	.word	0x400bb008
    123c:	.word	0x400bb00c
    1240:	.word	0x1fff15c9
    1244:	.word	0x4003b020
    1248:	.word	0x400bb020
    124c:	.word	0x1fff0c41
    1250:	.word	0x4003b024
    1254:	.word	0x400bb024
    1258:	.word	0x1fff15c6

0000125c <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    125c:	cmp	r0, #71	; 0x47
    125e:	bhi.n	12c0 <analogRead+0x64>
	channel = pin2sc1a[pin];
    1260:	ldr	r3, [pc, #204]	; (1330 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    1262:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    1266:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    1268:	cmp	r6, #255	; 0xff
    126a:	beq.n	12c4 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    126c:	ldr	r3, [pc, #196]	; (1334 <analogRead+0xd8>)
    126e:	ldrb	r3, [r3, #0]
    1270:	cmp	r3, #0
    1272:	bne.n	12ca <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1274:	lsls	r2, r6, #24
    1276:	bmi.n	12d2 <analogRead+0x76>
#endif

	__disable_irq();
    1278:	cpsid	i
    127a:	ldr	r5, [pc, #188]	; (1338 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    127c:	ldr	r4, [pc, #188]	; (133c <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    127e:	mov	r7, r5
    1280:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1282:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    1284:	strb	r3, [r5, #0]
	__enable_irq();
    1286:	cpsie	i
	while (1) {
		__disable_irq();
    1288:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    128a:	ldr	r3, [r4, #0]
    128c:	lsls	r3, r3, #24
    128e:	bmi.n	12aa <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    1290:	ldrb	r3, [r7, #0]
    1292:	cbnz	r3, 129c <analogRead+0x40>
    1294:	b.n	1280 <analogRead+0x24>
    1296:	ldrb	r3, [r5, #0]
    1298:	cmp	r3, #0
    129a:	beq.n	1280 <analogRead+0x24>
		__enable_irq();
    129c:	cpsie	i
		yield();
    129e:	bl	2814 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    12a2:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    12a4:	ldr	r3, [r4, #0]
    12a6:	lsls	r0, r3, #24
    12a8:	bpl.n	1296 <analogRead+0x3a>
			result = ADC0_RA;
    12aa:	ldr	r3, [pc, #148]	; (1340 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    12ac:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    12ae:	movs	r2, #0
    12b0:	strb	r2, [r5, #0]
			__enable_irq();
    12b2:	cpsie	i
			result >>= analog_right_shift;
    12b4:	ldr	r2, [pc, #140]	; (1344 <analogRead+0xe8>)
    12b6:	ldrb	r0, [r2, #0]
    12b8:	asr.w	r0, r3, r0
			return result;
    12bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    12c0:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    12c2:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    12c4:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    12c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    12ca:	bl	1038 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    12ce:	lsls	r2, r6, #24
    12d0:	bpl.n	1278 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    12d2:	cpsid	i
    12d4:	ldr	r5, [pc, #112]	; (1348 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    12d6:	ldr.w	r8, [pc, #124]	; 1354 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    12da:	ldr	r4, [pc, #112]	; (134c <analogRead+0xf0>)
    12dc:	and.w	r7, r6, #64	; 0x40
    12e0:	uxtb	r7, r7
    12e2:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    12e6:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    12ea:	cbz	r7, 1324 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    12ec:	bic.w	r3, r3, #16
    12f0:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    12f4:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    12f6:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    12f8:	ldr	r2, [pc, #76]	; (1348 <analogRead+0xec>)
    12fa:	strb	r3, [r5, #0]
	__enable_irq();
    12fc:	cpsie	i
	while (1) {
		__disable_irq();
    12fe:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    1300:	ldr	r3, [r4, #0]
    1302:	lsls	r1, r3, #24
    1304:	bmi.n	1320 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    1306:	ldrb	r3, [r2, #0]
    1308:	cbnz	r3, 1312 <analogRead+0xb6>
    130a:	b.n	12e6 <analogRead+0x8a>
    130c:	ldrb	r3, [r5, #0]
    130e:	cmp	r3, #0
    1310:	beq.n	12e6 <analogRead+0x8a>
		__enable_irq();
    1312:	cpsie	i
		yield();
    1314:	bl	2814 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    1318:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    131a:	ldr	r3, [r4, #0]
    131c:	lsls	r3, r3, #24
    131e:	bpl.n	130c <analogRead+0xb0>
			result = ADC1_RA;
    1320:	ldr	r3, [pc, #44]	; (1350 <analogRead+0xf4>)
    1322:	b.n	12ac <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    1324:	orr.w	r3, r3, #16
    1328:	str.w	r3, [r8]
    132c:	b.n	12f4 <analogRead+0x98>
    132e:	nop
    1330:	.word	0x00003db4
    1334:	.word	0x1fff15c6
    1338:	.word	0x1fff15c8
    133c:	.word	0x4003b000
    1340:	.word	0x4003b010
    1344:	.word	0x1fff15c5
    1348:	.word	0x1fff15c7
    134c:	.word	0x400bb000
    1350:	.word	0x400bb010
    1354:	.word	0x400bb00c

00001358 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    1358:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    135a:	ldr	r3, [pc, #68]	; (13a0 <digitalWrite.part.1+0x48>)
    135c:	ldr.w	r2, [r3, r0, lsl #3]
    1360:	ldrb.w	r4, [r2, #640]	; 0x280
    1364:	cbz	r4, 1374 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    1366:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    1368:	cbz	r1, 138a <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    136a:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    136e:	ldr.w	r4, [sp], #4
    1372:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    1374:	add.w	r3, r3, r0, lsl #3
    1378:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    137a:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    137c:	cbnz	r1, 1394 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    137e:	bic.w	r2, r2, #2
    1382:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1384:	ldr.w	r4, [sp], #4
    1388:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    138a:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    138e:	ldr.w	r4, [sp], #4
    1392:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1394:	orr.w	r2, r2, #3
    1398:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    139a:	ldr.w	r4, [sp], #4
    139e:	bx	lr
    13a0:	.word	0x00003dfc

000013a4 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    13a4:	ldr	r2, [pc, #112]	; (1418 <pinMode.part.2+0x74>)
    13a6:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    13aa:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    13ac:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    13ae:	beq.n	13d4 <pinMode.part.2+0x30>
    13b0:	cmp	r1, #4
    13b2:	beq.n	13ec <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    13b4:	ldr.w	r0, [r2, r0, lsl #3]
    13b8:	movs	r2, #0
    13ba:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    13be:	cbz	r1, 13cc <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    13c0:	cmp	r1, #2
    13c2:	beq.n	1406 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    13c4:	cmp	r1, #3
    13c6:	beq.n	140e <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    13c8:	str	r2, [r3, #0]
    13ca:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    13cc:	mov.w	r2, #256	; 0x100
    13d0:	str	r2, [r3, #0]
    13d2:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    13d4:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    13d8:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    13dc:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    13e0:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    13e2:	ldr	r2, [r3, #0]
    13e4:	bic.w	r2, r2, #32
    13e8:	str	r2, [r3, #0]
    13ea:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    13ec:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    13f0:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    13f4:	movs	r0, #1
    13f6:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    13fa:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    13fc:	ldr	r2, [r3, #0]
    13fe:	orr.w	r2, r2, #32
    1402:	str	r2, [r3, #0]
    1404:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    1406:	movw	r2, #259	; 0x103
    140a:	str	r2, [r3, #0]
    140c:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    140e:	mov.w	r2, #258	; 0x102
    1412:	str	r2, [r3, #0]
    1414:	bx	lr
    1416:	nop
    1418:	.word	0x00003dfc

0000141c <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    141c:	push	{r4, r5}
	RTC_SR = 0;
    141e:	ldr	r3, [pc, #20]	; (1434 <rtc_set+0x18>)
	RTC_TPR = 0;
    1420:	ldr	r5, [pc, #20]	; (1438 <rtc_set+0x1c>)
	RTC_TSR = t;
    1422:	ldr	r4, [pc, #24]	; (143c <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    1424:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    1426:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    1428:	str	r2, [r3, #0]
	RTC_TPR = 0;
    142a:	str	r2, [r5, #0]
	RTC_TSR = t;
    142c:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    142e:	str	r1, [r3, #0]
}
    1430:	pop	{r4, r5}
    1432:	bx	lr
    1434:	.word	0x4003d014
    1438:	.word	0x4003d004
    143c:	.word	0x4003d000

00001440 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    1440:	cmp	r0, #63	; 0x3f
    1442:	bhi.n	1448 <digitalWrite+0x8>
    1444:	b.w	1358 <digitalWrite.part.1>
    1448:	bx	lr
    144a:	nop

0000144c <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    144c:	cmp	r0, #63	; 0x3f
    144e:	bhi.n	145e <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    1450:	ldr	r3, [pc, #16]	; (1464 <digitalRead+0x18>)
    1452:	ldr.w	r3, [r3, r0, lsl #3]
    1456:	ldrb.w	r0, [r3, #512]	; 0x200
    145a:	uxtb	r0, r0
    145c:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    145e:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    1460:	bx	lr
    1462:	nop
    1464:	.word	0x00003dfc

00001468 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    1468:	cmp	r0, #63	; 0x3f
    146a:	bhi.n	1470 <pinMode+0x8>
    146c:	b.w	13a4 <pinMode.part.2>
    1470:	bx	lr
    1472:	nop

00001474 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    1474:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1478:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    147a:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    147c:	ldr	r7, [pc, #136]	; (1508 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    147e:	ldr	r3, [pc, #140]	; (150c <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1480:	ldr	r2, [pc, #140]	; (1510 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1482:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    1484:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1486:	ldr	r2, [r2, #0]
	__enable_irq();
    1488:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    148a:	lsls	r2, r2, #5
    148c:	bpl.n	1494 <delay+0x20>
    148e:	cmp	r3, #50	; 0x32
    1490:	it	hi
    1492:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    1494:	cbz	r5, 1504 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1496:	rsb	r3, r3, #179200	; 0x2bc00
    149a:	addw	r3, r3, #799	; 0x31f
    149e:	ldr	r6, [pc, #116]	; (1514 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    14a0:	ldr.w	r9, [pc, #104]	; 150c <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    14a4:	ldr.w	r8, [pc, #104]	; 1510 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    14a8:	lsrs	r3, r3, #2
    14aa:	mov.w	r2, #1000	; 0x3e8
    14ae:	umull	r1, r3, r6, r3
    14b2:	mul.w	r4, r2, r4
    14b6:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    14ba:	cpsid	i
	current = SYST_CVR;
    14bc:	ldr.w	r1, [r9]
	count = systick_millis_count;
    14c0:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    14c2:	ldr.w	lr, [r8]
	__enable_irq();
    14c6:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    14c8:	rsb	r3, r1, #179200	; 0x2bc00
    14cc:	addw	r3, r3, #799	; 0x31f
    14d0:	lsrs	r3, r3, #2
    14d2:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    14d6:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    14da:	rsb	r3, r4, r3, lsr #2
    14de:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    14e2:	beq.n	14ea <delay+0x76>
    14e4:	cmp	r1, #50	; 0x32
    14e6:	it	hi
    14e8:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    14ea:	mla	r3, r0, r2, r3
    14ee:	cmp.w	r3, #1000	; 0x3e8
    14f2:	bcc.n	14fe <delay+0x8a>
				ms--;
				if (ms == 0) return;
    14f4:	subs	r5, #1
    14f6:	beq.n	1504 <delay+0x90>
				start += 1000;
    14f8:	add.w	r4, r4, #1000	; 0x3e8
    14fc:	b.n	14ba <delay+0x46>
			}
			yield();
    14fe:	bl	2814 <yield>
		}
    1502:	b.n	14ba <delay+0x46>
    1504:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1508:	.word	0x1fff15cc
    150c:	.word	0xe000e018
    1510:	.word	0xe000ed04
    1514:	.word	0x16c16c17

00001518 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    1518:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    151a:	ldr	r3, [pc, #312]	; (1654 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    151c:	ldr	r0, [pc, #312]	; (1658 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    151e:	ldr.w	ip, [pc, #348]	; 167c <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    1522:	ldr	r4, [pc, #312]	; (165c <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    1524:	ldr	r1, [pc, #312]	; (1660 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1526:	ldr.w	lr, [pc, #344]	; 1680 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    152a:	ldr	r6, [pc, #312]	; (1664 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    152c:	ldr	r5, [pc, #312]	; (1668 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    152e:	ldr	r7, [pc, #316]	; (166c <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1530:	mov.w	r2, #134217728	; 0x8000000
    1534:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    1536:	mov.w	r2, #268435456	; 0x10000000
    153a:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    153c:	mov.w	r2, #536870912	; 0x20000000
    1540:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    1542:	mov.w	r2, #1073741824	; 0x40000000
    1546:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    1548:	mov.w	r2, #2147483648	; 0x80000000
    154c:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    154e:	movs	r2, #0
    1550:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1552:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    1554:	movw	r0, #61439	; 0xefff
    1558:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    155c:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    1560:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    1562:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    1566:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    1568:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    156a:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    156c:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    1570:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    1572:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    1576:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1578:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    157c:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    157e:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    1582:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1586:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    158a:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    158e:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    1592:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    1594:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1598:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    159a:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    159c:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    159e:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    15a2:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    15a4:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    15a6:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    15a8:	ldr	r4, [pc, #196]	; (1670 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    15aa:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    15ac:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    15ae:	movs	r1, #9
    15b0:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    15b2:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    15b6:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    15ba:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    15bc:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    15be:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    15c0:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    15c2:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    15c4:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    15c6:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    15ca:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    15ce:	add.w	r7, r7, #520192	; 0x7f000
    15d2:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    15d4:	addw	r4, r4, #2044	; 0x7fc
    15d8:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    15da:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    15dc:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    15de:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    15e0:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    15e4:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    15e6:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    15ea:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    15ee:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    15f0:	sub.w	r4, r4, #460800	; 0x70800
    15f4:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    15f8:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    15fa:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    15fc:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    1600:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    1602:	ldr	r0, [pc, #112]	; (1674 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    1604:	orr.w	r1, r1, #512	; 0x200
    1608:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    160a:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    160c:	ldr	r4, [pc, #104]	; (1678 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    160e:	add.w	lr, lr, #65280	; 0xff00
    1612:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    1616:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    161a:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    161e:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    1622:	orr.w	r1, r1, #33554432	; 0x2000000
    1626:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    1628:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    162c:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1630:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    1632:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    1634:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    1636:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1638:	str	r2, [r4, #0]
#endif
	analog_init();
    163a:	bl	117c <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    163e:	movs	r0, #25
    1640:	bl	1474 <delay>
	usb_init();
    1644:	bl	2744 <usb_init>
	delay(275);
    1648:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    164c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    1650:	b.w	1474 <delay>
    1654:	.word	0xe000e104
    1658:	.word	0x40038004
    165c:	.word	0x40038014
    1660:	.word	0x4003801c
    1664:	.word	0x40038024
    1668:	.word	0x4003802c
    166c:	.word	0x40038034
    1670:	.word	0x40038000
    1674:	.word	0x40048004
    1678:	.word	0x400c9000
    167c:	.word	0x40038008
    1680:	.word	0x4003800c

00001684 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    1684:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    1686:	ldr	r3, [pc, #56]	; (16c0 <sysex_byte+0x3c>)
    1688:	ldr	r4, [pc, #56]	; (16c4 <sysex_byte+0x40>)
    168a:	ldr	r3, [r3, #0]
    168c:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    168e:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    1690:	cbz	r3, 16b6 <sysex_byte+0x32>
    1692:	cmp.w	r1, #290	; 0x122
    1696:	bcs.n	16a4 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1698:	ldr	r2, [pc, #44]	; (16c8 <sysex_byte+0x44>)
    169a:	adds	r3, r1, #1
    169c:	strb	r5, [r2, r1]
    169e:	uxth	r3, r3
    16a0:	strh	r3, [r4, #0]
	}
}
    16a2:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    16a4:	movs	r2, #0
    16a6:	ldr	r0, [pc, #32]	; (16c8 <sysex_byte+0x44>)
    16a8:	blx	r3
    16aa:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    16ac:	ldr	r2, [pc, #24]	; (16c8 <sysex_byte+0x44>)
    16ae:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    16b0:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    16b2:	strh	r3, [r4, #0]
	}
}
    16b4:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    16b6:	cmp.w	r1, #290	; 0x122
    16ba:	bcc.n	1698 <sysex_byte+0x14>
    16bc:	pop	{r3, r4, r5, pc}
    16be:	nop
    16c0:	.word	0x1fff15f4
    16c4:	.word	0x1fff1a86
    16c8:	.word	0x1fff1a8c

000016cc <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    16cc:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    16ce:	ldr	r3, [pc, #32]	; (16f0 <usb_midi_flush_output+0x24>)
    16d0:	ldrb	r4, [r3, #0]
    16d2:	cbnz	r4, 16de <usb_midi_flush_output+0x12>
    16d4:	ldr	r5, [pc, #28]	; (16f4 <usb_midi_flush_output+0x28>)
    16d6:	ldr	r1, [r5, #0]
    16d8:	cbz	r1, 16de <usb_midi_flush_output+0x12>
    16da:	ldrh	r3, [r1, #2]
    16dc:	cbnz	r3, 16e0 <usb_midi_flush_output+0x14>
    16de:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    16e0:	lsls	r3, r3, #2
    16e2:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    16e4:	movs	r0, #4
    16e6:	bl	1d10 <usb_tx>
		tx_packet = NULL;
    16ea:	str	r4, [r5, #0]
    16ec:	pop	{r3, r4, r5, pc}
    16ee:	nop
    16f0:	.word	0x1fff15e4
    16f4:	.word	0x1fff1610

000016f8 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    16f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    16fc:	ldr	r6, [pc, #692]	; (19b4 <usb_midi_read+0x2bc>)
    16fe:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1700:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    1702:	cmp	r3, #0
    1704:	beq.w	182c <usb_midi_read+0x134>
    1708:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    170a:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    170c:	lsrs	r1, r2, #2
    170e:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    1712:	adds	r2, #4
	if (index < rx_packet->len) {
    1714:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    1716:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    1718:	bcs.n	17a0 <usb_midi_read+0xa8>
		rx_packet->index = index;
    171a:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    171c:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1720:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    1724:	ldr	r1, [pc, #656]	; (19b8 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1726:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    172a:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    172e:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1732:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    1734:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    1738:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    173a:	bls.n	1772 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    173c:	subs	r3, r6, #2
    173e:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1740:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1744:	bls.n	17e4 <usb_midi_read+0xec>
    1746:	cmp	r6, #5
    1748:	beq.n	17dc <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    174a:	cmp	r6, #4
    174c:	beq.w	1a98 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    1750:	subs	r3, r6, #5
    1752:	cmp	r3, #2
    1754:	bls.n	1856 <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    1756:	cmp	r6, #15
    1758:	bne.n	1778 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    175a:	cmp	r0, #247	; 0xf7
    175c:	bhi.n	17e4 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    175e:	cmp	r0, #240	; 0xf0
    1760:	beq.n	1768 <usb_midi_read+0x70>
    1762:	ldr	r3, [pc, #600]	; (19bc <usb_midi_read+0x2c4>)
    1764:	ldrh	r3, [r3, #0]
    1766:	cbz	r3, 1778 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    1768:	bl	1684 <sysex_byte>
		}
	}
	return 0;
    176c:	movs	r0, #0
    176e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    1772:	cbz	r7, 177e <usb_midi_read+0x86>
    1774:	cmp	r5, r7
    1776:	beq.n	177e <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    1778:	movs	r0, #0
    177a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    177e:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    1780:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1784:	beq.w	1896 <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    1788:	cmp	r6, #9
    178a:	beq.n	17b0 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    178c:	cmp	r6, #10
    178e:	bne.w	18ba <usb_midi_read+0x1c2>
    1792:	cmp	r3, #10
    1794:	bne.n	1778 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    1796:	ldr	r3, [pc, #552]	; (19c0 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    1798:	ldr	r2, [pc, #552]	; (19c4 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    179a:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    179c:	movs	r1, #160	; 0xa0
    179e:	b.n	18a4 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    17a0:	mov	r0, r3
    17a2:	bl	1b74 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    17a6:	movs	r0, #5
    17a8:	bl	1bc0 <usb_rx>
    17ac:	str	r0, [r6, #0]
    17ae:	b.n	171c <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    17b0:	cmp	r3, #9
    17b2:	bne.n	1778 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    17b4:	lsrs	r7, r4, #24
    17b6:	beq.w	1ab0 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    17ba:	ldr	r3, [pc, #524]	; (19c8 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    17bc:	ldr	r2, [pc, #516]	; (19c4 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    17be:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    17c0:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    17c2:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    17c6:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    17c8:	uxtb	r5, r5
    17ca:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    17cc:	cmp	r3, #0
    17ce:	beq.w	190c <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    17d2:	mov	r2, r4
    17d4:	mov	r1, r6
    17d6:	mov	r0, r5
    17d8:	blx	r3
    17da:	b.n	190c <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    17dc:	cmp	r0, #240	; 0xf0
    17de:	bls.n	1868 <usb_midi_read+0x170>
    17e0:	cmp	r0, #247	; 0xf7
    17e2:	beq.n	1868 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    17e4:	subs	r0, #241	; 0xf1
    17e6:	cmp	r0, #14
    17e8:	bhi.n	1778 <usb_midi_read+0x80>
    17ea:	add	r3, pc, #4	; (adr r3, 17f0 <usb_midi_read+0xf8>)
    17ec:	ldr.w	pc, [r3, r0, lsl #2]
    17f0:	.word	0x000019a7
    17f4:	.word	0x0000198b
    17f8:	.word	0x00001979
    17fc:	.word	0x00001779
    1800:	.word	0x00001779
    1804:	.word	0x0000196b
    1808:	.word	0x00001779
    180c:	.word	0x00001a4b
    1810:	.word	0x00001779
    1814:	.word	0x00001a15
    1818:	.word	0x00001a2f
    181c:	.word	0x00001953
    1820:	.word	0x00001779
    1824:	.word	0x0000193b
    1828:	.word	0x0000191f
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    182c:	ldr	r3, [pc, #412]	; (19cc <usb_midi_read+0x2d4>)
    182e:	ldrb	r3, [r3, #0]
    1830:	cmp	r3, #0
    1832:	beq.n	1778 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    1834:	movs	r0, #5
    1836:	bl	1bc0 <usb_rx>
    183a:	mov	r3, r0
    183c:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    183e:	cmp	r0, #0
    1840:	beq.n	1778 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    1842:	ldrh	r5, [r0, #0]
    1844:	cmp	r5, #0
    1846:	bne.w	170a <usb_midi_read+0x12>
			usb_free(rx_packet);
    184a:	bl	1b74 <usb_free>
			rx_packet = NULL;
    184e:	str	r5, [r6, #0]
			return 0;
    1850:	mov	r0, r5
    1852:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    1856:	bl	1684 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    185a:	ubfx	r0, r4, #16, #8
    185e:	bl	1684 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    1862:	cmp	r6, #7
    1864:	bne.n	186c <usb_midi_read+0x174>
    1866:	lsrs	r0, r4, #24
    1868:	bl	1684 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    186c:	ldr	r3, [pc, #332]	; (19bc <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    186e:	ldr	r2, [pc, #352]	; (19d0 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    1870:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    1872:	ldr	r0, [pc, #352]	; (19d4 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1874:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1876:	ldr	r5, [pc, #352]	; (19d8 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1878:	ldr	r2, [pc, #328]	; (19c4 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    187a:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    187c:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    187e:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1880:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1882:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1884:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1886:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    1888:	cbz	r4, 18ce <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    188a:	movs	r2, #1
    188c:	ldr	r0, [pc, #332]	; (19dc <usb_midi_read+0x2e4>)
    188e:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1890:	movs	r0, #1
    1892:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1896:	cmp	r3, #8
    1898:	bne.w	1778 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    189c:	ldr	r3, [pc, #320]	; (19e0 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    189e:	ldr	r2, [pc, #292]	; (19c4 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    18a0:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    18a2:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    18a4:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    18a8:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    18aa:	uxtb	r5, r5
    18ac:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    18ae:	cbz	r3, 190c <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    18b0:	mov	r0, r5
    18b2:	mov	r2, r4
    18b4:	mov	r1, r6
    18b6:	blx	r3
    18b8:	b.n	190c <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    18ba:	cmp	r6, #11
    18bc:	bne.n	18e2 <usb_midi_read+0x1ea>
    18be:	cmp	r3, #11
    18c0:	bne.w	1778 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    18c4:	ldr	r3, [pc, #284]	; (19e4 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    18c6:	ldr	r2, [pc, #252]	; (19c4 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    18c8:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    18ca:	movs	r1, #176	; 0xb0
    18cc:	b.n	18a4 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    18ce:	ldr	r3, [pc, #280]	; (19e8 <usb_midi_read+0x2f0>)
    18d0:	ldr	r3, [r3, #0]
    18d2:	cmp	r3, #0
    18d4:	beq.w	1ace <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    18d8:	ldr	r0, [pc, #256]	; (19dc <usb_midi_read+0x2e4>)
    18da:	blx	r3
		}
		return 1;
    18dc:	movs	r0, #1
    18de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    18e2:	cmp	r6, #12
    18e4:	bne.w	1ae8 <usb_midi_read+0x3f0>
    18e8:	cmp	r3, #12
    18ea:	bne.w	1778 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    18ee:	ldr	r3, [pc, #252]	; (19ec <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    18f0:	ldr	r2, [pc, #208]	; (19c4 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    18f2:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    18f4:	movs	r1, #192	; 0xc0
    18f6:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    18f8:	uxtb	r5, r5
    18fa:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    18fe:	cmp	r3, #0
    1900:	beq.w	1a94 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1904:	mov	r0, r5
    1906:	mov	r1, r6
    1908:	lsrs	r4, r4, #24
    190a:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    190c:	ldr	r1, [pc, #224]	; (19f0 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    190e:	ldr	r2, [pc, #196]	; (19d4 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    1910:	ldr	r3, [pc, #196]	; (19d8 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1912:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    1914:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    1916:	strb	r4, [r3, #0]
		return 1;
    1918:	movs	r0, #1
    191a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    191e:	ldr	r3, [pc, #212]	; (19f4 <usb_midi_read+0x2fc>)
    1920:	ldr	r3, [r3, #0]
    1922:	cmp	r3, #0
    1924:	beq.w	1ad4 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    1928:	blx	r3
    192a:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    192e:	ldr	r3, [pc, #148]	; (19c4 <usb_midi_read+0x2cc>)
    1930:	uxtb	r5, r5
    1932:	lsrs	r4, r4, #24
    1934:	strb.w	r8, [r3]
		goto return_message;
    1938:	b.n	190c <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    193a:	ldr	r3, [pc, #188]	; (19f8 <usb_midi_read+0x300>)
    193c:	ldr	r3, [r3, #0]
    193e:	cmp	r3, #0
    1940:	bne.n	1928 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    1942:	ldr	r3, [pc, #184]	; (19fc <usb_midi_read+0x304>)
    1944:	ldr	r3, [r3, #0]
    1946:	cbz	r3, 1972 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    1948:	movs	r0, #254	; 0xfe
    194a:	blx	r3
    194c:	ubfx	r6, r4, #16, #8
    1950:	b.n	192e <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    1952:	ldr	r3, [pc, #172]	; (1a00 <usb_midi_read+0x308>)
    1954:	ldr	r3, [r3, #0]
    1956:	cmp	r3, #0
    1958:	bne.n	1928 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    195a:	ldr	r3, [pc, #160]	; (19fc <usb_midi_read+0x304>)
    195c:	ldr	r3, [r3, #0]
    195e:	cbz	r3, 1972 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    1960:	movs	r0, #252	; 0xfc
    1962:	blx	r3
    1964:	ubfx	r6, r4, #16, #8
    1968:	b.n	192e <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    196a:	ldr	r3, [pc, #152]	; (1a04 <usb_midi_read+0x30c>)
    196c:	ldr	r3, [r3, #0]
    196e:	cmp	r3, #0
    1970:	bne.n	1928 <usb_midi_read+0x230>
    1972:	ubfx	r6, r4, #16, #8
    1976:	b.n	192e <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1978:	ldr	r3, [pc, #140]	; (1a08 <usb_midi_read+0x310>)
    197a:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    197c:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1980:	cmp	r3, #0
    1982:	beq.n	192e <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    1984:	mov	r0, r6
    1986:	blx	r3
    1988:	b.n	192e <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    198a:	ldr	r3, [pc, #128]	; (1a0c <usb_midi_read+0x314>)
    198c:	ldr	r2, [r3, #0]
    198e:	cmp	r2, #0
    1990:	beq.n	1972 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    1992:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    1994:	lsrs	r3, r4, #17
    1996:	and.w	r0, r6, #127	; 0x7f
    199a:	and.w	r3, r3, #16256	; 0x3f80
    199e:	orrs	r0, r3
    19a0:	uxtb	r6, r6
    19a2:	blx	r2
    19a4:	b.n	192e <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    19a6:	ldr	r3, [pc, #104]	; (1a10 <usb_midi_read+0x318>)
    19a8:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    19aa:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    19ae:	cmp	r3, #0
    19b0:	bne.n	1984 <usb_midi_read+0x28c>
    19b2:	b.n	192e <usb_midi_read+0x236>
    19b4:	.word	0x1fff1618
    19b8:	.word	0x1fff1a8a
    19bc:	.word	0x1fff1a86
    19c0:	.word	0x1fff15f8
    19c4:	.word	0x1fff1a84
    19c8:	.word	0x1fff1628
    19cc:	.word	0x1fff171c
    19d0:	.word	0x1fff15f4
    19d4:	.word	0x1fff1a88
    19d8:	.word	0x1fff1a89
    19dc:	.word	0x1fff1a8c
    19e0:	.word	0x1fff1620
    19e4:	.word	0x1fff1624
    19e8:	.word	0x1fff160c
    19ec:	.word	0x1fff15e8
    19f0:	.word	0x1fff1a8b
    19f4:	.word	0x1fff15d4
    19f8:	.word	0x1fff15d8
    19fc:	.word	0x1fff15dc
    1a00:	.word	0x1fff1614
    1a04:	.word	0x1fff1608
    1a08:	.word	0x1fff161c
    1a0c:	.word	0x1fff15f0
    1a10:	.word	0x1fff1604
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    1a14:	ldr	r3, [pc, #252]	; (1b14 <usb_midi_read+0x41c>)
    1a16:	ldr	r3, [r3, #0]
    1a18:	cmp	r3, #0
    1a1a:	bne.n	1928 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    1a1c:	ldr	r3, [pc, #248]	; (1b18 <usb_midi_read+0x420>)
    1a1e:	ldr	r3, [r3, #0]
    1a20:	cmp	r3, #0
    1a22:	beq.n	1972 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    1a24:	movs	r0, #250	; 0xfa
    1a26:	blx	r3
    1a28:	ubfx	r6, r4, #16, #8
    1a2c:	b.n	192e <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    1a2e:	ldr	r3, [pc, #236]	; (1b1c <usb_midi_read+0x424>)
    1a30:	ldr	r3, [r3, #0]
    1a32:	cmp	r3, #0
    1a34:	bne.w	1928 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    1a38:	ldr	r3, [pc, #220]	; (1b18 <usb_midi_read+0x420>)
    1a3a:	ldr	r3, [r3, #0]
    1a3c:	cmp	r3, #0
    1a3e:	beq.n	1972 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    1a40:	movs	r0, #251	; 0xfb
    1a42:	blx	r3
    1a44:	ubfx	r6, r4, #16, #8
    1a48:	b.n	192e <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    1a4a:	ldr	r3, [pc, #212]	; (1b20 <usb_midi_read+0x428>)
    1a4c:	ldr	r3, [r3, #0]
    1a4e:	cmp	r3, #0
    1a50:	bne.w	1928 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    1a54:	ldr	r3, [pc, #192]	; (1b18 <usb_midi_read+0x420>)
    1a56:	ldr	r3, [r3, #0]
    1a58:	cmp	r3, #0
    1a5a:	beq.n	1972 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    1a5c:	movs	r0, #248	; 0xf8
    1a5e:	blx	r3
    1a60:	ubfx	r6, r4, #16, #8
    1a64:	b.n	192e <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    1a66:	cmp	r3, #14
    1a68:	bne.w	1778 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    1a6c:	ldr	r2, [pc, #180]	; (1b24 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1a6e:	ldr	r3, [pc, #184]	; (1b28 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    1a70:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1a72:	movs	r1, #224	; 0xe0
    1a74:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    1a76:	cmp	r2, #0
    1a78:	beq.n	1b0a <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    1a7a:	lsrs	r6, r4, #16
    1a7c:	lsrs	r1, r4, #17
    1a7e:	and.w	r3, r6, #127	; 0x7f
    1a82:	and.w	r1, r1, #16256	; 0x3f80
    1a86:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    1a88:	uxtb	r5, r5
    1a8a:	sub.w	r1, r1, #8192	; 0x2000
    1a8e:	mov	r0, r5
    1a90:	blx	r2
    1a92:	uxtb	r6, r6
    1a94:	lsrs	r4, r4, #24
    1a96:	b.n	190c <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    1a98:	bl	1684 <sysex_byte>
		sysex_byte(n >> 16);
    1a9c:	ubfx	r0, r4, #16, #8
    1aa0:	bl	1684 <sysex_byte>
		sysex_byte(n >> 24);
    1aa4:	lsrs	r0, r4, #24
    1aa6:	bl	1684 <sysex_byte>
		return 0;
    1aaa:	movs	r0, #0
    1aac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1ab0:	ldr	r3, [pc, #120]	; (1b2c <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1ab2:	ldr	r2, [pc, #116]	; (1b28 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    1ab4:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1ab6:	movs	r1, #128	; 0x80
    1ab8:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1aba:	uxtb	r5, r5
    1abc:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1ac0:	cbz	r3, 1ae4 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1ac2:	mov	r1, r6
    1ac4:	mov	r0, r5
    1ac6:	mov	r2, r7
    1ac8:	blx	r3
    1aca:	mov	r4, r7
    1acc:	b.n	190c <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1ace:	movs	r0, #1
    1ad0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    1ad4:	ldr	r3, [pc, #64]	; (1b18 <usb_midi_read+0x420>)
    1ad6:	ldr	r3, [r3, #0]
    1ad8:	cmp	r3, #0
    1ada:	beq.w	1972 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    1ade:	movs	r0, #255	; 0xff
    1ae0:	blx	r3
    1ae2:	b.n	1972 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1ae4:	mov	r4, r3
    1ae6:	b.n	190c <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    1ae8:	cmp	r6, #13
    1aea:	bne.n	1a66 <usb_midi_read+0x36e>
    1aec:	cmp	r3, #13
    1aee:	bne.w	1778 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1af2:	ldr	r3, [pc, #60]	; (1b30 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1af4:	ldr	r2, [pc, #48]	; (1b28 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    1af6:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1af8:	movs	r1, #208	; 0xd0
    1afa:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1afc:	uxtb	r5, r5
    1afe:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1b02:	cmp	r3, #0
    1b04:	bne.w	1904 <usb_midi_read+0x20c>
    1b08:	b.n	1a94 <usb_midi_read+0x39c>
    1b0a:	ubfx	r6, r4, #16, #8
    1b0e:	uxtb	r5, r5
    1b10:	lsrs	r4, r4, #24
    1b12:	b.n	190c <usb_midi_read+0x214>
    1b14:	.word	0x1fff1600
    1b18:	.word	0x1fff15dc
    1b1c:	.word	0x1fff15e0
    1b20:	.word	0x1fff15d0
    1b24:	.word	0x1fff15ec
    1b28:	.word	0x1fff1a84
    1b2c:	.word	0x1fff1620
    1b30:	.word	0x1fff15fc

00001b34 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    1b34:	cpsid	i
	avail = usb_buffer_available;
    1b36:	ldr	r0, [pc, #52]	; (1b6c <usb_malloc+0x38>)
    1b38:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    1b3a:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    1b3e:	cmp	r3, #29
    1b40:	bgt.n	1b64 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    1b42:	mov.w	r1, #2147483648	; 0x80000000
    1b46:	lsrs	r1, r3
    1b48:	bic.w	r2, r2, r1
    1b4c:	str	r2, [r0, #0]
	__enable_irq();
    1b4e:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    1b50:	ldr	r0, [pc, #28]	; (1b70 <usb_malloc+0x3c>)
    1b52:	add.w	r3, r3, r3, lsl #3
    1b56:	lsls	r3, r3, #3
    1b58:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    1b5a:	movs	r1, #0
    1b5c:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    1b5e:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    1b60:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    1b62:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    1b64:	cpsie	i
		return NULL;
    1b66:	movs	r0, #0
    1b68:	bx	lr
    1b6a:	nop
    1b6c:	.word	0x1fff0c44
    1b70:	.word	0x1fff03d0

00001b74 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    1b74:	ldr	r3, [pc, #52]	; (1bac <usb_free+0x38>)
    1b76:	ldr	r2, [pc, #56]	; (1bb0 <usb_free+0x3c>)
    1b78:	subs	r3, r0, r3
    1b7a:	umull	r2, r3, r2, r3
    1b7e:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    1b80:	cmp	r3, #29
    1b82:	bhi.n	1b9e <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1b84:	ldr	r2, [pc, #44]	; (1bb4 <usb_free+0x40>)
    1b86:	ldrb	r2, [r2, #0]
    1b88:	cbnz	r2, 1ba0 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    1b8a:	cpsid	i
	usb_buffer_available |= mask;
    1b8c:	ldr	r0, [pc, #40]	; (1bb8 <usb_free+0x44>)
    1b8e:	mov.w	r1, #2147483648	; 0x80000000
    1b92:	ldr	r2, [r0, #0]
    1b94:	lsr.w	r3, r1, r3
    1b98:	orrs	r2, r3
    1b9a:	str	r2, [r0, #0]
	__enable_irq();
    1b9c:	cpsie	i
    1b9e:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1ba0:	ldr	r2, [pc, #24]	; (1bbc <usb_free+0x48>)
    1ba2:	ldrb	r2, [r2, #0]
    1ba4:	cmp	r2, #0
    1ba6:	beq.n	1b8a <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    1ba8:	b.w	1c28 <usb_rx_memory>
    1bac:	.word	0x1fff03d0
    1bb0:	.word	0x38e38e39
    1bb4:	.word	0x1fff1711
    1bb8:	.word	0x1fff0c44
    1bbc:	.word	0x1fff171c

00001bc0 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    1bc0:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    1bc2:	cmp	r3, #4
    1bc4:	bhi.n	1bf0 <usb_rx+0x30>
	__disable_irq();
    1bc6:	cpsid	i
	ret = rx_first[endpoint];
    1bc8:	ldr	r1, [pc, #40]	; (1bf4 <usb_rx+0x34>)
    1bca:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    1bce:	cbz	r0, 1bec <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    1bd0:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    1bd2:	ldr	r4, [pc, #36]	; (1bf8 <usb_rx+0x38>)
    1bd4:	ldrh	r5, [r0, #0]
    1bd6:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    1bda:	ldr	r6, [r0, #4]
    1bdc:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    1be0:	subs	r2, r2, r5
    1be2:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    1be6:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1be8:	pop	{r4, r5, r6}
    1bea:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    1bec:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1bee:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    1bf0:	movs	r0, #0
    1bf2:	bx	lr
    1bf4:	.word	0x1fff1688
    1bf8:	.word	0x1fff1bb0

00001bfc <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    1bfc:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1bfe:	cmp	r0, #4
    1c00:	bhi.n	1c1a <usb_tx_packet_count+0x1e>
	__disable_irq();
    1c02:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    1c04:	ldr	r3, [pc, #28]	; (1c24 <usb_tx_packet_count+0x28>)
    1c06:	ldr.w	r3, [r3, r0, lsl #2]
    1c0a:	cbz	r3, 1c1e <usb_tx_packet_count+0x22>
    1c0c:	movs	r0, #0
    1c0e:	ldr	r3, [r3, #4]
    1c10:	adds	r0, #1
    1c12:	cmp	r3, #0
    1c14:	bne.n	1c0e <usb_tx_packet_count+0x12>
	__enable_irq();
    1c16:	cpsie	i
	return count;
    1c18:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1c1a:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    1c1c:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    1c1e:	mov	r0, r3
    1c20:	b.n	1c16 <usb_tx_packet_count+0x1a>
    1c22:	nop
    1c24:	.word	0x1fff16e0

00001c28 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    1c28:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    1c2a:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1c2c:	ldr	r2, [pc, #204]	; (1cfc <usb_rx_memory+0xd4>)
    1c2e:	ldrb	r3, [r2, #0]
    1c30:	lsls	r3, r3, #28
    1c32:	bpl.n	1c42 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1c34:	ldr	r3, [pc, #200]	; (1d00 <usb_rx_memory+0xd8>)
    1c36:	ldr	r1, [r3, #32]
    1c38:	cmp	r1, #0
    1c3a:	beq.n	1cc4 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1c3c:	ldr	r1, [r3, #40]	; 0x28
    1c3e:	cmp	r1, #0
    1c40:	beq.n	1ce0 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1c42:	ldrb	r3, [r2, #1]
    1c44:	lsls	r5, r3, #28
    1c46:	bpl.n	1c56 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1c48:	ldr	r3, [pc, #180]	; (1d00 <usb_rx_memory+0xd8>)
    1c4a:	ldr	r1, [r3, #64]	; 0x40
    1c4c:	cmp	r1, #0
    1c4e:	beq.n	1cec <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1c50:	ldr	r1, [r3, #72]	; 0x48
    1c52:	cmp	r1, #0
    1c54:	beq.n	1ce4 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1c56:	ldrb	r3, [r2, #2]
    1c58:	lsls	r4, r3, #28
    1c5a:	bpl.n	1c6a <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1c5c:	ldr	r3, [pc, #160]	; (1d00 <usb_rx_memory+0xd8>)
    1c5e:	ldr	r1, [r3, #96]	; 0x60
    1c60:	cmp	r1, #0
    1c62:	beq.n	1cf0 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1c64:	ldr	r1, [r3, #104]	; 0x68
    1c66:	cmp	r1, #0
    1c68:	beq.n	1ce8 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1c6a:	ldrb	r3, [r2, #3]
    1c6c:	lsls	r1, r3, #28
    1c6e:	bpl.n	1c80 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1c70:	ldr	r3, [pc, #140]	; (1d00 <usb_rx_memory+0xd8>)
    1c72:	ldr.w	r1, [r3, #128]	; 0x80
    1c76:	cmp	r1, #0
    1c78:	beq.n	1cf8 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1c7a:	ldr.w	r1, [r3, #136]	; 0x88
    1c7e:	cbz	r1, 1ca6 <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1c80:	ldrb	r3, [r2, #4]
    1c82:	lsls	r3, r3, #28
    1c84:	bpl.n	1c98 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1c86:	ldr	r3, [pc, #120]	; (1d00 <usb_rx_memory+0xd8>)
    1c88:	ldr.w	r2, [r3, #160]	; 0xa0
    1c8c:	cmp	r2, #0
    1c8e:	beq.n	1cf4 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1c90:	ldr.w	r2, [r3, #168]	; 0xa8
    1c94:	movs	r4, #21
    1c96:	cbz	r2, 1ca8 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    1c98:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    1c9a:	ldr	r3, [pc, #104]	; (1d04 <usb_rx_memory+0xdc>)
    1c9c:	movs	r2, #0
    1c9e:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    1ca0:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    1ca2:	b.w	1b74 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1ca6:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1ca8:	ldr	r1, [pc, #88]	; (1d04 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1caa:	ldr	r5, [pc, #92]	; (1d08 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    1cac:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1cae:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    1cb2:	add.w	r3, r3, r4, lsl #3
    1cb6:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1cb8:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    1cba:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1cbc:	strb	r2, [r1, #0]
				__enable_irq();
    1cbe:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    1cc0:	pop	{r4, r5}
    1cc2:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    1cc4:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1cc6:	ldr	r4, [pc, #60]	; (1d04 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1cc8:	ldr	r5, [pc, #64]	; (1d0c <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    1cca:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1ccc:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    1cd0:	add.w	r3, r3, r2, lsl #3
    1cd4:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1cd6:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    1cd8:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1cda:	strb	r2, [r4, #0]
				__enable_irq();
    1cdc:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    1cde:	b.n	1cc0 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1ce0:	movs	r4, #5
    1ce2:	b.n	1ca8 <usb_rx_memory+0x80>
    1ce4:	movs	r4, #9
    1ce6:	b.n	1ca8 <usb_rx_memory+0x80>
    1ce8:	movs	r4, #13
    1cea:	b.n	1ca8 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    1cec:	movs	r2, #8
    1cee:	b.n	1cc6 <usb_rx_memory+0x9e>
    1cf0:	movs	r2, #12
    1cf2:	b.n	1cc6 <usb_rx_memory+0x9e>
    1cf4:	movs	r2, #20
    1cf6:	b.n	1cc6 <usb_rx_memory+0x9e>
    1cf8:	movs	r2, #16
    1cfa:	b.n	1cc6 <usb_rx_memory+0x9e>
    1cfc:	.word	0x00004028
    1d00:	.word	0x1fff0000
    1d04:	.word	0x1fff1711
    1d08:	.word	0x004000c8
    1d0c:	.word	0x00400088

00001d10 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    1d10:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    1d12:	cmp	r3, #4
    1d14:	bhi.n	1d52 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    1d16:	ldr	r2, [pc, #108]	; (1d84 <usb_tx+0x74>)
    1d18:	lsls	r0, r0, #5
    1d1a:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    1d1e:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    1d20:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    1d22:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    1d24:	ldr	r4, [pc, #96]	; (1d88 <usb_tx+0x78>)
    1d26:	ldrb	r2, [r4, r3]
    1d28:	cmp	r2, #3
    1d2a:	bhi.n	1d64 <usb_tx+0x54>
    1d2c:	tbb	[pc, r2]
    1d30:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    1d34:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1d36:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    1d38:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1d3a:	tst.w	r0, #8
    1d3e:	ite	ne
    1d40:	movne	r3, #200	; 0xc8
    1d42:	moveq	r3, #136	; 0x88
    1d44:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    1d48:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1d4a:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    1d4c:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    1d4e:	cpsie	i
}
    1d50:	pop	{r4, r5}
    1d52:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    1d54:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    1d56:	movs	r2, #2
		break;
    1d58:	b.n	1d36 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    1d5a:	movs	r2, #5
    1d5c:	b.n	1d36 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    1d5e:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    1d60:	movs	r2, #4
		break;
    1d62:	b.n	1d36 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    1d64:	ldr	r2, [pc, #36]	; (1d8c <usb_tx+0x7c>)
    1d66:	ldr.w	r0, [r2, r3, lsl #2]
    1d6a:	cbz	r0, 1d7c <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    1d6c:	ldr	r2, [pc, #32]	; (1d90 <usb_tx+0x80>)
    1d6e:	ldr.w	r0, [r2, r3, lsl #2]
    1d72:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    1d74:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    1d78:	cpsie	i
		return;
    1d7a:	b.n	1d50 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    1d7c:	str.w	r1, [r2, r3, lsl #2]
    1d80:	ldr	r2, [pc, #12]	; (1d90 <usb_tx+0x80>)
    1d82:	b.n	1d74 <usb_tx+0x64>
    1d84:	.word	0x1fff0000
    1d88:	.word	0x1fff1720
    1d8c:	.word	0x1fff16e0
    1d90:	.word	0x1fff16f4

00001d94 <usb_isr>:
}



void usb_isr(void)
{
    1d94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    1d98:	ldr.w	fp, [pc, #776]	; 20a4 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    1d9c:	ldr.w	sl, [pc, #776]	; 20a8 <usb_isr+0x314>
}



void usb_isr(void)
{
    1da0:	sub	sp, #28
    1da2:	b.n	1e2e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    1da4:	ldr	r7, [pc, #680]	; (2050 <usb_isr+0x2bc>)
    1da6:	mov.w	r8, r3, lsr #2
    1daa:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    1dae:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    1db0:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    1db4:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    1db8:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    1dba:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    1dbe:	and.w	r4, r3, #255	; 0xff
    1dc2:	cmp	r3, #0
    1dc4:	bne.w	1fc8 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    1dc8:	ldr.w	r3, [r7, r8, lsl #3]
    1dcc:	lsrs	r3, r3, #16
    1dce:	uxth	r1, r3
    1dd0:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    1dd4:	cmp	r3, #0
    1dd6:	beq.w	1fb6 <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    1dda:	ldr	r3, [pc, #632]	; (2054 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    1ddc:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    1de0:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    1de4:	ldr.w	r2, [r3, r6, lsl #2]
    1de8:	cmp	r2, #0
    1dea:	beq.w	2258 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    1dee:	ldr	r5, [pc, #616]	; (2058 <usb_isr+0x2c4>)
    1df0:	ldr.w	r3, [r5, r6, lsl #2]
    1df4:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    1df6:	ldr	r4, [pc, #612]	; (205c <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    1df8:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    1dfc:	ldrh.w	r3, [r4, r6, lsl #1]
    1e00:	add	r1, r3
    1e02:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    1e06:	bl	1b34 <usb_malloc>
					if (packet) {
    1e0a:	cmp	r0, #0
    1e0c:	beq.w	224a <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    1e10:	ldr	r2, [pc, #588]	; (2060 <usb_isr+0x2cc>)
    1e12:	ldr	r3, [pc, #592]	; (2064 <usb_isr+0x2d0>)
    1e14:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    1e18:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    1e1c:	it	ne
    1e1e:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    1e20:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    1e24:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    1e28:	movs	r3, #8
    1e2a:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    1e2e:	ldrb.w	r4, [fp]
    1e32:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    1e34:	lsls	r0, r4, #29
    1e36:	bpl.n	1e72 <usb_isr+0xde>
		if (usb_configuration) {
    1e38:	ldr	r3, [pc, #556]	; (2068 <usb_isr+0x2d4>)
    1e3a:	ldrb	r3, [r3, #0]
    1e3c:	cbz	r3, 1e6c <usb_isr+0xd8>
			t = usb_reboot_timer;
    1e3e:	ldr	r1, [pc, #556]	; (206c <usb_isr+0x2d8>)
    1e40:	ldrb	r2, [r1, #0]
			if (t) {
    1e42:	and.w	r3, r2, #255	; 0xff
    1e46:	cbz	r2, 1e52 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    1e48:	subs	r3, #1
    1e4a:	uxtb	r3, r3
    1e4c:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    1e4e:	cbnz	r3, 1e52 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    1e50:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    1e52:	ldr	r1, [pc, #540]	; (2070 <usb_isr+0x2dc>)
    1e54:	ldrb	r2, [r1, #0]
			if (t) {
    1e56:	and.w	r3, r2, #255	; 0xff
    1e5a:	cbz	r2, 1e68 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    1e5c:	subs	r3, #1
    1e5e:	uxtb	r3, r3
    1e60:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    1e62:	cmp	r3, #0
    1e64:	beq.w	21f6 <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    1e68:	bl	16cc <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    1e6c:	movs	r3, #4
    1e6e:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    1e72:	and.w	r3, r4, #8
    1e76:	and.w	r2, r3, #255	; 0xff
    1e7a:	cmp	r3, #0
    1e7c:	beq.w	2010 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    1e80:	ldrb.w	r3, [sl]
    1e84:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    1e86:	lsrs	r6, r3, #4
    1e88:	bne.n	1da4 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    1e8a:	lsrs	r4, r3, #2
    1e8c:	ldr.w	r9, [pc, #448]	; 2050 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    1e90:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    1e94:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    1e98:	ubfx	r2, r2, #2, #4
    1e9c:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    1e9e:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    1ea0:	cmp	r2, #12
    1ea2:	bhi.w	1fae <usb_isr+0x21a>
    1ea6:	tbb	[pc, r2]
    1eaa:	.short	0x7878
    1eac:	.word	0x82828282
    1eb0:	.word	0x82438282
    1eb4:	.short	0x8282
    1eb6:	.byte	0x07
    1eb7:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    1eb8:	ldr	r0, [r1, #0]
    1eba:	ldr	r5, [pc, #440]	; (2074 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    1ebc:	ldr	r3, [pc, #416]	; (2060 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    1ebe:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    1ec0:	ldr	r7, [pc, #436]	; (2078 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    1ec2:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    1ec6:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    1ec8:	ldr	r6, [pc, #432]	; (207c <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    1eca:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    1ecc:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    1ed0:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    1ed2:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    1ed4:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    1ed6:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    1eda:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    1edc:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    1ee0:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    1ee4:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    1ee6:	bhi.w	20ac <usb_isr+0x318>
    1eea:	cmp.w	r1, #1664	; 0x680
    1eee:	bcs.w	2518 <usb_isr+0x784>
    1ef2:	cmp.w	r1, #258	; 0x102
    1ef6:	beq.w	22c6 <usb_isr+0x532>
    1efa:	bhi.w	2290 <usb_isr+0x4fc>
    1efe:	cmp	r1, #128	; 0x80
    1f00:	beq.w	254c <usb_isr+0x7b8>
    1f04:	cmp	r1, #130	; 0x82
    1f06:	bne.w	22d2 <usb_isr+0x53e>
    1f0a:	ldrh	r1, [r5, #4]
    1f0c:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    1f10:	cmp	r1, #5
    1f12:	bhi.w	22d2 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    1f16:	ldr	r3, [pc, #360]	; (2080 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    1f18:	ldr	r4, [pc, #360]	; (2084 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    1f1a:	lsls	r1, r1, #2
    1f1c:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    1f1e:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    1f20:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    1f22:	ldrb	r2, [r3, #0]
    1f24:	lsls	r3, r2, #30
    1f26:	bpl.w	265c <usb_isr+0x8c8>
    1f2a:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    1f2c:	movs	r0, #2
    1f2e:	b.n	235a <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    1f30:	ldr	r7, [pc, #324]	; (2078 <usb_isr+0x2e4>)
    1f32:	ldr	r2, [r7, #0]
		if (data) {
    1f34:	cbz	r2, 1f84 <usb_isr+0x1f0>
			size = ep0_tx_len;
    1f36:	ldr	r3, [pc, #336]	; (2088 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1f38:	ldr	r6, [pc, #320]	; (207c <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1f3a:	ldr	r1, [pc, #336]	; (208c <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    1f3c:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1f3e:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1f40:	ldrb	r5, [r1, #0]
    1f42:	cmp	r0, #64	; 0x40
    1f44:	mov	lr, r0
    1f46:	orr.w	r8, r5, #2
    1f4a:	it	cs
    1f4c:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1f50:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    1f52:	eor.w	r4, r4, #1
    1f56:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    1f58:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1f5c:	ite	eq
    1f5e:	moveq	r4, #136	; 0x88
    1f60:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1f62:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    1f66:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    1f68:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1f6c:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1f70:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    1f72:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1f74:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    1f78:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    1f7a:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    1f7c:	cmp	r0, #0
    1f7e:	beq.w	20ee <usb_isr+0x35a>
    1f82:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    1f84:	ldr	r3, [pc, #236]	; (2074 <usb_isr+0x2e0>)
    1f86:	ldrh	r2, [r3, #0]
    1f88:	cmp.w	r2, #1280	; 0x500
    1f8c:	bne.n	1fae <usb_isr+0x21a>
			setup.bRequest = 0;
    1f8e:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    1f90:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    1f92:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    1f94:	ldr	r3, [pc, #248]	; (2090 <usb_isr+0x2fc>)
    1f96:	strb	r2, [r3, #0]
    1f98:	b.n	1fae <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    1f9a:	ldr	r2, [pc, #216]	; (2074 <usb_isr+0x2e0>)
    1f9c:	ldrh	r0, [r2, #0]
    1f9e:	movw	r2, #8225	; 0x2021
    1fa2:	cmp	r0, r2
    1fa4:	beq.w	20f8 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    1fa8:	ldr	r2, [pc, #180]	; (2060 <usb_isr+0x2cc>)
    1faa:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    1fae:	ldr	r2, [pc, #228]	; (2094 <usb_isr+0x300>)
    1fb0:	movs	r3, #1
    1fb2:	strb	r3, [r2, #0]
    1fb4:	b.n	1e28 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1fb6:	ldr	r2, [pc, #168]	; (2060 <usb_isr+0x2cc>)
    1fb8:	ldr	r3, [pc, #168]	; (2064 <usb_isr+0x2d0>)
    1fba:	tst.w	r9, #8
    1fbe:	it	ne
    1fc0:	movne	r3, r2
    1fc2:	str.w	r3, [r7, r8, lsl #3]
    1fc6:	b.n	1e28 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    1fc8:	bl	1b74 <usb_free>
				packet = tx_first[endpoint];
    1fcc:	ldr	r2, [pc, #200]	; (2098 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    1fce:	ldr	r1, [pc, #204]	; (209c <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    1fd0:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    1fd4:	cmp	r3, #0
    1fd6:	beq.w	2260 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    1fda:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    1fdc:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    1fde:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    1fe2:	add.w	r2, r3, #8
    1fe6:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    1fea:	cmp	r4, #3
    1fec:	bhi.n	1ffa <usb_isr+0x266>
    1fee:	tbb	[pc, r4]
    1ff2:	.short	0x022c
    1ff4:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    1ff6:	movs	r2, #2
    1ff8:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    1ffa:	ldrh	r2, [r3, #0]
    1ffc:	tst.w	r9, #8
    2000:	ite	eq
    2002:	moveq	r3, #136	; 0x88
    2004:	movne	r3, #200	; 0xc8
    2006:	orr.w	r3, r3, r2, lsl #16
    200a:	str.w	r3, [r7, r8, lsl #3]
    200e:	b.n	1e28 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2010:	lsls	r0, r4, #31
    2012:	bmi.w	21fc <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    2016:	lsls	r1, r4, #24
    2018:	bmi.w	227c <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    201c:	lsls	r2, r4, #30
    201e:	bpl.n	202e <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2020:	ldr	r2, [pc, #124]	; (20a0 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2022:	ldr	r1, [pc, #128]	; (20a4 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2024:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2026:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2028:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    202a:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    202c:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    202e:	lsls	r3, r4, #27
    2030:	bpl.n	2038 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2032:	ldr	r3, [pc, #112]	; (20a4 <usb_isr+0x310>)
    2034:	movs	r2, #16
    2036:	strb	r2, [r3, #0]
	}

}
    2038:	add	sp, #28
    203a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    203e:	movs	r2, #4
    2040:	strb	r2, [r1, r6]
						break;
    2042:	b.n	1ffa <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2044:	movs	r2, #5
    2046:	strb	r2, [r1, r6]
						break;
    2048:	b.n	1ffa <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    204a:	movs	r2, #3
    204c:	strb	r2, [r1, r6]
						break;
    204e:	b.n	1ffa <usb_isr+0x266>
    2050:	.word	0x1fff0000
    2054:	.word	0x1fff1688
    2058:	.word	0x1fff1630
    205c:	.word	0x1fff1bb0
    2060:	.word	0x004000c8
    2064:	.word	0x00400088
    2068:	.word	0x1fff171c
    206c:	.word	0x1fff169d
    2070:	.word	0x1fff15b4
    2074:	.word	0x1fff1708
    2078:	.word	0x1fff162c
    207c:	.word	0x1fff169c
    2080:	.word	0x400720c0
    2084:	.word	0x1fff1714
    2088:	.word	0x1fff1644
    208c:	.word	0x1fff1710
    2090:	.word	0x40072098
    2094:	.word	0x40072094
    2098:	.word	0x1fff16e0
    209c:	.word	0x1fff1720
    20a0:	.word	0x40072088
    20a4:	.word	0x40072080
    20a8:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    20ac:	movw	r4, #8225	; 0x2021
    20b0:	cmp	r1, r4
    20b2:	beq.w	21ee <usb_isr+0x45a>
    20b6:	bhi.n	214c <usb_isr+0x3b8>
    20b8:	cmp.w	r1, #2176	; 0x880
    20bc:	beq.w	2352 <usb_isr+0x5be>
    20c0:	cmp.w	r1, #2304	; 0x900
    20c4:	bne.w	22d2 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    20c8:	ldr	r2, [pc, #712]	; (2394 <usb_isr+0x600>)
    20ca:	ldr	r4, [pc, #716]	; (2398 <usb_isr+0x604>)
    20cc:	ldrb	r1, [r5, #2]
    20ce:	strb	r1, [r2, #0]
    20d0:	add.w	r5, r4, #160	; 0xa0
    20d4:	b.n	20de <usb_isr+0x34a>
    20d6:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    20d8:	cmp	r5, r4
    20da:	beq.w	23f0 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    20de:	ldr	r3, [r4, #32]
    20e0:	lsls	r1, r3, #24
    20e2:	bpl.n	20d6 <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    20e4:	ldr	r0, [r4, #36]	; 0x24
    20e6:	subs	r0, #8
    20e8:	bl	1b74 <usb_free>
    20ec:	b.n	20d6 <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    20ee:	cmp.w	lr, #64	; 0x40
    20f2:	it	ne
    20f4:	movne	r2, #0
    20f6:	b.n	1f82 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    20f8:	ldr	r2, [pc, #672]	; (239c <usb_isr+0x608>)
    20fa:	ldrb	r5, [r1, #0]
    20fc:	ldrb	r0, [r1, #1]
    20fe:	strb	r5, [r2, #0]
    2100:	strb	r0, [r2, #1]
    2102:	ldrb	r5, [r1, #2]
    2104:	ldrb	r0, [r1, #3]
    2106:	strb	r5, [r2, #2]
    2108:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    210a:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    210c:	ldrb	r5, [r1, #4]
    210e:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2110:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2112:	ldrb	r5, [r1, #5]
    2114:	ldrb	r1, [r1, #6]
    2116:	strb	r5, [r2, #5]
    2118:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    211a:	beq.w	234a <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    211e:	ldr	r1, [pc, #640]	; (23a0 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2120:	ldr	r6, [pc, #640]	; (23a4 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2122:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2124:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2126:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    212a:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    212c:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2130:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2132:	ite	eq
    2134:	moveq	r1, #136	; 0x88
    2136:	movne	r1, #200	; 0xc8
    2138:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    213c:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2140:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2144:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2146:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2148:	str	r1, [r2, #4]
    214a:	b.n	1fa8 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    214c:	movw	r4, #8737	; 0x2221
    2150:	cmp	r1, r4
    2152:	bne.w	2566 <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2156:	ldr.w	ip, [pc, #656]	; 23e8 <usb_isr+0x654>
    215a:	ldr	r3, [pc, #588]	; (23a8 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    215c:	ldr	r1, [pc, #588]	; (23ac <usb_isr+0x618>)
    215e:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2160:	ldr.w	r5, [ip]
    2164:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    2166:	str	r0, [sp, #4]
    2168:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    216a:	movs	r0, #0
    216c:	str	r0, [sp, #8]
    216e:	mov	r8, r0
    2170:	mov	ip, r0
    2172:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2174:	ldr	r1, [pc, #552]	; (23a0 <usb_isr+0x60c>)
    2176:	ldrb	r5, [r1, #0]
    2178:	orr.w	lr, r5, #2
    217c:	add.w	r3, r9, lr, lsl #3
    2180:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2182:	ldr	r3, [sp, #4]
    2184:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2186:	ldr	r3, [sp, #12]
    2188:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    218a:	ite	eq
    218c:	moveq	r4, #136	; 0x88
    218e:	movne	r4, #200	; 0xc8
    2190:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2194:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2198:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    219c:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    219e:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    21a0:	ldr.w	lr, [pc, #500]	; 2398 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    21a4:	ldr	r3, [pc, #508]	; (23a4 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    21a6:	ldr.w	r8, [pc, #504]	; 23a0 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    21aa:	cmp	r0, #0
    21ac:	bne.w	22e0 <usb_isr+0x54c>
    21b0:	cmp.w	ip, #64	; 0x40
    21b4:	bne.n	21ee <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    21b6:	orr.w	ip, r4, #2
    21ba:	add.w	r3, r9, ip, lsl #3
    21be:	ldr	r4, [sp, #8]
    21c0:	ldr.w	lr, [pc, #468]	; 2398 <usb_isr+0x604>
    21c4:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    21c6:	cmp	r2, #0
    21c8:	bne.w	230c <usb_isr+0x578>
    21cc:	lsls	r2, r0, #16
    21ce:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    21d2:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    21d6:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    21da:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    21dc:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    21de:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    21e0:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    21e2:	cmp	r0, #64	; 0x40
    21e4:	bne.n	21ee <usb_isr+0x45a>
    21e6:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    21e8:	ldr	r2, [pc, #452]	; (23b0 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    21ea:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    21ec:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    21ee:	ldr	r2, [pc, #452]	; (23b4 <usb_isr+0x620>)
    21f0:	movs	r3, #1
    21f2:	strb	r3, [r2, #0]
    21f4:	b.n	1fae <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    21f6:	bl	ff0 <usb_serial_flush_callback>
    21fa:	b.n	1e68 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    21fc:	ldr	r3, [pc, #408]	; (2398 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    21fe:	ldr	r0, [pc, #436]	; (23b4 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    2200:	ldr	r1, [pc, #412]	; (23a0 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    2202:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2204:	mov.w	lr, #2
    2208:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    220c:	ldr	r7, [pc, #424]	; (23b8 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    220e:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2210:	ldr	r1, [pc, #424]	; (23bc <usb_isr+0x628>)
    2212:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    2214:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2216:	ldr	r6, [pc, #424]	; (23c0 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    2218:	ldr	r5, [pc, #424]	; (23c4 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    221a:	ldr	r4, [pc, #428]	; (23c8 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    221c:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    221e:	movs	r1, #13
    2220:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2222:	movs	r1, #255	; 0xff
    2224:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2226:	ldr.w	lr, [pc, #452]	; 23ec <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    222a:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    222c:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    222e:	ldr	r5, [pc, #412]	; (23cc <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2230:	ldr	r2, [pc, #412]	; (23d0 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2232:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2236:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2238:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    223a:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    223e:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2240:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2242:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    2244:	add	sp, #28
    2246:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    224a:	ldr	r2, [pc, #392]	; (23d4 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    224c:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    2250:	ldrb	r3, [r2, #0]
    2252:	adds	r3, #1
    2254:	strb	r3, [r2, #0]
    2256:	b.n	1e28 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    2258:	str.w	r0, [r3, r6, lsl #2]
    225c:	ldr	r5, [pc, #376]	; (23d8 <usb_isr+0x644>)
    225e:	b.n	1df6 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    2260:	ldrb	r3, [r1, r6]
    2262:	cmp	r3, #3
    2264:	bhi.n	233c <usb_isr+0x5a8>
    2266:	add	r2, pc, #4	; (adr r2, 226c <usb_isr+0x4d8>)
    2268:	ldr.w	pc, [r2, r3, lsl #2]
    226c:	.word	0x00001e29
    2270:	.word	0x00001e29
    2274:	.word	0x000022c1
    2278:	.word	0x000022bb
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    227c:	ldr	r1, [pc, #312]	; (23b8 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    227e:	ldr	r3, [pc, #324]	; (23c4 <usb_isr+0x630>)
    2280:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2282:	movs	r0, #13
    2284:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    2286:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2288:	lsls	r2, r4, #30
    228a:	bpl.w	202e <usb_isr+0x29a>
    228e:	b.n	2020 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2290:	movw	r2, #770	; 0x302
    2294:	cmp	r1, r2
    2296:	bne.w	2556 <usb_isr+0x7c2>
    229a:	ldrh	r1, [r5, #4]
    229c:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    22a0:	cmp	r1, #5
    22a2:	bhi.n	22d2 <usb_isr+0x53e>
    22a4:	ldrh	r2, [r5, #2]
    22a6:	cbnz	r2, 22d2 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    22a8:	ldr	r4, [pc, #268]	; (23b8 <usb_isr+0x624>)
    22aa:	str	r0, [sp, #4]
    22ac:	lsls	r1, r1, #2
    22ae:	add	r4, r1
    22b0:	ldrb	r1, [r4, #0]
    22b2:	orr.w	r1, r1, #2
    22b6:	strb	r1, [r4, #0]
    22b8:	b.n	216a <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    22ba:	movs	r3, #1
    22bc:	strb	r3, [r1, r6]
						break;
    22be:	b.n	1e28 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    22c0:	movs	r3, #0
    22c2:	strb	r3, [r1, r6]
						break;
    22c4:	b.n	1e28 <usb_isr+0x94>
    22c6:	ldrh	r1, [r5, #4]
    22c8:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    22cc:	cmp	r1, #5
    22ce:	bls.w	2570 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    22d2:	ldr	r2, [pc, #228]	; (23b8 <usb_isr+0x624>)
    22d4:	movs	r3, #15
    22d6:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    22d8:	ldr	r2, [pc, #216]	; (23b4 <usb_isr+0x620>)
    22da:	movs	r3, #1
    22dc:	strb	r3, [r2, #0]
    22de:	b.n	1fae <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    22e0:	cmp	r0, #64	; 0x40
    22e2:	bls.w	21b6 <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    22e6:	orr.w	r4, r4, #2
    22ea:	add.w	r1, lr, r4, lsl #3
    22ee:	ldr	r6, [sp, #8]
    22f0:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22f2:	cbz	r2, 2324 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    22f4:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22f8:	ldr	r2, [pc, #224]	; (23dc <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    22fa:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    22fc:	mov	r3, r6
    22fe:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2300:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2304:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2306:	str.w	r2, [lr, r4, lsl #3]
    230a:	b.n	21e8 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    230c:	ldrb.w	r3, [sp, #4]
    2310:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2312:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2314:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2316:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2318:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    231c:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    231e:	str.w	r2, [lr, ip, lsl #3]
    2322:	b.n	21e2 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    2324:	ldrb.w	r1, [sp, #4]
    2328:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    232a:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    232c:	ldr	r2, [pc, #140]	; (23bc <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    232e:	strb.w	r5, [r8]
    2332:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2334:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2336:	str.w	r2, [lr, r4, lsl #3]
    233a:	b.n	21e8 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    233c:	tst.w	r9, #8
    2340:	ite	eq
    2342:	moveq	r3, #2
    2344:	movne	r3, #3
    2346:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    2348:	b.n	1e28 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    234a:	ldr	r2, [pc, #148]	; (23e0 <usb_isr+0x64c>)
    234c:	movs	r1, #15
    234e:	strb	r1, [r2, #0]
    2350:	b.n	211e <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2352:	ldr	r2, [pc, #64]	; (2394 <usb_isr+0x600>)
    2354:	ldr	r4, [pc, #140]	; (23e4 <usb_isr+0x650>)
    2356:	ldrb	r2, [r2, #0]
    2358:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    235a:	ldrh	r2, [r5, #6]
    235c:	cmp	r2, r0
    235e:	bcs.w	2724 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2362:	ldr	r1, [pc, #60]	; (23a0 <usb_isr+0x60c>)
    2364:	ldrb	r5, [r1, #0]
    2366:	cmp	r2, #64	; 0x40
    2368:	mov	ip, r2
    236a:	orr.w	lr, r5, #2
    236e:	it	cs
    2370:	movcs.w	ip, #64	; 0x40
    2374:	add.w	r3, r4, ip
    2378:	add.w	r0, r9, lr, lsl #3
    237c:	str	r3, [sp, #8]
    237e:	movs	r3, #1
    2380:	str	r4, [r0, #4]
    2382:	mov.w	r8, ip, lsl #16
    2386:	rsb	r0, ip, r2
    238a:	str	r3, [sp, #4]
    238c:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    238e:	movs	r4, #200	; 0xc8
    2390:	b.n	2190 <usb_isr+0x3fc>
    2392:	nop
    2394:	.word	0x1fff171c
    2398:	.word	0x1fff0000
    239c:	.word	0x1fff1a78
    23a0:	.word	0x1fff1710
    23a4:	.word	0x1fff169c
    23a8:	.word	0x1fff1a80
    23ac:	.word	0x1fff15c4
    23b0:	.word	0x1fff1644
    23b4:	.word	0x40072094
    23b8:	.word	0x400720c0
    23bc:	.word	0x00400088
    23c0:	.word	0x40072088
    23c4:	.word	0x40072080
    23c8:	.word	0x40072098
    23cc:	.word	0x1fff1648
    23d0:	.word	0x1fff16a0
    23d4:	.word	0x1fff1711
    23d8:	.word	0x1fff1630
    23dc:	.word	0x004000c8
    23e0:	.word	0x1fff169d
    23e4:	.word	0x1fff1714
    23e8:	.word	0x1fff15cc
    23ec:	.word	0x4007208c
    23f0:	ldr	r4, [pc, #704]	; (26b4 <usb_isr+0x920>)
    23f2:	ldr	r2, [pc, #708]	; (26b8 <usb_isr+0x924>)
    23f4:	ldr	r1, [pc, #708]	; (26bc <usb_isr+0x928>)
    23f6:	ldr	r0, [pc, #712]	; (26c0 <usb_isr+0x92c>)
    23f8:	ldr	r5, [pc, #712]	; (26c4 <usb_isr+0x930>)
    23fa:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    23fc:	movs	r3, #0
    23fe:	ldr	r4, [pc, #712]	; (26c8 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2400:	str	r4, [sp, #8]
    2402:	str	r6, [sp, #20]
    2404:	str	r5, [sp, #12]
    2406:	mov	r8, r0
    2408:	mov	r4, r3
    240a:	str	r7, [sp, #16]
    240c:	mov	r6, r2
    240e:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    2410:	ldr	r0, [r6, #0]
			while (p) {
    2412:	cbz	r0, 2420 <usb_isr+0x68c>
				n = p->next;
    2414:	ldr	r7, [r0, #4]
				usb_free(p);
    2416:	bl	1b74 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    241a:	mov	r0, r7
    241c:	cmp	r7, #0
    241e:	bne.n	2414 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    2420:	movs	r3, #0
    2422:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    2424:	ldr	r3, [sp, #12]
			p = tx_first[i];
    2426:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    2428:	mov	r2, r3
    242a:	movs	r3, #0
    242c:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    2430:	cbz	r0, 243e <usb_isr+0x6aa>
				n = p->next;
    2432:	ldr	r7, [r0, #4]
				usb_free(p);
    2434:	bl	1b74 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    2438:	mov	r0, r7
    243a:	cmp	r7, #0
    243c:	bne.n	2432 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    243e:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2440:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    2442:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2444:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    2446:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    244a:	ldr	r2, [sp, #8]
    244c:	mov.w	r1, #0
			switch (tx_state[i]) {
    2450:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    2452:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    2456:	cmp	r3, #3
    2458:	bhi.n	246a <usb_isr+0x6d6>
    245a:	tbb	[pc, r3]
    245e:	.short	0x0258
    2460:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2462:	ldr	r3, [sp, #4]
    2464:	mov.w	r2, #1
    2468:	strb	r2, [r3, #0]
    246a:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    246c:	adds	r4, #1
    246e:	adds	r3, #1
    2470:	cmp	r4, #5
    2472:	add.w	r6, r6, #4
    2476:	add.w	r5, r5, #4
    247a:	str	r3, [sp, #4]
    247c:	bne.n	2410 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    247e:	ldr	r4, [pc, #588]	; (26cc <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    2480:	ldr	r5, [pc, #588]	; (26d0 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2482:	ldrb	r2, [r4, #0]
			*reg = epconf;
    2484:	ldr	r3, [pc, #588]	; (26d4 <usb_isr+0x940>)
    2486:	ldr	r7, [sp, #16]
    2488:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    248a:	movs	r1, #0
    248c:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    248e:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2490:	lsls	r2, r2, #28
    2492:	bmi.n	258a <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2494:	ldrb	r2, [r4, #1]
			*reg = epconf;
    2496:	ldr	r1, [pc, #576]	; (26d8 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2498:	ldr.w	r8, [pc, #588]	; 26e8 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    249c:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    249e:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    24a0:	mov.w	r1, #0
    24a4:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    24a8:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    24ac:	bmi.w	2636 <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    24b0:	ldrb	r2, [r4, #2]
			*reg = epconf;
    24b2:	ldr	r1, [pc, #552]	; (26dc <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    24b4:	ldr.w	r8, [pc, #560]	; 26e8 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    24b8:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    24ba:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    24bc:	mov.w	r1, #0
    24c0:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    24c4:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    24c8:	bmi.w	260e <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    24cc:	ldr	r1, [pc, #528]	; (26e0 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    24ce:	ldrb	r2, [r4, #3]
			*reg = epconf;
    24d0:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    24d2:	movs	r1, #0
    24d4:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    24d8:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    24dc:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    24de:	ldr.w	r8, [pc, #520]	; 26e8 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    24e2:	bmi.n	25e0 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    24e4:	ldrb	r2, [r4, #4]
			*reg = epconf;
    24e6:	ldr	r1, [pc, #508]	; (26e4 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    24e8:	ldr	r4, [pc, #508]	; (26e8 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    24ea:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    24ec:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    24ee:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    24f0:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    24f4:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    24f8:	bmi.n	25b6 <usb_isr+0x822>
    24fa:	ldrb	r3, [r6, #0]
    24fc:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    24fe:	movs	r1, #0
    2500:	eor.w	r2, r3, #1
    2504:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    2508:	str.w	r1, [r9, #184]	; 0xb8
    250c:	b.n	216a <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    250e:	ldr	r3, [sp, #4]
    2510:	mov.w	r2, #0
    2514:	strb	r2, [r3, #0]
    2516:	b.n	246a <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    2518:	ldr	r2, [pc, #464]	; (26ec <usb_isr+0x958>)
    251a:	ldr	r4, [r2, #4]
    251c:	cmp	r4, #0
    251e:	beq.w	22d2 <usb_isr+0x53e>
    2522:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2524:	ldrh.w	lr, [r5, #4]
    2528:	b.n	2534 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    252a:	adds	r2, #12
			if (list->addr == NULL) break;
    252c:	ldr	r4, [r2, #4]
    252e:	cmp	r4, #0
    2530:	beq.w	22d2 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2534:	ldrh	r3, [r2, #0]
    2536:	cmp	r3, r0
    2538:	bne.n	252a <usb_isr+0x796>
    253a:	ldrh	r3, [r2, #2]
    253c:	cmp	r3, lr
    253e:	bne.n	252a <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    2540:	lsrs	r0, r0, #8
    2542:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    2544:	ite	eq
    2546:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    2548:	ldrhne	r0, [r2, #8]
    254a:	b.n	235a <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    254c:	ldr	r4, [pc, #416]	; (26f0 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    254e:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2550:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2552:	strb	r2, [r4, #1]
    2554:	b.n	235a <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2556:	cmp.w	r1, #1280	; 0x500
    255a:	bne.w	22d2 <usb_isr+0x53e>
    255e:	movs	r3, #1
    2560:	movs	r2, #0
    2562:	str	r3, [sp, #4]
    2564:	b.n	216a <usb_isr+0x3d6>
    2566:	movw	r2, #8993	; 0x2321
    256a:	cmp	r1, r2
    256c:	beq.n	255e <usb_isr+0x7ca>
    256e:	b.n	22d2 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2570:	ldrh	r2, [r5, #2]
    2572:	cmp	r2, #0
    2574:	bne.w	22d2 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    2578:	ldr	r4, [pc, #376]	; (26f4 <usb_isr+0x960>)
    257a:	str	r0, [sp, #4]
    257c:	lsls	r1, r1, #2
    257e:	add	r4, r1
    2580:	ldrb	r1, [r4, #0]
    2582:	bic.w	r1, r1, #2
    2586:	strb	r1, [r4, #0]
    2588:	b.n	216a <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    258a:	bl	1b34 <usb_malloc>
				if (p) {
    258e:	cmp	r0, #0
    2590:	beq.w	2700 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    2594:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2596:	ldr	r2, [pc, #352]	; (26f8 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2598:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    259c:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    25a0:	bl	1b34 <usb_malloc>
				if (p) {
    25a4:	cmp	r0, #0
    25a6:	beq.n	26a8 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    25a8:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    25aa:	ldr	r2, [pc, #336]	; (26fc <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    25ac:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    25b0:	str.w	r2, [r9, #40]	; 0x28
    25b4:	b.n	2494 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    25b6:	bl	1b34 <usb_malloc>
				if (p) {
    25ba:	cmp	r0, #0
    25bc:	beq.n	266c <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    25be:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    25c0:	ldr	r2, [pc, #308]	; (26f8 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    25c2:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    25c6:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    25ca:	bl	1b34 <usb_malloc>
				if (p) {
    25ce:	cmp	r0, #0
    25d0:	beq.n	2660 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    25d2:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    25d4:	ldr	r2, [pc, #292]	; (26fc <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    25d6:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    25da:	str.w	r2, [r9, #168]	; 0xa8
    25de:	b.n	24fa <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    25e0:	bl	1b34 <usb_malloc>
				if (p) {
    25e4:	cmp	r0, #0
    25e6:	beq.w	2718 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    25ea:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    25ec:	ldr	r2, [pc, #264]	; (26f8 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    25ee:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    25f2:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    25f6:	bl	1b34 <usb_malloc>
				if (p) {
    25fa:	cmp	r0, #0
    25fc:	beq.w	270c <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    2600:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2602:	ldr	r2, [pc, #248]	; (26fc <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2604:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2608:	str.w	r2, [r9, #136]	; 0x88
    260c:	b.n	24e4 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    260e:	bl	1b34 <usb_malloc>
				if (p) {
    2612:	cmp	r0, #0
    2614:	beq.n	269c <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    2616:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2618:	ldr	r2, [pc, #220]	; (26f8 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    261a:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    261e:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2622:	bl	1b34 <usb_malloc>
				if (p) {
    2626:	cbz	r0, 2690 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    2628:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    262a:	ldr	r2, [pc, #208]	; (26fc <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    262c:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2630:	str.w	r2, [r9, #104]	; 0x68
    2634:	b.n	24cc <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2636:	bl	1b34 <usb_malloc>
				if (p) {
    263a:	cbz	r0, 2684 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    263c:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    263e:	ldr	r2, [pc, #184]	; (26f8 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2640:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2644:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2648:	bl	1b34 <usb_malloc>
				if (p) {
    264c:	cbz	r0, 2678 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    264e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2650:	ldr	r2, [pc, #168]	; (26fc <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2652:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2656:	str.w	r2, [r9, #72]	; 0x48
    265a:	b.n	24b0 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    265c:	movs	r0, #2
    265e:	b.n	235a <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2660:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2662:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    2666:	adds	r2, #1
    2668:	strb	r2, [r5, #0]
    266a:	b.n	24fa <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    266c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    266e:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    2672:	adds	r2, #1
    2674:	strb	r2, [r5, #0]
    2676:	b.n	25ca <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2678:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    267a:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    267e:	adds	r2, #1
    2680:	strb	r2, [r5, #0]
    2682:	b.n	24b0 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2684:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2686:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    268a:	adds	r2, #1
    268c:	strb	r2, [r5, #0]
    268e:	b.n	2648 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2690:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2692:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    2696:	adds	r2, #1
    2698:	strb	r2, [r5, #0]
    269a:	b.n	24cc <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    269c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    269e:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    26a2:	adds	r2, #1
    26a4:	strb	r2, [r5, #0]
    26a6:	b.n	2622 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    26a8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    26aa:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    26ae:	adds	r2, #1
    26b0:	strb	r2, [r5, #0]
    26b2:	b.n	2494 <usb_isr+0x700>
    26b4:	.word	0x1fff1720
    26b8:	.word	0x1fff1688
    26bc:	.word	0x1fff16e0
    26c0:	.word	0x1fff16f4
    26c4:	.word	0x1fff1630
    26c8:	.word	0x1fff1bb0
    26cc:	.word	0x00004028
    26d0:	.word	0x1fff1711
    26d4:	.word	0x400720c4
    26d8:	.word	0x400720c8
    26dc:	.word	0x400720cc
    26e0:	.word	0x400720d0
    26e4:	.word	0x400720d4
    26e8:	.word	0x1fff0000
    26ec:	.word	0x00004030
    26f0:	.word	0x1fff1714
    26f4:	.word	0x400720c0
    26f8:	.word	0x00400088
    26fc:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2700:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2702:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    2706:	adds	r2, #1
    2708:	strb	r2, [r5, #0]
    270a:	b.n	25a0 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    270c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    270e:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    2712:	adds	r2, #1
    2714:	strb	r2, [r5, #0]
    2716:	b.n	24e4 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2718:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    271a:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    271e:	adds	r2, #1
    2720:	strb	r2, [r5, #0]
    2722:	b.n	25f6 <usb_isr+0x862>
    2724:	cmp	r0, #64	; 0x40
    2726:	mov	ip, r0
    2728:	it	cs
    272a:	movcs.w	ip, #64	; 0x40
    272e:	add.w	r3, r4, ip
    2732:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2734:	movs	r3, #1
    2736:	rsb	r0, ip, r0
    273a:	mov.w	r8, ip, lsl #16
    273e:	movs	r2, #0
    2740:	str	r3, [sp, #4]
    2742:	b.n	2174 <usb_isr+0x3e0>

00002744 <usb_init>:
}



void usb_init(void)
{
    2744:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2748:	ldr	r4, [pc, #156]	; (27e8 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    274a:	bl	3018 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    274e:	movs	r2, #0
    2750:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    2754:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2756:	str	r2, [r3, #0]
		table[i].addr = 0;
    2758:	str	r2, [r3, #4]
    275a:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    275c:	cmp	r3, r0
		table[i].desc = 0;
    275e:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    2762:	bne.n	2756 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2764:	ldr	r0, [pc, #132]	; (27ec <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    2766:	ldr	r2, [pc, #136]	; (27f0 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2768:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    276a:	ldr.w	lr, [pc, #156]	; 2808 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    276e:	ldr	r6, [pc, #132]	; (27f4 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2770:	ldr	r5, [pc, #132]	; (27f8 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2772:	ldr	r7, [pc, #136]	; (27fc <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2774:	ldr.w	ip, [pc, #148]	; 280c <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    2778:	ldr.w	r8, [pc, #148]	; 2810 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    277c:	orr.w	r3, r3, #262144	; 0x40000
    2780:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    2782:	ldr	r3, [r2, #0]
    2784:	orr.w	r3, r3, #50331648	; 0x3000000
    2788:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    278a:	movs	r3, #3
    278c:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    2790:	movs	r3, #160	; 0xa0
    2792:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2794:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2798:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    279c:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    27a0:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    27a2:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    27a4:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    27a8:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    27aa:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    27ac:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    27ae:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    27b0:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    27b2:	ldr	r5, [pc, #76]	; (2800 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    27b4:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    27b8:	ldr	r0, [pc, #72]	; (2804 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    27ba:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    27be:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    27c0:	movs	r3, #1
    27c2:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    27c6:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    27ca:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    27ce:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    27d0:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    27d2:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    27d6:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    27d8:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    27da:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    27de:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    27e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    27e6:	nop
    27e8:	.word	0x1fff0000
    27ec:	.word	0x40048034
    27f0:	.word	0x4000d800
    27f4:	.word	0x40072140
    27f8:	.word	0x4007209c
    27fc:	.word	0x400720b0
    2800:	.word	0xe000e435
    2804:	.word	0xe000e104
    2808:	.word	0x40072144
    280c:	.word	0x40072080
    2810:	.word	0x40072088

00002814 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2814:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    2816:	ldr	r4, [pc, #176]	; (28c8 <yield+0xb4>)
    2818:	ldrb	r3, [r4, #0]
    281a:	cbz	r3, 281e <yield+0xa>
    281c:	pop	{r3, r4, r5, pc}
	running = 1;
    281e:	movs	r3, #1
    2820:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2822:	bl	ddc <usb_serial_available>
	if (Serial.available()) serialEvent();
    2826:	cmp	r0, #0
    2828:	bne.n	28b0 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    282a:	bl	2de8 <serial_available>
	if (Serial1.available()) serialEvent1();
    282e:	cmp	r0, #0
    2830:	bne.n	28aa <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    2832:	bl	2ad0 <serial2_available>
	if (Serial2.available()) serialEvent2();
    2836:	cmp	r0, #0
    2838:	bne.n	28a4 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    283a:	bl	30e8 <serial3_available>
	if (Serial3.available()) serialEvent3();
    283e:	cbnz	r0, 289e <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    2840:	bl	2bfc <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2844:	cbnz	r0, 2898 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    2846:	bl	29d8 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    284a:	cbnz	r0, 2892 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    284c:	bl	2f14 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2850:	cbnz	r0, 288c <yield+0x78>
#endif
	running = 0;
    2852:	movs	r3, #0
    2854:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2856:	mrs	r3, IPSR
		if (ipsr != 0) return;
    285a:	cmp	r3, #0
    285c:	bne.n	281c <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    285e:	mrs	r1, PRIMASK
		__disable_irq();
    2862:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    2864:	ldr	r3, [pc, #100]	; (28cc <yield+0xb8>)
    2866:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    2868:	cbz	r0, 28b6 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    286a:	ldr	r4, [pc, #100]	; (28d0 <yield+0xbc>)
    286c:	ldrb	r2, [r4, #0]
    286e:	cbnz	r2, 28b6 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    2870:	ldr	r5, [r0, #20]
    2872:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2874:	movs	r3, #1
    2876:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    2878:	cbz	r5, 28be <yield+0xaa>
			firstYield->_prev = nullptr;
    287a:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    287c:	cbnz	r1, 2880 <yield+0x6c>
    287e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2880:	movs	r5, #0
    2882:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    2884:	ldr	r3, [r0, #8]
    2886:	blx	r3
		runningFromYield = false;
    2888:	strb	r5, [r4, #0]
    288a:	b.n	281c <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    288c:	bl	29d0 <serialEvent6()>
    2890:	b.n	2852 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2892:	bl	28d8 <serialEvent5()>
    2896:	b.n	284c <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2898:	bl	29bc <serialEvent4()>
    289c:	b.n	2846 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    289e:	bl	31e4 <serialEvent3()>
    28a2:	b.n	2840 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    28a4:	bl	29b8 <serialEvent2()>
    28a8:	b.n	283a <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    28aa:	bl	31e0 <serialEvent1()>
    28ae:	b.n	2832 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    28b0:	bl	2904 <serialEvent()>
    28b4:	b.n	282a <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    28b6:	cmp	r1, #0
    28b8:	bne.n	281c <yield+0x8>
    28ba:	cpsie	i
    28bc:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    28be:	ldr	r3, [pc, #20]	; (28d4 <yield+0xc0>)
    28c0:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    28c2:	cmp	r1, #0
    28c4:	bne.n	2880 <yield+0x6c>
    28c6:	b.n	287e <yield+0x6a>
    28c8:	.word	0x1fff1725
    28cc:	.word	0x1fff1a38
    28d0:	.word	0x1fff1a3c
    28d4:	.word	0x1fff1a34

000028d8 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    28d8:	bx	lr
    28da:	nop

000028dc <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    28dc:	b.w	df8 <usb_serial_flush_input>

000028e0 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    28e0:	b.w	dac <usb_serial_peekchar>

000028e4 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    28e4:	b.w	d64 <usb_serial_getchar>

000028e8 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    28e8:	b.w	ddc <usb_serial_available>

000028ec <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    28ec:	b.w	f98 <usb_serial_flush_output>

000028f0 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    28f0:	b.w	f50 <usb_serial_write_buffer_free>

000028f4 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    28f4:	mov	r0, r1
    28f6:	mov	r1, r2
    28f8:	b.w	e30 <usb_serial_write>

000028fc <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    28fc:	mov	r0, r1
    28fe:	b.w	f38 <usb_serial_putchar>
    2902:	nop

00002904 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    2904:	bx	lr
    2906:	nop

00002908 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2908:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    290a:	ldr	r2, [pc, #24]	; (2924 <Print::println()+0x1c>)
	return write(buf, 2);
    290c:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    290e:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    2910:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2912:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    2914:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2916:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    291a:	movs	r2, #2
    291c:	blx	r3
}
    291e:	add	sp, #12
    2920:	ldr.w	pc, [sp], #4
    2924:	.word	0x00004024

00002928 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    2928:	push	{r4, r5, r6, r7, lr}
    292a:	mov	r7, r0
    292c:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    292e:	cmp	r2, #0
    2930:	beq.n	299a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    2932:	cmp	r2, #1
    2934:	it	eq
    2936:	moveq	r2, #10
	}


	if (n == 0) {
    2938:	cbz	r1, 2990 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    293a:	movs	r4, #33	; 0x21
    293c:	b.n	2940 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    293e:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    2940:	udiv	r5, r1, r2
    2944:	mls	r1, r2, r5, r1
    2948:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    294a:	cmp	r1, #9
    294c:	add.w	r1, r0, #48	; 0x30
    2950:	it	ls
    2952:	uxtbls	r0, r1
    2954:	add	r1, sp, #40	; 0x28
    2956:	it	hi
    2958:	addhi	r0, #55	; 0x37
    295a:	add	r1, r4
    295c:	it	hi
    295e:	uxtbhi	r0, r0
    2960:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    2964:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    2966:	mov	r1, r5
    2968:	cmp	r5, #0
    296a:	bne.n	293e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    296c:	cbz	r3, 297c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    296e:	subs	r4, #1
    2970:	uxtb	r4, r4
		buf[i] = '-';
    2972:	add	r3, sp, #40	; 0x28
    2974:	add	r3, r4
    2976:	movs	r2, #45	; 0x2d
    2978:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    297c:	ldr	r3, [r7, #0]
    297e:	add	r2, sp, #4
    2980:	adds	r1, r2, r4
    2982:	ldr	r3, [r3, #4]
    2984:	mov	r0, r7
    2986:	rsb	r2, r4, #34	; 0x22
    298a:	blx	r3
}
    298c:	add	sp, #44	; 0x2c
    298e:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2990:	movs	r2, #48	; 0x30
    2992:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    2996:	movs	r4, #33	; 0x21
    2998:	b.n	296c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    299a:	ldr	r3, [r0, #0]
    299c:	uxtb	r1, r1
    299e:	ldr	r3, [r3, #0]
    29a0:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    29a2:	add	sp, #44	; 0x2c
    29a4:	pop	{r4, r5, r6, r7, pc}
    29a6:	nop

000029a8 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    29a8:	cmp	r1, #0
		sign = '-';
		n = -n;
    29aa:	itte	lt
    29ac:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    29ae:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    29b0:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    29b2:	movs	r2, #10
    29b4:	b.w	2928 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000029b8 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    29b8:	bx	lr
    29ba:	nop

000029bc <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    29bc:	bx	lr
    29be:	nop

000029c0 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    29c0:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    29c2:	bl	868 <setup>
	while (1) {
		loop();
    29c6:	bl	86c <loop>
		yield();
    29ca:	bl	2814 <yield>
    29ce:	b.n	29c6 <main+0x6>

000029d0 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    29d0:	bx	lr
    29d2:	nop

000029d4 <operator new(unsigned int)>:
    29d4:	b.w	3438 <malloc>

000029d8 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    29d8:	ldr	r2, [pc, #20]	; (29f0 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    29da:	ldr	r3, [pc, #24]	; (29f4 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    29dc:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    29de:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    29e0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    29e2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    29e4:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    29e6:	it	cc
    29e8:	addcc	r0, #64	; 0x40
    29ea:	subs	r0, r0, r3
}
    29ec:	bx	lr
    29ee:	nop
    29f0:	.word	0x1fff172c
    29f4:	.word	0x1fff172d

000029f8 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    29f8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    29fa:	ldr	r3, [pc, #172]	; (2aa8 <uart4_status_isr+0xb0>)
    29fc:	ldrb	r2, [r3, #4]
    29fe:	lsls	r4, r2, #26
    2a00:	bpl.n	2a42 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2a02:	ldr	r0, [pc, #168]	; (2aac <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2a04:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2a06:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2a08:	ldr	r1, [pc, #164]	; (2ab0 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2a0a:	adds	r3, #1
    2a0c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2a0e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2a10:	it	gt
    2a12:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2a14:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2a16:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2a18:	beq.n	2a22 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    2a1a:	ldr	r4, [pc, #152]	; (2ab4 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    2a1c:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2a1e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2a20:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2a22:	ldr	r2, [pc, #148]	; (2ab8 <uart4_status_isr+0xc0>)
    2a24:	ldr	r1, [r2, #0]
    2a26:	cbz	r1, 2a42 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2a28:	ldr	r2, [pc, #144]	; (2abc <uart4_status_isr+0xc4>)
    2a2a:	ldrb	r2, [r2, #0]
    2a2c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2a2e:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2a30:	itet	cc
    2a32:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2a36:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2a38:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2a3a:	cmp	r3, #39	; 0x27
    2a3c:	itt	gt
    2a3e:	movgt	r3, #1
    2a40:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    2a42:	ldr	r2, [pc, #100]	; (2aa8 <uart4_status_isr+0xb0>)
    2a44:	ldrb	r3, [r2, #3]
    2a46:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2a48:	lsls	r0, r3, #24
    2a4a:	bmi.n	2a70 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    2a4c:	lsls	r2, r3, #25
    2a4e:	bpl.n	2a6c <uart4_status_isr+0x74>
    2a50:	ldr	r3, [pc, #84]	; (2aa8 <uart4_status_isr+0xb0>)
    2a52:	ldrb	r3, [r3, #4]
    2a54:	lsls	r3, r3, #25
    2a56:	bpl.n	2a6c <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2a58:	ldr	r3, [pc, #100]	; (2ac0 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2a5a:	ldr	r1, [pc, #104]	; (2ac4 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2a5c:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2a5e:	movs	r2, #0
    2a60:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2a62:	cbz	r3, 2a66 <uart4_status_isr+0x6e>
    2a64:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    2a66:	ldr	r3, [pc, #64]	; (2aa8 <uart4_status_isr+0xb0>)
    2a68:	movs	r2, #44	; 0x2c
    2a6a:	strb	r2, [r3, #3]
	}
}
    2a6c:	pop	{r4, r5}
    2a6e:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2a70:	ldrb	r1, [r2, #4]
    2a72:	lsls	r1, r1, #24
    2a74:	bpl.n	2a4c <uart4_status_isr+0x54>
		head = tx_buffer_head;
    2a76:	ldr	r1, [pc, #80]	; (2ac8 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2a78:	ldr	r0, [pc, #64]	; (2abc <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2a7a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2a7c:	ldrb	r1, [r0, #0]
    2a7e:	uxtb	r1, r1
		if (head == tail) {
    2a80:	cmp	r4, r1
    2a82:	beq.n	2aa0 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    2a84:	adds	r2, r1, #1
    2a86:	cmp	r2, #39	; 0x27
    2a88:	itt	hi
    2a8a:	movhi	r1, #0
    2a8c:	movhi	r2, r1
			n = tx_buffer[tail];
    2a8e:	ldr	r5, [pc, #60]	; (2acc <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2a90:	ldr	r4, [pc, #20]	; (2aa8 <uart4_status_isr+0xb0>)
    2a92:	it	ls
    2a94:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2a96:	ldrb	r2, [r5, r2]
    2a98:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2a9a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    2a9c:	strb	r1, [r0, #0]
    2a9e:	b.n	2a4c <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    2aa0:	movs	r1, #108	; 0x6c
    2aa2:	strb	r1, [r2, #3]
    2aa4:	b.n	2a4c <uart4_status_isr+0x54>
    2aa6:	nop
    2aa8:	.word	0x400ea000
    2aac:	.word	0x1fff172c
    2ab0:	.word	0x1fff172d
    2ab4:	.word	0x1fff1758
    2ab8:	.word	0x1fff1728
    2abc:	.word	0x1fff1799
    2ac0:	.word	0x1fff179c
    2ac4:	.word	0x1fff1798
    2ac8:	.word	0x1fff17a0
    2acc:	.word	0x1fff1730

00002ad0 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2ad0:	ldr	r2, [pc, #20]	; (2ae8 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    2ad2:	ldr	r3, [pc, #24]	; (2aec <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2ad4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2ad6:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2ad8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2ada:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2adc:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    2ade:	it	cc
    2ae0:	addcc	r0, #64	; 0x40
    2ae2:	subs	r0, r0, r3
}
    2ae4:	bx	lr
    2ae6:	nop
    2ae8:	.word	0x1fff1814
    2aec:	.word	0x1fff17a9

00002af0 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    2af0:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    2af2:	ldr	r3, [pc, #224]	; (2bd4 <uart1_status_isr+0xe4>)
    2af4:	ldrb	r2, [r3, #4]
    2af6:	tst.w	r2, #48	; 0x30
    2afa:	beq.n	2b56 <uart1_status_isr+0x66>
		__disable_irq();
    2afc:	cpsid	i
		avail = UART1_RCFIFO;
    2afe:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    2b00:	and.w	r2, r1, #255	; 0xff
    2b04:	cmp	r1, #0
    2b06:	beq.n	2b84 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    2b08:	cpsie	i
			head = rx_buffer_head;
    2b0a:	ldr	r7, [pc, #204]	; (2bd8 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    2b0c:	ldr	r1, [pc, #204]	; (2bdc <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2b0e:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    2b10:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2b12:	ldr	r6, [pc, #204]	; (2be0 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2b14:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2b16:	uxtb	r0, r0
			tail = rx_buffer_tail;
    2b18:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    2b1a:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2b1c:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2b1e:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2b20:	it	cs
    2b22:	movcs	r3, #0
				if (newhead != tail) {
    2b24:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    2b26:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2b2a:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2b2c:	itt	ne
    2b2e:	strbne	r1, [r6, r3]
    2b30:	movne	r0, r3
				}
			} while (--avail > 0);
    2b32:	ands.w	r2, r2, #255	; 0xff
    2b36:	bne.n	2b1a <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    2b38:	ldr	r3, [pc, #168]	; (2be4 <uart1_status_isr+0xf4>)
    2b3a:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    2b3c:	uxtb	r2, r0
    2b3e:	strb	r2, [r7, #0]
			if (rts_pin) {
    2b40:	cbz	r3, 2b56 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    2b42:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2b44:	itet	cc
    2b46:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    2b4a:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2b4c:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2b4e:	cmp	r0, #39	; 0x27
    2b50:	itt	gt
    2b52:	movgt	r2, #1
    2b54:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    2b56:	ldr	r1, [pc, #124]	; (2bd4 <uart1_status_isr+0xe4>)
    2b58:	ldrb	r2, [r1, #3]
    2b5a:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2b5c:	lsls	r5, r2, #24
    2b5e:	bmi.n	2b8e <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    2b60:	lsls	r2, r2, #25
    2b62:	bpl.n	2b80 <uart1_status_isr+0x90>
    2b64:	ldr	r3, [pc, #108]	; (2bd4 <uart1_status_isr+0xe4>)
    2b66:	ldrb	r3, [r3, #4]
    2b68:	lsls	r3, r3, #25
    2b6a:	bpl.n	2b80 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2b6c:	ldr	r3, [pc, #120]	; (2be8 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2b6e:	ldr	r1, [pc, #124]	; (2bec <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    2b70:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2b72:	movs	r2, #0
    2b74:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2b76:	cbz	r3, 2b7a <uart1_status_isr+0x8a>
    2b78:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    2b7a:	ldr	r3, [pc, #88]	; (2bd4 <uart1_status_isr+0xe4>)
    2b7c:	movs	r2, #60	; 0x3c
    2b7e:	strb	r2, [r3, #3]
	}
}
    2b80:	pop	{r4, r5, r6, r7}
    2b82:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2b84:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    2b86:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2b88:	strb	r2, [r3, #17]
			__enable_irq();
    2b8a:	cpsie	i
    2b8c:	b.n	2b56 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2b8e:	ldrb	r3, [r1, #4]
    2b90:	lsls	r4, r3, #24
    2b92:	bpl.n	2b60 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    2b94:	ldr	r3, [pc, #88]	; (2bf0 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    2b96:	ldr	r6, [pc, #92]	; (2bf4 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2b98:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    2b9a:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2b9c:	uxtb	r4, r4
		tail = tx_buffer_tail;
    2b9e:	uxtb	r3, r3
		do {
			if (tail == head) break;
    2ba0:	cmp	r4, r3
    2ba2:	beq.n	2bc2 <uart1_status_isr+0xd2>
    2ba4:	ldr	r5, [pc, #80]	; (2bf8 <uart1_status_isr+0x108>)
    2ba6:	b.n	2bac <uart1_status_isr+0xbc>
    2ba8:	cmp	r3, r4
    2baa:	beq.n	2bc2 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    2bac:	adds	r3, #1
    2bae:	cmp	r3, #40	; 0x28
    2bb0:	it	cs
    2bb2:	movcs	r3, #0
			avail = UART1_S1;
    2bb4:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    2bb6:	ldrb	r0, [r5, r3]
    2bb8:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    2bba:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    2bbc:	ldrb	r0, [r1, #20]
    2bbe:	cmp	r0, #7
    2bc0:	bls.n	2ba8 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    2bc2:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2bc4:	ldr	r1, [pc, #12]	; (2bd4 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    2bc6:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2bc8:	ldrb	r3, [r1, #4]
    2bca:	lsls	r0, r3, #24
    2bcc:	itt	mi
    2bce:	movmi	r3, #124	; 0x7c
    2bd0:	strbmi	r3, [r1, #3]
    2bd2:	b.n	2b60 <uart1_status_isr+0x70>
    2bd4:	.word	0x4006b000
    2bd8:	.word	0x1fff1814
    2bdc:	.word	0x1fff17a9
    2be0:	.word	0x1fff17d4
    2be4:	.word	0x1fff17a4
    2be8:	.word	0x1fff1818
    2bec:	.word	0x1fff17a8
    2bf0:	.word	0x1fff181c
    2bf4:	.word	0x1fff1815
    2bf8:	.word	0x1fff17ac

00002bfc <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2bfc:	ldr	r2, [pc, #20]	; (2c14 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    2bfe:	ldr	r3, [pc, #24]	; (2c18 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2c00:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2c02:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2c04:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2c06:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2c08:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    2c0a:	it	cc
    2c0c:	addcc	r0, #64	; 0x40
    2c0e:	subs	r0, r0, r3
}
    2c10:	bx	lr
    2c12:	nop
    2c14:	.word	0x1fff1824
    2c18:	.word	0x1fff1825

00002c1c <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    2c1c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    2c1e:	ldr	r3, [pc, #172]	; (2ccc <uart3_status_isr+0xb0>)
    2c20:	ldrb	r2, [r3, #4]
    2c22:	lsls	r4, r2, #26
    2c24:	bpl.n	2c66 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2c26:	ldr	r0, [pc, #168]	; (2cd0 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2c28:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2c2a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2c2c:	ldr	r1, [pc, #164]	; (2cd4 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2c2e:	adds	r3, #1
    2c30:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2c32:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2c34:	it	gt
    2c36:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2c38:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2c3a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2c3c:	beq.n	2c46 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    2c3e:	ldr	r4, [pc, #152]	; (2cd8 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    2c40:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2c42:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2c44:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2c46:	ldr	r2, [pc, #148]	; (2cdc <uart3_status_isr+0xc0>)
    2c48:	ldr	r1, [r2, #0]
    2c4a:	cbz	r1, 2c66 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2c4c:	ldr	r2, [pc, #144]	; (2ce0 <uart3_status_isr+0xc4>)
    2c4e:	ldrb	r2, [r2, #0]
    2c50:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2c52:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2c54:	itet	cc
    2c56:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2c5a:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2c5c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2c5e:	cmp	r3, #39	; 0x27
    2c60:	itt	gt
    2c62:	movgt	r3, #1
    2c64:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    2c66:	ldr	r2, [pc, #100]	; (2ccc <uart3_status_isr+0xb0>)
    2c68:	ldrb	r3, [r2, #3]
    2c6a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    2c6c:	lsls	r0, r3, #24
    2c6e:	bmi.n	2c94 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    2c70:	lsls	r2, r3, #25
    2c72:	bpl.n	2c90 <uart3_status_isr+0x74>
    2c74:	ldr	r3, [pc, #84]	; (2ccc <uart3_status_isr+0xb0>)
    2c76:	ldrb	r3, [r3, #4]
    2c78:	lsls	r3, r3, #25
    2c7a:	bpl.n	2c90 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2c7c:	ldr	r3, [pc, #100]	; (2ce4 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    2c7e:	ldr	r1, [pc, #104]	; (2ce8 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2c80:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    2c82:	movs	r2, #0
    2c84:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2c86:	cbz	r3, 2c8a <uart3_status_isr+0x6e>
    2c88:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    2c8a:	ldr	r3, [pc, #64]	; (2ccc <uart3_status_isr+0xb0>)
    2c8c:	movs	r2, #44	; 0x2c
    2c8e:	strb	r2, [r3, #3]
	}
}
    2c90:	pop	{r4, r5}
    2c92:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    2c94:	ldrb	r1, [r2, #4]
    2c96:	lsls	r1, r1, #24
    2c98:	bpl.n	2c70 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    2c9a:	ldr	r1, [pc, #80]	; (2cec <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2c9c:	ldr	r0, [pc, #64]	; (2ce0 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2c9e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2ca0:	ldrb	r1, [r0, #0]
    2ca2:	uxtb	r1, r1
		if (head == tail) {
    2ca4:	cmp	r4, r1
    2ca6:	beq.n	2cc4 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    2ca8:	adds	r2, r1, #1
    2caa:	cmp	r2, #39	; 0x27
    2cac:	itt	hi
    2cae:	movhi	r1, #0
    2cb0:	movhi	r2, r1
			n = tx_buffer[tail];
    2cb2:	ldr	r5, [pc, #60]	; (2cf0 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    2cb4:	ldr	r4, [pc, #20]	; (2ccc <uart3_status_isr+0xb0>)
    2cb6:	it	ls
    2cb8:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2cba:	ldrb	r2, [r5, r2]
    2cbc:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    2cbe:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    2cc0:	strb	r1, [r0, #0]
    2cc2:	b.n	2c70 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    2cc4:	movs	r1, #108	; 0x6c
    2cc6:	strb	r1, [r2, #3]
    2cc8:	b.n	2c70 <uart3_status_isr+0x54>
    2cca:	nop
    2ccc:	.word	0x4006d000
    2cd0:	.word	0x1fff1824
    2cd4:	.word	0x1fff1825
    2cd8:	.word	0x1fff1850
    2cdc:	.word	0x1fff1820
    2ce0:	.word	0x1fff1891
    2ce4:	.word	0x1fff1894
    2ce8:	.word	0x1fff1890
    2cec:	.word	0x1fff1898
    2cf0:	.word	0x1fff1828

00002cf4 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    2cf4:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2cf6:	ldr	r4, [pc, #64]	; (2d38 <fault_isr+0x44>)
    2cf8:	b.n	2d0c <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2cfa:	ldr	r3, [r4, #0]
    2cfc:	lsls	r1, r3, #21
    2cfe:	bmi.n	2d1c <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2d00:	ldr	r3, [r4, #0]
    2d02:	lsls	r2, r3, #20
    2d04:	bmi.n	2d26 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2d06:	ldr	r3, [r4, #0]
    2d08:	lsls	r3, r3, #19
    2d0a:	bmi.n	2d30 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2d0c:	ldr	r3, [r4, #0]
    2d0e:	lsls	r0, r3, #13
    2d10:	bpl.n	2cfa <fault_isr+0x6>
    2d12:	bl	1d94 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2d16:	ldr	r3, [r4, #0]
    2d18:	lsls	r1, r3, #21
    2d1a:	bpl.n	2d00 <fault_isr+0xc>
    2d1c:	bl	2e08 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2d20:	ldr	r3, [r4, #0]
    2d22:	lsls	r2, r3, #20
    2d24:	bpl.n	2d06 <fault_isr+0x12>
    2d26:	bl	2af0 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2d2a:	ldr	r3, [r4, #0]
    2d2c:	lsls	r3, r3, #19
    2d2e:	bpl.n	2d0c <fault_isr+0x18>
    2d30:	bl	3108 <uart2_status_isr>
    2d34:	b.n	2d0c <fault_isr+0x18>
    2d36:	nop
    2d38:	.word	0x40048034

00002d3c <unused_isr>:
	}
}

void unused_isr(void)
{
    2d3c:	push	{r3, lr}
	fault_isr();
    2d3e:	bl	2cf4 <fault_isr>
    2d42:	nop

00002d44 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    2d44:	ldr	r3, [pc, #4]	; (2d4c <startup_early_hook+0x8>)
    2d46:	movs	r2, #16
    2d48:	strh	r2, [r3, #0]
    2d4a:	bx	lr
    2d4c:	.word	0x40052000

00002d50 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    2d50:	bx	lr
    2d52:	nop

00002d54 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    2d54:	ldr	r1, [pc, #36]	; (2d7c <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    2d56:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    2d58:	ldr	r3, [r1, #0]
	if (incr != 0) {
    2d5a:	cbz	r0, 2d6a <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    2d5c:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    2d5e:	add	r0, r3
    2d60:	sub.w	r2, r2, #8192	; 0x2000
    2d64:	cmp	r0, r2
    2d66:	bcs.n	2d6e <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    2d68:	str	r0, [r1, #0]
	}
	return prev;
    2d6a:	mov	r0, r3
}
    2d6c:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    2d6e:	bl	33dc <__errno>
    2d72:	movs	r3, #12
    2d74:	str	r3, [r0, #0]
			return (void *)-1;
    2d76:	mov.w	r0, #4294967295
    2d7a:	pop	{r3, pc}
    2d7c:	.word	0x1fff0c58

00002d80 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    2d80:	ldr	r2, [pc, #32]	; (2da4 <kinetis_hsrun_disable+0x24>)
    2d82:	ldrb	r3, [r2, #0]
    2d84:	cmp	r3, #128	; 0x80
    2d86:	beq.n	2d8c <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    2d88:	movs	r0, #0
}
    2d8a:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    2d8c:	ldr	r1, [pc, #24]	; (2da8 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    2d8e:	ldr	r3, [pc, #28]	; (2dac <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    2d90:	ldr	r0, [pc, #28]	; (2db0 <kinetis_hsrun_disable+0x30>)
    2d92:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    2d94:	movs	r1, #0
    2d96:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    2d98:	ldrb	r3, [r2, #0]
    2d9a:	cmp	r3, #128	; 0x80
    2d9c:	beq.n	2d98 <kinetis_hsrun_disable+0x18>
		return 1;
    2d9e:	movs	r0, #1
    2da0:	bx	lr
    2da2:	nop
    2da4:	.word	0x4007e003
    2da8:	.word	0x40048044
    2dac:	.word	0x4007e001
    2db0:	.word	0x22280000

00002db4 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    2db4:	ldr	r2, [pc, #36]	; (2ddc <kinetis_hsrun_enable+0x28>)
    2db6:	ldrb	r3, [r2, #0]
    2db8:	cmp	r3, #1
    2dba:	beq.n	2dc0 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    2dbc:	movs	r0, #0
}
    2dbe:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    2dc0:	add.w	r3, r3, #1073741824	; 0x40000000
    2dc4:	add.w	r3, r3, #516096	; 0x7e000
    2dc8:	movs	r1, #96	; 0x60
    2dca:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    2dcc:	ldrb	r3, [r2, #0]
    2dce:	cmp	r3, #128	; 0x80
    2dd0:	bne.n	2dcc <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    2dd2:	ldr	r3, [pc, #12]	; (2de0 <kinetis_hsrun_enable+0x2c>)
    2dd4:	ldr	r2, [pc, #12]	; (2de4 <kinetis_hsrun_enable+0x30>)
    2dd6:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    2dd8:	movs	r0, #1
    2dda:	bx	lr
    2ddc:	.word	0x4007e003
    2de0:	.word	0x40048044
    2de4:	.word	0x02060000

00002de8 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2de8:	ldr	r2, [pc, #20]	; (2e00 <serial_available+0x18>)
	tail = rx_buffer_tail;
    2dea:	ldr	r3, [pc, #24]	; (2e04 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2dec:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2dee:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2df0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2df2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2df4:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    2df6:	it	cc
    2df8:	addcc	r0, #64	; 0x40
    2dfa:	subs	r0, r0, r3
}
    2dfc:	bx	lr
    2dfe:	nop
    2e00:	.word	0x1fff18a0
    2e04:	.word	0x1fff18a1

00002e08 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    2e08:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    2e0a:	ldr	r3, [pc, #224]	; (2eec <uart0_status_isr+0xe4>)
    2e0c:	ldrb	r2, [r3, #4]
    2e0e:	tst.w	r2, #48	; 0x30
    2e12:	beq.n	2e6e <uart0_status_isr+0x66>
		__disable_irq();
    2e14:	cpsid	i
		avail = UART0_RCFIFO;
    2e16:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    2e18:	and.w	r2, r1, #255	; 0xff
    2e1c:	cmp	r1, #0
    2e1e:	beq.n	2e9c <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    2e20:	cpsie	i
			head = rx_buffer_head;
    2e22:	ldr	r7, [pc, #204]	; (2ef0 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    2e24:	ldr	r1, [pc, #204]	; (2ef4 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2e26:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    2e28:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2e2a:	ldr	r6, [pc, #204]	; (2ef8 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    2e2c:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2e2e:	uxtb	r0, r0
			tail = rx_buffer_tail;
    2e30:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    2e32:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    2e34:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    2e36:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    2e38:	it	cs
    2e3a:	movcs	r3, #0
				if (newhead != tail) {
    2e3c:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    2e3e:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    2e42:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2e44:	itt	ne
    2e46:	strbne	r1, [r6, r3]
    2e48:	movne	r0, r3
				}
			} while (--avail > 0);
    2e4a:	ands.w	r2, r2, #255	; 0xff
    2e4e:	bne.n	2e32 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    2e50:	ldr	r3, [pc, #168]	; (2efc <uart0_status_isr+0xf4>)
    2e52:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    2e54:	uxtb	r2, r0
    2e56:	strb	r2, [r7, #0]
			if (rts_pin) {
    2e58:	cbz	r3, 2e6e <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    2e5a:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    2e5c:	itet	cc
    2e5e:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    2e62:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    2e64:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2e66:	cmp	r0, #39	; 0x27
    2e68:	itt	gt
    2e6a:	movgt	r2, #1
    2e6c:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    2e6e:	ldr	r1, [pc, #124]	; (2eec <uart0_status_isr+0xe4>)
    2e70:	ldrb	r2, [r1, #3]
    2e72:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    2e74:	lsls	r5, r2, #24
    2e76:	bmi.n	2ea6 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    2e78:	lsls	r2, r2, #25
    2e7a:	bpl.n	2e98 <uart0_status_isr+0x90>
    2e7c:	ldr	r3, [pc, #108]	; (2eec <uart0_status_isr+0xe4>)
    2e7e:	ldrb	r3, [r3, #4]
    2e80:	lsls	r3, r3, #25
    2e82:	bpl.n	2e98 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2e84:	ldr	r3, [pc, #120]	; (2f00 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    2e86:	ldr	r1, [pc, #124]	; (2f04 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    2e88:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    2e8a:	movs	r2, #0
    2e8c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2e8e:	cbz	r3, 2e92 <uart0_status_isr+0x8a>
    2e90:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    2e92:	ldr	r3, [pc, #88]	; (2eec <uart0_status_isr+0xe4>)
    2e94:	movs	r2, #60	; 0x3c
    2e96:	strb	r2, [r3, #3]
	}
}
    2e98:	pop	{r4, r5, r6, r7}
    2e9a:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    2e9c:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    2e9e:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    2ea0:	strb	r2, [r3, #17]
			__enable_irq();
    2ea2:	cpsie	i
    2ea4:	b.n	2e6e <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    2ea6:	ldrb	r3, [r1, #4]
    2ea8:	lsls	r4, r3, #24
    2eaa:	bpl.n	2e78 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    2eac:	ldr	r3, [pc, #88]	; (2f08 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    2eae:	ldr	r6, [pc, #92]	; (2f0c <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2eb0:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    2eb2:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2eb4:	uxtb	r4, r4
		tail = tx_buffer_tail;
    2eb6:	uxtb	r3, r3
		do {
			if (tail == head) break;
    2eb8:	cmp	r4, r3
    2eba:	beq.n	2eda <uart0_status_isr+0xd2>
    2ebc:	ldr	r5, [pc, #80]	; (2f10 <uart0_status_isr+0x108>)
    2ebe:	b.n	2ec4 <uart0_status_isr+0xbc>
    2ec0:	cmp	r3, r4
    2ec2:	beq.n	2eda <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    2ec4:	adds	r3, #1
    2ec6:	cmp	r3, #64	; 0x40
    2ec8:	it	cs
    2eca:	movcs	r3, #0
			avail = UART0_S1;
    2ecc:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    2ece:	ldrb	r0, [r5, r3]
    2ed0:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    2ed2:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    2ed4:	ldrb	r0, [r1, #20]
    2ed6:	cmp	r0, #7
    2ed8:	bls.n	2ec0 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    2eda:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    2edc:	ldr	r1, [pc, #12]	; (2eec <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    2ede:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    2ee0:	ldrb	r3, [r1, #4]
    2ee2:	lsls	r0, r3, #24
    2ee4:	itt	mi
    2ee6:	movmi	r3, #124	; 0x7c
    2ee8:	strbmi	r3, [r1, #3]
    2eea:	b.n	2e78 <uart0_status_isr+0x70>
    2eec:	.word	0x4006a000
    2ef0:	.word	0x1fff18a0
    2ef4:	.word	0x1fff18a1
    2ef8:	.word	0x1fff18e4
    2efc:	.word	0x1fff189c
    2f00:	.word	0x1fff1928
    2f04:	.word	0x1fff1924
    2f08:	.word	0x1fff192c
    2f0c:	.word	0x1fff1925
    2f10:	.word	0x1fff18a4

00002f14 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f14:	ldr	r2, [pc, #20]	; (2f2c <serial6_available+0x18>)
	tail = rx_buffer_tail;
    2f16:	ldr	r3, [pc, #24]	; (2f30 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f18:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2f1a:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f1c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2f1e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2f20:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    2f22:	it	cc
    2f24:	addcc	r0, #64	; 0x40
    2f26:	subs	r0, r0, r3
}
    2f28:	bx	lr
    2f2a:	nop
    2f2c:	.word	0x1fff1934
    2f30:	.word	0x1fff1935

00002f34 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    2f34:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    2f36:	ldr	r3, [pc, #176]	; (2fe8 <lpuart0_status_isr+0xb4>)
    2f38:	ldr	r2, [r3, #4]
    2f3a:	lsls	r4, r2, #10
    2f3c:	bpl.n	2f7e <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    2f3e:	ldr	r0, [pc, #172]	; (2fec <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    2f40:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    2f42:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2f44:	ldr	r1, [pc, #168]	; (2ff0 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    2f46:	adds	r3, #1
    2f48:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2f4a:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    2f4c:	it	gt
    2f4e:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2f50:	cmp	r3, r1
    2f52:	beq.n	2f5e <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    2f54:	ldr	r4, [pc, #156]	; (2ff4 <lpuart0_status_isr+0xc0>)
    2f56:	uxtb	r2, r2
			rx_buffer_head = head;
    2f58:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2f5a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2f5c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2f5e:	ldr	r2, [pc, #152]	; (2ff8 <lpuart0_status_isr+0xc4>)
    2f60:	ldr	r1, [r2, #0]
    2f62:	cbz	r1, 2f7e <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2f64:	ldr	r2, [pc, #148]	; (2ffc <lpuart0_status_isr+0xc8>)
    2f66:	ldrb	r2, [r2, #0]
    2f68:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2f6a:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    2f6c:	itet	cc
    2f6e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2f72:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    2f74:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2f76:	cmp	r3, #39	; 0x27
    2f78:	itt	gt
    2f7a:	movgt	r3, #1
    2f7c:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    2f7e:	ldr	r2, [pc, #104]	; (2fe8 <lpuart0_status_isr+0xb4>)
    2f80:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    2f82:	lsls	r0, r3, #8
    2f84:	bpl.n	2f8c <lpuart0_status_isr+0x58>
    2f86:	ldr	r2, [r2, #4]
    2f88:	lsls	r1, r2, #8
    2f8a:	bmi.n	2fb0 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    2f8c:	lsls	r2, r3, #9
    2f8e:	bpl.n	2fac <lpuart0_status_isr+0x78>
    2f90:	ldr	r3, [pc, #84]	; (2fe8 <lpuart0_status_isr+0xb4>)
    2f92:	ldr	r3, [r3, #4]
    2f94:	lsls	r3, r3, #9
    2f96:	bpl.n	2fac <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2f98:	ldr	r3, [pc, #100]	; (3000 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    2f9a:	ldr	r1, [pc, #104]	; (3004 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    2f9c:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    2f9e:	movs	r2, #0
    2fa0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2fa2:	cbz	r3, 2fa6 <lpuart0_status_isr+0x72>
    2fa4:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    2fa6:	ldr	r3, [pc, #96]	; (3008 <lpuart0_status_isr+0xd4>)
    2fa8:	movs	r2, #0
    2faa:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    2fac:	pop	{r4, r5}
    2fae:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    2fb0:	ldr	r2, [pc, #88]	; (300c <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    2fb2:	ldr	r1, [pc, #72]	; (2ffc <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    2fb4:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    2fb6:	ldrb	r2, [r1, #0]
    2fb8:	uxtb	r2, r2
		if (head == tail) {
    2fba:	cmp	r0, r2
    2fbc:	beq.n	2fda <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    2fbe:	adds	r2, #1
    2fc0:	cmp	r2, #39	; 0x27
    2fc2:	itt	hi
    2fc4:	movhi	r0, #0
    2fc6:	movhi	r2, r0
			n = tx_buffer[tail];
    2fc8:	ldr	r5, [pc, #68]	; (3010 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    2fca:	ldr	r4, [pc, #28]	; (2fe8 <lpuart0_status_isr+0xb4>)
    2fcc:	it	ls
    2fce:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2fd0:	ldrb	r2, [r5, r2]
    2fd2:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    2fd4:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    2fd6:	strb	r0, [r1, #0]
    2fd8:	b.n	2f8c <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    2fda:	ldr	r0, [pc, #56]	; (3014 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    2fdc:	ldr	r2, [pc, #40]	; (3008 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    2fde:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    2fe0:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    2fe2:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    2fe4:	str	r1, [r2, #0]
    2fe6:	b.n	2f8c <lpuart0_status_isr+0x58>
    2fe8:	.word	0x400c4000
    2fec:	.word	0x1fff1934
    2ff0:	.word	0x1fff1935
    2ff4:	.word	0x1fff1960
    2ff8:	.word	0x1fff1930
    2ffc:	.word	0x1fff19a1
    3000:	.word	0x1fff19a4
    3004:	.word	0x1fff19a0
    3008:	.word	0x43880158
    300c:	.word	0x1fff19a8
    3010:	.word	0x1fff1938
    3014:	.word	0x4388015c

00003018 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3018:	push	{r4, lr}
    301a:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    301c:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    301e:	bl	2d80 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3022:	ldr	r2, [pc, #96]	; (3084 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3024:	ldr	r3, [pc, #96]	; (3088 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3026:	ldr	r1, [pc, #100]	; (308c <usb_init_serialnumber+0x74>)
    3028:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    302a:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    302c:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    302e:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3030:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3032:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3034:	ldrb	r3, [r2, #0]
    3036:	lsls	r3, r3, #24
    3038:	bpl.n	3034 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    303a:	ldr	r3, [pc, #84]	; (3090 <usb_init_serialnumber+0x78>)
    303c:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    303e:	bl	2db4 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    3042:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3044:	ldr	r3, [pc, #76]	; (3094 <usb_init_serialnumber+0x7c>)
    3046:	cmp	r4, r3
    3048:	itt	ls
    304a:	addls.w	r4, r4, r4, lsl #2
    304e:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    3050:	mov	r0, r4
    3052:	ldr	r4, [pc, #68]	; (3098 <usb_init_serialnumber+0x80>)
    3054:	add	r1, sp, #4
    3056:	movs	r2, #10
    3058:	bl	309c <ultoa>
    305c:	add	r1, sp, #4
    305e:	mov	r0, r4
	for (i=0; i<10; i++) {
    3060:	movs	r3, #0
		char c = buf[i];
    3062:	ldrb.w	r2, [r1], #1
    3066:	adds	r3, #1
		if (!c) break;
    3068:	cbz	r2, 307a <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    306a:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    306c:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3070:	bne.n	3062 <usb_init_serialnumber+0x4a>
    3072:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3074:	strb	r3, [r4, #0]
}
    3076:	add	sp, #16
    3078:	pop	{r4, pc}
    307a:	lsls	r3, r3, #1
    307c:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    307e:	strb	r3, [r4, #0]
}
    3080:	add	sp, #16
    3082:	pop	{r4, pc}
    3084:	.word	0x40020004
    3088:	.word	0x40020000
    308c:	.word	0x41070000
    3090:	.word	0x4002000c
    3094:	.word	0x0098967f
    3098:	.word	0x1fff0d3c

0000309c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    309c:	push	{r4, r5, r6, r7}
    309e:	subs	r5, r1, #1
    30a0:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    30a2:	movs	r4, #0
    30a4:	b.n	30a8 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    30a6:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    30a8:	udiv	r3, r0, r2
    30ac:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    30b0:	cmp	r0, #9
    30b2:	add.w	r7, r0, #48	; 0x30
    30b6:	itet	hi
    30b8:	addhi	r0, #55	; 0x37
    30ba:	uxtbls	r0, r7
    30bc:	uxtbhi	r0, r0
    30be:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    30c2:	mov	r0, r3
    30c4:	cmp	r3, #0
    30c6:	bne.n	30a6 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    30c8:	adds	r2, r1, r4
    30ca:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    30cc:	cbz	r4, 30e2 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    30ce:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    30d0:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    30d4:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    30d6:	adds	r3, #1
    30d8:	subs	r0, r4, r3
    30da:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    30dc:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    30e0:	blt.n	30ce <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    30e2:	mov	r0, r1
    30e4:	pop	{r4, r5, r6, r7}
    30e6:	bx	lr

000030e8 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    30e8:	ldr	r2, [pc, #20]	; (3100 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    30ea:	ldr	r3, [pc, #24]	; (3104 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    30ec:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    30ee:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    30f0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    30f2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    30f4:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    30f6:	it	cc
    30f8:	addcc	r0, #64	; 0x40
    30fa:	subs	r0, r0, r3
}
    30fc:	bx	lr
    30fe:	nop
    3100:	.word	0x1fff19b0
    3104:	.word	0x1fff19b1

00003108 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3108:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    310a:	ldr	r3, [pc, #172]	; (31b8 <uart2_status_isr+0xb0>)
    310c:	ldrb	r2, [r3, #4]
    310e:	lsls	r4, r2, #26
    3110:	bpl.n	3152 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3112:	ldr	r0, [pc, #168]	; (31bc <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3114:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3116:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3118:	ldr	r1, [pc, #164]	; (31c0 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    311a:	adds	r3, #1
    311c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    311e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3120:	it	gt
    3122:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3124:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3126:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3128:	beq.n	3132 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    312a:	ldr	r4, [pc, #152]	; (31c4 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    312c:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    312e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3130:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3132:	ldr	r2, [pc, #148]	; (31c8 <uart2_status_isr+0xc0>)
    3134:	ldr	r1, [r2, #0]
    3136:	cbz	r1, 3152 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3138:	ldr	r2, [pc, #144]	; (31cc <uart2_status_isr+0xc4>)
    313a:	ldrb	r2, [r2, #0]
    313c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    313e:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3140:	itet	cc
    3142:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3146:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3148:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    314a:	cmp	r3, #39	; 0x27
    314c:	itt	gt
    314e:	movgt	r3, #1
    3150:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    3152:	ldr	r2, [pc, #100]	; (31b8 <uart2_status_isr+0xb0>)
    3154:	ldrb	r3, [r2, #3]
    3156:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3158:	lsls	r0, r3, #24
    315a:	bmi.n	3180 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    315c:	lsls	r2, r3, #25
    315e:	bpl.n	317c <uart2_status_isr+0x74>
    3160:	ldr	r3, [pc, #84]	; (31b8 <uart2_status_isr+0xb0>)
    3162:	ldrb	r3, [r3, #4]
    3164:	lsls	r3, r3, #25
    3166:	bpl.n	317c <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3168:	ldr	r3, [pc, #100]	; (31d0 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    316a:	ldr	r1, [pc, #104]	; (31d4 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    316c:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    316e:	movs	r2, #0
    3170:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3172:	cbz	r3, 3176 <uart2_status_isr+0x6e>
    3174:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3176:	ldr	r3, [pc, #64]	; (31b8 <uart2_status_isr+0xb0>)
    3178:	movs	r2, #44	; 0x2c
    317a:	strb	r2, [r3, #3]
	}
}
    317c:	pop	{r4, r5}
    317e:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3180:	ldrb	r1, [r2, #4]
    3182:	lsls	r1, r1, #24
    3184:	bpl.n	315c <uart2_status_isr+0x54>
		head = tx_buffer_head;
    3186:	ldr	r1, [pc, #80]	; (31d8 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3188:	ldr	r0, [pc, #64]	; (31cc <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    318a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    318c:	ldrb	r1, [r0, #0]
    318e:	uxtb	r1, r1
		if (head == tail) {
    3190:	cmp	r4, r1
    3192:	beq.n	31b0 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3194:	adds	r2, r1, #1
    3196:	cmp	r2, #39	; 0x27
    3198:	itt	hi
    319a:	movhi	r1, #0
    319c:	movhi	r2, r1
			n = tx_buffer[tail];
    319e:	ldr	r5, [pc, #60]	; (31dc <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    31a0:	ldr	r4, [pc, #20]	; (31b8 <uart2_status_isr+0xb0>)
    31a2:	it	ls
    31a4:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    31a6:	ldrb	r2, [r5, r2]
    31a8:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    31aa:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    31ac:	strb	r1, [r0, #0]
    31ae:	b.n	315c <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    31b0:	movs	r1, #108	; 0x6c
    31b2:	strb	r1, [r2, #3]
    31b4:	b.n	315c <uart2_status_isr+0x54>
    31b6:	nop
    31b8:	.word	0x4006c000
    31bc:	.word	0x1fff19b0
    31c0:	.word	0x1fff19b1
    31c4:	.word	0x1fff19dc
    31c8:	.word	0x1fff19ac
    31cc:	.word	0x1fff1a1d
    31d0:	.word	0x1fff1a20
    31d4:	.word	0x1fff1a1c
    31d8:	.word	0x1fff1a24
    31dc:	.word	0x1fff19b4

000031e0 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    31e0:	bx	lr
    31e2:	nop

000031e4 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    31e4:	bx	lr
    31e6:	nop

000031e8 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    31e8:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    31ea:	mrs	r2, PRIMASK
		__disable_irq();
    31ee:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    31f0:	ldrb	r3, [r0, #29]
    31f2:	cbnz	r3, 3202 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    31f4:	ldrb	r1, [r0, #28]
    31f6:	cmp	r1, #1
    31f8:	beq.n	320c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    31fa:	cmp	r1, #3
    31fc:	beq.n	3220 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    31fe:	movs	r3, #1
    3200:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3202:	cbnz	r2, 3206 <EventResponder::triggerEventNotImmediate()+0x1e>
    3204:	cpsie	i
	}
	enableInterrupts(irq);
}
    3206:	ldr.w	r4, [sp], #4
    320a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    320c:	ldr	r4, [pc, #68]	; (3254 <EventResponder::triggerEventNotImmediate()+0x6c>)
    320e:	ldr	r1, [r4, #0]
    3210:	cbz	r1, 323c <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3212:	ldr	r1, [pc, #68]	; (3258 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3214:	str	r3, [r0, #20]
				_prev = lastYield;
    3216:	ldr	r3, [r1, #0]
    3218:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    321a:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    321c:	str	r0, [r3, #20]
    321e:	b.n	31fe <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3220:	ldr	r4, [pc, #56]	; (325c <EventResponder::triggerEventNotImmediate()+0x74>)
    3222:	ldr	r1, [r4, #0]
    3224:	cbz	r1, 3248 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3226:	ldr	r1, [pc, #56]	; (3260 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3228:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    322a:	ldr	r3, [r1, #0]
    322c:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    322e:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    3230:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3232:	ldr	r3, [pc, #48]	; (3264 <EventResponder::triggerEventNotImmediate()+0x7c>)
    3234:	mov.w	r1, #268435456	; 0x10000000
    3238:	str	r1, [r3, #0]
    323a:	b.n	31fe <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    323c:	ldr	r3, [pc, #24]	; (3258 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    323e:	str	r1, [r0, #20]
				_prev = nullptr;
    3240:	str	r1, [r0, #24]
				firstYield = this;
    3242:	str	r0, [r4, #0]
				lastYield = this;
    3244:	str	r0, [r3, #0]
    3246:	b.n	31fe <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3248:	ldr	r3, [pc, #20]	; (3260 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    324a:	str	r1, [r0, #20]
				_prev = nullptr;
    324c:	str	r1, [r0, #24]
				firstInterrupt = this;
    324e:	str	r0, [r4, #0]
				lastInterrupt = this;
    3250:	str	r0, [r3, #0]
    3252:	b.n	3232 <EventResponder::triggerEventNotImmediate()+0x4a>
    3254:	.word	0x1fff1a38
    3258:	.word	0x1fff1a34
    325c:	.word	0x1fff1a28
    3260:	.word	0x1fff1a2c
    3264:	.word	0xe000ed04

00003268 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    3268:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    326a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    326c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    326e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3270:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3272:	beq.n	327c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    3274:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3278:	b.w	31e8 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    327c:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    327e:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3282:	bx	r3

00003284 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3284:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3286:	mrs	r2, PRIMASK
		__disable_irq();
    328a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    328c:	ldr	r4, [pc, #48]	; (32c0 <EventResponder::runFromInterrupt()+0x3c>)
    328e:	ldr	r0, [r4, #0]
		if (first) {
    3290:	cbz	r0, 32b4 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3292:	ldr	r6, [pc, #48]	; (32c4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3294:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3296:	ldr	r3, [r0, #20]
    3298:	str	r3, [r4, #0]
			if (firstInterrupt) {
    329a:	cbz	r3, 32ba <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    329c:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    329e:	cbnz	r2, 32a2 <EventResponder::runFromInterrupt()+0x1e>
    32a0:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    32a2:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    32a4:	ldr	r3, [r0, #8]
    32a6:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    32a8:	mrs	r2, PRIMASK
		__disable_irq();
    32ac:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    32ae:	ldr	r0, [r4, #0]
		if (first) {
    32b0:	cmp	r0, #0
    32b2:	bne.n	3296 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    32b4:	cbnz	r2, 32b8 <EventResponder::runFromInterrupt()+0x34>
    32b6:	cpsie	i
    32b8:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    32ba:	str	r3, [r6, #0]
    32bc:	b.n	329e <EventResponder::runFromInterrupt()+0x1a>
    32be:	nop
    32c0:	.word	0x1fff1a28
    32c4:	.word	0x1fff1a2c

000032c8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    32c8:	b.w	3284 <EventResponder::runFromInterrupt()>

000032cc <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    32cc:	ldr	r2, [pc, #96]	; (3330 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    32ce:	push	{r4, r5}
	if (listActive == nullptr) {
    32d0:	ldr	r4, [r2, #0]
    32d2:	cmp	r4, #0
    32d4:	beq.n	3326 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    32d6:	ldr	r3, [r0, #0]
    32d8:	ldr	r1, [r4, #0]
    32da:	cmp	r3, r1
    32dc:	bcs.n	32fc <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    32de:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    32e0:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    32e2:	str	r4, [r0, #8]
		_prev = nullptr;
    32e4:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    32e6:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    32e8:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    32ea:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    32ec:	movs	r3, #2
    32ee:	strb	r3, [r0, #20]
}
    32f0:	pop	{r4, r5}
    32f2:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    32f4:	ldr	r1, [r2, #0]
    32f6:	cmp	r3, r1
    32f8:	mov	r4, r2
    32fa:	bcc.n	330e <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    32fc:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    32fe:	subs	r3, r3, r1
    3300:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3302:	cmp	r2, #0
    3304:	bne.n	32f4 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    3306:	str	r2, [r0, #8]
		_prev = timer;
    3308:	str	r4, [r0, #12]
		timer->_next = this;
    330a:	str	r0, [r4, #8]
    330c:	b.n	32ec <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    330e:	ldr	r2, [r2, #12]
    3310:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    3312:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    3314:	str	r0, [r4, #12]
				_prev->_next = this;
    3316:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    3318:	subs	r3, r1, r3
				_state = TimerActive;
    331a:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    331c:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    331e:	str	r3, [r4, #0]
				_state = TimerActive;
    3320:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    3322:	pop	{r4, r5}
    3324:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    3326:	str	r4, [r0, #8]
		_prev = nullptr;
    3328:	str	r4, [r0, #12]
		listActive = this;
    332a:	str	r0, [r2, #0]
    332c:	b.n	32ec <MillisTimer::addToActiveList()+0x20>
    332e:	nop
    3330:	.word	0x1fff1a30

00003334 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    3334:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    3336:	ldr	r6, [pc, #136]	; (33c0 <MillisTimer::runFromTimer()+0x8c>)
    3338:	ldr	r4, [r6, #0]
	while (timer) {
    333a:	cbz	r4, 3388 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    333c:	ldr	r3, [r4, #0]
    333e:	cmp	r3, #0
    3340:	bne.n	33b8 <MillisTimer::runFromTimer()+0x84>
    3342:	ldr	r7, [pc, #128]	; (33c4 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    3344:	mov	r5, r3
    3346:	b.n	3352 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    3348:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    334a:	cbz	r4, 3388 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    334c:	ldr	r3, [r4, #0]
    334e:	cmp	r3, #0
    3350:	bne.n	33b8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    3352:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    3354:	cbz	r3, 3358 <MillisTimer::runFromTimer()+0x24>
    3356:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    3358:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    335a:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    335c:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    335e:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3360:	ldr	r3, [r3, #0]
    3362:	cmp	r3, r7
    3364:	bne.n	33aa <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3366:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3368:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    336a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    336c:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    336e:	beq.n	33b2 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3370:	bl	31e8 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    3374:	ldr	r3, [r4, #4]
    3376:	cmp	r3, #0
    3378:	beq.n	3348 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    337a:	str	r3, [r4, #0]
				timer->addToActiveList();
    337c:	mov	r0, r4
    337e:	bl	32cc <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    3382:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3384:	cmp	r4, #0
    3386:	bne.n	334c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3388:	mrs	r3, PRIMASK
		__disable_irq();
    338c:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    338e:	ldr	r2, [pc, #56]	; (33c8 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3390:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3392:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3394:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    3396:	cbnz	r3, 339a <MillisTimer::runFromTimer()+0x66>
    3398:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    339a:	cbz	r0, 33a8 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    339c:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    339e:	bl	32cc <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    33a2:	mov	r0, r4
    33a4:	cmp	r0, #0
    33a6:	bne.n	339c <MillisTimer::runFromTimer()+0x68>
    33a8:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    33aa:	mov	r2, r4
    33ac:	movs	r1, #0
    33ae:	blx	r3
    33b0:	b.n	3374 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    33b2:	ldr	r3, [r0, #8]
    33b4:	blx	r3
    33b6:	b.n	3374 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    33b8:	subs	r3, #1
    33ba:	str	r3, [r4, #0]
			break;
    33bc:	b.n	3388 <MillisTimer::runFromTimer()+0x54>
    33be:	nop
    33c0:	.word	0x1fff1a30
    33c4:	.word	0x00003269
    33c8:	.word	0x1fff1a40

000033cc <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    33cc:	ldr	r2, [pc, #8]	; (33d8 <systick_isr+0xc>)
    33ce:	ldr	r3, [r2, #0]
    33d0:	adds	r3, #1
    33d2:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    33d4:	b.w	3334 <MillisTimer::runFromTimer()>
    33d8:	.word	0x1fff15cc

000033dc <__errno>:
    33dc:	ldr	r3, [pc, #4]	; (33e4 <__errno+0x8>)
    33de:	ldr	r0, [r3, #0]
    33e0:	bx	lr
    33e2:	nop
    33e4:	.word	0x1fff1180

000033e8 <__libc_init_array>:
    33e8:	push	{r4, r5, r6, lr}
    33ea:	ldr	r6, [pc, #60]	; (3428 <__libc_init_array+0x40>)
    33ec:	ldr	r5, [pc, #60]	; (342c <__libc_init_array+0x44>)
    33ee:	subs	r6, r6, r5
    33f0:	asrs	r6, r6, #2
    33f2:	it	ne
    33f4:	movne	r4, #0
    33f6:	beq.n	3404 <__libc_init_array+0x1c>
    33f8:	adds	r4, #1
    33fa:	ldr.w	r3, [r5], #4
    33fe:	blx	r3
    3400:	cmp	r6, r4
    3402:	bne.n	33f8 <__libc_init_array+0x10>
    3404:	ldr	r6, [pc, #40]	; (3430 <__libc_init_array+0x48>)
    3406:	ldr	r5, [pc, #44]	; (3434 <__libc_init_array+0x4c>)
    3408:	subs	r6, r6, r5
    340a:	bl	4088 <_init>
    340e:	asrs	r6, r6, #2
    3410:	it	ne
    3412:	movne	r4, #0
    3414:	beq.n	3424 <__libc_init_array+0x3c>
    3416:	adds	r4, #1
    3418:	ldr.w	r3, [r5], #4
    341c:	blx	r3
    341e:	cmp	r6, r4
    3420:	bne.n	3416 <__libc_init_array+0x2e>
    3422:	pop	{r4, r5, r6, pc}
    3424:	pop	{r4, r5, r6, pc}
    3426:	nop
    3428:	.word	0x00004094
    342c:	.word	0x00004094
    3430:	.word	0x000040a0
    3434:	.word	0x00004094

00003438 <malloc>:
    3438:	ldr	r3, [pc, #8]	; (3444 <malloc+0xc>)
    343a:	mov	r1, r0
    343c:	ldr	r0, [r3, #0]
    343e:	b.w	3448 <_malloc_r>
    3442:	nop
    3444:	.word	0x1fff1180

00003448 <_malloc_r>:
    3448:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    344c:	add.w	r5, r1, #11
    3450:	cmp	r5, #22
    3452:	sub	sp, #12
    3454:	mov	r6, r0
    3456:	bls.w	3598 <_malloc_r+0x150>
    345a:	bics.w	r5, r5, #7
    345e:	bmi.w	35e0 <_malloc_r+0x198>
    3462:	cmp	r1, r5
    3464:	bhi.w	35e0 <_malloc_r+0x198>
    3468:	bl	39b8 <__malloc_lock>
    346c:	cmp.w	r5, #504	; 0x1f8
    3470:	bcc.w	39ac <_malloc_r+0x564>
    3474:	lsrs	r3, r5, #9
    3476:	beq.w	35ee <_malloc_r+0x1a6>
    347a:	cmp	r3, #4
    347c:	bhi.w	3786 <_malloc_r+0x33e>
    3480:	lsrs	r0, r5, #6
    3482:	add.w	lr, r0, #57	; 0x39
    3486:	mov.w	r3, lr, lsl #1
    348a:	adds	r0, #56	; 0x38
    348c:	ldr	r7, [pc, #784]	; (37a0 <_malloc_r+0x358>)
    348e:	add.w	r3, r7, r3, lsl #2
    3492:	sub.w	r1, r3, #8
    3496:	ldr	r4, [r3, #4]
    3498:	cmp	r1, r4
    349a:	bne.n	34ac <_malloc_r+0x64>
    349c:	b.n	35f8 <_malloc_r+0x1b0>
    349e:	cmp	r2, #0
    34a0:	bge.w	35fc <_malloc_r+0x1b4>
    34a4:	ldr	r4, [r4, #12]
    34a6:	cmp	r1, r4
    34a8:	beq.w	35f8 <_malloc_r+0x1b0>
    34ac:	ldr	r3, [r4, #4]
    34ae:	bic.w	r3, r3, #3
    34b2:	subs	r2, r3, r5
    34b4:	cmp	r2, #15
    34b6:	ble.n	349e <_malloc_r+0x56>
    34b8:	ldr	r1, [pc, #740]	; (37a0 <_malloc_r+0x358>)
    34ba:	ldr	r4, [r7, #16]
    34bc:	add.w	lr, r1, #8
    34c0:	cmp	r4, lr
    34c2:	beq.w	382c <_malloc_r+0x3e4>
    34c6:	ldr	r3, [r4, #4]
    34c8:	bic.w	r3, r3, #3
    34cc:	subs	r2, r3, r5
    34ce:	cmp	r2, #15
    34d0:	bgt.w	3806 <_malloc_r+0x3be>
    34d4:	cmp	r2, #0
    34d6:	str.w	lr, [r1, #20]
    34da:	str.w	lr, [r1, #16]
    34de:	bge.w	361e <_malloc_r+0x1d6>
    34e2:	cmp.w	r3, #512	; 0x200
    34e6:	bcs.w	37b8 <_malloc_r+0x370>
    34ea:	lsrs	r3, r3, #3
    34ec:	add.w	ip, r3, #1
    34f0:	movs	r2, #1
    34f2:	asrs	r3, r3, #2
    34f4:	lsl.w	r3, r2, r3
    34f8:	ldr	r2, [r1, #4]
    34fa:	ldr.w	r8, [r1, ip, lsl #3]
    34fe:	str.w	r8, [r4, #8]
    3502:	add.w	r9, r1, ip, lsl #3
    3506:	orrs	r2, r3
    3508:	sub.w	r3, r9, #8
    350c:	str	r3, [r4, #12]
    350e:	str	r2, [r1, #4]
    3510:	str.w	r4, [r1, ip, lsl #3]
    3514:	str.w	r4, [r8, #12]
    3518:	asrs	r3, r0, #2
    351a:	movs	r4, #1
    351c:	lsls	r4, r3
    351e:	cmp	r4, r2
    3520:	bhi.w	3638 <_malloc_r+0x1f0>
    3524:	tst	r4, r2
    3526:	bne.n	3536 <_malloc_r+0xee>
    3528:	bic.w	r0, r0, #3
    352c:	lsls	r4, r4, #1
    352e:	tst	r4, r2
    3530:	add.w	r0, r0, #4
    3534:	beq.n	352c <_malloc_r+0xe4>
    3536:	add.w	r9, r7, r0, lsl #3
    353a:	mov	ip, r9
    353c:	mov	r8, r0
    353e:	ldr.w	r1, [ip, #12]
    3542:	cmp	ip, r1
    3544:	bne.n	3556 <_malloc_r+0x10e>
    3546:	b.n	3830 <_malloc_r+0x3e8>
    3548:	cmp	r2, #0
    354a:	bge.w	3850 <_malloc_r+0x408>
    354e:	ldr	r1, [r1, #12]
    3550:	cmp	ip, r1
    3552:	beq.w	3830 <_malloc_r+0x3e8>
    3556:	ldr	r3, [r1, #4]
    3558:	bic.w	r3, r3, #3
    355c:	subs	r2, r3, r5
    355e:	cmp	r2, #15
    3560:	ble.n	3548 <_malloc_r+0x100>
    3562:	mov	r4, r1
    3564:	ldr.w	ip, [r1, #12]
    3568:	ldr.w	r8, [r4, #8]!
    356c:	adds	r3, r1, r5
    356e:	orr.w	r5, r5, #1
    3572:	str	r5, [r1, #4]
    3574:	orr.w	r1, r2, #1
    3578:	str.w	ip, [r8, #12]
    357c:	mov	r0, r6
    357e:	str.w	r8, [ip, #8]
    3582:	str	r3, [r7, #20]
    3584:	str	r3, [r7, #16]
    3586:	str.w	lr, [r3, #12]
    358a:	str.w	lr, [r3, #8]
    358e:	str	r1, [r3, #4]
    3590:	str	r2, [r3, r2]
    3592:	bl	39bc <__malloc_unlock>
    3596:	b.n	35d8 <_malloc_r+0x190>
    3598:	cmp	r1, #16
    359a:	bhi.n	35e0 <_malloc_r+0x198>
    359c:	bl	39b8 <__malloc_lock>
    35a0:	movs	r5, #16
    35a2:	movs	r3, #6
    35a4:	movs	r0, #2
    35a6:	ldr	r7, [pc, #504]	; (37a0 <_malloc_r+0x358>)
    35a8:	add.w	r3, r7, r3, lsl #2
    35ac:	sub.w	r2, r3, #8
    35b0:	ldr	r4, [r3, #4]
    35b2:	cmp	r4, r2
    35b4:	beq.w	3842 <_malloc_r+0x3fa>
    35b8:	ldr	r3, [r4, #4]
    35ba:	ldr	r1, [r4, #12]
    35bc:	ldr	r5, [r4, #8]
    35be:	bic.w	r3, r3, #3
    35c2:	add	r3, r4
    35c4:	mov	r0, r6
    35c6:	ldr	r2, [r3, #4]
    35c8:	str	r1, [r5, #12]
    35ca:	orr.w	r2, r2, #1
    35ce:	str	r5, [r1, #8]
    35d0:	str	r2, [r3, #4]
    35d2:	bl	39bc <__malloc_unlock>
    35d6:	adds	r4, #8
    35d8:	mov	r0, r4
    35da:	add	sp, #12
    35dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    35e0:	movs	r4, #0
    35e2:	movs	r3, #12
    35e4:	mov	r0, r4
    35e6:	str	r3, [r6, #0]
    35e8:	add	sp, #12
    35ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    35ee:	movs	r3, #128	; 0x80
    35f0:	mov.w	lr, #64	; 0x40
    35f4:	movs	r0, #63	; 0x3f
    35f6:	b.n	348c <_malloc_r+0x44>
    35f8:	mov	r0, lr
    35fa:	b.n	34b8 <_malloc_r+0x70>
    35fc:	add	r3, r4
    35fe:	ldr	r1, [r4, #12]
    3600:	ldr	r2, [r3, #4]
    3602:	ldr	r5, [r4, #8]
    3604:	orr.w	r2, r2, #1
    3608:	str	r1, [r5, #12]
    360a:	mov	r0, r6
    360c:	str	r5, [r1, #8]
    360e:	str	r2, [r3, #4]
    3610:	bl	39bc <__malloc_unlock>
    3614:	adds	r4, #8
    3616:	mov	r0, r4
    3618:	add	sp, #12
    361a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    361e:	add	r3, r4
    3620:	mov	r0, r6
    3622:	ldr	r2, [r3, #4]
    3624:	orr.w	r2, r2, #1
    3628:	str	r2, [r3, #4]
    362a:	bl	39bc <__malloc_unlock>
    362e:	adds	r4, #8
    3630:	mov	r0, r4
    3632:	add	sp, #12
    3634:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3638:	ldr	r4, [r7, #8]
    363a:	ldr	r3, [r4, #4]
    363c:	bic.w	r8, r3, #3
    3640:	cmp	r8, r5
    3642:	bcc.n	364e <_malloc_r+0x206>
    3644:	rsb	r3, r5, r8
    3648:	cmp	r3, #15
    364a:	bgt.w	3766 <_malloc_r+0x31e>
    364e:	ldr	r3, [pc, #340]	; (37a4 <_malloc_r+0x35c>)
    3650:	ldr.w	r9, [pc, #352]	; 37b4 <_malloc_r+0x36c>
    3654:	ldr	r2, [r3, #0]
    3656:	ldr.w	r3, [r9]
    365a:	adds	r3, #1
    365c:	add	r2, r5
    365e:	add.w	sl, r4, r8
    3662:	beq.w	3926 <_malloc_r+0x4de>
    3666:	add.w	r2, r2, #4096	; 0x1000
    366a:	adds	r2, #15
    366c:	bic.w	r2, r2, #4080	; 0xff0
    3670:	bic.w	r2, r2, #15
    3674:	mov	r1, r2
    3676:	mov	r0, r6
    3678:	str	r2, [sp, #4]
    367a:	bl	39c0 <_sbrk_r>
    367e:	cmp.w	r0, #4294967295
    3682:	mov	fp, r0
    3684:	ldr	r2, [sp, #4]
    3686:	beq.w	393a <_malloc_r+0x4f2>
    368a:	cmp	sl, r0
    368c:	bhi.w	3888 <_malloc_r+0x440>
    3690:	ldr	r3, [pc, #276]	; (37a8 <_malloc_r+0x360>)
    3692:	ldr	r1, [r3, #0]
    3694:	cmp	sl, fp
    3696:	add	r1, r2
    3698:	str	r1, [r3, #0]
    369a:	beq.w	3944 <_malloc_r+0x4fc>
    369e:	ldr.w	r0, [r9]
    36a2:	ldr.w	lr, [pc, #272]	; 37b4 <_malloc_r+0x36c>
    36a6:	adds	r0, #1
    36a8:	ittet	ne
    36aa:	rsbne	sl, sl, fp
    36ae:	addne	r1, sl
    36b0:	streq.w	fp, [lr]
    36b4:	strne	r1, [r3, #0]
    36b6:	ands.w	r1, fp, #7
    36ba:	beq.w	38ec <_malloc_r+0x4a4>
    36be:	rsb	r0, r1, #8
    36c2:	rsb	r1, r1, #4096	; 0x1000
    36c6:	add	fp, r0
    36c8:	adds	r1, #8
    36ca:	add	r2, fp
    36cc:	ubfx	r2, r2, #0, #12
    36d0:	rsb	r9, r2, r1
    36d4:	mov	r1, r9
    36d6:	mov	r0, r6
    36d8:	str	r3, [sp, #4]
    36da:	bl	39c0 <_sbrk_r>
    36de:	adds	r3, r0, #1
    36e0:	ldr	r3, [sp, #4]
    36e2:	beq.w	3964 <_malloc_r+0x51c>
    36e6:	rsb	r2, fp, r0
    36ea:	add	r2, r9
    36ec:	orr.w	r2, r2, #1
    36f0:	ldr	r1, [r3, #0]
    36f2:	str.w	fp, [r7, #8]
    36f6:	add	r1, r9
    36f8:	cmp	r4, r7
    36fa:	str.w	r2, [fp, #4]
    36fe:	str	r1, [r3, #0]
    3700:	ldr.w	r9, [pc, #164]	; 37a8 <_malloc_r+0x360>
    3704:	beq.n	3734 <_malloc_r+0x2ec>
    3706:	cmp.w	r8, #15
    370a:	bls.w	3908 <_malloc_r+0x4c0>
    370e:	ldr	r2, [r4, #4]
    3710:	sub.w	r3, r8, #12
    3714:	bic.w	r3, r3, #7
    3718:	adds	r0, r4, r3
    371a:	and.w	r2, r2, #1
    371e:	mov.w	lr, #5
    3722:	orrs	r2, r3
    3724:	cmp	r3, #15
    3726:	str	r2, [r4, #4]
    3728:	str.w	lr, [r0, #4]
    372c:	str.w	lr, [r0, #8]
    3730:	bhi.w	396c <_malloc_r+0x524>
    3734:	ldr	r3, [pc, #116]	; (37ac <_malloc_r+0x364>)
    3736:	ldr	r4, [r7, #8]
    3738:	ldr	r2, [r3, #0]
    373a:	cmp	r1, r2
    373c:	it	hi
    373e:	strhi	r1, [r3, #0]
    3740:	ldr	r3, [pc, #108]	; (37b0 <_malloc_r+0x368>)
    3742:	ldr	r2, [r3, #0]
    3744:	cmp	r1, r2
    3746:	ldr	r2, [r4, #4]
    3748:	it	hi
    374a:	strhi	r1, [r3, #0]
    374c:	bic.w	r2, r2, #3
    3750:	cmp	r5, r2
    3752:	sub.w	r3, r2, r5
    3756:	bhi.n	375c <_malloc_r+0x314>
    3758:	cmp	r3, #15
    375a:	bgt.n	3766 <_malloc_r+0x31e>
    375c:	mov	r0, r6
    375e:	bl	39bc <__malloc_unlock>
    3762:	movs	r4, #0
    3764:	b.n	35d8 <_malloc_r+0x190>
    3766:	adds	r2, r4, r5
    3768:	orr.w	r3, r3, #1
    376c:	orr.w	r5, r5, #1
    3770:	str	r5, [r4, #4]
    3772:	mov	r0, r6
    3774:	str	r2, [r7, #8]
    3776:	str	r3, [r2, #4]
    3778:	bl	39bc <__malloc_unlock>
    377c:	adds	r4, #8
    377e:	mov	r0, r4
    3780:	add	sp, #12
    3782:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3786:	cmp	r3, #20
    3788:	bls.n	386e <_malloc_r+0x426>
    378a:	cmp	r3, #84	; 0x54
    378c:	bhi.w	38d8 <_malloc_r+0x490>
    3790:	lsrs	r0, r5, #12
    3792:	add.w	lr, r0, #111	; 0x6f
    3796:	mov.w	r3, lr, lsl #1
    379a:	adds	r0, #110	; 0x6e
    379c:	b.n	348c <_malloc_r+0x44>
    379e:	nop
    37a0:	.word	0x1fff1184
    37a4:	.word	0x1fff1a4c
    37a8:	.word	0x1fff1a50
    37ac:	.word	0x1fff1a48
    37b0:	.word	0x1fff1a44
    37b4:	.word	0x1fff1590
    37b8:	lsrs	r2, r3, #9
    37ba:	cmp	r2, #4
    37bc:	bls.n	387c <_malloc_r+0x434>
    37be:	cmp	r2, #20
    37c0:	bhi.w	392a <_malloc_r+0x4e2>
    37c4:	add.w	r1, r2, #92	; 0x5c
    37c8:	lsls	r1, r1, #1
    37ca:	adds	r2, #91	; 0x5b
    37cc:	add.w	ip, r7, r1, lsl #2
    37d0:	ldr.w	r1, [r7, r1, lsl #2]
    37d4:	ldr.w	r8, [pc, #476]	; 39b4 <_malloc_r+0x56c>
    37d8:	sub.w	ip, ip, #8
    37dc:	cmp	ip, r1
    37de:	beq.w	38f2 <_malloc_r+0x4aa>
    37e2:	ldr	r2, [r1, #4]
    37e4:	bic.w	r2, r2, #3
    37e8:	cmp	r3, r2
    37ea:	bcs.n	37f2 <_malloc_r+0x3aa>
    37ec:	ldr	r1, [r1, #8]
    37ee:	cmp	ip, r1
    37f0:	bne.n	37e2 <_malloc_r+0x39a>
    37f2:	ldr.w	ip, [r1, #12]
    37f6:	ldr	r2, [r7, #4]
    37f8:	str.w	ip, [r4, #12]
    37fc:	str	r1, [r4, #8]
    37fe:	str.w	r4, [ip, #8]
    3802:	str	r4, [r1, #12]
    3804:	b.n	3518 <_malloc_r+0xd0>
    3806:	adds	r3, r4, r5
    3808:	orr.w	r7, r2, #1
    380c:	orr.w	r5, r5, #1
    3810:	str	r5, [r4, #4]
    3812:	mov	r0, r6
    3814:	str	r3, [r1, #20]
    3816:	str	r3, [r1, #16]
    3818:	str.w	lr, [r3, #12]
    381c:	str.w	lr, [r3, #8]
    3820:	str	r7, [r3, #4]
    3822:	str	r2, [r3, r2]
    3824:	adds	r4, #8
    3826:	bl	39bc <__malloc_unlock>
    382a:	b.n	35d8 <_malloc_r+0x190>
    382c:	ldr	r2, [r1, #4]
    382e:	b.n	3518 <_malloc_r+0xd0>
    3830:	add.w	r8, r8, #1
    3834:	tst.w	r8, #3
    3838:	add.w	ip, ip, #8
    383c:	bne.w	353e <_malloc_r+0xf6>
    3840:	b.n	38a4 <_malloc_r+0x45c>
    3842:	ldr	r4, [r3, #12]
    3844:	cmp	r3, r4
    3846:	it	eq
    3848:	addeq	r0, #2
    384a:	beq.w	34b8 <_malloc_r+0x70>
    384e:	b.n	35b8 <_malloc_r+0x170>
    3850:	add	r3, r1
    3852:	mov	r4, r1
    3854:	ldr	r2, [r3, #4]
    3856:	ldr	r1, [r1, #12]
    3858:	ldr.w	r5, [r4, #8]!
    385c:	orr.w	r2, r2, #1
    3860:	str	r2, [r3, #4]
    3862:	mov	r0, r6
    3864:	str	r1, [r5, #12]
    3866:	str	r5, [r1, #8]
    3868:	bl	39bc <__malloc_unlock>
    386c:	b.n	35d8 <_malloc_r+0x190>
    386e:	add.w	lr, r3, #92	; 0x5c
    3872:	add.w	r0, r3, #91	; 0x5b
    3876:	mov.w	r3, lr, lsl #1
    387a:	b.n	348c <_malloc_r+0x44>
    387c:	lsrs	r2, r3, #6
    387e:	add.w	r1, r2, #57	; 0x39
    3882:	lsls	r1, r1, #1
    3884:	adds	r2, #56	; 0x38
    3886:	b.n	37cc <_malloc_r+0x384>
    3888:	cmp	r4, r7
    388a:	ldr	r3, [pc, #296]	; (39b4 <_malloc_r+0x56c>)
    388c:	beq.w	3690 <_malloc_r+0x248>
    3890:	ldr	r4, [r3, #8]
    3892:	ldr	r2, [r4, #4]
    3894:	bic.w	r2, r2, #3
    3898:	b.n	3750 <_malloc_r+0x308>
    389a:	ldr.w	r3, [r9], #-8
    389e:	cmp	r9, r3
    38a0:	bne.w	39a8 <_malloc_r+0x560>
    38a4:	tst.w	r0, #3
    38a8:	add.w	r0, r0, #4294967295
    38ac:	bne.n	389a <_malloc_r+0x452>
    38ae:	ldr	r3, [r7, #4]
    38b0:	bic.w	r3, r3, r4
    38b4:	str	r3, [r7, #4]
    38b6:	lsls	r4, r4, #1
    38b8:	cmp	r4, r3
    38ba:	bhi.w	3638 <_malloc_r+0x1f0>
    38be:	cmp	r4, #0
    38c0:	beq.w	3638 <_malloc_r+0x1f0>
    38c4:	tst	r4, r3
    38c6:	mov	r0, r8
    38c8:	bne.w	3536 <_malloc_r+0xee>
    38cc:	lsls	r4, r4, #1
    38ce:	tst	r4, r3
    38d0:	add.w	r0, r0, #4
    38d4:	beq.n	38cc <_malloc_r+0x484>
    38d6:	b.n	3536 <_malloc_r+0xee>
    38d8:	cmp.w	r3, #340	; 0x154
    38dc:	bhi.n	3910 <_malloc_r+0x4c8>
    38de:	lsrs	r0, r5, #15
    38e0:	add.w	lr, r0, #120	; 0x78
    38e4:	mov.w	r3, lr, lsl #1
    38e8:	adds	r0, #119	; 0x77
    38ea:	b.n	348c <_malloc_r+0x44>
    38ec:	mov.w	r1, #4096	; 0x1000
    38f0:	b.n	36ca <_malloc_r+0x282>
    38f2:	movs	r1, #1
    38f4:	ldr.w	r3, [r8, #4]
    38f8:	asrs	r2, r2, #2
    38fa:	lsl.w	r2, r1, r2
    38fe:	orrs	r2, r3
    3900:	str.w	r2, [r8, #4]
    3904:	mov	r1, ip
    3906:	b.n	37f8 <_malloc_r+0x3b0>
    3908:	movs	r3, #1
    390a:	str.w	r3, [fp, #4]
    390e:	b.n	375c <_malloc_r+0x314>
    3910:	movw	r2, #1364	; 0x554
    3914:	cmp	r3, r2
    3916:	bhi.n	395a <_malloc_r+0x512>
    3918:	lsrs	r0, r5, #18
    391a:	add.w	lr, r0, #125	; 0x7d
    391e:	mov.w	r3, lr, lsl #1
    3922:	adds	r0, #124	; 0x7c
    3924:	b.n	348c <_malloc_r+0x44>
    3926:	adds	r2, #16
    3928:	b.n	3674 <_malloc_r+0x22c>
    392a:	cmp	r2, #84	; 0x54
    392c:	bhi.n	397c <_malloc_r+0x534>
    392e:	lsrs	r2, r3, #12
    3930:	add.w	r1, r2, #111	; 0x6f
    3934:	lsls	r1, r1, #1
    3936:	adds	r2, #110	; 0x6e
    3938:	b.n	37cc <_malloc_r+0x384>
    393a:	ldr	r4, [r7, #8]
    393c:	ldr	r2, [r4, #4]
    393e:	bic.w	r2, r2, #3
    3942:	b.n	3750 <_malloc_r+0x308>
    3944:	ubfx	r0, sl, #0, #12
    3948:	cmp	r0, #0
    394a:	bne.w	369e <_malloc_r+0x256>
    394e:	add	r2, r8
    3950:	ldr	r3, [r7, #8]
    3952:	orr.w	r2, r2, #1
    3956:	str	r2, [r3, #4]
    3958:	b.n	3734 <_malloc_r+0x2ec>
    395a:	movs	r3, #254	; 0xfe
    395c:	mov.w	lr, #127	; 0x7f
    3960:	movs	r0, #126	; 0x7e
    3962:	b.n	348c <_malloc_r+0x44>
    3964:	movs	r2, #1
    3966:	mov.w	r9, #0
    396a:	b.n	36f0 <_malloc_r+0x2a8>
    396c:	add.w	r1, r4, #8
    3970:	mov	r0, r6
    3972:	bl	3ac8 <_free_r>
    3976:	ldr.w	r1, [r9]
    397a:	b.n	3734 <_malloc_r+0x2ec>
    397c:	cmp.w	r2, #340	; 0x154
    3980:	bhi.n	398e <_malloc_r+0x546>
    3982:	lsrs	r2, r3, #15
    3984:	add.w	r1, r2, #120	; 0x78
    3988:	lsls	r1, r1, #1
    398a:	adds	r2, #119	; 0x77
    398c:	b.n	37cc <_malloc_r+0x384>
    398e:	movw	r1, #1364	; 0x554
    3992:	cmp	r2, r1
    3994:	bhi.n	39a2 <_malloc_r+0x55a>
    3996:	lsrs	r2, r3, #18
    3998:	add.w	r1, r2, #125	; 0x7d
    399c:	lsls	r1, r1, #1
    399e:	adds	r2, #124	; 0x7c
    39a0:	b.n	37cc <_malloc_r+0x384>
    39a2:	movs	r1, #254	; 0xfe
    39a4:	movs	r2, #126	; 0x7e
    39a6:	b.n	37cc <_malloc_r+0x384>
    39a8:	ldr	r3, [r7, #4]
    39aa:	b.n	38b6 <_malloc_r+0x46e>
    39ac:	lsrs	r0, r5, #3
    39ae:	adds	r3, r0, #1
    39b0:	lsls	r3, r3, #1
    39b2:	b.n	35a6 <_malloc_r+0x15e>
    39b4:	.word	0x1fff1184

000039b8 <__malloc_lock>:
    39b8:	bx	lr
    39ba:	nop

000039bc <__malloc_unlock>:
    39bc:	bx	lr
    39be:	nop

000039c0 <_sbrk_r>:
    39c0:	push	{r3, r4, r5, lr}
    39c2:	ldr	r4, [pc, #28]	; (39e0 <_sbrk_r+0x20>)
    39c4:	movs	r3, #0
    39c6:	mov	r5, r0
    39c8:	mov	r0, r1
    39ca:	str	r3, [r4, #0]
    39cc:	bl	2d54 <_sbrk>
    39d0:	adds	r3, r0, #1
    39d2:	beq.n	39d6 <_sbrk_r+0x16>
    39d4:	pop	{r3, r4, r5, pc}
    39d6:	ldr	r3, [r4, #0]
    39d8:	cmp	r3, #0
    39da:	beq.n	39d4 <_sbrk_r+0x14>
    39dc:	str	r3, [r5, #0]
    39de:	pop	{r3, r4, r5, pc}
    39e0:	.word	0x1fff1bbc

000039e4 <register_fini>:
    39e4:	ldr	r3, [pc, #8]	; (39f0 <register_fini+0xc>)
    39e6:	cbz	r3, 39ee <register_fini+0xa>
    39e8:	ldr	r0, [pc, #8]	; (39f4 <register_fini+0x10>)
    39ea:	b.w	39f8 <atexit>
    39ee:	bx	lr
    39f0:	.word	0x00000000
    39f4:	.word	0x00003a05

000039f8 <atexit>:
    39f8:	movs	r3, #0
    39fa:	mov	r1, r0
    39fc:	mov	r2, r3
    39fe:	mov	r0, r3
    3a00:	b.w	3c98 <__register_exitproc>

00003a04 <__libc_fini_array>:
    3a04:	push	{r3, r4, r5, lr}
    3a06:	ldr	r5, [pc, #28]	; (3a24 <__libc_fini_array+0x20>)
    3a08:	ldr	r4, [pc, #28]	; (3a28 <__libc_fini_array+0x24>)
    3a0a:	subs	r4, r5, r4
    3a0c:	asrs	r4, r4, #2
    3a0e:	beq.n	3a1c <__libc_fini_array+0x18>
    3a10:	subs	r4, #1
    3a12:	ldr.w	r3, [r5, #-4]!
    3a16:	blx	r3
    3a18:	cmp	r4, #0
    3a1a:	bne.n	3a10 <__libc_fini_array+0xc>
    3a1c:	ldmia.w	sp!, {r3, r4, r5, lr}
    3a20:	b.w	40a0 <__init_array_end>
	...

00003a2c <_malloc_trim_r>:
    3a2c:	push	{r3, r4, r5, r6, r7, lr}
    3a2e:	ldr	r7, [pc, #140]	; (3abc <_malloc_trim_r+0x90>)
    3a30:	mov	r4, r1
    3a32:	mov	r6, r0
    3a34:	bl	39b8 <__malloc_lock>
    3a38:	ldr	r3, [r7, #8]
    3a3a:	ldr	r5, [r3, #4]
    3a3c:	bic.w	r5, r5, #3
    3a40:	subs	r1, r5, r4
    3a42:	addw	r1, r1, #4079	; 0xfef
    3a46:	bic.w	r1, r1, #4080	; 0xff0
    3a4a:	bic.w	r1, r1, #15
    3a4e:	sub.w	r4, r1, #4096	; 0x1000
    3a52:	cmp.w	r4, #4096	; 0x1000
    3a56:	blt.n	3a68 <_malloc_trim_r+0x3c>
    3a58:	movs	r1, #0
    3a5a:	mov	r0, r6
    3a5c:	bl	39c0 <_sbrk_r>
    3a60:	ldr	r3, [r7, #8]
    3a62:	add	r3, r5
    3a64:	cmp	r0, r3
    3a66:	beq.n	3a72 <_malloc_trim_r+0x46>
    3a68:	mov	r0, r6
    3a6a:	bl	39bc <__malloc_unlock>
    3a6e:	movs	r0, #0
    3a70:	pop	{r3, r4, r5, r6, r7, pc}
    3a72:	negs	r1, r4
    3a74:	mov	r0, r6
    3a76:	bl	39c0 <_sbrk_r>
    3a7a:	adds	r0, #1
    3a7c:	beq.n	3a9a <_malloc_trim_r+0x6e>
    3a7e:	ldr	r3, [pc, #64]	; (3ac0 <_malloc_trim_r+0x94>)
    3a80:	ldr	r2, [r7, #8]
    3a82:	ldr	r1, [r3, #0]
    3a84:	subs	r5, r5, r4
    3a86:	orr.w	r5, r5, #1
    3a8a:	mov	r0, r6
    3a8c:	subs	r1, r1, r4
    3a8e:	str	r5, [r2, #4]
    3a90:	str	r1, [r3, #0]
    3a92:	bl	39bc <__malloc_unlock>
    3a96:	movs	r0, #1
    3a98:	pop	{r3, r4, r5, r6, r7, pc}
    3a9a:	movs	r1, #0
    3a9c:	mov	r0, r6
    3a9e:	bl	39c0 <_sbrk_r>
    3aa2:	ldr	r2, [r7, #8]
    3aa4:	subs	r3, r0, r2
    3aa6:	cmp	r3, #15
    3aa8:	ble.n	3a68 <_malloc_trim_r+0x3c>
    3aaa:	ldr	r4, [pc, #24]	; (3ac4 <_malloc_trim_r+0x98>)
    3aac:	ldr	r1, [pc, #16]	; (3ac0 <_malloc_trim_r+0x94>)
    3aae:	ldr	r4, [r4, #0]
    3ab0:	orr.w	r3, r3, #1
    3ab4:	subs	r0, r0, r4
    3ab6:	str	r3, [r2, #4]
    3ab8:	str	r0, [r1, #0]
    3aba:	b.n	3a68 <_malloc_trim_r+0x3c>
    3abc:	.word	0x1fff1184
    3ac0:	.word	0x1fff1a50
    3ac4:	.word	0x1fff1590

00003ac8 <_free_r>:
    3ac8:	cmp	r1, #0
    3aca:	beq.n	3b58 <_free_r+0x90>
    3acc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ad0:	mov	r5, r1
    3ad2:	mov	r8, r0
    3ad4:	bl	39b8 <__malloc_lock>
    3ad8:	ldr.w	r7, [r5, #-4]
    3adc:	ldr	r1, [pc, #424]	; (3c88 <_free_r+0x1c0>)
    3ade:	bic.w	r3, r7, #1
    3ae2:	sub.w	r4, r5, #8
    3ae6:	adds	r2, r4, r3
    3ae8:	ldr	r6, [r1, #8]
    3aea:	ldr	r0, [r2, #4]
    3aec:	cmp	r2, r6
    3aee:	bic.w	r0, r0, #3
    3af2:	beq.n	3bba <_free_r+0xf2>
    3af4:	lsls	r6, r7, #31
    3af6:	str	r0, [r2, #4]
    3af8:	bmi.n	3b12 <_free_r+0x4a>
    3afa:	ldr.w	r7, [r5, #-8]
    3afe:	subs	r4, r4, r7
    3b00:	add.w	lr, r1, #8
    3b04:	ldr	r5, [r4, #8]
    3b06:	cmp	r5, lr
    3b08:	add	r3, r7
    3b0a:	beq.n	3bec <_free_r+0x124>
    3b0c:	ldr	r7, [r4, #12]
    3b0e:	str	r7, [r5, #12]
    3b10:	str	r5, [r7, #8]
    3b12:	adds	r5, r2, r0
    3b14:	ldr	r5, [r5, #4]
    3b16:	lsls	r5, r5, #31
    3b18:	bpl.n	3ba0 <_free_r+0xd8>
    3b1a:	orr.w	r2, r3, #1
    3b1e:	str	r2, [r4, #4]
    3b20:	str	r3, [r4, r3]
    3b22:	cmp.w	r3, #512	; 0x200
    3b26:	bcs.n	3b5a <_free_r+0x92>
    3b28:	lsrs	r3, r3, #3
    3b2a:	adds	r2, r3, #1
    3b2c:	ldr	r5, [r1, #4]
    3b2e:	ldr.w	r7, [r1, r2, lsl #3]
    3b32:	str	r7, [r4, #8]
    3b34:	movs	r0, #1
    3b36:	asrs	r3, r3, #2
    3b38:	lsl.w	r3, r0, r3
    3b3c:	add.w	r0, r1, r2, lsl #3
    3b40:	orrs	r5, r3
    3b42:	subs	r0, #8
    3b44:	str	r0, [r4, #12]
    3b46:	str	r5, [r1, #4]
    3b48:	str.w	r4, [r1, r2, lsl #3]
    3b4c:	str	r4, [r7, #12]
    3b4e:	mov	r0, r8
    3b50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3b54:	b.w	39bc <__malloc_unlock>
    3b58:	bx	lr
    3b5a:	lsrs	r2, r3, #9
    3b5c:	cmp	r2, #4
    3b5e:	bhi.n	3c08 <_free_r+0x140>
    3b60:	lsrs	r2, r3, #6
    3b62:	add.w	r7, r2, #57	; 0x39
    3b66:	lsls	r7, r7, #1
    3b68:	add.w	r5, r2, #56	; 0x38
    3b6c:	add.w	r0, r1, r7, lsl #2
    3b70:	ldr.w	r2, [r1, r7, lsl #2]
    3b74:	ldr	r1, [pc, #272]	; (3c88 <_free_r+0x1c0>)
    3b76:	subs	r0, #8
    3b78:	cmp	r0, r2
    3b7a:	beq.n	3c18 <_free_r+0x150>
    3b7c:	ldr	r1, [r2, #4]
    3b7e:	bic.w	r1, r1, #3
    3b82:	cmp	r3, r1
    3b84:	bcs.n	3b8c <_free_r+0xc4>
    3b86:	ldr	r2, [r2, #8]
    3b88:	cmp	r0, r2
    3b8a:	bne.n	3b7c <_free_r+0xb4>
    3b8c:	ldr	r0, [r2, #12]
    3b8e:	str	r0, [r4, #12]
    3b90:	str	r2, [r4, #8]
    3b92:	str	r4, [r0, #8]
    3b94:	str	r4, [r2, #12]
    3b96:	mov	r0, r8
    3b98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3b9c:	b.w	39bc <__malloc_unlock>
    3ba0:	ldr	r5, [r2, #8]
    3ba2:	ldr	r7, [pc, #232]	; (3c8c <_free_r+0x1c4>)
    3ba4:	cmp	r5, r7
    3ba6:	add	r3, r0
    3ba8:	beq.n	3c2a <_free_r+0x162>
    3baa:	ldr	r0, [r2, #12]
    3bac:	str	r0, [r5, #12]
    3bae:	orr.w	r2, r3, #1
    3bb2:	str	r5, [r0, #8]
    3bb4:	str	r2, [r4, #4]
    3bb6:	str	r3, [r4, r3]
    3bb8:	b.n	3b22 <_free_r+0x5a>
    3bba:	lsls	r7, r7, #31
    3bbc:	add	r3, r0
    3bbe:	bmi.n	3bd0 <_free_r+0x108>
    3bc0:	ldr.w	r2, [r5, #-8]
    3bc4:	subs	r4, r4, r2
    3bc6:	add	r3, r2
    3bc8:	ldr	r0, [r4, #8]
    3bca:	ldr	r2, [r4, #12]
    3bcc:	str	r2, [r0, #12]
    3bce:	str	r0, [r2, #8]
    3bd0:	ldr	r2, [pc, #188]	; (3c90 <_free_r+0x1c8>)
    3bd2:	ldr	r2, [r2, #0]
    3bd4:	orr.w	r0, r3, #1
    3bd8:	cmp	r3, r2
    3bda:	str	r0, [r4, #4]
    3bdc:	str	r4, [r1, #8]
    3bde:	bcc.n	3b4e <_free_r+0x86>
    3be0:	ldr	r3, [pc, #176]	; (3c94 <_free_r+0x1cc>)
    3be2:	mov	r0, r8
    3be4:	ldr	r1, [r3, #0]
    3be6:	bl	3a2c <_malloc_trim_r>
    3bea:	b.n	3b4e <_free_r+0x86>
    3bec:	adds	r1, r2, r0
    3bee:	ldr	r1, [r1, #4]
    3bf0:	lsls	r1, r1, #31
    3bf2:	bmi.n	3c7e <_free_r+0x1b6>
    3bf4:	ldr	r1, [r2, #8]
    3bf6:	ldr	r2, [r2, #12]
    3bf8:	str	r2, [r1, #12]
    3bfa:	add	r3, r0
    3bfc:	orr.w	r0, r3, #1
    3c00:	str	r1, [r2, #8]
    3c02:	str	r0, [r4, #4]
    3c04:	str	r3, [r4, r3]
    3c06:	b.n	3b4e <_free_r+0x86>
    3c08:	cmp	r2, #20
    3c0a:	bhi.n	3c3c <_free_r+0x174>
    3c0c:	add.w	r7, r2, #92	; 0x5c
    3c10:	lsls	r7, r7, #1
    3c12:	add.w	r5, r2, #91	; 0x5b
    3c16:	b.n	3b6c <_free_r+0xa4>
    3c18:	asrs	r2, r5, #2
    3c1a:	ldr	r3, [r1, #4]
    3c1c:	movs	r5, #1
    3c1e:	lsl.w	r2, r5, r2
    3c22:	orrs	r3, r2
    3c24:	str	r3, [r1, #4]
    3c26:	mov	r2, r0
    3c28:	b.n	3b8e <_free_r+0xc6>
    3c2a:	orr.w	r2, r3, #1
    3c2e:	str	r4, [r1, #20]
    3c30:	str	r4, [r1, #16]
    3c32:	str	r5, [r4, #12]
    3c34:	str	r5, [r4, #8]
    3c36:	str	r2, [r4, #4]
    3c38:	str	r3, [r4, r3]
    3c3a:	b.n	3b4e <_free_r+0x86>
    3c3c:	cmp	r2, #84	; 0x54
    3c3e:	bhi.n	3c4e <_free_r+0x186>
    3c40:	lsrs	r2, r3, #12
    3c42:	add.w	r7, r2, #111	; 0x6f
    3c46:	lsls	r7, r7, #1
    3c48:	add.w	r5, r2, #110	; 0x6e
    3c4c:	b.n	3b6c <_free_r+0xa4>
    3c4e:	cmp.w	r2, #340	; 0x154
    3c52:	bhi.n	3c62 <_free_r+0x19a>
    3c54:	lsrs	r2, r3, #15
    3c56:	add.w	r7, r2, #120	; 0x78
    3c5a:	lsls	r7, r7, #1
    3c5c:	add.w	r5, r2, #119	; 0x77
    3c60:	b.n	3b6c <_free_r+0xa4>
    3c62:	movw	r0, #1364	; 0x554
    3c66:	cmp	r2, r0
    3c68:	bhi.n	3c78 <_free_r+0x1b0>
    3c6a:	lsrs	r2, r3, #18
    3c6c:	add.w	r7, r2, #125	; 0x7d
    3c70:	lsls	r7, r7, #1
    3c72:	add.w	r5, r2, #124	; 0x7c
    3c76:	b.n	3b6c <_free_r+0xa4>
    3c78:	movs	r7, #254	; 0xfe
    3c7a:	movs	r5, #126	; 0x7e
    3c7c:	b.n	3b6c <_free_r+0xa4>
    3c7e:	orr.w	r2, r3, #1
    3c82:	str	r2, [r4, #4]
    3c84:	str	r3, [r4, r3]
    3c86:	b.n	3b4e <_free_r+0x86>
    3c88:	.word	0x1fff1184
    3c8c:	.word	0x1fff118c
    3c90:	.word	0x1fff158c
    3c94:	.word	0x1fff1a4c

00003c98 <__register_exitproc>:
    3c98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3c9c:	ldr	r4, [pc, #148]	; (3d34 <__register_exitproc+0x9c>)
    3c9e:	ldr	r5, [r4, #0]
    3ca0:	ldr.w	r4, [r5, #328]	; 0x148
    3ca4:	mov	r6, r0
    3ca6:	mov	r8, r1
    3ca8:	mov	sl, r2
    3caa:	mov	r9, r3
    3cac:	cbz	r4, 3d20 <__register_exitproc+0x88>
    3cae:	ldr	r0, [r4, #4]
    3cb0:	cmp	r0, #31
    3cb2:	bgt.n	3ce4 <__register_exitproc+0x4c>
    3cb4:	adds	r3, r0, #1
    3cb6:	cbz	r6, 3cd6 <__register_exitproc+0x3e>
    3cb8:	add.w	r5, r4, r0, lsl #2
    3cbc:	movs	r2, #1
    3cbe:	str.w	sl, [r5, #136]	; 0x88
    3cc2:	ldr.w	r1, [r4, #392]	; 0x188
    3cc6:	lsls	r2, r0
    3cc8:	orrs	r1, r2
    3cca:	cmp	r6, #2
    3ccc:	str.w	r1, [r4, #392]	; 0x188
    3cd0:	str.w	r9, [r5, #264]	; 0x108
    3cd4:	beq.n	3d14 <__register_exitproc+0x7c>
    3cd6:	adds	r0, #2
    3cd8:	str	r3, [r4, #4]
    3cda:	str.w	r8, [r4, r0, lsl #2]
    3cde:	movs	r0, #0
    3ce0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ce4:	ldr	r3, [pc, #80]	; (3d38 <__register_exitproc+0xa0>)
    3ce6:	cbz	r3, 3d2a <__register_exitproc+0x92>
    3ce8:	mov.w	r0, #400	; 0x190
    3cec:	bl	3438 <malloc>
    3cf0:	mov	r4, r0
    3cf2:	cbz	r0, 3d2a <__register_exitproc+0x92>
    3cf4:	ldr.w	r3, [r5, #328]	; 0x148
    3cf8:	movs	r7, #0
    3cfa:	stmia.w	r0, {r3, r7}
    3cfe:	str.w	r4, [r5, #328]	; 0x148
    3d02:	mov	r0, r7
    3d04:	movs	r3, #1
    3d06:	str.w	r7, [r4, #392]	; 0x188
    3d0a:	str.w	r7, [r4, #396]	; 0x18c
    3d0e:	cmp	r6, #0
    3d10:	beq.n	3cd6 <__register_exitproc+0x3e>
    3d12:	b.n	3cb8 <__register_exitproc+0x20>
    3d14:	ldr.w	r1, [r4, #396]	; 0x18c
    3d18:	orrs	r2, r1
    3d1a:	str.w	r2, [r4, #396]	; 0x18c
    3d1e:	b.n	3cd6 <__register_exitproc+0x3e>
    3d20:	add.w	r4, r5, #332	; 0x14c
    3d24:	str.w	r4, [r5, #328]	; 0x148
    3d28:	b.n	3cae <__register_exitproc+0x16>
    3d2a:	mov.w	r0, #4294967295
    3d2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3d32:	nop
    3d34:	.word	0x00004084
    3d38:	.word	0x00003439
    3d3c:	.word	0x6f486e6f
    3d40:	.word	0x0000646c
    3d44:	.word	0x72506e6f
    3d48:	.word	0x00737365
    3d4c:	.word	0x6f486e6f
    3d50:	.word	0x6552646c
    3d54:	.word	0x7361656c
    3d58:	.word	0x00000065
    3d5c:	.word	0x65526e6f
    3d60:	.word	0x7361656c
    3d64:	.word	0xffff0065
    3d68:	.word	0x79616c50
    3d6c:	.word	0xffffff00
    3d70:	.word	0x7370704f
    3d74:	.word	0x6e61202c
    3d78:	.word	0x6b6e7520
    3d7c:	.word	0x6e776f6e
    3d80:	.word	0x44494d20
    3d84:	.word	0x656d2049
    3d88:	.word	0x67617373
    3d8c:	.word	0x79742065
    3d90:	.word	0x00216570
    3d94:	.word	0x4f4c4556
    3d98:	.word	0x59544943
    3d9c:	.word	0x00000000
    3da0:	.word	0x45544f4e
    3da4:	.word	0x474e454c
    3da8:	.word	0x00004854
    3dac:	.word	0x43544950
    3db0:	.word	0x00000048

00003db4 <pin2sc1a>:
    3db4:	................
    3dc4:	................
    3dd4:	................
    3de4:	................
    3df4:	........

00003dfc <digital_pin_to_info_PGM>:
    3dfc:	@..C@..@D..CD..@
    3e0c:	...C...@0..C0..@
    3e1c:	4..C4..@...C...@
    3e2c:	...C...@...C...@
    3e3c:	...C...@...C...@
    3e4c:	...C...@...C...@
    3e5c:	...C...@...C...@
    3e6c:	...C...@...C...@
    3e7c:	...C...@...C...@
    3e8c:	...C...@...C...@
    3e9c:	...C...@...C...@
    3eac:	...C...@...C...@
    3ebc:	h .Ch..@...C...@
    3ecc:	8..C8..@<..C<..@
    3edc:	@..C@..@H..CH..@
    3eec:	L..CL..@(..C(..@
    3efc:	,..C,..@` .C`..@
    3f0c:	d .Cd..@ ..C ..@
    3f1c:	$..C$..@(..C(..@
    3f2c:	,..C,..@D..CD..@
    3f3c:	p..Cp..@t..Ct..@
    3f4c:	h..Ch..@P..CP..@
    3f5c:	X..CX..@\..C\..@
    3f6c:	T..CT..@ ..C ..@
    3f7c:	$..C$..@...C...@
    3f8c:	...C...@8..C8..@
    3f9c:	4..C4..@0..C0..@
    3fac:	<..C<..@,..C,..@
    3fbc:	( .C(..@, .C,..@
    3fcc:	. .C...@. .C...@
    3fdc:	. .C...@. .C...@
    3fec:	. .C...@. .C...@

00003ffc <vtable for usb_serial_class>:
	...
    4004:	.(...(...(...(..
    4014:	.(...(...(...(..
    4024:	....

00004028 <usb_endpoint_config_table>:
    4028:	........

00004030 <usb_descriptor_list>:
    4030:	....\...........
    4040:	............8...
    4050:	........p.......
    4060:	.... ...........
    4070:	<...............
    4080:	....

00004084 <_global_impure_ptr>:
    4084:	X...

00004088 <_init>:
    4088:	push	{r3, r4, r5, r6, r7, lr}
    408a:	nop
    408c:	pop	{r3, r4, r5, r6, r7}
    408e:	pop	{r3}
    4090:	mov	lr, r3
    4092:	bx	lr

00004094 <__init_array_start>:
    4094:	.word	0x000039e5

00004098 <__frame_dummy_init_array_entry>:
    4098:	5...y...

Disassembly of section .fini:

000040a0 <_fini>:
    40a0:	push	{r3, r4, r5, r6, r7, lr}
    40a2:	nop

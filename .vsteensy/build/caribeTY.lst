
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004214 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff1594 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00002e80 l     F .text	0000000c startup_default_early_hook
00002e8c l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1594 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff1598 l       .bss	00000000 object.8610
0000420c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 sequencer.cpp
00000000 l    df *ABS*	00000000 button.cpp
00000000 l    df *ABS*	00000000 piano.cpp
00000000 l    df *ABS*	00000000 led.cpp
00000000 l    df *ABS*	00000000 main.cpp
000008b0 l     F .text	00000018 _GLOBAL__sub_I_sequencer
00000000 l    df *ABS*	00000000 note.cpp
00000000 l    df *ABS*	00000000 transport.cpp
00000000 l    df *ABS*	00000000 paginator.cpp
00000000 l    df *ABS*	00000000 step.cpp
00000000 l    df *ABS*	00000000 knob.cpp
00000000 l    df *ABS*	00000000 controller.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
1fff15b5 l     O .bss	00000001 tx_noautoflush
1fff15b8 l     O .bss	00000004 tx_packet
1fff15bc l     O .bss	00000001 transmit_previous_timeout
1fff15c0 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
000010d4 l     F .text	00000144 wait_for_cal
1fff15c5 l     O .bss	00000001 analog_right_shift
1fff15c6 l     O .bss	00000001 calibrating
00003f28 l     O .text	00000048 pin2sc1a
1fff0c40 l     O .data	00000001 analog_config_bits
1fff15c7 l     O .bss	00000001 analogReadBusyADC1
1fff15c8 l     O .bss	00000001 analogReadBusyADC0
1fff15c9 l     O .bss	00000001 analog_reference_internal
1fff0c41 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
000013f4 l     F .text	0000004c digitalWrite.part.1
00001440 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00001720 l     F .text	00000048 sysex_byte
1fff15e4 l     O .bss	00000001 tx_noautoflush
1fff1610 l     O .bss	00000004 tx_packet
1fff1614 l     O .bss	00000001 transmit_previous_timeout
1fff161c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c44 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1630 l     O .bss	00000004 ep0_tx_ptr
1fff1634 l     O .bss	00000014 rx_last
1fff1648 l     O .bss	00000002 ep0_tx_len
1fff164c l     O .bss	00000040 ep0_rx0_buf
1fff168c l     O .bss	00000014 rx_first
1fff16a0 l     O .bss	00000001 ep0_tx_data_toggle
1fff16a4 l     O .bss	00000040 ep0_rx1_buf
1fff16e4 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff16f8 l     O .bss	00000014 tx_last
1fff170c l     O .bss	00000008 setup
1fff1714 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1718 l     O .bss	00000008 reply_buffer
1fff1724 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1729 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff172c l     O .bss	00000004 rts_pin
1fff1730 l     O .bss	00000001 rx_buffer_head
1fff1731 l     O .bss	00000001 rx_buffer_tail
1fff1734 l     O .bss	00000028 tx_buffer
1fff175c l     O .bss	00000040 rx_buffer
1fff179c l     O .bss	00000001 transmitting
1fff179d l     O .bss	00000001 tx_buffer_tail
1fff17a0 l     O .bss	00000004 transmit_pin
1fff17a4 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff17a8 l     O .bss	00000004 rts_pin
1fff17ac l     O .bss	00000001 transmitting
1fff17ad l     O .bss	00000001 rx_buffer_tail
1fff17b0 l     O .bss	00000028 tx_buffer
1fff17d8 l     O .bss	00000040 rx_buffer
1fff1818 l     O .bss	00000001 rx_buffer_head
1fff1819 l     O .bss	00000001 tx_buffer_tail
1fff181c l     O .bss	00000004 transmit_pin
1fff1820 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1824 l     O .bss	00000004 rts_pin
1fff1828 l     O .bss	00000001 rx_buffer_head
1fff1829 l     O .bss	00000001 rx_buffer_tail
1fff182c l     O .bss	00000028 tx_buffer
1fff1854 l     O .bss	00000040 rx_buffer
1fff1894 l     O .bss	00000001 transmitting
1fff1895 l     O .bss	00000001 tx_buffer_tail
1fff1898 l     O .bss	00000004 transmit_pin
1fff189c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff18a0 l     O .bss	00000004 rts_pin
1fff18a4 l     O .bss	00000001 rx_buffer_head
1fff18a5 l     O .bss	00000001 rx_buffer_tail
1fff18a8 l     O .bss	00000040 tx_buffer
1fff18e8 l     O .bss	00000040 rx_buffer
1fff1928 l     O .bss	00000001 transmitting
1fff1929 l     O .bss	00000001 tx_buffer_tail
1fff192c l     O .bss	00000004 transmit_pin
1fff1930 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1934 l     O .bss	00000004 rts_pin
1fff1938 l     O .bss	00000001 rx_buffer_head
1fff1939 l     O .bss	00000001 rx_buffer_tail
1fff193c l     O .bss	00000028 tx_buffer
1fff1964 l     O .bss	00000040 rx_buffer
1fff19a4 l     O .bss	00000001 transmitting
1fff19a5 l     O .bss	00000001 tx_buffer_tail
1fff19a8 l     O .bss	00000004 transmit_pin
1fff19ac l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c5c l     O .data	00000012 device_descriptor
1fff0c88 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff19b0 l     O .bss	00000004 rts_pin
1fff19b4 l     O .bss	00000001 rx_buffer_head
1fff19b5 l     O .bss	00000001 rx_buffer_tail
1fff19b8 l     O .bss	00000028 tx_buffer
1fff19e0 l     O .bss	00000040 rx_buffer
1fff1a20 l     O .bss	00000001 transmitting
1fff1a21 l     O .bss	00000001 tx_buffer_tail
1fff1a24 l     O .bss	00000004 transmit_pin
1fff1a28 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00003b30 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d58 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1594 l       .bss	00000000 __bss_start__
1fff1bc4 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00002e78  w    F .text	00000006 adc0_isr
000008c8 g     F .text	00000018 Note::Note(Step*)
00000e78 g     F .text	0000001c usb_serial_available
00002d38 g     F .text	00000020 serial4_available
0000294c  w    F .text	000000c4 yield
1fff0c70 g     O .data	00000018 usb_string_manufacturer_name_default
00002f24 g     F .text	00000020 serial_available
1fff15e8 g     O .bss	00000004 usb_midi_handleProgramChange
00002e30  w    F .text	00000048 hard_fault_isr
00002e78  w    F .text	00000006 dma_ch6_isr
00002a40 g     F .text	00000020 Print::println()
00002c0c g     F .text	00000020 serial2_available
00002e78  w    F .text	00000006 uart0_lon_isr
00001d60 g     F .text	000000e8 usb_rx_memory
00002a10  w    F .text	00000002 serialEvent5()
00000df0 g     F .text	00000006 Controller::getShiftMode()
00002e78  w    F .text	00000006 dma_ch8_isr
00003050 g     F .text	00000020 serial6_available
00003b08 g     F .text	00000002 __malloc_unlock
1fff15fc g     O .bss	00000004 usb_midi_handleAfterTouch
000004f8 g     F .text	0000004e Sequencer::step()
00001218 g     F .text	000000e0 analog_init
00001e48 g     F .text	00000084 usb_tx
00002e78  w    F .text	00000006 portcd_isr
0000057c g     F .text	00000088 Button::onPress()
1fff160c g     O .bss	00000004 usb_midi_handleSysExComplete
00003470 g     F .text	00000098 MillisTimer::runFromTimer()
00002e78  w    F .text	00000006 can1_rx_warn_isr
00004218 g       .fini	00000000 __exidx_end
00002e78  w    F .text	00000006 dma_error_isr
1fff1a88 g     O .bss	00000001 usb_midi_msg_type
1fff1a40 g     O .bss	00000001 EventResponder::runningFromYield
00002e78  w    F .text	00000006 i2c0_isr
00003518 g     F .text	0000000c __errno
00002e78  w    F .text	00000006 portd_isr
00002e78  w    F .text	00000006 enet_error_isr
1fff1a2c g     O .bss	00000004 EventResponder::firstInterrupt
000008e0 g     F .text	00000024 Note::tick()
00000b4c g     F .text	0000002a Knob::tick()
00002e78  w    F .text	00000006 tpm1_isr
00002a2c  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00003f70 g     O .text	00000200 digital_pin_to_info_PGM
00000df8 g     F .text	00000006 Controller::getMode()
1fff1bc0 g     O .bss	00000004 errno
00004218 g       .fini	00000000 _etext
1fff1594 g       .bss	00000000 _sbss
00002b08  w    F .text	00000002 serialEvent6()
1fff15f8 g     O .bss	00000004 usb_midi_handleVelocityChange
000014e8 g     F .text	0000001c digitalRead
00002e78  w    F .text	00000006 porte_isr
000008a4 g     F .text	0000000c loop
00002e78  w    F .text	00000006 portb_isr
000004d8 g     F .text	00000014 Sequencer::tick()
00001804 g     F .text	0000002c usb_midi_flush_output
00002e78  w    F .text	00000006 spi1_isr
00002d58 g     F .text	000000d8 uart3_status_isr
0000331c  w    F .text	00000002 serialEvent1()
00000d20 g     F .text	0000002c Controller::tick()
00002e78  w    F .text	00000006 mcm_isr
00003408 g     F .text	00000068 MillisTimer::addToActiveList()
00001830 g     F .text	0000043c usb_midi_read
00000de0 g     F .text	00000008 Controller::enterShiftMode()
1fff15d4 g     O .bss	00000004 usb_midi_handleSystemReset
000006f8 g     F .text	00000004 Piano::Piano(Sequencer*)
1fff1a30 g     O .bss	00000004 EventResponder::lastInterrupt
00002c2c g     F .text	0000010c uart1_status_isr
00000834 g     F .text	0000006c Led::tick()
1fff1a8a g     O .bss	00000002 usb_midi_msg_sysex_len
00000548 g     F .text	00000006 Sequencer::resetStep()
00002e78  w    F .text	00000006 randnum_isr
1fff15dc g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff15cc g     O .bss	00000004 systick_millis_count
00002e30  w    F .text	00000048 bus_fault_isr
000007ec g     F .text	0000002c Led::toggle()
00002e78  w    F .text	00000006 watchdog_isr
00002e78  w    F .text	00000006 i2c1_isr
1fff1720 g     O .bss	00000001 usb_configuration
00002e78  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00002af0  w    F .text	00000002 serialEvent2()
00002e78  w    F .text	00000006 i2c2_isr
1fff0c70  w    O .data	00000018 usb_string_manufacturer_name
1fff1bb4 g     O .bss	0000000a usb_rx_byte_count_data
00002e78  w    F .text	00000006 pit1_isr
00000a18 g     F .text	0000000e Paginator::previousPage()
00003574 g     F .text	00000010 malloc
00002e78  w    F .text	00000006 dma_ch4_isr
00002e78  w    F .text	00000006 software_isr
00002e78  w    F .text	00000006 dma_ch7_isr
000033a4  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
0000287c g     F .text	000000d0 usb_init
00002e78  w    F .text	00000006 lptmr_isr
00000994 g     F .text	00000054 Transport::processMidi()
1fff1a50 g     O .bss	00000004 __malloc_top_pad
000014b8 g     F .text	00000024 rtc_set
00000a4c g     F .text	00000018 Step::controlLength(int)
1fff0c40 g       .data	00000000 _sdata
1fff162c g     O .bss	00000004 usb_midi_handleNoteOn
00002ef0 g     F .text	00000034 kinetis_hsrun_enable
00003b0c g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00000e00 g     F .text	00000048 usb_serial_getchar
00002e78  w    F .text	00000006 can1_bus_off_isr
00002e78  w    F .text	00000006 ftm2_isr
00000550 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1a7c g     O .bss	00000008 usb_cdc_line_coding
000014dc g     F .text	0000000a digitalWrite
00002e78  w    F .text	00000006 uart5_status_isr
00003070 g     F .text	000000e4 lpuart0_status_isr
1fff1a38 g     O .bss	00000004 EventResponder::lastYield
00000918 g     F .text	0000003a Transport::controlTempo(int)
0000419c g     O .text	00000005 usb_endpoint_config_table
00000b78 g     F .text	000001a6 Controller::Controller(Sequencer*)
00002e78  w    F .text	00000006 dma_ch9_isr
00002e78  w    F .text	00000006 pit2_isr
00003224 g     F .text	00000020 serial3_available
1fff1a4c g     O .bss	00000004 __malloc_max_sbrked_mem
00001504 g     F .text	0000000a pinMode
00001cac g     F .text	0000004c usb_free
00002e78  w    F .text	00000006 i2c3_isr
1fff15f4 g     O .bss	00000004 usb_midi_handleSysExPartial
00004218 g       .fini	00000000 __exidx_start
00002e78  w    F .text	00000006 pit0_isr
1fff1a8c g     O .bss	00000001 usb_midi_msg_data1
1fff1a3c g     O .bss	00000004 EventResponder::firstYield
000041f8 g     O .text	00000004 _global_impure_ptr
00002e78  w    F .text	00000006 can1_error_isr
00003524 g     F .text	00000050 __libc_init_array
1fff1bc4 g       .bss	00000000 __bss_end
00002e78  w    F .text	00000006 can0_wakeup_isr
00002e78  w    F .text	00000006 flash_cmd_isr
00002a14  w    F .text	00000004 usb_serial_class::clear()
00003244 g     F .text	000000d8 uart2_status_isr
00002e90 g     F .text	0000002c _sbrk
1fff1a44 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c58 g     O .data	00000004 __brkval
1fff15c4 g     O .bss	00000001 usb_cdc_line_rtsdtr
0000108c g     F .text	00000048 usb_serial_flush_callback
000041fc g     F .text	00000000 _init
00002e78  w    F .text	00000006 svcall_isr
00002e78  w    F .text	00000006 dma_ch15_isr
00002e78  w    F .text	00000006 uart1_error_isr
00003b50 g     F .text	00000028 __libc_fini_array
00002e78  w    F .text	00000006 usbhs_phy_isr
00000a00 g     F .text	00000008 Paginator::Paginator(Sequencer*)
00000550 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1bc4 g       .bss	00000000 _ebss
00002e78 g     F .text	00000006 unused_isr
00000a8c g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
00002e78  w    F .text	00000006 spi0_isr
00002e78  w    F .text	00000006 dma_ch3_isr
00000a0c g     F .text	0000000c Paginator::nextPage()
00000a28 g     F .text	00000018 Step::Step(Sequencer*)
00000a28 g     F .text	00000018 Step::Step(Sequencer*)
00002b10 g     F .text	00000004 operator delete(void*, unsigned int)
00002e78  w    F .text	00000006 flash_error_isr
00002b14 g     F .text	00000020 serial5_available
00002e78  w    F .text	00000006 uart5_error_isr
00002e78  w    F .text	00000006 rtc_seconds_isr
00002e78  w    F .text	00000006 pdb_isr
00002e30  w    F .text	00000048 usage_fault_isr
00002e78  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
000009e8 g     F .text	00000018 Transport::tick()
00002e78  w    F .text	00000006 dma_ch14_isr
00000a9c g     F .text	000000b0 Knob::onChange()
000008c8 g     F .text	00000018 Note::Note(Step*)
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1a84 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00000904 g     F .text	00000014 Transport::Transport(Sequencer*)
00003508 g     F .text	00000010 systick_isr
00002e78  w    F .text	00000006 rtc_alarm_isr
0000046c g     F .text	0000006c Sequencer::Sequencer()
00002e78  w    F .text	00000006 dma_ch2_isr
1fff0c48 g     O .data	00000010 Serial
00000904 g     F .text	00000014 Transport::Transport(Sequencer*)
00002e78  w    F .text	00000006 ftm1_isr
00002a34  w    F .text	00000006 usb_serial_class::write(unsigned char)
00002e80  w    F .text	0000000c startup_early_hook
00002e78  w    F .text	00000006 dma_ch13_isr
00002e78  w    F .text	00000006 uart2_error_isr
00000e48 g     F .text	00000030 usb_serial_peekchar
000007b8 g     F .text	00000034 Led::blink(int)
1fff0d3c g     O .data	00000016 usb_string_serial_number_default
00002e30 g     F .text	00000048 fault_isr
00003c14 g     F .text	000001d0 _free_r
1fff1618 g     O .bss	00000004 usb_midi_handleStop
00002e78  w    F .text	00000006 usb_charge_isr
00002a24  w    F .text	00000004 usb_serial_class::flush()
00002e78  w    F .text	00000006 cmt_isr
00002e78  w    F .text	00000006 usbhs_isr
1fff1628 g     O .bss	00000004 usb_midi_handleControlChange
1fff1590 g     O .data	00000004 __malloc_sbrk_base
00002a1c  w    F .text	00000004 usb_serial_class::read()
00002e78  w    F .text	00000006 ftm3_isr
000006f8 g     F .text	00000004 Piano::Piano(Sequencer*)
00002e78  w    F .text	00000006 tsi0_isr
00002e78  w    F .text	00000006 spi2_isr
00002af4  w    F .text	00000002 serialEvent4()
00002a3c  w    F .text	00000002 serialEvent()
1fff16a1 g     O .bss	00000001 usb_reboot_timer
00003de4 g     F .text	000000a4 __register_exitproc
00000e94 g     F .text	00000038 usb_serial_flush_input
00000fd4 g     F .text	00000018 usb_serial_putchar
1fff1a54 g     O .bss	00000028 __malloc_current_mallinfo
00002e78  w    F .text	00000006 can0_bus_off_isr
00000b78 g     F .text	000001a6 Controller::Controller(Sequencer*)
1fff1715 g     O .bss	00000001 usb_rx_memory_needed
000004ec g     F .text	0000000a Sequencer::reverse()
00001ecc g     F .text	000009b0 usb_isr
00000974 g     F .text	0000001e Transport::stopPPQN()
1fff1624 g     O .bss	00000004 usb_midi_handleNoteOff
00004170  w    O .text	00000028 vtable for usb_serial_class
00000604 g     F .text	000000f4 Button::tick()
00002e78  w    F .text	00000006 uart3_error_isr
1fff1a34 g     O .bss	00000004 MillisTimer::listActive
00002e78  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00002e78  w    F .text	00000006 low_voltage_isr
1fff1184 g     O .data	00000408 __malloc_av_
00002e78  w    F .text	00000006 can0_error_isr
00000de8 g     F .text	00000008 Controller::exitShiftMode()
000015b4 g     F .text	0000016c _init_Teensyduino_internal_
00000a8c g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
00001034 g     F .text	00000058 usb_serial_flush_output
00002e78  w    F .text	00000006 dma_ch12_isr
00003b04 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00002e78  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00002e78  w    F .text	00000006 pit3_isr
000006fc g     F .text	0000003a Piano::play(Step*)
00000a00 g     F .text	00000008 Paginator::Paginator(Sequencer*)
00002e78  w    F .text	00000006 enet_rx_isr
00002e78  w    F .text	00000006 portc_isr
00002af8 g     F .text	00000010 main
1fff1a48 g     O .bss	00000004 __malloc_max_total_mem
00000824 g     F .text	0000000e Led::on()
00002e30  w    F .text	00000048 memmanage_fault_isr
00003154 g     F .text	00000084 usb_init_serialnumber
00004214 g       .text	00000000 __init_array_end
00003594 g     F .text	00000570 _malloc_r
00002e78  w    F .text	00000006 debugmonitor_isr
1fff15f0 g     O .bss	00000004 usb_midi_handleSongPosition
00003324 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff15e0 g     O .bss	00000004 usb_midi_handleContinue
1fff1a8d g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00002e78  w    F .text	00000006 cmp1_isr
00002e78  w    F .text	00000006 ftm0_isr
00003b78 g     F .text	0000009c _malloc_trim_r
1fff0d38 g     O .data	00000004 string0
00000ecc g     F .text	00000108 usb_serial_write
00002e8c  w    F .text	00000002 startup_late_hook
00000a64 g     F .text	00000014 Step::controlPitch(int)
00002a20  w    F .text	00000004 usb_serial_class::available()
1fff1a8e g     O .bss	00000001 usb_midi_msg_cable
1fff0d20  w    O .data	00000018 usb_string_product_name
00001510 g     F .text	000000a4 delay
00002e78  w    F .text	00000006 tpm0_isr
00004214 g     F .fini	00000000 _fini
00002e78  w    F .text	00000006 i2s0_rx_isr
00002e78  w    F .text	00000006 uart4_error_isr
00002ae0 g     F .text	00000010 Print::print(long)
00001768 g     F .text	0000009c usb_midi_write_packed
00003b44 g     F .text	0000000c atexit
00002e78  w    F .text	00000006 can0_message_isr
00000d4c g     F .text	00000094 Controller::toggleMode()
1fff1180 g     O .data	00000004 _impure_ptr
00002e78  w    F .text	00000006 can1_message_isr
00002e78  w    F .text	00000006 nmi_isr
00000794 g     F .text	00000024 Led::Led(int, int)
0000046c g     F .text	0000006c Sequencer::Sequencer()
1fff1608 g     O .bss	00000004 usb_midi_handleTuneRequest
00000768 g     F .text	0000002c Piano::tick()
00004208 g       .text	00000000 __preinit_array_end
00000a40 g     F .text	0000000a Step::toggle()
00002e78  w    F .text	00000006 sdhc_isr
1fff1a8f g     O .bss	00000001 usb_midi_msg_channel
000008a0 g     F .text	00000002 setup
000041a4 g     O .text	00000054 usb_descriptor_list
00001cf8 g     F .text	0000003c usb_rx
00000794 g     F .text	00000024 Led::Led(int, int)
00002e78  w    F .text	00000006 dma_ch10_isr
1fff1600 g     O .bss	00000004 usb_midi_handleStart
00002e78  w    F .text	00000006 uart0_error_isr
00001c6c g     F .text	00000040 usb_malloc
00002e78  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00000fec g     F .text	00000048 usb_serial_write_buffer_free
00002e78  w    F .text	00000006 enet_timer_isr
1fff1594 g       .data	00000000 _edata
00002e78  w    F .text	00000006 i2s0_tx_isr
00002e78  w    F .text	00000006 adc1_isr
00000a78 g     F .text	00000012 Step::controlVelocity(int)
00002a28  w    F .text	00000004 usb_serial_class::availableForWrite()
00002e78  w    F .text	00000006 cmp0_isr
1fff15d0 g     O .bss	00000004 usb_midi_handleClock
000031d8 g     F .text	0000004c ultoa
00002b0c g     F .text	00000004 operator new(unsigned int)
000033c0 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff158c g     O .data	00000004 __malloc_trim_threshold
00002a18  w    F .text	00000004 usb_serial_class::peek()
1fff15b4 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff15ec g     O .bss	00000004 usb_midi_handlePitchChange
00002e78  w    F .text	00000006 pit_isr
1fff1604 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00002e78  w    F .text	00000006 dac0_isr
00004208 g       .text	00000000 __init_array_start
00002e78  w    F .text	00000006 can1_tx_warn_isr
000012f8 g     F .text	000000fc analogRead
1fff1a90 g     O .bss	00000122 usb_midi_msg_sysex
00002f44 g     F .text	0000010c uart0_status_isr
00002e78  w    F .text	00000006 mcg_isr
00000a08 g     F .text	00000004 Paginator::getPage()
00000400 g     O .text	00000010 flashconfigbytes
00000738 g     F .text	0000002e Piano::noteOff(unsigned char, unsigned char, unsigned char)
1fff0d20 g     O .data	00000018 usb_string_product_name_default
00002e78  w    F .text	00000006 dma_ch1_isr
00000954 g     F .text	00000020 Transport::startPPQN()
00001d34 g     F .text	0000002c usb_tx_packet_count
00002e78  w    F .text	00000006 dma_ch5_isr
00002e78  w    F .text	00000006 can0_rx_warn_isr
00002e78  w    F .text	00000006 can0_tx_warn_isr
00002b34 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00002ebc g     F .text	00000034 kinetis_hsrun_disable
00004208 g       .text	00000000 __preinit_array_start
1fff15b0 g     O .bss	00000004 sequencer
00003320  w    F .text	00000002 serialEvent3()
1fff1620 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
00002e78  w    F .text	00000006 cmp2_isr
00003404 g     F .text	00000004 pendablesrvreq_isr
00002e78  w    F .text	00000006 wakeup_isr
00002e78  w    F .text	00000006 cmp3_isr
00002a60 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00000818 g     F .text	0000000c Led::off()
1fff15d8 g     O .bss	00000004 usb_midi_handleActiveSensing
00003584 g     F .text	00000010 free
00002e78  w    F .text	00000006 tpm2_isr
00002e78  w    F .text	00000006 dma_ch0_isr
1fff0d3c  w    O .data	00000016 usb_string_serial_number
00002e78  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
  free(ptr);
}

void operator delete[](void * ptr)
{
  free(ptr);
       0:	... ....y...1...
      10:	1...1...1...1...
      20:	1...1...1...y...
      30:	y...1....4...5..
      40:	y...y...y...y...
      50:	y...y...y...y...
      60:	y...y...y...y...
      70:	y...y...y...y...
      80:	y...y...y...y...
      90:	y...y...y...y...
      a0:	y...y...y...y...
      b0:	y...y...y...E/..
      c0:	y...-,..y...E2..
      d0:	y...Y-..y...y...
      e0:	y...y...y...y...
      f0:	y...y...y...y...
     100:	y...y...y...y...
     110:	y.......y...y...
     120:	y...y...y...y...
     130:	y...y...y...y...
     140:	y...y...5+..y...
     150:	y...y...y...y...
     160:	y...y...y...y...
     170:	y...y...y...y...
     180:	y...y...y...y...
     190:	y...y...q0..y...
     1a0:	y...y...y...y...
     1b0:	y...y...y...y...
     1c0:	y...y...y...y...

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	2e80 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	15b4 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	14b8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	14b8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	3524 <__libc_init_array>

	startup_late_hook();
     33a:	bl	2e8c <startup_late_hook>
	main();
     33e:	bl	2af8 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff1594
     374:	.word	0x00004214
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff1594
     380:	.word	0x1fff1bc4
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1594
     42c:	.word	0x00000000
     430:	.word	0x00004218

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff1598
     460:	.word	0x00004218
     464:	.word	0x1fff1594
     468:	.word	0x00000000

0000046c <Sequencer::Sequencer()>:
#include "paginator.h"
#include "step.h"
#include "led.h"
#include "piano.h"

Sequencer::Sequencer () {
     46c:	push	{r3, r4, r5, r6, r7, lr}
     46e:	mov	r4, r0
  _controller = new Controller(this);
     470:	movs	r0, #80	; 0x50
     472:	bl	2b0c <operator new(unsigned int)>
     476:	mov	r1, r4
     478:	mov	r5, r0
     47a:	bl	b78 <Controller::Controller(Sequencer*)>
     47e:	str	r5, [r4, #16]
  _transport = new Transport(this);
     480:	movs	r0, #16
     482:	bl	2b0c <operator new(unsigned int)>
     486:	mov	r1, r4
     488:	mov	r5, r0
     48a:	bl	904 <Transport::Transport(Sequencer*)>
     48e:	str	r5, [r4, #12]
  _paginator = new Paginator(this);
     490:	movs	r0, #8
     492:	bl	2b0c <operator new(unsigned int)>
     496:	mov	r1, r4
     498:	mov	r5, r0
     49a:	bl	a00 <Paginator::Paginator(Sequencer*)>
     49e:	str	r5, [r4, #20]
  _piano = new Piano(this);
     4a0:	movs	r0, #20
     4a2:	bl	2b0c <operator new(unsigned int)>
     4a6:	mov	r1, r4
     4a8:	mov	r5, r0
     4aa:	bl	6f8 <Piano::Piano(Sequencer*)>
  _reversed = false;
     4ae:	movs	r3, #0

Sequencer::Sequencer () {
  _controller = new Controller(this);
  _transport = new Transport(this);
  _paginator = new Paginator(this);
  _piano = new Piano(this);
     4b0:	str	r5, [r4, #0]
  _reversed = false;
     4b2:	strb	r3, [r4, #4]
  _currentStep = 0;
     4b4:	str	r3, [r4, #8]
     4b6:	add.w	r5, r4, #20
     4ba:	add.w	r7, r4, #36	; 0x24

  for (int i = 0; i < 4; i++){
    _steps[i] = new Step(this);
     4be:	movs	r0, #20
     4c0:	bl	2b0c <operator new(unsigned int)>
     4c4:	mov	r1, r4
     4c6:	mov	r6, r0
     4c8:	bl	a28 <Step::Step(Sequencer*)>
     4cc:	str.w	r6, [r5, #4]!
  _paginator = new Paginator(this);
  _piano = new Piano(this);
  _reversed = false;
  _currentStep = 0;

  for (int i = 0; i < 4; i++){
     4d0:	cmp	r5, r7
     4d2:	bne.n	4be <Sequencer::Sequencer()+0x52>
    _steps[i] = new Step(this);
  }
};
     4d4:	mov	r0, r4
     4d6:	pop	{r3, r4, r5, r6, r7, pc}

000004d8 <Sequencer::tick()>:

void Sequencer::tick() {
     4d8:	push	{r4, lr}
     4da:	mov	r4, r0
  _transport->tick();
     4dc:	ldr	r0, [r0, #12]
     4de:	bl	9e8 <Transport::tick()>
  _controller->tick();
     4e2:	ldr	r0, [r4, #16]
}
     4e4:	ldmia.w	sp!, {r4, lr}
  }
};

void Sequencer::tick() {
  _transport->tick();
  _controller->tick();
     4e8:	b.w	d20 <Controller::tick()>

000004ec <Sequencer::reverse()>:
}

void Sequencer::reverse() {
  _reversed = !_reversed;
     4ec:	ldrb	r3, [r0, #4]
     4ee:	eor.w	r3, r3, #1
     4f2:	strb	r3, [r0, #4]
     4f4:	bx	lr
     4f6:	nop

000004f8 <Sequencer::step()>:
}

void Sequencer::step () {  
     4f8:	push	{r4, lr}
     4fa:	mov	r4, r0
  _piano->tick();
     4fc:	ldr	r0, [r0, #0]
     4fe:	bl	768 <Piano::tick()>

  _controller->_leds[_currentStep]->blink(1);
     502:	ldr	r2, [r4, #8]
     504:	ldr	r3, [r4, #16]
     506:	add.w	r3, r3, r2, lsl #2
     50a:	movs	r1, #1
     50c:	ldr	r0, [r3, #52]	; 0x34
     50e:	bl	7b8 <Led::blink(int)>

  Step* current = _steps[_currentStep];
     512:	ldr	r3, [r4, #8]
     514:	adds	r2, r3, #6
     516:	ldr.w	r1, [r4, r2, lsl #2]

  if (current->_state) {
     51a:	ldrb	r2, [r1, #16]
     51c:	cbnz	r2, 536 <Sequencer::step()+0x3e>
    _piano->play(current);
  }

  if (!_reversed) {
     51e:	ldrb	r2, [r4, #4]
     520:	cbnz	r2, 52e <Sequencer::step()+0x36>
    _currentStep++;
     522:	adds	r3, #1
     524:	cmp	r3, #3
     526:	it	gt
     528:	movgt	r3, #0
     52a:	str	r3, [r4, #8]
     52c:	pop	{r4, pc}
      _currentStep = 0;
    }
  } else {
    _currentStep--;

    if (_currentStep == -1) {
     52e:	subs	r2, r3, #1
     530:	cbz	r3, 540 <Sequencer::step()+0x48>

    if (_currentStep > 3) {
      _currentStep = 0;
    }
  } else {
    _currentStep--;
     532:	str	r2, [r4, #8]
     534:	pop	{r4, pc}
  _controller->_leds[_currentStep]->blink(1);

  Step* current = _steps[_currentStep];

  if (current->_state) {
    _piano->play(current);
     536:	ldr	r0, [r4, #0]
     538:	bl	6fc <Piano::play(Step*)>
     53c:	ldr	r3, [r4, #8]
     53e:	b.n	51e <Sequencer::step()+0x26>
    }
  } else {
    _currentStep--;

    if (_currentStep == -1) {
      _currentStep = 3;
     540:	movs	r3, #3
     542:	str	r3, [r4, #8]
     544:	pop	{r4, pc}
     546:	nop

00000548 <Sequencer::resetStep()>:
    }
  }
};

void Sequencer::resetStep () {
  _currentStep = 0;
     548:	movs	r3, #0
     54a:	str	r3, [r0, #8]
     54c:	bx	lr
     54e:	nop

00000550 <Button::Button(int, int, Led*, bool, bool, Controller*)>:
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     550:	push	{r3, r4, r5, r6, r7, lr}
     552:	mov	r4, r0
  Led* led,
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
     554:	str	r1, [r0, #0]
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     556:	ldrb.w	r7, [sp, #24]
     55a:	ldrb.w	r6, [sp, #28]
     55e:	ldr	r5, [sp, #32]
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 1000;
  _led = led;
     560:	str	r3, [r0, #52]	; 0x34
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 1000;
     562:	mov.w	r1, #1000	; 0x3e8
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
     566:	str	r2, [r0, #24]
  _reverseButton = reverseButton;
  _holdThreshold = 1000;
  _led = led;
  _controller = controller;

  pinMode(pin, INPUT);
     568:	uxtb	r0, r2
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 1000;
     56a:	str	r1, [r4, #44]	; 0x2c
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
     56c:	strb	r7, [r4, #16]
  _reverseButton = reverseButton;
     56e:	strb	r6, [r4, #17]
  _holdThreshold = 1000;
  _led = led;
  _controller = controller;
     570:	str	r5, [r4, #48]	; 0x30

  pinMode(pin, INPUT);
     572:	movs	r1, #0
     574:	bl	1504 <pinMode>
};
     578:	mov	r0, r4
     57a:	pop	{r3, r4, r5, r6, r7, pc}

0000057c <Button::onPress()>:

void Button::onPress () {
     57c:	push	{r3, r4, r5, lr}
  // Serial.println(_controller.getShiftMode());
  // Serial.println("currentPage");
  // Serial.println(_controller._paginator->getPage());
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
     57e:	ldr	r3, [r0, #4]
     580:	cmp	r3, #1
     582:	beq.n	586 <Button::onPress()+0xa>
     584:	pop	{r3, r4, r5, pc}
     586:	mov	r4, r0
void Button::onPress () {
  // Serial.println(_id);
  // Serial.println(_controller.getShiftMode());
  // Serial.println("currentPage");
  // Serial.println(_controller._paginator->getPage());
  Paginator * paginator = _controller->_sequencer->_paginator;
     588:	ldr	r0, [r0, #48]	; 0x30

  if (_state == HIGH && _shiftButton) {
     58a:	ldrb	r3, [r4, #16]
void Button::onPress () {
  // Serial.println(_id);
  // Serial.println(_controller.getShiftMode());
  // Serial.println("currentPage");
  // Serial.println(_controller._paginator->getPage());
  Paginator * paginator = _controller->_sequencer->_paginator;
     58c:	ldr	r2, [r0, #76]	; 0x4c
     58e:	ldr	r5, [r2, #20]

  if (_state == HIGH && _shiftButton) {
     590:	cbnz	r3, 5b0 <Button::onPress()+0x34>
      paginator->previousPage();
      Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
    }
  } else if (_state == HIGH && _reverseButton) {
     592:	ldrb	r3, [r4, #17]
     594:	cbnz	r3, 5d4 <Button::onPress()+0x58>
    } else {
      _controller->_sequencer->reverse();
      _led->toggle();
    }
  } else if (_state == HIGH) {
    _led->toggle();
     596:	ldr	r0, [r4, #52]	; 0x34
     598:	bl	7ec <Led::toggle()>
    _controller->_sequencer->_steps[_id - 1]->toggle();
     59c:	ldr	r2, [r4, #48]	; 0x30
     59e:	ldr	r3, [r4, #0]
     5a0:	ldr	r2, [r2, #76]	; 0x4c
     5a2:	adds	r3, #5
     5a4:	ldr.w	r0, [r2, r3, lsl #2]
  } 
}
     5a8:	ldmia.w	sp!, {r3, r4, r5, lr}
      _controller->_sequencer->reverse();
      _led->toggle();
    }
  } else if (_state == HIGH) {
    _led->toggle();
    _controller->_sequencer->_steps[_id - 1]->toggle();
     5ac:	b.w	a40 <Step::toggle()>
  // Serial.println("currentPage");
  // Serial.println(_controller._paginator->getPage());
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
     5b0:	bl	df0 <Controller::getShiftMode()>
     5b4:	cbz	r0, 5e2 <Button::onPress()+0x66>
      paginator->previousPage();
     5b6:	mov	r0, r5
     5b8:	bl	a18 <Paginator::previousPage()>
      _controller->toggleMode();
    }
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
      paginator->nextPage();
      Serial.println(paginator->getPage());
     5bc:	mov	r0, r5
     5be:	bl	a08 <Paginator::getPage()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     5c2:	mov	r1, r0
     5c4:	ldr	r0, [pc, #56]	; (600 <Button::onPress()+0x84>)
     5c6:	bl	2ae0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     5ca:	ldr	r0, [pc, #52]	; (600 <Button::onPress()+0x84>)
    }
  } else if (_state == HIGH) {
    _led->toggle();
    _controller->_sequencer->_steps[_id - 1]->toggle();
  } 
}
     5cc:	ldmia.w	sp!, {r3, r4, r5, lr}
     5d0:	b.w	2a40 <Print::println()>
      Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
    }
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
     5d4:	bl	df0 <Controller::getShiftMode()>
     5d8:	cbz	r0, 5ec <Button::onPress()+0x70>
      paginator->nextPage();
     5da:	mov	r0, r5
     5dc:	bl	a0c <Paginator::nextPage()>
     5e0:	b.n	5bc <Button::onPress()+0x40>
  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
      paginator->previousPage();
      Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
     5e2:	ldr	r0, [r4, #48]	; 0x30
    }
  } else if (_state == HIGH) {
    _led->toggle();
    _controller->_sequencer->_steps[_id - 1]->toggle();
  } 
}
     5e4:	ldmia.w	sp!, {r3, r4, r5, lr}
  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
      paginator->previousPage();
      Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
     5e8:	b.w	d4c <Controller::toggleMode()>
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
      paginator->nextPage();
      Serial.println(paginator->getPage());
    } else {
      _controller->_sequencer->reverse();
     5ec:	ldr	r3, [r4, #48]	; 0x30
     5ee:	ldr	r0, [r3, #76]	; 0x4c
     5f0:	bl	4ec <Sequencer::reverse()>
      _led->toggle();
     5f4:	ldr	r0, [r4, #52]	; 0x34
    }
  } else if (_state == HIGH) {
    _led->toggle();
    _controller->_sequencer->_steps[_id - 1]->toggle();
  } 
}
     5f6:	ldmia.w	sp!, {r3, r4, r5, lr}
    if (_controller->getShiftMode()) {
      paginator->nextPage();
      Serial.println(paginator->getPage());
    } else {
      _controller->_sequencer->reverse();
      _led->toggle();
     5fa:	b.w	7ec <Led::toggle()>
     5fe:	nop
     600:	.word	0x1fff0c48

00000604 <Button::tick()>:

unsigned long Button::timeSincePress () {
  return (millis() - _firstTime);
}

void Button::tick () {
     604:	push	{r4, r5, lr}
     606:	mov	r4, r0
     608:	sub	sp, #28
  _current = digitalRead(_pin);
     60a:	ldrb	r0, [r0, #24]
     60c:	bl	14e8 <digitalRead>
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     610:	cmp	r0, #1
unsigned long Button::timeSincePress () {
  return (millis() - _firstTime);
}

void Button::tick () {
  _current = digitalRead(_pin);
     612:	str	r0, [r4, #28]
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     614:	beq.n	658 <Button::tick()+0x54>
     616:	ldr	r3, [r4, #36]	; 0x24
     618:	ldr	r5, [pc, #196]	; (6e0 <Button::tick()+0xdc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     61a:	ldr	r2, [r5, #0]
     61c:	str	r2, [sp, #16]
	return ret;
     61e:	ldr	r2, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     620:	ldr	r1, [pc, #188]	; (6e0 <Button::tick()+0xdc>)
    _firstHoldTime = millis();
    if (!_controller->getShiftMode()) Serial.println("onHold");
    _controller->enterShiftMode();
  }

  if (timeSincePress() > 10) {    
     622:	subs	r2, r2, r3
     624:	cmp	r2, #10
     626:	bls.n	652 <Button::tick()+0x4e>
    if (_state != _current) {
     628:	ldr	r2, [r4, #4]
     62a:	cmp	r0, r2
     62c:	beq.n	652 <Button::tick()+0x4e>
      _state = _current;

      if (_state == HIGH) {
     62e:	cmp	r0, #1
    _controller->enterShiftMode();
  }

  if (timeSincePress() > 10) {    
    if (_state != _current) {
      _state = _current;
     630:	str	r0, [r4, #4]

      if (_state == HIGH) {
     632:	beq.n	6c6 <Button::tick()+0xc2>
     634:	ldr	r2, [r1, #0]
     636:	str	r2, [sp, #20]
	return ret;
     638:	ldr	r2, [sp, #20]
        Serial.println("onPress");      
        onPress();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
     63a:	ldr	r1, [r4, #44]	; 0x2c
     63c:	subs	r3, r2, r3
     63e:	cmp	r1, r3
     640:	bls.n	69a <Button::tick()+0x96>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     642:	movs	r1, #9
     644:	ldr	r0, [pc, #156]	; (6e4 <Button::tick()+0xe0>)
     646:	bl	ecc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     64a:	ldr	r0, [pc, #156]	; (6e8 <Button::tick()+0xe4>)
     64c:	bl	2a40 <Print::println()>
     650:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     652:	str	r0, [r4, #32]
};
     654:	add	sp, #28
     656:	pop	{r4, r5, pc}
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     658:	ldr	r2, [r4, #32]
     65a:	cbz	r2, 68e <Button::tick()+0x8a>
    _controller->_sequencer->_steps[_id - 1]->toggle();
  } 
}

bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
     65c:	cmp	r2, #1
     65e:	ldr	r3, [r4, #36]	; 0x24
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     660:	ldr	r5, [pc, #124]	; (6e0 <Button::tick()+0xdc>)
     662:	bne.n	61a <Button::tick()+0x16>
     664:	ldr	r2, [r5, #0]
     666:	str	r2, [sp, #12]
	return ret;
     668:	ldr	r2, [sp, #12]

  if (currentWentUp()) {
    _firstTime = millis();
  }

  if (currentIsUp() && timeSincePress() > _holdThreshold) {
     66a:	ldr	r1, [r4, #44]	; 0x2c
     66c:	subs	r2, r2, r3
     66e:	cmp	r1, r2
     670:	bcs.n	61a <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     672:	ldr	r3, [r5, #0]
     674:	str	r3, [sp, #8]
	return ret;
     676:	ldr	r3, [sp, #8]
    _firstHoldTime = millis();
     678:	str	r3, [r4, #40]	; 0x28
    if (!_controller->getShiftMode()) Serial.println("onHold");
     67a:	ldr	r0, [r4, #48]	; 0x30
     67c:	bl	df0 <Controller::getShiftMode()>
     680:	cbz	r0, 6b6 <Button::tick()+0xb2>
    _controller->enterShiftMode();
     682:	ldr	r0, [r4, #48]	; 0x30
     684:	bl	de0 <Controller::enterShiftMode()>
     688:	ldr	r0, [r4, #28]
     68a:	ldr	r3, [r4, #36]	; 0x24
     68c:	b.n	61a <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     68e:	ldr	r5, [pc, #80]	; (6e0 <Button::tick()+0xdc>)
     690:	ldr	r3, [r5, #0]
     692:	str	r3, [sp, #4]
	return ret;
     694:	ldr	r3, [sp, #4]

void Button::tick () {
  _current = digitalRead(_pin);

  if (currentWentUp()) {
    _firstTime = millis();
     696:	str	r3, [r4, #36]	; 0x24
     698:	b.n	61a <Button::tick()+0x16>
     69a:	movs	r1, #13
     69c:	ldr	r0, [pc, #76]	; (6ec <Button::tick()+0xe8>)
     69e:	bl	ecc <usb_serial_write>
     6a2:	ldr	r0, [pc, #68]	; (6e8 <Button::tick()+0xe4>)
     6a4:	bl	2a40 <Print::println()>
        onPress();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
          Serial.println("onHoldRelease");
          _controller->exitShiftMode();
     6a8:	ldr	r0, [r4, #48]	; 0x30
     6aa:	bl	de8 <Controller::exitShiftMode()>
     6ae:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     6b0:	str	r0, [r4, #32]
};
     6b2:	add	sp, #28
     6b4:	pop	{r4, r5, pc}
     6b6:	movs	r1, #6
     6b8:	ldr	r0, [pc, #52]	; (6f0 <Button::tick()+0xec>)
     6ba:	bl	ecc <usb_serial_write>
     6be:	ldr	r0, [pc, #40]	; (6e8 <Button::tick()+0xe4>)
     6c0:	bl	2a40 <Print::println()>
     6c4:	b.n	682 <Button::tick()+0x7e>
     6c6:	movs	r1, #7
     6c8:	ldr	r0, [pc, #40]	; (6f4 <Button::tick()+0xf0>)
     6ca:	bl	ecc <usb_serial_write>
     6ce:	ldr	r0, [pc, #24]	; (6e8 <Button::tick()+0xe4>)
     6d0:	bl	2a40 <Print::println()>
    if (_state != _current) {
      _state = _current;

      if (_state == HIGH) {
        Serial.println("onPress");      
        onPress();
     6d4:	mov	r0, r4
     6d6:	bl	57c <Button::onPress()>
     6da:	ldr	r0, [r4, #28]
     6dc:	b.n	652 <Button::tick()+0x4e>
     6de:	nop
     6e0:	.word	0x1fff15cc
     6e4:	.word	0x00003ea8
     6e8:	.word	0x1fff0c48
     6ec:	.word	0x00003e98
     6f0:	.word	0x00003e88
     6f4:	.word	0x00003e90

000006f8 <Piano::Piano(Sequencer*)>:
#include "piano.h"
#include "step.h"


Piano::Piano (Sequencer* sequencer) {
  _sequencer = sequencer;
     6f8:	str	r1, [r0, #16]
};
     6fa:	bx	lr

000006fc <Piano::play(Step*)>:
    noteOff(_notes[0]->_channel, _notes[0]->_pitch, _notes[0]->_velocity);
    delete _notes[0];
  }
}

void Piano::play (Step* step) {
     6fc:	push	{r4, r5, r6, lr}
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     6fe:	ldr	r3, [r1, #8]
     700:	mov	r5, r0
     702:	ldr	r0, [r1, #4]
     704:	lsls	r3, r3, #24
     706:	lsls	r0, r0, #16
     708:	and.w	r3, r3, #2130706432	; 0x7f000000
     70c:	and.w	r0, r0, #8323072	; 0x7f0000
     710:	orrs	r0, r3
     712:	orr.w	r0, r0, #40704	; 0x9f00
     716:	orr.w	r0, r0, #9
     71a:	mov	r4, r1
     71c:	bl	1768 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     720:	bl	1804 <usb_midi_flush_output>
  // create new note pass self as reference
  noteOn(0, step->pitch, step->velocity);
  Note* note = new Note(step);
     724:	movs	r0, #16
     726:	bl	2b0c <operator new(unsigned int)>
     72a:	mov	r1, r4
     72c:	mov	r6, r0
     72e:	bl	8c8 <Note::Note(Step*)>
  _notes[0] = note;
     732:	str	r6, [r5, #0]
     734:	pop	{r4, r5, r6, pc}
     736:	nop

00000738 <Piano::noteOff(unsigned char, unsigned char, unsigned char)>:
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     738:	subs	r1, #1
void Piano::noteOn(byte channel, byte pitch, byte velocity) {
  usbMIDI.sendNoteOn(pitch, velocity, channel);
  usbMIDI.send_now();
};

void Piano::noteOff(byte channel, byte pitch, byte velocity) {
     73a:	push	{r3, lr}
     73c:	lsls	r1, r1, #8
     73e:	lsls	r3, r3, #24
     740:	and.w	r1, r1, #3840	; 0xf00
     744:	and.w	r3, r3, #2130706432	; 0x7f000000
     748:	orrs	r3, r1
     74a:	lsls	r2, r2, #16
     74c:	orr.w	r3, r3, #32768	; 0x8000
     750:	orr.w	r3, r3, #8
     754:	and.w	r0, r2, #8323072	; 0x7f0000
     758:	orrs	r0, r3
     75a:	bl	1768 <usb_midi_write_packed>
  usbMIDI.sendNoteOff(pitch, velocity, channel);
  usbMIDI.send_now();
};
     75e:	ldmia.w	sp!, {r3, lr}
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     762:	b.w	1804 <usb_midi_flush_output>
     766:	nop

00000768 <Piano::tick()>:

Piano::Piano (Sequencer* sequencer) {
  _sequencer = sequencer;
};

void Piano::tick () {
     768:	push	{r4, lr}
     76a:	mov	r4, r0
  if (_notes[0]) _notes[0]->tick();
     76c:	ldr	r0, [r0, #0]
     76e:	cbz	r0, 776 <Piano::tick()+0xe>
     770:	bl	8e0 <Note::tick()>
     774:	ldr	r0, [r4, #0]

  // i have to figure out how to destroy the objects because
  // this length check is a hack. length would go infinite negative
  // calling note off all the time
  if (_notes[0]->_length == 0) {
     776:	ldr	r3, [r0, #8]
     778:	cbz	r3, 77c <Piano::tick()+0x14>
     77a:	pop	{r4, pc}
    noteOff(_notes[0]->_channel, _notes[0]->_pitch, _notes[0]->_velocity);
     77c:	ldrb	r1, [r0, #12]
     77e:	ldrb	r3, [r0, #4]
     780:	ldrb	r2, [r0, #0]
     782:	mov	r0, r4
     784:	bl	738 <Piano::noteOff(unsigned char, unsigned char, unsigned char)>
    delete _notes[0];
     788:	ldr	r0, [r4, #0]
     78a:	movs	r1, #16
  }
}
     78c:	ldmia.w	sp!, {r4, lr}
  // i have to figure out how to destroy the objects because
  // this length check is a hack. length would go infinite negative
  // calling note off all the time
  if (_notes[0]->_length == 0) {
    noteOff(_notes[0]->_channel, _notes[0]->_pitch, _notes[0]->_velocity);
    delete _notes[0];
     790:	b.w	2b10 <operator delete(void*, unsigned int)>

00000794 <Led::Led(int, int)>:
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
     794:	push	{r3, r4, r5, lr}
     796:	mov	r4, r0
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     798:	movs	r3, #0
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     79a:	movs	r5, #75	; 0x4b
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
     79c:	stmia.w	r0, {r1, r2}
  _state = state;
  _blinkLength = 75;
  _blinking = false;

  pinMode(_pin, OUTPUT);
     7a0:	uxtb	r0, r1

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     7a2:	strb	r3, [r4, #16]
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     7a4:	str	r5, [r4, #12]
  _blinking = false;

  pinMode(_pin, OUTPUT);
     7a6:	movs	r1, #1
     7a8:	bl	1504 <pinMode>
  digitalWrite(_pin, _state);
     7ac:	ldrb	r0, [r4, #0]
     7ae:	ldrb	r1, [r4, #4]
     7b0:	bl	14dc <digitalWrite>
};
     7b4:	mov	r0, r4
     7b6:	pop	{r3, r4, r5, pc}

000007b8 <Led::blink(int)>:

void Led::blink (int times) {
     7b8:	push	{r4, r5, r6, lr}
  digitalWrite(_pin, !digitalRead(_pin));
     7ba:	ldrb	r5, [r0, #0]

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     7bc:	sub	sp, #8
     7be:	mov	r4, r0
  digitalWrite(_pin, !digitalRead(_pin));
     7c0:	mov	r0, r5

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     7c2:	mov	r6, r1
  digitalWrite(_pin, !digitalRead(_pin));
     7c4:	bl	14e8 <digitalRead>
     7c8:	clz	r1, r0
     7cc:	lsrs	r1, r1, #5
     7ce:	mov	r0, r5
     7d0:	bl	14dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7d4:	ldr	r3, [pc, #16]	; (7e8 <Led::blink(int)+0x30>)
  _blinking = true;
  _blinkingCounter = times;
     7d6:	str	r6, [r4, #20]
     7d8:	ldr	r3, [r3, #0]
     7da:	str	r3, [sp, #4]
	return ret;
     7dc:	ldr	r3, [sp, #4]
  _lastBlink = millis();  
     7de:	str	r3, [r4, #8]
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
  digitalWrite(_pin, !digitalRead(_pin));
  _blinking = true;
     7e0:	movs	r2, #1
     7e2:	strb	r2, [r4, #16]
  _blinkingCounter = times;
  _lastBlink = millis();  
};
     7e4:	add	sp, #8
     7e6:	pop	{r4, r5, r6, pc}
     7e8:	.word	0x1fff15cc

000007ec <Led::toggle()>:

void Led::toggle () {
  _state = !_state;
     7ec:	ldr	r1, [r0, #4]
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     7ee:	push	{r4, lr}
  _state = !_state;
     7f0:	clz	r1, r1
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     7f4:	mov	r4, r0
  _state = !_state;
     7f6:	lsrs	r1, r1, #5

  digitalWrite(_pin, _state);
     7f8:	ldrb	r0, [r0, #0]
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
  _state = !_state;
     7fa:	str	r1, [r4, #4]

  digitalWrite(_pin, _state);
     7fc:	bl	14dc <digitalWrite>

  if (_blinking) {
     800:	ldrb	r3, [r4, #16]
     802:	cbnz	r3, 806 <Led::toggle()+0x1a>
     804:	pop	{r4, pc}
    digitalWrite(_pin, !_state);
     806:	ldr	r1, [r4, #4]
     808:	ldrb	r0, [r4, #0]
     80a:	clz	r1, r1
     80e:	lsrs	r1, r1, #5
  }
};
     810:	ldmia.w	sp!, {r4, lr}
  _state = !_state;

  digitalWrite(_pin, _state);

  if (_blinking) {
    digitalWrite(_pin, !_state);
     814:	b.w	14dc <digitalWrite>

00000818 <Led::off()>:
  }
};

void Led::off () {
  _blinking = false;
     818:	movs	r1, #0
     81a:	strb	r1, [r0, #16]
  _state = 0;
     81c:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     81e:	ldrb	r0, [r0, #0]
     820:	b.w	14dc <digitalWrite>

00000824 <Led::on()>:
}

void Led::on () {
  _blinking = false;
     824:	movs	r3, #0
  _state = 1;
     826:	movs	r1, #1
  _state = 0;
  digitalWrite(_pin, _state);
}

void Led::on () {
  _blinking = false;
     828:	strb	r3, [r0, #16]
  _state = 1;
     82a:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     82c:	ldrb	r0, [r0, #0]
     82e:	b.w	14dc <digitalWrite>
     832:	nop

00000834 <Led::tick()>:

bool Led::blinkTimePassed () {
  return millis() - _lastBlink > _blinkLength;
};

void Led::tick () {
     834:	push	{r4, r5, r6, lr}
  if (_blinking && blinkTimePassed()) {
     836:	ldrb	r3, [r0, #16]

bool Led::blinkTimePassed () {
  return millis() - _lastBlink > _blinkLength;
};

void Led::tick () {
     838:	sub	sp, #16
     83a:	mov	r4, r0
  if (_blinking && blinkTimePassed()) {
     83c:	cbz	r3, 870 <Led::tick()+0x3c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     83e:	ldr	r5, [pc, #92]	; (89c <Led::tick()+0x68>)
     840:	ldr	r1, [r0, #8]
     842:	ldr	r3, [r5, #0]
     844:	str	r3, [sp, #8]
	return ret;
     846:	ldr	r3, [sp, #8]
     848:	ldr	r2, [r0, #12]
     84a:	subs	r3, r3, r1
     84c:	cmp	r3, r2
     84e:	bls.n	896 <Led::tick()+0x62>
    digitalWrite(_pin, !digitalRead(_pin));
     850:	ldrb	r6, [r0, #0]
     852:	mov	r0, r6
     854:	bl	14e8 <digitalRead>
     858:	clz	r1, r0
     85c:	lsrs	r1, r1, #5
     85e:	mov	r0, r6
     860:	bl	14dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     864:	ldr	r3, [r5, #0]
     866:	str	r3, [sp, #4]
	return ret;
     868:	ldr	r3, [sp, #4]
    _blinking = false;
    _lastBlink = millis();        
     86a:	str	r3, [r4, #8]
};

void Led::tick () {
  if (_blinking && blinkTimePassed()) {
    digitalWrite(_pin, !digitalRead(_pin));
    _blinking = false;
     86c:	movs	r3, #0
     86e:	strb	r3, [r4, #16]
    _lastBlink = millis();        
  }

  if (!_blinking && _blinkingCounter > 0 && blinkTimePassed()) {
     870:	ldr	r1, [r4, #20]
     872:	cmp	r1, #0
     874:	ble.n	896 <Led::tick()+0x62>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     876:	ldr	r3, [pc, #36]	; (89c <Led::tick()+0x68>)
     878:	ldr	r0, [r4, #8]
     87a:	ldr	r3, [r3, #0]
     87c:	str	r3, [sp, #12]
	return ret;
     87e:	ldr	r3, [sp, #12]
     880:	ldr	r2, [r4, #12]
     882:	subs	r3, r3, r0
     884:	cmp	r3, r2
     886:	bls.n	896 <Led::tick()+0x62>
    blink(_blinkingCounter - 1);
     888:	subs	r1, #1
     88a:	mov	r0, r4
     88c:	bl	7b8 <Led::blink(int)>
    _blinkingCounter--;
     890:	ldr	r3, [r4, #20]
     892:	subs	r3, #1
     894:	str	r3, [r4, #20]
  }
};
     896:	add	sp, #16
     898:	pop	{r4, r5, r6, pc}
     89a:	nop
     89c:	.word	0x1fff15cc

000008a0 <setup>:
#include <Arduino.h>
#include "sequencer.h"

Sequencer* sequencer = new Sequencer();

void setup() {
     8a0:	bx	lr
     8a2:	nop

000008a4 <loop>:
  Serial.begin(9600);
}

void loop() {
  sequencer->tick();
     8a4:	ldr	r3, [pc, #4]	; (8ac <loop+0x8>)
     8a6:	ldr	r0, [r3, #0]
     8a8:	b.w	4d8 <Sequencer::tick()>
     8ac:	.word	0x1fff15b0

000008b0 <_GLOBAL__sub_I_sequencer>:
     8b0:	push	{r4, lr}
#include <Arduino.h>
#include "sequencer.h"

Sequencer* sequencer = new Sequencer();
     8b2:	movs	r0, #40	; 0x28
     8b4:	bl	2b0c <operator new(unsigned int)>
     8b8:	mov	r4, r0
     8ba:	bl	46c <Sequencer::Sequencer()>
     8be:	ldr	r3, [pc, #4]	; (8c4 <_GLOBAL__sub_I_sequencer+0x14>)
     8c0:	str	r4, [r3, #0]
     8c2:	pop	{r4, pc}
     8c4:	.word	0x1fff15b0

000008c8 <Note::Note(Step*)>:
#include <Arduino.h>
#include "step.h"
#include "note.h"

Note::Note (Step* step) {
  _length = step->length;
     8c8:	ldr	r2, [r1, #12]

#include <Arduino.h>
#include "step.h"
#include "note.h"

Note::Note (Step* step) {
     8ca:	push	{r4}
  _length = step->length;
  _pitch = step->pitch;
     8cc:	ldr	r4, [r1, #4]
  _velocity = step->velocity;
     8ce:	ldr	r1, [r1, #8]
#include <Arduino.h>
#include "step.h"
#include "note.h"

Note::Note (Step* step) {
  _length = step->length;
     8d0:	str	r2, [r0, #8]
  _pitch = step->pitch;
  _velocity = step->velocity;
  _channel = 0;
     8d2:	movs	r2, #0
#include "step.h"
#include "note.h"

Note::Note (Step* step) {
  _length = step->length;
  _pitch = step->pitch;
     8d4:	str	r4, [r0, #0]
  _velocity = step->velocity;
     8d6:	str	r1, [r0, #4]
  _channel = 0;
     8d8:	str	r2, [r0, #12]
};
     8da:	ldr.w	r4, [sp], #4
     8de:	bx	lr

000008e0 <Note::tick()>:

void Note::tick() {
     8e0:	push	{r4, lr}
     8e2:	movs	r1, #13
     8e4:	mov	r4, r0
     8e6:	ldr	r0, [pc, #20]	; (8fc <Note::tick()+0x1c>)
     8e8:	bl	ecc <usb_serial_write>
     8ec:	ldr	r0, [pc, #16]	; (900 <Note::tick()+0x20>)
     8ee:	bl	2a40 <Print::println()>
  Serial.println("Note updating");
  _length--;
     8f2:	ldr	r3, [r4, #8]
     8f4:	subs	r3, #1
     8f6:	str	r3, [r4, #8]
     8f8:	pop	{r4, pc}
     8fa:	nop
     8fc:	.word	0x00003eb4
     900:	.word	0x1fff0c48

00000904 <Transport::Transport(Sequencer*)>:
// and its job is also to tell the sequence when the next step starts
// its then responsibility of the controller to create the note and its responsibility
// of the note when to stop sounding. 
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
     904:	push	{r4}
  _sequencer = sequencer;
  _state = false;
  max_ppqn = 24;
     906:	movs	r4, #24
// of the note when to stop sounding. 
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     908:	movs	r2, #0
  max_ppqn = 24;
     90a:	stmia.w	r0, {r1, r4}
// of the note when to stop sounding. 
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     90e:	str	r2, [r0, #12]
  max_ppqn = 24;
  ppqn = 0;
     910:	str	r2, [r0, #8]
};
     912:	ldr.w	r4, [sp], #4
     916:	bx	lr

00000918 <Transport::controlTempo(int)>:
int Transport::getPPQN () {
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
     918:	cmp.w	r1, #400	; 0x190
     91c:	bge.n	92e <Transport::controlTempo(int)+0x16>
    max_ppqn = 6;

    if (ppqn >= 6) {
     91e:	ldr	r3, [r0, #8]
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
    max_ppqn = 6;
     920:	movs	r2, #6

    if (ppqn >= 6) {
     922:	cmp	r3, #5
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
    max_ppqn = 6;
     924:	str	r2, [r0, #4]

    if (ppqn >= 6) {
     926:	ble.n	944 <Transport::controlTempo(int)+0x2c>
      ppqn = 0;
     928:	movs	r3, #0
     92a:	str	r3, [r0, #8]
     92c:	bx	lr
    }
  } else if (value >= 400 && value < 800) {
     92e:	sub.w	r3, r1, #400	; 0x190
     932:	cmp.w	r3, #400	; 0x190
     936:	bcc.n	946 <Transport::controlTempo(int)+0x2e>
    max_ppqn = 8;

    if (ppqn >= 8) {
      ppqn = 0;
    }
  } else if (value >= 800 && value <= 1023) {
     938:	sub.w	r1, r1, #800	; 0x320
     93c:	cmp	r1, #223	; 0xdf
    max_ppqn = 10;
     93e:	itt	ls
     940:	movls	r3, #10
     942:	strls	r3, [r0, #4]
     944:	bx	lr
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;

    if (ppqn >= 8) {
     946:	ldr	r3, [r0, #8]

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;
     948:	movs	r2, #8

    if (ppqn >= 8) {
     94a:	cmp	r3, #7

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;
     94c:	str	r2, [r0, #4]

    if (ppqn >= 8) {
     94e:	bgt.n	928 <Transport::controlTempo(int)+0x10>
     950:	bx	lr
     952:	nop

00000954 <Transport::startPPQN()>:
    _sequencer->step(); 
    ppqn = 0;
  }
};

void Transport::startPPQN () {
     954:	push	{r4, lr}
  _state = true;
  ppqn = 0;
     956:	movs	r3, #0
    _sequencer->step(); 
    ppqn = 0;
  }
};

void Transport::startPPQN () {
     958:	mov	r4, r0
  _state = true;
     95a:	movs	r2, #1
  ppqn = 0;
     95c:	str	r3, [r0, #8]
    ppqn = 0;
  }
};

void Transport::startPPQN () {
  _state = true;
     95e:	str	r2, [r0, #12]
  ppqn = 0;
  _sequencer->step(); 
     960:	ldr	r0, [r0, #0]
     962:	bl	4f8 <Sequencer::step()>
  _sequencer->_controller->_leds[5]->toggle();
     966:	ldr	r3, [r4, #0]
     968:	ldr	r3, [r3, #16]
};
     96a:	ldmia.w	sp!, {r4, lr}

void Transport::startPPQN () {
  _state = true;
  ppqn = 0;
  _sequencer->step(); 
  _sequencer->_controller->_leds[5]->toggle();
     96e:	ldr	r0, [r3, #72]	; 0x48
     970:	b.w	7ec <Led::toggle()>

00000974 <Transport::stopPPQN()>:
};

void Transport::stopPPQN () {
     974:	push	{r4, lr}
  _state = false;
     976:	movs	r3, #0
  ppqn = 0;
  _sequencer->step(); 
  _sequencer->_controller->_leds[5]->toggle();
};

void Transport::stopPPQN () {
     978:	mov	r4, r0
  _state = false;
     97a:	str	r3, [r0, #12]
  ppqn = 0;
     97c:	str	r3, [r0, #8]
  _sequencer->resetStep();
     97e:	ldr	r0, [r0, #0]
     980:	bl	548 <Sequencer::resetStep()>
  _sequencer->_controller->_leds[5]->toggle();
     984:	ldr	r3, [r4, #0]
     986:	ldr	r3, [r3, #16]
};
     988:	ldmia.w	sp!, {r4, lr}

void Transport::stopPPQN () {
  _state = false;
  ppqn = 0;
  _sequencer->resetStep();
  _sequencer->_controller->_leds[5]->toggle();
     98c:	ldr	r0, [r3, #72]	; 0x48
     98e:	b.w	7ec <Led::toggle()>
     992:	nop

00000994 <Transport::processMidi()>:
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     994:	ldr	r3, [pc, #68]	; (9dc <Transport::processMidi()+0x48>)
  // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
  // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
  // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
  // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

  switch (type) {
     996:	ldrb	r3, [r3, #0]
     998:	cmp	r3, #250	; 0xfa
     99a:	beq.n	9cc <Transport::processMidi()+0x38>
     99c:	cmp	r3, #252	; 0xfc
     99e:	beq.n	9c8 <Transport::processMidi()+0x34>
     9a0:	cmp	r3, #248	; 0xf8
    max_ppqn = 10;
  }
};

  // move midi to midi class
void Transport::processMidi () {
     9a2:	push	{r4, lr}
     9a4:	mov	r4, r0
  // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
  // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
  // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
  // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

  switch (type) {
     9a6:	beq.n	9ba <Transport::processMidi()+0x26>
     9a8:	movs	r1, #35	; 0x23
     9aa:	ldr	r0, [pc, #52]	; (9e0 <Transport::processMidi()+0x4c>)
     9ac:	bl	ecc <usb_serial_write>
     9b0:	ldr	r0, [pc, #48]	; (9e4 <Transport::processMidi()+0x50>)
      break;

    default:
      Serial.println("Opps, an unknown MIDI message type!");
  }
}
     9b2:	ldmia.w	sp!, {r4, lr}
     9b6:	b.w	2a40 <Print::println()>

void Transport::advancePPQN () {
  ++ppqn;
     9ba:	ldr	r3, [r0, #8]

  if (ppqn == max_ppqn) {
     9bc:	ldr	r1, [r0, #4]
      Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
  ++ppqn;
     9be:	adds	r3, #1

  if (ppqn == max_ppqn) {
     9c0:	cmp	r3, r1
      Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
  ++ppqn;
     9c2:	str	r3, [r0, #8]

  if (ppqn == max_ppqn) {
     9c4:	beq.n	9d0 <Transport::processMidi()+0x3c>
     9c6:	pop	{r4, pc}
    case usbMIDI.Start: // 0xFA
      startPPQN();
      break;

    case usbMIDI.Stop: // 0xFC
      stopPPQN();
     9c8:	b.w	974 <Transport::stopPPQN()>
    case usbMIDI.Clock: // 0xF8 
      advancePPQN();
      break;

    case usbMIDI.Start: // 0xFA
      startPPQN();
     9cc:	b.w	954 <Transport::startPPQN()>

void Transport::advancePPQN () {
  ++ppqn;

  if (ppqn == max_ppqn) {
    _sequencer->step(); 
     9d0:	ldr	r0, [r0, #0]
     9d2:	bl	4f8 <Sequencer::step()>
    ppqn = 0;
     9d6:	movs	r3, #0
     9d8:	str	r3, [r4, #8]
     9da:	pop	{r4, pc}
     9dc:	.word	0x1fff1a88
     9e0:	.word	0x00003ec4
     9e4:	.word	0x1fff0c48

000009e8 <Transport::tick()>:
  _state = false;
  max_ppqn = 24;
  ppqn = 0;
};

void Transport::tick () {
     9e8:	push	{r4, lr}
     9ea:	mov	r4, r0
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     9ec:	movs	r0, #0
     9ee:	bl	1830 <usb_midi_read>
  if (usbMIDI.read()) {
     9f2:	cbnz	r0, 9f6 <Transport::tick()+0xe>
     9f4:	pop	{r4, pc}
    processMidi();
     9f6:	mov	r0, r4
  }
};
     9f8:	ldmia.w	sp!, {r4, lr}
  ppqn = 0;
};

void Transport::tick () {
  if (usbMIDI.read()) {
    processMidi();
     9fc:	b.w	994 <Transport::processMidi()>

00000a00 <Paginator::Paginator(Sequencer*)>:
#include "paginator.h"

Paginator::Paginator (Sequencer* sequencer) {
  _sequencer = sequencer;
  _page = 1;
     a00:	movs	r2, #1
#include "paginator.h"

Paginator::Paginator (Sequencer* sequencer) {
  _sequencer = sequencer;
     a02:	str	r1, [r0, #4]
  _page = 1;
     a04:	str	r2, [r0, #0]
};
     a06:	bx	lr

00000a08 <Paginator::getPage()>:

int Paginator::getPage () {
  return _page;
}
     a08:	ldr	r0, [r0, #0]
     a0a:	bx	lr

00000a0c <Paginator::nextPage()>:

void Paginator::nextPage () {
  if (_page < 4) _page++;
     a0c:	ldr	r3, [r0, #0]
     a0e:	cmp	r3, #3
     a10:	itt	le
     a12:	addle	r3, #1
     a14:	strle	r3, [r0, #0]
     a16:	bx	lr

00000a18 <Paginator::previousPage()>:
};

void Paginator::previousPage () {
  if (_page > 1) _page--;
     a18:	ldr	r3, [r0, #0]
     a1a:	cmp	r3, #1
     a1c:	itt	gt
     a1e:	addgt.w	r3, r3, #4294967295
     a22:	strgt	r3, [r0, #0]
     a24:	bx	lr
     a26:	nop

00000a28 <Step::Step(Sequencer*)>:
#include <Arduino.h>
#include "step.h"

Step::Step(Sequencer* sequencer) {
     a28:	push	{r4, r5, r6}
  _state = false;
     a2a:	movs	r6, #0
  _sequencer = sequencer;
  pitch = 38;
     a2c:	movs	r5, #38	; 0x26
  velocity = 100;
     a2e:	movs	r4, #100	; 0x64
  length = 1;
     a30:	movs	r2, #1
#include <Arduino.h>
#include "step.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
     a32:	strb	r6, [r0, #16]
  _sequencer = sequencer;
  pitch = 38;
     a34:	str	r5, [r0, #4]
  velocity = 100;
     a36:	str	r4, [r0, #8]
#include <Arduino.h>
#include "step.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
  _sequencer = sequencer;
     a38:	str	r1, [r0, #0]
  pitch = 38;
  velocity = 100;
  length = 1;
     a3a:	str	r2, [r0, #12]
};
     a3c:	pop	{r4, r5, r6}
     a3e:	bx	lr

00000a40 <Step::toggle()>:

void Step::toggle () {
  _state = !_state;
     a40:	ldrb	r3, [r0, #16]
     a42:	eor.w	r3, r3, #1
     a46:	strb	r3, [r0, #16]
     a48:	bx	lr
     a4a:	nop

00000a4c <Step::controlLength(int)>:
};

void Step::controlLength (int value) {
  int newValue = map(value, 0, 1023, 24, 1);
  length = newValue;
     a4c:	mvn.w	r3, #21
     a50:	mul.w	r1, r3, r1
     a54:	cmp	r1, #0
     a56:	it	lt
     a58:	addwlt	r1, r1, #1023	; 0x3ff
     a5c:	asrs	r1, r1, #10
     a5e:	adds	r1, #24
     a60:	str	r1, [r0, #12]
     a62:	bx	lr

00000a64 <Step::controlPitch(int)>:
};

void Step::controlPitch (int value) {
  int newValue = map(value, 0, 1023, 51, 38);
  pitch = newValue;
     a64:	sub.w	r1, r1, r1, lsl #2
     a68:	lsls	r1, r1, #2
     a6a:	it	mi
     a6c:	addwmi	r1, r1, #1023	; 0x3ff
     a70:	asrs	r1, r1, #10
     a72:	adds	r1, #51	; 0x33
     a74:	str	r1, [r0, #4]
     a76:	bx	lr

00000a78 <Step::controlVelocity(int)>:
};

void Step::controlVelocity (int value) {
  int newValue = map(value, 0, 1023, 127, 63);
  velocity = newValue;
     a78:	subs.w	r1, r1, r1, lsl #6
     a7c:	it	mi
     a7e:	addwmi	r1, r1, #1023	; 0x3ff
     a82:	asrs	r1, r1, #10
     a84:	adds	r1, #127	; 0x7f
     a86:	str	r1, [r0, #8]
     a88:	bx	lr
     a8a:	nop

00000a8c <Knob::Knob(unsigned char, int, Controller*)>:
#include "controller.h"
#include "step.h"
#include "sequencer.h"
#include "transport.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
     a8c:	push	{r4, r5}
  _pin = pin;
  _id = id;
  _controller = controller;
  _value = 0;
     a8e:	movs	r5, #0
     a90:	str	r5, [r0, #4]
#include "step.h"
#include "sequencer.h"
#include "transport.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
  _pin = pin;
     a92:	str	r1, [r0, #0]
  _id = id;
     a94:	str	r2, [r0, #12]
  _controller = controller;
     a96:	str	r3, [r0, #16]
  _value = 0;
};
     a98:	pop	{r4, r5}
     a9a:	bx	lr

00000a9c <Knob::onChange()>:

void Knob::onChange () {
  if (_id == 5) {
     a9c:	ldr	r3, [r0, #12]
     a9e:	cmp	r3, #5
     aa0:	beq.n	ae8 <Knob::onChange()+0x4c>
  _id = id;
  _controller = controller;
  _value = 0;
};

void Knob::onChange () {
     aa2:	push	{r4, lr}
     aa4:	mov	r4, r0
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
     aa6:	ldr	r0, [r0, #16]
     aa8:	bl	df8 <Controller::getMode()>
     aac:	cmp	r0, #1
     aae:	beq.n	af4 <Knob::onChange()+0x58>
    Serial.println("Velocity");
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
     ab0:	ldr	r0, [r4, #16]
     ab2:	bl	df8 <Controller::getMode()>
     ab6:	cbz	r0, ac4 <Knob::onChange()+0x28>
    Serial.println("Pitch");
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
     ab8:	ldr	r0, [r4, #16]
     aba:	bl	df8 <Controller::getMode()>
     abe:	cmp	r0, #2
     ac0:	beq.n	b18 <Knob::onChange()+0x7c>
     ac2:	pop	{r4, pc}
     ac4:	movs	r1, #5
     ac6:	ldr	r0, [pc, #116]	; (b3c <Knob::onChange()+0xa0>)
     ac8:	bl	ecc <usb_serial_write>
     acc:	ldr	r0, [pc, #112]	; (b40 <Knob::onChange()+0xa4>)
     ace:	bl	2a40 <Print::println()>
  } else if (_controller->getMode() == VELOCITY) {
    Serial.println("Velocity");
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
    Serial.println("Pitch");
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
     ad2:	ldr	r2, [r4, #16]
     ad4:	ldr	r3, [r4, #12]
     ad6:	ldr	r2, [r2, #76]	; 0x4c
     ad8:	ldr	r1, [r4, #4]
     ada:	adds	r3, #6
  } else if (_controller->getMode() == NOTELENGTH) {
    Serial.println("Note length");
    _controller->_sequencer->_steps[_id]->controlLength(_value);
  }
}
     adc:	ldmia.w	sp!, {r4, lr}
  } else if (_controller->getMode() == VELOCITY) {
    Serial.println("Velocity");
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
    Serial.println("Pitch");
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
     ae0:	ldr.w	r0, [r2, r3, lsl #2]
     ae4:	b.w	a64 <Step::controlPitch(int)>
  _value = 0;
};

void Knob::onChange () {
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
     ae8:	ldr	r3, [r0, #16]
     aea:	ldr	r1, [r0, #4]
     aec:	ldr	r3, [r3, #76]	; 0x4c
     aee:	ldr	r0, [r3, #12]
     af0:	b.w	918 <Transport::controlTempo(int)>
     af4:	movs	r1, #8
     af6:	ldr	r0, [pc, #76]	; (b44 <Knob::onChange()+0xa8>)
     af8:	bl	ecc <usb_serial_write>
     afc:	ldr	r0, [pc, #64]	; (b40 <Knob::onChange()+0xa4>)
     afe:	bl	2a40 <Print::println()>
  } else if (_controller->getMode() == VELOCITY) {
    Serial.println("Velocity");
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
     b02:	ldr	r2, [r4, #16]
     b04:	ldr	r3, [r4, #12]
     b06:	ldr	r2, [r2, #76]	; 0x4c
     b08:	ldr	r1, [r4, #4]
     b0a:	adds	r3, #6
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    Serial.println("Note length");
    _controller->_sequencer->_steps[_id]->controlLength(_value);
  }
}
     b0c:	ldmia.w	sp!, {r4, lr}
void Knob::onChange () {
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    Serial.println("Velocity");
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
     b10:	ldr.w	r0, [r2, r3, lsl #2]
     b14:	b.w	a78 <Step::controlVelocity(int)>
     b18:	movs	r1, #11
     b1a:	ldr	r0, [pc, #44]	; (b48 <Knob::onChange()+0xac>)
     b1c:	bl	ecc <usb_serial_write>
     b20:	ldr	r0, [pc, #28]	; (b40 <Knob::onChange()+0xa4>)
     b22:	bl	2a40 <Print::println()>
  } else if (_controller->getMode() == PITCH) {
    Serial.println("Pitch");
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    Serial.println("Note length");
    _controller->_sequencer->_steps[_id]->controlLength(_value);
     b26:	ldr	r2, [r4, #16]
     b28:	ldr	r3, [r4, #12]
     b2a:	ldr	r2, [r2, #76]	; 0x4c
     b2c:	ldr	r1, [r4, #4]
     b2e:	adds	r3, #6
  }
}
     b30:	ldmia.w	sp!, {r4, lr}
  } else if (_controller->getMode() == PITCH) {
    Serial.println("Pitch");
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    Serial.println("Note length");
    _controller->_sequencer->_steps[_id]->controlLength(_value);
     b34:	ldr.w	r0, [r2, r3, lsl #2]
     b38:	b.w	a4c <Step::controlLength(int)>
     b3c:	.word	0x00003ef4
     b40:	.word	0x1fff0c48
     b44:	.word	0x00003ee8
     b48:	.word	0x00003efc

00000b4c <Knob::tick()>:
  }
}

// todo latch
void Knob::tick () {
     b4c:	push	{r4, lr}
     b4e:	mov	r4, r0
  _value = analogRead(_pin);
     b50:	ldrb	r0, [r0, #0]
     b52:	bl	12f8 <analogRead>

  int diff = abs(_value - _lastValue);
     b56:	ldr	r3, [r4, #8]
  }
}

// todo latch
void Knob::tick () {
  _value = analogRead(_pin);
     b58:	str	r0, [r4, #4]

  int diff = abs(_value - _lastValue);

  // "filter"
  const boolean isChanging = _value != _lastValue && diff > 10;
     b5a:	cmp	r0, r3
     b5c:	beq.n	b74 <Knob::tick()+0x28>
     b5e:	subs	r0, r0, r3
     b60:	cmp	r0, #0
     b62:	it	lt
     b64:	neglt	r0, r0
     b66:	cmp	r0, #10
     b68:	ble.n	b74 <Knob::tick()+0x28>

  if (isChanging) {
    onChange();
     b6a:	mov	r0, r4
     b6c:	bl	a9c <Knob::onChange()>

    _lastValue = _value;
     b70:	ldr	r3, [r4, #4]
     b72:	str	r3, [r4, #8]
     b74:	pop	{r4, pc}
     b76:	nop

00000b78 <Controller::Controller(Sequencer*)>:
#include "button.h"
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"

Controller::Controller (Sequencer* sequencer) {
     b78:	push	{r4, r5, r6, r7, lr}
  _sequencer = sequencer;
  _currentMode = PITCH;
     b7a:	movs	r5, #0
#include "button.h"
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"

Controller::Controller (Sequencer* sequencer) {
     b7c:	sub	sp, #20
     b7e:	mov	r4, r0
  _sequencer = sequencer;
     b80:	str	r1, [r0, #76]	; 0x4c
  _currentMode = PITCH;
     b82:	strb.w	r5, [r0, #49]	; 0x31
  _shiftMode = false;
     b86:	strb.w	r5, [r0, #48]	; 0x30
  
  _leds[0] = new Led(3, LOW);
     b8a:	movs	r0, #24
     b8c:	bl	2b0c <operator new(unsigned int)>
     b90:	mov	r2, r5
     b92:	mov	r6, r0
     b94:	movs	r1, #3
     b96:	bl	794 <Led::Led(int, int)>
     b9a:	str	r6, [r4, #52]	; 0x34
  _leds[1] = new Led(5, LOW);
     b9c:	movs	r0, #24
     b9e:	bl	2b0c <operator new(unsigned int)>
     ba2:	mov	r2, r5
     ba4:	mov	r6, r0
     ba6:	movs	r1, #5
     ba8:	bl	794 <Led::Led(int, int)>
     bac:	str	r6, [r4, #56]	; 0x38
  _leds[2] = new Led(7, LOW);
     bae:	movs	r0, #24
     bb0:	bl	2b0c <operator new(unsigned int)>
     bb4:	mov	r2, r5
     bb6:	mov	r6, r0
     bb8:	movs	r1, #7
     bba:	bl	794 <Led::Led(int, int)>
     bbe:	str	r6, [r4, #60]	; 0x3c
  _leds[3] = new Led(9, LOW);
     bc0:	movs	r0, #24
     bc2:	bl	2b0c <operator new(unsigned int)>
     bc6:	mov	r2, r5
     bc8:	mov	r6, r0
     bca:	movs	r1, #9
     bcc:	bl	794 <Led::Led(int, int)>
     bd0:	str	r6, [r4, #64]	; 0x40
  _leds[4] = new Led(11, LOW);
     bd2:	movs	r0, #24
     bd4:	bl	2b0c <operator new(unsigned int)>
     bd8:	mov	r2, r5
     bda:	mov	r6, r0
     bdc:	movs	r1, #11
     bde:	bl	794 <Led::Led(int, int)>
     be2:	str	r6, [r4, #68]	; 0x44
  _leds[5] = new Led(24, LOW);
     be4:	movs	r0, #24
     be6:	bl	2b0c <operator new(unsigned int)>
     bea:	mov	r2, r5
     bec:	movs	r1, #24
     bee:	mov	r6, r0
     bf0:	bl	794 <Led::Led(int, int)>
     bf4:	str	r6, [r4, #72]	; 0x48

  _leds[4]->toggle();
     bf6:	ldr	r0, [r4, #68]	; 0x44
     bf8:	bl	7ec <Led::toggle()>
  _leds[5]->toggle();
     bfc:	ldr	r0, [r4, #72]	; 0x48
     bfe:	bl	7ec <Led::toggle()>

  _buttons[0] = new Button(1, step1pin, _leds[0], false, false, this);
     c02:	movs	r0, #56	; 0x38
     c04:	bl	2b0c <operator new(unsigned int)>
     c08:	ldr	r3, [r4, #52]	; 0x34
     c0a:	str	r5, [sp, #4]
     c0c:	mov	r6, r0
     c0e:	str	r5, [sp, #0]
     c10:	movs	r2, #2
     c12:	movs	r1, #1
     c14:	str	r4, [sp, #8]
     c16:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     c1a:	str	r6, [r4, #0]
  _buttons[1] = new Button(2, step2pin, _leds[1], false, false, this);
     c1c:	movs	r0, #56	; 0x38
     c1e:	bl	2b0c <operator new(unsigned int)>
     c22:	ldr	r3, [r4, #56]	; 0x38
     c24:	str	r5, [sp, #4]
     c26:	mov	r6, r0
     c28:	str	r5, [sp, #0]
     c2a:	movs	r2, #4
     c2c:	movs	r1, #2
     c2e:	str	r4, [sp, #8]
     c30:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     c34:	str	r6, [r4, #4]
  _buttons[2] = new Button(3, step3pin, _leds[2], false, false, this);
     c36:	movs	r0, #56	; 0x38
     c38:	bl	2b0c <operator new(unsigned int)>
     c3c:	ldr	r3, [r4, #60]	; 0x3c
     c3e:	str	r5, [sp, #4]
     c40:	mov	r6, r0
     c42:	str	r5, [sp, #0]
     c44:	movs	r2, #6
     c46:	movs	r1, #3
     c48:	str	r4, [sp, #8]
     c4a:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     c4e:	str	r6, [r4, #8]
  _buttons[3] = new Button(4, step4pin, _leds[3], false, false, this);
     c50:	movs	r0, #56	; 0x38
     c52:	bl	2b0c <operator new(unsigned int)>
     c56:	ldr	r3, [r4, #64]	; 0x40
     c58:	str	r5, [sp, #4]
     c5a:	mov	r6, r0
     c5c:	str	r5, [sp, #0]
     c5e:	movs	r2, #8
     c60:	movs	r1, #4
     c62:	str	r4, [sp, #8]
     c64:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     c68:	str	r6, [r4, #12]
  _buttons[4] = new Button(5, shiftPin, _leds[4], true, false, this);
     c6a:	movs	r0, #56	; 0x38
     c6c:	bl	2b0c <operator new(unsigned int)>
     c70:	movs	r6, #1
     c72:	ldr	r3, [r4, #68]	; 0x44
     c74:	str	r5, [sp, #4]
     c76:	mov	r7, r0
     c78:	movs	r2, #10
     c7a:	movs	r1, #5
     c7c:	str	r4, [sp, #8]
     c7e:	str	r6, [sp, #0]
     c80:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     c84:	str	r7, [r4, #16]
  _buttons[5] = new Button(6, playPin, _leds[5], false, true, this);
     c86:	movs	r0, #56	; 0x38
     c88:	bl	2b0c <operator new(unsigned int)>
     c8c:	ldr	r3, [r4, #72]	; 0x48
     c8e:	str	r4, [sp, #8]
     c90:	mov	r7, r0
     c92:	stmia.w	sp, {r5, r6}
     c96:	movs	r2, #12
     c98:	movs	r1, #6
     c9a:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     c9e:	str	r7, [r4, #20]

  _knobs[0] = new Knob(A0, 0, this);
     ca0:	movs	r0, #20
     ca2:	bl	2b0c <operator new(unsigned int)>
     ca6:	mov	r3, r4
     ca8:	mov	r2, r5
     caa:	mov	r7, r0
     cac:	movs	r1, #14
     cae:	bl	a8c <Knob::Knob(unsigned char, int, Controller*)>
     cb2:	str	r7, [r4, #24]
  _knobs[1] = new Knob(A1, 1, this);
     cb4:	movs	r0, #20
     cb6:	bl	2b0c <operator new(unsigned int)>
     cba:	mov	r3, r4
     cbc:	mov	r2, r6
     cbe:	mov	r5, r0
     cc0:	movs	r1, #15
     cc2:	bl	a8c <Knob::Knob(unsigned char, int, Controller*)>
     cc6:	str	r5, [r4, #28]
  _knobs[2] = new Knob(A2, 2, this);
     cc8:	movs	r0, #20
     cca:	bl	2b0c <operator new(unsigned int)>
     cce:	mov	r3, r4
     cd0:	mov	r5, r0
     cd2:	movs	r2, #2
     cd4:	movs	r1, #16
     cd6:	bl	a8c <Knob::Knob(unsigned char, int, Controller*)>
     cda:	str	r5, [r4, #32]
  _knobs[3] = new Knob(A3, 3, this);
     cdc:	movs	r0, #20
     cde:	bl	2b0c <operator new(unsigned int)>
     ce2:	mov	r3, r4
     ce4:	mov	r5, r0
     ce6:	movs	r2, #3
     ce8:	movs	r1, #17
     cea:	bl	a8c <Knob::Knob(unsigned char, int, Controller*)>
     cee:	str	r5, [r4, #36]	; 0x24
  _knobs[4] = new Knob(A4, 4, this);
     cf0:	movs	r0, #20
     cf2:	bl	2b0c <operator new(unsigned int)>
     cf6:	mov	r3, r4
     cf8:	mov	r5, r0
     cfa:	movs	r2, #4
     cfc:	movs	r1, #18
     cfe:	bl	a8c <Knob::Knob(unsigned char, int, Controller*)>
     d02:	str	r5, [r4, #40]	; 0x28
  _knobs[5] = new Knob(A5, 5, this);
     d04:	movs	r0, #20
     d06:	bl	2b0c <operator new(unsigned int)>
     d0a:	mov	r3, r4
     d0c:	movs	r2, #5
     d0e:	movs	r1, #19
     d10:	mov	r5, r0
     d12:	bl	a8c <Knob::Knob(unsigned char, int, Controller*)>
};
     d16:	mov	r0, r4
  _knobs[0] = new Knob(A0, 0, this);
  _knobs[1] = new Knob(A1, 1, this);
  _knobs[2] = new Knob(A2, 2, this);
  _knobs[3] = new Knob(A3, 3, this);
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
     d18:	str	r5, [r4, #44]	; 0x2c
};
     d1a:	add	sp, #20
     d1c:	pop	{r4, r5, r6, r7, pc}
     d1e:	nop

00000d20 <Controller::tick()>:

void Controller::tick() {
     d20:	push	{r3, r4, r5, r6, r7, lr}
     d22:	add.w	r7, r0, #20
     d26:	mov	r6, r7
     d28:	subs	r4, r0, #4
     d2a:	add.w	r5, r0, #48	; 0x30
  for (size_t i = 0; i < 6; i++) {
    _buttons[i]->tick();
     d2e:	ldr.w	r0, [r4, #4]!
     d32:	bl	604 <Button::tick()>
    _leds[i]->tick();
     d36:	ldr.w	r0, [r5, #4]!
     d3a:	bl	834 <Led::tick()>
    _knobs[i]->tick();
     d3e:	ldr.w	r0, [r6, #4]!
     d42:	bl	b4c <Knob::tick()>
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
};

void Controller::tick() {
  for (size_t i = 0; i < 6; i++) {
     d46:	cmp	r4, r7
     d48:	bne.n	d2e <Controller::tick()+0xe>
    _buttons[i]->tick();
    _leds[i]->tick();
    _knobs[i]->tick();
  }
}
     d4a:	pop	{r3, r4, r5, r6, r7, pc}

00000d4c <Controller::toggleMode()>:

void Controller::toggleMode () {
     d4c:	push	{r3, r4, r5, lr}
  if (_currentMode == PITCH) {
     d4e:	ldrb.w	r3, [r0, #49]	; 0x31
    _leds[i]->tick();
    _knobs[i]->tick();
  }
}

void Controller::toggleMode () {
     d52:	mov	r4, r0
  if (_currentMode == PITCH) {
     d54:	cbz	r3, d60 <Controller::toggleMode()+0x14>
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
     d56:	cmp	r3, #1
     d58:	beq.n	da8 <Controller::toggleMode()+0x5c>
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
     d5a:	cmp	r3, #2
     d5c:	beq.n	d82 <Controller::toggleMode()+0x36>
     d5e:	pop	{r3, r4, r5, pc}
  }
}

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
     d60:	movs	r3, #1
     d62:	strb.w	r3, [r0, #49]	; 0x31
     d66:	movs	r1, #8
     d68:	ldr	r0, [pc, #100]	; (dd0 <Controller::toggleMode()+0x84>)
     d6a:	bl	ecc <usb_serial_write>
     d6e:	ldr	r0, [pc, #100]	; (dd4 <Controller::toggleMode()+0x88>)
     d70:	bl	2a40 <Print::println()>
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
     d74:	ldr	r0, [r4, #68]	; 0x44
     d76:	movw	r1, #999	; 0x3e7
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};
     d7a:	ldmia.w	sp!, {r3, r4, r5, lr}

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
     d7e:	b.w	7b8 <Led::blink(int)>
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
     d82:	movs	r5, #0
     d84:	strb.w	r5, [r0, #49]	; 0x31
     d88:	movs	r1, #5
     d8a:	ldr	r0, [pc, #76]	; (dd8 <Controller::toggleMode()+0x8c>)
     d8c:	bl	ecc <usb_serial_write>
     d90:	ldr	r0, [pc, #64]	; (dd4 <Controller::toggleMode()+0x88>)
     d92:	bl	2a40 <Print::println()>
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
     d96:	ldr	r0, [r4, #68]	; 0x44
     d98:	mov	r1, r5
     d9a:	bl	7b8 <Led::blink(int)>
    _leds[4]->on();
     d9e:	ldr	r0, [r4, #68]	; 0x44
  }
};
     da0:	ldmia.w	sp!, {r3, r4, r5, lr}
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
     da4:	b.w	824 <Led::on()>
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
     da8:	movs	r3, #2
     daa:	strb.w	r3, [r0, #49]	; 0x31
     dae:	movs	r1, #10
     db0:	ldr	r0, [pc, #40]	; (ddc <Controller::toggleMode()+0x90>)
     db2:	bl	ecc <usb_serial_write>
     db6:	ldr	r0, [pc, #28]	; (dd4 <Controller::toggleMode()+0x88>)
     db8:	bl	2a40 <Print::println()>
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
     dbc:	ldr	r0, [r4, #68]	; 0x44
     dbe:	movs	r1, #0
     dc0:	bl	7b8 <Led::blink(int)>
    _leds[4]->off();
     dc4:	ldr	r0, [r4, #68]	; 0x44
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};
     dc6:	ldmia.w	sp!, {r3, r4, r5, lr}
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
     dca:	b.w	818 <Led::off()>
     dce:	nop
     dd0:	.word	0x00003f08
     dd4:	.word	0x1fff0c48
     dd8:	.word	0x00003f20
     ddc:	.word	0x00003f14

00000de0 <Controller::enterShiftMode()>:
    _leds[4]->on();
  }
};

void Controller::enterShiftMode () {
  _shiftMode = true;
     de0:	movs	r3, #1
     de2:	strb.w	r3, [r0, #48]	; 0x30
     de6:	bx	lr

00000de8 <Controller::exitShiftMode()>:
};

void Controller::exitShiftMode () {
  _shiftMode = false;
     de8:	movs	r3, #0
     dea:	strb.w	r3, [r0, #48]	; 0x30
     dee:	bx	lr

00000df0 <Controller::getShiftMode()>:
};

bool Controller::getShiftMode () {
  return _shiftMode;
};
     df0:	ldrb.w	r0, [r0, #48]	; 0x30
     df4:	bx	lr
     df6:	nop

00000df8 <Controller::getMode()>:

Modes Controller::getMode() {
  return _currentMode;
};
     df8:	ldrb.w	r0, [r0, #49]	; 0x31
     dfc:	bx	lr
     dfe:	nop

00000e00 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
     e00:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
     e02:	ldr	r5, [pc, #60]	; (e40 <usb_serial_getchar+0x40>)
     e04:	ldr	r0, [r5, #0]
     e06:	cbz	r0, e28 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
     e08:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
     e0a:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
     e0c:	adds	r1, r0, r3
     e0e:	adds	r3, #1
	if (i >= rx_packet->len) {
     e10:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
     e12:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
     e14:	bcs.n	e1c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
     e16:	strh	r3, [r0, #2]
	}
	return c;
     e18:	mov	r0, r4
}
     e1a:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
     e1c:	bl	1cac <usb_free>
		rx_packet = NULL;
     e20:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
     e22:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
     e24:	str	r3, [r5, #0]
     e26:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
     e28:	ldr	r3, [pc, #24]	; (e44 <usb_serial_getchar+0x44>)
     e2a:	ldrb	r3, [r3, #0]
     e2c:	cbz	r3, e3a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
     e2e:	movs	r0, #2
     e30:	bl	1cf8 <usb_rx>
     e34:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
     e36:	cmp	r0, #0
     e38:	bne.n	e08 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
     e3a:	mov.w	r0, #4294967295
     e3e:	pop	{r3, r4, r5, pc}
     e40:	.word	0x1fff15c0
     e44:	.word	0x1fff1720

00000e48 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
     e48:	push	{r4, lr}
	if (!rx_packet) {
     e4a:	ldr	r4, [pc, #36]	; (e70 <usb_serial_peekchar+0x28>)
     e4c:	ldr	r0, [r4, #0]
     e4e:	cbz	r0, e58 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
     e50:	ldrh	r3, [r0, #2]
     e52:	add	r0, r3
     e54:	ldrb	r0, [r0, #8]
}
     e56:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
     e58:	ldr	r3, [pc, #24]	; (e74 <usb_serial_peekchar+0x2c>)
     e5a:	ldrb	r3, [r3, #0]
     e5c:	cbz	r3, e6a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
     e5e:	movs	r0, #2
     e60:	bl	1cf8 <usb_rx>
     e64:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
     e66:	cmp	r0, #0
     e68:	bne.n	e50 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
     e6a:	mov.w	r0, #4294967295
     e6e:	pop	{r4, pc}
     e70:	.word	0x1fff15c0
     e74:	.word	0x1fff1720

00000e78 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
     e78:	ldr	r3, [pc, #16]	; (e8c <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
     e7a:	ldr	r2, [pc, #20]	; (e90 <usb_serial_available+0x18>)
     e7c:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
     e7e:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
     e80:	cbz	r3, e8a <usb_serial_available+0x12>
     e82:	ldrh	r2, [r3, #0]
     e84:	ldrh	r3, [r3, #2]
     e86:	subs	r3, r2, r3
     e88:	add	r0, r3
	return count;
}
     e8a:	bx	lr
     e8c:	.word	0x1fff15c0
     e90:	.word	0x1fff1bb4

00000e94 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
     e94:	ldr	r3, [pc, #44]	; (ec4 <usb_serial_flush_input+0x30>)
     e96:	ldrb	r3, [r3, #0]
     e98:	cbz	r3, ec2 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
     e9a:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
     e9c:	ldr	r4, [pc, #40]	; (ec8 <usb_serial_flush_input+0x34>)
     e9e:	ldr	r0, [r4, #0]
     ea0:	cbz	r0, eb6 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
     ea2:	bl	1cac <usb_free>
		rx_packet = NULL;
     ea6:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     ea8:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
     eaa:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     eac:	bl	1cf8 <usb_rx>
		if (!rx) break;
     eb0:	cbz	r0, ec0 <usb_serial_flush_input+0x2c>
		usb_free(rx);
     eb2:	bl	1cac <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     eb6:	movs	r0, #2
     eb8:	bl	1cf8 <usb_rx>
		if (!rx) break;
     ebc:	cmp	r0, #0
     ebe:	bne.n	eb2 <usb_serial_flush_input+0x1e>
     ec0:	pop	{r4, pc}
     ec2:	bx	lr
     ec4:	.word	0x1fff1720
     ec8:	.word	0x1fff15c0

00000ecc <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
     ecc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
     ed0:	ldr.w	r9, [pc, #248]	; fcc <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
     ed4:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
     ed6:	movs	r2, #1
     ed8:	strb.w	r2, [r9]
	while (size > 0) {
     edc:	str	r1, [sp, #4]
     ede:	cbz	r1, f3c <usb_serial_write+0x70>
     ee0:	ldr.w	r8, [pc, #236]	; fd0 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
     ee4:	ldr	r7, [pc, #212]	; (fbc <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
     ee6:	ldr	r6, [sp, #4]
     ee8:	mov	fp, r0
		if (!tx_packet) {
     eea:	ldr.w	r0, [r8]
     eee:	cbz	r0, f5e <usb_serial_write+0x92>
     ef0:	ldr	r5, [pc, #204]	; (fc0 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
     ef2:	ldrh	r4, [r0, #2]
     ef4:	rsb	r1, r4, #64	; 0x40
     ef8:	cmp	r1, r6
     efa:	it	cs
     efc:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
     efe:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
     f02:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
     f04:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
     f08:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
     f0a:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
     f0c:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
     f10:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
     f14:	cbz	r1, f2c <usb_serial_write+0x60>
     f16:	subs	r4, #1
     f18:	add	r2, r4
     f1a:	add	r1, fp
     f1c:	ldrb.w	r4, [fp], #1
     f20:	strb.w	r4, [r2, #1]!
     f24:	cmp	fp, r1
     f26:	bne.n	f1c <usb_serial_write+0x50>
     f28:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
     f2c:	cmp.w	lr, #63	; 0x3f
     f30:	bhi.n	f4a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     f32:	ldr	r2, [pc, #144]	; (fc4 <usb_serial_write+0xf8>)
     f34:	movs	r1, #5
     f36:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
     f38:	cmp	r6, #0
     f3a:	bne.n	eea <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
     f3c:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
     f3e:	movs	r3, #0
     f40:	strb.w	r3, [r9]
	return ret;
}
     f44:	add	sp, #12
     f46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
     f4a:	movs	r2, #64	; 0x40
     f4c:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
     f4e:	mov	r1, r0
     f50:	movs	r0, #3
     f52:	bl	1e48 <usb_tx>
			tx_packet = NULL;
     f56:	movs	r2, #0
     f58:	str.w	r2, [r8]
     f5c:	b.n	f32 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
     f5e:	ldrb	r2, [r7, #0]
     f60:	cbz	r2, fac <usb_serial_write+0xe0>
     f62:	ldr	r4, [pc, #100]	; (fc8 <usb_serial_write+0xfc>)
     f64:	ldr	r5, [pc, #88]	; (fc0 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
     f66:	mov.w	sl, #1
     f6a:	b.n	f7c <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
     f6c:	subs	r4, #1
     f6e:	beq.n	f9e <usb_serial_write+0xd2>
     f70:	ldrb	r2, [r5, #0]
     f72:	cbnz	r2, f9e <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
     f74:	bl	294c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
     f78:	ldrb	r2, [r7, #0]
     f7a:	cbz	r2, fac <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
     f7c:	movs	r0, #3
     f7e:	bl	1d34 <usb_tx_packet_count>
     f82:	cmp	r0, #7
     f84:	bhi.n	f6c <usb_serial_write+0xa0>
					tx_noautoflush = 1;
     f86:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
     f8a:	bl	1c6c <usb_malloc>
     f8e:	str.w	r0, [r8]
					if (tx_packet) break;
     f92:	cmp	r0, #0
     f94:	bne.n	ef2 <usb_serial_write+0x26>
					tx_noautoflush = 0;
     f96:	ldr	r3, [pc, #52]	; (fcc <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
     f98:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
     f9a:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
     f9c:	bne.n	f70 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
     f9e:	movs	r3, #1
					return -1;
     fa0:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
     fa4:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
     fa6:	add	sp, #12
     fa8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
     fac:	movs	r3, #0
					return -1;
     fae:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
     fb2:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
     fb6:	add	sp, #12
     fb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fbc:	.word	0x1fff1720
     fc0:	.word	0x1fff15bc
     fc4:	.word	0x1fff15b4
     fc8:	.word	0x00014821
     fcc:	.word	0x1fff15b5
     fd0:	.word	0x1fff15b8

00000fd4 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     fd4:	push	{lr}
     fd6:	sub	sp, #12
     fd8:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
     fda:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
     fdc:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
     fe0:	mov	r0, r3
     fe2:	bl	ecc <usb_serial_write>
}
     fe6:	add	sp, #12
     fe8:	ldr.w	pc, [sp], #4

00000fec <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
     fec:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
     fee:	ldr	r5, [pc, #56]	; (1028 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
     ff0:	ldr	r4, [pc, #56]	; (102c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
     ff2:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
     ff4:	movs	r3, #1
     ff6:	strb	r3, [r4, #0]
	if (!tx_packet) {
     ff8:	cbz	r0, 1006 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
     ffa:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
     ffc:	movs	r3, #0
     ffe:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1000:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1004:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1006:	ldr	r3, [pc, #40]	; (1030 <usb_serial_write_buffer_free+0x44>)
    1008:	ldrb	r3, [r3, #0]
    100a:	cbnz	r3, 1012 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    100c:	movs	r0, #0
    100e:	strb	r0, [r4, #0]
			return 0;
    1010:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1012:	movs	r0, #3
    1014:	bl	1d34 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1018:	cmp	r0, #7
    101a:	bhi.n	100c <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    101c:	bl	1c6c <usb_malloc>
    1020:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1022:	cmp	r0, #0
    1024:	bne.n	ffa <usb_serial_write_buffer_free+0xe>
    1026:	b.n	100c <usb_serial_write_buffer_free+0x20>
    1028:	.word	0x1fff15b8
    102c:	.word	0x1fff15b5
    1030:	.word	0x1fff1720

00001034 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1034:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1036:	ldr	r3, [pc, #68]	; (107c <usb_serial_flush_output+0x48>)
    1038:	ldrb	r3, [r3, #0]
    103a:	cbz	r3, 1060 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    103c:	ldr	r6, [pc, #64]	; (1080 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    103e:	ldr	r5, [pc, #68]	; (1084 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    1040:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1042:	movs	r7, #1
    1044:	strb	r7, [r5, #0]
	if (tx_packet) {
    1046:	cbz	r4, 1062 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1048:	ldr	r2, [pc, #60]	; (1088 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    104a:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    104c:	movs	r7, #0
    104e:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1050:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    1052:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1054:	movs	r0, #3
    1056:	bl	1e48 <usb_tx>
		tx_packet = NULL;
    105a:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    105c:	movs	r3, #0
    105e:	strb	r3, [r5, #0]
    1060:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1062:	bl	1c6c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1066:	ldr	r3, [pc, #32]	; (1088 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1068:	cbz	r0, 1076 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    106a:	mov	r1, r0
    106c:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    106e:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    1070:	bl	1e48 <usb_tx>
    1074:	b.n	105c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1076:	strb	r7, [r3, #0]
    1078:	b.n	105c <usb_serial_flush_output+0x28>
    107a:	nop
    107c:	.word	0x1fff1720
    1080:	.word	0x1fff15b8
    1084:	.word	0x1fff15b5
    1088:	.word	0x1fff15b4

0000108c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    108c:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    108e:	ldr	r3, [pc, #56]	; (10c8 <usb_serial_flush_callback+0x3c>)
    1090:	ldrb	r3, [r3, #0]
    1092:	cbnz	r3, 10b2 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    1094:	ldr	r4, [pc, #52]	; (10cc <usb_serial_flush_callback+0x40>)
    1096:	ldr	r1, [r4, #0]
    1098:	cbz	r1, 10b4 <usb_serial_flush_callback+0x28>
    109a:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    109e:	ldrh	r3, [r1, #2]
    10a0:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    10a2:	movs	r0, #3
    10a4:	bl	1e48 <usb_tx>
		tx_packet = NULL;
    10a8:	str	r5, [r4, #0]
    10aa:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    10ac:	ldr	r3, [pc, #32]	; (10d0 <usb_serial_flush_callback+0x44>)
    10ae:	movs	r2, #1
    10b0:	strb	r2, [r3, #0]
    10b2:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    10b4:	bl	1c6c <usb_malloc>
		if (tx) {
    10b8:	cmp	r0, #0
    10ba:	beq.n	10ac <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    10bc:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    10be:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    10c2:	movs	r0, #3
    10c4:	b.w	1e48 <usb_tx>
    10c8:	.word	0x1fff15b5
    10cc:	.word	0x1fff15b8
    10d0:	.word	0x1fff15b4

000010d4 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    10d4:	ldr	r2, [pc, #220]	; (11b4 <wait_for_cal+0xe0>)
    10d6:	ldr	r1, [pc, #224]	; (11b8 <wait_for_cal+0xe4>)
    10d8:	ldr	r3, [r2, #0]
    10da:	lsls	r3, r3, #24
    10dc:	bmi.n	10d8 <wait_for_cal+0x4>
    10de:	ldr	r3, [r1, #0]
    10e0:	ands.w	r3, r3, #128	; 0x80
    10e4:	bne.n	10d8 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    10e6:	cpsid	i
	if (calibrating) {
    10e8:	ldr	r1, [pc, #208]	; (11bc <wait_for_cal+0xe8>)
    10ea:	ldrb	r2, [r1, #0]
    10ec:	cmp	r2, #0
    10ee:	beq.n	11b0 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    10f0:	ldr	r2, [pc, #204]	; (11c0 <wait_for_cal+0xec>)
    10f2:	ldr	r0, [pc, #208]	; (11c4 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    10f4:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    10f6:	ldr	r4, [pc, #208]	; (11c8 <wait_for_cal+0xf4>)
    10f8:	ldr	r7, [r2, #0]
    10fa:	ldr	r6, [r0, #0]
    10fc:	ldr	r5, [r4, #0]
    10fe:	ldr	r4, [r2, #12]
    1100:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1102:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1104:	adds	r2, #20
    1106:	ldr	r0, [r0, #0]
    1108:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    110a:	ldr	r7, [pc, #192]	; (11cc <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    110c:	add	r5, r6
    110e:	add	r4, r5
    1110:	add	r0, r4
    1112:	add	r2, r0
    1114:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1118:	ldr	r6, [pc, #180]	; (11d0 <wait_for_cal+0xfc>)
    111a:	ldr	r0, [pc, #184]	; (11d4 <wait_for_cal+0x100>)
    111c:	ldr	r5, [pc, #184]	; (11d8 <wait_for_cal+0x104>)
    111e:	ldr	r4, [pc, #188]	; (11dc <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1120:	orr.w	r2, r2, #32768	; 0x8000
    1124:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1126:	ldr	r7, [r6, #0]
    1128:	ldr	r6, [r0, #0]
    112a:	ldr	r5, [r5, #0]
    112c:	ldr	r2, [pc, #176]	; (11e0 <wait_for_cal+0x10c>)
    112e:	ldr	r4, [r4, #0]
    1130:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1132:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1134:	ldr	r0, [r0, #0]
    1136:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1138:	ldr	r7, [pc, #168]	; (11e4 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    113a:	add	r5, r6
    113c:	add	r4, r5
    113e:	add	r0, r4
    1140:	add	r2, r0
    1142:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1146:	ldr	r6, [pc, #160]	; (11e8 <wait_for_cal+0x114>)
    1148:	ldr	r0, [pc, #160]	; (11ec <wait_for_cal+0x118>)
    114a:	ldr	r5, [pc, #164]	; (11f0 <wait_for_cal+0x11c>)
    114c:	ldr	r4, [pc, #164]	; (11f4 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    114e:	orr.w	r2, r2, #32768	; 0x8000
    1152:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1154:	ldr	r7, [r6, #0]
    1156:	ldr	r6, [r0, #0]
    1158:	ldr	r5, [r5, #0]
    115a:	ldr	r2, [pc, #156]	; (11f8 <wait_for_cal+0x124>)
    115c:	ldr	r4, [r4, #0]
    115e:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1160:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1162:	ldr	r0, [r0, #0]
    1164:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1166:	ldr	r7, [pc, #148]	; (11fc <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1168:	add	r5, r6
    116a:	add	r4, r5
    116c:	add	r0, r4
    116e:	add	r2, r0
    1170:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1174:	ldr	r6, [pc, #136]	; (1200 <wait_for_cal+0x12c>)
    1176:	ldr	r0, [pc, #140]	; (1204 <wait_for_cal+0x130>)
    1178:	ldr	r5, [pc, #140]	; (1208 <wait_for_cal+0x134>)
    117a:	ldr	r4, [pc, #144]	; (120c <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    117c:	orr.w	r2, r2, #32768	; 0x8000
    1180:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1182:	ldr	r7, [r6, #0]
    1184:	ldr	r6, [r0, #0]
    1186:	ldr	r5, [r5, #0]
    1188:	ldr	r2, [pc, #132]	; (1210 <wait_for_cal+0x13c>)
    118a:	ldr	r4, [r4, #0]
    118c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    118e:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1190:	ldr	r0, [r0, #0]
    1192:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    1194:	add	r5, r6
    1196:	add	r4, r5
    1198:	add	r0, r4
    119a:	add	r2, r0
    119c:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    11a0:	ldr	r0, [pc, #112]	; (1214 <wait_for_cal+0x140>)
    11a2:	orr.w	r2, r2, #32768	; 0x8000
    11a6:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    11a8:	strb	r3, [r1, #0]
	}
	__enable_irq();
    11aa:	cpsie	i
}
    11ac:	pop	{r4, r5, r6, r7}
    11ae:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    11b0:	cpsie	i
    11b2:	bx	lr
    11b4:	.word	0x4003b024
    11b8:	.word	0x400bb024
    11bc:	.word	0x1fff15c6
    11c0:	.word	0x4003b038
    11c4:	.word	0x4003b03c
    11c8:	.word	0x4003b040
    11cc:	.word	0x4003b02c
    11d0:	.word	0x4003b058
    11d4:	.word	0x4003b05c
    11d8:	.word	0x4003b060
    11dc:	.word	0x4003b064
    11e0:	.word	0x4003b06c
    11e4:	.word	0x4003b030
    11e8:	.word	0x400bb038
    11ec:	.word	0x400bb03c
    11f0:	.word	0x400bb040
    11f4:	.word	0x400bb044
    11f8:	.word	0x400bb04c
    11fc:	.word	0x400bb02c
    1200:	.word	0x400bb058
    1204:	.word	0x400bb05c
    1208:	.word	0x400bb060
    120c:	.word	0x400bb064
    1210:	.word	0x400bb06c
    1214:	.word	0x400bb030

00001218 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1218:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    121a:	ldr	r0, [pc, #164]	; (12c0 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    121c:	ldr	r2, [pc, #164]	; (12c4 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    121e:	ldr	r3, [pc, #168]	; (12c8 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1220:	ldr	r5, [pc, #168]	; (12cc <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1222:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1224:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1226:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1228:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    122a:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    122c:	ldr	r4, [pc, #160]	; (12d0 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    122e:	cmp	r3, #8
    1230:	beq.n	1294 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1232:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1234:	ldr	r0, [pc, #156]	; (12d4 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1236:	ldr	r1, [pc, #160]	; (12d8 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1238:	beq.n	12aa <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    123a:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    123c:	ite	eq
    123e:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1240:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1242:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1244:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1246:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1248:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    124a:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    124c:	ldr	r3, [pc, #140]	; (12dc <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    124e:	ldr	r1, [pc, #144]	; (12e0 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1250:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1252:	ldr	r2, [pc, #144]	; (12e4 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1254:	cbz	r3, 1286 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1256:	movs	r3, #1
    1258:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    125a:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    125c:	ldr	r3, [pc, #136]	; (12e8 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    125e:	ldr	r1, [pc, #140]	; (12ec <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1260:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1262:	ldr	r2, [pc, #140]	; (12f0 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    1264:	cmp	r3, #1
    1266:	bls.n	12b6 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    1268:	cmp	r3, #4
    126a:	bls.n	128c <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    126c:	cmp	r3, #8
    126e:	bls.n	12ae <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    1270:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    1272:	ite	ls
    1274:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1276:	movhi	r3, #135	; 0x87
    1278:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    127a:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    127c:	ldr	r3, [pc, #116]	; (12f4 <analog_init+0xdc>)
    127e:	movs	r2, #1
    1280:	strb	r2, [r3, #0]
}
    1282:	pop	{r4, r5}
    1284:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1286:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1288:	str	r3, [r2, #0]
    128a:	b.n	125c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    128c:	movs	r3, #132	; 0x84
    128e:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1290:	str	r3, [r2, #0]
    1292:	b.n	127c <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1294:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1298:	ldr	r1, [pc, #60]	; (12d8 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    129a:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    129c:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    129e:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    12a0:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    12a2:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    12a4:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    12a6:	str	r3, [r1, #0]
    12a8:	b.n	124c <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    12aa:	movs	r2, #57	; 0x39
    12ac:	b.n	129e <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    12ae:	movs	r3, #133	; 0x85
    12b0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    12b2:	str	r3, [r2, #0]
    12b4:	b.n	127c <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    12b6:	movs	r3, #128	; 0x80
    12b8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    12ba:	str	r3, [r2, #0]
    12bc:	b.n	127c <analog_init+0x64>
    12be:	nop
    12c0:	.word	0x40074000
    12c4:	.word	0x40074001
    12c8:	.word	0x1fff0c40
    12cc:	.word	0x4003b008
    12d0:	.word	0x4003b00c
    12d4:	.word	0x400bb008
    12d8:	.word	0x400bb00c
    12dc:	.word	0x1fff15c9
    12e0:	.word	0x4003b020
    12e4:	.word	0x400bb020
    12e8:	.word	0x1fff0c41
    12ec:	.word	0x4003b024
    12f0:	.word	0x400bb024
    12f4:	.word	0x1fff15c6

000012f8 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    12f8:	cmp	r0, #71	; 0x47
    12fa:	bhi.n	135c <analogRead+0x64>
	channel = pin2sc1a[pin];
    12fc:	ldr	r3, [pc, #204]	; (13cc <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    12fe:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    1302:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    1304:	cmp	r6, #255	; 0xff
    1306:	beq.n	1360 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1308:	ldr	r3, [pc, #196]	; (13d0 <analogRead+0xd8>)
    130a:	ldrb	r3, [r3, #0]
    130c:	cmp	r3, #0
    130e:	bne.n	1366 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1310:	lsls	r2, r6, #24
    1312:	bmi.n	136e <analogRead+0x76>
#endif

	__disable_irq();
    1314:	cpsid	i
    1316:	ldr	r5, [pc, #188]	; (13d4 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1318:	ldr	r4, [pc, #188]	; (13d8 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    131a:	mov	r7, r5
    131c:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    131e:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    1320:	strb	r3, [r5, #0]
	__enable_irq();
    1322:	cpsie	i
	while (1) {
		__disable_irq();
    1324:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1326:	ldr	r3, [r4, #0]
    1328:	lsls	r3, r3, #24
    132a:	bmi.n	1346 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    132c:	ldrb	r3, [r7, #0]
    132e:	cbnz	r3, 1338 <analogRead+0x40>
    1330:	b.n	131c <analogRead+0x24>
    1332:	ldrb	r3, [r5, #0]
    1334:	cmp	r3, #0
    1336:	beq.n	131c <analogRead+0x24>
		__enable_irq();
    1338:	cpsie	i
		yield();
    133a:	bl	294c <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    133e:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1340:	ldr	r3, [r4, #0]
    1342:	lsls	r0, r3, #24
    1344:	bpl.n	1332 <analogRead+0x3a>
			result = ADC0_RA;
    1346:	ldr	r3, [pc, #148]	; (13dc <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    1348:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    134a:	movs	r2, #0
    134c:	strb	r2, [r5, #0]
			__enable_irq();
    134e:	cpsie	i
			result >>= analog_right_shift;
    1350:	ldr	r2, [pc, #140]	; (13e0 <analogRead+0xe8>)
    1352:	ldrb	r0, [r2, #0]
    1354:	asr.w	r0, r3, r0
			return result;
    1358:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    135c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    135e:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1360:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    1362:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    1366:	bl	10d4 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    136a:	lsls	r2, r6, #24
    136c:	bpl.n	1314 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    136e:	cpsid	i
    1370:	ldr	r5, [pc, #112]	; (13e4 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    1372:	ldr.w	r8, [pc, #124]	; 13f0 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    1376:	ldr	r4, [pc, #112]	; (13e8 <analogRead+0xf0>)
    1378:	and.w	r7, r6, #64	; 0x40
    137c:	uxtb	r7, r7
    137e:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1382:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    1386:	cbz	r7, 13c0 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1388:	bic.w	r3, r3, #16
    138c:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    1390:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    1392:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    1394:	ldr	r2, [pc, #76]	; (13e4 <analogRead+0xec>)
    1396:	strb	r3, [r5, #0]
	__enable_irq();
    1398:	cpsie	i
	while (1) {
		__disable_irq();
    139a:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    139c:	ldr	r3, [r4, #0]
    139e:	lsls	r1, r3, #24
    13a0:	bmi.n	13bc <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    13a2:	ldrb	r3, [r2, #0]
    13a4:	cbnz	r3, 13ae <analogRead+0xb6>
    13a6:	b.n	1382 <analogRead+0x8a>
    13a8:	ldrb	r3, [r5, #0]
    13aa:	cmp	r3, #0
    13ac:	beq.n	1382 <analogRead+0x8a>
		__enable_irq();
    13ae:	cpsie	i
		yield();
    13b0:	bl	294c <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    13b4:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    13b6:	ldr	r3, [r4, #0]
    13b8:	lsls	r3, r3, #24
    13ba:	bpl.n	13a8 <analogRead+0xb0>
			result = ADC1_RA;
    13bc:	ldr	r3, [pc, #44]	; (13ec <analogRead+0xf4>)
    13be:	b.n	1348 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    13c0:	orr.w	r3, r3, #16
    13c4:	str.w	r3, [r8]
    13c8:	b.n	1390 <analogRead+0x98>
    13ca:	nop
    13cc:	.word	0x00003f28
    13d0:	.word	0x1fff15c6
    13d4:	.word	0x1fff15c8
    13d8:	.word	0x4003b000
    13dc:	.word	0x4003b010
    13e0:	.word	0x1fff15c5
    13e4:	.word	0x1fff15c7
    13e8:	.word	0x400bb000
    13ec:	.word	0x400bb010
    13f0:	.word	0x400bb00c

000013f4 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    13f4:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    13f6:	ldr	r3, [pc, #68]	; (143c <digitalWrite.part.1+0x48>)
    13f8:	ldr.w	r2, [r3, r0, lsl #3]
    13fc:	ldrb.w	r4, [r2, #640]	; 0x280
    1400:	cbz	r4, 1410 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    1402:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    1404:	cbz	r1, 1426 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    1406:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    140a:	ldr.w	r4, [sp], #4
    140e:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    1410:	add.w	r3, r3, r0, lsl #3
    1414:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1416:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    1418:	cbnz	r1, 1430 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    141a:	bic.w	r2, r2, #2
    141e:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1420:	ldr.w	r4, [sp], #4
    1424:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    1426:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    142a:	ldr.w	r4, [sp], #4
    142e:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1430:	orr.w	r2, r2, #3
    1434:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1436:	ldr.w	r4, [sp], #4
    143a:	bx	lr
    143c:	.word	0x00003f70

00001440 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1440:	ldr	r2, [pc, #112]	; (14b4 <pinMode.part.2+0x74>)
    1442:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1446:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1448:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    144a:	beq.n	1470 <pinMode.part.2+0x30>
    144c:	cmp	r1, #4
    144e:	beq.n	1488 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    1450:	ldr.w	r0, [r2, r0, lsl #3]
    1454:	movs	r2, #0
    1456:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    145a:	cbz	r1, 1468 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    145c:	cmp	r1, #2
    145e:	beq.n	14a2 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    1460:	cmp	r1, #3
    1462:	beq.n	14aa <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1464:	str	r2, [r3, #0]
    1466:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    1468:	mov.w	r2, #256	; 0x100
    146c:	str	r2, [r3, #0]
    146e:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1470:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1474:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1478:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    147c:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    147e:	ldr	r2, [r3, #0]
    1480:	bic.w	r2, r2, #32
    1484:	str	r2, [r3, #0]
    1486:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1488:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    148c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1490:	movs	r0, #1
    1492:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1496:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    1498:	ldr	r2, [r3, #0]
    149a:	orr.w	r2, r2, #32
    149e:	str	r2, [r3, #0]
    14a0:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    14a2:	movw	r2, #259	; 0x103
    14a6:	str	r2, [r3, #0]
    14a8:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    14aa:	mov.w	r2, #258	; 0x102
    14ae:	str	r2, [r3, #0]
    14b0:	bx	lr
    14b2:	nop
    14b4:	.word	0x00003f70

000014b8 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    14b8:	push	{r4, r5}
	RTC_SR = 0;
    14ba:	ldr	r3, [pc, #20]	; (14d0 <rtc_set+0x18>)
	RTC_TPR = 0;
    14bc:	ldr	r5, [pc, #20]	; (14d4 <rtc_set+0x1c>)
	RTC_TSR = t;
    14be:	ldr	r4, [pc, #24]	; (14d8 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    14c0:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    14c2:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    14c4:	str	r2, [r3, #0]
	RTC_TPR = 0;
    14c6:	str	r2, [r5, #0]
	RTC_TSR = t;
    14c8:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    14ca:	str	r1, [r3, #0]
}
    14cc:	pop	{r4, r5}
    14ce:	bx	lr
    14d0:	.word	0x4003d014
    14d4:	.word	0x4003d004
    14d8:	.word	0x4003d000

000014dc <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    14dc:	cmp	r0, #63	; 0x3f
    14de:	bhi.n	14e4 <digitalWrite+0x8>
    14e0:	b.w	13f4 <digitalWrite.part.1>
    14e4:	bx	lr
    14e6:	nop

000014e8 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    14e8:	cmp	r0, #63	; 0x3f
    14ea:	bhi.n	14fa <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    14ec:	ldr	r3, [pc, #16]	; (1500 <digitalRead+0x18>)
    14ee:	ldr.w	r3, [r3, r0, lsl #3]
    14f2:	ldrb.w	r0, [r3, #512]	; 0x200
    14f6:	uxtb	r0, r0
    14f8:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    14fa:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    14fc:	bx	lr
    14fe:	nop
    1500:	.word	0x00003f70

00001504 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    1504:	cmp	r0, #63	; 0x3f
    1506:	bhi.n	150c <pinMode+0x8>
    1508:	b.w	1440 <pinMode.part.2>
    150c:	bx	lr
    150e:	nop

00001510 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    1510:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1514:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1516:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    1518:	ldr	r7, [pc, #136]	; (15a4 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    151a:	ldr	r3, [pc, #140]	; (15a8 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    151c:	ldr	r2, [pc, #140]	; (15ac <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    151e:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    1520:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1522:	ldr	r2, [r2, #0]
	__enable_irq();
    1524:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1526:	lsls	r2, r2, #5
    1528:	bpl.n	1530 <delay+0x20>
    152a:	cmp	r3, #50	; 0x32
    152c:	it	hi
    152e:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    1530:	cbz	r5, 15a0 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1532:	rsb	r3, r3, #179200	; 0x2bc00
    1536:	addw	r3, r3, #799	; 0x31f
    153a:	ldr	r6, [pc, #116]	; (15b0 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    153c:	ldr.w	r9, [pc, #104]	; 15a8 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1540:	ldr.w	r8, [pc, #104]	; 15ac <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1544:	lsrs	r3, r3, #2
    1546:	mov.w	r2, #1000	; 0x3e8
    154a:	umull	r1, r3, r6, r3
    154e:	mul.w	r4, r2, r4
    1552:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1556:	cpsid	i
	current = SYST_CVR;
    1558:	ldr.w	r1, [r9]
	count = systick_millis_count;
    155c:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    155e:	ldr.w	lr, [r8]
	__enable_irq();
    1562:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1564:	rsb	r3, r1, #179200	; 0x2bc00
    1568:	addw	r3, r3, #799	; 0x31f
    156c:	lsrs	r3, r3, #2
    156e:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1572:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1576:	rsb	r3, r4, r3, lsr #2
    157a:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    157e:	beq.n	1586 <delay+0x76>
    1580:	cmp	r1, #50	; 0x32
    1582:	it	hi
    1584:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1586:	mla	r3, r0, r2, r3
    158a:	cmp.w	r3, #1000	; 0x3e8
    158e:	bcc.n	159a <delay+0x8a>
				ms--;
				if (ms == 0) return;
    1590:	subs	r5, #1
    1592:	beq.n	15a0 <delay+0x90>
				start += 1000;
    1594:	add.w	r4, r4, #1000	; 0x3e8
    1598:	b.n	1556 <delay+0x46>
			}
			yield();
    159a:	bl	294c <yield>
		}
    159e:	b.n	1556 <delay+0x46>
    15a0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    15a4:	.word	0x1fff15cc
    15a8:	.word	0xe000e018
    15ac:	.word	0xe000ed04
    15b0:	.word	0x16c16c17

000015b4 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    15b4:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    15b6:	ldr	r3, [pc, #312]	; (16f0 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    15b8:	ldr	r0, [pc, #312]	; (16f4 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    15ba:	ldr.w	ip, [pc, #348]	; 1718 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    15be:	ldr	r4, [pc, #312]	; (16f8 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    15c0:	ldr	r1, [pc, #312]	; (16fc <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    15c2:	ldr.w	lr, [pc, #344]	; 171c <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    15c6:	ldr	r6, [pc, #312]	; (1700 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    15c8:	ldr	r5, [pc, #312]	; (1704 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    15ca:	ldr	r7, [pc, #316]	; (1708 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    15cc:	mov.w	r2, #134217728	; 0x8000000
    15d0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    15d2:	mov.w	r2, #268435456	; 0x10000000
    15d6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    15d8:	mov.w	r2, #536870912	; 0x20000000
    15dc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    15de:	mov.w	r2, #1073741824	; 0x40000000
    15e2:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    15e4:	mov.w	r2, #2147483648	; 0x80000000
    15e8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    15ea:	movs	r2, #0
    15ec:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    15ee:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    15f0:	movw	r0, #61439	; 0xefff
    15f4:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    15f8:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    15fc:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    15fe:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    1602:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    1604:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    1606:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1608:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    160c:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    160e:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    1612:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1614:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    1618:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    161a:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    161e:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1622:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    1626:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    162a:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    162e:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    1630:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1634:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1636:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    1638:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    163a:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    163e:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    1640:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    1642:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1644:	ldr	r4, [pc, #196]	; (170c <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    1646:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    1648:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    164a:	movs	r1, #9
    164c:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    164e:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    1652:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    1656:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    1658:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    165a:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    165c:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    165e:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    1660:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1662:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    1666:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    166a:	add.w	r7, r7, #520192	; 0x7f000
    166e:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    1670:	addw	r4, r4, #2044	; 0x7fc
    1674:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    1676:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    1678:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    167a:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    167c:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    1680:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    1682:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    1686:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    168a:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    168c:	sub.w	r4, r4, #460800	; 0x70800
    1690:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    1694:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    1696:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1698:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    169c:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    169e:	ldr	r0, [pc, #112]	; (1710 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    16a0:	orr.w	r1, r1, #512	; 0x200
    16a4:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    16a6:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    16a8:	ldr	r4, [pc, #104]	; (1714 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    16aa:	add.w	lr, lr, #65280	; 0xff00
    16ae:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    16b2:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    16b6:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    16ba:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    16be:	orr.w	r1, r1, #33554432	; 0x2000000
    16c2:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    16c4:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    16c8:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    16cc:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    16ce:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    16d0:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    16d2:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    16d4:	str	r2, [r4, #0]
#endif
	analog_init();
    16d6:	bl	1218 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    16da:	movs	r0, #25
    16dc:	bl	1510 <delay>
	usb_init();
    16e0:	bl	287c <usb_init>
	delay(275);
    16e4:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    16e8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    16ec:	b.w	1510 <delay>
    16f0:	.word	0xe000e104
    16f4:	.word	0x40038004
    16f8:	.word	0x40038014
    16fc:	.word	0x4003801c
    1700:	.word	0x40038024
    1704:	.word	0x4003802c
    1708:	.word	0x40038034
    170c:	.word	0x40038000
    1710:	.word	0x40048004
    1714:	.word	0x400c9000
    1718:	.word	0x40038008
    171c:	.word	0x4003800c

00001720 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    1720:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    1722:	ldr	r3, [pc, #56]	; (175c <sysex_byte+0x3c>)
    1724:	ldr	r4, [pc, #56]	; (1760 <sysex_byte+0x40>)
    1726:	ldr	r3, [r3, #0]
    1728:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    172a:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    172c:	cbz	r3, 1752 <sysex_byte+0x32>
    172e:	cmp.w	r1, #290	; 0x122
    1732:	bcs.n	1740 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1734:	ldr	r2, [pc, #44]	; (1764 <sysex_byte+0x44>)
    1736:	adds	r3, r1, #1
    1738:	strb	r5, [r2, r1]
    173a:	uxth	r3, r3
    173c:	strh	r3, [r4, #0]
	}
}
    173e:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    1740:	movs	r2, #0
    1742:	ldr	r0, [pc, #32]	; (1764 <sysex_byte+0x44>)
    1744:	blx	r3
    1746:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1748:	ldr	r2, [pc, #24]	; (1764 <sysex_byte+0x44>)
    174a:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    174c:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    174e:	strh	r3, [r4, #0]
	}
}
    1750:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    1752:	cmp.w	r1, #290	; 0x122
    1756:	bcc.n	1734 <sysex_byte+0x14>
    1758:	pop	{r3, r4, r5, pc}
    175a:	nop
    175c:	.word	0x1fff15f4
    1760:	.word	0x1fff1a8a
    1764:	.word	0x1fff1a90

00001768 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    1768:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    176c:	ldr	r6, [pc, #132]	; (17f4 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    176e:	ldr	r7, [pc, #136]	; (17f8 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    1770:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1772:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    1774:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1776:	strb	r3, [r7, #0]
	if (!tx_packet) {
    1778:	cbz	r1, 17a8 <usb_midi_write_packed+0x40>
    177a:	ldr	r5, [pc, #128]	; (17fc <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    177c:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    177e:	add.w	r2, r1, r3, lsl #2
    1782:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    1784:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    1786:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    1788:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    178c:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    178e:	bhi.n	179a <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    1790:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    1792:	movs	r3, #0
    1794:	strb	r3, [r7, #0]
    1796:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    179a:	movs	r3, #64	; 0x40
    179c:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    179e:	movs	r0, #4
    17a0:	bl	1e48 <usb_tx>
		tx_packet = NULL;
    17a4:	str	r4, [r6, #0]
    17a6:	b.n	1792 <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    17a8:	ldr.w	r9, [pc, #84]	; 1800 <usb_midi_write_packed+0x98>
    17ac:	ldrb.w	r3, [r9]
    17b0:	cmp	r3, #0
    17b2:	beq.n	1796 <usb_midi_write_packed+0x2e>
    17b4:	ldr	r5, [pc, #68]	; (17fc <usb_midi_write_packed+0x94>)
    17b6:	movw	r4, #48001	; 0xbb81
    17ba:	b.n	17ce <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    17bc:	subs	r4, #1
    17be:	beq.n	17e6 <usb_midi_write_packed+0x7e>
    17c0:	ldrb	r3, [r5, #0]
    17c2:	cbnz	r3, 17e6 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    17c4:	bl	294c <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    17c8:	ldrb.w	r3, [r9]
    17cc:	cbz	r3, 17ee <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    17ce:	movs	r0, #4
    17d0:	bl	1d34 <usb_tx_packet_count>
    17d4:	cmp	r0, #5
    17d6:	bhi.n	17bc <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    17d8:	bl	1c6c <usb_malloc>
    17dc:	mov	r1, r0
    17de:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    17e0:	cmp	r0, #0
    17e2:	beq.n	17bc <usb_midi_write_packed+0x54>
    17e4:	b.n	177c <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    17e6:	movs	r3, #1
    17e8:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    17ea:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    17ee:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    17f2:	nop
    17f4:	.word	0x1fff1610
    17f8:	.word	0x1fff15e4
    17fc:	.word	0x1fff1614
    1800:	.word	0x1fff1720

00001804 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    1804:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    1806:	ldr	r3, [pc, #32]	; (1828 <usb_midi_flush_output+0x24>)
    1808:	ldrb	r4, [r3, #0]
    180a:	cbnz	r4, 1816 <usb_midi_flush_output+0x12>
    180c:	ldr	r5, [pc, #28]	; (182c <usb_midi_flush_output+0x28>)
    180e:	ldr	r1, [r5, #0]
    1810:	cbz	r1, 1816 <usb_midi_flush_output+0x12>
    1812:	ldrh	r3, [r1, #2]
    1814:	cbnz	r3, 1818 <usb_midi_flush_output+0x14>
    1816:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    1818:	lsls	r3, r3, #2
    181a:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    181c:	movs	r0, #4
    181e:	bl	1e48 <usb_tx>
		tx_packet = NULL;
    1822:	str	r4, [r5, #0]
    1824:	pop	{r3, r4, r5, pc}
    1826:	nop
    1828:	.word	0x1fff15e4
    182c:	.word	0x1fff1610

00001830 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1830:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    1834:	ldr	r6, [pc, #692]	; (1aec <usb_midi_read+0x2bc>)
    1836:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1838:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    183a:	cmp	r3, #0
    183c:	beq.w	1964 <usb_midi_read+0x134>
    1840:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    1842:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    1844:	lsrs	r1, r2, #2
    1846:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    184a:	adds	r2, #4
	if (index < rx_packet->len) {
    184c:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    184e:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    1850:	bcs.n	18d8 <usb_midi_read+0xa8>
		rx_packet->index = index;
    1852:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    1854:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1858:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    185c:	ldr	r1, [pc, #656]	; (1af0 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    185e:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    1862:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    1866:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    186a:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    186c:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    1870:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1872:	bls.n	18aa <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1874:	subs	r3, r6, #2
    1876:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1878:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    187c:	bls.n	191c <usb_midi_read+0xec>
    187e:	cmp	r6, #5
    1880:	beq.n	1914 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    1882:	cmp	r6, #4
    1884:	beq.w	1bd0 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    1888:	subs	r3, r6, #5
    188a:	cmp	r3, #2
    188c:	bls.n	198e <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    188e:	cmp	r6, #15
    1890:	bne.n	18b0 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    1892:	cmp	r0, #247	; 0xf7
    1894:	bhi.n	191c <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    1896:	cmp	r0, #240	; 0xf0
    1898:	beq.n	18a0 <usb_midi_read+0x70>
    189a:	ldr	r3, [pc, #600]	; (1af4 <usb_midi_read+0x2c4>)
    189c:	ldrh	r3, [r3, #0]
    189e:	cbz	r3, 18b0 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    18a0:	bl	1720 <sysex_byte>
		}
	}
	return 0;
    18a4:	movs	r0, #0
    18a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    18aa:	cbz	r7, 18b6 <usb_midi_read+0x86>
    18ac:	cmp	r5, r7
    18ae:	beq.n	18b6 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    18b0:	movs	r0, #0
    18b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    18b6:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    18b8:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    18bc:	beq.w	19ce <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    18c0:	cmp	r6, #9
    18c2:	beq.n	18e8 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    18c4:	cmp	r6, #10
    18c6:	bne.w	19f2 <usb_midi_read+0x1c2>
    18ca:	cmp	r3, #10
    18cc:	bne.n	18b0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    18ce:	ldr	r3, [pc, #552]	; (1af8 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    18d0:	ldr	r2, [pc, #552]	; (1afc <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    18d2:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    18d4:	movs	r1, #160	; 0xa0
    18d6:	b.n	19dc <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    18d8:	mov	r0, r3
    18da:	bl	1cac <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    18de:	movs	r0, #5
    18e0:	bl	1cf8 <usb_rx>
    18e4:	str	r0, [r6, #0]
    18e6:	b.n	1854 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    18e8:	cmp	r3, #9
    18ea:	bne.n	18b0 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    18ec:	lsrs	r7, r4, #24
    18ee:	beq.w	1be8 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    18f2:	ldr	r3, [pc, #524]	; (1b00 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    18f4:	ldr	r2, [pc, #516]	; (1afc <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    18f6:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    18f8:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    18fa:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    18fe:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1900:	uxtb	r5, r5
    1902:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    1904:	cmp	r3, #0
    1906:	beq.w	1a44 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    190a:	mov	r2, r4
    190c:	mov	r1, r6
    190e:	mov	r0, r5
    1910:	blx	r3
    1912:	b.n	1a44 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1914:	cmp	r0, #240	; 0xf0
    1916:	bls.n	19a0 <usb_midi_read+0x170>
    1918:	cmp	r0, #247	; 0xf7
    191a:	beq.n	19a0 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    191c:	subs	r0, #241	; 0xf1
    191e:	cmp	r0, #14
    1920:	bhi.n	18b0 <usb_midi_read+0x80>
    1922:	add	r3, pc, #4	; (adr r3, 1928 <usb_midi_read+0xf8>)
    1924:	ldr.w	pc, [r3, r0, lsl #2]
    1928:	.word	0x00001adf
    192c:	.word	0x00001ac3
    1930:	.word	0x00001ab1
    1934:	.word	0x000018b1
    1938:	.word	0x000018b1
    193c:	.word	0x00001aa3
    1940:	.word	0x000018b1
    1944:	.word	0x00001b83
    1948:	.word	0x000018b1
    194c:	.word	0x00001b4d
    1950:	.word	0x00001b67
    1954:	.word	0x00001a8b
    1958:	.word	0x000018b1
    195c:	.word	0x00001a73
    1960:	.word	0x00001a57
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    1964:	ldr	r3, [pc, #412]	; (1b04 <usb_midi_read+0x2d4>)
    1966:	ldrb	r3, [r3, #0]
    1968:	cmp	r3, #0
    196a:	beq.n	18b0 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    196c:	movs	r0, #5
    196e:	bl	1cf8 <usb_rx>
    1972:	mov	r3, r0
    1974:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    1976:	cmp	r0, #0
    1978:	beq.n	18b0 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    197a:	ldrh	r5, [r0, #0]
    197c:	cmp	r5, #0
    197e:	bne.w	1842 <usb_midi_read+0x12>
			usb_free(rx_packet);
    1982:	bl	1cac <usb_free>
			rx_packet = NULL;
    1986:	str	r5, [r6, #0]
			return 0;
    1988:	mov	r0, r5
    198a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    198e:	bl	1720 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    1992:	ubfx	r0, r4, #16, #8
    1996:	bl	1720 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    199a:	cmp	r6, #7
    199c:	bne.n	19a4 <usb_midi_read+0x174>
    199e:	lsrs	r0, r4, #24
    19a0:	bl	1720 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    19a4:	ldr	r3, [pc, #332]	; (1af4 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    19a6:	ldr	r2, [pc, #352]	; (1b08 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    19a8:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    19aa:	ldr	r0, [pc, #352]	; (1b0c <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    19ac:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    19ae:	ldr	r5, [pc, #352]	; (1b10 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    19b0:	ldr	r2, [pc, #328]	; (1afc <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    19b2:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    19b4:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    19b6:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    19b8:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    19ba:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    19bc:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    19be:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    19c0:	cbz	r4, 1a06 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    19c2:	movs	r2, #1
    19c4:	ldr	r0, [pc, #332]	; (1b14 <usb_midi_read+0x2e4>)
    19c6:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    19c8:	movs	r0, #1
    19ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    19ce:	cmp	r3, #8
    19d0:	bne.w	18b0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    19d4:	ldr	r3, [pc, #320]	; (1b18 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    19d6:	ldr	r2, [pc, #292]	; (1afc <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    19d8:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    19da:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    19dc:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    19e0:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    19e2:	uxtb	r5, r5
    19e4:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    19e6:	cbz	r3, 1a44 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    19e8:	mov	r0, r5
    19ea:	mov	r2, r4
    19ec:	mov	r1, r6
    19ee:	blx	r3
    19f0:	b.n	1a44 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    19f2:	cmp	r6, #11
    19f4:	bne.n	1a1a <usb_midi_read+0x1ea>
    19f6:	cmp	r3, #11
    19f8:	bne.w	18b0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    19fc:	ldr	r3, [pc, #284]	; (1b1c <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    19fe:	ldr	r2, [pc, #252]	; (1afc <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    1a00:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1a02:	movs	r1, #176	; 0xb0
    1a04:	b.n	19dc <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    1a06:	ldr	r3, [pc, #280]	; (1b20 <usb_midi_read+0x2f0>)
    1a08:	ldr	r3, [r3, #0]
    1a0a:	cmp	r3, #0
    1a0c:	beq.w	1c06 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    1a10:	ldr	r0, [pc, #256]	; (1b14 <usb_midi_read+0x2e4>)
    1a12:	blx	r3
		}
		return 1;
    1a14:	movs	r0, #1
    1a16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    1a1a:	cmp	r6, #12
    1a1c:	bne.w	1c20 <usb_midi_read+0x3f0>
    1a20:	cmp	r3, #12
    1a22:	bne.w	18b0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1a26:	ldr	r3, [pc, #252]	; (1b24 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1a28:	ldr	r2, [pc, #208]	; (1afc <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    1a2a:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1a2c:	movs	r1, #192	; 0xc0
    1a2e:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    1a30:	uxtb	r5, r5
    1a32:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1a36:	cmp	r3, #0
    1a38:	beq.w	1bcc <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1a3c:	mov	r0, r5
    1a3e:	mov	r1, r6
    1a40:	lsrs	r4, r4, #24
    1a42:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1a44:	ldr	r1, [pc, #224]	; (1b28 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    1a46:	ldr	r2, [pc, #196]	; (1b0c <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    1a48:	ldr	r3, [pc, #196]	; (1b10 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1a4a:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    1a4c:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    1a4e:	strb	r4, [r3, #0]
		return 1;
    1a50:	movs	r0, #1
    1a52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    1a56:	ldr	r3, [pc, #212]	; (1b2c <usb_midi_read+0x2fc>)
    1a58:	ldr	r3, [r3, #0]
    1a5a:	cmp	r3, #0
    1a5c:	beq.w	1c0c <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    1a60:	blx	r3
    1a62:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    1a66:	ldr	r3, [pc, #148]	; (1afc <usb_midi_read+0x2cc>)
    1a68:	uxtb	r5, r5
    1a6a:	lsrs	r4, r4, #24
    1a6c:	strb.w	r8, [r3]
		goto return_message;
    1a70:	b.n	1a44 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    1a72:	ldr	r3, [pc, #188]	; (1b30 <usb_midi_read+0x300>)
    1a74:	ldr	r3, [r3, #0]
    1a76:	cmp	r3, #0
    1a78:	bne.n	1a60 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    1a7a:	ldr	r3, [pc, #184]	; (1b34 <usb_midi_read+0x304>)
    1a7c:	ldr	r3, [r3, #0]
    1a7e:	cbz	r3, 1aaa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    1a80:	movs	r0, #254	; 0xfe
    1a82:	blx	r3
    1a84:	ubfx	r6, r4, #16, #8
    1a88:	b.n	1a66 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    1a8a:	ldr	r3, [pc, #172]	; (1b38 <usb_midi_read+0x308>)
    1a8c:	ldr	r3, [r3, #0]
    1a8e:	cmp	r3, #0
    1a90:	bne.n	1a60 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    1a92:	ldr	r3, [pc, #160]	; (1b34 <usb_midi_read+0x304>)
    1a94:	ldr	r3, [r3, #0]
    1a96:	cbz	r3, 1aaa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    1a98:	movs	r0, #252	; 0xfc
    1a9a:	blx	r3
    1a9c:	ubfx	r6, r4, #16, #8
    1aa0:	b.n	1a66 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    1aa2:	ldr	r3, [pc, #152]	; (1b3c <usb_midi_read+0x30c>)
    1aa4:	ldr	r3, [r3, #0]
    1aa6:	cmp	r3, #0
    1aa8:	bne.n	1a60 <usb_midi_read+0x230>
    1aaa:	ubfx	r6, r4, #16, #8
    1aae:	b.n	1a66 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1ab0:	ldr	r3, [pc, #140]	; (1b40 <usb_midi_read+0x310>)
    1ab2:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    1ab4:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1ab8:	cmp	r3, #0
    1aba:	beq.n	1a66 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    1abc:	mov	r0, r6
    1abe:	blx	r3
    1ac0:	b.n	1a66 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    1ac2:	ldr	r3, [pc, #128]	; (1b44 <usb_midi_read+0x314>)
    1ac4:	ldr	r2, [r3, #0]
    1ac6:	cmp	r2, #0
    1ac8:	beq.n	1aaa <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    1aca:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    1acc:	lsrs	r3, r4, #17
    1ace:	and.w	r0, r6, #127	; 0x7f
    1ad2:	and.w	r3, r3, #16256	; 0x3f80
    1ad6:	orrs	r0, r3
    1ad8:	uxtb	r6, r6
    1ada:	blx	r2
    1adc:	b.n	1a66 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1ade:	ldr	r3, [pc, #104]	; (1b48 <usb_midi_read+0x318>)
    1ae0:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    1ae2:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1ae6:	cmp	r3, #0
    1ae8:	bne.n	1abc <usb_midi_read+0x28c>
    1aea:	b.n	1a66 <usb_midi_read+0x236>
    1aec:	.word	0x1fff161c
    1af0:	.word	0x1fff1a8e
    1af4:	.word	0x1fff1a8a
    1af8:	.word	0x1fff15f8
    1afc:	.word	0x1fff1a88
    1b00:	.word	0x1fff162c
    1b04:	.word	0x1fff1720
    1b08:	.word	0x1fff15f4
    1b0c:	.word	0x1fff1a8c
    1b10:	.word	0x1fff1a8d
    1b14:	.word	0x1fff1a90
    1b18:	.word	0x1fff1624
    1b1c:	.word	0x1fff1628
    1b20:	.word	0x1fff160c
    1b24:	.word	0x1fff15e8
    1b28:	.word	0x1fff1a8f
    1b2c:	.word	0x1fff15d4
    1b30:	.word	0x1fff15d8
    1b34:	.word	0x1fff15dc
    1b38:	.word	0x1fff1618
    1b3c:	.word	0x1fff1608
    1b40:	.word	0x1fff1620
    1b44:	.word	0x1fff15f0
    1b48:	.word	0x1fff1604
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    1b4c:	ldr	r3, [pc, #252]	; (1c4c <usb_midi_read+0x41c>)
    1b4e:	ldr	r3, [r3, #0]
    1b50:	cmp	r3, #0
    1b52:	bne.n	1a60 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    1b54:	ldr	r3, [pc, #248]	; (1c50 <usb_midi_read+0x420>)
    1b56:	ldr	r3, [r3, #0]
    1b58:	cmp	r3, #0
    1b5a:	beq.n	1aaa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    1b5c:	movs	r0, #250	; 0xfa
    1b5e:	blx	r3
    1b60:	ubfx	r6, r4, #16, #8
    1b64:	b.n	1a66 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    1b66:	ldr	r3, [pc, #236]	; (1c54 <usb_midi_read+0x424>)
    1b68:	ldr	r3, [r3, #0]
    1b6a:	cmp	r3, #0
    1b6c:	bne.w	1a60 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    1b70:	ldr	r3, [pc, #220]	; (1c50 <usb_midi_read+0x420>)
    1b72:	ldr	r3, [r3, #0]
    1b74:	cmp	r3, #0
    1b76:	beq.n	1aaa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    1b78:	movs	r0, #251	; 0xfb
    1b7a:	blx	r3
    1b7c:	ubfx	r6, r4, #16, #8
    1b80:	b.n	1a66 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    1b82:	ldr	r3, [pc, #212]	; (1c58 <usb_midi_read+0x428>)
    1b84:	ldr	r3, [r3, #0]
    1b86:	cmp	r3, #0
    1b88:	bne.w	1a60 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    1b8c:	ldr	r3, [pc, #192]	; (1c50 <usb_midi_read+0x420>)
    1b8e:	ldr	r3, [r3, #0]
    1b90:	cmp	r3, #0
    1b92:	beq.n	1aaa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    1b94:	movs	r0, #248	; 0xf8
    1b96:	blx	r3
    1b98:	ubfx	r6, r4, #16, #8
    1b9c:	b.n	1a66 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    1b9e:	cmp	r3, #14
    1ba0:	bne.w	18b0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    1ba4:	ldr	r2, [pc, #180]	; (1c5c <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1ba6:	ldr	r3, [pc, #184]	; (1c60 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    1ba8:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1baa:	movs	r1, #224	; 0xe0
    1bac:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    1bae:	cmp	r2, #0
    1bb0:	beq.n	1c42 <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    1bb2:	lsrs	r6, r4, #16
    1bb4:	lsrs	r1, r4, #17
    1bb6:	and.w	r3, r6, #127	; 0x7f
    1bba:	and.w	r1, r1, #16256	; 0x3f80
    1bbe:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    1bc0:	uxtb	r5, r5
    1bc2:	sub.w	r1, r1, #8192	; 0x2000
    1bc6:	mov	r0, r5
    1bc8:	blx	r2
    1bca:	uxtb	r6, r6
    1bcc:	lsrs	r4, r4, #24
    1bce:	b.n	1a44 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    1bd0:	bl	1720 <sysex_byte>
		sysex_byte(n >> 16);
    1bd4:	ubfx	r0, r4, #16, #8
    1bd8:	bl	1720 <sysex_byte>
		sysex_byte(n >> 24);
    1bdc:	lsrs	r0, r4, #24
    1bde:	bl	1720 <sysex_byte>
		return 0;
    1be2:	movs	r0, #0
    1be4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1be8:	ldr	r3, [pc, #120]	; (1c64 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1bea:	ldr	r2, [pc, #116]	; (1c60 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    1bec:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1bee:	movs	r1, #128	; 0x80
    1bf0:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1bf2:	uxtb	r5, r5
    1bf4:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1bf8:	cbz	r3, 1c1c <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1bfa:	mov	r1, r6
    1bfc:	mov	r0, r5
    1bfe:	mov	r2, r7
    1c00:	blx	r3
    1c02:	mov	r4, r7
    1c04:	b.n	1a44 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1c06:	movs	r0, #1
    1c08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    1c0c:	ldr	r3, [pc, #64]	; (1c50 <usb_midi_read+0x420>)
    1c0e:	ldr	r3, [r3, #0]
    1c10:	cmp	r3, #0
    1c12:	beq.w	1aaa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    1c16:	movs	r0, #255	; 0xff
    1c18:	blx	r3
    1c1a:	b.n	1aaa <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1c1c:	mov	r4, r3
    1c1e:	b.n	1a44 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    1c20:	cmp	r6, #13
    1c22:	bne.n	1b9e <usb_midi_read+0x36e>
    1c24:	cmp	r3, #13
    1c26:	bne.w	18b0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1c2a:	ldr	r3, [pc, #60]	; (1c68 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1c2c:	ldr	r2, [pc, #48]	; (1c60 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    1c2e:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1c30:	movs	r1, #208	; 0xd0
    1c32:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1c34:	uxtb	r5, r5
    1c36:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1c3a:	cmp	r3, #0
    1c3c:	bne.w	1a3c <usb_midi_read+0x20c>
    1c40:	b.n	1bcc <usb_midi_read+0x39c>
    1c42:	ubfx	r6, r4, #16, #8
    1c46:	uxtb	r5, r5
    1c48:	lsrs	r4, r4, #24
    1c4a:	b.n	1a44 <usb_midi_read+0x214>
    1c4c:	.word	0x1fff1600
    1c50:	.word	0x1fff15dc
    1c54:	.word	0x1fff15e0
    1c58:	.word	0x1fff15d0
    1c5c:	.word	0x1fff15ec
    1c60:	.word	0x1fff1a88
    1c64:	.word	0x1fff1624
    1c68:	.word	0x1fff15fc

00001c6c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    1c6c:	cpsid	i
	avail = usb_buffer_available;
    1c6e:	ldr	r0, [pc, #52]	; (1ca4 <usb_malloc+0x38>)
    1c70:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    1c72:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    1c76:	cmp	r3, #29
    1c78:	bgt.n	1c9c <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    1c7a:	mov.w	r1, #2147483648	; 0x80000000
    1c7e:	lsrs	r1, r3
    1c80:	bic.w	r2, r2, r1
    1c84:	str	r2, [r0, #0]
	__enable_irq();
    1c86:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    1c88:	ldr	r0, [pc, #28]	; (1ca8 <usb_malloc+0x3c>)
    1c8a:	add.w	r3, r3, r3, lsl #3
    1c8e:	lsls	r3, r3, #3
    1c90:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    1c92:	movs	r1, #0
    1c94:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    1c96:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    1c98:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    1c9a:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    1c9c:	cpsie	i
		return NULL;
    1c9e:	movs	r0, #0
    1ca0:	bx	lr
    1ca2:	nop
    1ca4:	.word	0x1fff0c44
    1ca8:	.word	0x1fff03d0

00001cac <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    1cac:	ldr	r3, [pc, #52]	; (1ce4 <usb_free+0x38>)
    1cae:	ldr	r2, [pc, #56]	; (1ce8 <usb_free+0x3c>)
    1cb0:	subs	r3, r0, r3
    1cb2:	umull	r2, r3, r2, r3
    1cb6:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    1cb8:	cmp	r3, #29
    1cba:	bhi.n	1cd6 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1cbc:	ldr	r2, [pc, #44]	; (1cec <usb_free+0x40>)
    1cbe:	ldrb	r2, [r2, #0]
    1cc0:	cbnz	r2, 1cd8 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    1cc2:	cpsid	i
	usb_buffer_available |= mask;
    1cc4:	ldr	r0, [pc, #40]	; (1cf0 <usb_free+0x44>)
    1cc6:	mov.w	r1, #2147483648	; 0x80000000
    1cca:	ldr	r2, [r0, #0]
    1ccc:	lsr.w	r3, r1, r3
    1cd0:	orrs	r2, r3
    1cd2:	str	r2, [r0, #0]
	__enable_irq();
    1cd4:	cpsie	i
    1cd6:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1cd8:	ldr	r2, [pc, #24]	; (1cf4 <usb_free+0x48>)
    1cda:	ldrb	r2, [r2, #0]
    1cdc:	cmp	r2, #0
    1cde:	beq.n	1cc2 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    1ce0:	b.w	1d60 <usb_rx_memory>
    1ce4:	.word	0x1fff03d0
    1ce8:	.word	0x38e38e39
    1cec:	.word	0x1fff1715
    1cf0:	.word	0x1fff0c44
    1cf4:	.word	0x1fff1720

00001cf8 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    1cf8:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    1cfa:	cmp	r3, #4
    1cfc:	bhi.n	1d28 <usb_rx+0x30>
	__disable_irq();
    1cfe:	cpsid	i
	ret = rx_first[endpoint];
    1d00:	ldr	r1, [pc, #40]	; (1d2c <usb_rx+0x34>)
    1d02:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    1d06:	cbz	r0, 1d24 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    1d08:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    1d0a:	ldr	r4, [pc, #36]	; (1d30 <usb_rx+0x38>)
    1d0c:	ldrh	r5, [r0, #0]
    1d0e:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    1d12:	ldr	r6, [r0, #4]
    1d14:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    1d18:	subs	r2, r2, r5
    1d1a:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    1d1e:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1d20:	pop	{r4, r5, r6}
    1d22:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    1d24:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1d26:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    1d28:	movs	r0, #0
    1d2a:	bx	lr
    1d2c:	.word	0x1fff168c
    1d30:	.word	0x1fff1bb4

00001d34 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    1d34:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1d36:	cmp	r0, #4
    1d38:	bhi.n	1d52 <usb_tx_packet_count+0x1e>
	__disable_irq();
    1d3a:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    1d3c:	ldr	r3, [pc, #28]	; (1d5c <usb_tx_packet_count+0x28>)
    1d3e:	ldr.w	r3, [r3, r0, lsl #2]
    1d42:	cbz	r3, 1d56 <usb_tx_packet_count+0x22>
    1d44:	movs	r0, #0
    1d46:	ldr	r3, [r3, #4]
    1d48:	adds	r0, #1
    1d4a:	cmp	r3, #0
    1d4c:	bne.n	1d46 <usb_tx_packet_count+0x12>
	__enable_irq();
    1d4e:	cpsie	i
	return count;
    1d50:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1d52:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    1d54:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    1d56:	mov	r0, r3
    1d58:	b.n	1d4e <usb_tx_packet_count+0x1a>
    1d5a:	nop
    1d5c:	.word	0x1fff16e4

00001d60 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    1d60:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    1d62:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1d64:	ldr	r2, [pc, #204]	; (1e34 <usb_rx_memory+0xd4>)
    1d66:	ldrb	r3, [r2, #0]
    1d68:	lsls	r3, r3, #28
    1d6a:	bpl.n	1d7a <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1d6c:	ldr	r3, [pc, #200]	; (1e38 <usb_rx_memory+0xd8>)
    1d6e:	ldr	r1, [r3, #32]
    1d70:	cmp	r1, #0
    1d72:	beq.n	1dfc <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1d74:	ldr	r1, [r3, #40]	; 0x28
    1d76:	cmp	r1, #0
    1d78:	beq.n	1e18 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1d7a:	ldrb	r3, [r2, #1]
    1d7c:	lsls	r5, r3, #28
    1d7e:	bpl.n	1d8e <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1d80:	ldr	r3, [pc, #180]	; (1e38 <usb_rx_memory+0xd8>)
    1d82:	ldr	r1, [r3, #64]	; 0x40
    1d84:	cmp	r1, #0
    1d86:	beq.n	1e24 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1d88:	ldr	r1, [r3, #72]	; 0x48
    1d8a:	cmp	r1, #0
    1d8c:	beq.n	1e1c <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1d8e:	ldrb	r3, [r2, #2]
    1d90:	lsls	r4, r3, #28
    1d92:	bpl.n	1da2 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1d94:	ldr	r3, [pc, #160]	; (1e38 <usb_rx_memory+0xd8>)
    1d96:	ldr	r1, [r3, #96]	; 0x60
    1d98:	cmp	r1, #0
    1d9a:	beq.n	1e28 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1d9c:	ldr	r1, [r3, #104]	; 0x68
    1d9e:	cmp	r1, #0
    1da0:	beq.n	1e20 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1da2:	ldrb	r3, [r2, #3]
    1da4:	lsls	r1, r3, #28
    1da6:	bpl.n	1db8 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1da8:	ldr	r3, [pc, #140]	; (1e38 <usb_rx_memory+0xd8>)
    1daa:	ldr.w	r1, [r3, #128]	; 0x80
    1dae:	cmp	r1, #0
    1db0:	beq.n	1e30 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1db2:	ldr.w	r1, [r3, #136]	; 0x88
    1db6:	cbz	r1, 1dde <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1db8:	ldrb	r3, [r2, #4]
    1dba:	lsls	r3, r3, #28
    1dbc:	bpl.n	1dd0 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1dbe:	ldr	r3, [pc, #120]	; (1e38 <usb_rx_memory+0xd8>)
    1dc0:	ldr.w	r2, [r3, #160]	; 0xa0
    1dc4:	cmp	r2, #0
    1dc6:	beq.n	1e2c <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1dc8:	ldr.w	r2, [r3, #168]	; 0xa8
    1dcc:	movs	r4, #21
    1dce:	cbz	r2, 1de0 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    1dd0:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    1dd2:	ldr	r3, [pc, #104]	; (1e3c <usb_rx_memory+0xdc>)
    1dd4:	movs	r2, #0
    1dd6:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    1dd8:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    1dda:	b.w	1cac <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1dde:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1de0:	ldr	r1, [pc, #88]	; (1e3c <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1de2:	ldr	r5, [pc, #92]	; (1e40 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    1de4:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1de6:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    1dea:	add.w	r3, r3, r4, lsl #3
    1dee:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1df0:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    1df2:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1df4:	strb	r2, [r1, #0]
				__enable_irq();
    1df6:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    1df8:	pop	{r4, r5}
    1dfa:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    1dfc:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1dfe:	ldr	r4, [pc, #60]	; (1e3c <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1e00:	ldr	r5, [pc, #64]	; (1e44 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    1e02:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1e04:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    1e08:	add.w	r3, r3, r2, lsl #3
    1e0c:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1e0e:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    1e10:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1e12:	strb	r2, [r4, #0]
				__enable_irq();
    1e14:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    1e16:	b.n	1df8 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1e18:	movs	r4, #5
    1e1a:	b.n	1de0 <usb_rx_memory+0x80>
    1e1c:	movs	r4, #9
    1e1e:	b.n	1de0 <usb_rx_memory+0x80>
    1e20:	movs	r4, #13
    1e22:	b.n	1de0 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    1e24:	movs	r2, #8
    1e26:	b.n	1dfe <usb_rx_memory+0x9e>
    1e28:	movs	r2, #12
    1e2a:	b.n	1dfe <usb_rx_memory+0x9e>
    1e2c:	movs	r2, #20
    1e2e:	b.n	1dfe <usb_rx_memory+0x9e>
    1e30:	movs	r2, #16
    1e32:	b.n	1dfe <usb_rx_memory+0x9e>
    1e34:	.word	0x0000419c
    1e38:	.word	0x1fff0000
    1e3c:	.word	0x1fff1715
    1e40:	.word	0x004000c8
    1e44:	.word	0x00400088

00001e48 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    1e48:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    1e4a:	cmp	r3, #4
    1e4c:	bhi.n	1e8a <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    1e4e:	ldr	r2, [pc, #108]	; (1ebc <usb_tx+0x74>)
    1e50:	lsls	r0, r0, #5
    1e52:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    1e56:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    1e58:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    1e5a:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    1e5c:	ldr	r4, [pc, #96]	; (1ec0 <usb_tx+0x78>)
    1e5e:	ldrb	r2, [r4, r3]
    1e60:	cmp	r2, #3
    1e62:	bhi.n	1e9c <usb_tx+0x54>
    1e64:	tbb	[pc, r2]
    1e68:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    1e6c:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1e6e:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    1e70:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1e72:	tst.w	r0, #8
    1e76:	ite	ne
    1e78:	movne	r3, #200	; 0xc8
    1e7a:	moveq	r3, #136	; 0x88
    1e7c:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    1e80:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1e82:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    1e84:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    1e86:	cpsie	i
}
    1e88:	pop	{r4, r5}
    1e8a:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    1e8c:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    1e8e:	movs	r2, #2
		break;
    1e90:	b.n	1e6e <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    1e92:	movs	r2, #5
    1e94:	b.n	1e6e <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    1e96:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    1e98:	movs	r2, #4
		break;
    1e9a:	b.n	1e6e <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    1e9c:	ldr	r2, [pc, #36]	; (1ec4 <usb_tx+0x7c>)
    1e9e:	ldr.w	r0, [r2, r3, lsl #2]
    1ea2:	cbz	r0, 1eb4 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    1ea4:	ldr	r2, [pc, #32]	; (1ec8 <usb_tx+0x80>)
    1ea6:	ldr.w	r0, [r2, r3, lsl #2]
    1eaa:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    1eac:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    1eb0:	cpsie	i
		return;
    1eb2:	b.n	1e88 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    1eb4:	str.w	r1, [r2, r3, lsl #2]
    1eb8:	ldr	r2, [pc, #12]	; (1ec8 <usb_tx+0x80>)
    1eba:	b.n	1eac <usb_tx+0x64>
    1ebc:	.word	0x1fff0000
    1ec0:	.word	0x1fff1724
    1ec4:	.word	0x1fff16e4
    1ec8:	.word	0x1fff16f8

00001ecc <usb_isr>:
}



void usb_isr(void)
{
    1ecc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    1ed0:	ldr.w	fp, [pc, #776]	; 21dc <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    1ed4:	ldr.w	sl, [pc, #776]	; 21e0 <usb_isr+0x314>
}



void usb_isr(void)
{
    1ed8:	sub	sp, #28
    1eda:	b.n	1f66 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    1edc:	ldr	r7, [pc, #680]	; (2188 <usb_isr+0x2bc>)
    1ede:	mov.w	r8, r3, lsr #2
    1ee2:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    1ee6:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    1ee8:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    1eec:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    1ef0:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    1ef2:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    1ef6:	and.w	r4, r3, #255	; 0xff
    1efa:	cmp	r3, #0
    1efc:	bne.w	2100 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    1f00:	ldr.w	r3, [r7, r8, lsl #3]
    1f04:	lsrs	r3, r3, #16
    1f06:	uxth	r1, r3
    1f08:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    1f0c:	cmp	r3, #0
    1f0e:	beq.w	20ee <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    1f12:	ldr	r3, [pc, #632]	; (218c <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    1f14:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    1f18:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    1f1c:	ldr.w	r2, [r3, r6, lsl #2]
    1f20:	cmp	r2, #0
    1f22:	beq.w	2390 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    1f26:	ldr	r5, [pc, #616]	; (2190 <usb_isr+0x2c4>)
    1f28:	ldr.w	r3, [r5, r6, lsl #2]
    1f2c:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    1f2e:	ldr	r4, [pc, #612]	; (2194 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    1f30:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    1f34:	ldrh.w	r3, [r4, r6, lsl #1]
    1f38:	add	r1, r3
    1f3a:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    1f3e:	bl	1c6c <usb_malloc>
					if (packet) {
    1f42:	cmp	r0, #0
    1f44:	beq.w	2382 <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    1f48:	ldr	r2, [pc, #588]	; (2198 <usb_isr+0x2cc>)
    1f4a:	ldr	r3, [pc, #592]	; (219c <usb_isr+0x2d0>)
    1f4c:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    1f50:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    1f54:	it	ne
    1f56:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    1f58:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    1f5c:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    1f60:	movs	r3, #8
    1f62:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    1f66:	ldrb.w	r4, [fp]
    1f6a:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    1f6c:	lsls	r0, r4, #29
    1f6e:	bpl.n	1faa <usb_isr+0xde>
		if (usb_configuration) {
    1f70:	ldr	r3, [pc, #556]	; (21a0 <usb_isr+0x2d4>)
    1f72:	ldrb	r3, [r3, #0]
    1f74:	cbz	r3, 1fa4 <usb_isr+0xd8>
			t = usb_reboot_timer;
    1f76:	ldr	r1, [pc, #556]	; (21a4 <usb_isr+0x2d8>)
    1f78:	ldrb	r2, [r1, #0]
			if (t) {
    1f7a:	and.w	r3, r2, #255	; 0xff
    1f7e:	cbz	r2, 1f8a <usb_isr+0xbe>
				usb_reboot_timer = --t;
    1f80:	subs	r3, #1
    1f82:	uxtb	r3, r3
    1f84:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    1f86:	cbnz	r3, 1f8a <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    1f88:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    1f8a:	ldr	r1, [pc, #540]	; (21a8 <usb_isr+0x2dc>)
    1f8c:	ldrb	r2, [r1, #0]
			if (t) {
    1f8e:	and.w	r3, r2, #255	; 0xff
    1f92:	cbz	r2, 1fa0 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    1f94:	subs	r3, #1
    1f96:	uxtb	r3, r3
    1f98:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    1f9a:	cmp	r3, #0
    1f9c:	beq.w	232e <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    1fa0:	bl	1804 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    1fa4:	movs	r3, #4
    1fa6:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    1faa:	and.w	r3, r4, #8
    1fae:	and.w	r2, r3, #255	; 0xff
    1fb2:	cmp	r3, #0
    1fb4:	beq.w	2148 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    1fb8:	ldrb.w	r3, [sl]
    1fbc:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    1fbe:	lsrs	r6, r3, #4
    1fc0:	bne.n	1edc <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    1fc2:	lsrs	r4, r3, #2
    1fc4:	ldr.w	r9, [pc, #448]	; 2188 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    1fc8:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    1fcc:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    1fd0:	ubfx	r2, r2, #2, #4
    1fd4:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    1fd6:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    1fd8:	cmp	r2, #12
    1fda:	bhi.w	20e6 <usb_isr+0x21a>
    1fde:	tbb	[pc, r2]
    1fe2:	.short	0x7878
    1fe4:	.word	0x82828282
    1fe8:	.word	0x82438282
    1fec:	.short	0x8282
    1fee:	.byte	0x07
    1fef:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    1ff0:	ldr	r0, [r1, #0]
    1ff2:	ldr	r5, [pc, #440]	; (21ac <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    1ff4:	ldr	r3, [pc, #416]	; (2198 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    1ff6:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    1ff8:	ldr	r7, [pc, #436]	; (21b0 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    1ffa:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    1ffe:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2000:	ldr	r6, [pc, #432]	; (21b4 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2002:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2004:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2008:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    200a:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    200c:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    200e:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2012:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2014:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2018:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    201c:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    201e:	bhi.w	21e4 <usb_isr+0x318>
    2022:	cmp.w	r1, #1664	; 0x680
    2026:	bcs.w	2650 <usb_isr+0x784>
    202a:	cmp.w	r1, #258	; 0x102
    202e:	beq.w	23fe <usb_isr+0x532>
    2032:	bhi.w	23c8 <usb_isr+0x4fc>
    2036:	cmp	r1, #128	; 0x80
    2038:	beq.w	2684 <usb_isr+0x7b8>
    203c:	cmp	r1, #130	; 0x82
    203e:	bne.w	240a <usb_isr+0x53e>
    2042:	ldrh	r1, [r5, #4]
    2044:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2048:	cmp	r1, #5
    204a:	bhi.w	240a <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    204e:	ldr	r3, [pc, #360]	; (21b8 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2050:	ldr	r4, [pc, #360]	; (21bc <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2052:	lsls	r1, r1, #2
    2054:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2056:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2058:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    205a:	ldrb	r2, [r3, #0]
    205c:	lsls	r3, r2, #30
    205e:	bpl.w	2794 <usb_isr+0x8c8>
    2062:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    2064:	movs	r0, #2
    2066:	b.n	2492 <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2068:	ldr	r7, [pc, #324]	; (21b0 <usb_isr+0x2e4>)
    206a:	ldr	r2, [r7, #0]
		if (data) {
    206c:	cbz	r2, 20bc <usb_isr+0x1f0>
			size = ep0_tx_len;
    206e:	ldr	r3, [pc, #336]	; (21c0 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2070:	ldr	r6, [pc, #320]	; (21b4 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2072:	ldr	r1, [pc, #336]	; (21c4 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2074:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2076:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2078:	ldrb	r5, [r1, #0]
    207a:	cmp	r0, #64	; 0x40
    207c:	mov	lr, r0
    207e:	orr.w	r8, r5, #2
    2082:	it	cs
    2084:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2088:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    208a:	eor.w	r4, r4, #1
    208e:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2090:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2094:	ite	eq
    2096:	moveq	r4, #136	; 0x88
    2098:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    209a:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    209e:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    20a0:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    20a4:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    20a8:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    20aa:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    20ac:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    20b0:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    20b2:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    20b4:	cmp	r0, #0
    20b6:	beq.w	2226 <usb_isr+0x35a>
    20ba:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    20bc:	ldr	r3, [pc, #236]	; (21ac <usb_isr+0x2e0>)
    20be:	ldrh	r2, [r3, #0]
    20c0:	cmp.w	r2, #1280	; 0x500
    20c4:	bne.n	20e6 <usb_isr+0x21a>
			setup.bRequest = 0;
    20c6:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    20c8:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    20ca:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    20cc:	ldr	r3, [pc, #248]	; (21c8 <usb_isr+0x2fc>)
    20ce:	strb	r2, [r3, #0]
    20d0:	b.n	20e6 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    20d2:	ldr	r2, [pc, #216]	; (21ac <usb_isr+0x2e0>)
    20d4:	ldrh	r0, [r2, #0]
    20d6:	movw	r2, #8225	; 0x2021
    20da:	cmp	r0, r2
    20dc:	beq.w	2230 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    20e0:	ldr	r2, [pc, #180]	; (2198 <usb_isr+0x2cc>)
    20e2:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    20e6:	ldr	r2, [pc, #228]	; (21cc <usb_isr+0x300>)
    20e8:	movs	r3, #1
    20ea:	strb	r3, [r2, #0]
    20ec:	b.n	1f60 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    20ee:	ldr	r2, [pc, #168]	; (2198 <usb_isr+0x2cc>)
    20f0:	ldr	r3, [pc, #168]	; (219c <usb_isr+0x2d0>)
    20f2:	tst.w	r9, #8
    20f6:	it	ne
    20f8:	movne	r3, r2
    20fa:	str.w	r3, [r7, r8, lsl #3]
    20fe:	b.n	1f60 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2100:	bl	1cac <usb_free>
				packet = tx_first[endpoint];
    2104:	ldr	r2, [pc, #200]	; (21d0 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2106:	ldr	r1, [pc, #204]	; (21d4 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2108:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    210c:	cmp	r3, #0
    210e:	beq.w	2398 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2112:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2114:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2116:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    211a:	add.w	r2, r3, #8
    211e:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    2122:	cmp	r4, #3
    2124:	bhi.n	2132 <usb_isr+0x266>
    2126:	tbb	[pc, r4]
    212a:	.short	0x022c
    212c:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    212e:	movs	r2, #2
    2130:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    2132:	ldrh	r2, [r3, #0]
    2134:	tst.w	r9, #8
    2138:	ite	eq
    213a:	moveq	r3, #136	; 0x88
    213c:	movne	r3, #200	; 0xc8
    213e:	orr.w	r3, r3, r2, lsl #16
    2142:	str.w	r3, [r7, r8, lsl #3]
    2146:	b.n	1f60 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2148:	lsls	r0, r4, #31
    214a:	bmi.w	2334 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    214e:	lsls	r1, r4, #24
    2150:	bmi.w	23b4 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2154:	lsls	r2, r4, #30
    2156:	bpl.n	2166 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2158:	ldr	r2, [pc, #124]	; (21d8 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    215a:	ldr	r1, [pc, #128]	; (21dc <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    215c:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    215e:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2160:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    2162:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2164:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2166:	lsls	r3, r4, #27
    2168:	bpl.n	2170 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    216a:	ldr	r3, [pc, #112]	; (21dc <usb_isr+0x310>)
    216c:	movs	r2, #16
    216e:	strb	r2, [r3, #0]
	}

}
    2170:	add	sp, #28
    2172:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2176:	movs	r2, #4
    2178:	strb	r2, [r1, r6]
						break;
    217a:	b.n	2132 <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    217c:	movs	r2, #5
    217e:	strb	r2, [r1, r6]
						break;
    2180:	b.n	2132 <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    2182:	movs	r2, #3
    2184:	strb	r2, [r1, r6]
						break;
    2186:	b.n	2132 <usb_isr+0x266>
    2188:	.word	0x1fff0000
    218c:	.word	0x1fff168c
    2190:	.word	0x1fff1634
    2194:	.word	0x1fff1bb4
    2198:	.word	0x004000c8
    219c:	.word	0x00400088
    21a0:	.word	0x1fff1720
    21a4:	.word	0x1fff16a1
    21a8:	.word	0x1fff15b4
    21ac:	.word	0x1fff170c
    21b0:	.word	0x1fff1630
    21b4:	.word	0x1fff16a0
    21b8:	.word	0x400720c0
    21bc:	.word	0x1fff1718
    21c0:	.word	0x1fff1648
    21c4:	.word	0x1fff1714
    21c8:	.word	0x40072098
    21cc:	.word	0x40072094
    21d0:	.word	0x1fff16e4
    21d4:	.word	0x1fff1724
    21d8:	.word	0x40072088
    21dc:	.word	0x40072080
    21e0:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    21e4:	movw	r4, #8225	; 0x2021
    21e8:	cmp	r1, r4
    21ea:	beq.w	2326 <usb_isr+0x45a>
    21ee:	bhi.n	2284 <usb_isr+0x3b8>
    21f0:	cmp.w	r1, #2176	; 0x880
    21f4:	beq.w	248a <usb_isr+0x5be>
    21f8:	cmp.w	r1, #2304	; 0x900
    21fc:	bne.w	240a <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2200:	ldr	r2, [pc, #712]	; (24cc <usb_isr+0x600>)
    2202:	ldr	r4, [pc, #716]	; (24d0 <usb_isr+0x604>)
    2204:	ldrb	r1, [r5, #2]
    2206:	strb	r1, [r2, #0]
    2208:	add.w	r5, r4, #160	; 0xa0
    220c:	b.n	2216 <usb_isr+0x34a>
    220e:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2210:	cmp	r5, r4
    2212:	beq.w	2528 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    2216:	ldr	r3, [r4, #32]
    2218:	lsls	r1, r3, #24
    221a:	bpl.n	220e <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    221c:	ldr	r0, [r4, #36]	; 0x24
    221e:	subs	r0, #8
    2220:	bl	1cac <usb_free>
    2224:	b.n	220e <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2226:	cmp.w	lr, #64	; 0x40
    222a:	it	ne
    222c:	movne	r2, #0
    222e:	b.n	20ba <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2230:	ldr	r2, [pc, #672]	; (24d4 <usb_isr+0x608>)
    2232:	ldrb	r5, [r1, #0]
    2234:	ldrb	r0, [r1, #1]
    2236:	strb	r5, [r2, #0]
    2238:	strb	r0, [r2, #1]
    223a:	ldrb	r5, [r1, #2]
    223c:	ldrb	r0, [r1, #3]
    223e:	strb	r5, [r2, #2]
    2240:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2242:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2244:	ldrb	r5, [r1, #4]
    2246:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2248:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    224a:	ldrb	r5, [r1, #5]
    224c:	ldrb	r1, [r1, #6]
    224e:	strb	r5, [r2, #5]
    2250:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2252:	beq.w	2482 <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2256:	ldr	r1, [pc, #640]	; (24d8 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2258:	ldr	r6, [pc, #640]	; (24dc <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    225a:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    225c:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    225e:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2262:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2264:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2268:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    226a:	ite	eq
    226c:	moveq	r1, #136	; 0x88
    226e:	movne	r1, #200	; 0xc8
    2270:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2274:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2278:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    227c:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    227e:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2280:	str	r1, [r2, #4]
    2282:	b.n	20e0 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2284:	movw	r4, #8737	; 0x2221
    2288:	cmp	r1, r4
    228a:	bne.w	269e <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    228e:	ldr.w	ip, [pc, #656]	; 2520 <usb_isr+0x654>
    2292:	ldr	r3, [pc, #588]	; (24e0 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    2294:	ldr	r1, [pc, #588]	; (24e4 <usb_isr+0x618>)
    2296:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2298:	ldr.w	r5, [ip]
    229c:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    229e:	str	r0, [sp, #4]
    22a0:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    22a2:	movs	r0, #0
    22a4:	str	r0, [sp, #8]
    22a6:	mov	r8, r0
    22a8:	mov	ip, r0
    22aa:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    22ac:	ldr	r1, [pc, #552]	; (24d8 <usb_isr+0x60c>)
    22ae:	ldrb	r5, [r1, #0]
    22b0:	orr.w	lr, r5, #2
    22b4:	add.w	r3, r9, lr, lsl #3
    22b8:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22ba:	ldr	r3, [sp, #4]
    22bc:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    22be:	ldr	r3, [sp, #12]
    22c0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22c2:	ite	eq
    22c4:	moveq	r4, #136	; 0x88
    22c6:	movne	r4, #200	; 0xc8
    22c8:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    22cc:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22d0:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    22d4:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    22d6:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22d8:	ldr.w	lr, [pc, #500]	; 24d0 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    22dc:	ldr	r3, [pc, #508]	; (24dc <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    22de:	ldr.w	r8, [pc, #504]	; 24d8 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    22e2:	cmp	r0, #0
    22e4:	bne.w	2418 <usb_isr+0x54c>
    22e8:	cmp.w	ip, #64	; 0x40
    22ec:	bne.n	2326 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    22ee:	orr.w	ip, r4, #2
    22f2:	add.w	r3, r9, ip, lsl #3
    22f6:	ldr	r4, [sp, #8]
    22f8:	ldr.w	lr, [pc, #468]	; 24d0 <usb_isr+0x604>
    22fc:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22fe:	cmp	r2, #0
    2300:	bne.w	2444 <usb_isr+0x578>
    2304:	lsls	r2, r0, #16
    2306:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    230a:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    230e:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2312:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2314:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2316:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2318:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    231a:	cmp	r0, #64	; 0x40
    231c:	bne.n	2326 <usb_isr+0x45a>
    231e:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    2320:	ldr	r2, [pc, #452]	; (24e8 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    2322:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    2324:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2326:	ldr	r2, [pc, #452]	; (24ec <usb_isr+0x620>)
    2328:	movs	r3, #1
    232a:	strb	r3, [r2, #0]
    232c:	b.n	20e6 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    232e:	bl	108c <usb_serial_flush_callback>
    2332:	b.n	1fa0 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2334:	ldr	r3, [pc, #408]	; (24d0 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2336:	ldr	r0, [pc, #436]	; (24ec <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    2338:	ldr	r1, [pc, #412]	; (24d8 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    233a:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    233c:	mov.w	lr, #2
    2340:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2344:	ldr	r7, [pc, #424]	; (24f0 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    2346:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2348:	ldr	r1, [pc, #424]	; (24f4 <usb_isr+0x628>)
    234a:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    234c:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    234e:	ldr	r6, [pc, #424]	; (24f8 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    2350:	ldr	r5, [pc, #424]	; (24fc <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2352:	ldr	r4, [pc, #428]	; (2500 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    2354:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2356:	movs	r1, #13
    2358:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    235a:	movs	r1, #255	; 0xff
    235c:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    235e:	ldr.w	lr, [pc, #452]	; 2524 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    2362:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2364:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2366:	ldr	r5, [pc, #412]	; (2504 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2368:	ldr	r2, [pc, #412]	; (2508 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    236a:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    236e:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2370:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2372:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2376:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2378:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    237a:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    237c:	add	sp, #28
    237e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    2382:	ldr	r2, [pc, #392]	; (250c <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    2384:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    2388:	ldrb	r3, [r2, #0]
    238a:	adds	r3, #1
    238c:	strb	r3, [r2, #0]
    238e:	b.n	1f60 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    2390:	str.w	r0, [r3, r6, lsl #2]
    2394:	ldr	r5, [pc, #376]	; (2510 <usb_isr+0x644>)
    2396:	b.n	1f2e <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    2398:	ldrb	r3, [r1, r6]
    239a:	cmp	r3, #3
    239c:	bhi.n	2474 <usb_isr+0x5a8>
    239e:	add	r2, pc, #4	; (adr r2, 23a4 <usb_isr+0x4d8>)
    23a0:	ldr.w	pc, [r2, r3, lsl #2]
    23a4:	.word	0x00001f61
    23a8:	.word	0x00001f61
    23ac:	.word	0x000023f9
    23b0:	.word	0x000023f3
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    23b4:	ldr	r1, [pc, #312]	; (24f0 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    23b6:	ldr	r3, [pc, #324]	; (24fc <usb_isr+0x630>)
    23b8:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    23ba:	movs	r0, #13
    23bc:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    23be:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    23c0:	lsls	r2, r4, #30
    23c2:	bpl.w	2166 <usb_isr+0x29a>
    23c6:	b.n	2158 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    23c8:	movw	r2, #770	; 0x302
    23cc:	cmp	r1, r2
    23ce:	bne.w	268e <usb_isr+0x7c2>
    23d2:	ldrh	r1, [r5, #4]
    23d4:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    23d8:	cmp	r1, #5
    23da:	bhi.n	240a <usb_isr+0x53e>
    23dc:	ldrh	r2, [r5, #2]
    23de:	cbnz	r2, 240a <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    23e0:	ldr	r4, [pc, #268]	; (24f0 <usb_isr+0x624>)
    23e2:	str	r0, [sp, #4]
    23e4:	lsls	r1, r1, #2
    23e6:	add	r4, r1
    23e8:	ldrb	r1, [r4, #0]
    23ea:	orr.w	r1, r1, #2
    23ee:	strb	r1, [r4, #0]
    23f0:	b.n	22a2 <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    23f2:	movs	r3, #1
    23f4:	strb	r3, [r1, r6]
						break;
    23f6:	b.n	1f60 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    23f8:	movs	r3, #0
    23fa:	strb	r3, [r1, r6]
						break;
    23fc:	b.n	1f60 <usb_isr+0x94>
    23fe:	ldrh	r1, [r5, #4]
    2400:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2404:	cmp	r1, #5
    2406:	bls.w	26a8 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    240a:	ldr	r2, [pc, #228]	; (24f0 <usb_isr+0x624>)
    240c:	movs	r3, #15
    240e:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2410:	ldr	r2, [pc, #216]	; (24ec <usb_isr+0x620>)
    2412:	movs	r3, #1
    2414:	strb	r3, [r2, #0]
    2416:	b.n	20e6 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2418:	cmp	r0, #64	; 0x40
    241a:	bls.w	22ee <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    241e:	orr.w	r4, r4, #2
    2422:	add.w	r1, lr, r4, lsl #3
    2426:	ldr	r6, [sp, #8]
    2428:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    242a:	cbz	r2, 245c <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    242c:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2430:	ldr	r2, [pc, #224]	; (2514 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    2432:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2434:	mov	r3, r6
    2436:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2438:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    243c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    243e:	str.w	r2, [lr, r4, lsl #3]
    2442:	b.n	2320 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    2444:	ldrb.w	r3, [sp, #4]
    2448:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    244a:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    244c:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    244e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2450:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2454:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2456:	str.w	r2, [lr, ip, lsl #3]
    245a:	b.n	231a <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    245c:	ldrb.w	r1, [sp, #4]
    2460:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2462:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2464:	ldr	r2, [pc, #140]	; (24f4 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2466:	strb.w	r5, [r8]
    246a:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    246c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    246e:	str.w	r2, [lr, r4, lsl #3]
    2472:	b.n	2320 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    2474:	tst.w	r9, #8
    2478:	ite	eq
    247a:	moveq	r3, #2
    247c:	movne	r3, #3
    247e:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    2480:	b.n	1f60 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2482:	ldr	r2, [pc, #148]	; (2518 <usb_isr+0x64c>)
    2484:	movs	r1, #15
    2486:	strb	r1, [r2, #0]
    2488:	b.n	2256 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    248a:	ldr	r2, [pc, #64]	; (24cc <usb_isr+0x600>)
    248c:	ldr	r4, [pc, #140]	; (251c <usb_isr+0x650>)
    248e:	ldrb	r2, [r2, #0]
    2490:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2492:	ldrh	r2, [r5, #6]
    2494:	cmp	r2, r0
    2496:	bcs.w	285c <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    249a:	ldr	r1, [pc, #60]	; (24d8 <usb_isr+0x60c>)
    249c:	ldrb	r5, [r1, #0]
    249e:	cmp	r2, #64	; 0x40
    24a0:	mov	ip, r2
    24a2:	orr.w	lr, r5, #2
    24a6:	it	cs
    24a8:	movcs.w	ip, #64	; 0x40
    24ac:	add.w	r3, r4, ip
    24b0:	add.w	r0, r9, lr, lsl #3
    24b4:	str	r3, [sp, #8]
    24b6:	movs	r3, #1
    24b8:	str	r4, [r0, #4]
    24ba:	mov.w	r8, ip, lsl #16
    24be:	rsb	r0, ip, r2
    24c2:	str	r3, [sp, #4]
    24c4:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    24c6:	movs	r4, #200	; 0xc8
    24c8:	b.n	22c8 <usb_isr+0x3fc>
    24ca:	nop
    24cc:	.word	0x1fff1720
    24d0:	.word	0x1fff0000
    24d4:	.word	0x1fff1a7c
    24d8:	.word	0x1fff1714
    24dc:	.word	0x1fff16a0
    24e0:	.word	0x1fff1a84
    24e4:	.word	0x1fff15c4
    24e8:	.word	0x1fff1648
    24ec:	.word	0x40072094
    24f0:	.word	0x400720c0
    24f4:	.word	0x00400088
    24f8:	.word	0x40072088
    24fc:	.word	0x40072080
    2500:	.word	0x40072098
    2504:	.word	0x1fff164c
    2508:	.word	0x1fff16a4
    250c:	.word	0x1fff1715
    2510:	.word	0x1fff1634
    2514:	.word	0x004000c8
    2518:	.word	0x1fff16a1
    251c:	.word	0x1fff1718
    2520:	.word	0x1fff15cc
    2524:	.word	0x4007208c
    2528:	ldr	r4, [pc, #704]	; (27ec <usb_isr+0x920>)
    252a:	ldr	r2, [pc, #708]	; (27f0 <usb_isr+0x924>)
    252c:	ldr	r1, [pc, #708]	; (27f4 <usb_isr+0x928>)
    252e:	ldr	r0, [pc, #712]	; (27f8 <usb_isr+0x92c>)
    2530:	ldr	r5, [pc, #712]	; (27fc <usb_isr+0x930>)
    2532:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2534:	movs	r3, #0
    2536:	ldr	r4, [pc, #712]	; (2800 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2538:	str	r4, [sp, #8]
    253a:	str	r6, [sp, #20]
    253c:	str	r5, [sp, #12]
    253e:	mov	r8, r0
    2540:	mov	r4, r3
    2542:	str	r7, [sp, #16]
    2544:	mov	r6, r2
    2546:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    2548:	ldr	r0, [r6, #0]
			while (p) {
    254a:	cbz	r0, 2558 <usb_isr+0x68c>
				n = p->next;
    254c:	ldr	r7, [r0, #4]
				usb_free(p);
    254e:	bl	1cac <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    2552:	mov	r0, r7
    2554:	cmp	r7, #0
    2556:	bne.n	254c <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    2558:	movs	r3, #0
    255a:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    255c:	ldr	r3, [sp, #12]
			p = tx_first[i];
    255e:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    2560:	mov	r2, r3
    2562:	movs	r3, #0
    2564:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    2568:	cbz	r0, 2576 <usb_isr+0x6aa>
				n = p->next;
    256a:	ldr	r7, [r0, #4]
				usb_free(p);
    256c:	bl	1cac <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    2570:	mov	r0, r7
    2572:	cmp	r7, #0
    2574:	bne.n	256a <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    2576:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2578:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    257a:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    257c:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    257e:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    2582:	ldr	r2, [sp, #8]
    2584:	mov.w	r1, #0
			switch (tx_state[i]) {
    2588:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    258a:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    258e:	cmp	r3, #3
    2590:	bhi.n	25a2 <usb_isr+0x6d6>
    2592:	tbb	[pc, r3]
    2596:	.short	0x0258
    2598:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    259a:	ldr	r3, [sp, #4]
    259c:	mov.w	r2, #1
    25a0:	strb	r2, [r3, #0]
    25a2:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    25a4:	adds	r4, #1
    25a6:	adds	r3, #1
    25a8:	cmp	r4, #5
    25aa:	add.w	r6, r6, #4
    25ae:	add.w	r5, r5, #4
    25b2:	str	r3, [sp, #4]
    25b4:	bne.n	2548 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    25b6:	ldr	r4, [pc, #588]	; (2804 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    25b8:	ldr	r5, [pc, #588]	; (2808 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    25ba:	ldrb	r2, [r4, #0]
			*reg = epconf;
    25bc:	ldr	r3, [pc, #588]	; (280c <usb_isr+0x940>)
    25be:	ldr	r7, [sp, #16]
    25c0:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    25c2:	movs	r1, #0
    25c4:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    25c6:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    25c8:	lsls	r2, r2, #28
    25ca:	bmi.n	26c2 <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    25cc:	ldrb	r2, [r4, #1]
			*reg = epconf;
    25ce:	ldr	r1, [pc, #576]	; (2810 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    25d0:	ldr.w	r8, [pc, #588]	; 2820 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    25d4:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    25d6:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    25d8:	mov.w	r1, #0
    25dc:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    25e0:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    25e4:	bmi.w	276e <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    25e8:	ldrb	r2, [r4, #2]
			*reg = epconf;
    25ea:	ldr	r1, [pc, #552]	; (2814 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    25ec:	ldr.w	r8, [pc, #560]	; 2820 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    25f0:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    25f2:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    25f4:	mov.w	r1, #0
    25f8:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    25fc:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2600:	bmi.w	2746 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2604:	ldr	r1, [pc, #528]	; (2818 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2606:	ldrb	r2, [r4, #3]
			*reg = epconf;
    2608:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    260a:	movs	r1, #0
    260c:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    2610:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2614:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2616:	ldr.w	r8, [pc, #520]	; 2820 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    261a:	bmi.n	2718 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    261c:	ldrb	r2, [r4, #4]
			*reg = epconf;
    261e:	ldr	r1, [pc, #508]	; (281c <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2620:	ldr	r4, [pc, #508]	; (2820 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2622:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2624:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2626:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2628:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    262c:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2630:	bmi.n	26ee <usb_isr+0x822>
    2632:	ldrb	r3, [r6, #0]
    2634:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2636:	movs	r1, #0
    2638:	eor.w	r2, r3, #1
    263c:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    2640:	str.w	r1, [r9, #184]	; 0xb8
    2644:	b.n	22a2 <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2646:	ldr	r3, [sp, #4]
    2648:	mov.w	r2, #0
    264c:	strb	r2, [r3, #0]
    264e:	b.n	25a2 <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    2650:	ldr	r2, [pc, #464]	; (2824 <usb_isr+0x958>)
    2652:	ldr	r4, [r2, #4]
    2654:	cmp	r4, #0
    2656:	beq.w	240a <usb_isr+0x53e>
    265a:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    265c:	ldrh.w	lr, [r5, #4]
    2660:	b.n	266c <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    2662:	adds	r2, #12
			if (list->addr == NULL) break;
    2664:	ldr	r4, [r2, #4]
    2666:	cmp	r4, #0
    2668:	beq.w	240a <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    266c:	ldrh	r3, [r2, #0]
    266e:	cmp	r3, r0
    2670:	bne.n	2662 <usb_isr+0x796>
    2672:	ldrh	r3, [r2, #2]
    2674:	cmp	r3, lr
    2676:	bne.n	2662 <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    2678:	lsrs	r0, r0, #8
    267a:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    267c:	ite	eq
    267e:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    2680:	ldrhne	r0, [r2, #8]
    2682:	b.n	2492 <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2684:	ldr	r4, [pc, #416]	; (2828 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    2686:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2688:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    268a:	strb	r2, [r4, #1]
    268c:	b.n	2492 <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    268e:	cmp.w	r1, #1280	; 0x500
    2692:	bne.w	240a <usb_isr+0x53e>
    2696:	movs	r3, #1
    2698:	movs	r2, #0
    269a:	str	r3, [sp, #4]
    269c:	b.n	22a2 <usb_isr+0x3d6>
    269e:	movw	r2, #8993	; 0x2321
    26a2:	cmp	r1, r2
    26a4:	beq.n	2696 <usb_isr+0x7ca>
    26a6:	b.n	240a <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    26a8:	ldrh	r2, [r5, #2]
    26aa:	cmp	r2, #0
    26ac:	bne.w	240a <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    26b0:	ldr	r4, [pc, #376]	; (282c <usb_isr+0x960>)
    26b2:	str	r0, [sp, #4]
    26b4:	lsls	r1, r1, #2
    26b6:	add	r4, r1
    26b8:	ldrb	r1, [r4, #0]
    26ba:	bic.w	r1, r1, #2
    26be:	strb	r1, [r4, #0]
    26c0:	b.n	22a2 <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    26c2:	bl	1c6c <usb_malloc>
				if (p) {
    26c6:	cmp	r0, #0
    26c8:	beq.w	2838 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    26cc:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    26ce:	ldr	r2, [pc, #352]	; (2830 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    26d0:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    26d4:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    26d8:	bl	1c6c <usb_malloc>
				if (p) {
    26dc:	cmp	r0, #0
    26de:	beq.n	27e0 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    26e0:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    26e2:	ldr	r2, [pc, #336]	; (2834 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    26e4:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    26e8:	str.w	r2, [r9, #40]	; 0x28
    26ec:	b.n	25cc <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    26ee:	bl	1c6c <usb_malloc>
				if (p) {
    26f2:	cmp	r0, #0
    26f4:	beq.n	27a4 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    26f6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    26f8:	ldr	r2, [pc, #308]	; (2830 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    26fa:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    26fe:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2702:	bl	1c6c <usb_malloc>
				if (p) {
    2706:	cmp	r0, #0
    2708:	beq.n	2798 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    270a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    270c:	ldr	r2, [pc, #292]	; (2834 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    270e:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2712:	str.w	r2, [r9, #168]	; 0xa8
    2716:	b.n	2632 <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2718:	bl	1c6c <usb_malloc>
				if (p) {
    271c:	cmp	r0, #0
    271e:	beq.w	2850 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    2722:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2724:	ldr	r2, [pc, #264]	; (2830 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2726:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    272a:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    272e:	bl	1c6c <usb_malloc>
				if (p) {
    2732:	cmp	r0, #0
    2734:	beq.w	2844 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    2738:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    273a:	ldr	r2, [pc, #248]	; (2834 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    273c:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2740:	str.w	r2, [r9, #136]	; 0x88
    2744:	b.n	261c <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2746:	bl	1c6c <usb_malloc>
				if (p) {
    274a:	cmp	r0, #0
    274c:	beq.n	27d4 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    274e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2750:	ldr	r2, [pc, #220]	; (2830 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2752:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2756:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    275a:	bl	1c6c <usb_malloc>
				if (p) {
    275e:	cbz	r0, 27c8 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    2760:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2762:	ldr	r2, [pc, #208]	; (2834 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2764:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2768:	str.w	r2, [r9, #104]	; 0x68
    276c:	b.n	2604 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    276e:	bl	1c6c <usb_malloc>
				if (p) {
    2772:	cbz	r0, 27bc <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    2774:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2776:	ldr	r2, [pc, #184]	; (2830 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2778:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    277c:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2780:	bl	1c6c <usb_malloc>
				if (p) {
    2784:	cbz	r0, 27b0 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    2786:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2788:	ldr	r2, [pc, #168]	; (2834 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    278a:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    278e:	str.w	r2, [r9, #72]	; 0x48
    2792:	b.n	25e8 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    2794:	movs	r0, #2
    2796:	b.n	2492 <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2798:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    279a:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    279e:	adds	r2, #1
    27a0:	strb	r2, [r5, #0]
    27a2:	b.n	2632 <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    27a4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    27a6:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    27aa:	adds	r2, #1
    27ac:	strb	r2, [r5, #0]
    27ae:	b.n	2702 <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    27b0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    27b2:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    27b6:	adds	r2, #1
    27b8:	strb	r2, [r5, #0]
    27ba:	b.n	25e8 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    27bc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    27be:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    27c2:	adds	r2, #1
    27c4:	strb	r2, [r5, #0]
    27c6:	b.n	2780 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    27c8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    27ca:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    27ce:	adds	r2, #1
    27d0:	strb	r2, [r5, #0]
    27d2:	b.n	2604 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    27d4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    27d6:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    27da:	adds	r2, #1
    27dc:	strb	r2, [r5, #0]
    27de:	b.n	275a <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    27e0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    27e2:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    27e6:	adds	r2, #1
    27e8:	strb	r2, [r5, #0]
    27ea:	b.n	25cc <usb_isr+0x700>
    27ec:	.word	0x1fff1724
    27f0:	.word	0x1fff168c
    27f4:	.word	0x1fff16e4
    27f8:	.word	0x1fff16f8
    27fc:	.word	0x1fff1634
    2800:	.word	0x1fff1bb4
    2804:	.word	0x0000419c
    2808:	.word	0x1fff1715
    280c:	.word	0x400720c4
    2810:	.word	0x400720c8
    2814:	.word	0x400720cc
    2818:	.word	0x400720d0
    281c:	.word	0x400720d4
    2820:	.word	0x1fff0000
    2824:	.word	0x000041a4
    2828:	.word	0x1fff1718
    282c:	.word	0x400720c0
    2830:	.word	0x00400088
    2834:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2838:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    283a:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    283e:	adds	r2, #1
    2840:	strb	r2, [r5, #0]
    2842:	b.n	26d8 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2844:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2846:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    284a:	adds	r2, #1
    284c:	strb	r2, [r5, #0]
    284e:	b.n	261c <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2850:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2852:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    2856:	adds	r2, #1
    2858:	strb	r2, [r5, #0]
    285a:	b.n	272e <usb_isr+0x862>
    285c:	cmp	r0, #64	; 0x40
    285e:	mov	ip, r0
    2860:	it	cs
    2862:	movcs.w	ip, #64	; 0x40
    2866:	add.w	r3, r4, ip
    286a:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    286c:	movs	r3, #1
    286e:	rsb	r0, ip, r0
    2872:	mov.w	r8, ip, lsl #16
    2876:	movs	r2, #0
    2878:	str	r3, [sp, #4]
    287a:	b.n	22ac <usb_isr+0x3e0>

0000287c <usb_init>:
}



void usb_init(void)
{
    287c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2880:	ldr	r4, [pc, #156]	; (2920 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    2882:	bl	3154 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2886:	movs	r2, #0
    2888:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    288c:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    288e:	str	r2, [r3, #0]
		table[i].addr = 0;
    2890:	str	r2, [r3, #4]
    2892:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    2894:	cmp	r3, r0
		table[i].desc = 0;
    2896:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    289a:	bne.n	288e <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    289c:	ldr	r0, [pc, #132]	; (2924 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    289e:	ldr	r2, [pc, #136]	; (2928 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    28a0:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    28a2:	ldr.w	lr, [pc, #156]	; 2940 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    28a6:	ldr	r6, [pc, #132]	; (292c <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    28a8:	ldr	r5, [pc, #132]	; (2930 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    28aa:	ldr	r7, [pc, #136]	; (2934 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    28ac:	ldr.w	ip, [pc, #148]	; 2944 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    28b0:	ldr.w	r8, [pc, #148]	; 2948 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    28b4:	orr.w	r3, r3, #262144	; 0x40000
    28b8:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    28ba:	ldr	r3, [r2, #0]
    28bc:	orr.w	r3, r3, #50331648	; 0x3000000
    28c0:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    28c2:	movs	r3, #3
    28c4:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    28c8:	movs	r3, #160	; 0xa0
    28ca:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    28cc:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    28d0:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    28d4:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    28d8:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    28da:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    28dc:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    28e0:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    28e2:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    28e4:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    28e6:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    28e8:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    28ea:	ldr	r5, [pc, #76]	; (2938 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    28ec:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    28f0:	ldr	r0, [pc, #72]	; (293c <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    28f2:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    28f6:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    28f8:	movs	r3, #1
    28fa:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    28fe:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2902:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2906:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2908:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    290a:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    290e:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2910:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2912:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2916:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    291a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    291e:	nop
    2920:	.word	0x1fff0000
    2924:	.word	0x40048034
    2928:	.word	0x4000d800
    292c:	.word	0x40072140
    2930:	.word	0x4007209c
    2934:	.word	0x400720b0
    2938:	.word	0xe000e435
    293c:	.word	0xe000e104
    2940:	.word	0x40072144
    2944:	.word	0x40072080
    2948:	.word	0x40072088

0000294c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    294c:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    294e:	ldr	r4, [pc, #176]	; (2a00 <yield+0xb4>)
    2950:	ldrb	r3, [r4, #0]
    2952:	cbz	r3, 2956 <yield+0xa>
    2954:	pop	{r3, r4, r5, pc}
	running = 1;
    2956:	movs	r3, #1
    2958:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    295a:	bl	e78 <usb_serial_available>
	if (Serial.available()) serialEvent();
    295e:	cmp	r0, #0
    2960:	bne.n	29e8 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    2962:	bl	2f24 <serial_available>
	if (Serial1.available()) serialEvent1();
    2966:	cmp	r0, #0
    2968:	bne.n	29e2 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    296a:	bl	2c0c <serial2_available>
	if (Serial2.available()) serialEvent2();
    296e:	cmp	r0, #0
    2970:	bne.n	29dc <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    2972:	bl	3224 <serial3_available>
	if (Serial3.available()) serialEvent3();
    2976:	cbnz	r0, 29d6 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    2978:	bl	2d38 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    297c:	cbnz	r0, 29d0 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    297e:	bl	2b14 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2982:	cbnz	r0, 29ca <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    2984:	bl	3050 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2988:	cbnz	r0, 29c4 <yield+0x78>
#endif
	running = 0;
    298a:	movs	r3, #0
    298c:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    298e:	mrs	r3, IPSR
		if (ipsr != 0) return;
    2992:	cmp	r3, #0
    2994:	bne.n	2954 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2996:	mrs	r1, PRIMASK
		__disable_irq();
    299a:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    299c:	ldr	r3, [pc, #100]	; (2a04 <yield+0xb8>)
    299e:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    29a0:	cbz	r0, 29ee <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    29a2:	ldr	r4, [pc, #100]	; (2a08 <yield+0xbc>)
    29a4:	ldrb	r2, [r4, #0]
    29a6:	cbnz	r2, 29ee <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    29a8:	ldr	r5, [r0, #20]
    29aa:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    29ac:	movs	r3, #1
    29ae:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    29b0:	cbz	r5, 29f6 <yield+0xaa>
			firstYield->_prev = nullptr;
    29b2:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    29b4:	cbnz	r1, 29b8 <yield+0x6c>
    29b6:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    29b8:	movs	r5, #0
    29ba:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    29bc:	ldr	r3, [r0, #8]
    29be:	blx	r3
		runningFromYield = false;
    29c0:	strb	r5, [r4, #0]
    29c2:	b.n	2954 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    29c4:	bl	2b08 <serialEvent6()>
    29c8:	b.n	298a <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    29ca:	bl	2a10 <serialEvent5()>
    29ce:	b.n	2984 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    29d0:	bl	2af4 <serialEvent4()>
    29d4:	b.n	297e <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    29d6:	bl	3320 <serialEvent3()>
    29da:	b.n	2978 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    29dc:	bl	2af0 <serialEvent2()>
    29e0:	b.n	2972 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    29e2:	bl	331c <serialEvent1()>
    29e6:	b.n	296a <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    29e8:	bl	2a3c <serialEvent()>
    29ec:	b.n	2962 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    29ee:	cmp	r1, #0
    29f0:	bne.n	2954 <yield+0x8>
    29f2:	cpsie	i
    29f4:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    29f6:	ldr	r3, [pc, #20]	; (2a0c <yield+0xc0>)
    29f8:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    29fa:	cmp	r1, #0
    29fc:	bne.n	29b8 <yield+0x6c>
    29fe:	b.n	29b6 <yield+0x6a>
    2a00:	.word	0x1fff1729
    2a04:	.word	0x1fff1a3c
    2a08:	.word	0x1fff1a40
    2a0c:	.word	0x1fff1a38

00002a10 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    2a10:	bx	lr
    2a12:	nop

00002a14 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    2a14:	b.w	e94 <usb_serial_flush_input>

00002a18 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    2a18:	b.w	e48 <usb_serial_peekchar>

00002a1c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    2a1c:	b.w	e00 <usb_serial_getchar>

00002a20 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2a20:	b.w	e78 <usb_serial_available>

00002a24 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2a24:	b.w	1034 <usb_serial_flush_output>

00002a28 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2a28:	b.w	fec <usb_serial_write_buffer_free>

00002a2c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2a2c:	mov	r0, r1
    2a2e:	mov	r1, r2
    2a30:	b.w	ecc <usb_serial_write>

00002a34 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2a34:	mov	r0, r1
    2a36:	b.w	fd4 <usb_serial_putchar>
    2a3a:	nop

00002a3c <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    2a3c:	bx	lr
    2a3e:	nop

00002a40 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2a40:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    2a42:	ldr	r2, [pc, #24]	; (2a5c <Print::println()+0x1c>)
	return write(buf, 2);
    2a44:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2a46:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    2a48:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2a4a:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    2a4c:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2a4e:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    2a52:	movs	r2, #2
    2a54:	blx	r3
}
    2a56:	add	sp, #12
    2a58:	ldr.w	pc, [sp], #4
    2a5c:	.word	0x00004198

00002a60 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    2a60:	push	{r4, r5, r6, r7, lr}
    2a62:	mov	r7, r0
    2a64:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    2a66:	cmp	r2, #0
    2a68:	beq.n	2ad2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    2a6a:	cmp	r2, #1
    2a6c:	it	eq
    2a6e:	moveq	r2, #10
	}


	if (n == 0) {
    2a70:	cbz	r1, 2ac8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    2a72:	movs	r4, #33	; 0x21
    2a74:	b.n	2a78 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    2a76:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    2a78:	udiv	r5, r1, r2
    2a7c:	mls	r1, r2, r5, r1
    2a80:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2a82:	cmp	r1, #9
    2a84:	add.w	r1, r0, #48	; 0x30
    2a88:	it	ls
    2a8a:	uxtbls	r0, r1
    2a8c:	add	r1, sp, #40	; 0x28
    2a8e:	it	hi
    2a90:	addhi	r0, #55	; 0x37
    2a92:	add	r1, r4
    2a94:	it	hi
    2a96:	uxtbhi	r0, r0
    2a98:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    2a9c:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    2a9e:	mov	r1, r5
    2aa0:	cmp	r5, #0
    2aa2:	bne.n	2a76 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    2aa4:	cbz	r3, 2ab4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    2aa6:	subs	r4, #1
    2aa8:	uxtb	r4, r4
		buf[i] = '-';
    2aaa:	add	r3, sp, #40	; 0x28
    2aac:	add	r3, r4
    2aae:	movs	r2, #45	; 0x2d
    2ab0:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    2ab4:	ldr	r3, [r7, #0]
    2ab6:	add	r2, sp, #4
    2ab8:	adds	r1, r2, r4
    2aba:	ldr	r3, [r3, #4]
    2abc:	mov	r0, r7
    2abe:	rsb	r2, r4, #34	; 0x22
    2ac2:	blx	r3
}
    2ac4:	add	sp, #44	; 0x2c
    2ac6:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2ac8:	movs	r2, #48	; 0x30
    2aca:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    2ace:	movs	r4, #33	; 0x21
    2ad0:	b.n	2aa4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    2ad2:	ldr	r3, [r0, #0]
    2ad4:	uxtb	r1, r1
    2ad6:	ldr	r3, [r3, #0]
    2ad8:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    2ada:	add	sp, #44	; 0x2c
    2adc:	pop	{r4, r5, r6, r7, pc}
    2ade:	nop

00002ae0 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    2ae0:	cmp	r1, #0
		sign = '-';
		n = -n;
    2ae2:	itte	lt
    2ae4:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    2ae6:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    2ae8:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    2aea:	movs	r2, #10
    2aec:	b.w	2a60 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00002af0 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    2af0:	bx	lr
    2af2:	nop

00002af4 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    2af4:	bx	lr
    2af6:	nop

00002af8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2af8:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    2afa:	bl	8a0 <setup>
	while (1) {
		loop();
    2afe:	bl	8a4 <loop>
		yield();
    2b02:	bl	294c <yield>
    2b06:	b.n	2afe <main+0x6>

00002b08 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    2b08:	bx	lr
    2b0a:	nop

00002b0c <operator new(unsigned int)>:
    2b0c:	b.w	3574 <malloc>

00002b10 <operator delete(void*, unsigned int)>:
    2b10:	b.w	3584 <free>

00002b14 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2b14:	ldr	r2, [pc, #20]	; (2b2c <serial5_available+0x18>)
	tail = rx_buffer_tail;
    2b16:	ldr	r3, [pc, #24]	; (2b30 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2b18:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2b1a:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2b1c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2b1e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2b20:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    2b22:	it	cc
    2b24:	addcc	r0, #64	; 0x40
    2b26:	subs	r0, r0, r3
}
    2b28:	bx	lr
    2b2a:	nop
    2b2c:	.word	0x1fff1730
    2b30:	.word	0x1fff1731

00002b34 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    2b34:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    2b36:	ldr	r3, [pc, #172]	; (2be4 <uart4_status_isr+0xb0>)
    2b38:	ldrb	r2, [r3, #4]
    2b3a:	lsls	r4, r2, #26
    2b3c:	bpl.n	2b7e <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2b3e:	ldr	r0, [pc, #168]	; (2be8 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2b40:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2b42:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2b44:	ldr	r1, [pc, #164]	; (2bec <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2b46:	adds	r3, #1
    2b48:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2b4a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2b4c:	it	gt
    2b4e:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2b50:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2b52:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2b54:	beq.n	2b5e <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    2b56:	ldr	r4, [pc, #152]	; (2bf0 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    2b58:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2b5a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2b5c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2b5e:	ldr	r2, [pc, #148]	; (2bf4 <uart4_status_isr+0xc0>)
    2b60:	ldr	r1, [r2, #0]
    2b62:	cbz	r1, 2b7e <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2b64:	ldr	r2, [pc, #144]	; (2bf8 <uart4_status_isr+0xc4>)
    2b66:	ldrb	r2, [r2, #0]
    2b68:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2b6a:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2b6c:	itet	cc
    2b6e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2b72:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2b74:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2b76:	cmp	r3, #39	; 0x27
    2b78:	itt	gt
    2b7a:	movgt	r3, #1
    2b7c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    2b7e:	ldr	r2, [pc, #100]	; (2be4 <uart4_status_isr+0xb0>)
    2b80:	ldrb	r3, [r2, #3]
    2b82:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2b84:	lsls	r0, r3, #24
    2b86:	bmi.n	2bac <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    2b88:	lsls	r2, r3, #25
    2b8a:	bpl.n	2ba8 <uart4_status_isr+0x74>
    2b8c:	ldr	r3, [pc, #84]	; (2be4 <uart4_status_isr+0xb0>)
    2b8e:	ldrb	r3, [r3, #4]
    2b90:	lsls	r3, r3, #25
    2b92:	bpl.n	2ba8 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2b94:	ldr	r3, [pc, #100]	; (2bfc <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2b96:	ldr	r1, [pc, #104]	; (2c00 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2b98:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2b9a:	movs	r2, #0
    2b9c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2b9e:	cbz	r3, 2ba2 <uart4_status_isr+0x6e>
    2ba0:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    2ba2:	ldr	r3, [pc, #64]	; (2be4 <uart4_status_isr+0xb0>)
    2ba4:	movs	r2, #44	; 0x2c
    2ba6:	strb	r2, [r3, #3]
	}
}
    2ba8:	pop	{r4, r5}
    2baa:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2bac:	ldrb	r1, [r2, #4]
    2bae:	lsls	r1, r1, #24
    2bb0:	bpl.n	2b88 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    2bb2:	ldr	r1, [pc, #80]	; (2c04 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2bb4:	ldr	r0, [pc, #64]	; (2bf8 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2bb6:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2bb8:	ldrb	r1, [r0, #0]
    2bba:	uxtb	r1, r1
		if (head == tail) {
    2bbc:	cmp	r4, r1
    2bbe:	beq.n	2bdc <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    2bc0:	adds	r2, r1, #1
    2bc2:	cmp	r2, #39	; 0x27
    2bc4:	itt	hi
    2bc6:	movhi	r1, #0
    2bc8:	movhi	r2, r1
			n = tx_buffer[tail];
    2bca:	ldr	r5, [pc, #60]	; (2c08 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2bcc:	ldr	r4, [pc, #20]	; (2be4 <uart4_status_isr+0xb0>)
    2bce:	it	ls
    2bd0:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2bd2:	ldrb	r2, [r5, r2]
    2bd4:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2bd6:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    2bd8:	strb	r1, [r0, #0]
    2bda:	b.n	2b88 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    2bdc:	movs	r1, #108	; 0x6c
    2bde:	strb	r1, [r2, #3]
    2be0:	b.n	2b88 <uart4_status_isr+0x54>
    2be2:	nop
    2be4:	.word	0x400ea000
    2be8:	.word	0x1fff1730
    2bec:	.word	0x1fff1731
    2bf0:	.word	0x1fff175c
    2bf4:	.word	0x1fff172c
    2bf8:	.word	0x1fff179d
    2bfc:	.word	0x1fff17a0
    2c00:	.word	0x1fff179c
    2c04:	.word	0x1fff17a4
    2c08:	.word	0x1fff1734

00002c0c <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2c0c:	ldr	r2, [pc, #20]	; (2c24 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    2c0e:	ldr	r3, [pc, #24]	; (2c28 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2c10:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2c12:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2c14:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2c16:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2c18:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    2c1a:	it	cc
    2c1c:	addcc	r0, #64	; 0x40
    2c1e:	subs	r0, r0, r3
}
    2c20:	bx	lr
    2c22:	nop
    2c24:	.word	0x1fff1818
    2c28:	.word	0x1fff17ad

00002c2c <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    2c2c:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    2c2e:	ldr	r3, [pc, #224]	; (2d10 <uart1_status_isr+0xe4>)
    2c30:	ldrb	r2, [r3, #4]
    2c32:	tst.w	r2, #48	; 0x30
    2c36:	beq.n	2c92 <uart1_status_isr+0x66>
		__disable_irq();
    2c38:	cpsid	i
		avail = UART1_RCFIFO;
    2c3a:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    2c3c:	and.w	r2, r1, #255	; 0xff
    2c40:	cmp	r1, #0
    2c42:	beq.n	2cc0 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    2c44:	cpsie	i
			head = rx_buffer_head;
    2c46:	ldr	r7, [pc, #204]	; (2d14 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    2c48:	ldr	r1, [pc, #204]	; (2d18 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2c4a:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    2c4c:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2c4e:	ldr	r6, [pc, #204]	; (2d1c <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2c50:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2c52:	uxtb	r0, r0
			tail = rx_buffer_tail;
    2c54:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    2c56:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2c58:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2c5a:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2c5c:	it	cs
    2c5e:	movcs	r3, #0
				if (newhead != tail) {
    2c60:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    2c62:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2c66:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2c68:	itt	ne
    2c6a:	strbne	r1, [r6, r3]
    2c6c:	movne	r0, r3
				}
			} while (--avail > 0);
    2c6e:	ands.w	r2, r2, #255	; 0xff
    2c72:	bne.n	2c56 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    2c74:	ldr	r3, [pc, #168]	; (2d20 <uart1_status_isr+0xf4>)
    2c76:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    2c78:	uxtb	r2, r0
    2c7a:	strb	r2, [r7, #0]
			if (rts_pin) {
    2c7c:	cbz	r3, 2c92 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    2c7e:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2c80:	itet	cc
    2c82:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    2c86:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2c88:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2c8a:	cmp	r0, #39	; 0x27
    2c8c:	itt	gt
    2c8e:	movgt	r2, #1
    2c90:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    2c92:	ldr	r1, [pc, #124]	; (2d10 <uart1_status_isr+0xe4>)
    2c94:	ldrb	r2, [r1, #3]
    2c96:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2c98:	lsls	r5, r2, #24
    2c9a:	bmi.n	2cca <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    2c9c:	lsls	r2, r2, #25
    2c9e:	bpl.n	2cbc <uart1_status_isr+0x90>
    2ca0:	ldr	r3, [pc, #108]	; (2d10 <uart1_status_isr+0xe4>)
    2ca2:	ldrb	r3, [r3, #4]
    2ca4:	lsls	r3, r3, #25
    2ca6:	bpl.n	2cbc <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2ca8:	ldr	r3, [pc, #120]	; (2d24 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2caa:	ldr	r1, [pc, #124]	; (2d28 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    2cac:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2cae:	movs	r2, #0
    2cb0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2cb2:	cbz	r3, 2cb6 <uart1_status_isr+0x8a>
    2cb4:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    2cb6:	ldr	r3, [pc, #88]	; (2d10 <uart1_status_isr+0xe4>)
    2cb8:	movs	r2, #60	; 0x3c
    2cba:	strb	r2, [r3, #3]
	}
}
    2cbc:	pop	{r4, r5, r6, r7}
    2cbe:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2cc0:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    2cc2:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2cc4:	strb	r2, [r3, #17]
			__enable_irq();
    2cc6:	cpsie	i
    2cc8:	b.n	2c92 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2cca:	ldrb	r3, [r1, #4]
    2ccc:	lsls	r4, r3, #24
    2cce:	bpl.n	2c9c <uart1_status_isr+0x70>
		head = tx_buffer_head;
    2cd0:	ldr	r3, [pc, #88]	; (2d2c <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    2cd2:	ldr	r6, [pc, #92]	; (2d30 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2cd4:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    2cd6:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2cd8:	uxtb	r4, r4
		tail = tx_buffer_tail;
    2cda:	uxtb	r3, r3
		do {
			if (tail == head) break;
    2cdc:	cmp	r4, r3
    2cde:	beq.n	2cfe <uart1_status_isr+0xd2>
    2ce0:	ldr	r5, [pc, #80]	; (2d34 <uart1_status_isr+0x108>)
    2ce2:	b.n	2ce8 <uart1_status_isr+0xbc>
    2ce4:	cmp	r3, r4
    2ce6:	beq.n	2cfe <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    2ce8:	adds	r3, #1
    2cea:	cmp	r3, #40	; 0x28
    2cec:	it	cs
    2cee:	movcs	r3, #0
			avail = UART1_S1;
    2cf0:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    2cf2:	ldrb	r0, [r5, r3]
    2cf4:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    2cf6:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    2cf8:	ldrb	r0, [r1, #20]
    2cfa:	cmp	r0, #7
    2cfc:	bls.n	2ce4 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    2cfe:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2d00:	ldr	r1, [pc, #12]	; (2d10 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    2d02:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2d04:	ldrb	r3, [r1, #4]
    2d06:	lsls	r0, r3, #24
    2d08:	itt	mi
    2d0a:	movmi	r3, #124	; 0x7c
    2d0c:	strbmi	r3, [r1, #3]
    2d0e:	b.n	2c9c <uart1_status_isr+0x70>
    2d10:	.word	0x4006b000
    2d14:	.word	0x1fff1818
    2d18:	.word	0x1fff17ad
    2d1c:	.word	0x1fff17d8
    2d20:	.word	0x1fff17a8
    2d24:	.word	0x1fff181c
    2d28:	.word	0x1fff17ac
    2d2c:	.word	0x1fff1820
    2d30:	.word	0x1fff1819
    2d34:	.word	0x1fff17b0

00002d38 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2d38:	ldr	r2, [pc, #20]	; (2d50 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    2d3a:	ldr	r3, [pc, #24]	; (2d54 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2d3c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2d3e:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2d40:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2d42:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2d44:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    2d46:	it	cc
    2d48:	addcc	r0, #64	; 0x40
    2d4a:	subs	r0, r0, r3
}
    2d4c:	bx	lr
    2d4e:	nop
    2d50:	.word	0x1fff1828
    2d54:	.word	0x1fff1829

00002d58 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    2d58:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    2d5a:	ldr	r3, [pc, #172]	; (2e08 <uart3_status_isr+0xb0>)
    2d5c:	ldrb	r2, [r3, #4]
    2d5e:	lsls	r4, r2, #26
    2d60:	bpl.n	2da2 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2d62:	ldr	r0, [pc, #168]	; (2e0c <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2d64:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2d66:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2d68:	ldr	r1, [pc, #164]	; (2e10 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2d6a:	adds	r3, #1
    2d6c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2d6e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2d70:	it	gt
    2d72:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2d74:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2d76:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2d78:	beq.n	2d82 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    2d7a:	ldr	r4, [pc, #152]	; (2e14 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    2d7c:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2d7e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2d80:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2d82:	ldr	r2, [pc, #148]	; (2e18 <uart3_status_isr+0xc0>)
    2d84:	ldr	r1, [r2, #0]
    2d86:	cbz	r1, 2da2 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2d88:	ldr	r2, [pc, #144]	; (2e1c <uart3_status_isr+0xc4>)
    2d8a:	ldrb	r2, [r2, #0]
    2d8c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2d8e:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2d90:	itet	cc
    2d92:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2d96:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2d98:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2d9a:	cmp	r3, #39	; 0x27
    2d9c:	itt	gt
    2d9e:	movgt	r3, #1
    2da0:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    2da2:	ldr	r2, [pc, #100]	; (2e08 <uart3_status_isr+0xb0>)
    2da4:	ldrb	r3, [r2, #3]
    2da6:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    2da8:	lsls	r0, r3, #24
    2daa:	bmi.n	2dd0 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    2dac:	lsls	r2, r3, #25
    2dae:	bpl.n	2dcc <uart3_status_isr+0x74>
    2db0:	ldr	r3, [pc, #84]	; (2e08 <uart3_status_isr+0xb0>)
    2db2:	ldrb	r3, [r3, #4]
    2db4:	lsls	r3, r3, #25
    2db6:	bpl.n	2dcc <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2db8:	ldr	r3, [pc, #100]	; (2e20 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    2dba:	ldr	r1, [pc, #104]	; (2e24 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2dbc:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    2dbe:	movs	r2, #0
    2dc0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2dc2:	cbz	r3, 2dc6 <uart3_status_isr+0x6e>
    2dc4:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    2dc6:	ldr	r3, [pc, #64]	; (2e08 <uart3_status_isr+0xb0>)
    2dc8:	movs	r2, #44	; 0x2c
    2dca:	strb	r2, [r3, #3]
	}
}
    2dcc:	pop	{r4, r5}
    2dce:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    2dd0:	ldrb	r1, [r2, #4]
    2dd2:	lsls	r1, r1, #24
    2dd4:	bpl.n	2dac <uart3_status_isr+0x54>
		head = tx_buffer_head;
    2dd6:	ldr	r1, [pc, #80]	; (2e28 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2dd8:	ldr	r0, [pc, #64]	; (2e1c <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2dda:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2ddc:	ldrb	r1, [r0, #0]
    2dde:	uxtb	r1, r1
		if (head == tail) {
    2de0:	cmp	r4, r1
    2de2:	beq.n	2e00 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    2de4:	adds	r2, r1, #1
    2de6:	cmp	r2, #39	; 0x27
    2de8:	itt	hi
    2dea:	movhi	r1, #0
    2dec:	movhi	r2, r1
			n = tx_buffer[tail];
    2dee:	ldr	r5, [pc, #60]	; (2e2c <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    2df0:	ldr	r4, [pc, #20]	; (2e08 <uart3_status_isr+0xb0>)
    2df2:	it	ls
    2df4:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2df6:	ldrb	r2, [r5, r2]
    2df8:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    2dfa:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    2dfc:	strb	r1, [r0, #0]
    2dfe:	b.n	2dac <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    2e00:	movs	r1, #108	; 0x6c
    2e02:	strb	r1, [r2, #3]
    2e04:	b.n	2dac <uart3_status_isr+0x54>
    2e06:	nop
    2e08:	.word	0x4006d000
    2e0c:	.word	0x1fff1828
    2e10:	.word	0x1fff1829
    2e14:	.word	0x1fff1854
    2e18:	.word	0x1fff1824
    2e1c:	.word	0x1fff1895
    2e20:	.word	0x1fff1898
    2e24:	.word	0x1fff1894
    2e28:	.word	0x1fff189c
    2e2c:	.word	0x1fff182c

00002e30 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    2e30:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2e32:	ldr	r4, [pc, #64]	; (2e74 <fault_isr+0x44>)
    2e34:	b.n	2e48 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2e36:	ldr	r3, [r4, #0]
    2e38:	lsls	r1, r3, #21
    2e3a:	bmi.n	2e58 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2e3c:	ldr	r3, [r4, #0]
    2e3e:	lsls	r2, r3, #20
    2e40:	bmi.n	2e62 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2e42:	ldr	r3, [r4, #0]
    2e44:	lsls	r3, r3, #19
    2e46:	bmi.n	2e6c <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2e48:	ldr	r3, [r4, #0]
    2e4a:	lsls	r0, r3, #13
    2e4c:	bpl.n	2e36 <fault_isr+0x6>
    2e4e:	bl	1ecc <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2e52:	ldr	r3, [r4, #0]
    2e54:	lsls	r1, r3, #21
    2e56:	bpl.n	2e3c <fault_isr+0xc>
    2e58:	bl	2f44 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2e5c:	ldr	r3, [r4, #0]
    2e5e:	lsls	r2, r3, #20
    2e60:	bpl.n	2e42 <fault_isr+0x12>
    2e62:	bl	2c2c <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2e66:	ldr	r3, [r4, #0]
    2e68:	lsls	r3, r3, #19
    2e6a:	bpl.n	2e48 <fault_isr+0x18>
    2e6c:	bl	3244 <uart2_status_isr>
    2e70:	b.n	2e48 <fault_isr+0x18>
    2e72:	nop
    2e74:	.word	0x40048034

00002e78 <unused_isr>:
	}
}

void unused_isr(void)
{
    2e78:	push	{r3, lr}
	fault_isr();
    2e7a:	bl	2e30 <fault_isr>
    2e7e:	nop

00002e80 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    2e80:	ldr	r3, [pc, #4]	; (2e88 <startup_early_hook+0x8>)
    2e82:	movs	r2, #16
    2e84:	strh	r2, [r3, #0]
    2e86:	bx	lr
    2e88:	.word	0x40052000

00002e8c <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    2e8c:	bx	lr
    2e8e:	nop

00002e90 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    2e90:	ldr	r1, [pc, #36]	; (2eb8 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    2e92:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    2e94:	ldr	r3, [r1, #0]
	if (incr != 0) {
    2e96:	cbz	r0, 2ea6 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    2e98:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    2e9a:	add	r0, r3
    2e9c:	sub.w	r2, r2, #8192	; 0x2000
    2ea0:	cmp	r0, r2
    2ea2:	bcs.n	2eaa <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    2ea4:	str	r0, [r1, #0]
	}
	return prev;
    2ea6:	mov	r0, r3
}
    2ea8:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    2eaa:	bl	3518 <__errno>
    2eae:	movs	r3, #12
    2eb0:	str	r3, [r0, #0]
			return (void *)-1;
    2eb2:	mov.w	r0, #4294967295
    2eb6:	pop	{r3, pc}
    2eb8:	.word	0x1fff0c58

00002ebc <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    2ebc:	ldr	r2, [pc, #32]	; (2ee0 <kinetis_hsrun_disable+0x24>)
    2ebe:	ldrb	r3, [r2, #0]
    2ec0:	cmp	r3, #128	; 0x80
    2ec2:	beq.n	2ec8 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    2ec4:	movs	r0, #0
}
    2ec6:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    2ec8:	ldr	r1, [pc, #24]	; (2ee4 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    2eca:	ldr	r3, [pc, #28]	; (2ee8 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    2ecc:	ldr	r0, [pc, #28]	; (2eec <kinetis_hsrun_disable+0x30>)
    2ece:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    2ed0:	movs	r1, #0
    2ed2:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    2ed4:	ldrb	r3, [r2, #0]
    2ed6:	cmp	r3, #128	; 0x80
    2ed8:	beq.n	2ed4 <kinetis_hsrun_disable+0x18>
		return 1;
    2eda:	movs	r0, #1
    2edc:	bx	lr
    2ede:	nop
    2ee0:	.word	0x4007e003
    2ee4:	.word	0x40048044
    2ee8:	.word	0x4007e001
    2eec:	.word	0x22280000

00002ef0 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    2ef0:	ldr	r2, [pc, #36]	; (2f18 <kinetis_hsrun_enable+0x28>)
    2ef2:	ldrb	r3, [r2, #0]
    2ef4:	cmp	r3, #1
    2ef6:	beq.n	2efc <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    2ef8:	movs	r0, #0
}
    2efa:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    2efc:	add.w	r3, r3, #1073741824	; 0x40000000
    2f00:	add.w	r3, r3, #516096	; 0x7e000
    2f04:	movs	r1, #96	; 0x60
    2f06:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    2f08:	ldrb	r3, [r2, #0]
    2f0a:	cmp	r3, #128	; 0x80
    2f0c:	bne.n	2f08 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    2f0e:	ldr	r3, [pc, #12]	; (2f1c <kinetis_hsrun_enable+0x2c>)
    2f10:	ldr	r2, [pc, #12]	; (2f20 <kinetis_hsrun_enable+0x30>)
    2f12:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    2f14:	movs	r0, #1
    2f16:	bx	lr
    2f18:	.word	0x4007e003
    2f1c:	.word	0x40048044
    2f20:	.word	0x02060000

00002f24 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f24:	ldr	r2, [pc, #20]	; (2f3c <serial_available+0x18>)
	tail = rx_buffer_tail;
    2f26:	ldr	r3, [pc, #24]	; (2f40 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f28:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2f2a:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f2c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2f2e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2f30:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    2f32:	it	cc
    2f34:	addcc	r0, #64	; 0x40
    2f36:	subs	r0, r0, r3
}
    2f38:	bx	lr
    2f3a:	nop
    2f3c:	.word	0x1fff18a4
    2f40:	.word	0x1fff18a5

00002f44 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    2f44:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    2f46:	ldr	r3, [pc, #224]	; (3028 <uart0_status_isr+0xe4>)
    2f48:	ldrb	r2, [r3, #4]
    2f4a:	tst.w	r2, #48	; 0x30
    2f4e:	beq.n	2faa <uart0_status_isr+0x66>
		__disable_irq();
    2f50:	cpsid	i
		avail = UART0_RCFIFO;
    2f52:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    2f54:	and.w	r2, r1, #255	; 0xff
    2f58:	cmp	r1, #0
    2f5a:	beq.n	2fd8 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    2f5c:	cpsie	i
			head = rx_buffer_head;
    2f5e:	ldr	r7, [pc, #204]	; (302c <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    2f60:	ldr	r1, [pc, #204]	; (3030 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2f62:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    2f64:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2f66:	ldr	r6, [pc, #204]	; (3034 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    2f68:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2f6a:	uxtb	r0, r0
			tail = rx_buffer_tail;
    2f6c:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    2f6e:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    2f70:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    2f72:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    2f74:	it	cs
    2f76:	movcs	r3, #0
				if (newhead != tail) {
    2f78:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    2f7a:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    2f7e:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2f80:	itt	ne
    2f82:	strbne	r1, [r6, r3]
    2f84:	movne	r0, r3
				}
			} while (--avail > 0);
    2f86:	ands.w	r2, r2, #255	; 0xff
    2f8a:	bne.n	2f6e <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    2f8c:	ldr	r3, [pc, #168]	; (3038 <uart0_status_isr+0xf4>)
    2f8e:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    2f90:	uxtb	r2, r0
    2f92:	strb	r2, [r7, #0]
			if (rts_pin) {
    2f94:	cbz	r3, 2faa <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    2f96:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    2f98:	itet	cc
    2f9a:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    2f9e:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    2fa0:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2fa2:	cmp	r0, #39	; 0x27
    2fa4:	itt	gt
    2fa6:	movgt	r2, #1
    2fa8:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    2faa:	ldr	r1, [pc, #124]	; (3028 <uart0_status_isr+0xe4>)
    2fac:	ldrb	r2, [r1, #3]
    2fae:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    2fb0:	lsls	r5, r2, #24
    2fb2:	bmi.n	2fe2 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    2fb4:	lsls	r2, r2, #25
    2fb6:	bpl.n	2fd4 <uart0_status_isr+0x90>
    2fb8:	ldr	r3, [pc, #108]	; (3028 <uart0_status_isr+0xe4>)
    2fba:	ldrb	r3, [r3, #4]
    2fbc:	lsls	r3, r3, #25
    2fbe:	bpl.n	2fd4 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2fc0:	ldr	r3, [pc, #120]	; (303c <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    2fc2:	ldr	r1, [pc, #124]	; (3040 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    2fc4:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    2fc6:	movs	r2, #0
    2fc8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2fca:	cbz	r3, 2fce <uart0_status_isr+0x8a>
    2fcc:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    2fce:	ldr	r3, [pc, #88]	; (3028 <uart0_status_isr+0xe4>)
    2fd0:	movs	r2, #60	; 0x3c
    2fd2:	strb	r2, [r3, #3]
	}
}
    2fd4:	pop	{r4, r5, r6, r7}
    2fd6:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    2fd8:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    2fda:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    2fdc:	strb	r2, [r3, #17]
			__enable_irq();
    2fde:	cpsie	i
    2fe0:	b.n	2faa <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    2fe2:	ldrb	r3, [r1, #4]
    2fe4:	lsls	r4, r3, #24
    2fe6:	bpl.n	2fb4 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    2fe8:	ldr	r3, [pc, #88]	; (3044 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    2fea:	ldr	r6, [pc, #92]	; (3048 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2fec:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    2fee:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2ff0:	uxtb	r4, r4
		tail = tx_buffer_tail;
    2ff2:	uxtb	r3, r3
		do {
			if (tail == head) break;
    2ff4:	cmp	r4, r3
    2ff6:	beq.n	3016 <uart0_status_isr+0xd2>
    2ff8:	ldr	r5, [pc, #80]	; (304c <uart0_status_isr+0x108>)
    2ffa:	b.n	3000 <uart0_status_isr+0xbc>
    2ffc:	cmp	r3, r4
    2ffe:	beq.n	3016 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3000:	adds	r3, #1
    3002:	cmp	r3, #64	; 0x40
    3004:	it	cs
    3006:	movcs	r3, #0
			avail = UART0_S1;
    3008:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    300a:	ldrb	r0, [r5, r3]
    300c:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    300e:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3010:	ldrb	r0, [r1, #20]
    3012:	cmp	r0, #7
    3014:	bls.n	2ffc <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    3016:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3018:	ldr	r1, [pc, #12]	; (3028 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    301a:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    301c:	ldrb	r3, [r1, #4]
    301e:	lsls	r0, r3, #24
    3020:	itt	mi
    3022:	movmi	r3, #124	; 0x7c
    3024:	strbmi	r3, [r1, #3]
    3026:	b.n	2fb4 <uart0_status_isr+0x70>
    3028:	.word	0x4006a000
    302c:	.word	0x1fff18a4
    3030:	.word	0x1fff18a5
    3034:	.word	0x1fff18e8
    3038:	.word	0x1fff18a0
    303c:	.word	0x1fff192c
    3040:	.word	0x1fff1928
    3044:	.word	0x1fff1930
    3048:	.word	0x1fff1929
    304c:	.word	0x1fff18a8

00003050 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3050:	ldr	r2, [pc, #20]	; (3068 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    3052:	ldr	r3, [pc, #24]	; (306c <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3054:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3056:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3058:	uxtb	r0, r0
	tail = rx_buffer_tail;
    305a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    305c:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    305e:	it	cc
    3060:	addcc	r0, #64	; 0x40
    3062:	subs	r0, r0, r3
}
    3064:	bx	lr
    3066:	nop
    3068:	.word	0x1fff1938
    306c:	.word	0x1fff1939

00003070 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    3070:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    3072:	ldr	r3, [pc, #176]	; (3124 <lpuart0_status_isr+0xb4>)
    3074:	ldr	r2, [r3, #4]
    3076:	lsls	r4, r2, #10
    3078:	bpl.n	30ba <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    307a:	ldr	r0, [pc, #172]	; (3128 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    307c:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    307e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3080:	ldr	r1, [pc, #168]	; (312c <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3082:	adds	r3, #1
    3084:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3086:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3088:	it	gt
    308a:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    308c:	cmp	r3, r1
    308e:	beq.n	309a <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3090:	ldr	r4, [pc, #156]	; (3130 <lpuart0_status_isr+0xc0>)
    3092:	uxtb	r2, r2
			rx_buffer_head = head;
    3094:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3096:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3098:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    309a:	ldr	r2, [pc, #152]	; (3134 <lpuart0_status_isr+0xc4>)
    309c:	ldr	r1, [r2, #0]
    309e:	cbz	r1, 30ba <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    30a0:	ldr	r2, [pc, #148]	; (3138 <lpuart0_status_isr+0xc8>)
    30a2:	ldrb	r2, [r2, #0]
    30a4:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    30a6:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    30a8:	itet	cc
    30aa:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    30ae:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    30b0:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    30b2:	cmp	r3, #39	; 0x27
    30b4:	itt	gt
    30b6:	movgt	r3, #1
    30b8:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    30ba:	ldr	r2, [pc, #104]	; (3124 <lpuart0_status_isr+0xb4>)
    30bc:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    30be:	lsls	r0, r3, #8
    30c0:	bpl.n	30c8 <lpuart0_status_isr+0x58>
    30c2:	ldr	r2, [r2, #4]
    30c4:	lsls	r1, r2, #8
    30c6:	bmi.n	30ec <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    30c8:	lsls	r2, r3, #9
    30ca:	bpl.n	30e8 <lpuart0_status_isr+0x78>
    30cc:	ldr	r3, [pc, #84]	; (3124 <lpuart0_status_isr+0xb4>)
    30ce:	ldr	r3, [r3, #4]
    30d0:	lsls	r3, r3, #9
    30d2:	bpl.n	30e8 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    30d4:	ldr	r3, [pc, #100]	; (313c <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    30d6:	ldr	r1, [pc, #104]	; (3140 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    30d8:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    30da:	movs	r2, #0
    30dc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    30de:	cbz	r3, 30e2 <lpuart0_status_isr+0x72>
    30e0:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    30e2:	ldr	r3, [pc, #96]	; (3144 <lpuart0_status_isr+0xd4>)
    30e4:	movs	r2, #0
    30e6:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    30e8:	pop	{r4, r5}
    30ea:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    30ec:	ldr	r2, [pc, #88]	; (3148 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    30ee:	ldr	r1, [pc, #72]	; (3138 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    30f0:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    30f2:	ldrb	r2, [r1, #0]
    30f4:	uxtb	r2, r2
		if (head == tail) {
    30f6:	cmp	r0, r2
    30f8:	beq.n	3116 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    30fa:	adds	r2, #1
    30fc:	cmp	r2, #39	; 0x27
    30fe:	itt	hi
    3100:	movhi	r0, #0
    3102:	movhi	r2, r0
			n = tx_buffer[tail];
    3104:	ldr	r5, [pc, #68]	; (314c <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3106:	ldr	r4, [pc, #28]	; (3124 <lpuart0_status_isr+0xb4>)
    3108:	it	ls
    310a:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    310c:	ldrb	r2, [r5, r2]
    310e:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3110:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3112:	strb	r0, [r1, #0]
    3114:	b.n	30c8 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3116:	ldr	r0, [pc, #56]	; (3150 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3118:	ldr	r2, [pc, #40]	; (3144 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    311a:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    311c:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    311e:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3120:	str	r1, [r2, #0]
    3122:	b.n	30c8 <lpuart0_status_isr+0x58>
    3124:	.word	0x400c4000
    3128:	.word	0x1fff1938
    312c:	.word	0x1fff1939
    3130:	.word	0x1fff1964
    3134:	.word	0x1fff1934
    3138:	.word	0x1fff19a5
    313c:	.word	0x1fff19a8
    3140:	.word	0x1fff19a4
    3144:	.word	0x43880158
    3148:	.word	0x1fff19ac
    314c:	.word	0x1fff193c
    3150:	.word	0x4388015c

00003154 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3154:	push	{r4, lr}
    3156:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3158:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    315a:	bl	2ebc <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    315e:	ldr	r2, [pc, #96]	; (31c0 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3160:	ldr	r3, [pc, #96]	; (31c4 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3162:	ldr	r1, [pc, #100]	; (31c8 <usb_init_serialnumber+0x74>)
    3164:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3166:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3168:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    316a:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    316c:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    316e:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3170:	ldrb	r3, [r2, #0]
    3172:	lsls	r3, r3, #24
    3174:	bpl.n	3170 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    3176:	ldr	r3, [pc, #84]	; (31cc <usb_init_serialnumber+0x78>)
    3178:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    317a:	bl	2ef0 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    317e:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3180:	ldr	r3, [pc, #76]	; (31d0 <usb_init_serialnumber+0x7c>)
    3182:	cmp	r4, r3
    3184:	itt	ls
    3186:	addls.w	r4, r4, r4, lsl #2
    318a:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    318c:	mov	r0, r4
    318e:	ldr	r4, [pc, #68]	; (31d4 <usb_init_serialnumber+0x80>)
    3190:	add	r1, sp, #4
    3192:	movs	r2, #10
    3194:	bl	31d8 <ultoa>
    3198:	add	r1, sp, #4
    319a:	mov	r0, r4
	for (i=0; i<10; i++) {
    319c:	movs	r3, #0
		char c = buf[i];
    319e:	ldrb.w	r2, [r1], #1
    31a2:	adds	r3, #1
		if (!c) break;
    31a4:	cbz	r2, 31b6 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    31a6:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    31a8:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    31ac:	bne.n	319e <usb_init_serialnumber+0x4a>
    31ae:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    31b0:	strb	r3, [r4, #0]
}
    31b2:	add	sp, #16
    31b4:	pop	{r4, pc}
    31b6:	lsls	r3, r3, #1
    31b8:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    31ba:	strb	r3, [r4, #0]
}
    31bc:	add	sp, #16
    31be:	pop	{r4, pc}
    31c0:	.word	0x40020004
    31c4:	.word	0x40020000
    31c8:	.word	0x41070000
    31cc:	.word	0x4002000c
    31d0:	.word	0x0098967f
    31d4:	.word	0x1fff0d3c

000031d8 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    31d8:	push	{r4, r5, r6, r7}
    31da:	subs	r5, r1, #1
    31dc:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    31de:	movs	r4, #0
    31e0:	b.n	31e4 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    31e2:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    31e4:	udiv	r3, r0, r2
    31e8:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    31ec:	cmp	r0, #9
    31ee:	add.w	r7, r0, #48	; 0x30
    31f2:	itet	hi
    31f4:	addhi	r0, #55	; 0x37
    31f6:	uxtbls	r0, r7
    31f8:	uxtbhi	r0, r0
    31fa:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    31fe:	mov	r0, r3
    3200:	cmp	r3, #0
    3202:	bne.n	31e2 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3204:	adds	r2, r1, r4
    3206:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3208:	cbz	r4, 321e <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    320a:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    320c:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3210:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3212:	adds	r3, #1
    3214:	subs	r0, r4, r3
    3216:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3218:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    321c:	blt.n	320a <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    321e:	mov	r0, r1
    3220:	pop	{r4, r5, r6, r7}
    3222:	bx	lr

00003224 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3224:	ldr	r2, [pc, #20]	; (323c <serial3_available+0x18>)
	tail = rx_buffer_tail;
    3226:	ldr	r3, [pc, #24]	; (3240 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3228:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    322a:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    322c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    322e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3230:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3232:	it	cc
    3234:	addcc	r0, #64	; 0x40
    3236:	subs	r0, r0, r3
}
    3238:	bx	lr
    323a:	nop
    323c:	.word	0x1fff19b4
    3240:	.word	0x1fff19b5

00003244 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3244:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    3246:	ldr	r3, [pc, #172]	; (32f4 <uart2_status_isr+0xb0>)
    3248:	ldrb	r2, [r3, #4]
    324a:	lsls	r4, r2, #26
    324c:	bpl.n	328e <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    324e:	ldr	r0, [pc, #168]	; (32f8 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3250:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3252:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3254:	ldr	r1, [pc, #164]	; (32fc <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3256:	adds	r3, #1
    3258:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    325a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    325c:	it	gt
    325e:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3260:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3262:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3264:	beq.n	326e <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    3266:	ldr	r4, [pc, #152]	; (3300 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    3268:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    326a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    326c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    326e:	ldr	r2, [pc, #148]	; (3304 <uart2_status_isr+0xc0>)
    3270:	ldr	r1, [r2, #0]
    3272:	cbz	r1, 328e <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3274:	ldr	r2, [pc, #144]	; (3308 <uart2_status_isr+0xc4>)
    3276:	ldrb	r2, [r2, #0]
    3278:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    327a:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    327c:	itet	cc
    327e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3282:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3284:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3286:	cmp	r3, #39	; 0x27
    3288:	itt	gt
    328a:	movgt	r3, #1
    328c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    328e:	ldr	r2, [pc, #100]	; (32f4 <uart2_status_isr+0xb0>)
    3290:	ldrb	r3, [r2, #3]
    3292:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3294:	lsls	r0, r3, #24
    3296:	bmi.n	32bc <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    3298:	lsls	r2, r3, #25
    329a:	bpl.n	32b8 <uart2_status_isr+0x74>
    329c:	ldr	r3, [pc, #84]	; (32f4 <uart2_status_isr+0xb0>)
    329e:	ldrb	r3, [r3, #4]
    32a0:	lsls	r3, r3, #25
    32a2:	bpl.n	32b8 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    32a4:	ldr	r3, [pc, #100]	; (330c <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    32a6:	ldr	r1, [pc, #104]	; (3310 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    32a8:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    32aa:	movs	r2, #0
    32ac:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    32ae:	cbz	r3, 32b2 <uart2_status_isr+0x6e>
    32b0:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    32b2:	ldr	r3, [pc, #64]	; (32f4 <uart2_status_isr+0xb0>)
    32b4:	movs	r2, #44	; 0x2c
    32b6:	strb	r2, [r3, #3]
	}
}
    32b8:	pop	{r4, r5}
    32ba:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    32bc:	ldrb	r1, [r2, #4]
    32be:	lsls	r1, r1, #24
    32c0:	bpl.n	3298 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    32c2:	ldr	r1, [pc, #80]	; (3314 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    32c4:	ldr	r0, [pc, #64]	; (3308 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    32c6:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    32c8:	ldrb	r1, [r0, #0]
    32ca:	uxtb	r1, r1
		if (head == tail) {
    32cc:	cmp	r4, r1
    32ce:	beq.n	32ec <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    32d0:	adds	r2, r1, #1
    32d2:	cmp	r2, #39	; 0x27
    32d4:	itt	hi
    32d6:	movhi	r1, #0
    32d8:	movhi	r2, r1
			n = tx_buffer[tail];
    32da:	ldr	r5, [pc, #60]	; (3318 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    32dc:	ldr	r4, [pc, #20]	; (32f4 <uart2_status_isr+0xb0>)
    32de:	it	ls
    32e0:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    32e2:	ldrb	r2, [r5, r2]
    32e4:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    32e6:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    32e8:	strb	r1, [r0, #0]
    32ea:	b.n	3298 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    32ec:	movs	r1, #108	; 0x6c
    32ee:	strb	r1, [r2, #3]
    32f0:	b.n	3298 <uart2_status_isr+0x54>
    32f2:	nop
    32f4:	.word	0x4006c000
    32f8:	.word	0x1fff19b4
    32fc:	.word	0x1fff19b5
    3300:	.word	0x1fff19e0
    3304:	.word	0x1fff19b0
    3308:	.word	0x1fff1a21
    330c:	.word	0x1fff1a24
    3310:	.word	0x1fff1a20
    3314:	.word	0x1fff1a28
    3318:	.word	0x1fff19b8

0000331c <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    331c:	bx	lr
    331e:	nop

00003320 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    3320:	bx	lr
    3322:	nop

00003324 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    3324:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3326:	mrs	r2, PRIMASK
		__disable_irq();
    332a:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    332c:	ldrb	r3, [r0, #29]
    332e:	cbnz	r3, 333e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3330:	ldrb	r1, [r0, #28]
    3332:	cmp	r1, #1
    3334:	beq.n	3348 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    3336:	cmp	r1, #3
    3338:	beq.n	335c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    333a:	movs	r3, #1
    333c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    333e:	cbnz	r2, 3342 <EventResponder::triggerEventNotImmediate()+0x1e>
    3340:	cpsie	i
	}
	enableInterrupts(irq);
}
    3342:	ldr.w	r4, [sp], #4
    3346:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3348:	ldr	r4, [pc, #68]	; (3390 <EventResponder::triggerEventNotImmediate()+0x6c>)
    334a:	ldr	r1, [r4, #0]
    334c:	cbz	r1, 3378 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    334e:	ldr	r1, [pc, #68]	; (3394 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3350:	str	r3, [r0, #20]
				_prev = lastYield;
    3352:	ldr	r3, [r1, #0]
    3354:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    3356:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    3358:	str	r0, [r3, #20]
    335a:	b.n	333a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    335c:	ldr	r4, [pc, #56]	; (3398 <EventResponder::triggerEventNotImmediate()+0x74>)
    335e:	ldr	r1, [r4, #0]
    3360:	cbz	r1, 3384 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3362:	ldr	r1, [pc, #56]	; (339c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3364:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    3366:	ldr	r3, [r1, #0]
    3368:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    336a:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    336c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    336e:	ldr	r3, [pc, #48]	; (33a0 <EventResponder::triggerEventNotImmediate()+0x7c>)
    3370:	mov.w	r1, #268435456	; 0x10000000
    3374:	str	r1, [r3, #0]
    3376:	b.n	333a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3378:	ldr	r3, [pc, #24]	; (3394 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    337a:	str	r1, [r0, #20]
				_prev = nullptr;
    337c:	str	r1, [r0, #24]
				firstYield = this;
    337e:	str	r0, [r4, #0]
				lastYield = this;
    3380:	str	r0, [r3, #0]
    3382:	b.n	333a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3384:	ldr	r3, [pc, #20]	; (339c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    3386:	str	r1, [r0, #20]
				_prev = nullptr;
    3388:	str	r1, [r0, #24]
				firstInterrupt = this;
    338a:	str	r0, [r4, #0]
				lastInterrupt = this;
    338c:	str	r0, [r3, #0]
    338e:	b.n	336e <EventResponder::triggerEventNotImmediate()+0x4a>
    3390:	.word	0x1fff1a3c
    3394:	.word	0x1fff1a38
    3398:	.word	0x1fff1a2c
    339c:	.word	0x1fff1a30
    33a0:	.word	0xe000ed04

000033a4 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    33a4:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    33a6:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    33a8:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    33aa:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    33ac:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    33ae:	beq.n	33b8 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    33b0:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    33b4:	b.w	3324 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    33b8:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    33ba:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    33be:	bx	r3

000033c0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    33c0:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    33c2:	mrs	r2, PRIMASK
		__disable_irq();
    33c6:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    33c8:	ldr	r4, [pc, #48]	; (33fc <EventResponder::runFromInterrupt()+0x3c>)
    33ca:	ldr	r0, [r4, #0]
		if (first) {
    33cc:	cbz	r0, 33f0 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    33ce:	ldr	r6, [pc, #48]	; (3400 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    33d0:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    33d2:	ldr	r3, [r0, #20]
    33d4:	str	r3, [r4, #0]
			if (firstInterrupt) {
    33d6:	cbz	r3, 33f6 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    33d8:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    33da:	cbnz	r2, 33de <EventResponder::runFromInterrupt()+0x1e>
    33dc:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    33de:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    33e0:	ldr	r3, [r0, #8]
    33e2:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    33e4:	mrs	r2, PRIMASK
		__disable_irq();
    33e8:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    33ea:	ldr	r0, [r4, #0]
		if (first) {
    33ec:	cmp	r0, #0
    33ee:	bne.n	33d2 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    33f0:	cbnz	r2, 33f4 <EventResponder::runFromInterrupt()+0x34>
    33f2:	cpsie	i
    33f4:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    33f6:	str	r3, [r6, #0]
    33f8:	b.n	33da <EventResponder::runFromInterrupt()+0x1a>
    33fa:	nop
    33fc:	.word	0x1fff1a2c
    3400:	.word	0x1fff1a30

00003404 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3404:	b.w	33c0 <EventResponder::runFromInterrupt()>

00003408 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    3408:	ldr	r2, [pc, #96]	; (346c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    340a:	push	{r4, r5}
	if (listActive == nullptr) {
    340c:	ldr	r4, [r2, #0]
    340e:	cmp	r4, #0
    3410:	beq.n	3462 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    3412:	ldr	r3, [r0, #0]
    3414:	ldr	r1, [r4, #0]
    3416:	cmp	r3, r1
    3418:	bcs.n	3438 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    341a:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    341c:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    341e:	str	r4, [r0, #8]
		_prev = nullptr;
    3420:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3422:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    3424:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    3426:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3428:	movs	r3, #2
    342a:	strb	r3, [r0, #20]
}
    342c:	pop	{r4, r5}
    342e:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    3430:	ldr	r1, [r2, #0]
    3432:	cmp	r3, r1
    3434:	mov	r4, r2
    3436:	bcc.n	344a <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3438:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    343a:	subs	r3, r3, r1
    343c:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    343e:	cmp	r2, #0
    3440:	bne.n	3430 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    3442:	str	r2, [r0, #8]
		_prev = timer;
    3444:	str	r4, [r0, #12]
		timer->_next = this;
    3446:	str	r0, [r4, #8]
    3448:	b.n	3428 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    344a:	ldr	r2, [r2, #12]
    344c:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    344e:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    3450:	str	r0, [r4, #12]
				_prev->_next = this;
    3452:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    3454:	subs	r3, r1, r3
				_state = TimerActive;
    3456:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    3458:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    345a:	str	r3, [r4, #0]
				_state = TimerActive;
    345c:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    345e:	pop	{r4, r5}
    3460:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    3462:	str	r4, [r0, #8]
		_prev = nullptr;
    3464:	str	r4, [r0, #12]
		listActive = this;
    3466:	str	r0, [r2, #0]
    3468:	b.n	3428 <MillisTimer::addToActiveList()+0x20>
    346a:	nop
    346c:	.word	0x1fff1a34

00003470 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    3470:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    3472:	ldr	r6, [pc, #136]	; (34fc <MillisTimer::runFromTimer()+0x8c>)
    3474:	ldr	r4, [r6, #0]
	while (timer) {
    3476:	cbz	r4, 34c4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3478:	ldr	r3, [r4, #0]
    347a:	cmp	r3, #0
    347c:	bne.n	34f4 <MillisTimer::runFromTimer()+0x84>
    347e:	ldr	r7, [pc, #128]	; (3500 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    3480:	mov	r5, r3
    3482:	b.n	348e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    3484:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3486:	cbz	r4, 34c4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3488:	ldr	r3, [r4, #0]
    348a:	cmp	r3, #0
    348c:	bne.n	34f4 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    348e:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    3490:	cbz	r3, 3494 <MillisTimer::runFromTimer()+0x24>
    3492:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    3494:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    3496:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3498:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    349a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    349c:	ldr	r3, [r3, #0]
    349e:	cmp	r3, r7
    34a0:	bne.n	34e6 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    34a2:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    34a4:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    34a6:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    34a8:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    34aa:	beq.n	34ee <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    34ac:	bl	3324 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    34b0:	ldr	r3, [r4, #4]
    34b2:	cmp	r3, #0
    34b4:	beq.n	3484 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    34b6:	str	r3, [r4, #0]
				timer->addToActiveList();
    34b8:	mov	r0, r4
    34ba:	bl	3408 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    34be:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    34c0:	cmp	r4, #0
    34c2:	bne.n	3488 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    34c4:	mrs	r3, PRIMASK
		__disable_irq();
    34c8:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    34ca:	ldr	r2, [pc, #56]	; (3504 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    34cc:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    34ce:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    34d0:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    34d2:	cbnz	r3, 34d6 <MillisTimer::runFromTimer()+0x66>
    34d4:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    34d6:	cbz	r0, 34e4 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    34d8:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    34da:	bl	3408 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    34de:	mov	r0, r4
    34e0:	cmp	r0, #0
    34e2:	bne.n	34d8 <MillisTimer::runFromTimer()+0x68>
    34e4:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    34e6:	mov	r2, r4
    34e8:	movs	r1, #0
    34ea:	blx	r3
    34ec:	b.n	34b0 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    34ee:	ldr	r3, [r0, #8]
    34f0:	blx	r3
    34f2:	b.n	34b0 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    34f4:	subs	r3, #1
    34f6:	str	r3, [r4, #0]
			break;
    34f8:	b.n	34c4 <MillisTimer::runFromTimer()+0x54>
    34fa:	nop
    34fc:	.word	0x1fff1a34
    3500:	.word	0x000033a5
    3504:	.word	0x1fff1a44

00003508 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    3508:	ldr	r2, [pc, #8]	; (3514 <systick_isr+0xc>)
    350a:	ldr	r3, [r2, #0]
    350c:	adds	r3, #1
    350e:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    3510:	b.w	3470 <MillisTimer::runFromTimer()>
    3514:	.word	0x1fff15cc

00003518 <__errno>:
    3518:	ldr	r3, [pc, #4]	; (3520 <__errno+0x8>)
    351a:	ldr	r0, [r3, #0]
    351c:	bx	lr
    351e:	nop
    3520:	.word	0x1fff1180

00003524 <__libc_init_array>:
    3524:	push	{r4, r5, r6, lr}
    3526:	ldr	r6, [pc, #60]	; (3564 <__libc_init_array+0x40>)
    3528:	ldr	r5, [pc, #60]	; (3568 <__libc_init_array+0x44>)
    352a:	subs	r6, r6, r5
    352c:	asrs	r6, r6, #2
    352e:	it	ne
    3530:	movne	r4, #0
    3532:	beq.n	3540 <__libc_init_array+0x1c>
    3534:	adds	r4, #1
    3536:	ldr.w	r3, [r5], #4
    353a:	blx	r3
    353c:	cmp	r6, r4
    353e:	bne.n	3534 <__libc_init_array+0x10>
    3540:	ldr	r6, [pc, #40]	; (356c <__libc_init_array+0x48>)
    3542:	ldr	r5, [pc, #44]	; (3570 <__libc_init_array+0x4c>)
    3544:	subs	r6, r6, r5
    3546:	bl	41fc <_init>
    354a:	asrs	r6, r6, #2
    354c:	it	ne
    354e:	movne	r4, #0
    3550:	beq.n	3560 <__libc_init_array+0x3c>
    3552:	adds	r4, #1
    3554:	ldr.w	r3, [r5], #4
    3558:	blx	r3
    355a:	cmp	r6, r4
    355c:	bne.n	3552 <__libc_init_array+0x2e>
    355e:	pop	{r4, r5, r6, pc}
    3560:	pop	{r4, r5, r6, pc}
    3562:	nop
    3564:	.word	0x00004208
    3568:	.word	0x00004208
    356c:	.word	0x00004214
    3570:	.word	0x00004208

00003574 <malloc>:
    3574:	ldr	r3, [pc, #8]	; (3580 <malloc+0xc>)
    3576:	mov	r1, r0
    3578:	ldr	r0, [r3, #0]
    357a:	b.w	3594 <_malloc_r>
    357e:	nop
    3580:	.word	0x1fff1180

00003584 <free>:
    3584:	ldr	r3, [pc, #8]	; (3590 <free+0xc>)
    3586:	mov	r1, r0
    3588:	ldr	r0, [r3, #0]
    358a:	b.w	3c14 <_free_r>
    358e:	nop
    3590:	.word	0x1fff1180

00003594 <_malloc_r>:
    3594:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3598:	add.w	r5, r1, #11
    359c:	cmp	r5, #22
    359e:	sub	sp, #12
    35a0:	mov	r6, r0
    35a2:	bls.w	36e4 <_malloc_r+0x150>
    35a6:	bics.w	r5, r5, #7
    35aa:	bmi.w	372c <_malloc_r+0x198>
    35ae:	cmp	r1, r5
    35b0:	bhi.w	372c <_malloc_r+0x198>
    35b4:	bl	3b04 <__malloc_lock>
    35b8:	cmp.w	r5, #504	; 0x1f8
    35bc:	bcc.w	3af8 <_malloc_r+0x564>
    35c0:	lsrs	r3, r5, #9
    35c2:	beq.w	373a <_malloc_r+0x1a6>
    35c6:	cmp	r3, #4
    35c8:	bhi.w	38d2 <_malloc_r+0x33e>
    35cc:	lsrs	r0, r5, #6
    35ce:	add.w	lr, r0, #57	; 0x39
    35d2:	mov.w	r3, lr, lsl #1
    35d6:	adds	r0, #56	; 0x38
    35d8:	ldr	r7, [pc, #784]	; (38ec <_malloc_r+0x358>)
    35da:	add.w	r3, r7, r3, lsl #2
    35de:	sub.w	r1, r3, #8
    35e2:	ldr	r4, [r3, #4]
    35e4:	cmp	r1, r4
    35e6:	bne.n	35f8 <_malloc_r+0x64>
    35e8:	b.n	3744 <_malloc_r+0x1b0>
    35ea:	cmp	r2, #0
    35ec:	bge.w	3748 <_malloc_r+0x1b4>
    35f0:	ldr	r4, [r4, #12]
    35f2:	cmp	r1, r4
    35f4:	beq.w	3744 <_malloc_r+0x1b0>
    35f8:	ldr	r3, [r4, #4]
    35fa:	bic.w	r3, r3, #3
    35fe:	subs	r2, r3, r5
    3600:	cmp	r2, #15
    3602:	ble.n	35ea <_malloc_r+0x56>
    3604:	ldr	r1, [pc, #740]	; (38ec <_malloc_r+0x358>)
    3606:	ldr	r4, [r7, #16]
    3608:	add.w	lr, r1, #8
    360c:	cmp	r4, lr
    360e:	beq.w	3978 <_malloc_r+0x3e4>
    3612:	ldr	r3, [r4, #4]
    3614:	bic.w	r3, r3, #3
    3618:	subs	r2, r3, r5
    361a:	cmp	r2, #15
    361c:	bgt.w	3952 <_malloc_r+0x3be>
    3620:	cmp	r2, #0
    3622:	str.w	lr, [r1, #20]
    3626:	str.w	lr, [r1, #16]
    362a:	bge.w	376a <_malloc_r+0x1d6>
    362e:	cmp.w	r3, #512	; 0x200
    3632:	bcs.w	3904 <_malloc_r+0x370>
    3636:	lsrs	r3, r3, #3
    3638:	add.w	ip, r3, #1
    363c:	movs	r2, #1
    363e:	asrs	r3, r3, #2
    3640:	lsl.w	r3, r2, r3
    3644:	ldr	r2, [r1, #4]
    3646:	ldr.w	r8, [r1, ip, lsl #3]
    364a:	str.w	r8, [r4, #8]
    364e:	add.w	r9, r1, ip, lsl #3
    3652:	orrs	r2, r3
    3654:	sub.w	r3, r9, #8
    3658:	str	r3, [r4, #12]
    365a:	str	r2, [r1, #4]
    365c:	str.w	r4, [r1, ip, lsl #3]
    3660:	str.w	r4, [r8, #12]
    3664:	asrs	r3, r0, #2
    3666:	movs	r4, #1
    3668:	lsls	r4, r3
    366a:	cmp	r4, r2
    366c:	bhi.w	3784 <_malloc_r+0x1f0>
    3670:	tst	r4, r2
    3672:	bne.n	3682 <_malloc_r+0xee>
    3674:	bic.w	r0, r0, #3
    3678:	lsls	r4, r4, #1
    367a:	tst	r4, r2
    367c:	add.w	r0, r0, #4
    3680:	beq.n	3678 <_malloc_r+0xe4>
    3682:	add.w	r9, r7, r0, lsl #3
    3686:	mov	ip, r9
    3688:	mov	r8, r0
    368a:	ldr.w	r1, [ip, #12]
    368e:	cmp	ip, r1
    3690:	bne.n	36a2 <_malloc_r+0x10e>
    3692:	b.n	397c <_malloc_r+0x3e8>
    3694:	cmp	r2, #0
    3696:	bge.w	399c <_malloc_r+0x408>
    369a:	ldr	r1, [r1, #12]
    369c:	cmp	ip, r1
    369e:	beq.w	397c <_malloc_r+0x3e8>
    36a2:	ldr	r3, [r1, #4]
    36a4:	bic.w	r3, r3, #3
    36a8:	subs	r2, r3, r5
    36aa:	cmp	r2, #15
    36ac:	ble.n	3694 <_malloc_r+0x100>
    36ae:	mov	r4, r1
    36b0:	ldr.w	ip, [r1, #12]
    36b4:	ldr.w	r8, [r4, #8]!
    36b8:	adds	r3, r1, r5
    36ba:	orr.w	r5, r5, #1
    36be:	str	r5, [r1, #4]
    36c0:	orr.w	r1, r2, #1
    36c4:	str.w	ip, [r8, #12]
    36c8:	mov	r0, r6
    36ca:	str.w	r8, [ip, #8]
    36ce:	str	r3, [r7, #20]
    36d0:	str	r3, [r7, #16]
    36d2:	str.w	lr, [r3, #12]
    36d6:	str.w	lr, [r3, #8]
    36da:	str	r1, [r3, #4]
    36dc:	str	r2, [r3, r2]
    36de:	bl	3b08 <__malloc_unlock>
    36e2:	b.n	3724 <_malloc_r+0x190>
    36e4:	cmp	r1, #16
    36e6:	bhi.n	372c <_malloc_r+0x198>
    36e8:	bl	3b04 <__malloc_lock>
    36ec:	movs	r5, #16
    36ee:	movs	r3, #6
    36f0:	movs	r0, #2
    36f2:	ldr	r7, [pc, #504]	; (38ec <_malloc_r+0x358>)
    36f4:	add.w	r3, r7, r3, lsl #2
    36f8:	sub.w	r2, r3, #8
    36fc:	ldr	r4, [r3, #4]
    36fe:	cmp	r4, r2
    3700:	beq.w	398e <_malloc_r+0x3fa>
    3704:	ldr	r3, [r4, #4]
    3706:	ldr	r1, [r4, #12]
    3708:	ldr	r5, [r4, #8]
    370a:	bic.w	r3, r3, #3
    370e:	add	r3, r4
    3710:	mov	r0, r6
    3712:	ldr	r2, [r3, #4]
    3714:	str	r1, [r5, #12]
    3716:	orr.w	r2, r2, #1
    371a:	str	r5, [r1, #8]
    371c:	str	r2, [r3, #4]
    371e:	bl	3b08 <__malloc_unlock>
    3722:	adds	r4, #8
    3724:	mov	r0, r4
    3726:	add	sp, #12
    3728:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    372c:	movs	r4, #0
    372e:	movs	r3, #12
    3730:	mov	r0, r4
    3732:	str	r3, [r6, #0]
    3734:	add	sp, #12
    3736:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    373a:	movs	r3, #128	; 0x80
    373c:	mov.w	lr, #64	; 0x40
    3740:	movs	r0, #63	; 0x3f
    3742:	b.n	35d8 <_malloc_r+0x44>
    3744:	mov	r0, lr
    3746:	b.n	3604 <_malloc_r+0x70>
    3748:	add	r3, r4
    374a:	ldr	r1, [r4, #12]
    374c:	ldr	r2, [r3, #4]
    374e:	ldr	r5, [r4, #8]
    3750:	orr.w	r2, r2, #1
    3754:	str	r1, [r5, #12]
    3756:	mov	r0, r6
    3758:	str	r5, [r1, #8]
    375a:	str	r2, [r3, #4]
    375c:	bl	3b08 <__malloc_unlock>
    3760:	adds	r4, #8
    3762:	mov	r0, r4
    3764:	add	sp, #12
    3766:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    376a:	add	r3, r4
    376c:	mov	r0, r6
    376e:	ldr	r2, [r3, #4]
    3770:	orr.w	r2, r2, #1
    3774:	str	r2, [r3, #4]
    3776:	bl	3b08 <__malloc_unlock>
    377a:	adds	r4, #8
    377c:	mov	r0, r4
    377e:	add	sp, #12
    3780:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3784:	ldr	r4, [r7, #8]
    3786:	ldr	r3, [r4, #4]
    3788:	bic.w	r8, r3, #3
    378c:	cmp	r8, r5
    378e:	bcc.n	379a <_malloc_r+0x206>
    3790:	rsb	r3, r5, r8
    3794:	cmp	r3, #15
    3796:	bgt.w	38b2 <_malloc_r+0x31e>
    379a:	ldr	r3, [pc, #340]	; (38f0 <_malloc_r+0x35c>)
    379c:	ldr.w	r9, [pc, #352]	; 3900 <_malloc_r+0x36c>
    37a0:	ldr	r2, [r3, #0]
    37a2:	ldr.w	r3, [r9]
    37a6:	adds	r3, #1
    37a8:	add	r2, r5
    37aa:	add.w	sl, r4, r8
    37ae:	beq.w	3a72 <_malloc_r+0x4de>
    37b2:	add.w	r2, r2, #4096	; 0x1000
    37b6:	adds	r2, #15
    37b8:	bic.w	r2, r2, #4080	; 0xff0
    37bc:	bic.w	r2, r2, #15
    37c0:	mov	r1, r2
    37c2:	mov	r0, r6
    37c4:	str	r2, [sp, #4]
    37c6:	bl	3b0c <_sbrk_r>
    37ca:	cmp.w	r0, #4294967295
    37ce:	mov	fp, r0
    37d0:	ldr	r2, [sp, #4]
    37d2:	beq.w	3a86 <_malloc_r+0x4f2>
    37d6:	cmp	sl, r0
    37d8:	bhi.w	39d4 <_malloc_r+0x440>
    37dc:	ldr	r3, [pc, #276]	; (38f4 <_malloc_r+0x360>)
    37de:	ldr	r1, [r3, #0]
    37e0:	cmp	sl, fp
    37e2:	add	r1, r2
    37e4:	str	r1, [r3, #0]
    37e6:	beq.w	3a90 <_malloc_r+0x4fc>
    37ea:	ldr.w	r0, [r9]
    37ee:	ldr.w	lr, [pc, #272]	; 3900 <_malloc_r+0x36c>
    37f2:	adds	r0, #1
    37f4:	ittet	ne
    37f6:	rsbne	sl, sl, fp
    37fa:	addne	r1, sl
    37fc:	streq.w	fp, [lr]
    3800:	strne	r1, [r3, #0]
    3802:	ands.w	r1, fp, #7
    3806:	beq.w	3a38 <_malloc_r+0x4a4>
    380a:	rsb	r0, r1, #8
    380e:	rsb	r1, r1, #4096	; 0x1000
    3812:	add	fp, r0
    3814:	adds	r1, #8
    3816:	add	r2, fp
    3818:	ubfx	r2, r2, #0, #12
    381c:	rsb	r9, r2, r1
    3820:	mov	r1, r9
    3822:	mov	r0, r6
    3824:	str	r3, [sp, #4]
    3826:	bl	3b0c <_sbrk_r>
    382a:	adds	r3, r0, #1
    382c:	ldr	r3, [sp, #4]
    382e:	beq.w	3ab0 <_malloc_r+0x51c>
    3832:	rsb	r2, fp, r0
    3836:	add	r2, r9
    3838:	orr.w	r2, r2, #1
    383c:	ldr	r1, [r3, #0]
    383e:	str.w	fp, [r7, #8]
    3842:	add	r1, r9
    3844:	cmp	r4, r7
    3846:	str.w	r2, [fp, #4]
    384a:	str	r1, [r3, #0]
    384c:	ldr.w	r9, [pc, #164]	; 38f4 <_malloc_r+0x360>
    3850:	beq.n	3880 <_malloc_r+0x2ec>
    3852:	cmp.w	r8, #15
    3856:	bls.w	3a54 <_malloc_r+0x4c0>
    385a:	ldr	r2, [r4, #4]
    385c:	sub.w	r3, r8, #12
    3860:	bic.w	r3, r3, #7
    3864:	adds	r0, r4, r3
    3866:	and.w	r2, r2, #1
    386a:	mov.w	lr, #5
    386e:	orrs	r2, r3
    3870:	cmp	r3, #15
    3872:	str	r2, [r4, #4]
    3874:	str.w	lr, [r0, #4]
    3878:	str.w	lr, [r0, #8]
    387c:	bhi.w	3ab8 <_malloc_r+0x524>
    3880:	ldr	r3, [pc, #116]	; (38f8 <_malloc_r+0x364>)
    3882:	ldr	r4, [r7, #8]
    3884:	ldr	r2, [r3, #0]
    3886:	cmp	r1, r2
    3888:	it	hi
    388a:	strhi	r1, [r3, #0]
    388c:	ldr	r3, [pc, #108]	; (38fc <_malloc_r+0x368>)
    388e:	ldr	r2, [r3, #0]
    3890:	cmp	r1, r2
    3892:	ldr	r2, [r4, #4]
    3894:	it	hi
    3896:	strhi	r1, [r3, #0]
    3898:	bic.w	r2, r2, #3
    389c:	cmp	r5, r2
    389e:	sub.w	r3, r2, r5
    38a2:	bhi.n	38a8 <_malloc_r+0x314>
    38a4:	cmp	r3, #15
    38a6:	bgt.n	38b2 <_malloc_r+0x31e>
    38a8:	mov	r0, r6
    38aa:	bl	3b08 <__malloc_unlock>
    38ae:	movs	r4, #0
    38b0:	b.n	3724 <_malloc_r+0x190>
    38b2:	adds	r2, r4, r5
    38b4:	orr.w	r3, r3, #1
    38b8:	orr.w	r5, r5, #1
    38bc:	str	r5, [r4, #4]
    38be:	mov	r0, r6
    38c0:	str	r2, [r7, #8]
    38c2:	str	r3, [r2, #4]
    38c4:	bl	3b08 <__malloc_unlock>
    38c8:	adds	r4, #8
    38ca:	mov	r0, r4
    38cc:	add	sp, #12
    38ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38d2:	cmp	r3, #20
    38d4:	bls.n	39ba <_malloc_r+0x426>
    38d6:	cmp	r3, #84	; 0x54
    38d8:	bhi.w	3a24 <_malloc_r+0x490>
    38dc:	lsrs	r0, r5, #12
    38de:	add.w	lr, r0, #111	; 0x6f
    38e2:	mov.w	r3, lr, lsl #1
    38e6:	adds	r0, #110	; 0x6e
    38e8:	b.n	35d8 <_malloc_r+0x44>
    38ea:	nop
    38ec:	.word	0x1fff1184
    38f0:	.word	0x1fff1a50
    38f4:	.word	0x1fff1a54
    38f8:	.word	0x1fff1a4c
    38fc:	.word	0x1fff1a48
    3900:	.word	0x1fff1590
    3904:	lsrs	r2, r3, #9
    3906:	cmp	r2, #4
    3908:	bls.n	39c8 <_malloc_r+0x434>
    390a:	cmp	r2, #20
    390c:	bhi.w	3a76 <_malloc_r+0x4e2>
    3910:	add.w	r1, r2, #92	; 0x5c
    3914:	lsls	r1, r1, #1
    3916:	adds	r2, #91	; 0x5b
    3918:	add.w	ip, r7, r1, lsl #2
    391c:	ldr.w	r1, [r7, r1, lsl #2]
    3920:	ldr.w	r8, [pc, #476]	; 3b00 <_malloc_r+0x56c>
    3924:	sub.w	ip, ip, #8
    3928:	cmp	ip, r1
    392a:	beq.w	3a3e <_malloc_r+0x4aa>
    392e:	ldr	r2, [r1, #4]
    3930:	bic.w	r2, r2, #3
    3934:	cmp	r3, r2
    3936:	bcs.n	393e <_malloc_r+0x3aa>
    3938:	ldr	r1, [r1, #8]
    393a:	cmp	ip, r1
    393c:	bne.n	392e <_malloc_r+0x39a>
    393e:	ldr.w	ip, [r1, #12]
    3942:	ldr	r2, [r7, #4]
    3944:	str.w	ip, [r4, #12]
    3948:	str	r1, [r4, #8]
    394a:	str.w	r4, [ip, #8]
    394e:	str	r4, [r1, #12]
    3950:	b.n	3664 <_malloc_r+0xd0>
    3952:	adds	r3, r4, r5
    3954:	orr.w	r7, r2, #1
    3958:	orr.w	r5, r5, #1
    395c:	str	r5, [r4, #4]
    395e:	mov	r0, r6
    3960:	str	r3, [r1, #20]
    3962:	str	r3, [r1, #16]
    3964:	str.w	lr, [r3, #12]
    3968:	str.w	lr, [r3, #8]
    396c:	str	r7, [r3, #4]
    396e:	str	r2, [r3, r2]
    3970:	adds	r4, #8
    3972:	bl	3b08 <__malloc_unlock>
    3976:	b.n	3724 <_malloc_r+0x190>
    3978:	ldr	r2, [r1, #4]
    397a:	b.n	3664 <_malloc_r+0xd0>
    397c:	add.w	r8, r8, #1
    3980:	tst.w	r8, #3
    3984:	add.w	ip, ip, #8
    3988:	bne.w	368a <_malloc_r+0xf6>
    398c:	b.n	39f0 <_malloc_r+0x45c>
    398e:	ldr	r4, [r3, #12]
    3990:	cmp	r3, r4
    3992:	it	eq
    3994:	addeq	r0, #2
    3996:	beq.w	3604 <_malloc_r+0x70>
    399a:	b.n	3704 <_malloc_r+0x170>
    399c:	add	r3, r1
    399e:	mov	r4, r1
    39a0:	ldr	r2, [r3, #4]
    39a2:	ldr	r1, [r1, #12]
    39a4:	ldr.w	r5, [r4, #8]!
    39a8:	orr.w	r2, r2, #1
    39ac:	str	r2, [r3, #4]
    39ae:	mov	r0, r6
    39b0:	str	r1, [r5, #12]
    39b2:	str	r5, [r1, #8]
    39b4:	bl	3b08 <__malloc_unlock>
    39b8:	b.n	3724 <_malloc_r+0x190>
    39ba:	add.w	lr, r3, #92	; 0x5c
    39be:	add.w	r0, r3, #91	; 0x5b
    39c2:	mov.w	r3, lr, lsl #1
    39c6:	b.n	35d8 <_malloc_r+0x44>
    39c8:	lsrs	r2, r3, #6
    39ca:	add.w	r1, r2, #57	; 0x39
    39ce:	lsls	r1, r1, #1
    39d0:	adds	r2, #56	; 0x38
    39d2:	b.n	3918 <_malloc_r+0x384>
    39d4:	cmp	r4, r7
    39d6:	ldr	r3, [pc, #296]	; (3b00 <_malloc_r+0x56c>)
    39d8:	beq.w	37dc <_malloc_r+0x248>
    39dc:	ldr	r4, [r3, #8]
    39de:	ldr	r2, [r4, #4]
    39e0:	bic.w	r2, r2, #3
    39e4:	b.n	389c <_malloc_r+0x308>
    39e6:	ldr.w	r3, [r9], #-8
    39ea:	cmp	r9, r3
    39ec:	bne.w	3af4 <_malloc_r+0x560>
    39f0:	tst.w	r0, #3
    39f4:	add.w	r0, r0, #4294967295
    39f8:	bne.n	39e6 <_malloc_r+0x452>
    39fa:	ldr	r3, [r7, #4]
    39fc:	bic.w	r3, r3, r4
    3a00:	str	r3, [r7, #4]
    3a02:	lsls	r4, r4, #1
    3a04:	cmp	r4, r3
    3a06:	bhi.w	3784 <_malloc_r+0x1f0>
    3a0a:	cmp	r4, #0
    3a0c:	beq.w	3784 <_malloc_r+0x1f0>
    3a10:	tst	r4, r3
    3a12:	mov	r0, r8
    3a14:	bne.w	3682 <_malloc_r+0xee>
    3a18:	lsls	r4, r4, #1
    3a1a:	tst	r4, r3
    3a1c:	add.w	r0, r0, #4
    3a20:	beq.n	3a18 <_malloc_r+0x484>
    3a22:	b.n	3682 <_malloc_r+0xee>
    3a24:	cmp.w	r3, #340	; 0x154
    3a28:	bhi.n	3a5c <_malloc_r+0x4c8>
    3a2a:	lsrs	r0, r5, #15
    3a2c:	add.w	lr, r0, #120	; 0x78
    3a30:	mov.w	r3, lr, lsl #1
    3a34:	adds	r0, #119	; 0x77
    3a36:	b.n	35d8 <_malloc_r+0x44>
    3a38:	mov.w	r1, #4096	; 0x1000
    3a3c:	b.n	3816 <_malloc_r+0x282>
    3a3e:	movs	r1, #1
    3a40:	ldr.w	r3, [r8, #4]
    3a44:	asrs	r2, r2, #2
    3a46:	lsl.w	r2, r1, r2
    3a4a:	orrs	r2, r3
    3a4c:	str.w	r2, [r8, #4]
    3a50:	mov	r1, ip
    3a52:	b.n	3944 <_malloc_r+0x3b0>
    3a54:	movs	r3, #1
    3a56:	str.w	r3, [fp, #4]
    3a5a:	b.n	38a8 <_malloc_r+0x314>
    3a5c:	movw	r2, #1364	; 0x554
    3a60:	cmp	r3, r2
    3a62:	bhi.n	3aa6 <_malloc_r+0x512>
    3a64:	lsrs	r0, r5, #18
    3a66:	add.w	lr, r0, #125	; 0x7d
    3a6a:	mov.w	r3, lr, lsl #1
    3a6e:	adds	r0, #124	; 0x7c
    3a70:	b.n	35d8 <_malloc_r+0x44>
    3a72:	adds	r2, #16
    3a74:	b.n	37c0 <_malloc_r+0x22c>
    3a76:	cmp	r2, #84	; 0x54
    3a78:	bhi.n	3ac8 <_malloc_r+0x534>
    3a7a:	lsrs	r2, r3, #12
    3a7c:	add.w	r1, r2, #111	; 0x6f
    3a80:	lsls	r1, r1, #1
    3a82:	adds	r2, #110	; 0x6e
    3a84:	b.n	3918 <_malloc_r+0x384>
    3a86:	ldr	r4, [r7, #8]
    3a88:	ldr	r2, [r4, #4]
    3a8a:	bic.w	r2, r2, #3
    3a8e:	b.n	389c <_malloc_r+0x308>
    3a90:	ubfx	r0, sl, #0, #12
    3a94:	cmp	r0, #0
    3a96:	bne.w	37ea <_malloc_r+0x256>
    3a9a:	add	r2, r8
    3a9c:	ldr	r3, [r7, #8]
    3a9e:	orr.w	r2, r2, #1
    3aa2:	str	r2, [r3, #4]
    3aa4:	b.n	3880 <_malloc_r+0x2ec>
    3aa6:	movs	r3, #254	; 0xfe
    3aa8:	mov.w	lr, #127	; 0x7f
    3aac:	movs	r0, #126	; 0x7e
    3aae:	b.n	35d8 <_malloc_r+0x44>
    3ab0:	movs	r2, #1
    3ab2:	mov.w	r9, #0
    3ab6:	b.n	383c <_malloc_r+0x2a8>
    3ab8:	add.w	r1, r4, #8
    3abc:	mov	r0, r6
    3abe:	bl	3c14 <_free_r>
    3ac2:	ldr.w	r1, [r9]
    3ac6:	b.n	3880 <_malloc_r+0x2ec>
    3ac8:	cmp.w	r2, #340	; 0x154
    3acc:	bhi.n	3ada <_malloc_r+0x546>
    3ace:	lsrs	r2, r3, #15
    3ad0:	add.w	r1, r2, #120	; 0x78
    3ad4:	lsls	r1, r1, #1
    3ad6:	adds	r2, #119	; 0x77
    3ad8:	b.n	3918 <_malloc_r+0x384>
    3ada:	movw	r1, #1364	; 0x554
    3ade:	cmp	r2, r1
    3ae0:	bhi.n	3aee <_malloc_r+0x55a>
    3ae2:	lsrs	r2, r3, #18
    3ae4:	add.w	r1, r2, #125	; 0x7d
    3ae8:	lsls	r1, r1, #1
    3aea:	adds	r2, #124	; 0x7c
    3aec:	b.n	3918 <_malloc_r+0x384>
    3aee:	movs	r1, #254	; 0xfe
    3af0:	movs	r2, #126	; 0x7e
    3af2:	b.n	3918 <_malloc_r+0x384>
    3af4:	ldr	r3, [r7, #4]
    3af6:	b.n	3a02 <_malloc_r+0x46e>
    3af8:	lsrs	r0, r5, #3
    3afa:	adds	r3, r0, #1
    3afc:	lsls	r3, r3, #1
    3afe:	b.n	36f2 <_malloc_r+0x15e>
    3b00:	.word	0x1fff1184

00003b04 <__malloc_lock>:
    3b04:	bx	lr
    3b06:	nop

00003b08 <__malloc_unlock>:
    3b08:	bx	lr
    3b0a:	nop

00003b0c <_sbrk_r>:
    3b0c:	push	{r3, r4, r5, lr}
    3b0e:	ldr	r4, [pc, #28]	; (3b2c <_sbrk_r+0x20>)
    3b10:	movs	r3, #0
    3b12:	mov	r5, r0
    3b14:	mov	r0, r1
    3b16:	str	r3, [r4, #0]
    3b18:	bl	2e90 <_sbrk>
    3b1c:	adds	r3, r0, #1
    3b1e:	beq.n	3b22 <_sbrk_r+0x16>
    3b20:	pop	{r3, r4, r5, pc}
    3b22:	ldr	r3, [r4, #0]
    3b24:	cmp	r3, #0
    3b26:	beq.n	3b20 <_sbrk_r+0x14>
    3b28:	str	r3, [r5, #0]
    3b2a:	pop	{r3, r4, r5, pc}
    3b2c:	.word	0x1fff1bc0

00003b30 <register_fini>:
    3b30:	ldr	r3, [pc, #8]	; (3b3c <register_fini+0xc>)
    3b32:	cbz	r3, 3b3a <register_fini+0xa>
    3b34:	ldr	r0, [pc, #8]	; (3b40 <register_fini+0x10>)
    3b36:	b.w	3b44 <atexit>
    3b3a:	bx	lr
    3b3c:	.word	0x00000000
    3b40:	.word	0x00003b51

00003b44 <atexit>:
    3b44:	movs	r3, #0
    3b46:	mov	r1, r0
    3b48:	mov	r2, r3
    3b4a:	mov	r0, r3
    3b4c:	b.w	3de4 <__register_exitproc>

00003b50 <__libc_fini_array>:
    3b50:	push	{r3, r4, r5, lr}
    3b52:	ldr	r5, [pc, #28]	; (3b70 <__libc_fini_array+0x20>)
    3b54:	ldr	r4, [pc, #28]	; (3b74 <__libc_fini_array+0x24>)
    3b56:	subs	r4, r5, r4
    3b58:	asrs	r4, r4, #2
    3b5a:	beq.n	3b68 <__libc_fini_array+0x18>
    3b5c:	subs	r4, #1
    3b5e:	ldr.w	r3, [r5, #-4]!
    3b62:	blx	r3
    3b64:	cmp	r4, #0
    3b66:	bne.n	3b5c <__libc_fini_array+0xc>
    3b68:	ldmia.w	sp!, {r3, r4, r5, lr}
    3b6c:	b.w	4214 <__init_array_end>
	...

00003b78 <_malloc_trim_r>:
    3b78:	push	{r3, r4, r5, r6, r7, lr}
    3b7a:	ldr	r7, [pc, #140]	; (3c08 <_malloc_trim_r+0x90>)
    3b7c:	mov	r4, r1
    3b7e:	mov	r6, r0
    3b80:	bl	3b04 <__malloc_lock>
    3b84:	ldr	r3, [r7, #8]
    3b86:	ldr	r5, [r3, #4]
    3b88:	bic.w	r5, r5, #3
    3b8c:	subs	r1, r5, r4
    3b8e:	addw	r1, r1, #4079	; 0xfef
    3b92:	bic.w	r1, r1, #4080	; 0xff0
    3b96:	bic.w	r1, r1, #15
    3b9a:	sub.w	r4, r1, #4096	; 0x1000
    3b9e:	cmp.w	r4, #4096	; 0x1000
    3ba2:	blt.n	3bb4 <_malloc_trim_r+0x3c>
    3ba4:	movs	r1, #0
    3ba6:	mov	r0, r6
    3ba8:	bl	3b0c <_sbrk_r>
    3bac:	ldr	r3, [r7, #8]
    3bae:	add	r3, r5
    3bb0:	cmp	r0, r3
    3bb2:	beq.n	3bbe <_malloc_trim_r+0x46>
    3bb4:	mov	r0, r6
    3bb6:	bl	3b08 <__malloc_unlock>
    3bba:	movs	r0, #0
    3bbc:	pop	{r3, r4, r5, r6, r7, pc}
    3bbe:	negs	r1, r4
    3bc0:	mov	r0, r6
    3bc2:	bl	3b0c <_sbrk_r>
    3bc6:	adds	r0, #1
    3bc8:	beq.n	3be6 <_malloc_trim_r+0x6e>
    3bca:	ldr	r3, [pc, #64]	; (3c0c <_malloc_trim_r+0x94>)
    3bcc:	ldr	r2, [r7, #8]
    3bce:	ldr	r1, [r3, #0]
    3bd0:	subs	r5, r5, r4
    3bd2:	orr.w	r5, r5, #1
    3bd6:	mov	r0, r6
    3bd8:	subs	r1, r1, r4
    3bda:	str	r5, [r2, #4]
    3bdc:	str	r1, [r3, #0]
    3bde:	bl	3b08 <__malloc_unlock>
    3be2:	movs	r0, #1
    3be4:	pop	{r3, r4, r5, r6, r7, pc}
    3be6:	movs	r1, #0
    3be8:	mov	r0, r6
    3bea:	bl	3b0c <_sbrk_r>
    3bee:	ldr	r2, [r7, #8]
    3bf0:	subs	r3, r0, r2
    3bf2:	cmp	r3, #15
    3bf4:	ble.n	3bb4 <_malloc_trim_r+0x3c>
    3bf6:	ldr	r4, [pc, #24]	; (3c10 <_malloc_trim_r+0x98>)
    3bf8:	ldr	r1, [pc, #16]	; (3c0c <_malloc_trim_r+0x94>)
    3bfa:	ldr	r4, [r4, #0]
    3bfc:	orr.w	r3, r3, #1
    3c00:	subs	r0, r0, r4
    3c02:	str	r3, [r2, #4]
    3c04:	str	r0, [r1, #0]
    3c06:	b.n	3bb4 <_malloc_trim_r+0x3c>
    3c08:	.word	0x1fff1184
    3c0c:	.word	0x1fff1a54
    3c10:	.word	0x1fff1590

00003c14 <_free_r>:
    3c14:	cmp	r1, #0
    3c16:	beq.n	3ca4 <_free_r+0x90>
    3c18:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c1c:	mov	r5, r1
    3c1e:	mov	r8, r0
    3c20:	bl	3b04 <__malloc_lock>
    3c24:	ldr.w	r7, [r5, #-4]
    3c28:	ldr	r1, [pc, #424]	; (3dd4 <_free_r+0x1c0>)
    3c2a:	bic.w	r3, r7, #1
    3c2e:	sub.w	r4, r5, #8
    3c32:	adds	r2, r4, r3
    3c34:	ldr	r6, [r1, #8]
    3c36:	ldr	r0, [r2, #4]
    3c38:	cmp	r2, r6
    3c3a:	bic.w	r0, r0, #3
    3c3e:	beq.n	3d06 <_free_r+0xf2>
    3c40:	lsls	r6, r7, #31
    3c42:	str	r0, [r2, #4]
    3c44:	bmi.n	3c5e <_free_r+0x4a>
    3c46:	ldr.w	r7, [r5, #-8]
    3c4a:	subs	r4, r4, r7
    3c4c:	add.w	lr, r1, #8
    3c50:	ldr	r5, [r4, #8]
    3c52:	cmp	r5, lr
    3c54:	add	r3, r7
    3c56:	beq.n	3d38 <_free_r+0x124>
    3c58:	ldr	r7, [r4, #12]
    3c5a:	str	r7, [r5, #12]
    3c5c:	str	r5, [r7, #8]
    3c5e:	adds	r5, r2, r0
    3c60:	ldr	r5, [r5, #4]
    3c62:	lsls	r5, r5, #31
    3c64:	bpl.n	3cec <_free_r+0xd8>
    3c66:	orr.w	r2, r3, #1
    3c6a:	str	r2, [r4, #4]
    3c6c:	str	r3, [r4, r3]
    3c6e:	cmp.w	r3, #512	; 0x200
    3c72:	bcs.n	3ca6 <_free_r+0x92>
    3c74:	lsrs	r3, r3, #3
    3c76:	adds	r2, r3, #1
    3c78:	ldr	r5, [r1, #4]
    3c7a:	ldr.w	r7, [r1, r2, lsl #3]
    3c7e:	str	r7, [r4, #8]
    3c80:	movs	r0, #1
    3c82:	asrs	r3, r3, #2
    3c84:	lsl.w	r3, r0, r3
    3c88:	add.w	r0, r1, r2, lsl #3
    3c8c:	orrs	r5, r3
    3c8e:	subs	r0, #8
    3c90:	str	r0, [r4, #12]
    3c92:	str	r5, [r1, #4]
    3c94:	str.w	r4, [r1, r2, lsl #3]
    3c98:	str	r4, [r7, #12]
    3c9a:	mov	r0, r8
    3c9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3ca0:	b.w	3b08 <__malloc_unlock>
    3ca4:	bx	lr
    3ca6:	lsrs	r2, r3, #9
    3ca8:	cmp	r2, #4
    3caa:	bhi.n	3d54 <_free_r+0x140>
    3cac:	lsrs	r2, r3, #6
    3cae:	add.w	r7, r2, #57	; 0x39
    3cb2:	lsls	r7, r7, #1
    3cb4:	add.w	r5, r2, #56	; 0x38
    3cb8:	add.w	r0, r1, r7, lsl #2
    3cbc:	ldr.w	r2, [r1, r7, lsl #2]
    3cc0:	ldr	r1, [pc, #272]	; (3dd4 <_free_r+0x1c0>)
    3cc2:	subs	r0, #8
    3cc4:	cmp	r0, r2
    3cc6:	beq.n	3d64 <_free_r+0x150>
    3cc8:	ldr	r1, [r2, #4]
    3cca:	bic.w	r1, r1, #3
    3cce:	cmp	r3, r1
    3cd0:	bcs.n	3cd8 <_free_r+0xc4>
    3cd2:	ldr	r2, [r2, #8]
    3cd4:	cmp	r0, r2
    3cd6:	bne.n	3cc8 <_free_r+0xb4>
    3cd8:	ldr	r0, [r2, #12]
    3cda:	str	r0, [r4, #12]
    3cdc:	str	r2, [r4, #8]
    3cde:	str	r4, [r0, #8]
    3ce0:	str	r4, [r2, #12]
    3ce2:	mov	r0, r8
    3ce4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3ce8:	b.w	3b08 <__malloc_unlock>
    3cec:	ldr	r5, [r2, #8]
    3cee:	ldr	r7, [pc, #232]	; (3dd8 <_free_r+0x1c4>)
    3cf0:	cmp	r5, r7
    3cf2:	add	r3, r0
    3cf4:	beq.n	3d76 <_free_r+0x162>
    3cf6:	ldr	r0, [r2, #12]
    3cf8:	str	r0, [r5, #12]
    3cfa:	orr.w	r2, r3, #1
    3cfe:	str	r5, [r0, #8]
    3d00:	str	r2, [r4, #4]
    3d02:	str	r3, [r4, r3]
    3d04:	b.n	3c6e <_free_r+0x5a>
    3d06:	lsls	r7, r7, #31
    3d08:	add	r3, r0
    3d0a:	bmi.n	3d1c <_free_r+0x108>
    3d0c:	ldr.w	r2, [r5, #-8]
    3d10:	subs	r4, r4, r2
    3d12:	add	r3, r2
    3d14:	ldr	r0, [r4, #8]
    3d16:	ldr	r2, [r4, #12]
    3d18:	str	r2, [r0, #12]
    3d1a:	str	r0, [r2, #8]
    3d1c:	ldr	r2, [pc, #188]	; (3ddc <_free_r+0x1c8>)
    3d1e:	ldr	r2, [r2, #0]
    3d20:	orr.w	r0, r3, #1
    3d24:	cmp	r3, r2
    3d26:	str	r0, [r4, #4]
    3d28:	str	r4, [r1, #8]
    3d2a:	bcc.n	3c9a <_free_r+0x86>
    3d2c:	ldr	r3, [pc, #176]	; (3de0 <_free_r+0x1cc>)
    3d2e:	mov	r0, r8
    3d30:	ldr	r1, [r3, #0]
    3d32:	bl	3b78 <_malloc_trim_r>
    3d36:	b.n	3c9a <_free_r+0x86>
    3d38:	adds	r1, r2, r0
    3d3a:	ldr	r1, [r1, #4]
    3d3c:	lsls	r1, r1, #31
    3d3e:	bmi.n	3dca <_free_r+0x1b6>
    3d40:	ldr	r1, [r2, #8]
    3d42:	ldr	r2, [r2, #12]
    3d44:	str	r2, [r1, #12]
    3d46:	add	r3, r0
    3d48:	orr.w	r0, r3, #1
    3d4c:	str	r1, [r2, #8]
    3d4e:	str	r0, [r4, #4]
    3d50:	str	r3, [r4, r3]
    3d52:	b.n	3c9a <_free_r+0x86>
    3d54:	cmp	r2, #20
    3d56:	bhi.n	3d88 <_free_r+0x174>
    3d58:	add.w	r7, r2, #92	; 0x5c
    3d5c:	lsls	r7, r7, #1
    3d5e:	add.w	r5, r2, #91	; 0x5b
    3d62:	b.n	3cb8 <_free_r+0xa4>
    3d64:	asrs	r2, r5, #2
    3d66:	ldr	r3, [r1, #4]
    3d68:	movs	r5, #1
    3d6a:	lsl.w	r2, r5, r2
    3d6e:	orrs	r3, r2
    3d70:	str	r3, [r1, #4]
    3d72:	mov	r2, r0
    3d74:	b.n	3cda <_free_r+0xc6>
    3d76:	orr.w	r2, r3, #1
    3d7a:	str	r4, [r1, #20]
    3d7c:	str	r4, [r1, #16]
    3d7e:	str	r5, [r4, #12]
    3d80:	str	r5, [r4, #8]
    3d82:	str	r2, [r4, #4]
    3d84:	str	r3, [r4, r3]
    3d86:	b.n	3c9a <_free_r+0x86>
    3d88:	cmp	r2, #84	; 0x54
    3d8a:	bhi.n	3d9a <_free_r+0x186>
    3d8c:	lsrs	r2, r3, #12
    3d8e:	add.w	r7, r2, #111	; 0x6f
    3d92:	lsls	r7, r7, #1
    3d94:	add.w	r5, r2, #110	; 0x6e
    3d98:	b.n	3cb8 <_free_r+0xa4>
    3d9a:	cmp.w	r2, #340	; 0x154
    3d9e:	bhi.n	3dae <_free_r+0x19a>
    3da0:	lsrs	r2, r3, #15
    3da2:	add.w	r7, r2, #120	; 0x78
    3da6:	lsls	r7, r7, #1
    3da8:	add.w	r5, r2, #119	; 0x77
    3dac:	b.n	3cb8 <_free_r+0xa4>
    3dae:	movw	r0, #1364	; 0x554
    3db2:	cmp	r2, r0
    3db4:	bhi.n	3dc4 <_free_r+0x1b0>
    3db6:	lsrs	r2, r3, #18
    3db8:	add.w	r7, r2, #125	; 0x7d
    3dbc:	lsls	r7, r7, #1
    3dbe:	add.w	r5, r2, #124	; 0x7c
    3dc2:	b.n	3cb8 <_free_r+0xa4>
    3dc4:	movs	r7, #254	; 0xfe
    3dc6:	movs	r5, #126	; 0x7e
    3dc8:	b.n	3cb8 <_free_r+0xa4>
    3dca:	orr.w	r2, r3, #1
    3dce:	str	r2, [r4, #4]
    3dd0:	str	r3, [r4, r3]
    3dd2:	b.n	3c9a <_free_r+0x86>
    3dd4:	.word	0x1fff1184
    3dd8:	.word	0x1fff118c
    3ddc:	.word	0x1fff158c
    3de0:	.word	0x1fff1a50

00003de4 <__register_exitproc>:
    3de4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3de8:	ldr	r4, [pc, #148]	; (3e80 <__register_exitproc+0x9c>)
    3dea:	ldr	r5, [r4, #0]
    3dec:	ldr.w	r4, [r5, #328]	; 0x148
    3df0:	mov	r6, r0
    3df2:	mov	r8, r1
    3df4:	mov	sl, r2
    3df6:	mov	r9, r3
    3df8:	cbz	r4, 3e6c <__register_exitproc+0x88>
    3dfa:	ldr	r0, [r4, #4]
    3dfc:	cmp	r0, #31
    3dfe:	bgt.n	3e30 <__register_exitproc+0x4c>
    3e00:	adds	r3, r0, #1
    3e02:	cbz	r6, 3e22 <__register_exitproc+0x3e>
    3e04:	add.w	r5, r4, r0, lsl #2
    3e08:	movs	r2, #1
    3e0a:	str.w	sl, [r5, #136]	; 0x88
    3e0e:	ldr.w	r1, [r4, #392]	; 0x188
    3e12:	lsls	r2, r0
    3e14:	orrs	r1, r2
    3e16:	cmp	r6, #2
    3e18:	str.w	r1, [r4, #392]	; 0x188
    3e1c:	str.w	r9, [r5, #264]	; 0x108
    3e20:	beq.n	3e60 <__register_exitproc+0x7c>
    3e22:	adds	r0, #2
    3e24:	str	r3, [r4, #4]
    3e26:	str.w	r8, [r4, r0, lsl #2]
    3e2a:	movs	r0, #0
    3e2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e30:	ldr	r3, [pc, #80]	; (3e84 <__register_exitproc+0xa0>)
    3e32:	cbz	r3, 3e76 <__register_exitproc+0x92>
    3e34:	mov.w	r0, #400	; 0x190
    3e38:	bl	3574 <malloc>
    3e3c:	mov	r4, r0
    3e3e:	cbz	r0, 3e76 <__register_exitproc+0x92>
    3e40:	ldr.w	r3, [r5, #328]	; 0x148
    3e44:	movs	r7, #0
    3e46:	stmia.w	r0, {r3, r7}
    3e4a:	str.w	r4, [r5, #328]	; 0x148
    3e4e:	mov	r0, r7
    3e50:	movs	r3, #1
    3e52:	str.w	r7, [r4, #392]	; 0x188
    3e56:	str.w	r7, [r4, #396]	; 0x18c
    3e5a:	cmp	r6, #0
    3e5c:	beq.n	3e22 <__register_exitproc+0x3e>
    3e5e:	b.n	3e04 <__register_exitproc+0x20>
    3e60:	ldr.w	r1, [r4, #396]	; 0x18c
    3e64:	orrs	r2, r1
    3e66:	str.w	r2, [r4, #396]	; 0x18c
    3e6a:	b.n	3e22 <__register_exitproc+0x3e>
    3e6c:	add.w	r4, r5, #332	; 0x14c
    3e70:	str.w	r4, [r5, #328]	; 0x148
    3e74:	b.n	3dfa <__register_exitproc+0x16>
    3e76:	mov.w	r0, #4294967295
    3e7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e7e:	nop
    3e80:	.word	0x000041f8
    3e84:	.word	0x00003575
    3e88:	.word	0x6f486e6f
    3e8c:	.word	0x0000646c
    3e90:	.word	0x72506e6f
    3e94:	.word	0x00737365
    3e98:	.word	0x6f486e6f
    3e9c:	.word	0x6552646c
    3ea0:	.word	0x7361656c
    3ea4:	.word	0x00000065
    3ea8:	.word	0x65526e6f
    3eac:	.word	0x7361656c
    3eb0:	.word	0xffff0065
    3eb4:	.word	0x65746f4e
    3eb8:	.word	0x64707520
    3ebc:	.word	0x6e697461
    3ec0:	.word	0xffff0067
    3ec4:	.word	0x7370704f
    3ec8:	.word	0x6e61202c
    3ecc:	.word	0x6b6e7520
    3ed0:	.word	0x6e776f6e
    3ed4:	.word	0x44494d20
    3ed8:	.word	0x656d2049
    3edc:	.word	0x67617373
    3ee0:	.word	0x79742065
    3ee4:	.word	0x00216570
    3ee8:	.word	0x6f6c6556
    3eec:	.word	0x79746963
    3ef0:	.word	0x00000000
    3ef4:	.word	0x63746950
    3ef8:	.word	0x00000068
    3efc:	.word	0x65746f4e
    3f00:	.word	0x6e656c20
    3f04:	.word	0x00687467
    3f08:	.word	0x4f4c4556
    3f0c:	.word	0x59544943
    3f10:	.word	0x00000000
    3f14:	.word	0x45544f4e
    3f18:	.word	0x474e454c
    3f1c:	.word	0x00004854
    3f20:	.word	0x43544950
    3f24:	.word	0x00000048

00003f28 <pin2sc1a>:
    3f28:	................
    3f38:	................
    3f48:	................
    3f58:	................
    3f68:	........

00003f70 <digital_pin_to_info_PGM>:
    3f70:	@..C@..@D..CD..@
    3f80:	...C...@0..C0..@
    3f90:	4..C4..@...C...@
    3fa0:	...C...@...C...@
    3fb0:	...C...@...C...@
    3fc0:	...C...@...C...@
    3fd0:	...C...@...C...@
    3fe0:	...C...@...C...@
    3ff0:	...C...@...C...@
    4000:	...C...@...C...@
    4010:	...C...@...C...@
    4020:	...C...@...C...@
    4030:	h .Ch..@...C...@
    4040:	8..C8..@<..C<..@
    4050:	@..C@..@H..CH..@
    4060:	L..CL..@(..C(..@
    4070:	,..C,..@` .C`..@
    4080:	d .Cd..@ ..C ..@
    4090:	$..C$..@(..C(..@
    40a0:	,..C,..@D..CD..@
    40b0:	p..Cp..@t..Ct..@
    40c0:	h..Ch..@P..CP..@
    40d0:	X..CX..@\..C\..@
    40e0:	T..CT..@ ..C ..@
    40f0:	$..C$..@...C...@
    4100:	...C...@8..C8..@
    4110:	4..C4..@0..C0..@
    4120:	<..C<..@,..C,..@
    4130:	( .C(..@, .C,..@
    4140:	. .C...@. .C...@
    4150:	. .C...@. .C...@
    4160:	. .C...@. .C...@

00004170 <vtable for usb_serial_class>:
	...
    4178:	5*..-*..)*..%*..
    4188:	!*...*...*...*..
    4198:	....

0000419c <usb_endpoint_config_table>:
    419c:	........

000041a4 <usb_descriptor_list>:
    41a4:	....\...........
    41b4:	............8...
    41c4:	........p.......
    41d4:	.... ...........
    41e4:	<...............
    41f4:	....

000041f8 <_global_impure_ptr>:
    41f8:	X...

000041fc <_init>:
    41fc:	push	{r3, r4, r5, r6, r7, lr}
    41fe:	nop
    4200:	pop	{r3, r4, r5, r6, r7}
    4202:	pop	{r3}
    4204:	mov	lr, r3
    4206:	bx	lr

00004208 <__init_array_start>:
    4208:	.word	0x00003b31

0000420c <__frame_dummy_init_array_entry>:
    420c:	5.......

Disassembly of section .fini:

00004214 <_fini>:
    4214:	push	{r3, r4, r5, r6, r7, lr}
    4216:	nop

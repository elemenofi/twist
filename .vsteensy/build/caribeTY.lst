
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004d94 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff1594 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
000032c4 l     F .text	0000000c startup_default_early_hook
000032d0 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1594 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff1598 l       .bss	00000000 object.8610
00004d8c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 sequencer.cpp
00000000 l    df *ABS*	00000000 button.cpp
00000000 l    df *ABS*	00000000 piano.cpp
00000000 l    df *ABS*	00000000 led.cpp
00000000 l    df *ABS*	00000000 main.cpp
0000088c l     F .text	00000018 _GLOBAL__sub_I_sequencer
00000000 l    df *ABS*	00000000 note.cpp
00000000 l    df *ABS*	00000000 transport.cpp
00000000 l    df *ABS*	00000000 paginator.cpp
00000000 l    df *ABS*	00000000 step.cpp
00000000 l    df *ABS*	00000000 knob.cpp
00000000 l    df *ABS*	00000000 controller.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
1fff15b5 l     O .bss	00000001 tx_noautoflush
1fff15b8 l     O .bss	00000004 tx_packet
1fff15bc l     O .bss	00000001 transmit_previous_timeout
1fff15c0 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
000011fc l     F .text	00000144 wait_for_cal
1fff15c5 l     O .bss	00000001 analog_right_shift
1fff15c6 l     O .bss	00000001 calibrating
00004aa8 l     O .text	00000048 pin2sc1a
1fff0c40 l     O .data	00000001 analog_config_bits
1fff15c7 l     O .bss	00000001 analogReadBusyADC1
1fff15c8 l     O .bss	00000001 analogReadBusyADC0
1fff15c9 l     O .bss	00000001 analog_reference_internal
1fff0c41 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
0000151c l     F .text	0000004c digitalWrite.part.1
00001568 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00001848 l     F .text	00000048 sysex_byte
1fff15e4 l     O .bss	00000001 tx_noautoflush
1fff1610 l     O .bss	00000004 tx_packet
1fff1614 l     O .bss	00000001 transmit_previous_timeout
1fff161c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c44 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1630 l     O .bss	00000004 ep0_tx_ptr
1fff1634 l     O .bss	00000014 rx_last
1fff1648 l     O .bss	00000002 ep0_tx_len
1fff164c l     O .bss	00000040 ep0_rx0_buf
1fff168c l     O .bss	00000014 rx_first
1fff16a0 l     O .bss	00000001 ep0_tx_data_toggle
1fff16a4 l     O .bss	00000040 ep0_rx1_buf
1fff16e4 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff16f8 l     O .bss	00000014 tx_last
1fff170c l     O .bss	00000008 setup
1fff1714 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1718 l     O .bss	00000008 reply_buffer
1fff1724 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1729 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 WString.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 serial5.c
1fff172c l     O .bss	00000004 rts_pin
1fff1730 l     O .bss	00000001 rx_buffer_head
1fff1731 l     O .bss	00000001 rx_buffer_tail
1fff1734 l     O .bss	00000028 tx_buffer
1fff175c l     O .bss	00000040 rx_buffer
1fff179c l     O .bss	00000001 transmitting
1fff179d l     O .bss	00000001 tx_buffer_tail
1fff17a0 l     O .bss	00000004 transmit_pin
1fff17a4 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff17a8 l     O .bss	00000004 rts_pin
1fff17ac l     O .bss	00000001 transmitting
1fff17ad l     O .bss	00000001 rx_buffer_tail
1fff17b0 l     O .bss	00000028 tx_buffer
1fff17d8 l     O .bss	00000040 rx_buffer
1fff1818 l     O .bss	00000001 rx_buffer_head
1fff1819 l     O .bss	00000001 tx_buffer_tail
1fff181c l     O .bss	00000004 transmit_pin
1fff1820 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1824 l     O .bss	00000004 rts_pin
1fff1828 l     O .bss	00000001 rx_buffer_head
1fff1829 l     O .bss	00000001 rx_buffer_tail
1fff182c l     O .bss	00000028 tx_buffer
1fff1854 l     O .bss	00000040 rx_buffer
1fff1894 l     O .bss	00000001 transmitting
1fff1895 l     O .bss	00000001 tx_buffer_tail
1fff1898 l     O .bss	00000004 transmit_pin
1fff189c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff18a0 l     O .bss	00000004 rts_pin
1fff18a4 l     O .bss	00000001 rx_buffer_head
1fff18a5 l     O .bss	00000001 rx_buffer_tail
1fff18a8 l     O .bss	00000040 tx_buffer
1fff18e8 l     O .bss	00000040 rx_buffer
1fff1928 l     O .bss	00000001 transmitting
1fff1929 l     O .bss	00000001 tx_buffer_tail
1fff192c l     O .bss	00000004 transmit_pin
1fff1930 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1934 l     O .bss	00000004 rts_pin
1fff1938 l     O .bss	00000001 rx_buffer_head
1fff1939 l     O .bss	00000001 rx_buffer_tail
1fff193c l     O .bss	00000028 tx_buffer
1fff1964 l     O .bss	00000040 rx_buffer
1fff19a4 l     O .bss	00000001 transmitting
1fff19a5 l     O .bss	00000001 tx_buffer_tail
1fff19a8 l     O .bss	00000004 transmit_pin
1fff19ac l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c5c l     O .data	00000012 device_descriptor
1fff0c88 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff19b0 l     O .bss	00000004 rts_pin
1fff19b4 l     O .bss	00000001 rx_buffer_head
1fff19b5 l     O .bss	00000001 rx_buffer_tail
1fff19b8 l     O .bss	00000028 tx_buffer
1fff19e0 l     O .bss	00000040 rx_buffer
1fff1a20 l     O .bss	00000001 transmitting
1fff1a21 l     O .bss	00000001 tx_buffer_tail
1fff1a24 l     O .bss	00000004 transmit_pin
1fff1a28 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004684 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d58 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1594 l       .bss	00000000 __bss_start__
1fff1bc4 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
000032bc  w    F .text	00000006 adc0_isr
00000fa0 g     F .text	0000001c usb_serial_available
00004450 g     F .text	000000ba strcpy
0000317c g     F .text	00000020 serial4_available
00002a74  w    F .text	000000c4 yield
1fff0c70 g     O .data	00000018 usb_string_manufacturer_name_default
00003368 g     F .text	00000020 serial_available
1fff15e8 g     O .bss	00000004 usb_midi_handleProgramChange
00003274  w    F .text	00000048 hard_fault_isr
000032bc  w    F .text	00000006 dma_ch6_isr
00002bb4 g     F .text	00000020 Print::println()
00003050 g     F .text	00000020 serial2_available
000032bc  w    F .text	00000006 uart0_lon_isr
00001e88 g     F .text	000000e8 usb_rx_memory
00002b38  w    F .text	00000002 serialEvent5()
00000f18 g     F .text	00000006 Controller::getShiftMode()
000032bc  w    F .text	00000006 dma_ch8_isr
00003494 g     F .text	00000020 serial6_available
00004038 g     F .text	00000002 __malloc_unlock
1fff15fc g     O .bss	00000004 usb_midi_handleAfterTouch
000004f8 g     F .text	0000004e Sequencer::step()
00001340 g     F .text	000000e0 analog_init
00001f70 g     F .text	00000084 usb_tx
000032bc  w    F .text	00000006 portcd_isr
0000057c g     F .text	00000088 Button::onPress()
1fff160c g     O .bss	00000004 usb_midi_handleSysExComplete
00003f6c g     F .text	000000c6 memmove
000038d8 g     F .text	00000098 MillisTimer::runFromTimer()
000032bc  w    F .text	00000006 can1_rx_warn_isr
00004d98 g       .fini	00000000 __exidx_end
000032bc  w    F .text	00000006 dma_error_isr
1fff1a88 g     O .bss	00000001 usb_midi_msg_type
1fff1a40 g     O .bss	00000001 EventResponder::runningFromYield
000032bc  w    F .text	00000006 i2c0_isr
00002d9c g     F .text	00000028 String::append(long)
00003980 g     F .text	0000000c __errno
000032bc  w    F .text	00000006 portd_isr
000032bc  w    F .text	00000006 enet_error_isr
1fff1a2c g     O .bss	00000004 EventResponder::firstInterrupt
00000978 g     F .text	0000006c Note::tick()
00000c74 g     F .text	0000002a Knob::tick()
000032bc  w    F .text	00000006 tpm1_isr
00002d0c g     F .text	0000001e String::String(String const&)
00002b54  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00004af0 g     O .text	00000200 digital_pin_to_info_PGM
00000f20 g     F .text	00000006 Controller::getMode()
1fff1bc0 g     O .bss	00000004 errno
00004d98 g       .fini	00000000 _etext
1fff1594 g       .bss	00000000 _sbss
00002e1c  w    F .text	00000002 serialEvent6()
1fff15f8 g     O .bss	00000004 usb_midi_handleVelocityChange
00001610 g     F .text	0000001c digitalRead
000032bc  w    F .text	00000006 porte_isr
00000880 g     F .text	0000000c loop
000032bc  w    F .text	00000006 portb_isr
000004d8 g     F .text	00000014 Sequencer::tick()
0000192c g     F .text	0000002c usb_midi_flush_output
000032bc  w    F .text	00000006 spi1_isr
0000319c g     F .text	000000d8 uart3_status_isr
00003784  w    F .text	00000002 serialEvent1()
00000e48 g     F .text	0000002c Controller::tick()
000032bc  w    F .text	00000006 mcm_isr
00003870 g     F .text	00000068 MillisTimer::addToActiveList()
00001958 g     F .text	0000043c usb_midi_read
00000f08 g     F .text	00000008 Controller::enterShiftMode()
1fff15d4 g     O .bss	00000004 usb_midi_handleSystemReset
000006f8 g     F .text	00000042 Piano::Piano(Sequencer*)
1fff1a30 g     O .bss	00000004 EventResponder::lastInterrupt
00003070 g     F .text	0000010c uart1_status_isr
00000810 g     F .text	0000006c Led::tick()
1fff1a8a g     O .bss	00000002 usb_midi_msg_sysex_len
00002e24 g     F .text	00000134 memcpy
00000548 g     F .text	00000006 Sequencer::resetStep()
000032bc  w    F .text	00000006 randnum_isr
000008b4 g     F .text	0000002e Note::noteOn(unsigned char, unsigned char, unsigned char)
1fff15dc g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff15cc g     O .bss	00000004 systick_millis_count
00003274  w    F .text	00000048 bus_fault_isr
000007c8 g     F .text	0000002c Led::toggle()
000032bc  w    F .text	00000006 watchdog_isr
000032bc  w    F .text	00000006 i2c1_isr
1fff1720 g     O .bss	00000001 usb_configuration
000032bc  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00002e04  w    F .text	00000002 serialEvent2()
000032bc  w    F .text	00000006 i2c2_isr
1fff0c70  w    O .data	00000018 usb_string_manufacturer_name
1fff1bb4 g     O .bss	0000000a usb_rx_byte_count_data
000032bc  w    F .text	00000006 pit1_isr
00000af8 g     F .text	0000000e Paginator::previousPage()
000039dc g     F .text	00000010 malloc
000032bc  w    F .text	00000006 dma_ch4_isr
000032bc  w    F .text	00000006 software_isr
000032bc  w    F .text	00000006 dma_ch7_isr
0000380c  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
000029a4 g     F .text	000000d0 usb_init
000032bc  w    F .text	00000006 lptmr_isr
00000a74 g     F .text	00000054 Transport::processMidi()
1fff1a50 g     O .bss	00000004 __malloc_top_pad
000015e0 g     F .text	00000024 rtc_set
00000b2c g     F .text	00000098 Step::controlLength(int)
1fff0c40 g       .data	00000000 _sdata
1fff162c g     O .bss	00000004 usb_midi_handleNoteOn
00000948 g     F .text	0000002e Note::noteOff(unsigned char, unsigned char, unsigned char)
00003334 g     F .text	00000034 kinetis_hsrun_enable
00002c74 g     F .text	0000002a String::reserve(unsigned int)
0000442c g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00000f28 g     F .text	00000048 usb_serial_getchar
000032bc  w    F .text	00000006 can1_bus_off_isr
000032bc  w    F .text	00000006 ftm2_isr
00000550 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1a7c g     O .bss	00000008 usb_cdc_line_coding
00001604 g     F .text	0000000a digitalWrite
000032bc  w    F .text	00000006 uart5_status_isr
000034b4 g     F .text	000000e4 lpuart0_status_isr
1fff1a38 g     O .bss	00000004 EventResponder::lastYield
000009f8 g     F .text	0000003a Transport::controlTempo(int)
00004d1c g     O .text	00000005 usb_endpoint_config_table
00000ca0 g     F .text	000001a6 Controller::Controller(Sequencer*)
000032bc  w    F .text	00000006 dma_ch9_isr
000032bc  w    F .text	00000006 pit2_isr
0000368c g     F .text	00000020 serial3_available
1fff1a4c g     O .bss	00000004 __malloc_max_sbrked_mem
0000162c g     F .text	0000000a pinMode
00002dd0 g     F .text	00000032 String::getBytes(unsigned char*, unsigned int, unsigned int) const
00001dd4 g     F .text	0000004c usb_free
000032bc  w    F .text	00000006 i2c3_isr
1fff15f4 g     O .bss	00000004 usb_midi_handleSysExPartial
00004d98 g       .fini	00000000 __exidx_start
000032bc  w    F .text	00000006 pit0_isr
1fff1a8c g     O .bss	00000001 usb_midi_msg_data1
1fff1a3c g     O .bss	00000004 EventResponder::firstYield
00004d78 g     O .text	00000004 _global_impure_ptr
000032bc  w    F .text	00000006 can1_error_isr
0000404c g     F .text	000003de _realloc_r
0000398c g     F .text	00000050 __libc_init_array
1fff1bc4 g       .bss	00000000 __bss_end
000032bc  w    F .text	00000006 can0_wakeup_isr
000032bc  w    F .text	00000006 flash_cmd_isr
00002b3c  w    F .text	00000004 usb_serial_class::clear()
000036ac g     F .text	000000d8 uart2_status_isr
000032d4 g     F .text	0000002c _sbrk
1fff1a44 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c58 g     O .data	00000004 __brkval
1fff15c4 g     O .bss	00000001 usb_cdc_line_rtsdtr
000011b4 g     F .text	00000048 usb_serial_flush_callback
00004d7c g     F .text	00000000 _init
00002c64 g     F .text	0000000e String::~String()
000032bc  w    F .text	00000006 svcall_isr
000032bc  w    F .text	00000006 dma_ch15_isr
00002d0c g     F .text	0000001e String::String(String const&)
000032bc  w    F .text	00000006 uart1_error_isr
000046a4 g     F .text	00000028 __libc_fini_array
000032bc  w    F .text	00000006 usbhs_phy_isr
00000ae0 g     F .text	00000008 Paginator::Paginator(Sequencer*)
00000550 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1bc4 g       .bss	00000000 _ebss
00002d2c g     F .text	00000070 String::append(char const*, unsigned int)
000032bc g     F .text	00000006 unused_isr
00000bec g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
000032bc  w    F .text	00000006 spi0_isr
000032bc  w    F .text	00000006 dma_ch3_isr
00002ca0 g     F .text	00000042 String::copy(char const*, unsigned int)
00000aec g     F .text	0000000c Paginator::nextPage()
00000b08 g     F .text	00000018 Step::Step(Sequencer*)
00000b08 g     F .text	00000018 Step::Step(Sequencer*)
000032bc  w    F .text	00000006 flash_error_isr
00002f58 g     F .text	00000020 serial5_available
000032bc  w    F .text	00000006 uart5_error_isr
00002c64 g     F .text	0000000e String::~String()
000032bc  w    F .text	00000006 rtc_seconds_isr
000032bc  w    F .text	00000006 pdb_isr
00003274  w    F .text	00000048 usage_fault_isr
000032bc  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00000ac8 g     F .text	00000018 Transport::tick()
000032bc  w    F .text	00000006 dma_ch14_isr
00000bfc g     F .text	00000076 Knob::onChange()
000008a4 g     F .text	0000000e Note::Note()
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1a84 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
000009e4 g     F .text	00000014 Transport::Transport(Sequencer*)
00003970 g     F .text	00000010 systick_isr
000032bc  w    F .text	00000006 rtc_alarm_isr
0000046c g     F .text	0000006c Sequencer::Sequencer()
000032bc  w    F .text	00000006 dma_ch2_isr
1fff0c48 g     O .data	00000010 Serial
000009e4 g     F .text	00000014 Transport::Transport(Sequencer*)
000032bc  w    F .text	00000006 ftm1_isr
00002b5c  w    F .text	00000006 usb_serial_class::write(unsigned char)
000032c4  w    F .text	0000000c startup_early_hook
000032bc  w    F .text	00000006 dma_ch13_isr
000032bc  w    F .text	00000006 uart2_error_isr
00000f70 g     F .text	00000030 usb_serial_peekchar
00000794 g     F .text	00000034 Led::blink(int)
1fff0d3c g     O .data	00000016 usb_string_serial_number_default
00003274 g     F .text	00000048 fault_isr
00004768 g     F .text	000001d0 _free_r
1fff1618 g     O .bss	00000004 usb_midi_handleStop
000032bc  w    F .text	00000006 usb_charge_isr
00002b4c  w    F .text	00000004 usb_serial_class::flush()
000032bc  w    F .text	00000006 cmt_isr
000032bc  w    F .text	00000006 usbhs_isr
1fff1628 g     O .bss	00000004 usb_midi_handleControlChange
1fff1590 g     O .data	00000004 __malloc_sbrk_base
00002b44  w    F .text	00000004 usb_serial_class::read()
000032bc  w    F .text	00000006 ftm3_isr
000006f8 g     F .text	00000042 Piano::Piano(Sequencer*)
000032bc  w    F .text	00000006 tsi0_isr
000032bc  w    F .text	00000006 spi2_isr
00002e08  w    F .text	00000002 serialEvent4()
00002b64  w    F .text	00000002 serialEvent()
1fff16a1 g     O .bss	00000001 usb_reboot_timer
00004938 g     F .text	000000a4 __register_exitproc
00000fbc g     F .text	00000038 usb_serial_flush_input
000010fc g     F .text	00000018 usb_serial_putchar
0000461c g     F .text	00000066 strncpy
1fff1a54 g     O .bss	00000028 __malloc_current_mallinfo
000032bc  w    F .text	00000006 can0_bus_off_isr
0000403c g     F .text	00000010 realloc
00000ca0 g     F .text	000001a6 Controller::Controller(Sequencer*)
1fff1715 g     O .bss	00000001 usb_rx_memory_needed
000004ec g     F .text	0000000a Sequencer::reverse()
00001ff4 g     F .text	000009b0 usb_isr
00000a54 g     F .text	0000001e Transport::stopPPQN()
1fff1624 g     O .bss	00000004 usb_midi_handleNoteOff
000008a4 g     F .text	0000000e Note::Note()
00004cf0  w    O .text	00000028 vtable for usb_serial_class
00000604 g     F .text	000000f4 Button::tick()
000032bc  w    F .text	00000006 uart3_error_isr
00002ce4 g     F .text	00000026 String::String(char const*)
1fff1a34 g     O .bss	00000004 MillisTimer::listActive
000032bc  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
000032bc  w    F .text	00000006 low_voltage_isr
1fff1184 g     O .data	00000408 __malloc_av_
000032bc  w    F .text	00000006 can0_error_isr
00000f10 g     F .text	00000008 Controller::exitShiftMode()
000016dc g     F .text	0000016c _init_Teensyduino_internal_
00000bec g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
0000115c g     F .text	00000058 usb_serial_flush_output
000032bc  w    F .text	00000006 dma_ch12_isr
00004034 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
000032bc  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
000032bc  w    F .text	00000006 pit3_isr
00000754 g     F .text	0000001c Piano::play(Step*)
00000ae0 g     F .text	00000008 Paginator::Paginator(Sequencer*)
000032bc  w    F .text	00000006 enet_rx_isr
000032bc  w    F .text	00000006 portc_isr
00002e0c g     F .text	00000010 main
1fff1a48 g     O .bss	00000004 __malloc_max_total_mem
00000800 g     F .text	0000000e Led::on()
00003274  w    F .text	00000048 memmanage_fault_isr
00003598 g     F .text	00000084 usb_init_serialnumber
00004d94 g       .text	00000000 __init_array_end
000039fc g     F .text	00000570 _malloc_r
000032bc  w    F .text	00000006 debugmonitor_isr
1fff15f0 g     O .bss	00000004 usb_midi_handleSongPosition
0000378c g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff15e0 g     O .bss	00000004 usb_midi_handleContinue
1fff1a8d g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
000032bc  w    F .text	00000006 cmp1_isr
000032bc  w    F .text	00000006 ftm0_isr
000046cc g     F .text	0000009c _malloc_trim_r
1fff0d38 g     O .data	00000004 string0
00000ff4 g     F .text	00000108 usb_serial_write
000032d0  w    F .text	00000002 startup_late_hook
00000bc4 g     F .text	00000014 Step::controlPitch(int)
00002b48  w    F .text	00000004 usb_serial_class::available()
1fff1a8e g     O .bss	00000001 usb_midi_msg_cable
1fff0d20  w    O .data	00000018 usb_string_product_name
00001638 g     F .text	000000a4 delay
000032bc  w    F .text	00000006 tpm0_isr
00004d94 g     F .fini	00000000 _fini
000032bc  w    F .text	00000006 i2s0_rx_isr
000032bc  w    F .text	00000006 uart4_error_isr
00002c54 g     F .text	00000010 Print::print(long)
00001890 g     F .text	0000009c usb_midi_write_packed
00004698 g     F .text	0000000c atexit
000008e4 g     F .text	00000064 Note::play(Step*)
00003668 g     F .text	00000022 ltoa
00002ce4 g     F .text	00000026 String::String(char const*)
000032bc  w    F .text	00000006 can0_message_isr
00000e74 g     F .text	00000094 Controller::toggleMode()
1fff1180 g     O .data	00000004 _impure_ptr
000032bc  w    F .text	00000006 can1_message_isr
000032bc  w    F .text	00000006 nmi_isr
00000770 g     F .text	00000024 Led::Led(int, int)
0000046c g     F .text	0000006c Sequencer::Sequencer()
1fff1608 g     O .bss	00000004 usb_midi_handleTuneRequest
0000073c g     F .text	00000016 Piano::tick()
00004d88 g       .text	00000000 __preinit_array_end
00000b20 g     F .text	0000000a Step::toggle()
000032bc  w    F .text	00000006 sdhc_isr
1fff1a8f g     O .bss	00000001 usb_midi_msg_channel
0000087c g     F .text	00000002 setup
00004d24 g     O .text	00000054 usb_descriptor_list
00001e20 g     F .text	0000003c usb_rx
00000770 g     F .text	00000024 Led::Led(int, int)
000032bc  w    F .text	00000006 dma_ch10_isr
1fff1600 g     O .bss	00000004 usb_midi_handleStart
000032bc  w    F .text	00000006 uart0_error_isr
00001d94 g     F .text	00000040 usb_malloc
000032bc  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00001114 g     F .text	00000048 usb_serial_write_buffer_free
000032bc  w    F .text	00000006 enet_timer_isr
1fff1594 g       .data	00000000 _edata
000032bc  w    F .text	00000006 i2s0_tx_isr
000032bc  w    F .text	00000006 adc1_isr
00000bd8 g     F .text	00000012 Step::controlVelocity(int)
00002b50  w    F .text	00000004 usb_serial_class::availableForWrite()
000032bc  w    F .text	00000006 cmp0_isr
1fff15d0 g     O .bss	00000004 usb_midi_handleClock
0000361c g     F .text	0000004c ultoa
00002e20 g     F .text	00000004 operator new(unsigned int)
00003828 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff158c g     O .data	00000004 __malloc_trim_threshold
00002b40  w    F .text	00000004 usb_serial_class::peek()
1fff15b4 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff15ec g     O .bss	00000004 usb_midi_handlePitchChange
000032bc  w    F .text	00000006 pit_isr
00002dc4 g     F .text	0000000c operator+(StringSumHelper const&, int)
1fff1604 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
000032bc  w    F .text	00000006 dac0_isr
00004d88 g       .text	00000000 __init_array_start
000032bc  w    F .text	00000006 can1_tx_warn_isr
00001420 g     F .text	000000fc analogRead
1fff1a90 g     O .bss	00000122 usb_midi_msg_sysex
00003388 g     F .text	0000010c uart0_status_isr
000032bc  w    F .text	00000006 mcg_isr
00000ae8 g     F .text	00000004 Paginator::getPage()
00000400 g     O .text	00000010 flashconfigbytes
00004540 g     F .text	000000dc strlen
1fff0d20 g     O .data	00000018 usb_string_product_name_default
000032bc  w    F .text	00000006 dma_ch1_isr
00000a34 g     F .text	00000020 Transport::startPPQN()
00001e5c g     F .text	0000002c usb_tx_packet_count
00002b68 g     F .text	0000004a Print::print(String const&)
000032bc  w    F .text	00000006 dma_ch5_isr
000032bc  w    F .text	00000006 can0_rx_warn_isr
000032bc  w    F .text	00000006 can0_tx_warn_isr
00002f78 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00003300 g     F .text	00000034 kinetis_hsrun_disable
00004d88 g       .text	00000000 __preinit_array_start
1fff15b0 g     O .bss	00000004 sequencer
00003788  w    F .text	00000002 serialEvent3()
1fff1620 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
000032bc  w    F .text	00000006 cmp2_isr
0000386c g     F .text	00000004 pendablesrvreq_isr
000032bc  w    F .text	00000006 wakeup_isr
000032bc  w    F .text	00000006 cmp3_isr
00002bd4 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
000007f4 g     F .text	0000000c Led::off()
1fff15d8 g     O .bss	00000004 usb_midi_handleActiveSensing
000039ec g     F .text	00000010 free
000032bc  w    F .text	00000006 tpm2_isr
000032bc  w    F .text	00000006 dma_ch0_isr
1fff0d3c  w    O .data	00000016 usb_string_serial_number
000032bc  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
  free(ptr);
}

void operator delete[](void * ptr)
{
  free(ptr);
       0:	... .....2..u2..
      10:	u2..u2..u2..u2..
      20:	u2..u2..u2...2..
      30:	.2..u2..m8..q9..
      40:	.2...2...2...2..
      50:	.2...2...2...2..
      60:	.2...2...2...2..
      70:	.2...2...2...2..
      80:	.2...2...2...2..
      90:	.2...2...2...2..
      a0:	.2...2...2...2..
      b0:	.2...2...2...3..
      c0:	.2..q0...2...6..
      d0:	.2...1...2...2..
      e0:	.2...2...2...2..
      f0:	.2...2...2...2..
     100:	.2...2...2...2..
     110:	.2.......2...2..
     120:	.2...2...2...2..
     130:	.2...2...2...2..
     140:	.2...2..y/...2..
     150:	.2...2...2...2..
     160:	.2...2...2...2..
     170:	.2...2...2...2..
     180:	.2...2...2...2..
     190:	.2...2...4...2..
     1a0:	.2...2...2...2..
     1b0:	.2...2...2...2..
     1c0:	.2...2...2...2..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	32c4 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	16dc <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	15e0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	15e0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	398c <__libc_init_array>

	startup_late_hook();
     33a:	bl	32d0 <startup_late_hook>
	main();
     33e:	bl	2e0c <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff1594
     374:	.word	0x00004d94
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff1594
     380:	.word	0x1fff1bc4
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1594
     42c:	.word	0x00000000
     430:	.word	0x00004d98

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff1598
     460:	.word	0x00004d98
     464:	.word	0x1fff1594
     468:	.word	0x00000000

0000046c <Sequencer::Sequencer()>:
#include "paginator.h"
#include "step.h"
#include "led.h"
#include "piano.h"

Sequencer::Sequencer () {
     46c:	push	{r3, r4, r5, r6, r7, lr}
     46e:	mov	r4, r0
  _controller = new Controller(this);
     470:	movs	r0, #80	; 0x50
     472:	bl	2e20 <operator new(unsigned int)>
     476:	mov	r1, r4
     478:	mov	r5, r0
     47a:	bl	ca0 <Controller::Controller(Sequencer*)>
     47e:	str	r5, [r4, #16]
  _transport = new Transport(this);
     480:	movs	r0, #16
     482:	bl	2e20 <operator new(unsigned int)>
     486:	mov	r1, r4
     488:	mov	r5, r0
     48a:	bl	9e4 <Transport::Transport(Sequencer*)>
     48e:	str	r5, [r4, #12]
  _paginator = new Paginator(this);
     490:	movs	r0, #8
     492:	bl	2e20 <operator new(unsigned int)>
     496:	mov	r1, r4
     498:	mov	r5, r0
     49a:	bl	ae0 <Paginator::Paginator(Sequencer*)>
     49e:	str	r5, [r4, #20]
  _piano = new Piano(this);
     4a0:	movs	r0, #20
     4a2:	bl	2e20 <operator new(unsigned int)>
     4a6:	mov	r1, r4
     4a8:	mov	r5, r0
     4aa:	bl	6f8 <Piano::Piano(Sequencer*)>
  _reversed = false;
     4ae:	movs	r3, #0

Sequencer::Sequencer () {
  _controller = new Controller(this);
  _transport = new Transport(this);
  _paginator = new Paginator(this);
  _piano = new Piano(this);
     4b0:	str	r5, [r4, #0]
  _reversed = false;
     4b2:	strb	r3, [r4, #4]
  _currentStep = 0;
     4b4:	str	r3, [r4, #8]
     4b6:	add.w	r5, r4, #20
     4ba:	add.w	r7, r4, #36	; 0x24

  for (int i = 0; i < 4; i++){
    _steps[i] = new Step(this);
     4be:	movs	r0, #20
     4c0:	bl	2e20 <operator new(unsigned int)>
     4c4:	mov	r1, r4
     4c6:	mov	r6, r0
     4c8:	bl	b08 <Step::Step(Sequencer*)>
     4cc:	str.w	r6, [r5, #4]!
  _paginator = new Paginator(this);
  _piano = new Piano(this);
  _reversed = false;
  _currentStep = 0;

  for (int i = 0; i < 4; i++){
     4d0:	cmp	r5, r7
     4d2:	bne.n	4be <Sequencer::Sequencer()+0x52>
    _steps[i] = new Step(this);
  }
};
     4d4:	mov	r0, r4
     4d6:	pop	{r3, r4, r5, r6, r7, pc}

000004d8 <Sequencer::tick()>:

void Sequencer::tick() {
     4d8:	push	{r4, lr}
     4da:	mov	r4, r0
  _transport->tick();
     4dc:	ldr	r0, [r0, #12]
     4de:	bl	ac8 <Transport::tick()>
  _controller->tick();
     4e2:	ldr	r0, [r4, #16]
}
     4e4:	ldmia.w	sp!, {r4, lr}
  }
};

void Sequencer::tick() {
  _transport->tick();
  _controller->tick();
     4e8:	b.w	e48 <Controller::tick()>

000004ec <Sequencer::reverse()>:
}

void Sequencer::reverse() {
  _reversed = !_reversed;
     4ec:	ldrb	r3, [r0, #4]
     4ee:	eor.w	r3, r3, #1
     4f2:	strb	r3, [r0, #4]
     4f4:	bx	lr
     4f6:	nop

000004f8 <Sequencer::step()>:
}

void Sequencer::step () {  
     4f8:	push	{r4, lr}
     4fa:	mov	r4, r0
  _piano->tick();
     4fc:	ldr	r0, [r0, #0]
     4fe:	bl	73c <Piano::tick()>

  _controller->_leds[_currentStep]->blink();
     502:	ldr	r2, [r4, #8]
     504:	ldr	r3, [r4, #16]
     506:	add.w	r3, r3, r2, lsl #2
     50a:	movs	r1, #0
     50c:	ldr	r0, [r3, #52]	; 0x34
     50e:	bl	794 <Led::blink(int)>

  Step* current = _steps[_currentStep];
     512:	ldr	r3, [r4, #8]
     514:	adds	r2, r3, #6
     516:	ldr.w	r1, [r4, r2, lsl #2]

  if (current->_state) {
     51a:	ldrb	r2, [r1, #16]
     51c:	cbnz	r2, 536 <Sequencer::step()+0x3e>
    _piano->play(current);
  }

  if (!_reversed) {
     51e:	ldrb	r2, [r4, #4]
     520:	cbnz	r2, 52e <Sequencer::step()+0x36>
    _currentStep++;
     522:	adds	r3, #1
     524:	cmp	r3, #3
     526:	it	gt
     528:	movgt	r3, #0
     52a:	str	r3, [r4, #8]
     52c:	pop	{r4, pc}
      _currentStep = 0;
    }
  } else {
    _currentStep--;

    if (_currentStep == -1) {
     52e:	subs	r2, r3, #1
     530:	cbz	r3, 540 <Sequencer::step()+0x48>

    if (_currentStep > 3) {
      _currentStep = 0;
    }
  } else {
    _currentStep--;
     532:	str	r2, [r4, #8]
     534:	pop	{r4, pc}
  _controller->_leds[_currentStep]->blink();

  Step* current = _steps[_currentStep];

  if (current->_state) {
    _piano->play(current);
     536:	ldr	r0, [r4, #0]
     538:	bl	754 <Piano::play(Step*)>
     53c:	ldr	r3, [r4, #8]
     53e:	b.n	51e <Sequencer::step()+0x26>
    }
  } else {
    _currentStep--;

    if (_currentStep == -1) {
      _currentStep = 3;
     540:	movs	r3, #3
     542:	str	r3, [r4, #8]
     544:	pop	{r4, pc}
     546:	nop

00000548 <Sequencer::resetStep()>:
    }
  }
};

void Sequencer::resetStep () {
  _currentStep = 0;
     548:	movs	r3, #0
     54a:	str	r3, [r0, #8]
     54c:	bx	lr
     54e:	nop

00000550 <Button::Button(int, int, Led*, bool, bool, Controller*)>:
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     550:	push	{r3, r4, r5, r6, r7, lr}
     552:	mov	r4, r0
  Led* led,
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
     554:	str	r1, [r0, #0]
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     556:	ldrb.w	r7, [sp, #24]
     55a:	ldrb.w	r6, [sp, #28]
     55e:	ldr	r5, [sp, #32]
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 1000;
  _led = led;
     560:	str	r3, [r0, #52]	; 0x34
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 1000;
     562:	mov.w	r1, #1000	; 0x3e8
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
     566:	str	r2, [r0, #24]
  _reverseButton = reverseButton;
  _holdThreshold = 1000;
  _led = led;
  _controller = controller;

  pinMode(pin, INPUT);
     568:	uxtb	r0, r2
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 1000;
     56a:	str	r1, [r4, #44]	; 0x2c
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
     56c:	strb	r7, [r4, #16]
  _reverseButton = reverseButton;
     56e:	strb	r6, [r4, #17]
  _holdThreshold = 1000;
  _led = led;
  _controller = controller;
     570:	str	r5, [r4, #48]	; 0x30

  pinMode(pin, INPUT);
     572:	movs	r1, #0
     574:	bl	162c <pinMode>
};
     578:	mov	r0, r4
     57a:	pop	{r3, r4, r5, r6, r7, pc}

0000057c <Button::onPress()>:

void Button::onPress () {
     57c:	push	{r3, r4, r5, lr}
  // Serial.println(_controller.getShiftMode());
  // Serial.println("currentPage");
  // Serial.println(_controller._paginator->getPage());
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
     57e:	ldr	r3, [r0, #4]
     580:	cmp	r3, #1
     582:	beq.n	586 <Button::onPress()+0xa>
     584:	pop	{r3, r4, r5, pc}
     586:	mov	r4, r0
void Button::onPress () {
  // Serial.println(_id);
  // Serial.println(_controller.getShiftMode());
  // Serial.println("currentPage");
  // Serial.println(_controller._paginator->getPage());
  Paginator * paginator = _controller->_sequencer->_paginator;
     588:	ldr	r0, [r0, #48]	; 0x30

  if (_state == HIGH && _shiftButton) {
     58a:	ldrb	r3, [r4, #16]
void Button::onPress () {
  // Serial.println(_id);
  // Serial.println(_controller.getShiftMode());
  // Serial.println("currentPage");
  // Serial.println(_controller._paginator->getPage());
  Paginator * paginator = _controller->_sequencer->_paginator;
     58c:	ldr	r2, [r0, #76]	; 0x4c
     58e:	ldr	r5, [r2, #20]

  if (_state == HIGH && _shiftButton) {
     590:	cbnz	r3, 5b0 <Button::onPress()+0x34>
      paginator->previousPage();
      Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
    }
  } else if (_state == HIGH && _reverseButton) {
     592:	ldrb	r3, [r4, #17]
     594:	cbnz	r3, 5d4 <Button::onPress()+0x58>
    } else {
      _controller->_sequencer->reverse();
      _led->toggle();
    }
  } else if (_state == HIGH) {
    _led->toggle();
     596:	ldr	r0, [r4, #52]	; 0x34
     598:	bl	7c8 <Led::toggle()>
    _controller->_sequencer->_steps[_id - 1]->toggle();
     59c:	ldr	r2, [r4, #48]	; 0x30
     59e:	ldr	r3, [r4, #0]
     5a0:	ldr	r2, [r2, #76]	; 0x4c
     5a2:	adds	r3, #5
     5a4:	ldr.w	r0, [r2, r3, lsl #2]
  } 
}
     5a8:	ldmia.w	sp!, {r3, r4, r5, lr}
      _controller->_sequencer->reverse();
      _led->toggle();
    }
  } else if (_state == HIGH) {
    _led->toggle();
    _controller->_sequencer->_steps[_id - 1]->toggle();
     5ac:	b.w	b20 <Step::toggle()>
  // Serial.println("currentPage");
  // Serial.println(_controller._paginator->getPage());
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
     5b0:	bl	f18 <Controller::getShiftMode()>
     5b4:	cbz	r0, 5e2 <Button::onPress()+0x66>
      paginator->previousPage();
     5b6:	mov	r0, r5
     5b8:	bl	af8 <Paginator::previousPage()>
      _controller->toggleMode();
    }
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
      paginator->nextPage();
      Serial.println(paginator->getPage());
     5bc:	mov	r0, r5
     5be:	bl	ae8 <Paginator::getPage()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     5c2:	mov	r1, r0
     5c4:	ldr	r0, [pc, #56]	; (600 <Button::onPress()+0x84>)
     5c6:	bl	2c54 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     5ca:	ldr	r0, [pc, #52]	; (600 <Button::onPress()+0x84>)
    }
  } else if (_state == HIGH) {
    _led->toggle();
    _controller->_sequencer->_steps[_id - 1]->toggle();
  } 
}
     5cc:	ldmia.w	sp!, {r3, r4, r5, lr}
     5d0:	b.w	2bb4 <Print::println()>
      Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
    }
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
     5d4:	bl	f18 <Controller::getShiftMode()>
     5d8:	cbz	r0, 5ec <Button::onPress()+0x70>
      paginator->nextPage();
     5da:	mov	r0, r5
     5dc:	bl	aec <Paginator::nextPage()>
     5e0:	b.n	5bc <Button::onPress()+0x40>
  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
      paginator->previousPage();
      Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
     5e2:	ldr	r0, [r4, #48]	; 0x30
    }
  } else if (_state == HIGH) {
    _led->toggle();
    _controller->_sequencer->_steps[_id - 1]->toggle();
  } 
}
     5e4:	ldmia.w	sp!, {r3, r4, r5, lr}
  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
      paginator->previousPage();
      Serial.println(paginator->getPage());
    } else {
      _controller->toggleMode();
     5e8:	b.w	e74 <Controller::toggleMode()>
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
      paginator->nextPage();
      Serial.println(paginator->getPage());
    } else {
      _controller->_sequencer->reverse();
     5ec:	ldr	r3, [r4, #48]	; 0x30
     5ee:	ldr	r0, [r3, #76]	; 0x4c
     5f0:	bl	4ec <Sequencer::reverse()>
      _led->toggle();
     5f4:	ldr	r0, [r4, #52]	; 0x34
    }
  } else if (_state == HIGH) {
    _led->toggle();
    _controller->_sequencer->_steps[_id - 1]->toggle();
  } 
}
     5f6:	ldmia.w	sp!, {r3, r4, r5, lr}
    if (_controller->getShiftMode()) {
      paginator->nextPage();
      Serial.println(paginator->getPage());
    } else {
      _controller->_sequencer->reverse();
      _led->toggle();
     5fa:	b.w	7c8 <Led::toggle()>
     5fe:	nop
     600:	.word	0x1fff0c48

00000604 <Button::tick()>:

unsigned long Button::timeSincePress () {
  return (millis() - _firstTime);
}

void Button::tick () {
     604:	push	{r4, r5, lr}
     606:	mov	r4, r0
     608:	sub	sp, #28
  _current = digitalRead(_pin);
     60a:	ldrb	r0, [r0, #24]
     60c:	bl	1610 <digitalRead>
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     610:	cmp	r0, #1
unsigned long Button::timeSincePress () {
  return (millis() - _firstTime);
}

void Button::tick () {
  _current = digitalRead(_pin);
     612:	str	r0, [r4, #28]
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     614:	beq.n	658 <Button::tick()+0x54>
     616:	ldr	r3, [r4, #36]	; 0x24
     618:	ldr	r5, [pc, #196]	; (6e0 <Button::tick()+0xdc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     61a:	ldr	r2, [r5, #0]
     61c:	str	r2, [sp, #16]
	return ret;
     61e:	ldr	r2, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     620:	ldr	r1, [pc, #188]	; (6e0 <Button::tick()+0xdc>)
    _firstHoldTime = millis();
    if (!_controller->getShiftMode()) Serial.println("onHold");
    _controller->enterShiftMode();
  }

  if (timeSincePress() > 10) {    
     622:	subs	r2, r2, r3
     624:	cmp	r2, #10
     626:	bls.n	652 <Button::tick()+0x4e>
    if (_state != _current) {
     628:	ldr	r2, [r4, #4]
     62a:	cmp	r0, r2
     62c:	beq.n	652 <Button::tick()+0x4e>
      _state = _current;

      if (_state == HIGH) {
     62e:	cmp	r0, #1
    _controller->enterShiftMode();
  }

  if (timeSincePress() > 10) {    
    if (_state != _current) {
      _state = _current;
     630:	str	r0, [r4, #4]

      if (_state == HIGH) {
     632:	beq.n	6c6 <Button::tick()+0xc2>
     634:	ldr	r2, [r1, #0]
     636:	str	r2, [sp, #20]
	return ret;
     638:	ldr	r2, [sp, #20]
        Serial.println("onPress");      
        onPress();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
     63a:	ldr	r1, [r4, #44]	; 0x2c
     63c:	subs	r3, r2, r3
     63e:	cmp	r1, r3
     640:	bls.n	69a <Button::tick()+0x96>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     642:	movs	r1, #9
     644:	ldr	r0, [pc, #156]	; (6e4 <Button::tick()+0xe0>)
     646:	bl	ff4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     64a:	ldr	r0, [pc, #156]	; (6e8 <Button::tick()+0xe4>)
     64c:	bl	2bb4 <Print::println()>
     650:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     652:	str	r0, [r4, #32]
};
     654:	add	sp, #28
     656:	pop	{r4, r5, pc}
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     658:	ldr	r2, [r4, #32]
     65a:	cbz	r2, 68e <Button::tick()+0x8a>
    _controller->_sequencer->_steps[_id - 1]->toggle();
  } 
}

bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
     65c:	cmp	r2, #1
     65e:	ldr	r3, [r4, #36]	; 0x24
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     660:	ldr	r5, [pc, #124]	; (6e0 <Button::tick()+0xdc>)
     662:	bne.n	61a <Button::tick()+0x16>
     664:	ldr	r2, [r5, #0]
     666:	str	r2, [sp, #12]
	return ret;
     668:	ldr	r2, [sp, #12]

  if (currentWentUp()) {
    _firstTime = millis();
  }

  if (currentIsUp() && timeSincePress() > _holdThreshold) {
     66a:	ldr	r1, [r4, #44]	; 0x2c
     66c:	subs	r2, r2, r3
     66e:	cmp	r1, r2
     670:	bcs.n	61a <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     672:	ldr	r3, [r5, #0]
     674:	str	r3, [sp, #8]
	return ret;
     676:	ldr	r3, [sp, #8]
    _firstHoldTime = millis();
     678:	str	r3, [r4, #40]	; 0x28
    if (!_controller->getShiftMode()) Serial.println("onHold");
     67a:	ldr	r0, [r4, #48]	; 0x30
     67c:	bl	f18 <Controller::getShiftMode()>
     680:	cbz	r0, 6b6 <Button::tick()+0xb2>
    _controller->enterShiftMode();
     682:	ldr	r0, [r4, #48]	; 0x30
     684:	bl	f08 <Controller::enterShiftMode()>
     688:	ldr	r0, [r4, #28]
     68a:	ldr	r3, [r4, #36]	; 0x24
     68c:	b.n	61a <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     68e:	ldr	r5, [pc, #80]	; (6e0 <Button::tick()+0xdc>)
     690:	ldr	r3, [r5, #0]
     692:	str	r3, [sp, #4]
	return ret;
     694:	ldr	r3, [sp, #4]

void Button::tick () {
  _current = digitalRead(_pin);

  if (currentWentUp()) {
    _firstTime = millis();
     696:	str	r3, [r4, #36]	; 0x24
     698:	b.n	61a <Button::tick()+0x16>
     69a:	movs	r1, #13
     69c:	ldr	r0, [pc, #76]	; (6ec <Button::tick()+0xe8>)
     69e:	bl	ff4 <usb_serial_write>
     6a2:	ldr	r0, [pc, #68]	; (6e8 <Button::tick()+0xe4>)
     6a4:	bl	2bb4 <Print::println()>
        onPress();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
          Serial.println("onHoldRelease");
          _controller->exitShiftMode();
     6a8:	ldr	r0, [r4, #48]	; 0x30
     6aa:	bl	f10 <Controller::exitShiftMode()>
     6ae:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     6b0:	str	r0, [r4, #32]
};
     6b2:	add	sp, #28
     6b4:	pop	{r4, r5, pc}
     6b6:	movs	r1, #6
     6b8:	ldr	r0, [pc, #52]	; (6f0 <Button::tick()+0xec>)
     6ba:	bl	ff4 <usb_serial_write>
     6be:	ldr	r0, [pc, #40]	; (6e8 <Button::tick()+0xe4>)
     6c0:	bl	2bb4 <Print::println()>
     6c4:	b.n	682 <Button::tick()+0x7e>
     6c6:	movs	r1, #7
     6c8:	ldr	r0, [pc, #40]	; (6f4 <Button::tick()+0xf0>)
     6ca:	bl	ff4 <usb_serial_write>
     6ce:	ldr	r0, [pc, #24]	; (6e8 <Button::tick()+0xe4>)
     6d0:	bl	2bb4 <Print::println()>
    if (_state != _current) {
      _state = _current;

      if (_state == HIGH) {
        Serial.println("onPress");      
        onPress();
     6d4:	mov	r0, r4
     6d6:	bl	57c <Button::onPress()>
     6da:	ldr	r0, [r4, #28]
     6dc:	b.n	652 <Button::tick()+0x4e>
     6de:	nop
     6e0:	.word	0x1fff15cc
     6e4:	.word	0x000049fc
     6e8:	.word	0x1fff0c48
     6ec:	.word	0x000049ec
     6f0:	.word	0x000049dc
     6f4:	.word	0x000049e4

000006f8 <Piano::Piano(Sequencer*)>:
#include <Arduino.h>
#include "note.h"
#include "piano.h"
#include "step.h"

Piano::Piano (Sequencer* sequencer) {
     6f8:	push	{r3, r4, r5, lr}
     6fa:	mov	r4, r0
  _sequencer = sequencer;
  _notes[0] = new Note();
     6fc:	movs	r0, #20
#include "note.h"
#include "piano.h"
#include "step.h"

Piano::Piano (Sequencer* sequencer) {
  _sequencer = sequencer;
     6fe:	str	r1, [r4, #16]
  _notes[0] = new Note();
     700:	bl	2e20 <operator new(unsigned int)>
     704:	mov	r5, r0
     706:	bl	8a4 <Note::Note()>
     70a:	str	r5, [r4, #0]
  _notes[1] = new Note();
     70c:	movs	r0, #20
     70e:	bl	2e20 <operator new(unsigned int)>
     712:	mov	r5, r0
     714:	bl	8a4 <Note::Note()>
     718:	str	r5, [r4, #4]
  _notes[2] = new Note();
     71a:	movs	r0, #20
     71c:	bl	2e20 <operator new(unsigned int)>
     720:	mov	r5, r0
     722:	bl	8a4 <Note::Note()>
     726:	str	r5, [r4, #8]
  _notes[3] = new Note();
     728:	movs	r0, #20
     72a:	bl	2e20 <operator new(unsigned int)>
     72e:	mov	r5, r0
     730:	bl	8a4 <Note::Note()>
     734:	str	r5, [r4, #12]
};
     736:	mov	r0, r4
     738:	pop	{r3, r4, r5, pc}
     73a:	nop

0000073c <Piano::tick()>:

void Piano::tick () {
     73c:	push	{r3, r4, r5, lr}
     73e:	subs	r4, r0, #4
     740:	add.w	r5, r0, #12
  for (int i = 0; i < 4; i++) {
    _notes[i]->tick();
     744:	ldr.w	r0, [r4, #4]!
     748:	bl	978 <Note::tick()>
  _notes[2] = new Note();
  _notes[3] = new Note();
};

void Piano::tick () {
  for (int i = 0; i < 4; i++) {
     74c:	cmp	r4, r5
     74e:	bne.n	744 <Piano::tick()+0x8>
    _notes[i]->tick();
  } 
};
     750:	pop	{r3, r4, r5, pc}
     752:	nop

00000754 <Piano::play(Step*)>:
      return _notes[i];
    }
  }
};

void Piano::play (Step* step) {
     754:	push	{r4}
     756:	subs	r3, r0, #4
     758:	add.w	r2, r0, #12
  } 
};

Note* Piano::findNote() {
  for (int i = 0; i < 4; i++) {
    if (!_notes[i]->_active) {
     75c:	ldr.w	r0, [r3, #4]!
     760:	ldr	r4, [r0, #16]
     762:	cbz	r4, 768 <Piano::play(Step*)+0x14>
    _notes[i]->tick();
  } 
};

Note* Piano::findNote() {
  for (int i = 0; i < 4; i++) {
     764:	cmp	r3, r2
     766:	bne.n	75c <Piano::play(Step*)+0x8>
};

void Piano::play (Step* step) {
  Note* note = findNote();
  note->play(step);
};
     768:	ldr.w	r4, [sp], #4
  }
};

void Piano::play (Step* step) {
  Note* note = findNote();
  note->play(step);
     76c:	b.w	8e4 <Note::play(Step*)>

00000770 <Led::Led(int, int)>:
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
     770:	push	{r3, r4, r5, lr}
     772:	mov	r4, r0
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     774:	movs	r3, #0
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     776:	movs	r5, #75	; 0x4b
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
     778:	stmia.w	r0, {r1, r2}
  _state = state;
  _blinkLength = 75;
  _blinking = false;

  pinMode(_pin, OUTPUT);
     77c:	uxtb	r0, r1

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     77e:	strb	r3, [r4, #16]
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     780:	str	r5, [r4, #12]
  _blinking = false;

  pinMode(_pin, OUTPUT);
     782:	movs	r1, #1
     784:	bl	162c <pinMode>
  digitalWrite(_pin, _state);
     788:	ldrb	r0, [r4, #0]
     78a:	ldrb	r1, [r4, #4]
     78c:	bl	1604 <digitalWrite>
};
     790:	mov	r0, r4
     792:	pop	{r3, r4, r5, pc}

00000794 <Led::blink(int)>:

void Led::blink (int times) {
     794:	push	{r4, r5, r6, lr}
  digitalWrite(_pin, !digitalRead(_pin));
     796:	ldrb	r5, [r0, #0]

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     798:	sub	sp, #8
     79a:	mov	r4, r0
  digitalWrite(_pin, !digitalRead(_pin));
     79c:	mov	r0, r5

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     79e:	mov	r6, r1
  digitalWrite(_pin, !digitalRead(_pin));
     7a0:	bl	1610 <digitalRead>
     7a4:	clz	r1, r0
     7a8:	lsrs	r1, r1, #5
     7aa:	mov	r0, r5
     7ac:	bl	1604 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7b0:	ldr	r3, [pc, #16]	; (7c4 <Led::blink(int)+0x30>)
  _blinking = true;
  _blinkingCounter = times;
     7b2:	str	r6, [r4, #20]
     7b4:	ldr	r3, [r3, #0]
     7b6:	str	r3, [sp, #4]
	return ret;
     7b8:	ldr	r3, [sp, #4]
  _lastBlink = millis();  
     7ba:	str	r3, [r4, #8]
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
  digitalWrite(_pin, !digitalRead(_pin));
  _blinking = true;
     7bc:	movs	r2, #1
     7be:	strb	r2, [r4, #16]
  _blinkingCounter = times;
  _lastBlink = millis();  
};
     7c0:	add	sp, #8
     7c2:	pop	{r4, r5, r6, pc}
     7c4:	.word	0x1fff15cc

000007c8 <Led::toggle()>:

void Led::toggle () {
  _state = !_state;
     7c8:	ldr	r1, [r0, #4]
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     7ca:	push	{r4, lr}
  _state = !_state;
     7cc:	clz	r1, r1
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     7d0:	mov	r4, r0
  _state = !_state;
     7d2:	lsrs	r1, r1, #5

  digitalWrite(_pin, _state);
     7d4:	ldrb	r0, [r0, #0]
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
  _state = !_state;
     7d6:	str	r1, [r4, #4]

  digitalWrite(_pin, _state);
     7d8:	bl	1604 <digitalWrite>

  if (_blinking) {
     7dc:	ldrb	r3, [r4, #16]
     7de:	cbnz	r3, 7e2 <Led::toggle()+0x1a>
     7e0:	pop	{r4, pc}
    digitalWrite(_pin, !_state);
     7e2:	ldr	r1, [r4, #4]
     7e4:	ldrb	r0, [r4, #0]
     7e6:	clz	r1, r1
     7ea:	lsrs	r1, r1, #5
  }
};
     7ec:	ldmia.w	sp!, {r4, lr}
  _state = !_state;

  digitalWrite(_pin, _state);

  if (_blinking) {
    digitalWrite(_pin, !_state);
     7f0:	b.w	1604 <digitalWrite>

000007f4 <Led::off()>:
  }
};

void Led::off () {
  _blinking = false;
     7f4:	movs	r1, #0
     7f6:	strb	r1, [r0, #16]
  _state = 0;
     7f8:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     7fa:	ldrb	r0, [r0, #0]
     7fc:	b.w	1604 <digitalWrite>

00000800 <Led::on()>:
}

void Led::on () {
  _blinking = false;
     800:	movs	r3, #0
  _state = 1;
     802:	movs	r1, #1
  _state = 0;
  digitalWrite(_pin, _state);
}

void Led::on () {
  _blinking = false;
     804:	strb	r3, [r0, #16]
  _state = 1;
     806:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     808:	ldrb	r0, [r0, #0]
     80a:	b.w	1604 <digitalWrite>
     80e:	nop

00000810 <Led::tick()>:

bool Led::blinkTimePassed () {
  return millis() - _lastBlink > _blinkLength;
};

void Led::tick () {
     810:	push	{r4, r5, r6, lr}
  if (_blinking && blinkTimePassed()) {
     812:	ldrb	r3, [r0, #16]

bool Led::blinkTimePassed () {
  return millis() - _lastBlink > _blinkLength;
};

void Led::tick () {
     814:	sub	sp, #16
     816:	mov	r4, r0
  if (_blinking && blinkTimePassed()) {
     818:	cbz	r3, 84c <Led::tick()+0x3c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     81a:	ldr	r5, [pc, #92]	; (878 <Led::tick()+0x68>)
     81c:	ldr	r1, [r0, #8]
     81e:	ldr	r3, [r5, #0]
     820:	str	r3, [sp, #8]
	return ret;
     822:	ldr	r3, [sp, #8]
     824:	ldr	r2, [r0, #12]
     826:	subs	r3, r3, r1
     828:	cmp	r3, r2
     82a:	bls.n	872 <Led::tick()+0x62>
    digitalWrite(_pin, !digitalRead(_pin));
     82c:	ldrb	r6, [r0, #0]
     82e:	mov	r0, r6
     830:	bl	1610 <digitalRead>
     834:	clz	r1, r0
     838:	lsrs	r1, r1, #5
     83a:	mov	r0, r6
     83c:	bl	1604 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     840:	ldr	r3, [r5, #0]
     842:	str	r3, [sp, #4]
	return ret;
     844:	ldr	r3, [sp, #4]
    _blinking = false;
    _lastBlink = millis();        
     846:	str	r3, [r4, #8]
};

void Led::tick () {
  if (_blinking && blinkTimePassed()) {
    digitalWrite(_pin, !digitalRead(_pin));
    _blinking = false;
     848:	movs	r3, #0
     84a:	strb	r3, [r4, #16]
    _lastBlink = millis();        
  }

  if (!_blinking && _blinkingCounter > 0 && blinkTimePassed()) {
     84c:	ldr	r1, [r4, #20]
     84e:	cmp	r1, #0
     850:	ble.n	872 <Led::tick()+0x62>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     852:	ldr	r3, [pc, #36]	; (878 <Led::tick()+0x68>)
     854:	ldr	r0, [r4, #8]
     856:	ldr	r3, [r3, #0]
     858:	str	r3, [sp, #12]
	return ret;
     85a:	ldr	r3, [sp, #12]
     85c:	ldr	r2, [r4, #12]
     85e:	subs	r3, r3, r0
     860:	cmp	r3, r2
     862:	bls.n	872 <Led::tick()+0x62>
    blink(_blinkingCounter - 1);
     864:	subs	r1, #1
     866:	mov	r0, r4
     868:	bl	794 <Led::blink(int)>
    _blinkingCounter--;
     86c:	ldr	r3, [r4, #20]
     86e:	subs	r3, #1
     870:	str	r3, [r4, #20]
  }
};
     872:	add	sp, #16
     874:	pop	{r4, r5, r6, pc}
     876:	nop
     878:	.word	0x1fff15cc

0000087c <setup>:
#include <Arduino.h>
#include "sequencer.h"

Sequencer* sequencer = new Sequencer();

void setup() {
     87c:	bx	lr
     87e:	nop

00000880 <loop>:
  Serial.begin(9600);
}

void loop() {
  sequencer->tick();
     880:	ldr	r3, [pc, #4]	; (888 <loop+0x8>)
     882:	ldr	r0, [r3, #0]
     884:	b.w	4d8 <Sequencer::tick()>
     888:	.word	0x1fff15b0

0000088c <_GLOBAL__sub_I_sequencer>:
     88c:	push	{r4, lr}
#include <Arduino.h>
#include "sequencer.h"

Sequencer* sequencer = new Sequencer();
     88e:	movs	r0, #40	; 0x28
     890:	bl	2e20 <operator new(unsigned int)>
     894:	mov	r4, r0
     896:	bl	46c <Sequencer::Sequencer()>
     89a:	ldr	r3, [pc, #4]	; (8a0 <_GLOBAL__sub_I_sequencer+0x14>)
     89c:	str	r4, [r3, #0]
     89e:	pop	{r4, pc}
     8a0:	.word	0x1fff15b0

000008a4 <Note::Note()>:
bool Note::isActive() {
  return _active;
};

void Note::reset() {
  _length = 0;
     8a4:	movs	r2, #0
     8a6:	str	r2, [r0, #8]
  _pitch = 0;
     8a8:	str	r2, [r0, #0]
  _velocity = 0;
     8aa:	str	r2, [r0, #4]
  _channel = 0;
     8ac:	str	r2, [r0, #12]
  _active = false;
     8ae:	str	r2, [r0, #16]
#include "step.h"
#include "note.h"

Note::Note () {
  reset();
};
     8b0:	bx	lr
     8b2:	nop

000008b4 <Note::noteOn(unsigned char, unsigned char, unsigned char)>:
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     8b4:	subs	r1, #1
// First parameter is the event type (0x09 = note on, 0x08 = note off).
// Second parameter is note-on/note-off, combined with the channel.
// Channel can be anything between 0-15. Typically reported to the user as 1-16.
// Third parameter is the note number (48 = middle C).
// Fourth parameter is the velocity (64 = normal, 127 = fastest).
void Note::noteOn(byte channel, byte pitch, byte velocity) {
     8b6:	push	{r3, lr}
     8b8:	lsls	r1, r1, #8
     8ba:	lsls	r3, r3, #24
     8bc:	and.w	r1, r1, #3840	; 0xf00
     8c0:	and.w	r3, r3, #2130706432	; 0x7f000000
     8c4:	orrs	r3, r1
     8c6:	lsls	r2, r2, #16
     8c8:	orr.w	r3, r3, #36864	; 0x9000
     8cc:	orr.w	r3, r3, #9
     8d0:	and.w	r0, r2, #8323072	; 0x7f0000
     8d4:	orrs	r0, r3
     8d6:	bl	1890 <usb_midi_write_packed>
  usbMIDI.sendNoteOn(pitch, velocity, channel);
  usbMIDI.send_now();
};
     8da:	ldmia.w	sp!, {r3, lr}
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     8de:	b.w	192c <usb_midi_flush_output>
     8e2:	nop

000008e4 <Note::play(Step*)>:
  _velocity = 0;
  _channel = 0;
  _active = false;
};

void Note::play(Step* step) {
     8e4:	push	{r4, r5, lr}
  _active = true;
  _length = step->length;
  _pitch = step->pitch;
     8e6:	ldr	r2, [r1, #4]
  _velocity = step->velocity;
     8e8:	ldr	r3, [r1, #8]
  _velocity = 0;
  _channel = 0;
  _active = false;
};

void Note::play(Step* step) {
     8ea:	mov	r4, r0
     8ec:	sub	sp, #36	; 0x24
  _active = true;
  _length = step->length;
     8ee:	ldr	r0, [r1, #12]
     8f0:	str	r0, [r4, #8]
  _channel = 0;
  _active = false;
};

void Note::play(Step* step) {
  _active = true;
     8f2:	movs	r5, #1
  _length = step->length;
  _pitch = step->pitch;
  _velocity = step->velocity;
     8f4:	stmia.w	r4, {r2, r3}
  _channel = 0;
  _active = false;
};

void Note::play(Step* step) {
  _active = true;
     8f8:	str	r5, [r4, #16]
  _length = step->length;
  _pitch = step->pitch;
  _velocity = step->velocity;
  String noteLog = "Playing note, length: ";
     8fa:	mov	r0, sp
     8fc:	ldr	r1, [pc, #64]	; (940 <Note::play(Step*)+0x5c>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
     8fe:	ldr	r5, [pc, #68]	; (944 <Note::play(Step*)+0x60>)
     900:	bl	2ce4 <String::String(char const*)>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
     904:	mov	r1, sp
     906:	add	r0, sp, #16
     908:	bl	2d0c <String::String(String const&)>
  Serial.println(noteLog + _length);
     90c:	ldr	r1, [r4, #8]
     90e:	add	r0, sp, #16
     910:	bl	2dc4 <operator+(StringSumHelper const&, int)>
     914:	mov	r1, r0
     916:	mov	r0, r5
     918:	bl	2b68 <Print::print(String const&)>
     91c:	mov	r0, r5
     91e:	bl	2bb4 <Print::println()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
     922:	add	r0, sp, #16
     924:	bl	2c64 <String::~String()>
  noteOn(_channel, _pitch, _velocity);
     928:	ldrb	r3, [r4, #4]
     92a:	ldrb	r2, [r4, #0]
     92c:	ldrb	r1, [r4, #12]
     92e:	mov	r0, r4
     930:	bl	8b4 <Note::noteOn(unsigned char, unsigned char, unsigned char)>
void Note::play(Step* step) {
  _active = true;
  _length = step->length;
  _pitch = step->pitch;
  _velocity = step->velocity;
  String noteLog = "Playing note, length: ";
     934:	mov	r0, sp
     936:	bl	2c64 <String::~String()>
  Serial.println(noteLog + _length);
  noteOn(_channel, _pitch, _velocity);
};
     93a:	add	sp, #36	; 0x24
     93c:	pop	{r4, r5, pc}
     93e:	nop
     940:	.word	0x00004a08
     944:	.word	0x1fff0c48

00000948 <Note::noteOff(unsigned char, unsigned char, unsigned char)>:
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     948:	subs	r1, #1
void Note::noteOn(byte channel, byte pitch, byte velocity) {
  usbMIDI.sendNoteOn(pitch, velocity, channel);
  usbMIDI.send_now();
};

void Note::noteOff(byte channel, byte pitch, byte velocity) {
     94a:	push	{r3, lr}
     94c:	lsls	r1, r1, #8
     94e:	lsls	r3, r3, #24
     950:	and.w	r1, r1, #3840	; 0xf00
     954:	and.w	r3, r3, #2130706432	; 0x7f000000
     958:	orrs	r3, r1
     95a:	lsls	r2, r2, #16
     95c:	orr.w	r3, r3, #32768	; 0x8000
     960:	orr.w	r3, r3, #8
     964:	and.w	r0, r2, #8323072	; 0x7f0000
     968:	orrs	r0, r3
     96a:	bl	1890 <usb_midi_write_packed>
  usbMIDI.sendNoteOff(pitch, velocity, channel);
  usbMIDI.send_now();
};
     96e:	ldmia.w	sp!, {r3, lr}
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     972:	b.w	192c <usb_midi_flush_output>
     976:	nop

00000978 <Note::tick()>:
Note::Note () {
  reset();
};

void Note::tick() {
  if (!_active) return;
     978:	ldr	r3, [r0, #16]
     97a:	cbz	r3, 986 <Note::tick()+0xe>

  _length--;
     97c:	ldr	r3, [r0, #8]
     97e:	subs	r3, #1

  if (_length <= 0) {
     980:	cmp	r3, #0
};

void Note::tick() {
  if (!_active) return;

  _length--;
     982:	str	r3, [r0, #8]

  if (_length <= 0) {
     984:	ble.n	988 <Note::tick()+0x10>
     986:	bx	lr

Note::Note () {
  reset();
};

void Note::tick() {
     988:	push	{r4, lr}
     98a:	sub	sp, #32
     98c:	mov	r4, r0
  if (!_active) return;

  _length--;

  if (_length <= 0) {
    String noteLog = "Note off, pitch: ";
     98e:	ldr	r1, [pc, #76]	; (9dc <Note::tick()+0x64>)
     990:	mov	r0, sp
     992:	bl	2ce4 <String::String(char const*)>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     996:	mov	r1, sp
     998:	add	r0, sp, #16
     99a:	bl	2d0c <String::String(String const&)>
    Serial.println(noteLog + _pitch);    
     99e:	ldr	r1, [r4, #0]
     9a0:	add	r0, sp, #16
     9a2:	bl	2dc4 <operator+(StringSumHelper const&, int)>
     9a6:	mov	r1, r0
     9a8:	ldr	r0, [pc, #52]	; (9e0 <Note::tick()+0x68>)
     9aa:	bl	2b68 <Print::print(String const&)>
     9ae:	ldr	r0, [pc, #48]	; (9e0 <Note::tick()+0x68>)
     9b0:	bl	2bb4 <Print::println()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
     9b4:	add	r0, sp, #16
     9b6:	bl	2c64 <String::~String()>
    noteOff(_channel, _pitch, _velocity);
     9ba:	ldrb	r3, [r4, #4]
     9bc:	ldrb	r2, [r4, #0]
     9be:	ldrb	r1, [r4, #12]
     9c0:	mov	r0, r4
     9c2:	bl	948 <Note::noteOff(unsigned char, unsigned char, unsigned char)>
bool Note::isActive() {
  return _active;
};

void Note::reset() {
  _length = 0;
     9c6:	movs	r3, #0
  if (!_active) return;

  _length--;

  if (_length <= 0) {
    String noteLog = "Note off, pitch: ";
     9c8:	mov	r0, sp
bool Note::isActive() {
  return _active;
};

void Note::reset() {
  _length = 0;
     9ca:	str	r3, [r4, #8]
  _pitch = 0;
     9cc:	str	r3, [r4, #0]
  _velocity = 0;
     9ce:	str	r3, [r4, #4]
  _channel = 0;
     9d0:	str	r3, [r4, #12]
  _active = false;
     9d2:	str	r3, [r4, #16]
  if (!_active) return;

  _length--;

  if (_length <= 0) {
    String noteLog = "Note off, pitch: ";
     9d4:	bl	2c64 <String::~String()>
    Serial.println(noteLog + _pitch);    
    noteOff(_channel, _pitch, _velocity);
    reset();
  }
};
     9d8:	add	sp, #32
     9da:	pop	{r4, pc}
     9dc:	.word	0x00004a20
     9e0:	.word	0x1fff0c48

000009e4 <Transport::Transport(Sequencer*)>:
// and its job is also to tell the sequence when the next step starts
// its then responsibility of the controller to create the note and its responsibility
// of the note when to stop sounding. 
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
     9e4:	push	{r4}
  _sequencer = sequencer;
  _state = false;
  max_ppqn = 24;
     9e6:	movs	r4, #24
// of the note when to stop sounding. 
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     9e8:	movs	r2, #0
  max_ppqn = 24;
     9ea:	stmia.w	r0, {r1, r4}
// of the note when to stop sounding. 
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     9ee:	str	r2, [r0, #12]
  max_ppqn = 24;
  ppqn = 0;
     9f0:	str	r2, [r0, #8]
};
     9f2:	ldr.w	r4, [sp], #4
     9f6:	bx	lr

000009f8 <Transport::controlTempo(int)>:
int Transport::getPPQN () {
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
     9f8:	cmp.w	r1, #400	; 0x190
     9fc:	bge.n	a0e <Transport::controlTempo(int)+0x16>
    max_ppqn = 6;

    if (ppqn >= 6) {
     9fe:	ldr	r3, [r0, #8]
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
    max_ppqn = 6;
     a00:	movs	r2, #6

    if (ppqn >= 6) {
     a02:	cmp	r3, #5
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
    max_ppqn = 6;
     a04:	str	r2, [r0, #4]

    if (ppqn >= 6) {
     a06:	ble.n	a24 <Transport::controlTempo(int)+0x2c>
      ppqn = 0;
     a08:	movs	r3, #0
     a0a:	str	r3, [r0, #8]
     a0c:	bx	lr
    }
  } else if (value >= 400 && value < 800) {
     a0e:	sub.w	r3, r1, #400	; 0x190
     a12:	cmp.w	r3, #400	; 0x190
     a16:	bcc.n	a26 <Transport::controlTempo(int)+0x2e>
    max_ppqn = 8;

    if (ppqn >= 8) {
      ppqn = 0;
    }
  } else if (value >= 800 && value <= 1023) {
     a18:	sub.w	r1, r1, #800	; 0x320
     a1c:	cmp	r1, #223	; 0xdf
    max_ppqn = 10;
     a1e:	itt	ls
     a20:	movls	r3, #10
     a22:	strls	r3, [r0, #4]
     a24:	bx	lr
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;

    if (ppqn >= 8) {
     a26:	ldr	r3, [r0, #8]

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;
     a28:	movs	r2, #8

    if (ppqn >= 8) {
     a2a:	cmp	r3, #7

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;
     a2c:	str	r2, [r0, #4]

    if (ppqn >= 8) {
     a2e:	bgt.n	a08 <Transport::controlTempo(int)+0x10>
     a30:	bx	lr
     a32:	nop

00000a34 <Transport::startPPQN()>:
    _sequencer->step(); 
    ppqn = 0;
  }
};

void Transport::startPPQN () {
     a34:	push	{r4, lr}
  _state = true;
  ppqn = 0;
     a36:	movs	r3, #0
    _sequencer->step(); 
    ppqn = 0;
  }
};

void Transport::startPPQN () {
     a38:	mov	r4, r0
  _state = true;
     a3a:	movs	r2, #1
  ppqn = 0;
     a3c:	str	r3, [r0, #8]
    ppqn = 0;
  }
};

void Transport::startPPQN () {
  _state = true;
     a3e:	str	r2, [r0, #12]
  ppqn = 0;
  _sequencer->step(); 
     a40:	ldr	r0, [r0, #0]
     a42:	bl	4f8 <Sequencer::step()>
  _sequencer->_controller->_leds[5]->toggle();
     a46:	ldr	r3, [r4, #0]
     a48:	ldr	r3, [r3, #16]
};
     a4a:	ldmia.w	sp!, {r4, lr}

void Transport::startPPQN () {
  _state = true;
  ppqn = 0;
  _sequencer->step(); 
  _sequencer->_controller->_leds[5]->toggle();
     a4e:	ldr	r0, [r3, #72]	; 0x48
     a50:	b.w	7c8 <Led::toggle()>

00000a54 <Transport::stopPPQN()>:
};

void Transport::stopPPQN () {
     a54:	push	{r4, lr}
  _state = false;
     a56:	movs	r3, #0
  ppqn = 0;
  _sequencer->step(); 
  _sequencer->_controller->_leds[5]->toggle();
};

void Transport::stopPPQN () {
     a58:	mov	r4, r0
  _state = false;
     a5a:	str	r3, [r0, #12]
  ppqn = 0;
     a5c:	str	r3, [r0, #8]
  _sequencer->resetStep();
     a5e:	ldr	r0, [r0, #0]
     a60:	bl	548 <Sequencer::resetStep()>
  _sequencer->_controller->_leds[5]->toggle();
     a64:	ldr	r3, [r4, #0]
     a66:	ldr	r3, [r3, #16]
};
     a68:	ldmia.w	sp!, {r4, lr}

void Transport::stopPPQN () {
  _state = false;
  ppqn = 0;
  _sequencer->resetStep();
  _sequencer->_controller->_leds[5]->toggle();
     a6c:	ldr	r0, [r3, #72]	; 0x48
     a6e:	b.w	7c8 <Led::toggle()>
     a72:	nop

00000a74 <Transport::processMidi()>:
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     a74:	ldr	r3, [pc, #68]	; (abc <Transport::processMidi()+0x48>)
  // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
  // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
  // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
  // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

  switch (type) {
     a76:	ldrb	r3, [r3, #0]
     a78:	cmp	r3, #250	; 0xfa
     a7a:	beq.n	aac <Transport::processMidi()+0x38>
     a7c:	cmp	r3, #252	; 0xfc
     a7e:	beq.n	aa8 <Transport::processMidi()+0x34>
     a80:	cmp	r3, #248	; 0xf8
    max_ppqn = 10;
  }
};

  // move midi to midi class
void Transport::processMidi () {
     a82:	push	{r4, lr}
     a84:	mov	r4, r0
  // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
  // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
  // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
  // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

  switch (type) {
     a86:	beq.n	a9a <Transport::processMidi()+0x26>
     a88:	movs	r1, #35	; 0x23
     a8a:	ldr	r0, [pc, #52]	; (ac0 <Transport::processMidi()+0x4c>)
     a8c:	bl	ff4 <usb_serial_write>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     a90:	ldr	r0, [pc, #48]	; (ac4 <Transport::processMidi()+0x50>)
      break;

    default:
      Serial.println("Opps, an unknown MIDI message type!");
  }
}
     a92:	ldmia.w	sp!, {r4, lr}
     a96:	b.w	2bb4 <Print::println()>

void Transport::advancePPQN () {
  ++ppqn;
     a9a:	ldr	r3, [r0, #8]

  if (ppqn == max_ppqn) {
     a9c:	ldr	r1, [r0, #4]
      Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
  ++ppqn;
     a9e:	adds	r3, #1

  if (ppqn == max_ppqn) {
     aa0:	cmp	r3, r1
      Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
  ++ppqn;
     aa2:	str	r3, [r0, #8]

  if (ppqn == max_ppqn) {
     aa4:	beq.n	ab0 <Transport::processMidi()+0x3c>
     aa6:	pop	{r4, pc}
    case usbMIDI.Start: // 0xFA
      startPPQN();
      break;

    case usbMIDI.Stop: // 0xFC
      stopPPQN();
     aa8:	b.w	a54 <Transport::stopPPQN()>
    case usbMIDI.Clock: // 0xF8 
      advancePPQN();
      break;

    case usbMIDI.Start: // 0xFA
      startPPQN();
     aac:	b.w	a34 <Transport::startPPQN()>

void Transport::advancePPQN () {
  ++ppqn;

  if (ppqn == max_ppqn) {
    _sequencer->step(); 
     ab0:	ldr	r0, [r0, #0]
     ab2:	bl	4f8 <Sequencer::step()>
    ppqn = 0;
     ab6:	movs	r3, #0
     ab8:	str	r3, [r4, #8]
     aba:	pop	{r4, pc}
     abc:	.word	0x1fff1a88
     ac0:	.word	0x00004a34
     ac4:	.word	0x1fff0c48

00000ac8 <Transport::tick()>:
  _state = false;
  max_ppqn = 24;
  ppqn = 0;
};

void Transport::tick () {
     ac8:	push	{r4, lr}
     aca:	mov	r4, r0
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     acc:	movs	r0, #0
     ace:	bl	1958 <usb_midi_read>
  if (usbMIDI.read()) {
     ad2:	cbnz	r0, ad6 <Transport::tick()+0xe>
     ad4:	pop	{r4, pc}
    processMidi();
     ad6:	mov	r0, r4
  }
};
     ad8:	ldmia.w	sp!, {r4, lr}
  ppqn = 0;
};

void Transport::tick () {
  if (usbMIDI.read()) {
    processMidi();
     adc:	b.w	a74 <Transport::processMidi()>

00000ae0 <Paginator::Paginator(Sequencer*)>:
#include "paginator.h"

Paginator::Paginator (Sequencer* sequencer) {
  _sequencer = sequencer;
  _page = 1;
     ae0:	movs	r2, #1
#include "paginator.h"

Paginator::Paginator (Sequencer* sequencer) {
  _sequencer = sequencer;
     ae2:	str	r1, [r0, #4]
  _page = 1;
     ae4:	str	r2, [r0, #0]
};
     ae6:	bx	lr

00000ae8 <Paginator::getPage()>:

int Paginator::getPage () {
  return _page;
}
     ae8:	ldr	r0, [r0, #0]
     aea:	bx	lr

00000aec <Paginator::nextPage()>:

void Paginator::nextPage () {
  if (_page < 4) _page++;
     aec:	ldr	r3, [r0, #0]
     aee:	cmp	r3, #3
     af0:	itt	le
     af2:	addle	r3, #1
     af4:	strle	r3, [r0, #0]
     af6:	bx	lr

00000af8 <Paginator::previousPage()>:
};

void Paginator::previousPage () {
  if (_page > 1) _page--;
     af8:	ldr	r3, [r0, #0]
     afa:	cmp	r3, #1
     afc:	itt	gt
     afe:	addgt.w	r3, r3, #4294967295
     b02:	strgt	r3, [r0, #0]
     b04:	bx	lr
     b06:	nop

00000b08 <Step::Step(Sequencer*)>:
#include <Arduino.h>
#include "step.h"

Step::Step(Sequencer* sequencer) {
     b08:	push	{r4, r5, r6}
  _state = false;
     b0a:	movs	r6, #0
  _sequencer = sequencer;
  pitch = 38;
     b0c:	movs	r5, #38	; 0x26
  velocity = 100;
     b0e:	movs	r4, #100	; 0x64
  length = 1;
     b10:	movs	r2, #1
#include <Arduino.h>
#include "step.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
     b12:	strb	r6, [r0, #16]
  _sequencer = sequencer;
  pitch = 38;
     b14:	str	r5, [r0, #4]
  velocity = 100;
     b16:	str	r4, [r0, #8]
#include <Arduino.h>
#include "step.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
  _sequencer = sequencer;
     b18:	str	r1, [r0, #0]
  pitch = 38;
  velocity = 100;
  length = 1;
     b1a:	str	r2, [r0, #12]
};
     b1c:	pop	{r4, r5, r6}
     b1e:	bx	lr

00000b20 <Step::toggle()>:

void Step::toggle () {
  _state = !_state;
     b20:	ldrb	r3, [r0, #16]
     b22:	eor.w	r3, r3, #1
     b26:	strb	r3, [r0, #16]
     b28:	bx	lr
     b2a:	nop

00000b2c <Step::controlLength(int)>:
};

void Step::controlLength (int value) {
     b2c:	push	{r4, r5, r6, lr}
     b2e:	sub	sp, #48	; 0x30
     b30:	mov	r6, r0
     b32:	mov	r4, r1
  String controlLog = "Control length raw value: ";
     b34:	mov	r0, sp
     b36:	ldr	r1, [pc, #124]	; (bb4 <Step::controlLength(int)+0x88>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
     b38:	ldr	r5, [pc, #124]	; (bb8 <Step::controlLength(int)+0x8c>)
     b3a:	bl	2ce4 <String::String(char const*)>
{
public:
	StringSumHelper(const String &s) : String(s) {}
     b3e:	mov	r1, sp
     b40:	add	r0, sp, #32
     b42:	bl	2d0c <String::String(String const&)>
  Serial.println(controlLog + value);
     b46:	mov	r1, r4
     b48:	add	r0, sp, #32
     b4a:	bl	2dc4 <operator+(StringSumHelper const&, int)>
     b4e:	mov	r1, r0
     b50:	mov	r0, r5
     b52:	bl	2b68 <Print::print(String const&)>
     b56:	mov	r0, r5
     b58:	bl	2bb4 <Print::println()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
     b5c:	add	r0, sp, #32
     b5e:	bl	2c64 <String::~String()>
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     b62:	ldr	r3, [pc, #88]	; (bbc <Step::controlLength(int)+0x90>)
  int newValue = map(value, 0, 1000, 4, 0);
  String controlLog2 = "Control length: ";
     b64:	ldr	r1, [pc, #88]	; (bc0 <Step::controlLength(int)+0x94>)
     b66:	sub.w	r4, r4, r4, lsl #2
     b6a:	smull	r2, r3, r3, r4
     b6e:	asrs	r4, r4, #31
     b70:	rsb	r4, r4, r3, asr #8
     b74:	add	r0, sp, #16
     b76:	bl	2ce4 <String::String(char const*)>
     b7a:	adds	r4, #4
{
public:
	StringSumHelper(const String &s) : String(s) {}
     b7c:	add	r1, sp, #16
     b7e:	add	r0, sp, #32
     b80:	bl	2d0c <String::String(String const&)>
  Serial.println(controlLog2 + newValue);
     b84:	mov	r1, r4
     b86:	add	r0, sp, #32
     b88:	bl	2dc4 <operator+(StringSumHelper const&, int)>
     b8c:	mov	r1, r0
     b8e:	mov	r0, r5
     b90:	bl	2b68 <Print::print(String const&)>
     b94:	mov	r0, r5
     b96:	bl	2bb4 <Print::println()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
     b9a:	add	r0, sp, #32
     b9c:	bl	2c64 <String::~String()>
  length = newValue;
     ba0:	str	r4, [r6, #12]

void Step::controlLength (int value) {
  String controlLog = "Control length raw value: ";
  Serial.println(controlLog + value);
  int newValue = map(value, 0, 1000, 4, 0);
  String controlLog2 = "Control length: ";
     ba2:	add	r0, sp, #16
     ba4:	bl	2c64 <String::~String()>
void Step::toggle () {
  _state = !_state;
};

void Step::controlLength (int value) {
  String controlLog = "Control length raw value: ";
     ba8:	mov	r0, sp
     baa:	bl	2c64 <String::~String()>
  Serial.println(controlLog + value);
  int newValue = map(value, 0, 1000, 4, 0);
  String controlLog2 = "Control length: ";
  Serial.println(controlLog2 + newValue);
  length = newValue;
};
     bae:	add	sp, #48	; 0x30
     bb0:	pop	{r4, r5, r6, pc}
     bb2:	nop
     bb4:	.word	0x00004a58
     bb8:	.word	0x1fff0c48
     bbc:	.word	0x4178749f
     bc0:	.word	0x00004a74

00000bc4 <Step::controlPitch(int)>:

void Step::controlPitch (int value) {
  int newValue = map(value, 0, 1023, 51, 38);
  pitch = newValue;
     bc4:	sub.w	r1, r1, r1, lsl #2
     bc8:	lsls	r1, r1, #2
     bca:	it	mi
     bcc:	addwmi	r1, r1, #1023	; 0x3ff
     bd0:	asrs	r1, r1, #10
     bd2:	adds	r1, #51	; 0x33
     bd4:	str	r1, [r0, #4]
     bd6:	bx	lr

00000bd8 <Step::controlVelocity(int)>:
};

void Step::controlVelocity (int value) {
  int newValue = map(value, 0, 1023, 127, 63);
  velocity = newValue;
     bd8:	subs.w	r1, r1, r1, lsl #6
     bdc:	it	mi
     bde:	addwmi	r1, r1, #1023	; 0x3ff
     be2:	asrs	r1, r1, #10
     be4:	adds	r1, #127	; 0x7f
     be6:	str	r1, [r0, #8]
     be8:	bx	lr
     bea:	nop

00000bec <Knob::Knob(unsigned char, int, Controller*)>:
#include "controller.h"
#include "step.h"
#include "sequencer.h"
#include "transport.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
     bec:	push	{r4, r5}
  _pin = pin;
  _id = id;
  _controller = controller;
  _value = 0;
     bee:	movs	r5, #0
     bf0:	str	r5, [r0, #4]
#include "step.h"
#include "sequencer.h"
#include "transport.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
  _pin = pin;
     bf2:	str	r1, [r0, #0]
  _id = id;
     bf4:	str	r2, [r0, #12]
  _controller = controller;
     bf6:	str	r3, [r0, #16]
  _value = 0;
};
     bf8:	pop	{r4, r5}
     bfa:	bx	lr

00000bfc <Knob::onChange()>:

void Knob::onChange () {
  if (_id == 5) {
     bfc:	ldr	r3, [r0, #12]
     bfe:	cmp	r3, #5
     c00:	beq.n	c3a <Knob::onChange()+0x3e>
  _id = id;
  _controller = controller;
  _value = 0;
};

void Knob::onChange () {
     c02:	push	{r4, lr}
     c04:	mov	r4, r0
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
     c06:	ldr	r0, [r0, #16]
     c08:	bl	f20 <Controller::getMode()>
     c0c:	cmp	r0, #1
     c0e:	beq.n	c46 <Knob::onChange()+0x4a>
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
     c10:	ldr	r0, [r4, #16]
     c12:	bl	f20 <Controller::getMode()>
     c16:	cbz	r0, c24 <Knob::onChange()+0x28>
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
     c18:	ldr	r0, [r4, #16]
     c1a:	bl	f20 <Controller::getMode()>
     c1e:	cmp	r0, #2
     c20:	beq.n	c5c <Knob::onChange()+0x60>
     c22:	pop	{r4, pc}
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
     c24:	ldr	r2, [r4, #16]
     c26:	ldr	r3, [r4, #12]
     c28:	ldr	r2, [r2, #76]	; 0x4c
     c2a:	ldr	r1, [r4, #4]
     c2c:	adds	r3, #6
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_steps[_id]->controlLength(_value);
  }
}
     c2e:	ldmia.w	sp!, {r4, lr}
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
     c32:	ldr.w	r0, [r2, r3, lsl #2]
     c36:	b.w	bc4 <Step::controlPitch(int)>
  _value = 0;
};

void Knob::onChange () {
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
     c3a:	ldr	r3, [r0, #16]
     c3c:	ldr	r1, [r0, #4]
     c3e:	ldr	r3, [r3, #76]	; 0x4c
     c40:	ldr	r0, [r3, #12]
     c42:	b.w	9f8 <Transport::controlTempo(int)>
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
     c46:	ldr	r2, [r4, #16]
     c48:	ldr	r3, [r4, #12]
     c4a:	ldr	r2, [r2, #76]	; 0x4c
     c4c:	ldr	r1, [r4, #4]
     c4e:	adds	r3, #6
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_steps[_id]->controlLength(_value);
  }
}
     c50:	ldmia.w	sp!, {r4, lr}

void Knob::onChange () {
  if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
     c54:	ldr.w	r0, [r2, r3, lsl #2]
     c58:	b.w	bd8 <Step::controlVelocity(int)>
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_steps[_id]->controlLength(_value);
     c5c:	ldr	r2, [r4, #16]
     c5e:	ldr	r3, [r4, #12]
     c60:	ldr	r2, [r2, #76]	; 0x4c
     c62:	ldr	r1, [r4, #4]
     c64:	adds	r3, #6
  }
}
     c66:	ldmia.w	sp!, {r4, lr}
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_steps[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_steps[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_steps[_id]->controlLength(_value);
     c6a:	ldr.w	r0, [r2, r3, lsl #2]
     c6e:	b.w	b2c <Step::controlLength(int)>
     c72:	nop

00000c74 <Knob::tick()>:
  }
}

// todo latch
void Knob::tick () {
     c74:	push	{r4, lr}
     c76:	mov	r4, r0
  _value = analogRead(_pin);
     c78:	ldrb	r0, [r0, #0]
     c7a:	bl	1420 <analogRead>

  int diff = abs(_value - _lastValue);
     c7e:	ldr	r3, [r4, #8]
  }
}

// todo latch
void Knob::tick () {
  _value = analogRead(_pin);
     c80:	str	r0, [r4, #4]

  int diff = abs(_value - _lastValue);

  // "filter"
  const boolean isChanging = _value != _lastValue && diff > 10;
     c82:	cmp	r0, r3
     c84:	beq.n	c9c <Knob::tick()+0x28>
     c86:	subs	r0, r0, r3
     c88:	cmp	r0, #0
     c8a:	it	lt
     c8c:	neglt	r0, r0
     c8e:	cmp	r0, #10
     c90:	ble.n	c9c <Knob::tick()+0x28>

  if (isChanging) {
    onChange();
     c92:	mov	r0, r4
     c94:	bl	bfc <Knob::onChange()>

    _lastValue = _value;
     c98:	ldr	r3, [r4, #4]
     c9a:	str	r3, [r4, #8]
     c9c:	pop	{r4, pc}
     c9e:	nop

00000ca0 <Controller::Controller(Sequencer*)>:
#include "button.h"
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"

Controller::Controller (Sequencer* sequencer) {
     ca0:	push	{r4, r5, r6, r7, lr}
  _sequencer = sequencer;
  _currentMode = PITCH;
     ca2:	movs	r5, #0
#include "button.h"
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"

Controller::Controller (Sequencer* sequencer) {
     ca4:	sub	sp, #20
     ca6:	mov	r4, r0
  _sequencer = sequencer;
     ca8:	str	r1, [r0, #76]	; 0x4c
  _currentMode = PITCH;
     caa:	strb.w	r5, [r0, #49]	; 0x31
  _shiftMode = false;
     cae:	strb.w	r5, [r0, #48]	; 0x30
  
  _leds[0] = new Led(3, LOW);
     cb2:	movs	r0, #24
     cb4:	bl	2e20 <operator new(unsigned int)>
     cb8:	mov	r2, r5
     cba:	mov	r6, r0
     cbc:	movs	r1, #3
     cbe:	bl	770 <Led::Led(int, int)>
     cc2:	str	r6, [r4, #52]	; 0x34
  _leds[1] = new Led(5, LOW);
     cc4:	movs	r0, #24
     cc6:	bl	2e20 <operator new(unsigned int)>
     cca:	mov	r2, r5
     ccc:	mov	r6, r0
     cce:	movs	r1, #5
     cd0:	bl	770 <Led::Led(int, int)>
     cd4:	str	r6, [r4, #56]	; 0x38
  _leds[2] = new Led(7, LOW);
     cd6:	movs	r0, #24
     cd8:	bl	2e20 <operator new(unsigned int)>
     cdc:	mov	r2, r5
     cde:	mov	r6, r0
     ce0:	movs	r1, #7
     ce2:	bl	770 <Led::Led(int, int)>
     ce6:	str	r6, [r4, #60]	; 0x3c
  _leds[3] = new Led(9, LOW);
     ce8:	movs	r0, #24
     cea:	bl	2e20 <operator new(unsigned int)>
     cee:	mov	r2, r5
     cf0:	mov	r6, r0
     cf2:	movs	r1, #9
     cf4:	bl	770 <Led::Led(int, int)>
     cf8:	str	r6, [r4, #64]	; 0x40
  _leds[4] = new Led(11, LOW);
     cfa:	movs	r0, #24
     cfc:	bl	2e20 <operator new(unsigned int)>
     d00:	mov	r2, r5
     d02:	mov	r6, r0
     d04:	movs	r1, #11
     d06:	bl	770 <Led::Led(int, int)>
     d0a:	str	r6, [r4, #68]	; 0x44
  _leds[5] = new Led(24, LOW);
     d0c:	movs	r0, #24
     d0e:	bl	2e20 <operator new(unsigned int)>
     d12:	mov	r2, r5
     d14:	movs	r1, #24
     d16:	mov	r6, r0
     d18:	bl	770 <Led::Led(int, int)>
     d1c:	str	r6, [r4, #72]	; 0x48

  _leds[4]->toggle();
     d1e:	ldr	r0, [r4, #68]	; 0x44
     d20:	bl	7c8 <Led::toggle()>
  _leds[5]->toggle();
     d24:	ldr	r0, [r4, #72]	; 0x48
     d26:	bl	7c8 <Led::toggle()>

  _buttons[0] = new Button(1, step1pin, _leds[0], false, false, this);
     d2a:	movs	r0, #56	; 0x38
     d2c:	bl	2e20 <operator new(unsigned int)>
     d30:	ldr	r3, [r4, #52]	; 0x34
     d32:	str	r5, [sp, #4]
     d34:	mov	r6, r0
     d36:	str	r5, [sp, #0]
     d38:	movs	r2, #2
     d3a:	movs	r1, #1
     d3c:	str	r4, [sp, #8]
     d3e:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     d42:	str	r6, [r4, #0]
  _buttons[1] = new Button(2, step2pin, _leds[1], false, false, this);
     d44:	movs	r0, #56	; 0x38
     d46:	bl	2e20 <operator new(unsigned int)>
     d4a:	ldr	r3, [r4, #56]	; 0x38
     d4c:	str	r5, [sp, #4]
     d4e:	mov	r6, r0
     d50:	str	r5, [sp, #0]
     d52:	movs	r2, #4
     d54:	movs	r1, #2
     d56:	str	r4, [sp, #8]
     d58:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     d5c:	str	r6, [r4, #4]
  _buttons[2] = new Button(3, step3pin, _leds[2], false, false, this);
     d5e:	movs	r0, #56	; 0x38
     d60:	bl	2e20 <operator new(unsigned int)>
     d64:	ldr	r3, [r4, #60]	; 0x3c
     d66:	str	r5, [sp, #4]
     d68:	mov	r6, r0
     d6a:	str	r5, [sp, #0]
     d6c:	movs	r2, #6
     d6e:	movs	r1, #3
     d70:	str	r4, [sp, #8]
     d72:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     d76:	str	r6, [r4, #8]
  _buttons[3] = new Button(4, step4pin, _leds[3], false, false, this);
     d78:	movs	r0, #56	; 0x38
     d7a:	bl	2e20 <operator new(unsigned int)>
     d7e:	ldr	r3, [r4, #64]	; 0x40
     d80:	str	r5, [sp, #4]
     d82:	mov	r6, r0
     d84:	str	r5, [sp, #0]
     d86:	movs	r2, #8
     d88:	movs	r1, #4
     d8a:	str	r4, [sp, #8]
     d8c:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     d90:	str	r6, [r4, #12]
  _buttons[4] = new Button(5, shiftPin, _leds[4], true, false, this);
     d92:	movs	r0, #56	; 0x38
     d94:	bl	2e20 <operator new(unsigned int)>
     d98:	movs	r6, #1
     d9a:	ldr	r3, [r4, #68]	; 0x44
     d9c:	str	r5, [sp, #4]
     d9e:	mov	r7, r0
     da0:	movs	r2, #10
     da2:	movs	r1, #5
     da4:	str	r4, [sp, #8]
     da6:	str	r6, [sp, #0]
     da8:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     dac:	str	r7, [r4, #16]
  _buttons[5] = new Button(6, playPin, _leds[5], false, true, this);
     dae:	movs	r0, #56	; 0x38
     db0:	bl	2e20 <operator new(unsigned int)>
     db4:	ldr	r3, [r4, #72]	; 0x48
     db6:	str	r4, [sp, #8]
     db8:	mov	r7, r0
     dba:	stmia.w	sp, {r5, r6}
     dbe:	movs	r2, #12
     dc0:	movs	r1, #6
     dc2:	bl	550 <Button::Button(int, int, Led*, bool, bool, Controller*)>
     dc6:	str	r7, [r4, #20]

  _knobs[0] = new Knob(A0, 0, this);
     dc8:	movs	r0, #20
     dca:	bl	2e20 <operator new(unsigned int)>
     dce:	mov	r3, r4
     dd0:	mov	r2, r5
     dd2:	mov	r7, r0
     dd4:	movs	r1, #14
     dd6:	bl	bec <Knob::Knob(unsigned char, int, Controller*)>
     dda:	str	r7, [r4, #24]
  _knobs[1] = new Knob(A1, 1, this);
     ddc:	movs	r0, #20
     dde:	bl	2e20 <operator new(unsigned int)>
     de2:	mov	r3, r4
     de4:	mov	r2, r6
     de6:	mov	r5, r0
     de8:	movs	r1, #15
     dea:	bl	bec <Knob::Knob(unsigned char, int, Controller*)>
     dee:	str	r5, [r4, #28]
  _knobs[2] = new Knob(A2, 2, this);
     df0:	movs	r0, #20
     df2:	bl	2e20 <operator new(unsigned int)>
     df6:	mov	r3, r4
     df8:	mov	r5, r0
     dfa:	movs	r2, #2
     dfc:	movs	r1, #16
     dfe:	bl	bec <Knob::Knob(unsigned char, int, Controller*)>
     e02:	str	r5, [r4, #32]
  _knobs[3] = new Knob(A3, 3, this);
     e04:	movs	r0, #20
     e06:	bl	2e20 <operator new(unsigned int)>
     e0a:	mov	r3, r4
     e0c:	mov	r5, r0
     e0e:	movs	r2, #3
     e10:	movs	r1, #17
     e12:	bl	bec <Knob::Knob(unsigned char, int, Controller*)>
     e16:	str	r5, [r4, #36]	; 0x24
  _knobs[4] = new Knob(A4, 4, this);
     e18:	movs	r0, #20
     e1a:	bl	2e20 <operator new(unsigned int)>
     e1e:	mov	r3, r4
     e20:	mov	r5, r0
     e22:	movs	r2, #4
     e24:	movs	r1, #18
     e26:	bl	bec <Knob::Knob(unsigned char, int, Controller*)>
     e2a:	str	r5, [r4, #40]	; 0x28
  _knobs[5] = new Knob(A5, 5, this);
     e2c:	movs	r0, #20
     e2e:	bl	2e20 <operator new(unsigned int)>
     e32:	mov	r3, r4
     e34:	movs	r2, #5
     e36:	movs	r1, #19
     e38:	mov	r5, r0
     e3a:	bl	bec <Knob::Knob(unsigned char, int, Controller*)>
};
     e3e:	mov	r0, r4
  _knobs[0] = new Knob(A0, 0, this);
  _knobs[1] = new Knob(A1, 1, this);
  _knobs[2] = new Knob(A2, 2, this);
  _knobs[3] = new Knob(A3, 3, this);
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
     e40:	str	r5, [r4, #44]	; 0x2c
};
     e42:	add	sp, #20
     e44:	pop	{r4, r5, r6, r7, pc}
     e46:	nop

00000e48 <Controller::tick()>:

void Controller::tick() {
     e48:	push	{r3, r4, r5, r6, r7, lr}
     e4a:	add.w	r7, r0, #20
     e4e:	mov	r6, r7
     e50:	subs	r4, r0, #4
     e52:	add.w	r5, r0, #48	; 0x30
  for (size_t i = 0; i < 6; i++) {
    _buttons[i]->tick();
     e56:	ldr.w	r0, [r4, #4]!
     e5a:	bl	604 <Button::tick()>
    _leds[i]->tick();
     e5e:	ldr.w	r0, [r5, #4]!
     e62:	bl	810 <Led::tick()>
    _knobs[i]->tick();
     e66:	ldr.w	r0, [r6, #4]!
     e6a:	bl	c74 <Knob::tick()>
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
};

void Controller::tick() {
  for (size_t i = 0; i < 6; i++) {
     e6e:	cmp	r4, r7
     e70:	bne.n	e56 <Controller::tick()+0xe>
    _buttons[i]->tick();
    _leds[i]->tick();
    _knobs[i]->tick();
  }
}
     e72:	pop	{r3, r4, r5, r6, r7, pc}

00000e74 <Controller::toggleMode()>:

void Controller::toggleMode () {
     e74:	push	{r3, r4, r5, lr}
  if (_currentMode == PITCH) {
     e76:	ldrb.w	r3, [r0, #49]	; 0x31
    _leds[i]->tick();
    _knobs[i]->tick();
  }
}

void Controller::toggleMode () {
     e7a:	mov	r4, r0
  if (_currentMode == PITCH) {
     e7c:	cbz	r3, e88 <Controller::toggleMode()+0x14>
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
     e7e:	cmp	r3, #1
     e80:	beq.n	ed0 <Controller::toggleMode()+0x5c>
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
     e82:	cmp	r3, #2
     e84:	beq.n	eaa <Controller::toggleMode()+0x36>
     e86:	pop	{r3, r4, r5, pc}
  }
}

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
     e88:	movs	r3, #1
     e8a:	strb.w	r3, [r0, #49]	; 0x31
     e8e:	movs	r1, #8
     e90:	ldr	r0, [pc, #100]	; (ef8 <Controller::toggleMode()+0x84>)
     e92:	bl	ff4 <usb_serial_write>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     e96:	ldr	r0, [pc, #100]	; (efc <Controller::toggleMode()+0x88>)
     e98:	bl	2bb4 <Print::println()>
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
     e9c:	ldr	r0, [r4, #68]	; 0x44
     e9e:	movw	r1, #999	; 0x3e7
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};
     ea2:	ldmia.w	sp!, {r3, r4, r5, lr}

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
     ea6:	b.w	794 <Led::blink(int)>
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
     eaa:	movs	r5, #0
     eac:	strb.w	r5, [r0, #49]	; 0x31
     eb0:	movs	r1, #5
     eb2:	ldr	r0, [pc, #76]	; (f00 <Controller::toggleMode()+0x8c>)
     eb4:	bl	ff4 <usb_serial_write>
     eb8:	ldr	r0, [pc, #64]	; (efc <Controller::toggleMode()+0x88>)
     eba:	bl	2bb4 <Print::println()>
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
     ebe:	ldr	r0, [r4, #68]	; 0x44
     ec0:	mov	r1, r5
     ec2:	bl	794 <Led::blink(int)>
    _leds[4]->on();
     ec6:	ldr	r0, [r4, #68]	; 0x44
  }
};
     ec8:	ldmia.w	sp!, {r3, r4, r5, lr}
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
     ecc:	b.w	800 <Led::on()>
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
     ed0:	movs	r3, #2
     ed2:	strb.w	r3, [r0, #49]	; 0x31
     ed6:	movs	r1, #10
     ed8:	ldr	r0, [pc, #40]	; (f04 <Controller::toggleMode()+0x90>)
     eda:	bl	ff4 <usb_serial_write>
     ede:	ldr	r0, [pc, #28]	; (efc <Controller::toggleMode()+0x88>)
     ee0:	bl	2bb4 <Print::println()>
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
     ee4:	ldr	r0, [r4, #68]	; 0x44
     ee6:	movs	r1, #0
     ee8:	bl	794 <Led::blink(int)>
    _leds[4]->off();
     eec:	ldr	r0, [r4, #68]	; 0x44
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};
     eee:	ldmia.w	sp!, {r3, r4, r5, lr}
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
     ef2:	b.w	7f4 <Led::off()>
     ef6:	nop
     ef8:	.word	0x00004a88
     efc:	.word	0x1fff0c48
     f00:	.word	0x00004aa0
     f04:	.word	0x00004a94

00000f08 <Controller::enterShiftMode()>:
    _leds[4]->on();
  }
};

void Controller::enterShiftMode () {
  _shiftMode = true;
     f08:	movs	r3, #1
     f0a:	strb.w	r3, [r0, #48]	; 0x30
     f0e:	bx	lr

00000f10 <Controller::exitShiftMode()>:
};

void Controller::exitShiftMode () {
  _shiftMode = false;
     f10:	movs	r3, #0
     f12:	strb.w	r3, [r0, #48]	; 0x30
     f16:	bx	lr

00000f18 <Controller::getShiftMode()>:
};

bool Controller::getShiftMode () {
  return _shiftMode;
};
     f18:	ldrb.w	r0, [r0, #48]	; 0x30
     f1c:	bx	lr
     f1e:	nop

00000f20 <Controller::getMode()>:

Modes Controller::getMode() {
  return _currentMode;
};
     f20:	ldrb.w	r0, [r0, #49]	; 0x31
     f24:	bx	lr
     f26:	nop

00000f28 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
     f28:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
     f2a:	ldr	r5, [pc, #60]	; (f68 <usb_serial_getchar+0x40>)
     f2c:	ldr	r0, [r5, #0]
     f2e:	cbz	r0, f50 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
     f30:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
     f32:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
     f34:	adds	r1, r0, r3
     f36:	adds	r3, #1
	if (i >= rx_packet->len) {
     f38:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
     f3a:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
     f3c:	bcs.n	f44 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
     f3e:	strh	r3, [r0, #2]
	}
	return c;
     f40:	mov	r0, r4
}
     f42:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
     f44:	bl	1dd4 <usb_free>
		rx_packet = NULL;
     f48:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
     f4a:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
     f4c:	str	r3, [r5, #0]
     f4e:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
     f50:	ldr	r3, [pc, #24]	; (f6c <usb_serial_getchar+0x44>)
     f52:	ldrb	r3, [r3, #0]
     f54:	cbz	r3, f62 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
     f56:	movs	r0, #2
     f58:	bl	1e20 <usb_rx>
     f5c:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
     f5e:	cmp	r0, #0
     f60:	bne.n	f30 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
     f62:	mov.w	r0, #4294967295
     f66:	pop	{r3, r4, r5, pc}
     f68:	.word	0x1fff15c0
     f6c:	.word	0x1fff1720

00000f70 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
     f70:	push	{r4, lr}
	if (!rx_packet) {
     f72:	ldr	r4, [pc, #36]	; (f98 <usb_serial_peekchar+0x28>)
     f74:	ldr	r0, [r4, #0]
     f76:	cbz	r0, f80 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
     f78:	ldrh	r3, [r0, #2]
     f7a:	add	r0, r3
     f7c:	ldrb	r0, [r0, #8]
}
     f7e:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
     f80:	ldr	r3, [pc, #24]	; (f9c <usb_serial_peekchar+0x2c>)
     f82:	ldrb	r3, [r3, #0]
     f84:	cbz	r3, f92 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
     f86:	movs	r0, #2
     f88:	bl	1e20 <usb_rx>
     f8c:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
     f8e:	cmp	r0, #0
     f90:	bne.n	f78 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
     f92:	mov.w	r0, #4294967295
     f96:	pop	{r4, pc}
     f98:	.word	0x1fff15c0
     f9c:	.word	0x1fff1720

00000fa0 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
     fa0:	ldr	r3, [pc, #16]	; (fb4 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
     fa2:	ldr	r2, [pc, #20]	; (fb8 <usb_serial_available+0x18>)
     fa4:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
     fa6:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
     fa8:	cbz	r3, fb2 <usb_serial_available+0x12>
     faa:	ldrh	r2, [r3, #0]
     fac:	ldrh	r3, [r3, #2]
     fae:	subs	r3, r2, r3
     fb0:	add	r0, r3
	return count;
}
     fb2:	bx	lr
     fb4:	.word	0x1fff15c0
     fb8:	.word	0x1fff1bb4

00000fbc <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
     fbc:	ldr	r3, [pc, #44]	; (fec <usb_serial_flush_input+0x30>)
     fbe:	ldrb	r3, [r3, #0]
     fc0:	cbz	r3, fea <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
     fc2:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
     fc4:	ldr	r4, [pc, #40]	; (ff0 <usb_serial_flush_input+0x34>)
     fc6:	ldr	r0, [r4, #0]
     fc8:	cbz	r0, fde <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
     fca:	bl	1dd4 <usb_free>
		rx_packet = NULL;
     fce:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     fd0:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
     fd2:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     fd4:	bl	1e20 <usb_rx>
		if (!rx) break;
     fd8:	cbz	r0, fe8 <usb_serial_flush_input+0x2c>
		usb_free(rx);
     fda:	bl	1dd4 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
     fde:	movs	r0, #2
     fe0:	bl	1e20 <usb_rx>
		if (!rx) break;
     fe4:	cmp	r0, #0
     fe6:	bne.n	fda <usb_serial_flush_input+0x1e>
     fe8:	pop	{r4, pc}
     fea:	bx	lr
     fec:	.word	0x1fff1720
     ff0:	.word	0x1fff15c0

00000ff4 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
     ff4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
     ff8:	ldr.w	r9, [pc, #248]	; 10f4 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
     ffc:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
     ffe:	movs	r2, #1
    1000:	strb.w	r2, [r9]
	while (size > 0) {
    1004:	str	r1, [sp, #4]
    1006:	cbz	r1, 1064 <usb_serial_write+0x70>
    1008:	ldr.w	r8, [pc, #236]	; 10f8 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    100c:	ldr	r7, [pc, #212]	; (10e4 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    100e:	ldr	r6, [sp, #4]
    1010:	mov	fp, r0
		if (!tx_packet) {
    1012:	ldr.w	r0, [r8]
    1016:	cbz	r0, 1086 <usb_serial_write+0x92>
    1018:	ldr	r5, [pc, #204]	; (10e8 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    101a:	ldrh	r4, [r0, #2]
    101c:	rsb	r1, r4, #64	; 0x40
    1020:	cmp	r1, r6
    1022:	it	cs
    1024:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1026:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    102a:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    102c:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1030:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1032:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1034:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1038:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    103c:	cbz	r1, 1054 <usb_serial_write+0x60>
    103e:	subs	r4, #1
    1040:	add	r2, r4
    1042:	add	r1, fp
    1044:	ldrb.w	r4, [fp], #1
    1048:	strb.w	r4, [r2, #1]!
    104c:	cmp	fp, r1
    104e:	bne.n	1044 <usb_serial_write+0x50>
    1050:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1054:	cmp.w	lr, #63	; 0x3f
    1058:	bhi.n	1072 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    105a:	ldr	r2, [pc, #144]	; (10ec <usb_serial_write+0xf8>)
    105c:	movs	r1, #5
    105e:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1060:	cmp	r6, #0
    1062:	bne.n	1012 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1064:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    1066:	movs	r3, #0
    1068:	strb.w	r3, [r9]
	return ret;
}
    106c:	add	sp, #12
    106e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1072:	movs	r2, #64	; 0x40
    1074:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1076:	mov	r1, r0
    1078:	movs	r0, #3
    107a:	bl	1f70 <usb_tx>
			tx_packet = NULL;
    107e:	movs	r2, #0
    1080:	str.w	r2, [r8]
    1084:	b.n	105a <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1086:	ldrb	r2, [r7, #0]
    1088:	cbz	r2, 10d4 <usb_serial_write+0xe0>
    108a:	ldr	r4, [pc, #100]	; (10f0 <usb_serial_write+0xfc>)
    108c:	ldr	r5, [pc, #88]	; (10e8 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    108e:	mov.w	sl, #1
    1092:	b.n	10a4 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1094:	subs	r4, #1
    1096:	beq.n	10c6 <usb_serial_write+0xd2>
    1098:	ldrb	r2, [r5, #0]
    109a:	cbnz	r2, 10c6 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    109c:	bl	2a74 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    10a0:	ldrb	r2, [r7, #0]
    10a2:	cbz	r2, 10d4 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    10a4:	movs	r0, #3
    10a6:	bl	1e5c <usb_tx_packet_count>
    10aa:	cmp	r0, #7
    10ac:	bhi.n	1094 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    10ae:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    10b2:	bl	1d94 <usb_malloc>
    10b6:	str.w	r0, [r8]
					if (tx_packet) break;
    10ba:	cmp	r0, #0
    10bc:	bne.n	101a <usb_serial_write+0x26>
					tx_noautoflush = 0;
    10be:	ldr	r3, [pc, #52]	; (10f4 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    10c0:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    10c2:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    10c4:	bne.n	1098 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    10c6:	movs	r3, #1
					return -1;
    10c8:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    10cc:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    10ce:	add	sp, #12
    10d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    10d4:	movs	r3, #0
					return -1;
    10d6:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    10da:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    10de:	add	sp, #12
    10e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10e4:	.word	0x1fff1720
    10e8:	.word	0x1fff15bc
    10ec:	.word	0x1fff15b4
    10f0:	.word	0x00014821
    10f4:	.word	0x1fff15b5
    10f8:	.word	0x1fff15b8

000010fc <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    10fc:	push	{lr}
    10fe:	sub	sp, #12
    1100:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    1102:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1104:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    1108:	mov	r0, r3
    110a:	bl	ff4 <usb_serial_write>
}
    110e:	add	sp, #12
    1110:	ldr.w	pc, [sp], #4

00001114 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    1114:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1116:	ldr	r5, [pc, #56]	; (1150 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1118:	ldr	r4, [pc, #56]	; (1154 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    111a:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    111c:	movs	r3, #1
    111e:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1120:	cbz	r0, 112e <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1122:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1124:	movs	r3, #0
    1126:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1128:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    112c:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    112e:	ldr	r3, [pc, #40]	; (1158 <usb_serial_write_buffer_free+0x44>)
    1130:	ldrb	r3, [r3, #0]
    1132:	cbnz	r3, 113a <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    1134:	movs	r0, #0
    1136:	strb	r0, [r4, #0]
			return 0;
    1138:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    113a:	movs	r0, #3
    113c:	bl	1e5c <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1140:	cmp	r0, #7
    1142:	bhi.n	1134 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    1144:	bl	1d94 <usb_malloc>
    1148:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    114a:	cmp	r0, #0
    114c:	bne.n	1122 <usb_serial_write_buffer_free+0xe>
    114e:	b.n	1134 <usb_serial_write_buffer_free+0x20>
    1150:	.word	0x1fff15b8
    1154:	.word	0x1fff15b5
    1158:	.word	0x1fff1720

0000115c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    115c:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    115e:	ldr	r3, [pc, #68]	; (11a4 <usb_serial_flush_output+0x48>)
    1160:	ldrb	r3, [r3, #0]
    1162:	cbz	r3, 1188 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    1164:	ldr	r6, [pc, #64]	; (11a8 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1166:	ldr	r5, [pc, #68]	; (11ac <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    1168:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    116a:	movs	r7, #1
    116c:	strb	r7, [r5, #0]
	if (tx_packet) {
    116e:	cbz	r4, 118a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1170:	ldr	r2, [pc, #60]	; (11b0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    1172:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    1174:	movs	r7, #0
    1176:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1178:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    117a:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    117c:	movs	r0, #3
    117e:	bl	1f70 <usb_tx>
		tx_packet = NULL;
    1182:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    1184:	movs	r3, #0
    1186:	strb	r3, [r5, #0]
    1188:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    118a:	bl	1d94 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    118e:	ldr	r3, [pc, #32]	; (11b0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1190:	cbz	r0, 119e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    1192:	mov	r1, r0
    1194:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1196:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    1198:	bl	1f70 <usb_tx>
    119c:	b.n	1184 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    119e:	strb	r7, [r3, #0]
    11a0:	b.n	1184 <usb_serial_flush_output+0x28>
    11a2:	nop
    11a4:	.word	0x1fff1720
    11a8:	.word	0x1fff15b8
    11ac:	.word	0x1fff15b5
    11b0:	.word	0x1fff15b4

000011b4 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    11b4:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    11b6:	ldr	r3, [pc, #56]	; (11f0 <usb_serial_flush_callback+0x3c>)
    11b8:	ldrb	r3, [r3, #0]
    11ba:	cbnz	r3, 11da <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    11bc:	ldr	r4, [pc, #52]	; (11f4 <usb_serial_flush_callback+0x40>)
    11be:	ldr	r1, [r4, #0]
    11c0:	cbz	r1, 11dc <usb_serial_flush_callback+0x28>
    11c2:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    11c6:	ldrh	r3, [r1, #2]
    11c8:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    11ca:	movs	r0, #3
    11cc:	bl	1f70 <usb_tx>
		tx_packet = NULL;
    11d0:	str	r5, [r4, #0]
    11d2:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    11d4:	ldr	r3, [pc, #32]	; (11f8 <usb_serial_flush_callback+0x44>)
    11d6:	movs	r2, #1
    11d8:	strb	r2, [r3, #0]
    11da:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    11dc:	bl	1d94 <usb_malloc>
		if (tx) {
    11e0:	cmp	r0, #0
    11e2:	beq.n	11d4 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    11e4:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    11e6:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    11ea:	movs	r0, #3
    11ec:	b.w	1f70 <usb_tx>
    11f0:	.word	0x1fff15b5
    11f4:	.word	0x1fff15b8
    11f8:	.word	0x1fff15b4

000011fc <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    11fc:	ldr	r2, [pc, #220]	; (12dc <wait_for_cal+0xe0>)
    11fe:	ldr	r1, [pc, #224]	; (12e0 <wait_for_cal+0xe4>)
    1200:	ldr	r3, [r2, #0]
    1202:	lsls	r3, r3, #24
    1204:	bmi.n	1200 <wait_for_cal+0x4>
    1206:	ldr	r3, [r1, #0]
    1208:	ands.w	r3, r3, #128	; 0x80
    120c:	bne.n	1200 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    120e:	cpsid	i
	if (calibrating) {
    1210:	ldr	r1, [pc, #208]	; (12e4 <wait_for_cal+0xe8>)
    1212:	ldrb	r2, [r1, #0]
    1214:	cmp	r2, #0
    1216:	beq.n	12d8 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1218:	ldr	r2, [pc, #204]	; (12e8 <wait_for_cal+0xec>)
    121a:	ldr	r0, [pc, #208]	; (12ec <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    121c:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    121e:	ldr	r4, [pc, #208]	; (12f0 <wait_for_cal+0xf4>)
    1220:	ldr	r7, [r2, #0]
    1222:	ldr	r6, [r0, #0]
    1224:	ldr	r5, [r4, #0]
    1226:	ldr	r4, [r2, #12]
    1228:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    122a:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    122c:	adds	r2, #20
    122e:	ldr	r0, [r0, #0]
    1230:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1232:	ldr	r7, [pc, #192]	; (12f4 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1234:	add	r5, r6
    1236:	add	r4, r5
    1238:	add	r0, r4
    123a:	add	r2, r0
    123c:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1240:	ldr	r6, [pc, #180]	; (12f8 <wait_for_cal+0xfc>)
    1242:	ldr	r0, [pc, #184]	; (12fc <wait_for_cal+0x100>)
    1244:	ldr	r5, [pc, #184]	; (1300 <wait_for_cal+0x104>)
    1246:	ldr	r4, [pc, #188]	; (1304 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1248:	orr.w	r2, r2, #32768	; 0x8000
    124c:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    124e:	ldr	r7, [r6, #0]
    1250:	ldr	r6, [r0, #0]
    1252:	ldr	r5, [r5, #0]
    1254:	ldr	r2, [pc, #176]	; (1308 <wait_for_cal+0x10c>)
    1256:	ldr	r4, [r4, #0]
    1258:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    125a:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    125c:	ldr	r0, [r0, #0]
    125e:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1260:	ldr	r7, [pc, #168]	; (130c <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    1262:	add	r5, r6
    1264:	add	r4, r5
    1266:	add	r0, r4
    1268:	add	r2, r0
    126a:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    126e:	ldr	r6, [pc, #160]	; (1310 <wait_for_cal+0x114>)
    1270:	ldr	r0, [pc, #160]	; (1314 <wait_for_cal+0x118>)
    1272:	ldr	r5, [pc, #164]	; (1318 <wait_for_cal+0x11c>)
    1274:	ldr	r4, [pc, #164]	; (131c <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1276:	orr.w	r2, r2, #32768	; 0x8000
    127a:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    127c:	ldr	r7, [r6, #0]
    127e:	ldr	r6, [r0, #0]
    1280:	ldr	r5, [r5, #0]
    1282:	ldr	r2, [pc, #156]	; (1320 <wait_for_cal+0x124>)
    1284:	ldr	r4, [r4, #0]
    1286:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1288:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    128a:	ldr	r0, [r0, #0]
    128c:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    128e:	ldr	r7, [pc, #148]	; (1324 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1290:	add	r5, r6
    1292:	add	r4, r5
    1294:	add	r0, r4
    1296:	add	r2, r0
    1298:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    129c:	ldr	r6, [pc, #136]	; (1328 <wait_for_cal+0x12c>)
    129e:	ldr	r0, [pc, #140]	; (132c <wait_for_cal+0x130>)
    12a0:	ldr	r5, [pc, #140]	; (1330 <wait_for_cal+0x134>)
    12a2:	ldr	r4, [pc, #144]	; (1334 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    12a4:	orr.w	r2, r2, #32768	; 0x8000
    12a8:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    12aa:	ldr	r7, [r6, #0]
    12ac:	ldr	r6, [r0, #0]
    12ae:	ldr	r5, [r5, #0]
    12b0:	ldr	r2, [pc, #132]	; (1338 <wait_for_cal+0x13c>)
    12b2:	ldr	r4, [r4, #0]
    12b4:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    12b6:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    12b8:	ldr	r0, [r0, #0]
    12ba:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    12bc:	add	r5, r6
    12be:	add	r4, r5
    12c0:	add	r0, r4
    12c2:	add	r2, r0
    12c4:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    12c8:	ldr	r0, [pc, #112]	; (133c <wait_for_cal+0x140>)
    12ca:	orr.w	r2, r2, #32768	; 0x8000
    12ce:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    12d0:	strb	r3, [r1, #0]
	}
	__enable_irq();
    12d2:	cpsie	i
}
    12d4:	pop	{r4, r5, r6, r7}
    12d6:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    12d8:	cpsie	i
    12da:	bx	lr
    12dc:	.word	0x4003b024
    12e0:	.word	0x400bb024
    12e4:	.word	0x1fff15c6
    12e8:	.word	0x4003b038
    12ec:	.word	0x4003b03c
    12f0:	.word	0x4003b040
    12f4:	.word	0x4003b02c
    12f8:	.word	0x4003b058
    12fc:	.word	0x4003b05c
    1300:	.word	0x4003b060
    1304:	.word	0x4003b064
    1308:	.word	0x4003b06c
    130c:	.word	0x4003b030
    1310:	.word	0x400bb038
    1314:	.word	0x400bb03c
    1318:	.word	0x400bb040
    131c:	.word	0x400bb044
    1320:	.word	0x400bb04c
    1324:	.word	0x400bb02c
    1328:	.word	0x400bb058
    132c:	.word	0x400bb05c
    1330:	.word	0x400bb060
    1334:	.word	0x400bb064
    1338:	.word	0x400bb06c
    133c:	.word	0x400bb030

00001340 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1340:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1342:	ldr	r0, [pc, #164]	; (13e8 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1344:	ldr	r2, [pc, #164]	; (13ec <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    1346:	ldr	r3, [pc, #168]	; (13f0 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1348:	ldr	r5, [pc, #168]	; (13f4 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    134a:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    134c:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    134e:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1350:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    1352:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1354:	ldr	r4, [pc, #160]	; (13f8 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    1356:	cmp	r3, #8
    1358:	beq.n	13bc <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    135a:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    135c:	ldr	r0, [pc, #156]	; (13fc <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    135e:	ldr	r1, [pc, #160]	; (1400 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1360:	beq.n	13d2 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    1362:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    1364:	ite	eq
    1366:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1368:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    136a:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    136c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    136e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1370:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1372:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1374:	ldr	r3, [pc, #140]	; (1404 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1376:	ldr	r1, [pc, #144]	; (1408 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1378:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    137a:	ldr	r2, [pc, #144]	; (140c <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    137c:	cbz	r3, 13ae <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    137e:	movs	r3, #1
    1380:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1382:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1384:	ldr	r3, [pc, #136]	; (1410 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1386:	ldr	r1, [pc, #140]	; (1414 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1388:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    138a:	ldr	r2, [pc, #140]	; (1418 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    138c:	cmp	r3, #1
    138e:	bls.n	13de <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    1390:	cmp	r3, #4
    1392:	bls.n	13b4 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    1394:	cmp	r3, #8
    1396:	bls.n	13d6 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    1398:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    139a:	ite	ls
    139c:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    139e:	movhi	r3, #135	; 0x87
    13a0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    13a2:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    13a4:	ldr	r3, [pc, #116]	; (141c <analog_init+0xdc>)
    13a6:	movs	r2, #1
    13a8:	strb	r2, [r3, #0]
}
    13aa:	pop	{r4, r5}
    13ac:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    13ae:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    13b0:	str	r3, [r2, #0]
    13b2:	b.n	1384 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    13b4:	movs	r3, #132	; 0x84
    13b6:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    13b8:	str	r3, [r2, #0]
    13ba:	b.n	13a4 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    13bc:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    13c0:	ldr	r1, [pc, #60]	; (1400 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    13c2:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    13c4:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    13c6:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    13c8:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    13ca:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    13cc:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    13ce:	str	r3, [r1, #0]
    13d0:	b.n	1374 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    13d2:	movs	r2, #57	; 0x39
    13d4:	b.n	13c6 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    13d6:	movs	r3, #133	; 0x85
    13d8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    13da:	str	r3, [r2, #0]
    13dc:	b.n	13a4 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    13de:	movs	r3, #128	; 0x80
    13e0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    13e2:	str	r3, [r2, #0]
    13e4:	b.n	13a4 <analog_init+0x64>
    13e6:	nop
    13e8:	.word	0x40074000
    13ec:	.word	0x40074001
    13f0:	.word	0x1fff0c40
    13f4:	.word	0x4003b008
    13f8:	.word	0x4003b00c
    13fc:	.word	0x400bb008
    1400:	.word	0x400bb00c
    1404:	.word	0x1fff15c9
    1408:	.word	0x4003b020
    140c:	.word	0x400bb020
    1410:	.word	0x1fff0c41
    1414:	.word	0x4003b024
    1418:	.word	0x400bb024
    141c:	.word	0x1fff15c6

00001420 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1420:	cmp	r0, #71	; 0x47
    1422:	bhi.n	1484 <analogRead+0x64>
	channel = pin2sc1a[pin];
    1424:	ldr	r3, [pc, #204]	; (14f4 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    1426:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    142a:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    142c:	cmp	r6, #255	; 0xff
    142e:	beq.n	1488 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1430:	ldr	r3, [pc, #196]	; (14f8 <analogRead+0xd8>)
    1432:	ldrb	r3, [r3, #0]
    1434:	cmp	r3, #0
    1436:	bne.n	148e <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1438:	lsls	r2, r6, #24
    143a:	bmi.n	1496 <analogRead+0x76>
#endif

	__disable_irq();
    143c:	cpsid	i
    143e:	ldr	r5, [pc, #188]	; (14fc <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1440:	ldr	r4, [pc, #188]	; (1500 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    1442:	mov	r7, r5
    1444:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1446:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    1448:	strb	r3, [r5, #0]
	__enable_irq();
    144a:	cpsie	i
	while (1) {
		__disable_irq();
    144c:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    144e:	ldr	r3, [r4, #0]
    1450:	lsls	r3, r3, #24
    1452:	bmi.n	146e <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    1454:	ldrb	r3, [r7, #0]
    1456:	cbnz	r3, 1460 <analogRead+0x40>
    1458:	b.n	1444 <analogRead+0x24>
    145a:	ldrb	r3, [r5, #0]
    145c:	cmp	r3, #0
    145e:	beq.n	1444 <analogRead+0x24>
		__enable_irq();
    1460:	cpsie	i
		yield();
    1462:	bl	2a74 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    1466:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1468:	ldr	r3, [r4, #0]
    146a:	lsls	r0, r3, #24
    146c:	bpl.n	145a <analogRead+0x3a>
			result = ADC0_RA;
    146e:	ldr	r3, [pc, #148]	; (1504 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    1470:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    1472:	movs	r2, #0
    1474:	strb	r2, [r5, #0]
			__enable_irq();
    1476:	cpsie	i
			result >>= analog_right_shift;
    1478:	ldr	r2, [pc, #140]	; (1508 <analogRead+0xe8>)
    147a:	ldrb	r0, [r2, #0]
    147c:	asr.w	r0, r3, r0
			return result;
    1480:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1484:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    1486:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1488:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    148a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    148e:	bl	11fc <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1492:	lsls	r2, r6, #24
    1494:	bpl.n	143c <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    1496:	cpsid	i
    1498:	ldr	r5, [pc, #112]	; (150c <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    149a:	ldr.w	r8, [pc, #124]	; 1518 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    149e:	ldr	r4, [pc, #112]	; (1510 <analogRead+0xf0>)
    14a0:	and.w	r7, r6, #64	; 0x40
    14a4:	uxtb	r7, r7
    14a6:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    14aa:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    14ae:	cbz	r7, 14e8 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    14b0:	bic.w	r3, r3, #16
    14b4:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    14b8:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    14ba:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    14bc:	ldr	r2, [pc, #76]	; (150c <analogRead+0xec>)
    14be:	strb	r3, [r5, #0]
	__enable_irq();
    14c0:	cpsie	i
	while (1) {
		__disable_irq();
    14c2:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    14c4:	ldr	r3, [r4, #0]
    14c6:	lsls	r1, r3, #24
    14c8:	bmi.n	14e4 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    14ca:	ldrb	r3, [r2, #0]
    14cc:	cbnz	r3, 14d6 <analogRead+0xb6>
    14ce:	b.n	14aa <analogRead+0x8a>
    14d0:	ldrb	r3, [r5, #0]
    14d2:	cmp	r3, #0
    14d4:	beq.n	14aa <analogRead+0x8a>
		__enable_irq();
    14d6:	cpsie	i
		yield();
    14d8:	bl	2a74 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    14dc:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    14de:	ldr	r3, [r4, #0]
    14e0:	lsls	r3, r3, #24
    14e2:	bpl.n	14d0 <analogRead+0xb0>
			result = ADC1_RA;
    14e4:	ldr	r3, [pc, #44]	; (1514 <analogRead+0xf4>)
    14e6:	b.n	1470 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    14e8:	orr.w	r3, r3, #16
    14ec:	str.w	r3, [r8]
    14f0:	b.n	14b8 <analogRead+0x98>
    14f2:	nop
    14f4:	.word	0x00004aa8
    14f8:	.word	0x1fff15c6
    14fc:	.word	0x1fff15c8
    1500:	.word	0x4003b000
    1504:	.word	0x4003b010
    1508:	.word	0x1fff15c5
    150c:	.word	0x1fff15c7
    1510:	.word	0x400bb000
    1514:	.word	0x400bb010
    1518:	.word	0x400bb00c

0000151c <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    151c:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    151e:	ldr	r3, [pc, #68]	; (1564 <digitalWrite.part.1+0x48>)
    1520:	ldr.w	r2, [r3, r0, lsl #3]
    1524:	ldrb.w	r4, [r2, #640]	; 0x280
    1528:	cbz	r4, 1538 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    152a:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    152c:	cbz	r1, 154e <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    152e:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1532:	ldr.w	r4, [sp], #4
    1536:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    1538:	add.w	r3, r3, r0, lsl #3
    153c:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    153e:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    1540:	cbnz	r1, 1558 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    1542:	bic.w	r2, r2, #2
    1546:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1548:	ldr.w	r4, [sp], #4
    154c:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    154e:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1552:	ldr.w	r4, [sp], #4
    1556:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1558:	orr.w	r2, r2, #3
    155c:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    155e:	ldr.w	r4, [sp], #4
    1562:	bx	lr
    1564:	.word	0x00004af0

00001568 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1568:	ldr	r2, [pc, #112]	; (15dc <pinMode.part.2+0x74>)
    156a:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    156e:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1570:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1572:	beq.n	1598 <pinMode.part.2+0x30>
    1574:	cmp	r1, #4
    1576:	beq.n	15b0 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    1578:	ldr.w	r0, [r2, r0, lsl #3]
    157c:	movs	r2, #0
    157e:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    1582:	cbz	r1, 1590 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    1584:	cmp	r1, #2
    1586:	beq.n	15ca <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    1588:	cmp	r1, #3
    158a:	beq.n	15d2 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    158c:	str	r2, [r3, #0]
    158e:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    1590:	mov.w	r2, #256	; 0x100
    1594:	str	r2, [r3, #0]
    1596:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1598:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    159c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    15a0:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    15a4:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    15a6:	ldr	r2, [r3, #0]
    15a8:	bic.w	r2, r2, #32
    15ac:	str	r2, [r3, #0]
    15ae:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    15b0:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    15b4:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    15b8:	movs	r0, #1
    15ba:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    15be:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    15c0:	ldr	r2, [r3, #0]
    15c2:	orr.w	r2, r2, #32
    15c6:	str	r2, [r3, #0]
    15c8:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    15ca:	movw	r2, #259	; 0x103
    15ce:	str	r2, [r3, #0]
    15d0:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    15d2:	mov.w	r2, #258	; 0x102
    15d6:	str	r2, [r3, #0]
    15d8:	bx	lr
    15da:	nop
    15dc:	.word	0x00004af0

000015e0 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    15e0:	push	{r4, r5}
	RTC_SR = 0;
    15e2:	ldr	r3, [pc, #20]	; (15f8 <rtc_set+0x18>)
	RTC_TPR = 0;
    15e4:	ldr	r5, [pc, #20]	; (15fc <rtc_set+0x1c>)
	RTC_TSR = t;
    15e6:	ldr	r4, [pc, #24]	; (1600 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    15e8:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    15ea:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    15ec:	str	r2, [r3, #0]
	RTC_TPR = 0;
    15ee:	str	r2, [r5, #0]
	RTC_TSR = t;
    15f0:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    15f2:	str	r1, [r3, #0]
}
    15f4:	pop	{r4, r5}
    15f6:	bx	lr
    15f8:	.word	0x4003d014
    15fc:	.word	0x4003d004
    1600:	.word	0x4003d000

00001604 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    1604:	cmp	r0, #63	; 0x3f
    1606:	bhi.n	160c <digitalWrite+0x8>
    1608:	b.w	151c <digitalWrite.part.1>
    160c:	bx	lr
    160e:	nop

00001610 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1610:	cmp	r0, #63	; 0x3f
    1612:	bhi.n	1622 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    1614:	ldr	r3, [pc, #16]	; (1628 <digitalRead+0x18>)
    1616:	ldr.w	r3, [r3, r0, lsl #3]
    161a:	ldrb.w	r0, [r3, #512]	; 0x200
    161e:	uxtb	r0, r0
    1620:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1622:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    1624:	bx	lr
    1626:	nop
    1628:	.word	0x00004af0

0000162c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    162c:	cmp	r0, #63	; 0x3f
    162e:	bhi.n	1634 <pinMode+0x8>
    1630:	b.w	1568 <pinMode.part.2>
    1634:	bx	lr
    1636:	nop

00001638 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    1638:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    163c:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    163e:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    1640:	ldr	r7, [pc, #136]	; (16cc <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1642:	ldr	r3, [pc, #140]	; (16d0 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1644:	ldr	r2, [pc, #140]	; (16d4 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1646:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    1648:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    164a:	ldr	r2, [r2, #0]
	__enable_irq();
    164c:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    164e:	lsls	r2, r2, #5
    1650:	bpl.n	1658 <delay+0x20>
    1652:	cmp	r3, #50	; 0x32
    1654:	it	hi
    1656:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    1658:	cbz	r5, 16c8 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    165a:	rsb	r3, r3, #179200	; 0x2bc00
    165e:	addw	r3, r3, #799	; 0x31f
    1662:	ldr	r6, [pc, #116]	; (16d8 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1664:	ldr.w	r9, [pc, #104]	; 16d0 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1668:	ldr.w	r8, [pc, #104]	; 16d4 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    166c:	lsrs	r3, r3, #2
    166e:	mov.w	r2, #1000	; 0x3e8
    1672:	umull	r1, r3, r6, r3
    1676:	mul.w	r4, r2, r4
    167a:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    167e:	cpsid	i
	current = SYST_CVR;
    1680:	ldr.w	r1, [r9]
	count = systick_millis_count;
    1684:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1686:	ldr.w	lr, [r8]
	__enable_irq();
    168a:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    168c:	rsb	r3, r1, #179200	; 0x2bc00
    1690:	addw	r3, r3, #799	; 0x31f
    1694:	lsrs	r3, r3, #2
    1696:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    169a:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    169e:	rsb	r3, r4, r3, lsr #2
    16a2:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    16a6:	beq.n	16ae <delay+0x76>
    16a8:	cmp	r1, #50	; 0x32
    16aa:	it	hi
    16ac:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    16ae:	mla	r3, r0, r2, r3
    16b2:	cmp.w	r3, #1000	; 0x3e8
    16b6:	bcc.n	16c2 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    16b8:	subs	r5, #1
    16ba:	beq.n	16c8 <delay+0x90>
				start += 1000;
    16bc:	add.w	r4, r4, #1000	; 0x3e8
    16c0:	b.n	167e <delay+0x46>
			}
			yield();
    16c2:	bl	2a74 <yield>
		}
    16c6:	b.n	167e <delay+0x46>
    16c8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    16cc:	.word	0x1fff15cc
    16d0:	.word	0xe000e018
    16d4:	.word	0xe000ed04
    16d8:	.word	0x16c16c17

000016dc <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    16dc:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    16de:	ldr	r3, [pc, #312]	; (1818 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    16e0:	ldr	r0, [pc, #312]	; (181c <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    16e2:	ldr.w	ip, [pc, #348]	; 1840 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    16e6:	ldr	r4, [pc, #312]	; (1820 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    16e8:	ldr	r1, [pc, #312]	; (1824 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    16ea:	ldr.w	lr, [pc, #344]	; 1844 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    16ee:	ldr	r6, [pc, #312]	; (1828 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    16f0:	ldr	r5, [pc, #312]	; (182c <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    16f2:	ldr	r7, [pc, #316]	; (1830 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    16f4:	mov.w	r2, #134217728	; 0x8000000
    16f8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    16fa:	mov.w	r2, #268435456	; 0x10000000
    16fe:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    1700:	mov.w	r2, #536870912	; 0x20000000
    1704:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    1706:	mov.w	r2, #1073741824	; 0x40000000
    170a:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    170c:	mov.w	r2, #2147483648	; 0x80000000
    1710:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1712:	movs	r2, #0
    1714:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1716:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    1718:	movw	r0, #61439	; 0xefff
    171c:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1720:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    1724:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    1726:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    172a:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    172c:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    172e:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1730:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    1734:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    1736:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    173a:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    173c:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    1740:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1742:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    1746:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    174a:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    174e:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1752:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    1756:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    1758:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    175c:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    175e:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    1760:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    1762:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    1766:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    1768:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    176a:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    176c:	ldr	r4, [pc, #196]	; (1834 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    176e:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    1770:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1772:	movs	r1, #9
    1774:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    1776:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    177a:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    177e:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    1780:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    1782:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    1784:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    1786:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    1788:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    178a:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    178e:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    1792:	add.w	r7, r7, #520192	; 0x7f000
    1796:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    1798:	addw	r4, r4, #2044	; 0x7fc
    179c:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    179e:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    17a0:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    17a2:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    17a4:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    17a8:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    17aa:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    17ae:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    17b2:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    17b4:	sub.w	r4, r4, #460800	; 0x70800
    17b8:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    17bc:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    17be:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    17c0:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    17c4:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    17c6:	ldr	r0, [pc, #112]	; (1838 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    17c8:	orr.w	r1, r1, #512	; 0x200
    17cc:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    17ce:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    17d0:	ldr	r4, [pc, #104]	; (183c <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    17d2:	add.w	lr, lr, #65280	; 0xff00
    17d6:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    17da:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    17de:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    17e2:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    17e6:	orr.w	r1, r1, #33554432	; 0x2000000
    17ea:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    17ec:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    17f0:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    17f4:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    17f6:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    17f8:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    17fa:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    17fc:	str	r2, [r4, #0]
#endif
	analog_init();
    17fe:	bl	1340 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    1802:	movs	r0, #25
    1804:	bl	1638 <delay>
	usb_init();
    1808:	bl	29a4 <usb_init>
	delay(275);
    180c:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    1810:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    1814:	b.w	1638 <delay>
    1818:	.word	0xe000e104
    181c:	.word	0x40038004
    1820:	.word	0x40038014
    1824:	.word	0x4003801c
    1828:	.word	0x40038024
    182c:	.word	0x4003802c
    1830:	.word	0x40038034
    1834:	.word	0x40038000
    1838:	.word	0x40048004
    183c:	.word	0x400c9000
    1840:	.word	0x40038008
    1844:	.word	0x4003800c

00001848 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    1848:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    184a:	ldr	r3, [pc, #56]	; (1884 <sysex_byte+0x3c>)
    184c:	ldr	r4, [pc, #56]	; (1888 <sysex_byte+0x40>)
    184e:	ldr	r3, [r3, #0]
    1850:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    1852:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    1854:	cbz	r3, 187a <sysex_byte+0x32>
    1856:	cmp.w	r1, #290	; 0x122
    185a:	bcs.n	1868 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    185c:	ldr	r2, [pc, #44]	; (188c <sysex_byte+0x44>)
    185e:	adds	r3, r1, #1
    1860:	strb	r5, [r2, r1]
    1862:	uxth	r3, r3
    1864:	strh	r3, [r4, #0]
	}
}
    1866:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    1868:	movs	r2, #0
    186a:	ldr	r0, [pc, #32]	; (188c <sysex_byte+0x44>)
    186c:	blx	r3
    186e:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1870:	ldr	r2, [pc, #24]	; (188c <sysex_byte+0x44>)
    1872:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    1874:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1876:	strh	r3, [r4, #0]
	}
}
    1878:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    187a:	cmp.w	r1, #290	; 0x122
    187e:	bcc.n	185c <sysex_byte+0x14>
    1880:	pop	{r3, r4, r5, pc}
    1882:	nop
    1884:	.word	0x1fff15f4
    1888:	.word	0x1fff1a8a
    188c:	.word	0x1fff1a90

00001890 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    1890:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1894:	ldr	r6, [pc, #132]	; (191c <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1896:	ldr	r7, [pc, #136]	; (1920 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    1898:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    189a:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    189c:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    189e:	strb	r3, [r7, #0]
	if (!tx_packet) {
    18a0:	cbz	r1, 18d0 <usb_midi_write_packed+0x40>
    18a2:	ldr	r5, [pc, #128]	; (1924 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    18a4:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    18a6:	add.w	r2, r1, r3, lsl #2
    18aa:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    18ac:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    18ae:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    18b0:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    18b4:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    18b6:	bhi.n	18c2 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    18b8:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    18ba:	movs	r3, #0
    18bc:	strb	r3, [r7, #0]
    18be:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    18c2:	movs	r3, #64	; 0x40
    18c4:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    18c6:	movs	r0, #4
    18c8:	bl	1f70 <usb_tx>
		tx_packet = NULL;
    18cc:	str	r4, [r6, #0]
    18ce:	b.n	18ba <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    18d0:	ldr.w	r9, [pc, #84]	; 1928 <usb_midi_write_packed+0x98>
    18d4:	ldrb.w	r3, [r9]
    18d8:	cmp	r3, #0
    18da:	beq.n	18be <usb_midi_write_packed+0x2e>
    18dc:	ldr	r5, [pc, #68]	; (1924 <usb_midi_write_packed+0x94>)
    18de:	movw	r4, #48001	; 0xbb81
    18e2:	b.n	18f6 <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    18e4:	subs	r4, #1
    18e6:	beq.n	190e <usb_midi_write_packed+0x7e>
    18e8:	ldrb	r3, [r5, #0]
    18ea:	cbnz	r3, 190e <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    18ec:	bl	2a74 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    18f0:	ldrb.w	r3, [r9]
    18f4:	cbz	r3, 1916 <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    18f6:	movs	r0, #4
    18f8:	bl	1e5c <usb_tx_packet_count>
    18fc:	cmp	r0, #5
    18fe:	bhi.n	18e4 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    1900:	bl	1d94 <usb_malloc>
    1904:	mov	r1, r0
    1906:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    1908:	cmp	r0, #0
    190a:	beq.n	18e4 <usb_midi_write_packed+0x54>
    190c:	b.n	18a4 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    190e:	movs	r3, #1
    1910:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    1912:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1916:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    191a:	nop
    191c:	.word	0x1fff1610
    1920:	.word	0x1fff15e4
    1924:	.word	0x1fff1614
    1928:	.word	0x1fff1720

0000192c <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    192c:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    192e:	ldr	r3, [pc, #32]	; (1950 <usb_midi_flush_output+0x24>)
    1930:	ldrb	r4, [r3, #0]
    1932:	cbnz	r4, 193e <usb_midi_flush_output+0x12>
    1934:	ldr	r5, [pc, #28]	; (1954 <usb_midi_flush_output+0x28>)
    1936:	ldr	r1, [r5, #0]
    1938:	cbz	r1, 193e <usb_midi_flush_output+0x12>
    193a:	ldrh	r3, [r1, #2]
    193c:	cbnz	r3, 1940 <usb_midi_flush_output+0x14>
    193e:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    1940:	lsls	r3, r3, #2
    1942:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    1944:	movs	r0, #4
    1946:	bl	1f70 <usb_tx>
		tx_packet = NULL;
    194a:	str	r4, [r5, #0]
    194c:	pop	{r3, r4, r5, pc}
    194e:	nop
    1950:	.word	0x1fff15e4
    1954:	.word	0x1fff1610

00001958 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1958:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    195c:	ldr	r6, [pc, #692]	; (1c14 <usb_midi_read+0x2bc>)
    195e:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1960:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    1962:	cmp	r3, #0
    1964:	beq.w	1a8c <usb_midi_read+0x134>
    1968:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    196a:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    196c:	lsrs	r1, r2, #2
    196e:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    1972:	adds	r2, #4
	if (index < rx_packet->len) {
    1974:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    1976:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    1978:	bcs.n	1a00 <usb_midi_read+0xa8>
		rx_packet->index = index;
    197a:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    197c:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1980:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    1984:	ldr	r1, [pc, #656]	; (1c18 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1986:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    198a:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    198e:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1992:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    1994:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    1998:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    199a:	bls.n	19d2 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    199c:	subs	r3, r6, #2
    199e:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    19a0:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    19a4:	bls.n	1a44 <usb_midi_read+0xec>
    19a6:	cmp	r6, #5
    19a8:	beq.n	1a3c <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    19aa:	cmp	r6, #4
    19ac:	beq.w	1cf8 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    19b0:	subs	r3, r6, #5
    19b2:	cmp	r3, #2
    19b4:	bls.n	1ab6 <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    19b6:	cmp	r6, #15
    19b8:	bne.n	19d8 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    19ba:	cmp	r0, #247	; 0xf7
    19bc:	bhi.n	1a44 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    19be:	cmp	r0, #240	; 0xf0
    19c0:	beq.n	19c8 <usb_midi_read+0x70>
    19c2:	ldr	r3, [pc, #600]	; (1c1c <usb_midi_read+0x2c4>)
    19c4:	ldrh	r3, [r3, #0]
    19c6:	cbz	r3, 19d8 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    19c8:	bl	1848 <sysex_byte>
		}
	}
	return 0;
    19cc:	movs	r0, #0
    19ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    19d2:	cbz	r7, 19de <usb_midi_read+0x86>
    19d4:	cmp	r5, r7
    19d6:	beq.n	19de <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    19d8:	movs	r0, #0
    19da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    19de:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    19e0:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    19e4:	beq.w	1af6 <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    19e8:	cmp	r6, #9
    19ea:	beq.n	1a10 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    19ec:	cmp	r6, #10
    19ee:	bne.w	1b1a <usb_midi_read+0x1c2>
    19f2:	cmp	r3, #10
    19f4:	bne.n	19d8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    19f6:	ldr	r3, [pc, #552]	; (1c20 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    19f8:	ldr	r2, [pc, #552]	; (1c24 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    19fa:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    19fc:	movs	r1, #160	; 0xa0
    19fe:	b.n	1b04 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    1a00:	mov	r0, r3
    1a02:	bl	1dd4 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    1a06:	movs	r0, #5
    1a08:	bl	1e20 <usb_rx>
    1a0c:	str	r0, [r6, #0]
    1a0e:	b.n	197c <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    1a10:	cmp	r3, #9
    1a12:	bne.n	19d8 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    1a14:	lsrs	r7, r4, #24
    1a16:	beq.w	1d10 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    1a1a:	ldr	r3, [pc, #524]	; (1c28 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1a1c:	ldr	r2, [pc, #516]	; (1c24 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    1a1e:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1a20:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1a22:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1a26:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1a28:	uxtb	r5, r5
    1a2a:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    1a2c:	cmp	r3, #0
    1a2e:	beq.w	1b6c <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1a32:	mov	r2, r4
    1a34:	mov	r1, r6
    1a36:	mov	r0, r5
    1a38:	blx	r3
    1a3a:	b.n	1b6c <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1a3c:	cmp	r0, #240	; 0xf0
    1a3e:	bls.n	1ac8 <usb_midi_read+0x170>
    1a40:	cmp	r0, #247	; 0xf7
    1a42:	beq.n	1ac8 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    1a44:	subs	r0, #241	; 0xf1
    1a46:	cmp	r0, #14
    1a48:	bhi.n	19d8 <usb_midi_read+0x80>
    1a4a:	add	r3, pc, #4	; (adr r3, 1a50 <usb_midi_read+0xf8>)
    1a4c:	ldr.w	pc, [r3, r0, lsl #2]
    1a50:	.word	0x00001c07
    1a54:	.word	0x00001beb
    1a58:	.word	0x00001bd9
    1a5c:	.word	0x000019d9
    1a60:	.word	0x000019d9
    1a64:	.word	0x00001bcb
    1a68:	.word	0x000019d9
    1a6c:	.word	0x00001cab
    1a70:	.word	0x000019d9
    1a74:	.word	0x00001c75
    1a78:	.word	0x00001c8f
    1a7c:	.word	0x00001bb3
    1a80:	.word	0x000019d9
    1a84:	.word	0x00001b9b
    1a88:	.word	0x00001b7f
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    1a8c:	ldr	r3, [pc, #412]	; (1c2c <usb_midi_read+0x2d4>)
    1a8e:	ldrb	r3, [r3, #0]
    1a90:	cmp	r3, #0
    1a92:	beq.n	19d8 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    1a94:	movs	r0, #5
    1a96:	bl	1e20 <usb_rx>
    1a9a:	mov	r3, r0
    1a9c:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    1a9e:	cmp	r0, #0
    1aa0:	beq.n	19d8 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    1aa2:	ldrh	r5, [r0, #0]
    1aa4:	cmp	r5, #0
    1aa6:	bne.w	196a <usb_midi_read+0x12>
			usb_free(rx_packet);
    1aaa:	bl	1dd4 <usb_free>
			rx_packet = NULL;
    1aae:	str	r5, [r6, #0]
			return 0;
    1ab0:	mov	r0, r5
    1ab2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    1ab6:	bl	1848 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    1aba:	ubfx	r0, r4, #16, #8
    1abe:	bl	1848 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    1ac2:	cmp	r6, #7
    1ac4:	bne.n	1acc <usb_midi_read+0x174>
    1ac6:	lsrs	r0, r4, #24
    1ac8:	bl	1848 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    1acc:	ldr	r3, [pc, #332]	; (1c1c <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1ace:	ldr	r2, [pc, #352]	; (1c30 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    1ad0:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    1ad2:	ldr	r0, [pc, #352]	; (1c34 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1ad4:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1ad6:	ldr	r5, [pc, #352]	; (1c38 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1ad8:	ldr	r2, [pc, #328]	; (1c24 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    1ada:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1adc:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1ade:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1ae0:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1ae2:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1ae4:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1ae6:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    1ae8:	cbz	r4, 1b2e <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    1aea:	movs	r2, #1
    1aec:	ldr	r0, [pc, #332]	; (1c3c <usb_midi_read+0x2e4>)
    1aee:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1af0:	movs	r0, #1
    1af2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1af6:	cmp	r3, #8
    1af8:	bne.w	19d8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    1afc:	ldr	r3, [pc, #320]	; (1c40 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1afe:	ldr	r2, [pc, #292]	; (1c24 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    1b00:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1b02:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1b04:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1b08:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1b0a:	uxtb	r5, r5
    1b0c:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    1b0e:	cbz	r3, 1b6c <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1b10:	mov	r0, r5
    1b12:	mov	r2, r4
    1b14:	mov	r1, r6
    1b16:	blx	r3
    1b18:	b.n	1b6c <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    1b1a:	cmp	r6, #11
    1b1c:	bne.n	1b42 <usb_midi_read+0x1ea>
    1b1e:	cmp	r3, #11
    1b20:	bne.w	19d8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    1b24:	ldr	r3, [pc, #284]	; (1c44 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1b26:	ldr	r2, [pc, #252]	; (1c24 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    1b28:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1b2a:	movs	r1, #176	; 0xb0
    1b2c:	b.n	1b04 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    1b2e:	ldr	r3, [pc, #280]	; (1c48 <usb_midi_read+0x2f0>)
    1b30:	ldr	r3, [r3, #0]
    1b32:	cmp	r3, #0
    1b34:	beq.w	1d2e <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    1b38:	ldr	r0, [pc, #256]	; (1c3c <usb_midi_read+0x2e4>)
    1b3a:	blx	r3
		}
		return 1;
    1b3c:	movs	r0, #1
    1b3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    1b42:	cmp	r6, #12
    1b44:	bne.w	1d48 <usb_midi_read+0x3f0>
    1b48:	cmp	r3, #12
    1b4a:	bne.w	19d8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1b4e:	ldr	r3, [pc, #252]	; (1c4c <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1b50:	ldr	r2, [pc, #208]	; (1c24 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    1b52:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1b54:	movs	r1, #192	; 0xc0
    1b56:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    1b58:	uxtb	r5, r5
    1b5a:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1b5e:	cmp	r3, #0
    1b60:	beq.w	1cf4 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1b64:	mov	r0, r5
    1b66:	mov	r1, r6
    1b68:	lsrs	r4, r4, #24
    1b6a:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1b6c:	ldr	r1, [pc, #224]	; (1c50 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    1b6e:	ldr	r2, [pc, #196]	; (1c34 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    1b70:	ldr	r3, [pc, #196]	; (1c38 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1b72:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    1b74:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    1b76:	strb	r4, [r3, #0]
		return 1;
    1b78:	movs	r0, #1
    1b7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    1b7e:	ldr	r3, [pc, #212]	; (1c54 <usb_midi_read+0x2fc>)
    1b80:	ldr	r3, [r3, #0]
    1b82:	cmp	r3, #0
    1b84:	beq.w	1d34 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    1b88:	blx	r3
    1b8a:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    1b8e:	ldr	r3, [pc, #148]	; (1c24 <usb_midi_read+0x2cc>)
    1b90:	uxtb	r5, r5
    1b92:	lsrs	r4, r4, #24
    1b94:	strb.w	r8, [r3]
		goto return_message;
    1b98:	b.n	1b6c <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    1b9a:	ldr	r3, [pc, #188]	; (1c58 <usb_midi_read+0x300>)
    1b9c:	ldr	r3, [r3, #0]
    1b9e:	cmp	r3, #0
    1ba0:	bne.n	1b88 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    1ba2:	ldr	r3, [pc, #184]	; (1c5c <usb_midi_read+0x304>)
    1ba4:	ldr	r3, [r3, #0]
    1ba6:	cbz	r3, 1bd2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    1ba8:	movs	r0, #254	; 0xfe
    1baa:	blx	r3
    1bac:	ubfx	r6, r4, #16, #8
    1bb0:	b.n	1b8e <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    1bb2:	ldr	r3, [pc, #172]	; (1c60 <usb_midi_read+0x308>)
    1bb4:	ldr	r3, [r3, #0]
    1bb6:	cmp	r3, #0
    1bb8:	bne.n	1b88 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    1bba:	ldr	r3, [pc, #160]	; (1c5c <usb_midi_read+0x304>)
    1bbc:	ldr	r3, [r3, #0]
    1bbe:	cbz	r3, 1bd2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    1bc0:	movs	r0, #252	; 0xfc
    1bc2:	blx	r3
    1bc4:	ubfx	r6, r4, #16, #8
    1bc8:	b.n	1b8e <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    1bca:	ldr	r3, [pc, #152]	; (1c64 <usb_midi_read+0x30c>)
    1bcc:	ldr	r3, [r3, #0]
    1bce:	cmp	r3, #0
    1bd0:	bne.n	1b88 <usb_midi_read+0x230>
    1bd2:	ubfx	r6, r4, #16, #8
    1bd6:	b.n	1b8e <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1bd8:	ldr	r3, [pc, #140]	; (1c68 <usb_midi_read+0x310>)
    1bda:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    1bdc:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1be0:	cmp	r3, #0
    1be2:	beq.n	1b8e <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    1be4:	mov	r0, r6
    1be6:	blx	r3
    1be8:	b.n	1b8e <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    1bea:	ldr	r3, [pc, #128]	; (1c6c <usb_midi_read+0x314>)
    1bec:	ldr	r2, [r3, #0]
    1bee:	cmp	r2, #0
    1bf0:	beq.n	1bd2 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    1bf2:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    1bf4:	lsrs	r3, r4, #17
    1bf6:	and.w	r0, r6, #127	; 0x7f
    1bfa:	and.w	r3, r3, #16256	; 0x3f80
    1bfe:	orrs	r0, r3
    1c00:	uxtb	r6, r6
    1c02:	blx	r2
    1c04:	b.n	1b8e <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1c06:	ldr	r3, [pc, #104]	; (1c70 <usb_midi_read+0x318>)
    1c08:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    1c0a:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1c0e:	cmp	r3, #0
    1c10:	bne.n	1be4 <usb_midi_read+0x28c>
    1c12:	b.n	1b8e <usb_midi_read+0x236>
    1c14:	.word	0x1fff161c
    1c18:	.word	0x1fff1a8e
    1c1c:	.word	0x1fff1a8a
    1c20:	.word	0x1fff15f8
    1c24:	.word	0x1fff1a88
    1c28:	.word	0x1fff162c
    1c2c:	.word	0x1fff1720
    1c30:	.word	0x1fff15f4
    1c34:	.word	0x1fff1a8c
    1c38:	.word	0x1fff1a8d
    1c3c:	.word	0x1fff1a90
    1c40:	.word	0x1fff1624
    1c44:	.word	0x1fff1628
    1c48:	.word	0x1fff160c
    1c4c:	.word	0x1fff15e8
    1c50:	.word	0x1fff1a8f
    1c54:	.word	0x1fff15d4
    1c58:	.word	0x1fff15d8
    1c5c:	.word	0x1fff15dc
    1c60:	.word	0x1fff1618
    1c64:	.word	0x1fff1608
    1c68:	.word	0x1fff1620
    1c6c:	.word	0x1fff15f0
    1c70:	.word	0x1fff1604
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    1c74:	ldr	r3, [pc, #252]	; (1d74 <usb_midi_read+0x41c>)
    1c76:	ldr	r3, [r3, #0]
    1c78:	cmp	r3, #0
    1c7a:	bne.n	1b88 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    1c7c:	ldr	r3, [pc, #248]	; (1d78 <usb_midi_read+0x420>)
    1c7e:	ldr	r3, [r3, #0]
    1c80:	cmp	r3, #0
    1c82:	beq.n	1bd2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    1c84:	movs	r0, #250	; 0xfa
    1c86:	blx	r3
    1c88:	ubfx	r6, r4, #16, #8
    1c8c:	b.n	1b8e <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    1c8e:	ldr	r3, [pc, #236]	; (1d7c <usb_midi_read+0x424>)
    1c90:	ldr	r3, [r3, #0]
    1c92:	cmp	r3, #0
    1c94:	bne.w	1b88 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    1c98:	ldr	r3, [pc, #220]	; (1d78 <usb_midi_read+0x420>)
    1c9a:	ldr	r3, [r3, #0]
    1c9c:	cmp	r3, #0
    1c9e:	beq.n	1bd2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    1ca0:	movs	r0, #251	; 0xfb
    1ca2:	blx	r3
    1ca4:	ubfx	r6, r4, #16, #8
    1ca8:	b.n	1b8e <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    1caa:	ldr	r3, [pc, #212]	; (1d80 <usb_midi_read+0x428>)
    1cac:	ldr	r3, [r3, #0]
    1cae:	cmp	r3, #0
    1cb0:	bne.w	1b88 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    1cb4:	ldr	r3, [pc, #192]	; (1d78 <usb_midi_read+0x420>)
    1cb6:	ldr	r3, [r3, #0]
    1cb8:	cmp	r3, #0
    1cba:	beq.n	1bd2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    1cbc:	movs	r0, #248	; 0xf8
    1cbe:	blx	r3
    1cc0:	ubfx	r6, r4, #16, #8
    1cc4:	b.n	1b8e <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    1cc6:	cmp	r3, #14
    1cc8:	bne.w	19d8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    1ccc:	ldr	r2, [pc, #180]	; (1d84 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1cce:	ldr	r3, [pc, #184]	; (1d88 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    1cd0:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1cd2:	movs	r1, #224	; 0xe0
    1cd4:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    1cd6:	cmp	r2, #0
    1cd8:	beq.n	1d6a <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    1cda:	lsrs	r6, r4, #16
    1cdc:	lsrs	r1, r4, #17
    1cde:	and.w	r3, r6, #127	; 0x7f
    1ce2:	and.w	r1, r1, #16256	; 0x3f80
    1ce6:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    1ce8:	uxtb	r5, r5
    1cea:	sub.w	r1, r1, #8192	; 0x2000
    1cee:	mov	r0, r5
    1cf0:	blx	r2
    1cf2:	uxtb	r6, r6
    1cf4:	lsrs	r4, r4, #24
    1cf6:	b.n	1b6c <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    1cf8:	bl	1848 <sysex_byte>
		sysex_byte(n >> 16);
    1cfc:	ubfx	r0, r4, #16, #8
    1d00:	bl	1848 <sysex_byte>
		sysex_byte(n >> 24);
    1d04:	lsrs	r0, r4, #24
    1d06:	bl	1848 <sysex_byte>
		return 0;
    1d0a:	movs	r0, #0
    1d0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1d10:	ldr	r3, [pc, #120]	; (1d8c <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1d12:	ldr	r2, [pc, #116]	; (1d88 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    1d14:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1d16:	movs	r1, #128	; 0x80
    1d18:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1d1a:	uxtb	r5, r5
    1d1c:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1d20:	cbz	r3, 1d44 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1d22:	mov	r1, r6
    1d24:	mov	r0, r5
    1d26:	mov	r2, r7
    1d28:	blx	r3
    1d2a:	mov	r4, r7
    1d2c:	b.n	1b6c <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1d2e:	movs	r0, #1
    1d30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    1d34:	ldr	r3, [pc, #64]	; (1d78 <usb_midi_read+0x420>)
    1d36:	ldr	r3, [r3, #0]
    1d38:	cmp	r3, #0
    1d3a:	beq.w	1bd2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    1d3e:	movs	r0, #255	; 0xff
    1d40:	blx	r3
    1d42:	b.n	1bd2 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1d44:	mov	r4, r3
    1d46:	b.n	1b6c <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    1d48:	cmp	r6, #13
    1d4a:	bne.n	1cc6 <usb_midi_read+0x36e>
    1d4c:	cmp	r3, #13
    1d4e:	bne.w	19d8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1d52:	ldr	r3, [pc, #60]	; (1d90 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1d54:	ldr	r2, [pc, #48]	; (1d88 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    1d56:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1d58:	movs	r1, #208	; 0xd0
    1d5a:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1d5c:	uxtb	r5, r5
    1d5e:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1d62:	cmp	r3, #0
    1d64:	bne.w	1b64 <usb_midi_read+0x20c>
    1d68:	b.n	1cf4 <usb_midi_read+0x39c>
    1d6a:	ubfx	r6, r4, #16, #8
    1d6e:	uxtb	r5, r5
    1d70:	lsrs	r4, r4, #24
    1d72:	b.n	1b6c <usb_midi_read+0x214>
    1d74:	.word	0x1fff1600
    1d78:	.word	0x1fff15dc
    1d7c:	.word	0x1fff15e0
    1d80:	.word	0x1fff15d0
    1d84:	.word	0x1fff15ec
    1d88:	.word	0x1fff1a88
    1d8c:	.word	0x1fff1624
    1d90:	.word	0x1fff15fc

00001d94 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    1d94:	cpsid	i
	avail = usb_buffer_available;
    1d96:	ldr	r0, [pc, #52]	; (1dcc <usb_malloc+0x38>)
    1d98:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    1d9a:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    1d9e:	cmp	r3, #29
    1da0:	bgt.n	1dc4 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    1da2:	mov.w	r1, #2147483648	; 0x80000000
    1da6:	lsrs	r1, r3
    1da8:	bic.w	r2, r2, r1
    1dac:	str	r2, [r0, #0]
	__enable_irq();
    1dae:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    1db0:	ldr	r0, [pc, #28]	; (1dd0 <usb_malloc+0x3c>)
    1db2:	add.w	r3, r3, r3, lsl #3
    1db6:	lsls	r3, r3, #3
    1db8:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    1dba:	movs	r1, #0
    1dbc:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    1dbe:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    1dc0:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    1dc2:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    1dc4:	cpsie	i
		return NULL;
    1dc6:	movs	r0, #0
    1dc8:	bx	lr
    1dca:	nop
    1dcc:	.word	0x1fff0c44
    1dd0:	.word	0x1fff03d0

00001dd4 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    1dd4:	ldr	r3, [pc, #52]	; (1e0c <usb_free+0x38>)
    1dd6:	ldr	r2, [pc, #56]	; (1e10 <usb_free+0x3c>)
    1dd8:	subs	r3, r0, r3
    1dda:	umull	r2, r3, r2, r3
    1dde:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    1de0:	cmp	r3, #29
    1de2:	bhi.n	1dfe <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1de4:	ldr	r2, [pc, #44]	; (1e14 <usb_free+0x40>)
    1de6:	ldrb	r2, [r2, #0]
    1de8:	cbnz	r2, 1e00 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    1dea:	cpsid	i
	usb_buffer_available |= mask;
    1dec:	ldr	r0, [pc, #40]	; (1e18 <usb_free+0x44>)
    1dee:	mov.w	r1, #2147483648	; 0x80000000
    1df2:	ldr	r2, [r0, #0]
    1df4:	lsr.w	r3, r1, r3
    1df8:	orrs	r2, r3
    1dfa:	str	r2, [r0, #0]
	__enable_irq();
    1dfc:	cpsie	i
    1dfe:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1e00:	ldr	r2, [pc, #24]	; (1e1c <usb_free+0x48>)
    1e02:	ldrb	r2, [r2, #0]
    1e04:	cmp	r2, #0
    1e06:	beq.n	1dea <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    1e08:	b.w	1e88 <usb_rx_memory>
    1e0c:	.word	0x1fff03d0
    1e10:	.word	0x38e38e39
    1e14:	.word	0x1fff1715
    1e18:	.word	0x1fff0c44
    1e1c:	.word	0x1fff1720

00001e20 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    1e20:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    1e22:	cmp	r3, #4
    1e24:	bhi.n	1e50 <usb_rx+0x30>
	__disable_irq();
    1e26:	cpsid	i
	ret = rx_first[endpoint];
    1e28:	ldr	r1, [pc, #40]	; (1e54 <usb_rx+0x34>)
    1e2a:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    1e2e:	cbz	r0, 1e4c <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    1e30:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    1e32:	ldr	r4, [pc, #36]	; (1e58 <usb_rx+0x38>)
    1e34:	ldrh	r5, [r0, #0]
    1e36:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    1e3a:	ldr	r6, [r0, #4]
    1e3c:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    1e40:	subs	r2, r2, r5
    1e42:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    1e46:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1e48:	pop	{r4, r5, r6}
    1e4a:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    1e4c:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1e4e:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    1e50:	movs	r0, #0
    1e52:	bx	lr
    1e54:	.word	0x1fff168c
    1e58:	.word	0x1fff1bb4

00001e5c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    1e5c:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1e5e:	cmp	r0, #4
    1e60:	bhi.n	1e7a <usb_tx_packet_count+0x1e>
	__disable_irq();
    1e62:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    1e64:	ldr	r3, [pc, #28]	; (1e84 <usb_tx_packet_count+0x28>)
    1e66:	ldr.w	r3, [r3, r0, lsl #2]
    1e6a:	cbz	r3, 1e7e <usb_tx_packet_count+0x22>
    1e6c:	movs	r0, #0
    1e6e:	ldr	r3, [r3, #4]
    1e70:	adds	r0, #1
    1e72:	cmp	r3, #0
    1e74:	bne.n	1e6e <usb_tx_packet_count+0x12>
	__enable_irq();
    1e76:	cpsie	i
	return count;
    1e78:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1e7a:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    1e7c:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    1e7e:	mov	r0, r3
    1e80:	b.n	1e76 <usb_tx_packet_count+0x1a>
    1e82:	nop
    1e84:	.word	0x1fff16e4

00001e88 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    1e88:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    1e8a:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1e8c:	ldr	r2, [pc, #204]	; (1f5c <usb_rx_memory+0xd4>)
    1e8e:	ldrb	r3, [r2, #0]
    1e90:	lsls	r3, r3, #28
    1e92:	bpl.n	1ea2 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1e94:	ldr	r3, [pc, #200]	; (1f60 <usb_rx_memory+0xd8>)
    1e96:	ldr	r1, [r3, #32]
    1e98:	cmp	r1, #0
    1e9a:	beq.n	1f24 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1e9c:	ldr	r1, [r3, #40]	; 0x28
    1e9e:	cmp	r1, #0
    1ea0:	beq.n	1f40 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1ea2:	ldrb	r3, [r2, #1]
    1ea4:	lsls	r5, r3, #28
    1ea6:	bpl.n	1eb6 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1ea8:	ldr	r3, [pc, #180]	; (1f60 <usb_rx_memory+0xd8>)
    1eaa:	ldr	r1, [r3, #64]	; 0x40
    1eac:	cmp	r1, #0
    1eae:	beq.n	1f4c <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1eb0:	ldr	r1, [r3, #72]	; 0x48
    1eb2:	cmp	r1, #0
    1eb4:	beq.n	1f44 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1eb6:	ldrb	r3, [r2, #2]
    1eb8:	lsls	r4, r3, #28
    1eba:	bpl.n	1eca <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1ebc:	ldr	r3, [pc, #160]	; (1f60 <usb_rx_memory+0xd8>)
    1ebe:	ldr	r1, [r3, #96]	; 0x60
    1ec0:	cmp	r1, #0
    1ec2:	beq.n	1f50 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1ec4:	ldr	r1, [r3, #104]	; 0x68
    1ec6:	cmp	r1, #0
    1ec8:	beq.n	1f48 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1eca:	ldrb	r3, [r2, #3]
    1ecc:	lsls	r1, r3, #28
    1ece:	bpl.n	1ee0 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1ed0:	ldr	r3, [pc, #140]	; (1f60 <usb_rx_memory+0xd8>)
    1ed2:	ldr.w	r1, [r3, #128]	; 0x80
    1ed6:	cmp	r1, #0
    1ed8:	beq.n	1f58 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1eda:	ldr.w	r1, [r3, #136]	; 0x88
    1ede:	cbz	r1, 1f06 <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1ee0:	ldrb	r3, [r2, #4]
    1ee2:	lsls	r3, r3, #28
    1ee4:	bpl.n	1ef8 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1ee6:	ldr	r3, [pc, #120]	; (1f60 <usb_rx_memory+0xd8>)
    1ee8:	ldr.w	r2, [r3, #160]	; 0xa0
    1eec:	cmp	r2, #0
    1eee:	beq.n	1f54 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1ef0:	ldr.w	r2, [r3, #168]	; 0xa8
    1ef4:	movs	r4, #21
    1ef6:	cbz	r2, 1f08 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    1ef8:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    1efa:	ldr	r3, [pc, #104]	; (1f64 <usb_rx_memory+0xdc>)
    1efc:	movs	r2, #0
    1efe:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    1f00:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    1f02:	b.w	1dd4 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1f06:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1f08:	ldr	r1, [pc, #88]	; (1f64 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1f0a:	ldr	r5, [pc, #92]	; (1f68 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    1f0c:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1f0e:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    1f12:	add.w	r3, r3, r4, lsl #3
    1f16:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1f18:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    1f1a:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    1f1c:	strb	r2, [r1, #0]
				__enable_irq();
    1f1e:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    1f20:	pop	{r4, r5}
    1f22:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    1f24:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1f26:	ldr	r4, [pc, #60]	; (1f64 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1f28:	ldr	r5, [pc, #64]	; (1f6c <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    1f2a:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1f2c:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    1f30:	add.w	r3, r3, r2, lsl #3
    1f34:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1f36:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    1f38:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    1f3a:	strb	r2, [r4, #0]
				__enable_irq();
    1f3c:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    1f3e:	b.n	1f20 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1f40:	movs	r4, #5
    1f42:	b.n	1f08 <usb_rx_memory+0x80>
    1f44:	movs	r4, #9
    1f46:	b.n	1f08 <usb_rx_memory+0x80>
    1f48:	movs	r4, #13
    1f4a:	b.n	1f08 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    1f4c:	movs	r2, #8
    1f4e:	b.n	1f26 <usb_rx_memory+0x9e>
    1f50:	movs	r2, #12
    1f52:	b.n	1f26 <usb_rx_memory+0x9e>
    1f54:	movs	r2, #20
    1f56:	b.n	1f26 <usb_rx_memory+0x9e>
    1f58:	movs	r2, #16
    1f5a:	b.n	1f26 <usb_rx_memory+0x9e>
    1f5c:	.word	0x00004d1c
    1f60:	.word	0x1fff0000
    1f64:	.word	0x1fff1715
    1f68:	.word	0x004000c8
    1f6c:	.word	0x00400088

00001f70 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    1f70:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    1f72:	cmp	r3, #4
    1f74:	bhi.n	1fb2 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    1f76:	ldr	r2, [pc, #108]	; (1fe4 <usb_tx+0x74>)
    1f78:	lsls	r0, r0, #5
    1f7a:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    1f7e:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    1f80:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    1f82:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    1f84:	ldr	r4, [pc, #96]	; (1fe8 <usb_tx+0x78>)
    1f86:	ldrb	r2, [r4, r3]
    1f88:	cmp	r2, #3
    1f8a:	bhi.n	1fc4 <usb_tx+0x54>
    1f8c:	tbb	[pc, r2]
    1f90:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    1f94:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1f96:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    1f98:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1f9a:	tst.w	r0, #8
    1f9e:	ite	ne
    1fa0:	movne	r3, #200	; 0xc8
    1fa2:	moveq	r3, #136	; 0x88
    1fa4:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    1fa8:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    1faa:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    1fac:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    1fae:	cpsie	i
}
    1fb0:	pop	{r4, r5}
    1fb2:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    1fb4:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    1fb6:	movs	r2, #2
		break;
    1fb8:	b.n	1f96 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    1fba:	movs	r2, #5
    1fbc:	b.n	1f96 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    1fbe:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    1fc0:	movs	r2, #4
		break;
    1fc2:	b.n	1f96 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    1fc4:	ldr	r2, [pc, #36]	; (1fec <usb_tx+0x7c>)
    1fc6:	ldr.w	r0, [r2, r3, lsl #2]
    1fca:	cbz	r0, 1fdc <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    1fcc:	ldr	r2, [pc, #32]	; (1ff0 <usb_tx+0x80>)
    1fce:	ldr.w	r0, [r2, r3, lsl #2]
    1fd2:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    1fd4:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    1fd8:	cpsie	i
		return;
    1fda:	b.n	1fb0 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    1fdc:	str.w	r1, [r2, r3, lsl #2]
    1fe0:	ldr	r2, [pc, #12]	; (1ff0 <usb_tx+0x80>)
    1fe2:	b.n	1fd4 <usb_tx+0x64>
    1fe4:	.word	0x1fff0000
    1fe8:	.word	0x1fff1724
    1fec:	.word	0x1fff16e4
    1ff0:	.word	0x1fff16f8

00001ff4 <usb_isr>:
}



void usb_isr(void)
{
    1ff4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    1ff8:	ldr.w	fp, [pc, #776]	; 2304 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    1ffc:	ldr.w	sl, [pc, #776]	; 2308 <usb_isr+0x314>
}



void usb_isr(void)
{
    2000:	sub	sp, #28
    2002:	b.n	208e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2004:	ldr	r7, [pc, #680]	; (22b0 <usb_isr+0x2bc>)
    2006:	mov.w	r8, r3, lsr #2
    200a:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    200e:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2010:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2014:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2018:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    201a:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    201e:	and.w	r4, r3, #255	; 0xff
    2022:	cmp	r3, #0
    2024:	bne.w	2228 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2028:	ldr.w	r3, [r7, r8, lsl #3]
    202c:	lsrs	r3, r3, #16
    202e:	uxth	r1, r3
    2030:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2034:	cmp	r3, #0
    2036:	beq.w	2216 <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    203a:	ldr	r3, [pc, #632]	; (22b4 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    203c:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2040:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2044:	ldr.w	r2, [r3, r6, lsl #2]
    2048:	cmp	r2, #0
    204a:	beq.w	24b8 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    204e:	ldr	r5, [pc, #616]	; (22b8 <usb_isr+0x2c4>)
    2050:	ldr.w	r3, [r5, r6, lsl #2]
    2054:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    2056:	ldr	r4, [pc, #612]	; (22bc <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2058:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    205c:	ldrh.w	r3, [r4, r6, lsl #1]
    2060:	add	r1, r3
    2062:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    2066:	bl	1d94 <usb_malloc>
					if (packet) {
    206a:	cmp	r0, #0
    206c:	beq.w	24aa <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2070:	ldr	r2, [pc, #588]	; (22c0 <usb_isr+0x2cc>)
    2072:	ldr	r3, [pc, #592]	; (22c4 <usb_isr+0x2d0>)
    2074:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2078:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    207c:	it	ne
    207e:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2080:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2084:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2088:	movs	r3, #8
    208a:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    208e:	ldrb.w	r4, [fp]
    2092:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2094:	lsls	r0, r4, #29
    2096:	bpl.n	20d2 <usb_isr+0xde>
		if (usb_configuration) {
    2098:	ldr	r3, [pc, #556]	; (22c8 <usb_isr+0x2d4>)
    209a:	ldrb	r3, [r3, #0]
    209c:	cbz	r3, 20cc <usb_isr+0xd8>
			t = usb_reboot_timer;
    209e:	ldr	r1, [pc, #556]	; (22cc <usb_isr+0x2d8>)
    20a0:	ldrb	r2, [r1, #0]
			if (t) {
    20a2:	and.w	r3, r2, #255	; 0xff
    20a6:	cbz	r2, 20b2 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    20a8:	subs	r3, #1
    20aa:	uxtb	r3, r3
    20ac:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    20ae:	cbnz	r3, 20b2 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    20b0:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    20b2:	ldr	r1, [pc, #540]	; (22d0 <usb_isr+0x2dc>)
    20b4:	ldrb	r2, [r1, #0]
			if (t) {
    20b6:	and.w	r3, r2, #255	; 0xff
    20ba:	cbz	r2, 20c8 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    20bc:	subs	r3, #1
    20be:	uxtb	r3, r3
    20c0:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    20c2:	cmp	r3, #0
    20c4:	beq.w	2456 <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    20c8:	bl	192c <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    20cc:	movs	r3, #4
    20ce:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    20d2:	and.w	r3, r4, #8
    20d6:	and.w	r2, r3, #255	; 0xff
    20da:	cmp	r3, #0
    20dc:	beq.w	2270 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    20e0:	ldrb.w	r3, [sl]
    20e4:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    20e6:	lsrs	r6, r3, #4
    20e8:	bne.n	2004 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    20ea:	lsrs	r4, r3, #2
    20ec:	ldr.w	r9, [pc, #448]	; 22b0 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    20f0:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    20f4:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    20f8:	ubfx	r2, r2, #2, #4
    20fc:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    20fe:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2100:	cmp	r2, #12
    2102:	bhi.w	220e <usb_isr+0x21a>
    2106:	tbb	[pc, r2]
    210a:	.short	0x7878
    210c:	.word	0x82828282
    2110:	.word	0x82438282
    2114:	.short	0x8282
    2116:	.byte	0x07
    2117:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2118:	ldr	r0, [r1, #0]
    211a:	ldr	r5, [pc, #440]	; (22d4 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    211c:	ldr	r3, [pc, #416]	; (22c0 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    211e:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2120:	ldr	r7, [pc, #436]	; (22d8 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2122:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2126:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2128:	ldr	r6, [pc, #432]	; (22dc <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    212a:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    212c:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2130:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2132:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2134:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2136:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    213a:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    213c:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2140:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2144:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2146:	bhi.w	230c <usb_isr+0x318>
    214a:	cmp.w	r1, #1664	; 0x680
    214e:	bcs.w	2778 <usb_isr+0x784>
    2152:	cmp.w	r1, #258	; 0x102
    2156:	beq.w	2526 <usb_isr+0x532>
    215a:	bhi.w	24f0 <usb_isr+0x4fc>
    215e:	cmp	r1, #128	; 0x80
    2160:	beq.w	27ac <usb_isr+0x7b8>
    2164:	cmp	r1, #130	; 0x82
    2166:	bne.w	2532 <usb_isr+0x53e>
    216a:	ldrh	r1, [r5, #4]
    216c:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2170:	cmp	r1, #5
    2172:	bhi.w	2532 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2176:	ldr	r3, [pc, #360]	; (22e0 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2178:	ldr	r4, [pc, #360]	; (22e4 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    217a:	lsls	r1, r1, #2
    217c:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    217e:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2180:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2182:	ldrb	r2, [r3, #0]
    2184:	lsls	r3, r2, #30
    2186:	bpl.w	28bc <usb_isr+0x8c8>
    218a:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    218c:	movs	r0, #2
    218e:	b.n	25ba <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2190:	ldr	r7, [pc, #324]	; (22d8 <usb_isr+0x2e4>)
    2192:	ldr	r2, [r7, #0]
		if (data) {
    2194:	cbz	r2, 21e4 <usb_isr+0x1f0>
			size = ep0_tx_len;
    2196:	ldr	r3, [pc, #336]	; (22e8 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2198:	ldr	r6, [pc, #320]	; (22dc <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    219a:	ldr	r1, [pc, #336]	; (22ec <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    219c:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    219e:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    21a0:	ldrb	r5, [r1, #0]
    21a2:	cmp	r0, #64	; 0x40
    21a4:	mov	lr, r0
    21a6:	orr.w	r8, r5, #2
    21aa:	it	cs
    21ac:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    21b0:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    21b2:	eor.w	r4, r4, #1
    21b6:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    21b8:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    21bc:	ite	eq
    21be:	moveq	r4, #136	; 0x88
    21c0:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    21c2:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    21c6:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    21c8:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    21cc:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    21d0:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    21d2:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    21d4:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    21d8:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    21da:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    21dc:	cmp	r0, #0
    21de:	beq.w	234e <usb_isr+0x35a>
    21e2:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    21e4:	ldr	r3, [pc, #236]	; (22d4 <usb_isr+0x2e0>)
    21e6:	ldrh	r2, [r3, #0]
    21e8:	cmp.w	r2, #1280	; 0x500
    21ec:	bne.n	220e <usb_isr+0x21a>
			setup.bRequest = 0;
    21ee:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    21f0:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    21f2:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    21f4:	ldr	r3, [pc, #248]	; (22f0 <usb_isr+0x2fc>)
    21f6:	strb	r2, [r3, #0]
    21f8:	b.n	220e <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    21fa:	ldr	r2, [pc, #216]	; (22d4 <usb_isr+0x2e0>)
    21fc:	ldrh	r0, [r2, #0]
    21fe:	movw	r2, #8225	; 0x2021
    2202:	cmp	r0, r2
    2204:	beq.w	2358 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2208:	ldr	r2, [pc, #180]	; (22c0 <usb_isr+0x2cc>)
    220a:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    220e:	ldr	r2, [pc, #228]	; (22f4 <usb_isr+0x300>)
    2210:	movs	r3, #1
    2212:	strb	r3, [r2, #0]
    2214:	b.n	2088 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2216:	ldr	r2, [pc, #168]	; (22c0 <usb_isr+0x2cc>)
    2218:	ldr	r3, [pc, #168]	; (22c4 <usb_isr+0x2d0>)
    221a:	tst.w	r9, #8
    221e:	it	ne
    2220:	movne	r3, r2
    2222:	str.w	r3, [r7, r8, lsl #3]
    2226:	b.n	2088 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2228:	bl	1dd4 <usb_free>
				packet = tx_first[endpoint];
    222c:	ldr	r2, [pc, #200]	; (22f8 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    222e:	ldr	r1, [pc, #204]	; (22fc <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2230:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2234:	cmp	r3, #0
    2236:	beq.w	24c0 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    223a:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    223c:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    223e:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    2242:	add.w	r2, r3, #8
    2246:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    224a:	cmp	r4, #3
    224c:	bhi.n	225a <usb_isr+0x266>
    224e:	tbb	[pc, r4]
    2252:	.short	0x022c
    2254:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    2256:	movs	r2, #2
    2258:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    225a:	ldrh	r2, [r3, #0]
    225c:	tst.w	r9, #8
    2260:	ite	eq
    2262:	moveq	r3, #136	; 0x88
    2264:	movne	r3, #200	; 0xc8
    2266:	orr.w	r3, r3, r2, lsl #16
    226a:	str.w	r3, [r7, r8, lsl #3]
    226e:	b.n	2088 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2270:	lsls	r0, r4, #31
    2272:	bmi.w	245c <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    2276:	lsls	r1, r4, #24
    2278:	bmi.w	24dc <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    227c:	lsls	r2, r4, #30
    227e:	bpl.n	228e <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2280:	ldr	r2, [pc, #124]	; (2300 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2282:	ldr	r1, [pc, #128]	; (2304 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2284:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2286:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2288:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    228a:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    228c:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    228e:	lsls	r3, r4, #27
    2290:	bpl.n	2298 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2292:	ldr	r3, [pc, #112]	; (2304 <usb_isr+0x310>)
    2294:	movs	r2, #16
    2296:	strb	r2, [r3, #0]
	}

}
    2298:	add	sp, #28
    229a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    229e:	movs	r2, #4
    22a0:	strb	r2, [r1, r6]
						break;
    22a2:	b.n	225a <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    22a4:	movs	r2, #5
    22a6:	strb	r2, [r1, r6]
						break;
    22a8:	b.n	225a <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    22aa:	movs	r2, #3
    22ac:	strb	r2, [r1, r6]
						break;
    22ae:	b.n	225a <usb_isr+0x266>
    22b0:	.word	0x1fff0000
    22b4:	.word	0x1fff168c
    22b8:	.word	0x1fff1634
    22bc:	.word	0x1fff1bb4
    22c0:	.word	0x004000c8
    22c4:	.word	0x00400088
    22c8:	.word	0x1fff1720
    22cc:	.word	0x1fff16a1
    22d0:	.word	0x1fff15b4
    22d4:	.word	0x1fff170c
    22d8:	.word	0x1fff1630
    22dc:	.word	0x1fff16a0
    22e0:	.word	0x400720c0
    22e4:	.word	0x1fff1718
    22e8:	.word	0x1fff1648
    22ec:	.word	0x1fff1714
    22f0:	.word	0x40072098
    22f4:	.word	0x40072094
    22f8:	.word	0x1fff16e4
    22fc:	.word	0x1fff1724
    2300:	.word	0x40072088
    2304:	.word	0x40072080
    2308:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    230c:	movw	r4, #8225	; 0x2021
    2310:	cmp	r1, r4
    2312:	beq.w	244e <usb_isr+0x45a>
    2316:	bhi.n	23ac <usb_isr+0x3b8>
    2318:	cmp.w	r1, #2176	; 0x880
    231c:	beq.w	25b2 <usb_isr+0x5be>
    2320:	cmp.w	r1, #2304	; 0x900
    2324:	bne.w	2532 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2328:	ldr	r2, [pc, #712]	; (25f4 <usb_isr+0x600>)
    232a:	ldr	r4, [pc, #716]	; (25f8 <usb_isr+0x604>)
    232c:	ldrb	r1, [r5, #2]
    232e:	strb	r1, [r2, #0]
    2330:	add.w	r5, r4, #160	; 0xa0
    2334:	b.n	233e <usb_isr+0x34a>
    2336:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2338:	cmp	r5, r4
    233a:	beq.w	2650 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    233e:	ldr	r3, [r4, #32]
    2340:	lsls	r1, r3, #24
    2342:	bpl.n	2336 <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2344:	ldr	r0, [r4, #36]	; 0x24
    2346:	subs	r0, #8
    2348:	bl	1dd4 <usb_free>
    234c:	b.n	2336 <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    234e:	cmp.w	lr, #64	; 0x40
    2352:	it	ne
    2354:	movne	r2, #0
    2356:	b.n	21e2 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2358:	ldr	r2, [pc, #672]	; (25fc <usb_isr+0x608>)
    235a:	ldrb	r5, [r1, #0]
    235c:	ldrb	r0, [r1, #1]
    235e:	strb	r5, [r2, #0]
    2360:	strb	r0, [r2, #1]
    2362:	ldrb	r5, [r1, #2]
    2364:	ldrb	r0, [r1, #3]
    2366:	strb	r5, [r2, #2]
    2368:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    236a:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    236c:	ldrb	r5, [r1, #4]
    236e:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2370:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2372:	ldrb	r5, [r1, #5]
    2374:	ldrb	r1, [r1, #6]
    2376:	strb	r5, [r2, #5]
    2378:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    237a:	beq.w	25aa <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    237e:	ldr	r1, [pc, #640]	; (2600 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2380:	ldr	r6, [pc, #640]	; (2604 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2382:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2384:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2386:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    238a:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    238c:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2390:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2392:	ite	eq
    2394:	moveq	r1, #136	; 0x88
    2396:	movne	r1, #200	; 0xc8
    2398:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    239c:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    23a0:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23a4:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    23a6:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23a8:	str	r1, [r2, #4]
    23aa:	b.n	2208 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    23ac:	movw	r4, #8737	; 0x2221
    23b0:	cmp	r1, r4
    23b2:	bne.w	27c6 <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    23b6:	ldr.w	ip, [pc, #656]	; 2648 <usb_isr+0x654>
    23ba:	ldr	r3, [pc, #588]	; (2608 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    23bc:	ldr	r1, [pc, #588]	; (260c <usb_isr+0x618>)
    23be:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    23c0:	ldr.w	r5, [ip]
    23c4:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    23c6:	str	r0, [sp, #4]
    23c8:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    23ca:	movs	r0, #0
    23cc:	str	r0, [sp, #8]
    23ce:	mov	r8, r0
    23d0:	mov	ip, r0
    23d2:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23d4:	ldr	r1, [pc, #552]	; (2600 <usb_isr+0x60c>)
    23d6:	ldrb	r5, [r1, #0]
    23d8:	orr.w	lr, r5, #2
    23dc:	add.w	r3, r9, lr, lsl #3
    23e0:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    23e2:	ldr	r3, [sp, #4]
    23e4:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23e6:	ldr	r3, [sp, #12]
    23e8:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    23ea:	ite	eq
    23ec:	moveq	r4, #136	; 0x88
    23ee:	movne	r4, #200	; 0xc8
    23f0:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    23f4:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    23f8:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    23fc:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    23fe:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2400:	ldr.w	lr, [pc, #500]	; 25f8 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    2404:	ldr	r3, [pc, #508]	; (2604 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    2406:	ldr.w	r8, [pc, #504]	; 2600 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    240a:	cmp	r0, #0
    240c:	bne.w	2540 <usb_isr+0x54c>
    2410:	cmp.w	ip, #64	; 0x40
    2414:	bne.n	244e <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2416:	orr.w	ip, r4, #2
    241a:	add.w	r3, r9, ip, lsl #3
    241e:	ldr	r4, [sp, #8]
    2420:	ldr.w	lr, [pc, #468]	; 25f8 <usb_isr+0x604>
    2424:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2426:	cmp	r2, #0
    2428:	bne.w	256c <usb_isr+0x578>
    242c:	lsls	r2, r0, #16
    242e:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    2432:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2436:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    243a:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    243c:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    243e:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2440:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2442:	cmp	r0, #64	; 0x40
    2444:	bne.n	244e <usb_isr+0x45a>
    2446:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    2448:	ldr	r2, [pc, #452]	; (2610 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    244a:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    244c:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    244e:	ldr	r2, [pc, #452]	; (2614 <usb_isr+0x620>)
    2450:	movs	r3, #1
    2452:	strb	r3, [r2, #0]
    2454:	b.n	220e <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    2456:	bl	11b4 <usb_serial_flush_callback>
    245a:	b.n	20c8 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    245c:	ldr	r3, [pc, #408]	; (25f8 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    245e:	ldr	r0, [pc, #436]	; (2614 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    2460:	ldr	r1, [pc, #412]	; (2600 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    2462:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2464:	mov.w	lr, #2
    2468:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    246c:	ldr	r7, [pc, #424]	; (2618 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    246e:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2470:	ldr	r1, [pc, #424]	; (261c <usb_isr+0x628>)
    2472:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    2474:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2476:	ldr	r6, [pc, #424]	; (2620 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    2478:	ldr	r5, [pc, #424]	; (2624 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    247a:	ldr	r4, [pc, #428]	; (2628 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    247c:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    247e:	movs	r1, #13
    2480:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2482:	movs	r1, #255	; 0xff
    2484:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2486:	ldr.w	lr, [pc, #452]	; 264c <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    248a:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    248c:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    248e:	ldr	r5, [pc, #412]	; (262c <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2490:	ldr	r2, [pc, #412]	; (2630 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2492:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2496:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2498:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    249a:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    249e:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    24a0:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    24a2:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    24a4:	add	sp, #28
    24a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    24aa:	ldr	r2, [pc, #392]	; (2634 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    24ac:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    24b0:	ldrb	r3, [r2, #0]
    24b2:	adds	r3, #1
    24b4:	strb	r3, [r2, #0]
    24b6:	b.n	2088 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    24b8:	str.w	r0, [r3, r6, lsl #2]
    24bc:	ldr	r5, [pc, #376]	; (2638 <usb_isr+0x644>)
    24be:	b.n	2056 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    24c0:	ldrb	r3, [r1, r6]
    24c2:	cmp	r3, #3
    24c4:	bhi.n	259c <usb_isr+0x5a8>
    24c6:	add	r2, pc, #4	; (adr r2, 24cc <usb_isr+0x4d8>)
    24c8:	ldr.w	pc, [r2, r3, lsl #2]
    24cc:	.word	0x00002089
    24d0:	.word	0x00002089
    24d4:	.word	0x00002521
    24d8:	.word	0x0000251b
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    24dc:	ldr	r1, [pc, #312]	; (2618 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    24de:	ldr	r3, [pc, #324]	; (2624 <usb_isr+0x630>)
    24e0:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    24e2:	movs	r0, #13
    24e4:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    24e6:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    24e8:	lsls	r2, r4, #30
    24ea:	bpl.w	228e <usb_isr+0x29a>
    24ee:	b.n	2280 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    24f0:	movw	r2, #770	; 0x302
    24f4:	cmp	r1, r2
    24f6:	bne.w	27b6 <usb_isr+0x7c2>
    24fa:	ldrh	r1, [r5, #4]
    24fc:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2500:	cmp	r1, #5
    2502:	bhi.n	2532 <usb_isr+0x53e>
    2504:	ldrh	r2, [r5, #2]
    2506:	cbnz	r2, 2532 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    2508:	ldr	r4, [pc, #268]	; (2618 <usb_isr+0x624>)
    250a:	str	r0, [sp, #4]
    250c:	lsls	r1, r1, #2
    250e:	add	r4, r1
    2510:	ldrb	r1, [r4, #0]
    2512:	orr.w	r1, r1, #2
    2516:	strb	r1, [r4, #0]
    2518:	b.n	23ca <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    251a:	movs	r3, #1
    251c:	strb	r3, [r1, r6]
						break;
    251e:	b.n	2088 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2520:	movs	r3, #0
    2522:	strb	r3, [r1, r6]
						break;
    2524:	b.n	2088 <usb_isr+0x94>
    2526:	ldrh	r1, [r5, #4]
    2528:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    252c:	cmp	r1, #5
    252e:	bls.w	27d0 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2532:	ldr	r2, [pc, #228]	; (2618 <usb_isr+0x624>)
    2534:	movs	r3, #15
    2536:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2538:	ldr	r2, [pc, #216]	; (2614 <usb_isr+0x620>)
    253a:	movs	r3, #1
    253c:	strb	r3, [r2, #0]
    253e:	b.n	220e <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2540:	cmp	r0, #64	; 0x40
    2542:	bls.w	2416 <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2546:	orr.w	r4, r4, #2
    254a:	add.w	r1, lr, r4, lsl #3
    254e:	ldr	r6, [sp, #8]
    2550:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2552:	cbz	r2, 2584 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    2554:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2558:	ldr	r2, [pc, #224]	; (263c <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    255a:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    255c:	mov	r3, r6
    255e:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2560:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2564:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2566:	str.w	r2, [lr, r4, lsl #3]
    256a:	b.n	2448 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    256c:	ldrb.w	r3, [sp, #4]
    2570:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2572:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2574:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2576:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2578:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    257c:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    257e:	str.w	r2, [lr, ip, lsl #3]
    2582:	b.n	2442 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    2584:	ldrb.w	r1, [sp, #4]
    2588:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    258a:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    258c:	ldr	r2, [pc, #140]	; (261c <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    258e:	strb.w	r5, [r8]
    2592:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2594:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2596:	str.w	r2, [lr, r4, lsl #3]
    259a:	b.n	2448 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    259c:	tst.w	r9, #8
    25a0:	ite	eq
    25a2:	moveq	r3, #2
    25a4:	movne	r3, #3
    25a6:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    25a8:	b.n	2088 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    25aa:	ldr	r2, [pc, #148]	; (2640 <usb_isr+0x64c>)
    25ac:	movs	r1, #15
    25ae:	strb	r1, [r2, #0]
    25b0:	b.n	237e <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    25b2:	ldr	r2, [pc, #64]	; (25f4 <usb_isr+0x600>)
    25b4:	ldr	r4, [pc, #140]	; (2644 <usb_isr+0x650>)
    25b6:	ldrb	r2, [r2, #0]
    25b8:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    25ba:	ldrh	r2, [r5, #6]
    25bc:	cmp	r2, r0
    25be:	bcs.w	2984 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    25c2:	ldr	r1, [pc, #60]	; (2600 <usb_isr+0x60c>)
    25c4:	ldrb	r5, [r1, #0]
    25c6:	cmp	r2, #64	; 0x40
    25c8:	mov	ip, r2
    25ca:	orr.w	lr, r5, #2
    25ce:	it	cs
    25d0:	movcs.w	ip, #64	; 0x40
    25d4:	add.w	r3, r4, ip
    25d8:	add.w	r0, r9, lr, lsl #3
    25dc:	str	r3, [sp, #8]
    25de:	movs	r3, #1
    25e0:	str	r4, [r0, #4]
    25e2:	mov.w	r8, ip, lsl #16
    25e6:	rsb	r0, ip, r2
    25ea:	str	r3, [sp, #4]
    25ec:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    25ee:	movs	r4, #200	; 0xc8
    25f0:	b.n	23f0 <usb_isr+0x3fc>
    25f2:	nop
    25f4:	.word	0x1fff1720
    25f8:	.word	0x1fff0000
    25fc:	.word	0x1fff1a7c
    2600:	.word	0x1fff1714
    2604:	.word	0x1fff16a0
    2608:	.word	0x1fff1a84
    260c:	.word	0x1fff15c4
    2610:	.word	0x1fff1648
    2614:	.word	0x40072094
    2618:	.word	0x400720c0
    261c:	.word	0x00400088
    2620:	.word	0x40072088
    2624:	.word	0x40072080
    2628:	.word	0x40072098
    262c:	.word	0x1fff164c
    2630:	.word	0x1fff16a4
    2634:	.word	0x1fff1715
    2638:	.word	0x1fff1634
    263c:	.word	0x004000c8
    2640:	.word	0x1fff16a1
    2644:	.word	0x1fff1718
    2648:	.word	0x1fff15cc
    264c:	.word	0x4007208c
    2650:	ldr	r4, [pc, #704]	; (2914 <usb_isr+0x920>)
    2652:	ldr	r2, [pc, #708]	; (2918 <usb_isr+0x924>)
    2654:	ldr	r1, [pc, #708]	; (291c <usb_isr+0x928>)
    2656:	ldr	r0, [pc, #712]	; (2920 <usb_isr+0x92c>)
    2658:	ldr	r5, [pc, #712]	; (2924 <usb_isr+0x930>)
    265a:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    265c:	movs	r3, #0
    265e:	ldr	r4, [pc, #712]	; (2928 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2660:	str	r4, [sp, #8]
    2662:	str	r6, [sp, #20]
    2664:	str	r5, [sp, #12]
    2666:	mov	r8, r0
    2668:	mov	r4, r3
    266a:	str	r7, [sp, #16]
    266c:	mov	r6, r2
    266e:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    2670:	ldr	r0, [r6, #0]
			while (p) {
    2672:	cbz	r0, 2680 <usb_isr+0x68c>
				n = p->next;
    2674:	ldr	r7, [r0, #4]
				usb_free(p);
    2676:	bl	1dd4 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    267a:	mov	r0, r7
    267c:	cmp	r7, #0
    267e:	bne.n	2674 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    2680:	movs	r3, #0
    2682:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    2684:	ldr	r3, [sp, #12]
			p = tx_first[i];
    2686:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    2688:	mov	r2, r3
    268a:	movs	r3, #0
    268c:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    2690:	cbz	r0, 269e <usb_isr+0x6aa>
				n = p->next;
    2692:	ldr	r7, [r0, #4]
				usb_free(p);
    2694:	bl	1dd4 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    2698:	mov	r0, r7
    269a:	cmp	r7, #0
    269c:	bne.n	2692 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    269e:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    26a0:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    26a2:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    26a4:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    26a6:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    26aa:	ldr	r2, [sp, #8]
    26ac:	mov.w	r1, #0
			switch (tx_state[i]) {
    26b0:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    26b2:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    26b6:	cmp	r3, #3
    26b8:	bhi.n	26ca <usb_isr+0x6d6>
    26ba:	tbb	[pc, r3]
    26be:	.short	0x0258
    26c0:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    26c2:	ldr	r3, [sp, #4]
    26c4:	mov.w	r2, #1
    26c8:	strb	r2, [r3, #0]
    26ca:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    26cc:	adds	r4, #1
    26ce:	adds	r3, #1
    26d0:	cmp	r4, #5
    26d2:	add.w	r6, r6, #4
    26d6:	add.w	r5, r5, #4
    26da:	str	r3, [sp, #4]
    26dc:	bne.n	2670 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    26de:	ldr	r4, [pc, #588]	; (292c <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    26e0:	ldr	r5, [pc, #588]	; (2930 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    26e2:	ldrb	r2, [r4, #0]
			*reg = epconf;
    26e4:	ldr	r3, [pc, #588]	; (2934 <usb_isr+0x940>)
    26e6:	ldr	r7, [sp, #16]
    26e8:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    26ea:	movs	r1, #0
    26ec:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    26ee:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    26f0:	lsls	r2, r2, #28
    26f2:	bmi.n	27ea <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    26f4:	ldrb	r2, [r4, #1]
			*reg = epconf;
    26f6:	ldr	r1, [pc, #576]	; (2938 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    26f8:	ldr.w	r8, [pc, #588]	; 2948 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    26fc:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    26fe:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2700:	mov.w	r1, #0
    2704:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    2708:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    270c:	bmi.w	2896 <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2710:	ldrb	r2, [r4, #2]
			*reg = epconf;
    2712:	ldr	r1, [pc, #552]	; (293c <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2714:	ldr.w	r8, [pc, #560]	; 2948 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2718:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    271a:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    271c:	mov.w	r1, #0
    2720:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    2724:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2728:	bmi.w	286e <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    272c:	ldr	r1, [pc, #528]	; (2940 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    272e:	ldrb	r2, [r4, #3]
			*reg = epconf;
    2730:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2732:	movs	r1, #0
    2734:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    2738:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    273c:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    273e:	ldr.w	r8, [pc, #520]	; 2948 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2742:	bmi.n	2840 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2744:	ldrb	r2, [r4, #4]
			*reg = epconf;
    2746:	ldr	r1, [pc, #508]	; (2944 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2748:	ldr	r4, [pc, #508]	; (2948 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    274a:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    274c:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    274e:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2750:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    2754:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2758:	bmi.n	2816 <usb_isr+0x822>
    275a:	ldrb	r3, [r6, #0]
    275c:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    275e:	movs	r1, #0
    2760:	eor.w	r2, r3, #1
    2764:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    2768:	str.w	r1, [r9, #184]	; 0xb8
    276c:	b.n	23ca <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    276e:	ldr	r3, [sp, #4]
    2770:	mov.w	r2, #0
    2774:	strb	r2, [r3, #0]
    2776:	b.n	26ca <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    2778:	ldr	r2, [pc, #464]	; (294c <usb_isr+0x958>)
    277a:	ldr	r4, [r2, #4]
    277c:	cmp	r4, #0
    277e:	beq.w	2532 <usb_isr+0x53e>
    2782:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2784:	ldrh.w	lr, [r5, #4]
    2788:	b.n	2794 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    278a:	adds	r2, #12
			if (list->addr == NULL) break;
    278c:	ldr	r4, [r2, #4]
    278e:	cmp	r4, #0
    2790:	beq.w	2532 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2794:	ldrh	r3, [r2, #0]
    2796:	cmp	r3, r0
    2798:	bne.n	278a <usb_isr+0x796>
    279a:	ldrh	r3, [r2, #2]
    279c:	cmp	r3, lr
    279e:	bne.n	278a <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    27a0:	lsrs	r0, r0, #8
    27a2:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    27a4:	ite	eq
    27a6:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    27a8:	ldrhne	r0, [r2, #8]
    27aa:	b.n	25ba <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    27ac:	ldr	r4, [pc, #416]	; (2950 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    27ae:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    27b0:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    27b2:	strb	r2, [r4, #1]
    27b4:	b.n	25ba <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    27b6:	cmp.w	r1, #1280	; 0x500
    27ba:	bne.w	2532 <usb_isr+0x53e>
    27be:	movs	r3, #1
    27c0:	movs	r2, #0
    27c2:	str	r3, [sp, #4]
    27c4:	b.n	23ca <usb_isr+0x3d6>
    27c6:	movw	r2, #8993	; 0x2321
    27ca:	cmp	r1, r2
    27cc:	beq.n	27be <usb_isr+0x7ca>
    27ce:	b.n	2532 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    27d0:	ldrh	r2, [r5, #2]
    27d2:	cmp	r2, #0
    27d4:	bne.w	2532 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    27d8:	ldr	r4, [pc, #376]	; (2954 <usb_isr+0x960>)
    27da:	str	r0, [sp, #4]
    27dc:	lsls	r1, r1, #2
    27de:	add	r4, r1
    27e0:	ldrb	r1, [r4, #0]
    27e2:	bic.w	r1, r1, #2
    27e6:	strb	r1, [r4, #0]
    27e8:	b.n	23ca <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    27ea:	bl	1d94 <usb_malloc>
				if (p) {
    27ee:	cmp	r0, #0
    27f0:	beq.w	2960 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    27f4:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    27f6:	ldr	r2, [pc, #352]	; (2958 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    27f8:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    27fc:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2800:	bl	1d94 <usb_malloc>
				if (p) {
    2804:	cmp	r0, #0
    2806:	beq.n	2908 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    2808:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    280a:	ldr	r2, [pc, #336]	; (295c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    280c:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2810:	str.w	r2, [r9, #40]	; 0x28
    2814:	b.n	26f4 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2816:	bl	1d94 <usb_malloc>
				if (p) {
    281a:	cmp	r0, #0
    281c:	beq.n	28cc <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    281e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2820:	ldr	r2, [pc, #308]	; (2958 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2822:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2826:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    282a:	bl	1d94 <usb_malloc>
				if (p) {
    282e:	cmp	r0, #0
    2830:	beq.n	28c0 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    2832:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2834:	ldr	r2, [pc, #292]	; (295c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2836:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    283a:	str.w	r2, [r9, #168]	; 0xa8
    283e:	b.n	275a <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2840:	bl	1d94 <usb_malloc>
				if (p) {
    2844:	cmp	r0, #0
    2846:	beq.w	2978 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    284a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    284c:	ldr	r2, [pc, #264]	; (2958 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    284e:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2852:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2856:	bl	1d94 <usb_malloc>
				if (p) {
    285a:	cmp	r0, #0
    285c:	beq.w	296c <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    2860:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2862:	ldr	r2, [pc, #248]	; (295c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2864:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2868:	str.w	r2, [r9, #136]	; 0x88
    286c:	b.n	2744 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    286e:	bl	1d94 <usb_malloc>
				if (p) {
    2872:	cmp	r0, #0
    2874:	beq.n	28fc <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    2876:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2878:	ldr	r2, [pc, #220]	; (2958 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    287a:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    287e:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2882:	bl	1d94 <usb_malloc>
				if (p) {
    2886:	cbz	r0, 28f0 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    2888:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    288a:	ldr	r2, [pc, #208]	; (295c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    288c:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2890:	str.w	r2, [r9, #104]	; 0x68
    2894:	b.n	272c <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2896:	bl	1d94 <usb_malloc>
				if (p) {
    289a:	cbz	r0, 28e4 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    289c:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    289e:	ldr	r2, [pc, #184]	; (2958 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    28a0:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    28a4:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    28a8:	bl	1d94 <usb_malloc>
				if (p) {
    28ac:	cbz	r0, 28d8 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    28ae:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    28b0:	ldr	r2, [pc, #168]	; (295c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    28b2:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    28b6:	str.w	r2, [r9, #72]	; 0x48
    28ba:	b.n	2710 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    28bc:	movs	r0, #2
    28be:	b.n	25ba <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    28c0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    28c2:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    28c6:	adds	r2, #1
    28c8:	strb	r2, [r5, #0]
    28ca:	b.n	275a <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    28cc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    28ce:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    28d2:	adds	r2, #1
    28d4:	strb	r2, [r5, #0]
    28d6:	b.n	282a <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    28d8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    28da:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    28de:	adds	r2, #1
    28e0:	strb	r2, [r5, #0]
    28e2:	b.n	2710 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    28e4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    28e6:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    28ea:	adds	r2, #1
    28ec:	strb	r2, [r5, #0]
    28ee:	b.n	28a8 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    28f0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    28f2:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    28f6:	adds	r2, #1
    28f8:	strb	r2, [r5, #0]
    28fa:	b.n	272c <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    28fc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    28fe:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    2902:	adds	r2, #1
    2904:	strb	r2, [r5, #0]
    2906:	b.n	2882 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2908:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    290a:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    290e:	adds	r2, #1
    2910:	strb	r2, [r5, #0]
    2912:	b.n	26f4 <usb_isr+0x700>
    2914:	.word	0x1fff1724
    2918:	.word	0x1fff168c
    291c:	.word	0x1fff16e4
    2920:	.word	0x1fff16f8
    2924:	.word	0x1fff1634
    2928:	.word	0x1fff1bb4
    292c:	.word	0x00004d1c
    2930:	.word	0x1fff1715
    2934:	.word	0x400720c4
    2938:	.word	0x400720c8
    293c:	.word	0x400720cc
    2940:	.word	0x400720d0
    2944:	.word	0x400720d4
    2948:	.word	0x1fff0000
    294c:	.word	0x00004d24
    2950:	.word	0x1fff1718
    2954:	.word	0x400720c0
    2958:	.word	0x00400088
    295c:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2960:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2962:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    2966:	adds	r2, #1
    2968:	strb	r2, [r5, #0]
    296a:	b.n	2800 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    296c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    296e:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    2972:	adds	r2, #1
    2974:	strb	r2, [r5, #0]
    2976:	b.n	2744 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2978:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    297a:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    297e:	adds	r2, #1
    2980:	strb	r2, [r5, #0]
    2982:	b.n	2856 <usb_isr+0x862>
    2984:	cmp	r0, #64	; 0x40
    2986:	mov	ip, r0
    2988:	it	cs
    298a:	movcs.w	ip, #64	; 0x40
    298e:	add.w	r3, r4, ip
    2992:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2994:	movs	r3, #1
    2996:	rsb	r0, ip, r0
    299a:	mov.w	r8, ip, lsl #16
    299e:	movs	r2, #0
    29a0:	str	r3, [sp, #4]
    29a2:	b.n	23d4 <usb_isr+0x3e0>

000029a4 <usb_init>:
}



void usb_init(void)
{
    29a4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29a8:	ldr	r4, [pc, #156]	; (2a48 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    29aa:	bl	3598 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    29ae:	movs	r2, #0
    29b0:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    29b4:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    29b6:	str	r2, [r3, #0]
		table[i].addr = 0;
    29b8:	str	r2, [r3, #4]
    29ba:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    29bc:	cmp	r3, r0
		table[i].desc = 0;
    29be:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    29c2:	bne.n	29b6 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    29c4:	ldr	r0, [pc, #132]	; (2a4c <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    29c6:	ldr	r2, [pc, #136]	; (2a50 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    29c8:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    29ca:	ldr.w	lr, [pc, #156]	; 2a68 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    29ce:	ldr	r6, [pc, #132]	; (2a54 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    29d0:	ldr	r5, [pc, #132]	; (2a58 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    29d2:	ldr	r7, [pc, #136]	; (2a5c <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    29d4:	ldr.w	ip, [pc, #148]	; 2a6c <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    29d8:	ldr.w	r8, [pc, #148]	; 2a70 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    29dc:	orr.w	r3, r3, #262144	; 0x40000
    29e0:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    29e2:	ldr	r3, [r2, #0]
    29e4:	orr.w	r3, r3, #50331648	; 0x3000000
    29e8:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    29ea:	movs	r3, #3
    29ec:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    29f0:	movs	r3, #160	; 0xa0
    29f2:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    29f4:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    29f8:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    29fc:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2a00:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2a02:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2a04:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2a08:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2a0a:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2a0c:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2a0e:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2a10:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2a12:	ldr	r5, [pc, #76]	; (2a60 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2a14:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2a18:	ldr	r0, [pc, #72]	; (2a64 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    2a1a:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    2a1e:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    2a20:	movs	r3, #1
    2a22:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2a26:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2a2a:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2a2e:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2a30:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    2a32:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2a36:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2a38:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2a3a:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2a3e:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2a42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a46:	nop
    2a48:	.word	0x1fff0000
    2a4c:	.word	0x40048034
    2a50:	.word	0x4000d800
    2a54:	.word	0x40072140
    2a58:	.word	0x4007209c
    2a5c:	.word	0x400720b0
    2a60:	.word	0xe000e435
    2a64:	.word	0xe000e104
    2a68:	.word	0x40072144
    2a6c:	.word	0x40072080
    2a70:	.word	0x40072088

00002a74 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2a74:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    2a76:	ldr	r4, [pc, #176]	; (2b28 <yield+0xb4>)
    2a78:	ldrb	r3, [r4, #0]
    2a7a:	cbz	r3, 2a7e <yield+0xa>
    2a7c:	pop	{r3, r4, r5, pc}
	running = 1;
    2a7e:	movs	r3, #1
    2a80:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2a82:	bl	fa0 <usb_serial_available>
	if (Serial.available()) serialEvent();
    2a86:	cmp	r0, #0
    2a88:	bne.n	2b10 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    2a8a:	bl	3368 <serial_available>
	if (Serial1.available()) serialEvent1();
    2a8e:	cmp	r0, #0
    2a90:	bne.n	2b0a <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    2a92:	bl	3050 <serial2_available>
	if (Serial2.available()) serialEvent2();
    2a96:	cmp	r0, #0
    2a98:	bne.n	2b04 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    2a9a:	bl	368c <serial3_available>
	if (Serial3.available()) serialEvent3();
    2a9e:	cbnz	r0, 2afe <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    2aa0:	bl	317c <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2aa4:	cbnz	r0, 2af8 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    2aa6:	bl	2f58 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2aaa:	cbnz	r0, 2af2 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    2aac:	bl	3494 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2ab0:	cbnz	r0, 2aec <yield+0x78>
#endif
	running = 0;
    2ab2:	movs	r3, #0
    2ab4:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2ab6:	mrs	r3, IPSR
		if (ipsr != 0) return;
    2aba:	cmp	r3, #0
    2abc:	bne.n	2a7c <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2abe:	mrs	r1, PRIMASK
		__disable_irq();
    2ac2:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    2ac4:	ldr	r3, [pc, #100]	; (2b2c <yield+0xb8>)
    2ac6:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    2ac8:	cbz	r0, 2b16 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    2aca:	ldr	r4, [pc, #100]	; (2b30 <yield+0xbc>)
    2acc:	ldrb	r2, [r4, #0]
    2ace:	cbnz	r2, 2b16 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    2ad0:	ldr	r5, [r0, #20]
    2ad2:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2ad4:	movs	r3, #1
    2ad6:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    2ad8:	cbz	r5, 2b1e <yield+0xaa>
			firstYield->_prev = nullptr;
    2ada:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2adc:	cbnz	r1, 2ae0 <yield+0x6c>
    2ade:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2ae0:	movs	r5, #0
    2ae2:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    2ae4:	ldr	r3, [r0, #8]
    2ae6:	blx	r3
		runningFromYield = false;
    2ae8:	strb	r5, [r4, #0]
    2aea:	b.n	2a7c <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2aec:	bl	2e1c <serialEvent6()>
    2af0:	b.n	2ab2 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2af2:	bl	2b38 <serialEvent5()>
    2af6:	b.n	2aac <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2af8:	bl	2e08 <serialEvent4()>
    2afc:	b.n	2aa6 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    2afe:	bl	3788 <serialEvent3()>
    2b02:	b.n	2aa0 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    2b04:	bl	2e04 <serialEvent2()>
    2b08:	b.n	2a9a <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    2b0a:	bl	3784 <serialEvent1()>
    2b0e:	b.n	2a92 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    2b10:	bl	2b64 <serialEvent()>
    2b14:	b.n	2a8a <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2b16:	cmp	r1, #0
    2b18:	bne.n	2a7c <yield+0x8>
    2b1a:	cpsie	i
    2b1c:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    2b1e:	ldr	r3, [pc, #20]	; (2b34 <yield+0xc0>)
    2b20:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2b22:	cmp	r1, #0
    2b24:	bne.n	2ae0 <yield+0x6c>
    2b26:	b.n	2ade <yield+0x6a>
    2b28:	.word	0x1fff1729
    2b2c:	.word	0x1fff1a3c
    2b30:	.word	0x1fff1a40
    2b34:	.word	0x1fff1a38

00002b38 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    2b38:	bx	lr
    2b3a:	nop

00002b3c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    2b3c:	b.w	fbc <usb_serial_flush_input>

00002b40 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    2b40:	b.w	f70 <usb_serial_peekchar>

00002b44 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    2b44:	b.w	f28 <usb_serial_getchar>

00002b48 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2b48:	b.w	fa0 <usb_serial_available>

00002b4c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2b4c:	b.w	115c <usb_serial_flush_output>

00002b50 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2b50:	b.w	1114 <usb_serial_write_buffer_free>

00002b54 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2b54:	mov	r0, r1
    2b56:	mov	r1, r2
    2b58:	b.w	ff4 <usb_serial_write>

00002b5c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2b5c:	mov	r0, r1
    2b5e:	b.w	10fc <usb_serial_putchar>
    2b62:	nop

00002b64 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    2b64:	bx	lr
    2b66:	nop

00002b68 <Print::print(String const&)>:
	return count;
}


size_t Print::print(const String &s)
{
    2b68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2b6c:	ldr	r4, [r1, #8]
    2b6e:	sub	sp, #44	; 0x2c
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    2b70:	cbz	r4, 2bae <Print::print(String const&)+0x46>
    2b72:	movs	r5, #0
    2b74:	mov	r6, r0
    2b76:	mov	r9, r1
    2b78:	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    2b7a:	mov	r3, r5
    2b7c:	movs	r2, #33	; 0x21
    2b7e:	add	r1, sp, #4
    2b80:	mov	r0, r9
    2b82:	bl	2dd0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    2b86:	ldr	r2, [r6, #0]
    2b88:	cmp	r4, #32
    2b8a:	mov	r3, r4
    2b8c:	it	cs
    2b8e:	movcs	r3, #32
    2b90:	ldr.w	r8, [r2, #4]
    2b94:	add	r1, sp, #4
    2b96:	mov	r2, r3
    2b98:	mov	r0, r6
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
    2b9a:	add	r5, r3
		len -= nbytes;
    2b9c:	subs	r4, r4, r3
		count += write(buffer, nbytes);
    2b9e:	blx	r8
    2ba0:	add	r7, r0
{
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    2ba2:	cmp	r4, #0
    2ba4:	bne.n	2b7a <Print::print(String const&)+0x12>
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
    2ba6:	mov	r0, r7
    2ba8:	add	sp, #44	; 0x2c
    2baa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}


size_t Print::print(const String &s)
{
	uint8_t buffer[33];
	size_t count = 0;
    2bae:	mov	r7, r4
    2bb0:	b.n	2ba6 <Print::print(String const&)+0x3e>
    2bb2:	nop

00002bb4 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2bb4:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    2bb6:	ldr	r2, [pc, #24]	; (2bd0 <Print::println()+0x1c>)
	return write(buf, 2);
    2bb8:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2bba:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    2bbc:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2bbe:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    2bc0:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2bc2:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    2bc6:	movs	r2, #2
    2bc8:	blx	r3
}
    2bca:	add	sp, #12
    2bcc:	ldr.w	pc, [sp], #4
    2bd0:	.word	0x00004d18

00002bd4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    2bd4:	push	{r4, r5, r6, r7, lr}
    2bd6:	mov	r7, r0
    2bd8:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    2bda:	cmp	r2, #0
    2bdc:	beq.n	2c46 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    2bde:	cmp	r2, #1
    2be0:	it	eq
    2be2:	moveq	r2, #10
	}


	if (n == 0) {
    2be4:	cbz	r1, 2c3c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    2be6:	movs	r4, #33	; 0x21
    2be8:	b.n	2bec <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    2bea:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    2bec:	udiv	r5, r1, r2
    2bf0:	mls	r1, r2, r5, r1
    2bf4:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2bf6:	cmp	r1, #9
    2bf8:	add.w	r1, r0, #48	; 0x30
    2bfc:	it	ls
    2bfe:	uxtbls	r0, r1
    2c00:	add	r1, sp, #40	; 0x28
    2c02:	it	hi
    2c04:	addhi	r0, #55	; 0x37
    2c06:	add	r1, r4
    2c08:	it	hi
    2c0a:	uxtbhi	r0, r0
    2c0c:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    2c10:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    2c12:	mov	r1, r5
    2c14:	cmp	r5, #0
    2c16:	bne.n	2bea <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    2c18:	cbz	r3, 2c28 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    2c1a:	subs	r4, #1
    2c1c:	uxtb	r4, r4
		buf[i] = '-';
    2c1e:	add	r3, sp, #40	; 0x28
    2c20:	add	r3, r4
    2c22:	movs	r2, #45	; 0x2d
    2c24:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    2c28:	ldr	r3, [r7, #0]
    2c2a:	add	r2, sp, #4
    2c2c:	adds	r1, r2, r4
    2c2e:	ldr	r3, [r3, #4]
    2c30:	mov	r0, r7
    2c32:	rsb	r2, r4, #34	; 0x22
    2c36:	blx	r3
}
    2c38:	add	sp, #44	; 0x2c
    2c3a:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2c3c:	movs	r2, #48	; 0x30
    2c3e:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    2c42:	movs	r4, #33	; 0x21
    2c44:	b.n	2c18 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    2c46:	ldr	r3, [r0, #0]
    2c48:	uxtb	r1, r1
    2c4a:	ldr	r3, [r3, #0]
    2c4c:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    2c4e:	add	sp, #44	; 0x2c
    2c50:	pop	{r4, r5, r6, r7, pc}
    2c52:	nop

00002c54 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    2c54:	cmp	r1, #0
		sign = '-';
		n = -n;
    2c56:	itte	lt
    2c58:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    2c5a:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    2c5c:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    2c5e:	movs	r2, #10
    2c60:	b.w	2bd4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00002c64 <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    2c64:	push	{r4, lr}
    2c66:	mov	r4, r0
{
	free(buffer);
    2c68:	ldr	r0, [r0, #0]
    2c6a:	bl	39ec <free>
}
    2c6e:	mov	r0, r4
    2c70:	pop	{r4, pc}
    2c72:	nop

00002c74 <String::reserve(unsigned int)>:
	len = 0;
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
    2c74:	push	{r3, r4, r5, lr}
	if (capacity >= size) return 1;
    2c76:	ldr	r3, [r0, #4]
    2c78:	cmp	r3, r1
    2c7a:	bcc.n	2c80 <String::reserve(unsigned int)+0xc>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    2c7c:	movs	r0, #1
		return 1;
	}
	return 0;
}
    2c7e:	pop	{r3, r4, r5, pc}
    2c80:	mov	r5, r1
    2c82:	mov	r4, r0

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2c84:	adds	r1, #1
    2c86:	ldr	r0, [r0, #0]
    2c88:	bl	403c <realloc>
	if (newbuffer) {
    2c8c:	cmp	r0, #0
    2c8e:	beq.n	2c7e <String::reserve(unsigned int)+0xa>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    2c90:	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    2c92:	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    2c96:	cmp	r3, #0
    2c98:	bne.n	2c7c <String::reserve(unsigned int)+0x8>
    2c9a:	strb	r3, [r0, #0]
    2c9c:	b.n	2c7c <String::reserve(unsigned int)+0x8>
    2c9e:	nop

00002ca0 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    2ca0:	push	{r3, r4, r5, r6, r7, lr}
    2ca2:	mov	r4, r0
	if (length == 0) {
    2ca4:	mov	r5, r2
    2ca6:	cbnz	r2, 2cb6 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    2ca8:	ldr	r3, [r0, #0]
    2caa:	cbz	r3, 2cae <String::copy(char const*, unsigned int)+0xe>
    2cac:	strb	r2, [r3, #0]
		len = 0;
    2cae:	movs	r3, #0
    2cb0:	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    2cb2:	mov	r0, r4
    2cb4:	pop	{r3, r4, r5, r6, r7, pc}
    2cb6:	mov	r6, r1
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
    2cb8:	mov	r1, r2
    2cba:	bl	2c74 <String::reserve(unsigned int)>
    2cbe:	mov	r7, r0
    2cc0:	cbnz	r0, 2cd6 <String::copy(char const*, unsigned int)+0x36>
		if (buffer) {
    2cc2:	ldr	r0, [r4, #0]
    2cc4:	cbz	r0, 2ccc <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    2cc6:	bl	39ec <free>
			buffer = NULL;
    2cca:	str	r7, [r4, #0]
		}
		len = capacity = 0;
    2ccc:	movs	r3, #0
    2cce:	str	r3, [r4, #4]
    2cd0:	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    2cd2:	mov	r0, r4
    2cd4:	pop	{r3, r4, r5, r6, r7, pc}
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    2cd6:	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    2cd8:	mov	r1, r6
    2cda:	ldr	r0, [r4, #0]
    2cdc:	bl	4450 <strcpy>
	return *this;
    2ce0:	b.n	2cb2 <String::copy(char const*, unsigned int)+0x12>
    2ce2:	nop

00002ce4 <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    2ce4:	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2ce6:	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    2ce8:	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2cea:	str	r3, [r0, #0]
	capacity = 0;
    2cec:	str	r3, [r0, #4]
	len = 0;
    2cee:	str	r3, [r0, #8]
	flags = 0;
    2cf0:	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    2cf2:	cbz	r1, 2d06 <String::String(char const*)+0x22>
    2cf4:	mov	r0, r1
    2cf6:	mov	r5, r1
    2cf8:	bl	4540 <strlen>
    2cfc:	mov	r1, r5
    2cfe:	mov	r2, r0
    2d00:	mov	r0, r4
    2d02:	bl	2ca0 <String::copy(char const*, unsigned int)>
}
    2d06:	mov	r0, r4
    2d08:	pop	{r3, r4, r5, pc}
    2d0a:	nop

00002d0c <String::String(String const&)>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2d0c:	movs	r3, #0
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    2d0e:	cmp	r0, r1
{
	init();
	*this = pgmstr;
}

String::String(const String &value)
    2d10:	push	{r4, lr}
    2d12:	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2d14:	str	r3, [r0, #0]
	capacity = 0;
    2d16:	str	r3, [r0, #4]
	len = 0;
    2d18:	str	r3, [r0, #8]
	flags = 0;
    2d1a:	strb	r3, [r0, #12]
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    2d1c:	beq.n	2d26 <String::String(String const&)+0x1a>
	return copy(rhs.buffer, rhs.len);
    2d1e:	ldr	r2, [r1, #8]
    2d20:	ldr	r1, [r1, #0]
    2d22:	bl	2ca0 <String::copy(char const*, unsigned int)>

String::String(const String &value)
{
	init();
	*this = value;
}
    2d26:	mov	r0, r4
    2d28:	pop	{r4, pc}
    2d2a:	nop

00002d2c <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    2d2c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    2d30:	ldr	r3, [r0, #0]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    2d32:	mov	r7, r1
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    2d34:	cmp	r3, r7
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    2d36:	mov	r4, r0
	unsigned int newlen = len + length;
    2d38:	ldr	r1, [r0, #8]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    2d3a:	mov	r5, r2
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    2d3c:	bhi.n	2d54 <String::append(char const*, unsigned int)+0x28>
    2d3e:	adds	r2, r3, r1
    2d40:	cmp	r7, r2
    2d42:	bcs.n	2d54 <String::append(char const*, unsigned int)+0x28>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    2d44:	rsb	r9, r3, r7
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    2d48:	mov.w	r8, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    2d4c:	cbnz	r5, 2d5c <String::append(char const*, unsigned int)+0x30>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    2d4e:	mov	r0, r4
    2d50:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    2d54:	mov.w	r8, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    2d58:	cmp	r5, #0
    2d5a:	beq.n	2d4e <String::append(char const*, unsigned int)+0x22>
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    2d5c:	adds	r6, r1, r5
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    2d5e:	mov	r1, r6
    2d60:	mov	r0, r4
    2d62:	bl	2c74 <String::reserve(unsigned int)>
    2d66:	cmp	r0, #0
    2d68:	beq.n	2d4e <String::append(char const*, unsigned int)+0x22>
	if ( self ) {
    2d6a:	cmp.w	r8, #0
    2d6e:	beq.n	2d8e <String::append(char const*, unsigned int)+0x62>
		memcpy(buffer + len, buffer+buffer_offset, length);
    2d70:	ldr	r3, [r4, #0]
    2d72:	ldr	r0, [r4, #8]
    2d74:	mov	r2, r5
    2d76:	add.w	r1, r3, r9
    2d7a:	add	r0, r3
    2d7c:	bl	2e24 <memcpy>
		buffer[newlen] = 0;
    2d80:	ldr	r3, [r4, #0]
    2d82:	movs	r2, #0
    2d84:	strb	r2, [r3, r6]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    2d86:	str	r6, [r4, #8]
	return *this;
}
    2d88:	mov	r0, r4
    2d8a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    2d8e:	ldr	r0, [r4, #0]
    2d90:	ldr	r3, [r4, #8]
    2d92:	mov	r1, r7
    2d94:	add	r0, r3
    2d96:	bl	4450 <strcpy>
    2d9a:	b.n	2d86 <String::append(char const*, unsigned int)+0x5a>

00002d9c <String::append(long)>:
	append(buf, strlen(buf));
	return *this;
}

String & String::append(long num)
{
    2d9c:	push	{r4, lr}
    2d9e:	mov	r3, r1
    2da0:	sub	sp, #16
    2da2:	mov	r4, r0
	char buf[12];
	ltoa(num, buf, 10);
    2da4:	add	r1, sp, #4
    2da6:	mov	r0, r3
    2da8:	movs	r2, #10
    2daa:	bl	3668 <ltoa>
	append(buf, strlen(buf));
    2dae:	add	r0, sp, #4
    2db0:	bl	4540 <strlen>
    2db4:	add	r1, sp, #4
    2db6:	mov	r2, r0
    2db8:	mov	r0, r4
    2dba:	bl	2d2c <String::append(char const*, unsigned int)>
	return *this;
}
    2dbe:	mov	r0, r4
    2dc0:	add	sp, #16
    2dc2:	pop	{r4, pc}

00002dc4 <operator+(StringSumHelper const&, int)>:
	a.append(c);
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    2dc4:	push	{r4, lr}
    2dc6:	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append((long)num);
    2dc8:	bl	2d9c <String::append(long)>
	return a;
}
    2dcc:	mov	r0, r4
    2dce:	pop	{r4, pc}

00002dd0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    2dd0:	cbz	r2, 2e00 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
    2dd2:	cbz	r1, 2e00 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    2dd4:	push	{r3, r4, r5, lr}
	if (!bufsize || !buf) return;
	if (index >= len) {
    2dd6:	ldr	r4, [r0, #8]
    2dd8:	cmp	r4, r3
    2dda:	bls.n	2dfa <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2a>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    2ddc:	subs	r4, r4, r3
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    2dde:	subs	r2, #1
    2de0:	mov	r5, r1
    2de2:	cmp	r4, r2
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    2de4:	ldr	r1, [r0, #0]
    2de6:	it	cs
    2de8:	movcs	r4, r2
    2dea:	add	r1, r3
    2dec:	mov	r2, r4
    2dee:	mov	r0, r5
    2df0:	bl	461c <strncpy>
	buf[n] = 0;
    2df4:	movs	r3, #0
    2df6:	strb	r3, [r5, r4]
    2df8:	pop	{r3, r4, r5, pc}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
    2dfa:	movs	r3, #0
    2dfc:	strb	r3, [r1, #0]
		return;
    2dfe:	pop	{r3, r4, r5, pc}
    2e00:	bx	lr
    2e02:	nop

00002e04 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    2e04:	bx	lr
    2e06:	nop

00002e08 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    2e08:	bx	lr
    2e0a:	nop

00002e0c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2e0c:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    2e0e:	bl	87c <setup>
	while (1) {
		loop();
    2e12:	bl	880 <loop>
		yield();
    2e16:	bl	2a74 <yield>
    2e1a:	b.n	2e12 <main+0x6>

00002e1c <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    2e1c:	bx	lr
    2e1e:	nop

00002e20 <operator new(unsigned int)>:
    2e20:	b.w	39dc <malloc>

00002e24 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2e24:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    2e26:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    2e2a:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    2e2e:	bne.n	2f0c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2e30:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    2e32:	bcc.n	2eb8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2e34:	ldr.w	r3, [r1], #4
    2e38:	str.w	r3, [r0], #4
    2e3c:	ldr.w	r3, [r1], #4
    2e40:	str.w	r3, [r0], #4
    2e44:	ldr.w	r3, [r1], #4
    2e48:	str.w	r3, [r0], #4
    2e4c:	ldr.w	r3, [r1], #4
    2e50:	str.w	r3, [r0], #4
    2e54:	ldr.w	r3, [r1], #4
    2e58:	str.w	r3, [r0], #4
    2e5c:	ldr.w	r3, [r1], #4
    2e60:	str.w	r3, [r0], #4
    2e64:	ldr.w	r3, [r1], #4
    2e68:	str.w	r3, [r0], #4
    2e6c:	ldr.w	r3, [r1], #4
    2e70:	str.w	r3, [r0], #4
    2e74:	ldr.w	r3, [r1], #4
    2e78:	str.w	r3, [r0], #4
    2e7c:	ldr.w	r3, [r1], #4
    2e80:	str.w	r3, [r0], #4
    2e84:	ldr.w	r3, [r1], #4
    2e88:	str.w	r3, [r0], #4
    2e8c:	ldr.w	r3, [r1], #4
    2e90:	str.w	r3, [r0], #4
    2e94:	ldr.w	r3, [r1], #4
    2e98:	str.w	r3, [r0], #4
    2e9c:	ldr.w	r3, [r1], #4
    2ea0:	str.w	r3, [r0], #4
    2ea4:	ldr.w	r3, [r1], #4
    2ea8:	str.w	r3, [r0], #4
    2eac:	ldr.w	r3, [r1], #4
    2eb0:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2eb4:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    2eb6:	bcs.n	2e34 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2eb8:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2eba:	bcc.n	2ee0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2ebc:	ldr.w	r3, [r1], #4
    2ec0:	str.w	r3, [r0], #4
    2ec4:	ldr.w	r3, [r1], #4
    2ec8:	str.w	r3, [r0], #4
    2ecc:	ldr.w	r3, [r1], #4
    2ed0:	str.w	r3, [r0], #4
    2ed4:	ldr.w	r3, [r1], #4
    2ed8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2edc:	subs	r2, #16
	bhs	.Lmid_block_loop
    2ede:	bcs.n	2ebc <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    2ee0:	adds	r2, #12
	blo	.Lcopy_less_than_4
    2ee2:	bcc.n	2ef0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    2ee4:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2ee8:	str.w	r3, [r0], #4
	subs	r2, #4
    2eec:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    2eee:	bcs.n	2ee4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    2ef0:	adds	r2, #4
	beq	.Ldone
    2ef2:	beq.n	2f06 <memcpy+0xe2>

	lsls	r2, r2, #31
    2ef4:	lsls	r2, r2, #31
	itt ne
    2ef6:	itt	ne
	ldrbne  r3, [r1], #1
    2ef8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2efc:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    2f00:	bcc.n	2f06 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    2f02:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    2f04:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2f06:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2f08:	bx	lr
    2f0a:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2f0c:	cmp	r2, #8
	blo	.Lbyte_copy
    2f0e:	bcc.n	2f38 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2f10:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    2f12:	beq.n	2e30 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    2f14:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2f18:	beq.n	2e30 <memcpy+0xc>

	rsb	r3, #4
    2f1a:	rsb	r3, r3, #4
	subs	r2, r3
    2f1e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    2f20:	lsls	r3, r3, #31
	itt ne
    2f22:	itt	ne
	ldrbne  r3, [r1], #1
    2f24:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2f28:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2f2c:	bcc.n	2e30 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    2f2e:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    2f32:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    2f36:	b.n	2e30 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2f38:	subs	r2, #4
	blo	.Lcopy_less_than_4
    2f3a:	bcc.n	2ef0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2f3c:	subs	r2, #1
	ldrb    r3, [r1], #1
    2f3e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    2f42:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    2f46:	bcs.n	2f3c <memcpy+0x118>

	ldrb	r3, [r1]
    2f48:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    2f4a:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2f4c:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    2f4e:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    2f50:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    2f52:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2f54:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2f56:	bx	lr

00002f58 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f58:	ldr	r2, [pc, #20]	; (2f70 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    2f5a:	ldr	r3, [pc, #24]	; (2f74 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f5c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2f5e:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2f60:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2f62:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2f64:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    2f66:	it	cc
    2f68:	addcc	r0, #64	; 0x40
    2f6a:	subs	r0, r0, r3
}
    2f6c:	bx	lr
    2f6e:	nop
    2f70:	.word	0x1fff1730
    2f74:	.word	0x1fff1731

00002f78 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    2f78:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    2f7a:	ldr	r3, [pc, #172]	; (3028 <uart4_status_isr+0xb0>)
    2f7c:	ldrb	r2, [r3, #4]
    2f7e:	lsls	r4, r2, #26
    2f80:	bpl.n	2fc2 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2f82:	ldr	r0, [pc, #168]	; (302c <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2f84:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2f86:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2f88:	ldr	r1, [pc, #164]	; (3030 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2f8a:	adds	r3, #1
    2f8c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2f8e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2f90:	it	gt
    2f92:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2f94:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2f96:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2f98:	beq.n	2fa2 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    2f9a:	ldr	r4, [pc, #152]	; (3034 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    2f9c:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2f9e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2fa0:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2fa2:	ldr	r2, [pc, #148]	; (3038 <uart4_status_isr+0xc0>)
    2fa4:	ldr	r1, [r2, #0]
    2fa6:	cbz	r1, 2fc2 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2fa8:	ldr	r2, [pc, #144]	; (303c <uart4_status_isr+0xc4>)
    2faa:	ldrb	r2, [r2, #0]
    2fac:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2fae:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2fb0:	itet	cc
    2fb2:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2fb6:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2fb8:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2fba:	cmp	r3, #39	; 0x27
    2fbc:	itt	gt
    2fbe:	movgt	r3, #1
    2fc0:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    2fc2:	ldr	r2, [pc, #100]	; (3028 <uart4_status_isr+0xb0>)
    2fc4:	ldrb	r3, [r2, #3]
    2fc6:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2fc8:	lsls	r0, r3, #24
    2fca:	bmi.n	2ff0 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    2fcc:	lsls	r2, r3, #25
    2fce:	bpl.n	2fec <uart4_status_isr+0x74>
    2fd0:	ldr	r3, [pc, #84]	; (3028 <uart4_status_isr+0xb0>)
    2fd2:	ldrb	r3, [r3, #4]
    2fd4:	lsls	r3, r3, #25
    2fd6:	bpl.n	2fec <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2fd8:	ldr	r3, [pc, #100]	; (3040 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2fda:	ldr	r1, [pc, #104]	; (3044 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2fdc:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2fde:	movs	r2, #0
    2fe0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2fe2:	cbz	r3, 2fe6 <uart4_status_isr+0x6e>
    2fe4:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    2fe6:	ldr	r3, [pc, #64]	; (3028 <uart4_status_isr+0xb0>)
    2fe8:	movs	r2, #44	; 0x2c
    2fea:	strb	r2, [r3, #3]
	}
}
    2fec:	pop	{r4, r5}
    2fee:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2ff0:	ldrb	r1, [r2, #4]
    2ff2:	lsls	r1, r1, #24
    2ff4:	bpl.n	2fcc <uart4_status_isr+0x54>
		head = tx_buffer_head;
    2ff6:	ldr	r1, [pc, #80]	; (3048 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2ff8:	ldr	r0, [pc, #64]	; (303c <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2ffa:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2ffc:	ldrb	r1, [r0, #0]
    2ffe:	uxtb	r1, r1
		if (head == tail) {
    3000:	cmp	r4, r1
    3002:	beq.n	3020 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    3004:	adds	r2, r1, #1
    3006:	cmp	r2, #39	; 0x27
    3008:	itt	hi
    300a:	movhi	r1, #0
    300c:	movhi	r2, r1
			n = tx_buffer[tail];
    300e:	ldr	r5, [pc, #60]	; (304c <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3010:	ldr	r4, [pc, #20]	; (3028 <uart4_status_isr+0xb0>)
    3012:	it	ls
    3014:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3016:	ldrb	r2, [r5, r2]
    3018:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    301a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    301c:	strb	r1, [r0, #0]
    301e:	b.n	2fcc <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    3020:	movs	r1, #108	; 0x6c
    3022:	strb	r1, [r2, #3]
    3024:	b.n	2fcc <uart4_status_isr+0x54>
    3026:	nop
    3028:	.word	0x400ea000
    302c:	.word	0x1fff1730
    3030:	.word	0x1fff1731
    3034:	.word	0x1fff175c
    3038:	.word	0x1fff172c
    303c:	.word	0x1fff179d
    3040:	.word	0x1fff17a0
    3044:	.word	0x1fff179c
    3048:	.word	0x1fff17a4
    304c:	.word	0x1fff1734

00003050 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3050:	ldr	r2, [pc, #20]	; (3068 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    3052:	ldr	r3, [pc, #24]	; (306c <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3054:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3056:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3058:	uxtb	r0, r0
	tail = rx_buffer_tail;
    305a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    305c:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    305e:	it	cc
    3060:	addcc	r0, #64	; 0x40
    3062:	subs	r0, r0, r3
}
    3064:	bx	lr
    3066:	nop
    3068:	.word	0x1fff1818
    306c:	.word	0x1fff17ad

00003070 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    3070:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3072:	ldr	r3, [pc, #224]	; (3154 <uart1_status_isr+0xe4>)
    3074:	ldrb	r2, [r3, #4]
    3076:	tst.w	r2, #48	; 0x30
    307a:	beq.n	30d6 <uart1_status_isr+0x66>
		__disable_irq();
    307c:	cpsid	i
		avail = UART1_RCFIFO;
    307e:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3080:	and.w	r2, r1, #255	; 0xff
    3084:	cmp	r1, #0
    3086:	beq.n	3104 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3088:	cpsie	i
			head = rx_buffer_head;
    308a:	ldr	r7, [pc, #204]	; (3158 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    308c:	ldr	r1, [pc, #204]	; (315c <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    308e:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3090:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3092:	ldr	r6, [pc, #204]	; (3160 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3094:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3096:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3098:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    309a:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    309c:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    309e:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    30a0:	it	cs
    30a2:	movcs	r3, #0
				if (newhead != tail) {
    30a4:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    30a6:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    30aa:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    30ac:	itt	ne
    30ae:	strbne	r1, [r6, r3]
    30b0:	movne	r0, r3
				}
			} while (--avail > 0);
    30b2:	ands.w	r2, r2, #255	; 0xff
    30b6:	bne.n	309a <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    30b8:	ldr	r3, [pc, #168]	; (3164 <uart1_status_isr+0xf4>)
    30ba:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    30bc:	uxtb	r2, r0
    30be:	strb	r2, [r7, #0]
			if (rts_pin) {
    30c0:	cbz	r3, 30d6 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    30c2:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    30c4:	itet	cc
    30c6:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    30ca:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    30cc:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    30ce:	cmp	r0, #39	; 0x27
    30d0:	itt	gt
    30d2:	movgt	r2, #1
    30d4:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    30d6:	ldr	r1, [pc, #124]	; (3154 <uart1_status_isr+0xe4>)
    30d8:	ldrb	r2, [r1, #3]
    30da:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    30dc:	lsls	r5, r2, #24
    30de:	bmi.n	310e <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    30e0:	lsls	r2, r2, #25
    30e2:	bpl.n	3100 <uart1_status_isr+0x90>
    30e4:	ldr	r3, [pc, #108]	; (3154 <uart1_status_isr+0xe4>)
    30e6:	ldrb	r3, [r3, #4]
    30e8:	lsls	r3, r3, #25
    30ea:	bpl.n	3100 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    30ec:	ldr	r3, [pc, #120]	; (3168 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    30ee:	ldr	r1, [pc, #124]	; (316c <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    30f0:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    30f2:	movs	r2, #0
    30f4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    30f6:	cbz	r3, 30fa <uart1_status_isr+0x8a>
    30f8:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    30fa:	ldr	r3, [pc, #88]	; (3154 <uart1_status_isr+0xe4>)
    30fc:	movs	r2, #60	; 0x3c
    30fe:	strb	r2, [r3, #3]
	}
}
    3100:	pop	{r4, r5, r6, r7}
    3102:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3104:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    3106:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3108:	strb	r2, [r3, #17]
			__enable_irq();
    310a:	cpsie	i
    310c:	b.n	30d6 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    310e:	ldrb	r3, [r1, #4]
    3110:	lsls	r4, r3, #24
    3112:	bpl.n	30e0 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    3114:	ldr	r3, [pc, #88]	; (3170 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    3116:	ldr	r6, [pc, #92]	; (3174 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3118:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    311a:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    311c:	uxtb	r4, r4
		tail = tx_buffer_tail;
    311e:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3120:	cmp	r4, r3
    3122:	beq.n	3142 <uart1_status_isr+0xd2>
    3124:	ldr	r5, [pc, #80]	; (3178 <uart1_status_isr+0x108>)
    3126:	b.n	312c <uart1_status_isr+0xbc>
    3128:	cmp	r3, r4
    312a:	beq.n	3142 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    312c:	adds	r3, #1
    312e:	cmp	r3, #40	; 0x28
    3130:	it	cs
    3132:	movcs	r3, #0
			avail = UART1_S1;
    3134:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3136:	ldrb	r0, [r5, r3]
    3138:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    313a:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    313c:	ldrb	r0, [r1, #20]
    313e:	cmp	r0, #7
    3140:	bls.n	3128 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    3142:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3144:	ldr	r1, [pc, #12]	; (3154 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    3146:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3148:	ldrb	r3, [r1, #4]
    314a:	lsls	r0, r3, #24
    314c:	itt	mi
    314e:	movmi	r3, #124	; 0x7c
    3150:	strbmi	r3, [r1, #3]
    3152:	b.n	30e0 <uart1_status_isr+0x70>
    3154:	.word	0x4006b000
    3158:	.word	0x1fff1818
    315c:	.word	0x1fff17ad
    3160:	.word	0x1fff17d8
    3164:	.word	0x1fff17a8
    3168:	.word	0x1fff181c
    316c:	.word	0x1fff17ac
    3170:	.word	0x1fff1820
    3174:	.word	0x1fff1819
    3178:	.word	0x1fff17b0

0000317c <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    317c:	ldr	r2, [pc, #20]	; (3194 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    317e:	ldr	r3, [pc, #24]	; (3198 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3180:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3182:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3184:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3186:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3188:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    318a:	it	cc
    318c:	addcc	r0, #64	; 0x40
    318e:	subs	r0, r0, r3
}
    3190:	bx	lr
    3192:	nop
    3194:	.word	0x1fff1828
    3198:	.word	0x1fff1829

0000319c <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    319c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    319e:	ldr	r3, [pc, #172]	; (324c <uart3_status_isr+0xb0>)
    31a0:	ldrb	r2, [r3, #4]
    31a2:	lsls	r4, r2, #26
    31a4:	bpl.n	31e6 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    31a6:	ldr	r0, [pc, #168]	; (3250 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    31a8:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    31aa:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    31ac:	ldr	r1, [pc, #164]	; (3254 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    31ae:	adds	r3, #1
    31b0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    31b2:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    31b4:	it	gt
    31b6:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    31b8:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    31ba:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    31bc:	beq.n	31c6 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    31be:	ldr	r4, [pc, #152]	; (3258 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    31c0:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    31c2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    31c4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    31c6:	ldr	r2, [pc, #148]	; (325c <uart3_status_isr+0xc0>)
    31c8:	ldr	r1, [r2, #0]
    31ca:	cbz	r1, 31e6 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    31cc:	ldr	r2, [pc, #144]	; (3260 <uart3_status_isr+0xc4>)
    31ce:	ldrb	r2, [r2, #0]
    31d0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    31d2:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    31d4:	itet	cc
    31d6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    31da:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    31dc:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    31de:	cmp	r3, #39	; 0x27
    31e0:	itt	gt
    31e2:	movgt	r3, #1
    31e4:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    31e6:	ldr	r2, [pc, #100]	; (324c <uart3_status_isr+0xb0>)
    31e8:	ldrb	r3, [r2, #3]
    31ea:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    31ec:	lsls	r0, r3, #24
    31ee:	bmi.n	3214 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    31f0:	lsls	r2, r3, #25
    31f2:	bpl.n	3210 <uart3_status_isr+0x74>
    31f4:	ldr	r3, [pc, #84]	; (324c <uart3_status_isr+0xb0>)
    31f6:	ldrb	r3, [r3, #4]
    31f8:	lsls	r3, r3, #25
    31fa:	bpl.n	3210 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    31fc:	ldr	r3, [pc, #100]	; (3264 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    31fe:	ldr	r1, [pc, #104]	; (3268 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3200:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3202:	movs	r2, #0
    3204:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3206:	cbz	r3, 320a <uart3_status_isr+0x6e>
    3208:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    320a:	ldr	r3, [pc, #64]	; (324c <uart3_status_isr+0xb0>)
    320c:	movs	r2, #44	; 0x2c
    320e:	strb	r2, [r3, #3]
	}
}
    3210:	pop	{r4, r5}
    3212:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3214:	ldrb	r1, [r2, #4]
    3216:	lsls	r1, r1, #24
    3218:	bpl.n	31f0 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    321a:	ldr	r1, [pc, #80]	; (326c <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    321c:	ldr	r0, [pc, #64]	; (3260 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    321e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3220:	ldrb	r1, [r0, #0]
    3222:	uxtb	r1, r1
		if (head == tail) {
    3224:	cmp	r4, r1
    3226:	beq.n	3244 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    3228:	adds	r2, r1, #1
    322a:	cmp	r2, #39	; 0x27
    322c:	itt	hi
    322e:	movhi	r1, #0
    3230:	movhi	r2, r1
			n = tx_buffer[tail];
    3232:	ldr	r5, [pc, #60]	; (3270 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3234:	ldr	r4, [pc, #20]	; (324c <uart3_status_isr+0xb0>)
    3236:	it	ls
    3238:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    323a:	ldrb	r2, [r5, r2]
    323c:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    323e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3240:	strb	r1, [r0, #0]
    3242:	b.n	31f0 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    3244:	movs	r1, #108	; 0x6c
    3246:	strb	r1, [r2, #3]
    3248:	b.n	31f0 <uart3_status_isr+0x54>
    324a:	nop
    324c:	.word	0x4006d000
    3250:	.word	0x1fff1828
    3254:	.word	0x1fff1829
    3258:	.word	0x1fff1854
    325c:	.word	0x1fff1824
    3260:	.word	0x1fff1895
    3264:	.word	0x1fff1898
    3268:	.word	0x1fff1894
    326c:	.word	0x1fff189c
    3270:	.word	0x1fff182c

00003274 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3274:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3276:	ldr	r4, [pc, #64]	; (32b8 <fault_isr+0x44>)
    3278:	b.n	328c <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    327a:	ldr	r3, [r4, #0]
    327c:	lsls	r1, r3, #21
    327e:	bmi.n	329c <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3280:	ldr	r3, [r4, #0]
    3282:	lsls	r2, r3, #20
    3284:	bmi.n	32a6 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3286:	ldr	r3, [r4, #0]
    3288:	lsls	r3, r3, #19
    328a:	bmi.n	32b0 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    328c:	ldr	r3, [r4, #0]
    328e:	lsls	r0, r3, #13
    3290:	bpl.n	327a <fault_isr+0x6>
    3292:	bl	1ff4 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3296:	ldr	r3, [r4, #0]
    3298:	lsls	r1, r3, #21
    329a:	bpl.n	3280 <fault_isr+0xc>
    329c:	bl	3388 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    32a0:	ldr	r3, [r4, #0]
    32a2:	lsls	r2, r3, #20
    32a4:	bpl.n	3286 <fault_isr+0x12>
    32a6:	bl	3070 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    32aa:	ldr	r3, [r4, #0]
    32ac:	lsls	r3, r3, #19
    32ae:	bpl.n	328c <fault_isr+0x18>
    32b0:	bl	36ac <uart2_status_isr>
    32b4:	b.n	328c <fault_isr+0x18>
    32b6:	nop
    32b8:	.word	0x40048034

000032bc <unused_isr>:
	}
}

void unused_isr(void)
{
    32bc:	push	{r3, lr}
	fault_isr();
    32be:	bl	3274 <fault_isr>
    32c2:	nop

000032c4 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    32c4:	ldr	r3, [pc, #4]	; (32cc <startup_early_hook+0x8>)
    32c6:	movs	r2, #16
    32c8:	strh	r2, [r3, #0]
    32ca:	bx	lr
    32cc:	.word	0x40052000

000032d0 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    32d0:	bx	lr
    32d2:	nop

000032d4 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    32d4:	ldr	r1, [pc, #36]	; (32fc <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    32d6:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    32d8:	ldr	r3, [r1, #0]
	if (incr != 0) {
    32da:	cbz	r0, 32ea <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    32dc:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    32de:	add	r0, r3
    32e0:	sub.w	r2, r2, #8192	; 0x2000
    32e4:	cmp	r0, r2
    32e6:	bcs.n	32ee <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    32e8:	str	r0, [r1, #0]
	}
	return prev;
    32ea:	mov	r0, r3
}
    32ec:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    32ee:	bl	3980 <__errno>
    32f2:	movs	r3, #12
    32f4:	str	r3, [r0, #0]
			return (void *)-1;
    32f6:	mov.w	r0, #4294967295
    32fa:	pop	{r3, pc}
    32fc:	.word	0x1fff0c58

00003300 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    3300:	ldr	r2, [pc, #32]	; (3324 <kinetis_hsrun_disable+0x24>)
    3302:	ldrb	r3, [r2, #0]
    3304:	cmp	r3, #128	; 0x80
    3306:	beq.n	330c <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3308:	movs	r0, #0
}
    330a:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    330c:	ldr	r1, [pc, #24]	; (3328 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    330e:	ldr	r3, [pc, #28]	; (332c <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3310:	ldr	r0, [pc, #28]	; (3330 <kinetis_hsrun_disable+0x30>)
    3312:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3314:	movs	r1, #0
    3316:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3318:	ldrb	r3, [r2, #0]
    331a:	cmp	r3, #128	; 0x80
    331c:	beq.n	3318 <kinetis_hsrun_disable+0x18>
		return 1;
    331e:	movs	r0, #1
    3320:	bx	lr
    3322:	nop
    3324:	.word	0x4007e003
    3328:	.word	0x40048044
    332c:	.word	0x4007e001
    3330:	.word	0x22280000

00003334 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3334:	ldr	r2, [pc, #36]	; (335c <kinetis_hsrun_enable+0x28>)
    3336:	ldrb	r3, [r2, #0]
    3338:	cmp	r3, #1
    333a:	beq.n	3340 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    333c:	movs	r0, #0
}
    333e:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3340:	add.w	r3, r3, #1073741824	; 0x40000000
    3344:	add.w	r3, r3, #516096	; 0x7e000
    3348:	movs	r1, #96	; 0x60
    334a:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    334c:	ldrb	r3, [r2, #0]
    334e:	cmp	r3, #128	; 0x80
    3350:	bne.n	334c <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3352:	ldr	r3, [pc, #12]	; (3360 <kinetis_hsrun_enable+0x2c>)
    3354:	ldr	r2, [pc, #12]	; (3364 <kinetis_hsrun_enable+0x30>)
    3356:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3358:	movs	r0, #1
    335a:	bx	lr
    335c:	.word	0x4007e003
    3360:	.word	0x40048044
    3364:	.word	0x02060000

00003368 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3368:	ldr	r2, [pc, #20]	; (3380 <serial_available+0x18>)
	tail = rx_buffer_tail;
    336a:	ldr	r3, [pc, #24]	; (3384 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    336c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    336e:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3370:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3372:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3374:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3376:	it	cc
    3378:	addcc	r0, #64	; 0x40
    337a:	subs	r0, r0, r3
}
    337c:	bx	lr
    337e:	nop
    3380:	.word	0x1fff18a4
    3384:	.word	0x1fff18a5

00003388 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3388:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    338a:	ldr	r3, [pc, #224]	; (346c <uart0_status_isr+0xe4>)
    338c:	ldrb	r2, [r3, #4]
    338e:	tst.w	r2, #48	; 0x30
    3392:	beq.n	33ee <uart0_status_isr+0x66>
		__disable_irq();
    3394:	cpsid	i
		avail = UART0_RCFIFO;
    3396:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3398:	and.w	r2, r1, #255	; 0xff
    339c:	cmp	r1, #0
    339e:	beq.n	341c <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    33a0:	cpsie	i
			head = rx_buffer_head;
    33a2:	ldr	r7, [pc, #204]	; (3470 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    33a4:	ldr	r1, [pc, #204]	; (3474 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    33a6:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    33a8:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    33aa:	ldr	r6, [pc, #204]	; (3478 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    33ac:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    33ae:	uxtb	r0, r0
			tail = rx_buffer_tail;
    33b0:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    33b2:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    33b4:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    33b6:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    33b8:	it	cs
    33ba:	movcs	r3, #0
				if (newhead != tail) {
    33bc:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    33be:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    33c2:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    33c4:	itt	ne
    33c6:	strbne	r1, [r6, r3]
    33c8:	movne	r0, r3
				}
			} while (--avail > 0);
    33ca:	ands.w	r2, r2, #255	; 0xff
    33ce:	bne.n	33b2 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    33d0:	ldr	r3, [pc, #168]	; (347c <uart0_status_isr+0xf4>)
    33d2:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    33d4:	uxtb	r2, r0
    33d6:	strb	r2, [r7, #0]
			if (rts_pin) {
    33d8:	cbz	r3, 33ee <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    33da:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    33dc:	itet	cc
    33de:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    33e2:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    33e4:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    33e6:	cmp	r0, #39	; 0x27
    33e8:	itt	gt
    33ea:	movgt	r2, #1
    33ec:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    33ee:	ldr	r1, [pc, #124]	; (346c <uart0_status_isr+0xe4>)
    33f0:	ldrb	r2, [r1, #3]
    33f2:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    33f4:	lsls	r5, r2, #24
    33f6:	bmi.n	3426 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    33f8:	lsls	r2, r2, #25
    33fa:	bpl.n	3418 <uart0_status_isr+0x90>
    33fc:	ldr	r3, [pc, #108]	; (346c <uart0_status_isr+0xe4>)
    33fe:	ldrb	r3, [r3, #4]
    3400:	lsls	r3, r3, #25
    3402:	bpl.n	3418 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3404:	ldr	r3, [pc, #120]	; (3480 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3406:	ldr	r1, [pc, #124]	; (3484 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3408:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    340a:	movs	r2, #0
    340c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    340e:	cbz	r3, 3412 <uart0_status_isr+0x8a>
    3410:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3412:	ldr	r3, [pc, #88]	; (346c <uart0_status_isr+0xe4>)
    3414:	movs	r2, #60	; 0x3c
    3416:	strb	r2, [r3, #3]
	}
}
    3418:	pop	{r4, r5, r6, r7}
    341a:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    341c:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    341e:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3420:	strb	r2, [r3, #17]
			__enable_irq();
    3422:	cpsie	i
    3424:	b.n	33ee <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3426:	ldrb	r3, [r1, #4]
    3428:	lsls	r4, r3, #24
    342a:	bpl.n	33f8 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    342c:	ldr	r3, [pc, #88]	; (3488 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    342e:	ldr	r6, [pc, #92]	; (348c <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3430:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3432:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3434:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3436:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3438:	cmp	r4, r3
    343a:	beq.n	345a <uart0_status_isr+0xd2>
    343c:	ldr	r5, [pc, #80]	; (3490 <uart0_status_isr+0x108>)
    343e:	b.n	3444 <uart0_status_isr+0xbc>
    3440:	cmp	r3, r4
    3442:	beq.n	345a <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3444:	adds	r3, #1
    3446:	cmp	r3, #64	; 0x40
    3448:	it	cs
    344a:	movcs	r3, #0
			avail = UART0_S1;
    344c:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    344e:	ldrb	r0, [r5, r3]
    3450:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3452:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3454:	ldrb	r0, [r1, #20]
    3456:	cmp	r0, #7
    3458:	bls.n	3440 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    345a:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    345c:	ldr	r1, [pc, #12]	; (346c <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    345e:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3460:	ldrb	r3, [r1, #4]
    3462:	lsls	r0, r3, #24
    3464:	itt	mi
    3466:	movmi	r3, #124	; 0x7c
    3468:	strbmi	r3, [r1, #3]
    346a:	b.n	33f8 <uart0_status_isr+0x70>
    346c:	.word	0x4006a000
    3470:	.word	0x1fff18a4
    3474:	.word	0x1fff18a5
    3478:	.word	0x1fff18e8
    347c:	.word	0x1fff18a0
    3480:	.word	0x1fff192c
    3484:	.word	0x1fff1928
    3488:	.word	0x1fff1930
    348c:	.word	0x1fff1929
    3490:	.word	0x1fff18a8

00003494 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3494:	ldr	r2, [pc, #20]	; (34ac <serial6_available+0x18>)
	tail = rx_buffer_tail;
    3496:	ldr	r3, [pc, #24]	; (34b0 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3498:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    349a:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    349c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    349e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    34a0:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    34a2:	it	cc
    34a4:	addcc	r0, #64	; 0x40
    34a6:	subs	r0, r0, r3
}
    34a8:	bx	lr
    34aa:	nop
    34ac:	.word	0x1fff1938
    34b0:	.word	0x1fff1939

000034b4 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    34b4:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    34b6:	ldr	r3, [pc, #176]	; (3568 <lpuart0_status_isr+0xb4>)
    34b8:	ldr	r2, [r3, #4]
    34ba:	lsls	r4, r2, #10
    34bc:	bpl.n	34fe <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    34be:	ldr	r0, [pc, #172]	; (356c <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    34c0:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    34c2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    34c4:	ldr	r1, [pc, #168]	; (3570 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    34c6:	adds	r3, #1
    34c8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    34ca:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    34cc:	it	gt
    34ce:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    34d0:	cmp	r3, r1
    34d2:	beq.n	34de <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    34d4:	ldr	r4, [pc, #156]	; (3574 <lpuart0_status_isr+0xc0>)
    34d6:	uxtb	r2, r2
			rx_buffer_head = head;
    34d8:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    34da:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    34dc:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    34de:	ldr	r2, [pc, #152]	; (3578 <lpuart0_status_isr+0xc4>)
    34e0:	ldr	r1, [r2, #0]
    34e2:	cbz	r1, 34fe <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    34e4:	ldr	r2, [pc, #148]	; (357c <lpuart0_status_isr+0xc8>)
    34e6:	ldrb	r2, [r2, #0]
    34e8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    34ea:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    34ec:	itet	cc
    34ee:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    34f2:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    34f4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    34f6:	cmp	r3, #39	; 0x27
    34f8:	itt	gt
    34fa:	movgt	r3, #1
    34fc:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    34fe:	ldr	r2, [pc, #104]	; (3568 <lpuart0_status_isr+0xb4>)
    3500:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    3502:	lsls	r0, r3, #8
    3504:	bpl.n	350c <lpuart0_status_isr+0x58>
    3506:	ldr	r2, [r2, #4]
    3508:	lsls	r1, r2, #8
    350a:	bmi.n	3530 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    350c:	lsls	r2, r3, #9
    350e:	bpl.n	352c <lpuart0_status_isr+0x78>
    3510:	ldr	r3, [pc, #84]	; (3568 <lpuart0_status_isr+0xb4>)
    3512:	ldr	r3, [r3, #4]
    3514:	lsls	r3, r3, #9
    3516:	bpl.n	352c <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3518:	ldr	r3, [pc, #100]	; (3580 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    351a:	ldr	r1, [pc, #104]	; (3584 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    351c:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    351e:	movs	r2, #0
    3520:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3522:	cbz	r3, 3526 <lpuart0_status_isr+0x72>
    3524:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3526:	ldr	r3, [pc, #96]	; (3588 <lpuart0_status_isr+0xd4>)
    3528:	movs	r2, #0
    352a:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    352c:	pop	{r4, r5}
    352e:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3530:	ldr	r2, [pc, #88]	; (358c <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    3532:	ldr	r1, [pc, #72]	; (357c <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3534:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3536:	ldrb	r2, [r1, #0]
    3538:	uxtb	r2, r2
		if (head == tail) {
    353a:	cmp	r0, r2
    353c:	beq.n	355a <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    353e:	adds	r2, #1
    3540:	cmp	r2, #39	; 0x27
    3542:	itt	hi
    3544:	movhi	r0, #0
    3546:	movhi	r2, r0
			n = tx_buffer[tail];
    3548:	ldr	r5, [pc, #68]	; (3590 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    354a:	ldr	r4, [pc, #28]	; (3568 <lpuart0_status_isr+0xb4>)
    354c:	it	ls
    354e:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3550:	ldrb	r2, [r5, r2]
    3552:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3554:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3556:	strb	r0, [r1, #0]
    3558:	b.n	350c <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    355a:	ldr	r0, [pc, #56]	; (3594 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    355c:	ldr	r2, [pc, #40]	; (3588 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    355e:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3560:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3562:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3564:	str	r1, [r2, #0]
    3566:	b.n	350c <lpuart0_status_isr+0x58>
    3568:	.word	0x400c4000
    356c:	.word	0x1fff1938
    3570:	.word	0x1fff1939
    3574:	.word	0x1fff1964
    3578:	.word	0x1fff1934
    357c:	.word	0x1fff19a5
    3580:	.word	0x1fff19a8
    3584:	.word	0x1fff19a4
    3588:	.word	0x43880158
    358c:	.word	0x1fff19ac
    3590:	.word	0x1fff193c
    3594:	.word	0x4388015c

00003598 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3598:	push	{r4, lr}
    359a:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    359c:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    359e:	bl	3300 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    35a2:	ldr	r2, [pc, #96]	; (3604 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    35a4:	ldr	r3, [pc, #96]	; (3608 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    35a6:	ldr	r1, [pc, #100]	; (360c <usb_init_serialnumber+0x74>)
    35a8:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    35aa:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    35ac:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    35ae:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    35b0:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    35b2:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    35b4:	ldrb	r3, [r2, #0]
    35b6:	lsls	r3, r3, #24
    35b8:	bpl.n	35b4 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    35ba:	ldr	r3, [pc, #84]	; (3610 <usb_init_serialnumber+0x78>)
    35bc:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    35be:	bl	3334 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    35c2:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    35c4:	ldr	r3, [pc, #76]	; (3614 <usb_init_serialnumber+0x7c>)
    35c6:	cmp	r4, r3
    35c8:	itt	ls
    35ca:	addls.w	r4, r4, r4, lsl #2
    35ce:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    35d0:	mov	r0, r4
    35d2:	ldr	r4, [pc, #68]	; (3618 <usb_init_serialnumber+0x80>)
    35d4:	add	r1, sp, #4
    35d6:	movs	r2, #10
    35d8:	bl	361c <ultoa>
    35dc:	add	r1, sp, #4
    35de:	mov	r0, r4
	for (i=0; i<10; i++) {
    35e0:	movs	r3, #0
		char c = buf[i];
    35e2:	ldrb.w	r2, [r1], #1
    35e6:	adds	r3, #1
		if (!c) break;
    35e8:	cbz	r2, 35fa <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    35ea:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    35ec:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    35f0:	bne.n	35e2 <usb_init_serialnumber+0x4a>
    35f2:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    35f4:	strb	r3, [r4, #0]
}
    35f6:	add	sp, #16
    35f8:	pop	{r4, pc}
    35fa:	lsls	r3, r3, #1
    35fc:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    35fe:	strb	r3, [r4, #0]
}
    3600:	add	sp, #16
    3602:	pop	{r4, pc}
    3604:	.word	0x40020004
    3608:	.word	0x40020000
    360c:	.word	0x41070000
    3610:	.word	0x4002000c
    3614:	.word	0x0098967f
    3618:	.word	0x1fff0d3c

0000361c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    361c:	push	{r4, r5, r6, r7}
    361e:	subs	r5, r1, #1
    3620:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3622:	movs	r4, #0
    3624:	b.n	3628 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3626:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3628:	udiv	r3, r0, r2
    362c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3630:	cmp	r0, #9
    3632:	add.w	r7, r0, #48	; 0x30
    3636:	itet	hi
    3638:	addhi	r0, #55	; 0x37
    363a:	uxtbls	r0, r7
    363c:	uxtbhi	r0, r0
    363e:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3642:	mov	r0, r3
    3644:	cmp	r3, #0
    3646:	bne.n	3626 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3648:	adds	r2, r1, r4
    364a:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    364c:	cbz	r4, 3662 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    364e:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3650:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3654:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3656:	adds	r3, #1
    3658:	subs	r0, r4, r3
    365a:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    365c:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3660:	blt.n	364e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3662:	mov	r0, r1
    3664:	pop	{r4, r5, r6, r7}
    3666:	bx	lr

00003668 <ltoa>:

char * ltoa(long val, char *buf, int radix)
{
    3668:	push	{r4, lr}
	if (val >= 0) {
    366a:	subs	r4, r0, #0
    366c:	blt.n	3676 <ltoa+0xe>
	} else {
		buf[0] = '-';
		ultoa(-val, buf + 1, radix);
		return buf;
	}
}
    366e:	ldmia.w	sp!, {r4, lr}
}

char * ltoa(long val, char *buf, int radix)
{
	if (val >= 0) {
		return ultoa(val, buf, radix);
    3672:	b.w	361c <ultoa>
	} else {
		buf[0] = '-';
    3676:	movs	r3, #45	; 0x2d
    3678:	mov	r0, r4
		ultoa(-val, buf + 1, radix);
    367a:	negs	r0, r0
    367c:	mov	r4, r1
char * ltoa(long val, char *buf, int radix)
{
	if (val >= 0) {
		return ultoa(val, buf, radix);
	} else {
		buf[0] = '-';
    367e:	strb.w	r3, [r1], #1
		ultoa(-val, buf + 1, radix);
    3682:	bl	361c <ultoa>
		return buf;
	}
}
    3686:	mov	r0, r4
    3688:	pop	{r4, pc}
    368a:	nop

0000368c <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    368c:	ldr	r2, [pc, #20]	; (36a4 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    368e:	ldr	r3, [pc, #24]	; (36a8 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3690:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3692:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3694:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3696:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3698:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    369a:	it	cc
    369c:	addcc	r0, #64	; 0x40
    369e:	subs	r0, r0, r3
}
    36a0:	bx	lr
    36a2:	nop
    36a4:	.word	0x1fff19b4
    36a8:	.word	0x1fff19b5

000036ac <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    36ac:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    36ae:	ldr	r3, [pc, #172]	; (375c <uart2_status_isr+0xb0>)
    36b0:	ldrb	r2, [r3, #4]
    36b2:	lsls	r4, r2, #26
    36b4:	bpl.n	36f6 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    36b6:	ldr	r0, [pc, #168]	; (3760 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    36b8:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    36ba:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    36bc:	ldr	r1, [pc, #164]	; (3764 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    36be:	adds	r3, #1
    36c0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    36c2:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    36c4:	it	gt
    36c6:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    36c8:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    36ca:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    36cc:	beq.n	36d6 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    36ce:	ldr	r4, [pc, #152]	; (3768 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    36d0:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    36d2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    36d4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    36d6:	ldr	r2, [pc, #148]	; (376c <uart2_status_isr+0xc0>)
    36d8:	ldr	r1, [r2, #0]
    36da:	cbz	r1, 36f6 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    36dc:	ldr	r2, [pc, #144]	; (3770 <uart2_status_isr+0xc4>)
    36de:	ldrb	r2, [r2, #0]
    36e0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    36e2:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    36e4:	itet	cc
    36e6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    36ea:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    36ec:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    36ee:	cmp	r3, #39	; 0x27
    36f0:	itt	gt
    36f2:	movgt	r3, #1
    36f4:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    36f6:	ldr	r2, [pc, #100]	; (375c <uart2_status_isr+0xb0>)
    36f8:	ldrb	r3, [r2, #3]
    36fa:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    36fc:	lsls	r0, r3, #24
    36fe:	bmi.n	3724 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    3700:	lsls	r2, r3, #25
    3702:	bpl.n	3720 <uart2_status_isr+0x74>
    3704:	ldr	r3, [pc, #84]	; (375c <uart2_status_isr+0xb0>)
    3706:	ldrb	r3, [r3, #4]
    3708:	lsls	r3, r3, #25
    370a:	bpl.n	3720 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    370c:	ldr	r3, [pc, #100]	; (3774 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    370e:	ldr	r1, [pc, #104]	; (3778 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3710:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3712:	movs	r2, #0
    3714:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3716:	cbz	r3, 371a <uart2_status_isr+0x6e>
    3718:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    371a:	ldr	r3, [pc, #64]	; (375c <uart2_status_isr+0xb0>)
    371c:	movs	r2, #44	; 0x2c
    371e:	strb	r2, [r3, #3]
	}
}
    3720:	pop	{r4, r5}
    3722:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3724:	ldrb	r1, [r2, #4]
    3726:	lsls	r1, r1, #24
    3728:	bpl.n	3700 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    372a:	ldr	r1, [pc, #80]	; (377c <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    372c:	ldr	r0, [pc, #64]	; (3770 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    372e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3730:	ldrb	r1, [r0, #0]
    3732:	uxtb	r1, r1
		if (head == tail) {
    3734:	cmp	r4, r1
    3736:	beq.n	3754 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3738:	adds	r2, r1, #1
    373a:	cmp	r2, #39	; 0x27
    373c:	itt	hi
    373e:	movhi	r1, #0
    3740:	movhi	r2, r1
			n = tx_buffer[tail];
    3742:	ldr	r5, [pc, #60]	; (3780 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3744:	ldr	r4, [pc, #20]	; (375c <uart2_status_isr+0xb0>)
    3746:	it	ls
    3748:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    374a:	ldrb	r2, [r5, r2]
    374c:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    374e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3750:	strb	r1, [r0, #0]
    3752:	b.n	3700 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    3754:	movs	r1, #108	; 0x6c
    3756:	strb	r1, [r2, #3]
    3758:	b.n	3700 <uart2_status_isr+0x54>
    375a:	nop
    375c:	.word	0x4006c000
    3760:	.word	0x1fff19b4
    3764:	.word	0x1fff19b5
    3768:	.word	0x1fff19e0
    376c:	.word	0x1fff19b0
    3770:	.word	0x1fff1a21
    3774:	.word	0x1fff1a24
    3778:	.word	0x1fff1a20
    377c:	.word	0x1fff1a28
    3780:	.word	0x1fff19b8

00003784 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    3784:	bx	lr
    3786:	nop

00003788 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    3788:	bx	lr
    378a:	nop

0000378c <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    378c:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    378e:	mrs	r2, PRIMASK
		__disable_irq();
    3792:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3794:	ldrb	r3, [r0, #29]
    3796:	cbnz	r3, 37a6 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3798:	ldrb	r1, [r0, #28]
    379a:	cmp	r1, #1
    379c:	beq.n	37b0 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    379e:	cmp	r1, #3
    37a0:	beq.n	37c4 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    37a2:	movs	r3, #1
    37a4:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    37a6:	cbnz	r2, 37aa <EventResponder::triggerEventNotImmediate()+0x1e>
    37a8:	cpsie	i
	}
	enableInterrupts(irq);
}
    37aa:	ldr.w	r4, [sp], #4
    37ae:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    37b0:	ldr	r4, [pc, #68]	; (37f8 <EventResponder::triggerEventNotImmediate()+0x6c>)
    37b2:	ldr	r1, [r4, #0]
    37b4:	cbz	r1, 37e0 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    37b6:	ldr	r1, [pc, #68]	; (37fc <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    37b8:	str	r3, [r0, #20]
				_prev = lastYield;
    37ba:	ldr	r3, [r1, #0]
    37bc:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    37be:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    37c0:	str	r0, [r3, #20]
    37c2:	b.n	37a2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    37c4:	ldr	r4, [pc, #56]	; (3800 <EventResponder::triggerEventNotImmediate()+0x74>)
    37c6:	ldr	r1, [r4, #0]
    37c8:	cbz	r1, 37ec <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    37ca:	ldr	r1, [pc, #56]	; (3804 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    37cc:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    37ce:	ldr	r3, [r1, #0]
    37d0:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    37d2:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    37d4:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    37d6:	ldr	r3, [pc, #48]	; (3808 <EventResponder::triggerEventNotImmediate()+0x7c>)
    37d8:	mov.w	r1, #268435456	; 0x10000000
    37dc:	str	r1, [r3, #0]
    37de:	b.n	37a2 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    37e0:	ldr	r3, [pc, #24]	; (37fc <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    37e2:	str	r1, [r0, #20]
				_prev = nullptr;
    37e4:	str	r1, [r0, #24]
				firstYield = this;
    37e6:	str	r0, [r4, #0]
				lastYield = this;
    37e8:	str	r0, [r3, #0]
    37ea:	b.n	37a2 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    37ec:	ldr	r3, [pc, #20]	; (3804 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    37ee:	str	r1, [r0, #20]
				_prev = nullptr;
    37f0:	str	r1, [r0, #24]
				firstInterrupt = this;
    37f2:	str	r0, [r4, #0]
				lastInterrupt = this;
    37f4:	str	r0, [r3, #0]
    37f6:	b.n	37d6 <EventResponder::triggerEventNotImmediate()+0x4a>
    37f8:	.word	0x1fff1a3c
    37fc:	.word	0x1fff1a38
    3800:	.word	0x1fff1a2c
    3804:	.word	0x1fff1a30
    3808:	.word	0xe000ed04

0000380c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    380c:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    380e:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3810:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3812:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3814:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3816:	beq.n	3820 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    3818:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    381c:	b.w	378c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3820:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    3822:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3826:	bx	r3

00003828 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3828:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    382a:	mrs	r2, PRIMASK
		__disable_irq();
    382e:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3830:	ldr	r4, [pc, #48]	; (3864 <EventResponder::runFromInterrupt()+0x3c>)
    3832:	ldr	r0, [r4, #0]
		if (first) {
    3834:	cbz	r0, 3858 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3836:	ldr	r6, [pc, #48]	; (3868 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3838:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    383a:	ldr	r3, [r0, #20]
    383c:	str	r3, [r4, #0]
			if (firstInterrupt) {
    383e:	cbz	r3, 385e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    3840:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3842:	cbnz	r2, 3846 <EventResponder::runFromInterrupt()+0x1e>
    3844:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3846:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3848:	ldr	r3, [r0, #8]
    384a:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    384c:	mrs	r2, PRIMASK
		__disable_irq();
    3850:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3852:	ldr	r0, [r4, #0]
		if (first) {
    3854:	cmp	r0, #0
    3856:	bne.n	383a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3858:	cbnz	r2, 385c <EventResponder::runFromInterrupt()+0x34>
    385a:	cpsie	i
    385c:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    385e:	str	r3, [r6, #0]
    3860:	b.n	3842 <EventResponder::runFromInterrupt()+0x1a>
    3862:	nop
    3864:	.word	0x1fff1a2c
    3868:	.word	0x1fff1a30

0000386c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    386c:	b.w	3828 <EventResponder::runFromInterrupt()>

00003870 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    3870:	ldr	r2, [pc, #96]	; (38d4 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    3872:	push	{r4, r5}
	if (listActive == nullptr) {
    3874:	ldr	r4, [r2, #0]
    3876:	cmp	r4, #0
    3878:	beq.n	38ca <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    387a:	ldr	r3, [r0, #0]
    387c:	ldr	r1, [r4, #0]
    387e:	cmp	r3, r1
    3880:	bcs.n	38a0 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3882:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    3884:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    3886:	str	r4, [r0, #8]
		_prev = nullptr;
    3888:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    388a:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    388c:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    388e:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3890:	movs	r3, #2
    3892:	strb	r3, [r0, #20]
}
    3894:	pop	{r4, r5}
    3896:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    3898:	ldr	r1, [r2, #0]
    389a:	cmp	r3, r1
    389c:	mov	r4, r2
    389e:	bcc.n	38b2 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    38a0:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    38a2:	subs	r3, r3, r1
    38a4:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    38a6:	cmp	r2, #0
    38a8:	bne.n	3898 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    38aa:	str	r2, [r0, #8]
		_prev = timer;
    38ac:	str	r4, [r0, #12]
		timer->_next = this;
    38ae:	str	r0, [r4, #8]
    38b0:	b.n	3890 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    38b2:	ldr	r2, [r2, #12]
    38b4:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    38b6:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    38b8:	str	r0, [r4, #12]
				_prev->_next = this;
    38ba:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    38bc:	subs	r3, r1, r3
				_state = TimerActive;
    38be:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    38c0:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    38c2:	str	r3, [r4, #0]
				_state = TimerActive;
    38c4:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    38c6:	pop	{r4, r5}
    38c8:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    38ca:	str	r4, [r0, #8]
		_prev = nullptr;
    38cc:	str	r4, [r0, #12]
		listActive = this;
    38ce:	str	r0, [r2, #0]
    38d0:	b.n	3890 <MillisTimer::addToActiveList()+0x20>
    38d2:	nop
    38d4:	.word	0x1fff1a34

000038d8 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    38d8:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    38da:	ldr	r6, [pc, #136]	; (3964 <MillisTimer::runFromTimer()+0x8c>)
    38dc:	ldr	r4, [r6, #0]
	while (timer) {
    38de:	cbz	r4, 392c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    38e0:	ldr	r3, [r4, #0]
    38e2:	cmp	r3, #0
    38e4:	bne.n	395c <MillisTimer::runFromTimer()+0x84>
    38e6:	ldr	r7, [pc, #128]	; (3968 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    38e8:	mov	r5, r3
    38ea:	b.n	38f6 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    38ec:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    38ee:	cbz	r4, 392c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    38f0:	ldr	r3, [r4, #0]
    38f2:	cmp	r3, #0
    38f4:	bne.n	395c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    38f6:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    38f8:	cbz	r3, 38fc <MillisTimer::runFromTimer()+0x24>
    38fa:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    38fc:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    38fe:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3900:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    3902:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3904:	ldr	r3, [r3, #0]
    3906:	cmp	r3, r7
    3908:	bne.n	394e <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    390a:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    390c:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    390e:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3910:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    3912:	beq.n	3956 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3914:	bl	378c <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    3918:	ldr	r3, [r4, #4]
    391a:	cmp	r3, #0
    391c:	beq.n	38ec <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    391e:	str	r3, [r4, #0]
				timer->addToActiveList();
    3920:	mov	r0, r4
    3922:	bl	3870 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    3926:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3928:	cmp	r4, #0
    392a:	bne.n	38f0 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    392c:	mrs	r3, PRIMASK
		__disable_irq();
    3930:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3932:	ldr	r2, [pc, #56]	; (396c <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3934:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3936:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3938:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    393a:	cbnz	r3, 393e <MillisTimer::runFromTimer()+0x66>
    393c:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    393e:	cbz	r0, 394c <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    3940:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    3942:	bl	3870 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    3946:	mov	r0, r4
    3948:	cmp	r0, #0
    394a:	bne.n	3940 <MillisTimer::runFromTimer()+0x68>
    394c:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    394e:	mov	r2, r4
    3950:	movs	r1, #0
    3952:	blx	r3
    3954:	b.n	3918 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3956:	ldr	r3, [r0, #8]
    3958:	blx	r3
    395a:	b.n	3918 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    395c:	subs	r3, #1
    395e:	str	r3, [r4, #0]
			break;
    3960:	b.n	392c <MillisTimer::runFromTimer()+0x54>
    3962:	nop
    3964:	.word	0x1fff1a34
    3968:	.word	0x0000380d
    396c:	.word	0x1fff1a44

00003970 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    3970:	ldr	r2, [pc, #8]	; (397c <systick_isr+0xc>)
    3972:	ldr	r3, [r2, #0]
    3974:	adds	r3, #1
    3976:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    3978:	b.w	38d8 <MillisTimer::runFromTimer()>
    397c:	.word	0x1fff15cc

00003980 <__errno>:
    3980:	ldr	r3, [pc, #4]	; (3988 <__errno+0x8>)
    3982:	ldr	r0, [r3, #0]
    3984:	bx	lr
    3986:	nop
    3988:	.word	0x1fff1180

0000398c <__libc_init_array>:
    398c:	push	{r4, r5, r6, lr}
    398e:	ldr	r6, [pc, #60]	; (39cc <__libc_init_array+0x40>)
    3990:	ldr	r5, [pc, #60]	; (39d0 <__libc_init_array+0x44>)
    3992:	subs	r6, r6, r5
    3994:	asrs	r6, r6, #2
    3996:	it	ne
    3998:	movne	r4, #0
    399a:	beq.n	39a8 <__libc_init_array+0x1c>
    399c:	adds	r4, #1
    399e:	ldr.w	r3, [r5], #4
    39a2:	blx	r3
    39a4:	cmp	r6, r4
    39a6:	bne.n	399c <__libc_init_array+0x10>
    39a8:	ldr	r6, [pc, #40]	; (39d4 <__libc_init_array+0x48>)
    39aa:	ldr	r5, [pc, #44]	; (39d8 <__libc_init_array+0x4c>)
    39ac:	subs	r6, r6, r5
    39ae:	bl	4d7c <_init>
    39b2:	asrs	r6, r6, #2
    39b4:	it	ne
    39b6:	movne	r4, #0
    39b8:	beq.n	39c8 <__libc_init_array+0x3c>
    39ba:	adds	r4, #1
    39bc:	ldr.w	r3, [r5], #4
    39c0:	blx	r3
    39c2:	cmp	r6, r4
    39c4:	bne.n	39ba <__libc_init_array+0x2e>
    39c6:	pop	{r4, r5, r6, pc}
    39c8:	pop	{r4, r5, r6, pc}
    39ca:	nop
    39cc:	.word	0x00004d88
    39d0:	.word	0x00004d88
    39d4:	.word	0x00004d94
    39d8:	.word	0x00004d88

000039dc <malloc>:
    39dc:	ldr	r3, [pc, #8]	; (39e8 <malloc+0xc>)
    39de:	mov	r1, r0
    39e0:	ldr	r0, [r3, #0]
    39e2:	b.w	39fc <_malloc_r>
    39e6:	nop
    39e8:	.word	0x1fff1180

000039ec <free>:
    39ec:	ldr	r3, [pc, #8]	; (39f8 <free+0xc>)
    39ee:	mov	r1, r0
    39f0:	ldr	r0, [r3, #0]
    39f2:	b.w	4768 <_free_r>
    39f6:	nop
    39f8:	.word	0x1fff1180

000039fc <_malloc_r>:
    39fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a00:	add.w	r5, r1, #11
    3a04:	cmp	r5, #22
    3a06:	sub	sp, #12
    3a08:	mov	r6, r0
    3a0a:	bls.w	3b4c <_malloc_r+0x150>
    3a0e:	bics.w	r5, r5, #7
    3a12:	bmi.w	3b94 <_malloc_r+0x198>
    3a16:	cmp	r1, r5
    3a18:	bhi.w	3b94 <_malloc_r+0x198>
    3a1c:	bl	4034 <__malloc_lock>
    3a20:	cmp.w	r5, #504	; 0x1f8
    3a24:	bcc.w	3f60 <_malloc_r+0x564>
    3a28:	lsrs	r3, r5, #9
    3a2a:	beq.w	3ba2 <_malloc_r+0x1a6>
    3a2e:	cmp	r3, #4
    3a30:	bhi.w	3d3a <_malloc_r+0x33e>
    3a34:	lsrs	r0, r5, #6
    3a36:	add.w	lr, r0, #57	; 0x39
    3a3a:	mov.w	r3, lr, lsl #1
    3a3e:	adds	r0, #56	; 0x38
    3a40:	ldr	r7, [pc, #784]	; (3d54 <_malloc_r+0x358>)
    3a42:	add.w	r3, r7, r3, lsl #2
    3a46:	sub.w	r1, r3, #8
    3a4a:	ldr	r4, [r3, #4]
    3a4c:	cmp	r1, r4
    3a4e:	bne.n	3a60 <_malloc_r+0x64>
    3a50:	b.n	3bac <_malloc_r+0x1b0>
    3a52:	cmp	r2, #0
    3a54:	bge.w	3bb0 <_malloc_r+0x1b4>
    3a58:	ldr	r4, [r4, #12]
    3a5a:	cmp	r1, r4
    3a5c:	beq.w	3bac <_malloc_r+0x1b0>
    3a60:	ldr	r3, [r4, #4]
    3a62:	bic.w	r3, r3, #3
    3a66:	subs	r2, r3, r5
    3a68:	cmp	r2, #15
    3a6a:	ble.n	3a52 <_malloc_r+0x56>
    3a6c:	ldr	r1, [pc, #740]	; (3d54 <_malloc_r+0x358>)
    3a6e:	ldr	r4, [r7, #16]
    3a70:	add.w	lr, r1, #8
    3a74:	cmp	r4, lr
    3a76:	beq.w	3de0 <_malloc_r+0x3e4>
    3a7a:	ldr	r3, [r4, #4]
    3a7c:	bic.w	r3, r3, #3
    3a80:	subs	r2, r3, r5
    3a82:	cmp	r2, #15
    3a84:	bgt.w	3dba <_malloc_r+0x3be>
    3a88:	cmp	r2, #0
    3a8a:	str.w	lr, [r1, #20]
    3a8e:	str.w	lr, [r1, #16]
    3a92:	bge.w	3bd2 <_malloc_r+0x1d6>
    3a96:	cmp.w	r3, #512	; 0x200
    3a9a:	bcs.w	3d6c <_malloc_r+0x370>
    3a9e:	lsrs	r3, r3, #3
    3aa0:	add.w	ip, r3, #1
    3aa4:	movs	r2, #1
    3aa6:	asrs	r3, r3, #2
    3aa8:	lsl.w	r3, r2, r3
    3aac:	ldr	r2, [r1, #4]
    3aae:	ldr.w	r8, [r1, ip, lsl #3]
    3ab2:	str.w	r8, [r4, #8]
    3ab6:	add.w	r9, r1, ip, lsl #3
    3aba:	orrs	r2, r3
    3abc:	sub.w	r3, r9, #8
    3ac0:	str	r3, [r4, #12]
    3ac2:	str	r2, [r1, #4]
    3ac4:	str.w	r4, [r1, ip, lsl #3]
    3ac8:	str.w	r4, [r8, #12]
    3acc:	asrs	r3, r0, #2
    3ace:	movs	r4, #1
    3ad0:	lsls	r4, r3
    3ad2:	cmp	r4, r2
    3ad4:	bhi.w	3bec <_malloc_r+0x1f0>
    3ad8:	tst	r4, r2
    3ada:	bne.n	3aea <_malloc_r+0xee>
    3adc:	bic.w	r0, r0, #3
    3ae0:	lsls	r4, r4, #1
    3ae2:	tst	r4, r2
    3ae4:	add.w	r0, r0, #4
    3ae8:	beq.n	3ae0 <_malloc_r+0xe4>
    3aea:	add.w	r9, r7, r0, lsl #3
    3aee:	mov	ip, r9
    3af0:	mov	r8, r0
    3af2:	ldr.w	r1, [ip, #12]
    3af6:	cmp	ip, r1
    3af8:	bne.n	3b0a <_malloc_r+0x10e>
    3afa:	b.n	3de4 <_malloc_r+0x3e8>
    3afc:	cmp	r2, #0
    3afe:	bge.w	3e04 <_malloc_r+0x408>
    3b02:	ldr	r1, [r1, #12]
    3b04:	cmp	ip, r1
    3b06:	beq.w	3de4 <_malloc_r+0x3e8>
    3b0a:	ldr	r3, [r1, #4]
    3b0c:	bic.w	r3, r3, #3
    3b10:	subs	r2, r3, r5
    3b12:	cmp	r2, #15
    3b14:	ble.n	3afc <_malloc_r+0x100>
    3b16:	mov	r4, r1
    3b18:	ldr.w	ip, [r1, #12]
    3b1c:	ldr.w	r8, [r4, #8]!
    3b20:	adds	r3, r1, r5
    3b22:	orr.w	r5, r5, #1
    3b26:	str	r5, [r1, #4]
    3b28:	orr.w	r1, r2, #1
    3b2c:	str.w	ip, [r8, #12]
    3b30:	mov	r0, r6
    3b32:	str.w	r8, [ip, #8]
    3b36:	str	r3, [r7, #20]
    3b38:	str	r3, [r7, #16]
    3b3a:	str.w	lr, [r3, #12]
    3b3e:	str.w	lr, [r3, #8]
    3b42:	str	r1, [r3, #4]
    3b44:	str	r2, [r3, r2]
    3b46:	bl	4038 <__malloc_unlock>
    3b4a:	b.n	3b8c <_malloc_r+0x190>
    3b4c:	cmp	r1, #16
    3b4e:	bhi.n	3b94 <_malloc_r+0x198>
    3b50:	bl	4034 <__malloc_lock>
    3b54:	movs	r5, #16
    3b56:	movs	r3, #6
    3b58:	movs	r0, #2
    3b5a:	ldr	r7, [pc, #504]	; (3d54 <_malloc_r+0x358>)
    3b5c:	add.w	r3, r7, r3, lsl #2
    3b60:	sub.w	r2, r3, #8
    3b64:	ldr	r4, [r3, #4]
    3b66:	cmp	r4, r2
    3b68:	beq.w	3df6 <_malloc_r+0x3fa>
    3b6c:	ldr	r3, [r4, #4]
    3b6e:	ldr	r1, [r4, #12]
    3b70:	ldr	r5, [r4, #8]
    3b72:	bic.w	r3, r3, #3
    3b76:	add	r3, r4
    3b78:	mov	r0, r6
    3b7a:	ldr	r2, [r3, #4]
    3b7c:	str	r1, [r5, #12]
    3b7e:	orr.w	r2, r2, #1
    3b82:	str	r5, [r1, #8]
    3b84:	str	r2, [r3, #4]
    3b86:	bl	4038 <__malloc_unlock>
    3b8a:	adds	r4, #8
    3b8c:	mov	r0, r4
    3b8e:	add	sp, #12
    3b90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b94:	movs	r4, #0
    3b96:	movs	r3, #12
    3b98:	mov	r0, r4
    3b9a:	str	r3, [r6, #0]
    3b9c:	add	sp, #12
    3b9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ba2:	movs	r3, #128	; 0x80
    3ba4:	mov.w	lr, #64	; 0x40
    3ba8:	movs	r0, #63	; 0x3f
    3baa:	b.n	3a40 <_malloc_r+0x44>
    3bac:	mov	r0, lr
    3bae:	b.n	3a6c <_malloc_r+0x70>
    3bb0:	add	r3, r4
    3bb2:	ldr	r1, [r4, #12]
    3bb4:	ldr	r2, [r3, #4]
    3bb6:	ldr	r5, [r4, #8]
    3bb8:	orr.w	r2, r2, #1
    3bbc:	str	r1, [r5, #12]
    3bbe:	mov	r0, r6
    3bc0:	str	r5, [r1, #8]
    3bc2:	str	r2, [r3, #4]
    3bc4:	bl	4038 <__malloc_unlock>
    3bc8:	adds	r4, #8
    3bca:	mov	r0, r4
    3bcc:	add	sp, #12
    3bce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3bd2:	add	r3, r4
    3bd4:	mov	r0, r6
    3bd6:	ldr	r2, [r3, #4]
    3bd8:	orr.w	r2, r2, #1
    3bdc:	str	r2, [r3, #4]
    3bde:	bl	4038 <__malloc_unlock>
    3be2:	adds	r4, #8
    3be4:	mov	r0, r4
    3be6:	add	sp, #12
    3be8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3bec:	ldr	r4, [r7, #8]
    3bee:	ldr	r3, [r4, #4]
    3bf0:	bic.w	r8, r3, #3
    3bf4:	cmp	r8, r5
    3bf6:	bcc.n	3c02 <_malloc_r+0x206>
    3bf8:	rsb	r3, r5, r8
    3bfc:	cmp	r3, #15
    3bfe:	bgt.w	3d1a <_malloc_r+0x31e>
    3c02:	ldr	r3, [pc, #340]	; (3d58 <_malloc_r+0x35c>)
    3c04:	ldr.w	r9, [pc, #352]	; 3d68 <_malloc_r+0x36c>
    3c08:	ldr	r2, [r3, #0]
    3c0a:	ldr.w	r3, [r9]
    3c0e:	adds	r3, #1
    3c10:	add	r2, r5
    3c12:	add.w	sl, r4, r8
    3c16:	beq.w	3eda <_malloc_r+0x4de>
    3c1a:	add.w	r2, r2, #4096	; 0x1000
    3c1e:	adds	r2, #15
    3c20:	bic.w	r2, r2, #4080	; 0xff0
    3c24:	bic.w	r2, r2, #15
    3c28:	mov	r1, r2
    3c2a:	mov	r0, r6
    3c2c:	str	r2, [sp, #4]
    3c2e:	bl	442c <_sbrk_r>
    3c32:	cmp.w	r0, #4294967295
    3c36:	mov	fp, r0
    3c38:	ldr	r2, [sp, #4]
    3c3a:	beq.w	3eee <_malloc_r+0x4f2>
    3c3e:	cmp	sl, r0
    3c40:	bhi.w	3e3c <_malloc_r+0x440>
    3c44:	ldr	r3, [pc, #276]	; (3d5c <_malloc_r+0x360>)
    3c46:	ldr	r1, [r3, #0]
    3c48:	cmp	sl, fp
    3c4a:	add	r1, r2
    3c4c:	str	r1, [r3, #0]
    3c4e:	beq.w	3ef8 <_malloc_r+0x4fc>
    3c52:	ldr.w	r0, [r9]
    3c56:	ldr.w	lr, [pc, #272]	; 3d68 <_malloc_r+0x36c>
    3c5a:	adds	r0, #1
    3c5c:	ittet	ne
    3c5e:	rsbne	sl, sl, fp
    3c62:	addne	r1, sl
    3c64:	streq.w	fp, [lr]
    3c68:	strne	r1, [r3, #0]
    3c6a:	ands.w	r1, fp, #7
    3c6e:	beq.w	3ea0 <_malloc_r+0x4a4>
    3c72:	rsb	r0, r1, #8
    3c76:	rsb	r1, r1, #4096	; 0x1000
    3c7a:	add	fp, r0
    3c7c:	adds	r1, #8
    3c7e:	add	r2, fp
    3c80:	ubfx	r2, r2, #0, #12
    3c84:	rsb	r9, r2, r1
    3c88:	mov	r1, r9
    3c8a:	mov	r0, r6
    3c8c:	str	r3, [sp, #4]
    3c8e:	bl	442c <_sbrk_r>
    3c92:	adds	r3, r0, #1
    3c94:	ldr	r3, [sp, #4]
    3c96:	beq.w	3f18 <_malloc_r+0x51c>
    3c9a:	rsb	r2, fp, r0
    3c9e:	add	r2, r9
    3ca0:	orr.w	r2, r2, #1
    3ca4:	ldr	r1, [r3, #0]
    3ca6:	str.w	fp, [r7, #8]
    3caa:	add	r1, r9
    3cac:	cmp	r4, r7
    3cae:	str.w	r2, [fp, #4]
    3cb2:	str	r1, [r3, #0]
    3cb4:	ldr.w	r9, [pc, #164]	; 3d5c <_malloc_r+0x360>
    3cb8:	beq.n	3ce8 <_malloc_r+0x2ec>
    3cba:	cmp.w	r8, #15
    3cbe:	bls.w	3ebc <_malloc_r+0x4c0>
    3cc2:	ldr	r2, [r4, #4]
    3cc4:	sub.w	r3, r8, #12
    3cc8:	bic.w	r3, r3, #7
    3ccc:	adds	r0, r4, r3
    3cce:	and.w	r2, r2, #1
    3cd2:	mov.w	lr, #5
    3cd6:	orrs	r2, r3
    3cd8:	cmp	r3, #15
    3cda:	str	r2, [r4, #4]
    3cdc:	str.w	lr, [r0, #4]
    3ce0:	str.w	lr, [r0, #8]
    3ce4:	bhi.w	3f20 <_malloc_r+0x524>
    3ce8:	ldr	r3, [pc, #116]	; (3d60 <_malloc_r+0x364>)
    3cea:	ldr	r4, [r7, #8]
    3cec:	ldr	r2, [r3, #0]
    3cee:	cmp	r1, r2
    3cf0:	it	hi
    3cf2:	strhi	r1, [r3, #0]
    3cf4:	ldr	r3, [pc, #108]	; (3d64 <_malloc_r+0x368>)
    3cf6:	ldr	r2, [r3, #0]
    3cf8:	cmp	r1, r2
    3cfa:	ldr	r2, [r4, #4]
    3cfc:	it	hi
    3cfe:	strhi	r1, [r3, #0]
    3d00:	bic.w	r2, r2, #3
    3d04:	cmp	r5, r2
    3d06:	sub.w	r3, r2, r5
    3d0a:	bhi.n	3d10 <_malloc_r+0x314>
    3d0c:	cmp	r3, #15
    3d0e:	bgt.n	3d1a <_malloc_r+0x31e>
    3d10:	mov	r0, r6
    3d12:	bl	4038 <__malloc_unlock>
    3d16:	movs	r4, #0
    3d18:	b.n	3b8c <_malloc_r+0x190>
    3d1a:	adds	r2, r4, r5
    3d1c:	orr.w	r3, r3, #1
    3d20:	orr.w	r5, r5, #1
    3d24:	str	r5, [r4, #4]
    3d26:	mov	r0, r6
    3d28:	str	r2, [r7, #8]
    3d2a:	str	r3, [r2, #4]
    3d2c:	bl	4038 <__malloc_unlock>
    3d30:	adds	r4, #8
    3d32:	mov	r0, r4
    3d34:	add	sp, #12
    3d36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d3a:	cmp	r3, #20
    3d3c:	bls.n	3e22 <_malloc_r+0x426>
    3d3e:	cmp	r3, #84	; 0x54
    3d40:	bhi.w	3e8c <_malloc_r+0x490>
    3d44:	lsrs	r0, r5, #12
    3d46:	add.w	lr, r0, #111	; 0x6f
    3d4a:	mov.w	r3, lr, lsl #1
    3d4e:	adds	r0, #110	; 0x6e
    3d50:	b.n	3a40 <_malloc_r+0x44>
    3d52:	nop
    3d54:	.word	0x1fff1184
    3d58:	.word	0x1fff1a50
    3d5c:	.word	0x1fff1a54
    3d60:	.word	0x1fff1a4c
    3d64:	.word	0x1fff1a48
    3d68:	.word	0x1fff1590
    3d6c:	lsrs	r2, r3, #9
    3d6e:	cmp	r2, #4
    3d70:	bls.n	3e30 <_malloc_r+0x434>
    3d72:	cmp	r2, #20
    3d74:	bhi.w	3ede <_malloc_r+0x4e2>
    3d78:	add.w	r1, r2, #92	; 0x5c
    3d7c:	lsls	r1, r1, #1
    3d7e:	adds	r2, #91	; 0x5b
    3d80:	add.w	ip, r7, r1, lsl #2
    3d84:	ldr.w	r1, [r7, r1, lsl #2]
    3d88:	ldr.w	r8, [pc, #476]	; 3f68 <_malloc_r+0x56c>
    3d8c:	sub.w	ip, ip, #8
    3d90:	cmp	ip, r1
    3d92:	beq.w	3ea6 <_malloc_r+0x4aa>
    3d96:	ldr	r2, [r1, #4]
    3d98:	bic.w	r2, r2, #3
    3d9c:	cmp	r3, r2
    3d9e:	bcs.n	3da6 <_malloc_r+0x3aa>
    3da0:	ldr	r1, [r1, #8]
    3da2:	cmp	ip, r1
    3da4:	bne.n	3d96 <_malloc_r+0x39a>
    3da6:	ldr.w	ip, [r1, #12]
    3daa:	ldr	r2, [r7, #4]
    3dac:	str.w	ip, [r4, #12]
    3db0:	str	r1, [r4, #8]
    3db2:	str.w	r4, [ip, #8]
    3db6:	str	r4, [r1, #12]
    3db8:	b.n	3acc <_malloc_r+0xd0>
    3dba:	adds	r3, r4, r5
    3dbc:	orr.w	r7, r2, #1
    3dc0:	orr.w	r5, r5, #1
    3dc4:	str	r5, [r4, #4]
    3dc6:	mov	r0, r6
    3dc8:	str	r3, [r1, #20]
    3dca:	str	r3, [r1, #16]
    3dcc:	str.w	lr, [r3, #12]
    3dd0:	str.w	lr, [r3, #8]
    3dd4:	str	r7, [r3, #4]
    3dd6:	str	r2, [r3, r2]
    3dd8:	adds	r4, #8
    3dda:	bl	4038 <__malloc_unlock>
    3dde:	b.n	3b8c <_malloc_r+0x190>
    3de0:	ldr	r2, [r1, #4]
    3de2:	b.n	3acc <_malloc_r+0xd0>
    3de4:	add.w	r8, r8, #1
    3de8:	tst.w	r8, #3
    3dec:	add.w	ip, ip, #8
    3df0:	bne.w	3af2 <_malloc_r+0xf6>
    3df4:	b.n	3e58 <_malloc_r+0x45c>
    3df6:	ldr	r4, [r3, #12]
    3df8:	cmp	r3, r4
    3dfa:	it	eq
    3dfc:	addeq	r0, #2
    3dfe:	beq.w	3a6c <_malloc_r+0x70>
    3e02:	b.n	3b6c <_malloc_r+0x170>
    3e04:	add	r3, r1
    3e06:	mov	r4, r1
    3e08:	ldr	r2, [r3, #4]
    3e0a:	ldr	r1, [r1, #12]
    3e0c:	ldr.w	r5, [r4, #8]!
    3e10:	orr.w	r2, r2, #1
    3e14:	str	r2, [r3, #4]
    3e16:	mov	r0, r6
    3e18:	str	r1, [r5, #12]
    3e1a:	str	r5, [r1, #8]
    3e1c:	bl	4038 <__malloc_unlock>
    3e20:	b.n	3b8c <_malloc_r+0x190>
    3e22:	add.w	lr, r3, #92	; 0x5c
    3e26:	add.w	r0, r3, #91	; 0x5b
    3e2a:	mov.w	r3, lr, lsl #1
    3e2e:	b.n	3a40 <_malloc_r+0x44>
    3e30:	lsrs	r2, r3, #6
    3e32:	add.w	r1, r2, #57	; 0x39
    3e36:	lsls	r1, r1, #1
    3e38:	adds	r2, #56	; 0x38
    3e3a:	b.n	3d80 <_malloc_r+0x384>
    3e3c:	cmp	r4, r7
    3e3e:	ldr	r3, [pc, #296]	; (3f68 <_malloc_r+0x56c>)
    3e40:	beq.w	3c44 <_malloc_r+0x248>
    3e44:	ldr	r4, [r3, #8]
    3e46:	ldr	r2, [r4, #4]
    3e48:	bic.w	r2, r2, #3
    3e4c:	b.n	3d04 <_malloc_r+0x308>
    3e4e:	ldr.w	r3, [r9], #-8
    3e52:	cmp	r9, r3
    3e54:	bne.w	3f5c <_malloc_r+0x560>
    3e58:	tst.w	r0, #3
    3e5c:	add.w	r0, r0, #4294967295
    3e60:	bne.n	3e4e <_malloc_r+0x452>
    3e62:	ldr	r3, [r7, #4]
    3e64:	bic.w	r3, r3, r4
    3e68:	str	r3, [r7, #4]
    3e6a:	lsls	r4, r4, #1
    3e6c:	cmp	r4, r3
    3e6e:	bhi.w	3bec <_malloc_r+0x1f0>
    3e72:	cmp	r4, #0
    3e74:	beq.w	3bec <_malloc_r+0x1f0>
    3e78:	tst	r4, r3
    3e7a:	mov	r0, r8
    3e7c:	bne.w	3aea <_malloc_r+0xee>
    3e80:	lsls	r4, r4, #1
    3e82:	tst	r4, r3
    3e84:	add.w	r0, r0, #4
    3e88:	beq.n	3e80 <_malloc_r+0x484>
    3e8a:	b.n	3aea <_malloc_r+0xee>
    3e8c:	cmp.w	r3, #340	; 0x154
    3e90:	bhi.n	3ec4 <_malloc_r+0x4c8>
    3e92:	lsrs	r0, r5, #15
    3e94:	add.w	lr, r0, #120	; 0x78
    3e98:	mov.w	r3, lr, lsl #1
    3e9c:	adds	r0, #119	; 0x77
    3e9e:	b.n	3a40 <_malloc_r+0x44>
    3ea0:	mov.w	r1, #4096	; 0x1000
    3ea4:	b.n	3c7e <_malloc_r+0x282>
    3ea6:	movs	r1, #1
    3ea8:	ldr.w	r3, [r8, #4]
    3eac:	asrs	r2, r2, #2
    3eae:	lsl.w	r2, r1, r2
    3eb2:	orrs	r2, r3
    3eb4:	str.w	r2, [r8, #4]
    3eb8:	mov	r1, ip
    3eba:	b.n	3dac <_malloc_r+0x3b0>
    3ebc:	movs	r3, #1
    3ebe:	str.w	r3, [fp, #4]
    3ec2:	b.n	3d10 <_malloc_r+0x314>
    3ec4:	movw	r2, #1364	; 0x554
    3ec8:	cmp	r3, r2
    3eca:	bhi.n	3f0e <_malloc_r+0x512>
    3ecc:	lsrs	r0, r5, #18
    3ece:	add.w	lr, r0, #125	; 0x7d
    3ed2:	mov.w	r3, lr, lsl #1
    3ed6:	adds	r0, #124	; 0x7c
    3ed8:	b.n	3a40 <_malloc_r+0x44>
    3eda:	adds	r2, #16
    3edc:	b.n	3c28 <_malloc_r+0x22c>
    3ede:	cmp	r2, #84	; 0x54
    3ee0:	bhi.n	3f30 <_malloc_r+0x534>
    3ee2:	lsrs	r2, r3, #12
    3ee4:	add.w	r1, r2, #111	; 0x6f
    3ee8:	lsls	r1, r1, #1
    3eea:	adds	r2, #110	; 0x6e
    3eec:	b.n	3d80 <_malloc_r+0x384>
    3eee:	ldr	r4, [r7, #8]
    3ef0:	ldr	r2, [r4, #4]
    3ef2:	bic.w	r2, r2, #3
    3ef6:	b.n	3d04 <_malloc_r+0x308>
    3ef8:	ubfx	r0, sl, #0, #12
    3efc:	cmp	r0, #0
    3efe:	bne.w	3c52 <_malloc_r+0x256>
    3f02:	add	r2, r8
    3f04:	ldr	r3, [r7, #8]
    3f06:	orr.w	r2, r2, #1
    3f0a:	str	r2, [r3, #4]
    3f0c:	b.n	3ce8 <_malloc_r+0x2ec>
    3f0e:	movs	r3, #254	; 0xfe
    3f10:	mov.w	lr, #127	; 0x7f
    3f14:	movs	r0, #126	; 0x7e
    3f16:	b.n	3a40 <_malloc_r+0x44>
    3f18:	movs	r2, #1
    3f1a:	mov.w	r9, #0
    3f1e:	b.n	3ca4 <_malloc_r+0x2a8>
    3f20:	add.w	r1, r4, #8
    3f24:	mov	r0, r6
    3f26:	bl	4768 <_free_r>
    3f2a:	ldr.w	r1, [r9]
    3f2e:	b.n	3ce8 <_malloc_r+0x2ec>
    3f30:	cmp.w	r2, #340	; 0x154
    3f34:	bhi.n	3f42 <_malloc_r+0x546>
    3f36:	lsrs	r2, r3, #15
    3f38:	add.w	r1, r2, #120	; 0x78
    3f3c:	lsls	r1, r1, #1
    3f3e:	adds	r2, #119	; 0x77
    3f40:	b.n	3d80 <_malloc_r+0x384>
    3f42:	movw	r1, #1364	; 0x554
    3f46:	cmp	r2, r1
    3f48:	bhi.n	3f56 <_malloc_r+0x55a>
    3f4a:	lsrs	r2, r3, #18
    3f4c:	add.w	r1, r2, #125	; 0x7d
    3f50:	lsls	r1, r1, #1
    3f52:	adds	r2, #124	; 0x7c
    3f54:	b.n	3d80 <_malloc_r+0x384>
    3f56:	movs	r1, #254	; 0xfe
    3f58:	movs	r2, #126	; 0x7e
    3f5a:	b.n	3d80 <_malloc_r+0x384>
    3f5c:	ldr	r3, [r7, #4]
    3f5e:	b.n	3e6a <_malloc_r+0x46e>
    3f60:	lsrs	r0, r5, #3
    3f62:	adds	r3, r0, #1
    3f64:	lsls	r3, r3, #1
    3f66:	b.n	3b5a <_malloc_r+0x15e>
    3f68:	.word	0x1fff1184

00003f6c <memmove>:
    3f6c:	cmp	r0, r1
    3f6e:	push	{r4, r5, r6, r7, lr}
    3f70:	bls.n	3f8e <memmove+0x22>
    3f72:	adds	r3, r1, r2
    3f74:	cmp	r0, r3
    3f76:	bcs.n	3f8e <memmove+0x22>
    3f78:	adds	r1, r0, r2
    3f7a:	cmp	r2, #0
    3f7c:	beq.n	4022 <memmove+0xb6>
    3f7e:	subs	r2, r3, r2
    3f80:	ldrb.w	r4, [r3, #-1]!
    3f84:	strb.w	r4, [r1, #-1]!
    3f88:	cmp	r3, r2
    3f8a:	bne.n	3f80 <memmove+0x14>
    3f8c:	pop	{r4, r5, r6, r7, pc}
    3f8e:	cmp	r2, #15
    3f90:	bls.n	4024 <memmove+0xb8>
    3f92:	orr.w	r3, r1, r0
    3f96:	lsls	r3, r3, #30
    3f98:	bne.n	4028 <memmove+0xbc>
    3f9a:	add.w	r4, r0, #16
    3f9e:	add.w	r3, r1, #16
    3fa2:	mov	r5, r2
    3fa4:	ldr.w	r6, [r3, #-16]
    3fa8:	str.w	r6, [r4, #-16]
    3fac:	ldr.w	r6, [r3, #-12]
    3fb0:	str.w	r6, [r4, #-12]
    3fb4:	ldr.w	r6, [r3, #-8]
    3fb8:	str.w	r6, [r4, #-8]
    3fbc:	subs	r5, #16
    3fbe:	ldr.w	r6, [r3, #-4]
    3fc2:	str.w	r6, [r4, #-4]
    3fc6:	cmp	r5, #15
    3fc8:	add.w	r3, r3, #16
    3fcc:	add.w	r4, r4, #16
    3fd0:	bhi.n	3fa4 <memmove+0x38>
    3fd2:	sub.w	r3, r2, #16
    3fd6:	bic.w	r3, r3, #15
    3fda:	and.w	lr, r2, #15
    3fde:	adds	r3, #16
    3fe0:	cmp.w	lr, #3
    3fe4:	add	r1, r3
    3fe6:	add	r3, r0
    3fe8:	bls.n	402e <memmove+0xc2>
    3fea:	subs	r6, r3, #4
    3fec:	mov	r5, r1
    3fee:	mov	r4, lr
    3ff0:	subs	r4, #4
    3ff2:	ldr.w	r7, [r5], #4
    3ff6:	str.w	r7, [r6, #4]!
    3ffa:	cmp	r4, #3
    3ffc:	bhi.n	3ff0 <memmove+0x84>
    3ffe:	sub.w	r4, lr, #4
    4002:	bic.w	r4, r4, #3
    4006:	adds	r4, #4
    4008:	add	r3, r4
    400a:	add	r1, r4
    400c:	and.w	r2, r2, #3
    4010:	cbz	r2, 402c <memmove+0xc0>
    4012:	subs	r3, #1
    4014:	add	r2, r1
    4016:	ldrb.w	r4, [r1], #1
    401a:	strb.w	r4, [r3, #1]!
    401e:	cmp	r2, r1
    4020:	bne.n	4016 <memmove+0xaa>
    4022:	pop	{r4, r5, r6, r7, pc}
    4024:	mov	r3, r0
    4026:	b.n	4010 <memmove+0xa4>
    4028:	mov	r3, r0
    402a:	b.n	4012 <memmove+0xa6>
    402c:	pop	{r4, r5, r6, r7, pc}
    402e:	mov	r2, lr
    4030:	b.n	4010 <memmove+0xa4>
    4032:	nop

00004034 <__malloc_lock>:
    4034:	bx	lr
    4036:	nop

00004038 <__malloc_unlock>:
    4038:	bx	lr
    403a:	nop

0000403c <realloc>:
    403c:	ldr	r3, [pc, #8]	; (4048 <realloc+0xc>)
    403e:	mov	r2, r1
    4040:	mov	r1, r0
    4042:	ldr	r0, [r3, #0]
    4044:	b.w	404c <_realloc_r>
    4048:	.word	0x1fff1180

0000404c <_realloc_r>:
    404c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4050:	mov	r7, r2
    4052:	sub	sp, #12
    4054:	cmp	r1, #0
    4056:	beq.w	41dc <_realloc_r+0x190>
    405a:	mov	r6, r1
    405c:	mov	r9, r0
    405e:	add.w	r5, r7, #11
    4062:	bl	4034 <__malloc_lock>
    4066:	ldr.w	lr, [r6, #-4]
    406a:	cmp	r5, #22
    406c:	bic.w	r4, lr, #3
    4070:	sub.w	r8, r6, #8
    4074:	bhi.n	40f8 <_realloc_r+0xac>
    4076:	movs	r2, #16
    4078:	mov	r5, r2
    407a:	cmp	r7, r5
    407c:	bhi.n	4102 <_realloc_r+0xb6>
    407e:	cmp	r4, r2
    4080:	bge.n	416e <_realloc_r+0x122>
    4082:	ldr	r3, [pc, #804]	; (43a8 <_realloc_r+0x35c>)
    4084:	ldr	r1, [r3, #8]
    4086:	add.w	r0, r8, r4
    408a:	cmp	r0, r1
    408c:	ldr	r1, [r0, #4]
    408e:	beq.w	4244 <_realloc_r+0x1f8>
    4092:	bic.w	r3, r1, #1
    4096:	add	r3, r0
    4098:	ldr	r3, [r3, #4]
    409a:	lsls	r3, r3, #31
    409c:	bpl.n	419a <_realloc_r+0x14e>
    409e:	tst.w	lr, #1
    40a2:	beq.n	4110 <_realloc_r+0xc4>
    40a4:	mov	r1, r7
    40a6:	mov	r0, r9
    40a8:	bl	39fc <_malloc_r>
    40ac:	mov	r7, r0
    40ae:	cbz	r0, 40ea <_realloc_r+0x9e>
    40b0:	ldr.w	r3, [r6, #-4]
    40b4:	bic.w	r3, r3, #1
    40b8:	add	r3, r8
    40ba:	sub.w	r2, r0, #8
    40be:	cmp	r2, r3
    40c0:	beq.w	434c <_realloc_r+0x300>
    40c4:	subs	r2, r4, #4
    40c6:	cmp	r2, #36	; 0x24
    40c8:	bhi.w	432e <_realloc_r+0x2e2>
    40cc:	cmp	r2, #19
    40ce:	bhi.w	42da <_realloc_r+0x28e>
    40d2:	mov	r3, r0
    40d4:	mov	r2, r6
    40d6:	ldr	r1, [r2, #0]
    40d8:	str	r1, [r3, #0]
    40da:	ldr	r1, [r2, #4]
    40dc:	str	r1, [r3, #4]
    40de:	ldr	r2, [r2, #8]
    40e0:	str	r2, [r3, #8]
    40e2:	mov	r1, r6
    40e4:	mov	r0, r9
    40e6:	bl	4768 <_free_r>
    40ea:	mov	r0, r9
    40ec:	bl	4038 <__malloc_unlock>
    40f0:	mov	r0, r7
    40f2:	add	sp, #12
    40f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40f8:	bic.w	r5, r5, #7
    40fc:	cmp	r5, #0
    40fe:	mov	r2, r5
    4100:	bge.n	407a <_realloc_r+0x2e>
    4102:	movs	r3, #12
    4104:	movs	r0, #0
    4106:	str.w	r3, [r9]
    410a:	add	sp, #12
    410c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4110:	ldr.w	r3, [r6, #-8]
    4114:	rsb	sl, r3, r8
    4118:	ldr.w	r3, [sl, #4]
    411c:	bic.w	ip, r3, #3
    4120:	add.w	r3, r4, ip
    4124:	cmp	r3, r2
    4126:	blt.n	40a4 <_realloc_r+0x58>
    4128:	mov	r7, sl
    412a:	ldr.w	r1, [sl, #12]
    412e:	ldr.w	r0, [r7, #8]!
    4132:	subs	r2, r4, #4
    4134:	cmp	r2, #36	; 0x24
    4136:	str	r1, [r0, #12]
    4138:	str	r0, [r1, #8]
    413a:	bhi.w	436c <_realloc_r+0x320>
    413e:	cmp	r2, #19
    4140:	bls.w	4368 <_realloc_r+0x31c>
    4144:	ldr	r1, [r6, #0]
    4146:	str.w	r1, [sl, #8]
    414a:	ldr	r1, [r6, #4]
    414c:	str.w	r1, [sl, #12]
    4150:	cmp	r2, #27
    4152:	bhi.w	43ac <_realloc_r+0x360>
    4156:	adds	r6, #8
    4158:	add.w	r2, sl, #16
    415c:	ldr	r1, [r6, #0]
    415e:	str	r1, [r2, #0]
    4160:	ldr	r1, [r6, #4]
    4162:	str	r1, [r2, #4]
    4164:	ldr	r1, [r6, #8]
    4166:	str	r1, [r2, #8]
    4168:	mov	r6, r7
    416a:	mov	r4, r3
    416c:	mov	r8, sl
    416e:	subs	r3, r4, r5
    4170:	cmp	r3, #15
    4172:	bhi.n	41b0 <_realloc_r+0x164>
    4174:	ldr.w	r3, [r8, #4]
    4178:	and.w	r3, r3, #1
    417c:	orrs	r3, r4
    417e:	add	r4, r8
    4180:	str.w	r3, [r8, #4]
    4184:	ldr	r3, [r4, #4]
    4186:	orr.w	r3, r3, #1
    418a:	str	r3, [r4, #4]
    418c:	mov	r0, r9
    418e:	bl	4038 <__malloc_unlock>
    4192:	mov	r0, r6
    4194:	add	sp, #12
    4196:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    419a:	bic.w	r1, r1, #3
    419e:	add	r1, r4
    41a0:	cmp	r1, r2
    41a2:	blt.n	41e8 <_realloc_r+0x19c>
    41a4:	ldr	r3, [r0, #12]
    41a6:	ldr	r2, [r0, #8]
    41a8:	mov	r4, r1
    41aa:	str	r3, [r2, #12]
    41ac:	str	r2, [r3, #8]
    41ae:	b.n	416e <_realloc_r+0x122>
    41b0:	ldr.w	r2, [r8, #4]
    41b4:	add.w	r1, r8, r5
    41b8:	and.w	r2, r2, #1
    41bc:	orrs	r5, r2
    41be:	orr.w	r2, r3, #1
    41c2:	add	r3, r1
    41c4:	str.w	r5, [r8, #4]
    41c8:	str	r2, [r1, #4]
    41ca:	ldr	r2, [r3, #4]
    41cc:	orr.w	r2, r2, #1
    41d0:	adds	r1, #8
    41d2:	str	r2, [r3, #4]
    41d4:	mov	r0, r9
    41d6:	bl	4768 <_free_r>
    41da:	b.n	418c <_realloc_r+0x140>
    41dc:	mov	r1, r2
    41de:	add	sp, #12
    41e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41e4:	b.w	39fc <_malloc_r>
    41e8:	tst.w	lr, #1
    41ec:	bne.w	40a4 <_realloc_r+0x58>
    41f0:	ldr.w	r3, [r6, #-8]
    41f4:	rsb	sl, r3, r8
    41f8:	ldr.w	r3, [sl, #4]
    41fc:	bic.w	ip, r3, #3
    4200:	add.w	lr, r1, ip
    4204:	cmp	lr, r2
    4206:	blt.n	4120 <_realloc_r+0xd4>
    4208:	ldr	r3, [r0, #12]
    420a:	ldr	r2, [r0, #8]
    420c:	mov	r7, sl
    420e:	str	r3, [r2, #12]
    4210:	str	r2, [r3, #8]
    4212:	ldr.w	r1, [r7, #8]!
    4216:	ldr.w	r3, [sl, #12]
    421a:	str	r3, [r1, #12]
    421c:	subs	r2, r4, #4
    421e:	cmp	r2, #36	; 0x24
    4220:	str	r1, [r3, #8]
    4222:	bhi.w	4358 <_realloc_r+0x30c>
    4226:	cmp	r2, #19
    4228:	bls.n	42f0 <_realloc_r+0x2a4>
    422a:	ldr	r3, [r6, #0]
    422c:	str.w	r3, [sl, #8]
    4230:	ldr	r3, [r6, #4]
    4232:	str.w	r3, [sl, #12]
    4236:	cmp	r2, #27
    4238:	bhi.w	437c <_realloc_r+0x330>
    423c:	adds	r6, #8
    423e:	add.w	r3, sl, #16
    4242:	b.n	42f2 <_realloc_r+0x2a6>
    4244:	bic.w	fp, r1, #3
    4248:	add	fp, r4
    424a:	add.w	r0, r5, #16
    424e:	cmp	fp, r0
    4250:	bge.n	4306 <_realloc_r+0x2ba>
    4252:	tst.w	lr, #1
    4256:	bne.w	40a4 <_realloc_r+0x58>
    425a:	ldr.w	r1, [r6, #-8]
    425e:	rsb	sl, r1, r8
    4262:	ldr.w	r1, [sl, #4]
    4266:	bic.w	ip, r1, #3
    426a:	add	fp, ip
    426c:	cmp	r0, fp
    426e:	bgt.w	4120 <_realloc_r+0xd4>
    4272:	mov	r7, sl
    4274:	ldr.w	r1, [sl, #12]
    4278:	ldr.w	r0, [r7, #8]!
    427c:	subs	r2, r4, #4
    427e:	cmp	r2, #36	; 0x24
    4280:	str	r1, [r0, #12]
    4282:	str	r0, [r1, #8]
    4284:	bhi.w	43f0 <_realloc_r+0x3a4>
    4288:	cmp	r2, #19
    428a:	bls.w	43d8 <_realloc_r+0x38c>
    428e:	ldr	r1, [r6, #0]
    4290:	str.w	r1, [sl, #8]
    4294:	ldr	r1, [r6, #4]
    4296:	str.w	r1, [sl, #12]
    429a:	cmp	r2, #27
    429c:	bhi.w	43fe <_realloc_r+0x3b2>
    42a0:	adds	r6, #8
    42a2:	add.w	r2, sl, #16
    42a6:	ldr	r1, [r6, #0]
    42a8:	str	r1, [r2, #0]
    42aa:	ldr	r1, [r6, #4]
    42ac:	str	r1, [r2, #4]
    42ae:	ldr	r1, [r6, #8]
    42b0:	str	r1, [r2, #8]
    42b2:	add.w	r1, sl, r5
    42b6:	rsb	r2, r5, fp
    42ba:	orr.w	r2, r2, #1
    42be:	str	r1, [r3, #8]
    42c0:	str	r2, [r1, #4]
    42c2:	ldr.w	r3, [sl, #4]
    42c6:	and.w	r3, r3, #1
    42ca:	orrs	r5, r3
    42cc:	mov	r0, r9
    42ce:	str.w	r5, [sl, #4]
    42d2:	bl	4038 <__malloc_unlock>
    42d6:	mov	r0, r7
    42d8:	b.n	4194 <_realloc_r+0x148>
    42da:	ldr	r3, [r6, #0]
    42dc:	str	r3, [r0, #0]
    42de:	ldr	r3, [r6, #4]
    42e0:	str	r3, [r0, #4]
    42e2:	cmp	r2, #27
    42e4:	bhi.n	4336 <_realloc_r+0x2ea>
    42e6:	add.w	r3, r0, #8
    42ea:	add.w	r2, r6, #8
    42ee:	b.n	40d6 <_realloc_r+0x8a>
    42f0:	mov	r3, r7
    42f2:	ldr	r2, [r6, #0]
    42f4:	str	r2, [r3, #0]
    42f6:	ldr	r2, [r6, #4]
    42f8:	str	r2, [r3, #4]
    42fa:	ldr	r2, [r6, #8]
    42fc:	str	r2, [r3, #8]
    42fe:	mov	r6, r7
    4300:	mov	r4, lr
    4302:	mov	r8, sl
    4304:	b.n	416e <_realloc_r+0x122>
    4306:	add.w	r1, r8, r5
    430a:	rsb	fp, r5, fp
    430e:	orr.w	r2, fp, #1
    4312:	str	r1, [r3, #8]
    4314:	str	r2, [r1, #4]
    4316:	ldr.w	r3, [r6, #-4]
    431a:	and.w	r3, r3, #1
    431e:	orrs	r5, r3
    4320:	mov	r0, r9
    4322:	str.w	r5, [r6, #-4]
    4326:	bl	4038 <__malloc_unlock>
    432a:	mov	r0, r6
    432c:	b.n	4194 <_realloc_r+0x148>
    432e:	mov	r1, r6
    4330:	bl	3f6c <memmove>
    4334:	b.n	40e2 <_realloc_r+0x96>
    4336:	ldr	r3, [r6, #8]
    4338:	str	r3, [r0, #8]
    433a:	ldr	r3, [r6, #12]
    433c:	str	r3, [r0, #12]
    433e:	cmp	r2, #36	; 0x24
    4340:	beq.n	4394 <_realloc_r+0x348>
    4342:	add.w	r3, r0, #16
    4346:	add.w	r2, r6, #16
    434a:	b.n	40d6 <_realloc_r+0x8a>
    434c:	ldr.w	r3, [r0, #-4]
    4350:	bic.w	r3, r3, #3
    4354:	add	r4, r3
    4356:	b.n	416e <_realloc_r+0x122>
    4358:	mov	r1, r6
    435a:	mov	r0, r7
    435c:	mov	r4, lr
    435e:	mov	r8, sl
    4360:	bl	3f6c <memmove>
    4364:	mov	r6, r7
    4366:	b.n	416e <_realloc_r+0x122>
    4368:	mov	r2, r7
    436a:	b.n	415c <_realloc_r+0x110>
    436c:	mov	r1, r6
    436e:	mov	r0, r7
    4370:	mov	r4, r3
    4372:	mov	r8, sl
    4374:	bl	3f6c <memmove>
    4378:	mov	r6, r7
    437a:	b.n	416e <_realloc_r+0x122>
    437c:	ldr	r3, [r6, #8]
    437e:	str.w	r3, [sl, #16]
    4382:	ldr	r3, [r6, #12]
    4384:	str.w	r3, [sl, #20]
    4388:	cmp	r2, #36	; 0x24
    438a:	beq.n	43c4 <_realloc_r+0x378>
    438c:	adds	r6, #16
    438e:	add.w	r3, sl, #24
    4392:	b.n	42f2 <_realloc_r+0x2a6>
    4394:	ldr	r3, [r6, #16]
    4396:	str	r3, [r0, #16]
    4398:	ldr	r3, [r6, #20]
    439a:	str	r3, [r0, #20]
    439c:	add.w	r2, r6, #24
    43a0:	add.w	r3, r0, #24
    43a4:	b.n	40d6 <_realloc_r+0x8a>
    43a6:	nop
    43a8:	.word	0x1fff1184
    43ac:	ldr	r1, [r6, #8]
    43ae:	str.w	r1, [sl, #16]
    43b2:	ldr	r1, [r6, #12]
    43b4:	str.w	r1, [sl, #20]
    43b8:	cmp	r2, #36	; 0x24
    43ba:	beq.n	43dc <_realloc_r+0x390>
    43bc:	adds	r6, #16
    43be:	add.w	r2, sl, #24
    43c2:	b.n	415c <_realloc_r+0x110>
    43c4:	ldr	r3, [r6, #16]
    43c6:	str.w	r3, [sl, #24]
    43ca:	ldr	r3, [r6, #20]
    43cc:	str.w	r3, [sl, #28]
    43d0:	adds	r6, #24
    43d2:	add.w	r3, sl, #32
    43d6:	b.n	42f2 <_realloc_r+0x2a6>
    43d8:	mov	r2, r7
    43da:	b.n	42a6 <_realloc_r+0x25a>
    43dc:	ldr	r2, [r6, #16]
    43de:	str.w	r2, [sl, #24]
    43e2:	ldr	r2, [r6, #20]
    43e4:	str.w	r2, [sl, #28]
    43e8:	adds	r6, #24
    43ea:	add.w	r2, sl, #32
    43ee:	b.n	415c <_realloc_r+0x110>
    43f0:	mov	r1, r6
    43f2:	mov	r0, r7
    43f4:	str	r3, [sp, #4]
    43f6:	bl	3f6c <memmove>
    43fa:	ldr	r3, [sp, #4]
    43fc:	b.n	42b2 <_realloc_r+0x266>
    43fe:	ldr	r1, [r6, #8]
    4400:	str.w	r1, [sl, #16]
    4404:	ldr	r1, [r6, #12]
    4406:	str.w	r1, [sl, #20]
    440a:	cmp	r2, #36	; 0x24
    440c:	beq.n	4416 <_realloc_r+0x3ca>
    440e:	adds	r6, #16
    4410:	add.w	r2, sl, #24
    4414:	b.n	42a6 <_realloc_r+0x25a>
    4416:	ldr	r2, [r6, #16]
    4418:	str.w	r2, [sl, #24]
    441c:	ldr	r2, [r6, #20]
    441e:	str.w	r2, [sl, #28]
    4422:	adds	r6, #24
    4424:	add.w	r2, sl, #32
    4428:	b.n	42a6 <_realloc_r+0x25a>
    442a:	nop

0000442c <_sbrk_r>:
    442c:	push	{r3, r4, r5, lr}
    442e:	ldr	r4, [pc, #28]	; (444c <_sbrk_r+0x20>)
    4430:	movs	r3, #0
    4432:	mov	r5, r0
    4434:	mov	r0, r1
    4436:	str	r3, [r4, #0]
    4438:	bl	32d4 <_sbrk>
    443c:	adds	r3, r0, #1
    443e:	beq.n	4442 <_sbrk_r+0x16>
    4440:	pop	{r3, r4, r5, pc}
    4442:	ldr	r3, [r4, #0]
    4444:	cmp	r3, #0
    4446:	beq.n	4440 <_sbrk_r+0x14>
    4448:	str	r3, [r5, #0]
    444a:	pop	{r3, r4, r5, pc}
    444c:	.word	0x1fff1bc0

00004450 <strcpy>:
    4450:	eor.w	r2, r0, r1
    4454:	mov	ip, r0
    4456:	tst.w	r2, #3
    445a:	bne.n	44fc <strcpy+0xac>
    445c:	tst.w	r1, #3
    4460:	bne.n	44c8 <strcpy+0x78>
    4462:	str.w	r4, [sp, #-4]!
    4466:	tst.w	r1, #4
    446a:	ldr.w	r3, [r1], #4
    446e:	beq.n	4488 <strcpy+0x38>
    4470:	sub.w	r2, r3, #16843009	; 0x1010101
    4474:	bics	r2, r3
    4476:	tst.w	r2, #2155905152	; 0x80808080
    447a:	itt	eq
    447c:	streq.w	r3, [ip], #4
    4480:	ldreq.w	r3, [r1], #4
    4484:	bne.n	44b4 <strcpy+0x64>
    4486:	nop
    4488:	ldr.w	r4, [r1], #4
    448c:	sub.w	r2, r3, #16843009	; 0x1010101
    4490:	bics	r2, r3
    4492:	tst.w	r2, #2155905152	; 0x80808080
    4496:	sub.w	r2, r4, #16843009	; 0x1010101
    449a:	bne.n	44b4 <strcpy+0x64>
    449c:	str.w	r3, [ip], #4
    44a0:	bics	r2, r4
    44a2:	tst.w	r2, #2155905152	; 0x80808080
    44a6:	itt	eq
    44a8:	ldreq.w	r3, [r1], #4
    44ac:	streq.w	r4, [ip], #4
    44b0:	beq.n	4488 <strcpy+0x38>
    44b2:	mov	r3, r4
    44b4:	strb.w	r3, [ip], #1
    44b8:	tst.w	r3, #255	; 0xff
    44bc:	mov.w	r3, r3, ror #8
    44c0:	bne.n	44b4 <strcpy+0x64>
    44c2:	ldr.w	r4, [sp], #4
    44c6:	bx	lr
    44c8:	tst.w	r1, #1
    44cc:	beq.n	44dc <strcpy+0x8c>
    44ce:	ldrb.w	r2, [r1], #1
    44d2:	strb.w	r2, [ip], #1
    44d6:	cmp	r2, #0
    44d8:	it	eq
    44da:	bxeq	lr
    44dc:	tst.w	r1, #2
    44e0:	beq.n	4462 <strcpy+0x12>
    44e2:	ldrh.w	r2, [r1], #2
    44e6:	tst.w	r2, #255	; 0xff
    44ea:	itet	ne
    44ec:	strhne.w	r2, [ip], #2
    44f0:	strbeq.w	r2, [ip]
    44f4:	tstne.w	r2, #65280	; 0xff00
    44f8:	bne.n	4462 <strcpy+0x12>
    44fa:	bx	lr
    44fc:	ldrb.w	r2, [r1], #1
    4500:	strb.w	r2, [ip], #1
    4504:	cmp	r2, #0
    4506:	bne.n	44fc <strcpy+0xac>
    4508:	bx	lr
    450a:	nop
    450c:			; <UNDEFINED> instruction: 0xffffffff
    4510:			; <UNDEFINED> instruction: 0xffffffff
    4514:			; <UNDEFINED> instruction: 0xffffffff
    4518:			; <UNDEFINED> instruction: 0xffffffff
    451c:			; <UNDEFINED> instruction: 0xffffffff
    4520:			; <UNDEFINED> instruction: 0xffffffff
    4524:			; <UNDEFINED> instruction: 0xffffffff
    4528:			; <UNDEFINED> instruction: 0xffffffff
    452c:			; <UNDEFINED> instruction: 0xffffffff
    4530:			; <UNDEFINED> instruction: 0xffffffff
    4534:			; <UNDEFINED> instruction: 0xffffffff
    4538:			; <UNDEFINED> instruction: 0xffffffff
    453c:			; <UNDEFINED> instruction: 0xffffffff

00004540 <strlen>:
    4540:	pld	[r0]
    4544:	strd	r4, r5, [sp, #-8]!
    4548:	bic.w	r1, r0, #7
    454c:	mvn.w	ip, #0
    4550:	ands.w	r4, r0, #7
    4554:	pld	[r1, #32]
    4558:	bne.w	45ee <strlen+0xae>
    455c:	mov.w	r4, #0
    4560:	mvn.w	r0, #7
    4564:	ldrd	r2, r3, [r1]
    4568:	pld	[r1, #64]	; 0x40
    456c:	add.w	r0, r0, #8
    4570:	uadd8	r2, r2, ip
    4574:	sel	r2, r4, ip
    4578:	uadd8	r3, r3, ip
    457c:	sel	r3, r2, ip
    4580:	cbnz	r3, 45d6 <strlen+0x96>
    4582:	ldrd	r2, r3, [r1, #8]
    4586:	uadd8	r2, r2, ip
    458a:	add.w	r0, r0, #8
    458e:	sel	r2, r4, ip
    4592:	uadd8	r3, r3, ip
    4596:	sel	r3, r2, ip
    459a:	cbnz	r3, 45d6 <strlen+0x96>
    459c:	ldrd	r2, r3, [r1, #16]
    45a0:	uadd8	r2, r2, ip
    45a4:	add.w	r0, r0, #8
    45a8:	sel	r2, r4, ip
    45ac:	uadd8	r3, r3, ip
    45b0:	sel	r3, r2, ip
    45b4:	cbnz	r3, 45d6 <strlen+0x96>
    45b6:	ldrd	r2, r3, [r1, #24]
    45ba:	add.w	r1, r1, #32
    45be:	uadd8	r2, r2, ip
    45c2:	add.w	r0, r0, #8
    45c6:	sel	r2, r4, ip
    45ca:	uadd8	r3, r3, ip
    45ce:	sel	r3, r2, ip
    45d2:	cmp	r3, #0
    45d4:	beq.n	4564 <strlen+0x24>
    45d6:	cmp	r2, #0
    45d8:	itt	eq
    45da:	addeq	r0, #4
    45dc:	moveq	r2, r3
    45de:	rev	r2, r2
    45e0:	clz	r2, r2
    45e4:	ldrd	r4, r5, [sp], #8
    45e8:	add.w	r0, r0, r2, lsr #3
    45ec:	bx	lr
    45ee:	ldrd	r2, r3, [r1]
    45f2:	and.w	r5, r4, #3
    45f6:	rsb	r0, r4, #0
    45fa:	mov.w	r5, r5, lsl #3
    45fe:	tst.w	r4, #4
    4602:	pld	[r1, #64]	; 0x40
    4606:	lsl.w	r5, ip, r5
    460a:	orn	r2, r2, r5
    460e:	itt	ne
    4610:	ornne	r3, r3, r5
    4614:	movne	r2, ip
    4616:	mov.w	r4, #0
    461a:	b.n	4570 <strlen+0x30>

0000461c <strncpy>:
    461c:	orr.w	r3, r0, r1
    4620:	lsls	r3, r3, #30
    4622:	push	{r4, r5, r6}
    4624:	bne.n	467e <strncpy+0x62>
    4626:	cmp	r2, #3
    4628:	bls.n	467e <strncpy+0x62>
    462a:	mov	r4, r1
    462c:	mov	r3, r0
    462e:	mov	r1, r4
    4630:	ldr.w	r6, [r4], #4
    4634:	sub.w	r5, r6, #16843009	; 0x1010101
    4638:	bic.w	r5, r5, r6
    463c:	tst.w	r5, #2155905152	; 0x80808080
    4640:	bne.n	4650 <strncpy+0x34>
    4642:	subs	r2, #4
    4644:	cmp	r2, #3
    4646:	str.w	r6, [r3], #4
    464a:	mov	r1, r4
    464c:	bhi.n	462e <strncpy+0x12>
    464e:	cbz	r2, 467a <strncpy+0x5e>
    4650:	ldrb	r4, [r1, #0]
    4652:	strb	r4, [r3, #0]
    4654:	subs	r2, #1
    4656:	adds	r3, #1
    4658:	adds	r1, #1
    465a:	cbz	r4, 466c <strncpy+0x50>
    465c:	cbz	r2, 467a <strncpy+0x5e>
    465e:	ldrb.w	r4, [r1], #1
    4662:	strb.w	r4, [r3], #1
    4666:	subs	r2, #1
    4668:	cmp	r4, #0
    466a:	bne.n	465c <strncpy+0x40>
    466c:	cbz	r2, 467a <strncpy+0x5e>
    466e:	add	r2, r3
    4670:	movs	r1, #0
    4672:	strb.w	r1, [r3], #1
    4676:	cmp	r2, r3
    4678:	bne.n	4672 <strncpy+0x56>
    467a:	pop	{r4, r5, r6}
    467c:	bx	lr
    467e:	mov	r3, r0
    4680:	b.n	464e <strncpy+0x32>
    4682:	nop

00004684 <register_fini>:
    4684:	ldr	r3, [pc, #8]	; (4690 <register_fini+0xc>)
    4686:	cbz	r3, 468e <register_fini+0xa>
    4688:	ldr	r0, [pc, #8]	; (4694 <register_fini+0x10>)
    468a:	b.w	4698 <atexit>
    468e:	bx	lr
    4690:	.word	0x00000000
    4694:	.word	0x000046a5

00004698 <atexit>:
    4698:	movs	r3, #0
    469a:	mov	r1, r0
    469c:	mov	r2, r3
    469e:	mov	r0, r3
    46a0:	b.w	4938 <__register_exitproc>

000046a4 <__libc_fini_array>:
    46a4:	push	{r3, r4, r5, lr}
    46a6:	ldr	r5, [pc, #28]	; (46c4 <__libc_fini_array+0x20>)
    46a8:	ldr	r4, [pc, #28]	; (46c8 <__libc_fini_array+0x24>)
    46aa:	subs	r4, r5, r4
    46ac:	asrs	r4, r4, #2
    46ae:	beq.n	46bc <__libc_fini_array+0x18>
    46b0:	subs	r4, #1
    46b2:	ldr.w	r3, [r5, #-4]!
    46b6:	blx	r3
    46b8:	cmp	r4, #0
    46ba:	bne.n	46b0 <__libc_fini_array+0xc>
    46bc:	ldmia.w	sp!, {r3, r4, r5, lr}
    46c0:	b.w	4d94 <__init_array_end>
	...

000046cc <_malloc_trim_r>:
    46cc:	push	{r3, r4, r5, r6, r7, lr}
    46ce:	ldr	r7, [pc, #140]	; (475c <_malloc_trim_r+0x90>)
    46d0:	mov	r4, r1
    46d2:	mov	r6, r0
    46d4:	bl	4034 <__malloc_lock>
    46d8:	ldr	r3, [r7, #8]
    46da:	ldr	r5, [r3, #4]
    46dc:	bic.w	r5, r5, #3
    46e0:	subs	r1, r5, r4
    46e2:	addw	r1, r1, #4079	; 0xfef
    46e6:	bic.w	r1, r1, #4080	; 0xff0
    46ea:	bic.w	r1, r1, #15
    46ee:	sub.w	r4, r1, #4096	; 0x1000
    46f2:	cmp.w	r4, #4096	; 0x1000
    46f6:	blt.n	4708 <_malloc_trim_r+0x3c>
    46f8:	movs	r1, #0
    46fa:	mov	r0, r6
    46fc:	bl	442c <_sbrk_r>
    4700:	ldr	r3, [r7, #8]
    4702:	add	r3, r5
    4704:	cmp	r0, r3
    4706:	beq.n	4712 <_malloc_trim_r+0x46>
    4708:	mov	r0, r6
    470a:	bl	4038 <__malloc_unlock>
    470e:	movs	r0, #0
    4710:	pop	{r3, r4, r5, r6, r7, pc}
    4712:	negs	r1, r4
    4714:	mov	r0, r6
    4716:	bl	442c <_sbrk_r>
    471a:	adds	r0, #1
    471c:	beq.n	473a <_malloc_trim_r+0x6e>
    471e:	ldr	r3, [pc, #64]	; (4760 <_malloc_trim_r+0x94>)
    4720:	ldr	r2, [r7, #8]
    4722:	ldr	r1, [r3, #0]
    4724:	subs	r5, r5, r4
    4726:	orr.w	r5, r5, #1
    472a:	mov	r0, r6
    472c:	subs	r1, r1, r4
    472e:	str	r5, [r2, #4]
    4730:	str	r1, [r3, #0]
    4732:	bl	4038 <__malloc_unlock>
    4736:	movs	r0, #1
    4738:	pop	{r3, r4, r5, r6, r7, pc}
    473a:	movs	r1, #0
    473c:	mov	r0, r6
    473e:	bl	442c <_sbrk_r>
    4742:	ldr	r2, [r7, #8]
    4744:	subs	r3, r0, r2
    4746:	cmp	r3, #15
    4748:	ble.n	4708 <_malloc_trim_r+0x3c>
    474a:	ldr	r4, [pc, #24]	; (4764 <_malloc_trim_r+0x98>)
    474c:	ldr	r1, [pc, #16]	; (4760 <_malloc_trim_r+0x94>)
    474e:	ldr	r4, [r4, #0]
    4750:	orr.w	r3, r3, #1
    4754:	subs	r0, r0, r4
    4756:	str	r3, [r2, #4]
    4758:	str	r0, [r1, #0]
    475a:	b.n	4708 <_malloc_trim_r+0x3c>
    475c:	.word	0x1fff1184
    4760:	.word	0x1fff1a54
    4764:	.word	0x1fff1590

00004768 <_free_r>:
    4768:	cmp	r1, #0
    476a:	beq.n	47f8 <_free_r+0x90>
    476c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4770:	mov	r5, r1
    4772:	mov	r8, r0
    4774:	bl	4034 <__malloc_lock>
    4778:	ldr.w	r7, [r5, #-4]
    477c:	ldr	r1, [pc, #424]	; (4928 <_free_r+0x1c0>)
    477e:	bic.w	r3, r7, #1
    4782:	sub.w	r4, r5, #8
    4786:	adds	r2, r4, r3
    4788:	ldr	r6, [r1, #8]
    478a:	ldr	r0, [r2, #4]
    478c:	cmp	r2, r6
    478e:	bic.w	r0, r0, #3
    4792:	beq.n	485a <_free_r+0xf2>
    4794:	lsls	r6, r7, #31
    4796:	str	r0, [r2, #4]
    4798:	bmi.n	47b2 <_free_r+0x4a>
    479a:	ldr.w	r7, [r5, #-8]
    479e:	subs	r4, r4, r7
    47a0:	add.w	lr, r1, #8
    47a4:	ldr	r5, [r4, #8]
    47a6:	cmp	r5, lr
    47a8:	add	r3, r7
    47aa:	beq.n	488c <_free_r+0x124>
    47ac:	ldr	r7, [r4, #12]
    47ae:	str	r7, [r5, #12]
    47b0:	str	r5, [r7, #8]
    47b2:	adds	r5, r2, r0
    47b4:	ldr	r5, [r5, #4]
    47b6:	lsls	r5, r5, #31
    47b8:	bpl.n	4840 <_free_r+0xd8>
    47ba:	orr.w	r2, r3, #1
    47be:	str	r2, [r4, #4]
    47c0:	str	r3, [r4, r3]
    47c2:	cmp.w	r3, #512	; 0x200
    47c6:	bcs.n	47fa <_free_r+0x92>
    47c8:	lsrs	r3, r3, #3
    47ca:	adds	r2, r3, #1
    47cc:	ldr	r5, [r1, #4]
    47ce:	ldr.w	r7, [r1, r2, lsl #3]
    47d2:	str	r7, [r4, #8]
    47d4:	movs	r0, #1
    47d6:	asrs	r3, r3, #2
    47d8:	lsl.w	r3, r0, r3
    47dc:	add.w	r0, r1, r2, lsl #3
    47e0:	orrs	r5, r3
    47e2:	subs	r0, #8
    47e4:	str	r0, [r4, #12]
    47e6:	str	r5, [r1, #4]
    47e8:	str.w	r4, [r1, r2, lsl #3]
    47ec:	str	r4, [r7, #12]
    47ee:	mov	r0, r8
    47f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    47f4:	b.w	4038 <__malloc_unlock>
    47f8:	bx	lr
    47fa:	lsrs	r2, r3, #9
    47fc:	cmp	r2, #4
    47fe:	bhi.n	48a8 <_free_r+0x140>
    4800:	lsrs	r2, r3, #6
    4802:	add.w	r7, r2, #57	; 0x39
    4806:	lsls	r7, r7, #1
    4808:	add.w	r5, r2, #56	; 0x38
    480c:	add.w	r0, r1, r7, lsl #2
    4810:	ldr.w	r2, [r1, r7, lsl #2]
    4814:	ldr	r1, [pc, #272]	; (4928 <_free_r+0x1c0>)
    4816:	subs	r0, #8
    4818:	cmp	r0, r2
    481a:	beq.n	48b8 <_free_r+0x150>
    481c:	ldr	r1, [r2, #4]
    481e:	bic.w	r1, r1, #3
    4822:	cmp	r3, r1
    4824:	bcs.n	482c <_free_r+0xc4>
    4826:	ldr	r2, [r2, #8]
    4828:	cmp	r0, r2
    482a:	bne.n	481c <_free_r+0xb4>
    482c:	ldr	r0, [r2, #12]
    482e:	str	r0, [r4, #12]
    4830:	str	r2, [r4, #8]
    4832:	str	r4, [r0, #8]
    4834:	str	r4, [r2, #12]
    4836:	mov	r0, r8
    4838:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    483c:	b.w	4038 <__malloc_unlock>
    4840:	ldr	r5, [r2, #8]
    4842:	ldr	r7, [pc, #232]	; (492c <_free_r+0x1c4>)
    4844:	cmp	r5, r7
    4846:	add	r3, r0
    4848:	beq.n	48ca <_free_r+0x162>
    484a:	ldr	r0, [r2, #12]
    484c:	str	r0, [r5, #12]
    484e:	orr.w	r2, r3, #1
    4852:	str	r5, [r0, #8]
    4854:	str	r2, [r4, #4]
    4856:	str	r3, [r4, r3]
    4858:	b.n	47c2 <_free_r+0x5a>
    485a:	lsls	r7, r7, #31
    485c:	add	r3, r0
    485e:	bmi.n	4870 <_free_r+0x108>
    4860:	ldr.w	r2, [r5, #-8]
    4864:	subs	r4, r4, r2
    4866:	add	r3, r2
    4868:	ldr	r0, [r4, #8]
    486a:	ldr	r2, [r4, #12]
    486c:	str	r2, [r0, #12]
    486e:	str	r0, [r2, #8]
    4870:	ldr	r2, [pc, #188]	; (4930 <_free_r+0x1c8>)
    4872:	ldr	r2, [r2, #0]
    4874:	orr.w	r0, r3, #1
    4878:	cmp	r3, r2
    487a:	str	r0, [r4, #4]
    487c:	str	r4, [r1, #8]
    487e:	bcc.n	47ee <_free_r+0x86>
    4880:	ldr	r3, [pc, #176]	; (4934 <_free_r+0x1cc>)
    4882:	mov	r0, r8
    4884:	ldr	r1, [r3, #0]
    4886:	bl	46cc <_malloc_trim_r>
    488a:	b.n	47ee <_free_r+0x86>
    488c:	adds	r1, r2, r0
    488e:	ldr	r1, [r1, #4]
    4890:	lsls	r1, r1, #31
    4892:	bmi.n	491e <_free_r+0x1b6>
    4894:	ldr	r1, [r2, #8]
    4896:	ldr	r2, [r2, #12]
    4898:	str	r2, [r1, #12]
    489a:	add	r3, r0
    489c:	orr.w	r0, r3, #1
    48a0:	str	r1, [r2, #8]
    48a2:	str	r0, [r4, #4]
    48a4:	str	r3, [r4, r3]
    48a6:	b.n	47ee <_free_r+0x86>
    48a8:	cmp	r2, #20
    48aa:	bhi.n	48dc <_free_r+0x174>
    48ac:	add.w	r7, r2, #92	; 0x5c
    48b0:	lsls	r7, r7, #1
    48b2:	add.w	r5, r2, #91	; 0x5b
    48b6:	b.n	480c <_free_r+0xa4>
    48b8:	asrs	r2, r5, #2
    48ba:	ldr	r3, [r1, #4]
    48bc:	movs	r5, #1
    48be:	lsl.w	r2, r5, r2
    48c2:	orrs	r3, r2
    48c4:	str	r3, [r1, #4]
    48c6:	mov	r2, r0
    48c8:	b.n	482e <_free_r+0xc6>
    48ca:	orr.w	r2, r3, #1
    48ce:	str	r4, [r1, #20]
    48d0:	str	r4, [r1, #16]
    48d2:	str	r5, [r4, #12]
    48d4:	str	r5, [r4, #8]
    48d6:	str	r2, [r4, #4]
    48d8:	str	r3, [r4, r3]
    48da:	b.n	47ee <_free_r+0x86>
    48dc:	cmp	r2, #84	; 0x54
    48de:	bhi.n	48ee <_free_r+0x186>
    48e0:	lsrs	r2, r3, #12
    48e2:	add.w	r7, r2, #111	; 0x6f
    48e6:	lsls	r7, r7, #1
    48e8:	add.w	r5, r2, #110	; 0x6e
    48ec:	b.n	480c <_free_r+0xa4>
    48ee:	cmp.w	r2, #340	; 0x154
    48f2:	bhi.n	4902 <_free_r+0x19a>
    48f4:	lsrs	r2, r3, #15
    48f6:	add.w	r7, r2, #120	; 0x78
    48fa:	lsls	r7, r7, #1
    48fc:	add.w	r5, r2, #119	; 0x77
    4900:	b.n	480c <_free_r+0xa4>
    4902:	movw	r0, #1364	; 0x554
    4906:	cmp	r2, r0
    4908:	bhi.n	4918 <_free_r+0x1b0>
    490a:	lsrs	r2, r3, #18
    490c:	add.w	r7, r2, #125	; 0x7d
    4910:	lsls	r7, r7, #1
    4912:	add.w	r5, r2, #124	; 0x7c
    4916:	b.n	480c <_free_r+0xa4>
    4918:	movs	r7, #254	; 0xfe
    491a:	movs	r5, #126	; 0x7e
    491c:	b.n	480c <_free_r+0xa4>
    491e:	orr.w	r2, r3, #1
    4922:	str	r2, [r4, #4]
    4924:	str	r3, [r4, r3]
    4926:	b.n	47ee <_free_r+0x86>
    4928:	.word	0x1fff1184
    492c:	.word	0x1fff118c
    4930:	.word	0x1fff158c
    4934:	.word	0x1fff1a50

00004938 <__register_exitproc>:
    4938:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    493c:	ldr	r4, [pc, #148]	; (49d4 <__register_exitproc+0x9c>)
    493e:	ldr	r5, [r4, #0]
    4940:	ldr.w	r4, [r5, #328]	; 0x148
    4944:	mov	r6, r0
    4946:	mov	r8, r1
    4948:	mov	sl, r2
    494a:	mov	r9, r3
    494c:	cbz	r4, 49c0 <__register_exitproc+0x88>
    494e:	ldr	r0, [r4, #4]
    4950:	cmp	r0, #31
    4952:	bgt.n	4984 <__register_exitproc+0x4c>
    4954:	adds	r3, r0, #1
    4956:	cbz	r6, 4976 <__register_exitproc+0x3e>
    4958:	add.w	r5, r4, r0, lsl #2
    495c:	movs	r2, #1
    495e:	str.w	sl, [r5, #136]	; 0x88
    4962:	ldr.w	r1, [r4, #392]	; 0x188
    4966:	lsls	r2, r0
    4968:	orrs	r1, r2
    496a:	cmp	r6, #2
    496c:	str.w	r1, [r4, #392]	; 0x188
    4970:	str.w	r9, [r5, #264]	; 0x108
    4974:	beq.n	49b4 <__register_exitproc+0x7c>
    4976:	adds	r0, #2
    4978:	str	r3, [r4, #4]
    497a:	str.w	r8, [r4, r0, lsl #2]
    497e:	movs	r0, #0
    4980:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4984:	ldr	r3, [pc, #80]	; (49d8 <__register_exitproc+0xa0>)
    4986:	cbz	r3, 49ca <__register_exitproc+0x92>
    4988:	mov.w	r0, #400	; 0x190
    498c:	bl	39dc <malloc>
    4990:	mov	r4, r0
    4992:	cbz	r0, 49ca <__register_exitproc+0x92>
    4994:	ldr.w	r3, [r5, #328]	; 0x148
    4998:	movs	r7, #0
    499a:	stmia.w	r0, {r3, r7}
    499e:	str.w	r4, [r5, #328]	; 0x148
    49a2:	mov	r0, r7
    49a4:	movs	r3, #1
    49a6:	str.w	r7, [r4, #392]	; 0x188
    49aa:	str.w	r7, [r4, #396]	; 0x18c
    49ae:	cmp	r6, #0
    49b0:	beq.n	4976 <__register_exitproc+0x3e>
    49b2:	b.n	4958 <__register_exitproc+0x20>
    49b4:	ldr.w	r1, [r4, #396]	; 0x18c
    49b8:	orrs	r2, r1
    49ba:	str.w	r2, [r4, #396]	; 0x18c
    49be:	b.n	4976 <__register_exitproc+0x3e>
    49c0:	add.w	r4, r5, #332	; 0x14c
    49c4:	str.w	r4, [r5, #328]	; 0x148
    49c8:	b.n	494e <__register_exitproc+0x16>
    49ca:	mov.w	r0, #4294967295
    49ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    49d2:	nop
    49d4:	.word	0x00004d78
    49d8:	.word	0x000039dd
    49dc:	.word	0x6f486e6f
    49e0:	.word	0x0000646c
    49e4:	.word	0x72506e6f
    49e8:	.word	0x00737365
    49ec:	.word	0x6f486e6f
    49f0:	.word	0x6552646c
    49f4:	.word	0x7361656c
    49f8:	.word	0x00000065
    49fc:	.word	0x65526e6f
    4a00:	.word	0x7361656c
    4a04:	.word	0xffff0065
    4a08:	.word	0x79616c50
    4a0c:	.word	0x20676e69
    4a10:	.word	0x65746f6e
    4a14:	.word	0x656c202c
    4a18:	.word	0x6874676e
    4a1c:	.word	0x0000203a
    4a20:	.word	0x65746f4e
    4a24:	.word	0x66666f20
    4a28:	.word	0x6970202c
    4a2c:	.word	0x3a686374
    4a30:	.word	0xffff0020
    4a34:	.word	0x7370704f
    4a38:	.word	0x6e61202c
    4a3c:	.word	0x6b6e7520
    4a40:	.word	0x6e776f6e
    4a44:	.word	0x44494d20
    4a48:	.word	0x656d2049
    4a4c:	.word	0x67617373
    4a50:	.word	0x79742065
    4a54:	.word	0x00216570
    4a58:	.word	0x746e6f43
    4a5c:	.word	0x206c6f72
    4a60:	.word	0x676e656c
    4a64:	.word	0x72206874
    4a68:	.word	0x76207761
    4a6c:	.word	0x65756c61
    4a70:	.word	0x0000203a
    4a74:	.word	0x746e6f43
    4a78:	.word	0x206c6f72
    4a7c:	.word	0x676e656c
    4a80:	.word	0x203a6874
    4a84:	.word	0xffffff00
    4a88:	.word	0x4f4c4556
    4a8c:	.word	0x59544943
    4a90:	.word	0x00000000
    4a94:	.word	0x45544f4e
    4a98:	.word	0x474e454c
    4a9c:	.word	0x00004854
    4aa0:	.word	0x43544950
    4aa4:	.word	0x00000048

00004aa8 <pin2sc1a>:
    4aa8:	................
    4ab8:	................
    4ac8:	................
    4ad8:	................
    4ae8:	........

00004af0 <digital_pin_to_info_PGM>:
    4af0:	@..C@..@D..CD..@
    4b00:	...C...@0..C0..@
    4b10:	4..C4..@...C...@
    4b20:	...C...@...C...@
    4b30:	...C...@...C...@
    4b40:	...C...@...C...@
    4b50:	...C...@...C...@
    4b60:	...C...@...C...@
    4b70:	...C...@...C...@
    4b80:	...C...@...C...@
    4b90:	...C...@...C...@
    4ba0:	...C...@...C...@
    4bb0:	h .Ch..@...C...@
    4bc0:	8..C8..@<..C<..@
    4bd0:	@..C@..@H..CH..@
    4be0:	L..CL..@(..C(..@
    4bf0:	,..C,..@` .C`..@
    4c00:	d .Cd..@ ..C ..@
    4c10:	$..C$..@(..C(..@
    4c20:	,..C,..@D..CD..@
    4c30:	p..Cp..@t..Ct..@
    4c40:	h..Ch..@P..CP..@
    4c50:	X..CX..@\..C\..@
    4c60:	T..CT..@ ..C ..@
    4c70:	$..C$..@...C...@
    4c80:	...C...@8..C8..@
    4c90:	4..C4..@0..C0..@
    4ca0:	<..C<..@,..C,..@
    4cb0:	( .C(..@, .C,..@
    4cc0:	. .C...@. .C...@
    4cd0:	. .C...@. .C...@
    4ce0:	. .C...@. .C...@

00004cf0 <vtable for usb_serial_class>:
	...
    4cf8:	]+..U+..Q+..M+..
    4d08:	I+..E+..A+..=+..
    4d18:	....

00004d1c <usb_endpoint_config_table>:
    4d1c:	........

00004d24 <usb_descriptor_list>:
    4d24:	....\...........
    4d34:	............8...
    4d44:	........p.......
    4d54:	.... ...........
    4d64:	<...............
    4d74:	....

00004d78 <_global_impure_ptr>:
    4d78:	X...

00004d7c <_init>:
    4d7c:	push	{r3, r4, r5, r6, r7, lr}
    4d7e:	nop
    4d80:	pop	{r3, r4, r5, r6, r7}
    4d82:	pop	{r3}
    4d84:	mov	lr, r3
    4d86:	bx	lr

00004d88 <__init_array_start>:
    4d88:	.word	0x00004685

00004d8c <__frame_dummy_init_array_entry>:
    4d8c:	5.......

Disassembly of section .fini:

00004d94 <_fini>:
    4d94:	push	{r3, r4, r5, r6, r7, lr}
    4d96:	nop

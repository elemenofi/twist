
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00005188 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15b0 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003e20 l     F .text	0000000c startup_default_early_hook
00003e2c l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15b0 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15b4 l       .bss	00000000 object.8610
00005180 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00001c24 l     F .text	00000214 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff182d l     O .bss	00000001 tx_noautoflush
1fff1830 l     O .bss	00000004 tx_packet
1fff1834 l     O .bss	00000001 transmit_previous_timeout
1fff1838 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
0000210c l     F .text	00000144 wait_for_cal
1fff183d l     O .bss	00000001 analog_right_shift
1fff183e l     O .bss	00000001 calibrating
00004e9c l     O .text	00000048 pin2sc1a
1fff0c58 l     O .data	00000001 analog_config_bits
1fff183f l     O .bss	00000001 analogReadBusyADC1
1fff1840 l     O .bss	00000001 analogReadBusyADC0
1fff1841 l     O .bss	00000001 analog_reference_internal
1fff0c59 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
0000242c l     F .text	0000004c digitalWrite.part.1
00002478 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002758 l     F .text	00000048 sysex_byte
1fff185c l     O .bss	00000001 tx_noautoflush
1fff1888 l     O .bss	00000004 tx_packet
1fff188c l     O .bss	00000001 transmit_previous_timeout
1fff1894 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c5c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff18a8 l     O .bss	00000004 ep0_tx_ptr
1fff18ac l     O .bss	00000014 rx_last
1fff18c0 l     O .bss	00000002 ep0_tx_len
1fff18c4 l     O .bss	00000040 ep0_rx0_buf
1fff1904 l     O .bss	00000014 rx_first
1fff1918 l     O .bss	00000001 ep0_tx_data_toggle
1fff191c l     O .bss	00000040 ep0_rx1_buf
1fff195c l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff1970 l     O .bss	00000014 tx_last
1fff1984 l     O .bss	00000008 setup
1fff198c l     O .bss	00000001 ep0_tx_bdt_bank
1fff1990 l     O .bss	00000008 reply_buffer
1fff199c l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff19a1 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff19a4 l     O .bss	00000004 rts_pin
1fff19a8 l     O .bss	00000001 rx_buffer_head
1fff19a9 l     O .bss	00000001 rx_buffer_tail
1fff19ac l     O .bss	00000028 tx_buffer
1fff19d4 l     O .bss	00000040 rx_buffer
1fff1a14 l     O .bss	00000001 transmitting
1fff1a15 l     O .bss	00000001 tx_buffer_tail
1fff1a18 l     O .bss	00000004 transmit_pin
1fff1a1c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1a20 l     O .bss	00000004 rts_pin
1fff1a24 l     O .bss	00000001 transmitting
1fff1a25 l     O .bss	00000001 rx_buffer_tail
1fff1a28 l     O .bss	00000028 tx_buffer
1fff1a50 l     O .bss	00000040 rx_buffer
1fff1a90 l     O .bss	00000001 rx_buffer_head
1fff1a91 l     O .bss	00000001 tx_buffer_tail
1fff1a94 l     O .bss	00000004 transmit_pin
1fff1a98 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1a9c l     O .bss	00000004 rts_pin
1fff1aa0 l     O .bss	00000001 rx_buffer_head
1fff1aa1 l     O .bss	00000001 rx_buffer_tail
1fff1aa4 l     O .bss	00000028 tx_buffer
1fff1acc l     O .bss	00000040 rx_buffer
1fff1b0c l     O .bss	00000001 transmitting
1fff1b0d l     O .bss	00000001 tx_buffer_tail
1fff1b10 l     O .bss	00000004 transmit_pin
1fff1b14 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1b18 l     O .bss	00000004 rts_pin
1fff1b1c l     O .bss	00000001 rx_buffer_head
1fff1b1d l     O .bss	00000001 rx_buffer_tail
1fff1b20 l     O .bss	00000040 tx_buffer
1fff1b60 l     O .bss	00000040 rx_buffer
1fff1ba0 l     O .bss	00000001 transmitting
1fff1ba1 l     O .bss	00000001 tx_buffer_tail
1fff1ba4 l     O .bss	00000004 transmit_pin
1fff1ba8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1bac l     O .bss	00000004 rts_pin
1fff1bb0 l     O .bss	00000001 rx_buffer_head
1fff1bb1 l     O .bss	00000001 rx_buffer_tail
1fff1bb4 l     O .bss	00000028 tx_buffer
1fff1bdc l     O .bss	00000040 rx_buffer
1fff1c1c l     O .bss	00000001 transmitting
1fff1c1d l     O .bss	00000001 tx_buffer_tail
1fff1c20 l     O .bss	00000004 transmit_pin
1fff1c24 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c74 l     O .data	00000012 device_descriptor
1fff0ca0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1c28 l     O .bss	00000004 rts_pin
1fff1c2c l     O .bss	00000001 rx_buffer_head
1fff1c2d l     O .bss	00000001 rx_buffer_tail
1fff1c30 l     O .bss	00000028 tx_buffer
1fff1c58 l     O .bss	00000040 rx_buffer
1fff1c98 l     O .bss	00000001 transmitting
1fff1c99 l     O .bss	00000001 tx_buffer_tail
1fff1c9c l     O .bss	00000004 transmit_pin
1fff1ca0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004ac0 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d70 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15b0 l       .bss	00000000 __bss_start__
1fff1e3c l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00003e18  w    F .text	00000006 adc0_isr
00001eb0 g     F .text	0000001c usb_serial_available
00003cd8 g     F .text	00000020 serial4_available
00003984  w    F .text	000000c4 yield
1fff0c88 g     O .data	00000018 usb_string_manufacturer_name_default
00003ec4 g     F .text	00000020 serial_available
1fff1860 g     O .bss	00000004 usb_midi_handleProgramChange
00003dd0  w    F .text	00000048 hard_fault_isr
00003e18  w    F .text	00000006 dma_ch6_isr
00003a78 g     F .text	00000020 Print::println()
00003bac g     F .text	00000020 serial2_available
00003e18  w    F .text	00000006 uart0_lon_isr
00002d98 g     F .text	000000e8 usb_rx_memory
00003a48  w    F .text	00000002 serialEvent5()
00003e18  w    F .text	00000006 dma_ch8_isr
00003ff0 g     F .text	00000020 serial6_available
00004a98 g     F .text	00000002 __malloc_unlock
1fff1874 g     O .bss	00000004 usb_midi_handleAfterTouch
00002250 g     F .text	000000e0 analog_init
00002e80 g     F .text	00000084 usb_tx
00003e18  w    F .text	00000006 portcd_isr
1fff1884 g     O .bss	00000004 usb_midi_handleSysExComplete
00004410 g     F .text	00000098 MillisTimer::runFromTimer()
00003e18  w    F .text	00000006 can1_rx_warn_isr
0000518c g       .fini	00000000 __exidx_end
00003e18  w    F .text	00000006 dma_error_isr
1fff1d00 g     O .bss	00000001 usb_midi_msg_type
1fff1cb8 g     O .bss	00000001 EventResponder::runningFromYield
00003e18  w    F .text	00000006 i2c0_isr
000044b8 g     F .text	0000000c __errno
00003e18  w    F .text	00000006 portd_isr
00003e18  w    F .text	00000006 enet_error_isr
1fff1ca4 g     O .bss	00000004 EventResponder::firstInterrupt
00003e18  w    F .text	00000006 tpm1_isr
00003a64  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00004ee4 g     O .text	00000200 digital_pin_to_info_PGM
1fff1e38 g     O .bss	00000004 errno
0000518c g       .fini	00000000 _etext
1fff15b0 g       .bss	00000000 _sbss
00003ab0  w    F .text	00000002 serialEvent6()
1fff1870 g     O .bss	00000004 usb_midi_handleVelocityChange
00002520 g     F .text	0000001c digitalRead
00003e18  w    F .text	00000006 porte_isr
00000494 g     F .text	00001790 loop
00003e18  w    F .text	00000006 portb_isr
0000283c g     F .text	0000002c usb_midi_flush_output
00003e18  w    F .text	00000006 spi1_isr
00003cf8 g     F .text	000000d8 uart3_status_isr
000042bc  w    F .text	00000002 serialEvent1()
1fff15fc g     O .bss	00000018 led4
00003e18  w    F .text	00000006 mcm_isr
000043a8 g     F .text	00000068 MillisTimer::addToActiveList()
00002868 g     F .text	0000043c usb_midi_read
1fff184c g     O .bss	00000004 usb_midi_handleSystemReset
1fff1ca8 g     O .bss	00000004 EventResponder::lastInterrupt
00003bcc g     F .text	0000010c uart1_status_isr
1fff1d02 g     O .bss	00000002 usb_midi_msg_sysex_len
00003e18  w    F .text	00000006 randnum_isr
1fff1854 g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff1844 g     O .bss	00000004 systick_millis_count
00003dd0  w    F .text	00000048 bus_fault_isr
00003e18  w    F .text	00000006 watchdog_isr
00003e18  w    F .text	00000006 i2c1_isr
1fff1998 g     O .bss	00000001 usb_configuration
00003e18  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00003a98  w    F .text	00000002 serialEvent2()
00003e18  w    F .text	00000006 i2c2_isr
1fff0c88  w    O .data	00000018 usb_string_manufacturer_name
1fff1e2c g     O .bss	0000000a usb_rx_byte_count_data
00003e18  w    F .text	00000006 pit1_isr
00004514 g     F .text	00000010 malloc
00003e18  w    F .text	00000006 dma_ch4_isr
00003e18  w    F .text	00000006 software_isr
00003e18  w    F .text	00000006 dma_ch7_isr
00004344  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
000038b4 g     F .text	000000d0 usb_init
00003e18  w    F .text	00000006 lptmr_isr
1fff1cc8 g     O .bss	00000004 __malloc_top_pad
000024f0 g     F .text	00000024 rtc_set
1fff17a8 g     O .bss	00000024 button5
1fff1808 g     O .bss	00000024 button4
1fff0c40 g       .data	00000000 _sdata
1fff18a4 g     O .bss	00000004 usb_midi_handleNoteOn
00003e90 g     F .text	00000034 kinetis_hsrun_enable
00004a9c g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00001e38 g     F .text	00000048 usb_serial_getchar
00003e18  w    F .text	00000006 can1_bus_off_isr
00003e18  w    F .text	00000006 ftm2_isr
1fff1cf4 g     O .bss	00000008 usb_cdc_line_coding
00002514 g     F .text	0000000a digitalWrite
00003e18  w    F .text	00000006 uart5_status_isr
00004010 g     F .text	000000e4 lpuart0_status_isr
1fff1cb0 g     O .bss	00000004 EventResponder::lastYield
00005110 g     O .text	00000005 usb_endpoint_config_table
00003e18  w    F .text	00000006 dma_ch9_isr
00003e18  w    F .text	00000006 pit2_isr
000041c4 g     F .text	00000020 serial3_available
1fff1cc4 g     O .bss	00000004 __malloc_max_sbrked_mem
0000253c g     F .text	0000000a pinMode
00002ce4 g     F .text	0000004c usb_free
00003e18  w    F .text	00000006 i2c3_isr
1fff162c g     O .bss	00000018 led1
1fff186c g     O .bss	00000004 usb_midi_handleSysExPartial
0000518c g       .fini	00000000 __exidx_start
00003e18  w    F .text	00000006 pit0_isr
1fff1d04 g     O .bss	00000001 usb_midi_msg_data1
1fff1cb4 g     O .bss	00000004 EventResponder::firstYield
0000516c g     O .text	00000004 _global_impure_ptr
00003e18  w    F .text	00000006 can1_error_isr
000044c4 g     F .text	00000050 __libc_init_array
1fff1e3c g       .bss	00000000 __bss_end
00003e18  w    F .text	00000006 can0_wakeup_isr
00003e18  w    F .text	00000006 flash_cmd_isr
1fff17f0 g     O .bss	00000018 knob5
00003a4c  w    F .text	00000004 usb_serial_class::clear()
000041e4 g     F .text	000000d8 uart2_status_isr
00003e30 g     F .text	0000002c _sbrk
1fff1cbc g     O .bss	00000004 MillisTimer::listWaiting
1fff0c70 g     O .data	00000004 __brkval
1fff183c g     O .bss	00000001 usb_cdc_line_rtsdtr
000020c4 g     F .text	00000048 usb_serial_flush_callback
00005170 g     F .text	00000000 _init
00003e18  w    F .text	00000006 svcall_isr
00003e18  w    F .text	00000006 dma_ch15_isr
00003e18  w    F .text	00000006 uart1_error_isr
00004ae0 g     F .text	00000028 __libc_fini_array
00003e18  w    F .text	00000006 usbhs_phy_isr
1fff1e3c g       .bss	00000000 _ebss
00003e18 g     F .text	00000006 unused_isr
00003e18  w    F .text	00000006 spi0_isr
00003e18  w    F .text	00000006 dma_ch3_isr
00003e18  w    F .text	00000006 flash_error_isr
1fff1644 g     O .bss	00000018 knob2
00003ab4 g     F .text	00000020 serial5_available
00003e18  w    F .text	00000006 uart5_error_isr
00003e18  w    F .text	00000006 rtc_seconds_isr
00003e18  w    F .text	00000006 pdb_isr
00003dd0  w    F .text	00000048 usage_fault_isr
00003e18  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00003e18  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1cfc g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff0c40 g     O .data	00000018 leds
000044a8 g     F .text	00000010 systick_isr
00003e18  w    F .text	00000006 rtc_alarm_isr
00003e18  w    F .text	00000006 dma_ch2_isr
1fff0c60 g     O .data	00000010 Serial
00003e18  w    F .text	00000006 ftm1_isr
00003a6c  w    F .text	00000006 usb_serial_class::write(unsigned char)
00003e20  w    F .text	0000000c startup_early_hook
00003e18  w    F .text	00000006 dma_ch13_isr
00003e18  w    F .text	00000006 uart2_error_isr
00001e80 g     F .text	00000030 usb_serial_peekchar
1fff0d54 g     O .data	00000016 usb_string_serial_number_default
00003dd0 g     F .text	00000048 fault_isr
00004ba4 g     F .text	000001d0 _free_r
1fff1890 g     O .bss	00000004 usb_midi_handleStop
00003e18  w    F .text	00000006 usb_charge_isr
00003a5c  w    F .text	00000004 usb_serial_class::flush()
00003e18  w    F .text	00000006 cmt_isr
00003e18  w    F .text	00000006 usbhs_isr
1fff18a0 g     O .bss	00000004 usb_midi_handleControlChange
1fff15a8 g     O .data	00000004 __malloc_sbrk_base
00003a54  w    F .text	00000004 usb_serial_class::read()
00003e18  w    F .text	00000006 ftm3_isr
00003e18  w    F .text	00000006 tsi0_isr
1fff1690 g     O .bss	00000018 led6
1fff16a8 g     O .bss	00000018 knob1
00003e18  w    F .text	00000006 spi2_isr
00003a9c  w    F .text	00000002 serialEvent4()
00003a74  w    F .text	00000002 serialEvent()
1fff1919 g     O .bss	00000001 usb_reboot_timer
00004d74 g     F .text	000000a4 __register_exitproc
00001ecc g     F .text	00000038 usb_serial_flush_input
0000200c g     F .text	00000018 usb_serial_putchar
1fff1ccc g     O .bss	00000028 __malloc_current_mallinfo
00003e18  w    F .text	00000006 can0_bus_off_isr
1fff1614 g     O .bss	00000018 led5
1fff198d g     O .bss	00000001 usb_rx_memory_needed
00002f04 g     F .text	000009b0 usb_isr
1fff189c g     O .bss	00000004 usb_midi_handleNoteOff
000050e4  w    O .text	00000028 vtable for usb_serial_class
1fff1660 g     O .bss	00000018 knob3
00003e18  w    F .text	00000006 uart3_error_isr
1fff1cac g     O .bss	00000004 MillisTimer::listActive
00003e18  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00003e18  w    F .text	00000006 low_voltage_isr
1fff16e4 g     O .bss	00000024 button2
1fff119c g     O .data	00000408 __malloc_av_
00003e18  w    F .text	00000006 can0_error_isr
000025ec g     F .text	0000016c _init_Teensyduino_internal_
0000206c g     F .text	00000058 usb_serial_flush_output
00003e18  w    F .text	00000006 dma_ch12_isr
00004a94 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00003e18  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00003e18  w    F .text	00000006 pit3_isr
00003e18  w    F .text	00000006 enet_rx_isr
00003e18  w    F .text	00000006 portc_isr
00003aa0 g     F .text	00000010 main
1fff1cc0 g     O .bss	00000004 __malloc_max_total_mem
1fff15e4 g     O .bss	00000018 led3
00003dd0  w    F .text	00000048 memmanage_fault_isr
000040f4 g     F .text	00000084 usb_init_serialnumber
1fff165c g     O .bss	00000001 currentMode
00005188 g       .text	00000000 __init_array_end
00004524 g     F .text	00000570 _malloc_r
00003e18  w    F .text	00000006 debugmonitor_isr
1fff1868 g     O .bss	00000004 usb_midi_handleSongPosition
000042c4 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1858 g     O .bss	00000004 usb_midi_handleContinue
1fff1d05 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00003e18  w    F .text	00000006 cmp1_isr
1fff1708 g     O .bss	00000024 button3
00003e18  w    F .text	00000006 ftm0_isr
00004b08 g     F .text	0000009c _malloc_trim_r
1fff0d50 g     O .data	00000004 string0
00001f04 g     F .text	00000108 usb_serial_write
00003e2c  w    F .text	00000002 startup_late_hook
00003a58  w    F .text	00000004 usb_serial_class::available()
1fff1d06 g     O .bss	00000001 usb_midi_msg_cable
1fff0d38  w    O .data	00000018 usb_string_product_name
00002548 g     F .text	000000a4 delay
00003e18  w    F .text	00000006 tpm0_isr
00005188 g     F .fini	00000000 _fini
00003e18  w    F .text	00000006 i2s0_rx_isr
00003e18  w    F .text	00000006 uart4_error_isr
000027a0 g     F .text	0000009c usb_midi_write_packed
00004ad4 g     F .text	0000000c atexit
00003e18  w    F .text	00000006 can0_message_isr
1fff1198 g     O .data	00000004 _impure_ptr
00003e18  w    F .text	00000006 can1_message_isr
00003e18  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1880 g     O .bss	00000004 usb_midi_handleTuneRequest
0000517c g       .text	00000000 __preinit_array_end
00003e18  w    F .text	00000006 sdhc_isr
1fff1d07 g     O .bss	00000001 usb_midi_msg_channel
00000490 g     F .text	00000002 setup
00005118 g     O .text	00000054 usb_descriptor_list
00002d30 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1678 g     O .bss	00000018 knob4
00003e18  w    F .text	00000006 dma_ch10_isr
1fff1730 g     O .bss	00000078 sequence1
1fff1878 g     O .bss	00000004 usb_midi_handleStart
00003e18  w    F .text	00000006 uart0_error_isr
00002ca4 g     F .text	00000040 usb_malloc
00003e18  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00002024 g     F .text	00000048 usb_serial_write_buffer_free
00003e18  w    F .text	00000006 enet_timer_isr
1fff17cc g     O .bss	00000024 button6
1fff16c0 g     O .bss	00000024 button1
1fff15ac g       .data	00000000 _edata
00003e18  w    F .text	00000006 i2s0_tx_isr
00003e18  w    F .text	00000006 adc1_isr
00003a60  w    F .text	00000004 usb_serial_class::availableForWrite()
00003e18  w    F .text	00000006 cmp0_isr
1fff1848 g     O .bss	00000004 usb_midi_handleClock
00004178 g     F .text	0000004c ultoa
00004360 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15a4 g     O .data	00000004 __malloc_trim_threshold
00003a50  w    F .text	00000004 usb_serial_class::peek()
1fff182c g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff1864 g     O .bss	00000004 usb_midi_handlePitchChange
00003e18  w    F .text	00000006 pit_isr
1fff187c g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00003e18  w    F .text	00000006 dac0_isr
0000517c g       .text	00000000 __init_array_start
00003e18  w    F .text	00000006 can1_tx_warn_isr
00002330 g     F .text	000000fc analogRead
1fff1d08 g     O .bss	00000122 usb_midi_msg_sysex
00003ee4 g     F .text	0000010c uart0_status_isr
00003e18  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d38 g     O .data	00000018 usb_string_product_name_default
00003e18  w    F .text	00000006 dma_ch1_isr
00002d6c g     F .text	0000002c usb_tx_packet_count
00003e18  w    F .text	00000006 dma_ch5_isr
00003e18  w    F .text	00000006 can0_rx_warn_isr
00003e18  w    F .text	00000006 can0_tx_warn_isr
00003ad4 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00003e5c g     F .text	00000034 kinetis_hsrun_disable
0000517c g       .text	00000000 __preinit_array_start
000042c0  w    F .text	00000002 serialEvent3()
1fff1898 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff15cc g     O .bss	00000018 led2
00003e18  w    F .text	00000006 cmp2_isr
000043a4 g     F .text	00000004 pendablesrvreq_isr
00003e18  w    F .text	00000006 wakeup_isr
00003e18  w    F .text	00000006 cmp3_isr
1fff1850 g     O .bss	00000004 usb_midi_handleActiveSensing
00003e18  w    F .text	00000006 tpm2_isr
00003e18  w    F .text	00000006 dma_ch0_isr
1fff0d54  w    O .data	00000016 usb_string_serial_number
00003e18  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... .....>...=..
      10:	.=...=...=...=..
      20:	.=...=...=...>..
      30:	.>...=...C...D..
      40:	.>...>...>...>..
      50:	.>...>...>...>..
      60:	.>...>...>...>..
      70:	.>...>...>...>..
      80:	.>...>...>...>..
      90:	.>...>...>...>..
      a0:	.>...>...>...>..
      b0:	.>...>...>...>..
      c0:	.>...;...>...A..
      d0:	.>...<...>...>..
      e0:	.>...>...>...>..
      f0:	.>...>...>...>..
     100:	.>...>...>...>..
     110:	.>.../...>...>..
     120:	.>...>...>...>..
     130:	.>...>...>...>..
     140:	.>...>...:...>..
     150:	.>...>...>...>..
     160:	.>...>...>...>..
     170:	.>...>...>...>..
     180:	.>...>...>...>..
     190:	.>...>...@...>..
     1a0:	.>...>...>...>..
     1b0:	.>...>...>...>..
     1c0:	.>...>...>...>..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	3e20 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	25ec <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	24f0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	24f0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	44c4 <__libc_init_array>

	startup_late_hook();
     33a:	bl	3e2c <startup_late_hook>
	main();
     33e:	bl	3aa0 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15ac
     374:	.word	0x00005188
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15b0
     380:	.word	0x1fff1e3c
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15b0
     42c:	.word	0x00000000
     430:	.word	0x0000518c

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15b4
     460:	.word	0x0000518c
     464:	.word	0x1fff15ac
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #25
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	253c <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	2514 <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob2(A1, sequence1, SECOND, 1);
Knob knob3(A2, sequence1, THIRD, 2);
Knob knob4(A3, sequence1, FOURTH, 3);
Knob knob5(A4, sequence1, FIFTH, 4);

void setup() {
     490:	bx	lr
     492:	nop

00000494 <loop>:
  Serial.begin(9600);
}

void loop() {
     494:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     498:	movs	r0, #0
     49a:	sub	sp, #236	; 0xec
     49c:	bl	2868 <usb_midi_read>
  if (usbMIDI.read()) {
     4a0:	cmp	r0, #0
     4a2:	bne.w	b1c <loop+0x688>
     4a6:	ldr	r4, [pc, #692]	; (75c <loop+0x2c8>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4a8:	ldr	r6, [pc, #692]	; (760 <loop+0x2cc>)
     4aa:	ldrb.w	r0, [r6, #32]
     4ae:	bl	2520 <digitalRead>
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b2:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b4:	str	r0, [r6, #12]
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b6:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b8:	mov	r5, r0
     4ba:	mov	r2, r0
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4bc:	beq.w	b4c <loop+0x6b8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c0:	ldr	r3, [r4, #0]
     4c2:	str	r3, [sp, #60]	; 0x3c
	return ret;
     4c4:	ldr	r3, [sp, #60]	; 0x3c
        m_lastDebounceTime = millis();
     4c6:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c8:	ldr	r1, [r4, #0]
     4ca:	str	r1, [sp, #56]	; 0x38
	return ret;
     4cc:	ldr	r1, [sp, #56]	; 0x38
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ce:	ldr.w	r8, [pc, #652]	; 75c <loop+0x2c8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4d2:	cmp	r3, r1
     4d4:	beq.n	4e8 <loop+0x54>
        if (reading != m_state) {
     4d6:	ldr	r3, [r6, #4]
     4d8:	ldr	r7, [pc, #644]	; (760 <loop+0x2cc>)
     4da:	cmp	r5, r3
     4dc:	beq.w	b68 <loop+0x6d4>
          m_state = reading;
     4e0:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     4e2:	cmp	r5, #0
     4e4:	beq.w	baa <loop+0x716>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e8:	ldr	r5, [pc, #632]	; (764 <loop+0x2d0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     4ea:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4ec:	ldrb.w	r0, [r5, #32]
     4f0:	bl	2520 <digitalRead>
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f4:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f6:	str	r0, [r5, #12]
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f8:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4fa:	mov	r6, r0
     4fc:	mov	r2, r0
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4fe:	beq.w	b58 <loop+0x6c4>
     502:	ldr	r3, [r4, #0]
     504:	str	r3, [sp, #52]	; 0x34
	return ret;
     506:	ldr	r3, [sp, #52]	; 0x34
        m_lastDebounceTime = millis();
     508:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     50a:	ldr	r1, [r4, #0]
     50c:	str	r1, [sp, #48]	; 0x30
	return ret;
     50e:	ldr	r1, [sp, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     510:	ldr.w	r8, [pc, #584]	; 75c <loop+0x2c8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     514:	cmp	r1, r3
     516:	beq.n	52a <loop+0x96>
        if (reading != m_state) {
     518:	ldr	r3, [r5, #4]
     51a:	ldr	r7, [pc, #584]	; (764 <loop+0x2d0>)
     51c:	cmp	r6, r3
     51e:	beq.w	b60 <loop+0x6cc>
          m_state = reading;
     522:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     524:	cmp	r6, #0
     526:	beq.w	be0 <loop+0x74c>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52a:	ldr	r6, [pc, #572]	; (768 <loop+0x2d4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     52c:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52e:	ldrb.w	r0, [r6, #32]
     532:	bl	2520 <digitalRead>
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     536:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     538:	str	r0, [r6, #12]
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     53a:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     53c:	mov	r5, r0
     53e:	mov	r2, r0
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     540:	beq.w	b50 <loop+0x6bc>
     544:	ldr	r3, [r4, #0]
     546:	str	r3, [sp, #44]	; 0x2c
	return ret;
     548:	ldr	r3, [sp, #44]	; 0x2c
        m_lastDebounceTime = millis();
     54a:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     54c:	ldr	r1, [r4, #0]
     54e:	str	r1, [sp, #40]	; 0x28
	return ret;
     550:	ldr	r1, [sp, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     552:	ldr.w	r8, [pc, #520]	; 75c <loop+0x2c8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     556:	cmp	r1, r3
     558:	beq.n	56c <loop+0xd8>
        if (reading != m_state) {
     55a:	ldr	r3, [r6, #4]
     55c:	ldr	r7, [pc, #520]	; (768 <loop+0x2d4>)
     55e:	cmp	r5, r3
     560:	beq.w	b6c <loop+0x6d8>
          m_state = reading;
     564:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     566:	cmp	r5, #0
     568:	beq.w	c16 <loop+0x782>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     56c:	ldr	r5, [pc, #508]	; (76c <loop+0x2d8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     56e:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     570:	ldrb.w	r0, [r5, #32]
     574:	bl	2520 <digitalRead>
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     578:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57a:	str	r0, [r5, #12]
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     57c:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57e:	mov	r6, r0
     580:	mov	r2, r0
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     582:	beq.w	b48 <loop+0x6b4>
     586:	ldr	r3, [r4, #0]
     588:	str	r3, [sp, #36]	; 0x24
	return ret;
     58a:	ldr	r3, [sp, #36]	; 0x24
        m_lastDebounceTime = millis();
     58c:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     58e:	ldr	r1, [r4, #0]
     590:	str	r1, [sp, #32]
	return ret;
     592:	ldr	r1, [sp, #32]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     594:	ldr.w	r8, [pc, #452]	; 75c <loop+0x2c8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     598:	cmp	r1, r3
     59a:	beq.n	5ae <loop+0x11a>
        if (reading != m_state) {
     59c:	ldr	r3, [r5, #4]
     59e:	ldr	r7, [pc, #460]	; (76c <loop+0x2d8>)
     5a0:	cmp	r6, r3
     5a2:	beq.w	b70 <loop+0x6dc>
          m_state = reading;
     5a6:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5a8:	cmp	r6, #0
     5aa:	beq.w	c4c <loop+0x7b8>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ae:	ldr	r6, [pc, #448]	; (770 <loop+0x2dc>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5b0:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5b2:	ldrb.w	r0, [r6, #32]
     5b6:	bl	2520 <digitalRead>
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5ba:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5bc:	str	r0, [r6, #12]
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5be:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5c0:	mov	r5, r0
     5c2:	mov	r2, r0
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5c4:	beq.w	b44 <loop+0x6b0>
     5c8:	ldr	r3, [r4, #0]
     5ca:	str	r3, [sp, #28]
	return ret;
     5cc:	ldr	r3, [sp, #28]
        m_lastDebounceTime = millis();
     5ce:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d0:	ldr	r1, [r4, #0]
     5d2:	str	r1, [sp, #24]
	return ret;
     5d4:	ldr	r1, [sp, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d6:	ldr.w	r8, [pc, #388]	; 75c <loop+0x2c8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5da:	cmp	r1, r3
     5dc:	beq.n	5f0 <loop+0x15c>
        if (reading != m_state) {
     5de:	ldr	r3, [r6, #4]
     5e0:	ldr	r7, [pc, #396]	; (770 <loop+0x2dc>)
     5e2:	cmp	r5, r3
     5e4:	beq.w	b64 <loop+0x6d0>
          m_state = reading;
     5e8:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5ea:	cmp	r5, #0
     5ec:	beq.w	c82 <loop+0x7ee>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f0:	ldr	r5, [pc, #384]	; (774 <loop+0x2e0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5f2:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f4:	ldrb.w	r0, [r5, #32]
     5f8:	bl	2520 <digitalRead>
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5fc:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5fe:	str	r0, [r5, #12]
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     600:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     602:	mov	r6, r0
     604:	mov	r2, r0
      Serial.println("Play");
      m_sequence.play();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     606:	beq.w	b54 <loop+0x6c0>
     60a:	ldr	r3, [r4, #0]
     60c:	str	r3, [sp, #20]
	return ret;
     60e:	ldr	r3, [sp, #20]
        m_lastDebounceTime = millis();
     610:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     612:	ldr	r1, [r4, #0]
     614:	str	r1, [sp, #16]
	return ret;
     616:	ldr	r1, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     618:	ldr.w	r8, [pc, #320]	; 75c <loop+0x2c8>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     61c:	cmp	r1, r3
     61e:	beq.n	632 <loop+0x19e>
        if (reading != m_state) {
     620:	ldr	r3, [r5, #4]
     622:	ldr	r7, [pc, #336]	; (774 <loop+0x2e0>)
     624:	cmp	r6, r3
     626:	beq.w	b5c <loop+0x6c8>
          m_state = reading;
     62a:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     62c:	cmp	r6, #0
     62e:	beq.w	b74 <loop+0x6e0>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     632:	ldr	r6, [pc, #324]	; (778 <loop+0x2e4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     634:	str	r2, [r5, #8]
     636:	ldrb	r3, [r6, #16]
     638:	cmp	r3, #0
     63a:	bne.w	ac0 <loop+0x62c>
     63e:	ldr	r5, [pc, #316]	; (77c <loop+0x2e8>)
     640:	ldrb	r3, [r5, #16]
     642:	cmp	r3, #0
     644:	bne.w	a4e <loop+0x5ba>
     648:	ldr	r5, [pc, #308]	; (780 <loop+0x2ec>)
     64a:	ldrb	r3, [r5, #16]
     64c:	cmp	r3, #0
     64e:	bne.w	9f2 <loop+0x55e>
     652:	ldr	r5, [pc, #304]	; (784 <loop+0x2f0>)
     654:	ldrb	r3, [r5, #16]
     656:	cmp	r3, #0
     658:	bne.w	996 <loop+0x502>
     65c:	ldr	r5, [pc, #296]	; (788 <loop+0x2f4>)
     65e:	ldrb	r3, [r5, #16]
     660:	cmp	r3, #0
     662:	bne.w	93a <loop+0x4a6>
     666:	ldr	r5, [pc, #292]	; (78c <loop+0x2f8>)
     668:	ldrb	r3, [r5, #16]
     66a:	cmp	r3, #0
     66c:	bne.w	8de <loop+0x44a>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     670:	ldr	r4, [pc, #284]	; (790 <loop+0x2fc>)
     672:	ldrb	r0, [r4, #0]
     674:	bl	2330 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     678:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     67a:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     67c:	cmp	r0, r3
     67e:	beq.n	6dc <loop+0x248>
     680:	subs	r3, r0, r3
     682:	cmp	r3, #0
     684:	it	lt
     686:	neglt	r3, r3
     688:	cmp	r3, #10
     68a:	ble.n	6dc <loop+0x248>
    void onChange () {
      // delay
      // transpose
      // acting weird

      if (m_knobType == FIFTH) {
     68c:	ldrb	r3, [r4, #20]
     68e:	cmp	r3, #4
     690:	beq.w	cf8 <loop+0x864>
        m_sequence.controlTempo(m_value);
      }

      if (currentMode == GLOBAL) {
     694:	ldr	r3, [pc, #252]	; (794 <loop+0x300>)
     696:	ldrb	r3, [r3, #0]
     698:	cbz	r3, 6da <loop+0x246>
        } else if (m_knobType == THIRD) {

        } else if (m_knobType == FOURTH) {  
        } else if (m_knobType == FIFTH) {
        }
      } else if (currentMode == VELOCITY) {
     69a:	cmp	r3, #2
     69c:	beq.w	ece <loop+0xa3a>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     6a0:	cmp	r3, #1
     6a2:	beq.w	1334 <loop+0xea0>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     6a6:	cmp	r3, #3
     6a8:	bne.n	6da <loop+0x246>
        m_sequence.controlLength(m_value, m_id);
     6aa:	ldr	r5, [r4, #16]
     6ac:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     6ae:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     6b0:	movw	r6, #1022	; 0x3fe
     6b4:	rsb	r3, r2, #1
     6b8:	cmp	r3, r6
     6ba:	ble.w	f3a <loop+0xaa6>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     6be:	ldr	r6, [pc, #216]	; (798 <loop+0x304>)
     6c0:	mul.w	r3, r3, r0
     6c4:	smull	r7, r6, r6, r3
     6c8:	add	r6, r3
     6ca:	asrs	r3, r3, #31
     6cc:	rsb	r3, r3, r6, asr #9
     6d0:	add	r2, r3
      notesLengths[id] = newValue;
     6d2:	add.w	r3, r1, #18
     6d6:	str.w	r2, [r5, r3, lsl #2]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     6da:	str	r0, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6dc:	ldr	r4, [pc, #188]	; (79c <loop+0x308>)
     6de:	ldrb	r0, [r4, #0]
     6e0:	bl	2330 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     6e4:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6e6:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6e8:	cmp	r0, r3
     6ea:	beq.n	748 <loop+0x2b4>
     6ec:	subs	r3, r0, r3
     6ee:	cmp	r3, #0
     6f0:	it	lt
     6f2:	neglt	r3, r3
     6f4:	cmp	r3, #10
     6f6:	ble.n	748 <loop+0x2b4>
    void onChange () {
      // delay
      // transpose
      // acting weird

      if (m_knobType == FIFTH) {
     6f8:	ldrb	r3, [r4, #20]
     6fa:	cmp	r3, #4
     6fc:	beq.w	cdc <loop+0x848>
        m_sequence.controlTempo(m_value);
      }

      if (currentMode == GLOBAL) {
     700:	ldr	r3, [pc, #144]	; (794 <loop+0x300>)
     702:	ldrb	r3, [r3, #0]
     704:	cbz	r3, 746 <loop+0x2b2>
        } else if (m_knobType == THIRD) {

        } else if (m_knobType == FOURTH) {  
        } else if (m_knobType == FIFTH) {
        }
      } else if (currentMode == VELOCITY) {
     706:	cmp	r3, #2
     708:	beq.w	eb2 <loop+0xa1e>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     70c:	cmp	r3, #1
     70e:	beq.w	1316 <loop+0xe82>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     712:	cmp	r3, #3
     714:	bne.n	746 <loop+0x2b2>
        m_sequence.controlLength(m_value, m_id);
     716:	ldr	r5, [r4, #16]
     718:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     71a:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     71c:	movw	r6, #1022	; 0x3fe
     720:	rsb	r3, r2, #1
     724:	cmp	r3, r6
     726:	ble.w	f24 <loop+0xa90>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     72a:	ldr	r6, [pc, #108]	; (798 <loop+0x304>)
     72c:	mul.w	r3, r3, r0
     730:	smull	r7, r6, r6, r3
     734:	add	r6, r3
     736:	asrs	r3, r3, #31
     738:	rsb	r3, r3, r6, asr #9
     73c:	add	r2, r3
      notesLengths[id] = newValue;
     73e:	add.w	r3, r1, #18
     742:	str.w	r2, [r5, r3, lsl #2]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     746:	str	r0, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     748:	ldr	r4, [pc, #84]	; (7a0 <loop+0x30c>)
     74a:	ldrb	r0, [r4, #0]
     74c:	bl	2330 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     750:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     752:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     754:	cmp	r0, r3
     756:	beq.n	800 <loop+0x36c>
     758:	b.n	7a4 <loop+0x310>
     75a:	nop
     75c:	.word	0x1fff1844
     760:	.word	0x1fff16c0
     764:	.word	0x1fff16e4
     768:	.word	0x1fff1708
     76c:	.word	0x1fff1808
     770:	.word	0x1fff17a8
     774:	.word	0x1fff17cc
     778:	.word	0x1fff162c
     77c:	.word	0x1fff15cc
     780:	.word	0x1fff15e4
     784:	.word	0x1fff15fc
     788:	.word	0x1fff1614
     78c:	.word	0x1fff1690
     790:	.word	0x1fff16a8
     794:	.word	0x1fff165c
     798:	.word	0x80200803
     79c:	.word	0x1fff1644
     7a0:	.word	0x1fff1660
     7a4:	subs	r3, r0, r3
     7a6:	cmp	r3, #0
     7a8:	it	lt
     7aa:	neglt	r3, r3
     7ac:	cmp	r3, #10
     7ae:	ble.n	800 <loop+0x36c>
    void onChange () {
      // delay
      // transpose
      // acting weird

      if (m_knobType == FIFTH) {
     7b0:	ldrb	r3, [r4, #20]
     7b2:	cmp	r3, #4
     7b4:	beq.w	d4c <loop+0x8b8>
        m_sequence.controlTempo(m_value);
      }

      if (currentMode == GLOBAL) {
     7b8:	ldr	r3, [pc, #752]	; (aac <loop+0x618>)
     7ba:	ldrb	r3, [r3, #0]
     7bc:	cbz	r3, 7fe <loop+0x36a>
        } else if (m_knobType == THIRD) {

        } else if (m_knobType == FOURTH) {  
        } else if (m_knobType == FIFTH) {
        }
      } else if (currentMode == VELOCITY) {
     7be:	cmp	r3, #2
     7c0:	beq.w	f08 <loop+0xa74>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     7c4:	cmp	r3, #1
     7c6:	beq.w	12bc <loop+0xe28>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     7ca:	cmp	r3, #3
     7cc:	bne.n	7fe <loop+0x36a>
        m_sequence.controlLength(m_value, m_id);
     7ce:	ldr	r5, [r4, #16]
     7d0:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     7d2:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     7d4:	movw	r6, #1022	; 0x3fe
     7d8:	rsb	r3, r2, #1
     7dc:	cmp	r3, r6
     7de:	ble.w	f7e <loop+0xaea>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     7e2:	ldr	r6, [pc, #716]	; (ab0 <loop+0x61c>)
     7e4:	mul.w	r3, r3, r0
     7e8:	smull	r7, r6, r6, r3
     7ec:	add	r6, r3
     7ee:	asrs	r3, r3, #31
     7f0:	rsb	r3, r3, r6, asr #9
     7f4:	add	r2, r3
      notesLengths[id] = newValue;
     7f6:	add.w	r3, r1, #18
     7fa:	str.w	r2, [r5, r3, lsl #2]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     7fe:	str	r0, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     800:	ldr	r4, [pc, #688]	; (ab4 <loop+0x620>)
     802:	ldrb	r0, [r4, #0]
     804:	bl	2330 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     808:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     80a:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     80c:	cmp	r0, r3
     80e:	beq.n	86c <loop+0x3d8>
     810:	subs	r3, r0, r3
     812:	cmp	r3, #0
     814:	it	lt
     816:	neglt	r3, r3
     818:	cmp	r3, #10
     81a:	ble.n	86c <loop+0x3d8>
    void onChange () {
      // delay
      // transpose
      // acting weird

      if (m_knobType == FIFTH) {
     81c:	ldrb	r3, [r4, #20]
     81e:	cmp	r3, #4
     820:	beq.w	d14 <loop+0x880>
        m_sequence.controlTempo(m_value);
      }

      if (currentMode == GLOBAL) {
     824:	ldr	r3, [pc, #644]	; (aac <loop+0x618>)
     826:	ldrb	r3, [r3, #0]
     828:	cbz	r3, 86a <loop+0x3d6>
        } else if (m_knobType == THIRD) {

        } else if (m_knobType == FOURTH) {  
        } else if (m_knobType == FIFTH) {
        }
      } else if (currentMode == VELOCITY) {
     82a:	cmp	r3, #2
     82c:	beq.w	eec <loop+0xa58>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     830:	cmp	r3, #1
     832:	beq.w	12f8 <loop+0xe64>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     836:	cmp	r3, #3
     838:	bne.n	86a <loop+0x3d6>
        m_sequence.controlLength(m_value, m_id);
     83a:	ldr	r5, [r4, #16]
     83c:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     83e:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     840:	movw	r6, #1022	; 0x3fe
     844:	rsb	r3, r2, #1
     848:	cmp	r3, r6
     84a:	ble.w	f68 <loop+0xad4>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     84e:	ldr	r6, [pc, #608]	; (ab0 <loop+0x61c>)
     850:	mul.w	r3, r3, r0
     854:	smull	r7, r6, r6, r3
     858:	add	r6, r3
     85a:	asrs	r3, r3, #31
     85c:	rsb	r3, r3, r6, asr #9
     860:	add	r2, r3
      notesLengths[id] = newValue;
     862:	add.w	r3, r1, #18
     866:	str.w	r2, [r5, r3, lsl #2]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     86a:	str	r0, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     86c:	ldr	r4, [pc, #584]	; (ab8 <loop+0x624>)
     86e:	ldrb	r0, [r4, #0]
     870:	bl	2330 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     874:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     876:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     878:	cmp	r0, r3
     87a:	beq.n	8d8 <loop+0x444>
     87c:	subs	r3, r0, r3
     87e:	cmp	r3, #0
     880:	it	lt
     882:	neglt	r3, r3
     884:	cmp	r3, #10
     886:	ble.n	8d8 <loop+0x444>
    void onChange () {
      // delay
      // transpose
      // acting weird

      if (m_knobType == FIFTH) {
     888:	ldrb	r3, [r4, #20]
     88a:	cmp	r3, #4
     88c:	beq.w	d30 <loop+0x89c>
        m_sequence.controlTempo(m_value);
      }

      if (currentMode == GLOBAL) {
     890:	ldr	r3, [pc, #536]	; (aac <loop+0x618>)
     892:	ldrb	r3, [r3, #0]
     894:	cbz	r3, 8d6 <loop+0x442>
        } else if (m_knobType == THIRD) {

        } else if (m_knobType == FOURTH) {  
        } else if (m_knobType == FIFTH) {
        }
      } else if (currentMode == VELOCITY) {
     896:	cmp	r3, #2
     898:	beq.w	e96 <loop+0xa02>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     89c:	cmp	r3, #1
     89e:	beq.w	12da <loop+0xe46>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     8a2:	cmp	r3, #3
     8a4:	bne.n	8d6 <loop+0x442>
        m_sequence.controlLength(m_value, m_id);
     8a6:	ldr	r5, [r4, #16]
     8a8:	ldr	r1, [r4, #12]
        m_leds[3]->blink(3);
      }
    }

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     8aa:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     8ac:	movw	r6, #1022	; 0x3fe
     8b0:	rsb	r3, r2, #1
     8b4:	cmp	r3, r6
     8b6:	ble.w	f52 <loop+0xabe>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     8ba:	ldr	r6, [pc, #500]	; (ab0 <loop+0x61c>)
     8bc:	mul.w	r3, r3, r0
     8c0:	smull	r7, r6, r6, r3
     8c4:	add	r6, r3
     8c6:	asrs	r3, r3, #31
     8c8:	rsb	r3, r3, r6, asr #9
     8cc:	add	r2, r3
      notesLengths[id] = newValue;
     8ce:	add.w	r3, r1, #18
     8d2:	str.w	r2, [r5, r3, lsl #2]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     8d6:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     8d8:	add	sp, #236	; 0xec
     8da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8de:	ldr	r3, [r4, #0]
     8e0:	str	r3, [sp, #224]	; 0xe0
	return ret;
     8e2:	ldr	r3, [sp, #224]	; 0xe0
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     8e4:	ldr	r1, [r5, #8]
     8e6:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8e8:	ldr	r4, [pc, #464]	; (abc <loop+0x628>)
     8ea:	subs	r3, r3, r1
     8ec:	cmp	r3, r2
     8ee:	bls.w	670 <loop+0x1dc>
        digitalWrite(m_pin, !digitalRead(m_pin));
     8f2:	ldrb	r6, [r5, #0]
     8f4:	mov	r0, r6
     8f6:	bl	2520 <digitalRead>
     8fa:	clz	r1, r0
     8fe:	lsrs	r1, r1, #5
     900:	mov	r0, r6
     902:	bl	2514 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     906:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     908:	movs	r2, #0

        if (blinkingCounter > 0) {
     90a:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     90c:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     90e:	ble.w	670 <loop+0x1dc>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     912:	ldrb	r6, [r5, #0]
     914:	mov	r0, r6
     916:	bl	2520 <digitalRead>
     91a:	clz	r1, r0
     91e:	lsrs	r1, r1, #5
     920:	mov	r0, r6
     922:	bl	2514 <digitalWrite>
     926:	ldr	r3, [r4, #0]
     928:	str	r3, [sp, #228]	; 0xe4
	return ret;
     92a:	ldr	r3, [sp, #228]	; 0xe4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     92c:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     92e:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     930:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     934:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     936:	str	r3, [r5, #20]
     938:	b.n	670 <loop+0x1dc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     93a:	ldr	r3, [r4, #0]
     93c:	str	r3, [sp, #216]	; 0xd8
	return ret;
     93e:	ldr	r3, [sp, #216]	; 0xd8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     940:	ldr	r1, [r5, #8]
     942:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     944:	ldr	r6, [pc, #372]	; (abc <loop+0x628>)
     946:	subs	r3, r3, r1
     948:	cmp	r3, r2
     94a:	bls.w	666 <loop+0x1d2>
        digitalWrite(m_pin, !digitalRead(m_pin));
     94e:	ldrb	r7, [r5, #0]
     950:	mov	r0, r7
     952:	bl	2520 <digitalRead>
     956:	clz	r1, r0
     95a:	lsrs	r1, r1, #5
     95c:	mov	r0, r7
     95e:	bl	2514 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     962:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     964:	movs	r2, #0

        if (blinkingCounter > 0) {
     966:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     968:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     96a:	ble.w	666 <loop+0x1d2>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     96e:	ldrb	r7, [r5, #0]
     970:	mov	r0, r7
     972:	bl	2520 <digitalRead>
     976:	clz	r1, r0
     97a:	lsrs	r1, r1, #5
     97c:	mov	r0, r7
     97e:	bl	2514 <digitalWrite>
     982:	ldr	r3, [r6, #0]
     984:	str	r3, [sp, #220]	; 0xdc
	return ret;
     986:	ldr	r3, [sp, #220]	; 0xdc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     988:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     98a:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     98c:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     990:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     992:	str	r3, [r5, #20]
     994:	b.n	666 <loop+0x1d2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     996:	ldr	r3, [r4, #0]
     998:	str	r3, [sp, #208]	; 0xd0
	return ret;
     99a:	ldr	r3, [sp, #208]	; 0xd0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     99c:	ldr	r1, [r5, #8]
     99e:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9a0:	ldr	r6, [pc, #280]	; (abc <loop+0x628>)
     9a2:	subs	r3, r3, r1
     9a4:	cmp	r3, r2
     9a6:	bls.w	65c <loop+0x1c8>
        digitalWrite(m_pin, !digitalRead(m_pin));
     9aa:	ldrb	r7, [r5, #0]
     9ac:	mov	r0, r7
     9ae:	bl	2520 <digitalRead>
     9b2:	clz	r1, r0
     9b6:	lsrs	r1, r1, #5
     9b8:	mov	r0, r7
     9ba:	bl	2514 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     9be:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9c0:	movs	r2, #0

        if (blinkingCounter > 0) {
     9c2:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9c4:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     9c6:	ble.w	65c <loop+0x1c8>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     9ca:	ldrb	r7, [r5, #0]
     9cc:	mov	r0, r7
     9ce:	bl	2520 <digitalRead>
     9d2:	clz	r1, r0
     9d6:	lsrs	r1, r1, #5
     9d8:	mov	r0, r7
     9da:	bl	2514 <digitalWrite>
     9de:	ldr	r3, [r6, #0]
     9e0:	str	r3, [sp, #212]	; 0xd4
	return ret;
     9e2:	ldr	r3, [sp, #212]	; 0xd4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     9e4:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9e6:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9e8:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9ec:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9ee:	str	r3, [r5, #20]
     9f0:	b.n	65c <loop+0x1c8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9f2:	ldr	r3, [r4, #0]
     9f4:	str	r3, [sp, #200]	; 0xc8
	return ret;
     9f6:	ldr	r3, [sp, #200]	; 0xc8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     9f8:	ldr	r1, [r5, #8]
     9fa:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9fc:	ldr	r6, [pc, #188]	; (abc <loop+0x628>)
     9fe:	subs	r3, r3, r1
     a00:	cmp	r3, r2
     a02:	bls.w	652 <loop+0x1be>
        digitalWrite(m_pin, !digitalRead(m_pin));
     a06:	ldrb	r7, [r5, #0]
     a08:	mov	r0, r7
     a0a:	bl	2520 <digitalRead>
     a0e:	clz	r1, r0
     a12:	lsrs	r1, r1, #5
     a14:	mov	r0, r7
     a16:	bl	2514 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     a1a:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a1c:	movs	r2, #0

        if (blinkingCounter > 0) {
     a1e:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a20:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     a22:	ble.w	652 <loop+0x1be>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     a26:	ldrb	r7, [r5, #0]
     a28:	mov	r0, r7
     a2a:	bl	2520 <digitalRead>
     a2e:	clz	r1, r0
     a32:	lsrs	r1, r1, #5
     a34:	mov	r0, r7
     a36:	bl	2514 <digitalWrite>
     a3a:	ldr	r3, [r6, #0]
     a3c:	str	r3, [sp, #204]	; 0xcc
	return ret;
     a3e:	ldr	r3, [sp, #204]	; 0xcc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     a40:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a42:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a44:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a48:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a4a:	str	r3, [r5, #20]
     a4c:	b.n	652 <loop+0x1be>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a4e:	ldr	r3, [r4, #0]
     a50:	str	r3, [sp, #192]	; 0xc0
	return ret;
     a52:	ldr	r3, [sp, #192]	; 0xc0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     a54:	ldr	r1, [r5, #8]
     a56:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a58:	ldr	r6, [pc, #96]	; (abc <loop+0x628>)
     a5a:	subs	r3, r3, r1
     a5c:	cmp	r3, r2
     a5e:	bls.w	648 <loop+0x1b4>
        digitalWrite(m_pin, !digitalRead(m_pin));
     a62:	ldrb	r7, [r5, #0]
     a64:	mov	r0, r7
     a66:	bl	2520 <digitalRead>
     a6a:	clz	r1, r0
     a6e:	lsrs	r1, r1, #5
     a70:	mov	r0, r7
     a72:	bl	2514 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     a76:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a78:	movs	r2, #0

        if (blinkingCounter > 0) {
     a7a:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a7c:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     a7e:	ble.w	648 <loop+0x1b4>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     a82:	ldrb	r7, [r5, #0]
     a84:	mov	r0, r7
     a86:	bl	2520 <digitalRead>
     a8a:	clz	r1, r0
     a8e:	lsrs	r1, r1, #5
     a90:	mov	r0, r7
     a92:	bl	2514 <digitalWrite>
     a96:	ldr	r3, [r6, #0]
     a98:	str	r3, [sp, #196]	; 0xc4
	return ret;
     a9a:	ldr	r3, [sp, #196]	; 0xc4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     a9c:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a9e:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     aa0:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     aa4:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     aa6:	str	r3, [r5, #20]
     aa8:	b.n	648 <loop+0x1b4>
     aaa:	nop
     aac:	.word	0x1fff165c
     ab0:	.word	0x80200803
     ab4:	.word	0x1fff1678
     ab8:	.word	0x1fff17f0
     abc:	.word	0x1fff1844
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ac0:	ldr	r3, [r4, #0]
     ac2:	str	r3, [sp, #184]	; 0xb8
	return ret;
     ac4:	ldr	r3, [sp, #184]	; 0xb8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     ac6:	ldr	r1, [r6, #8]
     ac8:	ldr	r2, [r6, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     aca:	ldr	r5, [pc, #716]	; (d98 <loop+0x904>)
     acc:	subs	r3, r3, r1
     ace:	cmp	r3, r2
     ad0:	bls.w	63e <loop+0x1aa>
        digitalWrite(m_pin, !digitalRead(m_pin));
     ad4:	ldrb	r7, [r6, #0]
     ad6:	mov	r0, r7
     ad8:	bl	2520 <digitalRead>
     adc:	clz	r1, r0
     ae0:	lsrs	r1, r1, #5
     ae2:	mov	r0, r7
     ae4:	bl	2514 <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     ae8:	ldr	r3, [r6, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     aea:	movs	r2, #0

        if (blinkingCounter > 0) {
     aec:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     aee:	strb	r2, [r6, #16]

        if (blinkingCounter > 0) {
     af0:	ble.w	63e <loop+0x1aa>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     af4:	ldrb	r7, [r6, #0]
     af6:	mov	r0, r7
     af8:	bl	2520 <digitalRead>
     afc:	clz	r1, r0
     b00:	lsrs	r1, r1, #5
     b02:	mov	r0, r7
     b04:	bl	2514 <digitalWrite>
     b08:	ldr	r3, [r5, #0]
     b0a:	str	r3, [sp, #188]	; 0xbc
	return ret;
     b0c:	ldr	r3, [sp, #188]	; 0xbc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     b0e:	str	r3, [r6, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b10:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     b12:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b16:	strb	r2, [r6, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     b18:	str	r3, [r6, #20]
     b1a:	b.n	63e <loop+0x1aa>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     b1c:	ldr	r3, [pc, #636]	; (d9c <loop+0x908>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     b1e:	ldrb	r3, [r3, #0]
     b20:	cmp	r3, #250	; 0xfa
     b22:	beq.w	dac <loop+0x918>
     b26:	cmp	r3, #252	; 0xfc
     b28:	beq.w	cb8 <loop+0x824>
     b2c:	cmp	r3, #248	; 0xf8
     b2e:	beq.w	d66 <loop+0x8d2>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     b32:	movs	r1, #35	; 0x23
     b34:	ldr	r0, [pc, #616]	; (da0 <loop+0x90c>)
     b36:	ldr	r4, [pc, #608]	; (d98 <loop+0x904>)
     b38:	bl	1f04 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     b3c:	ldr	r0, [pc, #612]	; (da4 <loop+0x910>)
     b3e:	bl	3a78 <Print::println()>
     b42:	b.n	4a8 <loop+0x14>
     b44:	ldr	r3, [r6, #20]
     b46:	b.n	5d0 <loop+0x13c>
     b48:	ldr	r3, [r5, #20]
     b4a:	b.n	58e <loop+0xfa>
     b4c:	ldr	r3, [r6, #20]
     b4e:	b.n	4c8 <loop+0x34>
     b50:	ldr	r3, [r6, #20]
     b52:	b.n	54c <loop+0xb8>
     b54:	ldr	r3, [r5, #20]
     b56:	b.n	612 <loop+0x17e>
     b58:	ldr	r3, [r5, #20]
     b5a:	b.n	50a <loop+0x76>
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     b5c:	mov	r2, r6
     b5e:	b.n	632 <loop+0x19e>
     b60:	mov	r2, r6
     b62:	b.n	52a <loop+0x96>
     b64:	mov	r2, r5
     b66:	b.n	5f0 <loop+0x15c>
     b68:	mov	r2, r5
     b6a:	b.n	4e8 <loop+0x54>
     b6c:	mov	r2, r5
     b6e:	b.n	56c <loop+0xd8>
     b70:	mov	r2, r6
     b72:	b.n	5ae <loop+0x11a>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b74:	ldrb	r3, [r7, #16]
     b76:	cmp	r3, #0
     b78:	bne.w	fde <loop+0xb4a>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b7c:	ldrb	r3, [r7, #17]
     b7e:	cmp	r3, #0
     b80:	bne.w	13b6 <loop+0xf22>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b84:	ldr	r3, [r7, #24]
     b86:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b8a:	clz	r1, r1
     b8e:	lsrs	r1, r1, #5
     b90:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b92:	uxtb	r0, r0
     b94:	bl	2514 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     b98:	ldr	r3, [r7, #0]
     b9a:	ldr	r0, [r7, #28]
     b9c:	ldr	r2, [r7, #12]
     b9e:	subs	r3, #1
    void toggle () {
      m_state = !m_state;
    };

    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
     ba0:	ldrb	r1, [r0, r3]
     ba2:	eor.w	r1, r1, #1
     ba6:	strb	r1, [r0, r3]
     ba8:	b.n	632 <loop+0x19e>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     baa:	ldrb	r3, [r7, #16]
     bac:	cmp	r3, #0
     bae:	bne.w	1244 <loop+0xdb0>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     bb2:	ldrb	r3, [r7, #17]
     bb4:	cmp	r3, #0
     bb6:	bne.w	1384 <loop+0xef0>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     bba:	ldr	r3, [r7, #24]
     bbc:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     bc0:	clz	r1, r1
     bc4:	lsrs	r1, r1, #5
     bc6:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     bc8:	uxtb	r0, r0
     bca:	bl	2514 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     bce:	ldr	r3, [r7, #0]
     bd0:	ldr	r0, [r7, #28]
     bd2:	ldr	r2, [r7, #12]
     bd4:	subs	r3, #1
     bd6:	ldrb	r1, [r0, r3]
     bd8:	eor.w	r1, r1, #1
     bdc:	strb	r1, [r0, r3]
     bde:	b.n	4e8 <loop+0x54>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     be0:	ldrb	r3, [r7, #16]
     be2:	cmp	r3, #0
     be4:	bne.w	11cc <loop+0xd38>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     be8:	ldrb	r3, [r7, #17]
     bea:	cmp	r3, #0
     bec:	bne.w	1352 <loop+0xebe>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     bf0:	ldr	r3, [r7, #24]
     bf2:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     bf6:	clz	r1, r1
     bfa:	lsrs	r1, r1, #5
     bfc:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     bfe:	uxtb	r0, r0
     c00:	bl	2514 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     c04:	ldr	r3, [r7, #0]
     c06:	ldr	r0, [r7, #28]
     c08:	ldr	r2, [r7, #12]
     c0a:	subs	r3, #1
     c0c:	ldrb	r1, [r0, r3]
     c0e:	eor.w	r1, r1, #1
     c12:	strb	r1, [r0, r3]
     c14:	b.n	52a <loop+0x96>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     c16:	ldrb	r3, [r7, #16]
     c18:	cmp	r3, #0
     c1a:	bne.w	1154 <loop+0xcc0>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     c1e:	ldrb	r3, [r7, #17]
     c20:	cmp	r3, #0
     c22:	bne.w	144c <loop+0xfb8>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     c26:	ldr	r3, [r7, #24]
     c28:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c2c:	clz	r1, r1
     c30:	lsrs	r1, r1, #5
     c32:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c34:	uxtb	r0, r0
     c36:	bl	2514 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     c3a:	ldr	r3, [r7, #0]
     c3c:	ldr	r0, [r7, #28]
     c3e:	ldr	r2, [r7, #12]
     c40:	subs	r3, #1
     c42:	ldrb	r1, [r0, r3]
     c44:	eor.w	r1, r1, #1
     c48:	strb	r1, [r0, r3]
     c4a:	b.n	56c <loop+0xd8>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     c4c:	ldrb	r3, [r7, #16]
     c4e:	cmp	r3, #0
     c50:	bne.w	10dc <loop+0xc48>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     c54:	ldrb	r3, [r7, #17]
     c56:	cmp	r3, #0
     c58:	bne.w	141a <loop+0xf86>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     c5c:	ldr	r3, [r7, #24]
     c5e:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c62:	clz	r1, r1
     c66:	lsrs	r1, r1, #5
     c68:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c6a:	uxtb	r0, r0
     c6c:	bl	2514 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     c70:	ldr	r3, [r7, #0]
     c72:	ldr	r0, [r7, #28]
     c74:	ldr	r2, [r7, #12]
     c76:	subs	r3, #1
     c78:	ldrb	r1, [r0, r3]
     c7a:	eor.w	r1, r1, #1
     c7e:	strb	r1, [r0, r3]
     c80:	b.n	5ae <loop+0x11a>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     c82:	ldrb	r3, [r7, #16]
     c84:	cmp	r3, #0
     c86:	bne.w	1056 <loop+0xbc2>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     c8a:	ldrb	r3, [r7, #17]
     c8c:	cmp	r3, #0
     c8e:	bne.w	13e8 <loop+0xf54>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     c92:	ldr	r3, [r7, #24]
     c94:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c98:	clz	r1, r1
     c9c:	lsrs	r1, r1, #5
     c9e:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     ca0:	uxtb	r0, r0
     ca2:	bl	2514 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     ca6:	ldr	r3, [r7, #0]
     ca8:	ldr	r0, [r7, #28]
     caa:	ldr	r2, [r7, #12]
     cac:	subs	r3, #1
     cae:	ldrb	r1, [r0, r3]
     cb0:	eor.w	r1, r1, #1
     cb4:	strb	r1, [r0, r3]
     cb6:	b.n	5f0 <loop+0x15c>
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     cb8:	ldr	r3, [pc, #236]	; (da8 <loop+0x914>)
     cba:	ldr	r4, [pc, #220]	; (d98 <loop+0x904>)
      ppqn = 0;
      m_currentStep = 0;
      m_leds[5]->toggle();
     cbc:	ldr	r2, [r3, #108]	; 0x6c
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     cbe:	movs	r5, #0
      ppqn = 0;
     cc0:	str	r5, [r3, #28]
      m_currentStep = 0;
     cc2:	str	r5, [r3, #8]
     cc4:	ldmia.w	r2, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     cc8:	clz	r1, r1
     ccc:	lsrs	r1, r1, #5
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     cce:	strb	r5, [r3, #4]

      digitalWrite(m_pin, m_state); 
     cd0:	uxtb	r0, r0
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     cd2:	str	r1, [r2, #4]

      digitalWrite(m_pin, m_state); 
     cd4:	bl	2514 <digitalWrite>
     cd8:	b.w	4a8 <loop+0x14>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     cdc:	cmp.w	r0, #400	; 0x190
      // delay
      // transpose
      // acting weird

      if (m_knobType == FIFTH) {
        m_sequence.controlTempo(m_value);
     ce0:	ldr	r3, [r4, #16]
     ce2:	bge.w	e2e <loop+0x99a>
        max_ppqn = 6;

        if (ppqn >= 6) {
     ce6:	ldr	r2, [r3, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ce8:	movs	r1, #6

        if (ppqn >= 6) {
     cea:	cmp	r2, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     cec:	str	r1, [r3, #32]

        if (ppqn >= 6) {
     cee:	ble.w	700 <loop+0x26c>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     cf2:	movs	r2, #0
     cf4:	str	r2, [r3, #28]
     cf6:	b.n	700 <loop+0x26c>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     cf8:	cmp.w	r0, #400	; 0x190
     cfc:	ldr	r3, [r4, #16]
     cfe:	bge.w	e48 <loop+0x9b4>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d02:	ldr	r2, [r3, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d04:	movs	r1, #6

        if (ppqn >= 6) {
     d06:	cmp	r2, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d08:	str	r1, [r3, #32]

        if (ppqn >= 6) {
     d0a:	ble.w	694 <loop+0x200>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     d0e:	movs	r2, #0
     d10:	str	r2, [r3, #28]
     d12:	b.n	694 <loop+0x200>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     d14:	cmp.w	r0, #400	; 0x190
     d18:	ldr	r3, [r4, #16]
     d1a:	bge.w	e62 <loop+0x9ce>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d1e:	ldr	r2, [r3, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d20:	movs	r1, #6

        if (ppqn >= 6) {
     d22:	cmp	r2, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d24:	str	r1, [r3, #32]

        if (ppqn >= 6) {
     d26:	ble.w	824 <loop+0x390>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     d2a:	movs	r2, #0
     d2c:	str	r2, [r3, #28]
     d2e:	b.n	824 <loop+0x390>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     d30:	cmp.w	r0, #400	; 0x190
     d34:	ldr	r3, [r4, #16]
     d36:	bge.w	e7c <loop+0x9e8>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d3a:	ldr	r2, [r3, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d3c:	movs	r1, #6

        if (ppqn >= 6) {
     d3e:	cmp	r2, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d40:	str	r1, [r3, #32]

        if (ppqn >= 6) {
     d42:	ble.w	890 <loop+0x3fc>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     d46:	movs	r2, #0
     d48:	str	r2, [r3, #28]
     d4a:	b.n	890 <loop+0x3fc>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     d4c:	cmp.w	r0, #400	; 0x190
     d50:	ldr	r3, [r4, #16]
     d52:	bge.n	e14 <loop+0x980>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d54:	ldr	r2, [r3, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d56:	movs	r1, #6

        if (ppqn >= 6) {
     d58:	cmp	r2, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d5a:	str	r1, [r3, #32]

        if (ppqn >= 6) {
     d5c:	ble.w	7b8 <loop+0x324>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     d60:	movs	r2, #0
     d62:	str	r2, [r3, #28]
     d64:	b.n	7b8 <loop+0x324>
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     d66:	ldr	r5, [pc, #64]	; (da8 <loop+0x914>)

      if (ppqn >= notesLengths[m_currentStep]) {
     d68:	ldr	r2, [r5, #8]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     d6a:	ldr	r3, [r5, #28]

      if (ppqn >= notesLengths[m_currentStep]) {
     d6c:	adds	r2, #18
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     d6e:	adds	r3, #1

      if (ppqn >= notesLengths[m_currentStep]) {
     d70:	ldr.w	r2, [r5, r2, lsl #2]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     d74:	str	r3, [r5, #28]

      if (ppqn >= notesLengths[m_currentStep]) {
     d76:	cmp	r3, r2
     d78:	bge.w	147e <loop+0xfea>
        // of the active note to see if i do the stop step
        stopStep();
      }


      if (ppqn == max_ppqn) {
     d7c:	ldr	r2, [r5, #32]
     d7e:	ldr	r6, [pc, #40]	; (da8 <loop+0x914>)
     d80:	cmp	r2, r3
     d82:	bne.w	4a6 <loop+0x12>
      noteOn(0, notes[step], notesVelocities[step]);
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
     d86:	ldrb	r3, [r6, #4]
     d88:	cmp	r3, #0
     d8a:	bne.w	1684 <loop+0x11f0>
     d8e:	ldr	r4, [pc, #8]	; (d98 <loop+0x904>)
      }


      if (ppqn == max_ppqn) {
        doStep(); 
        ppqn = 0;
     d90:	movs	r3, #0
     d92:	str	r3, [r5, #28]
     d94:	b.w	4a8 <loop+0x14>
     d98:	.word	0x1fff1844
     d9c:	.word	0x1fff1d00
     da0:	.word	0x00004e48
     da4:	.word	0x1fff0c60
     da8:	.word	0x1fff1730
      }
    };

    void startPPQN () {
      m_state = true;
     dac:	ldr	r5, [pc, #800]	; (10d0 <loop+0xc3c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     dae:	ldr	r4, [pc, #804]	; (10d4 <loop+0xc40>)
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     db0:	ldr	r3, [r5, #8]
     db2:	adds	r3, #22
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     db4:	mov.w	r8, #1
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     db8:	ldr.w	r6, [r5, r3, lsl #2]
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     dbc:	strb.w	r8, [r5, #4]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     dc0:	ldrb.w	r9, [r6]
      ppqn = 0;
     dc4:	movs	r7, #0
     dc6:	mov	r0, r9
     dc8:	str	r7, [r5, #28]
     dca:	bl	2520 <digitalRead>
     dce:	clz	r1, r0
     dd2:	lsrs	r1, r1, #5
     dd4:	mov	r0, r9
     dd6:	bl	2514 <digitalWrite>

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();

        if (m_steps[m_currentStep].m_state) {
     dda:	ldr	r3, [r5, #8]
     ddc:	ldr	r2, [r4, #0]
     dde:	str	r2, [sp, #12]
     de0:	ldrb	r2, [r5, r3]
	return ret;
     de2:	ldr	r1, [sp, #12]
      blinking = true;
     de4:	strb.w	r8, [r6, #16]
      blinkingCounter = times;
     de8:	str	r7, [r6, #20]
      lastBlink = millis();  
     dea:	str	r1, [r6, #8]
     dec:	cmp	r2, #0
     dee:	bne.w	1488 <loop+0xff4>
          playStep(m_currentStep);
        }

        m_currentStep++;
     df2:	adds	r3, #1

        if (m_currentStep > 3) {
     df4:	cmp	r3, #3
          m_currentStep = 0;
     df6:	it	gt
     df8:	movgt	r3, #0
     dfa:	str	r3, [r5, #8]

    void startPPQN () {
      m_state = true;
      ppqn = 0;
      doStep();
      m_leds[5]->toggle();
     dfc:	ldr	r3, [r5, #108]	; 0x6c
     dfe:	ldmia.w	r3, {r0, r1}
    };

    void toggle () {
      m_state = !m_state;
     e02:	clz	r1, r1
     e06:	lsrs	r1, r1, #5
     e08:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     e0a:	uxtb	r0, r0
     e0c:	bl	2514 <digitalWrite>
     e10:	b.w	4a8 <loop+0x14>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     e14:	sub.w	r2, r0, #400	; 0x190
     e18:	cmp.w	r2, #400	; 0x190
     e1c:	bcs.w	fa4 <loop+0xb10>
        max_ppqn = 8;

        if (ppqn >= 8) {
     e20:	ldr	r2, [r3, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e22:	movs	r1, #8

        if (ppqn >= 8) {
     e24:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e26:	str	r1, [r3, #32]

        if (ppqn >= 8) {
     e28:	ble.w	7b8 <loop+0x324>
     e2c:	b.n	d60 <loop+0x8cc>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     e2e:	sub.w	r2, r0, #400	; 0x190
     e32:	cmp.w	r2, #400	; 0x190
     e36:	bcs.w	f94 <loop+0xb00>
        max_ppqn = 8;

        if (ppqn >= 8) {
     e3a:	ldr	r2, [r3, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e3c:	movs	r1, #8

        if (ppqn >= 8) {
     e3e:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e40:	str	r1, [r3, #32]

        if (ppqn >= 8) {
     e42:	ble.w	700 <loop+0x26c>
     e46:	b.n	cf2 <loop+0x85e>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     e48:	sub.w	r2, r0, #400	; 0x190
     e4c:	cmp.w	r2, #400	; 0x190
     e50:	bcs.w	fce <loop+0xb3a>
        max_ppqn = 8;

        if (ppqn >= 8) {
     e54:	ldr	r2, [r3, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e56:	movs	r1, #8

        if (ppqn >= 8) {
     e58:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e5a:	str	r1, [r3, #32]

        if (ppqn >= 8) {
     e5c:	ble.w	694 <loop+0x200>
     e60:	b.n	d0e <loop+0x87a>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     e62:	sub.w	r2, r0, #400	; 0x190
     e66:	cmp.w	r2, #400	; 0x190
     e6a:	bcs.w	fc0 <loop+0xb2c>
        max_ppqn = 8;

        if (ppqn >= 8) {
     e6e:	ldr	r2, [r3, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e70:	movs	r1, #8

        if (ppqn >= 8) {
     e72:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e74:	str	r1, [r3, #32]

        if (ppqn >= 8) {
     e76:	ble.w	824 <loop+0x390>
     e7a:	b.n	d2a <loop+0x896>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     e7c:	sub.w	r2, r0, #400	; 0x190
     e80:	cmp.w	r2, #400	; 0x190
     e84:	bcs.w	fb2 <loop+0xb1e>
        max_ppqn = 8;

        if (ppqn >= 8) {
     e88:	ldr	r2, [r3, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e8a:	movs	r1, #8

        if (ppqn >= 8) {
     e8c:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     e8e:	str	r1, [r3, #32]

        if (ppqn >= 8) {
     e90:	ble.w	890 <loop+0x3fc>
     e94:	b.n	d46 <loop+0x8b2>
      notes[id] = newValue;
    };

    void controlVelocity (int value, int id) {
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
     e96:	ldr	r3, [r4, #12]
     e98:	ldr	r1, [r4, #16]
     e9a:	add.w	r2, r3, #14
     e9e:	subs.w	r3, r0, r0, lsl #6
     ea2:	it	mi
     ea4:	addwmi	r3, r3, #1023	; 0x3ff
     ea8:	asrs	r3, r3, #10
     eaa:	adds	r3, #127	; 0x7f
     eac:	str.w	r3, [r1, r2, lsl #2]
     eb0:	b.n	8d6 <loop+0x442>
     eb2:	ldr	r3, [r4, #12]
     eb4:	ldr	r1, [r4, #16]
     eb6:	add.w	r2, r3, #14
     eba:	subs.w	r3, r0, r0, lsl #6
     ebe:	it	mi
     ec0:	addwmi	r3, r3, #1023	; 0x3ff
     ec4:	asrs	r3, r3, #10
     ec6:	adds	r3, #127	; 0x7f
     ec8:	str.w	r3, [r1, r2, lsl #2]
     ecc:	b.n	746 <loop+0x2b2>
     ece:	ldr	r3, [r4, #12]
     ed0:	ldr	r1, [r4, #16]
     ed2:	add.w	r2, r3, #14
     ed6:	subs.w	r3, r0, r0, lsl #6
     eda:	it	mi
     edc:	addwmi	r3, r3, #1023	; 0x3ff
     ee0:	asrs	r3, r3, #10
     ee2:	adds	r3, #127	; 0x7f
     ee4:	str.w	r3, [r1, r2, lsl #2]
     ee8:	b.w	6da <loop+0x246>
     eec:	ldr	r3, [r4, #12]
     eee:	ldr	r1, [r4, #16]
     ef0:	add.w	r2, r3, #14
     ef4:	subs.w	r3, r0, r0, lsl #6
     ef8:	it	mi
     efa:	addwmi	r3, r3, #1023	; 0x3ff
     efe:	asrs	r3, r3, #10
     f00:	adds	r3, #127	; 0x7f
     f02:	str.w	r3, [r1, r2, lsl #2]
     f06:	b.n	86a <loop+0x3d6>
     f08:	ldr	r3, [r4, #12]
     f0a:	ldr	r1, [r4, #16]
     f0c:	add.w	r2, r3, #14
     f10:	subs.w	r3, r0, r0, lsl #6
     f14:	it	mi
     f16:	addwmi	r3, r3, #1023	; 0x3ff
     f1a:	asrs	r3, r3, #10
     f1c:	adds	r3, #127	; 0x7f
     f1e:	str.w	r3, [r1, r2, lsl #2]
     f22:	b.n	7fe <loop+0x36a>
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     f24:	rsb	r3, r2, #2
     f28:	mul.w	r3, r0, r3
     f2c:	cmp	r3, #0
     f2e:	it	lt
     f30:	addwlt	r3, r3, #1023	; 0x3ff
     f34:	add.w	r2, r2, r3, asr #10
     f38:	b.n	73e <loop+0x2aa>
     f3a:	rsb	r3, r2, #2
     f3e:	mul.w	r3, r0, r3
     f42:	cmp	r3, #0
     f44:	it	lt
     f46:	addwlt	r3, r3, #1023	; 0x3ff
     f4a:	add.w	r2, r2, r3, asr #10
     f4e:	b.w	6d2 <loop+0x23e>
     f52:	rsb	r3, r2, #2
     f56:	mul.w	r3, r0, r3
     f5a:	cmp	r3, #0
     f5c:	it	lt
     f5e:	addwlt	r3, r3, #1023	; 0x3ff
     f62:	add.w	r2, r2, r3, asr #10
     f66:	b.n	8ce <loop+0x43a>
     f68:	rsb	r3, r2, #2
     f6c:	mul.w	r3, r0, r3
     f70:	cmp	r3, #0
     f72:	it	lt
     f74:	addwlt	r3, r3, #1023	; 0x3ff
     f78:	add.w	r2, r2, r3, asr #10
     f7c:	b.n	862 <loop+0x3ce>
     f7e:	rsb	r3, r2, #2
     f82:	mul.w	r3, r0, r3
     f86:	cmp	r3, #0
     f88:	it	lt
     f8a:	addwlt	r3, r3, #1023	; 0x3ff
     f8e:	add.w	r2, r2, r3, asr #10
     f92:	b.n	7f6 <loop+0x362>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     f94:	sub.w	r2, r0, #800	; 0x320
     f98:	cmp	r2, #223	; 0xdf
        max_ppqn = 12;
     f9a:	itt	ls
     f9c:	movls	r2, #12
     f9e:	strls	r2, [r3, #32]
     fa0:	b.w	700 <loop+0x26c>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     fa4:	sub.w	r2, r0, #800	; 0x320
     fa8:	cmp	r2, #223	; 0xdf
        max_ppqn = 12;
     faa:	itt	ls
     fac:	movls	r2, #12
     fae:	strls	r2, [r3, #32]
     fb0:	b.n	7b8 <loop+0x324>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     fb2:	sub.w	r2, r0, #800	; 0x320
     fb6:	cmp	r2, #223	; 0xdf
        max_ppqn = 12;
     fb8:	itt	ls
     fba:	movls	r2, #12
     fbc:	strls	r2, [r3, #32]
     fbe:	b.n	890 <loop+0x3fc>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     fc0:	sub.w	r2, r0, #800	; 0x320
     fc4:	cmp	r2, #223	; 0xdf
        max_ppqn = 12;
     fc6:	itt	ls
     fc8:	movls	r2, #12
     fca:	strls	r2, [r3, #32]
     fcc:	b.n	824 <loop+0x390>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     fce:	sub.w	r2, r0, #800	; 0x320
     fd2:	cmp	r2, #223	; 0xdf
        max_ppqn = 12;
     fd4:	itt	ls
     fd6:	movls	r2, #12
     fd8:	strls	r2, [r3, #32]
     fda:	b.w	694 <loop+0x200>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
     fde:	ldr	r3, [r7, #24]
     fe0:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     fe4:	clz	r1, r1
     fe8:	lsrs	r1, r1, #5
     fea:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     fec:	uxtb	r0, r0
     fee:	bl	2514 <digitalWrite>
        m_sequence.toggleGlobalMode();
     ff2:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
     ff6:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     ffa:	ldrb.w	sl, [r9]
     ffe:	mov	r0, sl
    1000:	bl	2520 <digitalRead>
    1004:	clz	r1, r0
    1008:	lsrs	r1, r1, #5
    100a:	mov	r0, sl
    100c:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1010:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
    1014:	ldr.w	lr, [pc, #192]	; 10d8 <loop+0xc44>
    1018:	str	r3, [sp, #164]	; 0xa4
	return ret;
    101a:	ldr	r3, [sp, #164]	; 0xa4
    101c:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1020:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    1024:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1026:	movs	r3, #1
    1028:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
    102c:	str.w	r2, [r9, #20]
    1030:	cmp.w	sl, #0
    1034:	beq.w	154e <loop+0x10ba>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    1038:	cmp.w	sl, #1
    103c:	beq.w	18b8 <loop+0x1424>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    1040:	cmp.w	sl, #2
    1044:	beq.w	1a30 <loop+0x159c>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1048:	cmp.w	sl, #3
    104c:	beq.w	182a <loop+0x1396>
    1050:	ldr	r2, [r7, #12]
    1052:	b.w	632 <loop+0x19e>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    1056:	ldr	r3, [r7, #24]
    1058:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    105c:	clz	r1, r1
    1060:	lsrs	r1, r1, #5
    1062:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1064:	uxtb	r0, r0
    1066:	bl	2514 <digitalWrite>
        m_sequence.toggleGlobalMode();
    106a:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    106e:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1072:	ldrb.w	sl, [r9]
    1076:	mov	r0, sl
    1078:	bl	2520 <digitalRead>
    107c:	clz	r1, r0
    1080:	lsrs	r1, r1, #5
    1082:	mov	r0, sl
    1084:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1088:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
    108c:	ldr.w	lr, [pc, #72]	; 10d8 <loop+0xc44>
    1090:	str	r3, [sp, #144]	; 0x90
	return ret;
    1092:	ldr	r3, [sp, #144]	; 0x90
    1094:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1098:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    109c:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    109e:	movs	r3, #1
    10a0:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
    10a4:	str.w	r2, [r9, #20]
    10a8:	cmp.w	sl, #0
    10ac:	beq.w	14be <loop+0x102a>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    10b0:	cmp.w	sl, #1
    10b4:	beq.w	19e8 <loop+0x1554>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    10b8:	cmp.w	sl, #2
    10bc:	beq.w	1b50 <loop+0x16bc>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    10c0:	cmp.w	sl, #3
    10c4:	beq.w	1712 <loop+0x127e>
    10c8:	ldr	r2, [r7, #12]
    10ca:	b.w	5f0 <loop+0x15c>
    10ce:	nop
    10d0:	.word	0x1fff1730
    10d4:	.word	0x1fff1844
    10d8:	.word	0x1fff165c
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    10dc:	ldr	r3, [r7, #24]
    10de:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    10e2:	clz	r1, r1
    10e6:	lsrs	r1, r1, #5
    10e8:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    10ea:	uxtb	r0, r0
    10ec:	bl	2514 <digitalWrite>
        m_sequence.toggleGlobalMode();
    10f0:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    10f4:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    10f8:	ldrb.w	sl, [r9]
    10fc:	mov	r0, sl
    10fe:	bl	2520 <digitalRead>
    1102:	clz	r1, r0
    1106:	lsrs	r1, r1, #5
    1108:	mov	r0, sl
    110a:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    110e:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
    1112:	ldr.w	lr, [pc, #1388]	; 1680 <loop+0x11ec>
    1116:	str	r3, [sp, #124]	; 0x7c
	return ret;
    1118:	ldr	r3, [sp, #124]	; 0x7c
    111a:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    111e:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    1122:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1124:	movs	r3, #1
    1126:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
    112a:	str.w	r2, [r9, #20]
    112e:	cmp.w	sl, #0
    1132:	beq.w	15de <loop+0x114a>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    1136:	cmp.w	sl, #1
    113a:	beq.w	1948 <loop+0x14b4>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    113e:	cmp.w	sl, #2
    1142:	beq.w	1b98 <loop+0x1704>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1146:	cmp.w	sl, #3
    114a:	beq.w	1758 <loop+0x12c4>
    114e:	ldr	r2, [r7, #12]
    1150:	b.w	5ae <loop+0x11a>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    1154:	ldr	r3, [r7, #24]
    1156:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    115a:	clz	r1, r1
    115e:	lsrs	r1, r1, #5
    1160:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1162:	uxtb	r0, r0
    1164:	bl	2514 <digitalWrite>
        m_sequence.toggleGlobalMode();
    1168:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    116c:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1170:	ldrb.w	sl, [r9]
    1174:	mov	r0, sl
    1176:	bl	2520 <digitalRead>
    117a:	clz	r1, r0
    117e:	lsrs	r1, r1, #5
    1180:	mov	r0, sl
    1182:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1186:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
    118a:	ldr.w	lr, [pc, #1268]	; 1680 <loop+0x11ec>
    118e:	str	r3, [sp, #104]	; 0x68
	return ret;
    1190:	ldr	r3, [sp, #104]	; 0x68
    1192:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1196:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    119a:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    119c:	movs	r3, #1
    119e:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
    11a2:	str.w	r2, [r9, #20]
    11a6:	cmp.w	sl, #0
    11aa:	beq.w	1506 <loop+0x1072>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    11ae:	cmp.w	sl, #1
    11b2:	beq.w	1870 <loop+0x13dc>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    11b6:	cmp.w	sl, #2
    11ba:	beq.w	1ac0 <loop+0x162c>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    11be:	cmp.w	sl, #3
    11c2:	beq.w	179e <loop+0x130a>
    11c6:	ldr	r2, [r7, #12]
    11c8:	b.w	56c <loop+0xd8>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    11cc:	ldr	r3, [r7, #24]
    11ce:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    11d2:	clz	r1, r1
    11d6:	lsrs	r1, r1, #5
    11d8:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    11da:	uxtb	r0, r0
    11dc:	bl	2514 <digitalWrite>
        m_sequence.toggleGlobalMode();
    11e0:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    11e4:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    11e8:	ldrb.w	sl, [r9]
    11ec:	mov	r0, sl
    11ee:	bl	2520 <digitalRead>
    11f2:	clz	r1, r0
    11f6:	lsrs	r1, r1, #5
    11f8:	mov	r0, sl
    11fa:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11fe:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
    1202:	ldr.w	lr, [pc, #1148]	; 1680 <loop+0x11ec>
    1206:	str	r3, [sp, #84]	; 0x54
	return ret;
    1208:	ldr	r3, [sp, #84]	; 0x54
    120a:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    120e:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    1212:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1214:	movs	r3, #1
    1216:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
    121a:	str.w	r2, [r9, #20]
    121e:	cmp.w	sl, #0
    1222:	beq.w	1596 <loop+0x1102>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    1226:	cmp.w	sl, #1
    122a:	beq.w	1900 <loop+0x146c>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    122e:	cmp.w	sl, #2
    1232:	beq.w	1b08 <loop+0x1674>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1236:	cmp.w	sl, #3
    123a:	beq.w	17e4 <loop+0x1350>
    123e:	ldr	r2, [r7, #12]
    1240:	b.w	52a <loop+0x96>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    1244:	ldr	r3, [r7, #24]
    1246:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    124a:	clz	r1, r1
    124e:	lsrs	r1, r1, #5
    1250:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1252:	uxtb	r0, r0
    1254:	bl	2514 <digitalWrite>
        m_sequence.toggleGlobalMode();
    1258:	ldr.w	fp, [r7, #28]
      m_currentStep = 0;
      m_mode = GLOBAL;
    };

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
    125c:	ldr.w	r9, [fp, #104]	; 0x68
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1260:	ldrb.w	sl, [r9]
    1264:	mov	r0, sl
    1266:	bl	2520 <digitalRead>
    126a:	clz	r1, r0
    126e:	lsrs	r1, r1, #5
    1270:	mov	r0, sl
    1272:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1276:	ldr.w	r3, [r8]
      
      if (currentMode == GLOBAL) {
    127a:	ldr.w	lr, [pc, #1028]	; 1680 <loop+0x11ec>
    127e:	str	r3, [sp, #64]	; 0x40
	return ret;
    1280:	ldr	r3, [sp, #64]	; 0x40
    1282:	ldrb.w	sl, [lr]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1286:	str.w	r3, [r9, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    128a:	movs	r2, #3
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    128c:	movs	r3, #1
    128e:	strb.w	r3, [r9, #16]
      blinkingCounter = times;
    1292:	str.w	r2, [r9, #20]
    1296:	cmp.w	sl, #0
    129a:	beq.w	1626 <loop+0x1192>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    129e:	cmp.w	sl, #1
    12a2:	beq.w	19a0 <loop+0x150c>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    12a6:	cmp.w	sl, #2
    12aa:	beq.w	1a78 <loop+0x15e4>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    12ae:	cmp.w	sl, #3
    12b2:	beq.w	16cc <loop+0x1238>
    12b6:	ldr	r2, [r7, #12]
    12b8:	b.w	4e8 <loop+0x54>
      notesLengths[id] = newValue;
    };

    void controlPitch (int value, int id) {
      int newValue = map(value, 0, 1023, 51, 38);
      notes[id] = newValue;
    12bc:	sub.w	r3, r0, r0, lsl #2
    12c0:	ldr	r2, [r4, #12]
    12c2:	ldr	r1, [r4, #16]
    12c4:	lsls	r3, r3, #2
    12c6:	it	mi
    12c8:	addwmi	r3, r3, #1023	; 0x3ff
    12cc:	adds	r2, #10
    12ce:	asrs	r3, r3, #10
    12d0:	adds	r3, #51	; 0x33
    12d2:	str.w	r3, [r1, r2, lsl #2]
    12d6:	b.w	7fe <loop+0x36a>
    12da:	sub.w	r3, r0, r0, lsl #2
    12de:	ldr	r2, [r4, #12]
    12e0:	ldr	r1, [r4, #16]
    12e2:	lsls	r3, r3, #2
    12e4:	it	mi
    12e6:	addwmi	r3, r3, #1023	; 0x3ff
    12ea:	adds	r2, #10
    12ec:	asrs	r3, r3, #10
    12ee:	adds	r3, #51	; 0x33
    12f0:	str.w	r3, [r1, r2, lsl #2]
    12f4:	b.w	8d6 <loop+0x442>
    12f8:	sub.w	r3, r0, r0, lsl #2
    12fc:	ldr	r2, [r4, #12]
    12fe:	ldr	r1, [r4, #16]
    1300:	lsls	r3, r3, #2
    1302:	it	mi
    1304:	addwmi	r3, r3, #1023	; 0x3ff
    1308:	adds	r2, #10
    130a:	asrs	r3, r3, #10
    130c:	adds	r3, #51	; 0x33
    130e:	str.w	r3, [r1, r2, lsl #2]
    1312:	b.w	86a <loop+0x3d6>
    1316:	sub.w	r3, r0, r0, lsl #2
    131a:	ldr	r2, [r4, #12]
    131c:	ldr	r1, [r4, #16]
    131e:	lsls	r3, r3, #2
    1320:	it	mi
    1322:	addwmi	r3, r3, #1023	; 0x3ff
    1326:	adds	r2, #10
    1328:	asrs	r3, r3, #10
    132a:	adds	r3, #51	; 0x33
    132c:	str.w	r3, [r1, r2, lsl #2]
    1330:	b.w	746 <loop+0x2b2>
    1334:	sub.w	r3, r0, r0, lsl #2
    1338:	ldr	r2, [r4, #12]
    133a:	ldr	r1, [r4, #16]
    133c:	lsls	r3, r3, #2
    133e:	it	mi
    1340:	addwmi	r3, r3, #1023	; 0x3ff
    1344:	adds	r2, #10
    1346:	asrs	r3, r3, #10
    1348:	adds	r3, #51	; 0x33
    134a:	str.w	r3, [r1, r2, lsl #2]
    134e:	b.w	6da <loop+0x246>
      } else if (m_state == LOW && m_playButton) {
        m_led.toggle();
    1352:	ldr	r3, [r7, #24]
    1354:	ldmia.w	r3, {r0, r1}
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1358:	clz	r1, r1
    135c:	lsrs	r1, r1, #5
    135e:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1360:	uxtb	r0, r0
    1362:	bl	2514 <digitalWrite>
    1366:	movs	r1, #4
    1368:	ldr	r0, [pc, #772]	; (1670 <loop+0x11dc>)
    136a:	bl	1f04 <usb_serial_write>
    136e:	ldr	r0, [pc, #772]	; (1674 <loop+0x11e0>)
    1370:	bl	3a78 <Print::println()>
    1374:	movs	r1, #4
    1376:	ldr	r0, [pc, #760]	; (1670 <loop+0x11dc>)
    1378:	bl	1f04 <usb_serial_write>
    137c:	ldr	r0, [pc, #756]	; (1674 <loop+0x11e0>)
    137e:	bl	3a78 <Print::println()>
    1382:	b.n	123e <loop+0xdaa>
    1384:	ldr	r3, [r7, #24]
    1386:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    138a:	clz	r1, r1
    138e:	lsrs	r1, r1, #5
    1390:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1392:	uxtb	r0, r0
    1394:	bl	2514 <digitalWrite>
    1398:	movs	r1, #4
    139a:	ldr	r0, [pc, #724]	; (1670 <loop+0x11dc>)
    139c:	bl	1f04 <usb_serial_write>
    13a0:	ldr	r0, [pc, #720]	; (1674 <loop+0x11e0>)
    13a2:	bl	3a78 <Print::println()>
    13a6:	movs	r1, #4
    13a8:	ldr	r0, [pc, #708]	; (1670 <loop+0x11dc>)
    13aa:	bl	1f04 <usb_serial_write>
    13ae:	ldr	r0, [pc, #708]	; (1674 <loop+0x11e0>)
    13b0:	bl	3a78 <Print::println()>
    13b4:	b.n	12b6 <loop+0xe22>
    13b6:	ldr	r3, [r7, #24]
    13b8:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    13bc:	clz	r1, r1
    13c0:	lsrs	r1, r1, #5
    13c2:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    13c4:	uxtb	r0, r0
    13c6:	bl	2514 <digitalWrite>
    13ca:	movs	r1, #4
    13cc:	ldr	r0, [pc, #672]	; (1670 <loop+0x11dc>)
    13ce:	bl	1f04 <usb_serial_write>
    13d2:	ldr	r0, [pc, #672]	; (1674 <loop+0x11e0>)
    13d4:	bl	3a78 <Print::println()>
    13d8:	movs	r1, #4
    13da:	ldr	r0, [pc, #660]	; (1670 <loop+0x11dc>)
    13dc:	bl	1f04 <usb_serial_write>
    13e0:	ldr	r0, [pc, #656]	; (1674 <loop+0x11e0>)
    13e2:	bl	3a78 <Print::println()>
    13e6:	b.n	1050 <loop+0xbbc>
    13e8:	ldr	r3, [r7, #24]
    13ea:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    13ee:	clz	r1, r1
    13f2:	lsrs	r1, r1, #5
    13f4:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    13f6:	uxtb	r0, r0
    13f8:	bl	2514 <digitalWrite>
    13fc:	movs	r1, #4
    13fe:	ldr	r0, [pc, #624]	; (1670 <loop+0x11dc>)
    1400:	bl	1f04 <usb_serial_write>
    1404:	ldr	r0, [pc, #620]	; (1674 <loop+0x11e0>)
    1406:	bl	3a78 <Print::println()>
    140a:	movs	r1, #4
    140c:	ldr	r0, [pc, #608]	; (1670 <loop+0x11dc>)
    140e:	bl	1f04 <usb_serial_write>
    1412:	ldr	r0, [pc, #608]	; (1674 <loop+0x11e0>)
    1414:	bl	3a78 <Print::println()>
    1418:	b.n	10c8 <loop+0xc34>
    141a:	ldr	r3, [r7, #24]
    141c:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1420:	clz	r1, r1
    1424:	lsrs	r1, r1, #5
    1426:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1428:	uxtb	r0, r0
    142a:	bl	2514 <digitalWrite>
    142e:	movs	r1, #4
    1430:	ldr	r0, [pc, #572]	; (1670 <loop+0x11dc>)
    1432:	bl	1f04 <usb_serial_write>
    1436:	ldr	r0, [pc, #572]	; (1674 <loop+0x11e0>)
    1438:	bl	3a78 <Print::println()>
    143c:	movs	r1, #4
    143e:	ldr	r0, [pc, #560]	; (1670 <loop+0x11dc>)
    1440:	bl	1f04 <usb_serial_write>
    1444:	ldr	r0, [pc, #556]	; (1674 <loop+0x11e0>)
    1446:	bl	3a78 <Print::println()>
    144a:	b.n	114e <loop+0xcba>
    144c:	ldr	r3, [r7, #24]
    144e:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1452:	clz	r1, r1
    1456:	lsrs	r1, r1, #5
    1458:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    145a:	uxtb	r0, r0
    145c:	bl	2514 <digitalWrite>
    1460:	movs	r1, #4
    1462:	ldr	r0, [pc, #524]	; (1670 <loop+0x11dc>)
    1464:	bl	1f04 <usb_serial_write>
    1468:	ldr	r0, [pc, #520]	; (1674 <loop+0x11e0>)
    146a:	bl	3a78 <Print::println()>
    146e:	movs	r1, #4
    1470:	ldr	r0, [pc, #508]	; (1670 <loop+0x11dc>)
    1472:	bl	1f04 <usb_serial_write>
    1476:	ldr	r0, [pc, #508]	; (1674 <loop+0x11e0>)
    1478:	bl	3a78 <Print::println()>
    147c:	b.n	11c6 <loop+0xd32>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    147e:	ldr	r0, [pc, #504]	; (1678 <loop+0x11e4>)
    1480:	bl	27a0 <usb_midi_write_packed>
    1484:	ldr	r3, [r5, #28]
    1486:	b.n	d7c <loop+0x8e8>
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
    1488:	add.w	r6, r3, #10
    148c:	adds	r3, #14
    148e:	ldr.w	r2, [r5, r6, lsl #2]
    1492:	ldr.w	r3, [r5, r3, lsl #2]
    1496:	lsls	r2, r2, #16
    1498:	lsls	r0, r3, #24
    149a:	and.w	r3, r0, #2130706432	; 0x7f000000
    149e:	and.w	r0, r2, #8323072	; 0x7f0000
    14a2:	orrs	r0, r3
    14a4:	orr.w	r0, r0, #40704	; 0x9f00
    14a8:	orr.w	r0, r0, #9
    14ac:	bl	27a0 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    14b0:	bl	283c <usb_midi_flush_output>
      activeNote = notes[step];
    14b4:	ldr.w	r2, [r5, r6, lsl #2]
    14b8:	ldr	r3, [r5, #8]
    14ba:	str	r2, [r5, #36]	; 0x24
    14bc:	b.n	df2 <loop+0x95e>
    14be:	movs	r1, #5
    14c0:	ldr	r0, [pc, #440]	; (167c <loop+0x11e8>)
    14c2:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    14c4:	strb.w	r3, [lr]
    14c8:	str	r3, [sp, #0]
    14ca:	bl	1f04 <usb_serial_write>
    14ce:	ldr	r0, [pc, #420]	; (1674 <loop+0x11e0>)
    14d0:	bl	3a78 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    14d4:	ldr.w	r5, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14d8:	ldrb.w	r9, [r5]
    14dc:	mov	r0, r9
    14de:	bl	2520 <digitalRead>
    14e2:	clz	r1, r0
    14e6:	lsrs	r1, r1, #5
    14e8:	mov	r0, r9
    14ea:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14ee:	ldr.w	r1, [r8]
    14f2:	str	r1, [sp, #148]	; 0x94
      blinking = true;
      blinkingCounter = times;
    14f4:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    14f6:	ldr	r3, [sp, #0]
	return ret;
    14f8:	ldr	r1, [sp, #148]	; 0x94
      blinkingCounter = times;
    14fa:	str	r2, [r5, #20]
    14fc:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    14fe:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1500:	str	r1, [r5, #8]
    1502:	b.w	5f0 <loop+0x15c>
    1506:	movs	r1, #5
    1508:	ldr	r0, [pc, #368]	; (167c <loop+0x11e8>)
    150a:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    150c:	strb.w	r3, [lr]
    1510:	str	r3, [sp, #0]
    1512:	bl	1f04 <usb_serial_write>
    1516:	ldr	r0, [pc, #348]	; (1674 <loop+0x11e0>)
    1518:	bl	3a78 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    151c:	ldr.w	r5, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1520:	ldrb.w	r9, [r5]
    1524:	mov	r0, r9
    1526:	bl	2520 <digitalRead>
    152a:	clz	r1, r0
    152e:	lsrs	r1, r1, #5
    1530:	mov	r0, r9
    1532:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1536:	ldr.w	r1, [r8]
    153a:	str	r1, [sp, #108]	; 0x6c
      blinking = true;
      blinkingCounter = times;
    153c:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    153e:	ldr	r3, [sp, #0]
	return ret;
    1540:	ldr	r1, [sp, #108]	; 0x6c
      blinkingCounter = times;
    1542:	str	r2, [r5, #20]
    1544:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1546:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1548:	str	r1, [r5, #8]
    154a:	b.w	56c <loop+0xd8>
    154e:	movs	r1, #5
    1550:	ldr	r0, [pc, #296]	; (167c <loop+0x11e8>)
    1552:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    1554:	strb.w	r3, [lr]
    1558:	str	r3, [sp, #0]
    155a:	bl	1f04 <usb_serial_write>
    155e:	ldr	r0, [pc, #276]	; (1674 <loop+0x11e0>)
    1560:	bl	3a78 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    1564:	ldr.w	r6, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1568:	ldrb.w	r9, [r6]
    156c:	mov	r0, r9
    156e:	bl	2520 <digitalRead>
    1572:	clz	r1, r0
    1576:	lsrs	r1, r1, #5
    1578:	mov	r0, r9
    157a:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    157e:	ldr.w	r1, [r8]
    1582:	str	r1, [sp, #168]	; 0xa8
      blinking = true;
      blinkingCounter = times;
    1584:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1586:	ldr	r3, [sp, #0]
	return ret;
    1588:	ldr	r1, [sp, #168]	; 0xa8
      blinkingCounter = times;
    158a:	str	r2, [r6, #20]
    158c:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    158e:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1590:	str	r1, [r6, #8]
    1592:	b.w	632 <loop+0x19e>
    1596:	movs	r1, #5
    1598:	ldr	r0, [pc, #224]	; (167c <loop+0x11e8>)
    159a:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    159c:	strb.w	r3, [lr]
    15a0:	str	r3, [sp, #0]
    15a2:	bl	1f04 <usb_serial_write>
    15a6:	ldr	r0, [pc, #204]	; (1674 <loop+0x11e0>)
    15a8:	bl	3a78 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    15ac:	ldr.w	r6, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    15b0:	ldrb.w	r9, [r6]
    15b4:	mov	r0, r9
    15b6:	bl	2520 <digitalRead>
    15ba:	clz	r1, r0
    15be:	lsrs	r1, r1, #5
    15c0:	mov	r0, r9
    15c2:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15c6:	ldr.w	r1, [r8]
    15ca:	str	r1, [sp, #88]	; 0x58
      blinking = true;
      blinkingCounter = times;
    15cc:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    15ce:	ldr	r3, [sp, #0]
	return ret;
    15d0:	ldr	r1, [sp, #88]	; 0x58
      blinkingCounter = times;
    15d2:	str	r2, [r6, #20]
    15d4:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    15d6:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    15d8:	str	r1, [r6, #8]
    15da:	b.w	52a <loop+0x96>
    15de:	movs	r1, #5
    15e0:	ldr	r0, [pc, #152]	; (167c <loop+0x11e8>)
    15e2:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    15e4:	strb.w	r3, [lr]
    15e8:	str	r3, [sp, #0]
    15ea:	bl	1f04 <usb_serial_write>
    15ee:	ldr	r0, [pc, #132]	; (1674 <loop+0x11e0>)
    15f0:	bl	3a78 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    15f4:	ldr.w	r6, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    15f8:	ldrb.w	r9, [r6]
    15fc:	mov	r0, r9
    15fe:	bl	2520 <digitalRead>
    1602:	clz	r1, r0
    1606:	lsrs	r1, r1, #5
    1608:	mov	r0, r9
    160a:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    160e:	ldr.w	r1, [r8]
    1612:	str	r1, [sp, #128]	; 0x80
      blinking = true;
      blinkingCounter = times;
    1614:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1616:	ldr	r3, [sp, #0]
	return ret;
    1618:	ldr	r1, [sp, #128]	; 0x80
      blinkingCounter = times;
    161a:	str	r2, [r6, #20]
    161c:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    161e:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1620:	str	r1, [r6, #8]
    1622:	b.w	5ae <loop+0x11a>
    1626:	movs	r1, #5
    1628:	ldr	r0, [pc, #80]	; (167c <loop+0x11e8>)
    162a:	str	r2, [sp, #4]

    void toggleGlobalMode () {
      m_leds[4]->blink(3);
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    162c:	strb.w	r3, [lr]
    1630:	str	r3, [sp, #0]
    1632:	bl	1f04 <usb_serial_write>
    1636:	ldr	r0, [pc, #60]	; (1674 <loop+0x11e0>)
    1638:	bl	3a78 <Print::println()>
        Serial.println("PITCH");
        m_leds[0]->blink(3);
    163c:	ldr.w	r5, [fp, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1640:	ldrb.w	r9, [r5]
    1644:	mov	r0, r9
    1646:	bl	2520 <digitalRead>
    164a:	clz	r1, r0
    164e:	lsrs	r1, r1, #5
    1650:	mov	r0, r9
    1652:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1656:	ldr.w	r1, [r8]
    165a:	str	r1, [sp, #68]	; 0x44
      blinking = true;
      blinkingCounter = times;
    165c:	ldr	r2, [sp, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    165e:	ldr	r3, [sp, #0]
	return ret;
    1660:	ldr	r1, [sp, #68]	; 0x44
      blinkingCounter = times;
    1662:	str	r2, [r5, #20]
    1664:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1666:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1668:	str	r1, [r5, #8]
    166a:	b.w	4e8 <loop+0x54>
    166e:	nop
    1670:	.word	0x00004e94
    1674:	.word	0x1fff0c60
    1678:	.word	0x7f7bbf0b
    167c:	.word	0x00004e6c
    1680:	.word	0x1fff165c
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
    1684:	ldr	r3, [r6, #8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1686:	ldr	r4, [pc, #776]	; (1990 <loop+0x14fc>)
    1688:	adds	r3, #22
    168a:	ldr.w	r7, [r6, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    168e:	ldrb.w	r8, [r7]
    1692:	mov	r0, r8
    1694:	bl	2520 <digitalRead>
    1698:	clz	r1, r0
    169c:	lsrs	r1, r1, #5
    169e:	mov	r0, r8
    16a0:	bl	2514 <digitalWrite>
    16a4:	ldr	r2, [r4, #0]

        if (m_steps[m_currentStep].m_state) {
    16a6:	ldr	r3, [r6, #8]
    16a8:	str	r2, [sp, #8]
	return ret;
    16aa:	ldr	r1, [sp, #8]
    16ac:	ldrb	r2, [r6, r3]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    16ae:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    16b0:	movs	r0, #1
      blinkingCounter = times;
    16b2:	movs	r1, #0
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    16b4:	strb	r0, [r7, #16]
      blinkingCounter = times;
    16b6:	str	r1, [r7, #20]
    16b8:	cmp	r2, #0
    16ba:	bne.w	1be0 <loop+0x174c>
          playStep(m_currentStep);
        }

        m_currentStep++;
    16be:	adds	r3, #1

        if (m_currentStep > 3) {
    16c0:	cmp	r3, #3
          m_currentStep = 0;
    16c2:	it	gt
    16c4:	movgt	r3, #0
    16c6:	str	r3, [r5, #8]
    16c8:	b.w	d90 <loop+0x8fc>
    16cc:	movs	r1, #6
    16ce:	ldr	r0, [pc, #708]	; (1994 <loop+0x1500>)
    16d0:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    16d2:	strb.w	r5, [lr]
    16d6:	bl	1f04 <usb_serial_write>
    16da:	ldr	r0, [pc, #700]	; (1998 <loop+0x1504>)
    16dc:	bl	3a78 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    16e0:	ldr.w	r5, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    16e4:	ldrb.w	r9, [r5]
    16e8:	mov	r0, r9
    16ea:	bl	2520 <digitalRead>
    16ee:	clz	r1, r0
    16f2:	lsrs	r1, r1, #5
    16f4:	mov	r0, r9
    16f6:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16fa:	ldr.w	r2, [r8]
    16fe:	str	r2, [sp, #80]	; 0x50
      blinking = true;
    1700:	ldr	r3, [sp, #0]
	return ret;
    1702:	ldr	r1, [sp, #80]	; 0x50
    1704:	ldr	r2, [r7, #12]
    1706:	strb	r3, [r5, #16]
      blinkingCounter = times;
    1708:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    170c:	str	r1, [r5, #8]
    170e:	b.w	4e8 <loop+0x54>
    1712:	movs	r1, #6
    1714:	ldr	r0, [pc, #636]	; (1994 <loop+0x1500>)
    1716:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    1718:	strb.w	r5, [lr]
    171c:	bl	1f04 <usb_serial_write>
    1720:	ldr	r0, [pc, #628]	; (1998 <loop+0x1504>)
    1722:	bl	3a78 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    1726:	ldr.w	r5, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    172a:	ldrb.w	r9, [r5]
    172e:	mov	r0, r9
    1730:	bl	2520 <digitalRead>
    1734:	clz	r1, r0
    1738:	lsrs	r1, r1, #5
    173a:	mov	r0, r9
    173c:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1740:	ldr.w	r2, [r8]
    1744:	str	r2, [sp, #160]	; 0xa0
      blinking = true;
    1746:	ldr	r3, [sp, #0]
	return ret;
    1748:	ldr	r1, [sp, #160]	; 0xa0
    174a:	ldr	r2, [r7, #12]
    174c:	strb	r3, [r5, #16]
      blinkingCounter = times;
    174e:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    1752:	str	r1, [r5, #8]
    1754:	b.w	5f0 <loop+0x15c>
    1758:	movs	r1, #6
    175a:	ldr	r0, [pc, #568]	; (1994 <loop+0x1500>)
    175c:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    175e:	strb.w	r6, [lr]
    1762:	bl	1f04 <usb_serial_write>
    1766:	ldr	r0, [pc, #560]	; (1998 <loop+0x1504>)
    1768:	bl	3a78 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    176c:	ldr.w	r6, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1770:	ldrb.w	r9, [r6]
    1774:	mov	r0, r9
    1776:	bl	2520 <digitalRead>
    177a:	clz	r1, r0
    177e:	lsrs	r1, r1, #5
    1780:	mov	r0, r9
    1782:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1786:	ldr.w	r2, [r8]
    178a:	str	r2, [sp, #140]	; 0x8c
      blinking = true;
    178c:	ldr	r3, [sp, #0]
	return ret;
    178e:	ldr	r1, [sp, #140]	; 0x8c
    1790:	ldr	r2, [r7, #12]
    1792:	strb	r3, [r6, #16]
      blinkingCounter = times;
    1794:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    1798:	str	r1, [r6, #8]
    179a:	b.w	5ae <loop+0x11a>
    179e:	movs	r1, #6
    17a0:	ldr	r0, [pc, #496]	; (1994 <loop+0x1500>)
    17a2:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    17a4:	strb.w	r5, [lr]
    17a8:	bl	1f04 <usb_serial_write>
    17ac:	ldr	r0, [pc, #488]	; (1998 <loop+0x1504>)
    17ae:	bl	3a78 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    17b2:	ldr.w	r5, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    17b6:	ldrb.w	r9, [r5]
    17ba:	mov	r0, r9
    17bc:	bl	2520 <digitalRead>
    17c0:	clz	r1, r0
    17c4:	lsrs	r1, r1, #5
    17c6:	mov	r0, r9
    17c8:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17cc:	ldr.w	r2, [r8]
    17d0:	str	r2, [sp, #120]	; 0x78
      blinking = true;
    17d2:	ldr	r3, [sp, #0]
	return ret;
    17d4:	ldr	r1, [sp, #120]	; 0x78
    17d6:	ldr	r2, [r7, #12]
    17d8:	strb	r3, [r5, #16]
      blinkingCounter = times;
    17da:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    17de:	str	r1, [r5, #8]
    17e0:	b.w	56c <loop+0xd8>
    17e4:	movs	r1, #6
    17e6:	ldr	r0, [pc, #428]	; (1994 <loop+0x1500>)
    17e8:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    17ea:	strb.w	r6, [lr]
    17ee:	bl	1f04 <usb_serial_write>
    17f2:	ldr	r0, [pc, #420]	; (1998 <loop+0x1504>)
    17f4:	bl	3a78 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    17f8:	ldr.w	r6, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    17fc:	ldrb.w	r9, [r6]
    1800:	mov	r0, r9
    1802:	bl	2520 <digitalRead>
    1806:	clz	r1, r0
    180a:	lsrs	r1, r1, #5
    180c:	mov	r0, r9
    180e:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1812:	ldr.w	r2, [r8]
    1816:	str	r2, [sp, #100]	; 0x64
      blinking = true;
    1818:	ldr	r3, [sp, #0]
	return ret;
    181a:	ldr	r1, [sp, #100]	; 0x64
    181c:	ldr	r2, [r7, #12]
    181e:	strb	r3, [r6, #16]
      blinkingCounter = times;
    1820:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    1824:	str	r1, [r6, #8]
    1826:	b.w	52a <loop+0x96>
    182a:	movs	r1, #6
    182c:	ldr	r0, [pc, #356]	; (1994 <loop+0x1500>)
    182e:	str	r3, [sp, #0]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    1830:	strb.w	r6, [lr]
    1834:	bl	1f04 <usb_serial_write>
    1838:	ldr	r0, [pc, #348]	; (1998 <loop+0x1504>)
    183a:	bl	3a78 <Print::println()>
        Serial.println("GLOBAL");
        m_leds[3]->blink(3);
    183e:	ldr.w	r6, [fp, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1842:	ldrb.w	r9, [r6]
    1846:	mov	r0, r9
    1848:	bl	2520 <digitalRead>
    184c:	clz	r1, r0
    1850:	lsrs	r1, r1, #5
    1852:	mov	r0, r9
    1854:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1858:	ldr.w	r2, [r8]
    185c:	str	r2, [sp, #180]	; 0xb4
      blinking = true;
    185e:	ldr	r3, [sp, #0]
	return ret;
    1860:	ldr	r1, [sp, #180]	; 0xb4
    1862:	ldr	r2, [r7, #12]
    1864:	strb	r3, [r6, #16]
      blinkingCounter = times;
    1866:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    186a:	str	r1, [r6, #8]
    186c:	b.w	632 <loop+0x19e>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1870:	movs	r3, #2
    1872:	movs	r1, #8
    1874:	ldr	r0, [pc, #292]	; (199c <loop+0x1508>)
    1876:	str	r2, [sp, #0]
    1878:	strb.w	r3, [lr]
    187c:	bl	1f04 <usb_serial_write>
    1880:	ldr	r0, [pc, #276]	; (1998 <loop+0x1504>)
    1882:	bl	3a78 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    1886:	ldr.w	r5, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    188a:	ldrb.w	r9, [r5]
    188e:	mov	r0, r9
    1890:	bl	2520 <digitalRead>
    1894:	clz	r1, r0
    1898:	lsrs	r1, r1, #5
    189a:	mov	r0, r9
    189c:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18a0:	ldr.w	r3, [r8]
    18a4:	str	r3, [sp, #112]	; 0x70
      blinking = true;
      blinkingCounter = times;
    18a6:	ldr	r2, [sp, #0]
	return ret;
    18a8:	ldr	r3, [sp, #112]	; 0x70
    18aa:	str	r2, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    18ac:	strb.w	sl, [r5, #16]
    18b0:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    18b2:	str	r3, [r5, #8]
    18b4:	b.w	56c <loop+0xd8>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    18b8:	movs	r3, #2
    18ba:	movs	r1, #8
    18bc:	ldr	r0, [pc, #220]	; (199c <loop+0x1508>)
    18be:	str	r2, [sp, #0]
    18c0:	strb.w	r3, [lr]
    18c4:	bl	1f04 <usb_serial_write>
    18c8:	ldr	r0, [pc, #204]	; (1998 <loop+0x1504>)
    18ca:	bl	3a78 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    18ce:	ldr.w	r6, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    18d2:	ldrb.w	r9, [r6]
    18d6:	mov	r0, r9
    18d8:	bl	2520 <digitalRead>
    18dc:	clz	r1, r0
    18e0:	lsrs	r1, r1, #5
    18e2:	mov	r0, r9
    18e4:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18e8:	ldr.w	r3, [r8]
    18ec:	str	r3, [sp, #172]	; 0xac
      blinking = true;
      blinkingCounter = times;
    18ee:	ldr	r2, [sp, #0]
	return ret;
    18f0:	ldr	r3, [sp, #172]	; 0xac
    18f2:	str	r2, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    18f4:	strb.w	sl, [r6, #16]
    18f8:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    18fa:	str	r3, [r6, #8]
    18fc:	b.w	632 <loop+0x19e>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1900:	movs	r3, #2
    1902:	movs	r1, #8
    1904:	ldr	r0, [pc, #148]	; (199c <loop+0x1508>)
    1906:	str	r2, [sp, #0]
    1908:	strb.w	r3, [lr]
    190c:	bl	1f04 <usb_serial_write>
    1910:	ldr	r0, [pc, #132]	; (1998 <loop+0x1504>)
    1912:	bl	3a78 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    1916:	ldr.w	r6, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    191a:	ldrb.w	r9, [r6]
    191e:	mov	r0, r9
    1920:	bl	2520 <digitalRead>
    1924:	clz	r1, r0
    1928:	lsrs	r1, r1, #5
    192a:	mov	r0, r9
    192c:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1930:	ldr.w	r3, [r8]
    1934:	str	r3, [sp, #92]	; 0x5c
      blinking = true;
      blinkingCounter = times;
    1936:	ldr	r2, [sp, #0]
	return ret;
    1938:	ldr	r3, [sp, #92]	; 0x5c
    193a:	str	r2, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    193c:	strb.w	sl, [r6, #16]
    1940:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    1942:	str	r3, [r6, #8]
    1944:	b.w	52a <loop+0x96>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1948:	movs	r3, #2
    194a:	movs	r1, #8
    194c:	ldr	r0, [pc, #76]	; (199c <loop+0x1508>)
    194e:	str	r2, [sp, #0]
    1950:	strb.w	r3, [lr]
    1954:	bl	1f04 <usb_serial_write>
    1958:	ldr	r0, [pc, #60]	; (1998 <loop+0x1504>)
    195a:	bl	3a78 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    195e:	ldr.w	r6, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1962:	ldrb.w	r9, [r6]
    1966:	mov	r0, r9
    1968:	bl	2520 <digitalRead>
    196c:	clz	r1, r0
    1970:	lsrs	r1, r1, #5
    1972:	mov	r0, r9
    1974:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1978:	ldr.w	r3, [r8]
    197c:	str	r3, [sp, #132]	; 0x84
      blinking = true;
      blinkingCounter = times;
    197e:	ldr	r2, [sp, #0]
	return ret;
    1980:	ldr	r3, [sp, #132]	; 0x84
    1982:	str	r2, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1984:	strb.w	sl, [r6, #16]
    1988:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    198a:	str	r3, [r6, #8]
    198c:	b.w	5ae <loop+0x11a>
    1990:	.word	0x1fff1844
    1994:	.word	0x00004e8c
    1998:	.word	0x1fff0c60
    199c:	.word	0x00004e74
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    19a0:	movs	r3, #2
    19a2:	movs	r1, #8
    19a4:	ldr	r0, [pc, #624]	; (1c18 <loop+0x1784>)
    19a6:	str	r2, [sp, #0]
    19a8:	strb.w	r3, [lr]
    19ac:	bl	1f04 <usb_serial_write>
    19b0:	ldr	r0, [pc, #616]	; (1c1c <loop+0x1788>)
    19b2:	bl	3a78 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    19b6:	ldr.w	r5, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    19ba:	ldrb.w	r9, [r5]
    19be:	mov	r0, r9
    19c0:	bl	2520 <digitalRead>
    19c4:	clz	r1, r0
    19c8:	lsrs	r1, r1, #5
    19ca:	mov	r0, r9
    19cc:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19d0:	ldr.w	r3, [r8]
    19d4:	str	r3, [sp, #72]	; 0x48
      blinking = true;
      blinkingCounter = times;
    19d6:	ldr	r2, [sp, #0]
	return ret;
    19d8:	ldr	r3, [sp, #72]	; 0x48
    19da:	str	r2, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    19dc:	strb.w	sl, [r5, #16]
    19e0:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    19e2:	str	r3, [r5, #8]
    19e4:	b.w	4e8 <loop+0x54>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    19e8:	movs	r3, #2
    19ea:	movs	r1, #8
    19ec:	ldr	r0, [pc, #552]	; (1c18 <loop+0x1784>)
    19ee:	str	r2, [sp, #0]
    19f0:	strb.w	r3, [lr]
    19f4:	bl	1f04 <usb_serial_write>
    19f8:	ldr	r0, [pc, #544]	; (1c1c <loop+0x1788>)
    19fa:	bl	3a78 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
    19fe:	ldr.w	r5, [fp, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1a02:	ldrb.w	r9, [r5]
    1a06:	mov	r0, r9
    1a08:	bl	2520 <digitalRead>
    1a0c:	clz	r1, r0
    1a10:	lsrs	r1, r1, #5
    1a12:	mov	r0, r9
    1a14:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a18:	ldr.w	r3, [r8]
    1a1c:	str	r3, [sp, #152]	; 0x98
      blinking = true;
      blinkingCounter = times;
    1a1e:	ldr	r2, [sp, #0]
	return ret;
    1a20:	ldr	r3, [sp, #152]	; 0x98
    1a22:	str	r2, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1a24:	strb.w	sl, [r5, #16]
    1a28:	ldr	r2, [r7, #12]
      blinkingCounter = times;
      lastBlink = millis();  
    1a2a:	str	r3, [r5, #8]
    1a2c:	b.w	5f0 <loop+0x15c>
    1a30:	movs	r1, #10
    1a32:	ldr	r0, [pc, #492]	; (1c20 <loop+0x178c>)
    1a34:	str	r3, [sp, #4]
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1a36:	strb.w	r2, [lr]
    1a3a:	str	r2, [sp, #0]
    1a3c:	bl	1f04 <usb_serial_write>
    1a40:	ldr	r0, [pc, #472]	; (1c1c <loop+0x1788>)
    1a42:	bl	3a78 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1a46:	ldr.w	r6, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1a4a:	ldrb.w	r9, [r6]
    1a4e:	mov	r0, r9
    1a50:	bl	2520 <digitalRead>
    1a54:	clz	r1, r0
    1a58:	lsrs	r1, r1, #5
    1a5a:	mov	r0, r9
    1a5c:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a60:	ldr.w	r1, [r8]
    1a64:	str	r1, [sp, #176]	; 0xb0
      blinking = true;
      blinkingCounter = times;
    1a66:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1a68:	ldr	r3, [sp, #4]
	return ret;
    1a6a:	ldr	r1, [sp, #176]	; 0xb0
      blinkingCounter = times;
    1a6c:	str	r2, [r6, #20]
    1a6e:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1a70:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1a72:	str	r1, [r6, #8]
    1a74:	b.w	632 <loop+0x19e>
    1a78:	movs	r1, #10
    1a7a:	ldr	r0, [pc, #420]	; (1c20 <loop+0x178c>)
    1a7c:	str	r3, [sp, #4]
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1a7e:	strb.w	r2, [lr]
    1a82:	str	r2, [sp, #0]
    1a84:	bl	1f04 <usb_serial_write>
    1a88:	ldr	r0, [pc, #400]	; (1c1c <loop+0x1788>)
    1a8a:	bl	3a78 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1a8e:	ldr.w	r5, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1a92:	ldrb.w	r9, [r5]
    1a96:	mov	r0, r9
    1a98:	bl	2520 <digitalRead>
    1a9c:	clz	r1, r0
    1aa0:	lsrs	r1, r1, #5
    1aa2:	mov	r0, r9
    1aa4:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1aa8:	ldr.w	r1, [r8]
    1aac:	str	r1, [sp, #76]	; 0x4c
      blinking = true;
      blinkingCounter = times;
    1aae:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1ab0:	ldr	r3, [sp, #4]
	return ret;
    1ab2:	ldr	r1, [sp, #76]	; 0x4c
      blinkingCounter = times;
    1ab4:	str	r2, [r5, #20]
    1ab6:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1ab8:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1aba:	str	r1, [r5, #8]
    1abc:	b.w	4e8 <loop+0x54>
    1ac0:	movs	r1, #10
    1ac2:	ldr	r0, [pc, #348]	; (1c20 <loop+0x178c>)
    1ac4:	str	r3, [sp, #4]
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1ac6:	strb.w	r2, [lr]
    1aca:	str	r2, [sp, #0]
    1acc:	bl	1f04 <usb_serial_write>
    1ad0:	ldr	r0, [pc, #328]	; (1c1c <loop+0x1788>)
    1ad2:	bl	3a78 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1ad6:	ldr.w	r5, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1ada:	ldrb.w	r9, [r5]
    1ade:	mov	r0, r9
    1ae0:	bl	2520 <digitalRead>
    1ae4:	clz	r1, r0
    1ae8:	lsrs	r1, r1, #5
    1aea:	mov	r0, r9
    1aec:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1af0:	ldr.w	r1, [r8]
    1af4:	str	r1, [sp, #116]	; 0x74
      blinking = true;
      blinkingCounter = times;
    1af6:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1af8:	ldr	r3, [sp, #4]
	return ret;
    1afa:	ldr	r1, [sp, #116]	; 0x74
      blinkingCounter = times;
    1afc:	str	r2, [r5, #20]
    1afe:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1b00:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1b02:	str	r1, [r5, #8]
    1b04:	b.w	56c <loop+0xd8>
    1b08:	movs	r1, #10
    1b0a:	ldr	r0, [pc, #276]	; (1c20 <loop+0x178c>)
    1b0c:	str	r3, [sp, #4]
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1b0e:	strb.w	r2, [lr]
    1b12:	str	r2, [sp, #0]
    1b14:	bl	1f04 <usb_serial_write>
    1b18:	ldr	r0, [pc, #256]	; (1c1c <loop+0x1788>)
    1b1a:	bl	3a78 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1b1e:	ldr.w	r6, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1b22:	ldrb.w	r9, [r6]
    1b26:	mov	r0, r9
    1b28:	bl	2520 <digitalRead>
    1b2c:	clz	r1, r0
    1b30:	lsrs	r1, r1, #5
    1b32:	mov	r0, r9
    1b34:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b38:	ldr.w	r1, [r8]
    1b3c:	str	r1, [sp, #96]	; 0x60
      blinking = true;
      blinkingCounter = times;
    1b3e:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1b40:	ldr	r3, [sp, #4]
	return ret;
    1b42:	ldr	r1, [sp, #96]	; 0x60
      blinkingCounter = times;
    1b44:	str	r2, [r6, #20]
    1b46:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1b48:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1b4a:	str	r1, [r6, #8]
    1b4c:	b.w	52a <loop+0x96>
    1b50:	movs	r1, #10
    1b52:	ldr	r0, [pc, #204]	; (1c20 <loop+0x178c>)
    1b54:	str	r3, [sp, #4]
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1b56:	strb.w	r2, [lr]
    1b5a:	str	r2, [sp, #0]
    1b5c:	bl	1f04 <usb_serial_write>
    1b60:	ldr	r0, [pc, #184]	; (1c1c <loop+0x1788>)
    1b62:	bl	3a78 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1b66:	ldr.w	r5, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1b6a:	ldrb.w	r9, [r5]
    1b6e:	mov	r0, r9
    1b70:	bl	2520 <digitalRead>
    1b74:	clz	r1, r0
    1b78:	lsrs	r1, r1, #5
    1b7a:	mov	r0, r9
    1b7c:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b80:	ldr.w	r1, [r8]
    1b84:	str	r1, [sp, #156]	; 0x9c
      blinking = true;
      blinkingCounter = times;
    1b86:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1b88:	ldr	r3, [sp, #4]
	return ret;
    1b8a:	ldr	r1, [sp, #156]	; 0x9c
      blinkingCounter = times;
    1b8c:	str	r2, [r5, #20]
    1b8e:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1b90:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1b92:	str	r1, [r5, #8]
    1b94:	b.w	5f0 <loop+0x15c>
    1b98:	movs	r1, #10
    1b9a:	ldr	r0, [pc, #132]	; (1c20 <loop+0x178c>)
    1b9c:	str	r3, [sp, #4]
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1b9e:	strb.w	r2, [lr]
    1ba2:	str	r2, [sp, #0]
    1ba4:	bl	1f04 <usb_serial_write>
    1ba8:	ldr	r0, [pc, #112]	; (1c1c <loop+0x1788>)
    1baa:	bl	3a78 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[2]->blink(3);
    1bae:	ldr.w	r6, [fp, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1bb2:	ldrb.w	r9, [r6]
    1bb6:	mov	r0, r9
    1bb8:	bl	2520 <digitalRead>
    1bbc:	clz	r1, r0
    1bc0:	lsrs	r1, r1, #5
    1bc2:	mov	r0, r9
    1bc4:	bl	2514 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1bc8:	ldr.w	r1, [r8]
    1bcc:	str	r1, [sp, #136]	; 0x88
      blinking = true;
      blinkingCounter = times;
    1bce:	ldr	r2, [sp, #0]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1bd0:	ldr	r3, [sp, #4]
	return ret;
    1bd2:	ldr	r1, [sp, #136]	; 0x88
      blinkingCounter = times;
    1bd4:	str	r2, [r6, #20]
    1bd6:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1bd8:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1bda:	str	r1, [r6, #8]
    1bdc:	b.w	5ae <loop+0x11a>
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
    1be0:	add.w	r7, r3, #10
    1be4:	adds	r3, #14
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1be6:	ldr.w	r2, [r6, r7, lsl #2]
    1bea:	ldr.w	r3, [r6, r3, lsl #2]
    1bee:	lsls	r0, r2, #16
    1bf0:	lsls	r3, r3, #24
    1bf2:	and.w	r3, r3, #2130706432	; 0x7f000000
    1bf6:	and.w	r0, r0, #8323072	; 0x7f0000
    1bfa:	orrs	r0, r3
    1bfc:	orr.w	r0, r0, #40704	; 0x9f00
    1c00:	orr.w	r0, r0, #9
    1c04:	bl	27a0 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1c08:	bl	283c <usb_midi_flush_output>
      activeNote = notes[step];
    1c0c:	ldr.w	r2, [r6, r7, lsl #2]
    1c10:	ldr	r3, [r6, #8]
    1c12:	str	r2, [r6, #36]	; 0x24
    1c14:	b.n	16be <loop+0x122a>
    1c16:	nop
    1c18:	.word	0x00004e74
    1c1c:	.word	0x1fff0c60
    1c20:	.word	0x00004e80

00001c24 <_GLOBAL__sub_I_currentMode>:
    1c24:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
const int step3pin = 6;
const int step4pin = 8;
const int shiftPin = 10;
const int playPin = 12;

Led led1(3, LOW);
    1c28:	movs	r2, #0
    1c2a:	movs	r1, #3
    1c2c:	ldr	r0, [pc, #436]	; (1de4 <_GLOBAL__sub_I_currentMode+0x1c0>)
  
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
    1c2e:	ldr	r5, [pc, #440]	; (1de8 <_GLOBAL__sub_I_currentMode+0x1c4>)
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1c30:	ldr	r4, [pc, #440]	; (1dec <_GLOBAL__sub_I_currentMode+0x1c8>)
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    1c32:	ldr	r6, [pc, #444]	; (1df0 <_GLOBAL__sub_I_currentMode+0x1cc>)
  
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
    1c34:	ldr.w	r9, [pc, #508]	; 1e34 <_GLOBAL__sub_I_currentMode+0x210>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1c38:	ldr	r7, [pc, #440]	; (1df4 <_GLOBAL__sub_I_currentMode+0x1d0>)
    1c3a:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    1c3e:	movs	r2, #0
    1c40:	movs	r1, #5
    1c42:	ldr	r0, [pc, #436]	; (1df8 <_GLOBAL__sub_I_currentMode+0x1d4>)
    1c44:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    1c48:	movs	r2, #0
    1c4a:	movs	r1, #7
    1c4c:	ldr	r0, [pc, #428]	; (1dfc <_GLOBAL__sub_I_currentMode+0x1d8>)
    1c4e:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    1c52:	movs	r2, #0
    1c54:	movs	r1, #9
    1c56:	ldr	r0, [pc, #424]	; (1e00 <_GLOBAL__sub_I_currentMode+0x1dc>)
    1c58:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    1c5c:	movs	r2, #0
    1c5e:	movs	r1, #11
    1c60:	ldr	r0, [pc, #416]	; (1e04 <_GLOBAL__sub_I_currentMode+0x1e0>)
    1c62:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    1c66:	movs	r2, #0
    1c68:	movs	r1, #24
    1c6a:	ldr	r0, [pc, #412]	; (1e08 <_GLOBAL__sub_I_currentMode+0x1e4>)
    1c6c:	bl	46c <Led::Led(int, int)>
    1c70:	ldmia.w	r5, {r0, r1, r2, r3}
    1c74:	add.w	lr, r5, #16
    1c78:	add.w	ip, r4, #40	; 0x28
    1c7c:	stmia.w	ip, {r0, r1, r2, r3}
    1c80:	ldmia.w	lr, {r0, r1, r2, r3}
    1c84:	adds	r5, #32
    1c86:	add.w	lr, r4, #56	; 0x38
    1c8a:	stmia.w	lr, {r0, r1, r2, r3}
    1c8e:	ldmia.w	r5, {r0, r1, r2, r3}
    1c92:	movs	r5, #120	; 0x78
    1c94:	add.w	lr, r4, #72	; 0x48
    1c98:	mov.w	ip, #24
    1c9c:	mov.w	r8, #0
    1ca0:	str	r5, [r4, #12]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1ca2:	movs	r5, #0
  
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
    1ca4:	str.w	ip, [r4, #32]
    1ca8:	strd	r8, r9, [r4, #16]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1cac:	strb	r5, [r4, #0]
    1cae:	strb	r5, [r4, #1]
    1cb0:	strb	r5, [r4, #2]
    1cb2:	strb	r5, [r4, #3]
  
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
    1cb4:	str	r5, [r4, #24]
    1cb6:	str	r5, [r4, #28]
    1cb8:	str	r5, [r4, #36]	; 0x24
    1cba:	stmia.w	lr, {r0, r1, r2, r3}
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
    1cbe:	adds	r0, r6, #4
    1cc0:	ldmia	r0, {r0, r1, r2}
      m_id = id;
      m_pin = pin;
    1cc2:	mov.w	r8, #2
    1cc6:	str	r2, [r4, #100]	; 0x64
      m_leds[4] = leds[4];
    1cc8:	ldr	r2, [r6, #16]
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    1cca:	ldr	r3, [r6, #0]
      m_leds[1] = leds[1];
    1ccc:	str	r0, [r4, #92]	; 0x5c
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1cce:	mov.w	r9, #1
      m_leds[2] = leds[2];
    1cd2:	str	r1, [r4, #96]	; 0x60
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1cd4:	mov	r0, r8
    1cd6:	mov	r1, r5
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
    1cd8:	str	r2, [r4, #104]	; 0x68
      m_leds[5] = leds[5];
    1cda:	ldr	r2, [r6, #20]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1cdc:	str	r3, [r7, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1cde:	strb	r5, [r7, #16]
      m_playButton = playButton;
    1ce0:	strb	r5, [r7, #17]
      m_state = state;
    1ce2:	strb	r5, [r4, #4]
      m_currentStep = 0;
    1ce4:	str	r5, [r4, #8]
      m_mode = GLOBAL;
    1ce6:	strb.w	r5, [r4, #112]	; 0x70
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
    1cea:	str	r2, [r4, #108]	; 0x6c
  public:
    Led* m_leds[6];
    Modes m_mode;

    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    1cec:	str	r3, [r4, #88]	; 0x58
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1cee:	str	r4, [r7, #28]
      m_id = id;
    1cf0:	str.w	r9, [r7]
      m_pin = pin;
    1cf4:	str.w	r8, [r7, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1cf8:	bl	253c <pinMode>
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1cfc:	movs	r7, #4
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1cfe:	ldr	r3, [pc, #268]	; (1e0c <_GLOBAL__sub_I_currentMode+0x1e8>)
    1d00:	ldr	r2, [r6, #4]
    1d02:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d04:	mov	r1, r5
    1d06:	mov	r0, r7
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1d08:	strb	r5, [r3, #16]
      m_playButton = playButton;
    1d0a:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1d0c:	mov.w	fp, #6
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d10:	str	r4, [r3, #28]
      m_id = id;
    1d12:	str.w	r8, [r3]
      m_pin = pin;
    1d16:	str	r7, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d18:	bl	253c <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d1c:	ldr	r3, [pc, #240]	; (1e10 <_GLOBAL__sub_I_currentMode+0x1ec>)
    1d1e:	ldr	r2, [r6, #8]
    1d20:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d22:	mov	r1, r5
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1d24:	mov.w	sl, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d28:	mov	r0, fp
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1d2a:	strb	r5, [r3, #16]
      m_playButton = playButton;
    1d2c:	strb	r5, [r3, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d2e:	str	r4, [r3, #28]
      m_id = id;
    1d30:	str.w	sl, [r3]
      m_pin = pin;
    1d34:	str.w	fp, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d38:	bl	253c <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d3c:	ldr	r3, [pc, #212]	; (1e14 <_GLOBAL__sub_I_currentMode+0x1f0>)
    1d3e:	ldr	r2, [r6, #12]
    1d40:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1d42:	movs	r2, #8
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d44:	mov	r0, r2
    1d46:	mov	r1, r5
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1d48:	strb	r5, [r3, #16]
      m_playButton = playButton;
    1d4a:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1d4c:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d4e:	str	r4, [r3, #28]
      m_id = id;
    1d50:	str	r7, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d52:	bl	253c <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d56:	ldr	r3, [pc, #192]	; (1e18 <_GLOBAL__sub_I_currentMode+0x1f4>)
    1d58:	ldr	r2, [r6, #16]
    1d5a:	str	r2, [r3, #24]
      m_id = id;
    1d5c:	movs	r1, #5
      m_pin = pin;
    1d5e:	movs	r2, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1d60:	str	r1, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d62:	mov	r0, r2
    1d64:	mov	r1, r5
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
    1d66:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1d68:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d6a:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1d6c:	strb.w	r9, [r3, #16]
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d70:	bl	253c <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d74:	ldr	r3, [pc, #164]	; (1e1c <_GLOBAL__sub_I_currentMode+0x1f8>)
    1d76:	ldr	r2, [r6, #20]
    1d78:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1d7a:	movs	r6, #12
      m_shiftButton = shiftButton;
      m_playButton = playButton;

      pinMode(pin, INPUT);
    1d7c:	mov	r0, r6
    1d7e:	mov	r1, r5
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1d80:	str	r6, [r3, #32]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1d82:	ldr	r6, [pc, #156]	; (1e20 <_GLOBAL__sub_I_currentMode+0x1fc>)
      m_shiftButton = shiftButton;
    1d84:	strb	r5, [r3, #16]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1d86:	str.w	fp, [r3]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1d8a:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
    1d8c:	strb.w	r9, [r3, #17]

      pinMode(pin, INPUT);
    1d90:	bl	253c <pinMode>
    1d94:	ldr	r0, [pc, #140]	; (1e24 <_GLOBAL__sub_I_currentMode+0x200>)
    1d96:	ldr	r1, [pc, #144]	; (1e28 <_GLOBAL__sub_I_currentMode+0x204>)
    1d98:	ldr	r2, [pc, #144]	; (1e2c <_GLOBAL__sub_I_currentMode+0x208>)
    1d9a:	ldr	r3, [pc, #148]	; (1e30 <_GLOBAL__sub_I_currentMode+0x20c>)
      m_pin = pin;
      m_knobType = knobType;
    1d9c:	strb	r5, [r6, #20]
      m_id = id;
    1d9e:	str	r5, [r6, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1da0:	mov.w	lr, #15
    1da4:	movs	r5, #14
    1da6:	strb	r5, [r6, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1da8:	str	r4, [r6, #16]
    1daa:	str	r4, [r0, #16]
      m_pin = pin;
    1dac:	movs	r6, #16
      m_knobType = knobType;
    1dae:	strb.w	r9, [r0, #20]
      m_id = id;
    1db2:	str.w	r9, [r0, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1db6:	movs	r5, #17
    1db8:	strb.w	lr, [r0]
    1dbc:	movs	r0, #18
    1dbe:	strb	r6, [r1, #0]
    1dc0:	strb	r5, [r2, #0]
    1dc2:	strb	r0, [r3, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1dc4:	str	r4, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    1dc6:	strb.w	r8, [r1, #20]
      m_id = id;
    1dca:	str.w	r8, [r1, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1dce:	str	r4, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    1dd0:	strb.w	sl, [r2, #20]
      m_id = id;
    1dd4:	str.w	sl, [r2, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1dd8:	str	r4, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
    1dda:	strb	r7, [r3, #20]
      m_id = id;
    1ddc:	str	r7, [r3, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1dde:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1de2:	nop
    1de4:	.word	0x1fff162c
    1de8:	.word	0x00004e18
    1dec:	.word	0x1fff1730
    1df0:	.word	0x1fff0c40
    1df4:	.word	0x1fff16c0
    1df8:	.word	0x1fff15cc
    1dfc:	.word	0x1fff15e4
    1e00:	.word	0x1fff15fc
    1e04:	.word	0x1fff1614
    1e08:	.word	0x1fff1690
    1e0c:	.word	0x1fff16e4
    1e10:	.word	0x1fff1708
    1e14:	.word	0x1fff1808
    1e18:	.word	0x1fff17a8
    1e1c:	.word	0x1fff17cc
    1e20:	.word	0x1fff16a8
    1e24:	.word	0x1fff1644
    1e28:	.word	0x1fff1660
    1e2c:	.word	0x1fff1678
    1e30:	.word	0x1fff17f0
    1e34:	.word	0x407f4000

00001e38 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1e38:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    1e3a:	ldr	r5, [pc, #60]	; (1e78 <usb_serial_getchar+0x40>)
    1e3c:	ldr	r0, [r5, #0]
    1e3e:	cbz	r0, 1e60 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1e40:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    1e42:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1e44:	adds	r1, r0, r3
    1e46:	adds	r3, #1
	if (i >= rx_packet->len) {
    1e48:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1e4a:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    1e4c:	bcs.n	1e54 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    1e4e:	strh	r3, [r0, #2]
	}
	return c;
    1e50:	mov	r0, r4
}
    1e52:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    1e54:	bl	2ce4 <usb_free>
		rx_packet = NULL;
    1e58:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    1e5a:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1e5c:	str	r3, [r5, #0]
    1e5e:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1e60:	ldr	r3, [pc, #24]	; (1e7c <usb_serial_getchar+0x44>)
    1e62:	ldrb	r3, [r3, #0]
    1e64:	cbz	r3, 1e72 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1e66:	movs	r0, #2
    1e68:	bl	2d30 <usb_rx>
    1e6c:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    1e6e:	cmp	r0, #0
    1e70:	bne.n	1e40 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1e72:	mov.w	r0, #4294967295
    1e76:	pop	{r3, r4, r5, pc}
    1e78:	.word	0x1fff1838
    1e7c:	.word	0x1fff1998

00001e80 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1e80:	push	{r4, lr}
	if (!rx_packet) {
    1e82:	ldr	r4, [pc, #36]	; (1ea8 <usb_serial_peekchar+0x28>)
    1e84:	ldr	r0, [r4, #0]
    1e86:	cbz	r0, 1e90 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    1e88:	ldrh	r3, [r0, #2]
    1e8a:	add	r0, r3
    1e8c:	ldrb	r0, [r0, #8]
}
    1e8e:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1e90:	ldr	r3, [pc, #24]	; (1eac <usb_serial_peekchar+0x2c>)
    1e92:	ldrb	r3, [r3, #0]
    1e94:	cbz	r3, 1ea2 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1e96:	movs	r0, #2
    1e98:	bl	2d30 <usb_rx>
    1e9c:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1e9e:	cmp	r0, #0
    1ea0:	bne.n	1e88 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1ea2:	mov.w	r0, #4294967295
    1ea6:	pop	{r4, pc}
    1ea8:	.word	0x1fff1838
    1eac:	.word	0x1fff1998

00001eb0 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1eb0:	ldr	r3, [pc, #16]	; (1ec4 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    1eb2:	ldr	r2, [pc, #20]	; (1ec8 <usb_serial_available+0x18>)
    1eb4:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    1eb6:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1eb8:	cbz	r3, 1ec2 <usb_serial_available+0x12>
    1eba:	ldrh	r2, [r3, #0]
    1ebc:	ldrh	r3, [r3, #2]
    1ebe:	subs	r3, r2, r3
    1ec0:	add	r0, r3
	return count;
}
    1ec2:	bx	lr
    1ec4:	.word	0x1fff1838
    1ec8:	.word	0x1fff1e2c

00001ecc <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    1ecc:	ldr	r3, [pc, #44]	; (1efc <usb_serial_flush_input+0x30>)
    1ece:	ldrb	r3, [r3, #0]
    1ed0:	cbz	r3, 1efa <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    1ed2:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    1ed4:	ldr	r4, [pc, #40]	; (1f00 <usb_serial_flush_input+0x34>)
    1ed6:	ldr	r0, [r4, #0]
    1ed8:	cbz	r0, 1eee <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    1eda:	bl	2ce4 <usb_free>
		rx_packet = NULL;
    1ede:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1ee0:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1ee2:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1ee4:	bl	2d30 <usb_rx>
		if (!rx) break;
    1ee8:	cbz	r0, 1ef8 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    1eea:	bl	2ce4 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1eee:	movs	r0, #2
    1ef0:	bl	2d30 <usb_rx>
		if (!rx) break;
    1ef4:	cmp	r0, #0
    1ef6:	bne.n	1eea <usb_serial_flush_input+0x1e>
    1ef8:	pop	{r4, pc}
    1efa:	bx	lr
    1efc:	.word	0x1fff1998
    1f00:	.word	0x1fff1838

00001f04 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1f04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1f08:	ldr.w	r9, [pc, #248]	; 2004 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1f0c:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1f0e:	movs	r2, #1
    1f10:	strb.w	r2, [r9]
	while (size > 0) {
    1f14:	str	r1, [sp, #4]
    1f16:	cbz	r1, 1f74 <usb_serial_write+0x70>
    1f18:	ldr.w	r8, [pc, #236]	; 2008 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1f1c:	ldr	r7, [pc, #212]	; (1ff4 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1f1e:	ldr	r6, [sp, #4]
    1f20:	mov	fp, r0
		if (!tx_packet) {
    1f22:	ldr.w	r0, [r8]
    1f26:	cbz	r0, 1f96 <usb_serial_write+0x92>
    1f28:	ldr	r5, [pc, #204]	; (1ff8 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    1f2a:	ldrh	r4, [r0, #2]
    1f2c:	rsb	r1, r4, #64	; 0x40
    1f30:	cmp	r1, r6
    1f32:	it	cs
    1f34:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1f36:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1f3a:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1f3c:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1f40:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1f42:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1f44:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1f48:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1f4c:	cbz	r1, 1f64 <usb_serial_write+0x60>
    1f4e:	subs	r4, #1
    1f50:	add	r2, r4
    1f52:	add	r1, fp
    1f54:	ldrb.w	r4, [fp], #1
    1f58:	strb.w	r4, [r2, #1]!
    1f5c:	cmp	fp, r1
    1f5e:	bne.n	1f54 <usb_serial_write+0x50>
    1f60:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1f64:	cmp.w	lr, #63	; 0x3f
    1f68:	bhi.n	1f82 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1f6a:	ldr	r2, [pc, #144]	; (1ffc <usb_serial_write+0xf8>)
    1f6c:	movs	r1, #5
    1f6e:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1f70:	cmp	r6, #0
    1f72:	bne.n	1f22 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1f74:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    1f76:	movs	r3, #0
    1f78:	strb.w	r3, [r9]
	return ret;
}
    1f7c:	add	sp, #12
    1f7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1f82:	movs	r2, #64	; 0x40
    1f84:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1f86:	mov	r1, r0
    1f88:	movs	r0, #3
    1f8a:	bl	2e80 <usb_tx>
			tx_packet = NULL;
    1f8e:	movs	r2, #0
    1f90:	str.w	r2, [r8]
    1f94:	b.n	1f6a <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1f96:	ldrb	r2, [r7, #0]
    1f98:	cbz	r2, 1fe4 <usb_serial_write+0xe0>
    1f9a:	ldr	r4, [pc, #100]	; (2000 <usb_serial_write+0xfc>)
    1f9c:	ldr	r5, [pc, #88]	; (1ff8 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1f9e:	mov.w	sl, #1
    1fa2:	b.n	1fb4 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1fa4:	subs	r4, #1
    1fa6:	beq.n	1fd6 <usb_serial_write+0xd2>
    1fa8:	ldrb	r2, [r5, #0]
    1faa:	cbnz	r2, 1fd6 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    1fac:	bl	3984 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1fb0:	ldrb	r2, [r7, #0]
    1fb2:	cbz	r2, 1fe4 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1fb4:	movs	r0, #3
    1fb6:	bl	2d6c <usb_tx_packet_count>
    1fba:	cmp	r0, #7
    1fbc:	bhi.n	1fa4 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    1fbe:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    1fc2:	bl	2ca4 <usb_malloc>
    1fc6:	str.w	r0, [r8]
					if (tx_packet) break;
    1fca:	cmp	r0, #0
    1fcc:	bne.n	1f2a <usb_serial_write+0x26>
					tx_noautoflush = 0;
    1fce:	ldr	r3, [pc, #52]	; (2004 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1fd0:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    1fd2:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1fd4:	bne.n	1fa8 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    1fd6:	movs	r3, #1
					return -1;
    1fd8:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    1fdc:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1fde:	add	sp, #12
    1fe0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1fe4:	movs	r3, #0
					return -1;
    1fe6:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1fea:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1fee:	add	sp, #12
    1ff0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ff4:	.word	0x1fff1998
    1ff8:	.word	0x1fff1834
    1ffc:	.word	0x1fff182c
    2000:	.word	0x00014821
    2004:	.word	0x1fff182d
    2008:	.word	0x1fff1830

0000200c <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    200c:	push	{lr}
    200e:	sub	sp, #12
    2010:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    2012:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2014:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    2018:	mov	r0, r3
    201a:	bl	1f04 <usb_serial_write>
}
    201e:	add	sp, #12
    2020:	ldr.w	pc, [sp], #4

00002024 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    2024:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    2026:	ldr	r5, [pc, #56]	; (2060 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    2028:	ldr	r4, [pc, #56]	; (2064 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    202a:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    202c:	movs	r3, #1
    202e:	strb	r3, [r4, #0]
	if (!tx_packet) {
    2030:	cbz	r0, 203e <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    2032:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    2034:	movs	r3, #0
    2036:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    2038:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    203c:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    203e:	ldr	r3, [pc, #40]	; (2068 <usb_serial_write_buffer_free+0x44>)
    2040:	ldrb	r3, [r3, #0]
    2042:	cbnz	r3, 204a <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    2044:	movs	r0, #0
    2046:	strb	r0, [r4, #0]
			return 0;
    2048:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    204a:	movs	r0, #3
    204c:	bl	2d6c <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    2050:	cmp	r0, #7
    2052:	bhi.n	2044 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    2054:	bl	2ca4 <usb_malloc>
    2058:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    205a:	cmp	r0, #0
    205c:	bne.n	2032 <usb_serial_write_buffer_free+0xe>
    205e:	b.n	2044 <usb_serial_write_buffer_free+0x20>
    2060:	.word	0x1fff1830
    2064:	.word	0x1fff182d
    2068:	.word	0x1fff1998

0000206c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    206c:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    206e:	ldr	r3, [pc, #68]	; (20b4 <usb_serial_flush_output+0x48>)
    2070:	ldrb	r3, [r3, #0]
    2072:	cbz	r3, 2098 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    2074:	ldr	r6, [pc, #64]	; (20b8 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    2076:	ldr	r5, [pc, #68]	; (20bc <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    2078:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    207a:	movs	r7, #1
    207c:	strb	r7, [r5, #0]
	if (tx_packet) {
    207e:	cbz	r4, 209a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    2080:	ldr	r2, [pc, #60]	; (20c0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    2082:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    2084:	movs	r7, #0
    2086:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2088:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    208a:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    208c:	movs	r0, #3
    208e:	bl	2e80 <usb_tx>
		tx_packet = NULL;
    2092:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    2094:	movs	r3, #0
    2096:	strb	r3, [r5, #0]
    2098:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    209a:	bl	2ca4 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    209e:	ldr	r3, [pc, #32]	; (20c0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    20a0:	cbz	r0, 20ae <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    20a2:	mov	r1, r0
    20a4:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    20a6:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    20a8:	bl	2e80 <usb_tx>
    20ac:	b.n	2094 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    20ae:	strb	r7, [r3, #0]
    20b0:	b.n	2094 <usb_serial_flush_output+0x28>
    20b2:	nop
    20b4:	.word	0x1fff1998
    20b8:	.word	0x1fff1830
    20bc:	.word	0x1fff182d
    20c0:	.word	0x1fff182c

000020c4 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    20c4:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    20c6:	ldr	r3, [pc, #56]	; (2100 <usb_serial_flush_callback+0x3c>)
    20c8:	ldrb	r3, [r3, #0]
    20ca:	cbnz	r3, 20ea <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    20cc:	ldr	r4, [pc, #52]	; (2104 <usb_serial_flush_callback+0x40>)
    20ce:	ldr	r1, [r4, #0]
    20d0:	cbz	r1, 20ec <usb_serial_flush_callback+0x28>
    20d2:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    20d6:	ldrh	r3, [r1, #2]
    20d8:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    20da:	movs	r0, #3
    20dc:	bl	2e80 <usb_tx>
		tx_packet = NULL;
    20e0:	str	r5, [r4, #0]
    20e2:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    20e4:	ldr	r3, [pc, #32]	; (2108 <usb_serial_flush_callback+0x44>)
    20e6:	movs	r2, #1
    20e8:	strb	r2, [r3, #0]
    20ea:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    20ec:	bl	2ca4 <usb_malloc>
		if (tx) {
    20f0:	cmp	r0, #0
    20f2:	beq.n	20e4 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    20f4:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    20f6:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    20fa:	movs	r0, #3
    20fc:	b.w	2e80 <usb_tx>
    2100:	.word	0x1fff182d
    2104:	.word	0x1fff1830
    2108:	.word	0x1fff182c

0000210c <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    210c:	ldr	r2, [pc, #220]	; (21ec <wait_for_cal+0xe0>)
    210e:	ldr	r1, [pc, #224]	; (21f0 <wait_for_cal+0xe4>)
    2110:	ldr	r3, [r2, #0]
    2112:	lsls	r3, r3, #24
    2114:	bmi.n	2110 <wait_for_cal+0x4>
    2116:	ldr	r3, [r1, #0]
    2118:	ands.w	r3, r3, #128	; 0x80
    211c:	bne.n	2110 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    211e:	cpsid	i
	if (calibrating) {
    2120:	ldr	r1, [pc, #208]	; (21f4 <wait_for_cal+0xe8>)
    2122:	ldrb	r2, [r1, #0]
    2124:	cmp	r2, #0
    2126:	beq.n	21e8 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    2128:	ldr	r2, [pc, #204]	; (21f8 <wait_for_cal+0xec>)
    212a:	ldr	r0, [pc, #208]	; (21fc <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    212c:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    212e:	ldr	r4, [pc, #208]	; (2200 <wait_for_cal+0xf4>)
    2130:	ldr	r7, [r2, #0]
    2132:	ldr	r6, [r0, #0]
    2134:	ldr	r5, [r4, #0]
    2136:	ldr	r4, [r2, #12]
    2138:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    213a:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    213c:	adds	r2, #20
    213e:	ldr	r0, [r0, #0]
    2140:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    2142:	ldr	r7, [pc, #192]	; (2204 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    2144:	add	r5, r6
    2146:	add	r4, r5
    2148:	add	r0, r4
    214a:	add	r2, r0
    214c:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2150:	ldr	r6, [pc, #180]	; (2208 <wait_for_cal+0xfc>)
    2152:	ldr	r0, [pc, #184]	; (220c <wait_for_cal+0x100>)
    2154:	ldr	r5, [pc, #184]	; (2210 <wait_for_cal+0x104>)
    2156:	ldr	r4, [pc, #188]	; (2214 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    2158:	orr.w	r2, r2, #32768	; 0x8000
    215c:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    215e:	ldr	r7, [r6, #0]
    2160:	ldr	r6, [r0, #0]
    2162:	ldr	r5, [r5, #0]
    2164:	ldr	r2, [pc, #176]	; (2218 <wait_for_cal+0x10c>)
    2166:	ldr	r4, [r4, #0]
    2168:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    216a:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    216c:	ldr	r0, [r0, #0]
    216e:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    2170:	ldr	r7, [pc, #168]	; (221c <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    2172:	add	r5, r6
    2174:	add	r4, r5
    2176:	add	r0, r4
    2178:	add	r2, r0
    217a:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    217e:	ldr	r6, [pc, #160]	; (2220 <wait_for_cal+0x114>)
    2180:	ldr	r0, [pc, #160]	; (2224 <wait_for_cal+0x118>)
    2182:	ldr	r5, [pc, #164]	; (2228 <wait_for_cal+0x11c>)
    2184:	ldr	r4, [pc, #164]	; (222c <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    2186:	orr.w	r2, r2, #32768	; 0x8000
    218a:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    218c:	ldr	r7, [r6, #0]
    218e:	ldr	r6, [r0, #0]
    2190:	ldr	r5, [r5, #0]
    2192:	ldr	r2, [pc, #156]	; (2230 <wait_for_cal+0x124>)
    2194:	ldr	r4, [r4, #0]
    2196:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2198:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    219a:	ldr	r0, [r0, #0]
    219c:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    219e:	ldr	r7, [pc, #148]	; (2234 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    21a0:	add	r5, r6
    21a2:	add	r4, r5
    21a4:	add	r0, r4
    21a6:	add	r2, r0
    21a8:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    21ac:	ldr	r6, [pc, #136]	; (2238 <wait_for_cal+0x12c>)
    21ae:	ldr	r0, [pc, #140]	; (223c <wait_for_cal+0x130>)
    21b0:	ldr	r5, [pc, #140]	; (2240 <wait_for_cal+0x134>)
    21b2:	ldr	r4, [pc, #144]	; (2244 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    21b4:	orr.w	r2, r2, #32768	; 0x8000
    21b8:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    21ba:	ldr	r7, [r6, #0]
    21bc:	ldr	r6, [r0, #0]
    21be:	ldr	r5, [r5, #0]
    21c0:	ldr	r2, [pc, #132]	; (2248 <wait_for_cal+0x13c>)
    21c2:	ldr	r4, [r4, #0]
    21c4:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    21c6:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    21c8:	ldr	r0, [r0, #0]
    21ca:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    21cc:	add	r5, r6
    21ce:	add	r4, r5
    21d0:	add	r0, r4
    21d2:	add	r2, r0
    21d4:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    21d8:	ldr	r0, [pc, #112]	; (224c <wait_for_cal+0x140>)
    21da:	orr.w	r2, r2, #32768	; 0x8000
    21de:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    21e0:	strb	r3, [r1, #0]
	}
	__enable_irq();
    21e2:	cpsie	i
}
    21e4:	pop	{r4, r5, r6, r7}
    21e6:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    21e8:	cpsie	i
    21ea:	bx	lr
    21ec:	.word	0x4003b024
    21f0:	.word	0x400bb024
    21f4:	.word	0x1fff183e
    21f8:	.word	0x4003b038
    21fc:	.word	0x4003b03c
    2200:	.word	0x4003b040
    2204:	.word	0x4003b02c
    2208:	.word	0x4003b058
    220c:	.word	0x4003b05c
    2210:	.word	0x4003b060
    2214:	.word	0x4003b064
    2218:	.word	0x4003b06c
    221c:	.word	0x4003b030
    2220:	.word	0x400bb038
    2224:	.word	0x400bb03c
    2228:	.word	0x400bb040
    222c:	.word	0x400bb044
    2230:	.word	0x400bb04c
    2234:	.word	0x400bb02c
    2238:	.word	0x400bb058
    223c:	.word	0x400bb05c
    2240:	.word	0x400bb060
    2244:	.word	0x400bb064
    2248:	.word	0x400bb06c
    224c:	.word	0x400bb030

00002250 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    2250:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2252:	ldr	r0, [pc, #164]	; (22f8 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2254:	ldr	r2, [pc, #164]	; (22fc <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    2256:	ldr	r3, [pc, #168]	; (2300 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2258:	ldr	r5, [pc, #168]	; (2304 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    225a:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    225c:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    225e:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2260:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    2262:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2264:	ldr	r4, [pc, #160]	; (2308 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    2266:	cmp	r3, #8
    2268:	beq.n	22cc <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    226a:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    226c:	ldr	r0, [pc, #156]	; (230c <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    226e:	ldr	r1, [pc, #160]	; (2310 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2270:	beq.n	22e2 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    2272:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    2274:	ite	eq
    2276:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2278:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    227a:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    227c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    227e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2280:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2282:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2284:	ldr	r3, [pc, #140]	; (2314 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2286:	ldr	r1, [pc, #144]	; (2318 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2288:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    228a:	ldr	r2, [pc, #144]	; (231c <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    228c:	cbz	r3, 22be <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    228e:	movs	r3, #1
    2290:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2292:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2294:	ldr	r3, [pc, #136]	; (2320 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2296:	ldr	r1, [pc, #140]	; (2324 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2298:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    229a:	ldr	r2, [pc, #140]	; (2328 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    229c:	cmp	r3, #1
    229e:	bls.n	22ee <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    22a0:	cmp	r3, #4
    22a2:	bls.n	22c4 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    22a4:	cmp	r3, #8
    22a6:	bls.n	22e6 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    22a8:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    22aa:	ite	ls
    22ac:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    22ae:	movhi	r3, #135	; 0x87
    22b0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    22b2:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    22b4:	ldr	r3, [pc, #116]	; (232c <analog_init+0xdc>)
    22b6:	movs	r2, #1
    22b8:	strb	r2, [r3, #0]
}
    22ba:	pop	{r4, r5}
    22bc:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    22be:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    22c0:	str	r3, [r2, #0]
    22c2:	b.n	2294 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    22c4:	movs	r3, #132	; 0x84
    22c6:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    22c8:	str	r3, [r2, #0]
    22ca:	b.n	22b4 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    22cc:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    22d0:	ldr	r1, [pc, #60]	; (2310 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    22d2:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    22d4:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    22d6:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    22d8:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    22da:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    22dc:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    22de:	str	r3, [r1, #0]
    22e0:	b.n	2284 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    22e2:	movs	r2, #57	; 0x39
    22e4:	b.n	22d6 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    22e6:	movs	r3, #133	; 0x85
    22e8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    22ea:	str	r3, [r2, #0]
    22ec:	b.n	22b4 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    22ee:	movs	r3, #128	; 0x80
    22f0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    22f2:	str	r3, [r2, #0]
    22f4:	b.n	22b4 <analog_init+0x64>
    22f6:	nop
    22f8:	.word	0x40074000
    22fc:	.word	0x40074001
    2300:	.word	0x1fff0c58
    2304:	.word	0x4003b008
    2308:	.word	0x4003b00c
    230c:	.word	0x400bb008
    2310:	.word	0x400bb00c
    2314:	.word	0x1fff1841
    2318:	.word	0x4003b020
    231c:	.word	0x400bb020
    2320:	.word	0x1fff0c59
    2324:	.word	0x4003b024
    2328:	.word	0x400bb024
    232c:	.word	0x1fff183e

00002330 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2330:	cmp	r0, #71	; 0x47
    2332:	bhi.n	2394 <analogRead+0x64>
	channel = pin2sc1a[pin];
    2334:	ldr	r3, [pc, #204]	; (2404 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    2336:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    233a:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    233c:	cmp	r6, #255	; 0xff
    233e:	beq.n	2398 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    2340:	ldr	r3, [pc, #196]	; (2408 <analogRead+0xd8>)
    2342:	ldrb	r3, [r3, #0]
    2344:	cmp	r3, #0
    2346:	bne.n	239e <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2348:	lsls	r2, r6, #24
    234a:	bmi.n	23a6 <analogRead+0x76>
#endif

	__disable_irq();
    234c:	cpsid	i
    234e:	ldr	r5, [pc, #188]	; (240c <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2350:	ldr	r4, [pc, #188]	; (2410 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    2352:	mov	r7, r5
    2354:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2356:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    2358:	strb	r3, [r5, #0]
	__enable_irq();
    235a:	cpsie	i
	while (1) {
		__disable_irq();
    235c:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    235e:	ldr	r3, [r4, #0]
    2360:	lsls	r3, r3, #24
    2362:	bmi.n	237e <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    2364:	ldrb	r3, [r7, #0]
    2366:	cbnz	r3, 2370 <analogRead+0x40>
    2368:	b.n	2354 <analogRead+0x24>
    236a:	ldrb	r3, [r5, #0]
    236c:	cmp	r3, #0
    236e:	beq.n	2354 <analogRead+0x24>
		__enable_irq();
    2370:	cpsie	i
		yield();
    2372:	bl	3984 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2376:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2378:	ldr	r3, [r4, #0]
    237a:	lsls	r0, r3, #24
    237c:	bpl.n	236a <analogRead+0x3a>
			result = ADC0_RA;
    237e:	ldr	r3, [pc, #148]	; (2414 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    2380:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    2382:	movs	r2, #0
    2384:	strb	r2, [r5, #0]
			__enable_irq();
    2386:	cpsie	i
			result >>= analog_right_shift;
    2388:	ldr	r2, [pc, #140]	; (2418 <analogRead+0xe8>)
    238a:	ldrb	r0, [r2, #0]
    238c:	asr.w	r0, r3, r0
			return result;
    2390:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2394:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2396:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2398:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    239a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    239e:	bl	210c <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    23a2:	lsls	r2, r6, #24
    23a4:	bpl.n	234c <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    23a6:	cpsid	i
    23a8:	ldr	r5, [pc, #112]	; (241c <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    23aa:	ldr.w	r8, [pc, #124]	; 2428 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    23ae:	ldr	r4, [pc, #112]	; (2420 <analogRead+0xf0>)
    23b0:	and.w	r7, r6, #64	; 0x40
    23b4:	uxtb	r7, r7
    23b6:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    23ba:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    23be:	cbz	r7, 23f8 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    23c0:	bic.w	r3, r3, #16
    23c4:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    23c8:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    23ca:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    23cc:	ldr	r2, [pc, #76]	; (241c <analogRead+0xec>)
    23ce:	strb	r3, [r5, #0]
	__enable_irq();
    23d0:	cpsie	i
	while (1) {
		__disable_irq();
    23d2:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    23d4:	ldr	r3, [r4, #0]
    23d6:	lsls	r1, r3, #24
    23d8:	bmi.n	23f4 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    23da:	ldrb	r3, [r2, #0]
    23dc:	cbnz	r3, 23e6 <analogRead+0xb6>
    23de:	b.n	23ba <analogRead+0x8a>
    23e0:	ldrb	r3, [r5, #0]
    23e2:	cmp	r3, #0
    23e4:	beq.n	23ba <analogRead+0x8a>
		__enable_irq();
    23e6:	cpsie	i
		yield();
    23e8:	bl	3984 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    23ec:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    23ee:	ldr	r3, [r4, #0]
    23f0:	lsls	r3, r3, #24
    23f2:	bpl.n	23e0 <analogRead+0xb0>
			result = ADC1_RA;
    23f4:	ldr	r3, [pc, #44]	; (2424 <analogRead+0xf4>)
    23f6:	b.n	2380 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    23f8:	orr.w	r3, r3, #16
    23fc:	str.w	r3, [r8]
    2400:	b.n	23c8 <analogRead+0x98>
    2402:	nop
    2404:	.word	0x00004e9c
    2408:	.word	0x1fff183e
    240c:	.word	0x1fff1840
    2410:	.word	0x4003b000
    2414:	.word	0x4003b010
    2418:	.word	0x1fff183d
    241c:	.word	0x1fff183f
    2420:	.word	0x400bb000
    2424:	.word	0x400bb010
    2428:	.word	0x400bb00c

0000242c <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    242c:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    242e:	ldr	r3, [pc, #68]	; (2474 <digitalWrite.part.1+0x48>)
    2430:	ldr.w	r2, [r3, r0, lsl #3]
    2434:	ldrb.w	r4, [r2, #640]	; 0x280
    2438:	cbz	r4, 2448 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    243a:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    243c:	cbz	r1, 245e <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    243e:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2442:	ldr.w	r4, [sp], #4
    2446:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    2448:	add.w	r3, r3, r0, lsl #3
    244c:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    244e:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    2450:	cbnz	r1, 2468 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    2452:	bic.w	r2, r2, #2
    2456:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2458:	ldr.w	r4, [sp], #4
    245c:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    245e:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2462:	ldr.w	r4, [sp], #4
    2466:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2468:	orr.w	r2, r2, #3
    246c:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    246e:	ldr.w	r4, [sp], #4
    2472:	bx	lr
    2474:	.word	0x00004ee4

00002478 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2478:	ldr	r2, [pc, #112]	; (24ec <pinMode.part.2+0x74>)
    247a:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    247e:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2480:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2482:	beq.n	24a8 <pinMode.part.2+0x30>
    2484:	cmp	r1, #4
    2486:	beq.n	24c0 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2488:	ldr.w	r0, [r2, r0, lsl #3]
    248c:	movs	r2, #0
    248e:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    2492:	cbz	r1, 24a0 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2494:	cmp	r1, #2
    2496:	beq.n	24da <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2498:	cmp	r1, #3
    249a:	beq.n	24e2 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    249c:	str	r2, [r3, #0]
    249e:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    24a0:	mov.w	r2, #256	; 0x100
    24a4:	str	r2, [r3, #0]
    24a6:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    24a8:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    24ac:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    24b0:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    24b4:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    24b6:	ldr	r2, [r3, #0]
    24b8:	bic.w	r2, r2, #32
    24bc:	str	r2, [r3, #0]
    24be:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    24c0:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    24c4:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    24c8:	movs	r0, #1
    24ca:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    24ce:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    24d0:	ldr	r2, [r3, #0]
    24d2:	orr.w	r2, r2, #32
    24d6:	str	r2, [r3, #0]
    24d8:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    24da:	movw	r2, #259	; 0x103
    24de:	str	r2, [r3, #0]
    24e0:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    24e2:	mov.w	r2, #258	; 0x102
    24e6:	str	r2, [r3, #0]
    24e8:	bx	lr
    24ea:	nop
    24ec:	.word	0x00004ee4

000024f0 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    24f0:	push	{r4, r5}
	RTC_SR = 0;
    24f2:	ldr	r3, [pc, #20]	; (2508 <rtc_set+0x18>)
	RTC_TPR = 0;
    24f4:	ldr	r5, [pc, #20]	; (250c <rtc_set+0x1c>)
	RTC_TSR = t;
    24f6:	ldr	r4, [pc, #24]	; (2510 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    24f8:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    24fa:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    24fc:	str	r2, [r3, #0]
	RTC_TPR = 0;
    24fe:	str	r2, [r5, #0]
	RTC_TSR = t;
    2500:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    2502:	str	r1, [r3, #0]
}
    2504:	pop	{r4, r5}
    2506:	bx	lr
    2508:	.word	0x4003d014
    250c:	.word	0x4003d004
    2510:	.word	0x4003d000

00002514 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    2514:	cmp	r0, #63	; 0x3f
    2516:	bhi.n	251c <digitalWrite+0x8>
    2518:	b.w	242c <digitalWrite.part.1>
    251c:	bx	lr
    251e:	nop

00002520 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2520:	cmp	r0, #63	; 0x3f
    2522:	bhi.n	2532 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    2524:	ldr	r3, [pc, #16]	; (2538 <digitalRead+0x18>)
    2526:	ldr.w	r3, [r3, r0, lsl #3]
    252a:	ldrb.w	r0, [r3, #512]	; 0x200
    252e:	uxtb	r0, r0
    2530:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2532:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    2534:	bx	lr
    2536:	nop
    2538:	.word	0x00004ee4

0000253c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    253c:	cmp	r0, #63	; 0x3f
    253e:	bhi.n	2544 <pinMode+0x8>
    2540:	b.w	2478 <pinMode.part.2>
    2544:	bx	lr
    2546:	nop

00002548 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    2548:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    254c:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    254e:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2550:	ldr	r7, [pc, #136]	; (25dc <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2552:	ldr	r3, [pc, #140]	; (25e0 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2554:	ldr	r2, [pc, #140]	; (25e4 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2556:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2558:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    255a:	ldr	r2, [r2, #0]
	__enable_irq();
    255c:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    255e:	lsls	r2, r2, #5
    2560:	bpl.n	2568 <delay+0x20>
    2562:	cmp	r3, #50	; 0x32
    2564:	it	hi
    2566:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2568:	cbz	r5, 25d8 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    256a:	rsb	r3, r3, #179200	; 0x2bc00
    256e:	addw	r3, r3, #799	; 0x31f
    2572:	ldr	r6, [pc, #116]	; (25e8 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2574:	ldr.w	r9, [pc, #104]	; 25e0 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2578:	ldr.w	r8, [pc, #104]	; 25e4 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    257c:	lsrs	r3, r3, #2
    257e:	mov.w	r2, #1000	; 0x3e8
    2582:	umull	r1, r3, r6, r3
    2586:	mul.w	r4, r2, r4
    258a:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    258e:	cpsid	i
	current = SYST_CVR;
    2590:	ldr.w	r1, [r9]
	count = systick_millis_count;
    2594:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2596:	ldr.w	lr, [r8]
	__enable_irq();
    259a:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    259c:	rsb	r3, r1, #179200	; 0x2bc00
    25a0:	addw	r3, r3, #799	; 0x31f
    25a4:	lsrs	r3, r3, #2
    25a6:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    25aa:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    25ae:	rsb	r3, r4, r3, lsr #2
    25b2:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    25b6:	beq.n	25be <delay+0x76>
    25b8:	cmp	r1, #50	; 0x32
    25ba:	it	hi
    25bc:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    25be:	mla	r3, r0, r2, r3
    25c2:	cmp.w	r3, #1000	; 0x3e8
    25c6:	bcc.n	25d2 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    25c8:	subs	r5, #1
    25ca:	beq.n	25d8 <delay+0x90>
				start += 1000;
    25cc:	add.w	r4, r4, #1000	; 0x3e8
    25d0:	b.n	258e <delay+0x46>
			}
			yield();
    25d2:	bl	3984 <yield>
		}
    25d6:	b.n	258e <delay+0x46>
    25d8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    25dc:	.word	0x1fff1844
    25e0:	.word	0xe000e018
    25e4:	.word	0xe000ed04
    25e8:	.word	0x16c16c17

000025ec <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    25ec:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    25ee:	ldr	r3, [pc, #312]	; (2728 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    25f0:	ldr	r0, [pc, #312]	; (272c <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    25f2:	ldr.w	ip, [pc, #348]	; 2750 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    25f6:	ldr	r4, [pc, #312]	; (2730 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    25f8:	ldr	r1, [pc, #312]	; (2734 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    25fa:	ldr.w	lr, [pc, #344]	; 2754 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    25fe:	ldr	r6, [pc, #312]	; (2738 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    2600:	ldr	r5, [pc, #312]	; (273c <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    2602:	ldr	r7, [pc, #316]	; (2740 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2604:	mov.w	r2, #134217728	; 0x8000000
    2608:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    260a:	mov.w	r2, #268435456	; 0x10000000
    260e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    2610:	mov.w	r2, #536870912	; 0x20000000
    2614:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    2616:	mov.w	r2, #1073741824	; 0x40000000
    261a:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    261c:	mov.w	r2, #2147483648	; 0x80000000
    2620:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2622:	movs	r2, #0
    2624:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2626:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2628:	movw	r0, #61439	; 0xefff
    262c:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2630:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    2634:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2636:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    263a:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    263c:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    263e:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2640:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    2644:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    2646:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    264a:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    264c:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    2650:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2652:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    2656:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    265a:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    265e:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2662:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    2666:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2668:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    266c:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    266e:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2670:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    2672:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    2676:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2678:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    267a:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    267c:	ldr	r4, [pc, #196]	; (2744 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    267e:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2680:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2682:	movs	r1, #9
    2684:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    2686:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    268a:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    268e:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2690:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2692:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    2694:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    2696:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2698:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    269a:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    269e:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    26a2:	add.w	r7, r7, #520192	; 0x7f000
    26a6:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    26a8:	addw	r4, r4, #2044	; 0x7fc
    26ac:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    26ae:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    26b0:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    26b2:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    26b4:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    26b8:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    26ba:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    26be:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    26c2:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    26c4:	sub.w	r4, r4, #460800	; 0x70800
    26c8:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    26cc:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    26ce:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    26d0:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    26d4:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    26d6:	ldr	r0, [pc, #112]	; (2748 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    26d8:	orr.w	r1, r1, #512	; 0x200
    26dc:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    26de:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    26e0:	ldr	r4, [pc, #104]	; (274c <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    26e2:	add.w	lr, lr, #65280	; 0xff00
    26e6:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    26ea:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    26ee:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    26f2:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    26f6:	orr.w	r1, r1, #33554432	; 0x2000000
    26fa:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    26fc:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    2700:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2704:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    2706:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    2708:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    270a:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    270c:	str	r2, [r4, #0]
#endif
	analog_init();
    270e:	bl	2250 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    2712:	movs	r0, #25
    2714:	bl	2548 <delay>
	usb_init();
    2718:	bl	38b4 <usb_init>
	delay(275);
    271c:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    2720:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    2724:	b.w	2548 <delay>
    2728:	.word	0xe000e104
    272c:	.word	0x40038004
    2730:	.word	0x40038014
    2734:	.word	0x4003801c
    2738:	.word	0x40038024
    273c:	.word	0x4003802c
    2740:	.word	0x40038034
    2744:	.word	0x40038000
    2748:	.word	0x40048004
    274c:	.word	0x400c9000
    2750:	.word	0x40038008
    2754:	.word	0x4003800c

00002758 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2758:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    275a:	ldr	r3, [pc, #56]	; (2794 <sysex_byte+0x3c>)
    275c:	ldr	r4, [pc, #56]	; (2798 <sysex_byte+0x40>)
    275e:	ldr	r3, [r3, #0]
    2760:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2762:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2764:	cbz	r3, 278a <sysex_byte+0x32>
    2766:	cmp.w	r1, #290	; 0x122
    276a:	bcs.n	2778 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    276c:	ldr	r2, [pc, #44]	; (279c <sysex_byte+0x44>)
    276e:	adds	r3, r1, #1
    2770:	strb	r5, [r2, r1]
    2772:	uxth	r3, r3
    2774:	strh	r3, [r4, #0]
	}
}
    2776:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2778:	movs	r2, #0
    277a:	ldr	r0, [pc, #32]	; (279c <sysex_byte+0x44>)
    277c:	blx	r3
    277e:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2780:	ldr	r2, [pc, #24]	; (279c <sysex_byte+0x44>)
    2782:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2784:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2786:	strh	r3, [r4, #0]
	}
}
    2788:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    278a:	cmp.w	r1, #290	; 0x122
    278e:	bcc.n	276c <sysex_byte+0x14>
    2790:	pop	{r3, r4, r5, pc}
    2792:	nop
    2794:	.word	0x1fff186c
    2798:	.word	0x1fff1d02
    279c:	.word	0x1fff1d08

000027a0 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    27a0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    27a4:	ldr	r6, [pc, #132]	; (282c <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    27a6:	ldr	r7, [pc, #136]	; (2830 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    27a8:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    27aa:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    27ac:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    27ae:	strb	r3, [r7, #0]
	if (!tx_packet) {
    27b0:	cbz	r1, 27e0 <usb_midi_write_packed+0x40>
    27b2:	ldr	r5, [pc, #128]	; (2834 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    27b4:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    27b6:	add.w	r2, r1, r3, lsl #2
    27ba:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    27bc:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    27be:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    27c0:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    27c4:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    27c6:	bhi.n	27d2 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    27c8:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    27ca:	movs	r3, #0
    27cc:	strb	r3, [r7, #0]
    27ce:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    27d2:	movs	r3, #64	; 0x40
    27d4:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    27d6:	movs	r0, #4
    27d8:	bl	2e80 <usb_tx>
		tx_packet = NULL;
    27dc:	str	r4, [r6, #0]
    27de:	b.n	27ca <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    27e0:	ldr.w	r9, [pc, #84]	; 2838 <usb_midi_write_packed+0x98>
    27e4:	ldrb.w	r3, [r9]
    27e8:	cmp	r3, #0
    27ea:	beq.n	27ce <usb_midi_write_packed+0x2e>
    27ec:	ldr	r5, [pc, #68]	; (2834 <usb_midi_write_packed+0x94>)
    27ee:	movw	r4, #48001	; 0xbb81
    27f2:	b.n	2806 <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    27f4:	subs	r4, #1
    27f6:	beq.n	281e <usb_midi_write_packed+0x7e>
    27f8:	ldrb	r3, [r5, #0]
    27fa:	cbnz	r3, 281e <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    27fc:	bl	3984 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2800:	ldrb.w	r3, [r9]
    2804:	cbz	r3, 2826 <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2806:	movs	r0, #4
    2808:	bl	2d6c <usb_tx_packet_count>
    280c:	cmp	r0, #5
    280e:	bhi.n	27f4 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    2810:	bl	2ca4 <usb_malloc>
    2814:	mov	r1, r0
    2816:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    2818:	cmp	r0, #0
    281a:	beq.n	27f4 <usb_midi_write_packed+0x54>
    281c:	b.n	27b4 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    281e:	movs	r3, #1
    2820:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    2822:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2826:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    282a:	nop
    282c:	.word	0x1fff1888
    2830:	.word	0x1fff185c
    2834:	.word	0x1fff188c
    2838:	.word	0x1fff1998

0000283c <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    283c:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    283e:	ldr	r3, [pc, #32]	; (2860 <usb_midi_flush_output+0x24>)
    2840:	ldrb	r4, [r3, #0]
    2842:	cbnz	r4, 284e <usb_midi_flush_output+0x12>
    2844:	ldr	r5, [pc, #28]	; (2864 <usb_midi_flush_output+0x28>)
    2846:	ldr	r1, [r5, #0]
    2848:	cbz	r1, 284e <usb_midi_flush_output+0x12>
    284a:	ldrh	r3, [r1, #2]
    284c:	cbnz	r3, 2850 <usb_midi_flush_output+0x14>
    284e:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    2850:	lsls	r3, r3, #2
    2852:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2854:	movs	r0, #4
    2856:	bl	2e80 <usb_tx>
		tx_packet = NULL;
    285a:	str	r4, [r5, #0]
    285c:	pop	{r3, r4, r5, pc}
    285e:	nop
    2860:	.word	0x1fff185c
    2864:	.word	0x1fff1888

00002868 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2868:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    286c:	ldr	r6, [pc, #692]	; (2b24 <usb_midi_read+0x2bc>)
    286e:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2870:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2872:	cmp	r3, #0
    2874:	beq.w	299c <usb_midi_read+0x134>
    2878:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    287a:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    287c:	lsrs	r1, r2, #2
    287e:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    2882:	adds	r2, #4
	if (index < rx_packet->len) {
    2884:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2886:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    2888:	bcs.n	2910 <usb_midi_read+0xa8>
		rx_packet->index = index;
    288a:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    288c:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2890:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    2894:	ldr	r1, [pc, #656]	; (2b28 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2896:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    289a:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    289e:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    28a2:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    28a4:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    28a8:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    28aa:	bls.n	28e2 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    28ac:	subs	r3, r6, #2
    28ae:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    28b0:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    28b4:	bls.n	2954 <usb_midi_read+0xec>
    28b6:	cmp	r6, #5
    28b8:	beq.n	294c <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    28ba:	cmp	r6, #4
    28bc:	beq.w	2c08 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    28c0:	subs	r3, r6, #5
    28c2:	cmp	r3, #2
    28c4:	bls.n	29c6 <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    28c6:	cmp	r6, #15
    28c8:	bne.n	28e8 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    28ca:	cmp	r0, #247	; 0xf7
    28cc:	bhi.n	2954 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    28ce:	cmp	r0, #240	; 0xf0
    28d0:	beq.n	28d8 <usb_midi_read+0x70>
    28d2:	ldr	r3, [pc, #600]	; (2b2c <usb_midi_read+0x2c4>)
    28d4:	ldrh	r3, [r3, #0]
    28d6:	cbz	r3, 28e8 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    28d8:	bl	2758 <sysex_byte>
		}
	}
	return 0;
    28dc:	movs	r0, #0
    28de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    28e2:	cbz	r7, 28ee <usb_midi_read+0x86>
    28e4:	cmp	r5, r7
    28e6:	beq.n	28ee <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    28e8:	movs	r0, #0
    28ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    28ee:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    28f0:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    28f4:	beq.w	2a06 <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    28f8:	cmp	r6, #9
    28fa:	beq.n	2920 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    28fc:	cmp	r6, #10
    28fe:	bne.w	2a2a <usb_midi_read+0x1c2>
    2902:	cmp	r3, #10
    2904:	bne.n	28e8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    2906:	ldr	r3, [pc, #552]	; (2b30 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    2908:	ldr	r2, [pc, #552]	; (2b34 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    290a:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    290c:	movs	r1, #160	; 0xa0
    290e:	b.n	2a14 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    2910:	mov	r0, r3
    2912:	bl	2ce4 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2916:	movs	r0, #5
    2918:	bl	2d30 <usb_rx>
    291c:	str	r0, [r6, #0]
    291e:	b.n	288c <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    2920:	cmp	r3, #9
    2922:	bne.n	28e8 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    2924:	lsrs	r7, r4, #24
    2926:	beq.w	2c20 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    292a:	ldr	r3, [pc, #524]	; (2b38 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    292c:	ldr	r2, [pc, #516]	; (2b34 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    292e:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2930:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2932:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2936:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2938:	uxtb	r5, r5
    293a:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    293c:	cmp	r3, #0
    293e:	beq.w	2a7c <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2942:	mov	r2, r4
    2944:	mov	r1, r6
    2946:	mov	r0, r5
    2948:	blx	r3
    294a:	b.n	2a7c <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    294c:	cmp	r0, #240	; 0xf0
    294e:	bls.n	29d8 <usb_midi_read+0x170>
    2950:	cmp	r0, #247	; 0xf7
    2952:	beq.n	29d8 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    2954:	subs	r0, #241	; 0xf1
    2956:	cmp	r0, #14
    2958:	bhi.n	28e8 <usb_midi_read+0x80>
    295a:	add	r3, pc, #4	; (adr r3, 2960 <usb_midi_read+0xf8>)
    295c:	ldr.w	pc, [r3, r0, lsl #2]
    2960:	.word	0x00002b17
    2964:	.word	0x00002afb
    2968:	.word	0x00002ae9
    296c:	.word	0x000028e9
    2970:	.word	0x000028e9
    2974:	.word	0x00002adb
    2978:	.word	0x000028e9
    297c:	.word	0x00002bbb
    2980:	.word	0x000028e9
    2984:	.word	0x00002b85
    2988:	.word	0x00002b9f
    298c:	.word	0x00002ac3
    2990:	.word	0x000028e9
    2994:	.word	0x00002aab
    2998:	.word	0x00002a8f
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    299c:	ldr	r3, [pc, #412]	; (2b3c <usb_midi_read+0x2d4>)
    299e:	ldrb	r3, [r3, #0]
    29a0:	cmp	r3, #0
    29a2:	beq.n	28e8 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    29a4:	movs	r0, #5
    29a6:	bl	2d30 <usb_rx>
    29aa:	mov	r3, r0
    29ac:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    29ae:	cmp	r0, #0
    29b0:	beq.n	28e8 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    29b2:	ldrh	r5, [r0, #0]
    29b4:	cmp	r5, #0
    29b6:	bne.w	287a <usb_midi_read+0x12>
			usb_free(rx_packet);
    29ba:	bl	2ce4 <usb_free>
			rx_packet = NULL;
    29be:	str	r5, [r6, #0]
			return 0;
    29c0:	mov	r0, r5
    29c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    29c6:	bl	2758 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    29ca:	ubfx	r0, r4, #16, #8
    29ce:	bl	2758 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    29d2:	cmp	r6, #7
    29d4:	bne.n	29dc <usb_midi_read+0x174>
    29d6:	lsrs	r0, r4, #24
    29d8:	bl	2758 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    29dc:	ldr	r3, [pc, #332]	; (2b2c <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    29de:	ldr	r2, [pc, #352]	; (2b40 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    29e0:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    29e2:	ldr	r0, [pc, #352]	; (2b44 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    29e4:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    29e6:	ldr	r5, [pc, #352]	; (2b48 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    29e8:	ldr	r2, [pc, #328]	; (2b34 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    29ea:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    29ec:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    29ee:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    29f0:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    29f2:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    29f4:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    29f6:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    29f8:	cbz	r4, 2a3e <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    29fa:	movs	r2, #1
    29fc:	ldr	r0, [pc, #332]	; (2b4c <usb_midi_read+0x2e4>)
    29fe:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2a00:	movs	r0, #1
    2a02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2a06:	cmp	r3, #8
    2a08:	bne.w	28e8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    2a0c:	ldr	r3, [pc, #320]	; (2b50 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    2a0e:	ldr	r2, [pc, #292]	; (2b34 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    2a10:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    2a12:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    2a14:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2a18:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    2a1a:	uxtb	r5, r5
    2a1c:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    2a1e:	cbz	r3, 2a7c <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    2a20:	mov	r0, r5
    2a22:	mov	r2, r4
    2a24:	mov	r1, r6
    2a26:	blx	r3
    2a28:	b.n	2a7c <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    2a2a:	cmp	r6, #11
    2a2c:	bne.n	2a52 <usb_midi_read+0x1ea>
    2a2e:	cmp	r3, #11
    2a30:	bne.w	28e8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    2a34:	ldr	r3, [pc, #284]	; (2b54 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2a36:	ldr	r2, [pc, #252]	; (2b34 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    2a38:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2a3a:	movs	r1, #176	; 0xb0
    2a3c:	b.n	2a14 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    2a3e:	ldr	r3, [pc, #280]	; (2b58 <usb_midi_read+0x2f0>)
    2a40:	ldr	r3, [r3, #0]
    2a42:	cmp	r3, #0
    2a44:	beq.w	2c3e <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    2a48:	ldr	r0, [pc, #256]	; (2b4c <usb_midi_read+0x2e4>)
    2a4a:	blx	r3
		}
		return 1;
    2a4c:	movs	r0, #1
    2a4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    2a52:	cmp	r6, #12
    2a54:	bne.w	2c58 <usb_midi_read+0x3f0>
    2a58:	cmp	r3, #12
    2a5a:	bne.w	28e8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2a5e:	ldr	r3, [pc, #252]	; (2b5c <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2a60:	ldr	r2, [pc, #208]	; (2b34 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    2a62:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2a64:	movs	r1, #192	; 0xc0
    2a66:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    2a68:	uxtb	r5, r5
    2a6a:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2a6e:	cmp	r3, #0
    2a70:	beq.w	2c04 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2a74:	mov	r0, r5
    2a76:	mov	r1, r6
    2a78:	lsrs	r4, r4, #24
    2a7a:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2a7c:	ldr	r1, [pc, #224]	; (2b60 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    2a7e:	ldr	r2, [pc, #196]	; (2b44 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    2a80:	ldr	r3, [pc, #196]	; (2b48 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2a82:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    2a84:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    2a86:	strb	r4, [r3, #0]
		return 1;
    2a88:	movs	r0, #1
    2a8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    2a8e:	ldr	r3, [pc, #212]	; (2b64 <usb_midi_read+0x2fc>)
    2a90:	ldr	r3, [r3, #0]
    2a92:	cmp	r3, #0
    2a94:	beq.w	2c44 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    2a98:	blx	r3
    2a9a:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    2a9e:	ldr	r3, [pc, #148]	; (2b34 <usb_midi_read+0x2cc>)
    2aa0:	uxtb	r5, r5
    2aa2:	lsrs	r4, r4, #24
    2aa4:	strb.w	r8, [r3]
		goto return_message;
    2aa8:	b.n	2a7c <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    2aaa:	ldr	r3, [pc, #188]	; (2b68 <usb_midi_read+0x300>)
    2aac:	ldr	r3, [r3, #0]
    2aae:	cmp	r3, #0
    2ab0:	bne.n	2a98 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    2ab2:	ldr	r3, [pc, #184]	; (2b6c <usb_midi_read+0x304>)
    2ab4:	ldr	r3, [r3, #0]
    2ab6:	cbz	r3, 2ae2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    2ab8:	movs	r0, #254	; 0xfe
    2aba:	blx	r3
    2abc:	ubfx	r6, r4, #16, #8
    2ac0:	b.n	2a9e <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    2ac2:	ldr	r3, [pc, #172]	; (2b70 <usb_midi_read+0x308>)
    2ac4:	ldr	r3, [r3, #0]
    2ac6:	cmp	r3, #0
    2ac8:	bne.n	2a98 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    2aca:	ldr	r3, [pc, #160]	; (2b6c <usb_midi_read+0x304>)
    2acc:	ldr	r3, [r3, #0]
    2ace:	cbz	r3, 2ae2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    2ad0:	movs	r0, #252	; 0xfc
    2ad2:	blx	r3
    2ad4:	ubfx	r6, r4, #16, #8
    2ad8:	b.n	2a9e <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    2ada:	ldr	r3, [pc, #152]	; (2b74 <usb_midi_read+0x30c>)
    2adc:	ldr	r3, [r3, #0]
    2ade:	cmp	r3, #0
    2ae0:	bne.n	2a98 <usb_midi_read+0x230>
    2ae2:	ubfx	r6, r4, #16, #8
    2ae6:	b.n	2a9e <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2ae8:	ldr	r3, [pc, #140]	; (2b78 <usb_midi_read+0x310>)
    2aea:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    2aec:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2af0:	cmp	r3, #0
    2af2:	beq.n	2a9e <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    2af4:	mov	r0, r6
    2af6:	blx	r3
    2af8:	b.n	2a9e <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    2afa:	ldr	r3, [pc, #128]	; (2b7c <usb_midi_read+0x314>)
    2afc:	ldr	r2, [r3, #0]
    2afe:	cmp	r2, #0
    2b00:	beq.n	2ae2 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    2b02:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    2b04:	lsrs	r3, r4, #17
    2b06:	and.w	r0, r6, #127	; 0x7f
    2b0a:	and.w	r3, r3, #16256	; 0x3f80
    2b0e:	orrs	r0, r3
    2b10:	uxtb	r6, r6
    2b12:	blx	r2
    2b14:	b.n	2a9e <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    2b16:	ldr	r3, [pc, #104]	; (2b80 <usb_midi_read+0x318>)
    2b18:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    2b1a:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    2b1e:	cmp	r3, #0
    2b20:	bne.n	2af4 <usb_midi_read+0x28c>
    2b22:	b.n	2a9e <usb_midi_read+0x236>
    2b24:	.word	0x1fff1894
    2b28:	.word	0x1fff1d06
    2b2c:	.word	0x1fff1d02
    2b30:	.word	0x1fff1870
    2b34:	.word	0x1fff1d00
    2b38:	.word	0x1fff18a4
    2b3c:	.word	0x1fff1998
    2b40:	.word	0x1fff186c
    2b44:	.word	0x1fff1d04
    2b48:	.word	0x1fff1d05
    2b4c:	.word	0x1fff1d08
    2b50:	.word	0x1fff189c
    2b54:	.word	0x1fff18a0
    2b58:	.word	0x1fff1884
    2b5c:	.word	0x1fff1860
    2b60:	.word	0x1fff1d07
    2b64:	.word	0x1fff184c
    2b68:	.word	0x1fff1850
    2b6c:	.word	0x1fff1854
    2b70:	.word	0x1fff1890
    2b74:	.word	0x1fff1880
    2b78:	.word	0x1fff1898
    2b7c:	.word	0x1fff1868
    2b80:	.word	0x1fff187c
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    2b84:	ldr	r3, [pc, #252]	; (2c84 <usb_midi_read+0x41c>)
    2b86:	ldr	r3, [r3, #0]
    2b88:	cmp	r3, #0
    2b8a:	bne.n	2a98 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    2b8c:	ldr	r3, [pc, #248]	; (2c88 <usb_midi_read+0x420>)
    2b8e:	ldr	r3, [r3, #0]
    2b90:	cmp	r3, #0
    2b92:	beq.n	2ae2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    2b94:	movs	r0, #250	; 0xfa
    2b96:	blx	r3
    2b98:	ubfx	r6, r4, #16, #8
    2b9c:	b.n	2a9e <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    2b9e:	ldr	r3, [pc, #236]	; (2c8c <usb_midi_read+0x424>)
    2ba0:	ldr	r3, [r3, #0]
    2ba2:	cmp	r3, #0
    2ba4:	bne.w	2a98 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    2ba8:	ldr	r3, [pc, #220]	; (2c88 <usb_midi_read+0x420>)
    2baa:	ldr	r3, [r3, #0]
    2bac:	cmp	r3, #0
    2bae:	beq.n	2ae2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    2bb0:	movs	r0, #251	; 0xfb
    2bb2:	blx	r3
    2bb4:	ubfx	r6, r4, #16, #8
    2bb8:	b.n	2a9e <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    2bba:	ldr	r3, [pc, #212]	; (2c90 <usb_midi_read+0x428>)
    2bbc:	ldr	r3, [r3, #0]
    2bbe:	cmp	r3, #0
    2bc0:	bne.w	2a98 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    2bc4:	ldr	r3, [pc, #192]	; (2c88 <usb_midi_read+0x420>)
    2bc6:	ldr	r3, [r3, #0]
    2bc8:	cmp	r3, #0
    2bca:	beq.n	2ae2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    2bcc:	movs	r0, #248	; 0xf8
    2bce:	blx	r3
    2bd0:	ubfx	r6, r4, #16, #8
    2bd4:	b.n	2a9e <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    2bd6:	cmp	r3, #14
    2bd8:	bne.w	28e8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    2bdc:	ldr	r2, [pc, #180]	; (2c94 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2bde:	ldr	r3, [pc, #184]	; (2c98 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    2be0:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2be2:	movs	r1, #224	; 0xe0
    2be4:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    2be6:	cmp	r2, #0
    2be8:	beq.n	2c7a <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    2bea:	lsrs	r6, r4, #16
    2bec:	lsrs	r1, r4, #17
    2bee:	and.w	r3, r6, #127	; 0x7f
    2bf2:	and.w	r1, r1, #16256	; 0x3f80
    2bf6:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    2bf8:	uxtb	r5, r5
    2bfa:	sub.w	r1, r1, #8192	; 0x2000
    2bfe:	mov	r0, r5
    2c00:	blx	r2
    2c02:	uxtb	r6, r6
    2c04:	lsrs	r4, r4, #24
    2c06:	b.n	2a7c <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    2c08:	bl	2758 <sysex_byte>
		sysex_byte(n >> 16);
    2c0c:	ubfx	r0, r4, #16, #8
    2c10:	bl	2758 <sysex_byte>
		sysex_byte(n >> 24);
    2c14:	lsrs	r0, r4, #24
    2c16:	bl	2758 <sysex_byte>
		return 0;
    2c1a:	movs	r0, #0
    2c1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2c20:	ldr	r3, [pc, #120]	; (2c9c <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2c22:	ldr	r2, [pc, #116]	; (2c98 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    2c24:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2c26:	movs	r1, #128	; 0x80
    2c28:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2c2a:	uxtb	r5, r5
    2c2c:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2c30:	cbz	r3, 2c54 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2c32:	mov	r1, r6
    2c34:	mov	r0, r5
    2c36:	mov	r2, r7
    2c38:	blx	r3
    2c3a:	mov	r4, r7
    2c3c:	b.n	2a7c <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2c3e:	movs	r0, #1
    2c40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    2c44:	ldr	r3, [pc, #64]	; (2c88 <usb_midi_read+0x420>)
    2c46:	ldr	r3, [r3, #0]
    2c48:	cmp	r3, #0
    2c4a:	beq.w	2ae2 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    2c4e:	movs	r0, #255	; 0xff
    2c50:	blx	r3
    2c52:	b.n	2ae2 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2c54:	mov	r4, r3
    2c56:	b.n	2a7c <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    2c58:	cmp	r6, #13
    2c5a:	bne.n	2bd6 <usb_midi_read+0x36e>
    2c5c:	cmp	r3, #13
    2c5e:	bne.w	28e8 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2c62:	ldr	r3, [pc, #60]	; (2ca0 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2c64:	ldr	r2, [pc, #48]	; (2c98 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    2c66:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2c68:	movs	r1, #208	; 0xd0
    2c6a:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2c6c:	uxtb	r5, r5
    2c6e:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2c72:	cmp	r3, #0
    2c74:	bne.w	2a74 <usb_midi_read+0x20c>
    2c78:	b.n	2c04 <usb_midi_read+0x39c>
    2c7a:	ubfx	r6, r4, #16, #8
    2c7e:	uxtb	r5, r5
    2c80:	lsrs	r4, r4, #24
    2c82:	b.n	2a7c <usb_midi_read+0x214>
    2c84:	.word	0x1fff1878
    2c88:	.word	0x1fff1854
    2c8c:	.word	0x1fff1858
    2c90:	.word	0x1fff1848
    2c94:	.word	0x1fff1864
    2c98:	.word	0x1fff1d00
    2c9c:	.word	0x1fff189c
    2ca0:	.word	0x1fff1874

00002ca4 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    2ca4:	cpsid	i
	avail = usb_buffer_available;
    2ca6:	ldr	r0, [pc, #52]	; (2cdc <usb_malloc+0x38>)
    2ca8:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    2caa:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    2cae:	cmp	r3, #29
    2cb0:	bgt.n	2cd4 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    2cb2:	mov.w	r1, #2147483648	; 0x80000000
    2cb6:	lsrs	r1, r3
    2cb8:	bic.w	r2, r2, r1
    2cbc:	str	r2, [r0, #0]
	__enable_irq();
    2cbe:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    2cc0:	ldr	r0, [pc, #28]	; (2ce0 <usb_malloc+0x3c>)
    2cc2:	add.w	r3, r3, r3, lsl #3
    2cc6:	lsls	r3, r3, #3
    2cc8:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    2cca:	movs	r1, #0
    2ccc:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    2cce:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    2cd0:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    2cd2:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    2cd4:	cpsie	i
		return NULL;
    2cd6:	movs	r0, #0
    2cd8:	bx	lr
    2cda:	nop
    2cdc:	.word	0x1fff0c5c
    2ce0:	.word	0x1fff03d0

00002ce4 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    2ce4:	ldr	r3, [pc, #52]	; (2d1c <usb_free+0x38>)
    2ce6:	ldr	r2, [pc, #56]	; (2d20 <usb_free+0x3c>)
    2ce8:	subs	r3, r0, r3
    2cea:	umull	r2, r3, r2, r3
    2cee:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    2cf0:	cmp	r3, #29
    2cf2:	bhi.n	2d0e <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2cf4:	ldr	r2, [pc, #44]	; (2d24 <usb_free+0x40>)
    2cf6:	ldrb	r2, [r2, #0]
    2cf8:	cbnz	r2, 2d10 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    2cfa:	cpsid	i
	usb_buffer_available |= mask;
    2cfc:	ldr	r0, [pc, #40]	; (2d28 <usb_free+0x44>)
    2cfe:	mov.w	r1, #2147483648	; 0x80000000
    2d02:	ldr	r2, [r0, #0]
    2d04:	lsr.w	r3, r1, r3
    2d08:	orrs	r2, r3
    2d0a:	str	r2, [r0, #0]
	__enable_irq();
    2d0c:	cpsie	i
    2d0e:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2d10:	ldr	r2, [pc, #24]	; (2d2c <usb_free+0x48>)
    2d12:	ldrb	r2, [r2, #0]
    2d14:	cmp	r2, #0
    2d16:	beq.n	2cfa <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    2d18:	b.w	2d98 <usb_rx_memory>
    2d1c:	.word	0x1fff03d0
    2d20:	.word	0x38e38e39
    2d24:	.word	0x1fff198d
    2d28:	.word	0x1fff0c5c
    2d2c:	.word	0x1fff1998

00002d30 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    2d30:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2d32:	cmp	r3, #4
    2d34:	bhi.n	2d60 <usb_rx+0x30>
	__disable_irq();
    2d36:	cpsid	i
	ret = rx_first[endpoint];
    2d38:	ldr	r1, [pc, #40]	; (2d64 <usb_rx+0x34>)
    2d3a:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    2d3e:	cbz	r0, 2d5c <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2d40:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2d42:	ldr	r4, [pc, #36]	; (2d68 <usb_rx+0x38>)
    2d44:	ldrh	r5, [r0, #0]
    2d46:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    2d4a:	ldr	r6, [r0, #4]
    2d4c:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2d50:	subs	r2, r2, r5
    2d52:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    2d56:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2d58:	pop	{r4, r5, r6}
    2d5a:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2d5c:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2d5e:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2d60:	movs	r0, #0
    2d62:	bx	lr
    2d64:	.word	0x1fff1904
    2d68:	.word	0x1fff1e2c

00002d6c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2d6c:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2d6e:	cmp	r0, #4
    2d70:	bhi.n	2d8a <usb_tx_packet_count+0x1e>
	__disable_irq();
    2d72:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    2d74:	ldr	r3, [pc, #28]	; (2d94 <usb_tx_packet_count+0x28>)
    2d76:	ldr.w	r3, [r3, r0, lsl #2]
    2d7a:	cbz	r3, 2d8e <usb_tx_packet_count+0x22>
    2d7c:	movs	r0, #0
    2d7e:	ldr	r3, [r3, #4]
    2d80:	adds	r0, #1
    2d82:	cmp	r3, #0
    2d84:	bne.n	2d7e <usb_tx_packet_count+0x12>
	__enable_irq();
    2d86:	cpsie	i
	return count;
    2d88:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2d8a:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2d8c:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2d8e:	mov	r0, r3
    2d90:	b.n	2d86 <usb_tx_packet_count+0x1a>
    2d92:	nop
    2d94:	.word	0x1fff195c

00002d98 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2d98:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2d9a:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2d9c:	ldr	r2, [pc, #204]	; (2e6c <usb_rx_memory+0xd4>)
    2d9e:	ldrb	r3, [r2, #0]
    2da0:	lsls	r3, r3, #28
    2da2:	bpl.n	2db2 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2da4:	ldr	r3, [pc, #200]	; (2e70 <usb_rx_memory+0xd8>)
    2da6:	ldr	r1, [r3, #32]
    2da8:	cmp	r1, #0
    2daa:	beq.n	2e34 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2dac:	ldr	r1, [r3, #40]	; 0x28
    2dae:	cmp	r1, #0
    2db0:	beq.n	2e50 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2db2:	ldrb	r3, [r2, #1]
    2db4:	lsls	r5, r3, #28
    2db6:	bpl.n	2dc6 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2db8:	ldr	r3, [pc, #180]	; (2e70 <usb_rx_memory+0xd8>)
    2dba:	ldr	r1, [r3, #64]	; 0x40
    2dbc:	cmp	r1, #0
    2dbe:	beq.n	2e5c <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2dc0:	ldr	r1, [r3, #72]	; 0x48
    2dc2:	cmp	r1, #0
    2dc4:	beq.n	2e54 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2dc6:	ldrb	r3, [r2, #2]
    2dc8:	lsls	r4, r3, #28
    2dca:	bpl.n	2dda <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2dcc:	ldr	r3, [pc, #160]	; (2e70 <usb_rx_memory+0xd8>)
    2dce:	ldr	r1, [r3, #96]	; 0x60
    2dd0:	cmp	r1, #0
    2dd2:	beq.n	2e60 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2dd4:	ldr	r1, [r3, #104]	; 0x68
    2dd6:	cmp	r1, #0
    2dd8:	beq.n	2e58 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2dda:	ldrb	r3, [r2, #3]
    2ddc:	lsls	r1, r3, #28
    2dde:	bpl.n	2df0 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2de0:	ldr	r3, [pc, #140]	; (2e70 <usb_rx_memory+0xd8>)
    2de2:	ldr.w	r1, [r3, #128]	; 0x80
    2de6:	cmp	r1, #0
    2de8:	beq.n	2e68 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2dea:	ldr.w	r1, [r3, #136]	; 0x88
    2dee:	cbz	r1, 2e16 <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2df0:	ldrb	r3, [r2, #4]
    2df2:	lsls	r3, r3, #28
    2df4:	bpl.n	2e08 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2df6:	ldr	r3, [pc, #120]	; (2e70 <usb_rx_memory+0xd8>)
    2df8:	ldr.w	r2, [r3, #160]	; 0xa0
    2dfc:	cmp	r2, #0
    2dfe:	beq.n	2e64 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2e00:	ldr.w	r2, [r3, #168]	; 0xa8
    2e04:	movs	r4, #21
    2e06:	cbz	r2, 2e18 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2e08:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    2e0a:	ldr	r3, [pc, #104]	; (2e74 <usb_rx_memory+0xdc>)
    2e0c:	movs	r2, #0
    2e0e:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2e10:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2e12:	b.w	2ce4 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2e16:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2e18:	ldr	r1, [pc, #88]	; (2e74 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2e1a:	ldr	r5, [pc, #92]	; (2e78 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    2e1c:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2e1e:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2e22:	add.w	r3, r3, r4, lsl #3
    2e26:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2e28:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2e2a:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2e2c:	strb	r2, [r1, #0]
				__enable_irq();
    2e2e:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2e30:	pop	{r4, r5}
    2e32:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2e34:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2e36:	ldr	r4, [pc, #60]	; (2e74 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2e38:	ldr	r5, [pc, #64]	; (2e7c <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    2e3a:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2e3c:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2e40:	add.w	r3, r3, r2, lsl #3
    2e44:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2e46:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2e48:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2e4a:	strb	r2, [r4, #0]
				__enable_irq();
    2e4c:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2e4e:	b.n	2e30 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2e50:	movs	r4, #5
    2e52:	b.n	2e18 <usb_rx_memory+0x80>
    2e54:	movs	r4, #9
    2e56:	b.n	2e18 <usb_rx_memory+0x80>
    2e58:	movs	r4, #13
    2e5a:	b.n	2e18 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2e5c:	movs	r2, #8
    2e5e:	b.n	2e36 <usb_rx_memory+0x9e>
    2e60:	movs	r2, #12
    2e62:	b.n	2e36 <usb_rx_memory+0x9e>
    2e64:	movs	r2, #20
    2e66:	b.n	2e36 <usb_rx_memory+0x9e>
    2e68:	movs	r2, #16
    2e6a:	b.n	2e36 <usb_rx_memory+0x9e>
    2e6c:	.word	0x00005110
    2e70:	.word	0x1fff0000
    2e74:	.word	0x1fff198d
    2e78:	.word	0x004000c8
    2e7c:	.word	0x00400088

00002e80 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2e80:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2e82:	cmp	r3, #4
    2e84:	bhi.n	2ec2 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2e86:	ldr	r2, [pc, #108]	; (2ef4 <usb_tx+0x74>)
    2e88:	lsls	r0, r0, #5
    2e8a:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2e8e:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2e90:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    2e92:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    2e94:	ldr	r4, [pc, #96]	; (2ef8 <usb_tx+0x78>)
    2e96:	ldrb	r2, [r4, r3]
    2e98:	cmp	r2, #3
    2e9a:	bhi.n	2ed4 <usb_tx+0x54>
    2e9c:	tbb	[pc, r2]
    2ea0:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    2ea4:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2ea6:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2ea8:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2eaa:	tst.w	r0, #8
    2eae:	ite	ne
    2eb0:	movne	r3, #200	; 0xc8
    2eb2:	moveq	r3, #136	; 0x88
    2eb4:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2eb8:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2eba:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2ebc:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2ebe:	cpsie	i
}
    2ec0:	pop	{r4, r5}
    2ec2:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    2ec4:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    2ec6:	movs	r2, #2
		break;
    2ec8:	b.n	2ea6 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    2eca:	movs	r2, #5
    2ecc:	b.n	2ea6 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    2ece:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2ed0:	movs	r2, #4
		break;
    2ed2:	b.n	2ea6 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    2ed4:	ldr	r2, [pc, #36]	; (2efc <usb_tx+0x7c>)
    2ed6:	ldr.w	r0, [r2, r3, lsl #2]
    2eda:	cbz	r0, 2eec <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    2edc:	ldr	r2, [pc, #32]	; (2f00 <usb_tx+0x80>)
    2ede:	ldr.w	r0, [r2, r3, lsl #2]
    2ee2:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    2ee4:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    2ee8:	cpsie	i
		return;
    2eea:	b.n	2ec0 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    2eec:	str.w	r1, [r2, r3, lsl #2]
    2ef0:	ldr	r2, [pc, #12]	; (2f00 <usb_tx+0x80>)
    2ef2:	b.n	2ee4 <usb_tx+0x64>
    2ef4:	.word	0x1fff0000
    2ef8:	.word	0x1fff199c
    2efc:	.word	0x1fff195c
    2f00:	.word	0x1fff1970

00002f04 <usb_isr>:
}



void usb_isr(void)
{
    2f04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2f08:	ldr.w	fp, [pc, #776]	; 3214 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2f0c:	ldr.w	sl, [pc, #776]	; 3218 <usb_isr+0x314>
}



void usb_isr(void)
{
    2f10:	sub	sp, #28
    2f12:	b.n	2f9e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2f14:	ldr	r7, [pc, #680]	; (31c0 <usb_isr+0x2bc>)
    2f16:	mov.w	r8, r3, lsr #2
    2f1a:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2f1e:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2f20:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2f24:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2f28:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2f2a:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2f2e:	and.w	r4, r3, #255	; 0xff
    2f32:	cmp	r3, #0
    2f34:	bne.w	3138 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2f38:	ldr.w	r3, [r7, r8, lsl #3]
    2f3c:	lsrs	r3, r3, #16
    2f3e:	uxth	r1, r3
    2f40:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2f44:	cmp	r3, #0
    2f46:	beq.w	3126 <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    2f4a:	ldr	r3, [pc, #632]	; (31c4 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2f4c:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2f50:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2f54:	ldr.w	r2, [r3, r6, lsl #2]
    2f58:	cmp	r2, #0
    2f5a:	beq.w	33c8 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2f5e:	ldr	r5, [pc, #616]	; (31c8 <usb_isr+0x2c4>)
    2f60:	ldr.w	r3, [r5, r6, lsl #2]
    2f64:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    2f66:	ldr	r4, [pc, #612]	; (31cc <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2f68:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2f6c:	ldrh.w	r3, [r4, r6, lsl #1]
    2f70:	add	r1, r3
    2f72:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    2f76:	bl	2ca4 <usb_malloc>
					if (packet) {
    2f7a:	cmp	r0, #0
    2f7c:	beq.w	33ba <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2f80:	ldr	r2, [pc, #588]	; (31d0 <usb_isr+0x2cc>)
    2f82:	ldr	r3, [pc, #592]	; (31d4 <usb_isr+0x2d0>)
    2f84:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2f88:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2f8c:	it	ne
    2f8e:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2f90:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2f94:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2f98:	movs	r3, #8
    2f9a:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2f9e:	ldrb.w	r4, [fp]
    2fa2:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2fa4:	lsls	r0, r4, #29
    2fa6:	bpl.n	2fe2 <usb_isr+0xde>
		if (usb_configuration) {
    2fa8:	ldr	r3, [pc, #556]	; (31d8 <usb_isr+0x2d4>)
    2faa:	ldrb	r3, [r3, #0]
    2fac:	cbz	r3, 2fdc <usb_isr+0xd8>
			t = usb_reboot_timer;
    2fae:	ldr	r1, [pc, #556]	; (31dc <usb_isr+0x2d8>)
    2fb0:	ldrb	r2, [r1, #0]
			if (t) {
    2fb2:	and.w	r3, r2, #255	; 0xff
    2fb6:	cbz	r2, 2fc2 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    2fb8:	subs	r3, #1
    2fba:	uxtb	r3, r3
    2fbc:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2fbe:	cbnz	r3, 2fc2 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2fc0:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    2fc2:	ldr	r1, [pc, #540]	; (31e0 <usb_isr+0x2dc>)
    2fc4:	ldrb	r2, [r1, #0]
			if (t) {
    2fc6:	and.w	r3, r2, #255	; 0xff
    2fca:	cbz	r2, 2fd8 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    2fcc:	subs	r3, #1
    2fce:	uxtb	r3, r3
    2fd0:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    2fd2:	cmp	r3, #0
    2fd4:	beq.w	3366 <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    2fd8:	bl	283c <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2fdc:	movs	r3, #4
    2fde:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2fe2:	and.w	r3, r4, #8
    2fe6:	and.w	r2, r3, #255	; 0xff
    2fea:	cmp	r3, #0
    2fec:	beq.w	3180 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    2ff0:	ldrb.w	r3, [sl]
    2ff4:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    2ff6:	lsrs	r6, r3, #4
    2ff8:	bne.n	2f14 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2ffa:	lsrs	r4, r3, #2
    2ffc:	ldr.w	r9, [pc, #448]	; 31c0 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3000:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    3004:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3008:	ubfx	r2, r2, #2, #4
    300c:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    300e:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3010:	cmp	r2, #12
    3012:	bhi.w	311e <usb_isr+0x21a>
    3016:	tbb	[pc, r2]
    301a:	.short	0x7878
    301c:	.word	0x82828282
    3020:	.word	0x82438282
    3024:	.short	0x8282
    3026:	.byte	0x07
    3027:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    3028:	ldr	r0, [r1, #0]
    302a:	ldr	r5, [pc, #440]	; (31e4 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    302c:	ldr	r3, [pc, #416]	; (31d0 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    302e:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3030:	ldr	r7, [pc, #436]	; (31e8 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3032:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3036:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3038:	ldr	r6, [pc, #432]	; (31ec <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    303a:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    303c:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3040:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    3042:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3044:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3046:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    304a:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    304c:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    3050:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3054:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3056:	bhi.w	321c <usb_isr+0x318>
    305a:	cmp.w	r1, #1664	; 0x680
    305e:	bcs.w	3688 <usb_isr+0x784>
    3062:	cmp.w	r1, #258	; 0x102
    3066:	beq.w	3436 <usb_isr+0x532>
    306a:	bhi.w	3400 <usb_isr+0x4fc>
    306e:	cmp	r1, #128	; 0x80
    3070:	beq.w	36bc <usb_isr+0x7b8>
    3074:	cmp	r1, #130	; 0x82
    3076:	bne.w	3442 <usb_isr+0x53e>
    307a:	ldrh	r1, [r5, #4]
    307c:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    3080:	cmp	r1, #5
    3082:	bhi.w	3442 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3086:	ldr	r3, [pc, #360]	; (31f0 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3088:	ldr	r4, [pc, #360]	; (31f4 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    308a:	lsls	r1, r1, #2
    308c:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    308e:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3090:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3092:	ldrb	r2, [r3, #0]
    3094:	lsls	r3, r2, #30
    3096:	bpl.w	37cc <usb_isr+0x8c8>
    309a:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    309c:	movs	r0, #2
    309e:	b.n	34ca <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    30a0:	ldr	r7, [pc, #324]	; (31e8 <usb_isr+0x2e4>)
    30a2:	ldr	r2, [r7, #0]
		if (data) {
    30a4:	cbz	r2, 30f4 <usb_isr+0x1f0>
			size = ep0_tx_len;
    30a6:	ldr	r3, [pc, #336]	; (31f8 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30a8:	ldr	r6, [pc, #320]	; (31ec <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    30aa:	ldr	r1, [pc, #336]	; (31fc <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    30ac:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30ae:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    30b0:	ldrb	r5, [r1, #0]
    30b2:	cmp	r0, #64	; 0x40
    30b4:	mov	lr, r0
    30b6:	orr.w	r8, r5, #2
    30ba:	it	cs
    30bc:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30c0:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    30c2:	eor.w	r4, r4, #1
    30c6:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    30c8:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30cc:	ite	eq
    30ce:	moveq	r4, #136	; 0x88
    30d0:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    30d2:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    30d6:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    30d8:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30dc:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    30e0:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    30e2:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    30e4:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    30e8:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    30ea:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    30ec:	cmp	r0, #0
    30ee:	beq.w	325e <usb_isr+0x35a>
    30f2:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    30f4:	ldr	r3, [pc, #236]	; (31e4 <usb_isr+0x2e0>)
    30f6:	ldrh	r2, [r3, #0]
    30f8:	cmp.w	r2, #1280	; 0x500
    30fc:	bne.n	311e <usb_isr+0x21a>
			setup.bRequest = 0;
    30fe:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3100:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    3102:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3104:	ldr	r3, [pc, #248]	; (3200 <usb_isr+0x2fc>)
    3106:	strb	r2, [r3, #0]
    3108:	b.n	311e <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    310a:	ldr	r2, [pc, #216]	; (31e4 <usb_isr+0x2e0>)
    310c:	ldrh	r0, [r2, #0]
    310e:	movw	r2, #8225	; 0x2021
    3112:	cmp	r0, r2
    3114:	beq.w	3268 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3118:	ldr	r2, [pc, #180]	; (31d0 <usb_isr+0x2cc>)
    311a:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    311e:	ldr	r2, [pc, #228]	; (3204 <usb_isr+0x300>)
    3120:	movs	r3, #1
    3122:	strb	r3, [r2, #0]
    3124:	b.n	2f98 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3126:	ldr	r2, [pc, #168]	; (31d0 <usb_isr+0x2cc>)
    3128:	ldr	r3, [pc, #168]	; (31d4 <usb_isr+0x2d0>)
    312a:	tst.w	r9, #8
    312e:	it	ne
    3130:	movne	r3, r2
    3132:	str.w	r3, [r7, r8, lsl #3]
    3136:	b.n	2f98 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    3138:	bl	2ce4 <usb_free>
				packet = tx_first[endpoint];
    313c:	ldr	r2, [pc, #200]	; (3208 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    313e:	ldr	r1, [pc, #204]	; (320c <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    3140:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    3144:	cmp	r3, #0
    3146:	beq.w	33d0 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    314a:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    314c:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    314e:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    3152:	add.w	r2, r3, #8
    3156:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    315a:	cmp	r4, #3
    315c:	bhi.n	316a <usb_isr+0x266>
    315e:	tbb	[pc, r4]
    3162:	.short	0x022c
    3164:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    3166:	movs	r2, #2
    3168:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    316a:	ldrh	r2, [r3, #0]
    316c:	tst.w	r9, #8
    3170:	ite	eq
    3172:	moveq	r3, #136	; 0x88
    3174:	movne	r3, #200	; 0xc8
    3176:	orr.w	r3, r3, r2, lsl #16
    317a:	str.w	r3, [r7, r8, lsl #3]
    317e:	b.n	2f98 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    3180:	lsls	r0, r4, #31
    3182:	bmi.w	336c <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    3186:	lsls	r1, r4, #24
    3188:	bmi.w	33ec <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    318c:	lsls	r2, r4, #30
    318e:	bpl.n	319e <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    3190:	ldr	r2, [pc, #124]	; (3210 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3192:	ldr	r1, [pc, #128]	; (3214 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3194:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3196:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3198:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    319a:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    319c:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    319e:	lsls	r3, r4, #27
    31a0:	bpl.n	31a8 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    31a2:	ldr	r3, [pc, #112]	; (3214 <usb_isr+0x310>)
    31a4:	movs	r2, #16
    31a6:	strb	r2, [r3, #0]
	}

}
    31a8:	add	sp, #28
    31aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    31ae:	movs	r2, #4
    31b0:	strb	r2, [r1, r6]
						break;
    31b2:	b.n	316a <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    31b4:	movs	r2, #5
    31b6:	strb	r2, [r1, r6]
						break;
    31b8:	b.n	316a <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    31ba:	movs	r2, #3
    31bc:	strb	r2, [r1, r6]
						break;
    31be:	b.n	316a <usb_isr+0x266>
    31c0:	.word	0x1fff0000
    31c4:	.word	0x1fff1904
    31c8:	.word	0x1fff18ac
    31cc:	.word	0x1fff1e2c
    31d0:	.word	0x004000c8
    31d4:	.word	0x00400088
    31d8:	.word	0x1fff1998
    31dc:	.word	0x1fff1919
    31e0:	.word	0x1fff182c
    31e4:	.word	0x1fff1984
    31e8:	.word	0x1fff18a8
    31ec:	.word	0x1fff1918
    31f0:	.word	0x400720c0
    31f4:	.word	0x1fff1990
    31f8:	.word	0x1fff18c0
    31fc:	.word	0x1fff198c
    3200:	.word	0x40072098
    3204:	.word	0x40072094
    3208:	.word	0x1fff195c
    320c:	.word	0x1fff199c
    3210:	.word	0x40072088
    3214:	.word	0x40072080
    3218:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    321c:	movw	r4, #8225	; 0x2021
    3220:	cmp	r1, r4
    3222:	beq.w	335e <usb_isr+0x45a>
    3226:	bhi.n	32bc <usb_isr+0x3b8>
    3228:	cmp.w	r1, #2176	; 0x880
    322c:	beq.w	34c2 <usb_isr+0x5be>
    3230:	cmp.w	r1, #2304	; 0x900
    3234:	bne.w	3442 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    3238:	ldr	r2, [pc, #712]	; (3504 <usb_isr+0x600>)
    323a:	ldr	r4, [pc, #716]	; (3508 <usb_isr+0x604>)
    323c:	ldrb	r1, [r5, #2]
    323e:	strb	r1, [r2, #0]
    3240:	add.w	r5, r4, #160	; 0xa0
    3244:	b.n	324e <usb_isr+0x34a>
    3246:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3248:	cmp	r5, r4
    324a:	beq.w	3560 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    324e:	ldr	r3, [r4, #32]
    3250:	lsls	r1, r3, #24
    3252:	bpl.n	3246 <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    3254:	ldr	r0, [r4, #36]	; 0x24
    3256:	subs	r0, #8
    3258:	bl	2ce4 <usb_free>
    325c:	b.n	3246 <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    325e:	cmp.w	lr, #64	; 0x40
    3262:	it	ne
    3264:	movne	r2, #0
    3266:	b.n	30f2 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3268:	ldr	r2, [pc, #672]	; (350c <usb_isr+0x608>)
    326a:	ldrb	r5, [r1, #0]
    326c:	ldrb	r0, [r1, #1]
    326e:	strb	r5, [r2, #0]
    3270:	strb	r0, [r2, #1]
    3272:	ldrb	r5, [r1, #2]
    3274:	ldrb	r0, [r1, #3]
    3276:	strb	r5, [r2, #2]
    3278:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    327a:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    327c:	ldrb	r5, [r1, #4]
    327e:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3280:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3282:	ldrb	r5, [r1, #5]
    3284:	ldrb	r1, [r1, #6]
    3286:	strb	r5, [r2, #5]
    3288:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    328a:	beq.w	34ba <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    328e:	ldr	r1, [pc, #640]	; (3510 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3290:	ldr	r6, [pc, #640]	; (3514 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3292:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3294:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3296:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    329a:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    329c:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    32a0:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32a2:	ite	eq
    32a4:	moveq	r1, #136	; 0x88
    32a6:	movne	r1, #200	; 0xc8
    32a8:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    32ac:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    32b0:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    32b4:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    32b6:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    32b8:	str	r1, [r2, #4]
    32ba:	b.n	3118 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    32bc:	movw	r4, #8737	; 0x2221
    32c0:	cmp	r1, r4
    32c2:	bne.w	36d6 <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    32c6:	ldr.w	ip, [pc, #656]	; 3558 <usb_isr+0x654>
    32ca:	ldr	r3, [pc, #588]	; (3518 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    32cc:	ldr	r1, [pc, #588]	; (351c <usb_isr+0x618>)
    32ce:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    32d0:	ldr.w	r5, [ip]
    32d4:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    32d6:	str	r0, [sp, #4]
    32d8:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    32da:	movs	r0, #0
    32dc:	str	r0, [sp, #8]
    32de:	mov	r8, r0
    32e0:	mov	ip, r0
    32e2:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    32e4:	ldr	r1, [pc, #552]	; (3510 <usb_isr+0x60c>)
    32e6:	ldrb	r5, [r1, #0]
    32e8:	orr.w	lr, r5, #2
    32ec:	add.w	r3, r9, lr, lsl #3
    32f0:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32f2:	ldr	r3, [sp, #4]
    32f4:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    32f6:	ldr	r3, [sp, #12]
    32f8:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32fa:	ite	eq
    32fc:	moveq	r4, #136	; 0x88
    32fe:	movne	r4, #200	; 0xc8
    3300:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3304:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3308:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    330c:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    330e:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3310:	ldr.w	lr, [pc, #500]	; 3508 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    3314:	ldr	r3, [pc, #508]	; (3514 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    3316:	ldr.w	r8, [pc, #504]	; 3510 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    331a:	cmp	r0, #0
    331c:	bne.w	3450 <usb_isr+0x54c>
    3320:	cmp.w	ip, #64	; 0x40
    3324:	bne.n	335e <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3326:	orr.w	ip, r4, #2
    332a:	add.w	r3, r9, ip, lsl #3
    332e:	ldr	r4, [sp, #8]
    3330:	ldr.w	lr, [pc, #468]	; 3508 <usb_isr+0x604>
    3334:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3336:	cmp	r2, #0
    3338:	bne.w	347c <usb_isr+0x578>
    333c:	lsls	r2, r0, #16
    333e:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    3342:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3346:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    334a:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    334c:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    334e:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3350:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3352:	cmp	r0, #64	; 0x40
    3354:	bne.n	335e <usb_isr+0x45a>
    3356:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3358:	ldr	r2, [pc, #452]	; (3520 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    335a:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    335c:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    335e:	ldr	r2, [pc, #452]	; (3524 <usb_isr+0x620>)
    3360:	movs	r3, #1
    3362:	strb	r3, [r2, #0]
    3364:	b.n	311e <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    3366:	bl	20c4 <usb_serial_flush_callback>
    336a:	b.n	2fd8 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    336c:	ldr	r3, [pc, #408]	; (3508 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    336e:	ldr	r0, [pc, #436]	; (3524 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    3370:	ldr	r1, [pc, #412]	; (3510 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    3372:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3374:	mov.w	lr, #2
    3378:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    337c:	ldr	r7, [pc, #424]	; (3528 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    337e:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3380:	ldr	r1, [pc, #424]	; (352c <usb_isr+0x628>)
    3382:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3384:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3386:	ldr	r6, [pc, #424]	; (3530 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    3388:	ldr	r5, [pc, #424]	; (3534 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    338a:	ldr	r4, [pc, #428]	; (3538 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    338c:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    338e:	movs	r1, #13
    3390:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3392:	movs	r1, #255	; 0xff
    3394:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3396:	ldr.w	lr, [pc, #452]	; 355c <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    339a:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    339c:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    339e:	ldr	r5, [pc, #412]	; (353c <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    33a0:	ldr	r2, [pc, #412]	; (3540 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    33a2:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    33a6:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    33a8:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    33aa:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    33ae:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    33b0:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    33b2:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    33b4:	add	sp, #28
    33b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    33ba:	ldr	r2, [pc, #392]	; (3544 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    33bc:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    33c0:	ldrb	r3, [r2, #0]
    33c2:	adds	r3, #1
    33c4:	strb	r3, [r2, #0]
    33c6:	b.n	2f98 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    33c8:	str.w	r0, [r3, r6, lsl #2]
    33cc:	ldr	r5, [pc, #376]	; (3548 <usb_isr+0x644>)
    33ce:	b.n	2f66 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    33d0:	ldrb	r3, [r1, r6]
    33d2:	cmp	r3, #3
    33d4:	bhi.n	34ac <usb_isr+0x5a8>
    33d6:	add	r2, pc, #4	; (adr r2, 33dc <usb_isr+0x4d8>)
    33d8:	ldr.w	pc, [r2, r3, lsl #2]
    33dc:	.word	0x00002f99
    33e0:	.word	0x00002f99
    33e4:	.word	0x00003431
    33e8:	.word	0x0000342b
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    33ec:	ldr	r1, [pc, #312]	; (3528 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    33ee:	ldr	r3, [pc, #324]	; (3534 <usb_isr+0x630>)
    33f0:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    33f2:	movs	r0, #13
    33f4:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    33f6:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    33f8:	lsls	r2, r4, #30
    33fa:	bpl.w	319e <usb_isr+0x29a>
    33fe:	b.n	3190 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3400:	movw	r2, #770	; 0x302
    3404:	cmp	r1, r2
    3406:	bne.w	36c6 <usb_isr+0x7c2>
    340a:	ldrh	r1, [r5, #4]
    340c:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3410:	cmp	r1, #5
    3412:	bhi.n	3442 <usb_isr+0x53e>
    3414:	ldrh	r2, [r5, #2]
    3416:	cbnz	r2, 3442 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    3418:	ldr	r4, [pc, #268]	; (3528 <usb_isr+0x624>)
    341a:	str	r0, [sp, #4]
    341c:	lsls	r1, r1, #2
    341e:	add	r4, r1
    3420:	ldrb	r1, [r4, #0]
    3422:	orr.w	r1, r1, #2
    3426:	strb	r1, [r4, #0]
    3428:	b.n	32da <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    342a:	movs	r3, #1
    342c:	strb	r3, [r1, r6]
						break;
    342e:	b.n	2f98 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3430:	movs	r3, #0
    3432:	strb	r3, [r1, r6]
						break;
    3434:	b.n	2f98 <usb_isr+0x94>
    3436:	ldrh	r1, [r5, #4]
    3438:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    343c:	cmp	r1, #5
    343e:	bls.w	36e0 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3442:	ldr	r2, [pc, #228]	; (3528 <usb_isr+0x624>)
    3444:	movs	r3, #15
    3446:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3448:	ldr	r2, [pc, #216]	; (3524 <usb_isr+0x620>)
    344a:	movs	r3, #1
    344c:	strb	r3, [r2, #0]
    344e:	b.n	311e <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    3450:	cmp	r0, #64	; 0x40
    3452:	bls.w	3326 <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3456:	orr.w	r4, r4, #2
    345a:	add.w	r1, lr, r4, lsl #3
    345e:	ldr	r6, [sp, #8]
    3460:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3462:	cbz	r2, 3494 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    3464:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3468:	ldr	r2, [pc, #224]	; (354c <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    346a:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    346c:	mov	r3, r6
    346e:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3470:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3474:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3476:	str.w	r2, [lr, r4, lsl #3]
    347a:	b.n	3358 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    347c:	ldrb.w	r3, [sp, #4]
    3480:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3482:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3484:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3486:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3488:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    348c:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    348e:	str.w	r2, [lr, ip, lsl #3]
    3492:	b.n	3352 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    3494:	ldrb.w	r1, [sp, #4]
    3498:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    349a:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    349c:	ldr	r2, [pc, #140]	; (352c <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    349e:	strb.w	r5, [r8]
    34a2:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    34a4:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    34a6:	str.w	r2, [lr, r4, lsl #3]
    34aa:	b.n	3358 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    34ac:	tst.w	r9, #8
    34b0:	ite	eq
    34b2:	moveq	r3, #2
    34b4:	movne	r3, #3
    34b6:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    34b8:	b.n	2f98 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    34ba:	ldr	r2, [pc, #148]	; (3550 <usb_isr+0x64c>)
    34bc:	movs	r1, #15
    34be:	strb	r1, [r2, #0]
    34c0:	b.n	328e <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    34c2:	ldr	r2, [pc, #64]	; (3504 <usb_isr+0x600>)
    34c4:	ldr	r4, [pc, #140]	; (3554 <usb_isr+0x650>)
    34c6:	ldrb	r2, [r2, #0]
    34c8:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    34ca:	ldrh	r2, [r5, #6]
    34cc:	cmp	r2, r0
    34ce:	bcs.w	3894 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    34d2:	ldr	r1, [pc, #60]	; (3510 <usb_isr+0x60c>)
    34d4:	ldrb	r5, [r1, #0]
    34d6:	cmp	r2, #64	; 0x40
    34d8:	mov	ip, r2
    34da:	orr.w	lr, r5, #2
    34de:	it	cs
    34e0:	movcs.w	ip, #64	; 0x40
    34e4:	add.w	r3, r4, ip
    34e8:	add.w	r0, r9, lr, lsl #3
    34ec:	str	r3, [sp, #8]
    34ee:	movs	r3, #1
    34f0:	str	r4, [r0, #4]
    34f2:	mov.w	r8, ip, lsl #16
    34f6:	rsb	r0, ip, r2
    34fa:	str	r3, [sp, #4]
    34fc:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    34fe:	movs	r4, #200	; 0xc8
    3500:	b.n	3300 <usb_isr+0x3fc>
    3502:	nop
    3504:	.word	0x1fff1998
    3508:	.word	0x1fff0000
    350c:	.word	0x1fff1cf4
    3510:	.word	0x1fff198c
    3514:	.word	0x1fff1918
    3518:	.word	0x1fff1cfc
    351c:	.word	0x1fff183c
    3520:	.word	0x1fff18c0
    3524:	.word	0x40072094
    3528:	.word	0x400720c0
    352c:	.word	0x00400088
    3530:	.word	0x40072088
    3534:	.word	0x40072080
    3538:	.word	0x40072098
    353c:	.word	0x1fff18c4
    3540:	.word	0x1fff191c
    3544:	.word	0x1fff198d
    3548:	.word	0x1fff18ac
    354c:	.word	0x004000c8
    3550:	.word	0x1fff1919
    3554:	.word	0x1fff1990
    3558:	.word	0x1fff1844
    355c:	.word	0x4007208c
    3560:	ldr	r4, [pc, #704]	; (3824 <usb_isr+0x920>)
    3562:	ldr	r2, [pc, #708]	; (3828 <usb_isr+0x924>)
    3564:	ldr	r1, [pc, #708]	; (382c <usb_isr+0x928>)
    3566:	ldr	r0, [pc, #712]	; (3830 <usb_isr+0x92c>)
    3568:	ldr	r5, [pc, #712]	; (3834 <usb_isr+0x930>)
    356a:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    356c:	movs	r3, #0
    356e:	ldr	r4, [pc, #712]	; (3838 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3570:	str	r4, [sp, #8]
    3572:	str	r6, [sp, #20]
    3574:	str	r5, [sp, #12]
    3576:	mov	r8, r0
    3578:	mov	r4, r3
    357a:	str	r7, [sp, #16]
    357c:	mov	r6, r2
    357e:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3580:	ldr	r0, [r6, #0]
			while (p) {
    3582:	cbz	r0, 3590 <usb_isr+0x68c>
				n = p->next;
    3584:	ldr	r7, [r0, #4]
				usb_free(p);
    3586:	bl	2ce4 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    358a:	mov	r0, r7
    358c:	cmp	r7, #0
    358e:	bne.n	3584 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3590:	movs	r3, #0
    3592:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3594:	ldr	r3, [sp, #12]
			p = tx_first[i];
    3596:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3598:	mov	r2, r3
    359a:	movs	r3, #0
    359c:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    35a0:	cbz	r0, 35ae <usb_isr+0x6aa>
				n = p->next;
    35a2:	ldr	r7, [r0, #4]
				usb_free(p);
    35a4:	bl	2ce4 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    35a8:	mov	r0, r7
    35aa:	cmp	r7, #0
    35ac:	bne.n	35a2 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    35ae:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    35b0:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    35b2:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    35b4:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    35b6:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    35ba:	ldr	r2, [sp, #8]
    35bc:	mov.w	r1, #0
			switch (tx_state[i]) {
    35c0:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    35c2:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    35c6:	cmp	r3, #3
    35c8:	bhi.n	35da <usb_isr+0x6d6>
    35ca:	tbb	[pc, r3]
    35ce:	.short	0x0258
    35d0:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    35d2:	ldr	r3, [sp, #4]
    35d4:	mov.w	r2, #1
    35d8:	strb	r2, [r3, #0]
    35da:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    35dc:	adds	r4, #1
    35de:	adds	r3, #1
    35e0:	cmp	r4, #5
    35e2:	add.w	r6, r6, #4
    35e6:	add.w	r5, r5, #4
    35ea:	str	r3, [sp, #4]
    35ec:	bne.n	3580 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    35ee:	ldr	r4, [pc, #588]	; (383c <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    35f0:	ldr	r5, [pc, #588]	; (3840 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    35f2:	ldrb	r2, [r4, #0]
			*reg = epconf;
    35f4:	ldr	r3, [pc, #588]	; (3844 <usb_isr+0x940>)
    35f6:	ldr	r7, [sp, #16]
    35f8:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    35fa:	movs	r1, #0
    35fc:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    35fe:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3600:	lsls	r2, r2, #28
    3602:	bmi.n	36fa <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3604:	ldrb	r2, [r4, #1]
			*reg = epconf;
    3606:	ldr	r1, [pc, #576]	; (3848 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3608:	ldr.w	r8, [pc, #588]	; 3858 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    360c:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    360e:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3610:	mov.w	r1, #0
    3614:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    3618:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    361c:	bmi.w	37a6 <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3620:	ldrb	r2, [r4, #2]
			*reg = epconf;
    3622:	ldr	r1, [pc, #552]	; (384c <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3624:	ldr.w	r8, [pc, #560]	; 3858 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3628:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    362a:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    362c:	mov.w	r1, #0
    3630:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    3634:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3638:	bmi.w	377e <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    363c:	ldr	r1, [pc, #528]	; (3850 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    363e:	ldrb	r2, [r4, #3]
			*reg = epconf;
    3640:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3642:	movs	r1, #0
    3644:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3648:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    364c:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    364e:	ldr.w	r8, [pc, #520]	; 3858 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3652:	bmi.n	3750 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3654:	ldrb	r2, [r4, #4]
			*reg = epconf;
    3656:	ldr	r1, [pc, #508]	; (3854 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3658:	ldr	r4, [pc, #508]	; (3858 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    365a:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    365c:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    365e:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3660:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3664:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3668:	bmi.n	3726 <usb_isr+0x822>
    366a:	ldrb	r3, [r6, #0]
    366c:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    366e:	movs	r1, #0
    3670:	eor.w	r2, r3, #1
    3674:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3678:	str.w	r1, [r9, #184]	; 0xb8
    367c:	b.n	32da <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    367e:	ldr	r3, [sp, #4]
    3680:	mov.w	r2, #0
    3684:	strb	r2, [r3, #0]
    3686:	b.n	35da <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3688:	ldr	r2, [pc, #464]	; (385c <usb_isr+0x958>)
    368a:	ldr	r4, [r2, #4]
    368c:	cmp	r4, #0
    368e:	beq.w	3442 <usb_isr+0x53e>
    3692:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3694:	ldrh.w	lr, [r5, #4]
    3698:	b.n	36a4 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    369a:	adds	r2, #12
			if (list->addr == NULL) break;
    369c:	ldr	r4, [r2, #4]
    369e:	cmp	r4, #0
    36a0:	beq.w	3442 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    36a4:	ldrh	r3, [r2, #0]
    36a6:	cmp	r3, r0
    36a8:	bne.n	369a <usb_isr+0x796>
    36aa:	ldrh	r3, [r2, #2]
    36ac:	cmp	r3, lr
    36ae:	bne.n	369a <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    36b0:	lsrs	r0, r0, #8
    36b2:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    36b4:	ite	eq
    36b6:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    36b8:	ldrhne	r0, [r2, #8]
    36ba:	b.n	34ca <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    36bc:	ldr	r4, [pc, #416]	; (3860 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    36be:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    36c0:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    36c2:	strb	r2, [r4, #1]
    36c4:	b.n	34ca <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    36c6:	cmp.w	r1, #1280	; 0x500
    36ca:	bne.w	3442 <usb_isr+0x53e>
    36ce:	movs	r3, #1
    36d0:	movs	r2, #0
    36d2:	str	r3, [sp, #4]
    36d4:	b.n	32da <usb_isr+0x3d6>
    36d6:	movw	r2, #8993	; 0x2321
    36da:	cmp	r1, r2
    36dc:	beq.n	36ce <usb_isr+0x7ca>
    36de:	b.n	3442 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    36e0:	ldrh	r2, [r5, #2]
    36e2:	cmp	r2, #0
    36e4:	bne.w	3442 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    36e8:	ldr	r4, [pc, #376]	; (3864 <usb_isr+0x960>)
    36ea:	str	r0, [sp, #4]
    36ec:	lsls	r1, r1, #2
    36ee:	add	r4, r1
    36f0:	ldrb	r1, [r4, #0]
    36f2:	bic.w	r1, r1, #2
    36f6:	strb	r1, [r4, #0]
    36f8:	b.n	32da <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    36fa:	bl	2ca4 <usb_malloc>
				if (p) {
    36fe:	cmp	r0, #0
    3700:	beq.w	3870 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    3704:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3706:	ldr	r2, [pc, #352]	; (3868 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3708:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    370c:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3710:	bl	2ca4 <usb_malloc>
				if (p) {
    3714:	cmp	r0, #0
    3716:	beq.n	3818 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    3718:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    371a:	ldr	r2, [pc, #336]	; (386c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    371c:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3720:	str.w	r2, [r9, #40]	; 0x28
    3724:	b.n	3604 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3726:	bl	2ca4 <usb_malloc>
				if (p) {
    372a:	cmp	r0, #0
    372c:	beq.n	37dc <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    372e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3730:	ldr	r2, [pc, #308]	; (3868 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3732:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3736:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    373a:	bl	2ca4 <usb_malloc>
				if (p) {
    373e:	cmp	r0, #0
    3740:	beq.n	37d0 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    3742:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3744:	ldr	r2, [pc, #292]	; (386c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3746:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    374a:	str.w	r2, [r9, #168]	; 0xa8
    374e:	b.n	366a <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3750:	bl	2ca4 <usb_malloc>
				if (p) {
    3754:	cmp	r0, #0
    3756:	beq.w	3888 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    375a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    375c:	ldr	r2, [pc, #264]	; (3868 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    375e:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3762:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3766:	bl	2ca4 <usb_malloc>
				if (p) {
    376a:	cmp	r0, #0
    376c:	beq.w	387c <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    3770:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3772:	ldr	r2, [pc, #248]	; (386c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3774:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3778:	str.w	r2, [r9, #136]	; 0x88
    377c:	b.n	3654 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    377e:	bl	2ca4 <usb_malloc>
				if (p) {
    3782:	cmp	r0, #0
    3784:	beq.n	380c <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    3786:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3788:	ldr	r2, [pc, #220]	; (3868 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    378a:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    378e:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3792:	bl	2ca4 <usb_malloc>
				if (p) {
    3796:	cbz	r0, 3800 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3798:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    379a:	ldr	r2, [pc, #208]	; (386c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    379c:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    37a0:	str.w	r2, [r9, #104]	; 0x68
    37a4:	b.n	363c <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    37a6:	bl	2ca4 <usb_malloc>
				if (p) {
    37aa:	cbz	r0, 37f4 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    37ac:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    37ae:	ldr	r2, [pc, #184]	; (3868 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    37b0:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    37b4:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    37b8:	bl	2ca4 <usb_malloc>
				if (p) {
    37bc:	cbz	r0, 37e8 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    37be:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    37c0:	ldr	r2, [pc, #168]	; (386c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    37c2:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    37c6:	str.w	r2, [r9, #72]	; 0x48
    37ca:	b.n	3620 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    37cc:	movs	r0, #2
    37ce:	b.n	34ca <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    37d0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    37d2:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    37d6:	adds	r2, #1
    37d8:	strb	r2, [r5, #0]
    37da:	b.n	366a <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    37dc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    37de:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    37e2:	adds	r2, #1
    37e4:	strb	r2, [r5, #0]
    37e6:	b.n	373a <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    37e8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    37ea:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    37ee:	adds	r2, #1
    37f0:	strb	r2, [r5, #0]
    37f2:	b.n	3620 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    37f4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    37f6:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    37fa:	adds	r2, #1
    37fc:	strb	r2, [r5, #0]
    37fe:	b.n	37b8 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3800:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3802:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    3806:	adds	r2, #1
    3808:	strb	r2, [r5, #0]
    380a:	b.n	363c <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    380c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    380e:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    3812:	adds	r2, #1
    3814:	strb	r2, [r5, #0]
    3816:	b.n	3792 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3818:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    381a:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    381e:	adds	r2, #1
    3820:	strb	r2, [r5, #0]
    3822:	b.n	3604 <usb_isr+0x700>
    3824:	.word	0x1fff199c
    3828:	.word	0x1fff1904
    382c:	.word	0x1fff195c
    3830:	.word	0x1fff1970
    3834:	.word	0x1fff18ac
    3838:	.word	0x1fff1e2c
    383c:	.word	0x00005110
    3840:	.word	0x1fff198d
    3844:	.word	0x400720c4
    3848:	.word	0x400720c8
    384c:	.word	0x400720cc
    3850:	.word	0x400720d0
    3854:	.word	0x400720d4
    3858:	.word	0x1fff0000
    385c:	.word	0x00005118
    3860:	.word	0x1fff1990
    3864:	.word	0x400720c0
    3868:	.word	0x00400088
    386c:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3870:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3872:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    3876:	adds	r2, #1
    3878:	strb	r2, [r5, #0]
    387a:	b.n	3710 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    387c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    387e:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    3882:	adds	r2, #1
    3884:	strb	r2, [r5, #0]
    3886:	b.n	3654 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3888:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    388a:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    388e:	adds	r2, #1
    3890:	strb	r2, [r5, #0]
    3892:	b.n	3766 <usb_isr+0x862>
    3894:	cmp	r0, #64	; 0x40
    3896:	mov	ip, r0
    3898:	it	cs
    389a:	movcs.w	ip, #64	; 0x40
    389e:	add.w	r3, r4, ip
    38a2:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    38a4:	movs	r3, #1
    38a6:	rsb	r0, ip, r0
    38aa:	mov.w	r8, ip, lsl #16
    38ae:	movs	r2, #0
    38b0:	str	r3, [sp, #4]
    38b2:	b.n	32e4 <usb_isr+0x3e0>

000038b4 <usb_init>:
}



void usb_init(void)
{
    38b4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38b8:	ldr	r4, [pc, #156]	; (3958 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    38ba:	bl	40f4 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    38be:	movs	r2, #0
    38c0:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    38c4:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    38c6:	str	r2, [r3, #0]
		table[i].addr = 0;
    38c8:	str	r2, [r3, #4]
    38ca:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    38cc:	cmp	r3, r0
		table[i].desc = 0;
    38ce:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    38d2:	bne.n	38c6 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    38d4:	ldr	r0, [pc, #132]	; (395c <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    38d6:	ldr	r2, [pc, #136]	; (3960 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    38d8:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    38da:	ldr.w	lr, [pc, #156]	; 3978 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    38de:	ldr	r6, [pc, #132]	; (3964 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    38e0:	ldr	r5, [pc, #132]	; (3968 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    38e2:	ldr	r7, [pc, #136]	; (396c <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    38e4:	ldr.w	ip, [pc, #148]	; 397c <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    38e8:	ldr.w	r8, [pc, #148]	; 3980 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    38ec:	orr.w	r3, r3, #262144	; 0x40000
    38f0:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    38f2:	ldr	r3, [r2, #0]
    38f4:	orr.w	r3, r3, #50331648	; 0x3000000
    38f8:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    38fa:	movs	r3, #3
    38fc:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3900:	movs	r3, #160	; 0xa0
    3902:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3904:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3908:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    390c:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3910:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3912:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3914:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3918:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    391a:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    391c:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    391e:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3920:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3922:	ldr	r5, [pc, #76]	; (3970 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3924:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3928:	ldr	r0, [pc, #72]	; (3974 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    392a:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    392e:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3930:	movs	r3, #1
    3932:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3936:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    393a:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    393e:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3940:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    3942:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3946:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3948:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    394a:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    394e:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3952:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3956:	nop
    3958:	.word	0x1fff0000
    395c:	.word	0x40048034
    3960:	.word	0x4000d800
    3964:	.word	0x40072140
    3968:	.word	0x4007209c
    396c:	.word	0x400720b0
    3970:	.word	0xe000e435
    3974:	.word	0xe000e104
    3978:	.word	0x40072144
    397c:	.word	0x40072080
    3980:	.word	0x40072088

00003984 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3984:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    3986:	ldr	r4, [pc, #176]	; (3a38 <yield+0xb4>)
    3988:	ldrb	r3, [r4, #0]
    398a:	cbz	r3, 398e <yield+0xa>
    398c:	pop	{r3, r4, r5, pc}
	running = 1;
    398e:	movs	r3, #1
    3990:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3992:	bl	1eb0 <usb_serial_available>
	if (Serial.available()) serialEvent();
    3996:	cmp	r0, #0
    3998:	bne.n	3a20 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    399a:	bl	3ec4 <serial_available>
	if (Serial1.available()) serialEvent1();
    399e:	cmp	r0, #0
    39a0:	bne.n	3a1a <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    39a2:	bl	3bac <serial2_available>
	if (Serial2.available()) serialEvent2();
    39a6:	cmp	r0, #0
    39a8:	bne.n	3a14 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    39aa:	bl	41c4 <serial3_available>
	if (Serial3.available()) serialEvent3();
    39ae:	cbnz	r0, 3a0e <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    39b0:	bl	3cd8 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    39b4:	cbnz	r0, 3a08 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    39b6:	bl	3ab4 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    39ba:	cbnz	r0, 3a02 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    39bc:	bl	3ff0 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    39c0:	cbnz	r0, 39fc <yield+0x78>
#endif
	running = 0;
    39c2:	movs	r3, #0
    39c4:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    39c6:	mrs	r3, IPSR
		if (ipsr != 0) return;
    39ca:	cmp	r3, #0
    39cc:	bne.n	398c <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    39ce:	mrs	r1, PRIMASK
		__disable_irq();
    39d2:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    39d4:	ldr	r3, [pc, #100]	; (3a3c <yield+0xb8>)
    39d6:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    39d8:	cbz	r0, 3a26 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    39da:	ldr	r4, [pc, #100]	; (3a40 <yield+0xbc>)
    39dc:	ldrb	r2, [r4, #0]
    39de:	cbnz	r2, 3a26 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    39e0:	ldr	r5, [r0, #20]
    39e2:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    39e4:	movs	r3, #1
    39e6:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    39e8:	cbz	r5, 3a2e <yield+0xaa>
			firstYield->_prev = nullptr;
    39ea:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    39ec:	cbnz	r1, 39f0 <yield+0x6c>
    39ee:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    39f0:	movs	r5, #0
    39f2:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    39f4:	ldr	r3, [r0, #8]
    39f6:	blx	r3
		runningFromYield = false;
    39f8:	strb	r5, [r4, #0]
    39fa:	b.n	398c <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    39fc:	bl	3ab0 <serialEvent6()>
    3a00:	b.n	39c2 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3a02:	bl	3a48 <serialEvent5()>
    3a06:	b.n	39bc <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3a08:	bl	3a9c <serialEvent4()>
    3a0c:	b.n	39b6 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    3a0e:	bl	42c0 <serialEvent3()>
    3a12:	b.n	39b0 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    3a14:	bl	3a98 <serialEvent2()>
    3a18:	b.n	39aa <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    3a1a:	bl	42bc <serialEvent1()>
    3a1e:	b.n	39a2 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    3a20:	bl	3a74 <serialEvent()>
    3a24:	b.n	399a <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3a26:	cmp	r1, #0
    3a28:	bne.n	398c <yield+0x8>
    3a2a:	cpsie	i
    3a2c:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    3a2e:	ldr	r3, [pc, #20]	; (3a44 <yield+0xc0>)
    3a30:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3a32:	cmp	r1, #0
    3a34:	bne.n	39f0 <yield+0x6c>
    3a36:	b.n	39ee <yield+0x6a>
    3a38:	.word	0x1fff19a1
    3a3c:	.word	0x1fff1cb4
    3a40:	.word	0x1fff1cb8
    3a44:	.word	0x1fff1cb0

00003a48 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    3a48:	bx	lr
    3a4a:	nop

00003a4c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3a4c:	b.w	1ecc <usb_serial_flush_input>

00003a50 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    3a50:	b.w	1e80 <usb_serial_peekchar>

00003a54 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3a54:	b.w	1e38 <usb_serial_getchar>

00003a58 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3a58:	b.w	1eb0 <usb_serial_available>

00003a5c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3a5c:	b.w	206c <usb_serial_flush_output>

00003a60 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3a60:	b.w	2024 <usb_serial_write_buffer_free>

00003a64 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3a64:	mov	r0, r1
    3a66:	mov	r1, r2
    3a68:	b.w	1f04 <usb_serial_write>

00003a6c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3a6c:	mov	r0, r1
    3a6e:	b.w	200c <usb_serial_putchar>
    3a72:	nop

00003a74 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    3a74:	bx	lr
    3a76:	nop

00003a78 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3a78:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    3a7a:	ldr	r2, [pc, #24]	; (3a94 <Print::println()+0x1c>)
	return write(buf, 2);
    3a7c:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3a7e:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    3a80:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3a82:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3a84:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3a86:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    3a8a:	movs	r2, #2
    3a8c:	blx	r3
}
    3a8e:	add	sp, #12
    3a90:	ldr.w	pc, [sp], #4
    3a94:	.word	0x0000510c

00003a98 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    3a98:	bx	lr
    3a9a:	nop

00003a9c <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    3a9c:	bx	lr
    3a9e:	nop

00003aa0 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3aa0:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3aa2:	bl	490 <setup>
	while (1) {
		loop();
    3aa6:	bl	494 <loop>
		yield();
    3aaa:	bl	3984 <yield>
    3aae:	b.n	3aa6 <main+0x6>

00003ab0 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    3ab0:	bx	lr
    3ab2:	nop

00003ab4 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ab4:	ldr	r2, [pc, #20]	; (3acc <serial5_available+0x18>)
	tail = rx_buffer_tail;
    3ab6:	ldr	r3, [pc, #24]	; (3ad0 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ab8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3aba:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3abc:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3abe:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3ac0:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    3ac2:	it	cc
    3ac4:	addcc	r0, #64	; 0x40
    3ac6:	subs	r0, r0, r3
}
    3ac8:	bx	lr
    3aca:	nop
    3acc:	.word	0x1fff19a8
    3ad0:	.word	0x1fff19a9

00003ad4 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    3ad4:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    3ad6:	ldr	r3, [pc, #172]	; (3b84 <uart4_status_isr+0xb0>)
    3ad8:	ldrb	r2, [r3, #4]
    3ada:	lsls	r4, r2, #26
    3adc:	bpl.n	3b1e <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3ade:	ldr	r0, [pc, #168]	; (3b88 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3ae0:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3ae2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ae4:	ldr	r1, [pc, #164]	; (3b8c <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3ae6:	adds	r3, #1
    3ae8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3aea:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3aec:	it	gt
    3aee:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3af0:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3af2:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3af4:	beq.n	3afe <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    3af6:	ldr	r4, [pc, #152]	; (3b90 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    3af8:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3afa:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3afc:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3afe:	ldr	r2, [pc, #148]	; (3b94 <uart4_status_isr+0xc0>)
    3b00:	ldr	r1, [r2, #0]
    3b02:	cbz	r1, 3b1e <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3b04:	ldr	r2, [pc, #144]	; (3b98 <uart4_status_isr+0xc4>)
    3b06:	ldrb	r2, [r2, #0]
    3b08:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3b0a:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3b0c:	itet	cc
    3b0e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3b12:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3b14:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3b16:	cmp	r3, #39	; 0x27
    3b18:	itt	gt
    3b1a:	movgt	r3, #1
    3b1c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    3b1e:	ldr	r2, [pc, #100]	; (3b84 <uart4_status_isr+0xb0>)
    3b20:	ldrb	r3, [r2, #3]
    3b22:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3b24:	lsls	r0, r3, #24
    3b26:	bmi.n	3b4c <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    3b28:	lsls	r2, r3, #25
    3b2a:	bpl.n	3b48 <uart4_status_isr+0x74>
    3b2c:	ldr	r3, [pc, #84]	; (3b84 <uart4_status_isr+0xb0>)
    3b2e:	ldrb	r3, [r3, #4]
    3b30:	lsls	r3, r3, #25
    3b32:	bpl.n	3b48 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3b34:	ldr	r3, [pc, #100]	; (3b9c <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3b36:	ldr	r1, [pc, #104]	; (3ba0 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3b38:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3b3a:	movs	r2, #0
    3b3c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3b3e:	cbz	r3, 3b42 <uart4_status_isr+0x6e>
    3b40:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    3b42:	ldr	r3, [pc, #64]	; (3b84 <uart4_status_isr+0xb0>)
    3b44:	movs	r2, #44	; 0x2c
    3b46:	strb	r2, [r3, #3]
	}
}
    3b48:	pop	{r4, r5}
    3b4a:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3b4c:	ldrb	r1, [r2, #4]
    3b4e:	lsls	r1, r1, #24
    3b50:	bpl.n	3b28 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    3b52:	ldr	r1, [pc, #80]	; (3ba4 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3b54:	ldr	r0, [pc, #64]	; (3b98 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3b56:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3b58:	ldrb	r1, [r0, #0]
    3b5a:	uxtb	r1, r1
		if (head == tail) {
    3b5c:	cmp	r4, r1
    3b5e:	beq.n	3b7c <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    3b60:	adds	r2, r1, #1
    3b62:	cmp	r2, #39	; 0x27
    3b64:	itt	hi
    3b66:	movhi	r1, #0
    3b68:	movhi	r2, r1
			n = tx_buffer[tail];
    3b6a:	ldr	r5, [pc, #60]	; (3ba8 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3b6c:	ldr	r4, [pc, #20]	; (3b84 <uart4_status_isr+0xb0>)
    3b6e:	it	ls
    3b70:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3b72:	ldrb	r2, [r5, r2]
    3b74:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3b76:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3b78:	strb	r1, [r0, #0]
    3b7a:	b.n	3b28 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    3b7c:	movs	r1, #108	; 0x6c
    3b7e:	strb	r1, [r2, #3]
    3b80:	b.n	3b28 <uart4_status_isr+0x54>
    3b82:	nop
    3b84:	.word	0x400ea000
    3b88:	.word	0x1fff19a8
    3b8c:	.word	0x1fff19a9
    3b90:	.word	0x1fff19d4
    3b94:	.word	0x1fff19a4
    3b98:	.word	0x1fff1a15
    3b9c:	.word	0x1fff1a18
    3ba0:	.word	0x1fff1a14
    3ba4:	.word	0x1fff1a1c
    3ba8:	.word	0x1fff19ac

00003bac <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3bac:	ldr	r2, [pc, #20]	; (3bc4 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    3bae:	ldr	r3, [pc, #24]	; (3bc8 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3bb0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3bb2:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3bb4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3bb6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3bb8:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    3bba:	it	cc
    3bbc:	addcc	r0, #64	; 0x40
    3bbe:	subs	r0, r0, r3
}
    3bc0:	bx	lr
    3bc2:	nop
    3bc4:	.word	0x1fff1a90
    3bc8:	.word	0x1fff1a25

00003bcc <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    3bcc:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3bce:	ldr	r3, [pc, #224]	; (3cb0 <uart1_status_isr+0xe4>)
    3bd0:	ldrb	r2, [r3, #4]
    3bd2:	tst.w	r2, #48	; 0x30
    3bd6:	beq.n	3c32 <uart1_status_isr+0x66>
		__disable_irq();
    3bd8:	cpsid	i
		avail = UART1_RCFIFO;
    3bda:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3bdc:	and.w	r2, r1, #255	; 0xff
    3be0:	cmp	r1, #0
    3be2:	beq.n	3c60 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3be4:	cpsie	i
			head = rx_buffer_head;
    3be6:	ldr	r7, [pc, #204]	; (3cb4 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3be8:	ldr	r1, [pc, #204]	; (3cb8 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3bea:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3bec:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3bee:	ldr	r6, [pc, #204]	; (3cbc <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3bf0:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3bf2:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3bf4:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    3bf6:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3bf8:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3bfa:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3bfc:	it	cs
    3bfe:	movcs	r3, #0
				if (newhead != tail) {
    3c00:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3c02:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3c06:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3c08:	itt	ne
    3c0a:	strbne	r1, [r6, r3]
    3c0c:	movne	r0, r3
				}
			} while (--avail > 0);
    3c0e:	ands.w	r2, r2, #255	; 0xff
    3c12:	bne.n	3bf6 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3c14:	ldr	r3, [pc, #168]	; (3cc0 <uart1_status_isr+0xf4>)
    3c16:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3c18:	uxtb	r2, r0
    3c1a:	strb	r2, [r7, #0]
			if (rts_pin) {
    3c1c:	cbz	r3, 3c32 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3c1e:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3c20:	itet	cc
    3c22:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3c26:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3c28:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3c2a:	cmp	r0, #39	; 0x27
    3c2c:	itt	gt
    3c2e:	movgt	r2, #1
    3c30:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    3c32:	ldr	r1, [pc, #124]	; (3cb0 <uart1_status_isr+0xe4>)
    3c34:	ldrb	r2, [r1, #3]
    3c36:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3c38:	lsls	r5, r2, #24
    3c3a:	bmi.n	3c6a <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    3c3c:	lsls	r2, r2, #25
    3c3e:	bpl.n	3c5c <uart1_status_isr+0x90>
    3c40:	ldr	r3, [pc, #108]	; (3cb0 <uart1_status_isr+0xe4>)
    3c42:	ldrb	r3, [r3, #4]
    3c44:	lsls	r3, r3, #25
    3c46:	bpl.n	3c5c <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3c48:	ldr	r3, [pc, #120]	; (3cc4 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3c4a:	ldr	r1, [pc, #124]	; (3cc8 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3c4c:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3c4e:	movs	r2, #0
    3c50:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3c52:	cbz	r3, 3c56 <uart1_status_isr+0x8a>
    3c54:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    3c56:	ldr	r3, [pc, #88]	; (3cb0 <uart1_status_isr+0xe4>)
    3c58:	movs	r2, #60	; 0x3c
    3c5a:	strb	r2, [r3, #3]
	}
}
    3c5c:	pop	{r4, r5, r6, r7}
    3c5e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3c60:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    3c62:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3c64:	strb	r2, [r3, #17]
			__enable_irq();
    3c66:	cpsie	i
    3c68:	b.n	3c32 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3c6a:	ldrb	r3, [r1, #4]
    3c6c:	lsls	r4, r3, #24
    3c6e:	bpl.n	3c3c <uart1_status_isr+0x70>
		head = tx_buffer_head;
    3c70:	ldr	r3, [pc, #88]	; (3ccc <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    3c72:	ldr	r6, [pc, #92]	; (3cd0 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3c74:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3c76:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3c78:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3c7a:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3c7c:	cmp	r4, r3
    3c7e:	beq.n	3c9e <uart1_status_isr+0xd2>
    3c80:	ldr	r5, [pc, #80]	; (3cd4 <uart1_status_isr+0x108>)
    3c82:	b.n	3c88 <uart1_status_isr+0xbc>
    3c84:	cmp	r3, r4
    3c86:	beq.n	3c9e <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    3c88:	adds	r3, #1
    3c8a:	cmp	r3, #40	; 0x28
    3c8c:	it	cs
    3c8e:	movcs	r3, #0
			avail = UART1_S1;
    3c90:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3c92:	ldrb	r0, [r5, r3]
    3c94:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    3c96:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    3c98:	ldrb	r0, [r1, #20]
    3c9a:	cmp	r0, #7
    3c9c:	bls.n	3c84 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    3c9e:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3ca0:	ldr	r1, [pc, #12]	; (3cb0 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    3ca2:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3ca4:	ldrb	r3, [r1, #4]
    3ca6:	lsls	r0, r3, #24
    3ca8:	itt	mi
    3caa:	movmi	r3, #124	; 0x7c
    3cac:	strbmi	r3, [r1, #3]
    3cae:	b.n	3c3c <uart1_status_isr+0x70>
    3cb0:	.word	0x4006b000
    3cb4:	.word	0x1fff1a90
    3cb8:	.word	0x1fff1a25
    3cbc:	.word	0x1fff1a50
    3cc0:	.word	0x1fff1a20
    3cc4:	.word	0x1fff1a94
    3cc8:	.word	0x1fff1a24
    3ccc:	.word	0x1fff1a98
    3cd0:	.word	0x1fff1a91
    3cd4:	.word	0x1fff1a28

00003cd8 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3cd8:	ldr	r2, [pc, #20]	; (3cf0 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    3cda:	ldr	r3, [pc, #24]	; (3cf4 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3cdc:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3cde:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ce0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3ce2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3ce4:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    3ce6:	it	cc
    3ce8:	addcc	r0, #64	; 0x40
    3cea:	subs	r0, r0, r3
}
    3cec:	bx	lr
    3cee:	nop
    3cf0:	.word	0x1fff1aa0
    3cf4:	.word	0x1fff1aa1

00003cf8 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    3cf8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    3cfa:	ldr	r3, [pc, #172]	; (3da8 <uart3_status_isr+0xb0>)
    3cfc:	ldrb	r2, [r3, #4]
    3cfe:	lsls	r4, r2, #26
    3d00:	bpl.n	3d42 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3d02:	ldr	r0, [pc, #168]	; (3dac <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3d04:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3d06:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3d08:	ldr	r1, [pc, #164]	; (3db0 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3d0a:	adds	r3, #1
    3d0c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3d0e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3d10:	it	gt
    3d12:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3d14:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3d16:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3d18:	beq.n	3d22 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    3d1a:	ldr	r4, [pc, #152]	; (3db4 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    3d1c:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3d1e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3d20:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3d22:	ldr	r2, [pc, #148]	; (3db8 <uart3_status_isr+0xc0>)
    3d24:	ldr	r1, [r2, #0]
    3d26:	cbz	r1, 3d42 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3d28:	ldr	r2, [pc, #144]	; (3dbc <uart3_status_isr+0xc4>)
    3d2a:	ldrb	r2, [r2, #0]
    3d2c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3d2e:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3d30:	itet	cc
    3d32:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3d36:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3d38:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3d3a:	cmp	r3, #39	; 0x27
    3d3c:	itt	gt
    3d3e:	movgt	r3, #1
    3d40:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    3d42:	ldr	r2, [pc, #100]	; (3da8 <uart3_status_isr+0xb0>)
    3d44:	ldrb	r3, [r2, #3]
    3d46:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3d48:	lsls	r0, r3, #24
    3d4a:	bmi.n	3d70 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    3d4c:	lsls	r2, r3, #25
    3d4e:	bpl.n	3d6c <uart3_status_isr+0x74>
    3d50:	ldr	r3, [pc, #84]	; (3da8 <uart3_status_isr+0xb0>)
    3d52:	ldrb	r3, [r3, #4]
    3d54:	lsls	r3, r3, #25
    3d56:	bpl.n	3d6c <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3d58:	ldr	r3, [pc, #100]	; (3dc0 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3d5a:	ldr	r1, [pc, #104]	; (3dc4 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3d5c:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3d5e:	movs	r2, #0
    3d60:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3d62:	cbz	r3, 3d66 <uart3_status_isr+0x6e>
    3d64:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    3d66:	ldr	r3, [pc, #64]	; (3da8 <uart3_status_isr+0xb0>)
    3d68:	movs	r2, #44	; 0x2c
    3d6a:	strb	r2, [r3, #3]
	}
}
    3d6c:	pop	{r4, r5}
    3d6e:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3d70:	ldrb	r1, [r2, #4]
    3d72:	lsls	r1, r1, #24
    3d74:	bpl.n	3d4c <uart3_status_isr+0x54>
		head = tx_buffer_head;
    3d76:	ldr	r1, [pc, #80]	; (3dc8 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3d78:	ldr	r0, [pc, #64]	; (3dbc <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3d7a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3d7c:	ldrb	r1, [r0, #0]
    3d7e:	uxtb	r1, r1
		if (head == tail) {
    3d80:	cmp	r4, r1
    3d82:	beq.n	3da0 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    3d84:	adds	r2, r1, #1
    3d86:	cmp	r2, #39	; 0x27
    3d88:	itt	hi
    3d8a:	movhi	r1, #0
    3d8c:	movhi	r2, r1
			n = tx_buffer[tail];
    3d8e:	ldr	r5, [pc, #60]	; (3dcc <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3d90:	ldr	r4, [pc, #20]	; (3da8 <uart3_status_isr+0xb0>)
    3d92:	it	ls
    3d94:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3d96:	ldrb	r2, [r5, r2]
    3d98:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3d9a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3d9c:	strb	r1, [r0, #0]
    3d9e:	b.n	3d4c <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    3da0:	movs	r1, #108	; 0x6c
    3da2:	strb	r1, [r2, #3]
    3da4:	b.n	3d4c <uart3_status_isr+0x54>
    3da6:	nop
    3da8:	.word	0x4006d000
    3dac:	.word	0x1fff1aa0
    3db0:	.word	0x1fff1aa1
    3db4:	.word	0x1fff1acc
    3db8:	.word	0x1fff1a9c
    3dbc:	.word	0x1fff1b0d
    3dc0:	.word	0x1fff1b10
    3dc4:	.word	0x1fff1b0c
    3dc8:	.word	0x1fff1b14
    3dcc:	.word	0x1fff1aa4

00003dd0 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3dd0:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3dd2:	ldr	r4, [pc, #64]	; (3e14 <fault_isr+0x44>)
    3dd4:	b.n	3de8 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3dd6:	ldr	r3, [r4, #0]
    3dd8:	lsls	r1, r3, #21
    3dda:	bmi.n	3df8 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3ddc:	ldr	r3, [r4, #0]
    3dde:	lsls	r2, r3, #20
    3de0:	bmi.n	3e02 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3de2:	ldr	r3, [r4, #0]
    3de4:	lsls	r3, r3, #19
    3de6:	bmi.n	3e0c <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3de8:	ldr	r3, [r4, #0]
    3dea:	lsls	r0, r3, #13
    3dec:	bpl.n	3dd6 <fault_isr+0x6>
    3dee:	bl	2f04 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3df2:	ldr	r3, [r4, #0]
    3df4:	lsls	r1, r3, #21
    3df6:	bpl.n	3ddc <fault_isr+0xc>
    3df8:	bl	3ee4 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3dfc:	ldr	r3, [r4, #0]
    3dfe:	lsls	r2, r3, #20
    3e00:	bpl.n	3de2 <fault_isr+0x12>
    3e02:	bl	3bcc <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3e06:	ldr	r3, [r4, #0]
    3e08:	lsls	r3, r3, #19
    3e0a:	bpl.n	3de8 <fault_isr+0x18>
    3e0c:	bl	41e4 <uart2_status_isr>
    3e10:	b.n	3de8 <fault_isr+0x18>
    3e12:	nop
    3e14:	.word	0x40048034

00003e18 <unused_isr>:
	}
}

void unused_isr(void)
{
    3e18:	push	{r3, lr}
	fault_isr();
    3e1a:	bl	3dd0 <fault_isr>
    3e1e:	nop

00003e20 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3e20:	ldr	r3, [pc, #4]	; (3e28 <startup_early_hook+0x8>)
    3e22:	movs	r2, #16
    3e24:	strh	r2, [r3, #0]
    3e26:	bx	lr
    3e28:	.word	0x40052000

00003e2c <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3e2c:	bx	lr
    3e2e:	nop

00003e30 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3e30:	ldr	r1, [pc, #36]	; (3e58 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3e32:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3e34:	ldr	r3, [r1, #0]
	if (incr != 0) {
    3e36:	cbz	r0, 3e46 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    3e38:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    3e3a:	add	r0, r3
    3e3c:	sub.w	r2, r2, #8192	; 0x2000
    3e40:	cmp	r0, r2
    3e42:	bcs.n	3e4a <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3e44:	str	r0, [r1, #0]
	}
	return prev;
    3e46:	mov	r0, r3
}
    3e48:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    3e4a:	bl	44b8 <__errno>
    3e4e:	movs	r3, #12
    3e50:	str	r3, [r0, #0]
			return (void *)-1;
    3e52:	mov.w	r0, #4294967295
    3e56:	pop	{r3, pc}
    3e58:	.word	0x1fff0c70

00003e5c <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    3e5c:	ldr	r2, [pc, #32]	; (3e80 <kinetis_hsrun_disable+0x24>)
    3e5e:	ldrb	r3, [r2, #0]
    3e60:	cmp	r3, #128	; 0x80
    3e62:	beq.n	3e68 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3e64:	movs	r0, #0
}
    3e66:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3e68:	ldr	r1, [pc, #24]	; (3e84 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3e6a:	ldr	r3, [pc, #28]	; (3e88 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3e6c:	ldr	r0, [pc, #28]	; (3e8c <kinetis_hsrun_disable+0x30>)
    3e6e:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3e70:	movs	r1, #0
    3e72:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3e74:	ldrb	r3, [r2, #0]
    3e76:	cmp	r3, #128	; 0x80
    3e78:	beq.n	3e74 <kinetis_hsrun_disable+0x18>
		return 1;
    3e7a:	movs	r0, #1
    3e7c:	bx	lr
    3e7e:	nop
    3e80:	.word	0x4007e003
    3e84:	.word	0x40048044
    3e88:	.word	0x4007e001
    3e8c:	.word	0x22280000

00003e90 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3e90:	ldr	r2, [pc, #36]	; (3eb8 <kinetis_hsrun_enable+0x28>)
    3e92:	ldrb	r3, [r2, #0]
    3e94:	cmp	r3, #1
    3e96:	beq.n	3e9c <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3e98:	movs	r0, #0
}
    3e9a:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3e9c:	add.w	r3, r3, #1073741824	; 0x40000000
    3ea0:	add.w	r3, r3, #516096	; 0x7e000
    3ea4:	movs	r1, #96	; 0x60
    3ea6:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3ea8:	ldrb	r3, [r2, #0]
    3eaa:	cmp	r3, #128	; 0x80
    3eac:	bne.n	3ea8 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3eae:	ldr	r3, [pc, #12]	; (3ebc <kinetis_hsrun_enable+0x2c>)
    3eb0:	ldr	r2, [pc, #12]	; (3ec0 <kinetis_hsrun_enable+0x30>)
    3eb2:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3eb4:	movs	r0, #1
    3eb6:	bx	lr
    3eb8:	.word	0x4007e003
    3ebc:	.word	0x40048044
    3ec0:	.word	0x02060000

00003ec4 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ec4:	ldr	r2, [pc, #20]	; (3edc <serial_available+0x18>)
	tail = rx_buffer_tail;
    3ec6:	ldr	r3, [pc, #24]	; (3ee0 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ec8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3eca:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ecc:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3ece:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3ed0:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3ed2:	it	cc
    3ed4:	addcc	r0, #64	; 0x40
    3ed6:	subs	r0, r0, r3
}
    3ed8:	bx	lr
    3eda:	nop
    3edc:	.word	0x1fff1b1c
    3ee0:	.word	0x1fff1b1d

00003ee4 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3ee4:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3ee6:	ldr	r3, [pc, #224]	; (3fc8 <uart0_status_isr+0xe4>)
    3ee8:	ldrb	r2, [r3, #4]
    3eea:	tst.w	r2, #48	; 0x30
    3eee:	beq.n	3f4a <uart0_status_isr+0x66>
		__disable_irq();
    3ef0:	cpsid	i
		avail = UART0_RCFIFO;
    3ef2:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3ef4:	and.w	r2, r1, #255	; 0xff
    3ef8:	cmp	r1, #0
    3efa:	beq.n	3f78 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3efc:	cpsie	i
			head = rx_buffer_head;
    3efe:	ldr	r7, [pc, #204]	; (3fcc <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3f00:	ldr	r1, [pc, #204]	; (3fd0 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3f02:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3f04:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3f06:	ldr	r6, [pc, #204]	; (3fd4 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3f08:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3f0a:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3f0c:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    3f0e:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3f10:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3f12:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3f14:	it	cs
    3f16:	movcs	r3, #0
				if (newhead != tail) {
    3f18:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3f1a:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3f1e:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3f20:	itt	ne
    3f22:	strbne	r1, [r6, r3]
    3f24:	movne	r0, r3
				}
			} while (--avail > 0);
    3f26:	ands.w	r2, r2, #255	; 0xff
    3f2a:	bne.n	3f0e <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3f2c:	ldr	r3, [pc, #168]	; (3fd8 <uart0_status_isr+0xf4>)
    3f2e:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3f30:	uxtb	r2, r0
    3f32:	strb	r2, [r7, #0]
			if (rts_pin) {
    3f34:	cbz	r3, 3f4a <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3f36:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3f38:	itet	cc
    3f3a:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3f3e:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3f40:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3f42:	cmp	r0, #39	; 0x27
    3f44:	itt	gt
    3f46:	movgt	r2, #1
    3f48:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    3f4a:	ldr	r1, [pc, #124]	; (3fc8 <uart0_status_isr+0xe4>)
    3f4c:	ldrb	r2, [r1, #3]
    3f4e:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3f50:	lsls	r5, r2, #24
    3f52:	bmi.n	3f82 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3f54:	lsls	r2, r2, #25
    3f56:	bpl.n	3f74 <uart0_status_isr+0x90>
    3f58:	ldr	r3, [pc, #108]	; (3fc8 <uart0_status_isr+0xe4>)
    3f5a:	ldrb	r3, [r3, #4]
    3f5c:	lsls	r3, r3, #25
    3f5e:	bpl.n	3f74 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3f60:	ldr	r3, [pc, #120]	; (3fdc <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3f62:	ldr	r1, [pc, #124]	; (3fe0 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3f64:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3f66:	movs	r2, #0
    3f68:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3f6a:	cbz	r3, 3f6e <uart0_status_isr+0x8a>
    3f6c:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3f6e:	ldr	r3, [pc, #88]	; (3fc8 <uart0_status_isr+0xe4>)
    3f70:	movs	r2, #60	; 0x3c
    3f72:	strb	r2, [r3, #3]
	}
}
    3f74:	pop	{r4, r5, r6, r7}
    3f76:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3f78:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    3f7a:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3f7c:	strb	r2, [r3, #17]
			__enable_irq();
    3f7e:	cpsie	i
    3f80:	b.n	3f4a <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3f82:	ldrb	r3, [r1, #4]
    3f84:	lsls	r4, r3, #24
    3f86:	bpl.n	3f54 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3f88:	ldr	r3, [pc, #88]	; (3fe4 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    3f8a:	ldr	r6, [pc, #92]	; (3fe8 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3f8c:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3f8e:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3f90:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3f92:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3f94:	cmp	r4, r3
    3f96:	beq.n	3fb6 <uart0_status_isr+0xd2>
    3f98:	ldr	r5, [pc, #80]	; (3fec <uart0_status_isr+0x108>)
    3f9a:	b.n	3fa0 <uart0_status_isr+0xbc>
    3f9c:	cmp	r3, r4
    3f9e:	beq.n	3fb6 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3fa0:	adds	r3, #1
    3fa2:	cmp	r3, #64	; 0x40
    3fa4:	it	cs
    3fa6:	movcs	r3, #0
			avail = UART0_S1;
    3fa8:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3faa:	ldrb	r0, [r5, r3]
    3fac:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3fae:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3fb0:	ldrb	r0, [r1, #20]
    3fb2:	cmp	r0, #7
    3fb4:	bls.n	3f9c <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    3fb6:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3fb8:	ldr	r1, [pc, #12]	; (3fc8 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    3fba:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3fbc:	ldrb	r3, [r1, #4]
    3fbe:	lsls	r0, r3, #24
    3fc0:	itt	mi
    3fc2:	movmi	r3, #124	; 0x7c
    3fc4:	strbmi	r3, [r1, #3]
    3fc6:	b.n	3f54 <uart0_status_isr+0x70>
    3fc8:	.word	0x4006a000
    3fcc:	.word	0x1fff1b1c
    3fd0:	.word	0x1fff1b1d
    3fd4:	.word	0x1fff1b60
    3fd8:	.word	0x1fff1b18
    3fdc:	.word	0x1fff1ba4
    3fe0:	.word	0x1fff1ba0
    3fe4:	.word	0x1fff1ba8
    3fe8:	.word	0x1fff1ba1
    3fec:	.word	0x1fff1b20

00003ff0 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ff0:	ldr	r2, [pc, #20]	; (4008 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    3ff2:	ldr	r3, [pc, #24]	; (400c <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ff4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3ff6:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ff8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3ffa:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3ffc:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    3ffe:	it	cc
    4000:	addcc	r0, #64	; 0x40
    4002:	subs	r0, r0, r3
}
    4004:	bx	lr
    4006:	nop
    4008:	.word	0x1fff1bb0
    400c:	.word	0x1fff1bb1

00004010 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    4010:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    4012:	ldr	r3, [pc, #176]	; (40c4 <lpuart0_status_isr+0xb4>)
    4014:	ldr	r2, [r3, #4]
    4016:	lsls	r4, r2, #10
    4018:	bpl.n	405a <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    401a:	ldr	r0, [pc, #172]	; (40c8 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    401c:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    401e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4020:	ldr	r1, [pc, #168]	; (40cc <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4022:	adds	r3, #1
    4024:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4026:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4028:	it	gt
    402a:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    402c:	cmp	r3, r1
    402e:	beq.n	403a <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    4030:	ldr	r4, [pc, #156]	; (40d0 <lpuart0_status_isr+0xc0>)
    4032:	uxtb	r2, r2
			rx_buffer_head = head;
    4034:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4036:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4038:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    403a:	ldr	r2, [pc, #152]	; (40d4 <lpuart0_status_isr+0xc4>)
    403c:	ldr	r1, [r2, #0]
    403e:	cbz	r1, 405a <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4040:	ldr	r2, [pc, #148]	; (40d8 <lpuart0_status_isr+0xc8>)
    4042:	ldrb	r2, [r2, #0]
    4044:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4046:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    4048:	itet	cc
    404a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    404e:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    4050:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4052:	cmp	r3, #39	; 0x27
    4054:	itt	gt
    4056:	movgt	r3, #1
    4058:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    405a:	ldr	r2, [pc, #104]	; (40c4 <lpuart0_status_isr+0xb4>)
    405c:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    405e:	lsls	r0, r3, #8
    4060:	bpl.n	4068 <lpuart0_status_isr+0x58>
    4062:	ldr	r2, [r2, #4]
    4064:	lsls	r1, r2, #8
    4066:	bmi.n	408c <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    4068:	lsls	r2, r3, #9
    406a:	bpl.n	4088 <lpuart0_status_isr+0x78>
    406c:	ldr	r3, [pc, #84]	; (40c4 <lpuart0_status_isr+0xb4>)
    406e:	ldr	r3, [r3, #4]
    4070:	lsls	r3, r3, #9
    4072:	bpl.n	4088 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4074:	ldr	r3, [pc, #100]	; (40dc <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    4076:	ldr	r1, [pc, #104]	; (40e0 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    4078:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    407a:	movs	r2, #0
    407c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    407e:	cbz	r3, 4082 <lpuart0_status_isr+0x72>
    4080:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    4082:	ldr	r3, [pc, #96]	; (40e4 <lpuart0_status_isr+0xd4>)
    4084:	movs	r2, #0
    4086:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    4088:	pop	{r4, r5}
    408a:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    408c:	ldr	r2, [pc, #88]	; (40e8 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    408e:	ldr	r1, [pc, #72]	; (40d8 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    4090:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    4092:	ldrb	r2, [r1, #0]
    4094:	uxtb	r2, r2
		if (head == tail) {
    4096:	cmp	r0, r2
    4098:	beq.n	40b6 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    409a:	adds	r2, #1
    409c:	cmp	r2, #39	; 0x27
    409e:	itt	hi
    40a0:	movhi	r0, #0
    40a2:	movhi	r2, r0
			n = tx_buffer[tail];
    40a4:	ldr	r5, [pc, #68]	; (40ec <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    40a6:	ldr	r4, [pc, #28]	; (40c4 <lpuart0_status_isr+0xb4>)
    40a8:	it	ls
    40aa:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    40ac:	ldrb	r2, [r5, r2]
    40ae:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    40b0:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    40b2:	strb	r0, [r1, #0]
    40b4:	b.n	4068 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    40b6:	ldr	r0, [pc, #56]	; (40f0 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    40b8:	ldr	r2, [pc, #40]	; (40e4 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    40ba:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    40bc:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    40be:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    40c0:	str	r1, [r2, #0]
    40c2:	b.n	4068 <lpuart0_status_isr+0x58>
    40c4:	.word	0x400c4000
    40c8:	.word	0x1fff1bb0
    40cc:	.word	0x1fff1bb1
    40d0:	.word	0x1fff1bdc
    40d4:	.word	0x1fff1bac
    40d8:	.word	0x1fff1c1d
    40dc:	.word	0x1fff1c20
    40e0:	.word	0x1fff1c1c
    40e4:	.word	0x43880158
    40e8:	.word	0x1fff1c24
    40ec:	.word	0x1fff1bb4
    40f0:	.word	0x4388015c

000040f4 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    40f4:	push	{r4, lr}
    40f6:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    40f8:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    40fa:	bl	3e5c <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    40fe:	ldr	r2, [pc, #96]	; (4160 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4100:	ldr	r3, [pc, #96]	; (4164 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    4102:	ldr	r1, [pc, #100]	; (4168 <usb_init_serialnumber+0x74>)
    4104:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4106:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    4108:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    410a:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    410c:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    410e:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4110:	ldrb	r3, [r2, #0]
    4112:	lsls	r3, r3, #24
    4114:	bpl.n	4110 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    4116:	ldr	r3, [pc, #84]	; (416c <usb_init_serialnumber+0x78>)
    4118:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    411a:	bl	3e90 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    411e:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4120:	ldr	r3, [pc, #76]	; (4170 <usb_init_serialnumber+0x7c>)
    4122:	cmp	r4, r3
    4124:	itt	ls
    4126:	addls.w	r4, r4, r4, lsl #2
    412a:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    412c:	mov	r0, r4
    412e:	ldr	r4, [pc, #68]	; (4174 <usb_init_serialnumber+0x80>)
    4130:	add	r1, sp, #4
    4132:	movs	r2, #10
    4134:	bl	4178 <ultoa>
    4138:	add	r1, sp, #4
    413a:	mov	r0, r4
	for (i=0; i<10; i++) {
    413c:	movs	r3, #0
		char c = buf[i];
    413e:	ldrb.w	r2, [r1], #1
    4142:	adds	r3, #1
		if (!c) break;
    4144:	cbz	r2, 4156 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    4146:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4148:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    414c:	bne.n	413e <usb_init_serialnumber+0x4a>
    414e:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4150:	strb	r3, [r4, #0]
}
    4152:	add	sp, #16
    4154:	pop	{r4, pc}
    4156:	lsls	r3, r3, #1
    4158:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    415a:	strb	r3, [r4, #0]
}
    415c:	add	sp, #16
    415e:	pop	{r4, pc}
    4160:	.word	0x40020004
    4164:	.word	0x40020000
    4168:	.word	0x41070000
    416c:	.word	0x4002000c
    4170:	.word	0x0098967f
    4174:	.word	0x1fff0d54

00004178 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    4178:	push	{r4, r5, r6, r7}
    417a:	subs	r5, r1, #1
    417c:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    417e:	movs	r4, #0
    4180:	b.n	4184 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    4182:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    4184:	udiv	r3, r0, r2
    4188:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    418c:	cmp	r0, #9
    418e:	add.w	r7, r0, #48	; 0x30
    4192:	itet	hi
    4194:	addhi	r0, #55	; 0x37
    4196:	uxtbls	r0, r7
    4198:	uxtbhi	r0, r0
    419a:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    419e:	mov	r0, r3
    41a0:	cmp	r3, #0
    41a2:	bne.n	4182 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    41a4:	adds	r2, r1, r4
    41a6:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    41a8:	cbz	r4, 41be <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    41aa:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    41ac:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    41b0:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    41b2:	adds	r3, #1
    41b4:	subs	r0, r4, r3
    41b6:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    41b8:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    41bc:	blt.n	41aa <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    41be:	mov	r0, r1
    41c0:	pop	{r4, r5, r6, r7}
    41c2:	bx	lr

000041c4 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    41c4:	ldr	r2, [pc, #20]	; (41dc <serial3_available+0x18>)
	tail = rx_buffer_tail;
    41c6:	ldr	r3, [pc, #24]	; (41e0 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    41c8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    41ca:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    41cc:	uxtb	r0, r0
	tail = rx_buffer_tail;
    41ce:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    41d0:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    41d2:	it	cc
    41d4:	addcc	r0, #64	; 0x40
    41d6:	subs	r0, r0, r3
}
    41d8:	bx	lr
    41da:	nop
    41dc:	.word	0x1fff1c2c
    41e0:	.word	0x1fff1c2d

000041e4 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    41e4:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    41e6:	ldr	r3, [pc, #172]	; (4294 <uart2_status_isr+0xb0>)
    41e8:	ldrb	r2, [r3, #4]
    41ea:	lsls	r4, r2, #26
    41ec:	bpl.n	422e <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    41ee:	ldr	r0, [pc, #168]	; (4298 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    41f0:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    41f2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    41f4:	ldr	r1, [pc, #164]	; (429c <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    41f6:	adds	r3, #1
    41f8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    41fa:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    41fc:	it	gt
    41fe:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4200:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    4202:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4204:	beq.n	420e <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    4206:	ldr	r4, [pc, #152]	; (42a0 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    4208:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    420a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    420c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    420e:	ldr	r2, [pc, #148]	; (42a4 <uart2_status_isr+0xc0>)
    4210:	ldr	r1, [r2, #0]
    4212:	cbz	r1, 422e <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4214:	ldr	r2, [pc, #144]	; (42a8 <uart2_status_isr+0xc4>)
    4216:	ldrb	r2, [r2, #0]
    4218:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    421a:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    421c:	itet	cc
    421e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    4222:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4224:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4226:	cmp	r3, #39	; 0x27
    4228:	itt	gt
    422a:	movgt	r3, #1
    422c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    422e:	ldr	r2, [pc, #100]	; (4294 <uart2_status_isr+0xb0>)
    4230:	ldrb	r3, [r2, #3]
    4232:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4234:	lsls	r0, r3, #24
    4236:	bmi.n	425c <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    4238:	lsls	r2, r3, #25
    423a:	bpl.n	4258 <uart2_status_isr+0x74>
    423c:	ldr	r3, [pc, #84]	; (4294 <uart2_status_isr+0xb0>)
    423e:	ldrb	r3, [r3, #4]
    4240:	lsls	r3, r3, #25
    4242:	bpl.n	4258 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4244:	ldr	r3, [pc, #100]	; (42ac <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4246:	ldr	r1, [pc, #104]	; (42b0 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4248:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    424a:	movs	r2, #0
    424c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    424e:	cbz	r3, 4252 <uart2_status_isr+0x6e>
    4250:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    4252:	ldr	r3, [pc, #64]	; (4294 <uart2_status_isr+0xb0>)
    4254:	movs	r2, #44	; 0x2c
    4256:	strb	r2, [r3, #3]
	}
}
    4258:	pop	{r4, r5}
    425a:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    425c:	ldrb	r1, [r2, #4]
    425e:	lsls	r1, r1, #24
    4260:	bpl.n	4238 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    4262:	ldr	r1, [pc, #80]	; (42b4 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    4264:	ldr	r0, [pc, #64]	; (42a8 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4266:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4268:	ldrb	r1, [r0, #0]
    426a:	uxtb	r1, r1
		if (head == tail) {
    426c:	cmp	r4, r1
    426e:	beq.n	428c <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    4270:	adds	r2, r1, #1
    4272:	cmp	r2, #39	; 0x27
    4274:	itt	hi
    4276:	movhi	r1, #0
    4278:	movhi	r2, r1
			n = tx_buffer[tail];
    427a:	ldr	r5, [pc, #60]	; (42b8 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    427c:	ldr	r4, [pc, #20]	; (4294 <uart2_status_isr+0xb0>)
    427e:	it	ls
    4280:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4282:	ldrb	r2, [r5, r2]
    4284:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4286:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4288:	strb	r1, [r0, #0]
    428a:	b.n	4238 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    428c:	movs	r1, #108	; 0x6c
    428e:	strb	r1, [r2, #3]
    4290:	b.n	4238 <uart2_status_isr+0x54>
    4292:	nop
    4294:	.word	0x4006c000
    4298:	.word	0x1fff1c2c
    429c:	.word	0x1fff1c2d
    42a0:	.word	0x1fff1c58
    42a4:	.word	0x1fff1c28
    42a8:	.word	0x1fff1c99
    42ac:	.word	0x1fff1c9c
    42b0:	.word	0x1fff1c98
    42b4:	.word	0x1fff1ca0
    42b8:	.word	0x1fff1c30

000042bc <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    42bc:	bx	lr
    42be:	nop

000042c0 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    42c0:	bx	lr
    42c2:	nop

000042c4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    42c4:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    42c6:	mrs	r2, PRIMASK
		__disable_irq();
    42ca:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    42cc:	ldrb	r3, [r0, #29]
    42ce:	cbnz	r3, 42de <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    42d0:	ldrb	r1, [r0, #28]
    42d2:	cmp	r1, #1
    42d4:	beq.n	42e8 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    42d6:	cmp	r1, #3
    42d8:	beq.n	42fc <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    42da:	movs	r3, #1
    42dc:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    42de:	cbnz	r2, 42e2 <EventResponder::triggerEventNotImmediate()+0x1e>
    42e0:	cpsie	i
	}
	enableInterrupts(irq);
}
    42e2:	ldr.w	r4, [sp], #4
    42e6:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    42e8:	ldr	r4, [pc, #68]	; (4330 <EventResponder::triggerEventNotImmediate()+0x6c>)
    42ea:	ldr	r1, [r4, #0]
    42ec:	cbz	r1, 4318 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    42ee:	ldr	r1, [pc, #68]	; (4334 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    42f0:	str	r3, [r0, #20]
				_prev = lastYield;
    42f2:	ldr	r3, [r1, #0]
    42f4:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    42f6:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    42f8:	str	r0, [r3, #20]
    42fa:	b.n	42da <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    42fc:	ldr	r4, [pc, #56]	; (4338 <EventResponder::triggerEventNotImmediate()+0x74>)
    42fe:	ldr	r1, [r4, #0]
    4300:	cbz	r1, 4324 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4302:	ldr	r1, [pc, #56]	; (433c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    4304:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    4306:	ldr	r3, [r1, #0]
    4308:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    430a:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    430c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    430e:	ldr	r3, [pc, #48]	; (4340 <EventResponder::triggerEventNotImmediate()+0x7c>)
    4310:	mov.w	r1, #268435456	; 0x10000000
    4314:	str	r1, [r3, #0]
    4316:	b.n	42da <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    4318:	ldr	r3, [pc, #24]	; (4334 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    431a:	str	r1, [r0, #20]
				_prev = nullptr;
    431c:	str	r1, [r0, #24]
				firstYield = this;
    431e:	str	r0, [r4, #0]
				lastYield = this;
    4320:	str	r0, [r3, #0]
    4322:	b.n	42da <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    4324:	ldr	r3, [pc, #20]	; (433c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    4326:	str	r1, [r0, #20]
				_prev = nullptr;
    4328:	str	r1, [r0, #24]
				firstInterrupt = this;
    432a:	str	r0, [r4, #0]
				lastInterrupt = this;
    432c:	str	r0, [r3, #0]
    432e:	b.n	430e <EventResponder::triggerEventNotImmediate()+0x4a>
    4330:	.word	0x1fff1cb4
    4334:	.word	0x1fff1cb0
    4338:	.word	0x1fff1ca4
    433c:	.word	0x1fff1ca8
    4340:	.word	0xe000ed04

00004344 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    4344:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4346:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4348:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    434a:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    434c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    434e:	beq.n	4358 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    4350:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4354:	b.w	42c4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4358:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    435a:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    435e:	bx	r3

00004360 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    4360:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4362:	mrs	r2, PRIMASK
		__disable_irq();
    4366:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4368:	ldr	r4, [pc, #48]	; (439c <EventResponder::runFromInterrupt()+0x3c>)
    436a:	ldr	r0, [r4, #0]
		if (first) {
    436c:	cbz	r0, 4390 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    436e:	ldr	r6, [pc, #48]	; (43a0 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4370:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    4372:	ldr	r3, [r0, #20]
    4374:	str	r3, [r4, #0]
			if (firstInterrupt) {
    4376:	cbz	r3, 4396 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4378:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    437a:	cbnz	r2, 437e <EventResponder::runFromInterrupt()+0x1e>
    437c:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    437e:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4380:	ldr	r3, [r0, #8]
    4382:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4384:	mrs	r2, PRIMASK
		__disable_irq();
    4388:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    438a:	ldr	r0, [r4, #0]
		if (first) {
    438c:	cmp	r0, #0
    438e:	bne.n	4372 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4390:	cbnz	r2, 4394 <EventResponder::runFromInterrupt()+0x34>
    4392:	cpsie	i
    4394:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4396:	str	r3, [r6, #0]
    4398:	b.n	437a <EventResponder::runFromInterrupt()+0x1a>
    439a:	nop
    439c:	.word	0x1fff1ca4
    43a0:	.word	0x1fff1ca8

000043a4 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    43a4:	b.w	4360 <EventResponder::runFromInterrupt()>

000043a8 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    43a8:	ldr	r2, [pc, #96]	; (440c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    43aa:	push	{r4, r5}
	if (listActive == nullptr) {
    43ac:	ldr	r4, [r2, #0]
    43ae:	cmp	r4, #0
    43b0:	beq.n	4402 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    43b2:	ldr	r3, [r0, #0]
    43b4:	ldr	r1, [r4, #0]
    43b6:	cmp	r3, r1
    43b8:	bcs.n	43d8 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    43ba:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    43bc:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    43be:	str	r4, [r0, #8]
		_prev = nullptr;
    43c0:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    43c2:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    43c4:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    43c6:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    43c8:	movs	r3, #2
    43ca:	strb	r3, [r0, #20]
}
    43cc:	pop	{r4, r5}
    43ce:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    43d0:	ldr	r1, [r2, #0]
    43d2:	cmp	r3, r1
    43d4:	mov	r4, r2
    43d6:	bcc.n	43ea <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    43d8:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    43da:	subs	r3, r3, r1
    43dc:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    43de:	cmp	r2, #0
    43e0:	bne.n	43d0 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    43e2:	str	r2, [r0, #8]
		_prev = timer;
    43e4:	str	r4, [r0, #12]
		timer->_next = this;
    43e6:	str	r0, [r4, #8]
    43e8:	b.n	43c8 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    43ea:	ldr	r2, [r2, #12]
    43ec:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    43ee:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    43f0:	str	r0, [r4, #12]
				_prev->_next = this;
    43f2:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    43f4:	subs	r3, r1, r3
				_state = TimerActive;
    43f6:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    43f8:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    43fa:	str	r3, [r4, #0]
				_state = TimerActive;
    43fc:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    43fe:	pop	{r4, r5}
    4400:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    4402:	str	r4, [r0, #8]
		_prev = nullptr;
    4404:	str	r4, [r0, #12]
		listActive = this;
    4406:	str	r0, [r2, #0]
    4408:	b.n	43c8 <MillisTimer::addToActiveList()+0x20>
    440a:	nop
    440c:	.word	0x1fff1cac

00004410 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    4410:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    4412:	ldr	r6, [pc, #136]	; (449c <MillisTimer::runFromTimer()+0x8c>)
    4414:	ldr	r4, [r6, #0]
	while (timer) {
    4416:	cbz	r4, 4464 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4418:	ldr	r3, [r4, #0]
    441a:	cmp	r3, #0
    441c:	bne.n	4494 <MillisTimer::runFromTimer()+0x84>
    441e:	ldr	r7, [pc, #128]	; (44a0 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    4420:	mov	r5, r3
    4422:	b.n	442e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    4424:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4426:	cbz	r4, 4464 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4428:	ldr	r3, [r4, #0]
    442a:	cmp	r3, #0
    442c:	bne.n	4494 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    442e:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    4430:	cbz	r3, 4434 <MillisTimer::runFromTimer()+0x24>
    4432:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    4434:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    4436:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4438:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    443a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    443c:	ldr	r3, [r3, #0]
    443e:	cmp	r3, r7
    4440:	bne.n	4486 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4442:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4444:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4446:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4448:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    444a:	beq.n	448e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    444c:	bl	42c4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    4450:	ldr	r3, [r4, #4]
    4452:	cmp	r3, #0
    4454:	beq.n	4424 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    4456:	str	r3, [r4, #0]
				timer->addToActiveList();
    4458:	mov	r0, r4
    445a:	bl	43a8 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    445e:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4460:	cmp	r4, #0
    4462:	bne.n	4428 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4464:	mrs	r3, PRIMASK
		__disable_irq();
    4468:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    446a:	ldr	r2, [pc, #56]	; (44a4 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    446c:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    446e:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4470:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    4472:	cbnz	r3, 4476 <MillisTimer::runFromTimer()+0x66>
    4474:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    4476:	cbz	r0, 4484 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4478:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    447a:	bl	43a8 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    447e:	mov	r0, r4
    4480:	cmp	r0, #0
    4482:	bne.n	4478 <MillisTimer::runFromTimer()+0x68>
    4484:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4486:	mov	r2, r4
    4488:	movs	r1, #0
    448a:	blx	r3
    448c:	b.n	4450 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    448e:	ldr	r3, [r0, #8]
    4490:	blx	r3
    4492:	b.n	4450 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    4494:	subs	r3, #1
    4496:	str	r3, [r4, #0]
			break;
    4498:	b.n	4464 <MillisTimer::runFromTimer()+0x54>
    449a:	nop
    449c:	.word	0x1fff1cac
    44a0:	.word	0x00004345
    44a4:	.word	0x1fff1cbc

000044a8 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    44a8:	ldr	r2, [pc, #8]	; (44b4 <systick_isr+0xc>)
    44aa:	ldr	r3, [r2, #0]
    44ac:	adds	r3, #1
    44ae:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    44b0:	b.w	4410 <MillisTimer::runFromTimer()>
    44b4:	.word	0x1fff1844

000044b8 <__errno>:
    44b8:	ldr	r3, [pc, #4]	; (44c0 <__errno+0x8>)
    44ba:	ldr	r0, [r3, #0]
    44bc:	bx	lr
    44be:	nop
    44c0:	.word	0x1fff1198

000044c4 <__libc_init_array>:
    44c4:	push	{r4, r5, r6, lr}
    44c6:	ldr	r6, [pc, #60]	; (4504 <__libc_init_array+0x40>)
    44c8:	ldr	r5, [pc, #60]	; (4508 <__libc_init_array+0x44>)
    44ca:	subs	r6, r6, r5
    44cc:	asrs	r6, r6, #2
    44ce:	it	ne
    44d0:	movne	r4, #0
    44d2:	beq.n	44e0 <__libc_init_array+0x1c>
    44d4:	adds	r4, #1
    44d6:	ldr.w	r3, [r5], #4
    44da:	blx	r3
    44dc:	cmp	r6, r4
    44de:	bne.n	44d4 <__libc_init_array+0x10>
    44e0:	ldr	r6, [pc, #40]	; (450c <__libc_init_array+0x48>)
    44e2:	ldr	r5, [pc, #44]	; (4510 <__libc_init_array+0x4c>)
    44e4:	subs	r6, r6, r5
    44e6:	bl	5170 <_init>
    44ea:	asrs	r6, r6, #2
    44ec:	it	ne
    44ee:	movne	r4, #0
    44f0:	beq.n	4500 <__libc_init_array+0x3c>
    44f2:	adds	r4, #1
    44f4:	ldr.w	r3, [r5], #4
    44f8:	blx	r3
    44fa:	cmp	r6, r4
    44fc:	bne.n	44f2 <__libc_init_array+0x2e>
    44fe:	pop	{r4, r5, r6, pc}
    4500:	pop	{r4, r5, r6, pc}
    4502:	nop
    4504:	.word	0x0000517c
    4508:	.word	0x0000517c
    450c:	.word	0x00005188
    4510:	.word	0x0000517c

00004514 <malloc>:
    4514:	ldr	r3, [pc, #8]	; (4520 <malloc+0xc>)
    4516:	mov	r1, r0
    4518:	ldr	r0, [r3, #0]
    451a:	b.w	4524 <_malloc_r>
    451e:	nop
    4520:	.word	0x1fff1198

00004524 <_malloc_r>:
    4524:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4528:	add.w	r5, r1, #11
    452c:	cmp	r5, #22
    452e:	sub	sp, #12
    4530:	mov	r6, r0
    4532:	bls.w	4674 <_malloc_r+0x150>
    4536:	bics.w	r5, r5, #7
    453a:	bmi.w	46bc <_malloc_r+0x198>
    453e:	cmp	r1, r5
    4540:	bhi.w	46bc <_malloc_r+0x198>
    4544:	bl	4a94 <__malloc_lock>
    4548:	cmp.w	r5, #504	; 0x1f8
    454c:	bcc.w	4a88 <_malloc_r+0x564>
    4550:	lsrs	r3, r5, #9
    4552:	beq.w	46ca <_malloc_r+0x1a6>
    4556:	cmp	r3, #4
    4558:	bhi.w	4862 <_malloc_r+0x33e>
    455c:	lsrs	r0, r5, #6
    455e:	add.w	lr, r0, #57	; 0x39
    4562:	mov.w	r3, lr, lsl #1
    4566:	adds	r0, #56	; 0x38
    4568:	ldr	r7, [pc, #784]	; (487c <_malloc_r+0x358>)
    456a:	add.w	r3, r7, r3, lsl #2
    456e:	sub.w	r1, r3, #8
    4572:	ldr	r4, [r3, #4]
    4574:	cmp	r1, r4
    4576:	bne.n	4588 <_malloc_r+0x64>
    4578:	b.n	46d4 <_malloc_r+0x1b0>
    457a:	cmp	r2, #0
    457c:	bge.w	46d8 <_malloc_r+0x1b4>
    4580:	ldr	r4, [r4, #12]
    4582:	cmp	r1, r4
    4584:	beq.w	46d4 <_malloc_r+0x1b0>
    4588:	ldr	r3, [r4, #4]
    458a:	bic.w	r3, r3, #3
    458e:	subs	r2, r3, r5
    4590:	cmp	r2, #15
    4592:	ble.n	457a <_malloc_r+0x56>
    4594:	ldr	r1, [pc, #740]	; (487c <_malloc_r+0x358>)
    4596:	ldr	r4, [r7, #16]
    4598:	add.w	lr, r1, #8
    459c:	cmp	r4, lr
    459e:	beq.w	4908 <_malloc_r+0x3e4>
    45a2:	ldr	r3, [r4, #4]
    45a4:	bic.w	r3, r3, #3
    45a8:	subs	r2, r3, r5
    45aa:	cmp	r2, #15
    45ac:	bgt.w	48e2 <_malloc_r+0x3be>
    45b0:	cmp	r2, #0
    45b2:	str.w	lr, [r1, #20]
    45b6:	str.w	lr, [r1, #16]
    45ba:	bge.w	46fa <_malloc_r+0x1d6>
    45be:	cmp.w	r3, #512	; 0x200
    45c2:	bcs.w	4894 <_malloc_r+0x370>
    45c6:	lsrs	r3, r3, #3
    45c8:	add.w	ip, r3, #1
    45cc:	movs	r2, #1
    45ce:	asrs	r3, r3, #2
    45d0:	lsl.w	r3, r2, r3
    45d4:	ldr	r2, [r1, #4]
    45d6:	ldr.w	r8, [r1, ip, lsl #3]
    45da:	str.w	r8, [r4, #8]
    45de:	add.w	r9, r1, ip, lsl #3
    45e2:	orrs	r2, r3
    45e4:	sub.w	r3, r9, #8
    45e8:	str	r3, [r4, #12]
    45ea:	str	r2, [r1, #4]
    45ec:	str.w	r4, [r1, ip, lsl #3]
    45f0:	str.w	r4, [r8, #12]
    45f4:	asrs	r3, r0, #2
    45f6:	movs	r4, #1
    45f8:	lsls	r4, r3
    45fa:	cmp	r4, r2
    45fc:	bhi.w	4714 <_malloc_r+0x1f0>
    4600:	tst	r4, r2
    4602:	bne.n	4612 <_malloc_r+0xee>
    4604:	bic.w	r0, r0, #3
    4608:	lsls	r4, r4, #1
    460a:	tst	r4, r2
    460c:	add.w	r0, r0, #4
    4610:	beq.n	4608 <_malloc_r+0xe4>
    4612:	add.w	r9, r7, r0, lsl #3
    4616:	mov	ip, r9
    4618:	mov	r8, r0
    461a:	ldr.w	r1, [ip, #12]
    461e:	cmp	ip, r1
    4620:	bne.n	4632 <_malloc_r+0x10e>
    4622:	b.n	490c <_malloc_r+0x3e8>
    4624:	cmp	r2, #0
    4626:	bge.w	492c <_malloc_r+0x408>
    462a:	ldr	r1, [r1, #12]
    462c:	cmp	ip, r1
    462e:	beq.w	490c <_malloc_r+0x3e8>
    4632:	ldr	r3, [r1, #4]
    4634:	bic.w	r3, r3, #3
    4638:	subs	r2, r3, r5
    463a:	cmp	r2, #15
    463c:	ble.n	4624 <_malloc_r+0x100>
    463e:	mov	r4, r1
    4640:	ldr.w	ip, [r1, #12]
    4644:	ldr.w	r8, [r4, #8]!
    4648:	adds	r3, r1, r5
    464a:	orr.w	r5, r5, #1
    464e:	str	r5, [r1, #4]
    4650:	orr.w	r1, r2, #1
    4654:	str.w	ip, [r8, #12]
    4658:	mov	r0, r6
    465a:	str.w	r8, [ip, #8]
    465e:	str	r3, [r7, #20]
    4660:	str	r3, [r7, #16]
    4662:	str.w	lr, [r3, #12]
    4666:	str.w	lr, [r3, #8]
    466a:	str	r1, [r3, #4]
    466c:	str	r2, [r3, r2]
    466e:	bl	4a98 <__malloc_unlock>
    4672:	b.n	46b4 <_malloc_r+0x190>
    4674:	cmp	r1, #16
    4676:	bhi.n	46bc <_malloc_r+0x198>
    4678:	bl	4a94 <__malloc_lock>
    467c:	movs	r5, #16
    467e:	movs	r3, #6
    4680:	movs	r0, #2
    4682:	ldr	r7, [pc, #504]	; (487c <_malloc_r+0x358>)
    4684:	add.w	r3, r7, r3, lsl #2
    4688:	sub.w	r2, r3, #8
    468c:	ldr	r4, [r3, #4]
    468e:	cmp	r4, r2
    4690:	beq.w	491e <_malloc_r+0x3fa>
    4694:	ldr	r3, [r4, #4]
    4696:	ldr	r1, [r4, #12]
    4698:	ldr	r5, [r4, #8]
    469a:	bic.w	r3, r3, #3
    469e:	add	r3, r4
    46a0:	mov	r0, r6
    46a2:	ldr	r2, [r3, #4]
    46a4:	str	r1, [r5, #12]
    46a6:	orr.w	r2, r2, #1
    46aa:	str	r5, [r1, #8]
    46ac:	str	r2, [r3, #4]
    46ae:	bl	4a98 <__malloc_unlock>
    46b2:	adds	r4, #8
    46b4:	mov	r0, r4
    46b6:	add	sp, #12
    46b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46bc:	movs	r4, #0
    46be:	movs	r3, #12
    46c0:	mov	r0, r4
    46c2:	str	r3, [r6, #0]
    46c4:	add	sp, #12
    46c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46ca:	movs	r3, #128	; 0x80
    46cc:	mov.w	lr, #64	; 0x40
    46d0:	movs	r0, #63	; 0x3f
    46d2:	b.n	4568 <_malloc_r+0x44>
    46d4:	mov	r0, lr
    46d6:	b.n	4594 <_malloc_r+0x70>
    46d8:	add	r3, r4
    46da:	ldr	r1, [r4, #12]
    46dc:	ldr	r2, [r3, #4]
    46de:	ldr	r5, [r4, #8]
    46e0:	orr.w	r2, r2, #1
    46e4:	str	r1, [r5, #12]
    46e6:	mov	r0, r6
    46e8:	str	r5, [r1, #8]
    46ea:	str	r2, [r3, #4]
    46ec:	bl	4a98 <__malloc_unlock>
    46f0:	adds	r4, #8
    46f2:	mov	r0, r4
    46f4:	add	sp, #12
    46f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46fa:	add	r3, r4
    46fc:	mov	r0, r6
    46fe:	ldr	r2, [r3, #4]
    4700:	orr.w	r2, r2, #1
    4704:	str	r2, [r3, #4]
    4706:	bl	4a98 <__malloc_unlock>
    470a:	adds	r4, #8
    470c:	mov	r0, r4
    470e:	add	sp, #12
    4710:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4714:	ldr	r4, [r7, #8]
    4716:	ldr	r3, [r4, #4]
    4718:	bic.w	r8, r3, #3
    471c:	cmp	r8, r5
    471e:	bcc.n	472a <_malloc_r+0x206>
    4720:	rsb	r3, r5, r8
    4724:	cmp	r3, #15
    4726:	bgt.w	4842 <_malloc_r+0x31e>
    472a:	ldr	r3, [pc, #340]	; (4880 <_malloc_r+0x35c>)
    472c:	ldr.w	r9, [pc, #352]	; 4890 <_malloc_r+0x36c>
    4730:	ldr	r2, [r3, #0]
    4732:	ldr.w	r3, [r9]
    4736:	adds	r3, #1
    4738:	add	r2, r5
    473a:	add.w	sl, r4, r8
    473e:	beq.w	4a02 <_malloc_r+0x4de>
    4742:	add.w	r2, r2, #4096	; 0x1000
    4746:	adds	r2, #15
    4748:	bic.w	r2, r2, #4080	; 0xff0
    474c:	bic.w	r2, r2, #15
    4750:	mov	r1, r2
    4752:	mov	r0, r6
    4754:	str	r2, [sp, #4]
    4756:	bl	4a9c <_sbrk_r>
    475a:	cmp.w	r0, #4294967295
    475e:	mov	fp, r0
    4760:	ldr	r2, [sp, #4]
    4762:	beq.w	4a16 <_malloc_r+0x4f2>
    4766:	cmp	sl, r0
    4768:	bhi.w	4964 <_malloc_r+0x440>
    476c:	ldr	r3, [pc, #276]	; (4884 <_malloc_r+0x360>)
    476e:	ldr	r1, [r3, #0]
    4770:	cmp	sl, fp
    4772:	add	r1, r2
    4774:	str	r1, [r3, #0]
    4776:	beq.w	4a20 <_malloc_r+0x4fc>
    477a:	ldr.w	r0, [r9]
    477e:	ldr.w	lr, [pc, #272]	; 4890 <_malloc_r+0x36c>
    4782:	adds	r0, #1
    4784:	ittet	ne
    4786:	rsbne	sl, sl, fp
    478a:	addne	r1, sl
    478c:	streq.w	fp, [lr]
    4790:	strne	r1, [r3, #0]
    4792:	ands.w	r1, fp, #7
    4796:	beq.w	49c8 <_malloc_r+0x4a4>
    479a:	rsb	r0, r1, #8
    479e:	rsb	r1, r1, #4096	; 0x1000
    47a2:	add	fp, r0
    47a4:	adds	r1, #8
    47a6:	add	r2, fp
    47a8:	ubfx	r2, r2, #0, #12
    47ac:	rsb	r9, r2, r1
    47b0:	mov	r1, r9
    47b2:	mov	r0, r6
    47b4:	str	r3, [sp, #4]
    47b6:	bl	4a9c <_sbrk_r>
    47ba:	adds	r3, r0, #1
    47bc:	ldr	r3, [sp, #4]
    47be:	beq.w	4a40 <_malloc_r+0x51c>
    47c2:	rsb	r2, fp, r0
    47c6:	add	r2, r9
    47c8:	orr.w	r2, r2, #1
    47cc:	ldr	r1, [r3, #0]
    47ce:	str.w	fp, [r7, #8]
    47d2:	add	r1, r9
    47d4:	cmp	r4, r7
    47d6:	str.w	r2, [fp, #4]
    47da:	str	r1, [r3, #0]
    47dc:	ldr.w	r9, [pc, #164]	; 4884 <_malloc_r+0x360>
    47e0:	beq.n	4810 <_malloc_r+0x2ec>
    47e2:	cmp.w	r8, #15
    47e6:	bls.w	49e4 <_malloc_r+0x4c0>
    47ea:	ldr	r2, [r4, #4]
    47ec:	sub.w	r3, r8, #12
    47f0:	bic.w	r3, r3, #7
    47f4:	adds	r0, r4, r3
    47f6:	and.w	r2, r2, #1
    47fa:	mov.w	lr, #5
    47fe:	orrs	r2, r3
    4800:	cmp	r3, #15
    4802:	str	r2, [r4, #4]
    4804:	str.w	lr, [r0, #4]
    4808:	str.w	lr, [r0, #8]
    480c:	bhi.w	4a48 <_malloc_r+0x524>
    4810:	ldr	r3, [pc, #116]	; (4888 <_malloc_r+0x364>)
    4812:	ldr	r4, [r7, #8]
    4814:	ldr	r2, [r3, #0]
    4816:	cmp	r1, r2
    4818:	it	hi
    481a:	strhi	r1, [r3, #0]
    481c:	ldr	r3, [pc, #108]	; (488c <_malloc_r+0x368>)
    481e:	ldr	r2, [r3, #0]
    4820:	cmp	r1, r2
    4822:	ldr	r2, [r4, #4]
    4824:	it	hi
    4826:	strhi	r1, [r3, #0]
    4828:	bic.w	r2, r2, #3
    482c:	cmp	r5, r2
    482e:	sub.w	r3, r2, r5
    4832:	bhi.n	4838 <_malloc_r+0x314>
    4834:	cmp	r3, #15
    4836:	bgt.n	4842 <_malloc_r+0x31e>
    4838:	mov	r0, r6
    483a:	bl	4a98 <__malloc_unlock>
    483e:	movs	r4, #0
    4840:	b.n	46b4 <_malloc_r+0x190>
    4842:	adds	r2, r4, r5
    4844:	orr.w	r3, r3, #1
    4848:	orr.w	r5, r5, #1
    484c:	str	r5, [r4, #4]
    484e:	mov	r0, r6
    4850:	str	r2, [r7, #8]
    4852:	str	r3, [r2, #4]
    4854:	bl	4a98 <__malloc_unlock>
    4858:	adds	r4, #8
    485a:	mov	r0, r4
    485c:	add	sp, #12
    485e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4862:	cmp	r3, #20
    4864:	bls.n	494a <_malloc_r+0x426>
    4866:	cmp	r3, #84	; 0x54
    4868:	bhi.w	49b4 <_malloc_r+0x490>
    486c:	lsrs	r0, r5, #12
    486e:	add.w	lr, r0, #111	; 0x6f
    4872:	mov.w	r3, lr, lsl #1
    4876:	adds	r0, #110	; 0x6e
    4878:	b.n	4568 <_malloc_r+0x44>
    487a:	nop
    487c:	.word	0x1fff119c
    4880:	.word	0x1fff1cc8
    4884:	.word	0x1fff1ccc
    4888:	.word	0x1fff1cc4
    488c:	.word	0x1fff1cc0
    4890:	.word	0x1fff15a8
    4894:	lsrs	r2, r3, #9
    4896:	cmp	r2, #4
    4898:	bls.n	4958 <_malloc_r+0x434>
    489a:	cmp	r2, #20
    489c:	bhi.w	4a06 <_malloc_r+0x4e2>
    48a0:	add.w	r1, r2, #92	; 0x5c
    48a4:	lsls	r1, r1, #1
    48a6:	adds	r2, #91	; 0x5b
    48a8:	add.w	ip, r7, r1, lsl #2
    48ac:	ldr.w	r1, [r7, r1, lsl #2]
    48b0:	ldr.w	r8, [pc, #476]	; 4a90 <_malloc_r+0x56c>
    48b4:	sub.w	ip, ip, #8
    48b8:	cmp	ip, r1
    48ba:	beq.w	49ce <_malloc_r+0x4aa>
    48be:	ldr	r2, [r1, #4]
    48c0:	bic.w	r2, r2, #3
    48c4:	cmp	r3, r2
    48c6:	bcs.n	48ce <_malloc_r+0x3aa>
    48c8:	ldr	r1, [r1, #8]
    48ca:	cmp	ip, r1
    48cc:	bne.n	48be <_malloc_r+0x39a>
    48ce:	ldr.w	ip, [r1, #12]
    48d2:	ldr	r2, [r7, #4]
    48d4:	str.w	ip, [r4, #12]
    48d8:	str	r1, [r4, #8]
    48da:	str.w	r4, [ip, #8]
    48de:	str	r4, [r1, #12]
    48e0:	b.n	45f4 <_malloc_r+0xd0>
    48e2:	adds	r3, r4, r5
    48e4:	orr.w	r7, r2, #1
    48e8:	orr.w	r5, r5, #1
    48ec:	str	r5, [r4, #4]
    48ee:	mov	r0, r6
    48f0:	str	r3, [r1, #20]
    48f2:	str	r3, [r1, #16]
    48f4:	str.w	lr, [r3, #12]
    48f8:	str.w	lr, [r3, #8]
    48fc:	str	r7, [r3, #4]
    48fe:	str	r2, [r3, r2]
    4900:	adds	r4, #8
    4902:	bl	4a98 <__malloc_unlock>
    4906:	b.n	46b4 <_malloc_r+0x190>
    4908:	ldr	r2, [r1, #4]
    490a:	b.n	45f4 <_malloc_r+0xd0>
    490c:	add.w	r8, r8, #1
    4910:	tst.w	r8, #3
    4914:	add.w	ip, ip, #8
    4918:	bne.w	461a <_malloc_r+0xf6>
    491c:	b.n	4980 <_malloc_r+0x45c>
    491e:	ldr	r4, [r3, #12]
    4920:	cmp	r3, r4
    4922:	it	eq
    4924:	addeq	r0, #2
    4926:	beq.w	4594 <_malloc_r+0x70>
    492a:	b.n	4694 <_malloc_r+0x170>
    492c:	add	r3, r1
    492e:	mov	r4, r1
    4930:	ldr	r2, [r3, #4]
    4932:	ldr	r1, [r1, #12]
    4934:	ldr.w	r5, [r4, #8]!
    4938:	orr.w	r2, r2, #1
    493c:	str	r2, [r3, #4]
    493e:	mov	r0, r6
    4940:	str	r1, [r5, #12]
    4942:	str	r5, [r1, #8]
    4944:	bl	4a98 <__malloc_unlock>
    4948:	b.n	46b4 <_malloc_r+0x190>
    494a:	add.w	lr, r3, #92	; 0x5c
    494e:	add.w	r0, r3, #91	; 0x5b
    4952:	mov.w	r3, lr, lsl #1
    4956:	b.n	4568 <_malloc_r+0x44>
    4958:	lsrs	r2, r3, #6
    495a:	add.w	r1, r2, #57	; 0x39
    495e:	lsls	r1, r1, #1
    4960:	adds	r2, #56	; 0x38
    4962:	b.n	48a8 <_malloc_r+0x384>
    4964:	cmp	r4, r7
    4966:	ldr	r3, [pc, #296]	; (4a90 <_malloc_r+0x56c>)
    4968:	beq.w	476c <_malloc_r+0x248>
    496c:	ldr	r4, [r3, #8]
    496e:	ldr	r2, [r4, #4]
    4970:	bic.w	r2, r2, #3
    4974:	b.n	482c <_malloc_r+0x308>
    4976:	ldr.w	r3, [r9], #-8
    497a:	cmp	r9, r3
    497c:	bne.w	4a84 <_malloc_r+0x560>
    4980:	tst.w	r0, #3
    4984:	add.w	r0, r0, #4294967295
    4988:	bne.n	4976 <_malloc_r+0x452>
    498a:	ldr	r3, [r7, #4]
    498c:	bic.w	r3, r3, r4
    4990:	str	r3, [r7, #4]
    4992:	lsls	r4, r4, #1
    4994:	cmp	r4, r3
    4996:	bhi.w	4714 <_malloc_r+0x1f0>
    499a:	cmp	r4, #0
    499c:	beq.w	4714 <_malloc_r+0x1f0>
    49a0:	tst	r4, r3
    49a2:	mov	r0, r8
    49a4:	bne.w	4612 <_malloc_r+0xee>
    49a8:	lsls	r4, r4, #1
    49aa:	tst	r4, r3
    49ac:	add.w	r0, r0, #4
    49b0:	beq.n	49a8 <_malloc_r+0x484>
    49b2:	b.n	4612 <_malloc_r+0xee>
    49b4:	cmp.w	r3, #340	; 0x154
    49b8:	bhi.n	49ec <_malloc_r+0x4c8>
    49ba:	lsrs	r0, r5, #15
    49bc:	add.w	lr, r0, #120	; 0x78
    49c0:	mov.w	r3, lr, lsl #1
    49c4:	adds	r0, #119	; 0x77
    49c6:	b.n	4568 <_malloc_r+0x44>
    49c8:	mov.w	r1, #4096	; 0x1000
    49cc:	b.n	47a6 <_malloc_r+0x282>
    49ce:	movs	r1, #1
    49d0:	ldr.w	r3, [r8, #4]
    49d4:	asrs	r2, r2, #2
    49d6:	lsl.w	r2, r1, r2
    49da:	orrs	r2, r3
    49dc:	str.w	r2, [r8, #4]
    49e0:	mov	r1, ip
    49e2:	b.n	48d4 <_malloc_r+0x3b0>
    49e4:	movs	r3, #1
    49e6:	str.w	r3, [fp, #4]
    49ea:	b.n	4838 <_malloc_r+0x314>
    49ec:	movw	r2, #1364	; 0x554
    49f0:	cmp	r3, r2
    49f2:	bhi.n	4a36 <_malloc_r+0x512>
    49f4:	lsrs	r0, r5, #18
    49f6:	add.w	lr, r0, #125	; 0x7d
    49fa:	mov.w	r3, lr, lsl #1
    49fe:	adds	r0, #124	; 0x7c
    4a00:	b.n	4568 <_malloc_r+0x44>
    4a02:	adds	r2, #16
    4a04:	b.n	4750 <_malloc_r+0x22c>
    4a06:	cmp	r2, #84	; 0x54
    4a08:	bhi.n	4a58 <_malloc_r+0x534>
    4a0a:	lsrs	r2, r3, #12
    4a0c:	add.w	r1, r2, #111	; 0x6f
    4a10:	lsls	r1, r1, #1
    4a12:	adds	r2, #110	; 0x6e
    4a14:	b.n	48a8 <_malloc_r+0x384>
    4a16:	ldr	r4, [r7, #8]
    4a18:	ldr	r2, [r4, #4]
    4a1a:	bic.w	r2, r2, #3
    4a1e:	b.n	482c <_malloc_r+0x308>
    4a20:	ubfx	r0, sl, #0, #12
    4a24:	cmp	r0, #0
    4a26:	bne.w	477a <_malloc_r+0x256>
    4a2a:	add	r2, r8
    4a2c:	ldr	r3, [r7, #8]
    4a2e:	orr.w	r2, r2, #1
    4a32:	str	r2, [r3, #4]
    4a34:	b.n	4810 <_malloc_r+0x2ec>
    4a36:	movs	r3, #254	; 0xfe
    4a38:	mov.w	lr, #127	; 0x7f
    4a3c:	movs	r0, #126	; 0x7e
    4a3e:	b.n	4568 <_malloc_r+0x44>
    4a40:	movs	r2, #1
    4a42:	mov.w	r9, #0
    4a46:	b.n	47cc <_malloc_r+0x2a8>
    4a48:	add.w	r1, r4, #8
    4a4c:	mov	r0, r6
    4a4e:	bl	4ba4 <_free_r>
    4a52:	ldr.w	r1, [r9]
    4a56:	b.n	4810 <_malloc_r+0x2ec>
    4a58:	cmp.w	r2, #340	; 0x154
    4a5c:	bhi.n	4a6a <_malloc_r+0x546>
    4a5e:	lsrs	r2, r3, #15
    4a60:	add.w	r1, r2, #120	; 0x78
    4a64:	lsls	r1, r1, #1
    4a66:	adds	r2, #119	; 0x77
    4a68:	b.n	48a8 <_malloc_r+0x384>
    4a6a:	movw	r1, #1364	; 0x554
    4a6e:	cmp	r2, r1
    4a70:	bhi.n	4a7e <_malloc_r+0x55a>
    4a72:	lsrs	r2, r3, #18
    4a74:	add.w	r1, r2, #125	; 0x7d
    4a78:	lsls	r1, r1, #1
    4a7a:	adds	r2, #124	; 0x7c
    4a7c:	b.n	48a8 <_malloc_r+0x384>
    4a7e:	movs	r1, #254	; 0xfe
    4a80:	movs	r2, #126	; 0x7e
    4a82:	b.n	48a8 <_malloc_r+0x384>
    4a84:	ldr	r3, [r7, #4]
    4a86:	b.n	4992 <_malloc_r+0x46e>
    4a88:	lsrs	r0, r5, #3
    4a8a:	adds	r3, r0, #1
    4a8c:	lsls	r3, r3, #1
    4a8e:	b.n	4682 <_malloc_r+0x15e>
    4a90:	.word	0x1fff119c

00004a94 <__malloc_lock>:
    4a94:	bx	lr
    4a96:	nop

00004a98 <__malloc_unlock>:
    4a98:	bx	lr
    4a9a:	nop

00004a9c <_sbrk_r>:
    4a9c:	push	{r3, r4, r5, lr}
    4a9e:	ldr	r4, [pc, #28]	; (4abc <_sbrk_r+0x20>)
    4aa0:	movs	r3, #0
    4aa2:	mov	r5, r0
    4aa4:	mov	r0, r1
    4aa6:	str	r3, [r4, #0]
    4aa8:	bl	3e30 <_sbrk>
    4aac:	adds	r3, r0, #1
    4aae:	beq.n	4ab2 <_sbrk_r+0x16>
    4ab0:	pop	{r3, r4, r5, pc}
    4ab2:	ldr	r3, [r4, #0]
    4ab4:	cmp	r3, #0
    4ab6:	beq.n	4ab0 <_sbrk_r+0x14>
    4ab8:	str	r3, [r5, #0]
    4aba:	pop	{r3, r4, r5, pc}
    4abc:	.word	0x1fff1e38

00004ac0 <register_fini>:
    4ac0:	ldr	r3, [pc, #8]	; (4acc <register_fini+0xc>)
    4ac2:	cbz	r3, 4aca <register_fini+0xa>
    4ac4:	ldr	r0, [pc, #8]	; (4ad0 <register_fini+0x10>)
    4ac6:	b.w	4ad4 <atexit>
    4aca:	bx	lr
    4acc:	.word	0x00000000
    4ad0:	.word	0x00004ae1

00004ad4 <atexit>:
    4ad4:	movs	r3, #0
    4ad6:	mov	r1, r0
    4ad8:	mov	r2, r3
    4ada:	mov	r0, r3
    4adc:	b.w	4d74 <__register_exitproc>

00004ae0 <__libc_fini_array>:
    4ae0:	push	{r3, r4, r5, lr}
    4ae2:	ldr	r5, [pc, #28]	; (4b00 <__libc_fini_array+0x20>)
    4ae4:	ldr	r4, [pc, #28]	; (4b04 <__libc_fini_array+0x24>)
    4ae6:	subs	r4, r5, r4
    4ae8:	asrs	r4, r4, #2
    4aea:	beq.n	4af8 <__libc_fini_array+0x18>
    4aec:	subs	r4, #1
    4aee:	ldr.w	r3, [r5, #-4]!
    4af2:	blx	r3
    4af4:	cmp	r4, #0
    4af6:	bne.n	4aec <__libc_fini_array+0xc>
    4af8:	ldmia.w	sp!, {r3, r4, r5, lr}
    4afc:	b.w	5188 <__init_array_end>
	...

00004b08 <_malloc_trim_r>:
    4b08:	push	{r3, r4, r5, r6, r7, lr}
    4b0a:	ldr	r7, [pc, #140]	; (4b98 <_malloc_trim_r+0x90>)
    4b0c:	mov	r4, r1
    4b0e:	mov	r6, r0
    4b10:	bl	4a94 <__malloc_lock>
    4b14:	ldr	r3, [r7, #8]
    4b16:	ldr	r5, [r3, #4]
    4b18:	bic.w	r5, r5, #3
    4b1c:	subs	r1, r5, r4
    4b1e:	addw	r1, r1, #4079	; 0xfef
    4b22:	bic.w	r1, r1, #4080	; 0xff0
    4b26:	bic.w	r1, r1, #15
    4b2a:	sub.w	r4, r1, #4096	; 0x1000
    4b2e:	cmp.w	r4, #4096	; 0x1000
    4b32:	blt.n	4b44 <_malloc_trim_r+0x3c>
    4b34:	movs	r1, #0
    4b36:	mov	r0, r6
    4b38:	bl	4a9c <_sbrk_r>
    4b3c:	ldr	r3, [r7, #8]
    4b3e:	add	r3, r5
    4b40:	cmp	r0, r3
    4b42:	beq.n	4b4e <_malloc_trim_r+0x46>
    4b44:	mov	r0, r6
    4b46:	bl	4a98 <__malloc_unlock>
    4b4a:	movs	r0, #0
    4b4c:	pop	{r3, r4, r5, r6, r7, pc}
    4b4e:	negs	r1, r4
    4b50:	mov	r0, r6
    4b52:	bl	4a9c <_sbrk_r>
    4b56:	adds	r0, #1
    4b58:	beq.n	4b76 <_malloc_trim_r+0x6e>
    4b5a:	ldr	r3, [pc, #64]	; (4b9c <_malloc_trim_r+0x94>)
    4b5c:	ldr	r2, [r7, #8]
    4b5e:	ldr	r1, [r3, #0]
    4b60:	subs	r5, r5, r4
    4b62:	orr.w	r5, r5, #1
    4b66:	mov	r0, r6
    4b68:	subs	r1, r1, r4
    4b6a:	str	r5, [r2, #4]
    4b6c:	str	r1, [r3, #0]
    4b6e:	bl	4a98 <__malloc_unlock>
    4b72:	movs	r0, #1
    4b74:	pop	{r3, r4, r5, r6, r7, pc}
    4b76:	movs	r1, #0
    4b78:	mov	r0, r6
    4b7a:	bl	4a9c <_sbrk_r>
    4b7e:	ldr	r2, [r7, #8]
    4b80:	subs	r3, r0, r2
    4b82:	cmp	r3, #15
    4b84:	ble.n	4b44 <_malloc_trim_r+0x3c>
    4b86:	ldr	r4, [pc, #24]	; (4ba0 <_malloc_trim_r+0x98>)
    4b88:	ldr	r1, [pc, #16]	; (4b9c <_malloc_trim_r+0x94>)
    4b8a:	ldr	r4, [r4, #0]
    4b8c:	orr.w	r3, r3, #1
    4b90:	subs	r0, r0, r4
    4b92:	str	r3, [r2, #4]
    4b94:	str	r0, [r1, #0]
    4b96:	b.n	4b44 <_malloc_trim_r+0x3c>
    4b98:	.word	0x1fff119c
    4b9c:	.word	0x1fff1ccc
    4ba0:	.word	0x1fff15a8

00004ba4 <_free_r>:
    4ba4:	cmp	r1, #0
    4ba6:	beq.n	4c34 <_free_r+0x90>
    4ba8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bac:	mov	r5, r1
    4bae:	mov	r8, r0
    4bb0:	bl	4a94 <__malloc_lock>
    4bb4:	ldr.w	r7, [r5, #-4]
    4bb8:	ldr	r1, [pc, #424]	; (4d64 <_free_r+0x1c0>)
    4bba:	bic.w	r3, r7, #1
    4bbe:	sub.w	r4, r5, #8
    4bc2:	adds	r2, r4, r3
    4bc4:	ldr	r6, [r1, #8]
    4bc6:	ldr	r0, [r2, #4]
    4bc8:	cmp	r2, r6
    4bca:	bic.w	r0, r0, #3
    4bce:	beq.n	4c96 <_free_r+0xf2>
    4bd0:	lsls	r6, r7, #31
    4bd2:	str	r0, [r2, #4]
    4bd4:	bmi.n	4bee <_free_r+0x4a>
    4bd6:	ldr.w	r7, [r5, #-8]
    4bda:	subs	r4, r4, r7
    4bdc:	add.w	lr, r1, #8
    4be0:	ldr	r5, [r4, #8]
    4be2:	cmp	r5, lr
    4be4:	add	r3, r7
    4be6:	beq.n	4cc8 <_free_r+0x124>
    4be8:	ldr	r7, [r4, #12]
    4bea:	str	r7, [r5, #12]
    4bec:	str	r5, [r7, #8]
    4bee:	adds	r5, r2, r0
    4bf0:	ldr	r5, [r5, #4]
    4bf2:	lsls	r5, r5, #31
    4bf4:	bpl.n	4c7c <_free_r+0xd8>
    4bf6:	orr.w	r2, r3, #1
    4bfa:	str	r2, [r4, #4]
    4bfc:	str	r3, [r4, r3]
    4bfe:	cmp.w	r3, #512	; 0x200
    4c02:	bcs.n	4c36 <_free_r+0x92>
    4c04:	lsrs	r3, r3, #3
    4c06:	adds	r2, r3, #1
    4c08:	ldr	r5, [r1, #4]
    4c0a:	ldr.w	r7, [r1, r2, lsl #3]
    4c0e:	str	r7, [r4, #8]
    4c10:	movs	r0, #1
    4c12:	asrs	r3, r3, #2
    4c14:	lsl.w	r3, r0, r3
    4c18:	add.w	r0, r1, r2, lsl #3
    4c1c:	orrs	r5, r3
    4c1e:	subs	r0, #8
    4c20:	str	r0, [r4, #12]
    4c22:	str	r5, [r1, #4]
    4c24:	str.w	r4, [r1, r2, lsl #3]
    4c28:	str	r4, [r7, #12]
    4c2a:	mov	r0, r8
    4c2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4c30:	b.w	4a98 <__malloc_unlock>
    4c34:	bx	lr
    4c36:	lsrs	r2, r3, #9
    4c38:	cmp	r2, #4
    4c3a:	bhi.n	4ce4 <_free_r+0x140>
    4c3c:	lsrs	r2, r3, #6
    4c3e:	add.w	r7, r2, #57	; 0x39
    4c42:	lsls	r7, r7, #1
    4c44:	add.w	r5, r2, #56	; 0x38
    4c48:	add.w	r0, r1, r7, lsl #2
    4c4c:	ldr.w	r2, [r1, r7, lsl #2]
    4c50:	ldr	r1, [pc, #272]	; (4d64 <_free_r+0x1c0>)
    4c52:	subs	r0, #8
    4c54:	cmp	r0, r2
    4c56:	beq.n	4cf4 <_free_r+0x150>
    4c58:	ldr	r1, [r2, #4]
    4c5a:	bic.w	r1, r1, #3
    4c5e:	cmp	r3, r1
    4c60:	bcs.n	4c68 <_free_r+0xc4>
    4c62:	ldr	r2, [r2, #8]
    4c64:	cmp	r0, r2
    4c66:	bne.n	4c58 <_free_r+0xb4>
    4c68:	ldr	r0, [r2, #12]
    4c6a:	str	r0, [r4, #12]
    4c6c:	str	r2, [r4, #8]
    4c6e:	str	r4, [r0, #8]
    4c70:	str	r4, [r2, #12]
    4c72:	mov	r0, r8
    4c74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4c78:	b.w	4a98 <__malloc_unlock>
    4c7c:	ldr	r5, [r2, #8]
    4c7e:	ldr	r7, [pc, #232]	; (4d68 <_free_r+0x1c4>)
    4c80:	cmp	r5, r7
    4c82:	add	r3, r0
    4c84:	beq.n	4d06 <_free_r+0x162>
    4c86:	ldr	r0, [r2, #12]
    4c88:	str	r0, [r5, #12]
    4c8a:	orr.w	r2, r3, #1
    4c8e:	str	r5, [r0, #8]
    4c90:	str	r2, [r4, #4]
    4c92:	str	r3, [r4, r3]
    4c94:	b.n	4bfe <_free_r+0x5a>
    4c96:	lsls	r7, r7, #31
    4c98:	add	r3, r0
    4c9a:	bmi.n	4cac <_free_r+0x108>
    4c9c:	ldr.w	r2, [r5, #-8]
    4ca0:	subs	r4, r4, r2
    4ca2:	add	r3, r2
    4ca4:	ldr	r0, [r4, #8]
    4ca6:	ldr	r2, [r4, #12]
    4ca8:	str	r2, [r0, #12]
    4caa:	str	r0, [r2, #8]
    4cac:	ldr	r2, [pc, #188]	; (4d6c <_free_r+0x1c8>)
    4cae:	ldr	r2, [r2, #0]
    4cb0:	orr.w	r0, r3, #1
    4cb4:	cmp	r3, r2
    4cb6:	str	r0, [r4, #4]
    4cb8:	str	r4, [r1, #8]
    4cba:	bcc.n	4c2a <_free_r+0x86>
    4cbc:	ldr	r3, [pc, #176]	; (4d70 <_free_r+0x1cc>)
    4cbe:	mov	r0, r8
    4cc0:	ldr	r1, [r3, #0]
    4cc2:	bl	4b08 <_malloc_trim_r>
    4cc6:	b.n	4c2a <_free_r+0x86>
    4cc8:	adds	r1, r2, r0
    4cca:	ldr	r1, [r1, #4]
    4ccc:	lsls	r1, r1, #31
    4cce:	bmi.n	4d5a <_free_r+0x1b6>
    4cd0:	ldr	r1, [r2, #8]
    4cd2:	ldr	r2, [r2, #12]
    4cd4:	str	r2, [r1, #12]
    4cd6:	add	r3, r0
    4cd8:	orr.w	r0, r3, #1
    4cdc:	str	r1, [r2, #8]
    4cde:	str	r0, [r4, #4]
    4ce0:	str	r3, [r4, r3]
    4ce2:	b.n	4c2a <_free_r+0x86>
    4ce4:	cmp	r2, #20
    4ce6:	bhi.n	4d18 <_free_r+0x174>
    4ce8:	add.w	r7, r2, #92	; 0x5c
    4cec:	lsls	r7, r7, #1
    4cee:	add.w	r5, r2, #91	; 0x5b
    4cf2:	b.n	4c48 <_free_r+0xa4>
    4cf4:	asrs	r2, r5, #2
    4cf6:	ldr	r3, [r1, #4]
    4cf8:	movs	r5, #1
    4cfa:	lsl.w	r2, r5, r2
    4cfe:	orrs	r3, r2
    4d00:	str	r3, [r1, #4]
    4d02:	mov	r2, r0
    4d04:	b.n	4c6a <_free_r+0xc6>
    4d06:	orr.w	r2, r3, #1
    4d0a:	str	r4, [r1, #20]
    4d0c:	str	r4, [r1, #16]
    4d0e:	str	r5, [r4, #12]
    4d10:	str	r5, [r4, #8]
    4d12:	str	r2, [r4, #4]
    4d14:	str	r3, [r4, r3]
    4d16:	b.n	4c2a <_free_r+0x86>
    4d18:	cmp	r2, #84	; 0x54
    4d1a:	bhi.n	4d2a <_free_r+0x186>
    4d1c:	lsrs	r2, r3, #12
    4d1e:	add.w	r7, r2, #111	; 0x6f
    4d22:	lsls	r7, r7, #1
    4d24:	add.w	r5, r2, #110	; 0x6e
    4d28:	b.n	4c48 <_free_r+0xa4>
    4d2a:	cmp.w	r2, #340	; 0x154
    4d2e:	bhi.n	4d3e <_free_r+0x19a>
    4d30:	lsrs	r2, r3, #15
    4d32:	add.w	r7, r2, #120	; 0x78
    4d36:	lsls	r7, r7, #1
    4d38:	add.w	r5, r2, #119	; 0x77
    4d3c:	b.n	4c48 <_free_r+0xa4>
    4d3e:	movw	r0, #1364	; 0x554
    4d42:	cmp	r2, r0
    4d44:	bhi.n	4d54 <_free_r+0x1b0>
    4d46:	lsrs	r2, r3, #18
    4d48:	add.w	r7, r2, #125	; 0x7d
    4d4c:	lsls	r7, r7, #1
    4d4e:	add.w	r5, r2, #124	; 0x7c
    4d52:	b.n	4c48 <_free_r+0xa4>
    4d54:	movs	r7, #254	; 0xfe
    4d56:	movs	r5, #126	; 0x7e
    4d58:	b.n	4c48 <_free_r+0xa4>
    4d5a:	orr.w	r2, r3, #1
    4d5e:	str	r2, [r4, #4]
    4d60:	str	r3, [r4, r3]
    4d62:	b.n	4c2a <_free_r+0x86>
    4d64:	.word	0x1fff119c
    4d68:	.word	0x1fff11a4
    4d6c:	.word	0x1fff15a4
    4d70:	.word	0x1fff1cc8

00004d74 <__register_exitproc>:
    4d74:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d78:	ldr	r4, [pc, #148]	; (4e10 <__register_exitproc+0x9c>)
    4d7a:	ldr	r5, [r4, #0]
    4d7c:	ldr.w	r4, [r5, #328]	; 0x148
    4d80:	mov	r6, r0
    4d82:	mov	r8, r1
    4d84:	mov	sl, r2
    4d86:	mov	r9, r3
    4d88:	cbz	r4, 4dfc <__register_exitproc+0x88>
    4d8a:	ldr	r0, [r4, #4]
    4d8c:	cmp	r0, #31
    4d8e:	bgt.n	4dc0 <__register_exitproc+0x4c>
    4d90:	adds	r3, r0, #1
    4d92:	cbz	r6, 4db2 <__register_exitproc+0x3e>
    4d94:	add.w	r5, r4, r0, lsl #2
    4d98:	movs	r2, #1
    4d9a:	str.w	sl, [r5, #136]	; 0x88
    4d9e:	ldr.w	r1, [r4, #392]	; 0x188
    4da2:	lsls	r2, r0
    4da4:	orrs	r1, r2
    4da6:	cmp	r6, #2
    4da8:	str.w	r1, [r4, #392]	; 0x188
    4dac:	str.w	r9, [r5, #264]	; 0x108
    4db0:	beq.n	4df0 <__register_exitproc+0x7c>
    4db2:	adds	r0, #2
    4db4:	str	r3, [r4, #4]
    4db6:	str.w	r8, [r4, r0, lsl #2]
    4dba:	movs	r0, #0
    4dbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4dc0:	ldr	r3, [pc, #80]	; (4e14 <__register_exitproc+0xa0>)
    4dc2:	cbz	r3, 4e06 <__register_exitproc+0x92>
    4dc4:	mov.w	r0, #400	; 0x190
    4dc8:	bl	4514 <malloc>
    4dcc:	mov	r4, r0
    4dce:	cbz	r0, 4e06 <__register_exitproc+0x92>
    4dd0:	ldr.w	r3, [r5, #328]	; 0x148
    4dd4:	movs	r7, #0
    4dd6:	stmia.w	r0, {r3, r7}
    4dda:	str.w	r4, [r5, #328]	; 0x148
    4dde:	mov	r0, r7
    4de0:	movs	r3, #1
    4de2:	str.w	r7, [r4, #392]	; 0x188
    4de6:	str.w	r7, [r4, #396]	; 0x18c
    4dea:	cmp	r6, #0
    4dec:	beq.n	4db2 <__register_exitproc+0x3e>
    4dee:	b.n	4d94 <__register_exitproc+0x20>
    4df0:	ldr.w	r1, [r4, #396]	; 0x18c
    4df4:	orrs	r2, r1
    4df6:	str.w	r2, [r4, #396]	; 0x18c
    4dfa:	b.n	4db2 <__register_exitproc+0x3e>
    4dfc:	add.w	r4, r5, #332	; 0x14c
    4e00:	str.w	r4, [r5, #328]	; 0x148
    4e04:	b.n	4d8a <__register_exitproc+0x16>
    4e06:	mov.w	r0, #4294967295
    4e0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e0e:	nop
    4e10:	.word	0x0000516c
    4e14:	.word	0x00004515
    4e18:	.word	0x00000026
    4e1c:	.word	0x00000029
    4e20:	.word	0x0000002d
    4e24:	.word	0x00000033
    4e28:	.word	0x00000064
    4e2c:	.word	0x00000064
    4e30:	.word	0x00000064
    4e34:	.word	0x00000064
    4e38:	.word	0x00000001
    4e3c:	.word	0x00000001
    4e40:	.word	0x00000001
    4e44:	.word	0x00000001
    4e48:	.word	0x7370704f
    4e4c:	.word	0x6e61202c
    4e50:	.word	0x6b6e7520
    4e54:	.word	0x6e776f6e
    4e58:	.word	0x44494d20
    4e5c:	.word	0x656d2049
    4e60:	.word	0x67617373
    4e64:	.word	0x79742065
    4e68:	.word	0x00216570
    4e6c:	.word	0x43544950
    4e70:	.word	0x00000048
    4e74:	.word	0x4f4c4556
    4e78:	.word	0x59544943
    4e7c:	.word	0x00000000
    4e80:	.word	0x45544f4e
    4e84:	.word	0x474e454c
    4e88:	.word	0x00004854
    4e8c:	.word	0x424f4c47
    4e90:	.word	0x00004c41
    4e94:	.word	0x79616c50
    4e98:	.word	0x00000000

00004e9c <pin2sc1a>:
    4e9c:	................
    4eac:	................
    4ebc:	................
    4ecc:	................
    4edc:	........

00004ee4 <digital_pin_to_info_PGM>:
    4ee4:	@..C@..@D..CD..@
    4ef4:	...C...@0..C0..@
    4f04:	4..C4..@...C...@
    4f14:	...C...@...C...@
    4f24:	...C...@...C...@
    4f34:	...C...@...C...@
    4f44:	...C...@...C...@
    4f54:	...C...@...C...@
    4f64:	...C...@...C...@
    4f74:	...C...@...C...@
    4f84:	...C...@...C...@
    4f94:	...C...@...C...@
    4fa4:	h .Ch..@...C...@
    4fb4:	8..C8..@<..C<..@
    4fc4:	@..C@..@H..CH..@
    4fd4:	L..CL..@(..C(..@
    4fe4:	,..C,..@` .C`..@
    4ff4:	d .Cd..@ ..C ..@
    5004:	$..C$..@(..C(..@
    5014:	,..C,..@D..CD..@
    5024:	p..Cp..@t..Ct..@
    5034:	h..Ch..@P..CP..@
    5044:	X..CX..@\..C\..@
    5054:	T..CT..@ ..C ..@
    5064:	$..C$..@...C...@
    5074:	...C...@8..C8..@
    5084:	4..C4..@0..C0..@
    5094:	<..C<..@,..C,..@
    50a4:	( .C(..@, .C,..@
    50b4:	. .C...@. .C...@
    50c4:	. .C...@. .C...@
    50d4:	. .C...@. .C...@

000050e4 <vtable for usb_serial_class>:
	...
    50ec:	m:..e:..a:..]:..
    50fc:	Y:..U:..Q:..M:..
    510c:	....

00005110 <usb_endpoint_config_table>:
    5110:	........

00005118 <usb_descriptor_list>:
    5118:	....t...........
    5128:	............P...
    5138:	................
    5148:	....8...........
    5158:	T...............
    5168:	....

0000516c <_global_impure_ptr>:
    516c:	p...

00005170 <_init>:
    5170:	push	{r3, r4, r5, r6, r7, lr}
    5172:	nop
    5174:	pop	{r3, r4, r5, r6, r7}
    5176:	pop	{r3}
    5178:	mov	lr, r3
    517a:	bx	lr

0000517c <__init_array_start>:
    517c:	.word	0x00004ac1

00005180 <__frame_dummy_init_array_entry>:
    5180:	5...%...

Disassembly of section .fini:

00005188 <_fini>:
    5188:	push	{r3, r4, r5, r6, r7, lr}
    518a:	nop

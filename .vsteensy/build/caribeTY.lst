
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004374 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15a8 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003014 l     F .text	0000000c startup_default_early_hook
00003020 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15a8 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15ac l       .bss	00000000 object.8610
0000436c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000e2c l     F .text	00000200 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff17f1 l     O .bss	00000001 tx_noautoflush
1fff17f4 l     O .bss	00000004 tx_packet
1fff17f8 l     O .bss	00000001 transmit_previous_timeout
1fff17fc l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00001300 l     F .text	00000144 wait_for_cal
1fff1801 l     O .bss	00000001 analog_right_shift
1fff1802 l     O .bss	00000001 calibrating
00004088 l     O .text	00000048 pin2sc1a
1fff0c54 l     O .data	00000001 analog_config_bits
1fff1803 l     O .bss	00000001 analogReadBusyADC1
1fff1804 l     O .bss	00000001 analogReadBusyADC0
1fff1805 l     O .bss	00000001 analog_reference_internal
1fff0c55 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00001620 l     F .text	0000004c digitalWrite.part.1
0000166c l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
0000194c l     F .text	00000048 sysex_byte
1fff1820 l     O .bss	00000001 tx_noautoflush
1fff184c l     O .bss	00000004 tx_packet
1fff1850 l     O .bss	00000001 transmit_previous_timeout
1fff1858 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c58 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff186c l     O .bss	00000004 ep0_tx_ptr
1fff1870 l     O .bss	00000014 rx_last
1fff1884 l     O .bss	00000002 ep0_tx_len
1fff1888 l     O .bss	00000040 ep0_rx0_buf
1fff18c8 l     O .bss	00000014 rx_first
1fff18dc l     O .bss	00000001 ep0_tx_data_toggle
1fff18e0 l     O .bss	00000040 ep0_rx1_buf
1fff1920 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff1934 l     O .bss	00000014 tx_last
1fff1948 l     O .bss	00000008 setup
1fff1950 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1954 l     O .bss	00000008 reply_buffer
1fff1960 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1965 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1968 l     O .bss	00000004 rts_pin
1fff196c l     O .bss	00000001 rx_buffer_head
1fff196d l     O .bss	00000001 rx_buffer_tail
1fff1970 l     O .bss	00000028 tx_buffer
1fff1998 l     O .bss	00000040 rx_buffer
1fff19d8 l     O .bss	00000001 transmitting
1fff19d9 l     O .bss	00000001 tx_buffer_tail
1fff19dc l     O .bss	00000004 transmit_pin
1fff19e0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff19e4 l     O .bss	00000004 rts_pin
1fff19e8 l     O .bss	00000001 transmitting
1fff19e9 l     O .bss	00000001 rx_buffer_tail
1fff19ec l     O .bss	00000028 tx_buffer
1fff1a14 l     O .bss	00000040 rx_buffer
1fff1a54 l     O .bss	00000001 rx_buffer_head
1fff1a55 l     O .bss	00000001 tx_buffer_tail
1fff1a58 l     O .bss	00000004 transmit_pin
1fff1a5c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1a60 l     O .bss	00000004 rts_pin
1fff1a64 l     O .bss	00000001 rx_buffer_head
1fff1a65 l     O .bss	00000001 rx_buffer_tail
1fff1a68 l     O .bss	00000028 tx_buffer
1fff1a90 l     O .bss	00000040 rx_buffer
1fff1ad0 l     O .bss	00000001 transmitting
1fff1ad1 l     O .bss	00000001 tx_buffer_tail
1fff1ad4 l     O .bss	00000004 transmit_pin
1fff1ad8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1adc l     O .bss	00000004 rts_pin
1fff1ae0 l     O .bss	00000001 rx_buffer_head
1fff1ae1 l     O .bss	00000001 rx_buffer_tail
1fff1ae4 l     O .bss	00000040 tx_buffer
1fff1b24 l     O .bss	00000040 rx_buffer
1fff1b64 l     O .bss	00000001 transmitting
1fff1b65 l     O .bss	00000001 tx_buffer_tail
1fff1b68 l     O .bss	00000004 transmit_pin
1fff1b6c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1b70 l     O .bss	00000004 rts_pin
1fff1b74 l     O .bss	00000001 rx_buffer_head
1fff1b75 l     O .bss	00000001 rx_buffer_tail
1fff1b78 l     O .bss	00000028 tx_buffer
1fff1ba0 l     O .bss	00000040 rx_buffer
1fff1be0 l     O .bss	00000001 transmitting
1fff1be1 l     O .bss	00000001 tx_buffer_tail
1fff1be4 l     O .bss	00000004 transmit_pin
1fff1be8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c70 l     O .data	00000012 device_descriptor
1fff0c9c l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1bec l     O .bss	00000004 rts_pin
1fff1bf0 l     O .bss	00000001 rx_buffer_head
1fff1bf1 l     O .bss	00000001 rx_buffer_tail
1fff1bf4 l     O .bss	00000028 tx_buffer
1fff1c1c l     O .bss	00000040 rx_buffer
1fff1c5c l     O .bss	00000001 transmitting
1fff1c5d l     O .bss	00000001 tx_buffer_tail
1fff1c60 l     O .bss	00000004 transmit_pin
1fff1c64 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00003cb4 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d68 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15a8 l       .bss	00000000 __bss_start__
1fff1e00 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
0000300c  w    F .text	00000006 adc0_isr
000010a4 g     F .text	0000001c usb_serial_available
00002ecc g     F .text	00000020 serial4_available
00002b78  w    F .text	000000c4 yield
1fff0c84 g     O .data	00000018 usb_string_manufacturer_name_default
000030b8 g     F .text	00000020 serial_available
1fff1824 g     O .bss	00000004 usb_midi_handleProgramChange
00002fc4  w    F .text	00000048 hard_fault_isr
0000300c  w    F .text	00000006 dma_ch6_isr
00002c6c g     F .text	00000020 Print::println()
00002da0 g     F .text	00000020 serial2_available
0000300c  w    F .text	00000006 uart0_lon_isr
00001f8c g     F .text	000000e8 usb_rx_memory
00002c3c  w    F .text	00000002 serialEvent5()
0000300c  w    F .text	00000006 dma_ch8_isr
000031e4 g     F .text	00000020 serial6_available
00003c8c g     F .text	00000002 __malloc_unlock
1fff1838 g     O .bss	00000004 usb_midi_handleAfterTouch
00001444 g     F .text	000000e0 analog_init
00002074 g     F .text	00000084 usb_tx
0000300c  w    F .text	00000006 portcd_isr
1fff1848 g     O .bss	00000004 usb_midi_handleSysExComplete
00003604 g     F .text	00000098 MillisTimer::runFromTimer()
0000300c  w    F .text	00000006 can1_rx_warn_isr
00004378 g       .fini	00000000 __exidx_end
0000300c  w    F .text	00000006 dma_error_isr
1fff1cc4 g     O .bss	00000001 usb_midi_msg_type
1fff1c7c g     O .bss	00000001 EventResponder::runningFromYield
0000300c  w    F .text	00000006 i2c0_isr
000036ac g     F .text	0000000c __errno
0000300c  w    F .text	00000006 portd_isr
0000300c  w    F .text	00000006 enet_error_isr
1fff1c68 g     O .bss	00000004 EventResponder::firstInterrupt
0000300c  w    F .text	00000006 tpm1_isr
00002c58  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000040d0 g     O .text	00000200 digital_pin_to_info_PGM
1fff1dfc g     O .bss	00000004 errno
00004378 g       .fini	00000000 _etext
1fff15a8 g       .bss	00000000 _sbss
00002ca4  w    F .text	00000002 serialEvent6()
1fff1834 g     O .bss	00000004 usb_midi_handleVelocityChange
00001714 g     F .text	0000001c digitalRead
0000300c  w    F .text	00000006 porte_isr
00000498 g     F .text	00000994 loop
0000300c  w    F .text	00000006 portb_isr
00001a30 g     F .text	0000002c usb_midi_flush_output
0000300c  w    F .text	00000006 spi1_isr
00002eec g     F .text	000000d8 uart3_status_isr
000034b0  w    F .text	00000002 serialEvent1()
1fff15ec g     O .bss	00000014 led4
0000300c  w    F .text	00000006 mcm_isr
0000359c g     F .text	00000068 MillisTimer::addToActiveList()
00001a5c g     F .text	0000043c usb_midi_read
1fff1810 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1c6c g     O .bss	00000004 EventResponder::lastInterrupt
00002dc0 g     F .text	0000010c uart1_status_isr
1fff1cc6 g     O .bss	00000002 usb_midi_msg_sysex_len
0000300c  w    F .text	00000006 randnum_isr
1fff1818 g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff1808 g     O .bss	00000004 systick_millis_count
00002fc4  w    F .text	00000048 bus_fault_isr
0000300c  w    F .text	00000006 watchdog_isr
0000300c  w    F .text	00000006 i2c1_isr
1fff195c g     O .bss	00000001 usb_configuration
0000300c  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00002c8c  w    F .text	00000002 serialEvent2()
0000300c  w    F .text	00000006 i2c2_isr
1fff0c84  w    O .data	00000018 usb_string_manufacturer_name
1fff1df0 g     O .bss	0000000a usb_rx_byte_count_data
0000300c  w    F .text	00000006 pit1_isr
00003708 g     F .text	00000010 malloc
0000300c  w    F .text	00000006 dma_ch4_isr
0000300c  w    F .text	00000006 software_isr
0000300c  w    F .text	00000006 dma_ch7_isr
00003538  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00002aa8 g     F .text	000000d0 usb_init
0000300c  w    F .text	00000006 lptmr_isr
1fff1c8c g     O .bss	00000004 __malloc_top_pad
000016e4 g     F .text	00000024 rtc_set
1fff1788 g     O .bss	00000028 button5
1fff17c8 g     O .bss	00000028 button4
1fff0c40 g       .data	00000000 _sdata
1fff1868 g     O .bss	00000004 usb_midi_handleNoteOn
00003084 g     F .text	00000034 kinetis_hsrun_enable
00003c90 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
0000102c g     F .text	00000048 usb_serial_getchar
0000300c  w    F .text	00000006 can1_bus_off_isr
0000300c  w    F .text	00000006 ftm2_isr
1fff1cb8 g     O .bss	00000008 usb_cdc_line_coding
00001708 g     F .text	0000000a digitalWrite
0000300c  w    F .text	00000006 uart5_status_isr
00003204 g     F .text	000000e4 lpuart0_status_isr
1fff1c74 g     O .bss	00000004 EventResponder::lastYield
000042fc g     O .text	00000005 usb_endpoint_config_table
0000300c  w    F .text	00000006 dma_ch9_isr
0000300c  w    F .text	00000006 pit2_isr
000033b8 g     F .text	00000020 serial3_available
1fff1c88 g     O .bss	00000004 __malloc_max_sbrked_mem
00001730 g     F .text	0000000a pinMode
00001ed8 g     F .text	0000004c usb_free
0000300c  w    F .text	00000006 i2c3_isr
1fff1614 g     O .bss	00000014 led1
1fff1830 g     O .bss	00000004 usb_midi_handleSysExPartial
00004378 g       .fini	00000000 __exidx_start
0000300c  w    F .text	00000006 pit0_isr
1fff1cc8 g     O .bss	00000001 usb_midi_msg_data1
1fff1c78 g     O .bss	00000004 EventResponder::firstYield
00004358 g     O .text	00000004 _global_impure_ptr
0000300c  w    F .text	00000006 can1_error_isr
000036b8 g     F .text	00000050 __libc_init_array
1fff1e00 g       .bss	00000000 __bss_end
0000300c  w    F .text	00000006 can0_wakeup_isr
0000300c  w    F .text	00000006 flash_cmd_isr
00002c40  w    F .text	00000004 usb_serial_class::clear()
000033d8 g     F .text	000000d8 uart2_status_isr
00003024 g     F .text	0000002c _sbrk
1fff1c80 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c6c g     O .data	00000004 __brkval
1fff1800 g     O .bss	00000001 usb_cdc_line_rtsdtr
000012b8 g     F .text	00000048 usb_serial_flush_callback
0000435c g     F .text	00000000 _init
0000300c  w    F .text	00000006 svcall_isr
0000300c  w    F .text	00000006 dma_ch15_isr
0000300c  w    F .text	00000006 uart1_error_isr
00003cd4 g     F .text	00000028 __libc_fini_array
0000300c  w    F .text	00000006 usbhs_phy_isr
1fff1e00 g       .bss	00000000 _ebss
0000300c g     F .text	00000006 unused_isr
0000300c  w    F .text	00000006 spi0_isr
0000300c  w    F .text	00000006 dma_ch3_isr
0000300c  w    F .text	00000006 flash_error_isr
1fff1628 g     O .bss	00000018 knob2
00002ca8 g     F .text	00000020 serial5_available
0000300c  w    F .text	00000006 uart5_error_isr
0000300c  w    F .text	00000006 rtc_seconds_isr
0000300c  w    F .text	00000006 pdb_isr
00002fc4  w    F .text	00000048 usage_fault_isr
0000300c  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
0000300c  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1cc0 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff0c40 g     O .data	00000014 leds
0000369c g     F .text	00000010 systick_isr
0000300c  w    F .text	00000006 rtc_alarm_isr
0000300c  w    F .text	00000006 dma_ch2_isr
1fff0c5c g     O .data	00000010 Serial
0000300c  w    F .text	00000006 ftm1_isr
00002c60  w    F .text	00000006 usb_serial_class::write(unsigned char)
00003014  w    F .text	0000000c startup_early_hook
0000300c  w    F .text	00000006 dma_ch13_isr
0000300c  w    F .text	00000006 uart2_error_isr
00001074 g     F .text	00000030 usb_serial_peekchar
1fff0d50 g     O .data	00000016 usb_string_serial_number_default
00002fc4 g     F .text	00000048 fault_isr
00003d98 g     F .text	000001d0 _free_r
1fff1854 g     O .bss	00000004 usb_midi_handleStop
0000300c  w    F .text	00000006 usb_charge_isr
00002c50  w    F .text	00000004 usb_serial_class::flush()
0000300c  w    F .text	00000006 cmt_isr
0000300c  w    F .text	00000006 usbhs_isr
1fff1864 g     O .bss	00000004 usb_midi_handleControlChange
1fff15a0 g     O .data	00000004 __malloc_sbrk_base
00002c48  w    F .text	00000004 usb_serial_class::read()
0000300c  w    F .text	00000006 ftm3_isr
0000300c  w    F .text	00000006 tsi0_isr
1fff1684 g     O .bss	00000018 knob1
0000300c  w    F .text	00000006 spi2_isr
00002c90  w    F .text	00000002 serialEvent4()
00002c68  w    F .text	00000002 serialEvent()
1fff18dd g     O .bss	00000001 usb_reboot_timer
00003f68 g     F .text	000000a4 __register_exitproc
000010c0 g     F .text	00000038 usb_serial_flush_input
00001200 g     F .text	00000018 usb_serial_putchar
1fff1c90 g     O .bss	00000028 __malloc_current_mallinfo
0000300c  w    F .text	00000006 can0_bus_off_isr
1fff1600 g     O .bss	00000014 led5
1fff1951 g     O .bss	00000001 usb_rx_memory_needed
000020f8 g     F .text	000009b0 usb_isr
1fff1860 g     O .bss	00000004 usb_midi_handleNoteOff
000042d0  w    O .text	00000028 vtable for usb_serial_class
1fff1644 g     O .bss	00000018 knob3
0000300c  w    F .text	00000006 uart3_error_isr
1fff1c70 g     O .bss	00000004 MillisTimer::listActive
0000300c  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
0000300c  w    F .text	00000006 low_voltage_isr
1fff16c4 g     O .bss	00000028 button2
1fff1194 g     O .data	00000408 __malloc_av_
0000300c  w    F .text	00000006 can0_error_isr
000017e0 g     F .text	0000016c _init_Teensyduino_internal_
00001260 g     F .text	00000058 usb_serial_flush_output
0000300c  w    F .text	00000006 dma_ch12_isr
00003c88 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
0000300c  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
0000300c  w    F .text	00000006 pit3_isr
0000300c  w    F .text	00000006 enet_rx_isr
0000300c  w    F .text	00000006 portc_isr
00002c94 g     F .text	00000010 main
1fff1c84 g     O .bss	00000004 __malloc_max_total_mem
1fff15d8 g     O .bss	00000014 led3
00002fc4  w    F .text	00000048 memmanage_fault_isr
000032e8 g     F .text	00000084 usb_init_serialnumber
1fff1640 g     O .bss	00000001 currentMode
00004374 g       .text	00000000 __init_array_end
00003718 g     F .text	00000570 _malloc_r
0000300c  w    F .text	00000006 debugmonitor_isr
1fff182c g     O .bss	00000004 usb_midi_handleSongPosition
000034b8 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff181c g     O .bss	00000004 usb_midi_handleContinue
1fff1cc9 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
0000300c  w    F .text	00000006 cmp1_isr
1fff16ec g     O .bss	00000028 button3
0000300c  w    F .text	00000006 ftm0_isr
00003cfc g     F .text	0000009c _malloc_trim_r
1fff0d4c g     O .data	00000004 string0
000010f8 g     F .text	00000108 usb_serial_write
00003020  w    F .text	00000002 startup_late_hook
00002c4c  w    F .text	00000004 usb_serial_class::available()
1fff1cca g     O .bss	00000001 usb_midi_msg_cable
1fff0d34  w    O .data	00000018 usb_string_product_name
0000173c g     F .text	000000a4 delay
0000300c  w    F .text	00000006 tpm0_isr
00004374 g     F .fini	00000000 _fini
0000300c  w    F .text	00000006 i2s0_rx_isr
0000300c  w    F .text	00000006 uart4_error_isr
00001994 g     F .text	0000009c usb_midi_write_packed
00003cc8 g     F .text	0000000c atexit
0000300c  w    F .text	00000006 can0_message_isr
1fff1190 g     O .data	00000004 _impure_ptr
0000300c  w    F .text	00000006 can1_message_isr
0000300c  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1844 g     O .bss	00000004 usb_midi_handleTuneRequest
00004368 g       .text	00000000 __preinit_array_end
0000300c  w    F .text	00000006 sdhc_isr
1fff1ccb g     O .bss	00000001 usb_midi_msg_channel
00000490 g     F .text	00000008 setup
00004304 g     O .text	00000054 usb_descriptor_list
00001f24 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff17b0 g     O .bss	00000018 knob4
0000300c  w    F .text	00000006 dma_ch10_isr
1fff1718 g     O .bss	00000070 sequence1
1fff183c g     O .bss	00000004 usb_midi_handleStart
0000300c  w    F .text	00000006 uart0_error_isr
00001e98 g     F .text	00000040 usb_malloc
0000300c  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00001218 g     F .text	00000048 usb_serial_write_buffer_free
0000300c  w    F .text	00000006 enet_timer_isr
1fff165c g     O .bss	00000028 button6
1fff169c g     O .bss	00000028 button1
1fff15a4 g       .data	00000000 _edata
0000300c  w    F .text	00000006 i2s0_tx_isr
0000300c  w    F .text	00000006 adc1_isr
00002c54  w    F .text	00000004 usb_serial_class::availableForWrite()
0000300c  w    F .text	00000006 cmp0_isr
1fff180c g     O .bss	00000004 usb_midi_handleClock
0000336c g     F .text	0000004c ultoa
00003554 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff159c g     O .data	00000004 __malloc_trim_threshold
00002c44  w    F .text	00000004 usb_serial_class::peek()
1fff17f0 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff1828 g     O .bss	00000004 usb_midi_handlePitchChange
0000300c  w    F .text	00000006 pit_isr
1fff1840 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
0000300c  w    F .text	00000006 dac0_isr
00004368 g       .text	00000000 __init_array_start
0000300c  w    F .text	00000006 can1_tx_warn_isr
00001524 g     F .text	000000fc analogRead
1fff1ccc g     O .bss	00000122 usb_midi_msg_sysex
000030d8 g     F .text	0000010c uart0_status_isr
0000300c  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d34 g     O .data	00000018 usb_string_product_name_default
0000300c  w    F .text	00000006 dma_ch1_isr
00001f60 g     F .text	0000002c usb_tx_packet_count
0000300c  w    F .text	00000006 dma_ch5_isr
0000300c  w    F .text	00000006 can0_rx_warn_isr
0000300c  w    F .text	00000006 can0_tx_warn_isr
00002cc8 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00003050 g     F .text	00000034 kinetis_hsrun_disable
00004368 g       .text	00000000 __preinit_array_start
000034b4  w    F .text	00000002 serialEvent3()
1fff185c g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff15c4 g     O .bss	00000014 led2
0000300c  w    F .text	00000006 cmp2_isr
00003598 g     F .text	00000004 pendablesrvreq_isr
0000300c  w    F .text	00000006 wakeup_isr
0000300c  w    F .text	00000006 cmp3_isr
1fff1814 g     O .bss	00000004 usb_midi_handleActiveSensing
0000300c  w    F .text	00000006 tpm2_isr
0000300c  w    F .text	00000006 dma_ch0_isr
1fff0d50  w    O .data	00000016 usb_string_serial_number
0000300c  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... .....0.../..
      10:	./.../.../.../..
      20:	./.../.../...0..
      30:	.0.../...5...6..
      40:	.0...0...0...0..
      50:	.0...0...0...0..
      60:	.0...0...0...0..
      70:	.0...0...0...0..
      80:	.0...0...0...0..
      90:	.0...0...0...0..
      a0:	.0...0...0...0..
      b0:	.0...0...0...0..
      c0:	.0...-...0...3..
      d0:	.0.......0...0..
      e0:	.0...0...0...0..
      f0:	.0...0...0...0..
     100:	.0...0...0...0..
     110:	.0... ...0...0..
     120:	.0...0...0...0..
     130:	.0...0...0...0..
     140:	.0...0...,...0..
     150:	.0...0...0...0..
     160:	.0...0...0...0..
     170:	.0...0...0...0..
     180:	.0...0...0...0..
     190:	.0...0...2...0..
     1a0:	.0...0...0...0..
     1b0:	.0...0...0...0..
     1c0:	.0...0...0...0..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	3014 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	17e0 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	16e4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	16e4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	36b8 <__libc_init_array>

	startup_late_hook();
     33a:	bl	3020 <startup_late_hook>
	main();
     33e:	bl	2c94 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15a4
     374:	.word	0x00004374
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15a8
     380:	.word	0x1fff1e00
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15a8
     42c:	.word	0x00000000
     430:	.word	0x00004378

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15ac
     460:	.word	0x00004378
     464:	.word	0x1fff15a4
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    unsigned long lastBlink;
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #25
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    unsigned long lastBlink;
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	1730 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	1708 <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob2(A1, sequence1, SECOND, 1);
Knob knob3(A2, sequence1, THIRD, 2);
Knob knob4(A3, sequence1, FOURTH, 3);

void setup() {
  pinMode(13, OUTPUT);
     490:	movs	r1, #1
     492:	movs	r0, #13
     494:	b.w	1730 <pinMode>

00000498 <loop>:
  Serial.begin(9600);
}

void loop() {
     498:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     49c:	movs	r0, #0
     49e:	sub	sp, #72	; 0x48
     4a0:	bl	1a5c <usb_midi_read>
  if (usbMIDI.read()) {
     4a4:	cmp	r0, #0
     4a6:	bne.w	872 <loop+0x3da>
     4aa:	ldr	r4, [pc, #640]	; (72c <loop+0x294>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4ac:	ldr	r5, [pc, #640]	; (730 <loop+0x298>)
     4ae:	ldrb.w	r0, [r5, #32]
     4b2:	bl	1714 <digitalRead>
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b6:	ldr	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b8:	str	r0, [r5, #12]
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4ba:	cmp	r0, r2

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4bc:	mov	r3, r0
     4be:	mov	r1, r0
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4c0:	beq.w	89e <loop+0x406>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c4:	ldr	r2, [r4, #0]
     4c6:	str	r2, [sp, #68]	; 0x44
	return ret;
     4c8:	ldr	r2, [sp, #68]	; 0x44
        m_lastDebounceTime = millis();
     4ca:	str	r2, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4cc:	ldr	r0, [r4, #0]
     4ce:	str	r0, [sp, #64]	; 0x40
	return ret;
     4d0:	ldr	r0, [sp, #64]	; 0x40
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4d2:	cmp	r2, r0
     4d4:	beq.n	4e8 <loop+0x50>
        if (reading != m_state) {
     4d6:	ldr	r2, [r5, #4]
     4d8:	ldr	r6, [pc, #596]	; (730 <loop+0x298>)
     4da:	cmp	r3, r2
     4dc:	beq.w	8ba <loop+0x422>
          m_state = reading;
     4e0:	str	r3, [r6, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     4e2:	cmp	r3, #0
     4e4:	beq.w	8c2 <loop+0x42a>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e8:	ldr	r6, [pc, #584]	; (734 <loop+0x29c>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     4ea:	str	r1, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4ec:	ldrb.w	r0, [r6, #32]
     4f0:	bl	1714 <digitalRead>
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f4:	ldr	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f6:	str	r0, [r6, #12]
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f8:	cmp	r0, r2

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4fa:	mov	r3, r0
     4fc:	mov	r1, r0
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4fe:	beq.w	89a <loop+0x402>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     502:	ldr	r2, [r4, #0]
     504:	str	r2, [sp, #60]	; 0x3c
	return ret;
     506:	ldr	r2, [sp, #60]	; 0x3c
        m_lastDebounceTime = millis();
     508:	str	r2, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     50a:	ldr	r0, [r4, #0]
     50c:	str	r0, [sp, #56]	; 0x38
	return ret;
     50e:	ldr	r0, [sp, #56]	; 0x38
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     510:	cmp	r0, r2
     512:	beq.n	526 <loop+0x8e>
        if (reading != m_state) {
     514:	ldr	r2, [r6, #4]
     516:	ldr	r5, [pc, #540]	; (734 <loop+0x29c>)
     518:	cmp	r3, r2
     51a:	beq.w	8b2 <loop+0x41a>
          m_state = reading;
     51e:	str	r3, [r5, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     520:	cmp	r3, #0
     522:	beq.w	8f2 <loop+0x45a>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     526:	ldr	r5, [pc, #528]	; (738 <loop+0x2a0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     528:	str	r1, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52a:	ldrb.w	r0, [r5, #32]
     52e:	bl	1714 <digitalRead>
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     532:	ldr	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     534:	str	r0, [r5, #12]
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     536:	cmp	r0, r2

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     538:	mov	r3, r0
     53a:	mov	r1, r0
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     53c:	beq.w	8a2 <loop+0x40a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     540:	ldr	r2, [r4, #0]
     542:	str	r2, [sp, #52]	; 0x34
	return ret;
     544:	ldr	r2, [sp, #52]	; 0x34
        m_lastDebounceTime = millis();
     546:	str	r2, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     548:	ldr	r0, [r4, #0]
     54a:	str	r0, [sp, #48]	; 0x30
	return ret;
     54c:	ldr	r0, [sp, #48]	; 0x30
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     54e:	cmp	r0, r2
     550:	beq.n	564 <loop+0xcc>
        if (reading != m_state) {
     552:	ldr	r2, [r5, #4]
     554:	ldr	r6, [pc, #480]	; (738 <loop+0x2a0>)
     556:	cmp	r3, r2
     558:	beq.w	8be <loop+0x426>
          m_state = reading;
     55c:	str	r3, [r6, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     55e:	cmp	r3, #0
     560:	beq.w	922 <loop+0x48a>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     564:	ldr	r6, [pc, #468]	; (73c <loop+0x2a4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     566:	str	r1, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     568:	ldrb.w	r0, [r6, #32]
     56c:	bl	1714 <digitalRead>
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     570:	ldr	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     572:	str	r0, [r6, #12]
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     574:	cmp	r0, r2

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     576:	mov	r3, r0
     578:	mov	r1, r0
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     57a:	beq.w	8aa <loop+0x412>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     57e:	ldr	r2, [r4, #0]
     580:	str	r2, [sp, #44]	; 0x2c
	return ret;
     582:	ldr	r2, [sp, #44]	; 0x2c
        m_lastDebounceTime = millis();
     584:	str	r2, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     586:	ldr	r0, [r4, #0]
     588:	str	r0, [sp, #40]	; 0x28
	return ret;
     58a:	ldr	r0, [sp, #40]	; 0x28
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     58c:	cmp	r0, r2
     58e:	beq.n	5a2 <loop+0x10a>
        if (reading != m_state) {
     590:	ldr	r2, [r6, #4]
     592:	ldr	r5, [pc, #424]	; (73c <loop+0x2a4>)
     594:	cmp	r3, r2
     596:	beq.w	8ae <loop+0x416>
          m_state = reading;
     59a:	str	r3, [r5, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     59c:	cmp	r3, #0
     59e:	beq.w	952 <loop+0x4ba>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5a2:	ldr	r5, [pc, #412]	; (740 <loop+0x2a8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5a4:	str	r1, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5a6:	ldrb.w	r0, [r5, #32]
     5aa:	bl	1714 <digitalRead>
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5ae:	ldr	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5b0:	str	r0, [r5, #12]
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5b2:	cmp	r0, r2

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5b4:	mov	r3, r0
     5b6:	mov	r1, r0
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5b8:	beq.w	8a6 <loop+0x40e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5bc:	ldr	r2, [r4, #0]
     5be:	str	r2, [sp, #36]	; 0x24
	return ret;
     5c0:	ldr	r2, [sp, #36]	; 0x24
        m_lastDebounceTime = millis();
     5c2:	str	r2, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5c4:	ldr	r0, [r4, #0]
     5c6:	str	r0, [sp, #32]
	return ret;
     5c8:	ldr	r0, [sp, #32]
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5ca:	cmp	r0, r2
     5cc:	beq.n	60a <loop+0x172>
        if (reading != m_state) {
     5ce:	ldr	r2, [r5, #4]
     5d0:	ldr	r6, [pc, #364]	; (740 <loop+0x2a8>)
     5d2:	cmp	r3, r2
     5d4:	beq.w	8b6 <loop+0x41e>
          m_state = reading;
     5d8:	str	r3, [r6, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     5da:	cbnz	r3, 60a <loop+0x172>
     5dc:	ldrb	r2, [r6, #16]
     5de:	cmp	r2, #0
     5e0:	bne.w	bc2 <loop+0x72a>
        toggleGlobalMode();
      } else if (m_state == LOW) {
        m_led.toggle();
     5e4:	ldr	r3, [r6, #24]
     5e6:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     5ea:	clz	r1, r1
     5ee:	lsrs	r1, r1, #5
     5f0:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     5f2:	uxtb	r0, r0
     5f4:	bl	1708 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     5f8:	ldr	r3, [r6, #0]
     5fa:	ldr	r2, [r6, #28]
     5fc:	ldr	r1, [r6, #12]
     5fe:	subs	r3, #1
    void toggle () {
      m_state = !m_state;
    };

    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
     600:	add	r3, r2
     602:	ldrb	r2, [r3, #20]
     604:	eor.w	r2, r2, #1
     608:	strb	r2, [r3, #20]
    };

    void check () {
      if (blinking) {
     60a:	ldr	r6, [pc, #312]	; (744 <loop+0x2ac>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     60c:	str	r1, [r5, #8]
     60e:	ldrb	r3, [r6, #16]
     610:	cbz	r3, 624 <loop+0x18c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     612:	ldr	r3, [r4, #0]
     614:	str	r3, [sp, #28]
	return ret;
     616:	ldr	r3, [sp, #28]
        if (millis() - lastBlink > blinkLength) {
     618:	ldr	r1, [r6, #8]
     61a:	ldr	r2, [r6, #12]
     61c:	subs	r3, r3, r1
     61e:	cmp	r3, r2
     620:	bhi.w	858 <loop+0x3c0>

      digitalWrite(m_pin, m_state); 
    };

    void check () {
      if (blinking) {
     624:	ldr	r5, [pc, #288]	; (748 <loop+0x2b0>)
     626:	ldrb	r3, [r5, #16]
     628:	cbz	r3, 63c <loop+0x1a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     62a:	ldr	r3, [r4, #0]
     62c:	str	r3, [sp, #24]
	return ret;
     62e:	ldr	r3, [sp, #24]
        if (millis() - lastBlink > blinkLength) {
     630:	ldr	r1, [r5, #8]
     632:	ldr	r2, [r5, #12]
     634:	subs	r3, r3, r1
     636:	cmp	r3, r2
     638:	bhi.w	83e <loop+0x3a6>

      digitalWrite(m_pin, m_state); 
    };

    void check () {
      if (blinking) {
     63c:	ldr	r5, [pc, #268]	; (74c <loop+0x2b4>)
     63e:	ldrb	r3, [r5, #16]
     640:	cbz	r3, 654 <loop+0x1bc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     642:	ldr	r3, [r4, #0]
     644:	str	r3, [sp, #20]
	return ret;
     646:	ldr	r3, [sp, #20]
        if (millis() - lastBlink > blinkLength) {
     648:	ldr	r1, [r5, #8]
     64a:	ldr	r2, [r5, #12]
     64c:	subs	r3, r3, r1
     64e:	cmp	r3, r2
     650:	bhi.w	824 <loop+0x38c>

      digitalWrite(m_pin, m_state); 
    };

    void check () {
      if (blinking) {
     654:	ldr	r5, [pc, #248]	; (750 <loop+0x2b8>)
     656:	ldrb	r3, [r5, #16]
     658:	cbz	r3, 66c <loop+0x1d4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     65a:	ldr	r3, [r4, #0]
     65c:	str	r3, [sp, #16]
	return ret;
     65e:	ldr	r3, [sp, #16]
        if (millis() - lastBlink > blinkLength) {
     660:	ldr	r1, [r5, #8]
     662:	ldr	r2, [r5, #12]
     664:	subs	r3, r3, r1
     666:	cmp	r3, r2
     668:	bhi.w	80a <loop+0x372>

      digitalWrite(m_pin, m_state); 
    };

    void check () {
      if (blinking) {
     66c:	ldr	r5, [pc, #228]	; (754 <loop+0x2bc>)
     66e:	ldrb	r3, [r5, #16]
     670:	cbz	r3, 684 <loop+0x1ec>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     672:	ldr	r3, [r4, #0]
     674:	str	r3, [sp, #12]
	return ret;
     676:	ldr	r3, [sp, #12]
        if (millis() - lastBlink > blinkLength) {
     678:	ldr	r1, [r5, #8]
     67a:	ldr	r2, [r5, #12]
     67c:	subs	r3, r3, r1
     67e:	cmp	r3, r2
     680:	bhi.w	7f0 <loop+0x358>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     684:	ldr	r4, [pc, #208]	; (758 <loop+0x2c0>)
     686:	ldrb	r0, [r4, #0]
     688:	bl	1524 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     68c:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     68e:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     690:	cmp	r0, r3
     692:	beq.n	6a2 <loop+0x20a>
     694:	subs	r3, r0, r3
     696:	cmp	r3, #0
     698:	it	lt
     69a:	neglt	r3, r3
     69c:	cmp	r3, #10
     69e:	bgt.w	7c4 <loop+0x32c>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6a2:	ldr	r4, [pc, #184]	; (75c <loop+0x2c4>)
     6a4:	ldrb	r0, [r4, #0]
     6a6:	bl	1524 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     6aa:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6ac:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6ae:	cmp	r0, r3
     6b0:	beq.n	6be <loop+0x226>
     6b2:	subs	r3, r0, r3
     6b4:	cmp	r3, #0
     6b6:	it	lt
     6b8:	neglt	r3, r3
     6ba:	cmp	r3, #10
     6bc:	bgt.n	798 <loop+0x300>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6be:	ldr	r4, [pc, #160]	; (760 <loop+0x2c8>)
     6c0:	ldrb	r0, [r4, #0]
     6c2:	bl	1524 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     6c6:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6c8:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6ca:	cmp	r0, r3
     6cc:	beq.n	6da <loop+0x242>
     6ce:	subs	r3, r0, r3
     6d0:	cmp	r3, #0
     6d2:	it	lt
     6d4:	neglt	r3, r3
     6d6:	cmp	r3, #10
     6d8:	bgt.n	76c <loop+0x2d4>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6da:	ldr	r4, [pc, #136]	; (764 <loop+0x2cc>)
     6dc:	ldrb	r0, [r4, #0]
     6de:	bl	1524 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     6e2:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6e4:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6e6:	cmp	r0, r3
     6e8:	beq.n	726 <loop+0x28e>
     6ea:	subs	r3, r0, r3
     6ec:	cmp	r3, #0
     6ee:	it	lt
     6f0:	neglt	r3, r3
     6f2:	cmp	r3, #10
     6f4:	ble.n	726 <loop+0x28e>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     6f6:	ldr	r3, [pc, #112]	; (768 <loop+0x2d0>)
     6f8:	ldrb	r3, [r3, #0]
     6fa:	cbnz	r3, 718 <loop+0x280>
        if (m_knobType == FIRST) {
     6fc:	ldrb	r3, [r4, #20]
     6fe:	cbnz	r3, 724 <loop+0x28c>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     700:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     704:	ldr	r2, [r4, #16]
     706:	bge.w	a64 <loop+0x5cc>
        max_ppqn = 6;

        if (ppqn >= 6) {
     70a:	ldr	r1, [r2, #52]	; 0x34
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     70c:	movs	r5, #6

        if (ppqn >= 6) {
     70e:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     710:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 6) {
     712:	ble.n	724 <loop+0x28c>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     714:	str	r3, [r2, #52]	; 0x34
     716:	b.n	724 <loop+0x28c>
        } else if (m_knobType == THIRD) {
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
     718:	cmp	r3, #2
     71a:	beq.w	c0e <loop+0x776>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     71e:	cmp	r3, #1
     720:	beq.w	c7e <loop+0x7e6>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     724:	str	r0, [r4, #8]
  led5.check();
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
}
     726:	add	sp, #72	; 0x48
     728:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     72c:	.word	0x1fff1808
     730:	.word	0x1fff169c
     734:	.word	0x1fff16c4
     738:	.word	0x1fff16ec
     73c:	.word	0x1fff17c8
     740:	.word	0x1fff1788
     744:	.word	0x1fff1614
     748:	.word	0x1fff15c4
     74c:	.word	0x1fff15d8
     750:	.word	0x1fff15ec
     754:	.word	0x1fff1600
     758:	.word	0x1fff1684
     75c:	.word	0x1fff1628
     760:	.word	0x1fff1644
     764:	.word	0x1fff17b0
     768:	.word	0x1fff1640
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     76c:	ldr	r3, [pc, #732]	; (a4c <loop+0x5b4>)
     76e:	ldrb	r3, [r3, #0]
     770:	cmp	r3, #0
     772:	bne.w	9a2 <loop+0x50a>
        if (m_knobType == FIRST) {
     776:	ldrb	r3, [r4, #20]
     778:	cmp	r3, #0
     77a:	bne.w	9ae <loop+0x516>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     77e:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     782:	ldr	r2, [r4, #16]
     784:	bge.w	a7e <loop+0x5e6>
        max_ppqn = 6;

        if (ppqn >= 6) {
     788:	ldr	r1, [r2, #52]	; 0x34
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     78a:	movs	r5, #6

        if (ppqn >= 6) {
     78c:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     78e:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 6) {
     790:	ble.w	9ae <loop+0x516>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     794:	str	r3, [r2, #52]	; 0x34
     796:	b.n	9ae <loop+0x516>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     798:	ldr	r3, [pc, #688]	; (a4c <loop+0x5b4>)
     79a:	ldrb	r3, [r3, #0]
     79c:	cmp	r3, #0
     79e:	bne.w	992 <loop+0x4fa>
        if (m_knobType == FIRST) {
     7a2:	ldrb	r3, [r4, #20]
     7a4:	cmp	r3, #0
     7a6:	bne.w	99e <loop+0x506>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     7aa:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     7ae:	ldr	r2, [r4, #16]
     7b0:	bge.w	ab0 <loop+0x618>
        max_ppqn = 6;

        if (ppqn >= 6) {
     7b4:	ldr	r1, [r2, #52]	; 0x34
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     7b6:	movs	r5, #6

        if (ppqn >= 6) {
     7b8:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     7ba:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 6) {
     7bc:	ble.w	99e <loop+0x506>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     7c0:	str	r3, [r2, #52]	; 0x34
     7c2:	b.n	99e <loop+0x506>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     7c4:	ldr	r3, [pc, #644]	; (a4c <loop+0x5b4>)
     7c6:	ldrb	r3, [r3, #0]
     7c8:	cmp	r3, #0
     7ca:	bne.w	982 <loop+0x4ea>
        if (m_knobType == FIRST) {
     7ce:	ldrb	r3, [r4, #20]
     7d0:	cmp	r3, #0
     7d2:	bne.w	98e <loop+0x4f6>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     7d6:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     7da:	ldr	r2, [r4, #16]
     7dc:	bge.w	a96 <loop+0x5fe>
        max_ppqn = 6;

        if (ppqn >= 6) {
     7e0:	ldr	r1, [r2, #52]	; 0x34
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     7e2:	movs	r5, #6

        if (ppqn >= 6) {
     7e4:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     7e6:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 6) {
     7e8:	ble.w	98e <loop+0x4f6>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     7ec:	str	r3, [r2, #52]	; 0x34
     7ee:	b.n	98e <loop+0x4f6>
          digitalWrite(m_pin, !digitalRead(m_pin));
     7f0:	ldrb	r4, [r5, #0]
     7f2:	mov	r0, r4
     7f4:	bl	1714 <digitalRead>
     7f8:	clz	r1, r0
     7fc:	lsrs	r1, r1, #5
     7fe:	mov	r0, r4
     800:	bl	1708 <digitalWrite>
          blinking = false;
     804:	movs	r3, #0
     806:	strb	r3, [r5, #16]
     808:	b.n	684 <loop+0x1ec>
    };

    void check () {
      if (blinking) {
        if (millis() - lastBlink > blinkLength) {
          digitalWrite(m_pin, !digitalRead(m_pin));
     80a:	ldrb	r6, [r5, #0]
     80c:	mov	r0, r6
     80e:	bl	1714 <digitalRead>
     812:	clz	r1, r0
     816:	lsrs	r1, r1, #5
     818:	mov	r0, r6
     81a:	bl	1708 <digitalWrite>
          blinking = false;
     81e:	movs	r3, #0
     820:	strb	r3, [r5, #16]
     822:	b.n	66c <loop+0x1d4>
    };

    void check () {
      if (blinking) {
        if (millis() - lastBlink > blinkLength) {
          digitalWrite(m_pin, !digitalRead(m_pin));
     824:	ldrb	r6, [r5, #0]
     826:	mov	r0, r6
     828:	bl	1714 <digitalRead>
     82c:	clz	r1, r0
     830:	lsrs	r1, r1, #5
     832:	mov	r0, r6
     834:	bl	1708 <digitalWrite>
          blinking = false;
     838:	movs	r3, #0
     83a:	strb	r3, [r5, #16]
     83c:	b.n	654 <loop+0x1bc>
    };

    void check () {
      if (blinking) {
        if (millis() - lastBlink > blinkLength) {
          digitalWrite(m_pin, !digitalRead(m_pin));
     83e:	ldrb	r6, [r5, #0]
     840:	mov	r0, r6
     842:	bl	1714 <digitalRead>
     846:	clz	r1, r0
     84a:	lsrs	r1, r1, #5
     84c:	mov	r0, r6
     84e:	bl	1708 <digitalWrite>
          blinking = false;
     852:	movs	r3, #0
     854:	strb	r3, [r5, #16]
     856:	b.n	63c <loop+0x1a4>
    };

    void check () {
      if (blinking) {
        if (millis() - lastBlink > blinkLength) {
          digitalWrite(m_pin, !digitalRead(m_pin));
     858:	ldrb	r5, [r6, #0]
     85a:	mov	r0, r5
     85c:	bl	1714 <digitalRead>
     860:	clz	r1, r0
     864:	lsrs	r1, r1, #5
     866:	mov	r0, r5
     868:	bl	1708 <digitalWrite>
          blinking = false;
     86c:	movs	r3, #0
     86e:	strb	r3, [r6, #16]
     870:	b.n	624 <loop+0x18c>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     872:	ldr	r3, [pc, #476]	; (a50 <loop+0x5b8>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     874:	ldrb	r3, [r3, #0]
     876:	cmp	r3, #250	; 0xfa
     878:	beq.w	9c8 <loop+0x530>
     87c:	cmp	r3, #252	; 0xfc
     87e:	beq.w	9b2 <loop+0x51a>
     882:	cmp	r3, #248	; 0xf8
     884:	beq.w	a1a <loop+0x582>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     888:	movs	r1, #35	; 0x23
     88a:	ldr	r0, [pc, #456]	; (a54 <loop+0x5bc>)
     88c:	ldr	r4, [pc, #456]	; (a58 <loop+0x5c0>)
     88e:	bl	10f8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     892:	ldr	r0, [pc, #456]	; (a5c <loop+0x5c4>)
     894:	bl	2c6c <Print::println()>
     898:	b.n	4ac <loop+0x14>
     89a:	ldr	r2, [r6, #20]
     89c:	b.n	50a <loop+0x72>
     89e:	ldr	r2, [r5, #20]
     8a0:	b.n	4cc <loop+0x34>
     8a2:	ldr	r2, [r5, #20]
     8a4:	b.n	548 <loop+0xb0>
     8a6:	ldr	r2, [r5, #20]
     8a8:	b.n	5c4 <loop+0x12c>
     8aa:	ldr	r2, [r6, #20]
     8ac:	b.n	586 <loop+0xee>
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     8ae:	mov	r1, r3
     8b0:	b.n	5a2 <loop+0x10a>
     8b2:	mov	r1, r3
     8b4:	b.n	526 <loop+0x8e>
     8b6:	mov	r1, r3
     8b8:	b.n	60a <loop+0x172>
     8ba:	mov	r1, r3
     8bc:	b.n	4e8 <loop+0x50>
     8be:	mov	r1, r3
     8c0:	b.n	564 <loop+0xcc>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     8c2:	ldrb	r2, [r6, #16]
     8c4:	cmp	r2, #0
     8c6:	bne.w	b62 <loop+0x6ca>
        toggleGlobalMode();
      } else if (m_state == LOW) {
        m_led.toggle();
     8ca:	ldr	r3, [r6, #24]
     8cc:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     8d0:	clz	r1, r1
     8d4:	lsrs	r1, r1, #5
     8d6:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     8d8:	uxtb	r0, r0
     8da:	bl	1708 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     8de:	ldr	r3, [r6, #0]
     8e0:	ldr	r2, [r6, #28]
     8e2:	ldr	r1, [r6, #12]
     8e4:	subs	r3, #1
    void toggle () {
      m_state = !m_state;
    };

    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
     8e6:	add	r3, r2
     8e8:	ldrb	r2, [r3, #20]
     8ea:	eor.w	r2, r2, #1
     8ee:	strb	r2, [r3, #20]
     8f0:	b.n	4e8 <loop+0x50>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     8f2:	ldrb	r2, [r5, #16]
     8f4:	cmp	r2, #0
     8f6:	bne.w	b92 <loop+0x6fa>
        toggleGlobalMode();
      } else if (m_state == LOW) {
        m_led.toggle();
     8fa:	ldr	r3, [r5, #24]
     8fc:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     900:	clz	r1, r1
     904:	lsrs	r1, r1, #5
     906:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     908:	uxtb	r0, r0
     90a:	bl	1708 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     90e:	ldr	r3, [r5, #0]
     910:	ldr	r2, [r5, #28]
     912:	ldr	r1, [r5, #12]
     914:	subs	r3, #1
     916:	add	r3, r2
     918:	ldrb	r2, [r3, #20]
     91a:	eor.w	r2, r2, #1
     91e:	strb	r2, [r3, #20]
     920:	b.n	526 <loop+0x8e>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     922:	ldrb	r2, [r6, #16]
     924:	cmp	r2, #0
     926:	bne.w	b32 <loop+0x69a>
        toggleGlobalMode();
      } else if (m_state == LOW) {
        m_led.toggle();
     92a:	ldr	r3, [r6, #24]
     92c:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     930:	clz	r1, r1
     934:	lsrs	r1, r1, #5
     936:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     938:	uxtb	r0, r0
     93a:	bl	1708 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     93e:	ldr	r3, [r6, #0]
     940:	ldr	r2, [r6, #28]
     942:	ldr	r1, [r6, #12]
     944:	subs	r3, #1
     946:	add	r3, r2
     948:	ldrb	r2, [r3, #20]
     94a:	eor.w	r2, r2, #1
     94e:	strb	r2, [r3, #20]
     950:	b.n	564 <loop+0xcc>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_startStop) {
     952:	ldrb	r2, [r5, #16]
     954:	cmp	r2, #0
     956:	bne.w	b02 <loop+0x66a>
        toggleGlobalMode();
      } else if (m_state == LOW) {
        m_led.toggle();
     95a:	ldr	r3, [r5, #24]
     95c:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     960:	clz	r1, r1
     964:	lsrs	r1, r1, #5
     966:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     968:	uxtb	r0, r0
     96a:	bl	1708 <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     96e:	ldr	r3, [r5, #0]
     970:	ldr	r2, [r5, #28]
     972:	ldr	r1, [r5, #12]
     974:	subs	r3, #1
     976:	add	r3, r2
     978:	ldrb	r2, [r3, #20]
     97a:	eor.w	r2, r2, #1
     97e:	strb	r2, [r3, #20]
     980:	b.n	5a2 <loop+0x10a>
        } else if (m_knobType == THIRD) {
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
     982:	cmp	r3, #2
     984:	beq.w	bf2 <loop+0x75a>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     988:	cmp	r3, #1
     98a:	beq.w	cb6 <loop+0x81e>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     98e:	str	r0, [r4, #8]
     990:	b.n	6a2 <loop+0x20a>
        } else if (m_knobType == THIRD) {
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
     992:	cmp	r3, #2
     994:	beq.w	c46 <loop+0x7ae>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     998:	cmp	r3, #1
     99a:	beq.w	c62 <loop+0x7ca>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     99e:	str	r0, [r4, #8]
     9a0:	b.n	6be <loop+0x226>
        } else if (m_knobType == THIRD) {
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
     9a2:	cmp	r3, #2
     9a4:	beq.w	c2a <loop+0x792>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     9a8:	cmp	r3, #1
     9aa:	beq.w	c9a <loop+0x802>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     9ae:	str	r0, [r4, #8]
     9b0:	b.n	6da <loop+0x242>
      doStep();
      digitalWrite(13, HIGH);
    };

    void stopPPQN () {
      m_state = false;
     9b2:	movs	r3, #0
     9b4:	ldr	r2, [pc, #168]	; (a60 <loop+0x5c8>)
     9b6:	ldr	r4, [pc, #160]	; (a58 <loop+0x5c0>)
     9b8:	strb	r3, [r2, #24]
      ppqn = 0;
      m_currentStep = 0;
      digitalWrite(13, LOW);
     9ba:	mov	r1, r3
     9bc:	movs	r0, #13
      digitalWrite(13, HIGH);
    };

    void stopPPQN () {
      m_state = false;
      ppqn = 0;
     9be:	str	r3, [r2, #52]	; 0x34
      m_currentStep = 0;
     9c0:	str	r3, [r2, #28]
      digitalWrite(13, LOW);
     9c2:	bl	1708 <digitalWrite>
     9c6:	b.n	4ac <loop+0x14>
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     9c8:	ldr	r5, [pc, #148]	; (a60 <loop+0x5c8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9ca:	ldr	r4, [pc, #140]	; (a58 <loop+0x5c0>)
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     9cc:	ldr	r3, [r5, #28]
     9ce:	ldr.w	r6, [r5, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink () {
      digitalWrite(m_pin, !digitalRead(m_pin));
     9d2:	ldrb.w	r8, [r6]
      }
    };

    void startPPQN () {
      m_state = true;
      ppqn = 0;
     9d6:	movs	r3, #0
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     9d8:	movs	r7, #1
     9da:	mov	r0, r8
      ppqn = 0;
     9dc:	str	r3, [r5, #52]	; 0x34
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     9de:	strb	r7, [r5, #24]
     9e0:	bl	1714 <digitalRead>
     9e4:	clz	r1, r0
     9e8:	lsrs	r1, r1, #5
     9ea:	mov	r0, r8
     9ec:	bl	1708 <digitalWrite>

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();

        if (m_steps[m_currentStep].m_state) {
     9f0:	ldr	r3, [r5, #28]
     9f2:	ldr	r2, [r4, #0]
     9f4:	str	r2, [sp, #8]
     9f6:	adds	r2, r5, r3
	return ret;
     9f8:	ldr	r1, [sp, #8]
     9fa:	ldrb	r2, [r2, #20]
      blinking = true;
     9fc:	strb	r7, [r6, #16]
      lastBlink = millis();  
     9fe:	str	r1, [r6, #8]
     a00:	cmp	r2, #0
     a02:	bne.w	cea <loop+0x852>
          playStep(m_currentStep);
        }

        m_currentStep++;
     a06:	adds	r3, #1

        if (m_currentStep > 3) {
     a08:	cmp	r3, #3
          m_currentStep = 0;
     a0a:	it	gt
     a0c:	movgt	r3, #0

    void startPPQN () {
      m_state = true;
      ppqn = 0;
      doStep();
      digitalWrite(13, HIGH);
     a0e:	movs	r1, #1
     a10:	movs	r0, #13
        }

        m_currentStep++;

        if (m_currentStep > 3) {
          m_currentStep = 0;
     a12:	str	r3, [r5, #28]

    void startPPQN () {
      m_state = true;
      ppqn = 0;
      doStep();
      digitalWrite(13, HIGH);
     a14:	bl	1708 <digitalWrite>
     a18:	b.n	4ac <loop+0x14>
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     a1a:	ldr	r5, [pc, #68]	; (a60 <loop+0x5c8>)
      if (ppqn >= notesLengths[m_currentStep]) {
     a1c:	ldr	r2, [r5, #28]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     a1e:	ldr	r3, [r5, #52]	; 0x34
      if (ppqn >= notesLengths[m_currentStep]) {
     a20:	adds	r2, #24
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     a22:	adds	r3, #1
      if (ppqn >= notesLengths[m_currentStep]) {
     a24:	ldr.w	r2, [r5, r2, lsl #2]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     a28:	str	r3, [r5, #52]	; 0x34
      if (ppqn >= notesLengths[m_currentStep]) {
     a2a:	cmp	r3, r2
     a2c:	bge.w	cd2 <loop+0x83a>
        // of the active note to see if i do the stop step
        stopStep();
      }


      if (ppqn == max_ppqn) {
     a30:	ldr	r2, [r5, #56]	; 0x38
     a32:	ldr	r6, [pc, #44]	; (a60 <loop+0x5c8>)
     a34:	cmp	r2, r3
     a36:	bne.w	4aa <loop+0x12>
      noteOn(0, notes[step], notesVelocities[step]);
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
     a3a:	ldrb	r3, [r6, #24]
     a3c:	cmp	r3, #0
     a3e:	bne.w	d20 <loop+0x888>
     a42:	ldr	r4, [pc, #20]	; (a58 <loop+0x5c0>)
      }


      if (ppqn == max_ppqn) {
        doStep(); 
        ppqn = 0;
     a44:	movs	r3, #0
     a46:	str	r3, [r5, #52]	; 0x34
     a48:	b.n	4ac <loop+0x14>
     a4a:	nop
     a4c:	.word	0x1fff1640
     a50:	.word	0x1fff1cc4
     a54:	.word	0x0000403c
     a58:	.word	0x1fff1808
     a5c:	.word	0x1fff0c5c
     a60:	.word	0x1fff1718
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     a64:	sub.w	r1, r0, #400	; 0x190
     a68:	cmp.w	r1, #400	; 0x190
     a6c:	bcc.n	af4 <loop+0x65c>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     a6e:	sub.w	r3, r0, #800	; 0x320
     a72:	cmp	r3, #223	; 0xdf
     a74:	bhi.w	724 <loop+0x28c>
        max_ppqn = 12;
     a78:	movs	r3, #12
     a7a:	str	r3, [r2, #56]	; 0x38
     a7c:	b.n	724 <loop+0x28c>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     a7e:	sub.w	r1, r0, #400	; 0x190
     a82:	cmp.w	r1, #400	; 0x190
     a86:	bcc.n	ae6 <loop+0x64e>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     a88:	sub.w	r3, r0, #800	; 0x320
     a8c:	cmp	r3, #223	; 0xdf
     a8e:	bhi.n	9ae <loop+0x516>
        max_ppqn = 12;
     a90:	movs	r3, #12
     a92:	str	r3, [r2, #56]	; 0x38
     a94:	b.n	9ae <loop+0x516>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     a96:	sub.w	r1, r0, #400	; 0x190
     a9a:	cmp.w	r1, #400	; 0x190
     a9e:	bcc.n	ad8 <loop+0x640>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     aa0:	sub.w	r3, r0, #800	; 0x320
     aa4:	cmp	r3, #223	; 0xdf
     aa6:	bhi.w	98e <loop+0x4f6>
        max_ppqn = 12;
     aaa:	movs	r3, #12
     aac:	str	r3, [r2, #56]	; 0x38
     aae:	b.n	98e <loop+0x4f6>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     ab0:	sub.w	r1, r0, #400	; 0x190
     ab4:	cmp.w	r1, #400	; 0x190
     ab8:	bcc.n	aca <loop+0x632>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     aba:	sub.w	r3, r0, #800	; 0x320
     abe:	cmp	r3, #223	; 0xdf
     ac0:	bhi.w	99e <loop+0x506>
        max_ppqn = 12;
     ac4:	movs	r3, #12
     ac6:	str	r3, [r2, #56]	; 0x38
     ac8:	b.n	99e <loop+0x506>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
     aca:	ldr	r1, [r2, #52]	; 0x34

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     acc:	movs	r5, #8

        if (ppqn >= 8) {
     ace:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     ad0:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 8) {
     ad2:	ble.w	99e <loop+0x506>
     ad6:	b.n	7c0 <loop+0x328>
     ad8:	ldr	r1, [r2, #52]	; 0x34

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     ada:	movs	r5, #8

        if (ppqn >= 8) {
     adc:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     ade:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 8) {
     ae0:	ble.w	98e <loop+0x4f6>
     ae4:	b.n	7ec <loop+0x354>
     ae6:	ldr	r1, [r2, #52]	; 0x34

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     ae8:	movs	r5, #8

        if (ppqn >= 8) {
     aea:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     aec:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 8) {
     aee:	ble.w	9ae <loop+0x516>
     af2:	b.n	794 <loop+0x2fc>
     af4:	ldr	r1, [r2, #52]	; 0x34

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     af6:	movs	r5, #8

        if (ppqn >= 8) {
     af8:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     afa:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 8) {
     afc:	ble.w	724 <loop+0x28c>
     b00:	b.n	714 <loop+0x27c>
      } 
    };

    void toggleGlobalMode() {
      if (currentMode == GLOBAL) {
     b02:	ldr	r7, [pc, #776]	; (e0c <loop+0x974>)
     b04:	ldrb	r2, [r7, #0]
     b06:	cmp	r2, #0
     b08:	beq.w	d5e <loop+0x8c6>
        currentMode = PITCH;
        Serial.println("PITCH");
      } else if (currentMode == PITCH) {
     b0c:	cmp	r2, #1
     b0e:	beq.w	dc4 <loop+0x92c>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
     b12:	cmp	r2, #2
     b14:	beq.w	dfc <loop+0x964>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
      } else if (currentMode == NOTELENGTH) {
     b18:	cmp	r2, #3
     b1a:	bne.w	5a2 <loop+0x10a>
     b1e:	ldr	r0, [pc, #752]	; (e10 <loop+0x978>)
     b20:	movs	r1, #6
        currentMode = GLOBAL;
     b22:	strb	r3, [r7, #0]
     b24:	bl	10f8 <usb_serial_write>
     b28:	ldr	r0, [pc, #744]	; (e14 <loop+0x97c>)
     b2a:	bl	2c6c <Print::println()>
     b2e:	ldr	r1, [r5, #12]
     b30:	b.n	5a2 <loop+0x10a>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    void toggleGlobalMode() {
      if (currentMode == GLOBAL) {
     b32:	ldr	r7, [pc, #728]	; (e0c <loop+0x974>)
     b34:	ldrb	r2, [r7, #0]
     b36:	cmp	r2, #0
     b38:	beq.w	d6e <loop+0x8d6>
        currentMode = PITCH;
        Serial.println("PITCH");
      } else if (currentMode == PITCH) {
     b3c:	cmp	r2, #1
     b3e:	beq.w	dd4 <loop+0x93c>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
     b42:	cmp	r2, #2
     b44:	beq.w	dec <loop+0x954>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
      } else if (currentMode == NOTELENGTH) {
     b48:	cmp	r2, #3
     b4a:	bne.w	564 <loop+0xcc>
     b4e:	ldr	r0, [pc, #704]	; (e10 <loop+0x978>)
     b50:	movs	r1, #6
        currentMode = GLOBAL;
     b52:	strb	r3, [r7, #0]
     b54:	bl	10f8 <usb_serial_write>
     b58:	ldr	r0, [pc, #696]	; (e14 <loop+0x97c>)
     b5a:	bl	2c6c <Print::println()>
     b5e:	ldr	r1, [r6, #12]
     b60:	b.n	564 <loop+0xcc>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    void toggleGlobalMode() {
      if (currentMode == GLOBAL) {
     b62:	ldr	r7, [pc, #680]	; (e0c <loop+0x974>)
     b64:	ldrb	r2, [r7, #0]
     b66:	cmp	r2, #0
     b68:	beq.w	d76 <loop+0x8de>
        currentMode = PITCH;
        Serial.println("PITCH");
      } else if (currentMode == PITCH) {
     b6c:	cmp	r2, #1
     b6e:	beq.w	ddc <loop+0x944>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
     b72:	cmp	r2, #2
     b74:	beq.w	e04 <loop+0x96c>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
      } else if (currentMode == NOTELENGTH) {
     b78:	cmp	r2, #3
     b7a:	bne.w	4e8 <loop+0x50>
     b7e:	ldr	r0, [pc, #656]	; (e10 <loop+0x978>)
     b80:	movs	r1, #6
        currentMode = GLOBAL;
     b82:	strb	r3, [r7, #0]
     b84:	bl	10f8 <usb_serial_write>
     b88:	ldr	r0, [pc, #648]	; (e14 <loop+0x97c>)
     b8a:	bl	2c6c <Print::println()>
     b8e:	ldr	r1, [r6, #12]
     b90:	b.n	4e8 <loop+0x50>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    void toggleGlobalMode() {
      if (currentMode == GLOBAL) {
     b92:	ldr	r7, [pc, #632]	; (e0c <loop+0x974>)
     b94:	ldrb	r2, [r7, #0]
     b96:	cmp	r2, #0
     b98:	beq.w	d7e <loop+0x8e6>
        currentMode = PITCH;
        Serial.println("PITCH");
      } else if (currentMode == PITCH) {
     b9c:	cmp	r2, #1
     b9e:	beq.w	dbc <loop+0x924>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
     ba2:	cmp	r2, #2
     ba4:	beq.w	df4 <loop+0x95c>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
      } else if (currentMode == NOTELENGTH) {
     ba8:	cmp	r2, #3
     baa:	bne.w	526 <loop+0x8e>
     bae:	ldr	r0, [pc, #608]	; (e10 <loop+0x978>)
     bb0:	movs	r1, #6
        currentMode = GLOBAL;
     bb2:	strb	r3, [r7, #0]
     bb4:	bl	10f8 <usb_serial_write>
     bb8:	ldr	r0, [pc, #600]	; (e14 <loop+0x97c>)
     bba:	bl	2c6c <Print::println()>
     bbe:	ldr	r1, [r5, #12]
     bc0:	b.n	526 <loop+0x8e>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    void toggleGlobalMode() {
      if (currentMode == GLOBAL) {
     bc2:	ldr	r7, [pc, #584]	; (e0c <loop+0x974>)
     bc4:	ldrb	r2, [r7, #0]
     bc6:	cmp	r2, #0
     bc8:	beq.w	d66 <loop+0x8ce>
        currentMode = PITCH;
        Serial.println("PITCH");
      } else if (currentMode == PITCH) {
     bcc:	cmp	r2, #1
     bce:	beq.w	dcc <loop+0x934>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
     bd2:	cmp	r2, #2
     bd4:	beq.w	de4 <loop+0x94c>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
      } else if (currentMode == NOTELENGTH) {
     bd8:	cmp	r2, #3
     bda:	bne.w	60a <loop+0x172>
     bde:	ldr	r0, [pc, #560]	; (e10 <loop+0x978>)
     be0:	movs	r1, #6
        currentMode = GLOBAL;
     be2:	strb	r3, [r7, #0]
     be4:	bl	10f8 <usb_serial_write>
     be8:	ldr	r0, [pc, #552]	; (e14 <loop+0x97c>)
     bea:	bl	2c6c <Print::println()>
     bee:	ldr	r1, [r6, #12]
     bf0:	b.n	60a <loop+0x172>
      notes[id] = newValue;
    };

    void controlVelocity (int value, int id) {
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
     bf2:	ldr	r3, [r4, #12]
     bf4:	ldr	r1, [r4, #16]
     bf6:	add.w	r2, r3, #20
     bfa:	subs.w	r3, r0, r0, lsl #6
     bfe:	it	mi
     c00:	addwmi	r3, r3, #1023	; 0x3ff
     c04:	asrs	r3, r3, #10
     c06:	adds	r3, #127	; 0x7f
     c08:	str.w	r3, [r1, r2, lsl #2]
     c0c:	b.n	98e <loop+0x4f6>
     c0e:	ldr	r3, [r4, #12]
     c10:	ldr	r1, [r4, #16]
     c12:	add.w	r2, r3, #20
     c16:	subs.w	r3, r0, r0, lsl #6
     c1a:	it	mi
     c1c:	addwmi	r3, r3, #1023	; 0x3ff
     c20:	asrs	r3, r3, #10
     c22:	adds	r3, #127	; 0x7f
     c24:	str.w	r3, [r1, r2, lsl #2]
     c28:	b.n	724 <loop+0x28c>
     c2a:	ldr	r3, [r4, #12]
     c2c:	ldr	r1, [r4, #16]
     c2e:	add.w	r2, r3, #20
     c32:	subs.w	r3, r0, r0, lsl #6
     c36:	it	mi
     c38:	addwmi	r3, r3, #1023	; 0x3ff
     c3c:	asrs	r3, r3, #10
     c3e:	adds	r3, #127	; 0x7f
     c40:	str.w	r3, [r1, r2, lsl #2]
     c44:	b.n	9ae <loop+0x516>
     c46:	ldr	r3, [r4, #12]
     c48:	ldr	r1, [r4, #16]
     c4a:	add.w	r2, r3, #20
     c4e:	subs.w	r3, r0, r0, lsl #6
     c52:	it	mi
     c54:	addwmi	r3, r3, #1023	; 0x3ff
     c58:	asrs	r3, r3, #10
     c5a:	adds	r3, #127	; 0x7f
     c5c:	str.w	r3, [r1, r2, lsl #2]
     c60:	b.n	99e <loop+0x506>
      notesLengths[id] = newValue;
    };

    void controlPitch (int value, int id) {
      int newValue = map(value, 0, 1023, 51, 38);
      notes[id] = newValue;
     c62:	sub.w	r3, r0, r0, lsl #2
     c66:	ldr	r2, [r4, #12]
     c68:	ldr	r1, [r4, #16]
     c6a:	lsls	r3, r3, #2
     c6c:	it	mi
     c6e:	addwmi	r3, r3, #1023	; 0x3ff
     c72:	adds	r2, #16
     c74:	asrs	r3, r3, #10
     c76:	adds	r3, #51	; 0x33
     c78:	str.w	r3, [r1, r2, lsl #2]
     c7c:	b.n	99e <loop+0x506>
     c7e:	sub.w	r3, r0, r0, lsl #2
     c82:	ldr	r2, [r4, #12]
     c84:	ldr	r1, [r4, #16]
     c86:	lsls	r3, r3, #2
     c88:	it	mi
     c8a:	addwmi	r3, r3, #1023	; 0x3ff
     c8e:	adds	r2, #16
     c90:	asrs	r3, r3, #10
     c92:	adds	r3, #51	; 0x33
     c94:	str.w	r3, [r1, r2, lsl #2]
     c98:	b.n	724 <loop+0x28c>
     c9a:	sub.w	r3, r0, r0, lsl #2
     c9e:	ldr	r2, [r4, #12]
     ca0:	ldr	r1, [r4, #16]
     ca2:	lsls	r3, r3, #2
     ca4:	it	mi
     ca6:	addwmi	r3, r3, #1023	; 0x3ff
     caa:	adds	r2, #16
     cac:	asrs	r3, r3, #10
     cae:	adds	r3, #51	; 0x33
     cb0:	str.w	r3, [r1, r2, lsl #2]
     cb4:	b.n	9ae <loop+0x516>
     cb6:	sub.w	r3, r0, r0, lsl #2
     cba:	ldr	r2, [r4, #12]
     cbc:	ldr	r1, [r4, #16]
     cbe:	lsls	r3, r3, #2
     cc0:	it	mi
     cc2:	addwmi	r3, r3, #1023	; 0x3ff
     cc6:	adds	r2, #16
     cc8:	asrs	r3, r3, #10
     cca:	adds	r3, #51	; 0x33
     ccc:	str.w	r3, [r1, r2, lsl #2]
     cd0:	b.n	98e <loop+0x4f6>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     cd2:	ldr	r3, [r5, #60]	; 0x3c
     cd4:	ldr	r0, [pc, #320]	; (e18 <loop+0x980>)
     cd6:	lsls	r3, r3, #16
     cd8:	and.w	r3, r3, #8323072	; 0x7f0000
     cdc:	orrs	r0, r3
     cde:	bl	1994 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     ce2:	bl	1a30 <usb_midi_flush_output>
     ce6:	ldr	r3, [r5, #52]	; 0x34
     ce8:	b.n	a30 <loop+0x598>
    void stopStep () {
      noteOff(0, activeNote, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
     cea:	add.w	r6, r3, #16
     cee:	adds	r3, #20
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     cf0:	ldr.w	r2, [r5, r6, lsl #2]
     cf4:	ldr.w	r3, [r5, r3, lsl #2]
     cf8:	lsls	r2, r2, #16
     cfa:	lsls	r0, r3, #24
     cfc:	and.w	r3, r0, #2130706432	; 0x7f000000
     d00:	and.w	r0, r2, #8323072	; 0x7f0000
     d04:	orrs	r0, r3
     d06:	orr.w	r0, r0, #40704	; 0x9f00
     d0a:	orr.w	r0, r0, #9
     d0e:	bl	1994 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     d12:	bl	1a30 <usb_midi_flush_output>
      activeNote = notes[step];
     d16:	ldr.w	r2, [r5, r6, lsl #2]
     d1a:	ldr	r3, [r5, #28]
     d1c:	str	r2, [r5, #60]	; 0x3c
     d1e:	b.n	a06 <loop+0x56e>
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     d20:	ldr	r3, [r6, #28]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d22:	ldr	r4, [pc, #248]	; (e1c <loop+0x984>)
     d24:	ldr.w	r7, [r6, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink () {
      digitalWrite(m_pin, !digitalRead(m_pin));
     d28:	ldrb.w	r8, [r7]
     d2c:	mov	r0, r8
     d2e:	bl	1714 <digitalRead>
     d32:	clz	r1, r0
     d36:	lsrs	r1, r1, #5
     d38:	mov	r0, r8
     d3a:	bl	1708 <digitalWrite>

        if (m_steps[m_currentStep].m_state) {
     d3e:	ldr	r3, [r6, #28]
     d40:	ldr	r2, [r4, #0]
     d42:	str	r2, [sp, #4]
     d44:	adds	r2, r6, r3
      blinking = true;
     d46:	movs	r0, #1
     d48:	ldrb	r2, [r2, #20]
	return ret;
     d4a:	ldr	r1, [sp, #4]
     d4c:	strb	r0, [r7, #16]
      lastBlink = millis();  
     d4e:	str	r1, [r7, #8]
     d50:	cbnz	r2, d86 <loop+0x8ee>
          playStep(m_currentStep);
        }

        m_currentStep++;
     d52:	adds	r3, #1

        if (m_currentStep > 3) {
     d54:	cmp	r3, #3
          m_currentStep = 0;
     d56:	it	gt
     d58:	movgt	r3, #0
     d5a:	str	r3, [r5, #28]
     d5c:	b.n	a44 <loop+0x5ac>
      } 
    };

    void toggleGlobalMode() {
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
     d5e:	movs	r3, #1
     d60:	movs	r1, #5
     d62:	ldr	r0, [pc, #188]	; (e20 <loop+0x988>)
     d64:	b.n	b22 <loop+0x68a>
     d66:	movs	r3, #1
     d68:	movs	r1, #5
     d6a:	ldr	r0, [pc, #180]	; (e20 <loop+0x988>)
     d6c:	b.n	be2 <loop+0x74a>
     d6e:	movs	r3, #1
     d70:	movs	r1, #5
     d72:	ldr	r0, [pc, #172]	; (e20 <loop+0x988>)
     d74:	b.n	b52 <loop+0x6ba>
     d76:	movs	r3, #1
     d78:	movs	r1, #5
     d7a:	ldr	r0, [pc, #164]	; (e20 <loop+0x988>)
     d7c:	b.n	b82 <loop+0x6ea>
     d7e:	movs	r3, #1
     d80:	movs	r1, #5
     d82:	ldr	r0, [pc, #156]	; (e20 <loop+0x988>)
     d84:	b.n	bb2 <loop+0x71a>
    void stopStep () {
      noteOff(0, activeNote, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
     d86:	add.w	r7, r3, #16
     d8a:	adds	r3, #20
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     d8c:	ldr.w	r2, [r6, r7, lsl #2]
     d90:	ldr.w	r3, [r6, r3, lsl #2]
     d94:	lsls	r0, r2, #16
     d96:	lsls	r3, r3, #24
     d98:	and.w	r3, r3, #2130706432	; 0x7f000000
     d9c:	and.w	r0, r0, #8323072	; 0x7f0000
     da0:	orrs	r0, r3
     da2:	orr.w	r0, r0, #40704	; 0x9f00
     da6:	orr.w	r0, r0, #9
     daa:	bl	1994 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     dae:	bl	1a30 <usb_midi_flush_output>
      activeNote = notes[step];
     db2:	ldr.w	r2, [r6, r7, lsl #2]
     db6:	ldr	r3, [r6, #28]
     db8:	str	r2, [r6, #60]	; 0x3c
     dba:	b.n	d52 <loop+0x8ba>
        Serial.println("PITCH");
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
     dbc:	movs	r3, #2
     dbe:	movs	r1, #8
     dc0:	ldr	r0, [pc, #96]	; (e24 <loop+0x98c>)
     dc2:	b.n	bb2 <loop+0x71a>
     dc4:	movs	r3, #2
     dc6:	movs	r1, #8
     dc8:	ldr	r0, [pc, #88]	; (e24 <loop+0x98c>)
     dca:	b.n	b22 <loop+0x68a>
     dcc:	movs	r3, #2
     dce:	movs	r1, #8
     dd0:	ldr	r0, [pc, #80]	; (e24 <loop+0x98c>)
     dd2:	b.n	be2 <loop+0x74a>
     dd4:	movs	r3, #2
     dd6:	movs	r1, #8
     dd8:	ldr	r0, [pc, #72]	; (e24 <loop+0x98c>)
     dda:	b.n	b52 <loop+0x6ba>
     ddc:	movs	r3, #2
     dde:	movs	r1, #8
     de0:	ldr	r0, [pc, #64]	; (e24 <loop+0x98c>)
     de2:	b.n	b82 <loop+0x6ea>
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
     de4:	movs	r3, #3
     de6:	movs	r1, #10
     de8:	ldr	r0, [pc, #60]	; (e28 <loop+0x990>)
     dea:	b.n	be2 <loop+0x74a>
     dec:	movs	r3, #3
     dee:	movs	r1, #10
     df0:	ldr	r0, [pc, #52]	; (e28 <loop+0x990>)
     df2:	b.n	b52 <loop+0x6ba>
     df4:	movs	r3, #3
     df6:	movs	r1, #10
     df8:	ldr	r0, [pc, #44]	; (e28 <loop+0x990>)
     dfa:	b.n	bb2 <loop+0x71a>
     dfc:	movs	r3, #3
     dfe:	movs	r1, #10
     e00:	ldr	r0, [pc, #36]	; (e28 <loop+0x990>)
     e02:	b.n	b22 <loop+0x68a>
     e04:	movs	r3, #3
     e06:	movs	r1, #10
     e08:	ldr	r0, [pc, #28]	; (e28 <loop+0x990>)
     e0a:	b.n	b82 <loop+0x6ea>
     e0c:	.word	0x1fff1640
     e10:	.word	0x00004080
     e14:	.word	0x1fff0c5c
     e18:	.word	0x7f008f08
     e1c:	.word	0x1fff1808
     e20:	.word	0x00004060
     e24:	.word	0x00004068
     e28:	.word	0x00004074

00000e2c <_GLOBAL__sub_I_currentMode>:
     e2c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
const int step3pin = 6;
const int step4pin = 8;
const int shiftPin = 10;
const int startStopPin = 12;

Led led1(3, LOW);
     e30:	movs	r2, #0
     e32:	movs	r1, #3
     e34:	ldr	r0, [pc, #424]	; (fe0 <_GLOBAL__sub_I_currentMode+0x1b4>)
    int notes[4] = {38, 41, 45, 51};
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Sequence (Led* leds[5], boolean state) {
     e36:	ldr	r5, [pc, #428]	; (fe4 <_GLOBAL__sub_I_currentMode+0x1b8>)
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
     e38:	ldr	r4, [pc, #428]	; (fe8 <_GLOBAL__sub_I_currentMode+0x1bc>)
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Sequence (Led* leds[5], boolean state) {
      m_leds[0] = leds[0];
     e3a:	ldr	r6, [pc, #432]	; (fec <_GLOBAL__sub_I_currentMode+0x1c0>)
    int notes[4] = {38, 41, 45, 51};
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Sequence (Led* leds[5], boolean state) {
     e3c:	ldr.w	fp, [pc, #484]	; 1024 <_GLOBAL__sub_I_currentMode+0x1f8>
     e40:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
     e44:	movs	r2, #0
     e46:	movs	r1, #5
     e48:	ldr	r0, [pc, #420]	; (ff0 <_GLOBAL__sub_I_currentMode+0x1c4>)
     e4a:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
     e4e:	movs	r2, #0
     e50:	movs	r1, #7
     e52:	ldr	r0, [pc, #416]	; (ff4 <_GLOBAL__sub_I_currentMode+0x1c8>)
     e54:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
     e58:	movs	r2, #0
     e5a:	movs	r1, #9
     e5c:	ldr	r0, [pc, #408]	; (ff8 <_GLOBAL__sub_I_currentMode+0x1cc>)
     e5e:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
     e62:	movs	r2, #0
     e64:	movs	r1, #11
     e66:	ldr	r0, [pc, #404]	; (ffc <_GLOBAL__sub_I_currentMode+0x1d0>)
     e68:	bl	46c <Led::Led(int, int)>
     e6c:	ldmia.w	r5, {r0, r1, r2, r3}
     e70:	add.w	r7, r5, #16
     e74:	add.w	ip, r4, #64	; 0x40
     e78:	stmia.w	ip, {r0, r1, r2, r3}
     e7c:	ldmia.w	r7, {r0, r1, r2, r3}
     e80:	adds	r5, #32
     e82:	add.w	r7, r4, #80	; 0x50
     e86:	stmia.w	r7, {r0, r1, r2, r3}
     e8a:	ldmia.w	r5, {r0, r1, r2, r3}
     e8e:	movs	r5, #120	; 0x78
     e90:	add.w	ip, r4, #96	; 0x60
     e94:	mov.w	sl, #0
     e98:	mov.w	r8, #24
     e9c:	str	r5, [r4, #32]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
     e9e:	movs	r5, #0
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     ea0:	ldr.w	lr, [pc, #388]	; 1028 <_GLOBAL__sub_I_currentMode+0x1fc>
    int notes[4] = {38, 41, 45, 51};
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Sequence (Led* leds[5], boolean state) {
     ea4:	str.w	r8, [r4, #56]	; 0x38
      m_id = id;
      m_pin = pin;
     ea8:	movs	r7, #2
     eaa:	strd	sl, fp, [r4, #40]	; 0x28
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
     eae:	strb	r5, [r4, #20]
     eb0:	strb	r5, [r4, #21]
     eb2:	strb	r5, [r4, #22]
     eb4:	strb	r5, [r4, #23]
    int notes[4] = {38, 41, 45, 51};
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Sequence (Led* leds[5], boolean state) {
     eb6:	str	r5, [r4, #48]	; 0x30
     eb8:	str	r5, [r4, #52]	; 0x34
     eba:	str	r5, [r4, #60]	; 0x3c
     ebc:	stmia.w	ip, {r0, r1, r2, r3}
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
     ec0:	ldr	r1, [r6, #4]
      m_leds[2] = leds[2];
     ec2:	ldr	r0, [r6, #8]
      m_leds[3] = leds[3];
     ec4:	ldr	r2, [r6, #12]
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Sequence (Led* leds[5], boolean state) {
      m_leds[0] = leds[0];
     ec6:	ldr	r3, [r6, #0]
      m_leds[1] = leds[1];
     ec8:	str	r1, [r4, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
     eca:	mov.w	r8, #1
      m_pin = pin;
      m_startStop = startStop;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
     ece:	mov	r1, r5
      m_leds[2] = leds[2];
     ed0:	str	r0, [r4, #8]
      m_leds[3] = leds[3];
     ed2:	str	r2, [r4, #12]
     ed4:	mov	r0, r7
      m_leds[4] = leds[4];
     ed6:	ldr	r2, [r6, #16]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     ed8:	str.w	r3, [lr, #24]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
     edc:	strb.w	r5, [lr, #16]
      m_mode = GLOBAL;
     ee0:	strb.w	r5, [lr, #36]	; 0x24
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     ee4:	str.w	r4, [lr, #28]
      m_id = id;
     ee8:	str.w	r8, [lr]
      m_pin = pin;
     eec:	str.w	r7, [lr, #32]
     ef0:	mov.w	fp, #4
      m_state = state;
     ef4:	strb	r5, [r4, #24]
      m_currentStep = 0;
     ef6:	str	r5, [r4, #28]
    Sequence (Led* leds[5], boolean state) {
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
     ef8:	str	r2, [r4, #16]
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Sequence (Led* leds[5], boolean state) {
      m_leds[0] = leds[0];
     efa:	str	r3, [r4, #0]
      m_startStop = startStop;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
     efc:	bl	1730 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     f00:	ldr	r3, [pc, #252]	; (1000 <_GLOBAL__sub_I_currentMode+0x1d4>)
     f02:	ldr	r2, [r6, #4]
     f04:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
     f06:	mov	r1, r5
     f08:	mov	r0, fp
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
     f0a:	strb	r5, [r3, #16]
      m_mode = GLOBAL;
     f0c:	strb.w	r5, [r3, #36]	; 0x24
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
     f10:	mov.w	sl, #6
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     f14:	str	r4, [r3, #28]
      m_id = id;
     f16:	str	r7, [r3, #0]
      m_pin = pin;
     f18:	str.w	fp, [r3, #32]
      m_startStop = startStop;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
     f1c:	bl	1730 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     f20:	ldr	r3, [pc, #224]	; (1004 <_GLOBAL__sub_I_currentMode+0x1d8>)
     f22:	ldr	r2, [r6, #8]
     f24:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
     f26:	mov	r1, r5
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
     f28:	mov.w	r9, #3
      m_pin = pin;
      m_startStop = startStop;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
     f2c:	mov	r0, sl
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
     f2e:	strb	r5, [r3, #16]
      m_mode = GLOBAL;
     f30:	strb.w	r5, [r3, #36]	; 0x24
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     f34:	str	r4, [r3, #28]
      m_id = id;
     f36:	str.w	r9, [r3]
      m_pin = pin;
     f3a:	str.w	sl, [r3, #32]
      m_startStop = startStop;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
     f3e:	bl	1730 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     f42:	ldr	r3, [pc, #196]	; (1008 <_GLOBAL__sub_I_currentMode+0x1dc>)
     f44:	ldr	r1, [r6, #12]
     f46:	str	r1, [r3, #24]
      m_id = id;
      m_pin = pin;
     f48:	movs	r2, #8
      m_startStop = startStop;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
     f4a:	mov	r0, r2
     f4c:	mov	r1, r5
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
     f4e:	strb	r5, [r3, #16]
      m_mode = GLOBAL;
     f50:	strb.w	r5, [r3, #36]	; 0x24
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
     f54:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
     f56:	str.w	fp, [r3]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     f5a:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
     f5c:	bl	1730 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     f60:	ldr	r3, [pc, #168]	; (100c <_GLOBAL__sub_I_currentMode+0x1e0>)
     f62:	ldr	r2, [r6, #16]
     f64:	str	r2, [r3, #24]
      m_id = id;
     f66:	movs	r1, #5
      m_pin = pin;
     f68:	movs	r2, #10
      m_startStop = startStop;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
     f6a:	mov	r0, r2
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
     f6c:	str	r1, [r3, #0]
      m_pin = pin;
      m_startStop = startStop;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
     f6e:	mov	r1, r5
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
      m_mode = GLOBAL;
     f70:	strb.w	r5, [r3, #36]	; 0x24
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
     f74:	str	r2, [r3, #32]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     f76:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
     f78:	strb.w	r8, [r3, #16]
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
     f7c:	bl	1730 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     f80:	ldr	r3, [pc, #140]	; (1010 <_GLOBAL__sub_I_currentMode+0x1e4>)
     f82:	ldr	r2, [r6, #16]
     f84:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
     f86:	movs	r6, #12
      m_startStop = startStop;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
     f88:	mov	r0, r6
     f8a:	mov	r1, r5
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
      m_mode = GLOBAL;
     f8c:	strb.w	r5, [r3, #36]	; 0x24
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
     f90:	str	r6, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
     f92:	str.w	sl, [r3]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean startStop = false
    ): m_led(led), m_sequence(sequence) {
     f96:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_startStop = startStop;
     f98:	strb.w	r8, [r3, #16]
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
     f9c:	bl	1730 <pinMode>
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
     fa0:	ldr	r0, [pc, #112]	; (1014 <_GLOBAL__sub_I_currentMode+0x1e8>)
     fa2:	ldr	r1, [pc, #116]	; (1018 <_GLOBAL__sub_I_currentMode+0x1ec>)
     fa4:	ldr	r2, [pc, #116]	; (101c <_GLOBAL__sub_I_currentMode+0x1f0>)
     fa6:	ldr	r3, [pc, #120]	; (1020 <_GLOBAL__sub_I_currentMode+0x1f4>)
      m_pin = pin;
      m_knobType = knobType;
     fa8:	strb	r5, [r0, #20]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
     faa:	mov.w	lr, #14
      m_knobType = knobType;
      m_id = id;
     fae:	str	r5, [r0, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
     fb0:	str	r4, [r0, #16]
      m_pin = pin;
     fb2:	movs	r6, #15
     fb4:	movs	r5, #16
     fb6:	strb.w	lr, [r0]
     fba:	movs	r0, #17
     fbc:	strb	r6, [r1, #0]
     fbe:	strb	r5, [r2, #0]
     fc0:	strb	r0, [r3, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
     fc2:	str	r4, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
     fc4:	strb.w	r8, [r1, #20]
      m_id = id;
     fc8:	str.w	r8, [r1, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
     fcc:	str	r4, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
     fce:	strb	r7, [r2, #20]
      m_id = id;
     fd0:	str	r7, [r2, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
     fd2:	str	r4, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
     fd4:	strb.w	r9, [r3, #20]
      m_id = id;
     fd8:	str.w	r9, [r3, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
     fdc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fe0:	.word	0x1fff1614
     fe4:	.word	0x0000400c
     fe8:	.word	0x1fff1718
     fec:	.word	0x1fff0c40
     ff0:	.word	0x1fff15c4
     ff4:	.word	0x1fff15d8
     ff8:	.word	0x1fff15ec
     ffc:	.word	0x1fff1600
    1000:	.word	0x1fff16c4
    1004:	.word	0x1fff16ec
    1008:	.word	0x1fff17c8
    100c:	.word	0x1fff1788
    1010:	.word	0x1fff165c
    1014:	.word	0x1fff1684
    1018:	.word	0x1fff1628
    101c:	.word	0x1fff1644
    1020:	.word	0x1fff17b0
    1024:	.word	0x407f4000
    1028:	.word	0x1fff169c

0000102c <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    102c:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    102e:	ldr	r5, [pc, #60]	; (106c <usb_serial_getchar+0x40>)
    1030:	ldr	r0, [r5, #0]
    1032:	cbz	r0, 1054 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1034:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    1036:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1038:	adds	r1, r0, r3
    103a:	adds	r3, #1
	if (i >= rx_packet->len) {
    103c:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    103e:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    1040:	bcs.n	1048 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    1042:	strh	r3, [r0, #2]
	}
	return c;
    1044:	mov	r0, r4
}
    1046:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    1048:	bl	1ed8 <usb_free>
		rx_packet = NULL;
    104c:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    104e:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1050:	str	r3, [r5, #0]
    1052:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1054:	ldr	r3, [pc, #24]	; (1070 <usb_serial_getchar+0x44>)
    1056:	ldrb	r3, [r3, #0]
    1058:	cbz	r3, 1066 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    105a:	movs	r0, #2
    105c:	bl	1f24 <usb_rx>
    1060:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    1062:	cmp	r0, #0
    1064:	bne.n	1034 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1066:	mov.w	r0, #4294967295
    106a:	pop	{r3, r4, r5, pc}
    106c:	.word	0x1fff17fc
    1070:	.word	0x1fff195c

00001074 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1074:	push	{r4, lr}
	if (!rx_packet) {
    1076:	ldr	r4, [pc, #36]	; (109c <usb_serial_peekchar+0x28>)
    1078:	ldr	r0, [r4, #0]
    107a:	cbz	r0, 1084 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    107c:	ldrh	r3, [r0, #2]
    107e:	add	r0, r3
    1080:	ldrb	r0, [r0, #8]
}
    1082:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1084:	ldr	r3, [pc, #24]	; (10a0 <usb_serial_peekchar+0x2c>)
    1086:	ldrb	r3, [r3, #0]
    1088:	cbz	r3, 1096 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    108a:	movs	r0, #2
    108c:	bl	1f24 <usb_rx>
    1090:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1092:	cmp	r0, #0
    1094:	bne.n	107c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1096:	mov.w	r0, #4294967295
    109a:	pop	{r4, pc}
    109c:	.word	0x1fff17fc
    10a0:	.word	0x1fff195c

000010a4 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    10a4:	ldr	r3, [pc, #16]	; (10b8 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    10a6:	ldr	r2, [pc, #20]	; (10bc <usb_serial_available+0x18>)
    10a8:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    10aa:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    10ac:	cbz	r3, 10b6 <usb_serial_available+0x12>
    10ae:	ldrh	r2, [r3, #0]
    10b0:	ldrh	r3, [r3, #2]
    10b2:	subs	r3, r2, r3
    10b4:	add	r0, r3
	return count;
}
    10b6:	bx	lr
    10b8:	.word	0x1fff17fc
    10bc:	.word	0x1fff1df0

000010c0 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    10c0:	ldr	r3, [pc, #44]	; (10f0 <usb_serial_flush_input+0x30>)
    10c2:	ldrb	r3, [r3, #0]
    10c4:	cbz	r3, 10ee <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    10c6:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    10c8:	ldr	r4, [pc, #40]	; (10f4 <usb_serial_flush_input+0x34>)
    10ca:	ldr	r0, [r4, #0]
    10cc:	cbz	r0, 10e2 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    10ce:	bl	1ed8 <usb_free>
		rx_packet = NULL;
    10d2:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    10d4:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    10d6:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    10d8:	bl	1f24 <usb_rx>
		if (!rx) break;
    10dc:	cbz	r0, 10ec <usb_serial_flush_input+0x2c>
		usb_free(rx);
    10de:	bl	1ed8 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    10e2:	movs	r0, #2
    10e4:	bl	1f24 <usb_rx>
		if (!rx) break;
    10e8:	cmp	r0, #0
    10ea:	bne.n	10de <usb_serial_flush_input+0x1e>
    10ec:	pop	{r4, pc}
    10ee:	bx	lr
    10f0:	.word	0x1fff195c
    10f4:	.word	0x1fff17fc

000010f8 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    10f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    10fc:	ldr.w	r9, [pc, #248]	; 11f8 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1100:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1102:	movs	r2, #1
    1104:	strb.w	r2, [r9]
	while (size > 0) {
    1108:	str	r1, [sp, #4]
    110a:	cbz	r1, 1168 <usb_serial_write+0x70>
    110c:	ldr.w	r8, [pc, #236]	; 11fc <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1110:	ldr	r7, [pc, #212]	; (11e8 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1112:	ldr	r6, [sp, #4]
    1114:	mov	fp, r0
		if (!tx_packet) {
    1116:	ldr.w	r0, [r8]
    111a:	cbz	r0, 118a <usb_serial_write+0x92>
    111c:	ldr	r5, [pc, #204]	; (11ec <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    111e:	ldrh	r4, [r0, #2]
    1120:	rsb	r1, r4, #64	; 0x40
    1124:	cmp	r1, r6
    1126:	it	cs
    1128:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    112a:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    112e:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1130:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1134:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1136:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1138:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    113c:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1140:	cbz	r1, 1158 <usb_serial_write+0x60>
    1142:	subs	r4, #1
    1144:	add	r2, r4
    1146:	add	r1, fp
    1148:	ldrb.w	r4, [fp], #1
    114c:	strb.w	r4, [r2, #1]!
    1150:	cmp	fp, r1
    1152:	bne.n	1148 <usb_serial_write+0x50>
    1154:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1158:	cmp.w	lr, #63	; 0x3f
    115c:	bhi.n	1176 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    115e:	ldr	r2, [pc, #144]	; (11f0 <usb_serial_write+0xf8>)
    1160:	movs	r1, #5
    1162:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1164:	cmp	r6, #0
    1166:	bne.n	1116 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1168:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    116a:	movs	r3, #0
    116c:	strb.w	r3, [r9]
	return ret;
}
    1170:	add	sp, #12
    1172:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1176:	movs	r2, #64	; 0x40
    1178:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    117a:	mov	r1, r0
    117c:	movs	r0, #3
    117e:	bl	2074 <usb_tx>
			tx_packet = NULL;
    1182:	movs	r2, #0
    1184:	str.w	r2, [r8]
    1188:	b.n	115e <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    118a:	ldrb	r2, [r7, #0]
    118c:	cbz	r2, 11d8 <usb_serial_write+0xe0>
    118e:	ldr	r4, [pc, #100]	; (11f4 <usb_serial_write+0xfc>)
    1190:	ldr	r5, [pc, #88]	; (11ec <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1192:	mov.w	sl, #1
    1196:	b.n	11a8 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1198:	subs	r4, #1
    119a:	beq.n	11ca <usb_serial_write+0xd2>
    119c:	ldrb	r2, [r5, #0]
    119e:	cbnz	r2, 11ca <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    11a0:	bl	2b78 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    11a4:	ldrb	r2, [r7, #0]
    11a6:	cbz	r2, 11d8 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    11a8:	movs	r0, #3
    11aa:	bl	1f60 <usb_tx_packet_count>
    11ae:	cmp	r0, #7
    11b0:	bhi.n	1198 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    11b2:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    11b6:	bl	1e98 <usb_malloc>
    11ba:	str.w	r0, [r8]
					if (tx_packet) break;
    11be:	cmp	r0, #0
    11c0:	bne.n	111e <usb_serial_write+0x26>
					tx_noautoflush = 0;
    11c2:	ldr	r3, [pc, #52]	; (11f8 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    11c4:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    11c6:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    11c8:	bne.n	119c <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    11ca:	movs	r3, #1
					return -1;
    11cc:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    11d0:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    11d2:	add	sp, #12
    11d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    11d8:	movs	r3, #0
					return -1;
    11da:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    11de:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    11e2:	add	sp, #12
    11e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11e8:	.word	0x1fff195c
    11ec:	.word	0x1fff17f8
    11f0:	.word	0x1fff17f0
    11f4:	.word	0x00014821
    11f8:	.word	0x1fff17f1
    11fc:	.word	0x1fff17f4

00001200 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1200:	push	{lr}
    1202:	sub	sp, #12
    1204:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    1206:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1208:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    120c:	mov	r0, r3
    120e:	bl	10f8 <usb_serial_write>
}
    1212:	add	sp, #12
    1214:	ldr.w	pc, [sp], #4

00001218 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    1218:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    121a:	ldr	r5, [pc, #56]	; (1254 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    121c:	ldr	r4, [pc, #56]	; (1258 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    121e:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1220:	movs	r3, #1
    1222:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1224:	cbz	r0, 1232 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1226:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1228:	movs	r3, #0
    122a:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    122c:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1230:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1232:	ldr	r3, [pc, #40]	; (125c <usb_serial_write_buffer_free+0x44>)
    1234:	ldrb	r3, [r3, #0]
    1236:	cbnz	r3, 123e <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    1238:	movs	r0, #0
    123a:	strb	r0, [r4, #0]
			return 0;
    123c:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    123e:	movs	r0, #3
    1240:	bl	1f60 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1244:	cmp	r0, #7
    1246:	bhi.n	1238 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    1248:	bl	1e98 <usb_malloc>
    124c:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    124e:	cmp	r0, #0
    1250:	bne.n	1226 <usb_serial_write_buffer_free+0xe>
    1252:	b.n	1238 <usb_serial_write_buffer_free+0x20>
    1254:	.word	0x1fff17f4
    1258:	.word	0x1fff17f1
    125c:	.word	0x1fff195c

00001260 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1260:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1262:	ldr	r3, [pc, #68]	; (12a8 <usb_serial_flush_output+0x48>)
    1264:	ldrb	r3, [r3, #0]
    1266:	cbz	r3, 128c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    1268:	ldr	r6, [pc, #64]	; (12ac <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    126a:	ldr	r5, [pc, #68]	; (12b0 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    126c:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    126e:	movs	r7, #1
    1270:	strb	r7, [r5, #0]
	if (tx_packet) {
    1272:	cbz	r4, 128e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1274:	ldr	r2, [pc, #60]	; (12b4 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    1276:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    1278:	movs	r7, #0
    127a:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    127c:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    127e:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1280:	movs	r0, #3
    1282:	bl	2074 <usb_tx>
		tx_packet = NULL;
    1286:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    1288:	movs	r3, #0
    128a:	strb	r3, [r5, #0]
    128c:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    128e:	bl	1e98 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1292:	ldr	r3, [pc, #32]	; (12b4 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1294:	cbz	r0, 12a2 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    1296:	mov	r1, r0
    1298:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    129a:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    129c:	bl	2074 <usb_tx>
    12a0:	b.n	1288 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    12a2:	strb	r7, [r3, #0]
    12a4:	b.n	1288 <usb_serial_flush_output+0x28>
    12a6:	nop
    12a8:	.word	0x1fff195c
    12ac:	.word	0x1fff17f4
    12b0:	.word	0x1fff17f1
    12b4:	.word	0x1fff17f0

000012b8 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    12b8:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    12ba:	ldr	r3, [pc, #56]	; (12f4 <usb_serial_flush_callback+0x3c>)
    12bc:	ldrb	r3, [r3, #0]
    12be:	cbnz	r3, 12de <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    12c0:	ldr	r4, [pc, #52]	; (12f8 <usb_serial_flush_callback+0x40>)
    12c2:	ldr	r1, [r4, #0]
    12c4:	cbz	r1, 12e0 <usb_serial_flush_callback+0x28>
    12c6:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    12ca:	ldrh	r3, [r1, #2]
    12cc:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    12ce:	movs	r0, #3
    12d0:	bl	2074 <usb_tx>
		tx_packet = NULL;
    12d4:	str	r5, [r4, #0]
    12d6:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    12d8:	ldr	r3, [pc, #32]	; (12fc <usb_serial_flush_callback+0x44>)
    12da:	movs	r2, #1
    12dc:	strb	r2, [r3, #0]
    12de:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    12e0:	bl	1e98 <usb_malloc>
		if (tx) {
    12e4:	cmp	r0, #0
    12e6:	beq.n	12d8 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    12e8:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    12ea:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    12ee:	movs	r0, #3
    12f0:	b.w	2074 <usb_tx>
    12f4:	.word	0x1fff17f1
    12f8:	.word	0x1fff17f4
    12fc:	.word	0x1fff17f0

00001300 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1300:	ldr	r2, [pc, #220]	; (13e0 <wait_for_cal+0xe0>)
    1302:	ldr	r1, [pc, #224]	; (13e4 <wait_for_cal+0xe4>)
    1304:	ldr	r3, [r2, #0]
    1306:	lsls	r3, r3, #24
    1308:	bmi.n	1304 <wait_for_cal+0x4>
    130a:	ldr	r3, [r1, #0]
    130c:	ands.w	r3, r3, #128	; 0x80
    1310:	bne.n	1304 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    1312:	cpsid	i
	if (calibrating) {
    1314:	ldr	r1, [pc, #208]	; (13e8 <wait_for_cal+0xe8>)
    1316:	ldrb	r2, [r1, #0]
    1318:	cmp	r2, #0
    131a:	beq.n	13dc <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    131c:	ldr	r2, [pc, #204]	; (13ec <wait_for_cal+0xec>)
    131e:	ldr	r0, [pc, #208]	; (13f0 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1320:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1322:	ldr	r4, [pc, #208]	; (13f4 <wait_for_cal+0xf4>)
    1324:	ldr	r7, [r2, #0]
    1326:	ldr	r6, [r0, #0]
    1328:	ldr	r5, [r4, #0]
    132a:	ldr	r4, [r2, #12]
    132c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    132e:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1330:	adds	r2, #20
    1332:	ldr	r0, [r0, #0]
    1334:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1336:	ldr	r7, [pc, #192]	; (13f8 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1338:	add	r5, r6
    133a:	add	r4, r5
    133c:	add	r0, r4
    133e:	add	r2, r0
    1340:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1344:	ldr	r6, [pc, #180]	; (13fc <wait_for_cal+0xfc>)
    1346:	ldr	r0, [pc, #184]	; (1400 <wait_for_cal+0x100>)
    1348:	ldr	r5, [pc, #184]	; (1404 <wait_for_cal+0x104>)
    134a:	ldr	r4, [pc, #188]	; (1408 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    134c:	orr.w	r2, r2, #32768	; 0x8000
    1350:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1352:	ldr	r7, [r6, #0]
    1354:	ldr	r6, [r0, #0]
    1356:	ldr	r5, [r5, #0]
    1358:	ldr	r2, [pc, #176]	; (140c <wait_for_cal+0x10c>)
    135a:	ldr	r4, [r4, #0]
    135c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    135e:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1360:	ldr	r0, [r0, #0]
    1362:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1364:	ldr	r7, [pc, #168]	; (1410 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    1366:	add	r5, r6
    1368:	add	r4, r5
    136a:	add	r0, r4
    136c:	add	r2, r0
    136e:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1372:	ldr	r6, [pc, #160]	; (1414 <wait_for_cal+0x114>)
    1374:	ldr	r0, [pc, #160]	; (1418 <wait_for_cal+0x118>)
    1376:	ldr	r5, [pc, #164]	; (141c <wait_for_cal+0x11c>)
    1378:	ldr	r4, [pc, #164]	; (1420 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    137a:	orr.w	r2, r2, #32768	; 0x8000
    137e:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1380:	ldr	r7, [r6, #0]
    1382:	ldr	r6, [r0, #0]
    1384:	ldr	r5, [r5, #0]
    1386:	ldr	r2, [pc, #156]	; (1424 <wait_for_cal+0x124>)
    1388:	ldr	r4, [r4, #0]
    138a:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    138c:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    138e:	ldr	r0, [r0, #0]
    1390:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1392:	ldr	r7, [pc, #148]	; (1428 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1394:	add	r5, r6
    1396:	add	r4, r5
    1398:	add	r0, r4
    139a:	add	r2, r0
    139c:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    13a0:	ldr	r6, [pc, #136]	; (142c <wait_for_cal+0x12c>)
    13a2:	ldr	r0, [pc, #140]	; (1430 <wait_for_cal+0x130>)
    13a4:	ldr	r5, [pc, #140]	; (1434 <wait_for_cal+0x134>)
    13a6:	ldr	r4, [pc, #144]	; (1438 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    13a8:	orr.w	r2, r2, #32768	; 0x8000
    13ac:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    13ae:	ldr	r7, [r6, #0]
    13b0:	ldr	r6, [r0, #0]
    13b2:	ldr	r5, [r5, #0]
    13b4:	ldr	r2, [pc, #132]	; (143c <wait_for_cal+0x13c>)
    13b6:	ldr	r4, [r4, #0]
    13b8:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    13ba:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    13bc:	ldr	r0, [r0, #0]
    13be:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    13c0:	add	r5, r6
    13c2:	add	r4, r5
    13c4:	add	r0, r4
    13c6:	add	r2, r0
    13c8:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    13cc:	ldr	r0, [pc, #112]	; (1440 <wait_for_cal+0x140>)
    13ce:	orr.w	r2, r2, #32768	; 0x8000
    13d2:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    13d4:	strb	r3, [r1, #0]
	}
	__enable_irq();
    13d6:	cpsie	i
}
    13d8:	pop	{r4, r5, r6, r7}
    13da:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    13dc:	cpsie	i
    13de:	bx	lr
    13e0:	.word	0x4003b024
    13e4:	.word	0x400bb024
    13e8:	.word	0x1fff1802
    13ec:	.word	0x4003b038
    13f0:	.word	0x4003b03c
    13f4:	.word	0x4003b040
    13f8:	.word	0x4003b02c
    13fc:	.word	0x4003b058
    1400:	.word	0x4003b05c
    1404:	.word	0x4003b060
    1408:	.word	0x4003b064
    140c:	.word	0x4003b06c
    1410:	.word	0x4003b030
    1414:	.word	0x400bb038
    1418:	.word	0x400bb03c
    141c:	.word	0x400bb040
    1420:	.word	0x400bb044
    1424:	.word	0x400bb04c
    1428:	.word	0x400bb02c
    142c:	.word	0x400bb058
    1430:	.word	0x400bb05c
    1434:	.word	0x400bb060
    1438:	.word	0x400bb064
    143c:	.word	0x400bb06c
    1440:	.word	0x400bb030

00001444 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1444:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1446:	ldr	r0, [pc, #164]	; (14ec <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1448:	ldr	r2, [pc, #164]	; (14f0 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    144a:	ldr	r3, [pc, #168]	; (14f4 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    144c:	ldr	r5, [pc, #168]	; (14f8 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    144e:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1450:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1452:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1454:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    1456:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1458:	ldr	r4, [pc, #160]	; (14fc <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    145a:	cmp	r3, #8
    145c:	beq.n	14c0 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    145e:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1460:	ldr	r0, [pc, #156]	; (1500 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1462:	ldr	r1, [pc, #160]	; (1504 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1464:	beq.n	14d6 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    1466:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    1468:	ite	eq
    146a:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    146c:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    146e:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1470:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1472:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1474:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1476:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1478:	ldr	r3, [pc, #140]	; (1508 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    147a:	ldr	r1, [pc, #144]	; (150c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    147c:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    147e:	ldr	r2, [pc, #144]	; (1510 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1480:	cbz	r3, 14b2 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1482:	movs	r3, #1
    1484:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1486:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1488:	ldr	r3, [pc, #136]	; (1514 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    148a:	ldr	r1, [pc, #140]	; (1518 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    148c:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    148e:	ldr	r2, [pc, #140]	; (151c <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    1490:	cmp	r3, #1
    1492:	bls.n	14e2 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    1494:	cmp	r3, #4
    1496:	bls.n	14b8 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    1498:	cmp	r3, #8
    149a:	bls.n	14da <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    149c:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    149e:	ite	ls
    14a0:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    14a2:	movhi	r3, #135	; 0x87
    14a4:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    14a6:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    14a8:	ldr	r3, [pc, #116]	; (1520 <analog_init+0xdc>)
    14aa:	movs	r2, #1
    14ac:	strb	r2, [r3, #0]
}
    14ae:	pop	{r4, r5}
    14b0:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    14b2:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    14b4:	str	r3, [r2, #0]
    14b6:	b.n	1488 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    14b8:	movs	r3, #132	; 0x84
    14ba:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    14bc:	str	r3, [r2, #0]
    14be:	b.n	14a8 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    14c0:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    14c4:	ldr	r1, [pc, #60]	; (1504 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    14c6:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    14c8:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    14ca:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    14cc:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    14ce:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    14d0:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    14d2:	str	r3, [r1, #0]
    14d4:	b.n	1478 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    14d6:	movs	r2, #57	; 0x39
    14d8:	b.n	14ca <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    14da:	movs	r3, #133	; 0x85
    14dc:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    14de:	str	r3, [r2, #0]
    14e0:	b.n	14a8 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    14e2:	movs	r3, #128	; 0x80
    14e4:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    14e6:	str	r3, [r2, #0]
    14e8:	b.n	14a8 <analog_init+0x64>
    14ea:	nop
    14ec:	.word	0x40074000
    14f0:	.word	0x40074001
    14f4:	.word	0x1fff0c54
    14f8:	.word	0x4003b008
    14fc:	.word	0x4003b00c
    1500:	.word	0x400bb008
    1504:	.word	0x400bb00c
    1508:	.word	0x1fff1805
    150c:	.word	0x4003b020
    1510:	.word	0x400bb020
    1514:	.word	0x1fff0c55
    1518:	.word	0x4003b024
    151c:	.word	0x400bb024
    1520:	.word	0x1fff1802

00001524 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1524:	cmp	r0, #71	; 0x47
    1526:	bhi.n	1588 <analogRead+0x64>
	channel = pin2sc1a[pin];
    1528:	ldr	r3, [pc, #204]	; (15f8 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    152a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    152e:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    1530:	cmp	r6, #255	; 0xff
    1532:	beq.n	158c <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1534:	ldr	r3, [pc, #196]	; (15fc <analogRead+0xd8>)
    1536:	ldrb	r3, [r3, #0]
    1538:	cmp	r3, #0
    153a:	bne.n	1592 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    153c:	lsls	r2, r6, #24
    153e:	bmi.n	159a <analogRead+0x76>
#endif

	__disable_irq();
    1540:	cpsid	i
    1542:	ldr	r5, [pc, #188]	; (1600 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1544:	ldr	r4, [pc, #188]	; (1604 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    1546:	mov	r7, r5
    1548:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    154a:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    154c:	strb	r3, [r5, #0]
	__enable_irq();
    154e:	cpsie	i
	while (1) {
		__disable_irq();
    1550:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1552:	ldr	r3, [r4, #0]
    1554:	lsls	r3, r3, #24
    1556:	bmi.n	1572 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    1558:	ldrb	r3, [r7, #0]
    155a:	cbnz	r3, 1564 <analogRead+0x40>
    155c:	b.n	1548 <analogRead+0x24>
    155e:	ldrb	r3, [r5, #0]
    1560:	cmp	r3, #0
    1562:	beq.n	1548 <analogRead+0x24>
		__enable_irq();
    1564:	cpsie	i
		yield();
    1566:	bl	2b78 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    156a:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    156c:	ldr	r3, [r4, #0]
    156e:	lsls	r0, r3, #24
    1570:	bpl.n	155e <analogRead+0x3a>
			result = ADC0_RA;
    1572:	ldr	r3, [pc, #148]	; (1608 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    1574:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    1576:	movs	r2, #0
    1578:	strb	r2, [r5, #0]
			__enable_irq();
    157a:	cpsie	i
			result >>= analog_right_shift;
    157c:	ldr	r2, [pc, #140]	; (160c <analogRead+0xe8>)
    157e:	ldrb	r0, [r2, #0]
    1580:	asr.w	r0, r3, r0
			return result;
    1584:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1588:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    158a:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    158c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    158e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    1592:	bl	1300 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1596:	lsls	r2, r6, #24
    1598:	bpl.n	1540 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    159a:	cpsid	i
    159c:	ldr	r5, [pc, #112]	; (1610 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    159e:	ldr.w	r8, [pc, #124]	; 161c <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    15a2:	ldr	r4, [pc, #112]	; (1614 <analogRead+0xf0>)
    15a4:	and.w	r7, r6, #64	; 0x40
    15a8:	uxtb	r7, r7
    15aa:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    15ae:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    15b2:	cbz	r7, 15ec <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    15b4:	bic.w	r3, r3, #16
    15b8:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    15bc:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    15be:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    15c0:	ldr	r2, [pc, #76]	; (1610 <analogRead+0xec>)
    15c2:	strb	r3, [r5, #0]
	__enable_irq();
    15c4:	cpsie	i
	while (1) {
		__disable_irq();
    15c6:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    15c8:	ldr	r3, [r4, #0]
    15ca:	lsls	r1, r3, #24
    15cc:	bmi.n	15e8 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    15ce:	ldrb	r3, [r2, #0]
    15d0:	cbnz	r3, 15da <analogRead+0xb6>
    15d2:	b.n	15ae <analogRead+0x8a>
    15d4:	ldrb	r3, [r5, #0]
    15d6:	cmp	r3, #0
    15d8:	beq.n	15ae <analogRead+0x8a>
		__enable_irq();
    15da:	cpsie	i
		yield();
    15dc:	bl	2b78 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    15e0:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    15e2:	ldr	r3, [r4, #0]
    15e4:	lsls	r3, r3, #24
    15e6:	bpl.n	15d4 <analogRead+0xb0>
			result = ADC1_RA;
    15e8:	ldr	r3, [pc, #44]	; (1618 <analogRead+0xf4>)
    15ea:	b.n	1574 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    15ec:	orr.w	r3, r3, #16
    15f0:	str.w	r3, [r8]
    15f4:	b.n	15bc <analogRead+0x98>
    15f6:	nop
    15f8:	.word	0x00004088
    15fc:	.word	0x1fff1802
    1600:	.word	0x1fff1804
    1604:	.word	0x4003b000
    1608:	.word	0x4003b010
    160c:	.word	0x1fff1801
    1610:	.word	0x1fff1803
    1614:	.word	0x400bb000
    1618:	.word	0x400bb010
    161c:	.word	0x400bb00c

00001620 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    1620:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    1622:	ldr	r3, [pc, #68]	; (1668 <digitalWrite.part.1+0x48>)
    1624:	ldr.w	r2, [r3, r0, lsl #3]
    1628:	ldrb.w	r4, [r2, #640]	; 0x280
    162c:	cbz	r4, 163c <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    162e:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    1630:	cbz	r1, 1652 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    1632:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1636:	ldr.w	r4, [sp], #4
    163a:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    163c:	add.w	r3, r3, r0, lsl #3
    1640:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1642:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    1644:	cbnz	r1, 165c <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    1646:	bic.w	r2, r2, #2
    164a:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    164c:	ldr.w	r4, [sp], #4
    1650:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    1652:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1656:	ldr.w	r4, [sp], #4
    165a:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    165c:	orr.w	r2, r2, #3
    1660:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1662:	ldr.w	r4, [sp], #4
    1666:	bx	lr
    1668:	.word	0x000040d0

0000166c <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    166c:	ldr	r2, [pc, #112]	; (16e0 <pinMode.part.2+0x74>)
    166e:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1672:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1674:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1676:	beq.n	169c <pinMode.part.2+0x30>
    1678:	cmp	r1, #4
    167a:	beq.n	16b4 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    167c:	ldr.w	r0, [r2, r0, lsl #3]
    1680:	movs	r2, #0
    1682:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    1686:	cbz	r1, 1694 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    1688:	cmp	r1, #2
    168a:	beq.n	16ce <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    168c:	cmp	r1, #3
    168e:	beq.n	16d6 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1690:	str	r2, [r3, #0]
    1692:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    1694:	mov.w	r2, #256	; 0x100
    1698:	str	r2, [r3, #0]
    169a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    169c:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    16a0:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    16a4:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    16a8:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    16aa:	ldr	r2, [r3, #0]
    16ac:	bic.w	r2, r2, #32
    16b0:	str	r2, [r3, #0]
    16b2:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    16b4:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    16b8:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    16bc:	movs	r0, #1
    16be:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    16c2:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    16c4:	ldr	r2, [r3, #0]
    16c6:	orr.w	r2, r2, #32
    16ca:	str	r2, [r3, #0]
    16cc:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    16ce:	movw	r2, #259	; 0x103
    16d2:	str	r2, [r3, #0]
    16d4:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    16d6:	mov.w	r2, #258	; 0x102
    16da:	str	r2, [r3, #0]
    16dc:	bx	lr
    16de:	nop
    16e0:	.word	0x000040d0

000016e4 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    16e4:	push	{r4, r5}
	RTC_SR = 0;
    16e6:	ldr	r3, [pc, #20]	; (16fc <rtc_set+0x18>)
	RTC_TPR = 0;
    16e8:	ldr	r5, [pc, #20]	; (1700 <rtc_set+0x1c>)
	RTC_TSR = t;
    16ea:	ldr	r4, [pc, #24]	; (1704 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    16ec:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    16ee:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    16f0:	str	r2, [r3, #0]
	RTC_TPR = 0;
    16f2:	str	r2, [r5, #0]
	RTC_TSR = t;
    16f4:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    16f6:	str	r1, [r3, #0]
}
    16f8:	pop	{r4, r5}
    16fa:	bx	lr
    16fc:	.word	0x4003d014
    1700:	.word	0x4003d004
    1704:	.word	0x4003d000

00001708 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    1708:	cmp	r0, #63	; 0x3f
    170a:	bhi.n	1710 <digitalWrite+0x8>
    170c:	b.w	1620 <digitalWrite.part.1>
    1710:	bx	lr
    1712:	nop

00001714 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1714:	cmp	r0, #63	; 0x3f
    1716:	bhi.n	1726 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    1718:	ldr	r3, [pc, #16]	; (172c <digitalRead+0x18>)
    171a:	ldr.w	r3, [r3, r0, lsl #3]
    171e:	ldrb.w	r0, [r3, #512]	; 0x200
    1722:	uxtb	r0, r0
    1724:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1726:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    1728:	bx	lr
    172a:	nop
    172c:	.word	0x000040d0

00001730 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    1730:	cmp	r0, #63	; 0x3f
    1732:	bhi.n	1738 <pinMode+0x8>
    1734:	b.w	166c <pinMode.part.2>
    1738:	bx	lr
    173a:	nop

0000173c <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    173c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1740:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1742:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    1744:	ldr	r7, [pc, #136]	; (17d0 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1746:	ldr	r3, [pc, #140]	; (17d4 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1748:	ldr	r2, [pc, #140]	; (17d8 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    174a:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    174c:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    174e:	ldr	r2, [r2, #0]
	__enable_irq();
    1750:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1752:	lsls	r2, r2, #5
    1754:	bpl.n	175c <delay+0x20>
    1756:	cmp	r3, #50	; 0x32
    1758:	it	hi
    175a:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    175c:	cbz	r5, 17cc <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    175e:	rsb	r3, r3, #179200	; 0x2bc00
    1762:	addw	r3, r3, #799	; 0x31f
    1766:	ldr	r6, [pc, #116]	; (17dc <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1768:	ldr.w	r9, [pc, #104]	; 17d4 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    176c:	ldr.w	r8, [pc, #104]	; 17d8 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1770:	lsrs	r3, r3, #2
    1772:	mov.w	r2, #1000	; 0x3e8
    1776:	umull	r1, r3, r6, r3
    177a:	mul.w	r4, r2, r4
    177e:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1782:	cpsid	i
	current = SYST_CVR;
    1784:	ldr.w	r1, [r9]
	count = systick_millis_count;
    1788:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    178a:	ldr.w	lr, [r8]
	__enable_irq();
    178e:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1790:	rsb	r3, r1, #179200	; 0x2bc00
    1794:	addw	r3, r3, #799	; 0x31f
    1798:	lsrs	r3, r3, #2
    179a:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    179e:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    17a2:	rsb	r3, r4, r3, lsr #2
    17a6:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    17aa:	beq.n	17b2 <delay+0x76>
    17ac:	cmp	r1, #50	; 0x32
    17ae:	it	hi
    17b0:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    17b2:	mla	r3, r0, r2, r3
    17b6:	cmp.w	r3, #1000	; 0x3e8
    17ba:	bcc.n	17c6 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    17bc:	subs	r5, #1
    17be:	beq.n	17cc <delay+0x90>
				start += 1000;
    17c0:	add.w	r4, r4, #1000	; 0x3e8
    17c4:	b.n	1782 <delay+0x46>
			}
			yield();
    17c6:	bl	2b78 <yield>
		}
    17ca:	b.n	1782 <delay+0x46>
    17cc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    17d0:	.word	0x1fff1808
    17d4:	.word	0xe000e018
    17d8:	.word	0xe000ed04
    17dc:	.word	0x16c16c17

000017e0 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    17e0:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    17e2:	ldr	r3, [pc, #312]	; (191c <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    17e4:	ldr	r0, [pc, #312]	; (1920 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    17e6:	ldr.w	ip, [pc, #348]	; 1944 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    17ea:	ldr	r4, [pc, #312]	; (1924 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    17ec:	ldr	r1, [pc, #312]	; (1928 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    17ee:	ldr.w	lr, [pc, #344]	; 1948 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    17f2:	ldr	r6, [pc, #312]	; (192c <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    17f4:	ldr	r5, [pc, #312]	; (1930 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    17f6:	ldr	r7, [pc, #316]	; (1934 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    17f8:	mov.w	r2, #134217728	; 0x8000000
    17fc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    17fe:	mov.w	r2, #268435456	; 0x10000000
    1802:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    1804:	mov.w	r2, #536870912	; 0x20000000
    1808:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    180a:	mov.w	r2, #1073741824	; 0x40000000
    180e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    1810:	mov.w	r2, #2147483648	; 0x80000000
    1814:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1816:	movs	r2, #0
    1818:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    181a:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    181c:	movw	r0, #61439	; 0xefff
    1820:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1824:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    1828:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    182a:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    182e:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    1830:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    1832:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1834:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    1838:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    183a:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    183e:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1840:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    1844:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1846:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    184a:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    184e:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    1852:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1856:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    185a:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    185c:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1860:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1862:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    1864:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    1866:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    186a:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    186c:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    186e:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1870:	ldr	r4, [pc, #196]	; (1938 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    1872:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    1874:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1876:	movs	r1, #9
    1878:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    187a:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    187e:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    1882:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    1884:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    1886:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    1888:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    188a:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    188c:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    188e:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    1892:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    1896:	add.w	r7, r7, #520192	; 0x7f000
    189a:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    189c:	addw	r4, r4, #2044	; 0x7fc
    18a0:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    18a2:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    18a4:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    18a6:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    18a8:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    18ac:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    18ae:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    18b2:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    18b6:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    18b8:	sub.w	r4, r4, #460800	; 0x70800
    18bc:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    18c0:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    18c2:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    18c4:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    18c8:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    18ca:	ldr	r0, [pc, #112]	; (193c <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    18cc:	orr.w	r1, r1, #512	; 0x200
    18d0:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    18d2:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    18d4:	ldr	r4, [pc, #104]	; (1940 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    18d6:	add.w	lr, lr, #65280	; 0xff00
    18da:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    18de:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    18e2:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    18e6:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    18ea:	orr.w	r1, r1, #33554432	; 0x2000000
    18ee:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    18f0:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    18f4:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    18f8:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    18fa:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    18fc:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    18fe:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1900:	str	r2, [r4, #0]
#endif
	analog_init();
    1902:	bl	1444 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    1906:	movs	r0, #25
    1908:	bl	173c <delay>
	usb_init();
    190c:	bl	2aa8 <usb_init>
	delay(275);
    1910:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    1914:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    1918:	b.w	173c <delay>
    191c:	.word	0xe000e104
    1920:	.word	0x40038004
    1924:	.word	0x40038014
    1928:	.word	0x4003801c
    192c:	.word	0x40038024
    1930:	.word	0x4003802c
    1934:	.word	0x40038034
    1938:	.word	0x40038000
    193c:	.word	0x40048004
    1940:	.word	0x400c9000
    1944:	.word	0x40038008
    1948:	.word	0x4003800c

0000194c <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    194c:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    194e:	ldr	r3, [pc, #56]	; (1988 <sysex_byte+0x3c>)
    1950:	ldr	r4, [pc, #56]	; (198c <sysex_byte+0x40>)
    1952:	ldr	r3, [r3, #0]
    1954:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    1956:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    1958:	cbz	r3, 197e <sysex_byte+0x32>
    195a:	cmp.w	r1, #290	; 0x122
    195e:	bcs.n	196c <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1960:	ldr	r2, [pc, #44]	; (1990 <sysex_byte+0x44>)
    1962:	adds	r3, r1, #1
    1964:	strb	r5, [r2, r1]
    1966:	uxth	r3, r3
    1968:	strh	r3, [r4, #0]
	}
}
    196a:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    196c:	movs	r2, #0
    196e:	ldr	r0, [pc, #32]	; (1990 <sysex_byte+0x44>)
    1970:	blx	r3
    1972:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1974:	ldr	r2, [pc, #24]	; (1990 <sysex_byte+0x44>)
    1976:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    1978:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    197a:	strh	r3, [r4, #0]
	}
}
    197c:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    197e:	cmp.w	r1, #290	; 0x122
    1982:	bcc.n	1960 <sysex_byte+0x14>
    1984:	pop	{r3, r4, r5, pc}
    1986:	nop
    1988:	.word	0x1fff1830
    198c:	.word	0x1fff1cc6
    1990:	.word	0x1fff1ccc

00001994 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    1994:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1998:	ldr	r6, [pc, #132]	; (1a20 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    199a:	ldr	r7, [pc, #136]	; (1a24 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    199c:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    199e:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    19a0:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    19a2:	strb	r3, [r7, #0]
	if (!tx_packet) {
    19a4:	cbz	r1, 19d4 <usb_midi_write_packed+0x40>
    19a6:	ldr	r5, [pc, #128]	; (1a28 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    19a8:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    19aa:	add.w	r2, r1, r3, lsl #2
    19ae:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    19b0:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    19b2:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    19b4:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    19b8:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    19ba:	bhi.n	19c6 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    19bc:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    19be:	movs	r3, #0
    19c0:	strb	r3, [r7, #0]
    19c2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    19c6:	movs	r3, #64	; 0x40
    19c8:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    19ca:	movs	r0, #4
    19cc:	bl	2074 <usb_tx>
		tx_packet = NULL;
    19d0:	str	r4, [r6, #0]
    19d2:	b.n	19be <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    19d4:	ldr.w	r9, [pc, #84]	; 1a2c <usb_midi_write_packed+0x98>
    19d8:	ldrb.w	r3, [r9]
    19dc:	cmp	r3, #0
    19de:	beq.n	19c2 <usb_midi_write_packed+0x2e>
    19e0:	ldr	r5, [pc, #68]	; (1a28 <usb_midi_write_packed+0x94>)
    19e2:	movw	r4, #48001	; 0xbb81
    19e6:	b.n	19fa <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    19e8:	subs	r4, #1
    19ea:	beq.n	1a12 <usb_midi_write_packed+0x7e>
    19ec:	ldrb	r3, [r5, #0]
    19ee:	cbnz	r3, 1a12 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    19f0:	bl	2b78 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    19f4:	ldrb.w	r3, [r9]
    19f8:	cbz	r3, 1a1a <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    19fa:	movs	r0, #4
    19fc:	bl	1f60 <usb_tx_packet_count>
    1a00:	cmp	r0, #5
    1a02:	bhi.n	19e8 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    1a04:	bl	1e98 <usb_malloc>
    1a08:	mov	r1, r0
    1a0a:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    1a0c:	cmp	r0, #0
    1a0e:	beq.n	19e8 <usb_midi_write_packed+0x54>
    1a10:	b.n	19a8 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    1a12:	movs	r3, #1
    1a14:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    1a16:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a1a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a1e:	nop
    1a20:	.word	0x1fff184c
    1a24:	.word	0x1fff1820
    1a28:	.word	0x1fff1850
    1a2c:	.word	0x1fff195c

00001a30 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    1a30:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    1a32:	ldr	r3, [pc, #32]	; (1a54 <usb_midi_flush_output+0x24>)
    1a34:	ldrb	r4, [r3, #0]
    1a36:	cbnz	r4, 1a42 <usb_midi_flush_output+0x12>
    1a38:	ldr	r5, [pc, #28]	; (1a58 <usb_midi_flush_output+0x28>)
    1a3a:	ldr	r1, [r5, #0]
    1a3c:	cbz	r1, 1a42 <usb_midi_flush_output+0x12>
    1a3e:	ldrh	r3, [r1, #2]
    1a40:	cbnz	r3, 1a44 <usb_midi_flush_output+0x14>
    1a42:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    1a44:	lsls	r3, r3, #2
    1a46:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    1a48:	movs	r0, #4
    1a4a:	bl	2074 <usb_tx>
		tx_packet = NULL;
    1a4e:	str	r4, [r5, #0]
    1a50:	pop	{r3, r4, r5, pc}
    1a52:	nop
    1a54:	.word	0x1fff1820
    1a58:	.word	0x1fff184c

00001a5c <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1a5c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    1a60:	ldr	r6, [pc, #692]	; (1d18 <usb_midi_read+0x2bc>)
    1a62:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1a64:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    1a66:	cmp	r3, #0
    1a68:	beq.w	1b90 <usb_midi_read+0x134>
    1a6c:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    1a6e:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    1a70:	lsrs	r1, r2, #2
    1a72:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    1a76:	adds	r2, #4
	if (index < rx_packet->len) {
    1a78:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    1a7a:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    1a7c:	bcs.n	1b04 <usb_midi_read+0xa8>
		rx_packet->index = index;
    1a7e:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    1a80:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1a84:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    1a88:	ldr	r1, [pc, #656]	; (1d1c <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1a8a:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    1a8e:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    1a92:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1a96:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    1a98:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    1a9c:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1a9e:	bls.n	1ad6 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1aa0:	subs	r3, r6, #2
    1aa2:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1aa4:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1aa8:	bls.n	1b48 <usb_midi_read+0xec>
    1aaa:	cmp	r6, #5
    1aac:	beq.n	1b40 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    1aae:	cmp	r6, #4
    1ab0:	beq.w	1dfc <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    1ab4:	subs	r3, r6, #5
    1ab6:	cmp	r3, #2
    1ab8:	bls.n	1bba <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    1aba:	cmp	r6, #15
    1abc:	bne.n	1adc <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    1abe:	cmp	r0, #247	; 0xf7
    1ac0:	bhi.n	1b48 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    1ac2:	cmp	r0, #240	; 0xf0
    1ac4:	beq.n	1acc <usb_midi_read+0x70>
    1ac6:	ldr	r3, [pc, #600]	; (1d20 <usb_midi_read+0x2c4>)
    1ac8:	ldrh	r3, [r3, #0]
    1aca:	cbz	r3, 1adc <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    1acc:	bl	194c <sysex_byte>
		}
	}
	return 0;
    1ad0:	movs	r0, #0
    1ad2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    1ad6:	cbz	r7, 1ae2 <usb_midi_read+0x86>
    1ad8:	cmp	r5, r7
    1ada:	beq.n	1ae2 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    1adc:	movs	r0, #0
    1ade:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1ae2:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    1ae4:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1ae8:	beq.w	1bfa <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    1aec:	cmp	r6, #9
    1aee:	beq.n	1b14 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    1af0:	cmp	r6, #10
    1af2:	bne.w	1c1e <usb_midi_read+0x1c2>
    1af6:	cmp	r3, #10
    1af8:	bne.n	1adc <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    1afa:	ldr	r3, [pc, #552]	; (1d24 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    1afc:	ldr	r2, [pc, #552]	; (1d28 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    1afe:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    1b00:	movs	r1, #160	; 0xa0
    1b02:	b.n	1c08 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    1b04:	mov	r0, r3
    1b06:	bl	1ed8 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    1b0a:	movs	r0, #5
    1b0c:	bl	1f24 <usb_rx>
    1b10:	str	r0, [r6, #0]
    1b12:	b.n	1a80 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    1b14:	cmp	r3, #9
    1b16:	bne.n	1adc <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    1b18:	lsrs	r7, r4, #24
    1b1a:	beq.w	1e14 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    1b1e:	ldr	r3, [pc, #524]	; (1d2c <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1b20:	ldr	r2, [pc, #516]	; (1d28 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    1b22:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1b24:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1b26:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1b2a:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1b2c:	uxtb	r5, r5
    1b2e:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    1b30:	cmp	r3, #0
    1b32:	beq.w	1c70 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1b36:	mov	r2, r4
    1b38:	mov	r1, r6
    1b3a:	mov	r0, r5
    1b3c:	blx	r3
    1b3e:	b.n	1c70 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1b40:	cmp	r0, #240	; 0xf0
    1b42:	bls.n	1bcc <usb_midi_read+0x170>
    1b44:	cmp	r0, #247	; 0xf7
    1b46:	beq.n	1bcc <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    1b48:	subs	r0, #241	; 0xf1
    1b4a:	cmp	r0, #14
    1b4c:	bhi.n	1adc <usb_midi_read+0x80>
    1b4e:	add	r3, pc, #4	; (adr r3, 1b54 <usb_midi_read+0xf8>)
    1b50:	ldr.w	pc, [r3, r0, lsl #2]
    1b54:	.word	0x00001d0b
    1b58:	.word	0x00001cef
    1b5c:	.word	0x00001cdd
    1b60:	.word	0x00001add
    1b64:	.word	0x00001add
    1b68:	.word	0x00001ccf
    1b6c:	.word	0x00001add
    1b70:	.word	0x00001daf
    1b74:	.word	0x00001add
    1b78:	.word	0x00001d79
    1b7c:	.word	0x00001d93
    1b80:	.word	0x00001cb7
    1b84:	.word	0x00001add
    1b88:	.word	0x00001c9f
    1b8c:	.word	0x00001c83
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    1b90:	ldr	r3, [pc, #412]	; (1d30 <usb_midi_read+0x2d4>)
    1b92:	ldrb	r3, [r3, #0]
    1b94:	cmp	r3, #0
    1b96:	beq.n	1adc <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    1b98:	movs	r0, #5
    1b9a:	bl	1f24 <usb_rx>
    1b9e:	mov	r3, r0
    1ba0:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    1ba2:	cmp	r0, #0
    1ba4:	beq.n	1adc <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    1ba6:	ldrh	r5, [r0, #0]
    1ba8:	cmp	r5, #0
    1baa:	bne.w	1a6e <usb_midi_read+0x12>
			usb_free(rx_packet);
    1bae:	bl	1ed8 <usb_free>
			rx_packet = NULL;
    1bb2:	str	r5, [r6, #0]
			return 0;
    1bb4:	mov	r0, r5
    1bb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    1bba:	bl	194c <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    1bbe:	ubfx	r0, r4, #16, #8
    1bc2:	bl	194c <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    1bc6:	cmp	r6, #7
    1bc8:	bne.n	1bd0 <usb_midi_read+0x174>
    1bca:	lsrs	r0, r4, #24
    1bcc:	bl	194c <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    1bd0:	ldr	r3, [pc, #332]	; (1d20 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1bd2:	ldr	r2, [pc, #352]	; (1d34 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    1bd4:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    1bd6:	ldr	r0, [pc, #352]	; (1d38 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1bd8:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1bda:	ldr	r5, [pc, #352]	; (1d3c <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1bdc:	ldr	r2, [pc, #328]	; (1d28 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    1bde:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1be0:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1be2:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1be4:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1be6:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1be8:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1bea:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    1bec:	cbz	r4, 1c32 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    1bee:	movs	r2, #1
    1bf0:	ldr	r0, [pc, #332]	; (1d40 <usb_midi_read+0x2e4>)
    1bf2:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1bf4:	movs	r0, #1
    1bf6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1bfa:	cmp	r3, #8
    1bfc:	bne.w	1adc <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    1c00:	ldr	r3, [pc, #320]	; (1d44 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1c02:	ldr	r2, [pc, #292]	; (1d28 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    1c04:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1c06:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1c08:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1c0c:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1c0e:	uxtb	r5, r5
    1c10:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    1c12:	cbz	r3, 1c70 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1c14:	mov	r0, r5
    1c16:	mov	r2, r4
    1c18:	mov	r1, r6
    1c1a:	blx	r3
    1c1c:	b.n	1c70 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    1c1e:	cmp	r6, #11
    1c20:	bne.n	1c46 <usb_midi_read+0x1ea>
    1c22:	cmp	r3, #11
    1c24:	bne.w	1adc <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    1c28:	ldr	r3, [pc, #284]	; (1d48 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1c2a:	ldr	r2, [pc, #252]	; (1d28 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    1c2c:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1c2e:	movs	r1, #176	; 0xb0
    1c30:	b.n	1c08 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    1c32:	ldr	r3, [pc, #280]	; (1d4c <usb_midi_read+0x2f0>)
    1c34:	ldr	r3, [r3, #0]
    1c36:	cmp	r3, #0
    1c38:	beq.w	1e32 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    1c3c:	ldr	r0, [pc, #256]	; (1d40 <usb_midi_read+0x2e4>)
    1c3e:	blx	r3
		}
		return 1;
    1c40:	movs	r0, #1
    1c42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    1c46:	cmp	r6, #12
    1c48:	bne.w	1e4c <usb_midi_read+0x3f0>
    1c4c:	cmp	r3, #12
    1c4e:	bne.w	1adc <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1c52:	ldr	r3, [pc, #252]	; (1d50 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1c54:	ldr	r2, [pc, #208]	; (1d28 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    1c56:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1c58:	movs	r1, #192	; 0xc0
    1c5a:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    1c5c:	uxtb	r5, r5
    1c5e:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1c62:	cmp	r3, #0
    1c64:	beq.w	1df8 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1c68:	mov	r0, r5
    1c6a:	mov	r1, r6
    1c6c:	lsrs	r4, r4, #24
    1c6e:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1c70:	ldr	r1, [pc, #224]	; (1d54 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    1c72:	ldr	r2, [pc, #196]	; (1d38 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    1c74:	ldr	r3, [pc, #196]	; (1d3c <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1c76:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    1c78:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    1c7a:	strb	r4, [r3, #0]
		return 1;
    1c7c:	movs	r0, #1
    1c7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    1c82:	ldr	r3, [pc, #212]	; (1d58 <usb_midi_read+0x2fc>)
    1c84:	ldr	r3, [r3, #0]
    1c86:	cmp	r3, #0
    1c88:	beq.w	1e38 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    1c8c:	blx	r3
    1c8e:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    1c92:	ldr	r3, [pc, #148]	; (1d28 <usb_midi_read+0x2cc>)
    1c94:	uxtb	r5, r5
    1c96:	lsrs	r4, r4, #24
    1c98:	strb.w	r8, [r3]
		goto return_message;
    1c9c:	b.n	1c70 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    1c9e:	ldr	r3, [pc, #188]	; (1d5c <usb_midi_read+0x300>)
    1ca0:	ldr	r3, [r3, #0]
    1ca2:	cmp	r3, #0
    1ca4:	bne.n	1c8c <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    1ca6:	ldr	r3, [pc, #184]	; (1d60 <usb_midi_read+0x304>)
    1ca8:	ldr	r3, [r3, #0]
    1caa:	cbz	r3, 1cd6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    1cac:	movs	r0, #254	; 0xfe
    1cae:	blx	r3
    1cb0:	ubfx	r6, r4, #16, #8
    1cb4:	b.n	1c92 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    1cb6:	ldr	r3, [pc, #172]	; (1d64 <usb_midi_read+0x308>)
    1cb8:	ldr	r3, [r3, #0]
    1cba:	cmp	r3, #0
    1cbc:	bne.n	1c8c <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    1cbe:	ldr	r3, [pc, #160]	; (1d60 <usb_midi_read+0x304>)
    1cc0:	ldr	r3, [r3, #0]
    1cc2:	cbz	r3, 1cd6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    1cc4:	movs	r0, #252	; 0xfc
    1cc6:	blx	r3
    1cc8:	ubfx	r6, r4, #16, #8
    1ccc:	b.n	1c92 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    1cce:	ldr	r3, [pc, #152]	; (1d68 <usb_midi_read+0x30c>)
    1cd0:	ldr	r3, [r3, #0]
    1cd2:	cmp	r3, #0
    1cd4:	bne.n	1c8c <usb_midi_read+0x230>
    1cd6:	ubfx	r6, r4, #16, #8
    1cda:	b.n	1c92 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1cdc:	ldr	r3, [pc, #140]	; (1d6c <usb_midi_read+0x310>)
    1cde:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    1ce0:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1ce4:	cmp	r3, #0
    1ce6:	beq.n	1c92 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    1ce8:	mov	r0, r6
    1cea:	blx	r3
    1cec:	b.n	1c92 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    1cee:	ldr	r3, [pc, #128]	; (1d70 <usb_midi_read+0x314>)
    1cf0:	ldr	r2, [r3, #0]
    1cf2:	cmp	r2, #0
    1cf4:	beq.n	1cd6 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    1cf6:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    1cf8:	lsrs	r3, r4, #17
    1cfa:	and.w	r0, r6, #127	; 0x7f
    1cfe:	and.w	r3, r3, #16256	; 0x3f80
    1d02:	orrs	r0, r3
    1d04:	uxtb	r6, r6
    1d06:	blx	r2
    1d08:	b.n	1c92 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1d0a:	ldr	r3, [pc, #104]	; (1d74 <usb_midi_read+0x318>)
    1d0c:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    1d0e:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1d12:	cmp	r3, #0
    1d14:	bne.n	1ce8 <usb_midi_read+0x28c>
    1d16:	b.n	1c92 <usb_midi_read+0x236>
    1d18:	.word	0x1fff1858
    1d1c:	.word	0x1fff1cca
    1d20:	.word	0x1fff1cc6
    1d24:	.word	0x1fff1834
    1d28:	.word	0x1fff1cc4
    1d2c:	.word	0x1fff1868
    1d30:	.word	0x1fff195c
    1d34:	.word	0x1fff1830
    1d38:	.word	0x1fff1cc8
    1d3c:	.word	0x1fff1cc9
    1d40:	.word	0x1fff1ccc
    1d44:	.word	0x1fff1860
    1d48:	.word	0x1fff1864
    1d4c:	.word	0x1fff1848
    1d50:	.word	0x1fff1824
    1d54:	.word	0x1fff1ccb
    1d58:	.word	0x1fff1810
    1d5c:	.word	0x1fff1814
    1d60:	.word	0x1fff1818
    1d64:	.word	0x1fff1854
    1d68:	.word	0x1fff1844
    1d6c:	.word	0x1fff185c
    1d70:	.word	0x1fff182c
    1d74:	.word	0x1fff1840
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    1d78:	ldr	r3, [pc, #252]	; (1e78 <usb_midi_read+0x41c>)
    1d7a:	ldr	r3, [r3, #0]
    1d7c:	cmp	r3, #0
    1d7e:	bne.n	1c8c <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    1d80:	ldr	r3, [pc, #248]	; (1e7c <usb_midi_read+0x420>)
    1d82:	ldr	r3, [r3, #0]
    1d84:	cmp	r3, #0
    1d86:	beq.n	1cd6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    1d88:	movs	r0, #250	; 0xfa
    1d8a:	blx	r3
    1d8c:	ubfx	r6, r4, #16, #8
    1d90:	b.n	1c92 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    1d92:	ldr	r3, [pc, #236]	; (1e80 <usb_midi_read+0x424>)
    1d94:	ldr	r3, [r3, #0]
    1d96:	cmp	r3, #0
    1d98:	bne.w	1c8c <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    1d9c:	ldr	r3, [pc, #220]	; (1e7c <usb_midi_read+0x420>)
    1d9e:	ldr	r3, [r3, #0]
    1da0:	cmp	r3, #0
    1da2:	beq.n	1cd6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    1da4:	movs	r0, #251	; 0xfb
    1da6:	blx	r3
    1da8:	ubfx	r6, r4, #16, #8
    1dac:	b.n	1c92 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    1dae:	ldr	r3, [pc, #212]	; (1e84 <usb_midi_read+0x428>)
    1db0:	ldr	r3, [r3, #0]
    1db2:	cmp	r3, #0
    1db4:	bne.w	1c8c <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    1db8:	ldr	r3, [pc, #192]	; (1e7c <usb_midi_read+0x420>)
    1dba:	ldr	r3, [r3, #0]
    1dbc:	cmp	r3, #0
    1dbe:	beq.n	1cd6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    1dc0:	movs	r0, #248	; 0xf8
    1dc2:	blx	r3
    1dc4:	ubfx	r6, r4, #16, #8
    1dc8:	b.n	1c92 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    1dca:	cmp	r3, #14
    1dcc:	bne.w	1adc <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    1dd0:	ldr	r2, [pc, #180]	; (1e88 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1dd2:	ldr	r3, [pc, #184]	; (1e8c <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    1dd4:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1dd6:	movs	r1, #224	; 0xe0
    1dd8:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    1dda:	cmp	r2, #0
    1ddc:	beq.n	1e6e <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    1dde:	lsrs	r6, r4, #16
    1de0:	lsrs	r1, r4, #17
    1de2:	and.w	r3, r6, #127	; 0x7f
    1de6:	and.w	r1, r1, #16256	; 0x3f80
    1dea:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    1dec:	uxtb	r5, r5
    1dee:	sub.w	r1, r1, #8192	; 0x2000
    1df2:	mov	r0, r5
    1df4:	blx	r2
    1df6:	uxtb	r6, r6
    1df8:	lsrs	r4, r4, #24
    1dfa:	b.n	1c70 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    1dfc:	bl	194c <sysex_byte>
		sysex_byte(n >> 16);
    1e00:	ubfx	r0, r4, #16, #8
    1e04:	bl	194c <sysex_byte>
		sysex_byte(n >> 24);
    1e08:	lsrs	r0, r4, #24
    1e0a:	bl	194c <sysex_byte>
		return 0;
    1e0e:	movs	r0, #0
    1e10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1e14:	ldr	r3, [pc, #120]	; (1e90 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1e16:	ldr	r2, [pc, #116]	; (1e8c <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    1e18:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1e1a:	movs	r1, #128	; 0x80
    1e1c:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1e1e:	uxtb	r5, r5
    1e20:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1e24:	cbz	r3, 1e48 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1e26:	mov	r1, r6
    1e28:	mov	r0, r5
    1e2a:	mov	r2, r7
    1e2c:	blx	r3
    1e2e:	mov	r4, r7
    1e30:	b.n	1c70 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1e32:	movs	r0, #1
    1e34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    1e38:	ldr	r3, [pc, #64]	; (1e7c <usb_midi_read+0x420>)
    1e3a:	ldr	r3, [r3, #0]
    1e3c:	cmp	r3, #0
    1e3e:	beq.w	1cd6 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    1e42:	movs	r0, #255	; 0xff
    1e44:	blx	r3
    1e46:	b.n	1cd6 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1e48:	mov	r4, r3
    1e4a:	b.n	1c70 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    1e4c:	cmp	r6, #13
    1e4e:	bne.n	1dca <usb_midi_read+0x36e>
    1e50:	cmp	r3, #13
    1e52:	bne.w	1adc <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1e56:	ldr	r3, [pc, #60]	; (1e94 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1e58:	ldr	r2, [pc, #48]	; (1e8c <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    1e5a:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1e5c:	movs	r1, #208	; 0xd0
    1e5e:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1e60:	uxtb	r5, r5
    1e62:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1e66:	cmp	r3, #0
    1e68:	bne.w	1c68 <usb_midi_read+0x20c>
    1e6c:	b.n	1df8 <usb_midi_read+0x39c>
    1e6e:	ubfx	r6, r4, #16, #8
    1e72:	uxtb	r5, r5
    1e74:	lsrs	r4, r4, #24
    1e76:	b.n	1c70 <usb_midi_read+0x214>
    1e78:	.word	0x1fff183c
    1e7c:	.word	0x1fff1818
    1e80:	.word	0x1fff181c
    1e84:	.word	0x1fff180c
    1e88:	.word	0x1fff1828
    1e8c:	.word	0x1fff1cc4
    1e90:	.word	0x1fff1860
    1e94:	.word	0x1fff1838

00001e98 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    1e98:	cpsid	i
	avail = usb_buffer_available;
    1e9a:	ldr	r0, [pc, #52]	; (1ed0 <usb_malloc+0x38>)
    1e9c:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    1e9e:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    1ea2:	cmp	r3, #29
    1ea4:	bgt.n	1ec8 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    1ea6:	mov.w	r1, #2147483648	; 0x80000000
    1eaa:	lsrs	r1, r3
    1eac:	bic.w	r2, r2, r1
    1eb0:	str	r2, [r0, #0]
	__enable_irq();
    1eb2:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    1eb4:	ldr	r0, [pc, #28]	; (1ed4 <usb_malloc+0x3c>)
    1eb6:	add.w	r3, r3, r3, lsl #3
    1eba:	lsls	r3, r3, #3
    1ebc:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    1ebe:	movs	r1, #0
    1ec0:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    1ec2:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    1ec4:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    1ec6:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    1ec8:	cpsie	i
		return NULL;
    1eca:	movs	r0, #0
    1ecc:	bx	lr
    1ece:	nop
    1ed0:	.word	0x1fff0c58
    1ed4:	.word	0x1fff03d0

00001ed8 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    1ed8:	ldr	r3, [pc, #52]	; (1f10 <usb_free+0x38>)
    1eda:	ldr	r2, [pc, #56]	; (1f14 <usb_free+0x3c>)
    1edc:	subs	r3, r0, r3
    1ede:	umull	r2, r3, r2, r3
    1ee2:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    1ee4:	cmp	r3, #29
    1ee6:	bhi.n	1f02 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1ee8:	ldr	r2, [pc, #44]	; (1f18 <usb_free+0x40>)
    1eea:	ldrb	r2, [r2, #0]
    1eec:	cbnz	r2, 1f04 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    1eee:	cpsid	i
	usb_buffer_available |= mask;
    1ef0:	ldr	r0, [pc, #40]	; (1f1c <usb_free+0x44>)
    1ef2:	mov.w	r1, #2147483648	; 0x80000000
    1ef6:	ldr	r2, [r0, #0]
    1ef8:	lsr.w	r3, r1, r3
    1efc:	orrs	r2, r3
    1efe:	str	r2, [r0, #0]
	__enable_irq();
    1f00:	cpsie	i
    1f02:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1f04:	ldr	r2, [pc, #24]	; (1f20 <usb_free+0x48>)
    1f06:	ldrb	r2, [r2, #0]
    1f08:	cmp	r2, #0
    1f0a:	beq.n	1eee <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    1f0c:	b.w	1f8c <usb_rx_memory>
    1f10:	.word	0x1fff03d0
    1f14:	.word	0x38e38e39
    1f18:	.word	0x1fff1951
    1f1c:	.word	0x1fff0c58
    1f20:	.word	0x1fff195c

00001f24 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    1f24:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    1f26:	cmp	r3, #4
    1f28:	bhi.n	1f54 <usb_rx+0x30>
	__disable_irq();
    1f2a:	cpsid	i
	ret = rx_first[endpoint];
    1f2c:	ldr	r1, [pc, #40]	; (1f58 <usb_rx+0x34>)
    1f2e:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    1f32:	cbz	r0, 1f50 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    1f34:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    1f36:	ldr	r4, [pc, #36]	; (1f5c <usb_rx+0x38>)
    1f38:	ldrh	r5, [r0, #0]
    1f3a:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    1f3e:	ldr	r6, [r0, #4]
    1f40:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    1f44:	subs	r2, r2, r5
    1f46:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    1f4a:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1f4c:	pop	{r4, r5, r6}
    1f4e:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    1f50:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    1f52:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    1f54:	movs	r0, #0
    1f56:	bx	lr
    1f58:	.word	0x1fff18c8
    1f5c:	.word	0x1fff1df0

00001f60 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    1f60:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1f62:	cmp	r0, #4
    1f64:	bhi.n	1f7e <usb_tx_packet_count+0x1e>
	__disable_irq();
    1f66:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    1f68:	ldr	r3, [pc, #28]	; (1f88 <usb_tx_packet_count+0x28>)
    1f6a:	ldr.w	r3, [r3, r0, lsl #2]
    1f6e:	cbz	r3, 1f82 <usb_tx_packet_count+0x22>
    1f70:	movs	r0, #0
    1f72:	ldr	r3, [r3, #4]
    1f74:	adds	r0, #1
    1f76:	cmp	r3, #0
    1f78:	bne.n	1f72 <usb_tx_packet_count+0x12>
	__enable_irq();
    1f7a:	cpsie	i
	return count;
    1f7c:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    1f7e:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    1f80:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    1f82:	mov	r0, r3
    1f84:	b.n	1f7a <usb_tx_packet_count+0x1a>
    1f86:	nop
    1f88:	.word	0x1fff1920

00001f8c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    1f8c:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    1f8e:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1f90:	ldr	r2, [pc, #204]	; (2060 <usb_rx_memory+0xd4>)
    1f92:	ldrb	r3, [r2, #0]
    1f94:	lsls	r3, r3, #28
    1f96:	bpl.n	1fa6 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1f98:	ldr	r3, [pc, #200]	; (2064 <usb_rx_memory+0xd8>)
    1f9a:	ldr	r1, [r3, #32]
    1f9c:	cmp	r1, #0
    1f9e:	beq.n	2028 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1fa0:	ldr	r1, [r3, #40]	; 0x28
    1fa2:	cmp	r1, #0
    1fa4:	beq.n	2044 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1fa6:	ldrb	r3, [r2, #1]
    1fa8:	lsls	r5, r3, #28
    1faa:	bpl.n	1fba <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1fac:	ldr	r3, [pc, #180]	; (2064 <usb_rx_memory+0xd8>)
    1fae:	ldr	r1, [r3, #64]	; 0x40
    1fb0:	cmp	r1, #0
    1fb2:	beq.n	2050 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1fb4:	ldr	r1, [r3, #72]	; 0x48
    1fb6:	cmp	r1, #0
    1fb8:	beq.n	2048 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1fba:	ldrb	r3, [r2, #2]
    1fbc:	lsls	r4, r3, #28
    1fbe:	bpl.n	1fce <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1fc0:	ldr	r3, [pc, #160]	; (2064 <usb_rx_memory+0xd8>)
    1fc2:	ldr	r1, [r3, #96]	; 0x60
    1fc4:	cmp	r1, #0
    1fc6:	beq.n	2054 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1fc8:	ldr	r1, [r3, #104]	; 0x68
    1fca:	cmp	r1, #0
    1fcc:	beq.n	204c <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1fce:	ldrb	r3, [r2, #3]
    1fd0:	lsls	r1, r3, #28
    1fd2:	bpl.n	1fe4 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1fd4:	ldr	r3, [pc, #140]	; (2064 <usb_rx_memory+0xd8>)
    1fd6:	ldr.w	r1, [r3, #128]	; 0x80
    1fda:	cmp	r1, #0
    1fdc:	beq.n	205c <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1fde:	ldr.w	r1, [r3, #136]	; 0x88
    1fe2:	cbz	r1, 200a <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    1fe4:	ldrb	r3, [r2, #4]
    1fe6:	lsls	r3, r3, #28
    1fe8:	bpl.n	1ffc <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    1fea:	ldr	r3, [pc, #120]	; (2064 <usb_rx_memory+0xd8>)
    1fec:	ldr.w	r2, [r3, #160]	; 0xa0
    1ff0:	cmp	r2, #0
    1ff2:	beq.n	2058 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    1ff4:	ldr.w	r2, [r3, #168]	; 0xa8
    1ff8:	movs	r4, #21
    1ffa:	cbz	r2, 200c <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    1ffc:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    1ffe:	ldr	r3, [pc, #104]	; (2068 <usb_rx_memory+0xdc>)
    2000:	movs	r2, #0
    2002:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2004:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2006:	b.w	1ed8 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    200a:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    200c:	ldr	r1, [pc, #88]	; (2068 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    200e:	ldr	r5, [pc, #92]	; (206c <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    2010:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2012:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2016:	add.w	r3, r3, r4, lsl #3
    201a:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    201c:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    201e:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2020:	strb	r2, [r1, #0]
				__enable_irq();
    2022:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2024:	pop	{r4, r5}
    2026:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2028:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    202a:	ldr	r4, [pc, #60]	; (2068 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    202c:	ldr	r5, [pc, #64]	; (2070 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    202e:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2030:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2034:	add.w	r3, r3, r2, lsl #3
    2038:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    203a:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    203c:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    203e:	strb	r2, [r4, #0]
				__enable_irq();
    2040:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2042:	b.n	2024 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2044:	movs	r4, #5
    2046:	b.n	200c <usb_rx_memory+0x80>
    2048:	movs	r4, #9
    204a:	b.n	200c <usb_rx_memory+0x80>
    204c:	movs	r4, #13
    204e:	b.n	200c <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2050:	movs	r2, #8
    2052:	b.n	202a <usb_rx_memory+0x9e>
    2054:	movs	r2, #12
    2056:	b.n	202a <usb_rx_memory+0x9e>
    2058:	movs	r2, #20
    205a:	b.n	202a <usb_rx_memory+0x9e>
    205c:	movs	r2, #16
    205e:	b.n	202a <usb_rx_memory+0x9e>
    2060:	.word	0x000042fc
    2064:	.word	0x1fff0000
    2068:	.word	0x1fff1951
    206c:	.word	0x004000c8
    2070:	.word	0x00400088

00002074 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2074:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2076:	cmp	r3, #4
    2078:	bhi.n	20b6 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    207a:	ldr	r2, [pc, #108]	; (20e8 <usb_tx+0x74>)
    207c:	lsls	r0, r0, #5
    207e:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2082:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2084:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    2086:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    2088:	ldr	r4, [pc, #96]	; (20ec <usb_tx+0x78>)
    208a:	ldrb	r2, [r4, r3]
    208c:	cmp	r2, #3
    208e:	bhi.n	20c8 <usb_tx+0x54>
    2090:	tbb	[pc, r2]
    2094:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    2098:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    209a:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    209c:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    209e:	tst.w	r0, #8
    20a2:	ite	ne
    20a4:	movne	r3, #200	; 0xc8
    20a6:	moveq	r3, #136	; 0x88
    20a8:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    20ac:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    20ae:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    20b0:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    20b2:	cpsie	i
}
    20b4:	pop	{r4, r5}
    20b6:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    20b8:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    20ba:	movs	r2, #2
		break;
    20bc:	b.n	209a <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    20be:	movs	r2, #5
    20c0:	b.n	209a <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    20c2:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    20c4:	movs	r2, #4
		break;
    20c6:	b.n	209a <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    20c8:	ldr	r2, [pc, #36]	; (20f0 <usb_tx+0x7c>)
    20ca:	ldr.w	r0, [r2, r3, lsl #2]
    20ce:	cbz	r0, 20e0 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    20d0:	ldr	r2, [pc, #32]	; (20f4 <usb_tx+0x80>)
    20d2:	ldr.w	r0, [r2, r3, lsl #2]
    20d6:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    20d8:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    20dc:	cpsie	i
		return;
    20de:	b.n	20b4 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    20e0:	str.w	r1, [r2, r3, lsl #2]
    20e4:	ldr	r2, [pc, #12]	; (20f4 <usb_tx+0x80>)
    20e6:	b.n	20d8 <usb_tx+0x64>
    20e8:	.word	0x1fff0000
    20ec:	.word	0x1fff1960
    20f0:	.word	0x1fff1920
    20f4:	.word	0x1fff1934

000020f8 <usb_isr>:
}



void usb_isr(void)
{
    20f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    20fc:	ldr.w	fp, [pc, #776]	; 2408 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2100:	ldr.w	sl, [pc, #776]	; 240c <usb_isr+0x314>
}



void usb_isr(void)
{
    2104:	sub	sp, #28
    2106:	b.n	2192 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2108:	ldr	r7, [pc, #680]	; (23b4 <usb_isr+0x2bc>)
    210a:	mov.w	r8, r3, lsr #2
    210e:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2112:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2114:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2118:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    211c:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    211e:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2122:	and.w	r4, r3, #255	; 0xff
    2126:	cmp	r3, #0
    2128:	bne.w	232c <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    212c:	ldr.w	r3, [r7, r8, lsl #3]
    2130:	lsrs	r3, r3, #16
    2132:	uxth	r1, r3
    2134:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2138:	cmp	r3, #0
    213a:	beq.w	231a <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    213e:	ldr	r3, [pc, #632]	; (23b8 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2140:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2144:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2148:	ldr.w	r2, [r3, r6, lsl #2]
    214c:	cmp	r2, #0
    214e:	beq.w	25bc <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2152:	ldr	r5, [pc, #616]	; (23bc <usb_isr+0x2c4>)
    2154:	ldr.w	r3, [r5, r6, lsl #2]
    2158:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    215a:	ldr	r4, [pc, #612]	; (23c0 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    215c:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2160:	ldrh.w	r3, [r4, r6, lsl #1]
    2164:	add	r1, r3
    2166:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    216a:	bl	1e98 <usb_malloc>
					if (packet) {
    216e:	cmp	r0, #0
    2170:	beq.w	25ae <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2174:	ldr	r2, [pc, #588]	; (23c4 <usb_isr+0x2cc>)
    2176:	ldr	r3, [pc, #592]	; (23c8 <usb_isr+0x2d0>)
    2178:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    217c:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2180:	it	ne
    2182:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2184:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2188:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    218c:	movs	r3, #8
    218e:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2192:	ldrb.w	r4, [fp]
    2196:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2198:	lsls	r0, r4, #29
    219a:	bpl.n	21d6 <usb_isr+0xde>
		if (usb_configuration) {
    219c:	ldr	r3, [pc, #556]	; (23cc <usb_isr+0x2d4>)
    219e:	ldrb	r3, [r3, #0]
    21a0:	cbz	r3, 21d0 <usb_isr+0xd8>
			t = usb_reboot_timer;
    21a2:	ldr	r1, [pc, #556]	; (23d0 <usb_isr+0x2d8>)
    21a4:	ldrb	r2, [r1, #0]
			if (t) {
    21a6:	and.w	r3, r2, #255	; 0xff
    21aa:	cbz	r2, 21b6 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    21ac:	subs	r3, #1
    21ae:	uxtb	r3, r3
    21b0:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    21b2:	cbnz	r3, 21b6 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    21b4:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    21b6:	ldr	r1, [pc, #540]	; (23d4 <usb_isr+0x2dc>)
    21b8:	ldrb	r2, [r1, #0]
			if (t) {
    21ba:	and.w	r3, r2, #255	; 0xff
    21be:	cbz	r2, 21cc <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    21c0:	subs	r3, #1
    21c2:	uxtb	r3, r3
    21c4:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    21c6:	cmp	r3, #0
    21c8:	beq.w	255a <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    21cc:	bl	1a30 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    21d0:	movs	r3, #4
    21d2:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    21d6:	and.w	r3, r4, #8
    21da:	and.w	r2, r3, #255	; 0xff
    21de:	cmp	r3, #0
    21e0:	beq.w	2374 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    21e4:	ldrb.w	r3, [sl]
    21e8:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    21ea:	lsrs	r6, r3, #4
    21ec:	bne.n	2108 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    21ee:	lsrs	r4, r3, #2
    21f0:	ldr.w	r9, [pc, #448]	; 23b4 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    21f4:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    21f8:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    21fc:	ubfx	r2, r2, #2, #4
    2200:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2202:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2204:	cmp	r2, #12
    2206:	bhi.w	2312 <usb_isr+0x21a>
    220a:	tbb	[pc, r2]
    220e:	.short	0x7878
    2210:	.word	0x82828282
    2214:	.word	0x82438282
    2218:	.short	0x8282
    221a:	.byte	0x07
    221b:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    221c:	ldr	r0, [r1, #0]
    221e:	ldr	r5, [pc, #440]	; (23d8 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2220:	ldr	r3, [pc, #416]	; (23c4 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2222:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2224:	ldr	r7, [pc, #436]	; (23dc <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2226:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    222a:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    222c:	ldr	r6, [pc, #432]	; (23e0 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    222e:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2230:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2234:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2236:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2238:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    223a:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    223e:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2240:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2244:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2248:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    224a:	bhi.w	2410 <usb_isr+0x318>
    224e:	cmp.w	r1, #1664	; 0x680
    2252:	bcs.w	287c <usb_isr+0x784>
    2256:	cmp.w	r1, #258	; 0x102
    225a:	beq.w	262a <usb_isr+0x532>
    225e:	bhi.w	25f4 <usb_isr+0x4fc>
    2262:	cmp	r1, #128	; 0x80
    2264:	beq.w	28b0 <usb_isr+0x7b8>
    2268:	cmp	r1, #130	; 0x82
    226a:	bne.w	2636 <usb_isr+0x53e>
    226e:	ldrh	r1, [r5, #4]
    2270:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2274:	cmp	r1, #5
    2276:	bhi.w	2636 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    227a:	ldr	r3, [pc, #360]	; (23e4 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    227c:	ldr	r4, [pc, #360]	; (23e8 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    227e:	lsls	r1, r1, #2
    2280:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2282:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2284:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2286:	ldrb	r2, [r3, #0]
    2288:	lsls	r3, r2, #30
    228a:	bpl.w	29c0 <usb_isr+0x8c8>
    228e:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    2290:	movs	r0, #2
    2292:	b.n	26be <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2294:	ldr	r7, [pc, #324]	; (23dc <usb_isr+0x2e4>)
    2296:	ldr	r2, [r7, #0]
		if (data) {
    2298:	cbz	r2, 22e8 <usb_isr+0x1f0>
			size = ep0_tx_len;
    229a:	ldr	r3, [pc, #336]	; (23ec <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    229c:	ldr	r6, [pc, #320]	; (23e0 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    229e:	ldr	r1, [pc, #336]	; (23f0 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    22a0:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22a2:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    22a4:	ldrb	r5, [r1, #0]
    22a6:	cmp	r0, #64	; 0x40
    22a8:	mov	lr, r0
    22aa:	orr.w	r8, r5, #2
    22ae:	it	cs
    22b0:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22b4:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    22b6:	eor.w	r4, r4, #1
    22ba:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    22bc:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22c0:	ite	eq
    22c2:	moveq	r4, #136	; 0x88
    22c4:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    22c6:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    22ca:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    22cc:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22d0:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    22d4:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    22d6:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    22d8:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    22dc:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    22de:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    22e0:	cmp	r0, #0
    22e2:	beq.w	2452 <usb_isr+0x35a>
    22e6:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    22e8:	ldr	r3, [pc, #236]	; (23d8 <usb_isr+0x2e0>)
    22ea:	ldrh	r2, [r3, #0]
    22ec:	cmp.w	r2, #1280	; 0x500
    22f0:	bne.n	2312 <usb_isr+0x21a>
			setup.bRequest = 0;
    22f2:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    22f4:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    22f6:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    22f8:	ldr	r3, [pc, #248]	; (23f4 <usb_isr+0x2fc>)
    22fa:	strb	r2, [r3, #0]
    22fc:	b.n	2312 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    22fe:	ldr	r2, [pc, #216]	; (23d8 <usb_isr+0x2e0>)
    2300:	ldrh	r0, [r2, #0]
    2302:	movw	r2, #8225	; 0x2021
    2306:	cmp	r0, r2
    2308:	beq.w	245c <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    230c:	ldr	r2, [pc, #180]	; (23c4 <usb_isr+0x2cc>)
    230e:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2312:	ldr	r2, [pc, #228]	; (23f8 <usb_isr+0x300>)
    2314:	movs	r3, #1
    2316:	strb	r3, [r2, #0]
    2318:	b.n	218c <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    231a:	ldr	r2, [pc, #168]	; (23c4 <usb_isr+0x2cc>)
    231c:	ldr	r3, [pc, #168]	; (23c8 <usb_isr+0x2d0>)
    231e:	tst.w	r9, #8
    2322:	it	ne
    2324:	movne	r3, r2
    2326:	str.w	r3, [r7, r8, lsl #3]
    232a:	b.n	218c <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    232c:	bl	1ed8 <usb_free>
				packet = tx_first[endpoint];
    2330:	ldr	r2, [pc, #200]	; (23fc <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2332:	ldr	r1, [pc, #204]	; (2400 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2334:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2338:	cmp	r3, #0
    233a:	beq.w	25c4 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    233e:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2340:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2342:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    2346:	add.w	r2, r3, #8
    234a:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    234e:	cmp	r4, #3
    2350:	bhi.n	235e <usb_isr+0x266>
    2352:	tbb	[pc, r4]
    2356:	.short	0x022c
    2358:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    235a:	movs	r2, #2
    235c:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    235e:	ldrh	r2, [r3, #0]
    2360:	tst.w	r9, #8
    2364:	ite	eq
    2366:	moveq	r3, #136	; 0x88
    2368:	movne	r3, #200	; 0xc8
    236a:	orr.w	r3, r3, r2, lsl #16
    236e:	str.w	r3, [r7, r8, lsl #3]
    2372:	b.n	218c <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2374:	lsls	r0, r4, #31
    2376:	bmi.w	2560 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    237a:	lsls	r1, r4, #24
    237c:	bmi.w	25e0 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2380:	lsls	r2, r4, #30
    2382:	bpl.n	2392 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2384:	ldr	r2, [pc, #124]	; (2404 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2386:	ldr	r1, [pc, #128]	; (2408 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2388:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    238a:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    238c:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    238e:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2390:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2392:	lsls	r3, r4, #27
    2394:	bpl.n	239c <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2396:	ldr	r3, [pc, #112]	; (2408 <usb_isr+0x310>)
    2398:	movs	r2, #16
    239a:	strb	r2, [r3, #0]
	}

}
    239c:	add	sp, #28
    239e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    23a2:	movs	r2, #4
    23a4:	strb	r2, [r1, r6]
						break;
    23a6:	b.n	235e <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    23a8:	movs	r2, #5
    23aa:	strb	r2, [r1, r6]
						break;
    23ac:	b.n	235e <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    23ae:	movs	r2, #3
    23b0:	strb	r2, [r1, r6]
						break;
    23b2:	b.n	235e <usb_isr+0x266>
    23b4:	.word	0x1fff0000
    23b8:	.word	0x1fff18c8
    23bc:	.word	0x1fff1870
    23c0:	.word	0x1fff1df0
    23c4:	.word	0x004000c8
    23c8:	.word	0x00400088
    23cc:	.word	0x1fff195c
    23d0:	.word	0x1fff18dd
    23d4:	.word	0x1fff17f0
    23d8:	.word	0x1fff1948
    23dc:	.word	0x1fff186c
    23e0:	.word	0x1fff18dc
    23e4:	.word	0x400720c0
    23e8:	.word	0x1fff1954
    23ec:	.word	0x1fff1884
    23f0:	.word	0x1fff1950
    23f4:	.word	0x40072098
    23f8:	.word	0x40072094
    23fc:	.word	0x1fff1920
    2400:	.word	0x1fff1960
    2404:	.word	0x40072088
    2408:	.word	0x40072080
    240c:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2410:	movw	r4, #8225	; 0x2021
    2414:	cmp	r1, r4
    2416:	beq.w	2552 <usb_isr+0x45a>
    241a:	bhi.n	24b0 <usb_isr+0x3b8>
    241c:	cmp.w	r1, #2176	; 0x880
    2420:	beq.w	26b6 <usb_isr+0x5be>
    2424:	cmp.w	r1, #2304	; 0x900
    2428:	bne.w	2636 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    242c:	ldr	r2, [pc, #712]	; (26f8 <usb_isr+0x600>)
    242e:	ldr	r4, [pc, #716]	; (26fc <usb_isr+0x604>)
    2430:	ldrb	r1, [r5, #2]
    2432:	strb	r1, [r2, #0]
    2434:	add.w	r5, r4, #160	; 0xa0
    2438:	b.n	2442 <usb_isr+0x34a>
    243a:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    243c:	cmp	r5, r4
    243e:	beq.w	2754 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    2442:	ldr	r3, [r4, #32]
    2444:	lsls	r1, r3, #24
    2446:	bpl.n	243a <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2448:	ldr	r0, [r4, #36]	; 0x24
    244a:	subs	r0, #8
    244c:	bl	1ed8 <usb_free>
    2450:	b.n	243a <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2452:	cmp.w	lr, #64	; 0x40
    2456:	it	ne
    2458:	movne	r2, #0
    245a:	b.n	22e6 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    245c:	ldr	r2, [pc, #672]	; (2700 <usb_isr+0x608>)
    245e:	ldrb	r5, [r1, #0]
    2460:	ldrb	r0, [r1, #1]
    2462:	strb	r5, [r2, #0]
    2464:	strb	r0, [r2, #1]
    2466:	ldrb	r5, [r1, #2]
    2468:	ldrb	r0, [r1, #3]
    246a:	strb	r5, [r2, #2]
    246c:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    246e:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2470:	ldrb	r5, [r1, #4]
    2472:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2474:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2476:	ldrb	r5, [r1, #5]
    2478:	ldrb	r1, [r1, #6]
    247a:	strb	r5, [r2, #5]
    247c:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    247e:	beq.w	26ae <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2482:	ldr	r1, [pc, #640]	; (2704 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2484:	ldr	r6, [pc, #640]	; (2708 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2486:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2488:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    248a:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    248e:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2490:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2494:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2496:	ite	eq
    2498:	moveq	r1, #136	; 0x88
    249a:	movne	r1, #200	; 0xc8
    249c:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    24a0:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    24a4:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    24a8:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    24aa:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    24ac:	str	r1, [r2, #4]
    24ae:	b.n	230c <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    24b0:	movw	r4, #8737	; 0x2221
    24b4:	cmp	r1, r4
    24b6:	bne.w	28ca <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    24ba:	ldr.w	ip, [pc, #656]	; 274c <usb_isr+0x654>
    24be:	ldr	r3, [pc, #588]	; (270c <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    24c0:	ldr	r1, [pc, #588]	; (2710 <usb_isr+0x618>)
    24c2:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    24c4:	ldr.w	r5, [ip]
    24c8:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    24ca:	str	r0, [sp, #4]
    24cc:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    24ce:	movs	r0, #0
    24d0:	str	r0, [sp, #8]
    24d2:	mov	r8, r0
    24d4:	mov	ip, r0
    24d6:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    24d8:	ldr	r1, [pc, #552]	; (2704 <usb_isr+0x60c>)
    24da:	ldrb	r5, [r1, #0]
    24dc:	orr.w	lr, r5, #2
    24e0:	add.w	r3, r9, lr, lsl #3
    24e4:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    24e6:	ldr	r3, [sp, #4]
    24e8:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    24ea:	ldr	r3, [sp, #12]
    24ec:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    24ee:	ite	eq
    24f0:	moveq	r4, #136	; 0x88
    24f2:	movne	r4, #200	; 0xc8
    24f4:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    24f8:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    24fc:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    2500:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2502:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2504:	ldr.w	lr, [pc, #500]	; 26fc <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    2508:	ldr	r3, [pc, #508]	; (2708 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    250a:	ldr.w	r8, [pc, #504]	; 2704 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    250e:	cmp	r0, #0
    2510:	bne.w	2644 <usb_isr+0x54c>
    2514:	cmp.w	ip, #64	; 0x40
    2518:	bne.n	2552 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    251a:	orr.w	ip, r4, #2
    251e:	add.w	r3, r9, ip, lsl #3
    2522:	ldr	r4, [sp, #8]
    2524:	ldr.w	lr, [pc, #468]	; 26fc <usb_isr+0x604>
    2528:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    252a:	cmp	r2, #0
    252c:	bne.w	2670 <usb_isr+0x578>
    2530:	lsls	r2, r0, #16
    2532:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    2536:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    253a:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    253e:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2540:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2542:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2544:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2546:	cmp	r0, #64	; 0x40
    2548:	bne.n	2552 <usb_isr+0x45a>
    254a:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    254c:	ldr	r2, [pc, #452]	; (2714 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    254e:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    2550:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2552:	ldr	r2, [pc, #452]	; (2718 <usb_isr+0x620>)
    2554:	movs	r3, #1
    2556:	strb	r3, [r2, #0]
    2558:	b.n	2312 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    255a:	bl	12b8 <usb_serial_flush_callback>
    255e:	b.n	21cc <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2560:	ldr	r3, [pc, #408]	; (26fc <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2562:	ldr	r0, [pc, #436]	; (2718 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    2564:	ldr	r1, [pc, #412]	; (2704 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    2566:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2568:	mov.w	lr, #2
    256c:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2570:	ldr	r7, [pc, #424]	; (271c <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    2572:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2574:	ldr	r1, [pc, #424]	; (2720 <usb_isr+0x628>)
    2576:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    2578:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    257a:	ldr	r6, [pc, #424]	; (2724 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    257c:	ldr	r5, [pc, #424]	; (2728 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    257e:	ldr	r4, [pc, #428]	; (272c <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    2580:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2582:	movs	r1, #13
    2584:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2586:	movs	r1, #255	; 0xff
    2588:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    258a:	ldr.w	lr, [pc, #452]	; 2750 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    258e:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2590:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2592:	ldr	r5, [pc, #412]	; (2730 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2594:	ldr	r2, [pc, #412]	; (2734 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2596:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    259a:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    259c:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    259e:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    25a2:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    25a4:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    25a6:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    25a8:	add	sp, #28
    25aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    25ae:	ldr	r2, [pc, #392]	; (2738 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    25b0:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    25b4:	ldrb	r3, [r2, #0]
    25b6:	adds	r3, #1
    25b8:	strb	r3, [r2, #0]
    25ba:	b.n	218c <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    25bc:	str.w	r0, [r3, r6, lsl #2]
    25c0:	ldr	r5, [pc, #376]	; (273c <usb_isr+0x644>)
    25c2:	b.n	215a <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    25c4:	ldrb	r3, [r1, r6]
    25c6:	cmp	r3, #3
    25c8:	bhi.n	26a0 <usb_isr+0x5a8>
    25ca:	add	r2, pc, #4	; (adr r2, 25d0 <usb_isr+0x4d8>)
    25cc:	ldr.w	pc, [r2, r3, lsl #2]
    25d0:	.word	0x0000218d
    25d4:	.word	0x0000218d
    25d8:	.word	0x00002625
    25dc:	.word	0x0000261f
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    25e0:	ldr	r1, [pc, #312]	; (271c <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    25e2:	ldr	r3, [pc, #324]	; (2728 <usb_isr+0x630>)
    25e4:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    25e6:	movs	r0, #13
    25e8:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    25ea:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    25ec:	lsls	r2, r4, #30
    25ee:	bpl.w	2392 <usb_isr+0x29a>
    25f2:	b.n	2384 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    25f4:	movw	r2, #770	; 0x302
    25f8:	cmp	r1, r2
    25fa:	bne.w	28ba <usb_isr+0x7c2>
    25fe:	ldrh	r1, [r5, #4]
    2600:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2604:	cmp	r1, #5
    2606:	bhi.n	2636 <usb_isr+0x53e>
    2608:	ldrh	r2, [r5, #2]
    260a:	cbnz	r2, 2636 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    260c:	ldr	r4, [pc, #268]	; (271c <usb_isr+0x624>)
    260e:	str	r0, [sp, #4]
    2610:	lsls	r1, r1, #2
    2612:	add	r4, r1
    2614:	ldrb	r1, [r4, #0]
    2616:	orr.w	r1, r1, #2
    261a:	strb	r1, [r4, #0]
    261c:	b.n	24ce <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    261e:	movs	r3, #1
    2620:	strb	r3, [r1, r6]
						break;
    2622:	b.n	218c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2624:	movs	r3, #0
    2626:	strb	r3, [r1, r6]
						break;
    2628:	b.n	218c <usb_isr+0x94>
    262a:	ldrh	r1, [r5, #4]
    262c:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2630:	cmp	r1, #5
    2632:	bls.w	28d4 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2636:	ldr	r2, [pc, #228]	; (271c <usb_isr+0x624>)
    2638:	movs	r3, #15
    263a:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    263c:	ldr	r2, [pc, #216]	; (2718 <usb_isr+0x620>)
    263e:	movs	r3, #1
    2640:	strb	r3, [r2, #0]
    2642:	b.n	2312 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2644:	cmp	r0, #64	; 0x40
    2646:	bls.w	251a <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    264a:	orr.w	r4, r4, #2
    264e:	add.w	r1, lr, r4, lsl #3
    2652:	ldr	r6, [sp, #8]
    2654:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2656:	cbz	r2, 2688 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    2658:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    265c:	ldr	r2, [pc, #224]	; (2740 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    265e:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2660:	mov	r3, r6
    2662:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2664:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2668:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    266a:	str.w	r2, [lr, r4, lsl #3]
    266e:	b.n	254c <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    2670:	ldrb.w	r3, [sp, #4]
    2674:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2676:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2678:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    267a:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    267c:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2680:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2682:	str.w	r2, [lr, ip, lsl #3]
    2686:	b.n	2546 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    2688:	ldrb.w	r1, [sp, #4]
    268c:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    268e:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2690:	ldr	r2, [pc, #140]	; (2720 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2692:	strb.w	r5, [r8]
    2696:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2698:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    269a:	str.w	r2, [lr, r4, lsl #3]
    269e:	b.n	254c <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    26a0:	tst.w	r9, #8
    26a4:	ite	eq
    26a6:	moveq	r3, #2
    26a8:	movne	r3, #3
    26aa:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    26ac:	b.n	218c <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    26ae:	ldr	r2, [pc, #148]	; (2744 <usb_isr+0x64c>)
    26b0:	movs	r1, #15
    26b2:	strb	r1, [r2, #0]
    26b4:	b.n	2482 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    26b6:	ldr	r2, [pc, #64]	; (26f8 <usb_isr+0x600>)
    26b8:	ldr	r4, [pc, #140]	; (2748 <usb_isr+0x650>)
    26ba:	ldrb	r2, [r2, #0]
    26bc:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    26be:	ldrh	r2, [r5, #6]
    26c0:	cmp	r2, r0
    26c2:	bcs.w	2a88 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    26c6:	ldr	r1, [pc, #60]	; (2704 <usb_isr+0x60c>)
    26c8:	ldrb	r5, [r1, #0]
    26ca:	cmp	r2, #64	; 0x40
    26cc:	mov	ip, r2
    26ce:	orr.w	lr, r5, #2
    26d2:	it	cs
    26d4:	movcs.w	ip, #64	; 0x40
    26d8:	add.w	r3, r4, ip
    26dc:	add.w	r0, r9, lr, lsl #3
    26e0:	str	r3, [sp, #8]
    26e2:	movs	r3, #1
    26e4:	str	r4, [r0, #4]
    26e6:	mov.w	r8, ip, lsl #16
    26ea:	rsb	r0, ip, r2
    26ee:	str	r3, [sp, #4]
    26f0:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    26f2:	movs	r4, #200	; 0xc8
    26f4:	b.n	24f4 <usb_isr+0x3fc>
    26f6:	nop
    26f8:	.word	0x1fff195c
    26fc:	.word	0x1fff0000
    2700:	.word	0x1fff1cb8
    2704:	.word	0x1fff1950
    2708:	.word	0x1fff18dc
    270c:	.word	0x1fff1cc0
    2710:	.word	0x1fff1800
    2714:	.word	0x1fff1884
    2718:	.word	0x40072094
    271c:	.word	0x400720c0
    2720:	.word	0x00400088
    2724:	.word	0x40072088
    2728:	.word	0x40072080
    272c:	.word	0x40072098
    2730:	.word	0x1fff1888
    2734:	.word	0x1fff18e0
    2738:	.word	0x1fff1951
    273c:	.word	0x1fff1870
    2740:	.word	0x004000c8
    2744:	.word	0x1fff18dd
    2748:	.word	0x1fff1954
    274c:	.word	0x1fff1808
    2750:	.word	0x4007208c
    2754:	ldr	r4, [pc, #704]	; (2a18 <usb_isr+0x920>)
    2756:	ldr	r2, [pc, #708]	; (2a1c <usb_isr+0x924>)
    2758:	ldr	r1, [pc, #708]	; (2a20 <usb_isr+0x928>)
    275a:	ldr	r0, [pc, #712]	; (2a24 <usb_isr+0x92c>)
    275c:	ldr	r5, [pc, #712]	; (2a28 <usb_isr+0x930>)
    275e:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2760:	movs	r3, #0
    2762:	ldr	r4, [pc, #712]	; (2a2c <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2764:	str	r4, [sp, #8]
    2766:	str	r6, [sp, #20]
    2768:	str	r5, [sp, #12]
    276a:	mov	r8, r0
    276c:	mov	r4, r3
    276e:	str	r7, [sp, #16]
    2770:	mov	r6, r2
    2772:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    2774:	ldr	r0, [r6, #0]
			while (p) {
    2776:	cbz	r0, 2784 <usb_isr+0x68c>
				n = p->next;
    2778:	ldr	r7, [r0, #4]
				usb_free(p);
    277a:	bl	1ed8 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    277e:	mov	r0, r7
    2780:	cmp	r7, #0
    2782:	bne.n	2778 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    2784:	movs	r3, #0
    2786:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    2788:	ldr	r3, [sp, #12]
			p = tx_first[i];
    278a:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    278c:	mov	r2, r3
    278e:	movs	r3, #0
    2790:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    2794:	cbz	r0, 27a2 <usb_isr+0x6aa>
				n = p->next;
    2796:	ldr	r7, [r0, #4]
				usb_free(p);
    2798:	bl	1ed8 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    279c:	mov	r0, r7
    279e:	cmp	r7, #0
    27a0:	bne.n	2796 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    27a2:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    27a4:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    27a6:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    27a8:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    27aa:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    27ae:	ldr	r2, [sp, #8]
    27b0:	mov.w	r1, #0
			switch (tx_state[i]) {
    27b4:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    27b6:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    27ba:	cmp	r3, #3
    27bc:	bhi.n	27ce <usb_isr+0x6d6>
    27be:	tbb	[pc, r3]
    27c2:	.short	0x0258
    27c4:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    27c6:	ldr	r3, [sp, #4]
    27c8:	mov.w	r2, #1
    27cc:	strb	r2, [r3, #0]
    27ce:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    27d0:	adds	r4, #1
    27d2:	adds	r3, #1
    27d4:	cmp	r4, #5
    27d6:	add.w	r6, r6, #4
    27da:	add.w	r5, r5, #4
    27de:	str	r3, [sp, #4]
    27e0:	bne.n	2774 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    27e2:	ldr	r4, [pc, #588]	; (2a30 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    27e4:	ldr	r5, [pc, #588]	; (2a34 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    27e6:	ldrb	r2, [r4, #0]
			*reg = epconf;
    27e8:	ldr	r3, [pc, #588]	; (2a38 <usb_isr+0x940>)
    27ea:	ldr	r7, [sp, #16]
    27ec:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    27ee:	movs	r1, #0
    27f0:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    27f2:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    27f4:	lsls	r2, r2, #28
    27f6:	bmi.n	28ee <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    27f8:	ldrb	r2, [r4, #1]
			*reg = epconf;
    27fa:	ldr	r1, [pc, #576]	; (2a3c <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    27fc:	ldr.w	r8, [pc, #588]	; 2a4c <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2800:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2802:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2804:	mov.w	r1, #0
    2808:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    280c:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2810:	bmi.w	299a <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2814:	ldrb	r2, [r4, #2]
			*reg = epconf;
    2816:	ldr	r1, [pc, #552]	; (2a40 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2818:	ldr.w	r8, [pc, #560]	; 2a4c <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    281c:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    281e:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2820:	mov.w	r1, #0
    2824:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    2828:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    282c:	bmi.w	2972 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2830:	ldr	r1, [pc, #528]	; (2a44 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2832:	ldrb	r2, [r4, #3]
			*reg = epconf;
    2834:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2836:	movs	r1, #0
    2838:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    283c:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2840:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2842:	ldr.w	r8, [pc, #520]	; 2a4c <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2846:	bmi.n	2944 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2848:	ldrb	r2, [r4, #4]
			*reg = epconf;
    284a:	ldr	r1, [pc, #508]	; (2a48 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    284c:	ldr	r4, [pc, #508]	; (2a4c <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    284e:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2850:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2852:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2854:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    2858:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    285c:	bmi.n	291a <usb_isr+0x822>
    285e:	ldrb	r3, [r6, #0]
    2860:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2862:	movs	r1, #0
    2864:	eor.w	r2, r3, #1
    2868:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    286c:	str.w	r1, [r9, #184]	; 0xb8
    2870:	b.n	24ce <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2872:	ldr	r3, [sp, #4]
    2874:	mov.w	r2, #0
    2878:	strb	r2, [r3, #0]
    287a:	b.n	27ce <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    287c:	ldr	r2, [pc, #464]	; (2a50 <usb_isr+0x958>)
    287e:	ldr	r4, [r2, #4]
    2880:	cmp	r4, #0
    2882:	beq.w	2636 <usb_isr+0x53e>
    2886:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2888:	ldrh.w	lr, [r5, #4]
    288c:	b.n	2898 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    288e:	adds	r2, #12
			if (list->addr == NULL) break;
    2890:	ldr	r4, [r2, #4]
    2892:	cmp	r4, #0
    2894:	beq.w	2636 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2898:	ldrh	r3, [r2, #0]
    289a:	cmp	r3, r0
    289c:	bne.n	288e <usb_isr+0x796>
    289e:	ldrh	r3, [r2, #2]
    28a0:	cmp	r3, lr
    28a2:	bne.n	288e <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    28a4:	lsrs	r0, r0, #8
    28a6:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    28a8:	ite	eq
    28aa:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    28ac:	ldrhne	r0, [r2, #8]
    28ae:	b.n	26be <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    28b0:	ldr	r4, [pc, #416]	; (2a54 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    28b2:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    28b4:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    28b6:	strb	r2, [r4, #1]
    28b8:	b.n	26be <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    28ba:	cmp.w	r1, #1280	; 0x500
    28be:	bne.w	2636 <usb_isr+0x53e>
    28c2:	movs	r3, #1
    28c4:	movs	r2, #0
    28c6:	str	r3, [sp, #4]
    28c8:	b.n	24ce <usb_isr+0x3d6>
    28ca:	movw	r2, #8993	; 0x2321
    28ce:	cmp	r1, r2
    28d0:	beq.n	28c2 <usb_isr+0x7ca>
    28d2:	b.n	2636 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    28d4:	ldrh	r2, [r5, #2]
    28d6:	cmp	r2, #0
    28d8:	bne.w	2636 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    28dc:	ldr	r4, [pc, #376]	; (2a58 <usb_isr+0x960>)
    28de:	str	r0, [sp, #4]
    28e0:	lsls	r1, r1, #2
    28e2:	add	r4, r1
    28e4:	ldrb	r1, [r4, #0]
    28e6:	bic.w	r1, r1, #2
    28ea:	strb	r1, [r4, #0]
    28ec:	b.n	24ce <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    28ee:	bl	1e98 <usb_malloc>
				if (p) {
    28f2:	cmp	r0, #0
    28f4:	beq.w	2a64 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    28f8:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    28fa:	ldr	r2, [pc, #352]	; (2a5c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    28fc:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2900:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2904:	bl	1e98 <usb_malloc>
				if (p) {
    2908:	cmp	r0, #0
    290a:	beq.n	2a0c <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    290c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    290e:	ldr	r2, [pc, #336]	; (2a60 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2910:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2914:	str.w	r2, [r9, #40]	; 0x28
    2918:	b.n	27f8 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    291a:	bl	1e98 <usb_malloc>
				if (p) {
    291e:	cmp	r0, #0
    2920:	beq.n	29d0 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    2922:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2924:	ldr	r2, [pc, #308]	; (2a5c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2926:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    292a:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    292e:	bl	1e98 <usb_malloc>
				if (p) {
    2932:	cmp	r0, #0
    2934:	beq.n	29c4 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    2936:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2938:	ldr	r2, [pc, #292]	; (2a60 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    293a:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    293e:	str.w	r2, [r9, #168]	; 0xa8
    2942:	b.n	285e <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2944:	bl	1e98 <usb_malloc>
				if (p) {
    2948:	cmp	r0, #0
    294a:	beq.w	2a7c <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    294e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2950:	ldr	r2, [pc, #264]	; (2a5c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2952:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2956:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    295a:	bl	1e98 <usb_malloc>
				if (p) {
    295e:	cmp	r0, #0
    2960:	beq.w	2a70 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    2964:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2966:	ldr	r2, [pc, #248]	; (2a60 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2968:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    296c:	str.w	r2, [r9, #136]	; 0x88
    2970:	b.n	2848 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2972:	bl	1e98 <usb_malloc>
				if (p) {
    2976:	cmp	r0, #0
    2978:	beq.n	2a00 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    297a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    297c:	ldr	r2, [pc, #220]	; (2a5c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    297e:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2982:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2986:	bl	1e98 <usb_malloc>
				if (p) {
    298a:	cbz	r0, 29f4 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    298c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    298e:	ldr	r2, [pc, #208]	; (2a60 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2990:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2994:	str.w	r2, [r9, #104]	; 0x68
    2998:	b.n	2830 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    299a:	bl	1e98 <usb_malloc>
				if (p) {
    299e:	cbz	r0, 29e8 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    29a0:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    29a2:	ldr	r2, [pc, #184]	; (2a5c <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    29a4:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    29a8:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    29ac:	bl	1e98 <usb_malloc>
				if (p) {
    29b0:	cbz	r0, 29dc <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    29b2:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    29b4:	ldr	r2, [pc, #168]	; (2a60 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    29b6:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    29ba:	str.w	r2, [r9, #72]	; 0x48
    29be:	b.n	2814 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    29c0:	movs	r0, #2
    29c2:	b.n	26be <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    29c4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    29c6:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    29ca:	adds	r2, #1
    29cc:	strb	r2, [r5, #0]
    29ce:	b.n	285e <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    29d0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    29d2:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    29d6:	adds	r2, #1
    29d8:	strb	r2, [r5, #0]
    29da:	b.n	292e <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    29dc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    29de:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    29e2:	adds	r2, #1
    29e4:	strb	r2, [r5, #0]
    29e6:	b.n	2814 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    29e8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    29ea:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    29ee:	adds	r2, #1
    29f0:	strb	r2, [r5, #0]
    29f2:	b.n	29ac <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    29f4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    29f6:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    29fa:	adds	r2, #1
    29fc:	strb	r2, [r5, #0]
    29fe:	b.n	2830 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2a00:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2a02:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    2a06:	adds	r2, #1
    2a08:	strb	r2, [r5, #0]
    2a0a:	b.n	2986 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2a0c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2a0e:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    2a12:	adds	r2, #1
    2a14:	strb	r2, [r5, #0]
    2a16:	b.n	27f8 <usb_isr+0x700>
    2a18:	.word	0x1fff1960
    2a1c:	.word	0x1fff18c8
    2a20:	.word	0x1fff1920
    2a24:	.word	0x1fff1934
    2a28:	.word	0x1fff1870
    2a2c:	.word	0x1fff1df0
    2a30:	.word	0x000042fc
    2a34:	.word	0x1fff1951
    2a38:	.word	0x400720c4
    2a3c:	.word	0x400720c8
    2a40:	.word	0x400720cc
    2a44:	.word	0x400720d0
    2a48:	.word	0x400720d4
    2a4c:	.word	0x1fff0000
    2a50:	.word	0x00004304
    2a54:	.word	0x1fff1954
    2a58:	.word	0x400720c0
    2a5c:	.word	0x00400088
    2a60:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2a64:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2a66:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    2a6a:	adds	r2, #1
    2a6c:	strb	r2, [r5, #0]
    2a6e:	b.n	2904 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2a70:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2a72:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    2a76:	adds	r2, #1
    2a78:	strb	r2, [r5, #0]
    2a7a:	b.n	2848 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2a7c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2a7e:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    2a82:	adds	r2, #1
    2a84:	strb	r2, [r5, #0]
    2a86:	b.n	295a <usb_isr+0x862>
    2a88:	cmp	r0, #64	; 0x40
    2a8a:	mov	ip, r0
    2a8c:	it	cs
    2a8e:	movcs.w	ip, #64	; 0x40
    2a92:	add.w	r3, r4, ip
    2a96:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2a98:	movs	r3, #1
    2a9a:	rsb	r0, ip, r0
    2a9e:	mov.w	r8, ip, lsl #16
    2aa2:	movs	r2, #0
    2aa4:	str	r3, [sp, #4]
    2aa6:	b.n	24d8 <usb_isr+0x3e0>

00002aa8 <usb_init>:
}



void usb_init(void)
{
    2aa8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2aac:	ldr	r4, [pc, #156]	; (2b4c <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    2aae:	bl	32e8 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2ab2:	movs	r2, #0
    2ab4:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    2ab8:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2aba:	str	r2, [r3, #0]
		table[i].addr = 0;
    2abc:	str	r2, [r3, #4]
    2abe:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    2ac0:	cmp	r3, r0
		table[i].desc = 0;
    2ac2:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    2ac6:	bne.n	2aba <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2ac8:	ldr	r0, [pc, #132]	; (2b50 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    2aca:	ldr	r2, [pc, #136]	; (2b54 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2acc:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    2ace:	ldr.w	lr, [pc, #156]	; 2b6c <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    2ad2:	ldr	r6, [pc, #132]	; (2b58 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2ad4:	ldr	r5, [pc, #132]	; (2b5c <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2ad6:	ldr	r7, [pc, #136]	; (2b60 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2ad8:	ldr.w	ip, [pc, #148]	; 2b70 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    2adc:	ldr.w	r8, [pc, #148]	; 2b74 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2ae0:	orr.w	r3, r3, #262144	; 0x40000
    2ae4:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    2ae6:	ldr	r3, [r2, #0]
    2ae8:	orr.w	r3, r3, #50331648	; 0x3000000
    2aec:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    2aee:	movs	r3, #3
    2af0:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    2af4:	movs	r3, #160	; 0xa0
    2af6:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2af8:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2afc:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2b00:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2b04:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2b06:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2b08:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2b0c:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2b0e:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2b10:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2b12:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2b14:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2b16:	ldr	r5, [pc, #76]	; (2b64 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2b18:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2b1c:	ldr	r0, [pc, #72]	; (2b68 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    2b1e:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    2b22:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    2b24:	movs	r3, #1
    2b26:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2b2a:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2b2e:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2b32:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2b34:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    2b36:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2b3a:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2b3c:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2b3e:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2b42:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2b46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b4a:	nop
    2b4c:	.word	0x1fff0000
    2b50:	.word	0x40048034
    2b54:	.word	0x4000d800
    2b58:	.word	0x40072140
    2b5c:	.word	0x4007209c
    2b60:	.word	0x400720b0
    2b64:	.word	0xe000e435
    2b68:	.word	0xe000e104
    2b6c:	.word	0x40072144
    2b70:	.word	0x40072080
    2b74:	.word	0x40072088

00002b78 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2b78:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    2b7a:	ldr	r4, [pc, #176]	; (2c2c <yield+0xb4>)
    2b7c:	ldrb	r3, [r4, #0]
    2b7e:	cbz	r3, 2b82 <yield+0xa>
    2b80:	pop	{r3, r4, r5, pc}
	running = 1;
    2b82:	movs	r3, #1
    2b84:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2b86:	bl	10a4 <usb_serial_available>
	if (Serial.available()) serialEvent();
    2b8a:	cmp	r0, #0
    2b8c:	bne.n	2c14 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    2b8e:	bl	30b8 <serial_available>
	if (Serial1.available()) serialEvent1();
    2b92:	cmp	r0, #0
    2b94:	bne.n	2c0e <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    2b96:	bl	2da0 <serial2_available>
	if (Serial2.available()) serialEvent2();
    2b9a:	cmp	r0, #0
    2b9c:	bne.n	2c08 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    2b9e:	bl	33b8 <serial3_available>
	if (Serial3.available()) serialEvent3();
    2ba2:	cbnz	r0, 2c02 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    2ba4:	bl	2ecc <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2ba8:	cbnz	r0, 2bfc <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    2baa:	bl	2ca8 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2bae:	cbnz	r0, 2bf6 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    2bb0:	bl	31e4 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2bb4:	cbnz	r0, 2bf0 <yield+0x78>
#endif
	running = 0;
    2bb6:	movs	r3, #0
    2bb8:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2bba:	mrs	r3, IPSR
		if (ipsr != 0) return;
    2bbe:	cmp	r3, #0
    2bc0:	bne.n	2b80 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2bc2:	mrs	r1, PRIMASK
		__disable_irq();
    2bc6:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    2bc8:	ldr	r3, [pc, #100]	; (2c30 <yield+0xb8>)
    2bca:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    2bcc:	cbz	r0, 2c1a <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    2bce:	ldr	r4, [pc, #100]	; (2c34 <yield+0xbc>)
    2bd0:	ldrb	r2, [r4, #0]
    2bd2:	cbnz	r2, 2c1a <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    2bd4:	ldr	r5, [r0, #20]
    2bd6:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2bd8:	movs	r3, #1
    2bda:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    2bdc:	cbz	r5, 2c22 <yield+0xaa>
			firstYield->_prev = nullptr;
    2bde:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2be0:	cbnz	r1, 2be4 <yield+0x6c>
    2be2:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2be4:	movs	r5, #0
    2be6:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    2be8:	ldr	r3, [r0, #8]
    2bea:	blx	r3
		runningFromYield = false;
    2bec:	strb	r5, [r4, #0]
    2bee:	b.n	2b80 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2bf0:	bl	2ca4 <serialEvent6()>
    2bf4:	b.n	2bb6 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2bf6:	bl	2c3c <serialEvent5()>
    2bfa:	b.n	2bb0 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2bfc:	bl	2c90 <serialEvent4()>
    2c00:	b.n	2baa <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    2c02:	bl	34b4 <serialEvent3()>
    2c06:	b.n	2ba4 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    2c08:	bl	2c8c <serialEvent2()>
    2c0c:	b.n	2b9e <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    2c0e:	bl	34b0 <serialEvent1()>
    2c12:	b.n	2b96 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    2c14:	bl	2c68 <serialEvent()>
    2c18:	b.n	2b8e <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2c1a:	cmp	r1, #0
    2c1c:	bne.n	2b80 <yield+0x8>
    2c1e:	cpsie	i
    2c20:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    2c22:	ldr	r3, [pc, #20]	; (2c38 <yield+0xc0>)
    2c24:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2c26:	cmp	r1, #0
    2c28:	bne.n	2be4 <yield+0x6c>
    2c2a:	b.n	2be2 <yield+0x6a>
    2c2c:	.word	0x1fff1965
    2c30:	.word	0x1fff1c78
    2c34:	.word	0x1fff1c7c
    2c38:	.word	0x1fff1c74

00002c3c <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    2c3c:	bx	lr
    2c3e:	nop

00002c40 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    2c40:	b.w	10c0 <usb_serial_flush_input>

00002c44 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    2c44:	b.w	1074 <usb_serial_peekchar>

00002c48 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    2c48:	b.w	102c <usb_serial_getchar>

00002c4c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2c4c:	b.w	10a4 <usb_serial_available>

00002c50 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2c50:	b.w	1260 <usb_serial_flush_output>

00002c54 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2c54:	b.w	1218 <usb_serial_write_buffer_free>

00002c58 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2c58:	mov	r0, r1
    2c5a:	mov	r1, r2
    2c5c:	b.w	10f8 <usb_serial_write>

00002c60 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2c60:	mov	r0, r1
    2c62:	b.w	1200 <usb_serial_putchar>
    2c66:	nop

00002c68 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    2c68:	bx	lr
    2c6a:	nop

00002c6c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2c6c:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    2c6e:	ldr	r2, [pc, #24]	; (2c88 <Print::println()+0x1c>)
	return write(buf, 2);
    2c70:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2c72:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    2c74:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2c76:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    2c78:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2c7a:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    2c7e:	movs	r2, #2
    2c80:	blx	r3
}
    2c82:	add	sp, #12
    2c84:	ldr.w	pc, [sp], #4
    2c88:	.word	0x000042f8

00002c8c <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    2c8c:	bx	lr
    2c8e:	nop

00002c90 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    2c90:	bx	lr
    2c92:	nop

00002c94 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2c94:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    2c96:	bl	490 <setup>
	while (1) {
		loop();
    2c9a:	bl	498 <loop>
		yield();
    2c9e:	bl	2b78 <yield>
    2ca2:	b.n	2c9a <main+0x6>

00002ca4 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    2ca4:	bx	lr
    2ca6:	nop

00002ca8 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2ca8:	ldr	r2, [pc, #20]	; (2cc0 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    2caa:	ldr	r3, [pc, #24]	; (2cc4 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2cac:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2cae:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2cb0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2cb2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2cb4:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    2cb6:	it	cc
    2cb8:	addcc	r0, #64	; 0x40
    2cba:	subs	r0, r0, r3
}
    2cbc:	bx	lr
    2cbe:	nop
    2cc0:	.word	0x1fff196c
    2cc4:	.word	0x1fff196d

00002cc8 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    2cc8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    2cca:	ldr	r3, [pc, #172]	; (2d78 <uart4_status_isr+0xb0>)
    2ccc:	ldrb	r2, [r3, #4]
    2cce:	lsls	r4, r2, #26
    2cd0:	bpl.n	2d12 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2cd2:	ldr	r0, [pc, #168]	; (2d7c <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2cd4:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2cd6:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2cd8:	ldr	r1, [pc, #164]	; (2d80 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2cda:	adds	r3, #1
    2cdc:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2cde:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2ce0:	it	gt
    2ce2:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2ce4:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2ce6:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2ce8:	beq.n	2cf2 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    2cea:	ldr	r4, [pc, #152]	; (2d84 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    2cec:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2cee:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2cf0:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2cf2:	ldr	r2, [pc, #148]	; (2d88 <uart4_status_isr+0xc0>)
    2cf4:	ldr	r1, [r2, #0]
    2cf6:	cbz	r1, 2d12 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2cf8:	ldr	r2, [pc, #144]	; (2d8c <uart4_status_isr+0xc4>)
    2cfa:	ldrb	r2, [r2, #0]
    2cfc:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2cfe:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2d00:	itet	cc
    2d02:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2d06:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2d08:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2d0a:	cmp	r3, #39	; 0x27
    2d0c:	itt	gt
    2d0e:	movgt	r3, #1
    2d10:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    2d12:	ldr	r2, [pc, #100]	; (2d78 <uart4_status_isr+0xb0>)
    2d14:	ldrb	r3, [r2, #3]
    2d16:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2d18:	lsls	r0, r3, #24
    2d1a:	bmi.n	2d40 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    2d1c:	lsls	r2, r3, #25
    2d1e:	bpl.n	2d3c <uart4_status_isr+0x74>
    2d20:	ldr	r3, [pc, #84]	; (2d78 <uart4_status_isr+0xb0>)
    2d22:	ldrb	r3, [r3, #4]
    2d24:	lsls	r3, r3, #25
    2d26:	bpl.n	2d3c <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2d28:	ldr	r3, [pc, #100]	; (2d90 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2d2a:	ldr	r1, [pc, #104]	; (2d94 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2d2c:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2d2e:	movs	r2, #0
    2d30:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2d32:	cbz	r3, 2d36 <uart4_status_isr+0x6e>
    2d34:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    2d36:	ldr	r3, [pc, #64]	; (2d78 <uart4_status_isr+0xb0>)
    2d38:	movs	r2, #44	; 0x2c
    2d3a:	strb	r2, [r3, #3]
	}
}
    2d3c:	pop	{r4, r5}
    2d3e:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2d40:	ldrb	r1, [r2, #4]
    2d42:	lsls	r1, r1, #24
    2d44:	bpl.n	2d1c <uart4_status_isr+0x54>
		head = tx_buffer_head;
    2d46:	ldr	r1, [pc, #80]	; (2d98 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2d48:	ldr	r0, [pc, #64]	; (2d8c <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2d4a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2d4c:	ldrb	r1, [r0, #0]
    2d4e:	uxtb	r1, r1
		if (head == tail) {
    2d50:	cmp	r4, r1
    2d52:	beq.n	2d70 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    2d54:	adds	r2, r1, #1
    2d56:	cmp	r2, #39	; 0x27
    2d58:	itt	hi
    2d5a:	movhi	r1, #0
    2d5c:	movhi	r2, r1
			n = tx_buffer[tail];
    2d5e:	ldr	r5, [pc, #60]	; (2d9c <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2d60:	ldr	r4, [pc, #20]	; (2d78 <uart4_status_isr+0xb0>)
    2d62:	it	ls
    2d64:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2d66:	ldrb	r2, [r5, r2]
    2d68:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2d6a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    2d6c:	strb	r1, [r0, #0]
    2d6e:	b.n	2d1c <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    2d70:	movs	r1, #108	; 0x6c
    2d72:	strb	r1, [r2, #3]
    2d74:	b.n	2d1c <uart4_status_isr+0x54>
    2d76:	nop
    2d78:	.word	0x400ea000
    2d7c:	.word	0x1fff196c
    2d80:	.word	0x1fff196d
    2d84:	.word	0x1fff1998
    2d88:	.word	0x1fff1968
    2d8c:	.word	0x1fff19d9
    2d90:	.word	0x1fff19dc
    2d94:	.word	0x1fff19d8
    2d98:	.word	0x1fff19e0
    2d9c:	.word	0x1fff1970

00002da0 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2da0:	ldr	r2, [pc, #20]	; (2db8 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    2da2:	ldr	r3, [pc, #24]	; (2dbc <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2da4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2da6:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2da8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2daa:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2dac:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    2dae:	it	cc
    2db0:	addcc	r0, #64	; 0x40
    2db2:	subs	r0, r0, r3
}
    2db4:	bx	lr
    2db6:	nop
    2db8:	.word	0x1fff1a54
    2dbc:	.word	0x1fff19e9

00002dc0 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    2dc0:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    2dc2:	ldr	r3, [pc, #224]	; (2ea4 <uart1_status_isr+0xe4>)
    2dc4:	ldrb	r2, [r3, #4]
    2dc6:	tst.w	r2, #48	; 0x30
    2dca:	beq.n	2e26 <uart1_status_isr+0x66>
		__disable_irq();
    2dcc:	cpsid	i
		avail = UART1_RCFIFO;
    2dce:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    2dd0:	and.w	r2, r1, #255	; 0xff
    2dd4:	cmp	r1, #0
    2dd6:	beq.n	2e54 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    2dd8:	cpsie	i
			head = rx_buffer_head;
    2dda:	ldr	r7, [pc, #204]	; (2ea8 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    2ddc:	ldr	r1, [pc, #204]	; (2eac <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2dde:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    2de0:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2de2:	ldr	r6, [pc, #204]	; (2eb0 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2de4:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2de6:	uxtb	r0, r0
			tail = rx_buffer_tail;
    2de8:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    2dea:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2dec:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2dee:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2df0:	it	cs
    2df2:	movcs	r3, #0
				if (newhead != tail) {
    2df4:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    2df6:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2dfa:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2dfc:	itt	ne
    2dfe:	strbne	r1, [r6, r3]
    2e00:	movne	r0, r3
				}
			} while (--avail > 0);
    2e02:	ands.w	r2, r2, #255	; 0xff
    2e06:	bne.n	2dea <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    2e08:	ldr	r3, [pc, #168]	; (2eb4 <uart1_status_isr+0xf4>)
    2e0a:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    2e0c:	uxtb	r2, r0
    2e0e:	strb	r2, [r7, #0]
			if (rts_pin) {
    2e10:	cbz	r3, 2e26 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    2e12:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2e14:	itet	cc
    2e16:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    2e1a:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2e1c:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2e1e:	cmp	r0, #39	; 0x27
    2e20:	itt	gt
    2e22:	movgt	r2, #1
    2e24:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    2e26:	ldr	r1, [pc, #124]	; (2ea4 <uart1_status_isr+0xe4>)
    2e28:	ldrb	r2, [r1, #3]
    2e2a:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2e2c:	lsls	r5, r2, #24
    2e2e:	bmi.n	2e5e <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    2e30:	lsls	r2, r2, #25
    2e32:	bpl.n	2e50 <uart1_status_isr+0x90>
    2e34:	ldr	r3, [pc, #108]	; (2ea4 <uart1_status_isr+0xe4>)
    2e36:	ldrb	r3, [r3, #4]
    2e38:	lsls	r3, r3, #25
    2e3a:	bpl.n	2e50 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2e3c:	ldr	r3, [pc, #120]	; (2eb8 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2e3e:	ldr	r1, [pc, #124]	; (2ebc <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    2e40:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2e42:	movs	r2, #0
    2e44:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2e46:	cbz	r3, 2e4a <uart1_status_isr+0x8a>
    2e48:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    2e4a:	ldr	r3, [pc, #88]	; (2ea4 <uart1_status_isr+0xe4>)
    2e4c:	movs	r2, #60	; 0x3c
    2e4e:	strb	r2, [r3, #3]
	}
}
    2e50:	pop	{r4, r5, r6, r7}
    2e52:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2e54:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    2e56:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2e58:	strb	r2, [r3, #17]
			__enable_irq();
    2e5a:	cpsie	i
    2e5c:	b.n	2e26 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2e5e:	ldrb	r3, [r1, #4]
    2e60:	lsls	r4, r3, #24
    2e62:	bpl.n	2e30 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    2e64:	ldr	r3, [pc, #88]	; (2ec0 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    2e66:	ldr	r6, [pc, #92]	; (2ec4 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2e68:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    2e6a:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2e6c:	uxtb	r4, r4
		tail = tx_buffer_tail;
    2e6e:	uxtb	r3, r3
		do {
			if (tail == head) break;
    2e70:	cmp	r4, r3
    2e72:	beq.n	2e92 <uart1_status_isr+0xd2>
    2e74:	ldr	r5, [pc, #80]	; (2ec8 <uart1_status_isr+0x108>)
    2e76:	b.n	2e7c <uart1_status_isr+0xbc>
    2e78:	cmp	r3, r4
    2e7a:	beq.n	2e92 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    2e7c:	adds	r3, #1
    2e7e:	cmp	r3, #40	; 0x28
    2e80:	it	cs
    2e82:	movcs	r3, #0
			avail = UART1_S1;
    2e84:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    2e86:	ldrb	r0, [r5, r3]
    2e88:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    2e8a:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    2e8c:	ldrb	r0, [r1, #20]
    2e8e:	cmp	r0, #7
    2e90:	bls.n	2e78 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    2e92:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2e94:	ldr	r1, [pc, #12]	; (2ea4 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    2e96:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2e98:	ldrb	r3, [r1, #4]
    2e9a:	lsls	r0, r3, #24
    2e9c:	itt	mi
    2e9e:	movmi	r3, #124	; 0x7c
    2ea0:	strbmi	r3, [r1, #3]
    2ea2:	b.n	2e30 <uart1_status_isr+0x70>
    2ea4:	.word	0x4006b000
    2ea8:	.word	0x1fff1a54
    2eac:	.word	0x1fff19e9
    2eb0:	.word	0x1fff1a14
    2eb4:	.word	0x1fff19e4
    2eb8:	.word	0x1fff1a58
    2ebc:	.word	0x1fff19e8
    2ec0:	.word	0x1fff1a5c
    2ec4:	.word	0x1fff1a55
    2ec8:	.word	0x1fff19ec

00002ecc <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2ecc:	ldr	r2, [pc, #20]	; (2ee4 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    2ece:	ldr	r3, [pc, #24]	; (2ee8 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2ed0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2ed2:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2ed4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2ed6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2ed8:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    2eda:	it	cc
    2edc:	addcc	r0, #64	; 0x40
    2ede:	subs	r0, r0, r3
}
    2ee0:	bx	lr
    2ee2:	nop
    2ee4:	.word	0x1fff1a64
    2ee8:	.word	0x1fff1a65

00002eec <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    2eec:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    2eee:	ldr	r3, [pc, #172]	; (2f9c <uart3_status_isr+0xb0>)
    2ef0:	ldrb	r2, [r3, #4]
    2ef2:	lsls	r4, r2, #26
    2ef4:	bpl.n	2f36 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2ef6:	ldr	r0, [pc, #168]	; (2fa0 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2ef8:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2efa:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2efc:	ldr	r1, [pc, #164]	; (2fa4 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2efe:	adds	r3, #1
    2f00:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2f02:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    2f04:	it	gt
    2f06:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2f08:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    2f0a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2f0c:	beq.n	2f16 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    2f0e:	ldr	r4, [pc, #152]	; (2fa8 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    2f10:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2f12:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2f14:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2f16:	ldr	r2, [pc, #148]	; (2fac <uart3_status_isr+0xc0>)
    2f18:	ldr	r1, [r2, #0]
    2f1a:	cbz	r1, 2f36 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2f1c:	ldr	r2, [pc, #144]	; (2fb0 <uart3_status_isr+0xc4>)
    2f1e:	ldrb	r2, [r2, #0]
    2f20:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2f22:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2f24:	itet	cc
    2f26:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2f2a:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    2f2c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2f2e:	cmp	r3, #39	; 0x27
    2f30:	itt	gt
    2f32:	movgt	r3, #1
    2f34:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    2f36:	ldr	r2, [pc, #100]	; (2f9c <uart3_status_isr+0xb0>)
    2f38:	ldrb	r3, [r2, #3]
    2f3a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    2f3c:	lsls	r0, r3, #24
    2f3e:	bmi.n	2f64 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    2f40:	lsls	r2, r3, #25
    2f42:	bpl.n	2f60 <uart3_status_isr+0x74>
    2f44:	ldr	r3, [pc, #84]	; (2f9c <uart3_status_isr+0xb0>)
    2f46:	ldrb	r3, [r3, #4]
    2f48:	lsls	r3, r3, #25
    2f4a:	bpl.n	2f60 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2f4c:	ldr	r3, [pc, #100]	; (2fb4 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    2f4e:	ldr	r1, [pc, #104]	; (2fb8 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2f50:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    2f52:	movs	r2, #0
    2f54:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2f56:	cbz	r3, 2f5a <uart3_status_isr+0x6e>
    2f58:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    2f5a:	ldr	r3, [pc, #64]	; (2f9c <uart3_status_isr+0xb0>)
    2f5c:	movs	r2, #44	; 0x2c
    2f5e:	strb	r2, [r3, #3]
	}
}
    2f60:	pop	{r4, r5}
    2f62:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    2f64:	ldrb	r1, [r2, #4]
    2f66:	lsls	r1, r1, #24
    2f68:	bpl.n	2f40 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    2f6a:	ldr	r1, [pc, #80]	; (2fbc <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2f6c:	ldr	r0, [pc, #64]	; (2fb0 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2f6e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2f70:	ldrb	r1, [r0, #0]
    2f72:	uxtb	r1, r1
		if (head == tail) {
    2f74:	cmp	r4, r1
    2f76:	beq.n	2f94 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    2f78:	adds	r2, r1, #1
    2f7a:	cmp	r2, #39	; 0x27
    2f7c:	itt	hi
    2f7e:	movhi	r1, #0
    2f80:	movhi	r2, r1
			n = tx_buffer[tail];
    2f82:	ldr	r5, [pc, #60]	; (2fc0 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    2f84:	ldr	r4, [pc, #20]	; (2f9c <uart3_status_isr+0xb0>)
    2f86:	it	ls
    2f88:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2f8a:	ldrb	r2, [r5, r2]
    2f8c:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    2f8e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    2f90:	strb	r1, [r0, #0]
    2f92:	b.n	2f40 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    2f94:	movs	r1, #108	; 0x6c
    2f96:	strb	r1, [r2, #3]
    2f98:	b.n	2f40 <uart3_status_isr+0x54>
    2f9a:	nop
    2f9c:	.word	0x4006d000
    2fa0:	.word	0x1fff1a64
    2fa4:	.word	0x1fff1a65
    2fa8:	.word	0x1fff1a90
    2fac:	.word	0x1fff1a60
    2fb0:	.word	0x1fff1ad1
    2fb4:	.word	0x1fff1ad4
    2fb8:	.word	0x1fff1ad0
    2fbc:	.word	0x1fff1ad8
    2fc0:	.word	0x1fff1a68

00002fc4 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    2fc4:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2fc6:	ldr	r4, [pc, #64]	; (3008 <fault_isr+0x44>)
    2fc8:	b.n	2fdc <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2fca:	ldr	r3, [r4, #0]
    2fcc:	lsls	r1, r3, #21
    2fce:	bmi.n	2fec <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2fd0:	ldr	r3, [r4, #0]
    2fd2:	lsls	r2, r3, #20
    2fd4:	bmi.n	2ff6 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2fd6:	ldr	r3, [r4, #0]
    2fd8:	lsls	r3, r3, #19
    2fda:	bmi.n	3000 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2fdc:	ldr	r3, [r4, #0]
    2fde:	lsls	r0, r3, #13
    2fe0:	bpl.n	2fca <fault_isr+0x6>
    2fe2:	bl	20f8 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2fe6:	ldr	r3, [r4, #0]
    2fe8:	lsls	r1, r3, #21
    2fea:	bpl.n	2fd0 <fault_isr+0xc>
    2fec:	bl	30d8 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2ff0:	ldr	r3, [r4, #0]
    2ff2:	lsls	r2, r3, #20
    2ff4:	bpl.n	2fd6 <fault_isr+0x12>
    2ff6:	bl	2dc0 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2ffa:	ldr	r3, [r4, #0]
    2ffc:	lsls	r3, r3, #19
    2ffe:	bpl.n	2fdc <fault_isr+0x18>
    3000:	bl	33d8 <uart2_status_isr>
    3004:	b.n	2fdc <fault_isr+0x18>
    3006:	nop
    3008:	.word	0x40048034

0000300c <unused_isr>:
	}
}

void unused_isr(void)
{
    300c:	push	{r3, lr}
	fault_isr();
    300e:	bl	2fc4 <fault_isr>
    3012:	nop

00003014 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3014:	ldr	r3, [pc, #4]	; (301c <startup_early_hook+0x8>)
    3016:	movs	r2, #16
    3018:	strh	r2, [r3, #0]
    301a:	bx	lr
    301c:	.word	0x40052000

00003020 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3020:	bx	lr
    3022:	nop

00003024 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3024:	ldr	r1, [pc, #36]	; (304c <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3026:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3028:	ldr	r3, [r1, #0]
	if (incr != 0) {
    302a:	cbz	r0, 303a <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    302c:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    302e:	add	r0, r3
    3030:	sub.w	r2, r2, #8192	; 0x2000
    3034:	cmp	r0, r2
    3036:	bcs.n	303e <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3038:	str	r0, [r1, #0]
	}
	return prev;
    303a:	mov	r0, r3
}
    303c:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    303e:	bl	36ac <__errno>
    3042:	movs	r3, #12
    3044:	str	r3, [r0, #0]
			return (void *)-1;
    3046:	mov.w	r0, #4294967295
    304a:	pop	{r3, pc}
    304c:	.word	0x1fff0c6c

00003050 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    3050:	ldr	r2, [pc, #32]	; (3074 <kinetis_hsrun_disable+0x24>)
    3052:	ldrb	r3, [r2, #0]
    3054:	cmp	r3, #128	; 0x80
    3056:	beq.n	305c <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3058:	movs	r0, #0
}
    305a:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    305c:	ldr	r1, [pc, #24]	; (3078 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    305e:	ldr	r3, [pc, #28]	; (307c <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3060:	ldr	r0, [pc, #28]	; (3080 <kinetis_hsrun_disable+0x30>)
    3062:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3064:	movs	r1, #0
    3066:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3068:	ldrb	r3, [r2, #0]
    306a:	cmp	r3, #128	; 0x80
    306c:	beq.n	3068 <kinetis_hsrun_disable+0x18>
		return 1;
    306e:	movs	r0, #1
    3070:	bx	lr
    3072:	nop
    3074:	.word	0x4007e003
    3078:	.word	0x40048044
    307c:	.word	0x4007e001
    3080:	.word	0x22280000

00003084 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3084:	ldr	r2, [pc, #36]	; (30ac <kinetis_hsrun_enable+0x28>)
    3086:	ldrb	r3, [r2, #0]
    3088:	cmp	r3, #1
    308a:	beq.n	3090 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    308c:	movs	r0, #0
}
    308e:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3090:	add.w	r3, r3, #1073741824	; 0x40000000
    3094:	add.w	r3, r3, #516096	; 0x7e000
    3098:	movs	r1, #96	; 0x60
    309a:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    309c:	ldrb	r3, [r2, #0]
    309e:	cmp	r3, #128	; 0x80
    30a0:	bne.n	309c <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    30a2:	ldr	r3, [pc, #12]	; (30b0 <kinetis_hsrun_enable+0x2c>)
    30a4:	ldr	r2, [pc, #12]	; (30b4 <kinetis_hsrun_enable+0x30>)
    30a6:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    30a8:	movs	r0, #1
    30aa:	bx	lr
    30ac:	.word	0x4007e003
    30b0:	.word	0x40048044
    30b4:	.word	0x02060000

000030b8 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    30b8:	ldr	r2, [pc, #20]	; (30d0 <serial_available+0x18>)
	tail = rx_buffer_tail;
    30ba:	ldr	r3, [pc, #24]	; (30d4 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    30bc:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    30be:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    30c0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    30c2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    30c4:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    30c6:	it	cc
    30c8:	addcc	r0, #64	; 0x40
    30ca:	subs	r0, r0, r3
}
    30cc:	bx	lr
    30ce:	nop
    30d0:	.word	0x1fff1ae0
    30d4:	.word	0x1fff1ae1

000030d8 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    30d8:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    30da:	ldr	r3, [pc, #224]	; (31bc <uart0_status_isr+0xe4>)
    30dc:	ldrb	r2, [r3, #4]
    30de:	tst.w	r2, #48	; 0x30
    30e2:	beq.n	313e <uart0_status_isr+0x66>
		__disable_irq();
    30e4:	cpsid	i
		avail = UART0_RCFIFO;
    30e6:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    30e8:	and.w	r2, r1, #255	; 0xff
    30ec:	cmp	r1, #0
    30ee:	beq.n	316c <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    30f0:	cpsie	i
			head = rx_buffer_head;
    30f2:	ldr	r7, [pc, #204]	; (31c0 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    30f4:	ldr	r1, [pc, #204]	; (31c4 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    30f6:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    30f8:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    30fa:	ldr	r6, [pc, #204]	; (31c8 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    30fc:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    30fe:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3100:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    3102:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3104:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3106:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3108:	it	cs
    310a:	movcs	r3, #0
				if (newhead != tail) {
    310c:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    310e:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3112:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3114:	itt	ne
    3116:	strbne	r1, [r6, r3]
    3118:	movne	r0, r3
				}
			} while (--avail > 0);
    311a:	ands.w	r2, r2, #255	; 0xff
    311e:	bne.n	3102 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3120:	ldr	r3, [pc, #168]	; (31cc <uart0_status_isr+0xf4>)
    3122:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3124:	uxtb	r2, r0
    3126:	strb	r2, [r7, #0]
			if (rts_pin) {
    3128:	cbz	r3, 313e <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    312a:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    312c:	itet	cc
    312e:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3132:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3134:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3136:	cmp	r0, #39	; 0x27
    3138:	itt	gt
    313a:	movgt	r2, #1
    313c:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    313e:	ldr	r1, [pc, #124]	; (31bc <uart0_status_isr+0xe4>)
    3140:	ldrb	r2, [r1, #3]
    3142:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3144:	lsls	r5, r2, #24
    3146:	bmi.n	3176 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3148:	lsls	r2, r2, #25
    314a:	bpl.n	3168 <uart0_status_isr+0x90>
    314c:	ldr	r3, [pc, #108]	; (31bc <uart0_status_isr+0xe4>)
    314e:	ldrb	r3, [r3, #4]
    3150:	lsls	r3, r3, #25
    3152:	bpl.n	3168 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3154:	ldr	r3, [pc, #120]	; (31d0 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3156:	ldr	r1, [pc, #124]	; (31d4 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3158:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    315a:	movs	r2, #0
    315c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    315e:	cbz	r3, 3162 <uart0_status_isr+0x8a>
    3160:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3162:	ldr	r3, [pc, #88]	; (31bc <uart0_status_isr+0xe4>)
    3164:	movs	r2, #60	; 0x3c
    3166:	strb	r2, [r3, #3]
	}
}
    3168:	pop	{r4, r5, r6, r7}
    316a:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    316c:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    316e:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3170:	strb	r2, [r3, #17]
			__enable_irq();
    3172:	cpsie	i
    3174:	b.n	313e <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3176:	ldrb	r3, [r1, #4]
    3178:	lsls	r4, r3, #24
    317a:	bpl.n	3148 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    317c:	ldr	r3, [pc, #88]	; (31d8 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    317e:	ldr	r6, [pc, #92]	; (31dc <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3180:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3182:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3184:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3186:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3188:	cmp	r4, r3
    318a:	beq.n	31aa <uart0_status_isr+0xd2>
    318c:	ldr	r5, [pc, #80]	; (31e0 <uart0_status_isr+0x108>)
    318e:	b.n	3194 <uart0_status_isr+0xbc>
    3190:	cmp	r3, r4
    3192:	beq.n	31aa <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3194:	adds	r3, #1
    3196:	cmp	r3, #64	; 0x40
    3198:	it	cs
    319a:	movcs	r3, #0
			avail = UART0_S1;
    319c:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    319e:	ldrb	r0, [r5, r3]
    31a0:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    31a2:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    31a4:	ldrb	r0, [r1, #20]
    31a6:	cmp	r0, #7
    31a8:	bls.n	3190 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    31aa:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    31ac:	ldr	r1, [pc, #12]	; (31bc <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    31ae:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    31b0:	ldrb	r3, [r1, #4]
    31b2:	lsls	r0, r3, #24
    31b4:	itt	mi
    31b6:	movmi	r3, #124	; 0x7c
    31b8:	strbmi	r3, [r1, #3]
    31ba:	b.n	3148 <uart0_status_isr+0x70>
    31bc:	.word	0x4006a000
    31c0:	.word	0x1fff1ae0
    31c4:	.word	0x1fff1ae1
    31c8:	.word	0x1fff1b24
    31cc:	.word	0x1fff1adc
    31d0:	.word	0x1fff1b68
    31d4:	.word	0x1fff1b64
    31d8:	.word	0x1fff1b6c
    31dc:	.word	0x1fff1b65
    31e0:	.word	0x1fff1ae4

000031e4 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    31e4:	ldr	r2, [pc, #20]	; (31fc <serial6_available+0x18>)
	tail = rx_buffer_tail;
    31e6:	ldr	r3, [pc, #24]	; (3200 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    31e8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    31ea:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    31ec:	uxtb	r0, r0
	tail = rx_buffer_tail;
    31ee:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    31f0:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    31f2:	it	cc
    31f4:	addcc	r0, #64	; 0x40
    31f6:	subs	r0, r0, r3
}
    31f8:	bx	lr
    31fa:	nop
    31fc:	.word	0x1fff1b74
    3200:	.word	0x1fff1b75

00003204 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    3204:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    3206:	ldr	r3, [pc, #176]	; (32b8 <lpuart0_status_isr+0xb4>)
    3208:	ldr	r2, [r3, #4]
    320a:	lsls	r4, r2, #10
    320c:	bpl.n	324e <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    320e:	ldr	r0, [pc, #172]	; (32bc <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    3210:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    3212:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3214:	ldr	r1, [pc, #168]	; (32c0 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3216:	adds	r3, #1
    3218:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    321a:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    321c:	it	gt
    321e:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3220:	cmp	r3, r1
    3222:	beq.n	322e <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3224:	ldr	r4, [pc, #156]	; (32c4 <lpuart0_status_isr+0xc0>)
    3226:	uxtb	r2, r2
			rx_buffer_head = head;
    3228:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    322a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    322c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    322e:	ldr	r2, [pc, #152]	; (32c8 <lpuart0_status_isr+0xc4>)
    3230:	ldr	r1, [r2, #0]
    3232:	cbz	r1, 324e <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3234:	ldr	r2, [pc, #148]	; (32cc <lpuart0_status_isr+0xc8>)
    3236:	ldrb	r2, [r2, #0]
    3238:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    323a:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    323c:	itet	cc
    323e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3242:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3244:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3246:	cmp	r3, #39	; 0x27
    3248:	itt	gt
    324a:	movgt	r3, #1
    324c:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    324e:	ldr	r2, [pc, #104]	; (32b8 <lpuart0_status_isr+0xb4>)
    3250:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    3252:	lsls	r0, r3, #8
    3254:	bpl.n	325c <lpuart0_status_isr+0x58>
    3256:	ldr	r2, [r2, #4]
    3258:	lsls	r1, r2, #8
    325a:	bmi.n	3280 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    325c:	lsls	r2, r3, #9
    325e:	bpl.n	327c <lpuart0_status_isr+0x78>
    3260:	ldr	r3, [pc, #84]	; (32b8 <lpuart0_status_isr+0xb4>)
    3262:	ldr	r3, [r3, #4]
    3264:	lsls	r3, r3, #9
    3266:	bpl.n	327c <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3268:	ldr	r3, [pc, #100]	; (32d0 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    326a:	ldr	r1, [pc, #104]	; (32d4 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    326c:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    326e:	movs	r2, #0
    3270:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3272:	cbz	r3, 3276 <lpuart0_status_isr+0x72>
    3274:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3276:	ldr	r3, [pc, #96]	; (32d8 <lpuart0_status_isr+0xd4>)
    3278:	movs	r2, #0
    327a:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    327c:	pop	{r4, r5}
    327e:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3280:	ldr	r2, [pc, #88]	; (32dc <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    3282:	ldr	r1, [pc, #72]	; (32cc <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3284:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3286:	ldrb	r2, [r1, #0]
    3288:	uxtb	r2, r2
		if (head == tail) {
    328a:	cmp	r0, r2
    328c:	beq.n	32aa <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    328e:	adds	r2, #1
    3290:	cmp	r2, #39	; 0x27
    3292:	itt	hi
    3294:	movhi	r0, #0
    3296:	movhi	r2, r0
			n = tx_buffer[tail];
    3298:	ldr	r5, [pc, #68]	; (32e0 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    329a:	ldr	r4, [pc, #28]	; (32b8 <lpuart0_status_isr+0xb4>)
    329c:	it	ls
    329e:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    32a0:	ldrb	r2, [r5, r2]
    32a2:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    32a4:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    32a6:	strb	r0, [r1, #0]
    32a8:	b.n	325c <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    32aa:	ldr	r0, [pc, #56]	; (32e4 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    32ac:	ldr	r2, [pc, #40]	; (32d8 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    32ae:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    32b0:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    32b2:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    32b4:	str	r1, [r2, #0]
    32b6:	b.n	325c <lpuart0_status_isr+0x58>
    32b8:	.word	0x400c4000
    32bc:	.word	0x1fff1b74
    32c0:	.word	0x1fff1b75
    32c4:	.word	0x1fff1ba0
    32c8:	.word	0x1fff1b70
    32cc:	.word	0x1fff1be1
    32d0:	.word	0x1fff1be4
    32d4:	.word	0x1fff1be0
    32d8:	.word	0x43880158
    32dc:	.word	0x1fff1be8
    32e0:	.word	0x1fff1b78
    32e4:	.word	0x4388015c

000032e8 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    32e8:	push	{r4, lr}
    32ea:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    32ec:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    32ee:	bl	3050 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    32f2:	ldr	r2, [pc, #96]	; (3354 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    32f4:	ldr	r3, [pc, #96]	; (3358 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    32f6:	ldr	r1, [pc, #100]	; (335c <usb_init_serialnumber+0x74>)
    32f8:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    32fa:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    32fc:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    32fe:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3300:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3302:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3304:	ldrb	r3, [r2, #0]
    3306:	lsls	r3, r3, #24
    3308:	bpl.n	3304 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    330a:	ldr	r3, [pc, #84]	; (3360 <usb_init_serialnumber+0x78>)
    330c:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    330e:	bl	3084 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    3312:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3314:	ldr	r3, [pc, #76]	; (3364 <usb_init_serialnumber+0x7c>)
    3316:	cmp	r4, r3
    3318:	itt	ls
    331a:	addls.w	r4, r4, r4, lsl #2
    331e:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    3320:	mov	r0, r4
    3322:	ldr	r4, [pc, #68]	; (3368 <usb_init_serialnumber+0x80>)
    3324:	add	r1, sp, #4
    3326:	movs	r2, #10
    3328:	bl	336c <ultoa>
    332c:	add	r1, sp, #4
    332e:	mov	r0, r4
	for (i=0; i<10; i++) {
    3330:	movs	r3, #0
		char c = buf[i];
    3332:	ldrb.w	r2, [r1], #1
    3336:	adds	r3, #1
		if (!c) break;
    3338:	cbz	r2, 334a <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    333a:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    333c:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3340:	bne.n	3332 <usb_init_serialnumber+0x4a>
    3342:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3344:	strb	r3, [r4, #0]
}
    3346:	add	sp, #16
    3348:	pop	{r4, pc}
    334a:	lsls	r3, r3, #1
    334c:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    334e:	strb	r3, [r4, #0]
}
    3350:	add	sp, #16
    3352:	pop	{r4, pc}
    3354:	.word	0x40020004
    3358:	.word	0x40020000
    335c:	.word	0x41070000
    3360:	.word	0x4002000c
    3364:	.word	0x0098967f
    3368:	.word	0x1fff0d50

0000336c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    336c:	push	{r4, r5, r6, r7}
    336e:	subs	r5, r1, #1
    3370:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3372:	movs	r4, #0
    3374:	b.n	3378 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3376:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3378:	udiv	r3, r0, r2
    337c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3380:	cmp	r0, #9
    3382:	add.w	r7, r0, #48	; 0x30
    3386:	itet	hi
    3388:	addhi	r0, #55	; 0x37
    338a:	uxtbls	r0, r7
    338c:	uxtbhi	r0, r0
    338e:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3392:	mov	r0, r3
    3394:	cmp	r3, #0
    3396:	bne.n	3376 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3398:	adds	r2, r1, r4
    339a:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    339c:	cbz	r4, 33b2 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    339e:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    33a0:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    33a4:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    33a6:	adds	r3, #1
    33a8:	subs	r0, r4, r3
    33aa:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    33ac:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    33b0:	blt.n	339e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    33b2:	mov	r0, r1
    33b4:	pop	{r4, r5, r6, r7}
    33b6:	bx	lr

000033b8 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    33b8:	ldr	r2, [pc, #20]	; (33d0 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    33ba:	ldr	r3, [pc, #24]	; (33d4 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    33bc:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    33be:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    33c0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    33c2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    33c4:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    33c6:	it	cc
    33c8:	addcc	r0, #64	; 0x40
    33ca:	subs	r0, r0, r3
}
    33cc:	bx	lr
    33ce:	nop
    33d0:	.word	0x1fff1bf0
    33d4:	.word	0x1fff1bf1

000033d8 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    33d8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    33da:	ldr	r3, [pc, #172]	; (3488 <uart2_status_isr+0xb0>)
    33dc:	ldrb	r2, [r3, #4]
    33de:	lsls	r4, r2, #26
    33e0:	bpl.n	3422 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    33e2:	ldr	r0, [pc, #168]	; (348c <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    33e4:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    33e6:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    33e8:	ldr	r1, [pc, #164]	; (3490 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    33ea:	adds	r3, #1
    33ec:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    33ee:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    33f0:	it	gt
    33f2:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    33f4:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    33f6:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    33f8:	beq.n	3402 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    33fa:	ldr	r4, [pc, #152]	; (3494 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    33fc:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    33fe:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3400:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3402:	ldr	r2, [pc, #148]	; (3498 <uart2_status_isr+0xc0>)
    3404:	ldr	r1, [r2, #0]
    3406:	cbz	r1, 3422 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3408:	ldr	r2, [pc, #144]	; (349c <uart2_status_isr+0xc4>)
    340a:	ldrb	r2, [r2, #0]
    340c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    340e:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3410:	itet	cc
    3412:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3416:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3418:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    341a:	cmp	r3, #39	; 0x27
    341c:	itt	gt
    341e:	movgt	r3, #1
    3420:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    3422:	ldr	r2, [pc, #100]	; (3488 <uart2_status_isr+0xb0>)
    3424:	ldrb	r3, [r2, #3]
    3426:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3428:	lsls	r0, r3, #24
    342a:	bmi.n	3450 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    342c:	lsls	r2, r3, #25
    342e:	bpl.n	344c <uart2_status_isr+0x74>
    3430:	ldr	r3, [pc, #84]	; (3488 <uart2_status_isr+0xb0>)
    3432:	ldrb	r3, [r3, #4]
    3434:	lsls	r3, r3, #25
    3436:	bpl.n	344c <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3438:	ldr	r3, [pc, #100]	; (34a0 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    343a:	ldr	r1, [pc, #104]	; (34a4 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    343c:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    343e:	movs	r2, #0
    3440:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3442:	cbz	r3, 3446 <uart2_status_isr+0x6e>
    3444:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3446:	ldr	r3, [pc, #64]	; (3488 <uart2_status_isr+0xb0>)
    3448:	movs	r2, #44	; 0x2c
    344a:	strb	r2, [r3, #3]
	}
}
    344c:	pop	{r4, r5}
    344e:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3450:	ldrb	r1, [r2, #4]
    3452:	lsls	r1, r1, #24
    3454:	bpl.n	342c <uart2_status_isr+0x54>
		head = tx_buffer_head;
    3456:	ldr	r1, [pc, #80]	; (34a8 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3458:	ldr	r0, [pc, #64]	; (349c <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    345a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    345c:	ldrb	r1, [r0, #0]
    345e:	uxtb	r1, r1
		if (head == tail) {
    3460:	cmp	r4, r1
    3462:	beq.n	3480 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3464:	adds	r2, r1, #1
    3466:	cmp	r2, #39	; 0x27
    3468:	itt	hi
    346a:	movhi	r1, #0
    346c:	movhi	r2, r1
			n = tx_buffer[tail];
    346e:	ldr	r5, [pc, #60]	; (34ac <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3470:	ldr	r4, [pc, #20]	; (3488 <uart2_status_isr+0xb0>)
    3472:	it	ls
    3474:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3476:	ldrb	r2, [r5, r2]
    3478:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    347a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    347c:	strb	r1, [r0, #0]
    347e:	b.n	342c <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    3480:	movs	r1, #108	; 0x6c
    3482:	strb	r1, [r2, #3]
    3484:	b.n	342c <uart2_status_isr+0x54>
    3486:	nop
    3488:	.word	0x4006c000
    348c:	.word	0x1fff1bf0
    3490:	.word	0x1fff1bf1
    3494:	.word	0x1fff1c1c
    3498:	.word	0x1fff1bec
    349c:	.word	0x1fff1c5d
    34a0:	.word	0x1fff1c60
    34a4:	.word	0x1fff1c5c
    34a8:	.word	0x1fff1c64
    34ac:	.word	0x1fff1bf4

000034b0 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    34b0:	bx	lr
    34b2:	nop

000034b4 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    34b4:	bx	lr
    34b6:	nop

000034b8 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    34b8:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    34ba:	mrs	r2, PRIMASK
		__disable_irq();
    34be:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    34c0:	ldrb	r3, [r0, #29]
    34c2:	cbnz	r3, 34d2 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    34c4:	ldrb	r1, [r0, #28]
    34c6:	cmp	r1, #1
    34c8:	beq.n	34dc <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    34ca:	cmp	r1, #3
    34cc:	beq.n	34f0 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    34ce:	movs	r3, #1
    34d0:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    34d2:	cbnz	r2, 34d6 <EventResponder::triggerEventNotImmediate()+0x1e>
    34d4:	cpsie	i
	}
	enableInterrupts(irq);
}
    34d6:	ldr.w	r4, [sp], #4
    34da:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    34dc:	ldr	r4, [pc, #68]	; (3524 <EventResponder::triggerEventNotImmediate()+0x6c>)
    34de:	ldr	r1, [r4, #0]
    34e0:	cbz	r1, 350c <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    34e2:	ldr	r1, [pc, #68]	; (3528 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    34e4:	str	r3, [r0, #20]
				_prev = lastYield;
    34e6:	ldr	r3, [r1, #0]
    34e8:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    34ea:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    34ec:	str	r0, [r3, #20]
    34ee:	b.n	34ce <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    34f0:	ldr	r4, [pc, #56]	; (352c <EventResponder::triggerEventNotImmediate()+0x74>)
    34f2:	ldr	r1, [r4, #0]
    34f4:	cbz	r1, 3518 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    34f6:	ldr	r1, [pc, #56]	; (3530 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    34f8:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    34fa:	ldr	r3, [r1, #0]
    34fc:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    34fe:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    3500:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3502:	ldr	r3, [pc, #48]	; (3534 <EventResponder::triggerEventNotImmediate()+0x7c>)
    3504:	mov.w	r1, #268435456	; 0x10000000
    3508:	str	r1, [r3, #0]
    350a:	b.n	34ce <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    350c:	ldr	r3, [pc, #24]	; (3528 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    350e:	str	r1, [r0, #20]
				_prev = nullptr;
    3510:	str	r1, [r0, #24]
				firstYield = this;
    3512:	str	r0, [r4, #0]
				lastYield = this;
    3514:	str	r0, [r3, #0]
    3516:	b.n	34ce <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3518:	ldr	r3, [pc, #20]	; (3530 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    351a:	str	r1, [r0, #20]
				_prev = nullptr;
    351c:	str	r1, [r0, #24]
				firstInterrupt = this;
    351e:	str	r0, [r4, #0]
				lastInterrupt = this;
    3520:	str	r0, [r3, #0]
    3522:	b.n	3502 <EventResponder::triggerEventNotImmediate()+0x4a>
    3524:	.word	0x1fff1c78
    3528:	.word	0x1fff1c74
    352c:	.word	0x1fff1c68
    3530:	.word	0x1fff1c6c
    3534:	.word	0xe000ed04

00003538 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    3538:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    353a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    353c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    353e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3540:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3542:	beq.n	354c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    3544:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3548:	b.w	34b8 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    354c:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    354e:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3552:	bx	r3

00003554 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3554:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3556:	mrs	r2, PRIMASK
		__disable_irq();
    355a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    355c:	ldr	r4, [pc, #48]	; (3590 <EventResponder::runFromInterrupt()+0x3c>)
    355e:	ldr	r0, [r4, #0]
		if (first) {
    3560:	cbz	r0, 3584 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3562:	ldr	r6, [pc, #48]	; (3594 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3564:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3566:	ldr	r3, [r0, #20]
    3568:	str	r3, [r4, #0]
			if (firstInterrupt) {
    356a:	cbz	r3, 358a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    356c:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    356e:	cbnz	r2, 3572 <EventResponder::runFromInterrupt()+0x1e>
    3570:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3572:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3574:	ldr	r3, [r0, #8]
    3576:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3578:	mrs	r2, PRIMASK
		__disable_irq();
    357c:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    357e:	ldr	r0, [r4, #0]
		if (first) {
    3580:	cmp	r0, #0
    3582:	bne.n	3566 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3584:	cbnz	r2, 3588 <EventResponder::runFromInterrupt()+0x34>
    3586:	cpsie	i
    3588:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    358a:	str	r3, [r6, #0]
    358c:	b.n	356e <EventResponder::runFromInterrupt()+0x1a>
    358e:	nop
    3590:	.word	0x1fff1c68
    3594:	.word	0x1fff1c6c

00003598 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3598:	b.w	3554 <EventResponder::runFromInterrupt()>

0000359c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    359c:	ldr	r2, [pc, #96]	; (3600 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    359e:	push	{r4, r5}
	if (listActive == nullptr) {
    35a0:	ldr	r4, [r2, #0]
    35a2:	cmp	r4, #0
    35a4:	beq.n	35f6 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    35a6:	ldr	r3, [r0, #0]
    35a8:	ldr	r1, [r4, #0]
    35aa:	cmp	r3, r1
    35ac:	bcs.n	35cc <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    35ae:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    35b0:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    35b2:	str	r4, [r0, #8]
		_prev = nullptr;
    35b4:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    35b6:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    35b8:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    35ba:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    35bc:	movs	r3, #2
    35be:	strb	r3, [r0, #20]
}
    35c0:	pop	{r4, r5}
    35c2:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    35c4:	ldr	r1, [r2, #0]
    35c6:	cmp	r3, r1
    35c8:	mov	r4, r2
    35ca:	bcc.n	35de <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    35cc:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    35ce:	subs	r3, r3, r1
    35d0:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    35d2:	cmp	r2, #0
    35d4:	bne.n	35c4 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    35d6:	str	r2, [r0, #8]
		_prev = timer;
    35d8:	str	r4, [r0, #12]
		timer->_next = this;
    35da:	str	r0, [r4, #8]
    35dc:	b.n	35bc <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    35de:	ldr	r2, [r2, #12]
    35e0:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    35e2:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    35e4:	str	r0, [r4, #12]
				_prev->_next = this;
    35e6:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    35e8:	subs	r3, r1, r3
				_state = TimerActive;
    35ea:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    35ec:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    35ee:	str	r3, [r4, #0]
				_state = TimerActive;
    35f0:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    35f2:	pop	{r4, r5}
    35f4:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    35f6:	str	r4, [r0, #8]
		_prev = nullptr;
    35f8:	str	r4, [r0, #12]
		listActive = this;
    35fa:	str	r0, [r2, #0]
    35fc:	b.n	35bc <MillisTimer::addToActiveList()+0x20>
    35fe:	nop
    3600:	.word	0x1fff1c70

00003604 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    3604:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    3606:	ldr	r6, [pc, #136]	; (3690 <MillisTimer::runFromTimer()+0x8c>)
    3608:	ldr	r4, [r6, #0]
	while (timer) {
    360a:	cbz	r4, 3658 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    360c:	ldr	r3, [r4, #0]
    360e:	cmp	r3, #0
    3610:	bne.n	3688 <MillisTimer::runFromTimer()+0x84>
    3612:	ldr	r7, [pc, #128]	; (3694 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    3614:	mov	r5, r3
    3616:	b.n	3622 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    3618:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    361a:	cbz	r4, 3658 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    361c:	ldr	r3, [r4, #0]
    361e:	cmp	r3, #0
    3620:	bne.n	3688 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    3622:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    3624:	cbz	r3, 3628 <MillisTimer::runFromTimer()+0x24>
    3626:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    3628:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    362a:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    362c:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    362e:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3630:	ldr	r3, [r3, #0]
    3632:	cmp	r3, r7
    3634:	bne.n	367a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3636:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3638:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    363a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    363c:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    363e:	beq.n	3682 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3640:	bl	34b8 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    3644:	ldr	r3, [r4, #4]
    3646:	cmp	r3, #0
    3648:	beq.n	3618 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    364a:	str	r3, [r4, #0]
				timer->addToActiveList();
    364c:	mov	r0, r4
    364e:	bl	359c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    3652:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3654:	cmp	r4, #0
    3656:	bne.n	361c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3658:	mrs	r3, PRIMASK
		__disable_irq();
    365c:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    365e:	ldr	r2, [pc, #56]	; (3698 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3660:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3662:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3664:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    3666:	cbnz	r3, 366a <MillisTimer::runFromTimer()+0x66>
    3668:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    366a:	cbz	r0, 3678 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    366c:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    366e:	bl	359c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    3672:	mov	r0, r4
    3674:	cmp	r0, #0
    3676:	bne.n	366c <MillisTimer::runFromTimer()+0x68>
    3678:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    367a:	mov	r2, r4
    367c:	movs	r1, #0
    367e:	blx	r3
    3680:	b.n	3644 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3682:	ldr	r3, [r0, #8]
    3684:	blx	r3
    3686:	b.n	3644 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    3688:	subs	r3, #1
    368a:	str	r3, [r4, #0]
			break;
    368c:	b.n	3658 <MillisTimer::runFromTimer()+0x54>
    368e:	nop
    3690:	.word	0x1fff1c70
    3694:	.word	0x00003539
    3698:	.word	0x1fff1c80

0000369c <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    369c:	ldr	r2, [pc, #8]	; (36a8 <systick_isr+0xc>)
    369e:	ldr	r3, [r2, #0]
    36a0:	adds	r3, #1
    36a2:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    36a4:	b.w	3604 <MillisTimer::runFromTimer()>
    36a8:	.word	0x1fff1808

000036ac <__errno>:
    36ac:	ldr	r3, [pc, #4]	; (36b4 <__errno+0x8>)
    36ae:	ldr	r0, [r3, #0]
    36b0:	bx	lr
    36b2:	nop
    36b4:	.word	0x1fff1190

000036b8 <__libc_init_array>:
    36b8:	push	{r4, r5, r6, lr}
    36ba:	ldr	r6, [pc, #60]	; (36f8 <__libc_init_array+0x40>)
    36bc:	ldr	r5, [pc, #60]	; (36fc <__libc_init_array+0x44>)
    36be:	subs	r6, r6, r5
    36c0:	asrs	r6, r6, #2
    36c2:	it	ne
    36c4:	movne	r4, #0
    36c6:	beq.n	36d4 <__libc_init_array+0x1c>
    36c8:	adds	r4, #1
    36ca:	ldr.w	r3, [r5], #4
    36ce:	blx	r3
    36d0:	cmp	r6, r4
    36d2:	bne.n	36c8 <__libc_init_array+0x10>
    36d4:	ldr	r6, [pc, #40]	; (3700 <__libc_init_array+0x48>)
    36d6:	ldr	r5, [pc, #44]	; (3704 <__libc_init_array+0x4c>)
    36d8:	subs	r6, r6, r5
    36da:	bl	435c <_init>
    36de:	asrs	r6, r6, #2
    36e0:	it	ne
    36e2:	movne	r4, #0
    36e4:	beq.n	36f4 <__libc_init_array+0x3c>
    36e6:	adds	r4, #1
    36e8:	ldr.w	r3, [r5], #4
    36ec:	blx	r3
    36ee:	cmp	r6, r4
    36f0:	bne.n	36e6 <__libc_init_array+0x2e>
    36f2:	pop	{r4, r5, r6, pc}
    36f4:	pop	{r4, r5, r6, pc}
    36f6:	nop
    36f8:	.word	0x00004368
    36fc:	.word	0x00004368
    3700:	.word	0x00004374
    3704:	.word	0x00004368

00003708 <malloc>:
    3708:	ldr	r3, [pc, #8]	; (3714 <malloc+0xc>)
    370a:	mov	r1, r0
    370c:	ldr	r0, [r3, #0]
    370e:	b.w	3718 <_malloc_r>
    3712:	nop
    3714:	.word	0x1fff1190

00003718 <_malloc_r>:
    3718:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    371c:	add.w	r5, r1, #11
    3720:	cmp	r5, #22
    3722:	sub	sp, #12
    3724:	mov	r6, r0
    3726:	bls.w	3868 <_malloc_r+0x150>
    372a:	bics.w	r5, r5, #7
    372e:	bmi.w	38b0 <_malloc_r+0x198>
    3732:	cmp	r1, r5
    3734:	bhi.w	38b0 <_malloc_r+0x198>
    3738:	bl	3c88 <__malloc_lock>
    373c:	cmp.w	r5, #504	; 0x1f8
    3740:	bcc.w	3c7c <_malloc_r+0x564>
    3744:	lsrs	r3, r5, #9
    3746:	beq.w	38be <_malloc_r+0x1a6>
    374a:	cmp	r3, #4
    374c:	bhi.w	3a56 <_malloc_r+0x33e>
    3750:	lsrs	r0, r5, #6
    3752:	add.w	lr, r0, #57	; 0x39
    3756:	mov.w	r3, lr, lsl #1
    375a:	adds	r0, #56	; 0x38
    375c:	ldr	r7, [pc, #784]	; (3a70 <_malloc_r+0x358>)
    375e:	add.w	r3, r7, r3, lsl #2
    3762:	sub.w	r1, r3, #8
    3766:	ldr	r4, [r3, #4]
    3768:	cmp	r1, r4
    376a:	bne.n	377c <_malloc_r+0x64>
    376c:	b.n	38c8 <_malloc_r+0x1b0>
    376e:	cmp	r2, #0
    3770:	bge.w	38cc <_malloc_r+0x1b4>
    3774:	ldr	r4, [r4, #12]
    3776:	cmp	r1, r4
    3778:	beq.w	38c8 <_malloc_r+0x1b0>
    377c:	ldr	r3, [r4, #4]
    377e:	bic.w	r3, r3, #3
    3782:	subs	r2, r3, r5
    3784:	cmp	r2, #15
    3786:	ble.n	376e <_malloc_r+0x56>
    3788:	ldr	r1, [pc, #740]	; (3a70 <_malloc_r+0x358>)
    378a:	ldr	r4, [r7, #16]
    378c:	add.w	lr, r1, #8
    3790:	cmp	r4, lr
    3792:	beq.w	3afc <_malloc_r+0x3e4>
    3796:	ldr	r3, [r4, #4]
    3798:	bic.w	r3, r3, #3
    379c:	subs	r2, r3, r5
    379e:	cmp	r2, #15
    37a0:	bgt.w	3ad6 <_malloc_r+0x3be>
    37a4:	cmp	r2, #0
    37a6:	str.w	lr, [r1, #20]
    37aa:	str.w	lr, [r1, #16]
    37ae:	bge.w	38ee <_malloc_r+0x1d6>
    37b2:	cmp.w	r3, #512	; 0x200
    37b6:	bcs.w	3a88 <_malloc_r+0x370>
    37ba:	lsrs	r3, r3, #3
    37bc:	add.w	ip, r3, #1
    37c0:	movs	r2, #1
    37c2:	asrs	r3, r3, #2
    37c4:	lsl.w	r3, r2, r3
    37c8:	ldr	r2, [r1, #4]
    37ca:	ldr.w	r8, [r1, ip, lsl #3]
    37ce:	str.w	r8, [r4, #8]
    37d2:	add.w	r9, r1, ip, lsl #3
    37d6:	orrs	r2, r3
    37d8:	sub.w	r3, r9, #8
    37dc:	str	r3, [r4, #12]
    37de:	str	r2, [r1, #4]
    37e0:	str.w	r4, [r1, ip, lsl #3]
    37e4:	str.w	r4, [r8, #12]
    37e8:	asrs	r3, r0, #2
    37ea:	movs	r4, #1
    37ec:	lsls	r4, r3
    37ee:	cmp	r4, r2
    37f0:	bhi.w	3908 <_malloc_r+0x1f0>
    37f4:	tst	r4, r2
    37f6:	bne.n	3806 <_malloc_r+0xee>
    37f8:	bic.w	r0, r0, #3
    37fc:	lsls	r4, r4, #1
    37fe:	tst	r4, r2
    3800:	add.w	r0, r0, #4
    3804:	beq.n	37fc <_malloc_r+0xe4>
    3806:	add.w	r9, r7, r0, lsl #3
    380a:	mov	ip, r9
    380c:	mov	r8, r0
    380e:	ldr.w	r1, [ip, #12]
    3812:	cmp	ip, r1
    3814:	bne.n	3826 <_malloc_r+0x10e>
    3816:	b.n	3b00 <_malloc_r+0x3e8>
    3818:	cmp	r2, #0
    381a:	bge.w	3b20 <_malloc_r+0x408>
    381e:	ldr	r1, [r1, #12]
    3820:	cmp	ip, r1
    3822:	beq.w	3b00 <_malloc_r+0x3e8>
    3826:	ldr	r3, [r1, #4]
    3828:	bic.w	r3, r3, #3
    382c:	subs	r2, r3, r5
    382e:	cmp	r2, #15
    3830:	ble.n	3818 <_malloc_r+0x100>
    3832:	mov	r4, r1
    3834:	ldr.w	ip, [r1, #12]
    3838:	ldr.w	r8, [r4, #8]!
    383c:	adds	r3, r1, r5
    383e:	orr.w	r5, r5, #1
    3842:	str	r5, [r1, #4]
    3844:	orr.w	r1, r2, #1
    3848:	str.w	ip, [r8, #12]
    384c:	mov	r0, r6
    384e:	str.w	r8, [ip, #8]
    3852:	str	r3, [r7, #20]
    3854:	str	r3, [r7, #16]
    3856:	str.w	lr, [r3, #12]
    385a:	str.w	lr, [r3, #8]
    385e:	str	r1, [r3, #4]
    3860:	str	r2, [r3, r2]
    3862:	bl	3c8c <__malloc_unlock>
    3866:	b.n	38a8 <_malloc_r+0x190>
    3868:	cmp	r1, #16
    386a:	bhi.n	38b0 <_malloc_r+0x198>
    386c:	bl	3c88 <__malloc_lock>
    3870:	movs	r5, #16
    3872:	movs	r3, #6
    3874:	movs	r0, #2
    3876:	ldr	r7, [pc, #504]	; (3a70 <_malloc_r+0x358>)
    3878:	add.w	r3, r7, r3, lsl #2
    387c:	sub.w	r2, r3, #8
    3880:	ldr	r4, [r3, #4]
    3882:	cmp	r4, r2
    3884:	beq.w	3b12 <_malloc_r+0x3fa>
    3888:	ldr	r3, [r4, #4]
    388a:	ldr	r1, [r4, #12]
    388c:	ldr	r5, [r4, #8]
    388e:	bic.w	r3, r3, #3
    3892:	add	r3, r4
    3894:	mov	r0, r6
    3896:	ldr	r2, [r3, #4]
    3898:	str	r1, [r5, #12]
    389a:	orr.w	r2, r2, #1
    389e:	str	r5, [r1, #8]
    38a0:	str	r2, [r3, #4]
    38a2:	bl	3c8c <__malloc_unlock>
    38a6:	adds	r4, #8
    38a8:	mov	r0, r4
    38aa:	add	sp, #12
    38ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38b0:	movs	r4, #0
    38b2:	movs	r3, #12
    38b4:	mov	r0, r4
    38b6:	str	r3, [r6, #0]
    38b8:	add	sp, #12
    38ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38be:	movs	r3, #128	; 0x80
    38c0:	mov.w	lr, #64	; 0x40
    38c4:	movs	r0, #63	; 0x3f
    38c6:	b.n	375c <_malloc_r+0x44>
    38c8:	mov	r0, lr
    38ca:	b.n	3788 <_malloc_r+0x70>
    38cc:	add	r3, r4
    38ce:	ldr	r1, [r4, #12]
    38d0:	ldr	r2, [r3, #4]
    38d2:	ldr	r5, [r4, #8]
    38d4:	orr.w	r2, r2, #1
    38d8:	str	r1, [r5, #12]
    38da:	mov	r0, r6
    38dc:	str	r5, [r1, #8]
    38de:	str	r2, [r3, #4]
    38e0:	bl	3c8c <__malloc_unlock>
    38e4:	adds	r4, #8
    38e6:	mov	r0, r4
    38e8:	add	sp, #12
    38ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38ee:	add	r3, r4
    38f0:	mov	r0, r6
    38f2:	ldr	r2, [r3, #4]
    38f4:	orr.w	r2, r2, #1
    38f8:	str	r2, [r3, #4]
    38fa:	bl	3c8c <__malloc_unlock>
    38fe:	adds	r4, #8
    3900:	mov	r0, r4
    3902:	add	sp, #12
    3904:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3908:	ldr	r4, [r7, #8]
    390a:	ldr	r3, [r4, #4]
    390c:	bic.w	r8, r3, #3
    3910:	cmp	r8, r5
    3912:	bcc.n	391e <_malloc_r+0x206>
    3914:	rsb	r3, r5, r8
    3918:	cmp	r3, #15
    391a:	bgt.w	3a36 <_malloc_r+0x31e>
    391e:	ldr	r3, [pc, #340]	; (3a74 <_malloc_r+0x35c>)
    3920:	ldr.w	r9, [pc, #352]	; 3a84 <_malloc_r+0x36c>
    3924:	ldr	r2, [r3, #0]
    3926:	ldr.w	r3, [r9]
    392a:	adds	r3, #1
    392c:	add	r2, r5
    392e:	add.w	sl, r4, r8
    3932:	beq.w	3bf6 <_malloc_r+0x4de>
    3936:	add.w	r2, r2, #4096	; 0x1000
    393a:	adds	r2, #15
    393c:	bic.w	r2, r2, #4080	; 0xff0
    3940:	bic.w	r2, r2, #15
    3944:	mov	r1, r2
    3946:	mov	r0, r6
    3948:	str	r2, [sp, #4]
    394a:	bl	3c90 <_sbrk_r>
    394e:	cmp.w	r0, #4294967295
    3952:	mov	fp, r0
    3954:	ldr	r2, [sp, #4]
    3956:	beq.w	3c0a <_malloc_r+0x4f2>
    395a:	cmp	sl, r0
    395c:	bhi.w	3b58 <_malloc_r+0x440>
    3960:	ldr	r3, [pc, #276]	; (3a78 <_malloc_r+0x360>)
    3962:	ldr	r1, [r3, #0]
    3964:	cmp	sl, fp
    3966:	add	r1, r2
    3968:	str	r1, [r3, #0]
    396a:	beq.w	3c14 <_malloc_r+0x4fc>
    396e:	ldr.w	r0, [r9]
    3972:	ldr.w	lr, [pc, #272]	; 3a84 <_malloc_r+0x36c>
    3976:	adds	r0, #1
    3978:	ittet	ne
    397a:	rsbne	sl, sl, fp
    397e:	addne	r1, sl
    3980:	streq.w	fp, [lr]
    3984:	strne	r1, [r3, #0]
    3986:	ands.w	r1, fp, #7
    398a:	beq.w	3bbc <_malloc_r+0x4a4>
    398e:	rsb	r0, r1, #8
    3992:	rsb	r1, r1, #4096	; 0x1000
    3996:	add	fp, r0
    3998:	adds	r1, #8
    399a:	add	r2, fp
    399c:	ubfx	r2, r2, #0, #12
    39a0:	rsb	r9, r2, r1
    39a4:	mov	r1, r9
    39a6:	mov	r0, r6
    39a8:	str	r3, [sp, #4]
    39aa:	bl	3c90 <_sbrk_r>
    39ae:	adds	r3, r0, #1
    39b0:	ldr	r3, [sp, #4]
    39b2:	beq.w	3c34 <_malloc_r+0x51c>
    39b6:	rsb	r2, fp, r0
    39ba:	add	r2, r9
    39bc:	orr.w	r2, r2, #1
    39c0:	ldr	r1, [r3, #0]
    39c2:	str.w	fp, [r7, #8]
    39c6:	add	r1, r9
    39c8:	cmp	r4, r7
    39ca:	str.w	r2, [fp, #4]
    39ce:	str	r1, [r3, #0]
    39d0:	ldr.w	r9, [pc, #164]	; 3a78 <_malloc_r+0x360>
    39d4:	beq.n	3a04 <_malloc_r+0x2ec>
    39d6:	cmp.w	r8, #15
    39da:	bls.w	3bd8 <_malloc_r+0x4c0>
    39de:	ldr	r2, [r4, #4]
    39e0:	sub.w	r3, r8, #12
    39e4:	bic.w	r3, r3, #7
    39e8:	adds	r0, r4, r3
    39ea:	and.w	r2, r2, #1
    39ee:	mov.w	lr, #5
    39f2:	orrs	r2, r3
    39f4:	cmp	r3, #15
    39f6:	str	r2, [r4, #4]
    39f8:	str.w	lr, [r0, #4]
    39fc:	str.w	lr, [r0, #8]
    3a00:	bhi.w	3c3c <_malloc_r+0x524>
    3a04:	ldr	r3, [pc, #116]	; (3a7c <_malloc_r+0x364>)
    3a06:	ldr	r4, [r7, #8]
    3a08:	ldr	r2, [r3, #0]
    3a0a:	cmp	r1, r2
    3a0c:	it	hi
    3a0e:	strhi	r1, [r3, #0]
    3a10:	ldr	r3, [pc, #108]	; (3a80 <_malloc_r+0x368>)
    3a12:	ldr	r2, [r3, #0]
    3a14:	cmp	r1, r2
    3a16:	ldr	r2, [r4, #4]
    3a18:	it	hi
    3a1a:	strhi	r1, [r3, #0]
    3a1c:	bic.w	r2, r2, #3
    3a20:	cmp	r5, r2
    3a22:	sub.w	r3, r2, r5
    3a26:	bhi.n	3a2c <_malloc_r+0x314>
    3a28:	cmp	r3, #15
    3a2a:	bgt.n	3a36 <_malloc_r+0x31e>
    3a2c:	mov	r0, r6
    3a2e:	bl	3c8c <__malloc_unlock>
    3a32:	movs	r4, #0
    3a34:	b.n	38a8 <_malloc_r+0x190>
    3a36:	adds	r2, r4, r5
    3a38:	orr.w	r3, r3, #1
    3a3c:	orr.w	r5, r5, #1
    3a40:	str	r5, [r4, #4]
    3a42:	mov	r0, r6
    3a44:	str	r2, [r7, #8]
    3a46:	str	r3, [r2, #4]
    3a48:	bl	3c8c <__malloc_unlock>
    3a4c:	adds	r4, #8
    3a4e:	mov	r0, r4
    3a50:	add	sp, #12
    3a52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a56:	cmp	r3, #20
    3a58:	bls.n	3b3e <_malloc_r+0x426>
    3a5a:	cmp	r3, #84	; 0x54
    3a5c:	bhi.w	3ba8 <_malloc_r+0x490>
    3a60:	lsrs	r0, r5, #12
    3a62:	add.w	lr, r0, #111	; 0x6f
    3a66:	mov.w	r3, lr, lsl #1
    3a6a:	adds	r0, #110	; 0x6e
    3a6c:	b.n	375c <_malloc_r+0x44>
    3a6e:	nop
    3a70:	.word	0x1fff1194
    3a74:	.word	0x1fff1c8c
    3a78:	.word	0x1fff1c90
    3a7c:	.word	0x1fff1c88
    3a80:	.word	0x1fff1c84
    3a84:	.word	0x1fff15a0
    3a88:	lsrs	r2, r3, #9
    3a8a:	cmp	r2, #4
    3a8c:	bls.n	3b4c <_malloc_r+0x434>
    3a8e:	cmp	r2, #20
    3a90:	bhi.w	3bfa <_malloc_r+0x4e2>
    3a94:	add.w	r1, r2, #92	; 0x5c
    3a98:	lsls	r1, r1, #1
    3a9a:	adds	r2, #91	; 0x5b
    3a9c:	add.w	ip, r7, r1, lsl #2
    3aa0:	ldr.w	r1, [r7, r1, lsl #2]
    3aa4:	ldr.w	r8, [pc, #476]	; 3c84 <_malloc_r+0x56c>
    3aa8:	sub.w	ip, ip, #8
    3aac:	cmp	ip, r1
    3aae:	beq.w	3bc2 <_malloc_r+0x4aa>
    3ab2:	ldr	r2, [r1, #4]
    3ab4:	bic.w	r2, r2, #3
    3ab8:	cmp	r3, r2
    3aba:	bcs.n	3ac2 <_malloc_r+0x3aa>
    3abc:	ldr	r1, [r1, #8]
    3abe:	cmp	ip, r1
    3ac0:	bne.n	3ab2 <_malloc_r+0x39a>
    3ac2:	ldr.w	ip, [r1, #12]
    3ac6:	ldr	r2, [r7, #4]
    3ac8:	str.w	ip, [r4, #12]
    3acc:	str	r1, [r4, #8]
    3ace:	str.w	r4, [ip, #8]
    3ad2:	str	r4, [r1, #12]
    3ad4:	b.n	37e8 <_malloc_r+0xd0>
    3ad6:	adds	r3, r4, r5
    3ad8:	orr.w	r7, r2, #1
    3adc:	orr.w	r5, r5, #1
    3ae0:	str	r5, [r4, #4]
    3ae2:	mov	r0, r6
    3ae4:	str	r3, [r1, #20]
    3ae6:	str	r3, [r1, #16]
    3ae8:	str.w	lr, [r3, #12]
    3aec:	str.w	lr, [r3, #8]
    3af0:	str	r7, [r3, #4]
    3af2:	str	r2, [r3, r2]
    3af4:	adds	r4, #8
    3af6:	bl	3c8c <__malloc_unlock>
    3afa:	b.n	38a8 <_malloc_r+0x190>
    3afc:	ldr	r2, [r1, #4]
    3afe:	b.n	37e8 <_malloc_r+0xd0>
    3b00:	add.w	r8, r8, #1
    3b04:	tst.w	r8, #3
    3b08:	add.w	ip, ip, #8
    3b0c:	bne.w	380e <_malloc_r+0xf6>
    3b10:	b.n	3b74 <_malloc_r+0x45c>
    3b12:	ldr	r4, [r3, #12]
    3b14:	cmp	r3, r4
    3b16:	it	eq
    3b18:	addeq	r0, #2
    3b1a:	beq.w	3788 <_malloc_r+0x70>
    3b1e:	b.n	3888 <_malloc_r+0x170>
    3b20:	add	r3, r1
    3b22:	mov	r4, r1
    3b24:	ldr	r2, [r3, #4]
    3b26:	ldr	r1, [r1, #12]
    3b28:	ldr.w	r5, [r4, #8]!
    3b2c:	orr.w	r2, r2, #1
    3b30:	str	r2, [r3, #4]
    3b32:	mov	r0, r6
    3b34:	str	r1, [r5, #12]
    3b36:	str	r5, [r1, #8]
    3b38:	bl	3c8c <__malloc_unlock>
    3b3c:	b.n	38a8 <_malloc_r+0x190>
    3b3e:	add.w	lr, r3, #92	; 0x5c
    3b42:	add.w	r0, r3, #91	; 0x5b
    3b46:	mov.w	r3, lr, lsl #1
    3b4a:	b.n	375c <_malloc_r+0x44>
    3b4c:	lsrs	r2, r3, #6
    3b4e:	add.w	r1, r2, #57	; 0x39
    3b52:	lsls	r1, r1, #1
    3b54:	adds	r2, #56	; 0x38
    3b56:	b.n	3a9c <_malloc_r+0x384>
    3b58:	cmp	r4, r7
    3b5a:	ldr	r3, [pc, #296]	; (3c84 <_malloc_r+0x56c>)
    3b5c:	beq.w	3960 <_malloc_r+0x248>
    3b60:	ldr	r4, [r3, #8]
    3b62:	ldr	r2, [r4, #4]
    3b64:	bic.w	r2, r2, #3
    3b68:	b.n	3a20 <_malloc_r+0x308>
    3b6a:	ldr.w	r3, [r9], #-8
    3b6e:	cmp	r9, r3
    3b70:	bne.w	3c78 <_malloc_r+0x560>
    3b74:	tst.w	r0, #3
    3b78:	add.w	r0, r0, #4294967295
    3b7c:	bne.n	3b6a <_malloc_r+0x452>
    3b7e:	ldr	r3, [r7, #4]
    3b80:	bic.w	r3, r3, r4
    3b84:	str	r3, [r7, #4]
    3b86:	lsls	r4, r4, #1
    3b88:	cmp	r4, r3
    3b8a:	bhi.w	3908 <_malloc_r+0x1f0>
    3b8e:	cmp	r4, #0
    3b90:	beq.w	3908 <_malloc_r+0x1f0>
    3b94:	tst	r4, r3
    3b96:	mov	r0, r8
    3b98:	bne.w	3806 <_malloc_r+0xee>
    3b9c:	lsls	r4, r4, #1
    3b9e:	tst	r4, r3
    3ba0:	add.w	r0, r0, #4
    3ba4:	beq.n	3b9c <_malloc_r+0x484>
    3ba6:	b.n	3806 <_malloc_r+0xee>
    3ba8:	cmp.w	r3, #340	; 0x154
    3bac:	bhi.n	3be0 <_malloc_r+0x4c8>
    3bae:	lsrs	r0, r5, #15
    3bb0:	add.w	lr, r0, #120	; 0x78
    3bb4:	mov.w	r3, lr, lsl #1
    3bb8:	adds	r0, #119	; 0x77
    3bba:	b.n	375c <_malloc_r+0x44>
    3bbc:	mov.w	r1, #4096	; 0x1000
    3bc0:	b.n	399a <_malloc_r+0x282>
    3bc2:	movs	r1, #1
    3bc4:	ldr.w	r3, [r8, #4]
    3bc8:	asrs	r2, r2, #2
    3bca:	lsl.w	r2, r1, r2
    3bce:	orrs	r2, r3
    3bd0:	str.w	r2, [r8, #4]
    3bd4:	mov	r1, ip
    3bd6:	b.n	3ac8 <_malloc_r+0x3b0>
    3bd8:	movs	r3, #1
    3bda:	str.w	r3, [fp, #4]
    3bde:	b.n	3a2c <_malloc_r+0x314>
    3be0:	movw	r2, #1364	; 0x554
    3be4:	cmp	r3, r2
    3be6:	bhi.n	3c2a <_malloc_r+0x512>
    3be8:	lsrs	r0, r5, #18
    3bea:	add.w	lr, r0, #125	; 0x7d
    3bee:	mov.w	r3, lr, lsl #1
    3bf2:	adds	r0, #124	; 0x7c
    3bf4:	b.n	375c <_malloc_r+0x44>
    3bf6:	adds	r2, #16
    3bf8:	b.n	3944 <_malloc_r+0x22c>
    3bfa:	cmp	r2, #84	; 0x54
    3bfc:	bhi.n	3c4c <_malloc_r+0x534>
    3bfe:	lsrs	r2, r3, #12
    3c00:	add.w	r1, r2, #111	; 0x6f
    3c04:	lsls	r1, r1, #1
    3c06:	adds	r2, #110	; 0x6e
    3c08:	b.n	3a9c <_malloc_r+0x384>
    3c0a:	ldr	r4, [r7, #8]
    3c0c:	ldr	r2, [r4, #4]
    3c0e:	bic.w	r2, r2, #3
    3c12:	b.n	3a20 <_malloc_r+0x308>
    3c14:	ubfx	r0, sl, #0, #12
    3c18:	cmp	r0, #0
    3c1a:	bne.w	396e <_malloc_r+0x256>
    3c1e:	add	r2, r8
    3c20:	ldr	r3, [r7, #8]
    3c22:	orr.w	r2, r2, #1
    3c26:	str	r2, [r3, #4]
    3c28:	b.n	3a04 <_malloc_r+0x2ec>
    3c2a:	movs	r3, #254	; 0xfe
    3c2c:	mov.w	lr, #127	; 0x7f
    3c30:	movs	r0, #126	; 0x7e
    3c32:	b.n	375c <_malloc_r+0x44>
    3c34:	movs	r2, #1
    3c36:	mov.w	r9, #0
    3c3a:	b.n	39c0 <_malloc_r+0x2a8>
    3c3c:	add.w	r1, r4, #8
    3c40:	mov	r0, r6
    3c42:	bl	3d98 <_free_r>
    3c46:	ldr.w	r1, [r9]
    3c4a:	b.n	3a04 <_malloc_r+0x2ec>
    3c4c:	cmp.w	r2, #340	; 0x154
    3c50:	bhi.n	3c5e <_malloc_r+0x546>
    3c52:	lsrs	r2, r3, #15
    3c54:	add.w	r1, r2, #120	; 0x78
    3c58:	lsls	r1, r1, #1
    3c5a:	adds	r2, #119	; 0x77
    3c5c:	b.n	3a9c <_malloc_r+0x384>
    3c5e:	movw	r1, #1364	; 0x554
    3c62:	cmp	r2, r1
    3c64:	bhi.n	3c72 <_malloc_r+0x55a>
    3c66:	lsrs	r2, r3, #18
    3c68:	add.w	r1, r2, #125	; 0x7d
    3c6c:	lsls	r1, r1, #1
    3c6e:	adds	r2, #124	; 0x7c
    3c70:	b.n	3a9c <_malloc_r+0x384>
    3c72:	movs	r1, #254	; 0xfe
    3c74:	movs	r2, #126	; 0x7e
    3c76:	b.n	3a9c <_malloc_r+0x384>
    3c78:	ldr	r3, [r7, #4]
    3c7a:	b.n	3b86 <_malloc_r+0x46e>
    3c7c:	lsrs	r0, r5, #3
    3c7e:	adds	r3, r0, #1
    3c80:	lsls	r3, r3, #1
    3c82:	b.n	3876 <_malloc_r+0x15e>
    3c84:	.word	0x1fff1194

00003c88 <__malloc_lock>:
    3c88:	bx	lr
    3c8a:	nop

00003c8c <__malloc_unlock>:
    3c8c:	bx	lr
    3c8e:	nop

00003c90 <_sbrk_r>:
    3c90:	push	{r3, r4, r5, lr}
    3c92:	ldr	r4, [pc, #28]	; (3cb0 <_sbrk_r+0x20>)
    3c94:	movs	r3, #0
    3c96:	mov	r5, r0
    3c98:	mov	r0, r1
    3c9a:	str	r3, [r4, #0]
    3c9c:	bl	3024 <_sbrk>
    3ca0:	adds	r3, r0, #1
    3ca2:	beq.n	3ca6 <_sbrk_r+0x16>
    3ca4:	pop	{r3, r4, r5, pc}
    3ca6:	ldr	r3, [r4, #0]
    3ca8:	cmp	r3, #0
    3caa:	beq.n	3ca4 <_sbrk_r+0x14>
    3cac:	str	r3, [r5, #0]
    3cae:	pop	{r3, r4, r5, pc}
    3cb0:	.word	0x1fff1dfc

00003cb4 <register_fini>:
    3cb4:	ldr	r3, [pc, #8]	; (3cc0 <register_fini+0xc>)
    3cb6:	cbz	r3, 3cbe <register_fini+0xa>
    3cb8:	ldr	r0, [pc, #8]	; (3cc4 <register_fini+0x10>)
    3cba:	b.w	3cc8 <atexit>
    3cbe:	bx	lr
    3cc0:	.word	0x00000000
    3cc4:	.word	0x00003cd5

00003cc8 <atexit>:
    3cc8:	movs	r3, #0
    3cca:	mov	r1, r0
    3ccc:	mov	r2, r3
    3cce:	mov	r0, r3
    3cd0:	b.w	3f68 <__register_exitproc>

00003cd4 <__libc_fini_array>:
    3cd4:	push	{r3, r4, r5, lr}
    3cd6:	ldr	r5, [pc, #28]	; (3cf4 <__libc_fini_array+0x20>)
    3cd8:	ldr	r4, [pc, #28]	; (3cf8 <__libc_fini_array+0x24>)
    3cda:	subs	r4, r5, r4
    3cdc:	asrs	r4, r4, #2
    3cde:	beq.n	3cec <__libc_fini_array+0x18>
    3ce0:	subs	r4, #1
    3ce2:	ldr.w	r3, [r5, #-4]!
    3ce6:	blx	r3
    3ce8:	cmp	r4, #0
    3cea:	bne.n	3ce0 <__libc_fini_array+0xc>
    3cec:	ldmia.w	sp!, {r3, r4, r5, lr}
    3cf0:	b.w	4374 <__init_array_end>
	...

00003cfc <_malloc_trim_r>:
    3cfc:	push	{r3, r4, r5, r6, r7, lr}
    3cfe:	ldr	r7, [pc, #140]	; (3d8c <_malloc_trim_r+0x90>)
    3d00:	mov	r4, r1
    3d02:	mov	r6, r0
    3d04:	bl	3c88 <__malloc_lock>
    3d08:	ldr	r3, [r7, #8]
    3d0a:	ldr	r5, [r3, #4]
    3d0c:	bic.w	r5, r5, #3
    3d10:	subs	r1, r5, r4
    3d12:	addw	r1, r1, #4079	; 0xfef
    3d16:	bic.w	r1, r1, #4080	; 0xff0
    3d1a:	bic.w	r1, r1, #15
    3d1e:	sub.w	r4, r1, #4096	; 0x1000
    3d22:	cmp.w	r4, #4096	; 0x1000
    3d26:	blt.n	3d38 <_malloc_trim_r+0x3c>
    3d28:	movs	r1, #0
    3d2a:	mov	r0, r6
    3d2c:	bl	3c90 <_sbrk_r>
    3d30:	ldr	r3, [r7, #8]
    3d32:	add	r3, r5
    3d34:	cmp	r0, r3
    3d36:	beq.n	3d42 <_malloc_trim_r+0x46>
    3d38:	mov	r0, r6
    3d3a:	bl	3c8c <__malloc_unlock>
    3d3e:	movs	r0, #0
    3d40:	pop	{r3, r4, r5, r6, r7, pc}
    3d42:	negs	r1, r4
    3d44:	mov	r0, r6
    3d46:	bl	3c90 <_sbrk_r>
    3d4a:	adds	r0, #1
    3d4c:	beq.n	3d6a <_malloc_trim_r+0x6e>
    3d4e:	ldr	r3, [pc, #64]	; (3d90 <_malloc_trim_r+0x94>)
    3d50:	ldr	r2, [r7, #8]
    3d52:	ldr	r1, [r3, #0]
    3d54:	subs	r5, r5, r4
    3d56:	orr.w	r5, r5, #1
    3d5a:	mov	r0, r6
    3d5c:	subs	r1, r1, r4
    3d5e:	str	r5, [r2, #4]
    3d60:	str	r1, [r3, #0]
    3d62:	bl	3c8c <__malloc_unlock>
    3d66:	movs	r0, #1
    3d68:	pop	{r3, r4, r5, r6, r7, pc}
    3d6a:	movs	r1, #0
    3d6c:	mov	r0, r6
    3d6e:	bl	3c90 <_sbrk_r>
    3d72:	ldr	r2, [r7, #8]
    3d74:	subs	r3, r0, r2
    3d76:	cmp	r3, #15
    3d78:	ble.n	3d38 <_malloc_trim_r+0x3c>
    3d7a:	ldr	r4, [pc, #24]	; (3d94 <_malloc_trim_r+0x98>)
    3d7c:	ldr	r1, [pc, #16]	; (3d90 <_malloc_trim_r+0x94>)
    3d7e:	ldr	r4, [r4, #0]
    3d80:	orr.w	r3, r3, #1
    3d84:	subs	r0, r0, r4
    3d86:	str	r3, [r2, #4]
    3d88:	str	r0, [r1, #0]
    3d8a:	b.n	3d38 <_malloc_trim_r+0x3c>
    3d8c:	.word	0x1fff1194
    3d90:	.word	0x1fff1c90
    3d94:	.word	0x1fff15a0

00003d98 <_free_r>:
    3d98:	cmp	r1, #0
    3d9a:	beq.n	3e28 <_free_r+0x90>
    3d9c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3da0:	mov	r5, r1
    3da2:	mov	r8, r0
    3da4:	bl	3c88 <__malloc_lock>
    3da8:	ldr.w	r7, [r5, #-4]
    3dac:	ldr	r1, [pc, #424]	; (3f58 <_free_r+0x1c0>)
    3dae:	bic.w	r3, r7, #1
    3db2:	sub.w	r4, r5, #8
    3db6:	adds	r2, r4, r3
    3db8:	ldr	r6, [r1, #8]
    3dba:	ldr	r0, [r2, #4]
    3dbc:	cmp	r2, r6
    3dbe:	bic.w	r0, r0, #3
    3dc2:	beq.n	3e8a <_free_r+0xf2>
    3dc4:	lsls	r6, r7, #31
    3dc6:	str	r0, [r2, #4]
    3dc8:	bmi.n	3de2 <_free_r+0x4a>
    3dca:	ldr.w	r7, [r5, #-8]
    3dce:	subs	r4, r4, r7
    3dd0:	add.w	lr, r1, #8
    3dd4:	ldr	r5, [r4, #8]
    3dd6:	cmp	r5, lr
    3dd8:	add	r3, r7
    3dda:	beq.n	3ebc <_free_r+0x124>
    3ddc:	ldr	r7, [r4, #12]
    3dde:	str	r7, [r5, #12]
    3de0:	str	r5, [r7, #8]
    3de2:	adds	r5, r2, r0
    3de4:	ldr	r5, [r5, #4]
    3de6:	lsls	r5, r5, #31
    3de8:	bpl.n	3e70 <_free_r+0xd8>
    3dea:	orr.w	r2, r3, #1
    3dee:	str	r2, [r4, #4]
    3df0:	str	r3, [r4, r3]
    3df2:	cmp.w	r3, #512	; 0x200
    3df6:	bcs.n	3e2a <_free_r+0x92>
    3df8:	lsrs	r3, r3, #3
    3dfa:	adds	r2, r3, #1
    3dfc:	ldr	r5, [r1, #4]
    3dfe:	ldr.w	r7, [r1, r2, lsl #3]
    3e02:	str	r7, [r4, #8]
    3e04:	movs	r0, #1
    3e06:	asrs	r3, r3, #2
    3e08:	lsl.w	r3, r0, r3
    3e0c:	add.w	r0, r1, r2, lsl #3
    3e10:	orrs	r5, r3
    3e12:	subs	r0, #8
    3e14:	str	r0, [r4, #12]
    3e16:	str	r5, [r1, #4]
    3e18:	str.w	r4, [r1, r2, lsl #3]
    3e1c:	str	r4, [r7, #12]
    3e1e:	mov	r0, r8
    3e20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e24:	b.w	3c8c <__malloc_unlock>
    3e28:	bx	lr
    3e2a:	lsrs	r2, r3, #9
    3e2c:	cmp	r2, #4
    3e2e:	bhi.n	3ed8 <_free_r+0x140>
    3e30:	lsrs	r2, r3, #6
    3e32:	add.w	r7, r2, #57	; 0x39
    3e36:	lsls	r7, r7, #1
    3e38:	add.w	r5, r2, #56	; 0x38
    3e3c:	add.w	r0, r1, r7, lsl #2
    3e40:	ldr.w	r2, [r1, r7, lsl #2]
    3e44:	ldr	r1, [pc, #272]	; (3f58 <_free_r+0x1c0>)
    3e46:	subs	r0, #8
    3e48:	cmp	r0, r2
    3e4a:	beq.n	3ee8 <_free_r+0x150>
    3e4c:	ldr	r1, [r2, #4]
    3e4e:	bic.w	r1, r1, #3
    3e52:	cmp	r3, r1
    3e54:	bcs.n	3e5c <_free_r+0xc4>
    3e56:	ldr	r2, [r2, #8]
    3e58:	cmp	r0, r2
    3e5a:	bne.n	3e4c <_free_r+0xb4>
    3e5c:	ldr	r0, [r2, #12]
    3e5e:	str	r0, [r4, #12]
    3e60:	str	r2, [r4, #8]
    3e62:	str	r4, [r0, #8]
    3e64:	str	r4, [r2, #12]
    3e66:	mov	r0, r8
    3e68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e6c:	b.w	3c8c <__malloc_unlock>
    3e70:	ldr	r5, [r2, #8]
    3e72:	ldr	r7, [pc, #232]	; (3f5c <_free_r+0x1c4>)
    3e74:	cmp	r5, r7
    3e76:	add	r3, r0
    3e78:	beq.n	3efa <_free_r+0x162>
    3e7a:	ldr	r0, [r2, #12]
    3e7c:	str	r0, [r5, #12]
    3e7e:	orr.w	r2, r3, #1
    3e82:	str	r5, [r0, #8]
    3e84:	str	r2, [r4, #4]
    3e86:	str	r3, [r4, r3]
    3e88:	b.n	3df2 <_free_r+0x5a>
    3e8a:	lsls	r7, r7, #31
    3e8c:	add	r3, r0
    3e8e:	bmi.n	3ea0 <_free_r+0x108>
    3e90:	ldr.w	r2, [r5, #-8]
    3e94:	subs	r4, r4, r2
    3e96:	add	r3, r2
    3e98:	ldr	r0, [r4, #8]
    3e9a:	ldr	r2, [r4, #12]
    3e9c:	str	r2, [r0, #12]
    3e9e:	str	r0, [r2, #8]
    3ea0:	ldr	r2, [pc, #188]	; (3f60 <_free_r+0x1c8>)
    3ea2:	ldr	r2, [r2, #0]
    3ea4:	orr.w	r0, r3, #1
    3ea8:	cmp	r3, r2
    3eaa:	str	r0, [r4, #4]
    3eac:	str	r4, [r1, #8]
    3eae:	bcc.n	3e1e <_free_r+0x86>
    3eb0:	ldr	r3, [pc, #176]	; (3f64 <_free_r+0x1cc>)
    3eb2:	mov	r0, r8
    3eb4:	ldr	r1, [r3, #0]
    3eb6:	bl	3cfc <_malloc_trim_r>
    3eba:	b.n	3e1e <_free_r+0x86>
    3ebc:	adds	r1, r2, r0
    3ebe:	ldr	r1, [r1, #4]
    3ec0:	lsls	r1, r1, #31
    3ec2:	bmi.n	3f4e <_free_r+0x1b6>
    3ec4:	ldr	r1, [r2, #8]
    3ec6:	ldr	r2, [r2, #12]
    3ec8:	str	r2, [r1, #12]
    3eca:	add	r3, r0
    3ecc:	orr.w	r0, r3, #1
    3ed0:	str	r1, [r2, #8]
    3ed2:	str	r0, [r4, #4]
    3ed4:	str	r3, [r4, r3]
    3ed6:	b.n	3e1e <_free_r+0x86>
    3ed8:	cmp	r2, #20
    3eda:	bhi.n	3f0c <_free_r+0x174>
    3edc:	add.w	r7, r2, #92	; 0x5c
    3ee0:	lsls	r7, r7, #1
    3ee2:	add.w	r5, r2, #91	; 0x5b
    3ee6:	b.n	3e3c <_free_r+0xa4>
    3ee8:	asrs	r2, r5, #2
    3eea:	ldr	r3, [r1, #4]
    3eec:	movs	r5, #1
    3eee:	lsl.w	r2, r5, r2
    3ef2:	orrs	r3, r2
    3ef4:	str	r3, [r1, #4]
    3ef6:	mov	r2, r0
    3ef8:	b.n	3e5e <_free_r+0xc6>
    3efa:	orr.w	r2, r3, #1
    3efe:	str	r4, [r1, #20]
    3f00:	str	r4, [r1, #16]
    3f02:	str	r5, [r4, #12]
    3f04:	str	r5, [r4, #8]
    3f06:	str	r2, [r4, #4]
    3f08:	str	r3, [r4, r3]
    3f0a:	b.n	3e1e <_free_r+0x86>
    3f0c:	cmp	r2, #84	; 0x54
    3f0e:	bhi.n	3f1e <_free_r+0x186>
    3f10:	lsrs	r2, r3, #12
    3f12:	add.w	r7, r2, #111	; 0x6f
    3f16:	lsls	r7, r7, #1
    3f18:	add.w	r5, r2, #110	; 0x6e
    3f1c:	b.n	3e3c <_free_r+0xa4>
    3f1e:	cmp.w	r2, #340	; 0x154
    3f22:	bhi.n	3f32 <_free_r+0x19a>
    3f24:	lsrs	r2, r3, #15
    3f26:	add.w	r7, r2, #120	; 0x78
    3f2a:	lsls	r7, r7, #1
    3f2c:	add.w	r5, r2, #119	; 0x77
    3f30:	b.n	3e3c <_free_r+0xa4>
    3f32:	movw	r0, #1364	; 0x554
    3f36:	cmp	r2, r0
    3f38:	bhi.n	3f48 <_free_r+0x1b0>
    3f3a:	lsrs	r2, r3, #18
    3f3c:	add.w	r7, r2, #125	; 0x7d
    3f40:	lsls	r7, r7, #1
    3f42:	add.w	r5, r2, #124	; 0x7c
    3f46:	b.n	3e3c <_free_r+0xa4>
    3f48:	movs	r7, #254	; 0xfe
    3f4a:	movs	r5, #126	; 0x7e
    3f4c:	b.n	3e3c <_free_r+0xa4>
    3f4e:	orr.w	r2, r3, #1
    3f52:	str	r2, [r4, #4]
    3f54:	str	r3, [r4, r3]
    3f56:	b.n	3e1e <_free_r+0x86>
    3f58:	.word	0x1fff1194
    3f5c:	.word	0x1fff119c
    3f60:	.word	0x1fff159c
    3f64:	.word	0x1fff1c8c

00003f68 <__register_exitproc>:
    3f68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3f6c:	ldr	r4, [pc, #148]	; (4004 <__register_exitproc+0x9c>)
    3f6e:	ldr	r5, [r4, #0]
    3f70:	ldr.w	r4, [r5, #328]	; 0x148
    3f74:	mov	r6, r0
    3f76:	mov	r8, r1
    3f78:	mov	sl, r2
    3f7a:	mov	r9, r3
    3f7c:	cbz	r4, 3ff0 <__register_exitproc+0x88>
    3f7e:	ldr	r0, [r4, #4]
    3f80:	cmp	r0, #31
    3f82:	bgt.n	3fb4 <__register_exitproc+0x4c>
    3f84:	adds	r3, r0, #1
    3f86:	cbz	r6, 3fa6 <__register_exitproc+0x3e>
    3f88:	add.w	r5, r4, r0, lsl #2
    3f8c:	movs	r2, #1
    3f8e:	str.w	sl, [r5, #136]	; 0x88
    3f92:	ldr.w	r1, [r4, #392]	; 0x188
    3f96:	lsls	r2, r0
    3f98:	orrs	r1, r2
    3f9a:	cmp	r6, #2
    3f9c:	str.w	r1, [r4, #392]	; 0x188
    3fa0:	str.w	r9, [r5, #264]	; 0x108
    3fa4:	beq.n	3fe4 <__register_exitproc+0x7c>
    3fa6:	adds	r0, #2
    3fa8:	str	r3, [r4, #4]
    3faa:	str.w	r8, [r4, r0, lsl #2]
    3fae:	movs	r0, #0
    3fb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3fb4:	ldr	r3, [pc, #80]	; (4008 <__register_exitproc+0xa0>)
    3fb6:	cbz	r3, 3ffa <__register_exitproc+0x92>
    3fb8:	mov.w	r0, #400	; 0x190
    3fbc:	bl	3708 <malloc>
    3fc0:	mov	r4, r0
    3fc2:	cbz	r0, 3ffa <__register_exitproc+0x92>
    3fc4:	ldr.w	r3, [r5, #328]	; 0x148
    3fc8:	movs	r7, #0
    3fca:	stmia.w	r0, {r3, r7}
    3fce:	str.w	r4, [r5, #328]	; 0x148
    3fd2:	mov	r0, r7
    3fd4:	movs	r3, #1
    3fd6:	str.w	r7, [r4, #392]	; 0x188
    3fda:	str.w	r7, [r4, #396]	; 0x18c
    3fde:	cmp	r6, #0
    3fe0:	beq.n	3fa6 <__register_exitproc+0x3e>
    3fe2:	b.n	3f88 <__register_exitproc+0x20>
    3fe4:	ldr.w	r1, [r4, #396]	; 0x18c
    3fe8:	orrs	r2, r1
    3fea:	str.w	r2, [r4, #396]	; 0x18c
    3fee:	b.n	3fa6 <__register_exitproc+0x3e>
    3ff0:	add.w	r4, r5, #332	; 0x14c
    3ff4:	str.w	r4, [r5, #328]	; 0x148
    3ff8:	b.n	3f7e <__register_exitproc+0x16>
    3ffa:	mov.w	r0, #4294967295
    3ffe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4002:	nop
    4004:	.word	0x00004358
    4008:	.word	0x00003709
    400c:	.word	0x00000026
    4010:	.word	0x00000029
    4014:	.word	0x0000002d
    4018:	.word	0x00000033
    401c:	.word	0x00000064
    4020:	.word	0x00000064
    4024:	.word	0x00000064
    4028:	.word	0x00000064
    402c:	.word	0x00000001
    4030:	.word	0x00000001
    4034:	.word	0x00000001
    4038:	.word	0x00000001
    403c:	.word	0x7370704f
    4040:	.word	0x6e61202c
    4044:	.word	0x6b6e7520
    4048:	.word	0x6e776f6e
    404c:	.word	0x44494d20
    4050:	.word	0x656d2049
    4054:	.word	0x67617373
    4058:	.word	0x79742065
    405c:	.word	0x00216570
    4060:	.word	0x43544950
    4064:	.word	0x00000048
    4068:	.word	0x4f4c4556
    406c:	.word	0x59544943
    4070:	.word	0x00000000
    4074:	.word	0x45544f4e
    4078:	.word	0x474e454c
    407c:	.word	0x00004854
    4080:	.word	0x424f4c47
    4084:	.word	0x00004c41

00004088 <pin2sc1a>:
    4088:	................
    4098:	................
    40a8:	................
    40b8:	................
    40c8:	........

000040d0 <digital_pin_to_info_PGM>:
    40d0:	@..C@..@D..CD..@
    40e0:	...C...@0..C0..@
    40f0:	4..C4..@...C...@
    4100:	...C...@...C...@
    4110:	...C...@...C...@
    4120:	...C...@...C...@
    4130:	...C...@...C...@
    4140:	...C...@...C...@
    4150:	...C...@...C...@
    4160:	...C...@...C...@
    4170:	...C...@...C...@
    4180:	...C...@...C...@
    4190:	h .Ch..@...C...@
    41a0:	8..C8..@<..C<..@
    41b0:	@..C@..@H..CH..@
    41c0:	L..CL..@(..C(..@
    41d0:	,..C,..@` .C`..@
    41e0:	d .Cd..@ ..C ..@
    41f0:	$..C$..@(..C(..@
    4200:	,..C,..@D..CD..@
    4210:	p..Cp..@t..Ct..@
    4220:	h..Ch..@P..CP..@
    4230:	X..CX..@\..C\..@
    4240:	T..CT..@ ..C ..@
    4250:	$..C$..@...C...@
    4260:	...C...@8..C8..@
    4270:	4..C4..@0..C0..@
    4280:	<..C<..@,..C,..@
    4290:	( .C(..@, .C,..@
    42a0:	. .C...@. .C...@
    42b0:	. .C...@. .C...@
    42c0:	. .C...@. .C...@

000042d0 <vtable for usb_serial_class>:
	...
    42d8:	a,..Y,..U,..Q,..
    42e8:	M,..I,..E,..A,..
    42f8:	....

000042fc <usb_endpoint_config_table>:
    42fc:	........

00004304 <usb_descriptor_list>:
    4304:	....p...........
    4314:	............L...
    4324:	................
    4334:	....4...........
    4344:	P...............
    4354:	....

00004358 <_global_impure_ptr>:
    4358:	h...

0000435c <_init>:
    435c:	push	{r3, r4, r5, r6, r7, lr}
    435e:	nop
    4360:	pop	{r3, r4, r5, r6, r7}
    4362:	pop	{r3}
    4364:	mov	lr, r3
    4366:	bx	lr

00004368 <__init_array_start>:
    4368:	.word	0x00003cb5

0000436c <__frame_dummy_init_array_entry>:
    436c:	5...-...

Disassembly of section .fini:

00004374 <_fini>:
    4374:	push	{r3, r4, r5, r6, r7, lr}
    4376:	nop


.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004df8 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15bc l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003ad0 l     F .text	0000000c startup_default_early_hook
00003adc l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15bc l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15c0 l       .bss	00000000 object.8610
00004df0 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
0000184c l     F .text	0000029c _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff1865 l     O .bss	00000001 tx_noautoflush
1fff1868 l     O .bss	00000004 tx_packet
1fff186c l     O .bss	00000001 transmit_previous_timeout
1fff1870 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00001dbc l     F .text	00000144 wait_for_cal
1fff1875 l     O .bss	00000001 analog_right_shift
1fff1876 l     O .bss	00000001 calibrating
00004b0c l     O .text	00000048 pin2sc1a
1fff0c68 l     O .data	00000001 analog_config_bits
1fff1877 l     O .bss	00000001 analogReadBusyADC1
1fff1878 l     O .bss	00000001 analogReadBusyADC0
1fff1879 l     O .bss	00000001 analog_reference_internal
1fff0c69 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
000020dc l     F .text	0000004c digitalWrite.part.1
00002128 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002408 l     F .text	00000048 sysex_byte
1fff1894 l     O .bss	00000001 tx_noautoflush
1fff18c0 l     O .bss	00000004 tx_packet
1fff18c4 l     O .bss	00000001 transmit_previous_timeout
1fff18cc l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c6c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff18e0 l     O .bss	00000004 ep0_tx_ptr
1fff18e4 l     O .bss	00000014 rx_last
1fff18f8 l     O .bss	00000002 ep0_tx_len
1fff18fc l     O .bss	00000040 ep0_rx0_buf
1fff193c l     O .bss	00000014 rx_first
1fff1950 l     O .bss	00000001 ep0_tx_data_toggle
1fff1954 l     O .bss	00000040 ep0_rx1_buf
1fff1994 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff19a8 l     O .bss	00000014 tx_last
1fff19bc l     O .bss	00000008 setup
1fff19c4 l     O .bss	00000001 ep0_tx_bdt_bank
1fff19c8 l     O .bss	00000008 reply_buffer
1fff19d4 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff19d9 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff19dc l     O .bss	00000004 rts_pin
1fff19e0 l     O .bss	00000001 rx_buffer_head
1fff19e1 l     O .bss	00000001 rx_buffer_tail
1fff19e4 l     O .bss	00000028 tx_buffer
1fff1a0c l     O .bss	00000040 rx_buffer
1fff1a4c l     O .bss	00000001 transmitting
1fff1a4d l     O .bss	00000001 tx_buffer_tail
1fff1a50 l     O .bss	00000004 transmit_pin
1fff1a54 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1a58 l     O .bss	00000004 rts_pin
1fff1a5c l     O .bss	00000001 transmitting
1fff1a5d l     O .bss	00000001 rx_buffer_tail
1fff1a60 l     O .bss	00000028 tx_buffer
1fff1a88 l     O .bss	00000040 rx_buffer
1fff1ac8 l     O .bss	00000001 rx_buffer_head
1fff1ac9 l     O .bss	00000001 tx_buffer_tail
1fff1acc l     O .bss	00000004 transmit_pin
1fff1ad0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1ad4 l     O .bss	00000004 rts_pin
1fff1ad8 l     O .bss	00000001 rx_buffer_head
1fff1ad9 l     O .bss	00000001 rx_buffer_tail
1fff1adc l     O .bss	00000028 tx_buffer
1fff1b04 l     O .bss	00000040 rx_buffer
1fff1b44 l     O .bss	00000001 transmitting
1fff1b45 l     O .bss	00000001 tx_buffer_tail
1fff1b48 l     O .bss	00000004 transmit_pin
1fff1b4c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1b50 l     O .bss	00000004 rts_pin
1fff1b54 l     O .bss	00000001 rx_buffer_head
1fff1b55 l     O .bss	00000001 rx_buffer_tail
1fff1b58 l     O .bss	00000040 tx_buffer
1fff1b98 l     O .bss	00000040 rx_buffer
1fff1bd8 l     O .bss	00000001 transmitting
1fff1bd9 l     O .bss	00000001 tx_buffer_tail
1fff1bdc l     O .bss	00000004 transmit_pin
1fff1be0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1be4 l     O .bss	00000004 rts_pin
1fff1be8 l     O .bss	00000001 rx_buffer_head
1fff1be9 l     O .bss	00000001 rx_buffer_tail
1fff1bec l     O .bss	00000028 tx_buffer
1fff1c14 l     O .bss	00000040 rx_buffer
1fff1c54 l     O .bss	00000001 transmitting
1fff1c55 l     O .bss	00000001 tx_buffer_tail
1fff1c58 l     O .bss	00000004 transmit_pin
1fff1c5c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c84 l     O .data	00000012 device_descriptor
1fff0cb0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1c60 l     O .bss	00000004 rts_pin
1fff1c64 l     O .bss	00000001 rx_buffer_head
1fff1c65 l     O .bss	00000001 rx_buffer_tail
1fff1c68 l     O .bss	00000028 tx_buffer
1fff1c90 l     O .bss	00000040 rx_buffer
1fff1cd0 l     O .bss	00000001 transmitting
1fff1cd1 l     O .bss	00000001 tx_buffer_tail
1fff1cd4 l     O .bss	00000004 transmit_pin
1fff1cd8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004770 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d80 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15bc l       .bss	00000000 __bss_start__
1fff1e74 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00003ac8  w    F .text	00000006 adc0_isr
00001b60 g     F .text	0000001c usb_serial_available
00003988 g     F .text	00000020 serial4_available
00003634  w    F .text	000000c4 yield
1fff0c98 g     O .data	00000018 usb_string_manufacturer_name_default
00003b74 g     F .text	00000020 serial_available
1fff1898 g     O .bss	00000004 usb_midi_handleProgramChange
00003a80  w    F .text	00000048 hard_fault_isr
00003ac8  w    F .text	00000006 dma_ch6_isr
00003728 g     F .text	00000020 Print::println()
0000385c g     F .text	00000020 serial2_available
00003ac8  w    F .text	00000006 uart0_lon_isr
00002a48 g     F .text	000000e8 usb_rx_memory
000036f8  w    F .text	00000002 serialEvent5()
00003ac8  w    F .text	00000006 dma_ch8_isr
00003ca0 g     F .text	00000020 serial6_available
00004748 g     F .text	00000002 __malloc_unlock
1fff18ac g     O .bss	00000004 usb_midi_handleAfterTouch
00001f00 g     F .text	000000e0 analog_init
00002b30 g     F .text	00000084 usb_tx
00003ac8  w    F .text	00000006 portcd_isr
1fff18bc g     O .bss	00000004 usb_midi_handleSysExComplete
000040c0 g     F .text	00000098 MillisTimer::runFromTimer()
00003ac8  w    F .text	00000006 can1_rx_warn_isr
00004dfc g       .fini	00000000 __exidx_end
00003ac8  w    F .text	00000006 dma_error_isr
1fff1d38 g     O .bss	00000001 usb_midi_msg_type
1fff1cf0 g     O .bss	00000001 EventResponder::runningFromYield
00003ac8  w    F .text	00000006 i2c0_isr
00004168 g     F .text	0000000c __errno
00003ac8  w    F .text	00000006 portd_isr
00003ac8  w    F .text	00000006 enet_error_isr
1fff1cdc g     O .bss	00000004 EventResponder::firstInterrupt
00003ac8  w    F .text	00000006 tpm1_isr
00003714  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00004b54 g     O .text	00000200 digital_pin_to_info_PGM
1fff1e70 g     O .bss	00000004 errno
00004dfc g       .fini	00000000 _etext
1fff15bc g       .bss	00000000 _sbss
00003760  w    F .text	00000002 serialEvent6()
1fff18a8 g     O .bss	00000004 usb_midi_handleVelocityChange
000021d0 g     F .text	0000001c digitalRead
00003ac8  w    F .text	00000006 porte_isr
00000494 g     F .text	000013b8 loop
00003ac8  w    F .text	00000006 portb_isr
1fff170c g     O .bss	00000014 step3
000024ec g     F .text	0000002c usb_midi_flush_output
00003ac8  w    F .text	00000006 spi1_isr
000039a8 g     F .text	000000d8 uart3_status_isr
00003f6c  w    F .text	00000002 serialEvent1()
1fff184c g     O .bss	00000018 led4
00003ac8  w    F .text	00000006 mcm_isr
00004058 g     F .text	00000068 MillisTimer::addToActiveList()
00002518 g     F .text	0000043c usb_midi_read
1fff1884 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1ce0 g     O .bss	00000004 EventResponder::lastInterrupt
0000387c g     F .text	0000010c uart1_status_isr
1fff1d3a g     O .bss	00000002 usb_midi_msg_sysex_len
00003ac8  w    F .text	00000006 randnum_isr
1fff188c g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff187c g     O .bss	00000004 systick_millis_count
00003a80  w    F .text	00000048 bus_fault_isr
00003ac8  w    F .text	00000006 watchdog_isr
00003ac8  w    F .text	00000006 i2c1_isr
1fff19d0 g     O .bss	00000001 usb_configuration
00003ac8  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00003748  w    F .text	00000002 serialEvent2()
00003ac8  w    F .text	00000006 i2c2_isr
1fff0c98  w    O .data	00000018 usb_string_manufacturer_name
1fff1e64 g     O .bss	0000000a usb_rx_byte_count_data
00003ac8  w    F .text	00000006 pit1_isr
000041c4 g     F .text	00000010 malloc
00003ac8  w    F .text	00000006 dma_ch4_isr
00003ac8  w    F .text	00000006 software_isr
00003ac8  w    F .text	00000006 dma_ch7_isr
00003ff4  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00003564 g     F .text	000000d0 usb_init
00003ac8  w    F .text	00000006 lptmr_isr
1fff1d00 g     O .bss	00000004 __malloc_top_pad
000021a0 g     F .text	00000024 rtc_set
1fff169c g     O .bss	00000024 button5
1fff1678 g     O .bss	00000024 button4
1fff0c40 g       .data	00000000 _sdata
1fff18dc g     O .bss	00000004 usb_midi_handleNoteOn
00003b40 g     F .text	00000034 kinetis_hsrun_enable
0000474c g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00001ae8 g     F .text	00000048 usb_serial_getchar
00003ac8  w    F .text	00000006 can1_bus_off_isr
00003ac8  w    F .text	00000006 ftm2_isr
1fff1d2c g     O .bss	00000008 usb_cdc_line_coding
000021c4 g     F .text	0000000a digitalWrite
00003ac8  w    F .text	00000006 uart5_status_isr
00003cc0 g     F .text	000000e4 lpuart0_status_isr
1fff1ce8 g     O .bss	00000004 EventResponder::lastYield
00004d80 g     O .text	00000005 usb_endpoint_config_table
00003ac8  w    F .text	00000006 dma_ch9_isr
00003ac8  w    F .text	00000006 pit2_isr
00003e74 g     F .text	00000020 serial3_available
1fff1720 g     O .bss	00000014 step4
1fff1cfc g     O .bss	00000004 __malloc_max_sbrked_mem
000021ec g     F .text	0000000a pinMode
00002994 g     F .text	0000004c usb_free
00003ac8  w    F .text	00000006 i2c3_isr
1fff1804 g     O .bss	00000018 led1
1fff18a4 g     O .bss	00000004 usb_midi_handleSysExPartial
00004dfc g       .fini	00000000 __exidx_start
00003ac8  w    F .text	00000006 pit0_isr
1fff1d3c g     O .bss	00000001 usb_midi_msg_data1
1fff1cec g     O .bss	00000004 EventResponder::firstYield
00004ddc g     O .text	00000004 _global_impure_ptr
00003ac8  w    F .text	00000006 can1_error_isr
00004174 g     F .text	00000050 __libc_init_array
1fff1e74 g       .bss	00000000 __bss_end
00003ac8  w    F .text	00000006 can0_wakeup_isr
00003ac8  w    F .text	00000006 flash_cmd_isr
1fff17a4 g     O .bss	0000001c knob5
000036fc  w    F .text	00000004 usb_serial_class::clear()
00003e94 g     F .text	000000d8 uart2_status_isr
00003ae0 g     F .text	0000002c _sbrk
1fff1cf4 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c80 g     O .data	00000004 __brkval
1fff1874 g     O .bss	00000001 usb_cdc_line_rtsdtr
00001d74 g     F .text	00000048 usb_serial_flush_callback
00004de0 g     F .text	00000000 _init
1fff0c40 g     O .data	00000010 steps
00003ac8  w    F .text	00000006 svcall_isr
00003ac8  w    F .text	00000006 dma_ch15_isr
00003ac8  w    F .text	00000006 uart1_error_isr
00004790 g     F .text	00000028 __libc_fini_array
00003ac8  w    F .text	00000006 usbhs_phy_isr
1fff1e74 g       .bss	00000000 _ebss
00003ac8 g     F .text	00000006 unused_isr
00003ac8  w    F .text	00000006 spi0_isr
00003ac8  w    F .text	00000006 dma_ch3_isr
00003ac8  w    F .text	00000006 flash_error_isr
1fff1750 g     O .bss	0000001c knob2
00003764 g     F .text	00000020 serial5_available
00003ac8  w    F .text	00000006 uart5_error_isr
00003ac8  w    F .text	00000006 rtc_seconds_isr
00003ac8  w    F .text	00000006 pdb_isr
00003a80  w    F .text	00000048 usage_fault_isr
00003ac8  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00003ac8  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1d34 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff17f0 g     O .bss	00000010 transport
1fff0c50 g     O .data	00000018 leds
00004158 g     F .text	00000010 systick_isr
00003ac8  w    F .text	00000006 rtc_alarm_isr
00003ac8  w    F .text	00000006 dma_ch2_isr
1fff0c70 g     O .data	00000010 Serial
00003ac8  w    F .text	00000006 ftm1_isr
0000371c  w    F .text	00000006 usb_serial_class::write(unsigned char)
00003ad0  w    F .text	0000000c startup_early_hook
00003ac8  w    F .text	00000006 dma_ch13_isr
00003ac8  w    F .text	00000006 uart2_error_isr
00001b30 g     F .text	00000030 usb_serial_peekchar
1fff0d64 g     O .data	00000016 usb_string_serial_number_default
00003a80 g     F .text	00000048 fault_isr
00004854 g     F .text	000001d0 _free_r
1fff18c8 g     O .bss	00000004 usb_midi_handleStop
00003ac8  w    F .text	00000006 usb_charge_isr
0000370c  w    F .text	00000004 usb_serial_class::flush()
00003ac8  w    F .text	00000006 cmt_isr
00003ac8  w    F .text	00000006 usbhs_isr
1fff18d8 g     O .bss	00000004 usb_midi_handleControlChange
1fff15b8 g     O .data	00000004 __malloc_sbrk_base
00003704  w    F .text	00000004 usb_serial_class::read()
00003ac8  w    F .text	00000006 ftm3_isr
00003ac8  w    F .text	00000006 tsi0_isr
1fff15f0 g     O .bss	00000018 led6
1fff1734 g     O .bss	0000001c knob1
00003ac8  w    F .text	00000006 spi2_isr
0000374c  w    F .text	00000002 serialEvent4()
00003724  w    F .text	00000002 serialEvent()
1fff1951 g     O .bss	00000001 usb_reboot_timer
00004a24 g     F .text	000000a4 __register_exitproc
00001b7c g     F .text	00000038 usb_serial_flush_input
00001cbc g     F .text	00000018 usb_serial_putchar
1fff1d04 g     O .bss	00000028 __malloc_current_mallinfo
00003ac8  w    F .text	00000006 can0_bus_off_isr
1fff15d8 g     O .bss	00000018 led5
1fff19c5 g     O .bss	00000001 usb_rx_memory_needed
00002bb4 g     F .text	000009b0 usb_isr
1fff16e4 g     O .bss	00000014 step1
1fff18d4 g     O .bss	00000004 usb_midi_handleNoteOff
00004d54  w    O .text	00000028 vtable for usb_serial_class
1fff176c g     O .bss	0000001c knob3
00003ac8  w    F .text	00000006 uart3_error_isr
1fff1ce4 g     O .bss	00000004 MillisTimer::listActive
00003ac8  w    F .text	00000006 porta_isr
1fff1608 g     O .bss	00000001 controller
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00003ac8  w    F .text	00000006 low_voltage_isr
1fff1630 g     O .bss	00000024 button2
1fff11ac g     O .data	00000408 __malloc_av_
00003ac8  w    F .text	00000006 can0_error_isr
0000229c g     F .text	0000016c _init_Teensyduino_internal_
00001d1c g     F .text	00000058 usb_serial_flush_output
00003ac8  w    F .text	00000006 dma_ch12_isr
00004744 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00003ac8  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00003ac8  w    F .text	00000006 pit3_isr
00003ac8  w    F .text	00000006 enet_rx_isr
00003ac8  w    F .text	00000006 portc_isr
00003750 g     F .text	00000010 main
1fff1cf8 g     O .bss	00000004 __malloc_max_total_mem
1fff1834 g     O .bss	00000018 led3
00003a80  w    F .text	00000048 memmanage_fault_isr
00003da4 g     F .text	00000084 usb_init_serialnumber
1fff1800 g     O .bss	00000001 currentMode
00004df8 g       .text	00000000 __init_array_end
000041d4 g     F .text	00000570 _malloc_r
00003ac8  w    F .text	00000006 debugmonitor_isr
1fff18a0 g     O .bss	00000004 usb_midi_handleSongPosition
00003f74 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1890 g     O .bss	00000004 usb_midi_handleContinue
1fff1d3d g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00003ac8  w    F .text	00000006 cmp1_isr
1fff1654 g     O .bss	00000024 button3
00003ac8  w    F .text	00000006 ftm0_isr
000047b8 g     F .text	0000009c _malloc_trim_r
1fff0d60 g     O .data	00000004 string0
00001bb4 g     F .text	00000108 usb_serial_write
00003adc  w    F .text	00000002 startup_late_hook
00003708  w    F .text	00000004 usb_serial_class::available()
1fff1d3e g     O .bss	00000001 usb_midi_msg_cable
1fff0d48  w    O .data	00000018 usb_string_product_name
000021f8 g     F .text	000000a4 delay
00003ac8  w    F .text	00000006 tpm0_isr
00004df8 g     F .fini	00000000 _fini
1fff16f8 g     O .bss	00000014 step2
00003ac8  w    F .text	00000006 i2s0_rx_isr
00003ac8  w    F .text	00000006 uart4_error_isr
00002450 g     F .text	0000009c usb_midi_write_packed
00004784 g     F .text	0000000c atexit
00003ac8  w    F .text	00000006 can0_message_isr
1fff11a8 g     O .data	00000004 _impure_ptr
00003ac8  w    F .text	00000006 can1_message_isr
00003ac8  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff18b8 g     O .bss	00000004 usb_midi_handleTuneRequest
00004dec g       .text	00000000 __preinit_array_end
00003ac8  w    F .text	00000006 sdhc_isr
1fff1d3f g     O .bss	00000001 usb_midi_msg_channel
00000490 g     F .text	00000002 setup
00004d88 g     O .text	00000054 usb_descriptor_list
000029e0 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1788 g     O .bss	0000001c knob4
00003ac8  w    F .text	00000006 dma_ch10_isr
1fff17c0 g     O .bss	00000030 sequence1
1fff18b0 g     O .bss	00000004 usb_midi_handleStart
00003ac8  w    F .text	00000006 uart0_error_isr
00002954 g     F .text	00000040 usb_malloc
00003ac8  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00001cd4 g     F .text	00000048 usb_serial_write_buffer_free
00003ac8  w    F .text	00000006 enet_timer_isr
1fff16c0 g     O .bss	00000024 button6
1fff160c g     O .bss	00000024 button1
1fff15bc g       .data	00000000 _edata
00003ac8  w    F .text	00000006 i2s0_tx_isr
00003ac8  w    F .text	00000006 adc1_isr
00003710  w    F .text	00000004 usb_serial_class::availableForWrite()
00003ac8  w    F .text	00000006 cmp0_isr
1fff1880 g     O .bss	00000004 usb_midi_handleClock
00003e28 g     F .text	0000004c ultoa
00004010 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15b4 g     O .data	00000004 __malloc_trim_threshold
00003700  w    F .text	00000004 usb_serial_class::peek()
1fff1864 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff189c g     O .bss	00000004 usb_midi_handlePitchChange
00003ac8  w    F .text	00000006 pit_isr
1fff18b4 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00003ac8  w    F .text	00000006 dac0_isr
00004dec g       .text	00000000 __init_array_start
00003ac8  w    F .text	00000006 can1_tx_warn_isr
00001fe0 g     F .text	000000fc analogRead
1fff1d40 g     O .bss	00000122 usb_midi_msg_sysex
00003b94 g     F .text	0000010c uart0_status_isr
00003ac8  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d48 g     O .data	00000018 usb_string_product_name_default
00003ac8  w    F .text	00000006 dma_ch1_isr
00002a1c g     F .text	0000002c usb_tx_packet_count
00003ac8  w    F .text	00000006 dma_ch5_isr
00003ac8  w    F .text	00000006 can0_rx_warn_isr
00003ac8  w    F .text	00000006 can0_tx_warn_isr
00003784 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00003b0c g     F .text	00000034 kinetis_hsrun_disable
00004dec g       .text	00000000 __preinit_array_start
00003f70  w    F .text	00000002 serialEvent3()
1fff18d0 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff181c g     O .bss	00000018 led2
00003ac8  w    F .text	00000006 cmp2_isr
00004054 g     F .text	00000004 pendablesrvreq_isr
00003ac8  w    F .text	00000006 wakeup_isr
00003ac8  w    F .text	00000006 cmp3_isr
1fff1888 g     O .bss	00000004 usb_midi_handleActiveSensing
00003ac8  w    F .text	00000006 tpm2_isr
00003ac8  w    F .text	00000006 dma_ch0_isr
1fff0d64  w    O .data	00000016 usb_string_serial_number
00003ac8  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... .....:...:..
      10:	.:...:...:...:..
      20:	.:...:...:...:..
      30:	.:...:..U@..YA..
      40:	.:...:...:...:..
      50:	.:...:...:...:..
      60:	.:...:...:...:..
      70:	.:...:...:...:..
      80:	.:...:...:...:..
      90:	.:...:...:...:..
      a0:	.:...:...:...:..
      b0:	.:...:...:...;..
      c0:	.:..}8...:...>..
      d0:	.:...9...:...:..
      e0:	.:...:...:...:..
      f0:	.:...:...:...:..
     100:	.:...:...:...:..
     110:	.:...+...:...:..
     120:	.:...:...:...:..
     130:	.:...:...:...:..
     140:	.:...:...7...:..
     150:	.:...:...:...:..
     160:	.:...:...:...:..
     170:	.:...:...:...:..
     180:	.:...:...:...:..
     190:	.:...:...<...:..
     1a0:	.:...:...:...:..
     1b0:	.:...:...:...:..
     1c0:	.:...:...:...:..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	3ad0 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	229c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	21a0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	21a0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	4174 <__libc_init_array>

	startup_late_hook();
     33a:	bl	3adc <startup_late_hook>
	main();
     33e:	bl	3750 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15bc
     374:	.word	0x00004df8
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15bc
     380:	.word	0x1fff1e74
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15bc
     42c:	.word	0x00000000
     430:	.word	0x00004dfc

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15c0
     460:	.word	0x00004dfc
     464:	.word	0x1fff15bc
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #75	; 0x4b
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	21ec <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	21c4 <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob2(A1, sequence1, transport, SECOND, 1);
Knob knob3(A2, sequence1, transport, THIRD, 2);
Knob knob4(A3, sequence1, transport, FOURTH, 3);
Knob knob5(A4, sequence1, transport, FIFTH, 4);

void setup() {
     490:	bx	lr
     492:	nop

00000494 <loop>:
  Serial.begin(9600);
}

void loop() {
     494:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     498:	movs	r0, #0
     49a:	sub	sp, #232	; 0xe8
     49c:	bl	2518 <usb_midi_read>
  if (usbMIDI.read()) {
     4a0:	cmp	r0, #0
     4a2:	bne.w	bb0 <loop+0x71c>
     4a6:	ldr	r4, [pc, #668]	; (744 <loop+0x2b0>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4a8:	ldr	r6, [pc, #668]	; (748 <loop+0x2b4>)
     4aa:	ldrb.w	r0, [r6, #32]
     4ae:	bl	21d0 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b2:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b4:	str	r0, [r6, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b6:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b8:	mov	r5, r0
     4ba:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4bc:	beq.w	be0 <loop+0x74c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c0:	ldr	r3, [r4, #0]
     4c2:	str	r3, [sp, #132]	; 0x84
	return ret;
     4c4:	ldr	r3, [sp, #132]	; 0x84
        m_lastDebounceTime = millis();
     4c6:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c8:	ldr	r1, [r4, #0]
     4ca:	str	r1, [sp, #128]	; 0x80
	return ret;
     4cc:	ldr	r1, [sp, #128]	; 0x80
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ce:	ldr.w	r8, [pc, #628]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4d2:	cmp	r1, r3
     4d4:	beq.n	4e8 <loop+0x54>
        if (reading != m_state) {
     4d6:	ldr	r3, [r6, #4]
     4d8:	ldr	r7, [pc, #620]	; (748 <loop+0x2b4>)
     4da:	cmp	r5, r3
     4dc:	beq.w	bf8 <loop+0x764>
          m_state = reading;
     4e0:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     4e2:	cmp	r5, #0
     4e4:	beq.w	c08 <loop+0x774>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e8:	ldr	r5, [pc, #608]	; (74c <loop+0x2b8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     4ea:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4ec:	ldrb.w	r0, [r5, #32]
     4f0:	bl	21d0 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f4:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f6:	str	r0, [r5, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f8:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4fa:	mov	r6, r0
     4fc:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4fe:	beq.w	bec <loop+0x758>
     502:	ldr	r3, [r4, #0]
     504:	str	r3, [sp, #124]	; 0x7c
	return ret;
     506:	ldr	r3, [sp, #124]	; 0x7c
        m_lastDebounceTime = millis();
     508:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     50a:	ldr	r1, [r4, #0]
     50c:	str	r1, [sp, #120]	; 0x78
	return ret;
     50e:	ldr	r1, [sp, #120]	; 0x78
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     510:	ldr.w	r8, [pc, #560]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     514:	cmp	r1, r3
     516:	beq.n	52a <loop+0x96>
        if (reading != m_state) {
     518:	ldr	r3, [r5, #4]
     51a:	ldr	r7, [pc, #560]	; (74c <loop+0x2b8>)
     51c:	cmp	r6, r3
     51e:	beq.w	bf4 <loop+0x760>
          m_state = reading;
     522:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     524:	cmp	r6, #0
     526:	beq.w	c40 <loop+0x7ac>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52a:	ldr	r6, [pc, #548]	; (750 <loop+0x2bc>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     52c:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52e:	ldrb.w	r0, [r6, #32]
     532:	bl	21d0 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     536:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     538:	str	r0, [r6, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     53a:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     53c:	mov	r5, r0
     53e:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     540:	beq.w	be8 <loop+0x754>
     544:	ldr	r3, [r4, #0]
     546:	str	r3, [sp, #116]	; 0x74
	return ret;
     548:	ldr	r3, [sp, #116]	; 0x74
        m_lastDebounceTime = millis();
     54a:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     54c:	ldr	r1, [r4, #0]
     54e:	str	r1, [sp, #112]	; 0x70
	return ret;
     550:	ldr	r1, [sp, #112]	; 0x70
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     552:	ldr.w	r8, [pc, #496]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     556:	cmp	r1, r3
     558:	beq.n	56c <loop+0xd8>
        if (reading != m_state) {
     55a:	ldr	r3, [r6, #4]
     55c:	ldr	r7, [pc, #496]	; (750 <loop+0x2bc>)
     55e:	cmp	r5, r3
     560:	beq.w	bf0 <loop+0x75c>
          m_state = reading;
     564:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     566:	cmp	r5, #0
     568:	beq.w	c78 <loop+0x7e4>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     56c:	ldr	r5, [pc, #484]	; (754 <loop+0x2c0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     56e:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     570:	ldrb.w	r0, [r5, #32]
     574:	bl	21d0 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     578:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57a:	str	r0, [r5, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     57c:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57e:	mov	r6, r0
     580:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     582:	beq.w	be4 <loop+0x750>
     586:	ldr	r3, [r4, #0]
     588:	str	r3, [sp, #108]	; 0x6c
	return ret;
     58a:	ldr	r3, [sp, #108]	; 0x6c
        m_lastDebounceTime = millis();
     58c:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     58e:	ldr	r1, [r4, #0]
     590:	str	r1, [sp, #104]	; 0x68
	return ret;
     592:	ldr	r1, [sp, #104]	; 0x68
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     594:	ldr.w	r8, [pc, #428]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     598:	cmp	r3, r1
     59a:	beq.n	5ae <loop+0x11a>
        if (reading != m_state) {
     59c:	ldr	r3, [r5, #4]
     59e:	ldr	r7, [pc, #436]	; (754 <loop+0x2c0>)
     5a0:	cmp	r6, r3
     5a2:	beq.w	bfc <loop+0x768>
          m_state = reading;
     5a6:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5a8:	cmp	r6, #0
     5aa:	beq.w	cb0 <loop+0x81c>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ae:	ldr	r6, [pc, #424]	; (758 <loop+0x2c4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5b0:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5b2:	ldrb.w	r0, [r6, #32]
     5b6:	bl	21d0 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5ba:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5bc:	str	r0, [r6, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5be:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5c0:	mov	r5, r0
     5c2:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5c4:	beq.w	bd8 <loop+0x744>
     5c8:	ldr	r3, [r4, #0]
     5ca:	str	r3, [sp, #100]	; 0x64
	return ret;
     5cc:	ldr	r3, [sp, #100]	; 0x64
        m_lastDebounceTime = millis();
     5ce:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d0:	ldr	r1, [r4, #0]
     5d2:	str	r1, [sp, #96]	; 0x60
	return ret;
     5d4:	ldr	r1, [sp, #96]	; 0x60
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d6:	ldr.w	r8, [pc, #364]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5da:	cmp	r1, r3
     5dc:	beq.n	5f0 <loop+0x15c>
        if (reading != m_state) {
     5de:	ldr	r3, [r6, #4]
     5e0:	ldr	r7, [pc, #372]	; (758 <loop+0x2c4>)
     5e2:	cmp	r5, r3
     5e4:	beq.w	c00 <loop+0x76c>
          m_state = reading;
     5e8:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5ea:	cmp	r5, #0
     5ec:	beq.w	ce8 <loop+0x854>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f0:	ldr	r5, [pc, #360]	; (75c <loop+0x2c8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5f2:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f4:	ldrb.w	r0, [r5, #32]
     5f8:	bl	21d0 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5fc:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5fe:	str	r0, [r5, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     600:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     602:	mov	r6, r0
     604:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     606:	beq.w	bdc <loop+0x748>
     60a:	ldr	r3, [r4, #0]
     60c:	str	r3, [sp, #92]	; 0x5c
	return ret;
     60e:	ldr	r3, [sp, #92]	; 0x5c
        m_lastDebounceTime = millis();
     610:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     612:	ldr	r1, [r4, #0]
     614:	str	r1, [sp, #88]	; 0x58
	return ret;
     616:	ldr	r1, [sp, #88]	; 0x58
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     618:	ldr.w	r8, [pc, #296]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     61c:	cmp	r1, r3
     61e:	beq.n	664 <loop+0x1d0>
        if (reading != m_state) {
     620:	ldr	r3, [r5, #4]
     622:	ldr	r7, [pc, #312]	; (75c <loop+0x2c8>)
     624:	cmp	r6, r3
     626:	beq.w	c04 <loop+0x770>
          m_state = reading;
     62a:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     62c:	cbnz	r6, 664 <loop+0x1d0>
     62e:	ldrb	r3, [r7, #16]
     630:	cmp	r3, #0
     632:	bne.w	1164 <loop+0xcd0>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     636:	ldrb	r3, [r7, #17]
     638:	cmp	r3, #0
     63a:	bne.w	138a <loop+0xef6>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
     63e:	ldr	r3, [r7, #24]
     640:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     644:	clz	r1, r1
     648:	lsrs	r1, r1, #5
     64a:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     64c:	uxtb	r0, r0
     64e:	bl	21c4 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     652:	ldr	r3, [r7, #28]
     654:	ldr	r1, [r7, #0]
     656:	ldr	r2, [r7, #12]
     658:	ldr.w	r1, [r3, r1, lsl #2]
      m_velocity = 100;
      m_length = 4;
    };

    void toggle () {
      m_state = !m_state;
     65c:	ldrb	r3, [r1, #4]
     65e:	eor.w	r3, r3, #1
     662:	strb	r3, [r1, #4]
    };

    int check () {
      if (blinking && millis() - lastBlink > blinkLength) {
     664:	ldr	r6, [pc, #248]	; (760 <loop+0x2cc>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     666:	str	r2, [r5, #8]
     668:	ldrb	r3, [r6, #16]
     66a:	cmp	r3, #0
     66c:	beq.w	b68 <loop+0x6d4>
     670:	ldr	r3, [r4, #0]
     672:	str	r3, [sp, #84]	; 0x54
	return ret;
     674:	ldr	r3, [sp, #84]	; 0x54
     676:	ldr	r1, [r6, #8]
     678:	ldr	r2, [r6, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     67a:	ldr	r7, [pc, #200]	; (744 <loop+0x2b0>)
     67c:	subs	r3, r3, r1
     67e:	cmp	r3, r2
     680:	bhi.w	b48 <loop+0x6b4>
     684:	ldr	r5, [pc, #220]	; (764 <loop+0x2d0>)
     686:	ldrb	r3, [r5, #16]
     688:	cmp	r3, #0
     68a:	beq.w	b00 <loop+0x66c>
     68e:	ldr	r3, [r4, #0]
     690:	str	r3, [sp, #72]	; 0x48
	return ret;
     692:	ldr	r3, [sp, #72]	; 0x48
     694:	ldr	r1, [r5, #8]
     696:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     698:	ldr	r7, [pc, #168]	; (744 <loop+0x2b0>)
     69a:	subs	r3, r3, r1
     69c:	cmp	r3, r2
     69e:	bhi.w	ae0 <loop+0x64c>
     6a2:	ldr	r5, [pc, #196]	; (768 <loop+0x2d4>)
     6a4:	ldrb	r3, [r5, #16]
     6a6:	cmp	r3, #0
     6a8:	beq.w	a98 <loop+0x604>
     6ac:	ldr	r3, [r4, #0]
     6ae:	str	r3, [sp, #60]	; 0x3c
	return ret;
     6b0:	ldr	r3, [sp, #60]	; 0x3c
     6b2:	ldr	r1, [r5, #8]
     6b4:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6b6:	ldr	r7, [pc, #140]	; (744 <loop+0x2b0>)
     6b8:	subs	r3, r3, r1
     6ba:	cmp	r3, r2
     6bc:	bhi.w	a78 <loop+0x5e4>
     6c0:	ldr	r5, [pc, #168]	; (76c <loop+0x2d8>)
     6c2:	ldrb	r3, [r5, #16]
     6c4:	cmp	r3, #0
     6c6:	beq.w	a0c <loop+0x578>
     6ca:	ldr	r3, [r4, #0]
     6cc:	str	r3, [sp, #48]	; 0x30
	return ret;
     6ce:	ldr	r3, [sp, #48]	; 0x30
     6d0:	ldr	r1, [r5, #8]
     6d2:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6d4:	ldr	r7, [pc, #108]	; (744 <loop+0x2b0>)
     6d6:	subs	r3, r3, r1
     6d8:	cmp	r3, r2
     6da:	bhi.w	9ec <loop+0x558>
     6de:	ldr	r5, [pc, #144]	; (770 <loop+0x2dc>)
     6e0:	ldrb	r3, [r5, #16]
     6e2:	cmp	r3, #0
     6e4:	beq.w	9a4 <loop+0x510>
     6e8:	ldr	r3, [r4, #0]
     6ea:	str	r3, [sp, #36]	; 0x24
	return ret;
     6ec:	ldr	r3, [sp, #36]	; 0x24
     6ee:	ldr	r1, [r5, #8]
     6f0:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6f2:	ldr	r7, [pc, #80]	; (744 <loop+0x2b0>)
     6f4:	subs	r3, r3, r1
     6f6:	cmp	r3, r2
     6f8:	bhi.w	984 <loop+0x4f0>
     6fc:	ldr	r5, [pc, #116]	; (774 <loop+0x2e0>)
     6fe:	ldrb	r3, [r5, #16]
     700:	cmp	r3, #0
     702:	beq.w	940 <loop+0x4ac>
     706:	ldr	r3, [r4, #0]
     708:	str	r3, [sp, #24]
	return ret;
     70a:	ldr	r3, [sp, #24]
     70c:	ldr	r1, [r5, #8]
     70e:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     710:	ldr	r7, [pc, #48]	; (744 <loop+0x2b0>)
     712:	subs	r3, r3, r1
     714:	cmp	r3, r2
     716:	bhi.w	920 <loop+0x48c>
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     71a:	ldr	r4, [pc, #92]	; (778 <loop+0x2e4>)
     71c:	ldrb	r0, [r4, #0]
     71e:	bl	1fe0 <analogRead>

      int diff = abs(m_value - m_lastValue);
     722:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     724:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     726:	cmp	r0, r3
     728:	beq.n	7b2 <loop+0x31e>
     72a:	subs	r3, r0, r3
     72c:	cmp	r3, #0
     72e:	it	lt
     730:	neglt	r3, r3
     732:	cmp	r3, #10
     734:	ble.n	7b2 <loop+0x31e>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     736:	ldrb	r3, [r4, #24]
     738:	cmp	r3, #4
     73a:	beq.w	e18 <loop+0x984>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     73e:	ldr	r3, [pc, #60]	; (77c <loop+0x2e8>)
     740:	ldrb	r3, [r3, #0]
     742:	b.n	780 <loop+0x2ec>
     744:	.word	0x1fff187c
     748:	.word	0x1fff160c
     74c:	.word	0x1fff1630
     750:	.word	0x1fff1654
     754:	.word	0x1fff1678
     758:	.word	0x1fff169c
     75c:	.word	0x1fff16c0
     760:	.word	0x1fff1804
     764:	.word	0x1fff181c
     768:	.word	0x1fff1834
     76c:	.word	0x1fff184c
     770:	.word	0x1fff15d8
     774:	.word	0x1fff15f0
     778:	.word	0x1fff1734
     77c:	.word	0x1fff1800
     780:	cmp	r3, #1
     782:	beq.w	fcc <loop+0xb38>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     786:	cmp	r3, #0
     788:	beq.w	d46 <loop+0x8b2>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     78c:	cmp	r3, #2
     78e:	bne.n	7b0 <loop+0x31c>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     790:	ldr	r2, [r4, #16]
     792:	ldr	r1, [r4, #12]
      m_controller.controlChange(0, 123, 127);
    };

    void controlLength (int value) {
      int newValue = map(value, 0, 1023, 24, 1);
      m_length = newValue;
     794:	mvn.w	r3, #21
     798:	mul.w	r3, r3, r0
     79c:	cmp	r3, #0
     79e:	add.w	r2, r2, r1, lsl #2
     7a2:	it	lt
     7a4:	addwlt	r3, r3, #1023	; 0x3ff
     7a8:	ldr	r2, [r2, #4]
     7aa:	asrs	r3, r3, #10
     7ac:	adds	r3, #24
     7ae:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     7b0:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     7b2:	ldr	r4, [pc, #672]	; (a54 <loop+0x5c0>)
     7b4:	ldrb	r0, [r4, #0]
     7b6:	bl	1fe0 <analogRead>

      int diff = abs(m_value - m_lastValue);
     7ba:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     7bc:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     7be:	cmp	r0, r3
     7c0:	beq.n	80c <loop+0x378>
     7c2:	subs	r3, r0, r3
     7c4:	cmp	r3, #0
     7c6:	it	lt
     7c8:	neglt	r3, r3
     7ca:	cmp	r3, #10
     7cc:	ble.n	80c <loop+0x378>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     7ce:	ldrb	r3, [r4, #24]
     7d0:	cmp	r3, #4
     7d2:	beq.w	e34 <loop+0x9a0>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     7d6:	ldr	r3, [pc, #640]	; (a58 <loop+0x5c4>)
     7d8:	ldrb	r3, [r3, #0]
     7da:	cmp	r3, #1
     7dc:	beq.w	f78 <loop+0xae4>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     7e0:	cmp	r3, #0
     7e2:	beq.w	dde <loop+0x94a>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     7e6:	cmp	r3, #2
     7e8:	bne.n	80a <loop+0x376>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     7ea:	ldr	r2, [r4, #16]
     7ec:	ldr	r1, [r4, #12]
     7ee:	mvn.w	r3, #21
     7f2:	mul.w	r3, r3, r0
     7f6:	cmp	r3, #0
     7f8:	add.w	r2, r2, r1, lsl #2
     7fc:	it	lt
     7fe:	addwlt	r3, r3, #1023	; 0x3ff
     802:	ldr	r2, [r2, #4]
     804:	asrs	r3, r3, #10
     806:	adds	r3, #24
     808:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     80a:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     80c:	ldr	r4, [pc, #588]	; (a5c <loop+0x5c8>)
     80e:	ldrb	r0, [r4, #0]
     810:	bl	1fe0 <analogRead>

      int diff = abs(m_value - m_lastValue);
     814:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     816:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     818:	cmp	r0, r3
     81a:	beq.n	866 <loop+0x3d2>
     81c:	subs	r3, r0, r3
     81e:	cmp	r3, #0
     820:	it	lt
     822:	neglt	r3, r3
     824:	cmp	r3, #10
     826:	ble.n	866 <loop+0x3d2>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     828:	ldrb	r3, [r4, #24]
     82a:	cmp	r3, #4
     82c:	beq.w	e6c <loop+0x9d8>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     830:	ldr	r3, [pc, #548]	; (a58 <loop+0x5c4>)
     832:	ldrb	r3, [r3, #0]
     834:	cmp	r3, #1
     836:	beq.w	f94 <loop+0xb00>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     83a:	cmp	r3, #0
     83c:	beq.w	dc0 <loop+0x92c>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     840:	cmp	r3, #2
     842:	bne.n	864 <loop+0x3d0>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     844:	ldr	r2, [r4, #16]
     846:	ldr	r1, [r4, #12]
     848:	mvn.w	r3, #21
     84c:	mul.w	r3, r3, r0
     850:	cmp	r3, #0
     852:	add.w	r2, r2, r1, lsl #2
     856:	it	lt
     858:	addwlt	r3, r3, #1023	; 0x3ff
     85c:	ldr	r2, [r2, #4]
     85e:	asrs	r3, r3, #10
     860:	adds	r3, #24
     862:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     864:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     866:	ldr	r4, [pc, #504]	; (a60 <loop+0x5cc>)
     868:	ldrb	r0, [r4, #0]
     86a:	bl	1fe0 <analogRead>

      int diff = abs(m_value - m_lastValue);
     86e:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     870:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     872:	cmp	r0, r3
     874:	beq.n	8c0 <loop+0x42c>
     876:	subs	r3, r0, r3
     878:	cmp	r3, #0
     87a:	it	lt
     87c:	neglt	r3, r3
     87e:	cmp	r3, #10
     880:	ble.n	8c0 <loop+0x42c>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     882:	ldrb	r3, [r4, #24]
     884:	cmp	r3, #4
     886:	beq.w	e50 <loop+0x9bc>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     88a:	ldr	r3, [pc, #460]	; (a58 <loop+0x5c4>)
     88c:	ldrb	r3, [r3, #0]
     88e:	cmp	r3, #1
     890:	beq.w	fb0 <loop+0xb1c>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     894:	cmp	r3, #0
     896:	beq.w	d84 <loop+0x8f0>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     89a:	cmp	r3, #2
     89c:	bne.n	8be <loop+0x42a>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     89e:	ldr	r2, [r4, #16]
     8a0:	ldr	r1, [r4, #12]
     8a2:	mvn.w	r3, #21
     8a6:	mul.w	r3, r3, r0
     8aa:	cmp	r3, #0
     8ac:	add.w	r2, r2, r1, lsl #2
     8b0:	it	lt
     8b2:	addwlt	r3, r3, #1023	; 0x3ff
     8b6:	ldr	r2, [r2, #4]
     8b8:	asrs	r3, r3, #10
     8ba:	adds	r3, #24
     8bc:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     8be:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     8c0:	ldr	r4, [pc, #416]	; (a64 <loop+0x5d0>)
     8c2:	ldrb	r0, [r4, #0]
     8c4:	bl	1fe0 <analogRead>

      int diff = abs(m_value - m_lastValue);
     8c8:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     8ca:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     8cc:	cmp	r0, r3
     8ce:	beq.n	91a <loop+0x486>
     8d0:	subs	r3, r0, r3
     8d2:	cmp	r3, #0
     8d4:	it	lt
     8d6:	neglt	r3, r3
     8d8:	cmp	r3, #10
     8da:	ble.n	91a <loop+0x486>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     8dc:	ldrb	r3, [r4, #24]
     8de:	cmp	r3, #4
     8e0:	beq.w	dfc <loop+0x968>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     8e4:	ldr	r3, [pc, #368]	; (a58 <loop+0x5c4>)
     8e6:	ldrb	r3, [r3, #0]
     8e8:	cmp	r3, #1
     8ea:	beq.w	fea <loop+0xb56>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     8ee:	cmp	r3, #0
     8f0:	beq.w	da2 <loop+0x90e>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     8f4:	cmp	r3, #2
     8f6:	bne.n	918 <loop+0x484>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     8f8:	ldr	r2, [r4, #16]
     8fa:	ldr	r1, [r4, #12]
     8fc:	mvn.w	r3, #21
     900:	mul.w	r3, r3, r0
     904:	cmp	r3, #0
     906:	add.w	r2, r2, r1, lsl #2
     90a:	it	lt
     90c:	addwlt	r3, r3, #1023	; 0x3ff
     910:	ldr	r2, [r2, #4]
     912:	asrs	r3, r3, #10
     914:	adds	r3, #24
     916:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     918:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     91a:	add	sp, #232	; 0xe8
     91c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        digitalWrite(m_pin, !digitalRead(m_pin));
     920:	ldrb	r6, [r5, #0]
     922:	mov	r0, r6
     924:	bl	21d0 <digitalRead>
     928:	clz	r1, r0
     92c:	lsrs	r1, r1, #5
     92e:	mov	r0, r6
     930:	bl	21c4 <digitalWrite>
     934:	ldr	r3, [r7, #0]
     936:	str	r3, [sp, #20]
	return ret;
     938:	ldr	r3, [sp, #20]
        blinking = false;
        lastBlink = millis();        
     93a:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     93c:	movs	r3, #0
     93e:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && millis() - lastBlink > blinkLength) {
     940:	ldr	r6, [r5, #20]
     942:	ldr	r5, [pc, #292]	; (a68 <loop+0x5d4>)
     944:	cmp	r6, #0
     946:	ble.w	71a <loop+0x286>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     94a:	ldr	r3, [r4, #0]
     94c:	str	r3, [sp, #16]
	return ret;
     94e:	ldr	r3, [sp, #16]
     950:	ldr	r1, [r5, #8]
     952:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     954:	ldr	r7, [pc, #276]	; (a6c <loop+0x5d8>)
     956:	subs	r3, r3, r1
     958:	cmp	r3, r2
     95a:	bls.w	71a <loop+0x286>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     95e:	ldrb	r4, [r5, #0]
     960:	mov	r0, r4
     962:	bl	21d0 <digitalRead>
     966:	clz	r1, r0
     96a:	lsrs	r1, r1, #5
     96c:	mov	r0, r4
     96e:	bl	21c4 <digitalWrite>
     972:	ldr	r3, [r7, #0]
     974:	str	r3, [sp, #228]	; 0xe4
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && millis() - lastBlink > blinkLength) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     976:	subs	r6, #2
	return ret;
     978:	ldr	r2, [sp, #228]	; 0xe4
     97a:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     97c:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     97e:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     980:	strb	r3, [r5, #16]
     982:	b.n	71a <loop+0x286>
      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (blinking && millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     984:	ldrb	r6, [r5, #0]
     986:	mov	r0, r6
     988:	bl	21d0 <digitalRead>
     98c:	clz	r1, r0
     990:	lsrs	r1, r1, #5
     992:	mov	r0, r6
     994:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     998:	ldr	r3, [r7, #0]
     99a:	str	r3, [sp, #32]
	return ret;
     99c:	ldr	r3, [sp, #32]
        blinking = false;
        lastBlink = millis();        
     99e:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9a0:	movs	r3, #0
     9a2:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && millis() - lastBlink > blinkLength) {
     9a4:	ldr	r6, [r5, #20]
     9a6:	ldr	r5, [pc, #200]	; (a70 <loop+0x5dc>)
     9a8:	cmp	r6, #0
     9aa:	ble.w	6fc <loop+0x268>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9ae:	ldr	r3, [r4, #0]
     9b0:	str	r3, [sp, #28]
	return ret;
     9b2:	ldr	r3, [sp, #28]
     9b4:	ldr	r1, [r5, #8]
     9b6:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9b8:	ldr.w	r8, [pc, #176]	; a6c <loop+0x5d8>
     9bc:	subs	r3, r3, r1
     9be:	cmp	r3, r2
     9c0:	bls.w	6fc <loop+0x268>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     9c4:	ldrb	r7, [r5, #0]
     9c6:	mov	r0, r7
     9c8:	bl	21d0 <digitalRead>
     9cc:	clz	r1, r0
     9d0:	lsrs	r1, r1, #5
     9d2:	mov	r0, r7
     9d4:	bl	21c4 <digitalWrite>
     9d8:	ldr.w	r3, [r8]
     9dc:	str	r3, [sp, #224]	; 0xe0
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && millis() - lastBlink > blinkLength) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     9de:	subs	r6, #2
	return ret;
     9e0:	ldr	r2, [sp, #224]	; 0xe0
     9e2:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9e4:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     9e6:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9e8:	strb	r3, [r5, #16]
     9ea:	b.n	6fc <loop+0x268>
      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (blinking && millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     9ec:	ldrb	r6, [r5, #0]
     9ee:	mov	r0, r6
     9f0:	bl	21d0 <digitalRead>
     9f4:	clz	r1, r0
     9f8:	lsrs	r1, r1, #5
     9fa:	mov	r0, r6
     9fc:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a00:	ldr	r3, [r7, #0]
     a02:	str	r3, [sp, #44]	; 0x2c
	return ret;
     a04:	ldr	r3, [sp, #44]	; 0x2c
        blinking = false;
        lastBlink = millis();        
     a06:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a08:	movs	r3, #0
     a0a:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && millis() - lastBlink > blinkLength) {
     a0c:	ldr	r6, [r5, #20]
     a0e:	ldr	r5, [pc, #100]	; (a74 <loop+0x5e0>)
     a10:	cmp	r6, #0
     a12:	ble.w	6de <loop+0x24a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a16:	ldr	r3, [r4, #0]
     a18:	str	r3, [sp, #40]	; 0x28
	return ret;
     a1a:	ldr	r3, [sp, #40]	; 0x28
     a1c:	ldr	r1, [r5, #8]
     a1e:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a20:	ldr.w	r8, [pc, #72]	; a6c <loop+0x5d8>
     a24:	subs	r3, r3, r1
     a26:	cmp	r3, r2
     a28:	bls.w	6de <loop+0x24a>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     a2c:	ldrb	r7, [r5, #0]
     a2e:	mov	r0, r7
     a30:	bl	21d0 <digitalRead>
     a34:	clz	r1, r0
     a38:	lsrs	r1, r1, #5
     a3a:	mov	r0, r7
     a3c:	bl	21c4 <digitalWrite>
     a40:	ldr.w	r3, [r8]
     a44:	str	r3, [sp, #220]	; 0xdc
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && millis() - lastBlink > blinkLength) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     a46:	subs	r6, #2
	return ret;
     a48:	ldr	r2, [sp, #220]	; 0xdc
     a4a:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a4c:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     a4e:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a50:	strb	r3, [r5, #16]
     a52:	b.n	6de <loop+0x24a>
     a54:	.word	0x1fff1750
     a58:	.word	0x1fff1800
     a5c:	.word	0x1fff176c
     a60:	.word	0x1fff1788
     a64:	.word	0x1fff17a4
     a68:	.word	0x1fff15f0
     a6c:	.word	0x1fff187c
     a70:	.word	0x1fff15d8
     a74:	.word	0x1fff184c
      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (blinking && millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     a78:	ldrb	r6, [r5, #0]
     a7a:	mov	r0, r6
     a7c:	bl	21d0 <digitalRead>
     a80:	clz	r1, r0
     a84:	lsrs	r1, r1, #5
     a86:	mov	r0, r6
     a88:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a8c:	ldr	r3, [r7, #0]
     a8e:	str	r3, [sp, #56]	; 0x38
	return ret;
     a90:	ldr	r3, [sp, #56]	; 0x38
        blinking = false;
        lastBlink = millis();        
     a92:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a94:	movs	r3, #0
     a96:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && millis() - lastBlink > blinkLength) {
     a98:	ldr	r6, [r5, #20]
     a9a:	ldr	r5, [pc, #712]	; (d64 <loop+0x8d0>)
     a9c:	cmp	r6, #0
     a9e:	ble.w	6c0 <loop+0x22c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     aa2:	ldr	r3, [r4, #0]
     aa4:	str	r3, [sp, #52]	; 0x34
	return ret;
     aa6:	ldr	r3, [sp, #52]	; 0x34
     aa8:	ldr	r1, [r5, #8]
     aaa:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     aac:	ldr.w	r8, [pc, #712]	; d78 <loop+0x8e4>
     ab0:	subs	r3, r3, r1
     ab2:	cmp	r3, r2
     ab4:	bls.w	6c0 <loop+0x22c>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     ab8:	ldrb	r7, [r5, #0]
     aba:	mov	r0, r7
     abc:	bl	21d0 <digitalRead>
     ac0:	clz	r1, r0
     ac4:	lsrs	r1, r1, #5
     ac6:	mov	r0, r7
     ac8:	bl	21c4 <digitalWrite>
     acc:	ldr.w	r3, [r8]
     ad0:	str	r3, [sp, #216]	; 0xd8
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && millis() - lastBlink > blinkLength) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     ad2:	subs	r6, #2
	return ret;
     ad4:	ldr	r2, [sp, #216]	; 0xd8
     ad6:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     ad8:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     ada:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     adc:	strb	r3, [r5, #16]
     ade:	b.n	6c0 <loop+0x22c>
      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (blinking && millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     ae0:	ldrb	r6, [r5, #0]
     ae2:	mov	r0, r6
     ae4:	bl	21d0 <digitalRead>
     ae8:	clz	r1, r0
     aec:	lsrs	r1, r1, #5
     aee:	mov	r0, r6
     af0:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     af4:	ldr	r3, [r7, #0]
     af6:	str	r3, [sp, #68]	; 0x44
	return ret;
     af8:	ldr	r3, [sp, #68]	; 0x44
        blinking = false;
        lastBlink = millis();        
     afa:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     afc:	movs	r3, #0
     afe:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && millis() - lastBlink > blinkLength) {
     b00:	ldr	r6, [r5, #20]
     b02:	ldr	r5, [pc, #612]	; (d68 <loop+0x8d4>)
     b04:	cmp	r6, #0
     b06:	ble.w	6a2 <loop+0x20e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b0a:	ldr	r3, [r4, #0]
     b0c:	str	r3, [sp, #64]	; 0x40
	return ret;
     b0e:	ldr	r3, [sp, #64]	; 0x40
     b10:	ldr	r1, [r5, #8]
     b12:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b14:	ldr.w	r8, [pc, #608]	; d78 <loop+0x8e4>
     b18:	subs	r3, r3, r1
     b1a:	cmp	r3, r2
     b1c:	bls.w	6a2 <loop+0x20e>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     b20:	ldrb	r7, [r5, #0]
     b22:	mov	r0, r7
     b24:	bl	21d0 <digitalRead>
     b28:	clz	r1, r0
     b2c:	lsrs	r1, r1, #5
     b2e:	mov	r0, r7
     b30:	bl	21c4 <digitalWrite>
     b34:	ldr.w	r3, [r8]
     b38:	str	r3, [sp, #212]	; 0xd4
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && millis() - lastBlink > blinkLength) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     b3a:	subs	r6, #2
	return ret;
     b3c:	ldr	r2, [sp, #212]	; 0xd4
     b3e:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b40:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     b42:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b44:	strb	r3, [r5, #16]
     b46:	b.n	6a2 <loop+0x20e>
      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (blinking && millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     b48:	ldrb	r5, [r6, #0]
     b4a:	mov	r0, r5
     b4c:	bl	21d0 <digitalRead>
     b50:	clz	r1, r0
     b54:	lsrs	r1, r1, #5
     b56:	mov	r0, r5
     b58:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b5c:	ldr	r3, [r7, #0]
     b5e:	str	r3, [sp, #80]	; 0x50
	return ret;
     b60:	ldr	r3, [sp, #80]	; 0x50
        blinking = false;
        lastBlink = millis();        
     b62:	str	r3, [r6, #8]
    };

    int check () {
      if (blinking && millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     b64:	movs	r3, #0
     b66:	strb	r3, [r6, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && millis() - lastBlink > blinkLength) {
     b68:	ldr	r6, [r6, #20]
     b6a:	ldr	r5, [pc, #512]	; (d6c <loop+0x8d8>)
     b6c:	cmp	r6, #0
     b6e:	ble.w	684 <loop+0x1f0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b72:	ldr	r3, [r4, #0]
     b74:	str	r3, [sp, #76]	; 0x4c
	return ret;
     b76:	ldr	r3, [sp, #76]	; 0x4c
     b78:	ldr	r1, [r5, #8]
     b7a:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b7c:	ldr.w	r8, [pc, #504]	; d78 <loop+0x8e4>
     b80:	subs	r3, r3, r1
     b82:	cmp	r3, r2
     b84:	bls.w	684 <loop+0x1f0>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     b88:	ldrb	r7, [r5, #0]
     b8a:	mov	r0, r7
     b8c:	bl	21d0 <digitalRead>
     b90:	clz	r1, r0
     b94:	lsrs	r1, r1, #5
     b96:	mov	r0, r7
     b98:	bl	21c4 <digitalWrite>
     b9c:	ldr.w	r3, [r8]
     ba0:	str	r3, [sp, #208]	; 0xd0
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && millis() - lastBlink > blinkLength) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     ba2:	subs	r6, #2
	return ret;
     ba4:	ldr	r2, [sp, #208]	; 0xd0
     ba6:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     ba8:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     baa:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     bac:	strb	r3, [r5, #16]
     bae:	b.n	684 <loop+0x1f0>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     bb0:	ldr	r3, [pc, #444]	; (d70 <loop+0x8dc>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     bb2:	ldrb	r3, [r3, #0]
     bb4:	cmp	r3, #250	; 0xfa
     bb6:	beq.w	e88 <loop+0x9f4>
     bba:	cmp	r3, #252	; 0xfc
     bbc:	beq.w	d20 <loop+0x88c>
     bc0:	cmp	r3, #248	; 0xf8
     bc2:	beq.w	ef6 <loop+0xa62>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     bc6:	movs	r1, #35	; 0x23
     bc8:	ldr	r0, [pc, #424]	; (d74 <loop+0x8e0>)
     bca:	ldr	r4, [pc, #428]	; (d78 <loop+0x8e4>)
     bcc:	bl	1bb4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     bd0:	ldr	r0, [pc, #424]	; (d7c <loop+0x8e8>)
     bd2:	bl	3728 <Print::println()>
     bd6:	b.n	4a8 <loop+0x14>
     bd8:	ldr	r3, [r6, #20]
     bda:	b.n	5d0 <loop+0x13c>
     bdc:	ldr	r3, [r5, #20]
     bde:	b.n	612 <loop+0x17e>
     be0:	ldr	r3, [r6, #20]
     be2:	b.n	4c8 <loop+0x34>
     be4:	ldr	r3, [r5, #20]
     be6:	b.n	58e <loop+0xfa>
     be8:	ldr	r3, [r6, #20]
     bea:	b.n	54c <loop+0xb8>
     bec:	ldr	r3, [r5, #20]
     bee:	b.n	50a <loop+0x76>
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     bf0:	mov	r2, r5
     bf2:	b.n	56c <loop+0xd8>
     bf4:	mov	r2, r6
     bf6:	b.n	52a <loop+0x96>
     bf8:	mov	r2, r5
     bfa:	b.n	4e8 <loop+0x54>
     bfc:	mov	r2, r6
     bfe:	b.n	5ae <loop+0x11a>
     c00:	mov	r2, r5
     c02:	b.n	5f0 <loop+0x15c>
     c04:	mov	r2, r6
     c06:	b.n	664 <loop+0x1d0>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     c08:	ldrb	r3, [r7, #16]
     c0a:	cmp	r3, #0
     c0c:	bne.w	10e8 <loop+0xc54>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     c10:	ldrb	r3, [r7, #17]
     c12:	cmp	r3, #0
     c14:	bne.w	142a <loop+0xf96>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
     c18:	ldr	r3, [r7, #24]
     c1a:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c1e:	clz	r1, r1
     c22:	lsrs	r1, r1, #5
     c24:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c26:	uxtb	r0, r0
     c28:	bl	21c4 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     c2c:	ldr	r3, [r7, #28]
     c2e:	ldr	r1, [r7, #0]
     c30:	ldr	r2, [r7, #12]
     c32:	ldr.w	r1, [r3, r1, lsl #2]
      m_velocity = 100;
      m_length = 4;
    };

    void toggle () {
      m_state = !m_state;
     c36:	ldrb	r3, [r1, #4]
     c38:	eor.w	r3, r3, #1
     c3c:	strb	r3, [r1, #4]
     c3e:	b.n	4e8 <loop+0x54>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     c40:	ldrb	r3, [r7, #16]
     c42:	cmp	r3, #0
     c44:	bne.w	12fc <loop+0xe68>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     c48:	ldrb	r3, [r7, #17]
     c4a:	cmp	r3, #0
     c4c:	bne.w	1362 <loop+0xece>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
     c50:	ldr	r3, [r7, #24]
     c52:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c56:	clz	r1, r1
     c5a:	lsrs	r1, r1, #5
     c5c:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c5e:	uxtb	r0, r0
     c60:	bl	21c4 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     c64:	ldr	r3, [r7, #28]
     c66:	ldr	r1, [r7, #0]
     c68:	ldr	r2, [r7, #12]
     c6a:	ldr.w	r1, [r3, r1, lsl #2]
     c6e:	ldrb	r3, [r1, #4]
     c70:	eor.w	r3, r3, #1
     c74:	strb	r3, [r1, #4]
     c76:	b.n	52a <loop+0x96>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     c78:	ldrb	r3, [r7, #16]
     c7a:	cmp	r3, #0
     c7c:	bne.w	1230 <loop+0xd9c>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     c80:	ldrb	r3, [r7, #17]
     c82:	cmp	r3, #0
     c84:	bne.w	13da <loop+0xf46>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
     c88:	ldr	r3, [r7, #24]
     c8a:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c8e:	clz	r1, r1
     c92:	lsrs	r1, r1, #5
     c94:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c96:	uxtb	r0, r0
     c98:	bl	21c4 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     c9c:	ldr	r3, [r7, #28]
     c9e:	ldr	r1, [r7, #0]
     ca0:	ldr	r2, [r7, #12]
     ca2:	ldr.w	r1, [r3, r1, lsl #2]
     ca6:	ldrb	r3, [r1, #4]
     ca8:	eor.w	r3, r3, #1
     cac:	strb	r3, [r1, #4]
     cae:	b.n	56c <loop+0xd8>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     cb0:	ldrb	r3, [r7, #16]
     cb2:	cmp	r3, #0
     cb4:	bne.w	1296 <loop+0xe02>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     cb8:	ldrb	r3, [r7, #17]
     cba:	cmp	r3, #0
     cbc:	bne.w	1402 <loop+0xf6e>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
     cc0:	ldr	r3, [r7, #24]
     cc2:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     cc6:	clz	r1, r1
     cca:	lsrs	r1, r1, #5
     ccc:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     cce:	uxtb	r0, r0
     cd0:	bl	21c4 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     cd4:	ldr	r3, [r7, #28]
     cd6:	ldr	r1, [r7, #0]
     cd8:	ldr	r2, [r7, #12]
     cda:	ldr.w	r1, [r3, r1, lsl #2]
     cde:	ldrb	r3, [r1, #4]
     ce0:	eor.w	r3, r3, #1
     ce4:	strb	r3, [r1, #4]
     ce6:	b.n	5ae <loop+0x11a>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     ce8:	ldrb	r3, [r7, #16]
     cea:	cmp	r3, #0
     cec:	bne.w	11ca <loop+0xd36>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     cf0:	ldrb	r3, [r7, #17]
     cf2:	cmp	r3, #0
     cf4:	bne.w	13b2 <loop+0xf1e>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
     cf8:	ldr	r3, [r7, #24]
     cfa:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     cfe:	clz	r1, r1
     d02:	lsrs	r1, r1, #5
     d04:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     d06:	uxtb	r0, r0
     d08:	bl	21c4 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     d0c:	ldr	r3, [r7, #28]
     d0e:	ldr	r1, [r7, #0]
     d10:	ldr	r2, [r7, #12]
     d12:	ldr.w	r1, [r3, r1, lsl #2]
     d16:	ldrb	r3, [r1, #4]
     d18:	eor.w	r3, r3, #1
     d1c:	strb	r3, [r1, #4]
     d1e:	b.n	5f0 <loop+0x15c>
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     d20:	ldr	r1, [pc, #92]	; (d80 <loop+0x8ec>)
     d22:	ldr	r4, [pc, #84]	; (d78 <loop+0x8e4>)
      ppqn = 0;
      m_sequence.resetStep();
     d24:	ldr	r0, [r1, #12]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     d26:	movs	r2, #0
      ppqn = 0;
      m_sequence.resetStep();
      m_sequence.m_leds[5]->toggle();
     d28:	ldr	r3, [r0, #40]	; 0x28
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     d2a:	strb	r2, [r1, #0]
      ppqn = 0;
     d2c:	str	r2, [r1, #8]
    void stopCurrentStep () {
      m_steps[m_currentStep]->stop();
    };

    void resetStep () {
      m_currentStep = 0;
     d2e:	str	r2, [r0, #0]
     d30:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     d34:	clz	r1, r1
     d38:	lsrs	r1, r1, #5
     d3a:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     d3c:	uxtb	r0, r0
     d3e:	bl	21c4 <digitalWrite>
     d42:	b.w	4a8 <loop+0x14>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
          m_sequence.m_steps[m_id]->controlPitch(m_value);
     d46:	ldr	r3, [r4, #16]
     d48:	ldr	r2, [r4, #12]
     d4a:	add.w	r2, r3, r2, lsl #2
      m_length = newValue;
    };

    void controlPitch (int value) {
      int newValue = map(value, 0, 1023, 51, 38);
      m_pitch = newValue;
     d4e:	sub.w	r3, r0, r0, lsl #2
     d52:	lsls	r3, r3, #2
     d54:	it	mi
     d56:	addwmi	r3, r3, #1023	; 0x3ff
     d5a:	ldr	r2, [r2, #4]
     d5c:	asrs	r3, r3, #10
     d5e:	adds	r3, #51	; 0x33
     d60:	str	r3, [r2, #8]
     d62:	b.n	7b0 <loop+0x31c>
     d64:	.word	0x1fff1834
     d68:	.word	0x1fff181c
     d6c:	.word	0x1fff1804
     d70:	.word	0x1fff1d38
     d74:	.word	0x00004ac8
     d78:	.word	0x1fff187c
     d7c:	.word	0x1fff0c70
     d80:	.word	0x1fff17f0
     d84:	ldr	r3, [r4, #16]
     d86:	ldr	r2, [r4, #12]
     d88:	add.w	r2, r3, r2, lsl #2
     d8c:	sub.w	r3, r0, r0, lsl #2
     d90:	lsls	r3, r3, #2
     d92:	it	mi
     d94:	addwmi	r3, r3, #1023	; 0x3ff
     d98:	ldr	r2, [r2, #4]
     d9a:	asrs	r3, r3, #10
     d9c:	adds	r3, #51	; 0x33
     d9e:	str	r3, [r2, #8]
     da0:	b.n	8be <loop+0x42a>
     da2:	ldr	r3, [r4, #16]
     da4:	ldr	r2, [r4, #12]
     da6:	add.w	r2, r3, r2, lsl #2
     daa:	sub.w	r3, r0, r0, lsl #2
     dae:	lsls	r3, r3, #2
     db0:	it	mi
     db2:	addwmi	r3, r3, #1023	; 0x3ff
     db6:	ldr	r2, [r2, #4]
     db8:	asrs	r3, r3, #10
     dba:	adds	r3, #51	; 0x33
     dbc:	str	r3, [r2, #8]
     dbe:	b.n	918 <loop+0x484>
     dc0:	ldr	r3, [r4, #16]
     dc2:	ldr	r2, [r4, #12]
     dc4:	add.w	r2, r3, r2, lsl #2
     dc8:	sub.w	r3, r0, r0, lsl #2
     dcc:	lsls	r3, r3, #2
     dce:	it	mi
     dd0:	addwmi	r3, r3, #1023	; 0x3ff
     dd4:	ldr	r2, [r2, #4]
     dd6:	asrs	r3, r3, #10
     dd8:	adds	r3, #51	; 0x33
     dda:	str	r3, [r2, #8]
     ddc:	b.n	864 <loop+0x3d0>
     dde:	ldr	r3, [r4, #16]
     de0:	ldr	r2, [r4, #12]
     de2:	add.w	r2, r3, r2, lsl #2
     de6:	sub.w	r3, r0, r0, lsl #2
     dea:	lsls	r3, r3, #2
     dec:	it	mi
     dee:	addwmi	r3, r3, #1023	; 0x3ff
     df2:	ldr	r2, [r2, #4]
     df4:	asrs	r3, r3, #10
     df6:	adds	r3, #51	; 0x33
     df8:	str	r3, [r2, #8]
     dfa:	b.n	80a <loop+0x376>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     dfc:	cmp.w	r0, #400	; 0x190
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
        m_transport.controlTempo(m_value);
     e00:	ldr	r3, [r4, #20]
     e02:	bge.w	1006 <loop+0xb72>
        max_ppqn = 6;

        if (ppqn >= 6) {
     e06:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e08:	movs	r1, #6

        if (ppqn >= 6) {
     e0a:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e0c:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     e0e:	ble.n	e14 <loop+0x980>
          ppqn = 0;
     e10:	movs	r2, #0
     e12:	str	r2, [r3, #8]
     e14:	ldr	r0, [r4, #4]
     e16:	b.n	918 <loop+0x484>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     e18:	cmp.w	r0, #400	; 0x190
     e1c:	ldr	r3, [r4, #20]
     e1e:	bge.w	1078 <loop+0xbe4>
        max_ppqn = 6;

        if (ppqn >= 6) {
     e22:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e24:	movs	r1, #6

        if (ppqn >= 6) {
     e26:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e28:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     e2a:	ble.n	e30 <loop+0x99c>
          ppqn = 0;
     e2c:	movs	r2, #0
     e2e:	str	r2, [r3, #8]
     e30:	ldr	r0, [r4, #4]
     e32:	b.n	7b0 <loop+0x31c>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     e34:	cmp.w	r0, #400	; 0x190
     e38:	ldr	r3, [r4, #20]
     e3a:	bge.w	1022 <loop+0xb8e>
        max_ppqn = 6;

        if (ppqn >= 6) {
     e3e:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e40:	movs	r1, #6

        if (ppqn >= 6) {
     e42:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e44:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     e46:	ble.n	e4c <loop+0x9b8>
          ppqn = 0;
     e48:	movs	r2, #0
     e4a:	str	r2, [r3, #8]
     e4c:	ldr	r0, [r4, #4]
     e4e:	b.n	80a <loop+0x376>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     e50:	cmp.w	r0, #400	; 0x190
     e54:	ldr	r3, [r4, #20]
     e56:	bge.w	105c <loop+0xbc8>
        max_ppqn = 6;

        if (ppqn >= 6) {
     e5a:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e5c:	movs	r1, #6

        if (ppqn >= 6) {
     e5e:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e60:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     e62:	ble.n	e68 <loop+0x9d4>
          ppqn = 0;
     e64:	movs	r2, #0
     e66:	str	r2, [r3, #8]
     e68:	ldr	r0, [r4, #4]
     e6a:	b.n	8be <loop+0x42a>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     e6c:	cmp.w	r0, #400	; 0x190
     e70:	ldr	r3, [r4, #20]
     e72:	bge.w	1040 <loop+0xbac>
        max_ppqn = 6;

        if (ppqn >= 6) {
     e76:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e78:	movs	r1, #6

        if (ppqn >= 6) {
     e7a:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e7c:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     e7e:	ble.n	e84 <loop+0x9f0>
          ppqn = 0;
     e80:	movs	r2, #0
     e82:	str	r2, [r3, #8]
     e84:	ldr	r0, [r4, #4]
     e86:	b.n	864 <loop+0x3d0>
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     e88:	ldr	r5, [pc, #708]	; (1150 <loop+0xcbc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e8a:	ldr	r4, [pc, #712]	; (1154 <loop+0xcc0>)
      ppqn = 0;
      m_sequence.doStep(); 
     e8c:	ldr	r6, [r5, #12]
        m_leds[4]->blink();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
     e8e:	ldr	r3, [r6, #0]
     e90:	add.w	r3, r6, r3, lsl #2
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     e94:	mov.w	r9, #1
     e98:	ldr	r7, [r3, #20]
     e9a:	strb.w	r9, [r5]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     e9e:	ldrb.w	sl, [r7]
      ppqn = 0;
     ea2:	mov.w	r8, #0
     ea6:	mov	r0, sl
     ea8:	str.w	r8, [r5, #8]
     eac:	bl	21d0 <digitalRead>
     eb0:	clz	r1, r0
     eb4:	lsrs	r1, r1, #5
     eb6:	mov	r0, sl
     eb8:	bl	21c4 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
     ebc:	ldr	r3, [r6, #0]
     ebe:	ldr	r2, [r4, #0]
     ec0:	str	r2, [sp, #12]
     ec2:	add.w	r2, r6, r3, lsl #2
	return ret;
     ec6:	ldr	r0, [sp, #12]
     ec8:	ldr	r2, [r2, #4]
      blinking = true;
     eca:	strb.w	r9, [r7, #16]
     ece:	ldrb	r1, [r2, #4]
      blinkingCounter = times;
     ed0:	str.w	r8, [r7, #20]
      lastBlink = millis();  
     ed4:	str	r0, [r7, #8]
     ed6:	cmp	r1, #0
     ed8:	bne.w	145c <loop+0xfc8>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
     edc:	ldrb.w	r2, [r6, #45]	; 0x2d
     ee0:	cmp	r2, #0
     ee2:	beq.w	1096 <loop+0xc02>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
     ee6:	subs	r2, r3, #1
     ee8:	cmp	r3, #0
     eea:	beq.w	1482 <loop+0xfee>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
     eee:	str	r2, [r6, #0]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
     ef0:	ldr	r3, [r5, #12]
     ef2:	ldr	r3, [r3, #40]	; 0x28
     ef4:	b.n	d30 <loop+0x89c>
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
     ef6:	ldr	r5, [pc, #600]	; (1150 <loop+0xcbc>)

      if (m_sequence.stepIsOver(ppqn)) {
     ef8:	ldr	r2, [r5, #12]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
     efa:	ldr	r3, [r5, #8]
        }
      }
    };

    boolean stepIsOver (int ppqn) {
      return ppqn >= m_steps[m_currentStep]->m_length;
     efc:	ldr	r1, [r2, #0]
     efe:	add.w	r2, r2, r1, lsl #2
     f02:	adds	r3, #1
     f04:	ldr	r2, [r2, #4]
     f06:	str	r3, [r5, #8]

      if (m_sequence.stepIsOver(ppqn)) {
     f08:	ldr	r2, [r2, #16]
     f0a:	cmp	r3, r2
     f0c:	bge.w	1452 <loop+0xfbe>
        // here i have to check the note length
        // of the active note to see if i do the stop step
        m_sequence.stopCurrentStep();
      }

      if (ppqn == max_ppqn) {
     f10:	ldr	r2, [r5, #4]
     f12:	ldr	r1, [pc, #572]	; (1150 <loop+0xcbc>)
     f14:	cmp	r2, r3
     f16:	bne.w	4a6 <loop+0x12>
        m_sequence.doStep(); 
     f1a:	ldr	r6, [r1, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f1c:	ldr	r4, [pc, #564]	; (1154 <loop+0xcc0>)
        m_leds[4]->blink();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
     f1e:	ldr	r3, [r6, #0]
     f20:	add.w	r3, r6, r3, lsl #2
     f24:	ldr	r7, [r3, #20]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     f26:	ldrb.w	r8, [r7]
     f2a:	mov	r0, r8
     f2c:	bl	21d0 <digitalRead>
     f30:	clz	r1, r0
     f34:	lsrs	r1, r1, #5
     f36:	mov	r0, r8
     f38:	bl	21c4 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
     f3c:	ldr	r3, [r6, #0]
     f3e:	ldr	r2, [r4, #0]
     f40:	str	r2, [sp, #8]
     f42:	add.w	r2, r6, r3, lsl #2
      blinking = true;
     f46:	movs	r1, #1
     f48:	ldr	r2, [r2, #4]
     f4a:	strb	r1, [r7, #16]
      blinkingCounter = times;
     f4c:	movs	r1, #0
     f4e:	str	r1, [r7, #20]
     f50:	ldrb	r1, [r2, #4]
	return ret;
     f52:	ldr	r0, [sp, #8]
      lastBlink = millis();  
     f54:	str	r0, [r7, #8]
     f56:	cmp	r1, #0
     f58:	bne.w	1658 <loop+0x11c4>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
     f5c:	ldrb.w	r2, [r6, #45]	; 0x2d
     f60:	cmp	r2, #0
     f62:	bne.w	1488 <loop+0xff4>
        m_currentStep++;
     f66:	adds	r3, #1
     f68:	cmp	r3, #3
     f6a:	it	gt
     f6c:	movgt	r3, #0
     f6e:	str	r3, [r6, #0]
        ppqn = 0;
     f70:	movs	r3, #0
     f72:	str	r3, [r5, #8]
     f74:	b.w	4a8 <loop+0x14>
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
     f78:	ldr	r2, [r4, #12]
     f7a:	ldr	r3, [r4, #16]
     f7c:	add.w	r3, r3, r2, lsl #2
    };

    void controlVelocity (int value) {
      int newValue = map(value, 0, 1023, 127, 63);
      m_velocity = newValue;
     f80:	ldr	r2, [r3, #4]
     f82:	subs.w	r3, r0, r0, lsl #6
     f86:	it	mi
     f88:	addwmi	r3, r3, #1023	; 0x3ff
     f8c:	asrs	r3, r3, #10
     f8e:	adds	r3, #127	; 0x7f
     f90:	str	r3, [r2, #12]
     f92:	b.n	80a <loop+0x376>
     f94:	ldr	r2, [r4, #12]
     f96:	ldr	r3, [r4, #16]
     f98:	add.w	r3, r3, r2, lsl #2
     f9c:	ldr	r2, [r3, #4]
     f9e:	subs.w	r3, r0, r0, lsl #6
     fa2:	it	mi
     fa4:	addwmi	r3, r3, #1023	; 0x3ff
     fa8:	asrs	r3, r3, #10
     faa:	adds	r3, #127	; 0x7f
     fac:	str	r3, [r2, #12]
     fae:	b.n	864 <loop+0x3d0>
     fb0:	ldr	r2, [r4, #12]
     fb2:	ldr	r3, [r4, #16]
     fb4:	add.w	r3, r3, r2, lsl #2
     fb8:	ldr	r2, [r3, #4]
     fba:	subs.w	r3, r0, r0, lsl #6
     fbe:	it	mi
     fc0:	addwmi	r3, r3, #1023	; 0x3ff
     fc4:	asrs	r3, r3, #10
     fc6:	adds	r3, #127	; 0x7f
     fc8:	str	r3, [r2, #12]
     fca:	b.n	8be <loop+0x42a>
     fcc:	ldr	r2, [r4, #12]
     fce:	ldr	r3, [r4, #16]
     fd0:	add.w	r3, r3, r2, lsl #2
     fd4:	ldr	r2, [r3, #4]
     fd6:	subs.w	r3, r0, r0, lsl #6
     fda:	it	mi
     fdc:	addwmi	r3, r3, #1023	; 0x3ff
     fe0:	asrs	r3, r3, #10
     fe2:	adds	r3, #127	; 0x7f
     fe4:	str	r3, [r2, #12]
     fe6:	b.w	7b0 <loop+0x31c>
     fea:	ldr	r2, [r4, #12]
     fec:	ldr	r3, [r4, #16]
     fee:	add.w	r3, r3, r2, lsl #2
     ff2:	ldr	r2, [r3, #4]
     ff4:	subs.w	r3, r0, r0, lsl #6
     ff8:	it	mi
     ffa:	addwmi	r3, r3, #1023	; 0x3ff
     ffe:	asrs	r3, r3, #10
    1000:	adds	r3, #127	; 0x7f
    1002:	str	r3, [r2, #12]
    1004:	b.n	918 <loop+0x484>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1006:	sub.w	r2, r0, #400	; 0x190
    100a:	cmp.w	r2, #400	; 0x190
    100e:	bcc.n	10da <loop+0xc46>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1010:	sub.w	r2, r0, #800	; 0x320
    1014:	cmp	r2, #223	; 0xdf
    1016:	bhi.w	918 <loop+0x484>
        max_ppqn = 12;
    101a:	movs	r2, #12
    101c:	str	r2, [r3, #4]
    101e:	ldr	r0, [r4, #4]
    1020:	b.n	918 <loop+0x484>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1022:	sub.w	r2, r0, #400	; 0x190
    1026:	cmp.w	r2, #400	; 0x190
    102a:	bcc.n	10cc <loop+0xc38>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    102c:	sub.w	r2, r0, #800	; 0x320
    1030:	cmp	r2, #223	; 0xdf
    1032:	bhi.w	80a <loop+0x376>
        max_ppqn = 12;
    1036:	movs	r2, #12
    1038:	str	r2, [r3, #4]
    103a:	ldr	r0, [r4, #4]
    103c:	b.w	80a <loop+0x376>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1040:	sub.w	r2, r0, #400	; 0x190
    1044:	cmp.w	r2, #400	; 0x190
    1048:	bcc.n	10be <loop+0xc2a>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    104a:	sub.w	r2, r0, #800	; 0x320
    104e:	cmp	r2, #223	; 0xdf
    1050:	bhi.w	864 <loop+0x3d0>
        max_ppqn = 12;
    1054:	movs	r2, #12
    1056:	str	r2, [r3, #4]
    1058:	ldr	r0, [r4, #4]
    105a:	b.n	864 <loop+0x3d0>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    105c:	sub.w	r2, r0, #400	; 0x190
    1060:	cmp.w	r2, #400	; 0x190
    1064:	bcc.n	10b0 <loop+0xc1c>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1066:	sub.w	r2, r0, #800	; 0x320
    106a:	cmp	r2, #223	; 0xdf
    106c:	bhi.w	8be <loop+0x42a>
        max_ppqn = 12;
    1070:	movs	r2, #12
    1072:	str	r2, [r3, #4]
    1074:	ldr	r0, [r4, #4]
    1076:	b.n	8be <loop+0x42a>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1078:	sub.w	r2, r0, #400	; 0x190
    107c:	cmp.w	r2, #400	; 0x190
    1080:	bcc.n	10a2 <loop+0xc0e>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1082:	sub.w	r2, r0, #800	; 0x320
    1086:	cmp	r2, #223	; 0xdf
    1088:	bhi.w	7b0 <loop+0x31c>
        max_ppqn = 12;
    108c:	movs	r2, #12
    108e:	str	r2, [r3, #4]
    1090:	ldr	r0, [r4, #4]
    1092:	b.w	7b0 <loop+0x31c>
    1096:	adds	r3, #1
    1098:	cmp	r3, #3
    109a:	it	gt
    109c:	movgt	r3, #0
    109e:	str	r3, [r6, #0]
    10a0:	b.n	ef0 <loop+0xa5c>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
    10a2:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    10a4:	movs	r1, #8

        if (ppqn >= 8) {
    10a6:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    10a8:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    10aa:	bgt.w	e2c <loop+0x998>
    10ae:	b.n	e30 <loop+0x99c>
    10b0:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    10b2:	movs	r1, #8

        if (ppqn >= 8) {
    10b4:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    10b6:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    10b8:	bgt.w	e64 <loop+0x9d0>
    10bc:	b.n	e68 <loop+0x9d4>
    10be:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    10c0:	movs	r1, #8

        if (ppqn >= 8) {
    10c2:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    10c4:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    10c6:	bgt.w	e80 <loop+0x9ec>
    10ca:	b.n	e84 <loop+0x9f0>
    10cc:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    10ce:	movs	r1, #8

        if (ppqn >= 8) {
    10d0:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    10d2:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    10d4:	bgt.w	e48 <loop+0x9b4>
    10d8:	b.n	e4c <loop+0x9b8>
    10da:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    10dc:	movs	r1, #8

        if (ppqn >= 8) {
    10de:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    10e0:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    10e2:	bgt.w	e10 <loop+0x97c>
    10e6:	b.n	e14 <loop+0x980>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    10e8:	ldr.w	lr, [pc, #116]	; 1160 <loop+0xccc>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
    10ec:	ldr.w	r9, [r7, #28]
    10f0:	ldrb.w	r3, [lr]
    10f4:	cmp	r3, #0
    10f6:	beq.w	14f0 <loop+0x105c>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
    10fa:	cmp	r3, #1
    10fc:	beq.w	1684 <loop+0x11f0>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
      } else if (currentMode == NOTELENGTH) {
    1100:	cmp	r3, #2
    1102:	bne.w	4e8 <loop+0x54>
    1106:	movs	r1, #5
    1108:	ldr	r0, [pc, #76]	; (1158 <loop+0xcc4>)
        currentMode = PITCH;
    110a:	strb.w	r5, [lr]
    110e:	bl	1bb4 <usb_serial_write>
    1112:	ldr	r0, [pc, #72]	; (115c <loop+0xcc8>)
    1114:	bl	3728 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    1118:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    111c:	ldrb.w	sl, [r9]
    1120:	mov	r0, sl
    1122:	bl	21d0 <digitalRead>
    1126:	clz	r1, r0
    112a:	lsrs	r1, r1, #5
    112c:	mov	r0, sl
    112e:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1132:	ldr.w	r3, [r8]
    1136:	str	r3, [sp, #144]	; 0x90
      blinking = true;
    1138:	movs	r1, #1
	return ret;
    113a:	ldr	r3, [sp, #144]	; 0x90
    113c:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    113e:	str.w	r5, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1142:	strb.w	r1, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1146:	str.w	r3, [r9, #8]
    114a:	b.w	4e8 <loop+0x54>
    114e:	nop
    1150:	.word	0x1fff17f0
    1154:	.word	0x1fff187c
    1158:	.word	0x00004b04
    115c:	.word	0x1fff0c70
    1160:	.word	0x1fff1800
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1164:	ldr.w	lr, [pc, #900]	; 14ec <loop+0x1058>
    1168:	ldr.w	r9, [r7, #28]
    116c:	ldrb.w	r3, [lr]
    1170:	cmp	r3, #0
    1172:	beq.w	1538 <loop+0x10a4>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
    1176:	cmp	r3, #1
    1178:	beq.w	17ac <loop+0x1318>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
      } else if (currentMode == NOTELENGTH) {
    117c:	cmp	r3, #2
    117e:	bne.w	664 <loop+0x1d0>
    1182:	movs	r1, #5
    1184:	ldr	r0, [pc, #852]	; (14dc <loop+0x1048>)
        currentMode = PITCH;
    1186:	strb.w	r6, [lr]
    118a:	bl	1bb4 <usb_serial_write>
    118e:	ldr	r0, [pc, #848]	; (14e0 <loop+0x104c>)
    1190:	bl	3728 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    1194:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1198:	ldrb.w	sl, [r9]
    119c:	mov	r0, sl
    119e:	bl	21d0 <digitalRead>
    11a2:	clz	r1, r0
    11a6:	lsrs	r1, r1, #5
    11a8:	mov	r0, sl
    11aa:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11ae:	ldr.w	r3, [r8]
    11b2:	str	r3, [sp, #204]	; 0xcc
      blinking = true;
    11b4:	movs	r1, #1
	return ret;
    11b6:	ldr	r3, [sp, #204]	; 0xcc
    11b8:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    11ba:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    11be:	strb.w	r1, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    11c2:	str.w	r3, [r9, #8]
    11c6:	b.w	664 <loop+0x1d0>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    11ca:	ldr.w	lr, [pc, #800]	; 14ec <loop+0x1058>
    11ce:	ldr.w	r9, [r7, #28]
    11d2:	ldrb.w	r3, [lr]
    11d6:	cmp	r3, #0
    11d8:	beq.w	15c8 <loop+0x1134>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
    11dc:	cmp	r3, #1
    11de:	beq.w	1718 <loop+0x1284>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
      } else if (currentMode == NOTELENGTH) {
    11e2:	cmp	r3, #2
    11e4:	bne.w	5f0 <loop+0x15c>
    11e8:	movs	r1, #5
    11ea:	ldr	r0, [pc, #752]	; (14dc <loop+0x1048>)
        currentMode = PITCH;
    11ec:	strb.w	r5, [lr]
    11f0:	bl	1bb4 <usb_serial_write>
    11f4:	ldr	r0, [pc, #744]	; (14e0 <loop+0x104c>)
    11f6:	bl	3728 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    11fa:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    11fe:	ldrb.w	sl, [r9]
    1202:	mov	r0, sl
    1204:	bl	21d0 <digitalRead>
    1208:	clz	r1, r0
    120c:	lsrs	r1, r1, #5
    120e:	mov	r0, sl
    1210:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1214:	ldr.w	r3, [r8]
    1218:	str	r3, [sp, #192]	; 0xc0
      blinking = true;
    121a:	movs	r1, #1
	return ret;
    121c:	ldr	r3, [sp, #192]	; 0xc0
    121e:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    1220:	str.w	r5, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1224:	strb.w	r1, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1228:	str.w	r3, [r9, #8]
    122c:	b.w	5f0 <loop+0x15c>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1230:	ldr.w	lr, [pc, #696]	; 14ec <loop+0x1058>
    1234:	ldr.w	r9, [r7, #28]
    1238:	ldrb.w	r3, [lr]
    123c:	cmp	r3, #0
    123e:	beq.w	1580 <loop+0x10ec>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
    1242:	cmp	r3, #1
    1244:	beq.w	17f6 <loop+0x1362>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
      } else if (currentMode == NOTELENGTH) {
    1248:	cmp	r3, #2
    124a:	bne.w	56c <loop+0xd8>
    124e:	movs	r1, #5
    1250:	ldr	r0, [pc, #648]	; (14dc <loop+0x1048>)
        currentMode = PITCH;
    1252:	strb.w	r5, [lr]
    1256:	bl	1bb4 <usb_serial_write>
    125a:	ldr	r0, [pc, #644]	; (14e0 <loop+0x104c>)
    125c:	bl	3728 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    1260:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1264:	ldrb.w	sl, [r9]
    1268:	mov	r0, sl
    126a:	bl	21d0 <digitalRead>
    126e:	clz	r1, r0
    1272:	lsrs	r1, r1, #5
    1274:	mov	r0, sl
    1276:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    127a:	ldr.w	r3, [r8]
    127e:	str	r3, [sp, #168]	; 0xa8
      blinking = true;
    1280:	movs	r1, #1
	return ret;
    1282:	ldr	r3, [sp, #168]	; 0xa8
    1284:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    1286:	str.w	r5, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    128a:	strb.w	r1, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    128e:	str.w	r3, [r9, #8]
    1292:	b.w	56c <loop+0xd8>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1296:	ldr.w	lr, [pc, #596]	; 14ec <loop+0x1058>
    129a:	ldr.w	r9, [r7, #28]
    129e:	ldrb.w	r3, [lr]
    12a2:	cmp	r3, #0
    12a4:	beq.w	1610 <loop+0x117c>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
    12a8:	cmp	r3, #1
    12aa:	beq.w	1762 <loop+0x12ce>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
      } else if (currentMode == NOTELENGTH) {
    12ae:	cmp	r3, #2
    12b0:	bne.w	5ae <loop+0x11a>
    12b4:	movs	r1, #5
    12b6:	ldr	r0, [pc, #548]	; (14dc <loop+0x1048>)
        currentMode = PITCH;
    12b8:	strb.w	r6, [lr]
    12bc:	bl	1bb4 <usb_serial_write>
    12c0:	ldr	r0, [pc, #540]	; (14e0 <loop+0x104c>)
    12c2:	bl	3728 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    12c6:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    12ca:	ldrb.w	sl, [r9]
    12ce:	mov	r0, sl
    12d0:	bl	21d0 <digitalRead>
    12d4:	clz	r1, r0
    12d8:	lsrs	r1, r1, #5
    12da:	mov	r0, sl
    12dc:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12e0:	ldr.w	r3, [r8]
    12e4:	str	r3, [sp, #180]	; 0xb4
      blinking = true;
    12e6:	movs	r1, #1
	return ret;
    12e8:	ldr	r3, [sp, #180]	; 0xb4
    12ea:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    12ec:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    12f0:	strb.w	r1, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    12f4:	str.w	r3, [r9, #8]
    12f8:	b.w	5ae <loop+0x11a>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    12fc:	ldr.w	lr, [pc, #492]	; 14ec <loop+0x1058>
    1300:	ldr.w	r9, [r7, #28]
    1304:	ldrb.w	r3, [lr]
    1308:	cmp	r3, #0
    130a:	beq.w	1494 <loop+0x1000>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
    130e:	cmp	r3, #1
    1310:	beq.w	16ce <loop+0x123a>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
      } else if (currentMode == NOTELENGTH) {
    1314:	cmp	r3, #2
    1316:	bne.w	52a <loop+0x96>
    131a:	movs	r1, #5
    131c:	ldr	r0, [pc, #444]	; (14dc <loop+0x1048>)
        currentMode = PITCH;
    131e:	strb.w	r6, [lr]
    1322:	bl	1bb4 <usb_serial_write>
    1326:	ldr	r0, [pc, #440]	; (14e0 <loop+0x104c>)
    1328:	bl	3728 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    132c:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1330:	ldrb.w	sl, [r9]
    1334:	mov	r0, sl
    1336:	bl	21d0 <digitalRead>
    133a:	clz	r1, r0
    133e:	lsrs	r1, r1, #5
    1340:	mov	r0, sl
    1342:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1346:	ldr.w	r3, [r8]
    134a:	str	r3, [sp, #156]	; 0x9c
      blinking = true;
    134c:	movs	r1, #1
	return ret;
    134e:	ldr	r3, [sp, #156]	; 0x9c
    1350:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    1352:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1356:	strb.w	r1, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    135a:	str.w	r3, [r9, #8]
    135e:	b.w	52a <loop+0x96>
      } else if (m_state == LOW && m_reverseButton) {
        m_led.toggle();
    1362:	ldr	r3, [r7, #24]
    1364:	ldmia.w	r3, {r0, r1}
    };

    void toggle () {
      m_state = !m_state;
    1368:	clz	r1, r1
    136c:	lsrs	r1, r1, #5
    136e:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1370:	uxtb	r0, r0
    1372:	bl	21c4 <digitalWrite>
    1376:	ldr	r1, [r7, #28]
    1378:	ldr	r2, [r7, #12]
    void resetStep () {
      m_currentStep = 0;
    };

    void reverse () {
      m_reverse = !m_reverse;
    137a:	ldrb.w	r3, [r1, #45]	; 0x2d
    137e:	eor.w	r3, r3, #1
    1382:	strb.w	r3, [r1, #45]	; 0x2d
    1386:	b.w	52a <loop+0x96>
    138a:	ldr	r3, [r7, #24]
    138c:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1390:	clz	r1, r1
    1394:	lsrs	r1, r1, #5
    1396:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1398:	uxtb	r0, r0
    139a:	bl	21c4 <digitalWrite>
    139e:	ldr	r1, [r7, #28]
    13a0:	ldr	r2, [r7, #12]
    13a2:	ldrb.w	r3, [r1, #45]	; 0x2d
    13a6:	eor.w	r3, r3, #1
    13aa:	strb.w	r3, [r1, #45]	; 0x2d
    13ae:	b.w	664 <loop+0x1d0>
    13b2:	ldr	r3, [r7, #24]
    13b4:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    13b8:	clz	r1, r1
    13bc:	lsrs	r1, r1, #5
    13be:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    13c0:	uxtb	r0, r0
    13c2:	bl	21c4 <digitalWrite>
    13c6:	ldr	r1, [r7, #28]
    13c8:	ldr	r2, [r7, #12]
    13ca:	ldrb.w	r3, [r1, #45]	; 0x2d
    13ce:	eor.w	r3, r3, #1
    13d2:	strb.w	r3, [r1, #45]	; 0x2d
    13d6:	b.w	5f0 <loop+0x15c>
    13da:	ldr	r3, [r7, #24]
    13dc:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    13e0:	clz	r1, r1
    13e4:	lsrs	r1, r1, #5
    13e6:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    13e8:	uxtb	r0, r0
    13ea:	bl	21c4 <digitalWrite>
    13ee:	ldr	r1, [r7, #28]
    13f0:	ldr	r2, [r7, #12]
    13f2:	ldrb.w	r3, [r1, #45]	; 0x2d
    13f6:	eor.w	r3, r3, #1
    13fa:	strb.w	r3, [r1, #45]	; 0x2d
    13fe:	b.w	56c <loop+0xd8>
    1402:	ldr	r3, [r7, #24]
    1404:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1408:	clz	r1, r1
    140c:	lsrs	r1, r1, #5
    140e:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1410:	uxtb	r0, r0
    1412:	bl	21c4 <digitalWrite>
    1416:	ldr	r1, [r7, #28]
    1418:	ldr	r2, [r7, #12]
    141a:	ldrb.w	r3, [r1, #45]	; 0x2d
    141e:	eor.w	r3, r3, #1
    1422:	strb.w	r3, [r1, #45]	; 0x2d
    1426:	b.w	5ae <loop+0x11a>
    142a:	ldr	r3, [r7, #24]
    142c:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1430:	clz	r1, r1
    1434:	lsrs	r1, r1, #5
    1436:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1438:	uxtb	r0, r0
    143a:	bl	21c4 <digitalWrite>
    143e:	ldr	r1, [r7, #28]
    1440:	ldr	r2, [r7, #12]
    1442:	ldrb.w	r3, [r1, #45]	; 0x2d
    1446:	eor.w	r3, r3, #1
    144a:	strb.w	r3, [r1, #45]	; 0x2d
    144e:	b.w	4e8 <loop+0x54>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1452:	ldr	r0, [pc, #144]	; (14e4 <loop+0x1050>)
    1454:	bl	2450 <usb_midi_write_packed>
    1458:	ldr	r3, [r5, #8]
    145a:	b.n	f10 <loop+0xa7c>
    145c:	ldr	r0, [r2, #8]
    145e:	ldr	r3, [r2, #12]
    1460:	lsls	r0, r0, #16
    1462:	lsls	r3, r3, #24
    1464:	and.w	r3, r3, #2130706432	; 0x7f000000
    1468:	and.w	r0, r0, #8323072	; 0x7f0000
    146c:	orrs	r0, r3
    146e:	orr.w	r0, r0, #40704	; 0x9f00
    1472:	orr.w	r0, r0, #9
    1476:	bl	2450 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    147a:	bl	24ec <usb_midi_flush_output>
    147e:	ldr	r3, [r6, #0]
    1480:	b.n	edc <loop+0xa48>
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
          m_currentStep = 3;
    1482:	movs	r3, #3
    1484:	str	r3, [r6, #0]
    1486:	b.n	ef0 <loop+0xa5c>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    1488:	subs	r2, r3, #1
    148a:	cmp	r3, #0
    148c:	beq.w	167e <loop+0x11ea>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    1490:	str	r2, [r6, #0]
    1492:	b.n	f70 <loop+0xadc>
    1494:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1496:	mov.w	sl, #1
    149a:	ldr	r0, [pc, #76]	; (14e8 <loop+0x1054>)
    149c:	strb.w	sl, [lr]
    14a0:	bl	1bb4 <usb_serial_write>
    14a4:	ldr	r0, [pc, #56]	; (14e0 <loop+0x104c>)
    14a6:	bl	3728 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
    14aa:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14ae:	ldrb.w	r9, [r6]
    14b2:	mov	r0, r9
    14b4:	bl	21d0 <digitalRead>
    14b8:	clz	r1, r0
    14bc:	lsrs	r1, r1, #5
    14be:	mov	r0, r9
    14c0:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14c4:	ldr.w	r3, [r8]
    14c8:	str	r3, [sp, #148]	; 0x94
	return ret;
    14ca:	ldr	r3, [sp, #148]	; 0x94
    14cc:	ldr	r2, [r7, #12]
      blinking = true;
    14ce:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    14d2:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    14d6:	str	r3, [r6, #8]
    14d8:	b.w	52a <loop+0x96>
    14dc:	.word	0x00004b04
    14e0:	.word	0x1fff0c70
    14e4:	.word	0x7f7bbf0b
    14e8:	.word	0x00004aec
    14ec:	.word	0x1fff1800
    14f0:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    14f2:	mov.w	sl, #1
    14f6:	ldr	r0, [pc, #840]	; (1840 <loop+0x13ac>)
    14f8:	strb.w	sl, [lr]
    14fc:	bl	1bb4 <usb_serial_write>
    1500:	ldr	r0, [pc, #832]	; (1844 <loop+0x13b0>)
    1502:	bl	3728 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
    1506:	ldr.w	r5, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    150a:	ldrb.w	r9, [r5]
    150e:	mov	r0, r9
    1510:	bl	21d0 <digitalRead>
    1514:	clz	r1, r0
    1518:	lsrs	r1, r1, #5
    151a:	mov	r0, r9
    151c:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1520:	ldr.w	r3, [r8]
    1524:	str	r3, [sp, #136]	; 0x88
	return ret;
    1526:	ldr	r3, [sp, #136]	; 0x88
    1528:	ldr	r2, [r7, #12]
      blinking = true;
    152a:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    152e:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    1532:	str	r3, [r5, #8]
    1534:	b.w	4e8 <loop+0x54>
    1538:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    153a:	mov.w	sl, #1
    153e:	ldr	r0, [pc, #768]	; (1840 <loop+0x13ac>)
    1540:	strb.w	sl, [lr]
    1544:	bl	1bb4 <usb_serial_write>
    1548:	ldr	r0, [pc, #760]	; (1844 <loop+0x13b0>)
    154a:	bl	3728 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
    154e:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1552:	ldrb.w	r9, [r6]
    1556:	mov	r0, r9
    1558:	bl	21d0 <digitalRead>
    155c:	clz	r1, r0
    1560:	lsrs	r1, r1, #5
    1562:	mov	r0, r9
    1564:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1568:	ldr.w	r3, [r8]
    156c:	str	r3, [sp, #196]	; 0xc4
	return ret;
    156e:	ldr	r3, [sp, #196]	; 0xc4
    1570:	ldr	r2, [r7, #12]
      blinking = true;
    1572:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    1576:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    157a:	str	r3, [r6, #8]
    157c:	b.w	664 <loop+0x1d0>
    1580:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1582:	mov.w	sl, #1
    1586:	ldr	r0, [pc, #696]	; (1840 <loop+0x13ac>)
    1588:	strb.w	sl, [lr]
    158c:	bl	1bb4 <usb_serial_write>
    1590:	ldr	r0, [pc, #688]	; (1844 <loop+0x13b0>)
    1592:	bl	3728 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
    1596:	ldr.w	r5, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    159a:	ldrb.w	r9, [r5]
    159e:	mov	r0, r9
    15a0:	bl	21d0 <digitalRead>
    15a4:	clz	r1, r0
    15a8:	lsrs	r1, r1, #5
    15aa:	mov	r0, r9
    15ac:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15b0:	ldr.w	r3, [r8]
    15b4:	str	r3, [sp, #160]	; 0xa0
	return ret;
    15b6:	ldr	r3, [sp, #160]	; 0xa0
    15b8:	ldr	r2, [r7, #12]
      blinking = true;
    15ba:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    15be:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    15c2:	str	r3, [r5, #8]
    15c4:	b.w	56c <loop+0xd8>
    15c8:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    15ca:	mov.w	sl, #1
    15ce:	ldr	r0, [pc, #624]	; (1840 <loop+0x13ac>)
    15d0:	strb.w	sl, [lr]
    15d4:	bl	1bb4 <usb_serial_write>
    15d8:	ldr	r0, [pc, #616]	; (1844 <loop+0x13b0>)
    15da:	bl	3728 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
    15de:	ldr.w	r5, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    15e2:	ldrb.w	r9, [r5]
    15e6:	mov	r0, r9
    15e8:	bl	21d0 <digitalRead>
    15ec:	clz	r1, r0
    15f0:	lsrs	r1, r1, #5
    15f2:	mov	r0, r9
    15f4:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15f8:	ldr.w	r3, [r8]
    15fc:	str	r3, [sp, #184]	; 0xb8
	return ret;
    15fe:	ldr	r3, [sp, #184]	; 0xb8
    1600:	ldr	r2, [r7, #12]
      blinking = true;
    1602:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    1606:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    160a:	str	r3, [r5, #8]
    160c:	b.w	5f0 <loop+0x15c>
    1610:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1612:	mov.w	sl, #1
    1616:	ldr	r0, [pc, #552]	; (1840 <loop+0x13ac>)
    1618:	strb.w	sl, [lr]
    161c:	bl	1bb4 <usb_serial_write>
    1620:	ldr	r0, [pc, #544]	; (1844 <loop+0x13b0>)
    1622:	bl	3728 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
    1626:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    162a:	ldrb.w	r9, [r6]
    162e:	mov	r0, r9
    1630:	bl	21d0 <digitalRead>
    1634:	clz	r1, r0
    1638:	lsrs	r1, r1, #5
    163a:	mov	r0, r9
    163c:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1640:	ldr.w	r3, [r8]
    1644:	str	r3, [sp, #172]	; 0xac
	return ret;
    1646:	ldr	r3, [sp, #172]	; 0xac
    1648:	ldr	r2, [r7, #12]
      blinking = true;
    164a:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    164e:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    1652:	str	r3, [r6, #8]
    1654:	b.w	5ae <loop+0x11a>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1658:	ldr	r0, [r2, #8]
    165a:	ldr	r3, [r2, #12]
    165c:	lsls	r0, r0, #16
    165e:	lsls	r3, r3, #24
    1660:	and.w	r3, r3, #2130706432	; 0x7f000000
    1664:	and.w	r0, r0, #8323072	; 0x7f0000
    1668:	orrs	r0, r3
    166a:	orr.w	r0, r0, #40704	; 0x9f00
    166e:	orr.w	r0, r0, #9
    1672:	bl	2450 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1676:	bl	24ec <usb_midi_flush_output>
    167a:	ldr	r3, [r6, #0]
    167c:	b.n	f5c <loop+0xac8>
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
          m_currentStep = 3;
    167e:	movs	r3, #3
    1680:	str	r3, [r6, #0]
    1682:	b.n	f70 <loop+0xadc>
    1684:	movs	r1, #10
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1686:	mov.w	sl, #2
    168a:	ldr	r0, [pc, #444]	; (1848 <loop+0x13b4>)
    168c:	str	r3, [sp, #4]
    168e:	strb.w	sl, [lr]
    1692:	bl	1bb4 <usb_serial_write>
    1696:	ldr	r0, [pc, #428]	; (1844 <loop+0x13b0>)
    1698:	bl	3728 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
    169c:	ldr.w	r5, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    16a0:	ldrb.w	r9, [r5]
    16a4:	mov	r0, r9
    16a6:	bl	21d0 <digitalRead>
    16aa:	clz	r1, r0
    16ae:	lsrs	r1, r1, #5
    16b0:	mov	r0, r9
    16b2:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16b6:	ldr.w	r2, [r8]
    16ba:	str	r2, [sp, #140]	; 0x8c
	return ret;
    16bc:	ldr	r1, [sp, #140]	; 0x8c
      blinking = true;
    16be:	ldr	r3, [sp, #4]
    16c0:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    16c2:	str.w	sl, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    16c6:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    16c8:	str	r1, [r5, #8]
    16ca:	b.w	4e8 <loop+0x54>
    16ce:	movs	r1, #10
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    16d0:	mov.w	sl, #2
    16d4:	ldr	r0, [pc, #368]	; (1848 <loop+0x13b4>)
    16d6:	str	r3, [sp, #4]
    16d8:	strb.w	sl, [lr]
    16dc:	bl	1bb4 <usb_serial_write>
    16e0:	ldr	r0, [pc, #352]	; (1844 <loop+0x13b0>)
    16e2:	bl	3728 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
    16e6:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    16ea:	ldrb.w	r9, [r6]
    16ee:	mov	r0, r9
    16f0:	bl	21d0 <digitalRead>
    16f4:	clz	r1, r0
    16f8:	lsrs	r1, r1, #5
    16fa:	mov	r0, r9
    16fc:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1700:	ldr.w	r2, [r8]
    1704:	str	r2, [sp, #152]	; 0x98
	return ret;
    1706:	ldr	r1, [sp, #152]	; 0x98
      blinking = true;
    1708:	ldr	r3, [sp, #4]
    170a:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    170c:	str.w	sl, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1710:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1712:	str	r1, [r6, #8]
    1714:	b.w	52a <loop+0x96>
    1718:	movs	r1, #10
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    171a:	mov.w	sl, #2
    171e:	ldr	r0, [pc, #296]	; (1848 <loop+0x13b4>)
    1720:	str	r3, [sp, #4]
    1722:	strb.w	sl, [lr]
    1726:	bl	1bb4 <usb_serial_write>
    172a:	ldr	r0, [pc, #280]	; (1844 <loop+0x13b0>)
    172c:	bl	3728 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
    1730:	ldr.w	r5, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1734:	ldrb.w	r9, [r5]
    1738:	mov	r0, r9
    173a:	bl	21d0 <digitalRead>
    173e:	clz	r1, r0
    1742:	lsrs	r1, r1, #5
    1744:	mov	r0, r9
    1746:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    174a:	ldr.w	r2, [r8]
    174e:	str	r2, [sp, #188]	; 0xbc
	return ret;
    1750:	ldr	r1, [sp, #188]	; 0xbc
      blinking = true;
    1752:	ldr	r3, [sp, #4]
    1754:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    1756:	str.w	sl, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    175a:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    175c:	str	r1, [r5, #8]
    175e:	b.w	5f0 <loop+0x15c>
    1762:	movs	r1, #10
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1764:	mov.w	sl, #2
    1768:	ldr	r0, [pc, #220]	; (1848 <loop+0x13b4>)
    176a:	str	r3, [sp, #4]
    176c:	strb.w	sl, [lr]
    1770:	bl	1bb4 <usb_serial_write>
    1774:	ldr	r0, [pc, #204]	; (1844 <loop+0x13b0>)
    1776:	bl	3728 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
    177a:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    177e:	ldrb.w	r9, [r6]
    1782:	mov	r0, r9
    1784:	bl	21d0 <digitalRead>
    1788:	clz	r1, r0
    178c:	lsrs	r1, r1, #5
    178e:	mov	r0, r9
    1790:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1794:	ldr.w	r2, [r8]
    1798:	str	r2, [sp, #176]	; 0xb0
	return ret;
    179a:	ldr	r1, [sp, #176]	; 0xb0
      blinking = true;
    179c:	ldr	r3, [sp, #4]
    179e:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    17a0:	str.w	sl, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    17a4:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    17a6:	str	r1, [r6, #8]
    17a8:	b.w	5ae <loop+0x11a>
    17ac:	movs	r1, #10
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    17ae:	mov.w	sl, #2
    17b2:	ldr	r0, [pc, #148]	; (1848 <loop+0x13b4>)
    17b4:	str	r3, [sp, #4]
    17b6:	strb.w	sl, [lr]
    17ba:	bl	1bb4 <usb_serial_write>
    17be:	ldr	r0, [pc, #132]	; (1844 <loop+0x13b0>)
    17c0:	bl	3728 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
    17c4:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    17c8:	ldrb.w	r9, [r6]
    17cc:	mov	r0, r9
    17ce:	bl	21d0 <digitalRead>
    17d2:	clz	r1, r0
    17d6:	lsrs	r1, r1, #5
    17d8:	mov	r0, r9
    17da:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17de:	ldr.w	r2, [r8]
    17e2:	str	r2, [sp, #200]	; 0xc8
	return ret;
    17e4:	ldr	r1, [sp, #200]	; 0xc8
      blinking = true;
    17e6:	ldr	r3, [sp, #4]
    17e8:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    17ea:	str.w	sl, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    17ee:	strb	r3, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    17f0:	str	r1, [r6, #8]
    17f2:	b.w	664 <loop+0x1d0>
    17f6:	movs	r1, #10
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(1);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    17f8:	mov.w	sl, #2
    17fc:	ldr	r0, [pc, #72]	; (1848 <loop+0x13b4>)
    17fe:	str	r3, [sp, #4]
    1800:	strb.w	sl, [lr]
    1804:	bl	1bb4 <usb_serial_write>
    1808:	ldr	r0, [pc, #56]	; (1844 <loop+0x13b0>)
    180a:	bl	3728 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink(2);
    180e:	ldr.w	r5, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1812:	ldrb.w	r9, [r5]
    1816:	mov	r0, r9
    1818:	bl	21d0 <digitalRead>
    181c:	clz	r1, r0
    1820:	lsrs	r1, r1, #5
    1822:	mov	r0, r9
    1824:	bl	21c4 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1828:	ldr.w	r2, [r8]
    182c:	str	r2, [sp, #164]	; 0xa4
	return ret;
    182e:	ldr	r1, [sp, #164]	; 0xa4
      blinking = true;
    1830:	ldr	r3, [sp, #4]
    1832:	ldr	r2, [r7, #12]
      blinkingCounter = times;
    1834:	str.w	sl, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1838:	strb	r3, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    183a:	str	r1, [r5, #8]
    183c:	b.w	56c <loop+0xd8>
    1840:	.word	0x00004aec
    1844:	.word	0x1fff0c70
    1848:	.word	0x00004af8

0000184c <_GLOBAL__sub_I_currentMode>:
    184c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#include "controller.h"
#include "transport.h"
#include "step.h"


Led led1(3, LOW);
    1850:	movs	r2, #0
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
    1852:	sub	sp, #12
#include "controller.h"
#include "transport.h"
#include "step.h"


Led led1(3, LOW);
    1854:	movs	r1, #3
    1856:	ldr	r0, [pc, #552]	; (1a80 <_GLOBAL__sub_I_currentMode+0x234>)
    Led* m_leds[6];
    Modes m_mode;
    boolean m_reverse;

    Sequence (Step* steps[4], Led* leds[6]) {
      m_leds[0] = leds[0];
    1858:	ldr	r6, [pc, #552]	; (1a84 <_GLOBAL__sub_I_currentMode+0x238>)
    185a:	ldr	r5, [pc, #556]	; (1a88 <_GLOBAL__sub_I_currentMode+0x23c>)
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    185c:	ldr.w	fp, [pc, #636]	; 1adc <_GLOBAL__sub_I_currentMode+0x290>
    1860:	ldr.w	r9, [pc, #636]	; 1ae0 <_GLOBAL__sub_I_currentMode+0x294>
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    1864:	ldr	r7, [pc, #548]	; (1a8c <_GLOBAL__sub_I_currentMode+0x240>)
    1866:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    186a:	movs	r2, #0
    186c:	movs	r1, #5
    186e:	ldr	r0, [pc, #544]	; (1a90 <_GLOBAL__sub_I_currentMode+0x244>)
    1870:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    1874:	movs	r2, #0
    1876:	movs	r1, #7
    1878:	ldr	r0, [pc, #536]	; (1a94 <_GLOBAL__sub_I_currentMode+0x248>)
    187a:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    187e:	movs	r2, #0
    1880:	movs	r1, #9
    1882:	ldr	r0, [pc, #532]	; (1a98 <_GLOBAL__sub_I_currentMode+0x24c>)
    1884:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    1888:	movs	r2, #0
    188a:	movs	r1, #11
    188c:	ldr	r0, [pc, #524]	; (1a9c <_GLOBAL__sub_I_currentMode+0x250>)
    188e:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    1892:	movs	r2, #0
    1894:	movs	r1, #24
    1896:	ldr	r0, [pc, #520]	; (1aa0 <_GLOBAL__sub_I_currentMode+0x254>)
    1898:	bl	46c <Led::Led(int, int)>
    189c:	ldr	r4, [r6, #0]
    189e:	ldr	r0, [pc, #516]	; (1aa4 <_GLOBAL__sub_I_currentMode+0x258>)
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
    18a0:	ldr	r1, [r6, #8]
      m_leds[3] = leds[3];
    18a2:	ldr	r2, [r6, #12]
    Led* m_leds[6];
    Modes m_mode;
    boolean m_reverse;

    Sequence (Step* steps[4], Led* leds[6]) {
      m_leds[0] = leds[0];
    18a4:	str	r4, [r5, #20]
      m_leds[1] = leds[1];
    18a6:	ldr	r4, [r6, #4]
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
    18a8:	ldr	r3, [r6, #20]
    Modes m_mode;
    boolean m_reverse;

    Sequence (Step* steps[4], Led* leds[6]) {
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
    18aa:	str	r4, [r5, #24]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
      m_length = 4;
    18ac:	mov.w	r8, #4
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    18b0:	movs	r4, #0
      m_leds[2] = leds[2];
    18b2:	str	r1, [r5, #28]
      m_leds[3] = leds[3];
    18b4:	str	r2, [r5, #32]
      m_controller = controller;
      m_pitch = 38;
    18b6:	movs	r1, #38	; 0x26
      m_velocity = 100;
    18b8:	movs	r2, #100	; 0x64
      m_leds[4] = leds[4];
    18ba:	ldr.w	lr, [r6, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    18be:	ldr.w	ip, [pc, #548]	; 1ae4 <_GLOBAL__sub_I_currentMode+0x298>
      m_leds[5] = leds[5];
    18c2:	str	r3, [r5, #40]	; 0x28
    18c4:	str.w	fp, [r0]
    18c8:	ldr	r3, [pc, #476]	; (1aa8 <_GLOBAL__sub_I_currentMode+0x25c>)
      m_state = false;
    18ca:	strb	r4, [r0, #4]
      m_controller = controller;
      m_pitch = 38;
    18cc:	str	r1, [r0, #8]
      m_velocity = 100;
    18ce:	str	r2, [r0, #12]
      m_length = 4;
    18d0:	str.w	r8, [r0, #16]
      m_steps[0] = steps[0];
    18d4:	ldr	r0, [pc, #468]	; (1aac <_GLOBAL__sub_I_currentMode+0x260>)
    Sequence (Step* steps[4], Led* leds[6]) {
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
    18d6:	str.w	lr, [r5, #36]	; 0x24
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    18da:	str.w	fp, [ip]
      m_state = false;
    18de:	strb.w	r4, [ip, #4]
      m_controller = controller;
      m_pitch = 38;
    18e2:	str.w	r1, [ip, #8]
      m_velocity = 100;
    18e6:	str.w	r2, [ip, #12]
      m_length = 4;
    18ea:	str.w	r8, [ip, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    18ee:	str.w	fp, [r9]
      m_state = false;
    18f2:	strb.w	r4, [r9, #4]
      m_controller = controller;
      m_pitch = 38;
    18f6:	str.w	r1, [r9, #8]
      m_velocity = 100;
    18fa:	str.w	r2, [r9, #12]
      m_length = 4;
    18fe:	str.w	r8, [r9, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1902:	str.w	fp, [r3]
      m_state = false;
    1906:	strb	r4, [r3, #4]
      m_controller = controller;
      m_pitch = 38;
    1908:	str	r1, [r3, #8]
      m_velocity = 100;
    190a:	str	r2, [r3, #12]
      m_length = 4;
    190c:	str.w	r8, [r3, #16]
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
    1910:	ldr	r3, [r0, #0]
    };

    void toggle () {
      m_state = !m_state;
    1912:	ldr.w	r1, [lr, #4]
      m_steps[1] = steps[1];
      m_steps[2] = steps[2];
      m_steps[3] = steps[3];
      m_currentStep = 0;
    1916:	str	r4, [r5, #0]
    1918:	clz	r2, r1
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
      m_steps[1] = steps[1];
    191c:	ldr	r1, [r0, #4]
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
    191e:	str	r3, [r5, #4]
    1920:	ldr.w	r3, [lr]
      m_steps[1] = steps[1];
    1924:	str	r1, [r5, #8]
      m_steps[2] = steps[2];
    1926:	ldr	r1, [r0, #8]
    1928:	str	r1, [r5, #12]
    192a:	lsrs	r2, r2, #5
      m_steps[3] = steps[3];
    192c:	ldr	r1, [r0, #12]
      m_currentStep = 0;
      m_mode = PITCH;
    192e:	strb.w	r4, [r5, #44]	; 0x2c
      m_reverse = false;
    1932:	strb.w	r4, [r5, #45]	; 0x2d
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
      m_steps[1] = steps[1];
      m_steps[2] = steps[2];
      m_steps[3] = steps[3];
    1936:	str	r1, [r5, #16]

      digitalWrite(m_pin, m_state); 
    1938:	uxtb	r0, r3
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    193a:	str.w	r2, [lr, #4]

      digitalWrite(m_pin, m_state); 
    193e:	mov	r1, r2
    1940:	bl	21c4 <digitalWrite>
      m_currentStep = 0;
      m_mode = PITCH;
      m_reverse = false;
      m_leds[4]->toggle();
      m_leds[5]->toggle();
    1944:	ldr	r3, [r5, #40]	; 0x28
    1946:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    194a:	clz	r1, r1
    194e:	lsrs	r1, r1, #5
    1950:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1952:	uxtb	r0, r0
    1954:	bl	21c4 <digitalWrite>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1958:	ldr	r3, [pc, #340]	; (1ab0 <_GLOBAL__sub_I_currentMode+0x264>)
    195a:	ldr	r2, [r6, #0]
    195c:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    195e:	mov.w	r9, #2
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1962:	mov.w	sl, #1
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1966:	mov	r1, r4
    1968:	movs	r2, #24
    196a:	mov	r0, r9
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    196c:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    196e:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    1970:	strb	r4, [r3, #17]
    1972:	str	r4, [r7, #8]
      m_state = false;
    1974:	strb	r4, [r7, #0]
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    1976:	str	r2, [r7, #4]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1978:	str.w	sl, [r3]
      m_pin = pin;
    197c:	str.w	r9, [r3, #32]
    1980:	str	r5, [r7, #12]
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1982:	bl	21ec <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1986:	ldr	r3, [pc, #300]	; (1ab4 <_GLOBAL__sub_I_currentMode+0x268>)
    1988:	ldr	r2, [r6, #4]
    198a:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    198c:	mov	r1, r4
    198e:	mov	r0, r8
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1990:	movs	r2, #6
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1992:	str	r5, [r3, #28]
      m_id = id;
    1994:	str.w	r9, [r3]
      m_pin = pin;
    1998:	str.w	r8, [r3, #32]
      m_shiftButton = shiftButton;
    199c:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    199e:	strb	r4, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    19a0:	str	r2, [sp, #4]
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    19a2:	bl	21ec <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    19a6:	ldr	r3, [pc, #272]	; (1ab8 <_GLOBAL__sub_I_currentMode+0x26c>)
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    19a8:	ldr	r2, [sp, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    19aa:	ldr	r1, [r6, #8]
    19ac:	str	r1, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    19ae:	mov	r0, r2
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    19b0:	mov.w	fp, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    19b4:	mov	r1, r4
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    19b6:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    19b8:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    19ba:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    19bc:	strb	r4, [r3, #17]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    19be:	str.w	fp, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    19c2:	bl	21ec <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    19c6:	ldr	r3, [pc, #244]	; (1abc <_GLOBAL__sub_I_currentMode+0x270>)
    19c8:	ldr	r1, [r6, #12]
    19ca:	str	r1, [r3, #24]
      m_id = id;
      m_pin = pin;
    19cc:	movs	r1, #8
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    19ce:	mov	r0, r1
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    19d0:	str	r1, [r3, #32]
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    19d2:	mov	r1, r4
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    19d4:	str	r5, [r3, #28]
      m_id = id;
    19d6:	str.w	r8, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
    19da:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    19dc:	strb	r4, [r3, #17]

      pinMode(pin, INPUT);
    19de:	bl	21ec <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    19e2:	ldr	r3, [pc, #220]	; (1ac0 <_GLOBAL__sub_I_currentMode+0x274>)
    19e4:	ldr	r1, [r6, #16]
    19e6:	str	r1, [r3, #24]
      m_id = id;
    19e8:	movs	r0, #5
      m_pin = pin;
    19ea:	movs	r1, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    19ec:	str	r0, [r3, #0]
      m_pin = pin;
    19ee:	str	r1, [r3, #32]
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    19f0:	mov	r0, r1
    19f2:	mov	r1, r4
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    19f4:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    19f6:	strb.w	sl, [r3, #16]
      m_reverseButton = reverseButton;
    19fa:	strb	r4, [r3, #17]

      pinMode(pin, INPUT);
    19fc:	bl	21ec <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1a00:	ldr	r3, [pc, #192]	; (1ac4 <_GLOBAL__sub_I_currentMode+0x278>)
      m_id = id;
    1a02:	ldr	r2, [sp, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1a04:	ldr	r6, [r6, #20]
      m_id = id;
    1a06:	str	r2, [r3, #0]
      m_pin = pin;
    1a08:	movs	r2, #12
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1a0a:	mov	r0, r2
    1a0c:	mov	r1, r4
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1a0e:	str	r6, [r3, #24]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1a10:	ldr	r6, [pc, #180]	; (1ac8 <_GLOBAL__sub_I_currentMode+0x27c>)
    1a12:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1a14:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    1a16:	strb.w	sl, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1a1a:	str	r2, [r3, #32]
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1a1c:	bl	21ec <pinMode>
    1a20:	ldr	r0, [pc, #168]	; (1acc <_GLOBAL__sub_I_currentMode+0x280>)
    1a22:	ldr	r1, [pc, #172]	; (1ad0 <_GLOBAL__sub_I_currentMode+0x284>)
    1a24:	ldr	r2, [pc, #172]	; (1ad4 <_GLOBAL__sub_I_currentMode+0x288>)
    1a26:	ldr	r3, [pc, #176]	; (1ad8 <_GLOBAL__sub_I_currentMode+0x28c>)
      m_pin = pin;
      m_knobType = knobType;
    1a28:	strb	r4, [r6, #24]
      m_id = id;
    1a2a:	str	r4, [r6, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1a2c:	mov.w	lr, #15
    1a30:	movs	r4, #14
    1a32:	strb	r4, [r6, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1a34:	str	r5, [r6, #16]
    1a36:	str	r7, [r6, #20]
    1a38:	str	r5, [r0, #16]
      m_pin = pin;
    1a3a:	movs	r6, #16
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1a3c:	str	r7, [r0, #20]
      m_pin = pin;
      m_knobType = knobType;
    1a3e:	strb.w	sl, [r0, #24]
      m_id = id;
    1a42:	str.w	sl, [r0, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1a46:	movs	r4, #17
    1a48:	strb.w	lr, [r0]
    1a4c:	movs	r0, #18
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1a4e:	str	r5, [r1, #16]
    1a50:	str	r7, [r1, #20]
      m_pin = pin;
      m_knobType = knobType;
    1a52:	strb.w	r9, [r1, #24]
      m_id = id;
    1a56:	str.w	r9, [r1, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1a5a:	strb	r6, [r1, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1a5c:	str	r5, [r2, #16]
    1a5e:	str	r7, [r2, #20]
      m_pin = pin;
      m_knobType = knobType;
    1a60:	strb.w	fp, [r2, #24]
      m_id = id;
    1a64:	str.w	fp, [r2, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1a68:	strb	r4, [r2, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1a6a:	str	r5, [r3, #16]
    1a6c:	str	r7, [r3, #20]
      m_pin = pin;
      m_knobType = knobType;
    1a6e:	strb.w	r8, [r3, #24]
      m_id = id;
    1a72:	str.w	r8, [r3, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1a76:	strb	r0, [r3, #0]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
    1a78:	add	sp, #12
    1a7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a7e:	nop
    1a80:	.word	0x1fff1804
    1a84:	.word	0x1fff0c50
    1a88:	.word	0x1fff17c0
    1a8c:	.word	0x1fff17f0
    1a90:	.word	0x1fff181c
    1a94:	.word	0x1fff1834
    1a98:	.word	0x1fff184c
    1a9c:	.word	0x1fff15d8
    1aa0:	.word	0x1fff15f0
    1aa4:	.word	0x1fff16e4
    1aa8:	.word	0x1fff1720
    1aac:	.word	0x1fff0c40
    1ab0:	.word	0x1fff160c
    1ab4:	.word	0x1fff1630
    1ab8:	.word	0x1fff1654
    1abc:	.word	0x1fff1678
    1ac0:	.word	0x1fff169c
    1ac4:	.word	0x1fff16c0
    1ac8:	.word	0x1fff1734
    1acc:	.word	0x1fff1750
    1ad0:	.word	0x1fff176c
    1ad4:	.word	0x1fff1788
    1ad8:	.word	0x1fff17a4
    1adc:	.word	0x1fff1608
    1ae0:	.word	0x1fff16f8
    1ae4:	.word	0x1fff170c

00001ae8 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1ae8:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    1aea:	ldr	r5, [pc, #60]	; (1b28 <usb_serial_getchar+0x40>)
    1aec:	ldr	r0, [r5, #0]
    1aee:	cbz	r0, 1b10 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1af0:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    1af2:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1af4:	adds	r1, r0, r3
    1af6:	adds	r3, #1
	if (i >= rx_packet->len) {
    1af8:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1afa:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    1afc:	bcs.n	1b04 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    1afe:	strh	r3, [r0, #2]
	}
	return c;
    1b00:	mov	r0, r4
}
    1b02:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    1b04:	bl	2994 <usb_free>
		rx_packet = NULL;
    1b08:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    1b0a:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1b0c:	str	r3, [r5, #0]
    1b0e:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1b10:	ldr	r3, [pc, #24]	; (1b2c <usb_serial_getchar+0x44>)
    1b12:	ldrb	r3, [r3, #0]
    1b14:	cbz	r3, 1b22 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1b16:	movs	r0, #2
    1b18:	bl	29e0 <usb_rx>
    1b1c:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    1b1e:	cmp	r0, #0
    1b20:	bne.n	1af0 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1b22:	mov.w	r0, #4294967295
    1b26:	pop	{r3, r4, r5, pc}
    1b28:	.word	0x1fff1870
    1b2c:	.word	0x1fff19d0

00001b30 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1b30:	push	{r4, lr}
	if (!rx_packet) {
    1b32:	ldr	r4, [pc, #36]	; (1b58 <usb_serial_peekchar+0x28>)
    1b34:	ldr	r0, [r4, #0]
    1b36:	cbz	r0, 1b40 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    1b38:	ldrh	r3, [r0, #2]
    1b3a:	add	r0, r3
    1b3c:	ldrb	r0, [r0, #8]
}
    1b3e:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1b40:	ldr	r3, [pc, #24]	; (1b5c <usb_serial_peekchar+0x2c>)
    1b42:	ldrb	r3, [r3, #0]
    1b44:	cbz	r3, 1b52 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1b46:	movs	r0, #2
    1b48:	bl	29e0 <usb_rx>
    1b4c:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1b4e:	cmp	r0, #0
    1b50:	bne.n	1b38 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1b52:	mov.w	r0, #4294967295
    1b56:	pop	{r4, pc}
    1b58:	.word	0x1fff1870
    1b5c:	.word	0x1fff19d0

00001b60 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1b60:	ldr	r3, [pc, #16]	; (1b74 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    1b62:	ldr	r2, [pc, #20]	; (1b78 <usb_serial_available+0x18>)
    1b64:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    1b66:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1b68:	cbz	r3, 1b72 <usb_serial_available+0x12>
    1b6a:	ldrh	r2, [r3, #0]
    1b6c:	ldrh	r3, [r3, #2]
    1b6e:	subs	r3, r2, r3
    1b70:	add	r0, r3
	return count;
}
    1b72:	bx	lr
    1b74:	.word	0x1fff1870
    1b78:	.word	0x1fff1e64

00001b7c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    1b7c:	ldr	r3, [pc, #44]	; (1bac <usb_serial_flush_input+0x30>)
    1b7e:	ldrb	r3, [r3, #0]
    1b80:	cbz	r3, 1baa <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    1b82:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    1b84:	ldr	r4, [pc, #40]	; (1bb0 <usb_serial_flush_input+0x34>)
    1b86:	ldr	r0, [r4, #0]
    1b88:	cbz	r0, 1b9e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    1b8a:	bl	2994 <usb_free>
		rx_packet = NULL;
    1b8e:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1b90:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1b92:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1b94:	bl	29e0 <usb_rx>
		if (!rx) break;
    1b98:	cbz	r0, 1ba8 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    1b9a:	bl	2994 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1b9e:	movs	r0, #2
    1ba0:	bl	29e0 <usb_rx>
		if (!rx) break;
    1ba4:	cmp	r0, #0
    1ba6:	bne.n	1b9a <usb_serial_flush_input+0x1e>
    1ba8:	pop	{r4, pc}
    1baa:	bx	lr
    1bac:	.word	0x1fff19d0
    1bb0:	.word	0x1fff1870

00001bb4 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1bb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1bb8:	ldr.w	r9, [pc, #248]	; 1cb4 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1bbc:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1bbe:	movs	r2, #1
    1bc0:	strb.w	r2, [r9]
	while (size > 0) {
    1bc4:	str	r1, [sp, #4]
    1bc6:	cbz	r1, 1c24 <usb_serial_write+0x70>
    1bc8:	ldr.w	r8, [pc, #236]	; 1cb8 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1bcc:	ldr	r7, [pc, #212]	; (1ca4 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1bce:	ldr	r6, [sp, #4]
    1bd0:	mov	fp, r0
		if (!tx_packet) {
    1bd2:	ldr.w	r0, [r8]
    1bd6:	cbz	r0, 1c46 <usb_serial_write+0x92>
    1bd8:	ldr	r5, [pc, #204]	; (1ca8 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    1bda:	ldrh	r4, [r0, #2]
    1bdc:	rsb	r1, r4, #64	; 0x40
    1be0:	cmp	r1, r6
    1be2:	it	cs
    1be4:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1be6:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1bea:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1bec:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1bf0:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1bf2:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1bf4:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1bf8:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1bfc:	cbz	r1, 1c14 <usb_serial_write+0x60>
    1bfe:	subs	r4, #1
    1c00:	add	r2, r4
    1c02:	add	r1, fp
    1c04:	ldrb.w	r4, [fp], #1
    1c08:	strb.w	r4, [r2, #1]!
    1c0c:	cmp	fp, r1
    1c0e:	bne.n	1c04 <usb_serial_write+0x50>
    1c10:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1c14:	cmp.w	lr, #63	; 0x3f
    1c18:	bhi.n	1c32 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1c1a:	ldr	r2, [pc, #144]	; (1cac <usb_serial_write+0xf8>)
    1c1c:	movs	r1, #5
    1c1e:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1c20:	cmp	r6, #0
    1c22:	bne.n	1bd2 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1c24:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    1c26:	movs	r3, #0
    1c28:	strb.w	r3, [r9]
	return ret;
}
    1c2c:	add	sp, #12
    1c2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1c32:	movs	r2, #64	; 0x40
    1c34:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1c36:	mov	r1, r0
    1c38:	movs	r0, #3
    1c3a:	bl	2b30 <usb_tx>
			tx_packet = NULL;
    1c3e:	movs	r2, #0
    1c40:	str.w	r2, [r8]
    1c44:	b.n	1c1a <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1c46:	ldrb	r2, [r7, #0]
    1c48:	cbz	r2, 1c94 <usb_serial_write+0xe0>
    1c4a:	ldr	r4, [pc, #100]	; (1cb0 <usb_serial_write+0xfc>)
    1c4c:	ldr	r5, [pc, #88]	; (1ca8 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1c4e:	mov.w	sl, #1
    1c52:	b.n	1c64 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1c54:	subs	r4, #1
    1c56:	beq.n	1c86 <usb_serial_write+0xd2>
    1c58:	ldrb	r2, [r5, #0]
    1c5a:	cbnz	r2, 1c86 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    1c5c:	bl	3634 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1c60:	ldrb	r2, [r7, #0]
    1c62:	cbz	r2, 1c94 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1c64:	movs	r0, #3
    1c66:	bl	2a1c <usb_tx_packet_count>
    1c6a:	cmp	r0, #7
    1c6c:	bhi.n	1c54 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    1c6e:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    1c72:	bl	2954 <usb_malloc>
    1c76:	str.w	r0, [r8]
					if (tx_packet) break;
    1c7a:	cmp	r0, #0
    1c7c:	bne.n	1bda <usb_serial_write+0x26>
					tx_noautoflush = 0;
    1c7e:	ldr	r3, [pc, #52]	; (1cb4 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1c80:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    1c82:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1c84:	bne.n	1c58 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    1c86:	movs	r3, #1
					return -1;
    1c88:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    1c8c:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1c8e:	add	sp, #12
    1c90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1c94:	movs	r3, #0
					return -1;
    1c96:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1c9a:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1c9e:	add	sp, #12
    1ca0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ca4:	.word	0x1fff19d0
    1ca8:	.word	0x1fff186c
    1cac:	.word	0x1fff1864
    1cb0:	.word	0x00014821
    1cb4:	.word	0x1fff1865
    1cb8:	.word	0x1fff1868

00001cbc <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1cbc:	push	{lr}
    1cbe:	sub	sp, #12
    1cc0:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    1cc2:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1cc4:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    1cc8:	mov	r0, r3
    1cca:	bl	1bb4 <usb_serial_write>
}
    1cce:	add	sp, #12
    1cd0:	ldr.w	pc, [sp], #4

00001cd4 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    1cd4:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1cd6:	ldr	r5, [pc, #56]	; (1d10 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1cd8:	ldr	r4, [pc, #56]	; (1d14 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    1cda:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1cdc:	movs	r3, #1
    1cde:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1ce0:	cbz	r0, 1cee <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1ce2:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1ce4:	movs	r3, #0
    1ce6:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1ce8:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1cec:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1cee:	ldr	r3, [pc, #40]	; (1d18 <usb_serial_write_buffer_free+0x44>)
    1cf0:	ldrb	r3, [r3, #0]
    1cf2:	cbnz	r3, 1cfa <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    1cf4:	movs	r0, #0
    1cf6:	strb	r0, [r4, #0]
			return 0;
    1cf8:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1cfa:	movs	r0, #3
    1cfc:	bl	2a1c <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1d00:	cmp	r0, #7
    1d02:	bhi.n	1cf4 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    1d04:	bl	2954 <usb_malloc>
    1d08:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1d0a:	cmp	r0, #0
    1d0c:	bne.n	1ce2 <usb_serial_write_buffer_free+0xe>
    1d0e:	b.n	1cf4 <usb_serial_write_buffer_free+0x20>
    1d10:	.word	0x1fff1868
    1d14:	.word	0x1fff1865
    1d18:	.word	0x1fff19d0

00001d1c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1d1c:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1d1e:	ldr	r3, [pc, #68]	; (1d64 <usb_serial_flush_output+0x48>)
    1d20:	ldrb	r3, [r3, #0]
    1d22:	cbz	r3, 1d48 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    1d24:	ldr	r6, [pc, #64]	; (1d68 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1d26:	ldr	r5, [pc, #68]	; (1d6c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    1d28:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1d2a:	movs	r7, #1
    1d2c:	strb	r7, [r5, #0]
	if (tx_packet) {
    1d2e:	cbz	r4, 1d4a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1d30:	ldr	r2, [pc, #60]	; (1d70 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    1d32:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    1d34:	movs	r7, #0
    1d36:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1d38:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    1d3a:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1d3c:	movs	r0, #3
    1d3e:	bl	2b30 <usb_tx>
		tx_packet = NULL;
    1d42:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    1d44:	movs	r3, #0
    1d46:	strb	r3, [r5, #0]
    1d48:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1d4a:	bl	2954 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1d4e:	ldr	r3, [pc, #32]	; (1d70 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1d50:	cbz	r0, 1d5e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    1d52:	mov	r1, r0
    1d54:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1d56:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    1d58:	bl	2b30 <usb_tx>
    1d5c:	b.n	1d44 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1d5e:	strb	r7, [r3, #0]
    1d60:	b.n	1d44 <usb_serial_flush_output+0x28>
    1d62:	nop
    1d64:	.word	0x1fff19d0
    1d68:	.word	0x1fff1868
    1d6c:	.word	0x1fff1865
    1d70:	.word	0x1fff1864

00001d74 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    1d74:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    1d76:	ldr	r3, [pc, #56]	; (1db0 <usb_serial_flush_callback+0x3c>)
    1d78:	ldrb	r3, [r3, #0]
    1d7a:	cbnz	r3, 1d9a <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    1d7c:	ldr	r4, [pc, #52]	; (1db4 <usb_serial_flush_callback+0x40>)
    1d7e:	ldr	r1, [r4, #0]
    1d80:	cbz	r1, 1d9c <usb_serial_flush_callback+0x28>
    1d82:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    1d86:	ldrh	r3, [r1, #2]
    1d88:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1d8a:	movs	r0, #3
    1d8c:	bl	2b30 <usb_tx>
		tx_packet = NULL;
    1d90:	str	r5, [r4, #0]
    1d92:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1d94:	ldr	r3, [pc, #32]	; (1db8 <usb_serial_flush_callback+0x44>)
    1d96:	movs	r2, #1
    1d98:	strb	r2, [r3, #0]
    1d9a:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1d9c:	bl	2954 <usb_malloc>
		if (tx) {
    1da0:	cmp	r0, #0
    1da2:	beq.n	1d94 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    1da4:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    1da6:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    1daa:	movs	r0, #3
    1dac:	b.w	2b30 <usb_tx>
    1db0:	.word	0x1fff1865
    1db4:	.word	0x1fff1868
    1db8:	.word	0x1fff1864

00001dbc <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1dbc:	ldr	r2, [pc, #220]	; (1e9c <wait_for_cal+0xe0>)
    1dbe:	ldr	r1, [pc, #224]	; (1ea0 <wait_for_cal+0xe4>)
    1dc0:	ldr	r3, [r2, #0]
    1dc2:	lsls	r3, r3, #24
    1dc4:	bmi.n	1dc0 <wait_for_cal+0x4>
    1dc6:	ldr	r3, [r1, #0]
    1dc8:	ands.w	r3, r3, #128	; 0x80
    1dcc:	bne.n	1dc0 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    1dce:	cpsid	i
	if (calibrating) {
    1dd0:	ldr	r1, [pc, #208]	; (1ea4 <wait_for_cal+0xe8>)
    1dd2:	ldrb	r2, [r1, #0]
    1dd4:	cmp	r2, #0
    1dd6:	beq.n	1e98 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1dd8:	ldr	r2, [pc, #204]	; (1ea8 <wait_for_cal+0xec>)
    1dda:	ldr	r0, [pc, #208]	; (1eac <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1ddc:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1dde:	ldr	r4, [pc, #208]	; (1eb0 <wait_for_cal+0xf4>)
    1de0:	ldr	r7, [r2, #0]
    1de2:	ldr	r6, [r0, #0]
    1de4:	ldr	r5, [r4, #0]
    1de6:	ldr	r4, [r2, #12]
    1de8:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1dea:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1dec:	adds	r2, #20
    1dee:	ldr	r0, [r0, #0]
    1df0:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1df2:	ldr	r7, [pc, #192]	; (1eb4 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1df4:	add	r5, r6
    1df6:	add	r4, r5
    1df8:	add	r0, r4
    1dfa:	add	r2, r0
    1dfc:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1e00:	ldr	r6, [pc, #180]	; (1eb8 <wait_for_cal+0xfc>)
    1e02:	ldr	r0, [pc, #184]	; (1ebc <wait_for_cal+0x100>)
    1e04:	ldr	r5, [pc, #184]	; (1ec0 <wait_for_cal+0x104>)
    1e06:	ldr	r4, [pc, #188]	; (1ec4 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1e08:	orr.w	r2, r2, #32768	; 0x8000
    1e0c:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1e0e:	ldr	r7, [r6, #0]
    1e10:	ldr	r6, [r0, #0]
    1e12:	ldr	r5, [r5, #0]
    1e14:	ldr	r2, [pc, #176]	; (1ec8 <wait_for_cal+0x10c>)
    1e16:	ldr	r4, [r4, #0]
    1e18:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1e1a:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1e1c:	ldr	r0, [r0, #0]
    1e1e:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1e20:	ldr	r7, [pc, #168]	; (1ecc <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    1e22:	add	r5, r6
    1e24:	add	r4, r5
    1e26:	add	r0, r4
    1e28:	add	r2, r0
    1e2a:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1e2e:	ldr	r6, [pc, #160]	; (1ed0 <wait_for_cal+0x114>)
    1e30:	ldr	r0, [pc, #160]	; (1ed4 <wait_for_cal+0x118>)
    1e32:	ldr	r5, [pc, #164]	; (1ed8 <wait_for_cal+0x11c>)
    1e34:	ldr	r4, [pc, #164]	; (1edc <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1e36:	orr.w	r2, r2, #32768	; 0x8000
    1e3a:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1e3c:	ldr	r7, [r6, #0]
    1e3e:	ldr	r6, [r0, #0]
    1e40:	ldr	r5, [r5, #0]
    1e42:	ldr	r2, [pc, #156]	; (1ee0 <wait_for_cal+0x124>)
    1e44:	ldr	r4, [r4, #0]
    1e46:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1e48:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1e4a:	ldr	r0, [r0, #0]
    1e4c:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1e4e:	ldr	r7, [pc, #148]	; (1ee4 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1e50:	add	r5, r6
    1e52:	add	r4, r5
    1e54:	add	r0, r4
    1e56:	add	r2, r0
    1e58:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1e5c:	ldr	r6, [pc, #136]	; (1ee8 <wait_for_cal+0x12c>)
    1e5e:	ldr	r0, [pc, #140]	; (1eec <wait_for_cal+0x130>)
    1e60:	ldr	r5, [pc, #140]	; (1ef0 <wait_for_cal+0x134>)
    1e62:	ldr	r4, [pc, #144]	; (1ef4 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1e64:	orr.w	r2, r2, #32768	; 0x8000
    1e68:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1e6a:	ldr	r7, [r6, #0]
    1e6c:	ldr	r6, [r0, #0]
    1e6e:	ldr	r5, [r5, #0]
    1e70:	ldr	r2, [pc, #132]	; (1ef8 <wait_for_cal+0x13c>)
    1e72:	ldr	r4, [r4, #0]
    1e74:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1e76:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1e78:	ldr	r0, [r0, #0]
    1e7a:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    1e7c:	add	r5, r6
    1e7e:	add	r4, r5
    1e80:	add	r0, r4
    1e82:	add	r2, r0
    1e84:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    1e88:	ldr	r0, [pc, #112]	; (1efc <wait_for_cal+0x140>)
    1e8a:	orr.w	r2, r2, #32768	; 0x8000
    1e8e:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    1e90:	strb	r3, [r1, #0]
	}
	__enable_irq();
    1e92:	cpsie	i
}
    1e94:	pop	{r4, r5, r6, r7}
    1e96:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    1e98:	cpsie	i
    1e9a:	bx	lr
    1e9c:	.word	0x4003b024
    1ea0:	.word	0x400bb024
    1ea4:	.word	0x1fff1876
    1ea8:	.word	0x4003b038
    1eac:	.word	0x4003b03c
    1eb0:	.word	0x4003b040
    1eb4:	.word	0x4003b02c
    1eb8:	.word	0x4003b058
    1ebc:	.word	0x4003b05c
    1ec0:	.word	0x4003b060
    1ec4:	.word	0x4003b064
    1ec8:	.word	0x4003b06c
    1ecc:	.word	0x4003b030
    1ed0:	.word	0x400bb038
    1ed4:	.word	0x400bb03c
    1ed8:	.word	0x400bb040
    1edc:	.word	0x400bb044
    1ee0:	.word	0x400bb04c
    1ee4:	.word	0x400bb02c
    1ee8:	.word	0x400bb058
    1eec:	.word	0x400bb05c
    1ef0:	.word	0x400bb060
    1ef4:	.word	0x400bb064
    1ef8:	.word	0x400bb06c
    1efc:	.word	0x400bb030

00001f00 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1f00:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1f02:	ldr	r0, [pc, #164]	; (1fa8 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1f04:	ldr	r2, [pc, #164]	; (1fac <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    1f06:	ldr	r3, [pc, #168]	; (1fb0 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1f08:	ldr	r5, [pc, #168]	; (1fb4 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1f0a:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1f0c:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1f0e:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1f10:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    1f12:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1f14:	ldr	r4, [pc, #160]	; (1fb8 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    1f16:	cmp	r3, #8
    1f18:	beq.n	1f7c <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1f1a:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1f1c:	ldr	r0, [pc, #156]	; (1fbc <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1f1e:	ldr	r1, [pc, #160]	; (1fc0 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1f20:	beq.n	1f92 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    1f22:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    1f24:	ite	eq
    1f26:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1f28:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1f2a:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1f2c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1f2e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1f30:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1f32:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1f34:	ldr	r3, [pc, #140]	; (1fc4 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1f36:	ldr	r1, [pc, #144]	; (1fc8 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1f38:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1f3a:	ldr	r2, [pc, #144]	; (1fcc <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1f3c:	cbz	r3, 1f6e <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1f3e:	movs	r3, #1
    1f40:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1f42:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1f44:	ldr	r3, [pc, #136]	; (1fd0 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1f46:	ldr	r1, [pc, #140]	; (1fd4 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1f48:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1f4a:	ldr	r2, [pc, #140]	; (1fd8 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    1f4c:	cmp	r3, #1
    1f4e:	bls.n	1f9e <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    1f50:	cmp	r3, #4
    1f52:	bls.n	1f74 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    1f54:	cmp	r3, #8
    1f56:	bls.n	1f96 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    1f58:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    1f5a:	ite	ls
    1f5c:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1f5e:	movhi	r3, #135	; 0x87
    1f60:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1f62:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    1f64:	ldr	r3, [pc, #116]	; (1fdc <analog_init+0xdc>)
    1f66:	movs	r2, #1
    1f68:	strb	r2, [r3, #0]
}
    1f6a:	pop	{r4, r5}
    1f6c:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1f6e:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1f70:	str	r3, [r2, #0]
    1f72:	b.n	1f44 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1f74:	movs	r3, #132	; 0x84
    1f76:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1f78:	str	r3, [r2, #0]
    1f7a:	b.n	1f64 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1f7c:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1f80:	ldr	r1, [pc, #60]	; (1fc0 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1f82:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1f84:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1f86:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1f88:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1f8a:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1f8c:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1f8e:	str	r3, [r1, #0]
    1f90:	b.n	1f34 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1f92:	movs	r2, #57	; 0x39
    1f94:	b.n	1f86 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1f96:	movs	r3, #133	; 0x85
    1f98:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1f9a:	str	r3, [r2, #0]
    1f9c:	b.n	1f64 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1f9e:	movs	r3, #128	; 0x80
    1fa0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1fa2:	str	r3, [r2, #0]
    1fa4:	b.n	1f64 <analog_init+0x64>
    1fa6:	nop
    1fa8:	.word	0x40074000
    1fac:	.word	0x40074001
    1fb0:	.word	0x1fff0c68
    1fb4:	.word	0x4003b008
    1fb8:	.word	0x4003b00c
    1fbc:	.word	0x400bb008
    1fc0:	.word	0x400bb00c
    1fc4:	.word	0x1fff1879
    1fc8:	.word	0x4003b020
    1fcc:	.word	0x400bb020
    1fd0:	.word	0x1fff0c69
    1fd4:	.word	0x4003b024
    1fd8:	.word	0x400bb024
    1fdc:	.word	0x1fff1876

00001fe0 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1fe0:	cmp	r0, #71	; 0x47
    1fe2:	bhi.n	2044 <analogRead+0x64>
	channel = pin2sc1a[pin];
    1fe4:	ldr	r3, [pc, #204]	; (20b4 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    1fe6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    1fea:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    1fec:	cmp	r6, #255	; 0xff
    1fee:	beq.n	2048 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1ff0:	ldr	r3, [pc, #196]	; (20b8 <analogRead+0xd8>)
    1ff2:	ldrb	r3, [r3, #0]
    1ff4:	cmp	r3, #0
    1ff6:	bne.n	204e <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1ff8:	lsls	r2, r6, #24
    1ffa:	bmi.n	2056 <analogRead+0x76>
#endif

	__disable_irq();
    1ffc:	cpsid	i
    1ffe:	ldr	r5, [pc, #188]	; (20bc <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2000:	ldr	r4, [pc, #188]	; (20c0 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    2002:	mov	r7, r5
    2004:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2006:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    2008:	strb	r3, [r5, #0]
	__enable_irq();
    200a:	cpsie	i
	while (1) {
		__disable_irq();
    200c:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    200e:	ldr	r3, [r4, #0]
    2010:	lsls	r3, r3, #24
    2012:	bmi.n	202e <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    2014:	ldrb	r3, [r7, #0]
    2016:	cbnz	r3, 2020 <analogRead+0x40>
    2018:	b.n	2004 <analogRead+0x24>
    201a:	ldrb	r3, [r5, #0]
    201c:	cmp	r3, #0
    201e:	beq.n	2004 <analogRead+0x24>
		__enable_irq();
    2020:	cpsie	i
		yield();
    2022:	bl	3634 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2026:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2028:	ldr	r3, [r4, #0]
    202a:	lsls	r0, r3, #24
    202c:	bpl.n	201a <analogRead+0x3a>
			result = ADC0_RA;
    202e:	ldr	r3, [pc, #148]	; (20c4 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    2030:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    2032:	movs	r2, #0
    2034:	strb	r2, [r5, #0]
			__enable_irq();
    2036:	cpsie	i
			result >>= analog_right_shift;
    2038:	ldr	r2, [pc, #140]	; (20c8 <analogRead+0xe8>)
    203a:	ldrb	r0, [r2, #0]
    203c:	asr.w	r0, r3, r0
			return result;
    2040:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2044:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2046:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2048:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    204a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    204e:	bl	1dbc <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2052:	lsls	r2, r6, #24
    2054:	bpl.n	1ffc <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    2056:	cpsid	i
    2058:	ldr	r5, [pc, #112]	; (20cc <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    205a:	ldr.w	r8, [pc, #124]	; 20d8 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    205e:	ldr	r4, [pc, #112]	; (20d0 <analogRead+0xf0>)
    2060:	and.w	r7, r6, #64	; 0x40
    2064:	uxtb	r7, r7
    2066:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    206a:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    206e:	cbz	r7, 20a8 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2070:	bic.w	r3, r3, #16
    2074:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    2078:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    207a:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    207c:	ldr	r2, [pc, #76]	; (20cc <analogRead+0xec>)
    207e:	strb	r3, [r5, #0]
	__enable_irq();
    2080:	cpsie	i
	while (1) {
		__disable_irq();
    2082:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2084:	ldr	r3, [r4, #0]
    2086:	lsls	r1, r3, #24
    2088:	bmi.n	20a4 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    208a:	ldrb	r3, [r2, #0]
    208c:	cbnz	r3, 2096 <analogRead+0xb6>
    208e:	b.n	206a <analogRead+0x8a>
    2090:	ldrb	r3, [r5, #0]
    2092:	cmp	r3, #0
    2094:	beq.n	206a <analogRead+0x8a>
		__enable_irq();
    2096:	cpsie	i
		yield();
    2098:	bl	3634 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    209c:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    209e:	ldr	r3, [r4, #0]
    20a0:	lsls	r3, r3, #24
    20a2:	bpl.n	2090 <analogRead+0xb0>
			result = ADC1_RA;
    20a4:	ldr	r3, [pc, #44]	; (20d4 <analogRead+0xf4>)
    20a6:	b.n	2030 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    20a8:	orr.w	r3, r3, #16
    20ac:	str.w	r3, [r8]
    20b0:	b.n	2078 <analogRead+0x98>
    20b2:	nop
    20b4:	.word	0x00004b0c
    20b8:	.word	0x1fff1876
    20bc:	.word	0x1fff1878
    20c0:	.word	0x4003b000
    20c4:	.word	0x4003b010
    20c8:	.word	0x1fff1875
    20cc:	.word	0x1fff1877
    20d0:	.word	0x400bb000
    20d4:	.word	0x400bb010
    20d8:	.word	0x400bb00c

000020dc <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    20dc:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    20de:	ldr	r3, [pc, #68]	; (2124 <digitalWrite.part.1+0x48>)
    20e0:	ldr.w	r2, [r3, r0, lsl #3]
    20e4:	ldrb.w	r4, [r2, #640]	; 0x280
    20e8:	cbz	r4, 20f8 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    20ea:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    20ec:	cbz	r1, 210e <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    20ee:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    20f2:	ldr.w	r4, [sp], #4
    20f6:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    20f8:	add.w	r3, r3, r0, lsl #3
    20fc:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    20fe:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    2100:	cbnz	r1, 2118 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    2102:	bic.w	r2, r2, #2
    2106:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2108:	ldr.w	r4, [sp], #4
    210c:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    210e:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2112:	ldr.w	r4, [sp], #4
    2116:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2118:	orr.w	r2, r2, #3
    211c:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    211e:	ldr.w	r4, [sp], #4
    2122:	bx	lr
    2124:	.word	0x00004b54

00002128 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2128:	ldr	r2, [pc, #112]	; (219c <pinMode.part.2+0x74>)
    212a:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    212e:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2130:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2132:	beq.n	2158 <pinMode.part.2+0x30>
    2134:	cmp	r1, #4
    2136:	beq.n	2170 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2138:	ldr.w	r0, [r2, r0, lsl #3]
    213c:	movs	r2, #0
    213e:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    2142:	cbz	r1, 2150 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2144:	cmp	r1, #2
    2146:	beq.n	218a <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2148:	cmp	r1, #3
    214a:	beq.n	2192 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    214c:	str	r2, [r3, #0]
    214e:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2150:	mov.w	r2, #256	; 0x100
    2154:	str	r2, [r3, #0]
    2156:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2158:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    215c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2160:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2164:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2166:	ldr	r2, [r3, #0]
    2168:	bic.w	r2, r2, #32
    216c:	str	r2, [r3, #0]
    216e:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2170:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2174:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2178:	movs	r0, #1
    217a:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    217e:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    2180:	ldr	r2, [r3, #0]
    2182:	orr.w	r2, r2, #32
    2186:	str	r2, [r3, #0]
    2188:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    218a:	movw	r2, #259	; 0x103
    218e:	str	r2, [r3, #0]
    2190:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    2192:	mov.w	r2, #258	; 0x102
    2196:	str	r2, [r3, #0]
    2198:	bx	lr
    219a:	nop
    219c:	.word	0x00004b54

000021a0 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    21a0:	push	{r4, r5}
	RTC_SR = 0;
    21a2:	ldr	r3, [pc, #20]	; (21b8 <rtc_set+0x18>)
	RTC_TPR = 0;
    21a4:	ldr	r5, [pc, #20]	; (21bc <rtc_set+0x1c>)
	RTC_TSR = t;
    21a6:	ldr	r4, [pc, #24]	; (21c0 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    21a8:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    21aa:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    21ac:	str	r2, [r3, #0]
	RTC_TPR = 0;
    21ae:	str	r2, [r5, #0]
	RTC_TSR = t;
    21b0:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    21b2:	str	r1, [r3, #0]
}
    21b4:	pop	{r4, r5}
    21b6:	bx	lr
    21b8:	.word	0x4003d014
    21bc:	.word	0x4003d004
    21c0:	.word	0x4003d000

000021c4 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    21c4:	cmp	r0, #63	; 0x3f
    21c6:	bhi.n	21cc <digitalWrite+0x8>
    21c8:	b.w	20dc <digitalWrite.part.1>
    21cc:	bx	lr
    21ce:	nop

000021d0 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    21d0:	cmp	r0, #63	; 0x3f
    21d2:	bhi.n	21e2 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    21d4:	ldr	r3, [pc, #16]	; (21e8 <digitalRead+0x18>)
    21d6:	ldr.w	r3, [r3, r0, lsl #3]
    21da:	ldrb.w	r0, [r3, #512]	; 0x200
    21de:	uxtb	r0, r0
    21e0:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    21e2:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    21e4:	bx	lr
    21e6:	nop
    21e8:	.word	0x00004b54

000021ec <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    21ec:	cmp	r0, #63	; 0x3f
    21ee:	bhi.n	21f4 <pinMode+0x8>
    21f0:	b.w	2128 <pinMode.part.2>
    21f4:	bx	lr
    21f6:	nop

000021f8 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    21f8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    21fc:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    21fe:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2200:	ldr	r7, [pc, #136]	; (228c <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2202:	ldr	r3, [pc, #140]	; (2290 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2204:	ldr	r2, [pc, #140]	; (2294 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2206:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2208:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    220a:	ldr	r2, [r2, #0]
	__enable_irq();
    220c:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    220e:	lsls	r2, r2, #5
    2210:	bpl.n	2218 <delay+0x20>
    2212:	cmp	r3, #50	; 0x32
    2214:	it	hi
    2216:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2218:	cbz	r5, 2288 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    221a:	rsb	r3, r3, #179200	; 0x2bc00
    221e:	addw	r3, r3, #799	; 0x31f
    2222:	ldr	r6, [pc, #116]	; (2298 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2224:	ldr.w	r9, [pc, #104]	; 2290 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2228:	ldr.w	r8, [pc, #104]	; 2294 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    222c:	lsrs	r3, r3, #2
    222e:	mov.w	r2, #1000	; 0x3e8
    2232:	umull	r1, r3, r6, r3
    2236:	mul.w	r4, r2, r4
    223a:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    223e:	cpsid	i
	current = SYST_CVR;
    2240:	ldr.w	r1, [r9]
	count = systick_millis_count;
    2244:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2246:	ldr.w	lr, [r8]
	__enable_irq();
    224a:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    224c:	rsb	r3, r1, #179200	; 0x2bc00
    2250:	addw	r3, r3, #799	; 0x31f
    2254:	lsrs	r3, r3, #2
    2256:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    225a:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    225e:	rsb	r3, r4, r3, lsr #2
    2262:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2266:	beq.n	226e <delay+0x76>
    2268:	cmp	r1, #50	; 0x32
    226a:	it	hi
    226c:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    226e:	mla	r3, r0, r2, r3
    2272:	cmp.w	r3, #1000	; 0x3e8
    2276:	bcc.n	2282 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    2278:	subs	r5, #1
    227a:	beq.n	2288 <delay+0x90>
				start += 1000;
    227c:	add.w	r4, r4, #1000	; 0x3e8
    2280:	b.n	223e <delay+0x46>
			}
			yield();
    2282:	bl	3634 <yield>
		}
    2286:	b.n	223e <delay+0x46>
    2288:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    228c:	.word	0x1fff187c
    2290:	.word	0xe000e018
    2294:	.word	0xe000ed04
    2298:	.word	0x16c16c17

0000229c <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    229c:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    229e:	ldr	r3, [pc, #312]	; (23d8 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    22a0:	ldr	r0, [pc, #312]	; (23dc <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    22a2:	ldr.w	ip, [pc, #348]	; 2400 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    22a6:	ldr	r4, [pc, #312]	; (23e0 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    22a8:	ldr	r1, [pc, #312]	; (23e4 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    22aa:	ldr.w	lr, [pc, #344]	; 2404 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    22ae:	ldr	r6, [pc, #312]	; (23e8 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    22b0:	ldr	r5, [pc, #312]	; (23ec <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    22b2:	ldr	r7, [pc, #316]	; (23f0 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    22b4:	mov.w	r2, #134217728	; 0x8000000
    22b8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    22ba:	mov.w	r2, #268435456	; 0x10000000
    22be:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    22c0:	mov.w	r2, #536870912	; 0x20000000
    22c4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    22c6:	mov.w	r2, #1073741824	; 0x40000000
    22ca:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    22cc:	mov.w	r2, #2147483648	; 0x80000000
    22d0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    22d2:	movs	r2, #0
    22d4:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    22d6:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    22d8:	movw	r0, #61439	; 0xefff
    22dc:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    22e0:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    22e4:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    22e6:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    22ea:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    22ec:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    22ee:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    22f0:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    22f4:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    22f6:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    22fa:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    22fc:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    2300:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2302:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    2306:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    230a:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    230e:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2312:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    2316:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2318:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    231c:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    231e:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2320:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    2322:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    2326:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2328:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    232a:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    232c:	ldr	r4, [pc, #196]	; (23f4 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    232e:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2330:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2332:	movs	r1, #9
    2334:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    2336:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    233a:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    233e:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2340:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2342:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    2344:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    2346:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2348:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    234a:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    234e:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    2352:	add.w	r7, r7, #520192	; 0x7f000
    2356:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2358:	addw	r4, r4, #2044	; 0x7fc
    235c:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    235e:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2360:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    2362:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2364:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2368:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    236a:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    236e:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    2372:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2374:	sub.w	r4, r4, #460800	; 0x70800
    2378:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    237c:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    237e:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2380:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2384:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2386:	ldr	r0, [pc, #112]	; (23f8 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2388:	orr.w	r1, r1, #512	; 0x200
    238c:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    238e:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2390:	ldr	r4, [pc, #104]	; (23fc <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    2392:	add.w	lr, lr, #65280	; 0xff00
    2396:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    239a:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    239e:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    23a2:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    23a6:	orr.w	r1, r1, #33554432	; 0x2000000
    23aa:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    23ac:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    23b0:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    23b4:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    23b6:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    23b8:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    23ba:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    23bc:	str	r2, [r4, #0]
#endif
	analog_init();
    23be:	bl	1f00 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    23c2:	movs	r0, #25
    23c4:	bl	21f8 <delay>
	usb_init();
    23c8:	bl	3564 <usb_init>
	delay(275);
    23cc:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    23d0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    23d4:	b.w	21f8 <delay>
    23d8:	.word	0xe000e104
    23dc:	.word	0x40038004
    23e0:	.word	0x40038014
    23e4:	.word	0x4003801c
    23e8:	.word	0x40038024
    23ec:	.word	0x4003802c
    23f0:	.word	0x40038034
    23f4:	.word	0x40038000
    23f8:	.word	0x40048004
    23fc:	.word	0x400c9000
    2400:	.word	0x40038008
    2404:	.word	0x4003800c

00002408 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2408:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    240a:	ldr	r3, [pc, #56]	; (2444 <sysex_byte+0x3c>)
    240c:	ldr	r4, [pc, #56]	; (2448 <sysex_byte+0x40>)
    240e:	ldr	r3, [r3, #0]
    2410:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2412:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2414:	cbz	r3, 243a <sysex_byte+0x32>
    2416:	cmp.w	r1, #290	; 0x122
    241a:	bcs.n	2428 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    241c:	ldr	r2, [pc, #44]	; (244c <sysex_byte+0x44>)
    241e:	adds	r3, r1, #1
    2420:	strb	r5, [r2, r1]
    2422:	uxth	r3, r3
    2424:	strh	r3, [r4, #0]
	}
}
    2426:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2428:	movs	r2, #0
    242a:	ldr	r0, [pc, #32]	; (244c <sysex_byte+0x44>)
    242c:	blx	r3
    242e:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2430:	ldr	r2, [pc, #24]	; (244c <sysex_byte+0x44>)
    2432:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2434:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2436:	strh	r3, [r4, #0]
	}
}
    2438:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    243a:	cmp.w	r1, #290	; 0x122
    243e:	bcc.n	241c <sysex_byte+0x14>
    2440:	pop	{r3, r4, r5, pc}
    2442:	nop
    2444:	.word	0x1fff18a4
    2448:	.word	0x1fff1d3a
    244c:	.word	0x1fff1d40

00002450 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2450:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    2454:	ldr	r6, [pc, #132]	; (24dc <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2456:	ldr	r7, [pc, #136]	; (24e0 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    2458:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    245a:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    245c:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    245e:	strb	r3, [r7, #0]
	if (!tx_packet) {
    2460:	cbz	r1, 2490 <usb_midi_write_packed+0x40>
    2462:	ldr	r5, [pc, #128]	; (24e4 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    2464:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2466:	add.w	r2, r1, r3, lsl #2
    246a:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    246c:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    246e:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2470:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2474:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2476:	bhi.n	2482 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    2478:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    247a:	movs	r3, #0
    247c:	strb	r3, [r7, #0]
    247e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    2482:	movs	r3, #64	; 0x40
    2484:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2486:	movs	r0, #4
    2488:	bl	2b30 <usb_tx>
		tx_packet = NULL;
    248c:	str	r4, [r6, #0]
    248e:	b.n	247a <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2490:	ldr.w	r9, [pc, #84]	; 24e8 <usb_midi_write_packed+0x98>
    2494:	ldrb.w	r3, [r9]
    2498:	cmp	r3, #0
    249a:	beq.n	247e <usb_midi_write_packed+0x2e>
    249c:	ldr	r5, [pc, #68]	; (24e4 <usb_midi_write_packed+0x94>)
    249e:	movw	r4, #48001	; 0xbb81
    24a2:	b.n	24b6 <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    24a4:	subs	r4, #1
    24a6:	beq.n	24ce <usb_midi_write_packed+0x7e>
    24a8:	ldrb	r3, [r5, #0]
    24aa:	cbnz	r3, 24ce <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    24ac:	bl	3634 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    24b0:	ldrb.w	r3, [r9]
    24b4:	cbz	r3, 24d6 <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    24b6:	movs	r0, #4
    24b8:	bl	2a1c <usb_tx_packet_count>
    24bc:	cmp	r0, #5
    24be:	bhi.n	24a4 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    24c0:	bl	2954 <usb_malloc>
    24c4:	mov	r1, r0
    24c6:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    24c8:	cmp	r0, #0
    24ca:	beq.n	24a4 <usb_midi_write_packed+0x54>
    24cc:	b.n	2464 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    24ce:	movs	r3, #1
    24d0:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    24d2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    24d6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    24da:	nop
    24dc:	.word	0x1fff18c0
    24e0:	.word	0x1fff1894
    24e4:	.word	0x1fff18c4
    24e8:	.word	0x1fff19d0

000024ec <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    24ec:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    24ee:	ldr	r3, [pc, #32]	; (2510 <usb_midi_flush_output+0x24>)
    24f0:	ldrb	r4, [r3, #0]
    24f2:	cbnz	r4, 24fe <usb_midi_flush_output+0x12>
    24f4:	ldr	r5, [pc, #28]	; (2514 <usb_midi_flush_output+0x28>)
    24f6:	ldr	r1, [r5, #0]
    24f8:	cbz	r1, 24fe <usb_midi_flush_output+0x12>
    24fa:	ldrh	r3, [r1, #2]
    24fc:	cbnz	r3, 2500 <usb_midi_flush_output+0x14>
    24fe:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    2500:	lsls	r3, r3, #2
    2502:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2504:	movs	r0, #4
    2506:	bl	2b30 <usb_tx>
		tx_packet = NULL;
    250a:	str	r4, [r5, #0]
    250c:	pop	{r3, r4, r5, pc}
    250e:	nop
    2510:	.word	0x1fff1894
    2514:	.word	0x1fff18c0

00002518 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2518:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    251c:	ldr	r6, [pc, #692]	; (27d4 <usb_midi_read+0x2bc>)
    251e:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2520:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2522:	cmp	r3, #0
    2524:	beq.w	264c <usb_midi_read+0x134>
    2528:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    252a:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    252c:	lsrs	r1, r2, #2
    252e:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    2532:	adds	r2, #4
	if (index < rx_packet->len) {
    2534:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2536:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    2538:	bcs.n	25c0 <usb_midi_read+0xa8>
		rx_packet->index = index;
    253a:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    253c:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2540:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    2544:	ldr	r1, [pc, #656]	; (27d8 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2546:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    254a:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    254e:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2552:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2554:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    2558:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    255a:	bls.n	2592 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    255c:	subs	r3, r6, #2
    255e:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2560:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2564:	bls.n	2604 <usb_midi_read+0xec>
    2566:	cmp	r6, #5
    2568:	beq.n	25fc <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    256a:	cmp	r6, #4
    256c:	beq.w	28b8 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    2570:	subs	r3, r6, #5
    2572:	cmp	r3, #2
    2574:	bls.n	2676 <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    2576:	cmp	r6, #15
    2578:	bne.n	2598 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    257a:	cmp	r0, #247	; 0xf7
    257c:	bhi.n	2604 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    257e:	cmp	r0, #240	; 0xf0
    2580:	beq.n	2588 <usb_midi_read+0x70>
    2582:	ldr	r3, [pc, #600]	; (27dc <usb_midi_read+0x2c4>)
    2584:	ldrh	r3, [r3, #0]
    2586:	cbz	r3, 2598 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    2588:	bl	2408 <sysex_byte>
		}
	}
	return 0;
    258c:	movs	r0, #0
    258e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    2592:	cbz	r7, 259e <usb_midi_read+0x86>
    2594:	cmp	r5, r7
    2596:	beq.n	259e <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    2598:	movs	r0, #0
    259a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    259e:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    25a0:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    25a4:	beq.w	26b6 <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    25a8:	cmp	r6, #9
    25aa:	beq.n	25d0 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    25ac:	cmp	r6, #10
    25ae:	bne.w	26da <usb_midi_read+0x1c2>
    25b2:	cmp	r3, #10
    25b4:	bne.n	2598 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    25b6:	ldr	r3, [pc, #552]	; (27e0 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    25b8:	ldr	r2, [pc, #552]	; (27e4 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    25ba:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    25bc:	movs	r1, #160	; 0xa0
    25be:	b.n	26c4 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    25c0:	mov	r0, r3
    25c2:	bl	2994 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    25c6:	movs	r0, #5
    25c8:	bl	29e0 <usb_rx>
    25cc:	str	r0, [r6, #0]
    25ce:	b.n	253c <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    25d0:	cmp	r3, #9
    25d2:	bne.n	2598 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    25d4:	lsrs	r7, r4, #24
    25d6:	beq.w	28d0 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    25da:	ldr	r3, [pc, #524]	; (27e8 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    25dc:	ldr	r2, [pc, #516]	; (27e4 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    25de:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    25e0:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    25e2:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    25e6:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    25e8:	uxtb	r5, r5
    25ea:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    25ec:	cmp	r3, #0
    25ee:	beq.w	272c <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    25f2:	mov	r2, r4
    25f4:	mov	r1, r6
    25f6:	mov	r0, r5
    25f8:	blx	r3
    25fa:	b.n	272c <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    25fc:	cmp	r0, #240	; 0xf0
    25fe:	bls.n	2688 <usb_midi_read+0x170>
    2600:	cmp	r0, #247	; 0xf7
    2602:	beq.n	2688 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    2604:	subs	r0, #241	; 0xf1
    2606:	cmp	r0, #14
    2608:	bhi.n	2598 <usb_midi_read+0x80>
    260a:	add	r3, pc, #4	; (adr r3, 2610 <usb_midi_read+0xf8>)
    260c:	ldr.w	pc, [r3, r0, lsl #2]
    2610:	.word	0x000027c7
    2614:	.word	0x000027ab
    2618:	.word	0x00002799
    261c:	.word	0x00002599
    2620:	.word	0x00002599
    2624:	.word	0x0000278b
    2628:	.word	0x00002599
    262c:	.word	0x0000286b
    2630:	.word	0x00002599
    2634:	.word	0x00002835
    2638:	.word	0x0000284f
    263c:	.word	0x00002773
    2640:	.word	0x00002599
    2644:	.word	0x0000275b
    2648:	.word	0x0000273f
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    264c:	ldr	r3, [pc, #412]	; (27ec <usb_midi_read+0x2d4>)
    264e:	ldrb	r3, [r3, #0]
    2650:	cmp	r3, #0
    2652:	beq.n	2598 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2654:	movs	r0, #5
    2656:	bl	29e0 <usb_rx>
    265a:	mov	r3, r0
    265c:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    265e:	cmp	r0, #0
    2660:	beq.n	2598 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    2662:	ldrh	r5, [r0, #0]
    2664:	cmp	r5, #0
    2666:	bne.w	252a <usb_midi_read+0x12>
			usb_free(rx_packet);
    266a:	bl	2994 <usb_free>
			rx_packet = NULL;
    266e:	str	r5, [r6, #0]
			return 0;
    2670:	mov	r0, r5
    2672:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    2676:	bl	2408 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    267a:	ubfx	r0, r4, #16, #8
    267e:	bl	2408 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    2682:	cmp	r6, #7
    2684:	bne.n	268c <usb_midi_read+0x174>
    2686:	lsrs	r0, r4, #24
    2688:	bl	2408 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    268c:	ldr	r3, [pc, #332]	; (27dc <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    268e:	ldr	r2, [pc, #352]	; (27f0 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    2690:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    2692:	ldr	r0, [pc, #352]	; (27f4 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2694:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2696:	ldr	r5, [pc, #352]	; (27f8 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2698:	ldr	r2, [pc, #328]	; (27e4 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    269a:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    269c:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    269e:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    26a0:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    26a2:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    26a4:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    26a6:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    26a8:	cbz	r4, 26ee <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    26aa:	movs	r2, #1
    26ac:	ldr	r0, [pc, #332]	; (27fc <usb_midi_read+0x2e4>)
    26ae:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    26b0:	movs	r0, #1
    26b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    26b6:	cmp	r3, #8
    26b8:	bne.w	2598 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    26bc:	ldr	r3, [pc, #320]	; (2800 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    26be:	ldr	r2, [pc, #292]	; (27e4 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    26c0:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    26c2:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    26c4:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    26c8:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    26ca:	uxtb	r5, r5
    26cc:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    26ce:	cbz	r3, 272c <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    26d0:	mov	r0, r5
    26d2:	mov	r2, r4
    26d4:	mov	r1, r6
    26d6:	blx	r3
    26d8:	b.n	272c <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    26da:	cmp	r6, #11
    26dc:	bne.n	2702 <usb_midi_read+0x1ea>
    26de:	cmp	r3, #11
    26e0:	bne.w	2598 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    26e4:	ldr	r3, [pc, #284]	; (2804 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    26e6:	ldr	r2, [pc, #252]	; (27e4 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    26e8:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    26ea:	movs	r1, #176	; 0xb0
    26ec:	b.n	26c4 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    26ee:	ldr	r3, [pc, #280]	; (2808 <usb_midi_read+0x2f0>)
    26f0:	ldr	r3, [r3, #0]
    26f2:	cmp	r3, #0
    26f4:	beq.w	28ee <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    26f8:	ldr	r0, [pc, #256]	; (27fc <usb_midi_read+0x2e4>)
    26fa:	blx	r3
		}
		return 1;
    26fc:	movs	r0, #1
    26fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    2702:	cmp	r6, #12
    2704:	bne.w	2908 <usb_midi_read+0x3f0>
    2708:	cmp	r3, #12
    270a:	bne.w	2598 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    270e:	ldr	r3, [pc, #252]	; (280c <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2710:	ldr	r2, [pc, #208]	; (27e4 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    2712:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2714:	movs	r1, #192	; 0xc0
    2716:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    2718:	uxtb	r5, r5
    271a:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    271e:	cmp	r3, #0
    2720:	beq.w	28b4 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2724:	mov	r0, r5
    2726:	mov	r1, r6
    2728:	lsrs	r4, r4, #24
    272a:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    272c:	ldr	r1, [pc, #224]	; (2810 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    272e:	ldr	r2, [pc, #196]	; (27f4 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    2730:	ldr	r3, [pc, #196]	; (27f8 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2732:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    2734:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    2736:	strb	r4, [r3, #0]
		return 1;
    2738:	movs	r0, #1
    273a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    273e:	ldr	r3, [pc, #212]	; (2814 <usb_midi_read+0x2fc>)
    2740:	ldr	r3, [r3, #0]
    2742:	cmp	r3, #0
    2744:	beq.w	28f4 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    2748:	blx	r3
    274a:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    274e:	ldr	r3, [pc, #148]	; (27e4 <usb_midi_read+0x2cc>)
    2750:	uxtb	r5, r5
    2752:	lsrs	r4, r4, #24
    2754:	strb.w	r8, [r3]
		goto return_message;
    2758:	b.n	272c <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    275a:	ldr	r3, [pc, #188]	; (2818 <usb_midi_read+0x300>)
    275c:	ldr	r3, [r3, #0]
    275e:	cmp	r3, #0
    2760:	bne.n	2748 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    2762:	ldr	r3, [pc, #184]	; (281c <usb_midi_read+0x304>)
    2764:	ldr	r3, [r3, #0]
    2766:	cbz	r3, 2792 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    2768:	movs	r0, #254	; 0xfe
    276a:	blx	r3
    276c:	ubfx	r6, r4, #16, #8
    2770:	b.n	274e <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    2772:	ldr	r3, [pc, #172]	; (2820 <usb_midi_read+0x308>)
    2774:	ldr	r3, [r3, #0]
    2776:	cmp	r3, #0
    2778:	bne.n	2748 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    277a:	ldr	r3, [pc, #160]	; (281c <usb_midi_read+0x304>)
    277c:	ldr	r3, [r3, #0]
    277e:	cbz	r3, 2792 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    2780:	movs	r0, #252	; 0xfc
    2782:	blx	r3
    2784:	ubfx	r6, r4, #16, #8
    2788:	b.n	274e <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    278a:	ldr	r3, [pc, #152]	; (2824 <usb_midi_read+0x30c>)
    278c:	ldr	r3, [r3, #0]
    278e:	cmp	r3, #0
    2790:	bne.n	2748 <usb_midi_read+0x230>
    2792:	ubfx	r6, r4, #16, #8
    2796:	b.n	274e <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2798:	ldr	r3, [pc, #140]	; (2828 <usb_midi_read+0x310>)
    279a:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    279c:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    27a0:	cmp	r3, #0
    27a2:	beq.n	274e <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    27a4:	mov	r0, r6
    27a6:	blx	r3
    27a8:	b.n	274e <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    27aa:	ldr	r3, [pc, #128]	; (282c <usb_midi_read+0x314>)
    27ac:	ldr	r2, [r3, #0]
    27ae:	cmp	r2, #0
    27b0:	beq.n	2792 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    27b2:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    27b4:	lsrs	r3, r4, #17
    27b6:	and.w	r0, r6, #127	; 0x7f
    27ba:	and.w	r3, r3, #16256	; 0x3f80
    27be:	orrs	r0, r3
    27c0:	uxtb	r6, r6
    27c2:	blx	r2
    27c4:	b.n	274e <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    27c6:	ldr	r3, [pc, #104]	; (2830 <usb_midi_read+0x318>)
    27c8:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    27ca:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    27ce:	cmp	r3, #0
    27d0:	bne.n	27a4 <usb_midi_read+0x28c>
    27d2:	b.n	274e <usb_midi_read+0x236>
    27d4:	.word	0x1fff18cc
    27d8:	.word	0x1fff1d3e
    27dc:	.word	0x1fff1d3a
    27e0:	.word	0x1fff18a8
    27e4:	.word	0x1fff1d38
    27e8:	.word	0x1fff18dc
    27ec:	.word	0x1fff19d0
    27f0:	.word	0x1fff18a4
    27f4:	.word	0x1fff1d3c
    27f8:	.word	0x1fff1d3d
    27fc:	.word	0x1fff1d40
    2800:	.word	0x1fff18d4
    2804:	.word	0x1fff18d8
    2808:	.word	0x1fff18bc
    280c:	.word	0x1fff1898
    2810:	.word	0x1fff1d3f
    2814:	.word	0x1fff1884
    2818:	.word	0x1fff1888
    281c:	.word	0x1fff188c
    2820:	.word	0x1fff18c8
    2824:	.word	0x1fff18b8
    2828:	.word	0x1fff18d0
    282c:	.word	0x1fff18a0
    2830:	.word	0x1fff18b4
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    2834:	ldr	r3, [pc, #252]	; (2934 <usb_midi_read+0x41c>)
    2836:	ldr	r3, [r3, #0]
    2838:	cmp	r3, #0
    283a:	bne.n	2748 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    283c:	ldr	r3, [pc, #248]	; (2938 <usb_midi_read+0x420>)
    283e:	ldr	r3, [r3, #0]
    2840:	cmp	r3, #0
    2842:	beq.n	2792 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    2844:	movs	r0, #250	; 0xfa
    2846:	blx	r3
    2848:	ubfx	r6, r4, #16, #8
    284c:	b.n	274e <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    284e:	ldr	r3, [pc, #236]	; (293c <usb_midi_read+0x424>)
    2850:	ldr	r3, [r3, #0]
    2852:	cmp	r3, #0
    2854:	bne.w	2748 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    2858:	ldr	r3, [pc, #220]	; (2938 <usb_midi_read+0x420>)
    285a:	ldr	r3, [r3, #0]
    285c:	cmp	r3, #0
    285e:	beq.n	2792 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    2860:	movs	r0, #251	; 0xfb
    2862:	blx	r3
    2864:	ubfx	r6, r4, #16, #8
    2868:	b.n	274e <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    286a:	ldr	r3, [pc, #212]	; (2940 <usb_midi_read+0x428>)
    286c:	ldr	r3, [r3, #0]
    286e:	cmp	r3, #0
    2870:	bne.w	2748 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    2874:	ldr	r3, [pc, #192]	; (2938 <usb_midi_read+0x420>)
    2876:	ldr	r3, [r3, #0]
    2878:	cmp	r3, #0
    287a:	beq.n	2792 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    287c:	movs	r0, #248	; 0xf8
    287e:	blx	r3
    2880:	ubfx	r6, r4, #16, #8
    2884:	b.n	274e <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    2886:	cmp	r3, #14
    2888:	bne.w	2598 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    288c:	ldr	r2, [pc, #180]	; (2944 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    288e:	ldr	r3, [pc, #184]	; (2948 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    2890:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2892:	movs	r1, #224	; 0xe0
    2894:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    2896:	cmp	r2, #0
    2898:	beq.n	292a <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    289a:	lsrs	r6, r4, #16
    289c:	lsrs	r1, r4, #17
    289e:	and.w	r3, r6, #127	; 0x7f
    28a2:	and.w	r1, r1, #16256	; 0x3f80
    28a6:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    28a8:	uxtb	r5, r5
    28aa:	sub.w	r1, r1, #8192	; 0x2000
    28ae:	mov	r0, r5
    28b0:	blx	r2
    28b2:	uxtb	r6, r6
    28b4:	lsrs	r4, r4, #24
    28b6:	b.n	272c <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    28b8:	bl	2408 <sysex_byte>
		sysex_byte(n >> 16);
    28bc:	ubfx	r0, r4, #16, #8
    28c0:	bl	2408 <sysex_byte>
		sysex_byte(n >> 24);
    28c4:	lsrs	r0, r4, #24
    28c6:	bl	2408 <sysex_byte>
		return 0;
    28ca:	movs	r0, #0
    28cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    28d0:	ldr	r3, [pc, #120]	; (294c <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    28d2:	ldr	r2, [pc, #116]	; (2948 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    28d4:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    28d6:	movs	r1, #128	; 0x80
    28d8:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    28da:	uxtb	r5, r5
    28dc:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    28e0:	cbz	r3, 2904 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    28e2:	mov	r1, r6
    28e4:	mov	r0, r5
    28e6:	mov	r2, r7
    28e8:	blx	r3
    28ea:	mov	r4, r7
    28ec:	b.n	272c <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    28ee:	movs	r0, #1
    28f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    28f4:	ldr	r3, [pc, #64]	; (2938 <usb_midi_read+0x420>)
    28f6:	ldr	r3, [r3, #0]
    28f8:	cmp	r3, #0
    28fa:	beq.w	2792 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    28fe:	movs	r0, #255	; 0xff
    2900:	blx	r3
    2902:	b.n	2792 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2904:	mov	r4, r3
    2906:	b.n	272c <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    2908:	cmp	r6, #13
    290a:	bne.n	2886 <usb_midi_read+0x36e>
    290c:	cmp	r3, #13
    290e:	bne.w	2598 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2912:	ldr	r3, [pc, #60]	; (2950 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2914:	ldr	r2, [pc, #48]	; (2948 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    2916:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2918:	movs	r1, #208	; 0xd0
    291a:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    291c:	uxtb	r5, r5
    291e:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2922:	cmp	r3, #0
    2924:	bne.w	2724 <usb_midi_read+0x20c>
    2928:	b.n	28b4 <usb_midi_read+0x39c>
    292a:	ubfx	r6, r4, #16, #8
    292e:	uxtb	r5, r5
    2930:	lsrs	r4, r4, #24
    2932:	b.n	272c <usb_midi_read+0x214>
    2934:	.word	0x1fff18b0
    2938:	.word	0x1fff188c
    293c:	.word	0x1fff1890
    2940:	.word	0x1fff1880
    2944:	.word	0x1fff189c
    2948:	.word	0x1fff1d38
    294c:	.word	0x1fff18d4
    2950:	.word	0x1fff18ac

00002954 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    2954:	cpsid	i
	avail = usb_buffer_available;
    2956:	ldr	r0, [pc, #52]	; (298c <usb_malloc+0x38>)
    2958:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    295a:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    295e:	cmp	r3, #29
    2960:	bgt.n	2984 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    2962:	mov.w	r1, #2147483648	; 0x80000000
    2966:	lsrs	r1, r3
    2968:	bic.w	r2, r2, r1
    296c:	str	r2, [r0, #0]
	__enable_irq();
    296e:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    2970:	ldr	r0, [pc, #28]	; (2990 <usb_malloc+0x3c>)
    2972:	add.w	r3, r3, r3, lsl #3
    2976:	lsls	r3, r3, #3
    2978:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    297a:	movs	r1, #0
    297c:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    297e:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    2980:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    2982:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    2984:	cpsie	i
		return NULL;
    2986:	movs	r0, #0
    2988:	bx	lr
    298a:	nop
    298c:	.word	0x1fff0c6c
    2990:	.word	0x1fff03d0

00002994 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    2994:	ldr	r3, [pc, #52]	; (29cc <usb_free+0x38>)
    2996:	ldr	r2, [pc, #56]	; (29d0 <usb_free+0x3c>)
    2998:	subs	r3, r0, r3
    299a:	umull	r2, r3, r2, r3
    299e:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    29a0:	cmp	r3, #29
    29a2:	bhi.n	29be <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    29a4:	ldr	r2, [pc, #44]	; (29d4 <usb_free+0x40>)
    29a6:	ldrb	r2, [r2, #0]
    29a8:	cbnz	r2, 29c0 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    29aa:	cpsid	i
	usb_buffer_available |= mask;
    29ac:	ldr	r0, [pc, #40]	; (29d8 <usb_free+0x44>)
    29ae:	mov.w	r1, #2147483648	; 0x80000000
    29b2:	ldr	r2, [r0, #0]
    29b4:	lsr.w	r3, r1, r3
    29b8:	orrs	r2, r3
    29ba:	str	r2, [r0, #0]
	__enable_irq();
    29bc:	cpsie	i
    29be:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    29c0:	ldr	r2, [pc, #24]	; (29dc <usb_free+0x48>)
    29c2:	ldrb	r2, [r2, #0]
    29c4:	cmp	r2, #0
    29c6:	beq.n	29aa <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    29c8:	b.w	2a48 <usb_rx_memory>
    29cc:	.word	0x1fff03d0
    29d0:	.word	0x38e38e39
    29d4:	.word	0x1fff19c5
    29d8:	.word	0x1fff0c6c
    29dc:	.word	0x1fff19d0

000029e0 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    29e0:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    29e2:	cmp	r3, #4
    29e4:	bhi.n	2a10 <usb_rx+0x30>
	__disable_irq();
    29e6:	cpsid	i
	ret = rx_first[endpoint];
    29e8:	ldr	r1, [pc, #40]	; (2a14 <usb_rx+0x34>)
    29ea:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    29ee:	cbz	r0, 2a0c <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    29f0:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    29f2:	ldr	r4, [pc, #36]	; (2a18 <usb_rx+0x38>)
    29f4:	ldrh	r5, [r0, #0]
    29f6:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    29fa:	ldr	r6, [r0, #4]
    29fc:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2a00:	subs	r2, r2, r5
    2a02:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    2a06:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2a08:	pop	{r4, r5, r6}
    2a0a:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2a0c:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2a0e:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2a10:	movs	r0, #0
    2a12:	bx	lr
    2a14:	.word	0x1fff193c
    2a18:	.word	0x1fff1e64

00002a1c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2a1c:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2a1e:	cmp	r0, #4
    2a20:	bhi.n	2a3a <usb_tx_packet_count+0x1e>
	__disable_irq();
    2a22:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    2a24:	ldr	r3, [pc, #28]	; (2a44 <usb_tx_packet_count+0x28>)
    2a26:	ldr.w	r3, [r3, r0, lsl #2]
    2a2a:	cbz	r3, 2a3e <usb_tx_packet_count+0x22>
    2a2c:	movs	r0, #0
    2a2e:	ldr	r3, [r3, #4]
    2a30:	adds	r0, #1
    2a32:	cmp	r3, #0
    2a34:	bne.n	2a2e <usb_tx_packet_count+0x12>
	__enable_irq();
    2a36:	cpsie	i
	return count;
    2a38:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2a3a:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2a3c:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2a3e:	mov	r0, r3
    2a40:	b.n	2a36 <usb_tx_packet_count+0x1a>
    2a42:	nop
    2a44:	.word	0x1fff1994

00002a48 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2a48:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2a4a:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2a4c:	ldr	r2, [pc, #204]	; (2b1c <usb_rx_memory+0xd4>)
    2a4e:	ldrb	r3, [r2, #0]
    2a50:	lsls	r3, r3, #28
    2a52:	bpl.n	2a62 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2a54:	ldr	r3, [pc, #200]	; (2b20 <usb_rx_memory+0xd8>)
    2a56:	ldr	r1, [r3, #32]
    2a58:	cmp	r1, #0
    2a5a:	beq.n	2ae4 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2a5c:	ldr	r1, [r3, #40]	; 0x28
    2a5e:	cmp	r1, #0
    2a60:	beq.n	2b00 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2a62:	ldrb	r3, [r2, #1]
    2a64:	lsls	r5, r3, #28
    2a66:	bpl.n	2a76 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2a68:	ldr	r3, [pc, #180]	; (2b20 <usb_rx_memory+0xd8>)
    2a6a:	ldr	r1, [r3, #64]	; 0x40
    2a6c:	cmp	r1, #0
    2a6e:	beq.n	2b0c <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2a70:	ldr	r1, [r3, #72]	; 0x48
    2a72:	cmp	r1, #0
    2a74:	beq.n	2b04 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2a76:	ldrb	r3, [r2, #2]
    2a78:	lsls	r4, r3, #28
    2a7a:	bpl.n	2a8a <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2a7c:	ldr	r3, [pc, #160]	; (2b20 <usb_rx_memory+0xd8>)
    2a7e:	ldr	r1, [r3, #96]	; 0x60
    2a80:	cmp	r1, #0
    2a82:	beq.n	2b10 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2a84:	ldr	r1, [r3, #104]	; 0x68
    2a86:	cmp	r1, #0
    2a88:	beq.n	2b08 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2a8a:	ldrb	r3, [r2, #3]
    2a8c:	lsls	r1, r3, #28
    2a8e:	bpl.n	2aa0 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2a90:	ldr	r3, [pc, #140]	; (2b20 <usb_rx_memory+0xd8>)
    2a92:	ldr.w	r1, [r3, #128]	; 0x80
    2a96:	cmp	r1, #0
    2a98:	beq.n	2b18 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2a9a:	ldr.w	r1, [r3, #136]	; 0x88
    2a9e:	cbz	r1, 2ac6 <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2aa0:	ldrb	r3, [r2, #4]
    2aa2:	lsls	r3, r3, #28
    2aa4:	bpl.n	2ab8 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2aa6:	ldr	r3, [pc, #120]	; (2b20 <usb_rx_memory+0xd8>)
    2aa8:	ldr.w	r2, [r3, #160]	; 0xa0
    2aac:	cmp	r2, #0
    2aae:	beq.n	2b14 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2ab0:	ldr.w	r2, [r3, #168]	; 0xa8
    2ab4:	movs	r4, #21
    2ab6:	cbz	r2, 2ac8 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2ab8:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    2aba:	ldr	r3, [pc, #104]	; (2b24 <usb_rx_memory+0xdc>)
    2abc:	movs	r2, #0
    2abe:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2ac0:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2ac2:	b.w	2994 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2ac6:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2ac8:	ldr	r1, [pc, #88]	; (2b24 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2aca:	ldr	r5, [pc, #92]	; (2b28 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    2acc:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2ace:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2ad2:	add.w	r3, r3, r4, lsl #3
    2ad6:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2ad8:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2ada:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2adc:	strb	r2, [r1, #0]
				__enable_irq();
    2ade:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2ae0:	pop	{r4, r5}
    2ae2:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2ae4:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2ae6:	ldr	r4, [pc, #60]	; (2b24 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2ae8:	ldr	r5, [pc, #64]	; (2b2c <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    2aea:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2aec:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2af0:	add.w	r3, r3, r2, lsl #3
    2af4:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2af6:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2af8:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2afa:	strb	r2, [r4, #0]
				__enable_irq();
    2afc:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2afe:	b.n	2ae0 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b00:	movs	r4, #5
    2b02:	b.n	2ac8 <usb_rx_memory+0x80>
    2b04:	movs	r4, #9
    2b06:	b.n	2ac8 <usb_rx_memory+0x80>
    2b08:	movs	r4, #13
    2b0a:	b.n	2ac8 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b0c:	movs	r2, #8
    2b0e:	b.n	2ae6 <usb_rx_memory+0x9e>
    2b10:	movs	r2, #12
    2b12:	b.n	2ae6 <usb_rx_memory+0x9e>
    2b14:	movs	r2, #20
    2b16:	b.n	2ae6 <usb_rx_memory+0x9e>
    2b18:	movs	r2, #16
    2b1a:	b.n	2ae6 <usb_rx_memory+0x9e>
    2b1c:	.word	0x00004d80
    2b20:	.word	0x1fff0000
    2b24:	.word	0x1fff19c5
    2b28:	.word	0x004000c8
    2b2c:	.word	0x00400088

00002b30 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2b30:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2b32:	cmp	r3, #4
    2b34:	bhi.n	2b72 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2b36:	ldr	r2, [pc, #108]	; (2ba4 <usb_tx+0x74>)
    2b38:	lsls	r0, r0, #5
    2b3a:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2b3e:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2b40:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    2b42:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    2b44:	ldr	r4, [pc, #96]	; (2ba8 <usb_tx+0x78>)
    2b46:	ldrb	r2, [r4, r3]
    2b48:	cmp	r2, #3
    2b4a:	bhi.n	2b84 <usb_tx+0x54>
    2b4c:	tbb	[pc, r2]
    2b50:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    2b54:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2b56:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2b58:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2b5a:	tst.w	r0, #8
    2b5e:	ite	ne
    2b60:	movne	r3, #200	; 0xc8
    2b62:	moveq	r3, #136	; 0x88
    2b64:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2b68:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2b6a:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2b6c:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2b6e:	cpsie	i
}
    2b70:	pop	{r4, r5}
    2b72:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    2b74:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    2b76:	movs	r2, #2
		break;
    2b78:	b.n	2b56 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    2b7a:	movs	r2, #5
    2b7c:	b.n	2b56 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    2b7e:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2b80:	movs	r2, #4
		break;
    2b82:	b.n	2b56 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    2b84:	ldr	r2, [pc, #36]	; (2bac <usb_tx+0x7c>)
    2b86:	ldr.w	r0, [r2, r3, lsl #2]
    2b8a:	cbz	r0, 2b9c <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    2b8c:	ldr	r2, [pc, #32]	; (2bb0 <usb_tx+0x80>)
    2b8e:	ldr.w	r0, [r2, r3, lsl #2]
    2b92:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    2b94:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    2b98:	cpsie	i
		return;
    2b9a:	b.n	2b70 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    2b9c:	str.w	r1, [r2, r3, lsl #2]
    2ba0:	ldr	r2, [pc, #12]	; (2bb0 <usb_tx+0x80>)
    2ba2:	b.n	2b94 <usb_tx+0x64>
    2ba4:	.word	0x1fff0000
    2ba8:	.word	0x1fff19d4
    2bac:	.word	0x1fff1994
    2bb0:	.word	0x1fff19a8

00002bb4 <usb_isr>:
}



void usb_isr(void)
{
    2bb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2bb8:	ldr.w	fp, [pc, #776]	; 2ec4 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2bbc:	ldr.w	sl, [pc, #776]	; 2ec8 <usb_isr+0x314>
}



void usb_isr(void)
{
    2bc0:	sub	sp, #28
    2bc2:	b.n	2c4e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2bc4:	ldr	r7, [pc, #680]	; (2e70 <usb_isr+0x2bc>)
    2bc6:	mov.w	r8, r3, lsr #2
    2bca:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2bce:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2bd0:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2bd4:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2bd8:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2bda:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2bde:	and.w	r4, r3, #255	; 0xff
    2be2:	cmp	r3, #0
    2be4:	bne.w	2de8 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2be8:	ldr.w	r3, [r7, r8, lsl #3]
    2bec:	lsrs	r3, r3, #16
    2bee:	uxth	r1, r3
    2bf0:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2bf4:	cmp	r3, #0
    2bf6:	beq.w	2dd6 <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    2bfa:	ldr	r3, [pc, #632]	; (2e74 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2bfc:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2c00:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2c04:	ldr.w	r2, [r3, r6, lsl #2]
    2c08:	cmp	r2, #0
    2c0a:	beq.w	3078 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2c0e:	ldr	r5, [pc, #616]	; (2e78 <usb_isr+0x2c4>)
    2c10:	ldr.w	r3, [r5, r6, lsl #2]
    2c14:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    2c16:	ldr	r4, [pc, #612]	; (2e7c <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2c18:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2c1c:	ldrh.w	r3, [r4, r6, lsl #1]
    2c20:	add	r1, r3
    2c22:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    2c26:	bl	2954 <usb_malloc>
					if (packet) {
    2c2a:	cmp	r0, #0
    2c2c:	beq.w	306a <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2c30:	ldr	r2, [pc, #588]	; (2e80 <usb_isr+0x2cc>)
    2c32:	ldr	r3, [pc, #592]	; (2e84 <usb_isr+0x2d0>)
    2c34:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2c38:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2c3c:	it	ne
    2c3e:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2c40:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2c44:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2c48:	movs	r3, #8
    2c4a:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2c4e:	ldrb.w	r4, [fp]
    2c52:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2c54:	lsls	r0, r4, #29
    2c56:	bpl.n	2c92 <usb_isr+0xde>
		if (usb_configuration) {
    2c58:	ldr	r3, [pc, #556]	; (2e88 <usb_isr+0x2d4>)
    2c5a:	ldrb	r3, [r3, #0]
    2c5c:	cbz	r3, 2c8c <usb_isr+0xd8>
			t = usb_reboot_timer;
    2c5e:	ldr	r1, [pc, #556]	; (2e8c <usb_isr+0x2d8>)
    2c60:	ldrb	r2, [r1, #0]
			if (t) {
    2c62:	and.w	r3, r2, #255	; 0xff
    2c66:	cbz	r2, 2c72 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    2c68:	subs	r3, #1
    2c6a:	uxtb	r3, r3
    2c6c:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2c6e:	cbnz	r3, 2c72 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2c70:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    2c72:	ldr	r1, [pc, #540]	; (2e90 <usb_isr+0x2dc>)
    2c74:	ldrb	r2, [r1, #0]
			if (t) {
    2c76:	and.w	r3, r2, #255	; 0xff
    2c7a:	cbz	r2, 2c88 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    2c7c:	subs	r3, #1
    2c7e:	uxtb	r3, r3
    2c80:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    2c82:	cmp	r3, #0
    2c84:	beq.w	3016 <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    2c88:	bl	24ec <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2c8c:	movs	r3, #4
    2c8e:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2c92:	and.w	r3, r4, #8
    2c96:	and.w	r2, r3, #255	; 0xff
    2c9a:	cmp	r3, #0
    2c9c:	beq.w	2e30 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    2ca0:	ldrb.w	r3, [sl]
    2ca4:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    2ca6:	lsrs	r6, r3, #4
    2ca8:	bne.n	2bc4 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2caa:	lsrs	r4, r3, #2
    2cac:	ldr.w	r9, [pc, #448]	; 2e70 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2cb0:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2cb4:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2cb8:	ubfx	r2, r2, #2, #4
    2cbc:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2cbe:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2cc0:	cmp	r2, #12
    2cc2:	bhi.w	2dce <usb_isr+0x21a>
    2cc6:	tbb	[pc, r2]
    2cca:	.short	0x7878
    2ccc:	.word	0x82828282
    2cd0:	.word	0x82438282
    2cd4:	.short	0x8282
    2cd6:	.byte	0x07
    2cd7:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2cd8:	ldr	r0, [r1, #0]
    2cda:	ldr	r5, [pc, #440]	; (2e94 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2cdc:	ldr	r3, [pc, #416]	; (2e80 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2cde:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2ce0:	ldr	r7, [pc, #436]	; (2e98 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2ce2:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2ce6:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2ce8:	ldr	r6, [pc, #432]	; (2e9c <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2cea:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2cec:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2cf0:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2cf2:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2cf4:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2cf6:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2cfa:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2cfc:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2d00:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2d04:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2d06:	bhi.w	2ecc <usb_isr+0x318>
    2d0a:	cmp.w	r1, #1664	; 0x680
    2d0e:	bcs.w	3338 <usb_isr+0x784>
    2d12:	cmp.w	r1, #258	; 0x102
    2d16:	beq.w	30e6 <usb_isr+0x532>
    2d1a:	bhi.w	30b0 <usb_isr+0x4fc>
    2d1e:	cmp	r1, #128	; 0x80
    2d20:	beq.w	336c <usb_isr+0x7b8>
    2d24:	cmp	r1, #130	; 0x82
    2d26:	bne.w	30f2 <usb_isr+0x53e>
    2d2a:	ldrh	r1, [r5, #4]
    2d2c:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2d30:	cmp	r1, #5
    2d32:	bhi.w	30f2 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2d36:	ldr	r3, [pc, #360]	; (2ea0 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2d38:	ldr	r4, [pc, #360]	; (2ea4 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2d3a:	lsls	r1, r1, #2
    2d3c:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2d3e:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2d40:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2d42:	ldrb	r2, [r3, #0]
    2d44:	lsls	r3, r2, #30
    2d46:	bpl.w	347c <usb_isr+0x8c8>
    2d4a:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    2d4c:	movs	r0, #2
    2d4e:	b.n	317a <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2d50:	ldr	r7, [pc, #324]	; (2e98 <usb_isr+0x2e4>)
    2d52:	ldr	r2, [r7, #0]
		if (data) {
    2d54:	cbz	r2, 2da4 <usb_isr+0x1f0>
			size = ep0_tx_len;
    2d56:	ldr	r3, [pc, #336]	; (2ea8 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2d58:	ldr	r6, [pc, #320]	; (2e9c <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2d5a:	ldr	r1, [pc, #336]	; (2eac <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2d5c:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2d5e:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2d60:	ldrb	r5, [r1, #0]
    2d62:	cmp	r0, #64	; 0x40
    2d64:	mov	lr, r0
    2d66:	orr.w	r8, r5, #2
    2d6a:	it	cs
    2d6c:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2d70:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    2d72:	eor.w	r4, r4, #1
    2d76:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2d78:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2d7c:	ite	eq
    2d7e:	moveq	r4, #136	; 0x88
    2d80:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2d82:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2d86:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2d88:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2d8c:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2d90:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2d92:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2d94:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    2d98:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2d9a:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2d9c:	cmp	r0, #0
    2d9e:	beq.w	2f0e <usb_isr+0x35a>
    2da2:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    2da4:	ldr	r3, [pc, #236]	; (2e94 <usb_isr+0x2e0>)
    2da6:	ldrh	r2, [r3, #0]
    2da8:	cmp.w	r2, #1280	; 0x500
    2dac:	bne.n	2dce <usb_isr+0x21a>
			setup.bRequest = 0;
    2dae:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2db0:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    2db2:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2db4:	ldr	r3, [pc, #248]	; (2eb0 <usb_isr+0x2fc>)
    2db6:	strb	r2, [r3, #0]
    2db8:	b.n	2dce <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    2dba:	ldr	r2, [pc, #216]	; (2e94 <usb_isr+0x2e0>)
    2dbc:	ldrh	r0, [r2, #0]
    2dbe:	movw	r2, #8225	; 0x2021
    2dc2:	cmp	r0, r2
    2dc4:	beq.w	2f18 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2dc8:	ldr	r2, [pc, #180]	; (2e80 <usb_isr+0x2cc>)
    2dca:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2dce:	ldr	r2, [pc, #228]	; (2eb4 <usb_isr+0x300>)
    2dd0:	movs	r3, #1
    2dd2:	strb	r3, [r2, #0]
    2dd4:	b.n	2c48 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2dd6:	ldr	r2, [pc, #168]	; (2e80 <usb_isr+0x2cc>)
    2dd8:	ldr	r3, [pc, #168]	; (2e84 <usb_isr+0x2d0>)
    2dda:	tst.w	r9, #8
    2dde:	it	ne
    2de0:	movne	r3, r2
    2de2:	str.w	r3, [r7, r8, lsl #3]
    2de6:	b.n	2c48 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2de8:	bl	2994 <usb_free>
				packet = tx_first[endpoint];
    2dec:	ldr	r2, [pc, #200]	; (2eb8 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2dee:	ldr	r1, [pc, #204]	; (2ebc <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2df0:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2df4:	cmp	r3, #0
    2df6:	beq.w	3080 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2dfa:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2dfc:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2dfe:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    2e02:	add.w	r2, r3, #8
    2e06:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    2e0a:	cmp	r4, #3
    2e0c:	bhi.n	2e1a <usb_isr+0x266>
    2e0e:	tbb	[pc, r4]
    2e12:	.short	0x022c
    2e14:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    2e16:	movs	r2, #2
    2e18:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    2e1a:	ldrh	r2, [r3, #0]
    2e1c:	tst.w	r9, #8
    2e20:	ite	eq
    2e22:	moveq	r3, #136	; 0x88
    2e24:	movne	r3, #200	; 0xc8
    2e26:	orr.w	r3, r3, r2, lsl #16
    2e2a:	str.w	r3, [r7, r8, lsl #3]
    2e2e:	b.n	2c48 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2e30:	lsls	r0, r4, #31
    2e32:	bmi.w	301c <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    2e36:	lsls	r1, r4, #24
    2e38:	bmi.w	309c <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2e3c:	lsls	r2, r4, #30
    2e3e:	bpl.n	2e4e <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2e40:	ldr	r2, [pc, #124]	; (2ec0 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2e42:	ldr	r1, [pc, #128]	; (2ec4 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2e44:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2e46:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2e48:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    2e4a:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2e4c:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2e4e:	lsls	r3, r4, #27
    2e50:	bpl.n	2e58 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2e52:	ldr	r3, [pc, #112]	; (2ec4 <usb_isr+0x310>)
    2e54:	movs	r2, #16
    2e56:	strb	r2, [r3, #0]
	}

}
    2e58:	add	sp, #28
    2e5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2e5e:	movs	r2, #4
    2e60:	strb	r2, [r1, r6]
						break;
    2e62:	b.n	2e1a <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2e64:	movs	r2, #5
    2e66:	strb	r2, [r1, r6]
						break;
    2e68:	b.n	2e1a <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    2e6a:	movs	r2, #3
    2e6c:	strb	r2, [r1, r6]
						break;
    2e6e:	b.n	2e1a <usb_isr+0x266>
    2e70:	.word	0x1fff0000
    2e74:	.word	0x1fff193c
    2e78:	.word	0x1fff18e4
    2e7c:	.word	0x1fff1e64
    2e80:	.word	0x004000c8
    2e84:	.word	0x00400088
    2e88:	.word	0x1fff19d0
    2e8c:	.word	0x1fff1951
    2e90:	.word	0x1fff1864
    2e94:	.word	0x1fff19bc
    2e98:	.word	0x1fff18e0
    2e9c:	.word	0x1fff1950
    2ea0:	.word	0x400720c0
    2ea4:	.word	0x1fff19c8
    2ea8:	.word	0x1fff18f8
    2eac:	.word	0x1fff19c4
    2eb0:	.word	0x40072098
    2eb4:	.word	0x40072094
    2eb8:	.word	0x1fff1994
    2ebc:	.word	0x1fff19d4
    2ec0:	.word	0x40072088
    2ec4:	.word	0x40072080
    2ec8:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2ecc:	movw	r4, #8225	; 0x2021
    2ed0:	cmp	r1, r4
    2ed2:	beq.w	300e <usb_isr+0x45a>
    2ed6:	bhi.n	2f6c <usb_isr+0x3b8>
    2ed8:	cmp.w	r1, #2176	; 0x880
    2edc:	beq.w	3172 <usb_isr+0x5be>
    2ee0:	cmp.w	r1, #2304	; 0x900
    2ee4:	bne.w	30f2 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2ee8:	ldr	r2, [pc, #712]	; (31b4 <usb_isr+0x600>)
    2eea:	ldr	r4, [pc, #716]	; (31b8 <usb_isr+0x604>)
    2eec:	ldrb	r1, [r5, #2]
    2eee:	strb	r1, [r2, #0]
    2ef0:	add.w	r5, r4, #160	; 0xa0
    2ef4:	b.n	2efe <usb_isr+0x34a>
    2ef6:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2ef8:	cmp	r5, r4
    2efa:	beq.w	3210 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    2efe:	ldr	r3, [r4, #32]
    2f00:	lsls	r1, r3, #24
    2f02:	bpl.n	2ef6 <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2f04:	ldr	r0, [r4, #36]	; 0x24
    2f06:	subs	r0, #8
    2f08:	bl	2994 <usb_free>
    2f0c:	b.n	2ef6 <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2f0e:	cmp.w	lr, #64	; 0x40
    2f12:	it	ne
    2f14:	movne	r2, #0
    2f16:	b.n	2da2 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2f18:	ldr	r2, [pc, #672]	; (31bc <usb_isr+0x608>)
    2f1a:	ldrb	r5, [r1, #0]
    2f1c:	ldrb	r0, [r1, #1]
    2f1e:	strb	r5, [r2, #0]
    2f20:	strb	r0, [r2, #1]
    2f22:	ldrb	r5, [r1, #2]
    2f24:	ldrb	r0, [r1, #3]
    2f26:	strb	r5, [r2, #2]
    2f28:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2f2a:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2f2c:	ldrb	r5, [r1, #4]
    2f2e:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2f30:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2f32:	ldrb	r5, [r1, #5]
    2f34:	ldrb	r1, [r1, #6]
    2f36:	strb	r5, [r2, #5]
    2f38:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2f3a:	beq.w	316a <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2f3e:	ldr	r1, [pc, #640]	; (31c0 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f40:	ldr	r6, [pc, #640]	; (31c4 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2f42:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f44:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2f46:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f4a:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2f4c:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2f50:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f52:	ite	eq
    2f54:	moveq	r1, #136	; 0x88
    2f56:	movne	r1, #200	; 0xc8
    2f58:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2f5c:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2f60:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2f64:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2f66:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2f68:	str	r1, [r2, #4]
    2f6a:	b.n	2dc8 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2f6c:	movw	r4, #8737	; 0x2221
    2f70:	cmp	r1, r4
    2f72:	bne.w	3386 <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2f76:	ldr.w	ip, [pc, #656]	; 3208 <usb_isr+0x654>
    2f7a:	ldr	r3, [pc, #588]	; (31c8 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    2f7c:	ldr	r1, [pc, #588]	; (31cc <usb_isr+0x618>)
    2f7e:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2f80:	ldr.w	r5, [ip]
    2f84:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    2f86:	str	r0, [sp, #4]
    2f88:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2f8a:	movs	r0, #0
    2f8c:	str	r0, [sp, #8]
    2f8e:	mov	r8, r0
    2f90:	mov	ip, r0
    2f92:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2f94:	ldr	r1, [pc, #552]	; (31c0 <usb_isr+0x60c>)
    2f96:	ldrb	r5, [r1, #0]
    2f98:	orr.w	lr, r5, #2
    2f9c:	add.w	r3, r9, lr, lsl #3
    2fa0:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2fa2:	ldr	r3, [sp, #4]
    2fa4:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2fa6:	ldr	r3, [sp, #12]
    2fa8:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2faa:	ite	eq
    2fac:	moveq	r4, #136	; 0x88
    2fae:	movne	r4, #200	; 0xc8
    2fb0:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2fb4:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2fb8:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    2fbc:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2fbe:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2fc0:	ldr.w	lr, [pc, #500]	; 31b8 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    2fc4:	ldr	r3, [pc, #508]	; (31c4 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    2fc6:	ldr.w	r8, [pc, #504]	; 31c0 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2fca:	cmp	r0, #0
    2fcc:	bne.w	3100 <usb_isr+0x54c>
    2fd0:	cmp.w	ip, #64	; 0x40
    2fd4:	bne.n	300e <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2fd6:	orr.w	ip, r4, #2
    2fda:	add.w	r3, r9, ip, lsl #3
    2fde:	ldr	r4, [sp, #8]
    2fe0:	ldr.w	lr, [pc, #468]	; 31b8 <usb_isr+0x604>
    2fe4:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2fe6:	cmp	r2, #0
    2fe8:	bne.w	312c <usb_isr+0x578>
    2fec:	lsls	r2, r0, #16
    2fee:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    2ff2:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ff6:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2ffa:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2ffc:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2ffe:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3000:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3002:	cmp	r0, #64	; 0x40
    3004:	bne.n	300e <usb_isr+0x45a>
    3006:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3008:	ldr	r2, [pc, #452]	; (31d0 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    300a:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    300c:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    300e:	ldr	r2, [pc, #452]	; (31d4 <usb_isr+0x620>)
    3010:	movs	r3, #1
    3012:	strb	r3, [r2, #0]
    3014:	b.n	2dce <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    3016:	bl	1d74 <usb_serial_flush_callback>
    301a:	b.n	2c88 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    301c:	ldr	r3, [pc, #408]	; (31b8 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    301e:	ldr	r0, [pc, #436]	; (31d4 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    3020:	ldr	r1, [pc, #412]	; (31c0 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    3022:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3024:	mov.w	lr, #2
    3028:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    302c:	ldr	r7, [pc, #424]	; (31d8 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    302e:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3030:	ldr	r1, [pc, #424]	; (31dc <usb_isr+0x628>)
    3032:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3034:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3036:	ldr	r6, [pc, #424]	; (31e0 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    3038:	ldr	r5, [pc, #424]	; (31e4 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    303a:	ldr	r4, [pc, #428]	; (31e8 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    303c:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    303e:	movs	r1, #13
    3040:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3042:	movs	r1, #255	; 0xff
    3044:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3046:	ldr.w	lr, [pc, #452]	; 320c <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    304a:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    304c:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    304e:	ldr	r5, [pc, #412]	; (31ec <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3050:	ldr	r2, [pc, #412]	; (31f0 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3052:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3056:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3058:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    305a:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    305e:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3060:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3062:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    3064:	add	sp, #28
    3066:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    306a:	ldr	r2, [pc, #392]	; (31f4 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    306c:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    3070:	ldrb	r3, [r2, #0]
    3072:	adds	r3, #1
    3074:	strb	r3, [r2, #0]
    3076:	b.n	2c48 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3078:	str.w	r0, [r3, r6, lsl #2]
    307c:	ldr	r5, [pc, #376]	; (31f8 <usb_isr+0x644>)
    307e:	b.n	2c16 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3080:	ldrb	r3, [r1, r6]
    3082:	cmp	r3, #3
    3084:	bhi.n	315c <usb_isr+0x5a8>
    3086:	add	r2, pc, #4	; (adr r2, 308c <usb_isr+0x4d8>)
    3088:	ldr.w	pc, [r2, r3, lsl #2]
    308c:	.word	0x00002c49
    3090:	.word	0x00002c49
    3094:	.word	0x000030e1
    3098:	.word	0x000030db
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    309c:	ldr	r1, [pc, #312]	; (31d8 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    309e:	ldr	r3, [pc, #324]	; (31e4 <usb_isr+0x630>)
    30a0:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    30a2:	movs	r0, #13
    30a4:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    30a6:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    30a8:	lsls	r2, r4, #30
    30aa:	bpl.w	2e4e <usb_isr+0x29a>
    30ae:	b.n	2e40 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    30b0:	movw	r2, #770	; 0x302
    30b4:	cmp	r1, r2
    30b6:	bne.w	3376 <usb_isr+0x7c2>
    30ba:	ldrh	r1, [r5, #4]
    30bc:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    30c0:	cmp	r1, #5
    30c2:	bhi.n	30f2 <usb_isr+0x53e>
    30c4:	ldrh	r2, [r5, #2]
    30c6:	cbnz	r2, 30f2 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    30c8:	ldr	r4, [pc, #268]	; (31d8 <usb_isr+0x624>)
    30ca:	str	r0, [sp, #4]
    30cc:	lsls	r1, r1, #2
    30ce:	add	r4, r1
    30d0:	ldrb	r1, [r4, #0]
    30d2:	orr.w	r1, r1, #2
    30d6:	strb	r1, [r4, #0]
    30d8:	b.n	2f8a <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    30da:	movs	r3, #1
    30dc:	strb	r3, [r1, r6]
						break;
    30de:	b.n	2c48 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    30e0:	movs	r3, #0
    30e2:	strb	r3, [r1, r6]
						break;
    30e4:	b.n	2c48 <usb_isr+0x94>
    30e6:	ldrh	r1, [r5, #4]
    30e8:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    30ec:	cmp	r1, #5
    30ee:	bls.w	3390 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    30f2:	ldr	r2, [pc, #228]	; (31d8 <usb_isr+0x624>)
    30f4:	movs	r3, #15
    30f6:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    30f8:	ldr	r2, [pc, #216]	; (31d4 <usb_isr+0x620>)
    30fa:	movs	r3, #1
    30fc:	strb	r3, [r2, #0]
    30fe:	b.n	2dce <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    3100:	cmp	r0, #64	; 0x40
    3102:	bls.w	2fd6 <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3106:	orr.w	r4, r4, #2
    310a:	add.w	r1, lr, r4, lsl #3
    310e:	ldr	r6, [sp, #8]
    3110:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3112:	cbz	r2, 3144 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    3114:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3118:	ldr	r2, [pc, #224]	; (31fc <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    311a:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    311c:	mov	r3, r6
    311e:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3120:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3124:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3126:	str.w	r2, [lr, r4, lsl #3]
    312a:	b.n	3008 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    312c:	ldrb.w	r3, [sp, #4]
    3130:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3132:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3134:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3136:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3138:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    313c:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    313e:	str.w	r2, [lr, ip, lsl #3]
    3142:	b.n	3002 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    3144:	ldrb.w	r1, [sp, #4]
    3148:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    314a:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    314c:	ldr	r2, [pc, #140]	; (31dc <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    314e:	strb.w	r5, [r8]
    3152:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3154:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3156:	str.w	r2, [lr, r4, lsl #3]
    315a:	b.n	3008 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    315c:	tst.w	r9, #8
    3160:	ite	eq
    3162:	moveq	r3, #2
    3164:	movne	r3, #3
    3166:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3168:	b.n	2c48 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    316a:	ldr	r2, [pc, #148]	; (3200 <usb_isr+0x64c>)
    316c:	movs	r1, #15
    316e:	strb	r1, [r2, #0]
    3170:	b.n	2f3e <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3172:	ldr	r2, [pc, #64]	; (31b4 <usb_isr+0x600>)
    3174:	ldr	r4, [pc, #140]	; (3204 <usb_isr+0x650>)
    3176:	ldrb	r2, [r2, #0]
    3178:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    317a:	ldrh	r2, [r5, #6]
    317c:	cmp	r2, r0
    317e:	bcs.w	3544 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3182:	ldr	r1, [pc, #60]	; (31c0 <usb_isr+0x60c>)
    3184:	ldrb	r5, [r1, #0]
    3186:	cmp	r2, #64	; 0x40
    3188:	mov	ip, r2
    318a:	orr.w	lr, r5, #2
    318e:	it	cs
    3190:	movcs.w	ip, #64	; 0x40
    3194:	add.w	r3, r4, ip
    3198:	add.w	r0, r9, lr, lsl #3
    319c:	str	r3, [sp, #8]
    319e:	movs	r3, #1
    31a0:	str	r4, [r0, #4]
    31a2:	mov.w	r8, ip, lsl #16
    31a6:	rsb	r0, ip, r2
    31aa:	str	r3, [sp, #4]
    31ac:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31ae:	movs	r4, #200	; 0xc8
    31b0:	b.n	2fb0 <usb_isr+0x3fc>
    31b2:	nop
    31b4:	.word	0x1fff19d0
    31b8:	.word	0x1fff0000
    31bc:	.word	0x1fff1d2c
    31c0:	.word	0x1fff19c4
    31c4:	.word	0x1fff1950
    31c8:	.word	0x1fff1d34
    31cc:	.word	0x1fff1874
    31d0:	.word	0x1fff18f8
    31d4:	.word	0x40072094
    31d8:	.word	0x400720c0
    31dc:	.word	0x00400088
    31e0:	.word	0x40072088
    31e4:	.word	0x40072080
    31e8:	.word	0x40072098
    31ec:	.word	0x1fff18fc
    31f0:	.word	0x1fff1954
    31f4:	.word	0x1fff19c5
    31f8:	.word	0x1fff18e4
    31fc:	.word	0x004000c8
    3200:	.word	0x1fff1951
    3204:	.word	0x1fff19c8
    3208:	.word	0x1fff187c
    320c:	.word	0x4007208c
    3210:	ldr	r4, [pc, #704]	; (34d4 <usb_isr+0x920>)
    3212:	ldr	r2, [pc, #708]	; (34d8 <usb_isr+0x924>)
    3214:	ldr	r1, [pc, #708]	; (34dc <usb_isr+0x928>)
    3216:	ldr	r0, [pc, #712]	; (34e0 <usb_isr+0x92c>)
    3218:	ldr	r5, [pc, #712]	; (34e4 <usb_isr+0x930>)
    321a:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    321c:	movs	r3, #0
    321e:	ldr	r4, [pc, #712]	; (34e8 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3220:	str	r4, [sp, #8]
    3222:	str	r6, [sp, #20]
    3224:	str	r5, [sp, #12]
    3226:	mov	r8, r0
    3228:	mov	r4, r3
    322a:	str	r7, [sp, #16]
    322c:	mov	r6, r2
    322e:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3230:	ldr	r0, [r6, #0]
			while (p) {
    3232:	cbz	r0, 3240 <usb_isr+0x68c>
				n = p->next;
    3234:	ldr	r7, [r0, #4]
				usb_free(p);
    3236:	bl	2994 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    323a:	mov	r0, r7
    323c:	cmp	r7, #0
    323e:	bne.n	3234 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3240:	movs	r3, #0
    3242:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3244:	ldr	r3, [sp, #12]
			p = tx_first[i];
    3246:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3248:	mov	r2, r3
    324a:	movs	r3, #0
    324c:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    3250:	cbz	r0, 325e <usb_isr+0x6aa>
				n = p->next;
    3252:	ldr	r7, [r0, #4]
				usb_free(p);
    3254:	bl	2994 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3258:	mov	r0, r7
    325a:	cmp	r7, #0
    325c:	bne.n	3252 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    325e:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3260:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3262:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3264:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    3266:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    326a:	ldr	r2, [sp, #8]
    326c:	mov.w	r1, #0
			switch (tx_state[i]) {
    3270:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    3272:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    3276:	cmp	r3, #3
    3278:	bhi.n	328a <usb_isr+0x6d6>
    327a:	tbb	[pc, r3]
    327e:	.short	0x0258
    3280:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3282:	ldr	r3, [sp, #4]
    3284:	mov.w	r2, #1
    3288:	strb	r2, [r3, #0]
    328a:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    328c:	adds	r4, #1
    328e:	adds	r3, #1
    3290:	cmp	r4, #5
    3292:	add.w	r6, r6, #4
    3296:	add.w	r5, r5, #4
    329a:	str	r3, [sp, #4]
    329c:	bne.n	3230 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    329e:	ldr	r4, [pc, #588]	; (34ec <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    32a0:	ldr	r5, [pc, #588]	; (34f0 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    32a2:	ldrb	r2, [r4, #0]
			*reg = epconf;
    32a4:	ldr	r3, [pc, #588]	; (34f4 <usb_isr+0x940>)
    32a6:	ldr	r7, [sp, #16]
    32a8:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    32aa:	movs	r1, #0
    32ac:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    32ae:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    32b0:	lsls	r2, r2, #28
    32b2:	bmi.n	33aa <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    32b4:	ldrb	r2, [r4, #1]
			*reg = epconf;
    32b6:	ldr	r1, [pc, #576]	; (34f8 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    32b8:	ldr.w	r8, [pc, #588]	; 3508 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    32bc:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    32be:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    32c0:	mov.w	r1, #0
    32c4:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    32c8:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    32cc:	bmi.w	3456 <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    32d0:	ldrb	r2, [r4, #2]
			*reg = epconf;
    32d2:	ldr	r1, [pc, #552]	; (34fc <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    32d4:	ldr.w	r8, [pc, #560]	; 3508 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    32d8:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    32da:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    32dc:	mov.w	r1, #0
    32e0:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    32e4:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    32e8:	bmi.w	342e <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    32ec:	ldr	r1, [pc, #528]	; (3500 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    32ee:	ldrb	r2, [r4, #3]
			*reg = epconf;
    32f0:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    32f2:	movs	r1, #0
    32f4:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    32f8:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    32fc:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    32fe:	ldr.w	r8, [pc, #520]	; 3508 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3302:	bmi.n	3400 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3304:	ldrb	r2, [r4, #4]
			*reg = epconf;
    3306:	ldr	r1, [pc, #508]	; (3504 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3308:	ldr	r4, [pc, #508]	; (3508 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    330a:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    330c:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    330e:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3310:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3314:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3318:	bmi.n	33d6 <usb_isr+0x822>
    331a:	ldrb	r3, [r6, #0]
    331c:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    331e:	movs	r1, #0
    3320:	eor.w	r2, r3, #1
    3324:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3328:	str.w	r1, [r9, #184]	; 0xb8
    332c:	b.n	2f8a <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    332e:	ldr	r3, [sp, #4]
    3330:	mov.w	r2, #0
    3334:	strb	r2, [r3, #0]
    3336:	b.n	328a <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3338:	ldr	r2, [pc, #464]	; (350c <usb_isr+0x958>)
    333a:	ldr	r4, [r2, #4]
    333c:	cmp	r4, #0
    333e:	beq.w	30f2 <usb_isr+0x53e>
    3342:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3344:	ldrh.w	lr, [r5, #4]
    3348:	b.n	3354 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    334a:	adds	r2, #12
			if (list->addr == NULL) break;
    334c:	ldr	r4, [r2, #4]
    334e:	cmp	r4, #0
    3350:	beq.w	30f2 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3354:	ldrh	r3, [r2, #0]
    3356:	cmp	r3, r0
    3358:	bne.n	334a <usb_isr+0x796>
    335a:	ldrh	r3, [r2, #2]
    335c:	cmp	r3, lr
    335e:	bne.n	334a <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3360:	lsrs	r0, r0, #8
    3362:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3364:	ite	eq
    3366:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    3368:	ldrhne	r0, [r2, #8]
    336a:	b.n	317a <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    336c:	ldr	r4, [pc, #416]	; (3510 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    336e:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3370:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3372:	strb	r2, [r4, #1]
    3374:	b.n	317a <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3376:	cmp.w	r1, #1280	; 0x500
    337a:	bne.w	30f2 <usb_isr+0x53e>
    337e:	movs	r3, #1
    3380:	movs	r2, #0
    3382:	str	r3, [sp, #4]
    3384:	b.n	2f8a <usb_isr+0x3d6>
    3386:	movw	r2, #8993	; 0x2321
    338a:	cmp	r1, r2
    338c:	beq.n	337e <usb_isr+0x7ca>
    338e:	b.n	30f2 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3390:	ldrh	r2, [r5, #2]
    3392:	cmp	r2, #0
    3394:	bne.w	30f2 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3398:	ldr	r4, [pc, #376]	; (3514 <usb_isr+0x960>)
    339a:	str	r0, [sp, #4]
    339c:	lsls	r1, r1, #2
    339e:	add	r4, r1
    33a0:	ldrb	r1, [r4, #0]
    33a2:	bic.w	r1, r1, #2
    33a6:	strb	r1, [r4, #0]
    33a8:	b.n	2f8a <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    33aa:	bl	2954 <usb_malloc>
				if (p) {
    33ae:	cmp	r0, #0
    33b0:	beq.w	3520 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    33b4:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    33b6:	ldr	r2, [pc, #352]	; (3518 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    33b8:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    33bc:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    33c0:	bl	2954 <usb_malloc>
				if (p) {
    33c4:	cmp	r0, #0
    33c6:	beq.n	34c8 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    33c8:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    33ca:	ldr	r2, [pc, #336]	; (351c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    33cc:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    33d0:	str.w	r2, [r9, #40]	; 0x28
    33d4:	b.n	32b4 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    33d6:	bl	2954 <usb_malloc>
				if (p) {
    33da:	cmp	r0, #0
    33dc:	beq.n	348c <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    33de:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    33e0:	ldr	r2, [pc, #308]	; (3518 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    33e2:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    33e6:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    33ea:	bl	2954 <usb_malloc>
				if (p) {
    33ee:	cmp	r0, #0
    33f0:	beq.n	3480 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    33f2:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    33f4:	ldr	r2, [pc, #292]	; (351c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    33f6:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    33fa:	str.w	r2, [r9, #168]	; 0xa8
    33fe:	b.n	331a <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3400:	bl	2954 <usb_malloc>
				if (p) {
    3404:	cmp	r0, #0
    3406:	beq.w	3538 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    340a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    340c:	ldr	r2, [pc, #264]	; (3518 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    340e:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3412:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3416:	bl	2954 <usb_malloc>
				if (p) {
    341a:	cmp	r0, #0
    341c:	beq.w	352c <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    3420:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3422:	ldr	r2, [pc, #248]	; (351c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3424:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3428:	str.w	r2, [r9, #136]	; 0x88
    342c:	b.n	3304 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    342e:	bl	2954 <usb_malloc>
				if (p) {
    3432:	cmp	r0, #0
    3434:	beq.n	34bc <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    3436:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3438:	ldr	r2, [pc, #220]	; (3518 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    343a:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    343e:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3442:	bl	2954 <usb_malloc>
				if (p) {
    3446:	cbz	r0, 34b0 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3448:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    344a:	ldr	r2, [pc, #208]	; (351c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    344c:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3450:	str.w	r2, [r9, #104]	; 0x68
    3454:	b.n	32ec <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3456:	bl	2954 <usb_malloc>
				if (p) {
    345a:	cbz	r0, 34a4 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    345c:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    345e:	ldr	r2, [pc, #184]	; (3518 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3460:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3464:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3468:	bl	2954 <usb_malloc>
				if (p) {
    346c:	cbz	r0, 3498 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    346e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3470:	ldr	r2, [pc, #168]	; (351c <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3472:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3476:	str.w	r2, [r9, #72]	; 0x48
    347a:	b.n	32d0 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    347c:	movs	r0, #2
    347e:	b.n	317a <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3480:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3482:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    3486:	adds	r2, #1
    3488:	strb	r2, [r5, #0]
    348a:	b.n	331a <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    348c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    348e:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    3492:	adds	r2, #1
    3494:	strb	r2, [r5, #0]
    3496:	b.n	33ea <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3498:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    349a:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    349e:	adds	r2, #1
    34a0:	strb	r2, [r5, #0]
    34a2:	b.n	32d0 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    34a4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    34a6:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    34aa:	adds	r2, #1
    34ac:	strb	r2, [r5, #0]
    34ae:	b.n	3468 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    34b0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    34b2:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    34b6:	adds	r2, #1
    34b8:	strb	r2, [r5, #0]
    34ba:	b.n	32ec <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    34bc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    34be:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    34c2:	adds	r2, #1
    34c4:	strb	r2, [r5, #0]
    34c6:	b.n	3442 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    34c8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    34ca:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    34ce:	adds	r2, #1
    34d0:	strb	r2, [r5, #0]
    34d2:	b.n	32b4 <usb_isr+0x700>
    34d4:	.word	0x1fff19d4
    34d8:	.word	0x1fff193c
    34dc:	.word	0x1fff1994
    34e0:	.word	0x1fff19a8
    34e4:	.word	0x1fff18e4
    34e8:	.word	0x1fff1e64
    34ec:	.word	0x00004d80
    34f0:	.word	0x1fff19c5
    34f4:	.word	0x400720c4
    34f8:	.word	0x400720c8
    34fc:	.word	0x400720cc
    3500:	.word	0x400720d0
    3504:	.word	0x400720d4
    3508:	.word	0x1fff0000
    350c:	.word	0x00004d88
    3510:	.word	0x1fff19c8
    3514:	.word	0x400720c0
    3518:	.word	0x00400088
    351c:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3520:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3522:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    3526:	adds	r2, #1
    3528:	strb	r2, [r5, #0]
    352a:	b.n	33c0 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    352c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    352e:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    3532:	adds	r2, #1
    3534:	strb	r2, [r5, #0]
    3536:	b.n	3304 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3538:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    353a:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    353e:	adds	r2, #1
    3540:	strb	r2, [r5, #0]
    3542:	b.n	3416 <usb_isr+0x862>
    3544:	cmp	r0, #64	; 0x40
    3546:	mov	ip, r0
    3548:	it	cs
    354a:	movcs.w	ip, #64	; 0x40
    354e:	add.w	r3, r4, ip
    3552:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3554:	movs	r3, #1
    3556:	rsb	r0, ip, r0
    355a:	mov.w	r8, ip, lsl #16
    355e:	movs	r2, #0
    3560:	str	r3, [sp, #4]
    3562:	b.n	2f94 <usb_isr+0x3e0>

00003564 <usb_init>:
}



void usb_init(void)
{
    3564:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3568:	ldr	r4, [pc, #156]	; (3608 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    356a:	bl	3da4 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    356e:	movs	r2, #0
    3570:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3574:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3576:	str	r2, [r3, #0]
		table[i].addr = 0;
    3578:	str	r2, [r3, #4]
    357a:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    357c:	cmp	r3, r0
		table[i].desc = 0;
    357e:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3582:	bne.n	3576 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3584:	ldr	r0, [pc, #132]	; (360c <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3586:	ldr	r2, [pc, #136]	; (3610 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3588:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    358a:	ldr.w	lr, [pc, #156]	; 3628 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    358e:	ldr	r6, [pc, #132]	; (3614 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3590:	ldr	r5, [pc, #132]	; (3618 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3592:	ldr	r7, [pc, #136]	; (361c <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3594:	ldr.w	ip, [pc, #148]	; 362c <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    3598:	ldr.w	r8, [pc, #148]	; 3630 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    359c:	orr.w	r3, r3, #262144	; 0x40000
    35a0:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    35a2:	ldr	r3, [r2, #0]
    35a4:	orr.w	r3, r3, #50331648	; 0x3000000
    35a8:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    35aa:	movs	r3, #3
    35ac:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    35b0:	movs	r3, #160	; 0xa0
    35b2:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    35b4:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    35b8:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    35bc:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    35c0:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    35c2:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    35c4:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    35c8:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    35ca:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    35cc:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    35ce:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    35d0:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    35d2:	ldr	r5, [pc, #76]	; (3620 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    35d4:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    35d8:	ldr	r0, [pc, #72]	; (3624 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    35da:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    35de:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    35e0:	movs	r3, #1
    35e2:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    35e6:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    35ea:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    35ee:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    35f0:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    35f2:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    35f6:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    35f8:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    35fa:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    35fe:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3602:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3606:	nop
    3608:	.word	0x1fff0000
    360c:	.word	0x40048034
    3610:	.word	0x4000d800
    3614:	.word	0x40072140
    3618:	.word	0x4007209c
    361c:	.word	0x400720b0
    3620:	.word	0xe000e435
    3624:	.word	0xe000e104
    3628:	.word	0x40072144
    362c:	.word	0x40072080
    3630:	.word	0x40072088

00003634 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3634:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    3636:	ldr	r4, [pc, #176]	; (36e8 <yield+0xb4>)
    3638:	ldrb	r3, [r4, #0]
    363a:	cbz	r3, 363e <yield+0xa>
    363c:	pop	{r3, r4, r5, pc}
	running = 1;
    363e:	movs	r3, #1
    3640:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3642:	bl	1b60 <usb_serial_available>
	if (Serial.available()) serialEvent();
    3646:	cmp	r0, #0
    3648:	bne.n	36d0 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    364a:	bl	3b74 <serial_available>
	if (Serial1.available()) serialEvent1();
    364e:	cmp	r0, #0
    3650:	bne.n	36ca <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    3652:	bl	385c <serial2_available>
	if (Serial2.available()) serialEvent2();
    3656:	cmp	r0, #0
    3658:	bne.n	36c4 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    365a:	bl	3e74 <serial3_available>
	if (Serial3.available()) serialEvent3();
    365e:	cbnz	r0, 36be <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    3660:	bl	3988 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3664:	cbnz	r0, 36b8 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    3666:	bl	3764 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    366a:	cbnz	r0, 36b2 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    366c:	bl	3ca0 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    3670:	cbnz	r0, 36ac <yield+0x78>
#endif
	running = 0;
    3672:	movs	r3, #0
    3674:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3676:	mrs	r3, IPSR
		if (ipsr != 0) return;
    367a:	cmp	r3, #0
    367c:	bne.n	363c <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    367e:	mrs	r1, PRIMASK
		__disable_irq();
    3682:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3684:	ldr	r3, [pc, #100]	; (36ec <yield+0xb8>)
    3686:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    3688:	cbz	r0, 36d6 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    368a:	ldr	r4, [pc, #100]	; (36f0 <yield+0xbc>)
    368c:	ldrb	r2, [r4, #0]
    368e:	cbnz	r2, 36d6 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    3690:	ldr	r5, [r0, #20]
    3692:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3694:	movs	r3, #1
    3696:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    3698:	cbz	r5, 36de <yield+0xaa>
			firstYield->_prev = nullptr;
    369a:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    369c:	cbnz	r1, 36a0 <yield+0x6c>
    369e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    36a0:	movs	r5, #0
    36a2:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    36a4:	ldr	r3, [r0, #8]
    36a6:	blx	r3
		runningFromYield = false;
    36a8:	strb	r5, [r4, #0]
    36aa:	b.n	363c <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    36ac:	bl	3760 <serialEvent6()>
    36b0:	b.n	3672 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    36b2:	bl	36f8 <serialEvent5()>
    36b6:	b.n	366c <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    36b8:	bl	374c <serialEvent4()>
    36bc:	b.n	3666 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    36be:	bl	3f70 <serialEvent3()>
    36c2:	b.n	3660 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    36c4:	bl	3748 <serialEvent2()>
    36c8:	b.n	365a <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    36ca:	bl	3f6c <serialEvent1()>
    36ce:	b.n	3652 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    36d0:	bl	3724 <serialEvent()>
    36d4:	b.n	364a <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    36d6:	cmp	r1, #0
    36d8:	bne.n	363c <yield+0x8>
    36da:	cpsie	i
    36dc:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    36de:	ldr	r3, [pc, #20]	; (36f4 <yield+0xc0>)
    36e0:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    36e2:	cmp	r1, #0
    36e4:	bne.n	36a0 <yield+0x6c>
    36e6:	b.n	369e <yield+0x6a>
    36e8:	.word	0x1fff19d9
    36ec:	.word	0x1fff1cec
    36f0:	.word	0x1fff1cf0
    36f4:	.word	0x1fff1ce8

000036f8 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    36f8:	bx	lr
    36fa:	nop

000036fc <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    36fc:	b.w	1b7c <usb_serial_flush_input>

00003700 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    3700:	b.w	1b30 <usb_serial_peekchar>

00003704 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3704:	b.w	1ae8 <usb_serial_getchar>

00003708 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3708:	b.w	1b60 <usb_serial_available>

0000370c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    370c:	b.w	1d1c <usb_serial_flush_output>

00003710 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3710:	b.w	1cd4 <usb_serial_write_buffer_free>

00003714 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3714:	mov	r0, r1
    3716:	mov	r1, r2
    3718:	b.w	1bb4 <usb_serial_write>

0000371c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    371c:	mov	r0, r1
    371e:	b.w	1cbc <usb_serial_putchar>
    3722:	nop

00003724 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    3724:	bx	lr
    3726:	nop

00003728 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3728:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    372a:	ldr	r2, [pc, #24]	; (3744 <Print::println()+0x1c>)
	return write(buf, 2);
    372c:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    372e:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    3730:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3732:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3734:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3736:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    373a:	movs	r2, #2
    373c:	blx	r3
}
    373e:	add	sp, #12
    3740:	ldr.w	pc, [sp], #4
    3744:	.word	0x00004d7c

00003748 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    3748:	bx	lr
    374a:	nop

0000374c <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    374c:	bx	lr
    374e:	nop

00003750 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3750:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3752:	bl	490 <setup>
	while (1) {
		loop();
    3756:	bl	494 <loop>
		yield();
    375a:	bl	3634 <yield>
    375e:	b.n	3756 <main+0x6>

00003760 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    3760:	bx	lr
    3762:	nop

00003764 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3764:	ldr	r2, [pc, #20]	; (377c <serial5_available+0x18>)
	tail = rx_buffer_tail;
    3766:	ldr	r3, [pc, #24]	; (3780 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3768:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    376a:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    376c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    376e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3770:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    3772:	it	cc
    3774:	addcc	r0, #64	; 0x40
    3776:	subs	r0, r0, r3
}
    3778:	bx	lr
    377a:	nop
    377c:	.word	0x1fff19e0
    3780:	.word	0x1fff19e1

00003784 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    3784:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    3786:	ldr	r3, [pc, #172]	; (3834 <uart4_status_isr+0xb0>)
    3788:	ldrb	r2, [r3, #4]
    378a:	lsls	r4, r2, #26
    378c:	bpl.n	37ce <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    378e:	ldr	r0, [pc, #168]	; (3838 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3790:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3792:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3794:	ldr	r1, [pc, #164]	; (383c <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3796:	adds	r3, #1
    3798:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    379a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    379c:	it	gt
    379e:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    37a0:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    37a2:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    37a4:	beq.n	37ae <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    37a6:	ldr	r4, [pc, #152]	; (3840 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    37a8:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    37aa:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    37ac:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    37ae:	ldr	r2, [pc, #148]	; (3844 <uart4_status_isr+0xc0>)
    37b0:	ldr	r1, [r2, #0]
    37b2:	cbz	r1, 37ce <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    37b4:	ldr	r2, [pc, #144]	; (3848 <uart4_status_isr+0xc4>)
    37b6:	ldrb	r2, [r2, #0]
    37b8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    37ba:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    37bc:	itet	cc
    37be:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    37c2:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    37c4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    37c6:	cmp	r3, #39	; 0x27
    37c8:	itt	gt
    37ca:	movgt	r3, #1
    37cc:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    37ce:	ldr	r2, [pc, #100]	; (3834 <uart4_status_isr+0xb0>)
    37d0:	ldrb	r3, [r2, #3]
    37d2:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    37d4:	lsls	r0, r3, #24
    37d6:	bmi.n	37fc <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    37d8:	lsls	r2, r3, #25
    37da:	bpl.n	37f8 <uart4_status_isr+0x74>
    37dc:	ldr	r3, [pc, #84]	; (3834 <uart4_status_isr+0xb0>)
    37de:	ldrb	r3, [r3, #4]
    37e0:	lsls	r3, r3, #25
    37e2:	bpl.n	37f8 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    37e4:	ldr	r3, [pc, #100]	; (384c <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    37e6:	ldr	r1, [pc, #104]	; (3850 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    37e8:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    37ea:	movs	r2, #0
    37ec:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    37ee:	cbz	r3, 37f2 <uart4_status_isr+0x6e>
    37f0:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    37f2:	ldr	r3, [pc, #64]	; (3834 <uart4_status_isr+0xb0>)
    37f4:	movs	r2, #44	; 0x2c
    37f6:	strb	r2, [r3, #3]
	}
}
    37f8:	pop	{r4, r5}
    37fa:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    37fc:	ldrb	r1, [r2, #4]
    37fe:	lsls	r1, r1, #24
    3800:	bpl.n	37d8 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    3802:	ldr	r1, [pc, #80]	; (3854 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3804:	ldr	r0, [pc, #64]	; (3848 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3806:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3808:	ldrb	r1, [r0, #0]
    380a:	uxtb	r1, r1
		if (head == tail) {
    380c:	cmp	r4, r1
    380e:	beq.n	382c <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    3810:	adds	r2, r1, #1
    3812:	cmp	r2, #39	; 0x27
    3814:	itt	hi
    3816:	movhi	r1, #0
    3818:	movhi	r2, r1
			n = tx_buffer[tail];
    381a:	ldr	r5, [pc, #60]	; (3858 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    381c:	ldr	r4, [pc, #20]	; (3834 <uart4_status_isr+0xb0>)
    381e:	it	ls
    3820:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3822:	ldrb	r2, [r5, r2]
    3824:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3826:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3828:	strb	r1, [r0, #0]
    382a:	b.n	37d8 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    382c:	movs	r1, #108	; 0x6c
    382e:	strb	r1, [r2, #3]
    3830:	b.n	37d8 <uart4_status_isr+0x54>
    3832:	nop
    3834:	.word	0x400ea000
    3838:	.word	0x1fff19e0
    383c:	.word	0x1fff19e1
    3840:	.word	0x1fff1a0c
    3844:	.word	0x1fff19dc
    3848:	.word	0x1fff1a4d
    384c:	.word	0x1fff1a50
    3850:	.word	0x1fff1a4c
    3854:	.word	0x1fff1a54
    3858:	.word	0x1fff19e4

0000385c <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    385c:	ldr	r2, [pc, #20]	; (3874 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    385e:	ldr	r3, [pc, #24]	; (3878 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3860:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3862:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3864:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3866:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3868:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    386a:	it	cc
    386c:	addcc	r0, #64	; 0x40
    386e:	subs	r0, r0, r3
}
    3870:	bx	lr
    3872:	nop
    3874:	.word	0x1fff1ac8
    3878:	.word	0x1fff1a5d

0000387c <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    387c:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    387e:	ldr	r3, [pc, #224]	; (3960 <uart1_status_isr+0xe4>)
    3880:	ldrb	r2, [r3, #4]
    3882:	tst.w	r2, #48	; 0x30
    3886:	beq.n	38e2 <uart1_status_isr+0x66>
		__disable_irq();
    3888:	cpsid	i
		avail = UART1_RCFIFO;
    388a:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    388c:	and.w	r2, r1, #255	; 0xff
    3890:	cmp	r1, #0
    3892:	beq.n	3910 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3894:	cpsie	i
			head = rx_buffer_head;
    3896:	ldr	r7, [pc, #204]	; (3964 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3898:	ldr	r1, [pc, #204]	; (3968 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    389a:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    389c:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    389e:	ldr	r6, [pc, #204]	; (396c <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    38a0:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    38a2:	uxtb	r0, r0
			tail = rx_buffer_tail;
    38a4:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    38a6:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    38a8:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    38aa:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    38ac:	it	cs
    38ae:	movcs	r3, #0
				if (newhead != tail) {
    38b0:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    38b2:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    38b6:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    38b8:	itt	ne
    38ba:	strbne	r1, [r6, r3]
    38bc:	movne	r0, r3
				}
			} while (--avail > 0);
    38be:	ands.w	r2, r2, #255	; 0xff
    38c2:	bne.n	38a6 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    38c4:	ldr	r3, [pc, #168]	; (3970 <uart1_status_isr+0xf4>)
    38c6:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    38c8:	uxtb	r2, r0
    38ca:	strb	r2, [r7, #0]
			if (rts_pin) {
    38cc:	cbz	r3, 38e2 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    38ce:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    38d0:	itet	cc
    38d2:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    38d6:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    38d8:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    38da:	cmp	r0, #39	; 0x27
    38dc:	itt	gt
    38de:	movgt	r2, #1
    38e0:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    38e2:	ldr	r1, [pc, #124]	; (3960 <uart1_status_isr+0xe4>)
    38e4:	ldrb	r2, [r1, #3]
    38e6:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    38e8:	lsls	r5, r2, #24
    38ea:	bmi.n	391a <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    38ec:	lsls	r2, r2, #25
    38ee:	bpl.n	390c <uart1_status_isr+0x90>
    38f0:	ldr	r3, [pc, #108]	; (3960 <uart1_status_isr+0xe4>)
    38f2:	ldrb	r3, [r3, #4]
    38f4:	lsls	r3, r3, #25
    38f6:	bpl.n	390c <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    38f8:	ldr	r3, [pc, #120]	; (3974 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    38fa:	ldr	r1, [pc, #124]	; (3978 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    38fc:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    38fe:	movs	r2, #0
    3900:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3902:	cbz	r3, 3906 <uart1_status_isr+0x8a>
    3904:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    3906:	ldr	r3, [pc, #88]	; (3960 <uart1_status_isr+0xe4>)
    3908:	movs	r2, #60	; 0x3c
    390a:	strb	r2, [r3, #3]
	}
}
    390c:	pop	{r4, r5, r6, r7}
    390e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3910:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    3912:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3914:	strb	r2, [r3, #17]
			__enable_irq();
    3916:	cpsie	i
    3918:	b.n	38e2 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    391a:	ldrb	r3, [r1, #4]
    391c:	lsls	r4, r3, #24
    391e:	bpl.n	38ec <uart1_status_isr+0x70>
		head = tx_buffer_head;
    3920:	ldr	r3, [pc, #88]	; (397c <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    3922:	ldr	r6, [pc, #92]	; (3980 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3924:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3926:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3928:	uxtb	r4, r4
		tail = tx_buffer_tail;
    392a:	uxtb	r3, r3
		do {
			if (tail == head) break;
    392c:	cmp	r4, r3
    392e:	beq.n	394e <uart1_status_isr+0xd2>
    3930:	ldr	r5, [pc, #80]	; (3984 <uart1_status_isr+0x108>)
    3932:	b.n	3938 <uart1_status_isr+0xbc>
    3934:	cmp	r3, r4
    3936:	beq.n	394e <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    3938:	adds	r3, #1
    393a:	cmp	r3, #40	; 0x28
    393c:	it	cs
    393e:	movcs	r3, #0
			avail = UART1_S1;
    3940:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3942:	ldrb	r0, [r5, r3]
    3944:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    3946:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    3948:	ldrb	r0, [r1, #20]
    394a:	cmp	r0, #7
    394c:	bls.n	3934 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    394e:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3950:	ldr	r1, [pc, #12]	; (3960 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    3952:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3954:	ldrb	r3, [r1, #4]
    3956:	lsls	r0, r3, #24
    3958:	itt	mi
    395a:	movmi	r3, #124	; 0x7c
    395c:	strbmi	r3, [r1, #3]
    395e:	b.n	38ec <uart1_status_isr+0x70>
    3960:	.word	0x4006b000
    3964:	.word	0x1fff1ac8
    3968:	.word	0x1fff1a5d
    396c:	.word	0x1fff1a88
    3970:	.word	0x1fff1a58
    3974:	.word	0x1fff1acc
    3978:	.word	0x1fff1a5c
    397c:	.word	0x1fff1ad0
    3980:	.word	0x1fff1ac9
    3984:	.word	0x1fff1a60

00003988 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3988:	ldr	r2, [pc, #20]	; (39a0 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    398a:	ldr	r3, [pc, #24]	; (39a4 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    398c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    398e:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3990:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3992:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3994:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    3996:	it	cc
    3998:	addcc	r0, #64	; 0x40
    399a:	subs	r0, r0, r3
}
    399c:	bx	lr
    399e:	nop
    39a0:	.word	0x1fff1ad8
    39a4:	.word	0x1fff1ad9

000039a8 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    39a8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    39aa:	ldr	r3, [pc, #172]	; (3a58 <uart3_status_isr+0xb0>)
    39ac:	ldrb	r2, [r3, #4]
    39ae:	lsls	r4, r2, #26
    39b0:	bpl.n	39f2 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    39b2:	ldr	r0, [pc, #168]	; (3a5c <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    39b4:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    39b6:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    39b8:	ldr	r1, [pc, #164]	; (3a60 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    39ba:	adds	r3, #1
    39bc:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    39be:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    39c0:	it	gt
    39c2:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    39c4:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    39c6:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    39c8:	beq.n	39d2 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    39ca:	ldr	r4, [pc, #152]	; (3a64 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    39cc:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    39ce:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    39d0:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    39d2:	ldr	r2, [pc, #148]	; (3a68 <uart3_status_isr+0xc0>)
    39d4:	ldr	r1, [r2, #0]
    39d6:	cbz	r1, 39f2 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    39d8:	ldr	r2, [pc, #144]	; (3a6c <uart3_status_isr+0xc4>)
    39da:	ldrb	r2, [r2, #0]
    39dc:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    39de:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    39e0:	itet	cc
    39e2:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    39e6:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    39e8:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    39ea:	cmp	r3, #39	; 0x27
    39ec:	itt	gt
    39ee:	movgt	r3, #1
    39f0:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    39f2:	ldr	r2, [pc, #100]	; (3a58 <uart3_status_isr+0xb0>)
    39f4:	ldrb	r3, [r2, #3]
    39f6:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    39f8:	lsls	r0, r3, #24
    39fa:	bmi.n	3a20 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    39fc:	lsls	r2, r3, #25
    39fe:	bpl.n	3a1c <uart3_status_isr+0x74>
    3a00:	ldr	r3, [pc, #84]	; (3a58 <uart3_status_isr+0xb0>)
    3a02:	ldrb	r3, [r3, #4]
    3a04:	lsls	r3, r3, #25
    3a06:	bpl.n	3a1c <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3a08:	ldr	r3, [pc, #100]	; (3a70 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3a0a:	ldr	r1, [pc, #104]	; (3a74 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3a0c:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3a0e:	movs	r2, #0
    3a10:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3a12:	cbz	r3, 3a16 <uart3_status_isr+0x6e>
    3a14:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    3a16:	ldr	r3, [pc, #64]	; (3a58 <uart3_status_isr+0xb0>)
    3a18:	movs	r2, #44	; 0x2c
    3a1a:	strb	r2, [r3, #3]
	}
}
    3a1c:	pop	{r4, r5}
    3a1e:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3a20:	ldrb	r1, [r2, #4]
    3a22:	lsls	r1, r1, #24
    3a24:	bpl.n	39fc <uart3_status_isr+0x54>
		head = tx_buffer_head;
    3a26:	ldr	r1, [pc, #80]	; (3a78 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3a28:	ldr	r0, [pc, #64]	; (3a6c <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3a2a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3a2c:	ldrb	r1, [r0, #0]
    3a2e:	uxtb	r1, r1
		if (head == tail) {
    3a30:	cmp	r4, r1
    3a32:	beq.n	3a50 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    3a34:	adds	r2, r1, #1
    3a36:	cmp	r2, #39	; 0x27
    3a38:	itt	hi
    3a3a:	movhi	r1, #0
    3a3c:	movhi	r2, r1
			n = tx_buffer[tail];
    3a3e:	ldr	r5, [pc, #60]	; (3a7c <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3a40:	ldr	r4, [pc, #20]	; (3a58 <uart3_status_isr+0xb0>)
    3a42:	it	ls
    3a44:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3a46:	ldrb	r2, [r5, r2]
    3a48:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3a4a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3a4c:	strb	r1, [r0, #0]
    3a4e:	b.n	39fc <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    3a50:	movs	r1, #108	; 0x6c
    3a52:	strb	r1, [r2, #3]
    3a54:	b.n	39fc <uart3_status_isr+0x54>
    3a56:	nop
    3a58:	.word	0x4006d000
    3a5c:	.word	0x1fff1ad8
    3a60:	.word	0x1fff1ad9
    3a64:	.word	0x1fff1b04
    3a68:	.word	0x1fff1ad4
    3a6c:	.word	0x1fff1b45
    3a70:	.word	0x1fff1b48
    3a74:	.word	0x1fff1b44
    3a78:	.word	0x1fff1b4c
    3a7c:	.word	0x1fff1adc

00003a80 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3a80:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3a82:	ldr	r4, [pc, #64]	; (3ac4 <fault_isr+0x44>)
    3a84:	b.n	3a98 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3a86:	ldr	r3, [r4, #0]
    3a88:	lsls	r1, r3, #21
    3a8a:	bmi.n	3aa8 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3a8c:	ldr	r3, [r4, #0]
    3a8e:	lsls	r2, r3, #20
    3a90:	bmi.n	3ab2 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3a92:	ldr	r3, [r4, #0]
    3a94:	lsls	r3, r3, #19
    3a96:	bmi.n	3abc <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3a98:	ldr	r3, [r4, #0]
    3a9a:	lsls	r0, r3, #13
    3a9c:	bpl.n	3a86 <fault_isr+0x6>
    3a9e:	bl	2bb4 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3aa2:	ldr	r3, [r4, #0]
    3aa4:	lsls	r1, r3, #21
    3aa6:	bpl.n	3a8c <fault_isr+0xc>
    3aa8:	bl	3b94 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3aac:	ldr	r3, [r4, #0]
    3aae:	lsls	r2, r3, #20
    3ab0:	bpl.n	3a92 <fault_isr+0x12>
    3ab2:	bl	387c <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3ab6:	ldr	r3, [r4, #0]
    3ab8:	lsls	r3, r3, #19
    3aba:	bpl.n	3a98 <fault_isr+0x18>
    3abc:	bl	3e94 <uart2_status_isr>
    3ac0:	b.n	3a98 <fault_isr+0x18>
    3ac2:	nop
    3ac4:	.word	0x40048034

00003ac8 <unused_isr>:
	}
}

void unused_isr(void)
{
    3ac8:	push	{r3, lr}
	fault_isr();
    3aca:	bl	3a80 <fault_isr>
    3ace:	nop

00003ad0 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3ad0:	ldr	r3, [pc, #4]	; (3ad8 <startup_early_hook+0x8>)
    3ad2:	movs	r2, #16
    3ad4:	strh	r2, [r3, #0]
    3ad6:	bx	lr
    3ad8:	.word	0x40052000

00003adc <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3adc:	bx	lr
    3ade:	nop

00003ae0 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3ae0:	ldr	r1, [pc, #36]	; (3b08 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3ae2:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3ae4:	ldr	r3, [r1, #0]
	if (incr != 0) {
    3ae6:	cbz	r0, 3af6 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    3ae8:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    3aea:	add	r0, r3
    3aec:	sub.w	r2, r2, #8192	; 0x2000
    3af0:	cmp	r0, r2
    3af2:	bcs.n	3afa <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3af4:	str	r0, [r1, #0]
	}
	return prev;
    3af6:	mov	r0, r3
}
    3af8:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    3afa:	bl	4168 <__errno>
    3afe:	movs	r3, #12
    3b00:	str	r3, [r0, #0]
			return (void *)-1;
    3b02:	mov.w	r0, #4294967295
    3b06:	pop	{r3, pc}
    3b08:	.word	0x1fff0c80

00003b0c <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    3b0c:	ldr	r2, [pc, #32]	; (3b30 <kinetis_hsrun_disable+0x24>)
    3b0e:	ldrb	r3, [r2, #0]
    3b10:	cmp	r3, #128	; 0x80
    3b12:	beq.n	3b18 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3b14:	movs	r0, #0
}
    3b16:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3b18:	ldr	r1, [pc, #24]	; (3b34 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3b1a:	ldr	r3, [pc, #28]	; (3b38 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3b1c:	ldr	r0, [pc, #28]	; (3b3c <kinetis_hsrun_disable+0x30>)
    3b1e:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3b20:	movs	r1, #0
    3b22:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3b24:	ldrb	r3, [r2, #0]
    3b26:	cmp	r3, #128	; 0x80
    3b28:	beq.n	3b24 <kinetis_hsrun_disable+0x18>
		return 1;
    3b2a:	movs	r0, #1
    3b2c:	bx	lr
    3b2e:	nop
    3b30:	.word	0x4007e003
    3b34:	.word	0x40048044
    3b38:	.word	0x4007e001
    3b3c:	.word	0x22280000

00003b40 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3b40:	ldr	r2, [pc, #36]	; (3b68 <kinetis_hsrun_enable+0x28>)
    3b42:	ldrb	r3, [r2, #0]
    3b44:	cmp	r3, #1
    3b46:	beq.n	3b4c <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3b48:	movs	r0, #0
}
    3b4a:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3b4c:	add.w	r3, r3, #1073741824	; 0x40000000
    3b50:	add.w	r3, r3, #516096	; 0x7e000
    3b54:	movs	r1, #96	; 0x60
    3b56:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3b58:	ldrb	r3, [r2, #0]
    3b5a:	cmp	r3, #128	; 0x80
    3b5c:	bne.n	3b58 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3b5e:	ldr	r3, [pc, #12]	; (3b6c <kinetis_hsrun_enable+0x2c>)
    3b60:	ldr	r2, [pc, #12]	; (3b70 <kinetis_hsrun_enable+0x30>)
    3b62:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3b64:	movs	r0, #1
    3b66:	bx	lr
    3b68:	.word	0x4007e003
    3b6c:	.word	0x40048044
    3b70:	.word	0x02060000

00003b74 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b74:	ldr	r2, [pc, #20]	; (3b8c <serial_available+0x18>)
	tail = rx_buffer_tail;
    3b76:	ldr	r3, [pc, #24]	; (3b90 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b78:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3b7a:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b7c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3b7e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3b80:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3b82:	it	cc
    3b84:	addcc	r0, #64	; 0x40
    3b86:	subs	r0, r0, r3
}
    3b88:	bx	lr
    3b8a:	nop
    3b8c:	.word	0x1fff1b54
    3b90:	.word	0x1fff1b55

00003b94 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3b94:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3b96:	ldr	r3, [pc, #224]	; (3c78 <uart0_status_isr+0xe4>)
    3b98:	ldrb	r2, [r3, #4]
    3b9a:	tst.w	r2, #48	; 0x30
    3b9e:	beq.n	3bfa <uart0_status_isr+0x66>
		__disable_irq();
    3ba0:	cpsid	i
		avail = UART0_RCFIFO;
    3ba2:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3ba4:	and.w	r2, r1, #255	; 0xff
    3ba8:	cmp	r1, #0
    3baa:	beq.n	3c28 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3bac:	cpsie	i
			head = rx_buffer_head;
    3bae:	ldr	r7, [pc, #204]	; (3c7c <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3bb0:	ldr	r1, [pc, #204]	; (3c80 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3bb2:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3bb4:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3bb6:	ldr	r6, [pc, #204]	; (3c84 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3bb8:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3bba:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3bbc:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    3bbe:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3bc0:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3bc2:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3bc4:	it	cs
    3bc6:	movcs	r3, #0
				if (newhead != tail) {
    3bc8:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3bca:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3bce:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3bd0:	itt	ne
    3bd2:	strbne	r1, [r6, r3]
    3bd4:	movne	r0, r3
				}
			} while (--avail > 0);
    3bd6:	ands.w	r2, r2, #255	; 0xff
    3bda:	bne.n	3bbe <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3bdc:	ldr	r3, [pc, #168]	; (3c88 <uart0_status_isr+0xf4>)
    3bde:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3be0:	uxtb	r2, r0
    3be2:	strb	r2, [r7, #0]
			if (rts_pin) {
    3be4:	cbz	r3, 3bfa <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3be6:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3be8:	itet	cc
    3bea:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3bee:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3bf0:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3bf2:	cmp	r0, #39	; 0x27
    3bf4:	itt	gt
    3bf6:	movgt	r2, #1
    3bf8:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    3bfa:	ldr	r1, [pc, #124]	; (3c78 <uart0_status_isr+0xe4>)
    3bfc:	ldrb	r2, [r1, #3]
    3bfe:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3c00:	lsls	r5, r2, #24
    3c02:	bmi.n	3c32 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3c04:	lsls	r2, r2, #25
    3c06:	bpl.n	3c24 <uart0_status_isr+0x90>
    3c08:	ldr	r3, [pc, #108]	; (3c78 <uart0_status_isr+0xe4>)
    3c0a:	ldrb	r3, [r3, #4]
    3c0c:	lsls	r3, r3, #25
    3c0e:	bpl.n	3c24 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3c10:	ldr	r3, [pc, #120]	; (3c8c <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3c12:	ldr	r1, [pc, #124]	; (3c90 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3c14:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3c16:	movs	r2, #0
    3c18:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3c1a:	cbz	r3, 3c1e <uart0_status_isr+0x8a>
    3c1c:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3c1e:	ldr	r3, [pc, #88]	; (3c78 <uart0_status_isr+0xe4>)
    3c20:	movs	r2, #60	; 0x3c
    3c22:	strb	r2, [r3, #3]
	}
}
    3c24:	pop	{r4, r5, r6, r7}
    3c26:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3c28:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    3c2a:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3c2c:	strb	r2, [r3, #17]
			__enable_irq();
    3c2e:	cpsie	i
    3c30:	b.n	3bfa <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3c32:	ldrb	r3, [r1, #4]
    3c34:	lsls	r4, r3, #24
    3c36:	bpl.n	3c04 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3c38:	ldr	r3, [pc, #88]	; (3c94 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    3c3a:	ldr	r6, [pc, #92]	; (3c98 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3c3c:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3c3e:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3c40:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3c42:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3c44:	cmp	r4, r3
    3c46:	beq.n	3c66 <uart0_status_isr+0xd2>
    3c48:	ldr	r5, [pc, #80]	; (3c9c <uart0_status_isr+0x108>)
    3c4a:	b.n	3c50 <uart0_status_isr+0xbc>
    3c4c:	cmp	r3, r4
    3c4e:	beq.n	3c66 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3c50:	adds	r3, #1
    3c52:	cmp	r3, #64	; 0x40
    3c54:	it	cs
    3c56:	movcs	r3, #0
			avail = UART0_S1;
    3c58:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3c5a:	ldrb	r0, [r5, r3]
    3c5c:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3c5e:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3c60:	ldrb	r0, [r1, #20]
    3c62:	cmp	r0, #7
    3c64:	bls.n	3c4c <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    3c66:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3c68:	ldr	r1, [pc, #12]	; (3c78 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    3c6a:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3c6c:	ldrb	r3, [r1, #4]
    3c6e:	lsls	r0, r3, #24
    3c70:	itt	mi
    3c72:	movmi	r3, #124	; 0x7c
    3c74:	strbmi	r3, [r1, #3]
    3c76:	b.n	3c04 <uart0_status_isr+0x70>
    3c78:	.word	0x4006a000
    3c7c:	.word	0x1fff1b54
    3c80:	.word	0x1fff1b55
    3c84:	.word	0x1fff1b98
    3c88:	.word	0x1fff1b50
    3c8c:	.word	0x1fff1bdc
    3c90:	.word	0x1fff1bd8
    3c94:	.word	0x1fff1be0
    3c98:	.word	0x1fff1bd9
    3c9c:	.word	0x1fff1b58

00003ca0 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ca0:	ldr	r2, [pc, #20]	; (3cb8 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    3ca2:	ldr	r3, [pc, #24]	; (3cbc <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ca4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3ca6:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ca8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3caa:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3cac:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    3cae:	it	cc
    3cb0:	addcc	r0, #64	; 0x40
    3cb2:	subs	r0, r0, r3
}
    3cb4:	bx	lr
    3cb6:	nop
    3cb8:	.word	0x1fff1be8
    3cbc:	.word	0x1fff1be9

00003cc0 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    3cc0:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    3cc2:	ldr	r3, [pc, #176]	; (3d74 <lpuart0_status_isr+0xb4>)
    3cc4:	ldr	r2, [r3, #4]
    3cc6:	lsls	r4, r2, #10
    3cc8:	bpl.n	3d0a <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3cca:	ldr	r0, [pc, #172]	; (3d78 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    3ccc:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    3cce:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cd0:	ldr	r1, [pc, #168]	; (3d7c <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3cd2:	adds	r3, #1
    3cd4:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cd6:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3cd8:	it	gt
    3cda:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cdc:	cmp	r3, r1
    3cde:	beq.n	3cea <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3ce0:	ldr	r4, [pc, #156]	; (3d80 <lpuart0_status_isr+0xc0>)
    3ce2:	uxtb	r2, r2
			rx_buffer_head = head;
    3ce4:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3ce6:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3ce8:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3cea:	ldr	r2, [pc, #152]	; (3d84 <lpuart0_status_isr+0xc4>)
    3cec:	ldr	r1, [r2, #0]
    3cee:	cbz	r1, 3d0a <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3cf0:	ldr	r2, [pc, #148]	; (3d88 <lpuart0_status_isr+0xc8>)
    3cf2:	ldrb	r2, [r2, #0]
    3cf4:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3cf6:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3cf8:	itet	cc
    3cfa:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3cfe:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3d00:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3d02:	cmp	r3, #39	; 0x27
    3d04:	itt	gt
    3d06:	movgt	r3, #1
    3d08:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    3d0a:	ldr	r2, [pc, #104]	; (3d74 <lpuart0_status_isr+0xb4>)
    3d0c:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    3d0e:	lsls	r0, r3, #8
    3d10:	bpl.n	3d18 <lpuart0_status_isr+0x58>
    3d12:	ldr	r2, [r2, #4]
    3d14:	lsls	r1, r2, #8
    3d16:	bmi.n	3d3c <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    3d18:	lsls	r2, r3, #9
    3d1a:	bpl.n	3d38 <lpuart0_status_isr+0x78>
    3d1c:	ldr	r3, [pc, #84]	; (3d74 <lpuart0_status_isr+0xb4>)
    3d1e:	ldr	r3, [r3, #4]
    3d20:	lsls	r3, r3, #9
    3d22:	bpl.n	3d38 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3d24:	ldr	r3, [pc, #100]	; (3d8c <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3d26:	ldr	r1, [pc, #104]	; (3d90 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    3d28:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3d2a:	movs	r2, #0
    3d2c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3d2e:	cbz	r3, 3d32 <lpuart0_status_isr+0x72>
    3d30:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3d32:	ldr	r3, [pc, #96]	; (3d94 <lpuart0_status_isr+0xd4>)
    3d34:	movs	r2, #0
    3d36:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    3d38:	pop	{r4, r5}
    3d3a:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3d3c:	ldr	r2, [pc, #88]	; (3d98 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    3d3e:	ldr	r1, [pc, #72]	; (3d88 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3d40:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3d42:	ldrb	r2, [r1, #0]
    3d44:	uxtb	r2, r2
		if (head == tail) {
    3d46:	cmp	r0, r2
    3d48:	beq.n	3d66 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    3d4a:	adds	r2, #1
    3d4c:	cmp	r2, #39	; 0x27
    3d4e:	itt	hi
    3d50:	movhi	r0, #0
    3d52:	movhi	r2, r0
			n = tx_buffer[tail];
    3d54:	ldr	r5, [pc, #68]	; (3d9c <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3d56:	ldr	r4, [pc, #28]	; (3d74 <lpuart0_status_isr+0xb4>)
    3d58:	it	ls
    3d5a:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3d5c:	ldrb	r2, [r5, r2]
    3d5e:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3d60:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3d62:	strb	r0, [r1, #0]
    3d64:	b.n	3d18 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3d66:	ldr	r0, [pc, #56]	; (3da0 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3d68:	ldr	r2, [pc, #40]	; (3d94 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3d6a:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3d6c:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3d6e:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3d70:	str	r1, [r2, #0]
    3d72:	b.n	3d18 <lpuart0_status_isr+0x58>
    3d74:	.word	0x400c4000
    3d78:	.word	0x1fff1be8
    3d7c:	.word	0x1fff1be9
    3d80:	.word	0x1fff1c14
    3d84:	.word	0x1fff1be4
    3d88:	.word	0x1fff1c55
    3d8c:	.word	0x1fff1c58
    3d90:	.word	0x1fff1c54
    3d94:	.word	0x43880158
    3d98:	.word	0x1fff1c5c
    3d9c:	.word	0x1fff1bec
    3da0:	.word	0x4388015c

00003da4 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3da4:	push	{r4, lr}
    3da6:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3da8:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    3daa:	bl	3b0c <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3dae:	ldr	r2, [pc, #96]	; (3e10 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3db0:	ldr	r3, [pc, #96]	; (3e14 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3db2:	ldr	r1, [pc, #100]	; (3e18 <usb_init_serialnumber+0x74>)
    3db4:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3db6:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3db8:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3dba:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3dbc:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3dbe:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3dc0:	ldrb	r3, [r2, #0]
    3dc2:	lsls	r3, r3, #24
    3dc4:	bpl.n	3dc0 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    3dc6:	ldr	r3, [pc, #84]	; (3e1c <usb_init_serialnumber+0x78>)
    3dc8:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    3dca:	bl	3b40 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    3dce:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3dd0:	ldr	r3, [pc, #76]	; (3e20 <usb_init_serialnumber+0x7c>)
    3dd2:	cmp	r4, r3
    3dd4:	itt	ls
    3dd6:	addls.w	r4, r4, r4, lsl #2
    3dda:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    3ddc:	mov	r0, r4
    3dde:	ldr	r4, [pc, #68]	; (3e24 <usb_init_serialnumber+0x80>)
    3de0:	add	r1, sp, #4
    3de2:	movs	r2, #10
    3de4:	bl	3e28 <ultoa>
    3de8:	add	r1, sp, #4
    3dea:	mov	r0, r4
	for (i=0; i<10; i++) {
    3dec:	movs	r3, #0
		char c = buf[i];
    3dee:	ldrb.w	r2, [r1], #1
    3df2:	adds	r3, #1
		if (!c) break;
    3df4:	cbz	r2, 3e06 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3df6:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3df8:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3dfc:	bne.n	3dee <usb_init_serialnumber+0x4a>
    3dfe:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3e00:	strb	r3, [r4, #0]
}
    3e02:	add	sp, #16
    3e04:	pop	{r4, pc}
    3e06:	lsls	r3, r3, #1
    3e08:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3e0a:	strb	r3, [r4, #0]
}
    3e0c:	add	sp, #16
    3e0e:	pop	{r4, pc}
    3e10:	.word	0x40020004
    3e14:	.word	0x40020000
    3e18:	.word	0x41070000
    3e1c:	.word	0x4002000c
    3e20:	.word	0x0098967f
    3e24:	.word	0x1fff0d64

00003e28 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3e28:	push	{r4, r5, r6, r7}
    3e2a:	subs	r5, r1, #1
    3e2c:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3e2e:	movs	r4, #0
    3e30:	b.n	3e34 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3e32:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3e34:	udiv	r3, r0, r2
    3e38:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3e3c:	cmp	r0, #9
    3e3e:	add.w	r7, r0, #48	; 0x30
    3e42:	itet	hi
    3e44:	addhi	r0, #55	; 0x37
    3e46:	uxtbls	r0, r7
    3e48:	uxtbhi	r0, r0
    3e4a:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3e4e:	mov	r0, r3
    3e50:	cmp	r3, #0
    3e52:	bne.n	3e32 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3e54:	adds	r2, r1, r4
    3e56:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3e58:	cbz	r4, 3e6e <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    3e5a:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3e5c:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3e60:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3e62:	adds	r3, #1
    3e64:	subs	r0, r4, r3
    3e66:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3e68:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3e6c:	blt.n	3e5a <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3e6e:	mov	r0, r1
    3e70:	pop	{r4, r5, r6, r7}
    3e72:	bx	lr

00003e74 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3e74:	ldr	r2, [pc, #20]	; (3e8c <serial3_available+0x18>)
	tail = rx_buffer_tail;
    3e76:	ldr	r3, [pc, #24]	; (3e90 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3e78:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3e7a:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3e7c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3e7e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3e80:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3e82:	it	cc
    3e84:	addcc	r0, #64	; 0x40
    3e86:	subs	r0, r0, r3
}
    3e88:	bx	lr
    3e8a:	nop
    3e8c:	.word	0x1fff1c64
    3e90:	.word	0x1fff1c65

00003e94 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3e94:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    3e96:	ldr	r3, [pc, #172]	; (3f44 <uart2_status_isr+0xb0>)
    3e98:	ldrb	r2, [r3, #4]
    3e9a:	lsls	r4, r2, #26
    3e9c:	bpl.n	3ede <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3e9e:	ldr	r0, [pc, #168]	; (3f48 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3ea0:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3ea2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ea4:	ldr	r1, [pc, #164]	; (3f4c <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3ea6:	adds	r3, #1
    3ea8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3eaa:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3eac:	it	gt
    3eae:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3eb0:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3eb2:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3eb4:	beq.n	3ebe <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    3eb6:	ldr	r4, [pc, #152]	; (3f50 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    3eb8:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3eba:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3ebc:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3ebe:	ldr	r2, [pc, #148]	; (3f54 <uart2_status_isr+0xc0>)
    3ec0:	ldr	r1, [r2, #0]
    3ec2:	cbz	r1, 3ede <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3ec4:	ldr	r2, [pc, #144]	; (3f58 <uart2_status_isr+0xc4>)
    3ec6:	ldrb	r2, [r2, #0]
    3ec8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3eca:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3ecc:	itet	cc
    3ece:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3ed2:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3ed4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3ed6:	cmp	r3, #39	; 0x27
    3ed8:	itt	gt
    3eda:	movgt	r3, #1
    3edc:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    3ede:	ldr	r2, [pc, #100]	; (3f44 <uart2_status_isr+0xb0>)
    3ee0:	ldrb	r3, [r2, #3]
    3ee2:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3ee4:	lsls	r0, r3, #24
    3ee6:	bmi.n	3f0c <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    3ee8:	lsls	r2, r3, #25
    3eea:	bpl.n	3f08 <uart2_status_isr+0x74>
    3eec:	ldr	r3, [pc, #84]	; (3f44 <uart2_status_isr+0xb0>)
    3eee:	ldrb	r3, [r3, #4]
    3ef0:	lsls	r3, r3, #25
    3ef2:	bpl.n	3f08 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3ef4:	ldr	r3, [pc, #100]	; (3f5c <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3ef6:	ldr	r1, [pc, #104]	; (3f60 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3ef8:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3efa:	movs	r2, #0
    3efc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3efe:	cbz	r3, 3f02 <uart2_status_isr+0x6e>
    3f00:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3f02:	ldr	r3, [pc, #64]	; (3f44 <uart2_status_isr+0xb0>)
    3f04:	movs	r2, #44	; 0x2c
    3f06:	strb	r2, [r3, #3]
	}
}
    3f08:	pop	{r4, r5}
    3f0a:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3f0c:	ldrb	r1, [r2, #4]
    3f0e:	lsls	r1, r1, #24
    3f10:	bpl.n	3ee8 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    3f12:	ldr	r1, [pc, #80]	; (3f64 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3f14:	ldr	r0, [pc, #64]	; (3f58 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3f16:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3f18:	ldrb	r1, [r0, #0]
    3f1a:	uxtb	r1, r1
		if (head == tail) {
    3f1c:	cmp	r4, r1
    3f1e:	beq.n	3f3c <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3f20:	adds	r2, r1, #1
    3f22:	cmp	r2, #39	; 0x27
    3f24:	itt	hi
    3f26:	movhi	r1, #0
    3f28:	movhi	r2, r1
			n = tx_buffer[tail];
    3f2a:	ldr	r5, [pc, #60]	; (3f68 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3f2c:	ldr	r4, [pc, #20]	; (3f44 <uart2_status_isr+0xb0>)
    3f2e:	it	ls
    3f30:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3f32:	ldrb	r2, [r5, r2]
    3f34:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3f36:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3f38:	strb	r1, [r0, #0]
    3f3a:	b.n	3ee8 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    3f3c:	movs	r1, #108	; 0x6c
    3f3e:	strb	r1, [r2, #3]
    3f40:	b.n	3ee8 <uart2_status_isr+0x54>
    3f42:	nop
    3f44:	.word	0x4006c000
    3f48:	.word	0x1fff1c64
    3f4c:	.word	0x1fff1c65
    3f50:	.word	0x1fff1c90
    3f54:	.word	0x1fff1c60
    3f58:	.word	0x1fff1cd1
    3f5c:	.word	0x1fff1cd4
    3f60:	.word	0x1fff1cd0
    3f64:	.word	0x1fff1cd8
    3f68:	.word	0x1fff1c68

00003f6c <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    3f6c:	bx	lr
    3f6e:	nop

00003f70 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    3f70:	bx	lr
    3f72:	nop

00003f74 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    3f74:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3f76:	mrs	r2, PRIMASK
		__disable_irq();
    3f7a:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3f7c:	ldrb	r3, [r0, #29]
    3f7e:	cbnz	r3, 3f8e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3f80:	ldrb	r1, [r0, #28]
    3f82:	cmp	r1, #1
    3f84:	beq.n	3f98 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    3f86:	cmp	r1, #3
    3f88:	beq.n	3fac <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    3f8a:	movs	r3, #1
    3f8c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3f8e:	cbnz	r2, 3f92 <EventResponder::triggerEventNotImmediate()+0x1e>
    3f90:	cpsie	i
	}
	enableInterrupts(irq);
}
    3f92:	ldr.w	r4, [sp], #4
    3f96:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3f98:	ldr	r4, [pc, #68]	; (3fe0 <EventResponder::triggerEventNotImmediate()+0x6c>)
    3f9a:	ldr	r1, [r4, #0]
    3f9c:	cbz	r1, 3fc8 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3f9e:	ldr	r1, [pc, #68]	; (3fe4 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3fa0:	str	r3, [r0, #20]
				_prev = lastYield;
    3fa2:	ldr	r3, [r1, #0]
    3fa4:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    3fa6:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    3fa8:	str	r0, [r3, #20]
    3faa:	b.n	3f8a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3fac:	ldr	r4, [pc, #56]	; (3fe8 <EventResponder::triggerEventNotImmediate()+0x74>)
    3fae:	ldr	r1, [r4, #0]
    3fb0:	cbz	r1, 3fd4 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3fb2:	ldr	r1, [pc, #56]	; (3fec <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3fb4:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    3fb6:	ldr	r3, [r1, #0]
    3fb8:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    3fba:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    3fbc:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3fbe:	ldr	r3, [pc, #48]	; (3ff0 <EventResponder::triggerEventNotImmediate()+0x7c>)
    3fc0:	mov.w	r1, #268435456	; 0x10000000
    3fc4:	str	r1, [r3, #0]
    3fc6:	b.n	3f8a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3fc8:	ldr	r3, [pc, #24]	; (3fe4 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    3fca:	str	r1, [r0, #20]
				_prev = nullptr;
    3fcc:	str	r1, [r0, #24]
				firstYield = this;
    3fce:	str	r0, [r4, #0]
				lastYield = this;
    3fd0:	str	r0, [r3, #0]
    3fd2:	b.n	3f8a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3fd4:	ldr	r3, [pc, #20]	; (3fec <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    3fd6:	str	r1, [r0, #20]
				_prev = nullptr;
    3fd8:	str	r1, [r0, #24]
				firstInterrupt = this;
    3fda:	str	r0, [r4, #0]
				lastInterrupt = this;
    3fdc:	str	r0, [r3, #0]
    3fde:	b.n	3fbe <EventResponder::triggerEventNotImmediate()+0x4a>
    3fe0:	.word	0x1fff1cec
    3fe4:	.word	0x1fff1ce8
    3fe8:	.word	0x1fff1cdc
    3fec:	.word	0x1fff1ce0
    3ff0:	.word	0xe000ed04

00003ff4 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    3ff4:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3ff6:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3ff8:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3ffa:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3ffc:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3ffe:	beq.n	4008 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    4000:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4004:	b.w	3f74 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4008:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    400a:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    400e:	bx	r3

00004010 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    4010:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4012:	mrs	r2, PRIMASK
		__disable_irq();
    4016:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4018:	ldr	r4, [pc, #48]	; (404c <EventResponder::runFromInterrupt()+0x3c>)
    401a:	ldr	r0, [r4, #0]
		if (first) {
    401c:	cbz	r0, 4040 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    401e:	ldr	r6, [pc, #48]	; (4050 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4020:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    4022:	ldr	r3, [r0, #20]
    4024:	str	r3, [r4, #0]
			if (firstInterrupt) {
    4026:	cbz	r3, 4046 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4028:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    402a:	cbnz	r2, 402e <EventResponder::runFromInterrupt()+0x1e>
    402c:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    402e:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4030:	ldr	r3, [r0, #8]
    4032:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4034:	mrs	r2, PRIMASK
		__disable_irq();
    4038:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    403a:	ldr	r0, [r4, #0]
		if (first) {
    403c:	cmp	r0, #0
    403e:	bne.n	4022 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4040:	cbnz	r2, 4044 <EventResponder::runFromInterrupt()+0x34>
    4042:	cpsie	i
    4044:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4046:	str	r3, [r6, #0]
    4048:	b.n	402a <EventResponder::runFromInterrupt()+0x1a>
    404a:	nop
    404c:	.word	0x1fff1cdc
    4050:	.word	0x1fff1ce0

00004054 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    4054:	b.w	4010 <EventResponder::runFromInterrupt()>

00004058 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    4058:	ldr	r2, [pc, #96]	; (40bc <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    405a:	push	{r4, r5}
	if (listActive == nullptr) {
    405c:	ldr	r4, [r2, #0]
    405e:	cmp	r4, #0
    4060:	beq.n	40b2 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    4062:	ldr	r3, [r0, #0]
    4064:	ldr	r1, [r4, #0]
    4066:	cmp	r3, r1
    4068:	bcs.n	4088 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    406a:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    406c:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    406e:	str	r4, [r0, #8]
		_prev = nullptr;
    4070:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4072:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4074:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    4076:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4078:	movs	r3, #2
    407a:	strb	r3, [r0, #20]
}
    407c:	pop	{r4, r5}
    407e:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4080:	ldr	r1, [r2, #0]
    4082:	cmp	r3, r1
    4084:	mov	r4, r2
    4086:	bcc.n	409a <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4088:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    408a:	subs	r3, r3, r1
    408c:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    408e:	cmp	r2, #0
    4090:	bne.n	4080 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    4092:	str	r2, [r0, #8]
		_prev = timer;
    4094:	str	r4, [r0, #12]
		timer->_next = this;
    4096:	str	r0, [r4, #8]
    4098:	b.n	4078 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    409a:	ldr	r2, [r2, #12]
    409c:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    409e:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    40a0:	str	r0, [r4, #12]
				_prev->_next = this;
    40a2:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    40a4:	subs	r3, r1, r3
				_state = TimerActive;
    40a6:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    40a8:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    40aa:	str	r3, [r4, #0]
				_state = TimerActive;
    40ac:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    40ae:	pop	{r4, r5}
    40b0:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    40b2:	str	r4, [r0, #8]
		_prev = nullptr;
    40b4:	str	r4, [r0, #12]
		listActive = this;
    40b6:	str	r0, [r2, #0]
    40b8:	b.n	4078 <MillisTimer::addToActiveList()+0x20>
    40ba:	nop
    40bc:	.word	0x1fff1ce4

000040c0 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    40c0:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    40c2:	ldr	r6, [pc, #136]	; (414c <MillisTimer::runFromTimer()+0x8c>)
    40c4:	ldr	r4, [r6, #0]
	while (timer) {
    40c6:	cbz	r4, 4114 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    40c8:	ldr	r3, [r4, #0]
    40ca:	cmp	r3, #0
    40cc:	bne.n	4144 <MillisTimer::runFromTimer()+0x84>
    40ce:	ldr	r7, [pc, #128]	; (4150 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    40d0:	mov	r5, r3
    40d2:	b.n	40de <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    40d4:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    40d6:	cbz	r4, 4114 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    40d8:	ldr	r3, [r4, #0]
    40da:	cmp	r3, #0
    40dc:	bne.n	4144 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    40de:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    40e0:	cbz	r3, 40e4 <MillisTimer::runFromTimer()+0x24>
    40e2:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    40e4:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    40e6:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    40e8:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    40ea:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    40ec:	ldr	r3, [r3, #0]
    40ee:	cmp	r3, r7
    40f0:	bne.n	4136 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    40f2:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    40f4:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    40f6:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    40f8:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    40fa:	beq.n	413e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    40fc:	bl	3f74 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    4100:	ldr	r3, [r4, #4]
    4102:	cmp	r3, #0
    4104:	beq.n	40d4 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    4106:	str	r3, [r4, #0]
				timer->addToActiveList();
    4108:	mov	r0, r4
    410a:	bl	4058 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    410e:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4110:	cmp	r4, #0
    4112:	bne.n	40d8 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4114:	mrs	r3, PRIMASK
		__disable_irq();
    4118:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    411a:	ldr	r2, [pc, #56]	; (4154 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    411c:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    411e:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4120:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    4122:	cbnz	r3, 4126 <MillisTimer::runFromTimer()+0x66>
    4124:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    4126:	cbz	r0, 4134 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4128:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    412a:	bl	4058 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    412e:	mov	r0, r4
    4130:	cmp	r0, #0
    4132:	bne.n	4128 <MillisTimer::runFromTimer()+0x68>
    4134:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4136:	mov	r2, r4
    4138:	movs	r1, #0
    413a:	blx	r3
    413c:	b.n	4100 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    413e:	ldr	r3, [r0, #8]
    4140:	blx	r3
    4142:	b.n	4100 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    4144:	subs	r3, #1
    4146:	str	r3, [r4, #0]
			break;
    4148:	b.n	4114 <MillisTimer::runFromTimer()+0x54>
    414a:	nop
    414c:	.word	0x1fff1ce4
    4150:	.word	0x00003ff5
    4154:	.word	0x1fff1cf4

00004158 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    4158:	ldr	r2, [pc, #8]	; (4164 <systick_isr+0xc>)
    415a:	ldr	r3, [r2, #0]
    415c:	adds	r3, #1
    415e:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4160:	b.w	40c0 <MillisTimer::runFromTimer()>
    4164:	.word	0x1fff187c

00004168 <__errno>:
    4168:	ldr	r3, [pc, #4]	; (4170 <__errno+0x8>)
    416a:	ldr	r0, [r3, #0]
    416c:	bx	lr
    416e:	nop
    4170:	.word	0x1fff11a8

00004174 <__libc_init_array>:
    4174:	push	{r4, r5, r6, lr}
    4176:	ldr	r6, [pc, #60]	; (41b4 <__libc_init_array+0x40>)
    4178:	ldr	r5, [pc, #60]	; (41b8 <__libc_init_array+0x44>)
    417a:	subs	r6, r6, r5
    417c:	asrs	r6, r6, #2
    417e:	it	ne
    4180:	movne	r4, #0
    4182:	beq.n	4190 <__libc_init_array+0x1c>
    4184:	adds	r4, #1
    4186:	ldr.w	r3, [r5], #4
    418a:	blx	r3
    418c:	cmp	r6, r4
    418e:	bne.n	4184 <__libc_init_array+0x10>
    4190:	ldr	r6, [pc, #40]	; (41bc <__libc_init_array+0x48>)
    4192:	ldr	r5, [pc, #44]	; (41c0 <__libc_init_array+0x4c>)
    4194:	subs	r6, r6, r5
    4196:	bl	4de0 <_init>
    419a:	asrs	r6, r6, #2
    419c:	it	ne
    419e:	movne	r4, #0
    41a0:	beq.n	41b0 <__libc_init_array+0x3c>
    41a2:	adds	r4, #1
    41a4:	ldr.w	r3, [r5], #4
    41a8:	blx	r3
    41aa:	cmp	r6, r4
    41ac:	bne.n	41a2 <__libc_init_array+0x2e>
    41ae:	pop	{r4, r5, r6, pc}
    41b0:	pop	{r4, r5, r6, pc}
    41b2:	nop
    41b4:	.word	0x00004dec
    41b8:	.word	0x00004dec
    41bc:	.word	0x00004df8
    41c0:	.word	0x00004dec

000041c4 <malloc>:
    41c4:	ldr	r3, [pc, #8]	; (41d0 <malloc+0xc>)
    41c6:	mov	r1, r0
    41c8:	ldr	r0, [r3, #0]
    41ca:	b.w	41d4 <_malloc_r>
    41ce:	nop
    41d0:	.word	0x1fff11a8

000041d4 <_malloc_r>:
    41d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41d8:	add.w	r5, r1, #11
    41dc:	cmp	r5, #22
    41de:	sub	sp, #12
    41e0:	mov	r6, r0
    41e2:	bls.w	4324 <_malloc_r+0x150>
    41e6:	bics.w	r5, r5, #7
    41ea:	bmi.w	436c <_malloc_r+0x198>
    41ee:	cmp	r1, r5
    41f0:	bhi.w	436c <_malloc_r+0x198>
    41f4:	bl	4744 <__malloc_lock>
    41f8:	cmp.w	r5, #504	; 0x1f8
    41fc:	bcc.w	4738 <_malloc_r+0x564>
    4200:	lsrs	r3, r5, #9
    4202:	beq.w	437a <_malloc_r+0x1a6>
    4206:	cmp	r3, #4
    4208:	bhi.w	4512 <_malloc_r+0x33e>
    420c:	lsrs	r0, r5, #6
    420e:	add.w	lr, r0, #57	; 0x39
    4212:	mov.w	r3, lr, lsl #1
    4216:	adds	r0, #56	; 0x38
    4218:	ldr	r7, [pc, #784]	; (452c <_malloc_r+0x358>)
    421a:	add.w	r3, r7, r3, lsl #2
    421e:	sub.w	r1, r3, #8
    4222:	ldr	r4, [r3, #4]
    4224:	cmp	r1, r4
    4226:	bne.n	4238 <_malloc_r+0x64>
    4228:	b.n	4384 <_malloc_r+0x1b0>
    422a:	cmp	r2, #0
    422c:	bge.w	4388 <_malloc_r+0x1b4>
    4230:	ldr	r4, [r4, #12]
    4232:	cmp	r1, r4
    4234:	beq.w	4384 <_malloc_r+0x1b0>
    4238:	ldr	r3, [r4, #4]
    423a:	bic.w	r3, r3, #3
    423e:	subs	r2, r3, r5
    4240:	cmp	r2, #15
    4242:	ble.n	422a <_malloc_r+0x56>
    4244:	ldr	r1, [pc, #740]	; (452c <_malloc_r+0x358>)
    4246:	ldr	r4, [r7, #16]
    4248:	add.w	lr, r1, #8
    424c:	cmp	r4, lr
    424e:	beq.w	45b8 <_malloc_r+0x3e4>
    4252:	ldr	r3, [r4, #4]
    4254:	bic.w	r3, r3, #3
    4258:	subs	r2, r3, r5
    425a:	cmp	r2, #15
    425c:	bgt.w	4592 <_malloc_r+0x3be>
    4260:	cmp	r2, #0
    4262:	str.w	lr, [r1, #20]
    4266:	str.w	lr, [r1, #16]
    426a:	bge.w	43aa <_malloc_r+0x1d6>
    426e:	cmp.w	r3, #512	; 0x200
    4272:	bcs.w	4544 <_malloc_r+0x370>
    4276:	lsrs	r3, r3, #3
    4278:	add.w	ip, r3, #1
    427c:	movs	r2, #1
    427e:	asrs	r3, r3, #2
    4280:	lsl.w	r3, r2, r3
    4284:	ldr	r2, [r1, #4]
    4286:	ldr.w	r8, [r1, ip, lsl #3]
    428a:	str.w	r8, [r4, #8]
    428e:	add.w	r9, r1, ip, lsl #3
    4292:	orrs	r2, r3
    4294:	sub.w	r3, r9, #8
    4298:	str	r3, [r4, #12]
    429a:	str	r2, [r1, #4]
    429c:	str.w	r4, [r1, ip, lsl #3]
    42a0:	str.w	r4, [r8, #12]
    42a4:	asrs	r3, r0, #2
    42a6:	movs	r4, #1
    42a8:	lsls	r4, r3
    42aa:	cmp	r4, r2
    42ac:	bhi.w	43c4 <_malloc_r+0x1f0>
    42b0:	tst	r4, r2
    42b2:	bne.n	42c2 <_malloc_r+0xee>
    42b4:	bic.w	r0, r0, #3
    42b8:	lsls	r4, r4, #1
    42ba:	tst	r4, r2
    42bc:	add.w	r0, r0, #4
    42c0:	beq.n	42b8 <_malloc_r+0xe4>
    42c2:	add.w	r9, r7, r0, lsl #3
    42c6:	mov	ip, r9
    42c8:	mov	r8, r0
    42ca:	ldr.w	r1, [ip, #12]
    42ce:	cmp	ip, r1
    42d0:	bne.n	42e2 <_malloc_r+0x10e>
    42d2:	b.n	45bc <_malloc_r+0x3e8>
    42d4:	cmp	r2, #0
    42d6:	bge.w	45dc <_malloc_r+0x408>
    42da:	ldr	r1, [r1, #12]
    42dc:	cmp	ip, r1
    42de:	beq.w	45bc <_malloc_r+0x3e8>
    42e2:	ldr	r3, [r1, #4]
    42e4:	bic.w	r3, r3, #3
    42e8:	subs	r2, r3, r5
    42ea:	cmp	r2, #15
    42ec:	ble.n	42d4 <_malloc_r+0x100>
    42ee:	mov	r4, r1
    42f0:	ldr.w	ip, [r1, #12]
    42f4:	ldr.w	r8, [r4, #8]!
    42f8:	adds	r3, r1, r5
    42fa:	orr.w	r5, r5, #1
    42fe:	str	r5, [r1, #4]
    4300:	orr.w	r1, r2, #1
    4304:	str.w	ip, [r8, #12]
    4308:	mov	r0, r6
    430a:	str.w	r8, [ip, #8]
    430e:	str	r3, [r7, #20]
    4310:	str	r3, [r7, #16]
    4312:	str.w	lr, [r3, #12]
    4316:	str.w	lr, [r3, #8]
    431a:	str	r1, [r3, #4]
    431c:	str	r2, [r3, r2]
    431e:	bl	4748 <__malloc_unlock>
    4322:	b.n	4364 <_malloc_r+0x190>
    4324:	cmp	r1, #16
    4326:	bhi.n	436c <_malloc_r+0x198>
    4328:	bl	4744 <__malloc_lock>
    432c:	movs	r5, #16
    432e:	movs	r3, #6
    4330:	movs	r0, #2
    4332:	ldr	r7, [pc, #504]	; (452c <_malloc_r+0x358>)
    4334:	add.w	r3, r7, r3, lsl #2
    4338:	sub.w	r2, r3, #8
    433c:	ldr	r4, [r3, #4]
    433e:	cmp	r4, r2
    4340:	beq.w	45ce <_malloc_r+0x3fa>
    4344:	ldr	r3, [r4, #4]
    4346:	ldr	r1, [r4, #12]
    4348:	ldr	r5, [r4, #8]
    434a:	bic.w	r3, r3, #3
    434e:	add	r3, r4
    4350:	mov	r0, r6
    4352:	ldr	r2, [r3, #4]
    4354:	str	r1, [r5, #12]
    4356:	orr.w	r2, r2, #1
    435a:	str	r5, [r1, #8]
    435c:	str	r2, [r3, #4]
    435e:	bl	4748 <__malloc_unlock>
    4362:	adds	r4, #8
    4364:	mov	r0, r4
    4366:	add	sp, #12
    4368:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    436c:	movs	r4, #0
    436e:	movs	r3, #12
    4370:	mov	r0, r4
    4372:	str	r3, [r6, #0]
    4374:	add	sp, #12
    4376:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    437a:	movs	r3, #128	; 0x80
    437c:	mov.w	lr, #64	; 0x40
    4380:	movs	r0, #63	; 0x3f
    4382:	b.n	4218 <_malloc_r+0x44>
    4384:	mov	r0, lr
    4386:	b.n	4244 <_malloc_r+0x70>
    4388:	add	r3, r4
    438a:	ldr	r1, [r4, #12]
    438c:	ldr	r2, [r3, #4]
    438e:	ldr	r5, [r4, #8]
    4390:	orr.w	r2, r2, #1
    4394:	str	r1, [r5, #12]
    4396:	mov	r0, r6
    4398:	str	r5, [r1, #8]
    439a:	str	r2, [r3, #4]
    439c:	bl	4748 <__malloc_unlock>
    43a0:	adds	r4, #8
    43a2:	mov	r0, r4
    43a4:	add	sp, #12
    43a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43aa:	add	r3, r4
    43ac:	mov	r0, r6
    43ae:	ldr	r2, [r3, #4]
    43b0:	orr.w	r2, r2, #1
    43b4:	str	r2, [r3, #4]
    43b6:	bl	4748 <__malloc_unlock>
    43ba:	adds	r4, #8
    43bc:	mov	r0, r4
    43be:	add	sp, #12
    43c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43c4:	ldr	r4, [r7, #8]
    43c6:	ldr	r3, [r4, #4]
    43c8:	bic.w	r8, r3, #3
    43cc:	cmp	r8, r5
    43ce:	bcc.n	43da <_malloc_r+0x206>
    43d0:	rsb	r3, r5, r8
    43d4:	cmp	r3, #15
    43d6:	bgt.w	44f2 <_malloc_r+0x31e>
    43da:	ldr	r3, [pc, #340]	; (4530 <_malloc_r+0x35c>)
    43dc:	ldr.w	r9, [pc, #352]	; 4540 <_malloc_r+0x36c>
    43e0:	ldr	r2, [r3, #0]
    43e2:	ldr.w	r3, [r9]
    43e6:	adds	r3, #1
    43e8:	add	r2, r5
    43ea:	add.w	sl, r4, r8
    43ee:	beq.w	46b2 <_malloc_r+0x4de>
    43f2:	add.w	r2, r2, #4096	; 0x1000
    43f6:	adds	r2, #15
    43f8:	bic.w	r2, r2, #4080	; 0xff0
    43fc:	bic.w	r2, r2, #15
    4400:	mov	r1, r2
    4402:	mov	r0, r6
    4404:	str	r2, [sp, #4]
    4406:	bl	474c <_sbrk_r>
    440a:	cmp.w	r0, #4294967295
    440e:	mov	fp, r0
    4410:	ldr	r2, [sp, #4]
    4412:	beq.w	46c6 <_malloc_r+0x4f2>
    4416:	cmp	sl, r0
    4418:	bhi.w	4614 <_malloc_r+0x440>
    441c:	ldr	r3, [pc, #276]	; (4534 <_malloc_r+0x360>)
    441e:	ldr	r1, [r3, #0]
    4420:	cmp	sl, fp
    4422:	add	r1, r2
    4424:	str	r1, [r3, #0]
    4426:	beq.w	46d0 <_malloc_r+0x4fc>
    442a:	ldr.w	r0, [r9]
    442e:	ldr.w	lr, [pc, #272]	; 4540 <_malloc_r+0x36c>
    4432:	adds	r0, #1
    4434:	ittet	ne
    4436:	rsbne	sl, sl, fp
    443a:	addne	r1, sl
    443c:	streq.w	fp, [lr]
    4440:	strne	r1, [r3, #0]
    4442:	ands.w	r1, fp, #7
    4446:	beq.w	4678 <_malloc_r+0x4a4>
    444a:	rsb	r0, r1, #8
    444e:	rsb	r1, r1, #4096	; 0x1000
    4452:	add	fp, r0
    4454:	adds	r1, #8
    4456:	add	r2, fp
    4458:	ubfx	r2, r2, #0, #12
    445c:	rsb	r9, r2, r1
    4460:	mov	r1, r9
    4462:	mov	r0, r6
    4464:	str	r3, [sp, #4]
    4466:	bl	474c <_sbrk_r>
    446a:	adds	r3, r0, #1
    446c:	ldr	r3, [sp, #4]
    446e:	beq.w	46f0 <_malloc_r+0x51c>
    4472:	rsb	r2, fp, r0
    4476:	add	r2, r9
    4478:	orr.w	r2, r2, #1
    447c:	ldr	r1, [r3, #0]
    447e:	str.w	fp, [r7, #8]
    4482:	add	r1, r9
    4484:	cmp	r4, r7
    4486:	str.w	r2, [fp, #4]
    448a:	str	r1, [r3, #0]
    448c:	ldr.w	r9, [pc, #164]	; 4534 <_malloc_r+0x360>
    4490:	beq.n	44c0 <_malloc_r+0x2ec>
    4492:	cmp.w	r8, #15
    4496:	bls.w	4694 <_malloc_r+0x4c0>
    449a:	ldr	r2, [r4, #4]
    449c:	sub.w	r3, r8, #12
    44a0:	bic.w	r3, r3, #7
    44a4:	adds	r0, r4, r3
    44a6:	and.w	r2, r2, #1
    44aa:	mov.w	lr, #5
    44ae:	orrs	r2, r3
    44b0:	cmp	r3, #15
    44b2:	str	r2, [r4, #4]
    44b4:	str.w	lr, [r0, #4]
    44b8:	str.w	lr, [r0, #8]
    44bc:	bhi.w	46f8 <_malloc_r+0x524>
    44c0:	ldr	r3, [pc, #116]	; (4538 <_malloc_r+0x364>)
    44c2:	ldr	r4, [r7, #8]
    44c4:	ldr	r2, [r3, #0]
    44c6:	cmp	r1, r2
    44c8:	it	hi
    44ca:	strhi	r1, [r3, #0]
    44cc:	ldr	r3, [pc, #108]	; (453c <_malloc_r+0x368>)
    44ce:	ldr	r2, [r3, #0]
    44d0:	cmp	r1, r2
    44d2:	ldr	r2, [r4, #4]
    44d4:	it	hi
    44d6:	strhi	r1, [r3, #0]
    44d8:	bic.w	r2, r2, #3
    44dc:	cmp	r5, r2
    44de:	sub.w	r3, r2, r5
    44e2:	bhi.n	44e8 <_malloc_r+0x314>
    44e4:	cmp	r3, #15
    44e6:	bgt.n	44f2 <_malloc_r+0x31e>
    44e8:	mov	r0, r6
    44ea:	bl	4748 <__malloc_unlock>
    44ee:	movs	r4, #0
    44f0:	b.n	4364 <_malloc_r+0x190>
    44f2:	adds	r2, r4, r5
    44f4:	orr.w	r3, r3, #1
    44f8:	orr.w	r5, r5, #1
    44fc:	str	r5, [r4, #4]
    44fe:	mov	r0, r6
    4500:	str	r2, [r7, #8]
    4502:	str	r3, [r2, #4]
    4504:	bl	4748 <__malloc_unlock>
    4508:	adds	r4, #8
    450a:	mov	r0, r4
    450c:	add	sp, #12
    450e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4512:	cmp	r3, #20
    4514:	bls.n	45fa <_malloc_r+0x426>
    4516:	cmp	r3, #84	; 0x54
    4518:	bhi.w	4664 <_malloc_r+0x490>
    451c:	lsrs	r0, r5, #12
    451e:	add.w	lr, r0, #111	; 0x6f
    4522:	mov.w	r3, lr, lsl #1
    4526:	adds	r0, #110	; 0x6e
    4528:	b.n	4218 <_malloc_r+0x44>
    452a:	nop
    452c:	.word	0x1fff11ac
    4530:	.word	0x1fff1d00
    4534:	.word	0x1fff1d04
    4538:	.word	0x1fff1cfc
    453c:	.word	0x1fff1cf8
    4540:	.word	0x1fff15b8
    4544:	lsrs	r2, r3, #9
    4546:	cmp	r2, #4
    4548:	bls.n	4608 <_malloc_r+0x434>
    454a:	cmp	r2, #20
    454c:	bhi.w	46b6 <_malloc_r+0x4e2>
    4550:	add.w	r1, r2, #92	; 0x5c
    4554:	lsls	r1, r1, #1
    4556:	adds	r2, #91	; 0x5b
    4558:	add.w	ip, r7, r1, lsl #2
    455c:	ldr.w	r1, [r7, r1, lsl #2]
    4560:	ldr.w	r8, [pc, #476]	; 4740 <_malloc_r+0x56c>
    4564:	sub.w	ip, ip, #8
    4568:	cmp	ip, r1
    456a:	beq.w	467e <_malloc_r+0x4aa>
    456e:	ldr	r2, [r1, #4]
    4570:	bic.w	r2, r2, #3
    4574:	cmp	r3, r2
    4576:	bcs.n	457e <_malloc_r+0x3aa>
    4578:	ldr	r1, [r1, #8]
    457a:	cmp	ip, r1
    457c:	bne.n	456e <_malloc_r+0x39a>
    457e:	ldr.w	ip, [r1, #12]
    4582:	ldr	r2, [r7, #4]
    4584:	str.w	ip, [r4, #12]
    4588:	str	r1, [r4, #8]
    458a:	str.w	r4, [ip, #8]
    458e:	str	r4, [r1, #12]
    4590:	b.n	42a4 <_malloc_r+0xd0>
    4592:	adds	r3, r4, r5
    4594:	orr.w	r7, r2, #1
    4598:	orr.w	r5, r5, #1
    459c:	str	r5, [r4, #4]
    459e:	mov	r0, r6
    45a0:	str	r3, [r1, #20]
    45a2:	str	r3, [r1, #16]
    45a4:	str.w	lr, [r3, #12]
    45a8:	str.w	lr, [r3, #8]
    45ac:	str	r7, [r3, #4]
    45ae:	str	r2, [r3, r2]
    45b0:	adds	r4, #8
    45b2:	bl	4748 <__malloc_unlock>
    45b6:	b.n	4364 <_malloc_r+0x190>
    45b8:	ldr	r2, [r1, #4]
    45ba:	b.n	42a4 <_malloc_r+0xd0>
    45bc:	add.w	r8, r8, #1
    45c0:	tst.w	r8, #3
    45c4:	add.w	ip, ip, #8
    45c8:	bne.w	42ca <_malloc_r+0xf6>
    45cc:	b.n	4630 <_malloc_r+0x45c>
    45ce:	ldr	r4, [r3, #12]
    45d0:	cmp	r3, r4
    45d2:	it	eq
    45d4:	addeq	r0, #2
    45d6:	beq.w	4244 <_malloc_r+0x70>
    45da:	b.n	4344 <_malloc_r+0x170>
    45dc:	add	r3, r1
    45de:	mov	r4, r1
    45e0:	ldr	r2, [r3, #4]
    45e2:	ldr	r1, [r1, #12]
    45e4:	ldr.w	r5, [r4, #8]!
    45e8:	orr.w	r2, r2, #1
    45ec:	str	r2, [r3, #4]
    45ee:	mov	r0, r6
    45f0:	str	r1, [r5, #12]
    45f2:	str	r5, [r1, #8]
    45f4:	bl	4748 <__malloc_unlock>
    45f8:	b.n	4364 <_malloc_r+0x190>
    45fa:	add.w	lr, r3, #92	; 0x5c
    45fe:	add.w	r0, r3, #91	; 0x5b
    4602:	mov.w	r3, lr, lsl #1
    4606:	b.n	4218 <_malloc_r+0x44>
    4608:	lsrs	r2, r3, #6
    460a:	add.w	r1, r2, #57	; 0x39
    460e:	lsls	r1, r1, #1
    4610:	adds	r2, #56	; 0x38
    4612:	b.n	4558 <_malloc_r+0x384>
    4614:	cmp	r4, r7
    4616:	ldr	r3, [pc, #296]	; (4740 <_malloc_r+0x56c>)
    4618:	beq.w	441c <_malloc_r+0x248>
    461c:	ldr	r4, [r3, #8]
    461e:	ldr	r2, [r4, #4]
    4620:	bic.w	r2, r2, #3
    4624:	b.n	44dc <_malloc_r+0x308>
    4626:	ldr.w	r3, [r9], #-8
    462a:	cmp	r9, r3
    462c:	bne.w	4734 <_malloc_r+0x560>
    4630:	tst.w	r0, #3
    4634:	add.w	r0, r0, #4294967295
    4638:	bne.n	4626 <_malloc_r+0x452>
    463a:	ldr	r3, [r7, #4]
    463c:	bic.w	r3, r3, r4
    4640:	str	r3, [r7, #4]
    4642:	lsls	r4, r4, #1
    4644:	cmp	r4, r3
    4646:	bhi.w	43c4 <_malloc_r+0x1f0>
    464a:	cmp	r4, #0
    464c:	beq.w	43c4 <_malloc_r+0x1f0>
    4650:	tst	r4, r3
    4652:	mov	r0, r8
    4654:	bne.w	42c2 <_malloc_r+0xee>
    4658:	lsls	r4, r4, #1
    465a:	tst	r4, r3
    465c:	add.w	r0, r0, #4
    4660:	beq.n	4658 <_malloc_r+0x484>
    4662:	b.n	42c2 <_malloc_r+0xee>
    4664:	cmp.w	r3, #340	; 0x154
    4668:	bhi.n	469c <_malloc_r+0x4c8>
    466a:	lsrs	r0, r5, #15
    466c:	add.w	lr, r0, #120	; 0x78
    4670:	mov.w	r3, lr, lsl #1
    4674:	adds	r0, #119	; 0x77
    4676:	b.n	4218 <_malloc_r+0x44>
    4678:	mov.w	r1, #4096	; 0x1000
    467c:	b.n	4456 <_malloc_r+0x282>
    467e:	movs	r1, #1
    4680:	ldr.w	r3, [r8, #4]
    4684:	asrs	r2, r2, #2
    4686:	lsl.w	r2, r1, r2
    468a:	orrs	r2, r3
    468c:	str.w	r2, [r8, #4]
    4690:	mov	r1, ip
    4692:	b.n	4584 <_malloc_r+0x3b0>
    4694:	movs	r3, #1
    4696:	str.w	r3, [fp, #4]
    469a:	b.n	44e8 <_malloc_r+0x314>
    469c:	movw	r2, #1364	; 0x554
    46a0:	cmp	r3, r2
    46a2:	bhi.n	46e6 <_malloc_r+0x512>
    46a4:	lsrs	r0, r5, #18
    46a6:	add.w	lr, r0, #125	; 0x7d
    46aa:	mov.w	r3, lr, lsl #1
    46ae:	adds	r0, #124	; 0x7c
    46b0:	b.n	4218 <_malloc_r+0x44>
    46b2:	adds	r2, #16
    46b4:	b.n	4400 <_malloc_r+0x22c>
    46b6:	cmp	r2, #84	; 0x54
    46b8:	bhi.n	4708 <_malloc_r+0x534>
    46ba:	lsrs	r2, r3, #12
    46bc:	add.w	r1, r2, #111	; 0x6f
    46c0:	lsls	r1, r1, #1
    46c2:	adds	r2, #110	; 0x6e
    46c4:	b.n	4558 <_malloc_r+0x384>
    46c6:	ldr	r4, [r7, #8]
    46c8:	ldr	r2, [r4, #4]
    46ca:	bic.w	r2, r2, #3
    46ce:	b.n	44dc <_malloc_r+0x308>
    46d0:	ubfx	r0, sl, #0, #12
    46d4:	cmp	r0, #0
    46d6:	bne.w	442a <_malloc_r+0x256>
    46da:	add	r2, r8
    46dc:	ldr	r3, [r7, #8]
    46de:	orr.w	r2, r2, #1
    46e2:	str	r2, [r3, #4]
    46e4:	b.n	44c0 <_malloc_r+0x2ec>
    46e6:	movs	r3, #254	; 0xfe
    46e8:	mov.w	lr, #127	; 0x7f
    46ec:	movs	r0, #126	; 0x7e
    46ee:	b.n	4218 <_malloc_r+0x44>
    46f0:	movs	r2, #1
    46f2:	mov.w	r9, #0
    46f6:	b.n	447c <_malloc_r+0x2a8>
    46f8:	add.w	r1, r4, #8
    46fc:	mov	r0, r6
    46fe:	bl	4854 <_free_r>
    4702:	ldr.w	r1, [r9]
    4706:	b.n	44c0 <_malloc_r+0x2ec>
    4708:	cmp.w	r2, #340	; 0x154
    470c:	bhi.n	471a <_malloc_r+0x546>
    470e:	lsrs	r2, r3, #15
    4710:	add.w	r1, r2, #120	; 0x78
    4714:	lsls	r1, r1, #1
    4716:	adds	r2, #119	; 0x77
    4718:	b.n	4558 <_malloc_r+0x384>
    471a:	movw	r1, #1364	; 0x554
    471e:	cmp	r2, r1
    4720:	bhi.n	472e <_malloc_r+0x55a>
    4722:	lsrs	r2, r3, #18
    4724:	add.w	r1, r2, #125	; 0x7d
    4728:	lsls	r1, r1, #1
    472a:	adds	r2, #124	; 0x7c
    472c:	b.n	4558 <_malloc_r+0x384>
    472e:	movs	r1, #254	; 0xfe
    4730:	movs	r2, #126	; 0x7e
    4732:	b.n	4558 <_malloc_r+0x384>
    4734:	ldr	r3, [r7, #4]
    4736:	b.n	4642 <_malloc_r+0x46e>
    4738:	lsrs	r0, r5, #3
    473a:	adds	r3, r0, #1
    473c:	lsls	r3, r3, #1
    473e:	b.n	4332 <_malloc_r+0x15e>
    4740:	.word	0x1fff11ac

00004744 <__malloc_lock>:
    4744:	bx	lr
    4746:	nop

00004748 <__malloc_unlock>:
    4748:	bx	lr
    474a:	nop

0000474c <_sbrk_r>:
    474c:	push	{r3, r4, r5, lr}
    474e:	ldr	r4, [pc, #28]	; (476c <_sbrk_r+0x20>)
    4750:	movs	r3, #0
    4752:	mov	r5, r0
    4754:	mov	r0, r1
    4756:	str	r3, [r4, #0]
    4758:	bl	3ae0 <_sbrk>
    475c:	adds	r3, r0, #1
    475e:	beq.n	4762 <_sbrk_r+0x16>
    4760:	pop	{r3, r4, r5, pc}
    4762:	ldr	r3, [r4, #0]
    4764:	cmp	r3, #0
    4766:	beq.n	4760 <_sbrk_r+0x14>
    4768:	str	r3, [r5, #0]
    476a:	pop	{r3, r4, r5, pc}
    476c:	.word	0x1fff1e70

00004770 <register_fini>:
    4770:	ldr	r3, [pc, #8]	; (477c <register_fini+0xc>)
    4772:	cbz	r3, 477a <register_fini+0xa>
    4774:	ldr	r0, [pc, #8]	; (4780 <register_fini+0x10>)
    4776:	b.w	4784 <atexit>
    477a:	bx	lr
    477c:	.word	0x00000000
    4780:	.word	0x00004791

00004784 <atexit>:
    4784:	movs	r3, #0
    4786:	mov	r1, r0
    4788:	mov	r2, r3
    478a:	mov	r0, r3
    478c:	b.w	4a24 <__register_exitproc>

00004790 <__libc_fini_array>:
    4790:	push	{r3, r4, r5, lr}
    4792:	ldr	r5, [pc, #28]	; (47b0 <__libc_fini_array+0x20>)
    4794:	ldr	r4, [pc, #28]	; (47b4 <__libc_fini_array+0x24>)
    4796:	subs	r4, r5, r4
    4798:	asrs	r4, r4, #2
    479a:	beq.n	47a8 <__libc_fini_array+0x18>
    479c:	subs	r4, #1
    479e:	ldr.w	r3, [r5, #-4]!
    47a2:	blx	r3
    47a4:	cmp	r4, #0
    47a6:	bne.n	479c <__libc_fini_array+0xc>
    47a8:	ldmia.w	sp!, {r3, r4, r5, lr}
    47ac:	b.w	4df8 <__init_array_end>
	...

000047b8 <_malloc_trim_r>:
    47b8:	push	{r3, r4, r5, r6, r7, lr}
    47ba:	ldr	r7, [pc, #140]	; (4848 <_malloc_trim_r+0x90>)
    47bc:	mov	r4, r1
    47be:	mov	r6, r0
    47c0:	bl	4744 <__malloc_lock>
    47c4:	ldr	r3, [r7, #8]
    47c6:	ldr	r5, [r3, #4]
    47c8:	bic.w	r5, r5, #3
    47cc:	subs	r1, r5, r4
    47ce:	addw	r1, r1, #4079	; 0xfef
    47d2:	bic.w	r1, r1, #4080	; 0xff0
    47d6:	bic.w	r1, r1, #15
    47da:	sub.w	r4, r1, #4096	; 0x1000
    47de:	cmp.w	r4, #4096	; 0x1000
    47e2:	blt.n	47f4 <_malloc_trim_r+0x3c>
    47e4:	movs	r1, #0
    47e6:	mov	r0, r6
    47e8:	bl	474c <_sbrk_r>
    47ec:	ldr	r3, [r7, #8]
    47ee:	add	r3, r5
    47f0:	cmp	r0, r3
    47f2:	beq.n	47fe <_malloc_trim_r+0x46>
    47f4:	mov	r0, r6
    47f6:	bl	4748 <__malloc_unlock>
    47fa:	movs	r0, #0
    47fc:	pop	{r3, r4, r5, r6, r7, pc}
    47fe:	negs	r1, r4
    4800:	mov	r0, r6
    4802:	bl	474c <_sbrk_r>
    4806:	adds	r0, #1
    4808:	beq.n	4826 <_malloc_trim_r+0x6e>
    480a:	ldr	r3, [pc, #64]	; (484c <_malloc_trim_r+0x94>)
    480c:	ldr	r2, [r7, #8]
    480e:	ldr	r1, [r3, #0]
    4810:	subs	r5, r5, r4
    4812:	orr.w	r5, r5, #1
    4816:	mov	r0, r6
    4818:	subs	r1, r1, r4
    481a:	str	r5, [r2, #4]
    481c:	str	r1, [r3, #0]
    481e:	bl	4748 <__malloc_unlock>
    4822:	movs	r0, #1
    4824:	pop	{r3, r4, r5, r6, r7, pc}
    4826:	movs	r1, #0
    4828:	mov	r0, r6
    482a:	bl	474c <_sbrk_r>
    482e:	ldr	r2, [r7, #8]
    4830:	subs	r3, r0, r2
    4832:	cmp	r3, #15
    4834:	ble.n	47f4 <_malloc_trim_r+0x3c>
    4836:	ldr	r4, [pc, #24]	; (4850 <_malloc_trim_r+0x98>)
    4838:	ldr	r1, [pc, #16]	; (484c <_malloc_trim_r+0x94>)
    483a:	ldr	r4, [r4, #0]
    483c:	orr.w	r3, r3, #1
    4840:	subs	r0, r0, r4
    4842:	str	r3, [r2, #4]
    4844:	str	r0, [r1, #0]
    4846:	b.n	47f4 <_malloc_trim_r+0x3c>
    4848:	.word	0x1fff11ac
    484c:	.word	0x1fff1d04
    4850:	.word	0x1fff15b8

00004854 <_free_r>:
    4854:	cmp	r1, #0
    4856:	beq.n	48e4 <_free_r+0x90>
    4858:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    485c:	mov	r5, r1
    485e:	mov	r8, r0
    4860:	bl	4744 <__malloc_lock>
    4864:	ldr.w	r7, [r5, #-4]
    4868:	ldr	r1, [pc, #424]	; (4a14 <_free_r+0x1c0>)
    486a:	bic.w	r3, r7, #1
    486e:	sub.w	r4, r5, #8
    4872:	adds	r2, r4, r3
    4874:	ldr	r6, [r1, #8]
    4876:	ldr	r0, [r2, #4]
    4878:	cmp	r2, r6
    487a:	bic.w	r0, r0, #3
    487e:	beq.n	4946 <_free_r+0xf2>
    4880:	lsls	r6, r7, #31
    4882:	str	r0, [r2, #4]
    4884:	bmi.n	489e <_free_r+0x4a>
    4886:	ldr.w	r7, [r5, #-8]
    488a:	subs	r4, r4, r7
    488c:	add.w	lr, r1, #8
    4890:	ldr	r5, [r4, #8]
    4892:	cmp	r5, lr
    4894:	add	r3, r7
    4896:	beq.n	4978 <_free_r+0x124>
    4898:	ldr	r7, [r4, #12]
    489a:	str	r7, [r5, #12]
    489c:	str	r5, [r7, #8]
    489e:	adds	r5, r2, r0
    48a0:	ldr	r5, [r5, #4]
    48a2:	lsls	r5, r5, #31
    48a4:	bpl.n	492c <_free_r+0xd8>
    48a6:	orr.w	r2, r3, #1
    48aa:	str	r2, [r4, #4]
    48ac:	str	r3, [r4, r3]
    48ae:	cmp.w	r3, #512	; 0x200
    48b2:	bcs.n	48e6 <_free_r+0x92>
    48b4:	lsrs	r3, r3, #3
    48b6:	adds	r2, r3, #1
    48b8:	ldr	r5, [r1, #4]
    48ba:	ldr.w	r7, [r1, r2, lsl #3]
    48be:	str	r7, [r4, #8]
    48c0:	movs	r0, #1
    48c2:	asrs	r3, r3, #2
    48c4:	lsl.w	r3, r0, r3
    48c8:	add.w	r0, r1, r2, lsl #3
    48cc:	orrs	r5, r3
    48ce:	subs	r0, #8
    48d0:	str	r0, [r4, #12]
    48d2:	str	r5, [r1, #4]
    48d4:	str.w	r4, [r1, r2, lsl #3]
    48d8:	str	r4, [r7, #12]
    48da:	mov	r0, r8
    48dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    48e0:	b.w	4748 <__malloc_unlock>
    48e4:	bx	lr
    48e6:	lsrs	r2, r3, #9
    48e8:	cmp	r2, #4
    48ea:	bhi.n	4994 <_free_r+0x140>
    48ec:	lsrs	r2, r3, #6
    48ee:	add.w	r7, r2, #57	; 0x39
    48f2:	lsls	r7, r7, #1
    48f4:	add.w	r5, r2, #56	; 0x38
    48f8:	add.w	r0, r1, r7, lsl #2
    48fc:	ldr.w	r2, [r1, r7, lsl #2]
    4900:	ldr	r1, [pc, #272]	; (4a14 <_free_r+0x1c0>)
    4902:	subs	r0, #8
    4904:	cmp	r0, r2
    4906:	beq.n	49a4 <_free_r+0x150>
    4908:	ldr	r1, [r2, #4]
    490a:	bic.w	r1, r1, #3
    490e:	cmp	r3, r1
    4910:	bcs.n	4918 <_free_r+0xc4>
    4912:	ldr	r2, [r2, #8]
    4914:	cmp	r0, r2
    4916:	bne.n	4908 <_free_r+0xb4>
    4918:	ldr	r0, [r2, #12]
    491a:	str	r0, [r4, #12]
    491c:	str	r2, [r4, #8]
    491e:	str	r4, [r0, #8]
    4920:	str	r4, [r2, #12]
    4922:	mov	r0, r8
    4924:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4928:	b.w	4748 <__malloc_unlock>
    492c:	ldr	r5, [r2, #8]
    492e:	ldr	r7, [pc, #232]	; (4a18 <_free_r+0x1c4>)
    4930:	cmp	r5, r7
    4932:	add	r3, r0
    4934:	beq.n	49b6 <_free_r+0x162>
    4936:	ldr	r0, [r2, #12]
    4938:	str	r0, [r5, #12]
    493a:	orr.w	r2, r3, #1
    493e:	str	r5, [r0, #8]
    4940:	str	r2, [r4, #4]
    4942:	str	r3, [r4, r3]
    4944:	b.n	48ae <_free_r+0x5a>
    4946:	lsls	r7, r7, #31
    4948:	add	r3, r0
    494a:	bmi.n	495c <_free_r+0x108>
    494c:	ldr.w	r2, [r5, #-8]
    4950:	subs	r4, r4, r2
    4952:	add	r3, r2
    4954:	ldr	r0, [r4, #8]
    4956:	ldr	r2, [r4, #12]
    4958:	str	r2, [r0, #12]
    495a:	str	r0, [r2, #8]
    495c:	ldr	r2, [pc, #188]	; (4a1c <_free_r+0x1c8>)
    495e:	ldr	r2, [r2, #0]
    4960:	orr.w	r0, r3, #1
    4964:	cmp	r3, r2
    4966:	str	r0, [r4, #4]
    4968:	str	r4, [r1, #8]
    496a:	bcc.n	48da <_free_r+0x86>
    496c:	ldr	r3, [pc, #176]	; (4a20 <_free_r+0x1cc>)
    496e:	mov	r0, r8
    4970:	ldr	r1, [r3, #0]
    4972:	bl	47b8 <_malloc_trim_r>
    4976:	b.n	48da <_free_r+0x86>
    4978:	adds	r1, r2, r0
    497a:	ldr	r1, [r1, #4]
    497c:	lsls	r1, r1, #31
    497e:	bmi.n	4a0a <_free_r+0x1b6>
    4980:	ldr	r1, [r2, #8]
    4982:	ldr	r2, [r2, #12]
    4984:	str	r2, [r1, #12]
    4986:	add	r3, r0
    4988:	orr.w	r0, r3, #1
    498c:	str	r1, [r2, #8]
    498e:	str	r0, [r4, #4]
    4990:	str	r3, [r4, r3]
    4992:	b.n	48da <_free_r+0x86>
    4994:	cmp	r2, #20
    4996:	bhi.n	49c8 <_free_r+0x174>
    4998:	add.w	r7, r2, #92	; 0x5c
    499c:	lsls	r7, r7, #1
    499e:	add.w	r5, r2, #91	; 0x5b
    49a2:	b.n	48f8 <_free_r+0xa4>
    49a4:	asrs	r2, r5, #2
    49a6:	ldr	r3, [r1, #4]
    49a8:	movs	r5, #1
    49aa:	lsl.w	r2, r5, r2
    49ae:	orrs	r3, r2
    49b0:	str	r3, [r1, #4]
    49b2:	mov	r2, r0
    49b4:	b.n	491a <_free_r+0xc6>
    49b6:	orr.w	r2, r3, #1
    49ba:	str	r4, [r1, #20]
    49bc:	str	r4, [r1, #16]
    49be:	str	r5, [r4, #12]
    49c0:	str	r5, [r4, #8]
    49c2:	str	r2, [r4, #4]
    49c4:	str	r3, [r4, r3]
    49c6:	b.n	48da <_free_r+0x86>
    49c8:	cmp	r2, #84	; 0x54
    49ca:	bhi.n	49da <_free_r+0x186>
    49cc:	lsrs	r2, r3, #12
    49ce:	add.w	r7, r2, #111	; 0x6f
    49d2:	lsls	r7, r7, #1
    49d4:	add.w	r5, r2, #110	; 0x6e
    49d8:	b.n	48f8 <_free_r+0xa4>
    49da:	cmp.w	r2, #340	; 0x154
    49de:	bhi.n	49ee <_free_r+0x19a>
    49e0:	lsrs	r2, r3, #15
    49e2:	add.w	r7, r2, #120	; 0x78
    49e6:	lsls	r7, r7, #1
    49e8:	add.w	r5, r2, #119	; 0x77
    49ec:	b.n	48f8 <_free_r+0xa4>
    49ee:	movw	r0, #1364	; 0x554
    49f2:	cmp	r2, r0
    49f4:	bhi.n	4a04 <_free_r+0x1b0>
    49f6:	lsrs	r2, r3, #18
    49f8:	add.w	r7, r2, #125	; 0x7d
    49fc:	lsls	r7, r7, #1
    49fe:	add.w	r5, r2, #124	; 0x7c
    4a02:	b.n	48f8 <_free_r+0xa4>
    4a04:	movs	r7, #254	; 0xfe
    4a06:	movs	r5, #126	; 0x7e
    4a08:	b.n	48f8 <_free_r+0xa4>
    4a0a:	orr.w	r2, r3, #1
    4a0e:	str	r2, [r4, #4]
    4a10:	str	r3, [r4, r3]
    4a12:	b.n	48da <_free_r+0x86>
    4a14:	.word	0x1fff11ac
    4a18:	.word	0x1fff11b4
    4a1c:	.word	0x1fff15b4
    4a20:	.word	0x1fff1d00

00004a24 <__register_exitproc>:
    4a24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a28:	ldr	r4, [pc, #148]	; (4ac0 <__register_exitproc+0x9c>)
    4a2a:	ldr	r5, [r4, #0]
    4a2c:	ldr.w	r4, [r5, #328]	; 0x148
    4a30:	mov	r6, r0
    4a32:	mov	r8, r1
    4a34:	mov	sl, r2
    4a36:	mov	r9, r3
    4a38:	cbz	r4, 4aac <__register_exitproc+0x88>
    4a3a:	ldr	r0, [r4, #4]
    4a3c:	cmp	r0, #31
    4a3e:	bgt.n	4a70 <__register_exitproc+0x4c>
    4a40:	adds	r3, r0, #1
    4a42:	cbz	r6, 4a62 <__register_exitproc+0x3e>
    4a44:	add.w	r5, r4, r0, lsl #2
    4a48:	movs	r2, #1
    4a4a:	str.w	sl, [r5, #136]	; 0x88
    4a4e:	ldr.w	r1, [r4, #392]	; 0x188
    4a52:	lsls	r2, r0
    4a54:	orrs	r1, r2
    4a56:	cmp	r6, #2
    4a58:	str.w	r1, [r4, #392]	; 0x188
    4a5c:	str.w	r9, [r5, #264]	; 0x108
    4a60:	beq.n	4aa0 <__register_exitproc+0x7c>
    4a62:	adds	r0, #2
    4a64:	str	r3, [r4, #4]
    4a66:	str.w	r8, [r4, r0, lsl #2]
    4a6a:	movs	r0, #0
    4a6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4a70:	ldr	r3, [pc, #80]	; (4ac4 <__register_exitproc+0xa0>)
    4a72:	cbz	r3, 4ab6 <__register_exitproc+0x92>
    4a74:	mov.w	r0, #400	; 0x190
    4a78:	bl	41c4 <malloc>
    4a7c:	mov	r4, r0
    4a7e:	cbz	r0, 4ab6 <__register_exitproc+0x92>
    4a80:	ldr.w	r3, [r5, #328]	; 0x148
    4a84:	movs	r7, #0
    4a86:	stmia.w	r0, {r3, r7}
    4a8a:	str.w	r4, [r5, #328]	; 0x148
    4a8e:	mov	r0, r7
    4a90:	movs	r3, #1
    4a92:	str.w	r7, [r4, #392]	; 0x188
    4a96:	str.w	r7, [r4, #396]	; 0x18c
    4a9a:	cmp	r6, #0
    4a9c:	beq.n	4a62 <__register_exitproc+0x3e>
    4a9e:	b.n	4a44 <__register_exitproc+0x20>
    4aa0:	ldr.w	r1, [r4, #396]	; 0x18c
    4aa4:	orrs	r2, r1
    4aa6:	str.w	r2, [r4, #396]	; 0x18c
    4aaa:	b.n	4a62 <__register_exitproc+0x3e>
    4aac:	add.w	r4, r5, #332	; 0x14c
    4ab0:	str.w	r4, [r5, #328]	; 0x148
    4ab4:	b.n	4a3a <__register_exitproc+0x16>
    4ab6:	mov.w	r0, #4294967295
    4aba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4abe:	nop
    4ac0:	.word	0x00004ddc
    4ac4:	.word	0x000041c5
    4ac8:	.word	0x7370704f
    4acc:	.word	0x6e61202c
    4ad0:	.word	0x6b6e7520
    4ad4:	.word	0x6e776f6e
    4ad8:	.word	0x44494d20
    4adc:	.word	0x656d2049
    4ae0:	.word	0x67617373
    4ae4:	.word	0x79742065
    4ae8:	.word	0x00216570
    4aec:	.word	0x4f4c4556
    4af0:	.word	0x59544943
    4af4:	.word	0x00000000
    4af8:	.word	0x45544f4e
    4afc:	.word	0x474e454c
    4b00:	.word	0x00004854
    4b04:	.word	0x43544950
    4b08:	.word	0x00000048

00004b0c <pin2sc1a>:
    4b0c:	................
    4b1c:	................
    4b2c:	................
    4b3c:	................
    4b4c:	........

00004b54 <digital_pin_to_info_PGM>:
    4b54:	@..C@..@D..CD..@
    4b64:	...C...@0..C0..@
    4b74:	4..C4..@...C...@
    4b84:	...C...@...C...@
    4b94:	...C...@...C...@
    4ba4:	...C...@...C...@
    4bb4:	...C...@...C...@
    4bc4:	...C...@...C...@
    4bd4:	...C...@...C...@
    4be4:	...C...@...C...@
    4bf4:	...C...@...C...@
    4c04:	...C...@...C...@
    4c14:	h .Ch..@...C...@
    4c24:	8..C8..@<..C<..@
    4c34:	@..C@..@H..CH..@
    4c44:	L..CL..@(..C(..@
    4c54:	,..C,..@` .C`..@
    4c64:	d .Cd..@ ..C ..@
    4c74:	$..C$..@(..C(..@
    4c84:	,..C,..@D..CD..@
    4c94:	p..Cp..@t..Ct..@
    4ca4:	h..Ch..@P..CP..@
    4cb4:	X..CX..@\..C\..@
    4cc4:	T..CT..@ ..C ..@
    4cd4:	$..C$..@...C...@
    4ce4:	...C...@8..C8..@
    4cf4:	4..C4..@0..C0..@
    4d04:	<..C<..@,..C,..@
    4d14:	( .C(..@, .C,..@
    4d24:	. .C...@. .C...@
    4d34:	. .C...@. .C...@
    4d44:	. .C...@. .C...@

00004d54 <vtable for usb_serial_class>:
	...
    4d5c:	.7...7...7...7..
    4d6c:	.7...7...7...6..
    4d7c:	....

00004d80 <usb_endpoint_config_table>:
    4d80:	........

00004d88 <usb_descriptor_list>:
    4d88:	................
    4d98:	............`...
    4da8:	................
    4db8:	....H...........
    4dc8:	d...............
    4dd8:	....

00004ddc <_global_impure_ptr>:
    4ddc:	....

00004de0 <_init>:
    4de0:	push	{r3, r4, r5, r6, r7, lr}
    4de2:	nop
    4de4:	pop	{r3, r4, r5, r6, r7}
    4de6:	pop	{r3}
    4de8:	mov	lr, r3
    4dea:	bx	lr

00004dec <__init_array_start>:
    4dec:	.word	0x00004771

00004df0 <__frame_dummy_init_array_entry>:
    4df0:	5...M...

Disassembly of section .fini:

00004df8 <_fini>:
    4df8:	push	{r3, r4, r5, r6, r7, lr}
    4dfa:	nop


.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000059cc l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15bc l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00004548 l     F .text	0000000c startup_default_early_hook
00004554 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15bc l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15c0 l       .bss	00000000 object.8610
000059c4 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00002230 l     F .text	0000029c _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff1915 l     O .bss	00000001 tx_noautoflush
1fff1918 l     O .bss	00000004 tx_packet
1fff191c l     O .bss	00000001 transmit_previous_timeout
1fff1920 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
000027a0 l     F .text	00000144 wait_for_cal
1fff1925 l     O .bss	00000001 analog_right_shift
1fff1926 l     O .bss	00000001 calibrating
000056e0 l     O .text	00000048 pin2sc1a
1fff0c68 l     O .data	00000001 analog_config_bits
1fff1927 l     O .bss	00000001 analogReadBusyADC1
1fff1928 l     O .bss	00000001 analogReadBusyADC0
1fff1929 l     O .bss	00000001 analog_reference_internal
1fff0c69 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00002ac0 l     F .text	0000004c digitalWrite.part.1
00002b0c l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002dec l     F .text	00000048 sysex_byte
1fff1944 l     O .bss	00000001 tx_noautoflush
1fff1970 l     O .bss	00000004 tx_packet
1fff1974 l     O .bss	00000001 transmit_previous_timeout
1fff197c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c6c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1990 l     O .bss	00000004 ep0_tx_ptr
1fff1994 l     O .bss	00000014 rx_last
1fff19a8 l     O .bss	00000002 ep0_tx_len
1fff19ac l     O .bss	00000040 ep0_rx0_buf
1fff19ec l     O .bss	00000014 rx_first
1fff1a00 l     O .bss	00000001 ep0_tx_data_toggle
1fff1a04 l     O .bss	00000040 ep0_rx1_buf
1fff1a44 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff1a58 l     O .bss	00000014 tx_last
1fff1a6c l     O .bss	00000008 setup
1fff1a74 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1a78 l     O .bss	00000008 reply_buffer
1fff1a84 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1a89 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1a8c l     O .bss	00000004 rts_pin
1fff1a90 l     O .bss	00000001 rx_buffer_head
1fff1a91 l     O .bss	00000001 rx_buffer_tail
1fff1a94 l     O .bss	00000028 tx_buffer
1fff1abc l     O .bss	00000040 rx_buffer
1fff1afc l     O .bss	00000001 transmitting
1fff1afd l     O .bss	00000001 tx_buffer_tail
1fff1b00 l     O .bss	00000004 transmit_pin
1fff1b04 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1b08 l     O .bss	00000004 rts_pin
1fff1b0c l     O .bss	00000001 transmitting
1fff1b0d l     O .bss	00000001 rx_buffer_tail
1fff1b10 l     O .bss	00000028 tx_buffer
1fff1b38 l     O .bss	00000040 rx_buffer
1fff1b78 l     O .bss	00000001 rx_buffer_head
1fff1b79 l     O .bss	00000001 tx_buffer_tail
1fff1b7c l     O .bss	00000004 transmit_pin
1fff1b80 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1b84 l     O .bss	00000004 rts_pin
1fff1b88 l     O .bss	00000001 rx_buffer_head
1fff1b89 l     O .bss	00000001 rx_buffer_tail
1fff1b8c l     O .bss	00000028 tx_buffer
1fff1bb4 l     O .bss	00000040 rx_buffer
1fff1bf4 l     O .bss	00000001 transmitting
1fff1bf5 l     O .bss	00000001 tx_buffer_tail
1fff1bf8 l     O .bss	00000004 transmit_pin
1fff1bfc l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1c00 l     O .bss	00000004 rts_pin
1fff1c04 l     O .bss	00000001 rx_buffer_head
1fff1c05 l     O .bss	00000001 rx_buffer_tail
1fff1c08 l     O .bss	00000040 tx_buffer
1fff1c48 l     O .bss	00000040 rx_buffer
1fff1c88 l     O .bss	00000001 transmitting
1fff1c89 l     O .bss	00000001 tx_buffer_tail
1fff1c8c l     O .bss	00000004 transmit_pin
1fff1c90 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1c94 l     O .bss	00000004 rts_pin
1fff1c98 l     O .bss	00000001 rx_buffer_head
1fff1c99 l     O .bss	00000001 rx_buffer_tail
1fff1c9c l     O .bss	00000028 tx_buffer
1fff1cc4 l     O .bss	00000040 rx_buffer
1fff1d04 l     O .bss	00000001 transmitting
1fff1d05 l     O .bss	00000001 tx_buffer_tail
1fff1d08 l     O .bss	00000004 transmit_pin
1fff1d0c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c84 l     O .data	00000012 device_descriptor
1fff0cb0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1d10 l     O .bss	00000004 rts_pin
1fff1d14 l     O .bss	00000001 rx_buffer_head
1fff1d15 l     O .bss	00000001 rx_buffer_tail
1fff1d18 l     O .bss	00000028 tx_buffer
1fff1d40 l     O .bss	00000040 rx_buffer
1fff1d80 l     O .bss	00000001 transmitting
1fff1d81 l     O .bss	00000001 tx_buffer_tail
1fff1d84 l     O .bss	00000004 transmit_pin
1fff1d88 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 __call_atexit.c
000052dc l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d80 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15bc l       .bss	00000000 __bss_start__
1fff1f24 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00004540  w    F .text	00000006 adc0_isr
00002544 g     F .text	0000001c usb_serial_available
00004400 g     F .text	00000020 serial4_available
00004018  w    F .text	000000c4 yield
1fff0c98 g     O .data	00000018 usb_string_manufacturer_name_default
000045ec g     F .text	00000020 serial_available
1fff1948 g     O .bss	00000004 usb_midi_handleProgramChange
1fff178c g     O .bss	00000038 sequence
000044f8  w    F .text	00000048 hard_fault_isr
00004540  w    F .text	00000006 dma_ch6_isr
0000410c g     F .text	00000020 Print::println()
000042d4 g     F .text	00000020 serial2_available
00004540  w    F .text	00000006 uart0_lon_isr
0000342c g     F .text	000000e8 usb_rx_memory
000040dc  w    F .text	00000002 serialEvent5()
00004540  w    F .text	00000006 dma_ch8_isr
00004718 g     F .text	00000020 serial6_available
000051c0 g     F .text	00000002 __malloc_unlock
1fff195c g     O .bss	00000004 usb_midi_handleAfterTouch
000028e4 g     F .text	000000e0 analog_init
00003514 g     F .text	00000084 usb_tx
00004540  w    F .text	00000006 portcd_isr
1fff196c g     O .bss	00000004 usb_midi_handleSysExComplete
00004b38 g     F .text	00000098 MillisTimer::runFromTimer()
00004540  w    F .text	00000006 can1_rx_warn_isr
000059d0 g       .fini	00000000 __exidx_end
00004540  w    F .text	00000006 dma_error_isr
1fff1de8 g     O .bss	00000001 usb_midi_msg_type
1fff1da0 g     O .bss	00000001 EventResponder::runningFromYield
00004540  w    F .text	00000006 i2c0_isr
00004be0 g     F .text	0000000c __errno
00004540  w    F .text	00000006 portd_isr
00004540  w    F .text	00000006 enet_error_isr
1fff1d8c g     O .bss	00000004 EventResponder::firstInterrupt
00004540  w    F .text	00000006 tpm1_isr
000040f8  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00005728 g     O .text	00000200 digital_pin_to_info_PGM
1fff1f20 g     O .bss	00000004 errno
000059d0 g       .fini	00000000 _etext
1fff15bc g       .bss	00000000 _sbss
000041d4  w    F .text	00000002 serialEvent6()
1fff1958 g     O .bss	00000004 usb_midi_handleVelocityChange
00002bb4 g     F .text	0000001c digitalRead
00004540  w    F .text	00000006 porte_isr
00000800 g     F .text	00001a30 loop
00004540  w    F .text	00000006 portb_isr
1fff17ec g     O .bss	00000014 step3
00002ed0 g     F .text	0000002c usb_midi_flush_output
00004540  w    F .text	00000006 spi1_isr
00004420 g     F .text	000000d8 uart3_status_isr
000049e4  w    F .text	00000002 serialEvent1()
1fff18fc g     O .bss	00000018 led4
00004540  w    F .text	00000006 mcm_isr
00004ad0 g     F .text	00000068 MillisTimer::addToActiveList()
00002efc g     F .text	0000043c usb_midi_read
1fff1934 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1d90 g     O .bss	00000004 EventResponder::lastInterrupt
000042f4 g     F .text	0000010c uart1_status_isr
1fff1dea g     O .bss	00000002 usb_midi_msg_sysex_len
00004540  w    F .text	00000006 randnum_isr
1fff193c g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff192c g     O .bss	00000004 systick_millis_count
000044f8  w    F .text	00000048 bus_fault_isr
00004540  w    F .text	00000006 watchdog_isr
00004540  w    F .text	00000006 i2c1_isr
1fff1a80 g     O .bss	00000001 usb_configuration
00004540  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
000041bc  w    F .text	00000002 serialEvent2()
00004540  w    F .text	00000006 i2c2_isr
1fff0c98  w    O .data	00000018 usb_string_manufacturer_name
1fff1f14 g     O .bss	0000000a usb_rx_byte_count_data
00004540  w    F .text	00000006 pit1_isr
00004c3c g     F .text	00000010 malloc
00004540  w    F .text	00000006 dma_ch4_isr
00004540  w    F .text	00000006 software_isr
00004540  w    F .text	00000006 dma_ch7_isr
00004a6c  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00003f48 g     F .text	000000d0 usb_init
00004540  w    F .text	00000006 lptmr_isr
1fff1db0 g     O .bss	00000004 __malloc_top_pad
00002b84 g     F .text	00000024 rtc_set
1fff170c g     O .bss	00000040 button5
1fff16cc g     O .bss	00000040 button4
1fff0c40 g       .data	00000000 _sdata
1fff198c g     O .bss	00000004 usb_midi_handleNoteOn
000045b8 g     F .text	00000034 kinetis_hsrun_enable
000051c4 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
000024cc g     F .text	00000048 usb_serial_getchar
00004540  w    F .text	00000006 can1_bus_off_isr
00004540  w    F .text	00000006 ftm2_isr
1fff1ddc g     O .bss	00000008 usb_cdc_line_coding
00002ba8 g     F .text	0000000a digitalWrite
00004540  w    F .text	00000006 uart5_status_isr
00004738 g     F .text	000000e4 lpuart0_status_isr
1fff1d98 g     O .bss	00000004 EventResponder::lastYield
00005954 g     O .text	00000005 usb_endpoint_config_table
00004540  w    F .text	00000006 dma_ch9_isr
00004540  w    F .text	00000006 pit2_isr
000048ec g     F .text	00000020 serial3_available
1fff1800 g     O .bss	00000014 step4
1fff1dac g     O .bss	00000004 __malloc_max_sbrked_mem
00002bd0 g     F .text	0000000a pinMode
00003378 g     F .text	0000004c usb_free
00004540  w    F .text	00000006 i2c3_isr
1fff18b4 g     O .bss	00000018 led1
1fff1954 g     O .bss	00000004 usb_midi_handleSysExPartial
000059d0 g       .fini	00000000 __exidx_start
00004540  w    F .text	00000006 pit0_isr
1fff1dec g     O .bss	00000001 usb_midi_msg_data1
1fff1d9c g     O .bss	00000004 EventResponder::firstYield
000059b0 g     O .text	00000004 _global_impure_ptr
00004540  w    F .text	00000006 can1_error_isr
00004bec g     F .text	00000050 __libc_init_array
1fff1f24 g       .bss	00000000 __bss_end
00004540  w    F .text	00000006 can0_wakeup_isr
00004540  w    F .text	00000006 flash_cmd_isr
1fff1884 g     O .bss	0000001c knob5
000040e0  w    F .text	00000004 usb_serial_class::clear()
0000490c g     F .text	000000d8 uart2_status_isr
00004558 g     F .text	0000002c _sbrk
1fff1da4 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c80 g     O .data	00000004 __brkval
1fff1924 g     O .bss	00000001 usb_cdc_line_rtsdtr
00002758 g     F .text	00000048 usb_serial_flush_callback
000059b4 g     F .text	00000000 _init
1fff0c40 g     O .data	00000010 steps
00004540  w    F .text	00000006 svcall_isr
00004540  w    F .text	00000006 dma_ch15_isr
00004540  w    F .text	00000006 uart1_error_isr
000052fc g     F .text	00000028 __libc_fini_array
00004540  w    F .text	00000006 usbhs_phy_isr
1fff1f24 g       .bss	00000000 _ebss
00004540 g     F .text	00000006 unused_isr
00004540  w    F .text	00000006 spi0_isr
00004540  w    F .text	00000006 dma_ch3_isr
00004540  w    F .text	00000006 flash_error_isr
1fff1830 g     O .bss	0000001c knob2
000041dc g     F .text	00000020 serial5_available
00004540  w    F .text	00000006 uart5_error_isr
00004540  w    F .text	00000006 rtc_seconds_isr
00004540  w    F .text	00000006 pdb_isr
000044f8  w    F .text	00000048 usage_fault_isr
00004540  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00004540  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1de4 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000046c  w    F .text	00000024 Print::println(char const*)
1fff18a0 g     O .bss	00000010 transport
1fff0c50 g     O .data	00000018 leds
00004bd0 g     F .text	00000010 systick_isr
00004540  w    F .text	00000006 rtc_alarm_isr
00004540  w    F .text	00000006 dma_ch2_isr
1fff0c70 g     O .data	00000010 Serial
00004540  w    F .text	00000006 ftm1_isr
00004100  w    F .text	00000006 usb_serial_class::write(unsigned char)
00004548  w    F .text	0000000c startup_early_hook
00004540  w    F .text	00000006 dma_ch13_isr
00004540  w    F .text	00000006 uart2_error_isr
00002514 g     F .text	00000030 usb_serial_peekchar
000004b4  w    F .text	00000034 Led::blink(int)
1fff0d64 g     O .data	00000016 usb_string_serial_number_default
000044f8 g     F .text	00000048 fault_isr
000053c0 g     F .text	000001d0 _free_r
1fff1978 g     O .bss	00000004 usb_midi_handleStop
00004540  w    F .text	00000006 usb_charge_isr
000040f0  w    F .text	00000004 usb_serial_class::flush()
00004540  w    F .text	00000006 cmt_isr
00004540  w    F .text	00000006 usbhs_isr
1fff1988 g     O .bss	00000004 usb_midi_handleControlChange
1fff15b8 g     O .data	00000004 __malloc_sbrk_base
000040e8  w    F .text	00000004 usb_serial_class::read()
00004540  w    F .text	00000006 ftm3_isr
00004540  w    F .text	00000006 tsi0_isr
1fff15f0 g     O .bss	00000018 led6
1fff1814 g     O .bss	0000001c knob1
00004540  w    F .text	00000006 spi2_isr
000041c0  w    F .text	00000002 serialEvent4()
00004108  w    F .text	00000002 serialEvent()
1fff1a01 g     O .bss	00000001 usb_reboot_timer
00005590 g     F .text	000000a4 __register_exitproc
00002560 g     F .text	00000038 usb_serial_flush_input
000026a0 g     F .text	00000018 usb_serial_putchar
1fff1db4 g     O .bss	00000028 __malloc_current_mallinfo
00004540  w    F .text	00000006 can0_bus_off_isr
1fff15d8 g     O .bss	00000018 led5
1fff1a75 g     O .bss	00000001 usb_rx_memory_needed
00003598 g     F .text	000009b0 usb_isr
1fff17c4 g     O .bss	00000014 step1
1fff1984 g     O .bss	00000004 usb_midi_handleNoteOff
00005928  w    O .text	00000028 vtable for usb_serial_class
1fff184c g     O .bss	0000001c knob3
00004540  w    F .text	00000006 uart3_error_isr
1fff1d94 g     O .bss	00000004 MillisTimer::listActive
00004540  w    F .text	00000006 porta_isr
1fff1608 g     O .bss	00000001 controller
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00004540  w    F .text	00000006 low_voltage_isr
1fff164c g     O .bss	00000040 button2
1fff11ac g     O .data	00000408 __malloc_av_
00004540  w    F .text	00000006 can0_error_isr
00002c80 g     F .text	0000016c _init_Teensyduino_internal_
00002700 g     F .text	00000058 usb_serial_flush_output
00004540  w    F .text	00000006 dma_ch12_isr
000051bc g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00004540  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00004540  w    F .text	00000006 pit3_isr
00004540  w    F .text	00000006 enet_rx_isr
00004540  w    F .text	00000006 portc_isr
000041c4 g     F .text	00000010 main
1fff1da8 g     O .bss	00000004 __malloc_max_total_mem
1fff18e4 g     O .bss	00000018 led3
000044f8  w    F .text	00000048 memmanage_fault_isr
0000481c g     F .text	00000084 usb_init_serialnumber
1fff18b0 g     O .bss	00000001 currentMode
000059cc g       .text	00000000 __init_array_end
00004c4c g     F .text	00000570 _malloc_r
00004540  w    F .text	00000006 debugmonitor_isr
1fff1950 g     O .bss	00000004 usb_midi_handleSongPosition
000049ec g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1940 g     O .bss	00000004 usb_midi_handleContinue
1fff1ded g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00004540  w    F .text	00000006 cmp1_isr
1fff168c g     O .bss	00000040 button3
00004540  w    F .text	00000006 ftm0_isr
00005324 g     F .text	0000009c _malloc_trim_r
1fff0d60 g     O .data	00000004 string0
00002598 g     F .text	00000108 usb_serial_write
00004554  w    F .text	00000002 startup_late_hook
000040ec  w    F .text	00000004 usb_serial_class::available()
1fff1dee g     O .bss	00000001 usb_midi_msg_cable
1fff0d48  w    O .data	00000018 usb_string_product_name
000004e8  w    F .text	00000314 Button::check()
00002bdc g     F .text	000000a4 delay
00004540  w    F .text	00000006 tpm0_isr
000059cc g     F .fini	00000000 _fini
1fff17d8 g     O .bss	00000014 step2
00004540  w    F .text	00000006 i2s0_rx_isr
00004540  w    F .text	00000006 uart4_error_isr
000041ac g     F .text	00000010 Print::print(long)
00002e34 g     F .text	0000009c usb_midi_write_packed
000052f0 g     F .text	0000000c atexit
00004540  w    F .text	00000006 can0_message_isr
1fff11a8 g     O .data	00000004 _impure_ptr
00004540  w    F .text	00000006 can1_message_isr
00004540  w    F .text	00000006 nmi_isr
00000490  w    F .text	00000024 Led::Led(int, int)
1fff1968 g     O .bss	00000004 usb_midi_handleTuneRequest
000059c0 g       .text	00000000 __preinit_array_end
00004540  w    F .text	00000006 sdhc_isr
1fff1def g     O .bss	00000001 usb_midi_msg_channel
000007fc g     F .text	00000002 setup
0000595c g     O .text	00000054 usb_descriptor_list
000033c4 g     F .text	0000003c usb_rx
00000490  w    F .text	00000024 Led::Led(int, int)
1fff1868 g     O .bss	0000001c knob4
00004540  w    F .text	00000006 dma_ch10_isr
1fff1960 g     O .bss	00000004 usb_midi_handleStart
00004540  w    F .text	00000006 uart0_error_isr
00003338 g     F .text	00000040 usb_malloc
00004540  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
000026b8 g     F .text	00000048 usb_serial_write_buffer_free
00004540  w    F .text	00000006 enet_timer_isr
1fff174c g     O .bss	00000040 button6
1fff160c g     O .bss	00000040 button1
1fff15bc g       .data	00000000 _edata
00004540  w    F .text	00000006 i2s0_tx_isr
00004540  w    F .text	00000006 adc1_isr
000040f4  w    F .text	00000004 usb_serial_class::availableForWrite()
00004540  w    F .text	00000006 cmp0_isr
1fff1930 g     O .bss	00000004 usb_midi_handleClock
000048a0 g     F .text	0000004c ultoa
000041d8 g     F .text	00000004 operator new(unsigned int)
00004a88 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15b4 g     O .data	00000004 __malloc_trim_threshold
000040e4  w    F .text	00000004 usb_serial_class::peek()
1fff1914 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff194c g     O .bss	00000004 usb_midi_handlePitchChange
00004540  w    F .text	00000006 pit_isr
1fff1964 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00004540  w    F .text	00000006 dac0_isr
000059c0 g       .text	00000000 __init_array_start
00004540  w    F .text	00000006 can1_tx_warn_isr
000029c4 g     F .text	000000fc analogRead
1fff1df0 g     O .bss	00000122 usb_midi_msg_sysex
0000460c g     F .text	0000010c uart0_status_isr
00004540  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
00005200 g     F .text	000000dc strlen
1fff0d48 g     O .data	00000018 usb_string_product_name_default
00004540  w    F .text	00000006 dma_ch1_isr
00003400 g     F .text	0000002c usb_tx_packet_count
00004540  w    F .text	00000006 dma_ch5_isr
00004540  w    F .text	00000006 can0_rx_warn_isr
00004540  w    F .text	00000006 can0_tx_warn_isr
000041fc g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00004584 g     F .text	00000034 kinetis_hsrun_disable
000059c0 g       .text	00000000 __preinit_array_start
000049e8  w    F .text	00000002 serialEvent3()
1fff1980 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff18cc g     O .bss	00000018 led2
00004540  w    F .text	00000006 cmp2_isr
00004acc g     F .text	00000004 pendablesrvreq_isr
00004540  w    F .text	00000006 wakeup_isr
00004540  w    F .text	00000006 cmp3_isr
0000412c g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
1fff1938 g     O .bss	00000004 usb_midi_handleActiveSensing
00004540  w    F .text	00000006 tpm2_isr
00004540  w    F .text	00000006 dma_ch0_isr
1fff0d64  w    O .data	00000016 usb_string_serial_number
00004540  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
  free(ptr);
}

void operator delete[](void * ptr)
{
  free(ptr);
       0:	... ....AE...D..
      10:	.D...D...D...D..
      20:	.D...D...D..AE..
      30:	AE...D...J...K..
      40:	AE..AE..AE..AE..
      50:	AE..AE..AE..AE..
      60:	AE..AE..AE..AE..
      70:	AE..AE..AE..AE..
      80:	AE..AE..AE..AE..
      90:	AE..AE..AE..AE..
      a0:	AE..AE..AE..AE..
      b0:	AE..AE..AE...F..
      c0:	AE...B..AE...I..
      d0:	AE..!D..AE..AE..
      e0:	AE..AE..AE..AE..
      f0:	AE..AE..AE..AE..
     100:	AE..AE..AE..AE..
     110:	AE...5..AE..AE..
     120:	AE..AE..AE..AE..
     130:	AE..AE..AE..AE..
     140:	AE..AE...A..AE..
     150:	AE..AE..AE..AE..
     160:	AE..AE..AE..AE..
     170:	AE..AE..AE..AE..
     180:	AE..AE..AE..AE..
     190:	AE..AE..9G..AE..
     1a0:	AE..AE..AE..AE..
     1b0:	AE..AE..AE..AE..
     1c0:	AE..AE..AE..AE..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	4548 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	2c80 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	2b84 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	2b84 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	4bec <__libc_init_array>

	startup_late_hook();
     33a:	bl	4554 <startup_late_hook>
	main();
     33e:	bl	41c4 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15bc
     374:	.word	0x000059cc
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15bc
     380:	.word	0x1fff1f24
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15bc
     42c:	.word	0x00000000
     430:	.word	0x000059d0

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15c0
     460:	.word	0x000059d0
     464:	.word	0x1fff15bc
     468:	.word	0x00000000

0000046c <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     470:	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     472:	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     474:	bl	5200 <strlen>
     478:	ldr	r3, [r4, #0]
     47a:	mov	r2, r0
     47c:	mov	r1, r5
     47e:	ldr	r3, [r3, #4]
     480:	mov	r0, r4
     482:	blx	r3
     484:	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     486:	mov	r0, r4
     488:	bl	410c <Print::println()>
     48c:	add	r0, r5
     48e:	pop	{r3, r4, r5, pc}

00000490 <Led::Led(int, int)>:
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     490:	push	{r3, r4, r5, lr}
     492:	mov	r4, r0
     494:	movs	r3, #0
     496:	movs	r5, #75	; 0x4b
      m_pin = pin;
     498:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     49c:	uxtb	r0, r1
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     49e:	strb	r3, [r4, #16]
     4a0:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     4a2:	movs	r1, #1
     4a4:	bl	2bd0 <pinMode>
      digitalWrite(m_pin, m_state);
     4a8:	ldrb	r0, [r4, #0]
     4aa:	ldrb	r1, [r4, #4]
     4ac:	bl	2ba8 <digitalWrite>
    };
     4b0:	mov	r0, r4
     4b2:	pop	{r3, r4, r5, pc}

000004b4 <Led::blink(int)>:

    void blink (int times = 0) {
     4b4:	push	{r4, r5, r6, lr}
      digitalWrite(m_pin, !digitalRead(m_pin));
     4b6:	ldrb	r5, [r0, #0]

      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
     4b8:	sub	sp, #8
     4ba:	mov	r4, r0
      digitalWrite(m_pin, !digitalRead(m_pin));
     4bc:	mov	r0, r5

      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
     4be:	mov	r6, r1
      digitalWrite(m_pin, !digitalRead(m_pin));
     4c0:	bl	2bb4 <digitalRead>
     4c4:	clz	r1, r0
     4c8:	lsrs	r1, r1, #5
     4ca:	mov	r0, r5
     4cc:	bl	2ba8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4d0:	ldr	r3, [pc, #16]	; (4e4 <Led::blink(int)+0x30>)
      blinking = true;
      blinkingCounter = times;
     4d2:	str	r6, [r4, #20]
     4d4:	ldr	r3, [r3, #0]
     4d6:	str	r3, [sp, #4]
	return ret;
     4d8:	ldr	r3, [sp, #4]
      lastBlink = millis();  
     4da:	str	r3, [r4, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     4dc:	movs	r2, #1
     4de:	strb	r2, [r4, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    };
     4e0:	add	sp, #8
     4e2:	pop	{r4, r5, r6, pc}
     4e4:	.word	0x1fff192c

000004e8 <Button::check()>:
    // and then i can save a point in time and store it in x
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
     4e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     4ec:	mov	r4, r0
     4ee:	sub	sp, #36	; 0x24
      current = digitalRead(m_pin);
     4f0:	ldrb.w	r0, [r0, #60]	; 0x3c
     4f4:	bl	2bb4 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     4f8:	cmp	r0, #1
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     4fa:	mov	r5, r0
     4fc:	str	r0, [r4, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     4fe:	ldrb.w	r7, [r4, #48]	; 0x30
     502:	beq.n	562 <Button::check()+0x7a>
     504:	ldr	r3, [r4, #52]	; 0x34
     506:	ldr	r6, [pc, #644]	; (78c <Button::check()+0x2a4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     508:	ldr	r2, [r6, #0]
     50a:	str	r2, [sp, #16]
	return ret;
     50c:	ldr	r1, [sp, #16]
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     50e:	ldr	r2, [pc, #640]	; (790 <Button::check()+0x2a8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     510:	ldr	r0, [pc, #632]	; (78c <Button::check()+0x2a4>)
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
     512:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     514:	smull	r1, r2, r2, r3
     518:	asrs	r1, r3, #31
     51a:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     51e:	cmp	r7, r5
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
     520:	str	r3, [r4, #36]	; 0x24
      secs_held = millis_held / 1000;
     522:	str	r2, [r4, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     524:	beq.n	55e <Button::check()+0x76>
     526:	ldr	r1, [r0, #0]
     528:	str	r1, [sp, #24]
	return ret;
     52a:	ldr	r1, [sp, #24]
        m_lastDebounceTime = millis();
     52c:	str	r1, [r4, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     52e:	ldr	r0, [r6, #0]
     530:	str	r0, [sp, #20]
	return ret;
     532:	ldr	r0, [sp, #20]
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     534:	cmp	r0, r1
     536:	beq.n	544 <Button::check()+0x5c>
        // and the current changed
        if (current != m_state) {
     538:	ldr	r1, [r4, #4]
     53a:	cmp	r1, r5
     53c:	beq.n	544 <Button::check()+0x5c>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     53e:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     540:	str	r5, [r4, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     542:	ble.n	608 <Button::check()+0x120>
        onPress();
      }
 
      if (millis_held > 50) {
     544:	cmp	r3, #50	; 0x32
     546:	ble.n	552 <Button::check()+0x6a>
        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     548:	cbnz	r5, 552 <Button::check()+0x6a>
     54a:	ldrb.w	r3, [r4, #48]	; 0x30
     54e:	cmp	r3, #1
     550:	beq.n	572 <Button::check()+0x8a>
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     552:	strb.w	r5, [r4, #48]	; 0x30
      prev_secs_held = secs_held;
     556:	str	r2, [r4, #44]	; 0x2c
    };
     558:	add	sp, #36	; 0x24
     55a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     55e:	ldr	r1, [r4, #20]
     560:	b.n	52e <Button::check()+0x46>
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     562:	cbz	r7, 5a8 <Button::check()+0xc0>
     564:	ldr	r3, [r4, #52]	; 0x34
     566:	ldr	r6, [pc, #548]	; (78c <Button::check()+0x2a4>)
        firstTime = millis();
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
     568:	cmp	r7, #1
     56a:	beq.w	680 <Button::check()+0x198>
     56e:	ldr	r5, [r4, #32]
     570:	b.n	508 <Button::check()+0x20>
      }
 
      if (millis_held > 50) {
        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
          if (secs_held >= 1) {
     572:	cmp	r2, #0
     574:	ble.n	552 <Button::check()+0x6a>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     576:	movs	r1, #14
     578:	ldr	r0, [pc, #536]	; (794 <Button::check()+0x2ac>)
     57a:	bl	2598 <usb_serial_write>
            Serial.print("Seconds held: ");
            Serial.print(secs_held);
     57e:	ldr	r1, [r4, #40]	; 0x28
     580:	ldr	r0, [pc, #532]	; (798 <Button::check()+0x2b0>)
     582:	bl	41ac <Print::print(long)>
     586:	movs	r1, #19
     588:	ldr	r0, [pc, #528]	; (79c <Button::check()+0x2b4>)
     58a:	bl	2598 <usb_serial_write>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
     58e:	ldr	r1, [r4, #36]	; 0x24
     590:	ldr	r0, [pc, #516]	; (798 <Button::check()+0x2b0>)
     592:	bl	41ac <Print::print(long)>
     596:	ldr	r0, [pc, #512]	; (798 <Button::check()+0x2b0>)
     598:	bl	410c <Print::println()>
    void enterShiftMode () {
      m_shiftMode = true;
    };

    void exitShiftMode () {
      m_shiftMode = false;
     59c:	ldr	r3, [r4, #28]
     59e:	ldr	r2, [r4, #40]	; 0x28
     5a0:	strb.w	r5, [r3, #46]	; 0x2e
     5a4:	ldr	r5, [r4, #32]
     5a6:	b.n	552 <Button::check()+0x6a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5a8:	ldr	r6, [pc, #480]	; (78c <Button::check()+0x2a4>)
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     5aa:	ldr	r3, [r4, #52]	; 0x34
     5ac:	ldr	r2, [r6, #0]
     5ae:	str	r2, [sp, #0]
	return ret;
     5b0:	ldr	r2, [sp, #0]
     5b2:	subs	r2, r2, r3
     5b4:	cmp	r2, #200	; 0xc8
     5b6:	bls.n	56e <Button::check()+0x86>
        firstTime = millis();
        m_led.blink();
     5b8:	ldr.w	r8, [r4, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5bc:	ldr	r3, [r6, #0]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     5be:	ldrb.w	r9, [r8]
     5c2:	str	r3, [sp, #4]
	return ret;
     5c4:	ldr	r3, [sp, #4]
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
     5c6:	str	r3, [r4, #52]	; 0x34
     5c8:	mov	r0, r9
     5ca:	bl	2bb4 <digitalRead>
     5ce:	clz	r1, r0
     5d2:	lsrs	r1, r1, #5
     5d4:	mov	r0, r9
     5d6:	bl	2ba8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5da:	ldr	r3, [r6, #0]
     5dc:	str	r3, [sp, #28]
	return ret;
     5de:	ldr	r3, [sp, #28]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     5e0:	str.w	r3, [r8, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     5e4:	strb.w	r5, [r8, #16]
      blinkingCounter = times;
     5e8:	str.w	r7, [r8, #20]
     5ec:	movs	r1, #7
     5ee:	ldr	r0, [pc, #432]	; (7a0 <Button::check()+0x2b8>)
     5f0:	bl	2598 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     5f4:	ldr	r0, [pc, #416]	; (798 <Button::check()+0x2b0>)
     5f6:	bl	410c <Print::println()>
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
     5fa:	ldr	r5, [r4, #32]
     5fc:	ldrb.w	r7, [r4, #48]	; 0x30
     600:	ldr	r3, [r4, #52]	; 0x34
     602:	cmp	r5, #1
     604:	beq.n	568 <Button::check()+0x80>
     606:	b.n	508 <Button::check()+0x20>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
     608:	ldr	r3, [r4, #28]
     60a:	ldr	r0, [pc, #408]	; (7a4 <Button::check()+0x2bc>)
     60c:	ldr	r5, [r3, #52]	; 0x34
     60e:	movs	r1, #17
     610:	bl	2598 <usb_serial_write>
     614:	ldr	r0, [pc, #384]	; (798 <Button::check()+0x2b0>)
     616:	bl	410c <Print::println()>
     61a:	ldr	r3, [r4, #28]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     61c:	ldr	r0, [pc, #376]	; (798 <Button::check()+0x2b0>)
     61e:	ldrb.w	r1, [r3, #46]	; 0x2e
     622:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     626:	ldr	r0, [pc, #368]	; (798 <Button::check()+0x2b0>)
     628:	bl	410c <Print::println()>
     62c:	movs	r1, #12
     62e:	ldr	r0, [pc, #376]	; (7a8 <Button::check()+0x2c0>)
     630:	bl	2598 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     634:	ldr	r0, [pc, #352]	; (798 <Button::check()+0x2b0>)
     636:	bl	410c <Print::println()>
      Serial.println("onPress shiftMode");
      Serial.println(m_sequence.getShiftMode());
      Serial.println("onPress page");
      Serial.println(m_sequence.m_paginator->getPage());
     63a:	ldr	r3, [r4, #28]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     63c:	ldr	r0, [pc, #344]	; (798 <Button::check()+0x2b0>)
     63e:	ldr	r3, [r3, #52]	; 0x34
     640:	ldr	r1, [r3, #4]
     642:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     646:	ldr	r0, [pc, #336]	; (798 <Button::check()+0x2b0>)
     648:	bl	410c <Print::println()>

      if (m_state == LOW && m_shiftButton) {
     64c:	ldr	r3, [r4, #4]
     64e:	cmp	r3, #0
     650:	bne.n	6f4 <Button::check()+0x20c>
     652:	ldrb	r3, [r4, #16]
     654:	cmp	r3, #0
     656:	beq.n	6fc <Button::check()+0x214>
        if (m_sequence.getShiftMode()) {
     658:	ldr	r7, [r4, #28]
     65a:	ldrb.w	r6, [r7, #46]	; 0x2e
     65e:	cmp	r6, #0
     660:	beq.n	6c4 <Button::check()+0x1dc>
    void nextPage () {
      if (m_page < 4) m_page++;
    };

    void previousPage () {
      if (m_page > 1) m_page--;
     662:	ldr	r1, [r5, #4]
     664:	cmp	r1, #1
     666:	ble.n	66c <Button::check()+0x184>
     668:	subs	r1, #1
     66a:	str	r1, [r5, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     66c:	ldr	r0, [pc, #296]	; (798 <Button::check()+0x2b0>)
     66e:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     672:	ldr	r0, [pc, #292]	; (798 <Button::check()+0x2b0>)
     674:	bl	410c <Print::println()>
     678:	ldr	r3, [r4, #36]	; 0x24
     67a:	ldr	r5, [r4, #32]
     67c:	ldr	r2, [r4, #40]	; 0x28
     67e:	b.n	544 <Button::check()+0x5c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     680:	ldr	r2, [r6, #0]
     682:	str	r2, [sp, #8]
	return ret;
     684:	ldr	r2, [sp, #8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     686:	ldr	r1, [pc, #260]	; (78c <Button::check()+0x2a4>)
        firstTime = millis();
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
     688:	subs	r2, r2, r3
     68a:	cmp.w	r2, #1000	; 0x3e8
     68e:	bls.w	56e <Button::check()+0x86>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
     692:	ldr	r2, [r4, #28]
     694:	ldr	r1, [r1, #0]
     696:	str	r1, [sp, #12]
     698:	ldrb.w	r1, [r2, #46]	; 0x2e
	return ret;
     69c:	ldr	r0, [sp, #12]
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
        firstHoldTime = millis();
     69e:	str	r0, [r4, #56]	; 0x38
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
     6a0:	cbz	r1, 6b0 <Button::check()+0x1c8>
      Serial.println("Inited Sequence");
      Serial.println(m_paginator->getPage());
    };

    void enterShiftMode () {
      m_shiftMode = true;
     6a2:	movs	r1, #1
     6a4:	ldr	r5, [r4, #32]
     6a6:	strb.w	r1, [r2, #46]	; 0x2e
     6aa:	ldrb.w	r7, [r4, #48]	; 0x30
     6ae:	b.n	508 <Button::check()+0x20>
     6b0:	movs	r1, #6
     6b2:	ldr	r0, [pc, #248]	; (7ac <Button::check()+0x2c4>)
     6b4:	bl	2598 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     6b8:	ldr	r0, [pc, #220]	; (798 <Button::check()+0x2b0>)
     6ba:	bl	410c <Print::println()>
     6be:	ldr	r2, [r4, #28]
     6c0:	ldr	r3, [r4, #52]	; 0x34
     6c2:	b.n	6a2 <Button::check()+0x1ba>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
     6c4:	ldr	r2, [pc, #232]	; (7b0 <Button::check()+0x2c8>)
     6c6:	ldrb	r3, [r2, #0]
     6c8:	cmp	r3, #0
     6ca:	beq.n	7b8 <Button::check()+0x2d0>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
     6cc:	cmp	r3, #1
     6ce:	beq.n	7d0 <Button::check()+0x2e8>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
     6d0:	cmp	r3, #2
     6d2:	bne.n	6f4 <Button::check()+0x20c>
        currentMode = PITCH;
        Serial.println("PITCH");
     6d4:	ldr	r1, [pc, #220]	; (7b4 <Button::check()+0x2cc>)
     6d6:	ldr	r0, [pc, #192]	; (798 <Button::check()+0x2b0>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
     6d8:	strb	r6, [r2, #0]
        Serial.println("PITCH");
     6da:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(); // shut the 999 blinks off
     6de:	mov	r1, r6
     6e0:	ldr	r0, [r7, #36]	; 0x24
     6e2:	bl	4b4 <Led::blink(int)>
        m_leds[4]->on();
     6e6:	ldr	r3, [r7, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
     6e8:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
     6ea:	strb	r6, [r3, #16]
      m_state = 1;
     6ec:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
     6ee:	ldrb	r0, [r3, #0]
     6f0:	bl	2ba8 <digitalWrite>
     6f4:	ldr	r3, [r4, #36]	; 0x24
     6f6:	ldr	r5, [r4, #32]
     6f8:	ldr	r2, [r4, #40]	; 0x28
     6fa:	b.n	544 <Button::check()+0x5c>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
     6fc:	ldrb	r3, [r4, #17]
     6fe:	cbz	r3, 714 <Button::check()+0x22c>
     700:	ldr	r3, [r4, #28]
        if (m_sequence.getShiftMode()) {
     702:	ldrb.w	r3, [r3, #46]	; 0x2e
     706:	cbz	r3, 750 <Button::check()+0x268>
    int getPage () {
      return m_page;
    }

    void nextPage () {
      if (m_page < 4) m_page++;
     708:	ldr	r1, [r5, #4]
     70a:	cmp	r1, #3
     70c:	itt	le
     70e:	addle	r1, #1
     710:	strle	r1, [r5, #4]
     712:	b.n	66c <Button::check()+0x184>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
     714:	ldr	r5, [r4, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     716:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
     718:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     71a:	clz	r1, r1
     71e:	lsrs	r1, r1, #5
     720:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
     722:	bl	2ba8 <digitalWrite>

      if (blinking) {
     726:	ldrb	r3, [r5, #16]
     728:	cbz	r3, 738 <Button::check()+0x250>
        digitalWrite(m_pin, !m_state);
     72a:	ldr	r1, [r5, #4]
     72c:	ldrb	r0, [r5, #0]
     72e:	clz	r1, r1
     732:	lsrs	r1, r1, #5
     734:	bl	2ba8 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     738:	ldr	r2, [r4, #28]
     73a:	ldr	r1, [r4, #0]
     73c:	ldr	r3, [r4, #36]	; 0x24
     73e:	ldr.w	r0, [r2, r1, lsl #2]
     742:	ldr	r5, [r4, #32]
      m_velocity = 100;
      m_length = 4;
    };

    void toggle () {
      m_state = !m_state;
     744:	ldrb	r1, [r0, #4]
     746:	ldr	r2, [r4, #40]	; 0x28
     748:	eor.w	r1, r1, #1
     74c:	strb	r1, [r0, #4]
     74e:	b.n	544 <Button::check()+0x5c>
      } else if (m_state == LOW && m_reverseButton) {
        if (m_sequence.getShiftMode()) {
          paginator->nextPage();
          Serial.println(paginator->getPage());
        } else {
          m_led.toggle();
     750:	ldr	r5, [r4, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     752:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
     754:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     756:	clz	r1, r1
     75a:	lsrs	r1, r1, #5
     75c:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
     75e:	bl	2ba8 <digitalWrite>

      if (blinking) {
     762:	ldrb	r3, [r5, #16]
     764:	cbz	r3, 774 <Button::check()+0x28c>
        digitalWrite(m_pin, !m_state);
     766:	ldr	r1, [r5, #4]
     768:	ldrb	r0, [r5, #0]
     76a:	clz	r1, r1
     76e:	lsrs	r1, r1, #5
     770:	bl	2ba8 <digitalWrite>
     774:	ldr	r0, [r4, #28]
     776:	ldr	r3, [r4, #36]	; 0x24
    void resetStep () {
      m_currentStep = 0;
    };

    void reverse () {
      m_reverse = !m_reverse;
     778:	ldrb.w	r1, [r0, #45]	; 0x2d
     77c:	ldr	r5, [r4, #32]
     77e:	ldr	r2, [r4, #40]	; 0x28
     780:	eor.w	r1, r1, #1
     784:	strb.w	r1, [r0, #45]	; 0x2d
     788:	b.n	544 <Button::check()+0x5c>
     78a:	nop
     78c:	.word	0x1fff192c
     790:	.word	0x10624dd3
     794:	.word	0x00005680
     798:	.word	0x1fff0c70
     79c:	.word	0x00005690
     7a0:	.word	0x000056a4
     7a4:	.word	0x0000563c
     7a8:	.word	0x00005650
     7ac:	.word	0x00005634
     7b0:	.word	0x1fff18b0
     7b4:	.word	0x00005678
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
     7b8:	movs	r3, #1
        Serial.println("VELOCITY");
     7ba:	ldr	r1, [pc, #52]	; (7f0 <Button::check()+0x308>)
     7bc:	ldr	r0, [pc, #52]	; (7f4 <Button::check()+0x30c>)
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
     7be:	strb	r3, [r2, #0]
        Serial.println("VELOCITY");
     7c0:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(999);
     7c4:	ldr	r0, [r7, #36]	; 0x24
     7c6:	movw	r1, #999	; 0x3e7
     7ca:	bl	4b4 <Led::blink(int)>
     7ce:	b.n	6f4 <Button::check()+0x20c>
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
     7d0:	movs	r3, #2
        Serial.println("NOTELENGTH");
     7d2:	ldr	r1, [pc, #36]	; (7f8 <Button::check()+0x310>)
     7d4:	ldr	r0, [pc, #28]	; (7f4 <Button::check()+0x30c>)
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
     7d6:	strb	r3, [r2, #0]
        Serial.println("NOTELENGTH");
     7d8:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink();
     7dc:	mov	r1, r6
     7de:	ldr	r0, [r7, #36]	; 0x24
     7e0:	bl	4b4 <Led::blink(int)>
        m_leds[4]->off();
     7e4:	ldr	r3, [r7, #36]	; 0x24
    };

    void off () {
      blinking = false;
      m_state = 0;
      digitalWrite(m_pin, m_state);
     7e6:	mov	r1, r6
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
     7e8:	strb	r6, [r3, #16]
      m_state = 0;
     7ea:	str	r6, [r3, #4]
     7ec:	b.n	6ee <Button::check()+0x206>
     7ee:	nop
     7f0:	.word	0x00005660
     7f4:	.word	0x1fff0c70
     7f8:	.word	0x0000566c

000007fc <setup>:
Knob knob3(A2, sequence, transport, THIRD, 2);
Knob knob4(A3, sequence, transport, FOURTH, 3);
Knob knob5(A4, sequence, transport, FIFTH, 4);
// implement a scale knob that transposes the sequencer

void setup() {
     7fc:	bx	lr
     7fe:	nop

00000800 <loop>:
  Serial.begin(9600);
}

void loop() {
     800:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     804:	movs	r0, #0
     806:	sub	sp, #264	; 0x108
     808:	bl	2efc <usb_midi_read>
  if (usbMIDI.read()) {
     80c:	cmp	r0, #0
     80e:	bne.w	fbc <loop+0x7bc>
     812:	ldr	r4, [pc, #688]	; (ac4 <loop+0x2c4>)
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     814:	ldr	r5, [pc, #688]	; (ac8 <loop+0x2c8>)
    transport.processMidi();
  }
  
  button1.check();
     816:	ldr	r0, [pc, #692]	; (acc <loop+0x2cc>)
     818:	bl	4e8 <Button::check()>
     81c:	ldrb.w	r0, [r5, #60]	; 0x3c
     820:	bl	2bb4 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     824:	cmp	r0, #1
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     826:	mov	r7, r0
     828:	str	r0, [r5, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     82a:	beq.w	1186 <loop+0x986>
     82e:	ldr	r3, [r5, #52]	; 0x34
     830:	ldrb.w	r6, [r5, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     834:	ldr	r2, [r4, #0]
     836:	str	r2, [sp, #200]	; 0xc8
	return ret;
     838:	ldr	r1, [sp, #200]	; 0xc8
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     83a:	ldr	r2, [pc, #660]	; (ad0 <loop+0x2d0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     83c:	ldr.w	lr, [pc, #644]	; ac4 <loop+0x2c4>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
     840:	ldr	r0, [pc, #644]	; (ac8 <loop+0x2c8>)
     842:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     844:	smull	r1, r2, r2, r3
     848:	asrs	r1, r3, #31
     84a:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     84e:	cmp	r7, r6
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
     850:	str	r3, [r5, #36]	; 0x24
      secs_held = millis_held / 1000;
     852:	str	r2, [r5, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     854:	beq.w	1180 <loop+0x980>
     858:	ldr.w	r1, [lr]
     85c:	str	r1, [sp, #196]	; 0xc4
	return ret;
     85e:	ldr	r1, [sp, #196]	; 0xc4
        m_lastDebounceTime = millis();
     860:	str	r1, [r0, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     862:	ldr	r0, [r4, #0]
     864:	str	r0, [sp, #192]	; 0xc0
	return ret;
     866:	ldr	r0, [sp, #192]	; 0xc0
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     868:	cmp	r0, r1
     86a:	beq.n	87c <loop+0x7c>
        // and the current changed
        if (current != m_state) {
     86c:	ldr	r1, [r5, #4]
     86e:	ldr	r6, [pc, #600]	; (ac8 <loop+0x2c8>)
     870:	cmp	r7, r1
     872:	beq.n	87c <loop+0x7c>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     874:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     876:	str	r7, [r6, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     878:	ble.w	1488 <loop+0xc88>
        onPress();
      }
 
      if (millis_held > 50) {
     87c:	cmp	r3, #50	; 0x32
     87e:	ble.n	88e <loop+0x8e>
        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     880:	cbnz	r7, 88e <loop+0x8e>
     882:	ldrb.w	r3, [r5, #48]	; 0x30
     886:	ldr	r6, [pc, #576]	; (ac8 <loop+0x2c8>)
     888:	cmp	r3, #1
     88a:	beq.w	127c <loop+0xa7c>
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     88e:	ldr	r6, [pc, #580]	; (ad4 <loop+0x2d4>)
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     890:	strb.w	r7, [r5, #48]	; 0x30
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     894:	ldrb.w	r0, [r6, #60]	; 0x3c
          }
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     898:	str	r2, [r5, #44]	; 0x2c
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     89a:	bl	2bb4 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     89e:	cmp	r0, #1
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     8a0:	mov	r7, r0
     8a2:	str	r0, [r6, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     8a4:	beq.w	1108 <loop+0x908>
     8a8:	ldr	r3, [r6, #52]	; 0x34
     8aa:	ldrb.w	r5, [r6, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8ae:	ldr	r2, [r4, #0]
     8b0:	str	r2, [sp, #172]	; 0xac
	return ret;
     8b2:	ldr	r1, [sp, #172]	; 0xac
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     8b4:	ldr	r2, [pc, #536]	; (ad0 <loop+0x2d0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8b6:	ldr.w	lr, [pc, #524]	; ac4 <loop+0x2c4>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
     8ba:	ldr	r0, [pc, #536]	; (ad4 <loop+0x2d4>)
     8bc:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     8be:	smull	r1, r2, r2, r3
     8c2:	asrs	r1, r3, #31
     8c4:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     8c8:	cmp	r5, r7
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
     8ca:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     8cc:	str	r2, [r6, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     8ce:	beq.w	1102 <loop+0x902>
     8d2:	ldr.w	r1, [lr]
     8d6:	str	r1, [sp, #168]	; 0xa8
	return ret;
     8d8:	ldr	r1, [sp, #168]	; 0xa8
        m_lastDebounceTime = millis();
     8da:	str	r1, [r0, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8dc:	ldr	r0, [r4, #0]
     8de:	str	r0, [sp, #164]	; 0xa4
	return ret;
     8e0:	ldr	r0, [sp, #164]	; 0xa4
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     8e2:	cmp	r0, r1
     8e4:	beq.n	8f6 <loop+0xf6>
        // and the current changed
        if (current != m_state) {
     8e6:	ldr	r1, [r6, #4]
     8e8:	ldr	r5, [pc, #488]	; (ad4 <loop+0x2d4>)
     8ea:	cmp	r1, r7
     8ec:	beq.n	8f6 <loop+0xf6>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     8ee:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     8f0:	str	r7, [r5, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     8f2:	ble.w	1588 <loop+0xd88>
        onPress();
      }
 
      if (millis_held > 50) {
     8f6:	cmp	r3, #50	; 0x32
     8f8:	ble.n	908 <loop+0x108>
        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     8fa:	cbnz	r7, 908 <loop+0x108>
     8fc:	ldrb.w	r3, [r6, #48]	; 0x30
     900:	ldr	r5, [pc, #464]	; (ad4 <loop+0x2d4>)
     902:	cmp	r3, #1
     904:	beq.w	132a <loop+0xb2a>
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     908:	ldr	r5, [pc, #460]	; (ad8 <loop+0x2d8>)
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     90a:	strb.w	r7, [r6, #48]	; 0x30
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     90e:	ldrb.w	r0, [r5, #60]	; 0x3c
          }
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     912:	str	r2, [r6, #44]	; 0x2c
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     914:	bl	2bb4 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     918:	cmp	r0, #1
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     91a:	mov	r7, r0
     91c:	str	r0, [r5, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     91e:	beq.w	1204 <loop+0xa04>
     922:	ldr	r3, [r5, #52]	; 0x34
     924:	ldrb.w	r6, [r5, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     928:	ldr	r2, [r4, #0]
     92a:	str	r2, [sp, #144]	; 0x90
	return ret;
     92c:	ldr	r1, [sp, #144]	; 0x90
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     92e:	ldr	r2, [pc, #416]	; (ad0 <loop+0x2d0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     930:	ldr.w	lr, [pc, #400]	; ac4 <loop+0x2c4>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
     934:	ldr	r0, [pc, #416]	; (ad8 <loop+0x2d8>)
     936:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     938:	smull	r1, r2, r2, r3
     93c:	asrs	r1, r3, #31
     93e:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     942:	cmp	r6, r7
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
     944:	str	r3, [r5, #36]	; 0x24
      secs_held = millis_held / 1000;
     946:	str	r2, [r5, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     948:	beq.w	11fe <loop+0x9fe>
     94c:	ldr.w	r1, [lr]
     950:	str	r1, [sp, #140]	; 0x8c
	return ret;
     952:	ldr	r1, [sp, #140]	; 0x8c
        m_lastDebounceTime = millis();
     954:	str	r1, [r0, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     956:	ldr	r0, [r4, #0]
     958:	str	r0, [sp, #136]	; 0x88
	return ret;
     95a:	ldr	r0, [sp, #136]	; 0x88
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     95c:	cmp	r0, r1
     95e:	beq.n	970 <loop+0x170>
        // and the current changed
        if (current != m_state) {
     960:	ldr	r1, [r5, #4]
     962:	ldr	r6, [pc, #372]	; (ad8 <loop+0x2d8>)
     964:	cmp	r1, r7
     966:	beq.n	970 <loop+0x170>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     968:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     96a:	str	r7, [r6, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     96c:	ble.w	1688 <loop+0xe88>
        onPress();
      }
 
      if (millis_held > 50) {
     970:	cmp	r3, #50	; 0x32
     972:	ble.n	982 <loop+0x182>
        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     974:	cbnz	r7, 982 <loop+0x182>
     976:	ldrb.w	r3, [r5, #48]	; 0x30
     97a:	ldr	r6, [pc, #348]	; (ad8 <loop+0x2d8>)
     97c:	cmp	r3, #1
     97e:	beq.w	1364 <loop+0xb64>
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     982:	ldr	r6, [pc, #344]	; (adc <loop+0x2dc>)
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     984:	strb.w	r7, [r5, #48]	; 0x30
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     988:	ldrb.w	r0, [r6, #60]	; 0x3c
          }
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     98c:	str	r2, [r5, #44]	; 0x2c
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     98e:	bl	2bb4 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     992:	cmp	r0, #1
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     994:	mov	r7, r0
     996:	str	r0, [r6, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     998:	beq.w	108c <loop+0x88c>
     99c:	ldr	r3, [r6, #52]	; 0x34
     99e:	ldrb.w	r5, [r6, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9a2:	ldr	r2, [r4, #0]
     9a4:	str	r2, [sp, #116]	; 0x74
	return ret;
     9a6:	ldr	r1, [sp, #116]	; 0x74
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     9a8:	ldr	r2, [pc, #292]	; (ad0 <loop+0x2d0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9aa:	ldr.w	lr, [pc, #280]	; ac4 <loop+0x2c4>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
     9ae:	ldr	r0, [pc, #300]	; (adc <loop+0x2dc>)
     9b0:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     9b2:	smull	r1, r2, r2, r3
     9b6:	asrs	r1, r3, #31
     9b8:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     9bc:	cmp	r5, r7
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
     9be:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     9c0:	str	r2, [r6, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     9c2:	beq.w	105e <loop+0x85e>
     9c6:	ldr.w	r1, [lr]
     9ca:	str	r1, [sp, #112]	; 0x70
	return ret;
     9cc:	ldr	r1, [sp, #112]	; 0x70
        m_lastDebounceTime = millis();
     9ce:	str	r1, [r0, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9d0:	ldr	r0, [r4, #0]
     9d2:	str	r0, [sp, #108]	; 0x6c
	return ret;
     9d4:	ldr	r0, [sp, #108]	; 0x6c
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     9d6:	cmp	r0, r1
     9d8:	beq.n	9ea <loop+0x1ea>
        // and the current changed
        if (current != m_state) {
     9da:	ldr	r1, [r6, #4]
     9dc:	ldr	r5, [pc, #252]	; (adc <loop+0x2dc>)
     9de:	cmp	r1, r7
     9e0:	beq.n	9ea <loop+0x1ea>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     9e2:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     9e4:	str	r7, [r5, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     9e6:	ble.w	1508 <loop+0xd08>
        onPress();
      }
 
      if (millis_held > 50) {
     9ea:	cmp	r3, #50	; 0x32
     9ec:	ble.n	9fc <loop+0x1fc>
        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     9ee:	cbnz	r7, 9fc <loop+0x1fc>
     9f0:	ldrb.w	r3, [r6, #48]	; 0x30
     9f4:	ldr	r5, [pc, #228]	; (adc <loop+0x2dc>)
     9f6:	cmp	r3, #1
     9f8:	beq.w	12b6 <loop+0xab6>
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     9fc:	ldr	r5, [pc, #224]	; (ae0 <loop+0x2e0>)
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     9fe:	strb.w	r7, [r6, #48]	; 0x30
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     a02:	ldrb.w	r0, [r5, #60]	; 0x3c
          }
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     a06:	str	r2, [r6, #44]	; 0x2c
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     a08:	bl	2bb4 <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     a0c:	cmp	r0, #1
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);
     a0e:	mov	r6, r0
     a10:	str	r0, [r5, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     a12:	beq.w	fe8 <loop+0x7e8>
     a16:	ldr	r3, [r5, #52]	; 0x34
     a18:	ldrb.w	r7, [r5, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a1c:	ldr	r2, [r4, #0]
     a1e:	str	r2, [sp, #88]	; 0x58
	return ret;
     a20:	ldr	r1, [sp, #88]	; 0x58
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     a22:	ldr	r2, [pc, #172]	; (ad0 <loop+0x2d0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a24:	ldr.w	lr, [pc, #156]	; ac4 <loop+0x2c4>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
     a28:	ldr	r0, [pc, #180]	; (ae0 <loop+0x2e0>)
     a2a:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     a2c:	smull	r1, r2, r2, r3
     a30:	asrs	r1, r3, #31
     a32:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     a36:	cmp	r7, r6
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
        m_sequence.enterShiftMode();
      }

      millis_held = (millis() - firstTime);
     a38:	str	r3, [r5, #36]	; 0x24
      secs_held = millis_held / 1000;
     a3a:	str	r2, [r5, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     a3c:	beq.w	fe4 <loop+0x7e4>
     a40:	ldr.w	r1, [lr]
     a44:	str	r1, [sp, #84]	; 0x54
	return ret;
     a46:	ldr	r1, [sp, #84]	; 0x54
        m_lastDebounceTime = millis();
     a48:	str	r1, [r0, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a4a:	ldr	r0, [r4, #0]
     a4c:	str	r0, [sp, #80]	; 0x50
	return ret;
     a4e:	ldr	r0, [sp, #80]	; 0x50
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     a50:	cmp	r0, r1
     a52:	beq.n	a64 <loop+0x264>
        // and the current changed
        if (current != m_state) {
     a54:	ldr	r1, [r5, #4]
     a56:	ldr	r7, [pc, #136]	; (ae0 <loop+0x2e0>)
     a58:	cmp	r1, r6
     a5a:	beq.n	a64 <loop+0x264>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     a5c:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     a5e:	str	r6, [r7, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     a60:	ble.w	1608 <loop+0xe08>
        onPress();
      }
 
      if (millis_held > 50) {
     a64:	cmp	r3, #50	; 0x32
     a66:	ble.n	a76 <loop+0x276>
        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     a68:	cbnz	r6, a76 <loop+0x276>
     a6a:	ldrb.w	r3, [r5, #48]	; 0x30
     a6e:	ldr	r7, [pc, #112]	; (ae0 <loop+0x2e0>)
     a70:	cmp	r3, #1
     a72:	beq.w	12f0 <loop+0xaf0>
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     a76:	ldr	r7, [pc, #108]	; (ae4 <loop+0x2e4>)
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     a78:	strb.w	r6, [r5, #48]	; 0x30
     a7c:	ldrb	r3, [r7, #16]
      prev_secs_held = secs_held;
     a7e:	str	r2, [r5, #44]	; 0x2c
     a80:	cmp	r3, #0
     a82:	beq.w	f74 <loop+0x774>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a86:	ldr	r3, [r4, #0]
     a88:	str	r3, [sp, #72]	; 0x48
	return ret;
     a8a:	ldr	r3, [sp, #72]	; 0x48
     a8c:	ldr	r1, [r7, #8]
     a8e:	ldr	r2, [r7, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a90:	ldr	r6, [pc, #48]	; (ac4 <loop+0x2c4>)
     a92:	subs	r3, r3, r1
     a94:	cmp	r2, r3
     a96:	bcc.w	f54 <loop+0x754>
     a9a:	ldr	r5, [pc, #76]	; (ae8 <loop+0x2e8>)
     a9c:	ldrb	r3, [r5, #16]
     a9e:	cmp	r3, #0
     aa0:	beq.w	f0c <loop+0x70c>
     aa4:	ldr	r3, [r4, #0]
     aa6:	str	r3, [sp, #60]	; 0x3c
	return ret;
     aa8:	ldr	r3, [sp, #60]	; 0x3c
     aaa:	ldr	r1, [r5, #8]
     aac:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     aae:	ldr	r7, [pc, #20]	; (ac4 <loop+0x2c4>)
     ab0:	subs	r3, r3, r1
     ab2:	cmp	r2, r3
     ab4:	bcc.w	eec <loop+0x6ec>
     ab8:	ldr	r5, [pc, #48]	; (aec <loop+0x2ec>)
     aba:	ldrb	r3, [r5, #16]
     abc:	cmp	r3, #0
     abe:	beq.w	ea4 <loop+0x6a4>
     ac2:	b.n	af0 <loop+0x2f0>
     ac4:	.word	0x1fff192c
     ac8:	.word	0x1fff164c
     acc:	.word	0x1fff160c
     ad0:	.word	0x10624dd3
     ad4:	.word	0x1fff168c
     ad8:	.word	0x1fff16cc
     adc:	.word	0x1fff170c
     ae0:	.word	0x1fff174c
     ae4:	.word	0x1fff18b4
     ae8:	.word	0x1fff18cc
     aec:	.word	0x1fff18e4
     af0:	ldr	r3, [r4, #0]
     af2:	str	r3, [sp, #48]	; 0x30
	return ret;
     af4:	ldr	r3, [sp, #48]	; 0x30
     af6:	ldr	r1, [r5, #8]
     af8:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     afa:	ldr	r7, [pc, #656]	; (d8c <loop+0x58c>)
     afc:	subs	r3, r3, r1
     afe:	cmp	r2, r3
     b00:	bcc.w	e84 <loop+0x684>
     b04:	ldr	r5, [pc, #648]	; (d90 <loop+0x590>)
     b06:	ldrb	r3, [r5, #16]
     b08:	cmp	r3, #0
     b0a:	beq.w	e3c <loop+0x63c>
     b0e:	ldr	r3, [r4, #0]
     b10:	str	r3, [sp, #36]	; 0x24
	return ret;
     b12:	ldr	r3, [sp, #36]	; 0x24
     b14:	ldr	r1, [r5, #8]
     b16:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b18:	ldr	r7, [pc, #624]	; (d8c <loop+0x58c>)
     b1a:	subs	r3, r3, r1
     b1c:	cmp	r2, r3
     b1e:	bcc.w	e1c <loop+0x61c>
     b22:	ldr	r5, [pc, #624]	; (d94 <loop+0x594>)
     b24:	ldrb	r3, [r5, #16]
     b26:	cmp	r3, #0
     b28:	beq.w	dd4 <loop+0x5d4>
     b2c:	ldr	r3, [r4, #0]
     b2e:	str	r3, [sp, #24]
	return ret;
     b30:	ldr	r3, [sp, #24]
     b32:	ldr	r1, [r5, #8]
     b34:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b36:	ldr	r7, [pc, #596]	; (d8c <loop+0x58c>)
     b38:	subs	r3, r3, r1
     b3a:	cmp	r2, r3
     b3c:	bcc.w	db4 <loop+0x5b4>
     b40:	ldr	r5, [pc, #596]	; (d98 <loop+0x598>)
     b42:	ldrb	r3, [r5, #16]
     b44:	cmp	r3, #0
     b46:	beq.w	d46 <loop+0x546>
     b4a:	ldr	r3, [r4, #0]
     b4c:	str	r3, [sp, #12]
	return ret;
     b4e:	ldr	r3, [sp, #12]
     b50:	ldr	r1, [r5, #8]
     b52:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b54:	ldr	r7, [pc, #564]	; (d8c <loop+0x58c>)
     b56:	subs	r3, r3, r1
     b58:	cmp	r2, r3
     b5a:	bcc.w	d26 <loop+0x526>
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     b5e:	ldr	r4, [pc, #572]	; (d9c <loop+0x59c>)
     b60:	ldrb	r0, [r4, #0]
     b62:	bl	29c4 <analogRead>

      int diff = abs(m_value - m_lastValue);
     b66:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     b68:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     b6a:	cmp	r0, r3
     b6c:	beq.n	bb8 <loop+0x3b8>
     b6e:	subs	r3, r0, r3
     b70:	cmp	r3, #0
     b72:	it	lt
     b74:	neglt	r3, r3
     b76:	cmp	r3, #10
     b78:	ble.n	bb8 <loop+0x3b8>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     b7a:	ldrb	r3, [r4, #24]
     b7c:	cmp	r3, #4
     b7e:	beq.w	1708 <loop+0xf08>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     b82:	ldr	r3, [pc, #540]	; (da0 <loop+0x5a0>)
     b84:	ldrb	r3, [r3, #0]
     b86:	cmp	r3, #1
     b88:	beq.w	1ac8 <loop+0x12c8>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     b8c:	cmp	r3, #0
     b8e:	beq.w	1468 <loop+0xc68>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     b92:	cmp	r3, #2
     b94:	bne.n	bb6 <loop+0x3b6>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     b96:	ldr	r2, [r4, #16]
     b98:	ldr	r1, [r4, #12]
      m_controller.controlChange(0, 123, 127);
    };

    void controlLength (int value) {
      int newValue = map(value, 0, 1023, 24, 1);
      m_length = newValue;
     b9a:	mvn.w	r3, #21
     b9e:	mul.w	r3, r3, r0
     ba2:	cmp	r3, #0
     ba4:	add.w	r2, r2, r1, lsl #2
     ba8:	it	lt
     baa:	addwlt	r3, r3, #1023	; 0x3ff
     bae:	ldr	r2, [r2, #4]
     bb0:	asrs	r3, r3, #10
     bb2:	adds	r3, #24
     bb4:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     bb6:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     bb8:	ldr	r4, [pc, #488]	; (da4 <loop+0x5a4>)
     bba:	ldrb	r0, [r4, #0]
     bbc:	bl	29c4 <analogRead>

      int diff = abs(m_value - m_lastValue);
     bc0:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     bc2:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     bc4:	cmp	r0, r3
     bc6:	beq.n	c12 <loop+0x412>
     bc8:	subs	r3, r0, r3
     bca:	cmp	r3, #0
     bcc:	it	lt
     bce:	neglt	r3, r3
     bd0:	cmp	r3, #10
     bd2:	ble.n	c12 <loop+0x412>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     bd4:	ldrb	r3, [r4, #24]
     bd6:	cmp	r3, #4
     bd8:	beq.w	1750 <loop+0xf50>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     bdc:	ldr	r3, [pc, #448]	; (da0 <loop+0x5a0>)
     bde:	ldrb	r3, [r3, #0]
     be0:	cmp	r3, #1
     be2:	beq.w	1a8c <loop+0x128c>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     be6:	cmp	r3, #0
     be8:	beq.w	13f0 <loop+0xbf0>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     bec:	cmp	r3, #2
     bee:	bne.n	c10 <loop+0x410>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     bf0:	ldr	r2, [r4, #16]
     bf2:	ldr	r1, [r4, #12]
     bf4:	mvn.w	r3, #21
     bf8:	mul.w	r3, r3, r0
     bfc:	cmp	r3, #0
     bfe:	add.w	r2, r2, r1, lsl #2
     c02:	it	lt
     c04:	addwlt	r3, r3, #1023	; 0x3ff
     c08:	ldr	r2, [r2, #4]
     c0a:	asrs	r3, r3, #10
     c0c:	adds	r3, #24
     c0e:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     c10:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     c12:	ldr	r4, [pc, #404]	; (da8 <loop+0x5a8>)
     c14:	ldrb	r0, [r4, #0]
     c16:	bl	29c4 <analogRead>

      int diff = abs(m_value - m_lastValue);
     c1a:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     c1c:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     c1e:	cmp	r0, r3
     c20:	beq.n	c6c <loop+0x46c>
     c22:	subs	r3, r0, r3
     c24:	cmp	r3, #0
     c26:	it	lt
     c28:	neglt	r3, r3
     c2a:	cmp	r3, #10
     c2c:	ble.n	c6c <loop+0x46c>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     c2e:	ldrb	r3, [r4, #24]
     c30:	cmp	r3, #4
     c32:	beq.w	176e <loop+0xf6e>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     c36:	ldr	r3, [pc, #360]	; (da0 <loop+0x5a0>)
     c38:	ldrb	r3, [r3, #0]
     c3a:	cmp	r3, #1
     c3c:	beq.w	1aaa <loop+0x12aa>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     c40:	cmp	r3, #0
     c42:	beq.w	144a <loop+0xc4a>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     c46:	cmp	r3, #2
     c48:	bne.n	c6a <loop+0x46a>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     c4a:	ldr	r2, [r4, #16]
     c4c:	ldr	r1, [r4, #12]
     c4e:	mvn.w	r3, #21
     c52:	mul.w	r3, r3, r0
     c56:	cmp	r3, #0
     c58:	add.w	r2, r2, r1, lsl #2
     c5c:	it	lt
     c5e:	addwlt	r3, r3, #1023	; 0x3ff
     c62:	ldr	r2, [r2, #4]
     c64:	asrs	r3, r3, #10
     c66:	adds	r3, #24
     c68:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     c6a:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     c6c:	ldr	r4, [pc, #316]	; (dac <loop+0x5ac>)
     c6e:	ldrb	r0, [r4, #0]
     c70:	bl	29c4 <analogRead>

      int diff = abs(m_value - m_lastValue);
     c74:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     c76:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     c78:	cmp	r0, r3
     c7a:	beq.n	cc6 <loop+0x4c6>
     c7c:	subs	r3, r0, r3
     c7e:	cmp	r3, #0
     c80:	it	lt
     c82:	neglt	r3, r3
     c84:	cmp	r3, #10
     c86:	ble.n	cc6 <loop+0x4c6>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     c88:	ldrb	r3, [r4, #24]
     c8a:	cmp	r3, #4
     c8c:	beq.w	178c <loop+0xf8c>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     c90:	ldr	r3, [pc, #268]	; (da0 <loop+0x5a0>)
     c92:	ldrb	r3, [r3, #0]
     c94:	cmp	r3, #1
     c96:	beq.w	1a48 <loop+0x1248>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     c9a:	cmp	r3, #0
     c9c:	beq.w	142c <loop+0xc2c>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     ca0:	cmp	r3, #2
     ca2:	bne.n	cc4 <loop+0x4c4>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     ca4:	ldr	r2, [r4, #16]
     ca6:	ldr	r1, [r4, #12]
     ca8:	mvn.w	r3, #21
     cac:	mul.w	r3, r3, r0
     cb0:	cmp	r3, #0
     cb2:	add.w	r2, r2, r1, lsl #2
     cb6:	it	lt
     cb8:	addwlt	r3, r3, #1023	; 0x3ff
     cbc:	ldr	r2, [r2, #4]
     cbe:	asrs	r3, r3, #10
     cc0:	adds	r3, #24
     cc2:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     cc4:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     cc6:	ldr	r4, [pc, #232]	; (db0 <loop+0x5b0>)
     cc8:	ldrb	r0, [r4, #0]
     cca:	bl	29c4 <analogRead>

      int diff = abs(m_value - m_lastValue);
     cce:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     cd0:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     cd2:	cmp	r0, r3
     cd4:	beq.n	d20 <loop+0x520>
     cd6:	subs	r3, r0, r3
     cd8:	cmp	r3, #0
     cda:	it	lt
     cdc:	neglt	r3, r3
     cde:	cmp	r3, #10
     ce0:	ble.n	d20 <loop+0x520>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     ce2:	ldrb	r3, [r4, #24]
     ce4:	cmp	r3, #4
     ce6:	beq.w	1726 <loop+0xf26>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     cea:	ldr	r3, [pc, #180]	; (da0 <loop+0x5a0>)
     cec:	ldrb	r3, [r3, #0]
     cee:	cmp	r3, #1
     cf0:	beq.w	1a2a <loop+0x122a>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     cf4:	cmp	r3, #0
     cf6:	beq.w	140e <loop+0xc0e>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     cfa:	cmp	r3, #2
     cfc:	bne.n	d1e <loop+0x51e>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     cfe:	ldr	r2, [r4, #16]
     d00:	ldr	r1, [r4, #12]
     d02:	mvn.w	r3, #21
     d06:	mul.w	r3, r3, r0
     d0a:	cmp	r3, #0
     d0c:	add.w	r2, r2, r1, lsl #2
     d10:	it	lt
     d12:	addwlt	r3, r3, #1023	; 0x3ff
     d16:	ldr	r2, [r2, #4]
     d18:	asrs	r3, r3, #10
     d1a:	adds	r3, #24
     d1c:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     d1e:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     d20:	add	sp, #264	; 0x108
     d22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        digitalWrite(m_pin, !digitalRead(m_pin));
     d26:	ldrb	r6, [r5, #0]
     d28:	mov	r0, r6
     d2a:	bl	2bb4 <digitalRead>
     d2e:	clz	r1, r0
     d32:	lsrs	r1, r1, #5
     d34:	mov	r0, r6
     d36:	bl	2ba8 <digitalWrite>
     d3a:	ldr	r3, [r7, #0]
     d3c:	str	r3, [sp, #16]
	return ret;
     d3e:	ldr	r3, [sp, #16]
        blinking = false;
        lastBlink = millis();        
     d40:	str	r3, [r5, #8]
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     d42:	movs	r3, #0
     d44:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     d46:	ldr	r6, [r5, #20]
     d48:	ldr	r5, [pc, #76]	; (d98 <loop+0x598>)
     d4a:	cmp	r6, #0
     d4c:	ble.w	b5e <loop+0x35e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d50:	ldr	r3, [r4, #0]
     d52:	str	r3, [sp, #8]
	return ret;
     d54:	ldr	r3, [sp, #8]
     d56:	ldr	r1, [r5, #8]
     d58:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d5a:	ldr	r7, [pc, #48]	; (d8c <loop+0x58c>)
     d5c:	subs	r3, r3, r1
     d5e:	cmp	r2, r3
     d60:	bcs.w	b5e <loop+0x35e>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     d64:	ldrb	r4, [r5, #0]
     d66:	mov	r0, r4
     d68:	bl	2bb4 <digitalRead>
     d6c:	clz	r1, r0
     d70:	lsrs	r1, r1, #5
     d72:	mov	r0, r4
     d74:	bl	2ba8 <digitalWrite>
     d78:	ldr	r3, [r7, #0]
     d7a:	str	r3, [sp, #260]	; 0x104
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     d7c:	subs	r6, #2
	return ret;
     d7e:	ldr	r2, [sp, #260]	; 0x104
     d80:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d82:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     d84:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d86:	strb	r3, [r5, #16]
     d88:	b.n	b5e <loop+0x35e>
     d8a:	nop
     d8c:	.word	0x1fff192c
     d90:	.word	0x1fff18fc
     d94:	.word	0x1fff15d8
     d98:	.word	0x1fff15f0
     d9c:	.word	0x1fff1814
     da0:	.word	0x1fff18b0
     da4:	.word	0x1fff1830
     da8:	.word	0x1fff184c
     dac:	.word	0x1fff1868
     db0:	.word	0x1fff1884
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     db4:	ldrb	r6, [r5, #0]
     db6:	mov	r0, r6
     db8:	bl	2bb4 <digitalRead>
     dbc:	clz	r1, r0
     dc0:	lsrs	r1, r1, #5
     dc2:	mov	r0, r6
     dc4:	bl	2ba8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     dc8:	ldr	r3, [r7, #0]
     dca:	str	r3, [sp, #28]
	return ret;
     dcc:	ldr	r3, [sp, #28]
        blinking = false;
        lastBlink = millis();        
     dce:	str	r3, [r5, #8]
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     dd0:	movs	r3, #0
     dd2:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     dd4:	ldr	r6, [r5, #20]
     dd6:	ldr	r5, [pc, #652]	; (1064 <loop+0x864>)
     dd8:	cmp	r6, #0
     dda:	ble.w	b40 <loop+0x340>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     dde:	ldr	r3, [r4, #0]
     de0:	str	r3, [sp, #20]
	return ret;
     de2:	ldr	r3, [sp, #20]
     de4:	ldr	r1, [r5, #8]
     de6:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     de8:	ldr.w	r8, [pc, #660]	; 1080 <loop+0x880>
     dec:	subs	r3, r3, r1
     dee:	cmp	r2, r3
     df0:	bcs.w	b40 <loop+0x340>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     df4:	ldrb	r7, [r5, #0]
     df6:	mov	r0, r7
     df8:	bl	2bb4 <digitalRead>
     dfc:	clz	r1, r0
     e00:	lsrs	r1, r1, #5
     e02:	mov	r0, r7
     e04:	bl	2ba8 <digitalWrite>
     e08:	ldr.w	r3, [r8]
     e0c:	str	r3, [sp, #256]	; 0x100
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     e0e:	subs	r6, #2
	return ret;
     e10:	ldr	r2, [sp, #256]	; 0x100
     e12:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     e14:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     e16:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     e18:	strb	r3, [r5, #16]
     e1a:	b.n	b40 <loop+0x340>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     e1c:	ldrb	r6, [r5, #0]
     e1e:	mov	r0, r6
     e20:	bl	2bb4 <digitalRead>
     e24:	clz	r1, r0
     e28:	lsrs	r1, r1, #5
     e2a:	mov	r0, r6
     e2c:	bl	2ba8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e30:	ldr	r3, [r7, #0]
     e32:	str	r3, [sp, #40]	; 0x28
	return ret;
     e34:	ldr	r3, [sp, #40]	; 0x28
        blinking = false;
        lastBlink = millis();        
     e36:	str	r3, [r5, #8]
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     e38:	movs	r3, #0
     e3a:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     e3c:	ldr	r6, [r5, #20]
     e3e:	ldr	r5, [pc, #552]	; (1068 <loop+0x868>)
     e40:	cmp	r6, #0
     e42:	ble.w	b22 <loop+0x322>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e46:	ldr	r3, [r4, #0]
     e48:	str	r3, [sp, #32]
	return ret;
     e4a:	ldr	r3, [sp, #32]
     e4c:	ldr	r1, [r5, #8]
     e4e:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e50:	ldr.w	r8, [pc, #556]	; 1080 <loop+0x880>
     e54:	subs	r3, r3, r1
     e56:	cmp	r2, r3
     e58:	bcs.w	b22 <loop+0x322>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     e5c:	ldrb	r7, [r5, #0]
     e5e:	mov	r0, r7
     e60:	bl	2bb4 <digitalRead>
     e64:	clz	r1, r0
     e68:	lsrs	r1, r1, #5
     e6a:	mov	r0, r7
     e6c:	bl	2ba8 <digitalWrite>
     e70:	ldr.w	r3, [r8]
     e74:	str	r3, [sp, #252]	; 0xfc
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     e76:	subs	r6, #2
	return ret;
     e78:	ldr	r2, [sp, #252]	; 0xfc
     e7a:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     e7c:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     e7e:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     e80:	strb	r3, [r5, #16]
     e82:	b.n	b22 <loop+0x322>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     e84:	ldrb	r6, [r5, #0]
     e86:	mov	r0, r6
     e88:	bl	2bb4 <digitalRead>
     e8c:	clz	r1, r0
     e90:	lsrs	r1, r1, #5
     e92:	mov	r0, r6
     e94:	bl	2ba8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e98:	ldr	r3, [r7, #0]
     e9a:	str	r3, [sp, #52]	; 0x34
	return ret;
     e9c:	ldr	r3, [sp, #52]	; 0x34
        blinking = false;
        lastBlink = millis();        
     e9e:	str	r3, [r5, #8]
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     ea0:	movs	r3, #0
     ea2:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     ea4:	ldr	r6, [r5, #20]
     ea6:	ldr	r5, [pc, #452]	; (106c <loop+0x86c>)
     ea8:	cmp	r6, #0
     eaa:	ble.w	b04 <loop+0x304>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     eae:	ldr	r3, [r4, #0]
     eb0:	str	r3, [sp, #44]	; 0x2c
	return ret;
     eb2:	ldr	r3, [sp, #44]	; 0x2c
     eb4:	ldr	r1, [r5, #8]
     eb6:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     eb8:	ldr.w	r8, [pc, #452]	; 1080 <loop+0x880>
     ebc:	subs	r3, r3, r1
     ebe:	cmp	r2, r3
     ec0:	bcs.w	b04 <loop+0x304>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     ec4:	ldrb	r7, [r5, #0]
     ec6:	mov	r0, r7
     ec8:	bl	2bb4 <digitalRead>
     ecc:	clz	r1, r0
     ed0:	lsrs	r1, r1, #5
     ed2:	mov	r0, r7
     ed4:	bl	2ba8 <digitalWrite>
     ed8:	ldr.w	r3, [r8]
     edc:	str	r3, [sp, #248]	; 0xf8
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     ede:	subs	r6, #2
	return ret;
     ee0:	ldr	r2, [sp, #248]	; 0xf8
     ee2:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     ee4:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     ee6:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     ee8:	strb	r3, [r5, #16]
     eea:	b.n	b04 <loop+0x304>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     eec:	ldrb	r6, [r5, #0]
     eee:	mov	r0, r6
     ef0:	bl	2bb4 <digitalRead>
     ef4:	clz	r1, r0
     ef8:	lsrs	r1, r1, #5
     efa:	mov	r0, r6
     efc:	bl	2ba8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f00:	ldr	r3, [r7, #0]
     f02:	str	r3, [sp, #64]	; 0x40
	return ret;
     f04:	ldr	r3, [sp, #64]	; 0x40
        blinking = false;
        lastBlink = millis();        
     f06:	str	r3, [r5, #8]
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     f08:	movs	r3, #0
     f0a:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     f0c:	ldr	r6, [r5, #20]
     f0e:	ldr	r5, [pc, #352]	; (1070 <loop+0x870>)
     f10:	cmp	r6, #0
     f12:	ble.w	ab8 <loop+0x2b8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f16:	ldr	r3, [r4, #0]
     f18:	str	r3, [sp, #56]	; 0x38
	return ret;
     f1a:	ldr	r3, [sp, #56]	; 0x38
     f1c:	ldr	r1, [r5, #8]
     f1e:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f20:	ldr.w	r8, [pc, #348]	; 1080 <loop+0x880>
     f24:	subs	r3, r3, r1
     f26:	cmp	r2, r3
     f28:	bcs.w	ab8 <loop+0x2b8>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     f2c:	ldrb	r7, [r5, #0]
     f2e:	mov	r0, r7
     f30:	bl	2bb4 <digitalRead>
     f34:	clz	r1, r0
     f38:	lsrs	r1, r1, #5
     f3a:	mov	r0, r7
     f3c:	bl	2ba8 <digitalWrite>
     f40:	ldr.w	r3, [r8]
     f44:	str	r3, [sp, #244]	; 0xf4
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     f46:	subs	r6, #2
	return ret;
     f48:	ldr	r2, [sp, #244]	; 0xf4
     f4a:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     f4c:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     f4e:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     f50:	strb	r3, [r5, #16]
     f52:	b.n	ab8 <loop+0x2b8>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     f54:	ldrb	r5, [r7, #0]
     f56:	mov	r0, r5
     f58:	bl	2bb4 <digitalRead>
     f5c:	clz	r1, r0
     f60:	lsrs	r1, r1, #5
     f62:	mov	r0, r5
     f64:	bl	2ba8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f68:	ldr	r3, [r6, #0]
     f6a:	str	r3, [sp, #76]	; 0x4c
	return ret;
     f6c:	ldr	r3, [sp, #76]	; 0x4c
        blinking = false;
        lastBlink = millis();        
     f6e:	str	r3, [r7, #8]
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     f70:	movs	r3, #0
     f72:	strb	r3, [r7, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     f74:	ldr	r6, [r7, #20]
     f76:	ldr	r5, [pc, #252]	; (1074 <loop+0x874>)
     f78:	cmp	r6, #0
     f7a:	ble.w	a9a <loop+0x29a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f7e:	ldr	r3, [r4, #0]
     f80:	str	r3, [sp, #68]	; 0x44
	return ret;
     f82:	ldr	r3, [sp, #68]	; 0x44
     f84:	ldr	r1, [r5, #8]
     f86:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f88:	ldr.w	r8, [pc, #244]	; 1080 <loop+0x880>
     f8c:	subs	r3, r3, r1
     f8e:	cmp	r2, r3
     f90:	bcs.w	a9a <loop+0x29a>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     f94:	ldrb	r7, [r5, #0]
     f96:	mov	r0, r7
     f98:	bl	2bb4 <digitalRead>
     f9c:	clz	r1, r0
     fa0:	lsrs	r1, r1, #5
     fa2:	mov	r0, r7
     fa4:	bl	2ba8 <digitalWrite>
     fa8:	ldr.w	r3, [r8]
     fac:	str	r3, [sp, #240]	; 0xf0
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     fae:	subs	r6, #2
	return ret;
     fb0:	ldr	r2, [sp, #240]	; 0xf0
     fb2:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     fb4:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     fb6:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     fb8:	strb	r3, [r5, #16]
     fba:	b.n	a9a <loop+0x29a>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     fbc:	ldr	r3, [pc, #184]	; (1078 <loop+0x878>)
      // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     fbe:	ldrb	r3, [r3, #0]
     fc0:	cmp	r3, #250	; 0xfa
     fc2:	beq.w	17aa <loop+0xfaa>
     fc6:	cmp	r3, #252	; 0xfc
     fc8:	beq.w	139e <loop+0xb9e>
     fcc:	cmp	r3, #248	; 0xf8
     fce:	beq.w	1840 <loop+0x1040>
     fd2:	movs	r1, #35	; 0x23
     fd4:	ldr	r0, [pc, #164]	; (107c <loop+0x87c>)
     fd6:	ldr	r4, [pc, #168]	; (1080 <loop+0x880>)
     fd8:	bl	2598 <usb_serial_write>
     fdc:	ldr	r0, [pc, #164]	; (1084 <loop+0x884>)
     fde:	bl	410c <Print::println()>
     fe2:	b.n	814 <loop+0x14>
     fe4:	ldr	r1, [r0, #20]
     fe6:	b.n	a4a <loop+0x24a>
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     fe8:	ldrb.w	r7, [r5, #48]	; 0x30
     fec:	cbnz	r7, 1052 <loop+0x852>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     fee:	ldr	r3, [r4, #0]
     ff0:	str	r3, [sp, #104]	; 0x68
	return ret;
     ff2:	ldr	r2, [sp, #104]	; 0x68
     ff4:	ldr	r3, [r5, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ff6:	ldr.w	sl, [pc, #136]	; 1080 <loop+0x880>
     ffa:	subs	r2, r2, r3
     ffc:	cmp	r2, #200	; 0xc8
     ffe:	bls.n	105a <loop+0x85a>
        firstTime = millis();
        m_led.blink();
    1000:	ldr.w	r8, [r5, #24]
    1004:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1008:	ldrb.w	r9, [r8]
    100c:	str	r3, [sp, #100]	; 0x64
	return ret;
    100e:	ldr	r3, [sp, #100]	; 0x64
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    1010:	str	r3, [r5, #52]	; 0x34
    1012:	mov	r0, r9
    1014:	bl	2bb4 <digitalRead>
    1018:	clz	r1, r0
    101c:	lsrs	r1, r1, #5
    101e:	mov	r0, r9
    1020:	bl	2ba8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1024:	ldr.w	r3, [sl]
    1028:	str	r3, [sp, #236]	; 0xec
	return ret;
    102a:	ldr	r3, [sp, #236]	; 0xec
      blinking = true;
    102c:	strb.w	r6, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1030:	str.w	r3, [r8, #8]
    1034:	movs	r1, #7
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    1036:	str.w	r7, [r8, #20]
    103a:	ldr	r0, [pc, #76]	; (1088 <loop+0x888>)
    103c:	bl	2598 <usb_serial_write>
    1040:	ldr	r0, [pc, #64]	; (1084 <loop+0x884>)
    1042:	bl	410c <Print::println()>
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
    1046:	ldr	r6, [r5, #32]
    1048:	cmp	r6, #1
    104a:	bne.w	a16 <loop+0x216>
    104e:	ldrb.w	r7, [r5, #48]	; 0x30
    1052:	ldr	r3, [r5, #52]	; 0x34
    1054:	cmp	r7, #1
    1056:	beq.w	18c2 <loop+0x10c2>
    105a:	ldr	r6, [r5, #32]
    105c:	b.n	a1c <loop+0x21c>
    105e:	ldr	r1, [r0, #20]
    1060:	b.n	9d0 <loop+0x1d0>
    1062:	nop
    1064:	.word	0x1fff15d8
    1068:	.word	0x1fff18fc
    106c:	.word	0x1fff18e4
    1070:	.word	0x1fff18cc
    1074:	.word	0x1fff18b4
    1078:	.word	0x1fff1de8
    107c:	.word	0x000056ac
    1080:	.word	0x1fff192c
    1084:	.word	0x1fff0c70
    1088:	.word	0x000056a4
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
    108c:	ldrb.w	r5, [r6, #48]	; 0x30
    1090:	cbnz	r5, 10f6 <loop+0x8f6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1092:	ldr	r3, [r4, #0]
    1094:	str	r3, [sp, #132]	; 0x84
	return ret;
    1096:	ldr	r2, [sp, #132]	; 0x84
    1098:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    109a:	ldr.w	sl, [pc, #848]	; 13ec <loop+0xbec>
    109e:	subs	r2, r2, r3
    10a0:	cmp	r2, #200	; 0xc8
    10a2:	bls.n	10fe <loop+0x8fe>
        firstTime = millis();
        m_led.blink();
    10a4:	ldr.w	r8, [r6, #24]
    10a8:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    10ac:	ldrb.w	r9, [r8]
    10b0:	str	r3, [sp, #128]	; 0x80
	return ret;
    10b2:	ldr	r3, [sp, #128]	; 0x80
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    10b4:	str	r3, [r6, #52]	; 0x34
    10b6:	mov	r0, r9
    10b8:	bl	2bb4 <digitalRead>
    10bc:	clz	r1, r0
    10c0:	lsrs	r1, r1, #5
    10c2:	mov	r0, r9
    10c4:	bl	2ba8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10c8:	ldr.w	r3, [sl]
    10cc:	str	r3, [sp, #232]	; 0xe8
	return ret;
    10ce:	ldr	r3, [sp, #232]	; 0xe8
      blinking = true;
    10d0:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    10d4:	str.w	r3, [r8, #8]
    10d8:	movs	r1, #7
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    10da:	str.w	r5, [r8, #20]
    10de:	ldr	r0, [pc, #760]	; (13d8 <loop+0xbd8>)
    10e0:	bl	2598 <usb_serial_write>
    10e4:	ldr	r0, [pc, #756]	; (13dc <loop+0xbdc>)
    10e6:	bl	410c <Print::println()>
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
    10ea:	ldr	r7, [r6, #32]
    10ec:	cmp	r7, #1
    10ee:	bne.w	99c <loop+0x19c>
    10f2:	ldrb.w	r5, [r6, #48]	; 0x30
    10f6:	ldr	r3, [r6, #52]	; 0x34
    10f8:	cmp	r5, #1
    10fa:	beq.w	19e2 <loop+0x11e2>
    10fe:	ldr	r7, [r6, #32]
    1100:	b.n	9a2 <loop+0x1a2>
    1102:	ldr	r1, [r0, #20]
    1104:	b.w	8dc <loop+0xdc>
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
    1108:	ldrb.w	r5, [r6, #48]	; 0x30
    110c:	cbnz	r5, 1172 <loop+0x972>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    110e:	ldr	r3, [r4, #0]
    1110:	str	r3, [sp, #188]	; 0xbc
	return ret;
    1112:	ldr	r2, [sp, #188]	; 0xbc
    1114:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1116:	ldr.w	sl, [pc, #724]	; 13ec <loop+0xbec>
    111a:	subs	r2, r2, r3
    111c:	cmp	r2, #200	; 0xc8
    111e:	bls.n	117a <loop+0x97a>
        firstTime = millis();
        m_led.blink();
    1120:	ldr.w	r8, [r6, #24]
    1124:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1128:	ldrb.w	r9, [r8]
    112c:	str	r3, [sp, #184]	; 0xb8
	return ret;
    112e:	ldr	r3, [sp, #184]	; 0xb8
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    1130:	str	r3, [r6, #52]	; 0x34
    1132:	mov	r0, r9
    1134:	bl	2bb4 <digitalRead>
    1138:	clz	r1, r0
    113c:	lsrs	r1, r1, #5
    113e:	mov	r0, r9
    1140:	bl	2ba8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1144:	ldr.w	r3, [sl]
    1148:	str	r3, [sp, #224]	; 0xe0
	return ret;
    114a:	ldr	r3, [sp, #224]	; 0xe0
      blinking = true;
    114c:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1150:	str.w	r3, [r8, #8]
    1154:	movs	r1, #7
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    1156:	str.w	r5, [r8, #20]
    115a:	ldr	r0, [pc, #636]	; (13d8 <loop+0xbd8>)
    115c:	bl	2598 <usb_serial_write>
    1160:	ldr	r0, [pc, #632]	; (13dc <loop+0xbdc>)
    1162:	bl	410c <Print::println()>
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
    1166:	ldr	r7, [r6, #32]
    1168:	cmp	r7, #1
    116a:	bne.w	8a8 <loop+0xa8>
    116e:	ldrb.w	r5, [r6, #48]	; 0x30
    1172:	ldr	r3, [r6, #52]	; 0x34
    1174:	cmp	r5, #1
    1176:	beq.w	199a <loop+0x119a>
    117a:	ldr	r7, [r6, #32]
    117c:	b.w	8ae <loop+0xae>
    1180:	ldr	r1, [r0, #20]
    1182:	b.w	862 <loop+0x62>
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
    1186:	ldrb.w	r6, [r5, #48]	; 0x30
    118a:	cbnz	r6, 11f0 <loop+0x9f0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    118c:	ldr	r3, [r4, #0]
    118e:	str	r3, [sp, #216]	; 0xd8
	return ret;
    1190:	ldr	r2, [sp, #216]	; 0xd8
    1192:	ldr	r3, [r5, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1194:	ldr.w	sl, [pc, #596]	; 13ec <loop+0xbec>
    1198:	subs	r2, r2, r3
    119a:	cmp	r2, #200	; 0xc8
    119c:	bls.n	11f8 <loop+0x9f8>
        firstTime = millis();
        m_led.blink();
    119e:	ldr.w	r8, [r5, #24]
    11a2:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    11a6:	ldrb.w	r9, [r8]
    11aa:	str	r3, [sp, #212]	; 0xd4
	return ret;
    11ac:	ldr	r3, [sp, #212]	; 0xd4
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    11ae:	str	r3, [r5, #52]	; 0x34
    11b0:	mov	r0, r9
    11b2:	bl	2bb4 <digitalRead>
    11b6:	clz	r1, r0
    11ba:	lsrs	r1, r1, #5
    11bc:	mov	r0, r9
    11be:	bl	2ba8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11c2:	ldr.w	r3, [sl]
    11c6:	str	r3, [sp, #220]	; 0xdc
	return ret;
    11c8:	ldr	r3, [sp, #220]	; 0xdc
      blinking = true;
    11ca:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    11ce:	str.w	r3, [r8, #8]
    11d2:	movs	r1, #7
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    11d4:	str.w	r6, [r8, #20]
    11d8:	ldr	r0, [pc, #508]	; (13d8 <loop+0xbd8>)
    11da:	bl	2598 <usb_serial_write>
    11de:	ldr	r0, [pc, #508]	; (13dc <loop+0xbdc>)
    11e0:	bl	410c <Print::println()>
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
    11e4:	ldr	r7, [r5, #32]
    11e6:	cmp	r7, #1
    11e8:	bne.w	82e <loop+0x2e>
    11ec:	ldrb.w	r6, [r5, #48]	; 0x30
    11f0:	ldr	r3, [r5, #52]	; 0x34
    11f2:	cmp	r6, #1
    11f4:	beq.w	1952 <loop+0x1152>
    11f8:	ldr	r7, [r5, #32]
    11fa:	b.w	834 <loop+0x34>
    11fe:	ldr	r1, [r0, #20]
    1200:	b.w	956 <loop+0x156>
    // and if i compare millis() - x > z i check if z time has passed
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
    1204:	ldrb.w	r6, [r5, #48]	; 0x30
    1208:	cbnz	r6, 126e <loop+0xa6e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    120a:	ldr	r3, [r4, #0]
    120c:	str	r3, [sp, #160]	; 0xa0
	return ret;
    120e:	ldr	r2, [sp, #160]	; 0xa0
    1210:	ldr	r3, [r5, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1212:	ldr.w	sl, [pc, #472]	; 13ec <loop+0xbec>
    1216:	subs	r2, r2, r3
    1218:	cmp	r2, #200	; 0xc8
    121a:	bls.n	1276 <loop+0xa76>
        firstTime = millis();
        m_led.blink();
    121c:	ldr.w	r8, [r5, #24]
    1220:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1224:	ldrb.w	r9, [r8]
    1228:	str	r3, [sp, #156]	; 0x9c
	return ret;
    122a:	ldr	r3, [sp, #156]	; 0x9c
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    122c:	str	r3, [r5, #52]	; 0x34
    122e:	mov	r0, r9
    1230:	bl	2bb4 <digitalRead>
    1234:	clz	r1, r0
    1238:	lsrs	r1, r1, #5
    123a:	mov	r0, r9
    123c:	bl	2ba8 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1240:	ldr.w	r3, [sl]
    1244:	str	r3, [sp, #228]	; 0xe4
	return ret;
    1246:	ldr	r3, [sp, #228]	; 0xe4
      blinking = true;
    1248:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    124c:	str.w	r3, [r8, #8]
    1250:	movs	r1, #7
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    1252:	str.w	r6, [r8, #20]
    1256:	ldr	r0, [pc, #384]	; (13d8 <loop+0xbd8>)
    1258:	bl	2598 <usb_serial_write>
    125c:	ldr	r0, [pc, #380]	; (13dc <loop+0xbdc>)
    125e:	bl	410c <Print::println()>
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
    1262:	ldr	r7, [r5, #32]
    1264:	cmp	r7, #1
    1266:	bne.w	922 <loop+0x122>
    126a:	ldrb.w	r6, [r5, #48]	; 0x30
    126e:	ldr	r3, [r5, #52]	; 0x34
    1270:	cmp	r6, #1
    1272:	beq.w	190a <loop+0x110a>
    1276:	ldr	r7, [r5, #32]
    1278:	b.w	928 <loop+0x128>
      }
 
      if (millis_held > 50) {
        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
          if (secs_held >= 1) {
    127c:	cmp	r2, #0
    127e:	ble.w	88e <loop+0x8e>
    1282:	movs	r1, #14
    1284:	ldr	r0, [pc, #344]	; (13e0 <loop+0xbe0>)
    1286:	bl	2598 <usb_serial_write>
            Serial.print("Seconds held: ");
            Serial.print(secs_held);
    128a:	ldr	r1, [r6, #40]	; 0x28
    128c:	ldr	r0, [pc, #332]	; (13dc <loop+0xbdc>)
    128e:	bl	41ac <Print::print(long)>
    1292:	movs	r1, #19
    1294:	ldr	r0, [pc, #332]	; (13e4 <loop+0xbe4>)
    1296:	bl	2598 <usb_serial_write>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
    129a:	ldr	r1, [r6, #36]	; 0x24
    129c:	ldr	r0, [pc, #316]	; (13dc <loop+0xbdc>)
    129e:	bl	41ac <Print::print(long)>
    12a2:	ldr	r0, [pc, #312]	; (13dc <loop+0xbdc>)
    12a4:	bl	410c <Print::println()>
    void enterShiftMode () {
      m_shiftMode = true;
    };

    void exitShiftMode () {
      m_shiftMode = false;
    12a8:	ldr	r3, [r6, #28]
    12aa:	ldr	r2, [r6, #40]	; 0x28
    12ac:	strb.w	r7, [r3, #46]	; 0x2e
    12b0:	ldr	r7, [r6, #32]
    12b2:	b.w	88e <loop+0x8e>
      }
 
      if (millis_held > 50) {
        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
          if (secs_held >= 1) {
    12b6:	cmp	r2, #0
    12b8:	ble.w	9fc <loop+0x1fc>
    12bc:	movs	r1, #14
    12be:	ldr	r0, [pc, #288]	; (13e0 <loop+0xbe0>)
    12c0:	bl	2598 <usb_serial_write>
            Serial.print("Seconds held: ");
            Serial.print(secs_held);
    12c4:	ldr	r1, [r5, #40]	; 0x28
    12c6:	ldr	r0, [pc, #276]	; (13dc <loop+0xbdc>)
    12c8:	bl	41ac <Print::print(long)>
    12cc:	movs	r1, #19
    12ce:	ldr	r0, [pc, #276]	; (13e4 <loop+0xbe4>)
    12d0:	bl	2598 <usb_serial_write>
    12d4:	ldr	r1, [r5, #36]	; 0x24
    12d6:	ldr	r0, [pc, #260]	; (13dc <loop+0xbdc>)
    12d8:	bl	41ac <Print::print(long)>
    12dc:	ldr	r0, [pc, #252]	; (13dc <loop+0xbdc>)
    12de:	bl	410c <Print::println()>
    12e2:	ldr	r3, [r5, #28]
    12e4:	ldr	r2, [r5, #40]	; 0x28
    12e6:	strb.w	r7, [r3, #46]	; 0x2e
    12ea:	ldr	r7, [r5, #32]
    12ec:	b.w	9fc <loop+0x1fc>
      }
 
      if (millis_held > 50) {
        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
          if (secs_held >= 1) {
    12f0:	cmp	r2, #0
    12f2:	ble.w	a76 <loop+0x276>
    12f6:	movs	r1, #14
    12f8:	ldr	r0, [pc, #228]	; (13e0 <loop+0xbe0>)
    12fa:	bl	2598 <usb_serial_write>
            Serial.print("Seconds held: ");
            Serial.print(secs_held);
    12fe:	ldr	r1, [r7, #40]	; 0x28
    1300:	ldr	r0, [pc, #216]	; (13dc <loop+0xbdc>)
    1302:	bl	41ac <Print::print(long)>
    1306:	movs	r1, #19
    1308:	ldr	r0, [pc, #216]	; (13e4 <loop+0xbe4>)
    130a:	bl	2598 <usb_serial_write>
    130e:	ldr	r1, [r7, #36]	; 0x24
    1310:	ldr	r0, [pc, #200]	; (13dc <loop+0xbdc>)
    1312:	bl	41ac <Print::print(long)>
    1316:	ldr	r0, [pc, #196]	; (13dc <loop+0xbdc>)
    1318:	bl	410c <Print::println()>
    131c:	ldr	r3, [r7, #28]
    131e:	ldr	r2, [r7, #40]	; 0x28
    1320:	strb.w	r6, [r3, #46]	; 0x2e
    1324:	ldr	r6, [r7, #32]
    1326:	b.w	a76 <loop+0x276>
      }
 
      if (millis_held > 50) {
        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
          if (secs_held >= 1) {
    132a:	cmp	r2, #0
    132c:	ble.w	908 <loop+0x108>
    1330:	movs	r1, #14
    1332:	ldr	r0, [pc, #172]	; (13e0 <loop+0xbe0>)
    1334:	bl	2598 <usb_serial_write>
            Serial.print("Seconds held: ");
            Serial.print(secs_held);
    1338:	ldr	r1, [r5, #40]	; 0x28
    133a:	ldr	r0, [pc, #160]	; (13dc <loop+0xbdc>)
    133c:	bl	41ac <Print::print(long)>
    1340:	movs	r1, #19
    1342:	ldr	r0, [pc, #160]	; (13e4 <loop+0xbe4>)
    1344:	bl	2598 <usb_serial_write>
    1348:	ldr	r1, [r5, #36]	; 0x24
    134a:	ldr	r0, [pc, #144]	; (13dc <loop+0xbdc>)
    134c:	bl	41ac <Print::print(long)>
    1350:	ldr	r0, [pc, #136]	; (13dc <loop+0xbdc>)
    1352:	bl	410c <Print::println()>
    1356:	ldr	r3, [r5, #28]
    1358:	ldr	r2, [r5, #40]	; 0x28
    135a:	strb.w	r7, [r3, #46]	; 0x2e
    135e:	ldr	r7, [r5, #32]
    1360:	b.w	908 <loop+0x108>
      }
 
      if (millis_held > 50) {
        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
          if (secs_held >= 1) {
    1364:	cmp	r2, #0
    1366:	ble.w	982 <loop+0x182>
    136a:	movs	r1, #14
    136c:	ldr	r0, [pc, #112]	; (13e0 <loop+0xbe0>)
    136e:	bl	2598 <usb_serial_write>
            Serial.print("Seconds held: ");
            Serial.print(secs_held);
    1372:	ldr	r1, [r6, #40]	; 0x28
    1374:	ldr	r0, [pc, #100]	; (13dc <loop+0xbdc>)
    1376:	bl	41ac <Print::print(long)>
    137a:	movs	r1, #19
    137c:	ldr	r0, [pc, #100]	; (13e4 <loop+0xbe4>)
    137e:	bl	2598 <usb_serial_write>
    1382:	ldr	r1, [r6, #36]	; 0x24
    1384:	ldr	r0, [pc, #84]	; (13dc <loop+0xbdc>)
    1386:	bl	41ac <Print::print(long)>
    138a:	ldr	r0, [pc, #80]	; (13dc <loop+0xbdc>)
    138c:	bl	410c <Print::println()>
    1390:	ldr	r3, [r6, #28]
    1392:	ldr	r2, [r6, #40]	; 0x28
    1394:	strb.w	r7, [r3, #46]	; 0x2e
    1398:	ldr	r7, [r6, #32]
    139a:	b.w	982 <loop+0x182>
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
    139e:	ldr	r2, [pc, #72]	; (13e8 <loop+0xbe8>)
      ppqn = 0;
      m_sequence.resetStep();
    13a0:	ldr	r1, [r2, #12]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
    13a2:	movs	r3, #0
      ppqn = 0;
      m_sequence.resetStep();
      m_sequence.m_leds[5]->toggle();
    13a4:	ldr	r4, [r1, #40]	; 0x28
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
      ppqn = 0;
    13a6:	str	r3, [r2, #8]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
    13a8:	strb	r3, [r2, #0]
    void stopCurrentStep () {
      m_steps[m_currentStep]->stop();
    };

    void resetStep () {
      m_currentStep = 0;
    13aa:	str	r3, [r1, #0]
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    13ac:	ldr	r1, [r4, #4]

      digitalWrite(m_pin, m_state);
    13ae:	ldrb	r0, [r4, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    13b0:	clz	r1, r1
    13b4:	lsrs	r1, r1, #5
    13b6:	str	r1, [r4, #4]

      digitalWrite(m_pin, m_state);
    13b8:	bl	2ba8 <digitalWrite>

      if (blinking) {
    13bc:	ldrb	r3, [r4, #16]
    13be:	cmp	r3, #0
    13c0:	beq.w	812 <loop+0x12>
        digitalWrite(m_pin, !m_state);
    13c4:	ldr	r1, [r4, #4]
    13c6:	ldrb	r0, [r4, #0]
    13c8:	ldr	r4, [pc, #32]	; (13ec <loop+0xbec>)
    13ca:	clz	r1, r1
    13ce:	lsrs	r1, r1, #5
    13d0:	bl	2ba8 <digitalWrite>
    13d4:	b.w	814 <loop+0x14>
    13d8:	.word	0x000056a4
    13dc:	.word	0x1fff0c70
    13e0:	.word	0x00005680
    13e4:	.word	0x00005690
    13e8:	.word	0x1fff18a0
    13ec:	.word	0x1fff192c
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
          m_sequence.m_steps[m_id]->controlPitch(m_value);
    13f0:	ldr	r3, [r4, #16]
    13f2:	ldr	r2, [r4, #12]
    13f4:	add.w	r2, r3, r2, lsl #2
    };

    void controlPitch (int value) {
      int newValue = map(value, 0, 1023, 51, 38);
      m_pitch = newValue;
    13f8:	sub.w	r3, r0, r0, lsl #2
    13fc:	lsls	r3, r3, #2
    13fe:	it	mi
    1400:	addwmi	r3, r3, #1023	; 0x3ff
    1404:	ldr	r2, [r2, #4]
    1406:	asrs	r3, r3, #10
    1408:	adds	r3, #51	; 0x33
    140a:	str	r3, [r2, #8]
    140c:	b.n	c10 <loop+0x410>
    140e:	ldr	r3, [r4, #16]
    1410:	ldr	r2, [r4, #12]
    1412:	add.w	r2, r3, r2, lsl #2
    1416:	sub.w	r3, r0, r0, lsl #2
    141a:	lsls	r3, r3, #2
    141c:	it	mi
    141e:	addwmi	r3, r3, #1023	; 0x3ff
    1422:	ldr	r2, [r2, #4]
    1424:	asrs	r3, r3, #10
    1426:	adds	r3, #51	; 0x33
    1428:	str	r3, [r2, #8]
    142a:	b.n	d1e <loop+0x51e>
    142c:	ldr	r3, [r4, #16]
    142e:	ldr	r2, [r4, #12]
    1430:	add.w	r2, r3, r2, lsl #2
    1434:	sub.w	r3, r0, r0, lsl #2
    1438:	lsls	r3, r3, #2
    143a:	it	mi
    143c:	addwmi	r3, r3, #1023	; 0x3ff
    1440:	ldr	r2, [r2, #4]
    1442:	asrs	r3, r3, #10
    1444:	adds	r3, #51	; 0x33
    1446:	str	r3, [r2, #8]
    1448:	b.n	cc4 <loop+0x4c4>
    144a:	ldr	r3, [r4, #16]
    144c:	ldr	r2, [r4, #12]
    144e:	add.w	r2, r3, r2, lsl #2
    1452:	sub.w	r3, r0, r0, lsl #2
    1456:	lsls	r3, r3, #2
    1458:	it	mi
    145a:	addwmi	r3, r3, #1023	; 0x3ff
    145e:	ldr	r2, [r2, #4]
    1460:	asrs	r3, r3, #10
    1462:	adds	r3, #51	; 0x33
    1464:	str	r3, [r2, #8]
    1466:	b.n	c6a <loop+0x46a>
    1468:	ldr	r3, [r4, #16]
    146a:	ldr	r2, [r4, #12]
    146c:	add.w	r2, r3, r2, lsl #2
    1470:	sub.w	r3, r0, r0, lsl #2
    1474:	lsls	r3, r3, #2
    1476:	it	mi
    1478:	addwmi	r3, r3, #1023	; 0x3ff
    147c:	ldr	r2, [r2, #4]
    147e:	asrs	r3, r3, #10
    1480:	adds	r3, #51	; 0x33
    1482:	str	r3, [r2, #8]
    1484:	b.w	bb6 <loop+0x3b6>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
    1488:	ldr	r3, [r6, #28]
    148a:	ldr	r0, [pc, #696]	; (1744 <loop+0xf44>)
    148c:	ldr	r7, [r3, #52]	; 0x34
    148e:	movs	r1, #17
    1490:	bl	2598 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1494:	ldr	r0, [pc, #688]	; (1748 <loop+0xf48>)
    1496:	bl	410c <Print::println()>
    149a:	ldr	r3, [r6, #28]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    149c:	ldr	r0, [pc, #680]	; (1748 <loop+0xf48>)
    149e:	ldrb.w	r1, [r3, #46]	; 0x2e
    14a2:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    14a6:	ldr	r0, [pc, #672]	; (1748 <loop+0xf48>)
    14a8:	bl	410c <Print::println()>
    14ac:	movs	r1, #12
    14ae:	ldr	r0, [pc, #668]	; (174c <loop+0xf4c>)
    14b0:	bl	2598 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    14b4:	ldr	r0, [pc, #656]	; (1748 <loop+0xf48>)
    14b6:	bl	410c <Print::println()>
      Serial.println("onPress shiftMode");
      Serial.println(m_sequence.getShiftMode());
      Serial.println("onPress page");
      Serial.println(m_sequence.m_paginator->getPage());
    14ba:	ldr	r3, [r6, #28]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    14bc:	ldr	r0, [pc, #648]	; (1748 <loop+0xf48>)
    14be:	ldr	r3, [r3, #52]	; 0x34
    14c0:	ldr	r1, [r3, #4]
    14c2:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    14c6:	ldr	r0, [pc, #640]	; (1748 <loop+0xf48>)
    14c8:	bl	410c <Print::println()>

      if (m_state == LOW && m_shiftButton) {
    14cc:	ldr	r3, [r6, #4]
    14ce:	cbnz	r3, 14fe <loop+0xcfe>
    14d0:	ldrb	r3, [r6, #16]
    14d2:	cmp	r3, #0
    14d4:	beq.w	1c1e <loop+0x141e>
        if (m_sequence.getShiftMode()) {
    14d8:	ldr.w	r9, [r6, #28]
    14dc:	ldrb.w	r8, [r9, #46]	; 0x2e
    14e0:	cmp.w	r8, #0
    14e4:	beq.w	1e60 <loop+0x1660>
    };

    void previousPage () {
      if (m_page > 1) m_page--;
    14e8:	ldr	r1, [r7, #4]
    14ea:	cmp	r1, #1
    14ec:	ble.n	14f2 <loop+0xcf2>
    14ee:	subs	r1, #1
    14f0:	str	r1, [r7, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    14f2:	ldr	r0, [pc, #596]	; (1748 <loop+0xf48>)
    14f4:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    14f8:	ldr	r0, [pc, #588]	; (1748 <loop+0xf48>)
    14fa:	bl	410c <Print::println()>
    14fe:	ldr	r3, [r5, #36]	; 0x24
    1500:	ldr	r7, [r5, #32]
    1502:	ldr	r2, [r5, #40]	; 0x28
    1504:	b.w	87c <loop+0x7c>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
    1508:	ldr	r3, [r5, #28]
    150a:	ldr	r0, [pc, #568]	; (1744 <loop+0xf44>)
    150c:	ldr	r7, [r3, #52]	; 0x34
    150e:	movs	r1, #17
    1510:	bl	2598 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1514:	ldr	r0, [pc, #560]	; (1748 <loop+0xf48>)
    1516:	bl	410c <Print::println()>
    151a:	ldr	r3, [r5, #28]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    151c:	ldr	r0, [pc, #552]	; (1748 <loop+0xf48>)
    151e:	ldrb.w	r1, [r3, #46]	; 0x2e
    1522:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1526:	ldr	r0, [pc, #544]	; (1748 <loop+0xf48>)
    1528:	bl	410c <Print::println()>
    152c:	movs	r1, #12
    152e:	ldr	r0, [pc, #540]	; (174c <loop+0xf4c>)
    1530:	bl	2598 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1534:	ldr	r0, [pc, #528]	; (1748 <loop+0xf48>)
    1536:	bl	410c <Print::println()>
      Serial.println("onPress shiftMode");
      Serial.println(m_sequence.getShiftMode());
      Serial.println("onPress page");
      Serial.println(m_sequence.m_paginator->getPage());
    153a:	ldr	r3, [r5, #28]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    153c:	ldr	r0, [pc, #520]	; (1748 <loop+0xf48>)
    153e:	ldr	r3, [r3, #52]	; 0x34
    1540:	ldr	r1, [r3, #4]
    1542:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1546:	ldr	r0, [pc, #512]	; (1748 <loop+0xf48>)
    1548:	bl	410c <Print::println()>

      if (m_state == LOW && m_shiftButton) {
    154c:	ldr	r3, [r5, #4]
    154e:	cbnz	r3, 157e <loop+0xd7e>
    1550:	ldrb	r3, [r5, #16]
    1552:	cmp	r3, #0
    1554:	beq.w	1c5a <loop+0x145a>
        if (m_sequence.getShiftMode()) {
    1558:	ldr.w	r9, [r5, #28]
    155c:	ldrb.w	r8, [r9, #46]	; 0x2e
    1560:	cmp.w	r8, #0
    1564:	beq.w	1ef0 <loop+0x16f0>
    1568:	ldr	r1, [r7, #4]
    156a:	cmp	r1, #1
    156c:	ble.n	1572 <loop+0xd72>
    156e:	subs	r1, #1
    1570:	str	r1, [r7, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1572:	ldr	r0, [pc, #468]	; (1748 <loop+0xf48>)
    1574:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1578:	ldr	r0, [pc, #460]	; (1748 <loop+0xf48>)
    157a:	bl	410c <Print::println()>
    157e:	ldr	r3, [r6, #36]	; 0x24
    1580:	ldr	r7, [r6, #32]
    1582:	ldr	r2, [r6, #40]	; 0x28
    1584:	b.w	9ea <loop+0x1ea>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
    1588:	ldr	r3, [r5, #28]
    158a:	ldr	r0, [pc, #440]	; (1744 <loop+0xf44>)
    158c:	ldr	r7, [r3, #52]	; 0x34
    158e:	movs	r1, #17
    1590:	bl	2598 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1594:	ldr	r0, [pc, #432]	; (1748 <loop+0xf48>)
    1596:	bl	410c <Print::println()>
    159a:	ldr	r3, [r5, #28]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    159c:	ldr	r0, [pc, #424]	; (1748 <loop+0xf48>)
    159e:	ldrb.w	r1, [r3, #46]	; 0x2e
    15a2:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    15a6:	ldr	r0, [pc, #416]	; (1748 <loop+0xf48>)
    15a8:	bl	410c <Print::println()>
    15ac:	movs	r1, #12
    15ae:	ldr	r0, [pc, #412]	; (174c <loop+0xf4c>)
    15b0:	bl	2598 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    15b4:	ldr	r0, [pc, #400]	; (1748 <loop+0xf48>)
    15b6:	bl	410c <Print::println()>
      Serial.println("onPress shiftMode");
      Serial.println(m_sequence.getShiftMode());
      Serial.println("onPress page");
      Serial.println(m_sequence.m_paginator->getPage());
    15ba:	ldr	r3, [r5, #28]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    15bc:	ldr	r0, [pc, #392]	; (1748 <loop+0xf48>)
    15be:	ldr	r3, [r3, #52]	; 0x34
    15c0:	ldr	r1, [r3, #4]
    15c2:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    15c6:	ldr	r0, [pc, #384]	; (1748 <loop+0xf48>)
    15c8:	bl	410c <Print::println()>

      if (m_state == LOW && m_shiftButton) {
    15cc:	ldr	r3, [r5, #4]
    15ce:	cbnz	r3, 15fe <loop+0xdfe>
    15d0:	ldrb	r3, [r5, #16]
    15d2:	cmp	r3, #0
    15d4:	beq.w	1bfe <loop+0x13fe>
        if (m_sequence.getShiftMode()) {
    15d8:	ldr.w	r9, [r5, #28]
    15dc:	ldrb.w	r8, [r9, #46]	; 0x2e
    15e0:	cmp.w	r8, #0
    15e4:	beq.w	1f38 <loop+0x1738>
    15e8:	ldr	r1, [r7, #4]
    15ea:	cmp	r1, #1
    15ec:	ble.n	15f2 <loop+0xdf2>
    15ee:	subs	r1, #1
    15f0:	str	r1, [r7, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    15f2:	ldr	r0, [pc, #340]	; (1748 <loop+0xf48>)
    15f4:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    15f8:	ldr	r0, [pc, #332]	; (1748 <loop+0xf48>)
    15fa:	bl	410c <Print::println()>
    15fe:	ldr	r3, [r6, #36]	; 0x24
    1600:	ldr	r7, [r6, #32]
    1602:	ldr	r2, [r6, #40]	; 0x28
    1604:	b.w	8f6 <loop+0xf6>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
    1608:	ldr	r3, [r7, #28]
    160a:	ldr	r0, [pc, #312]	; (1744 <loop+0xf44>)
    160c:	ldr	r6, [r3, #52]	; 0x34
    160e:	movs	r1, #17
    1610:	bl	2598 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1614:	ldr	r0, [pc, #304]	; (1748 <loop+0xf48>)
    1616:	bl	410c <Print::println()>
    161a:	ldr	r3, [r7, #28]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    161c:	ldr	r0, [pc, #296]	; (1748 <loop+0xf48>)
    161e:	ldrb.w	r1, [r3, #46]	; 0x2e
    1622:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1626:	ldr	r0, [pc, #288]	; (1748 <loop+0xf48>)
    1628:	bl	410c <Print::println()>
    162c:	movs	r1, #12
    162e:	ldr	r0, [pc, #284]	; (174c <loop+0xf4c>)
    1630:	bl	2598 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1634:	ldr	r0, [pc, #272]	; (1748 <loop+0xf48>)
    1636:	bl	410c <Print::println()>
      Serial.println("onPress shiftMode");
      Serial.println(m_sequence.getShiftMode());
      Serial.println("onPress page");
      Serial.println(m_sequence.m_paginator->getPage());
    163a:	ldr	r3, [r7, #28]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    163c:	ldr	r0, [pc, #264]	; (1748 <loop+0xf48>)
    163e:	ldr	r3, [r3, #52]	; 0x34
    1640:	ldr	r1, [r3, #4]
    1642:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1646:	ldr	r0, [pc, #256]	; (1748 <loop+0xf48>)
    1648:	bl	410c <Print::println()>

      if (m_state == LOW && m_shiftButton) {
    164c:	ldr	r3, [r7, #4]
    164e:	cbnz	r3, 167e <loop+0xe7e>
    1650:	ldrb	r3, [r7, #16]
    1652:	cmp	r3, #0
    1654:	beq.w	1c78 <loop+0x1478>
        if (m_sequence.getShiftMode()) {
    1658:	ldr.w	r9, [r7, #28]
    165c:	ldrb.w	r8, [r9, #46]	; 0x2e
    1660:	cmp.w	r8, #0
    1664:	beq.w	1ea8 <loop+0x16a8>
    1668:	ldr	r1, [r6, #4]
    166a:	cmp	r1, #1
    166c:	ble.n	1672 <loop+0xe72>
    166e:	subs	r1, #1
    1670:	str	r1, [r6, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1672:	ldr	r0, [pc, #212]	; (1748 <loop+0xf48>)
    1674:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1678:	ldr	r0, [pc, #204]	; (1748 <loop+0xf48>)
    167a:	bl	410c <Print::println()>
    167e:	ldr	r3, [r5, #36]	; 0x24
    1680:	ldr	r6, [r5, #32]
    1682:	ldr	r2, [r5, #40]	; 0x28
    1684:	b.w	a64 <loop+0x264>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
    1688:	ldr	r3, [r6, #28]
    168a:	ldr	r0, [pc, #184]	; (1744 <loop+0xf44>)
    168c:	ldr	r7, [r3, #52]	; 0x34
    168e:	movs	r1, #17
    1690:	bl	2598 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1694:	ldr	r0, [pc, #176]	; (1748 <loop+0xf48>)
    1696:	bl	410c <Print::println()>
    169a:	ldr	r3, [r6, #28]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    169c:	ldr	r0, [pc, #168]	; (1748 <loop+0xf48>)
    169e:	ldrb.w	r1, [r3, #46]	; 0x2e
    16a2:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    16a6:	ldr	r0, [pc, #160]	; (1748 <loop+0xf48>)
    16a8:	bl	410c <Print::println()>
    16ac:	movs	r1, #12
    16ae:	ldr	r0, [pc, #156]	; (174c <loop+0xf4c>)
    16b0:	bl	2598 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    16b4:	ldr	r0, [pc, #144]	; (1748 <loop+0xf48>)
    16b6:	bl	410c <Print::println()>
      Serial.println("onPress shiftMode");
      Serial.println(m_sequence.getShiftMode());
      Serial.println("onPress page");
      Serial.println(m_sequence.m_paginator->getPage());
    16ba:	ldr	r3, [r6, #28]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    16bc:	ldr	r0, [pc, #136]	; (1748 <loop+0xf48>)
    16be:	ldr	r3, [r3, #52]	; 0x34
    16c0:	ldr	r1, [r3, #4]
    16c2:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    16c6:	ldr	r0, [pc, #128]	; (1748 <loop+0xf48>)
    16c8:	bl	410c <Print::println()>

      if (m_state == LOW && m_shiftButton) {
    16cc:	ldr	r3, [r6, #4]
    16ce:	cbnz	r3, 16fe <loop+0xefe>
    16d0:	ldrb	r3, [r6, #16]
    16d2:	cmp	r3, #0
    16d4:	beq.w	1c3c <loop+0x143c>
        if (m_sequence.getShiftMode()) {
    16d8:	ldr.w	r9, [r6, #28]
    16dc:	ldrb.w	r8, [r9, #46]	; 0x2e
    16e0:	cmp.w	r8, #0
    16e4:	beq.w	1e08 <loop+0x1608>
    16e8:	ldr	r1, [r7, #4]
    16ea:	cmp	r1, #1
    16ec:	ble.n	16f2 <loop+0xef2>
    16ee:	subs	r1, #1
    16f0:	str	r1, [r7, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    16f2:	ldr	r0, [pc, #84]	; (1748 <loop+0xf48>)
    16f4:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    16f8:	ldr	r0, [pc, #76]	; (1748 <loop+0xf48>)
    16fa:	bl	410c <Print::println()>
    16fe:	ldr	r3, [r5, #36]	; 0x24
    1700:	ldr	r7, [r5, #32]
    1702:	ldr	r2, [r5, #40]	; 0x28
    1704:	b.w	970 <loop+0x170>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    1708:	cmp.w	r0, #400	; 0x190
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
        m_transport.controlTempo(m_value);
    170c:	ldr	r3, [r4, #20]
    170e:	bge.w	1b5e <loop+0x135e>
        max_ppqn = 6;

        if (ppqn >= 6) {
    1712:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1714:	movs	r1, #6

        if (ppqn >= 6) {
    1716:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1718:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    171a:	ble.n	1720 <loop+0xf20>
          ppqn = 0;
    171c:	movs	r2, #0
    171e:	str	r2, [r3, #8]
    1720:	ldr	r0, [r4, #4]
    1722:	b.w	bb6 <loop+0x3b6>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    1726:	cmp.w	r0, #400	; 0x190
    172a:	ldr	r3, [r4, #20]
    172c:	bge.w	1b40 <loop+0x1340>
        max_ppqn = 6;

        if (ppqn >= 6) {
    1730:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1732:	movs	r1, #6

        if (ppqn >= 6) {
    1734:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1736:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    1738:	ble.n	173e <loop+0xf3e>
          ppqn = 0;
    173a:	movs	r2, #0
    173c:	str	r2, [r3, #8]
    173e:	ldr	r0, [r4, #4]
    1740:	b.w	d1e <loop+0x51e>
    1744:	.word	0x0000563c
    1748:	.word	0x1fff0c70
    174c:	.word	0x00005650
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    1750:	cmp.w	r0, #400	; 0x190
    1754:	ldr	r3, [r4, #20]
    1756:	bge.w	1b22 <loop+0x1322>
        max_ppqn = 6;

        if (ppqn >= 6) {
    175a:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    175c:	movs	r1, #6

        if (ppqn >= 6) {
    175e:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1760:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    1762:	ble.n	1768 <loop+0xf68>
          ppqn = 0;
    1764:	movs	r2, #0
    1766:	str	r2, [r3, #8]
    1768:	ldr	r0, [r4, #4]
    176a:	b.w	c10 <loop+0x410>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    176e:	cmp.w	r0, #400	; 0x190
    1772:	ldr	r3, [r4, #20]
    1774:	bge.w	1b04 <loop+0x1304>
        max_ppqn = 6;

        if (ppqn >= 6) {
    1778:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    177a:	movs	r1, #6

        if (ppqn >= 6) {
    177c:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    177e:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    1780:	ble.n	1786 <loop+0xf86>
          ppqn = 0;
    1782:	movs	r2, #0
    1784:	str	r2, [r3, #8]
    1786:	ldr	r0, [r4, #4]
    1788:	b.w	c6a <loop+0x46a>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    178c:	cmp.w	r0, #400	; 0x190
    1790:	ldr	r3, [r4, #20]
    1792:	bge.w	1ae6 <loop+0x12e6>
        max_ppqn = 6;

        if (ppqn >= 6) {
    1796:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1798:	movs	r1, #6

        if (ppqn >= 6) {
    179a:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    179c:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    179e:	ble.n	17a4 <loop+0xfa4>
          ppqn = 0;
    17a0:	movs	r2, #0
    17a2:	str	r2, [r3, #8]
    17a4:	ldr	r0, [r4, #4]
    17a6:	b.w	cc4 <loop+0x4c4>
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
    17aa:	ldr	r5, [pc, #700]	; (1a68 <loop+0x1268>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17ac:	ldr	r4, [pc, #700]	; (1a6c <loop+0x126c>)
      ppqn = 0;
      m_sequence.doStep(); 
    17ae:	ldr	r6, [r5, #12]
        m_leds[4]->on();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
    17b0:	ldr	r3, [r6, #0]
    17b2:	add.w	r3, r6, r3, lsl #2
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
    17b6:	mov.w	r9, #1
    17ba:	ldr	r7, [r3, #20]
    17bc:	strb.w	r9, [r5]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    17c0:	ldrb.w	sl, [r7]
      ppqn = 0;
    17c4:	mov.w	r8, #0
    17c8:	mov	r0, sl
    17ca:	str.w	r8, [r5, #8]
    17ce:	bl	2bb4 <digitalRead>
    17d2:	clz	r1, r0
    17d6:	lsrs	r1, r1, #5
    17d8:	mov	r0, sl
    17da:	bl	2ba8 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
    17de:	ldr	r3, [r6, #0]
    17e0:	ldr	r1, [r4, #0]
    17e2:	str	r1, [sp, #4]
    17e4:	add.w	r2, r6, r3, lsl #2
	return ret;
    17e8:	ldr	r0, [sp, #4]
    17ea:	ldr	r2, [r2, #4]
      blinking = true;
    17ec:	strb.w	r9, [r7, #16]
    17f0:	ldrb	r1, [r2, #4]
      blinkingCounter = times;
    17f2:	str.w	r8, [r7, #20]
      lastBlink = millis();  
    17f6:	str	r0, [r7, #8]
    17f8:	cmp	r1, #0
    17fa:	bne.w	1bd8 <loop+0x13d8>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
    17fe:	ldrb.w	r2, [r6, #45]	; 0x2d
    1802:	cmp	r2, #0
    1804:	beq.w	1b7c <loop+0x137c>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    1808:	subs	r2, r3, #1
    180a:	cmp	r3, #0
    180c:	beq.w	1c98 <loop+0x1498>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    1810:	str	r2, [r6, #0]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    1812:	ldr	r3, [r5, #12]
    1814:	ldr	r5, [r3, #40]	; 0x28
    };

    void toggle () {
      m_state = !m_state;
    1816:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1818:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    181a:	clz	r1, r1
    181e:	lsrs	r1, r1, #5
    1820:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1822:	bl	2ba8 <digitalWrite>

      if (blinking) {
    1826:	ldrb	r3, [r5, #16]
    1828:	cmp	r3, #0
    182a:	beq.w	814 <loop+0x14>
        digitalWrite(m_pin, !m_state);
    182e:	ldr	r1, [r5, #4]
    1830:	ldrb	r0, [r5, #0]
    1832:	clz	r1, r1
    1836:	lsrs	r1, r1, #5
    1838:	bl	2ba8 <digitalWrite>
    183c:	b.w	814 <loop+0x14>
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
    1840:	ldr	r5, [pc, #548]	; (1a68 <loop+0x1268>)

      m_sequence.stopSteps(ppqn);
    1842:	ldr	r2, [r5, #12]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
    1844:	ldr	r3, [r5, #8]
        }
      }
    };

    boolean stepIsOver (int ppqn) {
      return ppqn >= m_steps[m_currentStep]->m_length;
    1846:	ldr	r1, [r2, #0]
    1848:	add.w	r2, r2, r1, lsl #2
    184c:	adds	r3, #1
    184e:	ldr	r2, [r2, #4]
    1850:	str	r3, [r5, #8]
    void reverse () {
      m_reverse = !m_reverse;
    };

    void stopSteps (int ppqn) {
      if (stepIsOver(ppqn)) {
    1852:	ldr	r2, [r2, #16]
    1854:	cmp	r3, r2
    1856:	bge.w	1bce <loop+0x13ce>

      m_sequence.stopSteps(ppqn);

      if (ppqn == max_ppqn) {
    185a:	ldr	r2, [r5, #4]
    185c:	ldr	r1, [pc, #520]	; (1a68 <loop+0x1268>)
    185e:	cmp	r2, r3
    1860:	bne.w	812 <loop+0x12>
        m_sequence.doStep(); 
    1864:	ldr	r6, [r1, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1866:	ldr	r4, [pc, #516]	; (1a6c <loop+0x126c>)
        m_leds[4]->on();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
    1868:	ldr	r3, [r6, #0]
    186a:	add.w	r3, r6, r3, lsl #2
    186e:	ldr	r7, [r3, #20]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1870:	ldrb.w	r8, [r7]
    1874:	mov	r0, r8
    1876:	bl	2bb4 <digitalRead>
    187a:	clz	r1, r0
    187e:	lsrs	r1, r1, #5
    1880:	mov	r0, r8
    1882:	bl	2ba8 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
    1886:	ldr	r3, [r6, #0]
    1888:	ldr	r0, [r4, #0]
    188a:	str	r0, [sp, #0]
    188c:	add.w	r2, r6, r3, lsl #2
      blinking = true;
    1890:	movs	r1, #1
    1892:	ldr	r2, [r2, #4]
    1894:	strb	r1, [r7, #16]
      blinkingCounter = times;
    1896:	movs	r1, #0
    1898:	str	r1, [r7, #20]
    189a:	ldrb	r1, [r2, #4]
	return ret;
    189c:	ldr	r0, [sp, #0]
      lastBlink = millis();  
    189e:	str	r0, [r7, #8]
    18a0:	cmp	r1, #0
    18a2:	bne.w	1ddc <loop+0x15dc>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
    18a6:	ldrb.w	r2, [r6, #45]	; 0x2d
    18aa:	cmp	r2, #0
    18ac:	bne.w	1dd4 <loop+0x15d4>
        m_currentStep++;
    18b0:	adds	r3, #1
    18b2:	cmp	r3, #3
    18b4:	it	gt
    18b6:	movgt	r3, #0
    18b8:	str	r3, [r6, #0]
        ppqn = 0;
    18ba:	movs	r3, #0
    18bc:	str	r3, [r5, #8]
    18be:	b.w	814 <loop+0x14>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18c2:	ldr	r2, [r4, #0]
    18c4:	str	r2, [sp, #96]	; 0x60
	return ret;
    18c6:	ldr	r2, [sp, #96]	; 0x60
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18c8:	ldr	r1, [pc, #416]	; (1a6c <loop+0x126c>)
        firstTime = millis();
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
    18ca:	subs	r2, r2, r3
    18cc:	cmp.w	r2, #1000	; 0x3e8
    18d0:	bls.w	105a <loop+0x85a>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    18d4:	ldr	r2, [r5, #28]
    18d6:	ldr	r1, [r1, #0]
    18d8:	str	r1, [sp, #92]	; 0x5c
    18da:	ldrb.w	r1, [r2, #46]	; 0x2e
	return ret;
    18de:	ldr	r0, [sp, #92]	; 0x5c
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
        firstHoldTime = millis();
    18e0:	str	r0, [r5, #56]	; 0x38
    18e2:	ldr	r6, [pc, #396]	; (1a70 <loop+0x1270>)
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    18e4:	cbz	r1, 18f6 <loop+0x10f6>
      Serial.println("Inited Sequence");
      Serial.println(m_paginator->getPage());
    };

    void enterShiftMode () {
      m_shiftMode = true;
    18e6:	movs	r1, #1
    18e8:	strb.w	r1, [r2, #46]	; 0x2e
    18ec:	ldr	r6, [r5, #32]
    18ee:	ldrb.w	r7, [r5, #48]	; 0x30
    18f2:	b.w	a1c <loop+0x21c>
    18f6:	movs	r1, #6
    18f8:	ldr	r0, [pc, #376]	; (1a74 <loop+0x1274>)
    18fa:	bl	2598 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    18fe:	ldr	r0, [pc, #376]	; (1a78 <loop+0x1278>)
    1900:	bl	410c <Print::println()>
    1904:	ldr	r2, [r6, #28]
    1906:	ldr	r3, [r6, #52]	; 0x34
    1908:	b.n	18e6 <loop+0x10e6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    190a:	ldr	r2, [r4, #0]
    190c:	str	r2, [sp, #152]	; 0x98
	return ret;
    190e:	ldr	r2, [sp, #152]	; 0x98
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1910:	ldr	r1, [pc, #344]	; (1a6c <loop+0x126c>)
        firstTime = millis();
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
    1912:	subs	r2, r2, r3
    1914:	cmp.w	r2, #1000	; 0x3e8
    1918:	bls.w	1276 <loop+0xa76>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    191c:	ldr	r2, [r5, #28]
    191e:	ldr	r1, [r1, #0]
    1920:	str	r1, [sp, #148]	; 0x94
    1922:	ldrb.w	r1, [r2, #46]	; 0x2e
	return ret;
    1926:	ldr	r0, [sp, #148]	; 0x94
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
        firstHoldTime = millis();
    1928:	str	r0, [r5, #56]	; 0x38
    192a:	ldr	r6, [pc, #336]	; (1a7c <loop+0x127c>)
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    192c:	cbz	r1, 193e <loop+0x113e>
    192e:	movs	r1, #1
    1930:	strb.w	r1, [r2, #46]	; 0x2e
    1934:	ldr	r7, [r5, #32]
    1936:	ldrb.w	r6, [r5, #48]	; 0x30
    193a:	b.w	928 <loop+0x128>
    193e:	movs	r1, #6
    1940:	ldr	r0, [pc, #304]	; (1a74 <loop+0x1274>)
    1942:	bl	2598 <usb_serial_write>
    1946:	ldr	r0, [pc, #304]	; (1a78 <loop+0x1278>)
    1948:	bl	410c <Print::println()>
    194c:	ldr	r2, [r6, #28]
    194e:	ldr	r3, [r6, #52]	; 0x34
    1950:	b.n	192e <loop+0x112e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1952:	ldr	r2, [r4, #0]
    1954:	str	r2, [sp, #208]	; 0xd0
	return ret;
    1956:	ldr	r2, [sp, #208]	; 0xd0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1958:	ldr	r1, [pc, #272]	; (1a6c <loop+0x126c>)
        firstTime = millis();
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
    195a:	subs	r2, r2, r3
    195c:	cmp.w	r2, #1000	; 0x3e8
    1960:	bls.w	11f8 <loop+0x9f8>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    1964:	ldr	r2, [r5, #28]
    1966:	ldr	r1, [r1, #0]
    1968:	str	r1, [sp, #204]	; 0xcc
    196a:	ldrb.w	r1, [r2, #46]	; 0x2e
	return ret;
    196e:	ldr	r0, [sp, #204]	; 0xcc
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
        firstHoldTime = millis();
    1970:	str	r0, [r5, #56]	; 0x38
    1972:	ldr	r6, [pc, #268]	; (1a80 <loop+0x1280>)
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    1974:	cbz	r1, 1986 <loop+0x1186>
    1976:	movs	r1, #1
    1978:	strb.w	r1, [r2, #46]	; 0x2e
    197c:	ldr	r7, [r5, #32]
    197e:	ldrb.w	r6, [r5, #48]	; 0x30
    1982:	b.w	834 <loop+0x34>
    1986:	movs	r1, #6
    1988:	ldr	r0, [pc, #232]	; (1a74 <loop+0x1274>)
    198a:	bl	2598 <usb_serial_write>
    198e:	ldr	r0, [pc, #232]	; (1a78 <loop+0x1278>)
    1990:	bl	410c <Print::println()>
    1994:	ldr	r2, [r6, #28]
    1996:	ldr	r3, [r6, #52]	; 0x34
    1998:	b.n	1976 <loop+0x1176>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    199a:	ldr	r2, [r4, #0]
    199c:	str	r2, [sp, #180]	; 0xb4
	return ret;
    199e:	ldr	r2, [sp, #180]	; 0xb4
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19a0:	ldr	r1, [pc, #200]	; (1a6c <loop+0x126c>)
        firstTime = millis();
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
    19a2:	subs	r2, r2, r3
    19a4:	cmp.w	r2, #1000	; 0x3e8
    19a8:	bls.w	117a <loop+0x97a>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    19ac:	ldr	r2, [r6, #28]
    19ae:	ldr	r1, [r1, #0]
    19b0:	str	r1, [sp, #176]	; 0xb0
    19b2:	ldrb.w	r1, [r2, #46]	; 0x2e
	return ret;
    19b6:	ldr	r0, [sp, #176]	; 0xb0
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
        firstHoldTime = millis();
    19b8:	str	r0, [r6, #56]	; 0x38
    19ba:	ldr	r5, [pc, #200]	; (1a84 <loop+0x1284>)
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    19bc:	cbz	r1, 19ce <loop+0x11ce>
    19be:	movs	r1, #1
    19c0:	strb.w	r1, [r2, #46]	; 0x2e
    19c4:	ldr	r7, [r6, #32]
    19c6:	ldrb.w	r5, [r6, #48]	; 0x30
    19ca:	b.w	8ae <loop+0xae>
    19ce:	movs	r1, #6
    19d0:	ldr	r0, [pc, #160]	; (1a74 <loop+0x1274>)
    19d2:	bl	2598 <usb_serial_write>
    19d6:	ldr	r0, [pc, #160]	; (1a78 <loop+0x1278>)
    19d8:	bl	410c <Print::println()>
    19dc:	ldr	r2, [r5, #28]
    19de:	ldr	r3, [r5, #52]	; 0x34
    19e0:	b.n	19be <loop+0x11be>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19e2:	ldr	r2, [r4, #0]
    19e4:	str	r2, [sp, #124]	; 0x7c
	return ret;
    19e6:	ldr	r2, [sp, #124]	; 0x7c
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19e8:	ldr	r1, [pc, #128]	; (1a6c <loop+0x126c>)
        firstTime = millis();
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
    19ea:	subs	r2, r2, r3
    19ec:	cmp.w	r2, #1000	; 0x3e8
    19f0:	bls.w	10fe <loop+0x8fe>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    19f4:	ldr	r2, [r6, #28]
    19f6:	ldr	r1, [r1, #0]
    19f8:	str	r1, [sp, #120]	; 0x78
    19fa:	ldrb.w	r1, [r2, #46]	; 0x2e
	return ret;
    19fe:	ldr	r0, [sp, #120]	; 0x78
        m_led.blink();
        Serial.println("onPress");
      }

      if (current == HIGH && previous == HIGH && (millis() - firstTime) > 1000) {
        firstHoldTime = millis();
    1a00:	str	r0, [r6, #56]	; 0x38
    1a02:	ldr	r5, [pc, #132]	; (1a88 <loop+0x1288>)
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    1a04:	cbz	r1, 1a16 <loop+0x1216>
    1a06:	movs	r1, #1
    1a08:	strb.w	r1, [r2, #46]	; 0x2e
    1a0c:	ldr	r7, [r6, #32]
    1a0e:	ldrb.w	r5, [r6, #48]	; 0x30
    1a12:	b.w	9a2 <loop+0x1a2>
    1a16:	movs	r1, #6
    1a18:	ldr	r0, [pc, #88]	; (1a74 <loop+0x1274>)
    1a1a:	bl	2598 <usb_serial_write>
    1a1e:	ldr	r0, [pc, #88]	; (1a78 <loop+0x1278>)
    1a20:	bl	410c <Print::println()>
    1a24:	ldr	r2, [r5, #28]
    1a26:	ldr	r3, [r5, #52]	; 0x34
    1a28:	b.n	1a06 <loop+0x1206>
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
    1a2a:	ldr	r2, [r4, #12]
    1a2c:	ldr	r3, [r4, #16]
    1a2e:	add.w	r3, r3, r2, lsl #2
    };

    void controlVelocity (int value) {
      int newValue = map(value, 0, 1023, 127, 63);
      m_velocity = newValue;
    1a32:	ldr	r2, [r3, #4]
    1a34:	subs.w	r3, r0, r0, lsl #6
    1a38:	it	mi
    1a3a:	addwmi	r3, r3, #1023	; 0x3ff
    1a3e:	asrs	r3, r3, #10
    1a40:	adds	r3, #127	; 0x7f
    1a42:	str	r3, [r2, #12]
    1a44:	b.w	d1e <loop+0x51e>
    1a48:	ldr	r2, [r4, #12]
    1a4a:	ldr	r3, [r4, #16]
    1a4c:	add.w	r3, r3, r2, lsl #2
    1a50:	ldr	r2, [r3, #4]
    1a52:	subs.w	r3, r0, r0, lsl #6
    1a56:	it	mi
    1a58:	addwmi	r3, r3, #1023	; 0x3ff
    1a5c:	asrs	r3, r3, #10
    1a5e:	adds	r3, #127	; 0x7f
    1a60:	str	r3, [r2, #12]
    1a62:	b.w	cc4 <loop+0x4c4>
    1a66:	nop
    1a68:	.word	0x1fff18a0
    1a6c:	.word	0x1fff192c
    1a70:	.word	0x1fff174c
    1a74:	.word	0x00005634
    1a78:	.word	0x1fff0c70
    1a7c:	.word	0x1fff16cc
    1a80:	.word	0x1fff164c
    1a84:	.word	0x1fff168c
    1a88:	.word	0x1fff170c
    1a8c:	ldr	r2, [r4, #12]
    1a8e:	ldr	r3, [r4, #16]
    1a90:	add.w	r3, r3, r2, lsl #2
    1a94:	ldr	r2, [r3, #4]
    1a96:	subs.w	r3, r0, r0, lsl #6
    1a9a:	it	mi
    1a9c:	addwmi	r3, r3, #1023	; 0x3ff
    1aa0:	asrs	r3, r3, #10
    1aa2:	adds	r3, #127	; 0x7f
    1aa4:	str	r3, [r2, #12]
    1aa6:	b.w	c10 <loop+0x410>
    1aaa:	ldr	r2, [r4, #12]
    1aac:	ldr	r3, [r4, #16]
    1aae:	add.w	r3, r3, r2, lsl #2
    1ab2:	ldr	r2, [r3, #4]
    1ab4:	subs.w	r3, r0, r0, lsl #6
    1ab8:	it	mi
    1aba:	addwmi	r3, r3, #1023	; 0x3ff
    1abe:	asrs	r3, r3, #10
    1ac0:	adds	r3, #127	; 0x7f
    1ac2:	str	r3, [r2, #12]
    1ac4:	b.w	c6a <loop+0x46a>
    1ac8:	ldr	r2, [r4, #12]
    1aca:	ldr	r3, [r4, #16]
    1acc:	add.w	r3, r3, r2, lsl #2
    1ad0:	ldr	r2, [r3, #4]
    1ad2:	subs.w	r3, r0, r0, lsl #6
    1ad6:	it	mi
    1ad8:	addwmi	r3, r3, #1023	; 0x3ff
    1adc:	asrs	r3, r3, #10
    1ade:	adds	r3, #127	; 0x7f
    1ae0:	str	r3, [r2, #12]
    1ae2:	b.w	bb6 <loop+0x3b6>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1ae6:	sub.w	r2, r0, #400	; 0x190
    1aea:	cmp.w	r2, #400	; 0x190
    1aee:	bcc.n	1bc0 <loop+0x13c0>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1af0:	sub.w	r2, r0, #800	; 0x320
    1af4:	cmp	r2, #223	; 0xdf
    1af6:	bhi.w	cc4 <loop+0x4c4>
        max_ppqn = 10;
    1afa:	movs	r2, #10
    1afc:	str	r2, [r3, #4]
    1afe:	ldr	r0, [r4, #4]
    1b00:	b.w	cc4 <loop+0x4c4>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1b04:	sub.w	r2, r0, #400	; 0x190
    1b08:	cmp.w	r2, #400	; 0x190
    1b0c:	bcc.n	1bb2 <loop+0x13b2>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1b0e:	sub.w	r2, r0, #800	; 0x320
    1b12:	cmp	r2, #223	; 0xdf
    1b14:	bhi.w	c6a <loop+0x46a>
        max_ppqn = 10;
    1b18:	movs	r2, #10
    1b1a:	str	r2, [r3, #4]
    1b1c:	ldr	r0, [r4, #4]
    1b1e:	b.w	c6a <loop+0x46a>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1b22:	sub.w	r2, r0, #400	; 0x190
    1b26:	cmp.w	r2, #400	; 0x190
    1b2a:	bcc.n	1ba4 <loop+0x13a4>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1b2c:	sub.w	r2, r0, #800	; 0x320
    1b30:	cmp	r2, #223	; 0xdf
    1b32:	bhi.w	c10 <loop+0x410>
        max_ppqn = 10;
    1b36:	movs	r2, #10
    1b38:	str	r2, [r3, #4]
    1b3a:	ldr	r0, [r4, #4]
    1b3c:	b.w	c10 <loop+0x410>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1b40:	sub.w	r2, r0, #400	; 0x190
    1b44:	cmp.w	r2, #400	; 0x190
    1b48:	bcc.n	1b96 <loop+0x1396>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1b4a:	sub.w	r2, r0, #800	; 0x320
    1b4e:	cmp	r2, #223	; 0xdf
    1b50:	bhi.w	d1e <loop+0x51e>
        max_ppqn = 10;
    1b54:	movs	r2, #10
    1b56:	str	r2, [r3, #4]
    1b58:	ldr	r0, [r4, #4]
    1b5a:	b.w	d1e <loop+0x51e>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1b5e:	sub.w	r2, r0, #400	; 0x190
    1b62:	cmp.w	r2, #400	; 0x190
    1b66:	bcc.n	1b88 <loop+0x1388>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1b68:	sub.w	r2, r0, #800	; 0x320
    1b6c:	cmp	r2, #223	; 0xdf
    1b6e:	bhi.w	bb6 <loop+0x3b6>
        max_ppqn = 10;
    1b72:	movs	r2, #10
    1b74:	str	r2, [r3, #4]
    1b76:	ldr	r0, [r4, #4]
    1b78:	b.w	bb6 <loop+0x3b6>
      if (m_steps[m_currentStep]->m_state) {
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
        m_currentStep++;
    1b7c:	adds	r3, #1
    1b7e:	cmp	r3, #3
    1b80:	it	gt
    1b82:	movgt	r3, #0
    1b84:	str	r3, [r6, #0]
    1b86:	b.n	1812 <loop+0x1012>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
    1b88:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1b8a:	movs	r1, #8

        if (ppqn >= 8) {
    1b8c:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1b8e:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1b90:	bgt.w	171c <loop+0xf1c>
    1b94:	b.n	1720 <loop+0xf20>
    1b96:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1b98:	movs	r1, #8

        if (ppqn >= 8) {
    1b9a:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1b9c:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1b9e:	bgt.w	173a <loop+0xf3a>
    1ba2:	b.n	173e <loop+0xf3e>
    1ba4:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1ba6:	movs	r1, #8

        if (ppqn >= 8) {
    1ba8:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1baa:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1bac:	bgt.w	1764 <loop+0xf64>
    1bb0:	b.n	1768 <loop+0xf68>
    1bb2:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1bb4:	movs	r1, #8

        if (ppqn >= 8) {
    1bb6:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1bb8:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1bba:	bgt.w	1782 <loop+0xf82>
    1bbe:	b.n	1786 <loop+0xf86>
    1bc0:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1bc2:	movs	r1, #8

        if (ppqn >= 8) {
    1bc4:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1bc6:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1bc8:	bgt.w	17a0 <loop+0xfa0>
    1bcc:	b.n	17a4 <loop+0xfa4>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1bce:	ldr	r0, [pc, #640]	; (1e50 <loop+0x1650>)
    1bd0:	bl	2e34 <usb_midi_write_packed>
    1bd4:	ldr	r3, [r5, #8]
    1bd6:	b.n	185a <loop+0x105a>
    1bd8:	ldr	r0, [r2, #8]
    1bda:	ldr	r3, [r2, #12]
    1bdc:	lsls	r0, r0, #16
    1bde:	lsls	r3, r3, #24
    1be0:	and.w	r3, r3, #2130706432	; 0x7f000000
    1be4:	and.w	r0, r0, #8323072	; 0x7f0000
    1be8:	orrs	r0, r3
    1bea:	orr.w	r0, r0, #40704	; 0x9f00
    1bee:	orr.w	r0, r0, #9
    1bf2:	bl	2e34 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1bf6:	bl	2ed0 <usb_midi_flush_output>
    1bfa:	ldr	r3, [r6, #0]
    1bfc:	b.n	17fe <loop+0xffe>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    1bfe:	ldrb	r3, [r5, #17]
    1c00:	cmp	r3, #0
    1c02:	beq.w	1d58 <loop+0x1558>
    1c06:	ldr	r3, [r5, #28]
        if (m_sequence.getShiftMode()) {
    1c08:	ldrb.w	r3, [r3, #46]	; 0x2e
    1c0c:	cmp	r3, #0
    1c0e:	beq.w	1fbc <loop+0x17bc>
    int getPage () {
      return m_page;
    }

    void nextPage () {
      if (m_page < 4) m_page++;
    1c12:	ldr	r1, [r7, #4]
    1c14:	cmp	r1, #3
    1c16:	itt	le
    1c18:	addle	r1, #1
    1c1a:	strle	r1, [r7, #4]
    1c1c:	b.n	15f2 <loop+0xdf2>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    1c1e:	ldrb	r3, [r6, #17]
    1c20:	cmp	r3, #0
    1c22:	beq.n	1c9e <loop+0x149e>
    1c24:	ldr	r3, [r6, #28]
        if (m_sequence.getShiftMode()) {
    1c26:	ldrb.w	r3, [r3, #46]	; 0x2e
    1c2a:	cmp	r3, #0
    1c2c:	beq.w	1f80 <loop+0x1780>
    1c30:	ldr	r1, [r7, #4]
    1c32:	cmp	r1, #3
    1c34:	itt	le
    1c36:	addle	r1, #1
    1c38:	strle	r1, [r7, #4]
    1c3a:	b.n	14f2 <loop+0xcf2>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    1c3c:	ldrb	r3, [r6, #17]
    1c3e:	cmp	r3, #0
    1c40:	beq.n	1cdc <loop+0x14dc>
    1c42:	ldr	r3, [r6, #28]
        if (m_sequence.getShiftMode()) {
    1c44:	ldrb.w	r3, [r3, #46]	; 0x2e
    1c48:	cmp	r3, #0
    1c4a:	beq.w	2034 <loop+0x1834>
    1c4e:	ldr	r1, [r7, #4]
    1c50:	cmp	r1, #3
    1c52:	itt	le
    1c54:	addle	r1, #1
    1c56:	strle	r1, [r7, #4]
    1c58:	b.n	16f2 <loop+0xef2>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    1c5a:	ldrb	r3, [r5, #17]
    1c5c:	cmp	r3, #0
    1c5e:	beq.n	1d1a <loop+0x151a>
    1c60:	ldr	r3, [r5, #28]
        if (m_sequence.getShiftMode()) {
    1c62:	ldrb.w	r3, [r3, #46]	; 0x2e
    1c66:	cmp	r3, #0
    1c68:	beq.w	2070 <loop+0x1870>
    1c6c:	ldr	r1, [r7, #4]
    1c6e:	cmp	r1, #3
    1c70:	itt	le
    1c72:	addle	r1, #1
    1c74:	strle	r1, [r7, #4]
    1c76:	b.n	1572 <loop+0xd72>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    1c78:	ldrb	r3, [r7, #17]
    1c7a:	cmp	r3, #0
    1c7c:	beq.w	1d96 <loop+0x1596>
    1c80:	ldr	r3, [r7, #28]
        if (m_sequence.getShiftMode()) {
    1c82:	ldrb.w	r3, [r3, #46]	; 0x2e
    1c86:	cmp	r3, #0
    1c88:	beq.w	1ff8 <loop+0x17f8>
    1c8c:	ldr	r1, [r6, #4]
    1c8e:	cmp	r1, #3
    1c90:	itt	le
    1c92:	addle	r1, #1
    1c94:	strle	r1, [r6, #4]
    1c96:	b.n	1672 <loop+0xe72>
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
          m_currentStep = 3;
    1c98:	movs	r3, #3
    1c9a:	str	r3, [r6, #0]
    1c9c:	b.n	1812 <loop+0x1012>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    1c9e:	ldr	r6, [r6, #24]
    };

    void toggle () {
      m_state = !m_state;
    1ca0:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1ca2:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1ca4:	clz	r1, r1
    1ca8:	lsrs	r1, r1, #5
    1caa:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1cac:	bl	2ba8 <digitalWrite>

      if (blinking) {
    1cb0:	ldrb	r3, [r6, #16]
    1cb2:	cbz	r3, 1cc2 <loop+0x14c2>
        digitalWrite(m_pin, !m_state);
    1cb4:	ldr	r1, [r6, #4]
    1cb6:	ldrb	r0, [r6, #0]
    1cb8:	clz	r1, r1
    1cbc:	lsrs	r1, r1, #5
    1cbe:	bl	2ba8 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
    1cc2:	ldr	r2, [r5, #28]
    1cc4:	ldr	r1, [r5, #0]
    1cc6:	ldr	r3, [r5, #36]	; 0x24
    1cc8:	ldr.w	r0, [r2, r1, lsl #2]
    1ccc:	ldr	r7, [r5, #32]
      m_velocity = 100;
      m_length = 4;
    };

    void toggle () {
      m_state = !m_state;
    1cce:	ldrb	r1, [r0, #4]
    1cd0:	ldr	r2, [r5, #40]	; 0x28
    1cd2:	eor.w	r1, r1, #1
    1cd6:	strb	r1, [r0, #4]
    1cd8:	b.w	87c <loop+0x7c>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    1cdc:	ldr	r6, [r6, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1cde:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1ce0:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1ce2:	clz	r1, r1
    1ce6:	lsrs	r1, r1, #5
    1ce8:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1cea:	bl	2ba8 <digitalWrite>

      if (blinking) {
    1cee:	ldrb	r3, [r6, #16]
    1cf0:	cbz	r3, 1d00 <loop+0x1500>
        digitalWrite(m_pin, !m_state);
    1cf2:	ldr	r1, [r6, #4]
    1cf4:	ldrb	r0, [r6, #0]
    1cf6:	clz	r1, r1
    1cfa:	lsrs	r1, r1, #5
    1cfc:	bl	2ba8 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
    1d00:	ldr	r2, [r5, #28]
    1d02:	ldr	r1, [r5, #0]
    1d04:	ldr	r3, [r5, #36]	; 0x24
    1d06:	ldr.w	r0, [r2, r1, lsl #2]
    1d0a:	ldr	r7, [r5, #32]
    1d0c:	ldrb	r1, [r0, #4]
    1d0e:	ldr	r2, [r5, #40]	; 0x28
    1d10:	eor.w	r1, r1, #1
    1d14:	strb	r1, [r0, #4]
    1d16:	b.w	970 <loop+0x170>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    1d1a:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d1c:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1d1e:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d20:	clz	r1, r1
    1d24:	lsrs	r1, r1, #5
    1d26:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1d28:	bl	2ba8 <digitalWrite>

      if (blinking) {
    1d2c:	ldrb	r3, [r5, #16]
    1d2e:	cbz	r3, 1d3e <loop+0x153e>
        digitalWrite(m_pin, !m_state);
    1d30:	ldr	r1, [r5, #4]
    1d32:	ldrb	r0, [r5, #0]
    1d34:	clz	r1, r1
    1d38:	lsrs	r1, r1, #5
    1d3a:	bl	2ba8 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
    1d3e:	ldr	r2, [r6, #28]
    1d40:	ldr	r1, [r6, #0]
    1d42:	ldr	r3, [r6, #36]	; 0x24
    1d44:	ldr.w	r0, [r2, r1, lsl #2]
    1d48:	ldr	r7, [r6, #32]
    1d4a:	ldrb	r1, [r0, #4]
    1d4c:	ldr	r2, [r6, #40]	; 0x28
    1d4e:	eor.w	r1, r1, #1
    1d52:	strb	r1, [r0, #4]
    1d54:	b.w	9ea <loop+0x1ea>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    1d58:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d5a:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1d5c:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d5e:	clz	r1, r1
    1d62:	lsrs	r1, r1, #5
    1d64:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1d66:	bl	2ba8 <digitalWrite>

      if (blinking) {
    1d6a:	ldrb	r3, [r5, #16]
    1d6c:	cbz	r3, 1d7c <loop+0x157c>
        digitalWrite(m_pin, !m_state);
    1d6e:	ldr	r1, [r5, #4]
    1d70:	ldrb	r0, [r5, #0]
    1d72:	clz	r1, r1
    1d76:	lsrs	r1, r1, #5
    1d78:	bl	2ba8 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
    1d7c:	ldr	r2, [r6, #28]
    1d7e:	ldr	r1, [r6, #0]
    1d80:	ldr	r3, [r6, #36]	; 0x24
    1d82:	ldr.w	r0, [r2, r1, lsl #2]
    1d86:	ldr	r7, [r6, #32]
    1d88:	ldrb	r1, [r0, #4]
    1d8a:	ldr	r2, [r6, #40]	; 0x28
    1d8c:	eor.w	r1, r1, #1
    1d90:	strb	r1, [r0, #4]
    1d92:	b.w	8f6 <loop+0xf6>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    1d96:	ldr	r6, [r7, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d98:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1d9a:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d9c:	clz	r1, r1
    1da0:	lsrs	r1, r1, #5
    1da2:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1da4:	bl	2ba8 <digitalWrite>

      if (blinking) {
    1da8:	ldrb	r3, [r6, #16]
    1daa:	cbz	r3, 1dba <loop+0x15ba>
        digitalWrite(m_pin, !m_state);
    1dac:	ldr	r1, [r6, #4]
    1dae:	ldrb	r0, [r6, #0]
    1db0:	clz	r1, r1
    1db4:	lsrs	r1, r1, #5
    1db6:	bl	2ba8 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
    1dba:	ldr	r2, [r5, #28]
    1dbc:	ldr	r1, [r5, #0]
    1dbe:	ldr	r3, [r5, #36]	; 0x24
    1dc0:	ldr.w	r0, [r2, r1, lsl #2]
    1dc4:	ldr	r6, [r5, #32]
    1dc6:	ldrb	r1, [r0, #4]
    1dc8:	ldr	r2, [r5, #40]	; 0x28
    1dca:	eor.w	r1, r1, #1
    1dce:	strb	r1, [r0, #4]
    1dd0:	b.w	a64 <loop+0x264>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    1dd4:	subs	r2, r3, #1
    1dd6:	cbz	r3, 1e02 <loop+0x1602>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    1dd8:	str	r2, [r6, #0]
    1dda:	b.n	18ba <loop+0x10ba>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1ddc:	ldr	r0, [r2, #8]
    1dde:	ldr	r3, [r2, #12]
    1de0:	lsls	r0, r0, #16
    1de2:	lsls	r3, r3, #24
    1de4:	and.w	r3, r3, #2130706432	; 0x7f000000
    1de8:	and.w	r0, r0, #8323072	; 0x7f0000
    1dec:	orrs	r0, r3
    1dee:	orr.w	r0, r0, #40704	; 0x9f00
    1df2:	orr.w	r0, r0, #9
    1df6:	bl	2e34 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1dfa:	bl	2ed0 <usb_midi_flush_output>
    1dfe:	ldr	r3, [r6, #0]
    1e00:	b.n	18a6 <loop+0x10a6>

        if (m_currentStep == -1) {
          m_currentStep = 3;
    1e02:	movs	r3, #3
    1e04:	str	r3, [r6, #0]
    1e06:	b.n	18ba <loop+0x10ba>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1e08:	ldr	r2, [pc, #72]	; (1e54 <loop+0x1654>)
    1e0a:	ldrb	r3, [r2, #0]
    1e0c:	cmp	r3, #0
    1e0e:	beq.w	2144 <loop+0x1944>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1e12:	cmp	r3, #1
    1e14:	beq.w	2166 <loop+0x1966>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1e18:	cmp	r3, #2
    1e1a:	bne.w	16fe <loop+0xefe>
        currentMode = PITCH;
        Serial.println("PITCH");
    1e1e:	ldr	r1, [pc, #56]	; (1e58 <loop+0x1658>)
    1e20:	ldr	r0, [pc, #56]	; (1e5c <loop+0x165c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1e22:	strb.w	r8, [r2]
        Serial.println("PITCH");
    1e26:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(); // shut the 999 blinks off
    1e2a:	mov	r1, r8
    1e2c:	ldr.w	r0, [r9, #36]	; 0x24
    1e30:	bl	4b4 <Led::blink(int)>
        m_leds[4]->on();
    1e34:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1e38:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1e3a:	strb.w	r8, [r3, #16]
      m_state = 1;
    1e3e:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
    1e40:	ldrb	r0, [r3, #0]
    1e42:	bl	2ba8 <digitalWrite>
    1e46:	ldr	r3, [r6, #36]	; 0x24
    1e48:	ldr	r7, [r6, #32]
    1e4a:	ldr	r2, [r6, #40]	; 0x28
    1e4c:	b.w	970 <loop+0x170>
    1e50:	.word	0x7f7bbf0b
    1e54:	.word	0x1fff18b0
    1e58:	.word	0x00005678
    1e5c:	.word	0x1fff0c70
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1e60:	ldr	r2, [pc, #720]	; (2134 <loop+0x1934>)
    1e62:	ldrb	r3, [r2, #0]
    1e64:	cmp	r3, #0
    1e66:	beq.w	20ce <loop+0x18ce>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1e6a:	cmp	r3, #1
    1e6c:	beq.w	21b2 <loop+0x19b2>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1e70:	cmp	r3, #2
    1e72:	bne.w	14fe <loop+0xcfe>
        currentMode = PITCH;
        Serial.println("PITCH");
    1e76:	ldr	r1, [pc, #704]	; (2138 <loop+0x1938>)
    1e78:	ldr	r0, [pc, #704]	; (213c <loop+0x193c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1e7a:	strb.w	r8, [r2]
        Serial.println("PITCH");
    1e7e:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(); // shut the 999 blinks off
    1e82:	mov	r1, r8
    1e84:	ldr.w	r0, [r9, #36]	; 0x24
    1e88:	bl	4b4 <Led::blink(int)>
        m_leds[4]->on();
    1e8c:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1e90:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1e92:	strb.w	r8, [r3, #16]
      m_state = 1;
    1e96:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
    1e98:	ldrb	r0, [r3, #0]
    1e9a:	bl	2ba8 <digitalWrite>
    1e9e:	ldr	r3, [r6, #36]	; 0x24
    1ea0:	ldr	r7, [r6, #32]
    1ea2:	ldr	r2, [r6, #40]	; 0x28
    1ea4:	b.w	87c <loop+0x7c>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1ea8:	ldr	r2, [pc, #648]	; (2134 <loop+0x1934>)
    1eaa:	ldrb	r3, [r2, #0]
    1eac:	cmp	r3, #0
    1eae:	beq.w	20ac <loop+0x18ac>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1eb2:	cmp	r3, #1
    1eb4:	beq.w	218c <loop+0x198c>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1eb8:	cmp	r3, #2
    1eba:	bne.w	167e <loop+0xe7e>
        currentMode = PITCH;
        Serial.println("PITCH");
    1ebe:	ldr	r1, [pc, #632]	; (2138 <loop+0x1938>)
    1ec0:	ldr	r0, [pc, #632]	; (213c <loop+0x193c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1ec2:	strb.w	r8, [r2]
        Serial.println("PITCH");
    1ec6:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(); // shut the 999 blinks off
    1eca:	mov	r1, r8
    1ecc:	ldr.w	r0, [r9, #36]	; 0x24
    1ed0:	bl	4b4 <Led::blink(int)>
        m_leds[4]->on();
    1ed4:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1ed8:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1eda:	strb.w	r8, [r3, #16]
      m_state = 1;
    1ede:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
    1ee0:	ldrb	r0, [r3, #0]
    1ee2:	bl	2ba8 <digitalWrite>
    1ee6:	ldr	r3, [r7, #36]	; 0x24
    1ee8:	ldr	r6, [r7, #32]
    1eea:	ldr	r2, [r7, #40]	; 0x28
    1eec:	b.w	a64 <loop+0x264>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1ef0:	ldr	r2, [pc, #576]	; (2134 <loop+0x1934>)
    1ef2:	ldrb	r3, [r2, #0]
    1ef4:	cmp	r3, #0
    1ef6:	beq.w	20f0 <loop+0x18f0>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1efa:	cmp	r3, #1
    1efc:	beq.w	21d8 <loop+0x19d8>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1f00:	cmp	r3, #2
    1f02:	bne.w	157e <loop+0xd7e>
        currentMode = PITCH;
        Serial.println("PITCH");
    1f06:	ldr	r1, [pc, #560]	; (2138 <loop+0x1938>)
    1f08:	ldr	r0, [pc, #560]	; (213c <loop+0x193c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1f0a:	strb.w	r8, [r2]
        Serial.println("PITCH");
    1f0e:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(); // shut the 999 blinks off
    1f12:	mov	r1, r8
    1f14:	ldr.w	r0, [r9, #36]	; 0x24
    1f18:	bl	4b4 <Led::blink(int)>
        m_leds[4]->on();
    1f1c:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1f20:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1f22:	strb.w	r8, [r3, #16]
      m_state = 1;
    1f26:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
    1f28:	ldrb	r0, [r3, #0]
    1f2a:	bl	2ba8 <digitalWrite>
    1f2e:	ldr	r3, [r5, #36]	; 0x24
    1f30:	ldr	r7, [r5, #32]
    1f32:	ldr	r2, [r5, #40]	; 0x28
    1f34:	b.w	9ea <loop+0x1ea>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1f38:	ldr	r2, [pc, #504]	; (2134 <loop+0x1934>)
    1f3a:	ldrb	r3, [r2, #0]
    1f3c:	cmp	r3, #0
    1f3e:	beq.w	2112 <loop+0x1912>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1f42:	cmp	r3, #1
    1f44:	beq.w	21fe <loop+0x19fe>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1f48:	cmp	r3, #2
    1f4a:	bne.w	15fe <loop+0xdfe>
        currentMode = PITCH;
        Serial.println("PITCH");
    1f4e:	ldr	r1, [pc, #488]	; (2138 <loop+0x1938>)
    1f50:	ldr	r0, [pc, #488]	; (213c <loop+0x193c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1f52:	strb.w	r8, [r2]
        Serial.println("PITCH");
    1f56:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(); // shut the 999 blinks off
    1f5a:	mov	r1, r8
    1f5c:	ldr.w	r0, [r9, #36]	; 0x24
    1f60:	bl	4b4 <Led::blink(int)>
        m_leds[4]->on();
    1f64:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1f68:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1f6a:	strb.w	r8, [r3, #16]
      m_state = 1;
    1f6e:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
    1f70:	ldrb	r0, [r3, #0]
    1f72:	bl	2ba8 <digitalWrite>
    1f76:	ldr	r3, [r5, #36]	; 0x24
    1f78:	ldr	r7, [r5, #32]
    1f7a:	ldr	r2, [r5, #40]	; 0x28
    1f7c:	b.w	8f6 <loop+0xf6>
      } else if (m_state == LOW && m_reverseButton) {
        if (m_sequence.getShiftMode()) {
          paginator->nextPage();
          Serial.println(paginator->getPage());
        } else {
          m_led.toggle();
    1f80:	ldr	r6, [r6, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1f82:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1f84:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1f86:	clz	r1, r1
    1f8a:	lsrs	r1, r1, #5
    1f8c:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1f8e:	bl	2ba8 <digitalWrite>

      if (blinking) {
    1f92:	ldrb	r3, [r6, #16]
    1f94:	cbz	r3, 1fa4 <loop+0x17a4>
        digitalWrite(m_pin, !m_state);
    1f96:	ldr	r1, [r6, #4]
    1f98:	ldrb	r0, [r6, #0]
    1f9a:	clz	r1, r1
    1f9e:	lsrs	r1, r1, #5
    1fa0:	bl	2ba8 <digitalWrite>
    1fa4:	ldr	r0, [r5, #28]
    1fa6:	ldr	r3, [r5, #36]	; 0x24
    void resetStep () {
      m_currentStep = 0;
    };

    void reverse () {
      m_reverse = !m_reverse;
    1fa8:	ldrb.w	r1, [r0, #45]	; 0x2d
    1fac:	ldr	r7, [r5, #32]
    1fae:	ldr	r2, [r5, #40]	; 0x28
    1fb0:	eor.w	r1, r1, #1
    1fb4:	strb.w	r1, [r0, #45]	; 0x2d
    1fb8:	b.w	87c <loop+0x7c>
    1fbc:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1fbe:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1fc0:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1fc2:	clz	r1, r1
    1fc6:	lsrs	r1, r1, #5
    1fc8:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1fca:	bl	2ba8 <digitalWrite>

      if (blinking) {
    1fce:	ldrb	r3, [r5, #16]
    1fd0:	cbz	r3, 1fe0 <loop+0x17e0>
        digitalWrite(m_pin, !m_state);
    1fd2:	ldr	r1, [r5, #4]
    1fd4:	ldrb	r0, [r5, #0]
    1fd6:	clz	r1, r1
    1fda:	lsrs	r1, r1, #5
    1fdc:	bl	2ba8 <digitalWrite>
    1fe0:	ldr	r0, [r6, #28]
    1fe2:	ldr	r3, [r6, #36]	; 0x24
    1fe4:	ldrb.w	r1, [r0, #45]	; 0x2d
    1fe8:	ldr	r7, [r6, #32]
    1fea:	ldr	r2, [r6, #40]	; 0x28
    1fec:	eor.w	r1, r1, #1
    1ff0:	strb.w	r1, [r0, #45]	; 0x2d
    1ff4:	b.w	8f6 <loop+0xf6>
    1ff8:	ldr	r6, [r7, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1ffa:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1ffc:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1ffe:	clz	r1, r1
    2002:	lsrs	r1, r1, #5
    2004:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    2006:	bl	2ba8 <digitalWrite>

      if (blinking) {
    200a:	ldrb	r3, [r6, #16]
    200c:	cbz	r3, 201c <loop+0x181c>
        digitalWrite(m_pin, !m_state);
    200e:	ldr	r1, [r6, #4]
    2010:	ldrb	r0, [r6, #0]
    2012:	clz	r1, r1
    2016:	lsrs	r1, r1, #5
    2018:	bl	2ba8 <digitalWrite>
    201c:	ldr	r0, [r5, #28]
    201e:	ldr	r3, [r5, #36]	; 0x24
    2020:	ldrb.w	r1, [r0, #45]	; 0x2d
    2024:	ldr	r6, [r5, #32]
    2026:	ldr	r2, [r5, #40]	; 0x28
    2028:	eor.w	r1, r1, #1
    202c:	strb.w	r1, [r0, #45]	; 0x2d
    2030:	b.w	a64 <loop+0x264>
    2034:	ldr	r6, [r6, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    2036:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    2038:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    203a:	clz	r1, r1
    203e:	lsrs	r1, r1, #5
    2040:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    2042:	bl	2ba8 <digitalWrite>

      if (blinking) {
    2046:	ldrb	r3, [r6, #16]
    2048:	cbz	r3, 2058 <loop+0x1858>
        digitalWrite(m_pin, !m_state);
    204a:	ldr	r1, [r6, #4]
    204c:	ldrb	r0, [r6, #0]
    204e:	clz	r1, r1
    2052:	lsrs	r1, r1, #5
    2054:	bl	2ba8 <digitalWrite>
    2058:	ldr	r0, [r5, #28]
    205a:	ldr	r3, [r5, #36]	; 0x24
    205c:	ldrb.w	r1, [r0, #45]	; 0x2d
    2060:	ldr	r7, [r5, #32]
    2062:	ldr	r2, [r5, #40]	; 0x28
    2064:	eor.w	r1, r1, #1
    2068:	strb.w	r1, [r0, #45]	; 0x2d
    206c:	b.w	970 <loop+0x170>
    2070:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    2072:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    2074:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    2076:	clz	r1, r1
    207a:	lsrs	r1, r1, #5
    207c:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    207e:	bl	2ba8 <digitalWrite>

      if (blinking) {
    2082:	ldrb	r3, [r5, #16]
    2084:	cbz	r3, 2094 <loop+0x1894>
        digitalWrite(m_pin, !m_state);
    2086:	ldr	r1, [r5, #4]
    2088:	ldrb	r0, [r5, #0]
    208a:	clz	r1, r1
    208e:	lsrs	r1, r1, #5
    2090:	bl	2ba8 <digitalWrite>
    2094:	ldr	r0, [r6, #28]
    2096:	ldr	r3, [r6, #36]	; 0x24
    2098:	ldrb.w	r1, [r0, #45]	; 0x2d
    209c:	ldr	r7, [r6, #32]
    209e:	ldr	r2, [r6, #40]	; 0x28
    20a0:	eor.w	r1, r1, #1
    20a4:	strb.w	r1, [r0, #45]	; 0x2d
    20a8:	b.w	9ea <loop+0x1ea>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    20ac:	movs	r3, #1
        Serial.println("VELOCITY");
    20ae:	ldr	r1, [pc, #144]	; (2140 <loop+0x1940>)
    20b0:	ldr	r0, [pc, #136]	; (213c <loop+0x193c>)
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    20b2:	strb	r3, [r2, #0]
        Serial.println("VELOCITY");
    20b4:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(999);
    20b8:	ldr.w	r0, [r9, #36]	; 0x24
    20bc:	movw	r1, #999	; 0x3e7
    20c0:	bl	4b4 <Led::blink(int)>
    20c4:	ldr	r3, [r7, #36]	; 0x24
    20c6:	ldr	r6, [r7, #32]
    20c8:	ldr	r2, [r7, #40]	; 0x28
    20ca:	b.w	a64 <loop+0x264>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    20ce:	movs	r3, #1
        Serial.println("VELOCITY");
    20d0:	ldr	r1, [pc, #108]	; (2140 <loop+0x1940>)
    20d2:	ldr	r0, [pc, #104]	; (213c <loop+0x193c>)
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    20d4:	strb	r3, [r2, #0]
        Serial.println("VELOCITY");
    20d6:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(999);
    20da:	ldr.w	r0, [r9, #36]	; 0x24
    20de:	movw	r1, #999	; 0x3e7
    20e2:	bl	4b4 <Led::blink(int)>
    20e6:	ldr	r3, [r6, #36]	; 0x24
    20e8:	ldr	r7, [r6, #32]
    20ea:	ldr	r2, [r6, #40]	; 0x28
    20ec:	b.w	87c <loop+0x7c>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    20f0:	movs	r3, #1
        Serial.println("VELOCITY");
    20f2:	ldr	r1, [pc, #76]	; (2140 <loop+0x1940>)
    20f4:	ldr	r0, [pc, #68]	; (213c <loop+0x193c>)
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    20f6:	strb	r3, [r2, #0]
        Serial.println("VELOCITY");
    20f8:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(999);
    20fc:	ldr.w	r0, [r9, #36]	; 0x24
    2100:	movw	r1, #999	; 0x3e7
    2104:	bl	4b4 <Led::blink(int)>
    2108:	ldr	r3, [r5, #36]	; 0x24
    210a:	ldr	r7, [r5, #32]
    210c:	ldr	r2, [r5, #40]	; 0x28
    210e:	b.w	9ea <loop+0x1ea>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    2112:	movs	r3, #1
        Serial.println("VELOCITY");
    2114:	ldr	r1, [pc, #40]	; (2140 <loop+0x1940>)
    2116:	ldr	r0, [pc, #36]	; (213c <loop+0x193c>)
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    2118:	strb	r3, [r2, #0]
        Serial.println("VELOCITY");
    211a:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(999);
    211e:	ldr.w	r0, [r9, #36]	; 0x24
    2122:	movw	r1, #999	; 0x3e7
    2126:	bl	4b4 <Led::blink(int)>
    212a:	ldr	r3, [r5, #36]	; 0x24
    212c:	ldr	r7, [r5, #32]
    212e:	ldr	r2, [r5, #40]	; 0x28
    2130:	b.w	8f6 <loop+0xf6>
    2134:	.word	0x1fff18b0
    2138:	.word	0x00005678
    213c:	.word	0x1fff0c70
    2140:	.word	0x00005660
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    2144:	movs	r3, #1
        Serial.println("VELOCITY");
    2146:	ldr	r1, [pc, #220]	; (2224 <loop+0x1a24>)
    2148:	ldr	r0, [pc, #220]	; (2228 <loop+0x1a28>)
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    214a:	strb	r3, [r2, #0]
        Serial.println("VELOCITY");
    214c:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(999);
    2150:	ldr.w	r0, [r9, #36]	; 0x24
    2154:	movw	r1, #999	; 0x3e7
    2158:	bl	4b4 <Led::blink(int)>
    215c:	ldr	r3, [r6, #36]	; 0x24
    215e:	ldr	r7, [r6, #32]
    2160:	ldr	r2, [r6, #40]	; 0x28
    2162:	b.w	970 <loop+0x170>
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    2166:	movs	r3, #2
        Serial.println("NOTELENGTH");
    2168:	ldr	r1, [pc, #192]	; (222c <loop+0x1a2c>)
    216a:	ldr	r0, [pc, #188]	; (2228 <loop+0x1a28>)
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    216c:	strb	r3, [r2, #0]
        Serial.println("NOTELENGTH");
    216e:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink();
    2172:	mov	r1, r8
    2174:	ldr.w	r0, [r9, #36]	; 0x24
    2178:	bl	4b4 <Led::blink(int)>
        m_leds[4]->off();
    217c:	ldr.w	r3, [r9, #36]	; 0x24
    };

    void off () {
      blinking = false;
      m_state = 0;
      digitalWrite(m_pin, m_state);
    2180:	mov	r1, r8
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    2182:	strb.w	r8, [r3, #16]
      m_state = 0;
    2186:	str.w	r8, [r3, #4]
    218a:	b.n	1e40 <loop+0x1640>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    218c:	movs	r3, #2
        Serial.println("NOTELENGTH");
    218e:	ldr	r1, [pc, #156]	; (222c <loop+0x1a2c>)
    2190:	ldr	r0, [pc, #148]	; (2228 <loop+0x1a28>)
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    2192:	strb	r3, [r2, #0]
        Serial.println("NOTELENGTH");
    2194:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink();
    2198:	mov	r1, r8
    219a:	ldr.w	r0, [r9, #36]	; 0x24
    219e:	bl	4b4 <Led::blink(int)>
        m_leds[4]->off();
    21a2:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    21a6:	mov	r1, r8
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    21a8:	strb.w	r8, [r3, #16]
      m_state = 0;
    21ac:	str.w	r8, [r3, #4]
    21b0:	b.n	1ee0 <loop+0x16e0>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    21b2:	movs	r3, #2
        Serial.println("NOTELENGTH");
    21b4:	ldr	r1, [pc, #116]	; (222c <loop+0x1a2c>)
    21b6:	ldr	r0, [pc, #112]	; (2228 <loop+0x1a28>)
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    21b8:	strb	r3, [r2, #0]
        Serial.println("NOTELENGTH");
    21ba:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink();
    21be:	mov	r1, r8
    21c0:	ldr.w	r0, [r9, #36]	; 0x24
    21c4:	bl	4b4 <Led::blink(int)>
        m_leds[4]->off();
    21c8:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    21cc:	mov	r1, r8
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    21ce:	strb.w	r8, [r3, #16]
      m_state = 0;
    21d2:	str.w	r8, [r3, #4]
    21d6:	b.n	1e98 <loop+0x1698>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    21d8:	movs	r3, #2
        Serial.println("NOTELENGTH");
    21da:	ldr	r1, [pc, #80]	; (222c <loop+0x1a2c>)
    21dc:	ldr	r0, [pc, #72]	; (2228 <loop+0x1a28>)
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    21de:	strb	r3, [r2, #0]
        Serial.println("NOTELENGTH");
    21e0:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink();
    21e4:	mov	r1, r8
    21e6:	ldr.w	r0, [r9, #36]	; 0x24
    21ea:	bl	4b4 <Led::blink(int)>
        m_leds[4]->off();
    21ee:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    21f2:	mov	r1, r8
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    21f4:	strb.w	r8, [r3, #16]
      m_state = 0;
    21f8:	str.w	r8, [r3, #4]
    21fc:	b.n	1f28 <loop+0x1728>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    21fe:	movs	r3, #2
        Serial.println("NOTELENGTH");
    2200:	ldr	r1, [pc, #40]	; (222c <loop+0x1a2c>)
    2202:	ldr	r0, [pc, #36]	; (2228 <loop+0x1a28>)
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    2204:	strb	r3, [r2, #0]
        Serial.println("NOTELENGTH");
    2206:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink();
    220a:	mov	r1, r8
    220c:	ldr.w	r0, [r9, #36]	; 0x24
    2210:	bl	4b4 <Led::blink(int)>
        m_leds[4]->off();
    2214:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    2218:	mov	r1, r8
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    221a:	strb.w	r8, [r3, #16]
      m_state = 0;
    221e:	str.w	r8, [r3, #4]
    2222:	b.n	1f70 <loop+0x1770>
    2224:	.word	0x00005660
    2228:	.word	0x1fff0c70
    222c:	.word	0x0000566c

00002230 <_GLOBAL__sub_I_currentMode>:
    2230:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#include "definitions.h"
#include "controller.h"
#include "transport.h"
#include "step.h"

Led led1(3, LOW);
    2234:	movs	r2, #0
    2236:	movs	r1, #3
    2238:	ldr	r0, [pc, #544]	; (245c <_GLOBAL__sub_I_currentMode+0x22c>)
    boolean m_reverse;
    boolean m_shiftMode;
    int m_page = 1;
    Paginator* m_paginator;

    Sequence (Step* steps[4], Led* leds[6]) {
    223a:	ldr	r5, [pc, #548]	; (2460 <_GLOBAL__sub_I_currentMode+0x230>)
    223c:	ldr	r7, [pc, #548]	; (2464 <_GLOBAL__sub_I_currentMode+0x234>)
    223e:	bl	490 <Led::Led(int, int)>
Led led2(5, LOW);
    2242:	movs	r2, #0
    2244:	movs	r1, #5
    2246:	ldr	r0, [pc, #544]	; (2468 <_GLOBAL__sub_I_currentMode+0x238>)
    2248:	bl	490 <Led::Led(int, int)>
Led led3(7, LOW);
    224c:	movs	r2, #0
    224e:	movs	r1, #7
    2250:	ldr	r0, [pc, #536]	; (246c <_GLOBAL__sub_I_currentMode+0x23c>)
    2252:	bl	490 <Led::Led(int, int)>
Led led4(9, LOW);
    2256:	movs	r2, #0
    2258:	movs	r1, #9
    225a:	ldr	r0, [pc, #532]	; (2470 <_GLOBAL__sub_I_currentMode+0x240>)
    225c:	bl	490 <Led::Led(int, int)>
Led led5(11, LOW);
    2260:	movs	r2, #0
    2262:	movs	r1, #11
    2264:	ldr	r0, [pc, #524]	; (2474 <_GLOBAL__sub_I_currentMode+0x244>)
    2266:	bl	490 <Led::Led(int, int)>
Led led6(24, LOW);
    226a:	movs	r2, #0
    226c:	movs	r1, #24
    226e:	ldr	r0, [pc, #520]	; (2478 <_GLOBAL__sub_I_currentMode+0x248>)
    2270:	bl	490 <Led::Led(int, int)>
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    2274:	ldr	r2, [pc, #516]	; (247c <_GLOBAL__sub_I_currentMode+0x24c>)
    2276:	ldr	r3, [pc, #520]	; (2480 <_GLOBAL__sub_I_currentMode+0x250>)
    2278:	ldr.w	lr, [pc, #588]	; 24c8 <_GLOBAL__sub_I_currentMode+0x298>
    227c:	str.w	lr, [r2]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    2280:	movs	r0, #100	; 0x64
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    2282:	movs	r6, #0
      m_controller = controller;
      m_pitch = 38;
    2284:	movs	r4, #38	; 0x26
      m_velocity = 100;
      m_length = 4;
    2286:	movs	r1, #4

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    2288:	str	r0, [r2, #12]
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    228a:	strb	r6, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
    228c:	str	r4, [r2, #8]
      m_velocity = 100;
      m_length = 4;
    228e:	str	r1, [r2, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    2290:	ldr	r2, [pc, #496]	; (2484 <_GLOBAL__sub_I_currentMode+0x254>)
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    2292:	str	r0, [r3, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    2294:	str.w	lr, [r3]
      m_state = false;
    2298:	strb	r6, [r3, #4]
      m_controller = controller;
      m_pitch = 38;
    229a:	str	r4, [r3, #8]
      m_velocity = 100;
      m_length = 4;
    229c:	str	r1, [r3, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    229e:	ldr	r3, [pc, #488]	; (2488 <_GLOBAL__sub_I_currentMode+0x258>)
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    22a0:	str	r0, [r2, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    22a2:	str.w	lr, [r2]
      m_state = false;
    22a6:	strb	r6, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
    22a8:	str	r4, [r2, #8]
      m_velocity = 100;
      m_length = 4;
    22aa:	str	r1, [r2, #16]
    22ac:	movs	r2, #1

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    22ae:	str	r0, [r3, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    22b0:	str.w	lr, [r3]
      m_state = false;
    22b4:	strb	r6, [r3, #4]
      m_controller = controller;
      m_pitch = 38;
    22b6:	str	r4, [r3, #8]
      m_velocity = 100;
      m_length = 4;
    22b8:	str	r1, [r3, #16]
    22ba:	str	r2, [r5, #48]	; 0x30
    22bc:	add.w	r3, r5, #16
    22c0:	add.w	r0, r5, #40	; 0x28
    22c4:	mov	r2, r7
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
    22c6:	ldr.w	r1, [r2], #4
    22ca:	str.w	r1, [r3, #4]!
    boolean m_shiftMode;
    int m_page = 1;
    Paginator* m_paginator;

    Sequence (Step* steps[4], Led* leds[6]) {
      for (int i = 0; i < 6; i++) {
    22ce:	cmp	r0, r3
    22d0:	bne.n	22c6 <_GLOBAL__sub_I_currentMode+0x96>
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    22d2:	ldr	r3, [pc, #440]	; (248c <_GLOBAL__sub_I_currentMode+0x25c>)
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    22d4:	ldr	r6, [pc, #440]	; (2490 <_GLOBAL__sub_I_currentMode+0x260>)
    22d6:	ldmia	r3, {r0, r1, r2, r3}
      };
      
      m_currentStep = 0;
    22d8:	movs	r4, #0
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    22da:	str	r0, [r5, #4]
      
      m_currentStep = 0;
      m_mode = PITCH;
      m_reverse = false;

      m_paginator = new Paginator();
    22dc:	movs	r0, #8
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    22de:	str	r2, [r5, #12]
    22e0:	str	r1, [r5, #8]
    22e2:	str	r3, [r5, #16]
      };
      
      m_currentStep = 0;
    22e4:	str	r4, [r5, #0]
      m_mode = PITCH;
    22e6:	strb.w	r4, [r5, #44]	; 0x2c
      m_reverse = false;
    22ea:	strb.w	r4, [r5, #45]	; 0x2d

      m_paginator = new Paginator();
    22ee:	bl	41d8 <operator new(unsigned int)>
    22f2:	mov	r3, r0
  Sequence* m_sequence;
  private:
    int m_page = 1;  

  public:
    Paginator () {
    22f4:	mov.w	r8, #1
    22f8:	movs	r1, #15
    22fa:	str.w	r8, [r3, #4]
    22fe:	ldr	r0, [pc, #404]	; (2494 <_GLOBAL__sub_I_currentMode+0x264>)
    2300:	str	r3, [r5, #52]	; 0x34
    2302:	bl	2598 <usb_serial_write>
    2306:	ldr	r0, [pc, #400]	; (2498 <_GLOBAL__sub_I_currentMode+0x268>)
    2308:	bl	410c <Print::println()>
    230c:	ldr	r3, [r5, #52]	; 0x34
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    230e:	ldr	r0, [pc, #392]	; (2498 <_GLOBAL__sub_I_currentMode+0x268>)
    2310:	ldr	r1, [r3, #4]
    2312:	bl	41ac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    2316:	ldr	r0, [pc, #384]	; (2498 <_GLOBAL__sub_I_currentMode+0x268>)
    2318:	bl	410c <Print::println()>
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    231c:	mov.w	sl, #2
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2320:	ldr	r2, [pc, #376]	; (249c <_GLOBAL__sub_I_currentMode+0x26c>)
    2322:	str	r4, [r6, #8]
    2324:	movs	r3, #24
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    2326:	mov	r1, r4
    2328:	mov	r0, sl
    232a:	str	r3, [r6, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    232c:	ldr	r3, [r7, #0]
    232e:	strb.w	r4, [r2, #48]	; 0x30
      m_id = id;
      m_pin = pin;
    2332:	mov.w	r9, #4
      m_shiftButton = shiftButton;
    2336:	strb	r4, [r2, #16]
      m_reverseButton = reverseButton;
    2338:	strb	r4, [r2, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    233a:	str	r3, [r2, #24]
      m_state = false;
    233c:	strb	r4, [r6, #0]
    233e:	str	r5, [r2, #28]
      m_id = id;
    2340:	str.w	r8, [r2]
      m_pin = pin;
    2344:	str.w	sl, [r2, #60]	; 0x3c
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    2348:	str	r5, [r6, #12]
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    234a:	bl	2bd0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    234e:	ldr	r2, [pc, #336]	; (24a0 <_GLOBAL__sub_I_currentMode+0x270>)
    2350:	ldr	r3, [r7, #4]
    2352:	strb.w	r4, [r2, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    2356:	mov	r1, r4
    2358:	mov	r0, r9
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    235a:	strb	r4, [r2, #16]
      m_reverseButton = reverseButton;
    235c:	strb	r4, [r2, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    235e:	str	r3, [r2, #24]
    2360:	str	r5, [r2, #28]
      m_id = id;
    2362:	str.w	sl, [r2]
      m_pin = pin;
    2366:	str.w	r9, [r2, #60]	; 0x3c
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    236a:	bl	2bd0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    236e:	ldr	r3, [pc, #308]	; (24a4 <_GLOBAL__sub_I_currentMode+0x274>)
    2370:	ldr	r2, [r7, #8]
    2372:	strb.w	r4, [r3, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    2376:	mov	r1, r4
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    2378:	mov.w	fp, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    237c:	movs	r0, #6
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    237e:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    2380:	strb	r4, [r3, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2382:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    2384:	str	r0, [r3, #60]	; 0x3c
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2386:	str	r5, [r3, #28]
      m_id = id;
    2388:	str.w	fp, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    238c:	bl	2bd0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2390:	ldr	r3, [pc, #276]	; (24a8 <_GLOBAL__sub_I_currentMode+0x278>)
    2392:	ldr	r0, [r7, #12]
    2394:	str	r0, [r3, #24]
      m_id = id;
      m_pin = pin;
    2396:	movs	r2, #8
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    2398:	mov	r1, r4
    239a:	mov	r0, r2
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    239c:	strb.w	r4, [r3, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    23a0:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    23a2:	strb	r4, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    23a4:	str	r2, [r3, #60]	; 0x3c
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    23a6:	str	r5, [r3, #28]
      m_id = id;
    23a8:	str.w	r9, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    23ac:	bl	2bd0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    23b0:	ldr	r3, [pc, #248]	; (24ac <_GLOBAL__sub_I_currentMode+0x27c>)
    23b2:	ldr	r0, [r7, #16]
    23b4:	str	r0, [r3, #24]
      m_id = id;
      m_pin = pin;
    23b6:	movs	r2, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    23b8:	movs	r0, #5
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    23ba:	mov	r1, r4
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    23bc:	str	r0, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    23be:	mov	r0, r2
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    23c0:	strb.w	r4, [r3, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    23c4:	strb	r4, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    23c6:	str	r2, [r3, #60]	; 0x3c
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    23c8:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    23ca:	strb.w	r8, [r3, #16]
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    23ce:	bl	2bd0 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    23d2:	ldr	r3, [pc, #220]	; (24b0 <_GLOBAL__sub_I_currentMode+0x280>)
    23d4:	ldr	r7, [r7, #20]
    23d6:	str	r7, [r3, #24]
      m_id = id;
    23d8:	movs	r2, #6
    23da:	str	r2, [r3, #0]
      m_pin = pin;
    23dc:	movs	r2, #12
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    23de:	ldr	r7, [pc, #212]	; (24b4 <_GLOBAL__sub_I_currentMode+0x284>)
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    23e0:	strb.w	r4, [r3, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    23e4:	mov	r0, r2
    23e6:	mov	r1, r4
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    23e8:	strb	r4, [r3, #16]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    23ea:	str	r2, [r3, #60]	; 0x3c
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    23ec:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    23ee:	strb.w	r8, [r3, #17]

      pinMode(pin, INPUT);
    23f2:	bl	2bd0 <pinMode>
    23f6:	ldr	r0, [pc, #192]	; (24b8 <_GLOBAL__sub_I_currentMode+0x288>)
    23f8:	ldr	r1, [pc, #192]	; (24bc <_GLOBAL__sub_I_currentMode+0x28c>)
    23fa:	ldr	r2, [pc, #196]	; (24c0 <_GLOBAL__sub_I_currentMode+0x290>)
    23fc:	ldr	r3, [pc, #196]	; (24c4 <_GLOBAL__sub_I_currentMode+0x294>)
      m_pin = pin;
      m_knobType = knobType;
    23fe:	strb	r4, [r7, #24]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    2400:	mov.w	ip, #14
      m_knobType = knobType;
      m_id = id;
    2404:	str	r4, [r7, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    2406:	strb.w	ip, [r7]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    240a:	str	r6, [r7, #20]
    240c:	str	r5, [r7, #16]
      m_pin = pin;
    240e:	mov.w	lr, #15
    2412:	mov.w	ip, #16
    2416:	movs	r7, #17
    2418:	movs	r4, #18
    241a:	strb.w	lr, [r0]
    241e:	strb.w	ip, [r1]
    2422:	strb	r7, [r2, #0]
    2424:	strb	r4, [r3, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2426:	str	r6, [r0, #20]
    2428:	str	r5, [r0, #16]
      m_pin = pin;
      m_knobType = knobType;
    242a:	strb.w	r8, [r0, #24]
      m_id = id;
    242e:	str.w	r8, [r0, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2432:	str	r6, [r1, #20]
    2434:	str	r5, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    2436:	strb.w	sl, [r1, #24]
      m_id = id;
    243a:	str.w	sl, [r1, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    243e:	str	r6, [r2, #20]
    2440:	str	r5, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    2442:	strb.w	fp, [r2, #24]
      m_id = id;
    2446:	str.w	fp, [r2, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    244a:	str	r6, [r3, #20]
    244c:	str	r5, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
    244e:	strb.w	r9, [r3, #24]
      m_id = id;
    2452:	str.w	r9, [r3, #12]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
    2456:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    245a:	nop
    245c:	.word	0x1fff18b4
    2460:	.word	0x1fff178c
    2464:	.word	0x1fff0c50
    2468:	.word	0x1fff18cc
    246c:	.word	0x1fff18e4
    2470:	.word	0x1fff18fc
    2474:	.word	0x1fff15d8
    2478:	.word	0x1fff15f0
    247c:	.word	0x1fff17c4
    2480:	.word	0x1fff17d8
    2484:	.word	0x1fff17ec
    2488:	.word	0x1fff1800
    248c:	.word	0x1fff0c40
    2490:	.word	0x1fff18a0
    2494:	.word	0x000056d0
    2498:	.word	0x1fff0c70
    249c:	.word	0x1fff160c
    24a0:	.word	0x1fff164c
    24a4:	.word	0x1fff168c
    24a8:	.word	0x1fff16cc
    24ac:	.word	0x1fff170c
    24b0:	.word	0x1fff174c
    24b4:	.word	0x1fff1814
    24b8:	.word	0x1fff1830
    24bc:	.word	0x1fff184c
    24c0:	.word	0x1fff1868
    24c4:	.word	0x1fff1884
    24c8:	.word	0x1fff1608

000024cc <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    24cc:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    24ce:	ldr	r5, [pc, #60]	; (250c <usb_serial_getchar+0x40>)
    24d0:	ldr	r0, [r5, #0]
    24d2:	cbz	r0, 24f4 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    24d4:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    24d6:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    24d8:	adds	r1, r0, r3
    24da:	adds	r3, #1
	if (i >= rx_packet->len) {
    24dc:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    24de:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    24e0:	bcs.n	24e8 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    24e2:	strh	r3, [r0, #2]
	}
	return c;
    24e4:	mov	r0, r4
}
    24e6:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    24e8:	bl	3378 <usb_free>
		rx_packet = NULL;
    24ec:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    24ee:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    24f0:	str	r3, [r5, #0]
    24f2:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    24f4:	ldr	r3, [pc, #24]	; (2510 <usb_serial_getchar+0x44>)
    24f6:	ldrb	r3, [r3, #0]
    24f8:	cbz	r3, 2506 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    24fa:	movs	r0, #2
    24fc:	bl	33c4 <usb_rx>
    2500:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    2502:	cmp	r0, #0
    2504:	bne.n	24d4 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2506:	mov.w	r0, #4294967295
    250a:	pop	{r3, r4, r5, pc}
    250c:	.word	0x1fff1920
    2510:	.word	0x1fff1a80

00002514 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    2514:	push	{r4, lr}
	if (!rx_packet) {
    2516:	ldr	r4, [pc, #36]	; (253c <usb_serial_peekchar+0x28>)
    2518:	ldr	r0, [r4, #0]
    251a:	cbz	r0, 2524 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    251c:	ldrh	r3, [r0, #2]
    251e:	add	r0, r3
    2520:	ldrb	r0, [r0, #8]
}
    2522:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2524:	ldr	r3, [pc, #24]	; (2540 <usb_serial_peekchar+0x2c>)
    2526:	ldrb	r3, [r3, #0]
    2528:	cbz	r3, 2536 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    252a:	movs	r0, #2
    252c:	bl	33c4 <usb_rx>
    2530:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    2532:	cmp	r0, #0
    2534:	bne.n	251c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2536:	mov.w	r0, #4294967295
    253a:	pop	{r4, pc}
    253c:	.word	0x1fff1920
    2540:	.word	0x1fff1a80

00002544 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    2544:	ldr	r3, [pc, #16]	; (2558 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    2546:	ldr	r2, [pc, #20]	; (255c <usb_serial_available+0x18>)
    2548:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    254a:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    254c:	cbz	r3, 2556 <usb_serial_available+0x12>
    254e:	ldrh	r2, [r3, #0]
    2550:	ldrh	r3, [r3, #2]
    2552:	subs	r3, r2, r3
    2554:	add	r0, r3
	return count;
}
    2556:	bx	lr
    2558:	.word	0x1fff1920
    255c:	.word	0x1fff1f14

00002560 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    2560:	ldr	r3, [pc, #44]	; (2590 <usb_serial_flush_input+0x30>)
    2562:	ldrb	r3, [r3, #0]
    2564:	cbz	r3, 258e <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    2566:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    2568:	ldr	r4, [pc, #40]	; (2594 <usb_serial_flush_input+0x34>)
    256a:	ldr	r0, [r4, #0]
    256c:	cbz	r0, 2582 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    256e:	bl	3378 <usb_free>
		rx_packet = NULL;
    2572:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    2574:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    2576:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    2578:	bl	33c4 <usb_rx>
		if (!rx) break;
    257c:	cbz	r0, 258c <usb_serial_flush_input+0x2c>
		usb_free(rx);
    257e:	bl	3378 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    2582:	movs	r0, #2
    2584:	bl	33c4 <usb_rx>
		if (!rx) break;
    2588:	cmp	r0, #0
    258a:	bne.n	257e <usb_serial_flush_input+0x1e>
    258c:	pop	{r4, pc}
    258e:	bx	lr
    2590:	.word	0x1fff1a80
    2594:	.word	0x1fff1920

00002598 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    2598:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    259c:	ldr.w	r9, [pc, #248]	; 2698 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    25a0:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    25a2:	movs	r2, #1
    25a4:	strb.w	r2, [r9]
	while (size > 0) {
    25a8:	str	r1, [sp, #4]
    25aa:	cbz	r1, 2608 <usb_serial_write+0x70>
    25ac:	ldr.w	r8, [pc, #236]	; 269c <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    25b0:	ldr	r7, [pc, #212]	; (2688 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    25b2:	ldr	r6, [sp, #4]
    25b4:	mov	fp, r0
		if (!tx_packet) {
    25b6:	ldr.w	r0, [r8]
    25ba:	cbz	r0, 262a <usb_serial_write+0x92>
    25bc:	ldr	r5, [pc, #204]	; (268c <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    25be:	ldrh	r4, [r0, #2]
    25c0:	rsb	r1, r4, #64	; 0x40
    25c4:	cmp	r1, r6
    25c6:	it	cs
    25c8:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    25ca:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    25ce:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    25d0:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    25d4:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    25d6:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    25d8:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    25dc:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    25e0:	cbz	r1, 25f8 <usb_serial_write+0x60>
    25e2:	subs	r4, #1
    25e4:	add	r2, r4
    25e6:	add	r1, fp
    25e8:	ldrb.w	r4, [fp], #1
    25ec:	strb.w	r4, [r2, #1]!
    25f0:	cmp	fp, r1
    25f2:	bne.n	25e8 <usb_serial_write+0x50>
    25f4:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    25f8:	cmp.w	lr, #63	; 0x3f
    25fc:	bhi.n	2616 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    25fe:	ldr	r2, [pc, #144]	; (2690 <usb_serial_write+0xf8>)
    2600:	movs	r1, #5
    2602:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    2604:	cmp	r6, #0
    2606:	bne.n	25b6 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    2608:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    260a:	movs	r3, #0
    260c:	strb.w	r3, [r9]
	return ret;
}
    2610:	add	sp, #12
    2612:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    2616:	movs	r2, #64	; 0x40
    2618:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    261a:	mov	r1, r0
    261c:	movs	r0, #3
    261e:	bl	3514 <usb_tx>
			tx_packet = NULL;
    2622:	movs	r2, #0
    2624:	str.w	r2, [r8]
    2628:	b.n	25fe <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    262a:	ldrb	r2, [r7, #0]
    262c:	cbz	r2, 2678 <usb_serial_write+0xe0>
    262e:	ldr	r4, [pc, #100]	; (2694 <usb_serial_write+0xfc>)
    2630:	ldr	r5, [pc, #88]	; (268c <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    2632:	mov.w	sl, #1
    2636:	b.n	2648 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2638:	subs	r4, #1
    263a:	beq.n	266a <usb_serial_write+0xd2>
    263c:	ldrb	r2, [r5, #0]
    263e:	cbnz	r2, 266a <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    2640:	bl	4018 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    2644:	ldrb	r2, [r7, #0]
    2646:	cbz	r2, 2678 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2648:	movs	r0, #3
    264a:	bl	3400 <usb_tx_packet_count>
    264e:	cmp	r0, #7
    2650:	bhi.n	2638 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    2652:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    2656:	bl	3338 <usb_malloc>
    265a:	str.w	r0, [r8]
					if (tx_packet) break;
    265e:	cmp	r0, #0
    2660:	bne.n	25be <usb_serial_write+0x26>
					tx_noautoflush = 0;
    2662:	ldr	r3, [pc, #52]	; (2698 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2664:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    2666:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2668:	bne.n	263c <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    266a:	movs	r3, #1
					return -1;
    266c:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    2670:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    2672:	add	sp, #12
    2674:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    2678:	movs	r3, #0
					return -1;
    267a:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    267e:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    2682:	add	sp, #12
    2684:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2688:	.word	0x1fff1a80
    268c:	.word	0x1fff191c
    2690:	.word	0x1fff1914
    2694:	.word	0x00014821
    2698:	.word	0x1fff1915
    269c:	.word	0x1fff1918

000026a0 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    26a0:	push	{lr}
    26a2:	sub	sp, #12
    26a4:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    26a6:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    26a8:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    26ac:	mov	r0, r3
    26ae:	bl	2598 <usb_serial_write>
}
    26b2:	add	sp, #12
    26b4:	ldr.w	pc, [sp], #4

000026b8 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    26b8:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    26ba:	ldr	r5, [pc, #56]	; (26f4 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    26bc:	ldr	r4, [pc, #56]	; (26f8 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    26be:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    26c0:	movs	r3, #1
    26c2:	strb	r3, [r4, #0]
	if (!tx_packet) {
    26c4:	cbz	r0, 26d2 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    26c6:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    26c8:	movs	r3, #0
    26ca:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    26cc:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    26d0:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    26d2:	ldr	r3, [pc, #40]	; (26fc <usb_serial_write_buffer_free+0x44>)
    26d4:	ldrb	r3, [r3, #0]
    26d6:	cbnz	r3, 26de <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    26d8:	movs	r0, #0
    26da:	strb	r0, [r4, #0]
			return 0;
    26dc:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    26de:	movs	r0, #3
    26e0:	bl	3400 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    26e4:	cmp	r0, #7
    26e6:	bhi.n	26d8 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    26e8:	bl	3338 <usb_malloc>
    26ec:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    26ee:	cmp	r0, #0
    26f0:	bne.n	26c6 <usb_serial_write_buffer_free+0xe>
    26f2:	b.n	26d8 <usb_serial_write_buffer_free+0x20>
    26f4:	.word	0x1fff1918
    26f8:	.word	0x1fff1915
    26fc:	.word	0x1fff1a80

00002700 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    2700:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    2702:	ldr	r3, [pc, #68]	; (2748 <usb_serial_flush_output+0x48>)
    2704:	ldrb	r3, [r3, #0]
    2706:	cbz	r3, 272c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    2708:	ldr	r6, [pc, #64]	; (274c <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    270a:	ldr	r5, [pc, #68]	; (2750 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    270c:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    270e:	movs	r7, #1
    2710:	strb	r7, [r5, #0]
	if (tx_packet) {
    2712:	cbz	r4, 272e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    2714:	ldr	r2, [pc, #60]	; (2754 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    2716:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    2718:	movs	r7, #0
    271a:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    271c:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    271e:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2720:	movs	r0, #3
    2722:	bl	3514 <usb_tx>
		tx_packet = NULL;
    2726:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    2728:	movs	r3, #0
    272a:	strb	r3, [r5, #0]
    272c:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    272e:	bl	3338 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    2732:	ldr	r3, [pc, #32]	; (2754 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    2734:	cbz	r0, 2742 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    2736:	mov	r1, r0
    2738:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    273a:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    273c:	bl	3514 <usb_tx>
    2740:	b.n	2728 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    2742:	strb	r7, [r3, #0]
    2744:	b.n	2728 <usb_serial_flush_output+0x28>
    2746:	nop
    2748:	.word	0x1fff1a80
    274c:	.word	0x1fff1918
    2750:	.word	0x1fff1915
    2754:	.word	0x1fff1914

00002758 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    2758:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    275a:	ldr	r3, [pc, #56]	; (2794 <usb_serial_flush_callback+0x3c>)
    275c:	ldrb	r3, [r3, #0]
    275e:	cbnz	r3, 277e <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    2760:	ldr	r4, [pc, #52]	; (2798 <usb_serial_flush_callback+0x40>)
    2762:	ldr	r1, [r4, #0]
    2764:	cbz	r1, 2780 <usb_serial_flush_callback+0x28>
    2766:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    276a:	ldrh	r3, [r1, #2]
    276c:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    276e:	movs	r0, #3
    2770:	bl	3514 <usb_tx>
		tx_packet = NULL;
    2774:	str	r5, [r4, #0]
    2776:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    2778:	ldr	r3, [pc, #32]	; (279c <usb_serial_flush_callback+0x44>)
    277a:	movs	r2, #1
    277c:	strb	r2, [r3, #0]
    277e:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    2780:	bl	3338 <usb_malloc>
		if (tx) {
    2784:	cmp	r0, #0
    2786:	beq.n	2778 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    2788:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    278a:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    278e:	movs	r0, #3
    2790:	b.w	3514 <usb_tx>
    2794:	.word	0x1fff1915
    2798:	.word	0x1fff1918
    279c:	.word	0x1fff1914

000027a0 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    27a0:	ldr	r2, [pc, #220]	; (2880 <wait_for_cal+0xe0>)
    27a2:	ldr	r1, [pc, #224]	; (2884 <wait_for_cal+0xe4>)
    27a4:	ldr	r3, [r2, #0]
    27a6:	lsls	r3, r3, #24
    27a8:	bmi.n	27a4 <wait_for_cal+0x4>
    27aa:	ldr	r3, [r1, #0]
    27ac:	ands.w	r3, r3, #128	; 0x80
    27b0:	bne.n	27a4 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    27b2:	cpsid	i
	if (calibrating) {
    27b4:	ldr	r1, [pc, #208]	; (2888 <wait_for_cal+0xe8>)
    27b6:	ldrb	r2, [r1, #0]
    27b8:	cmp	r2, #0
    27ba:	beq.n	287c <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    27bc:	ldr	r2, [pc, #204]	; (288c <wait_for_cal+0xec>)
    27be:	ldr	r0, [pc, #208]	; (2890 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    27c0:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    27c2:	ldr	r4, [pc, #208]	; (2894 <wait_for_cal+0xf4>)
    27c4:	ldr	r7, [r2, #0]
    27c6:	ldr	r6, [r0, #0]
    27c8:	ldr	r5, [r4, #0]
    27ca:	ldr	r4, [r2, #12]
    27cc:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    27ce:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    27d0:	adds	r2, #20
    27d2:	ldr	r0, [r0, #0]
    27d4:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    27d6:	ldr	r7, [pc, #192]	; (2898 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    27d8:	add	r5, r6
    27da:	add	r4, r5
    27dc:	add	r0, r4
    27de:	add	r2, r0
    27e0:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    27e4:	ldr	r6, [pc, #180]	; (289c <wait_for_cal+0xfc>)
    27e6:	ldr	r0, [pc, #184]	; (28a0 <wait_for_cal+0x100>)
    27e8:	ldr	r5, [pc, #184]	; (28a4 <wait_for_cal+0x104>)
    27ea:	ldr	r4, [pc, #188]	; (28a8 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    27ec:	orr.w	r2, r2, #32768	; 0x8000
    27f0:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    27f2:	ldr	r7, [r6, #0]
    27f4:	ldr	r6, [r0, #0]
    27f6:	ldr	r5, [r5, #0]
    27f8:	ldr	r2, [pc, #176]	; (28ac <wait_for_cal+0x10c>)
    27fa:	ldr	r4, [r4, #0]
    27fc:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    27fe:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2800:	ldr	r0, [r0, #0]
    2802:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    2804:	ldr	r7, [pc, #168]	; (28b0 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    2806:	add	r5, r6
    2808:	add	r4, r5
    280a:	add	r0, r4
    280c:	add	r2, r0
    280e:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2812:	ldr	r6, [pc, #160]	; (28b4 <wait_for_cal+0x114>)
    2814:	ldr	r0, [pc, #160]	; (28b8 <wait_for_cal+0x118>)
    2816:	ldr	r5, [pc, #164]	; (28bc <wait_for_cal+0x11c>)
    2818:	ldr	r4, [pc, #164]	; (28c0 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    281a:	orr.w	r2, r2, #32768	; 0x8000
    281e:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2820:	ldr	r7, [r6, #0]
    2822:	ldr	r6, [r0, #0]
    2824:	ldr	r5, [r5, #0]
    2826:	ldr	r2, [pc, #156]	; (28c4 <wait_for_cal+0x124>)
    2828:	ldr	r4, [r4, #0]
    282a:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    282c:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    282e:	ldr	r0, [r0, #0]
    2830:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    2832:	ldr	r7, [pc, #148]	; (28c8 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    2834:	add	r5, r6
    2836:	add	r4, r5
    2838:	add	r0, r4
    283a:	add	r2, r0
    283c:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2840:	ldr	r6, [pc, #136]	; (28cc <wait_for_cal+0x12c>)
    2842:	ldr	r0, [pc, #140]	; (28d0 <wait_for_cal+0x130>)
    2844:	ldr	r5, [pc, #140]	; (28d4 <wait_for_cal+0x134>)
    2846:	ldr	r4, [pc, #144]	; (28d8 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    2848:	orr.w	r2, r2, #32768	; 0x8000
    284c:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    284e:	ldr	r7, [r6, #0]
    2850:	ldr	r6, [r0, #0]
    2852:	ldr	r5, [r5, #0]
    2854:	ldr	r2, [pc, #132]	; (28dc <wait_for_cal+0x13c>)
    2856:	ldr	r4, [r4, #0]
    2858:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    285a:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    285c:	ldr	r0, [r0, #0]
    285e:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    2860:	add	r5, r6
    2862:	add	r4, r5
    2864:	add	r0, r4
    2866:	add	r2, r0
    2868:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    286c:	ldr	r0, [pc, #112]	; (28e0 <wait_for_cal+0x140>)
    286e:	orr.w	r2, r2, #32768	; 0x8000
    2872:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    2874:	strb	r3, [r1, #0]
	}
	__enable_irq();
    2876:	cpsie	i
}
    2878:	pop	{r4, r5, r6, r7}
    287a:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    287c:	cpsie	i
    287e:	bx	lr
    2880:	.word	0x4003b024
    2884:	.word	0x400bb024
    2888:	.word	0x1fff1926
    288c:	.word	0x4003b038
    2890:	.word	0x4003b03c
    2894:	.word	0x4003b040
    2898:	.word	0x4003b02c
    289c:	.word	0x4003b058
    28a0:	.word	0x4003b05c
    28a4:	.word	0x4003b060
    28a8:	.word	0x4003b064
    28ac:	.word	0x4003b06c
    28b0:	.word	0x4003b030
    28b4:	.word	0x400bb038
    28b8:	.word	0x400bb03c
    28bc:	.word	0x400bb040
    28c0:	.word	0x400bb044
    28c4:	.word	0x400bb04c
    28c8:	.word	0x400bb02c
    28cc:	.word	0x400bb058
    28d0:	.word	0x400bb05c
    28d4:	.word	0x400bb060
    28d8:	.word	0x400bb064
    28dc:	.word	0x400bb06c
    28e0:	.word	0x400bb030

000028e4 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    28e4:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    28e6:	ldr	r0, [pc, #164]	; (298c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    28e8:	ldr	r2, [pc, #164]	; (2990 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    28ea:	ldr	r3, [pc, #168]	; (2994 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    28ec:	ldr	r5, [pc, #168]	; (2998 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    28ee:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    28f0:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    28f2:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    28f4:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    28f6:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    28f8:	ldr	r4, [pc, #160]	; (299c <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    28fa:	cmp	r3, #8
    28fc:	beq.n	2960 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    28fe:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2900:	ldr	r0, [pc, #156]	; (29a0 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2902:	ldr	r1, [pc, #160]	; (29a4 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2904:	beq.n	2976 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    2906:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    2908:	ite	eq
    290a:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    290c:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    290e:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2910:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2912:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2914:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2916:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2918:	ldr	r3, [pc, #140]	; (29a8 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    291a:	ldr	r1, [pc, #144]	; (29ac <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    291c:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    291e:	ldr	r2, [pc, #144]	; (29b0 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2920:	cbz	r3, 2952 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2922:	movs	r3, #1
    2924:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2926:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2928:	ldr	r3, [pc, #136]	; (29b4 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    292a:	ldr	r1, [pc, #140]	; (29b8 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    292c:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    292e:	ldr	r2, [pc, #140]	; (29bc <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    2930:	cmp	r3, #1
    2932:	bls.n	2982 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2934:	cmp	r3, #4
    2936:	bls.n	2958 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    2938:	cmp	r3, #8
    293a:	bls.n	297a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    293c:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    293e:	ite	ls
    2940:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2942:	movhi	r3, #135	; 0x87
    2944:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2946:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    2948:	ldr	r3, [pc, #116]	; (29c0 <analog_init+0xdc>)
    294a:	movs	r2, #1
    294c:	strb	r2, [r3, #0]
}
    294e:	pop	{r4, r5}
    2950:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2952:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2954:	str	r3, [r2, #0]
    2956:	b.n	2928 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2958:	movs	r3, #132	; 0x84
    295a:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    295c:	str	r3, [r2, #0]
    295e:	b.n	2948 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2960:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2964:	ldr	r1, [pc, #60]	; (29a4 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2966:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2968:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    296a:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    296c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    296e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2970:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2972:	str	r3, [r1, #0]
    2974:	b.n	2918 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2976:	movs	r2, #57	; 0x39
    2978:	b.n	296a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    297a:	movs	r3, #133	; 0x85
    297c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    297e:	str	r3, [r2, #0]
    2980:	b.n	2948 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2982:	movs	r3, #128	; 0x80
    2984:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2986:	str	r3, [r2, #0]
    2988:	b.n	2948 <analog_init+0x64>
    298a:	nop
    298c:	.word	0x40074000
    2990:	.word	0x40074001
    2994:	.word	0x1fff0c68
    2998:	.word	0x4003b008
    299c:	.word	0x4003b00c
    29a0:	.word	0x400bb008
    29a4:	.word	0x400bb00c
    29a8:	.word	0x1fff1929
    29ac:	.word	0x4003b020
    29b0:	.word	0x400bb020
    29b4:	.word	0x1fff0c69
    29b8:	.word	0x4003b024
    29bc:	.word	0x400bb024
    29c0:	.word	0x1fff1926

000029c4 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    29c4:	cmp	r0, #71	; 0x47
    29c6:	bhi.n	2a28 <analogRead+0x64>
	channel = pin2sc1a[pin];
    29c8:	ldr	r3, [pc, #204]	; (2a98 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    29ca:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    29ce:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    29d0:	cmp	r6, #255	; 0xff
    29d2:	beq.n	2a2c <analogRead+0x68>

	if (calibrating) wait_for_cal();
    29d4:	ldr	r3, [pc, #196]	; (2a9c <analogRead+0xd8>)
    29d6:	ldrb	r3, [r3, #0]
    29d8:	cmp	r3, #0
    29da:	bne.n	2a32 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    29dc:	lsls	r2, r6, #24
    29de:	bmi.n	2a3a <analogRead+0x76>
#endif

	__disable_irq();
    29e0:	cpsid	i
    29e2:	ldr	r5, [pc, #188]	; (2aa0 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    29e4:	ldr	r4, [pc, #188]	; (2aa4 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    29e6:	mov	r7, r5
    29e8:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    29ea:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    29ec:	strb	r3, [r5, #0]
	__enable_irq();
    29ee:	cpsie	i
	while (1) {
		__disable_irq();
    29f0:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    29f2:	ldr	r3, [r4, #0]
    29f4:	lsls	r3, r3, #24
    29f6:	bmi.n	2a12 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    29f8:	ldrb	r3, [r7, #0]
    29fa:	cbnz	r3, 2a04 <analogRead+0x40>
    29fc:	b.n	29e8 <analogRead+0x24>
    29fe:	ldrb	r3, [r5, #0]
    2a00:	cmp	r3, #0
    2a02:	beq.n	29e8 <analogRead+0x24>
		__enable_irq();
    2a04:	cpsie	i
		yield();
    2a06:	bl	4018 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2a0a:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2a0c:	ldr	r3, [r4, #0]
    2a0e:	lsls	r0, r3, #24
    2a10:	bpl.n	29fe <analogRead+0x3a>
			result = ADC0_RA;
    2a12:	ldr	r3, [pc, #148]	; (2aa8 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    2a14:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    2a16:	movs	r2, #0
    2a18:	strb	r2, [r5, #0]
			__enable_irq();
    2a1a:	cpsie	i
			result >>= analog_right_shift;
    2a1c:	ldr	r2, [pc, #140]	; (2aac <analogRead+0xe8>)
    2a1e:	ldrb	r0, [r2, #0]
    2a20:	asr.w	r0, r3, r0
			return result;
    2a24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2a28:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2a2a:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2a2c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2a2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    2a32:	bl	27a0 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2a36:	lsls	r2, r6, #24
    2a38:	bpl.n	29e0 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    2a3a:	cpsid	i
    2a3c:	ldr	r5, [pc, #112]	; (2ab0 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2a3e:	ldr.w	r8, [pc, #124]	; 2abc <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    2a42:	ldr	r4, [pc, #112]	; (2ab4 <analogRead+0xf0>)
    2a44:	and.w	r7, r6, #64	; 0x40
    2a48:	uxtb	r7, r7
    2a4a:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2a4e:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    2a52:	cbz	r7, 2a8c <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2a54:	bic.w	r3, r3, #16
    2a58:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    2a5c:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    2a5e:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    2a60:	ldr	r2, [pc, #76]	; (2ab0 <analogRead+0xec>)
    2a62:	strb	r3, [r5, #0]
	__enable_irq();
    2a64:	cpsie	i
	while (1) {
		__disable_irq();
    2a66:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2a68:	ldr	r3, [r4, #0]
    2a6a:	lsls	r1, r3, #24
    2a6c:	bmi.n	2a88 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    2a6e:	ldrb	r3, [r2, #0]
    2a70:	cbnz	r3, 2a7a <analogRead+0xb6>
    2a72:	b.n	2a4e <analogRead+0x8a>
    2a74:	ldrb	r3, [r5, #0]
    2a76:	cmp	r3, #0
    2a78:	beq.n	2a4e <analogRead+0x8a>
		__enable_irq();
    2a7a:	cpsie	i
		yield();
    2a7c:	bl	4018 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2a80:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2a82:	ldr	r3, [r4, #0]
    2a84:	lsls	r3, r3, #24
    2a86:	bpl.n	2a74 <analogRead+0xb0>
			result = ADC1_RA;
    2a88:	ldr	r3, [pc, #44]	; (2ab8 <analogRead+0xf4>)
    2a8a:	b.n	2a14 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2a8c:	orr.w	r3, r3, #16
    2a90:	str.w	r3, [r8]
    2a94:	b.n	2a5c <analogRead+0x98>
    2a96:	nop
    2a98:	.word	0x000056e0
    2a9c:	.word	0x1fff1926
    2aa0:	.word	0x1fff1928
    2aa4:	.word	0x4003b000
    2aa8:	.word	0x4003b010
    2aac:	.word	0x1fff1925
    2ab0:	.word	0x1fff1927
    2ab4:	.word	0x400bb000
    2ab8:	.word	0x400bb010
    2abc:	.word	0x400bb00c

00002ac0 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    2ac0:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    2ac2:	ldr	r3, [pc, #68]	; (2b08 <digitalWrite.part.1+0x48>)
    2ac4:	ldr.w	r2, [r3, r0, lsl #3]
    2ac8:	ldrb.w	r4, [r2, #640]	; 0x280
    2acc:	cbz	r4, 2adc <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    2ace:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    2ad0:	cbz	r1, 2af2 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    2ad2:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2ad6:	ldr.w	r4, [sp], #4
    2ada:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    2adc:	add.w	r3, r3, r0, lsl #3
    2ae0:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2ae2:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    2ae4:	cbnz	r1, 2afc <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    2ae6:	bic.w	r2, r2, #2
    2aea:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2aec:	ldr.w	r4, [sp], #4
    2af0:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    2af2:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2af6:	ldr.w	r4, [sp], #4
    2afa:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2afc:	orr.w	r2, r2, #3
    2b00:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2b02:	ldr.w	r4, [sp], #4
    2b06:	bx	lr
    2b08:	.word	0x00005728

00002b0c <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2b0c:	ldr	r2, [pc, #112]	; (2b80 <pinMode.part.2+0x74>)
    2b0e:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2b12:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2b14:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2b16:	beq.n	2b3c <pinMode.part.2+0x30>
    2b18:	cmp	r1, #4
    2b1a:	beq.n	2b54 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2b1c:	ldr.w	r0, [r2, r0, lsl #3]
    2b20:	movs	r2, #0
    2b22:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    2b26:	cbz	r1, 2b34 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2b28:	cmp	r1, #2
    2b2a:	beq.n	2b6e <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2b2c:	cmp	r1, #3
    2b2e:	beq.n	2b76 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2b30:	str	r2, [r3, #0]
    2b32:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2b34:	mov.w	r2, #256	; 0x100
    2b38:	str	r2, [r3, #0]
    2b3a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2b3c:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2b40:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2b44:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2b48:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2b4a:	ldr	r2, [r3, #0]
    2b4c:	bic.w	r2, r2, #32
    2b50:	str	r2, [r3, #0]
    2b52:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2b54:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2b58:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2b5c:	movs	r0, #1
    2b5e:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2b62:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    2b64:	ldr	r2, [r3, #0]
    2b66:	orr.w	r2, r2, #32
    2b6a:	str	r2, [r3, #0]
    2b6c:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    2b6e:	movw	r2, #259	; 0x103
    2b72:	str	r2, [r3, #0]
    2b74:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    2b76:	mov.w	r2, #258	; 0x102
    2b7a:	str	r2, [r3, #0]
    2b7c:	bx	lr
    2b7e:	nop
    2b80:	.word	0x00005728

00002b84 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    2b84:	push	{r4, r5}
	RTC_SR = 0;
    2b86:	ldr	r3, [pc, #20]	; (2b9c <rtc_set+0x18>)
	RTC_TPR = 0;
    2b88:	ldr	r5, [pc, #20]	; (2ba0 <rtc_set+0x1c>)
	RTC_TSR = t;
    2b8a:	ldr	r4, [pc, #24]	; (2ba4 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2b8c:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    2b8e:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2b90:	str	r2, [r3, #0]
	RTC_TPR = 0;
    2b92:	str	r2, [r5, #0]
	RTC_TSR = t;
    2b94:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    2b96:	str	r1, [r3, #0]
}
    2b98:	pop	{r4, r5}
    2b9a:	bx	lr
    2b9c:	.word	0x4003d014
    2ba0:	.word	0x4003d004
    2ba4:	.word	0x4003d000

00002ba8 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    2ba8:	cmp	r0, #63	; 0x3f
    2baa:	bhi.n	2bb0 <digitalWrite+0x8>
    2bac:	b.w	2ac0 <digitalWrite.part.1>
    2bb0:	bx	lr
    2bb2:	nop

00002bb4 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2bb4:	cmp	r0, #63	; 0x3f
    2bb6:	bhi.n	2bc6 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    2bb8:	ldr	r3, [pc, #16]	; (2bcc <digitalRead+0x18>)
    2bba:	ldr.w	r3, [r3, r0, lsl #3]
    2bbe:	ldrb.w	r0, [r3, #512]	; 0x200
    2bc2:	uxtb	r0, r0
    2bc4:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2bc6:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    2bc8:	bx	lr
    2bca:	nop
    2bcc:	.word	0x00005728

00002bd0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    2bd0:	cmp	r0, #63	; 0x3f
    2bd2:	bhi.n	2bd8 <pinMode+0x8>
    2bd4:	b.w	2b0c <pinMode.part.2>
    2bd8:	bx	lr
    2bda:	nop

00002bdc <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    2bdc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2be0:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2be2:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2be4:	ldr	r7, [pc, #136]	; (2c70 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2be6:	ldr	r3, [pc, #140]	; (2c74 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2be8:	ldr	r2, [pc, #140]	; (2c78 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2bea:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2bec:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2bee:	ldr	r2, [r2, #0]
	__enable_irq();
    2bf0:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2bf2:	lsls	r2, r2, #5
    2bf4:	bpl.n	2bfc <delay+0x20>
    2bf6:	cmp	r3, #50	; 0x32
    2bf8:	it	hi
    2bfa:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2bfc:	cbz	r5, 2c6c <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2bfe:	rsb	r3, r3, #179200	; 0x2bc00
    2c02:	addw	r3, r3, #799	; 0x31f
    2c06:	ldr	r6, [pc, #116]	; (2c7c <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2c08:	ldr.w	r9, [pc, #104]	; 2c74 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2c0c:	ldr.w	r8, [pc, #104]	; 2c78 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2c10:	lsrs	r3, r3, #2
    2c12:	mov.w	r2, #1000	; 0x3e8
    2c16:	umull	r1, r3, r6, r3
    2c1a:	mul.w	r4, r2, r4
    2c1e:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2c22:	cpsid	i
	current = SYST_CVR;
    2c24:	ldr.w	r1, [r9]
	count = systick_millis_count;
    2c28:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2c2a:	ldr.w	lr, [r8]
	__enable_irq();
    2c2e:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2c30:	rsb	r3, r1, #179200	; 0x2bc00
    2c34:	addw	r3, r3, #799	; 0x31f
    2c38:	lsrs	r3, r3, #2
    2c3a:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2c3e:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2c42:	rsb	r3, r4, r3, lsr #2
    2c46:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2c4a:	beq.n	2c52 <delay+0x76>
    2c4c:	cmp	r1, #50	; 0x32
    2c4e:	it	hi
    2c50:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2c52:	mla	r3, r0, r2, r3
    2c56:	cmp.w	r3, #1000	; 0x3e8
    2c5a:	bcc.n	2c66 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    2c5c:	subs	r5, #1
    2c5e:	beq.n	2c6c <delay+0x90>
				start += 1000;
    2c60:	add.w	r4, r4, #1000	; 0x3e8
    2c64:	b.n	2c22 <delay+0x46>
			}
			yield();
    2c66:	bl	4018 <yield>
		}
    2c6a:	b.n	2c22 <delay+0x46>
    2c6c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2c70:	.word	0x1fff192c
    2c74:	.word	0xe000e018
    2c78:	.word	0xe000ed04
    2c7c:	.word	0x16c16c17

00002c80 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    2c80:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2c82:	ldr	r3, [pc, #312]	; (2dbc <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2c84:	ldr	r0, [pc, #312]	; (2dc0 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    2c86:	ldr.w	ip, [pc, #348]	; 2de4 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    2c8a:	ldr	r4, [pc, #312]	; (2dc4 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    2c8c:	ldr	r1, [pc, #312]	; (2dc8 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2c8e:	ldr.w	lr, [pc, #344]	; 2de8 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    2c92:	ldr	r6, [pc, #312]	; (2dcc <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    2c94:	ldr	r5, [pc, #312]	; (2dd0 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    2c96:	ldr	r7, [pc, #316]	; (2dd4 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2c98:	mov.w	r2, #134217728	; 0x8000000
    2c9c:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    2c9e:	mov.w	r2, #268435456	; 0x10000000
    2ca2:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    2ca4:	mov.w	r2, #536870912	; 0x20000000
    2ca8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    2caa:	mov.w	r2, #1073741824	; 0x40000000
    2cae:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    2cb0:	mov.w	r2, #2147483648	; 0x80000000
    2cb4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2cb6:	movs	r2, #0
    2cb8:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2cba:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2cbc:	movw	r0, #61439	; 0xefff
    2cc0:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2cc4:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    2cc8:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2cca:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    2cce:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    2cd0:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    2cd2:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2cd4:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    2cd8:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    2cda:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    2cde:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2ce0:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    2ce4:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2ce6:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    2cea:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2cee:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    2cf2:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2cf6:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    2cfa:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2cfc:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2d00:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2d02:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2d04:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    2d06:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    2d0a:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2d0c:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2d0e:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2d10:	ldr	r4, [pc, #196]	; (2dd8 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    2d12:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2d14:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2d16:	movs	r1, #9
    2d18:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    2d1a:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2d1e:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2d22:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2d24:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2d26:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    2d28:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    2d2a:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2d2c:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2d2e:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2d32:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    2d36:	add.w	r7, r7, #520192	; 0x7f000
    2d3a:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2d3c:	addw	r4, r4, #2044	; 0x7fc
    2d40:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2d42:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2d44:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    2d46:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2d48:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2d4c:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    2d4e:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    2d52:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    2d56:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2d58:	sub.w	r4, r4, #460800	; 0x70800
    2d5c:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    2d60:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2d62:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2d64:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2d68:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2d6a:	ldr	r0, [pc, #112]	; (2ddc <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2d6c:	orr.w	r1, r1, #512	; 0x200
    2d70:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2d72:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2d74:	ldr	r4, [pc, #104]	; (2de0 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    2d76:	add.w	lr, lr, #65280	; 0xff00
    2d7a:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    2d7e:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    2d82:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    2d86:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2d8a:	orr.w	r1, r1, #33554432	; 0x2000000
    2d8e:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    2d90:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    2d94:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2d98:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    2d9a:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    2d9c:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    2d9e:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2da0:	str	r2, [r4, #0]
#endif
	analog_init();
    2da2:	bl	28e4 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    2da6:	movs	r0, #25
    2da8:	bl	2bdc <delay>
	usb_init();
    2dac:	bl	3f48 <usb_init>
	delay(275);
    2db0:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    2db4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    2db8:	b.w	2bdc <delay>
    2dbc:	.word	0xe000e104
    2dc0:	.word	0x40038004
    2dc4:	.word	0x40038014
    2dc8:	.word	0x4003801c
    2dcc:	.word	0x40038024
    2dd0:	.word	0x4003802c
    2dd4:	.word	0x40038034
    2dd8:	.word	0x40038000
    2ddc:	.word	0x40048004
    2de0:	.word	0x400c9000
    2de4:	.word	0x40038008
    2de8:	.word	0x4003800c

00002dec <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2dec:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2dee:	ldr	r3, [pc, #56]	; (2e28 <sysex_byte+0x3c>)
    2df0:	ldr	r4, [pc, #56]	; (2e2c <sysex_byte+0x40>)
    2df2:	ldr	r3, [r3, #0]
    2df4:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2df6:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2df8:	cbz	r3, 2e1e <sysex_byte+0x32>
    2dfa:	cmp.w	r1, #290	; 0x122
    2dfe:	bcs.n	2e0c <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2e00:	ldr	r2, [pc, #44]	; (2e30 <sysex_byte+0x44>)
    2e02:	adds	r3, r1, #1
    2e04:	strb	r5, [r2, r1]
    2e06:	uxth	r3, r3
    2e08:	strh	r3, [r4, #0]
	}
}
    2e0a:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2e0c:	movs	r2, #0
    2e0e:	ldr	r0, [pc, #32]	; (2e30 <sysex_byte+0x44>)
    2e10:	blx	r3
    2e12:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2e14:	ldr	r2, [pc, #24]	; (2e30 <sysex_byte+0x44>)
    2e16:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2e18:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2e1a:	strh	r3, [r4, #0]
	}
}
    2e1c:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    2e1e:	cmp.w	r1, #290	; 0x122
    2e22:	bcc.n	2e00 <sysex_byte+0x14>
    2e24:	pop	{r3, r4, r5, pc}
    2e26:	nop
    2e28:	.word	0x1fff1954
    2e2c:	.word	0x1fff1dea
    2e30:	.word	0x1fff1df0

00002e34 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2e34:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    2e38:	ldr	r6, [pc, #132]	; (2ec0 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2e3a:	ldr	r7, [pc, #136]	; (2ec4 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    2e3c:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2e3e:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2e40:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2e42:	strb	r3, [r7, #0]
	if (!tx_packet) {
    2e44:	cbz	r1, 2e74 <usb_midi_write_packed+0x40>
    2e46:	ldr	r5, [pc, #128]	; (2ec8 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    2e48:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2e4a:	add.w	r2, r1, r3, lsl #2
    2e4e:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2e50:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2e52:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2e54:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2e58:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2e5a:	bhi.n	2e66 <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    2e5c:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    2e5e:	movs	r3, #0
    2e60:	strb	r3, [r7, #0]
    2e62:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    2e66:	movs	r3, #64	; 0x40
    2e68:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2e6a:	movs	r0, #4
    2e6c:	bl	3514 <usb_tx>
		tx_packet = NULL;
    2e70:	str	r4, [r6, #0]
    2e72:	b.n	2e5e <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2e74:	ldr.w	r9, [pc, #84]	; 2ecc <usb_midi_write_packed+0x98>
    2e78:	ldrb.w	r3, [r9]
    2e7c:	cmp	r3, #0
    2e7e:	beq.n	2e62 <usb_midi_write_packed+0x2e>
    2e80:	ldr	r5, [pc, #68]	; (2ec8 <usb_midi_write_packed+0x94>)
    2e82:	movw	r4, #48001	; 0xbb81
    2e86:	b.n	2e9a <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2e88:	subs	r4, #1
    2e8a:	beq.n	2eb2 <usb_midi_write_packed+0x7e>
    2e8c:	ldrb	r3, [r5, #0]
    2e8e:	cbnz	r3, 2eb2 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    2e90:	bl	4018 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2e94:	ldrb.w	r3, [r9]
    2e98:	cbz	r3, 2eba <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2e9a:	movs	r0, #4
    2e9c:	bl	3400 <usb_tx_packet_count>
    2ea0:	cmp	r0, #5
    2ea2:	bhi.n	2e88 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    2ea4:	bl	3338 <usb_malloc>
    2ea8:	mov	r1, r0
    2eaa:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    2eac:	cmp	r0, #0
    2eae:	beq.n	2e88 <usb_midi_write_packed+0x54>
    2eb0:	b.n	2e48 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    2eb2:	movs	r3, #1
    2eb4:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    2eb6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2eba:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ebe:	nop
    2ec0:	.word	0x1fff1970
    2ec4:	.word	0x1fff1944
    2ec8:	.word	0x1fff1974
    2ecc:	.word	0x1fff1a80

00002ed0 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    2ed0:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    2ed2:	ldr	r3, [pc, #32]	; (2ef4 <usb_midi_flush_output+0x24>)
    2ed4:	ldrb	r4, [r3, #0]
    2ed6:	cbnz	r4, 2ee2 <usb_midi_flush_output+0x12>
    2ed8:	ldr	r5, [pc, #28]	; (2ef8 <usb_midi_flush_output+0x28>)
    2eda:	ldr	r1, [r5, #0]
    2edc:	cbz	r1, 2ee2 <usb_midi_flush_output+0x12>
    2ede:	ldrh	r3, [r1, #2]
    2ee0:	cbnz	r3, 2ee4 <usb_midi_flush_output+0x14>
    2ee2:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    2ee4:	lsls	r3, r3, #2
    2ee6:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2ee8:	movs	r0, #4
    2eea:	bl	3514 <usb_tx>
		tx_packet = NULL;
    2eee:	str	r4, [r5, #0]
    2ef0:	pop	{r3, r4, r5, pc}
    2ef2:	nop
    2ef4:	.word	0x1fff1944
    2ef8:	.word	0x1fff1970

00002efc <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2efc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2f00:	ldr	r6, [pc, #692]	; (31b8 <usb_midi_read+0x2bc>)
    2f02:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2f04:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2f06:	cmp	r3, #0
    2f08:	beq.w	3030 <usb_midi_read+0x134>
    2f0c:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    2f0e:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2f10:	lsrs	r1, r2, #2
    2f12:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    2f16:	adds	r2, #4
	if (index < rx_packet->len) {
    2f18:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2f1a:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    2f1c:	bcs.n	2fa4 <usb_midi_read+0xa8>
		rx_packet->index = index;
    2f1e:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    2f20:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2f24:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    2f28:	ldr	r1, [pc, #656]	; (31bc <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2f2a:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2f2e:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    2f32:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2f36:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2f38:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    2f3c:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2f3e:	bls.n	2f76 <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2f40:	subs	r3, r6, #2
    2f42:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2f44:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2f48:	bls.n	2fe8 <usb_midi_read+0xec>
    2f4a:	cmp	r6, #5
    2f4c:	beq.n	2fe0 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    2f4e:	cmp	r6, #4
    2f50:	beq.w	329c <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    2f54:	subs	r3, r6, #5
    2f56:	cmp	r3, #2
    2f58:	bls.n	305a <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    2f5a:	cmp	r6, #15
    2f5c:	bne.n	2f7c <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    2f5e:	cmp	r0, #247	; 0xf7
    2f60:	bhi.n	2fe8 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    2f62:	cmp	r0, #240	; 0xf0
    2f64:	beq.n	2f6c <usb_midi_read+0x70>
    2f66:	ldr	r3, [pc, #600]	; (31c0 <usb_midi_read+0x2c4>)
    2f68:	ldrh	r3, [r3, #0]
    2f6a:	cbz	r3, 2f7c <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    2f6c:	bl	2dec <sysex_byte>
		}
	}
	return 0;
    2f70:	movs	r0, #0
    2f72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    2f76:	cbz	r7, 2f82 <usb_midi_read+0x86>
    2f78:	cmp	r5, r7
    2f7a:	beq.n	2f82 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    2f7c:	movs	r0, #0
    2f7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2f82:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    2f84:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2f88:	beq.w	309a <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    2f8c:	cmp	r6, #9
    2f8e:	beq.n	2fb4 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    2f90:	cmp	r6, #10
    2f92:	bne.w	30be <usb_midi_read+0x1c2>
    2f96:	cmp	r3, #10
    2f98:	bne.n	2f7c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    2f9a:	ldr	r3, [pc, #552]	; (31c4 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    2f9c:	ldr	r2, [pc, #552]	; (31c8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    2f9e:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    2fa0:	movs	r1, #160	; 0xa0
    2fa2:	b.n	30a8 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    2fa4:	mov	r0, r3
    2fa6:	bl	3378 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2faa:	movs	r0, #5
    2fac:	bl	33c4 <usb_rx>
    2fb0:	str	r0, [r6, #0]
    2fb2:	b.n	2f20 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    2fb4:	cmp	r3, #9
    2fb6:	bne.n	2f7c <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    2fb8:	lsrs	r7, r4, #24
    2fba:	beq.w	32b4 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    2fbe:	ldr	r3, [pc, #524]	; (31cc <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2fc0:	ldr	r2, [pc, #516]	; (31c8 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    2fc2:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2fc4:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2fc6:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2fca:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2fcc:	uxtb	r5, r5
    2fce:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    2fd0:	cmp	r3, #0
    2fd2:	beq.w	3110 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2fd6:	mov	r2, r4
    2fd8:	mov	r1, r6
    2fda:	mov	r0, r5
    2fdc:	blx	r3
    2fde:	b.n	3110 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2fe0:	cmp	r0, #240	; 0xf0
    2fe2:	bls.n	306c <usb_midi_read+0x170>
    2fe4:	cmp	r0, #247	; 0xf7
    2fe6:	beq.n	306c <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    2fe8:	subs	r0, #241	; 0xf1
    2fea:	cmp	r0, #14
    2fec:	bhi.n	2f7c <usb_midi_read+0x80>
    2fee:	add	r3, pc, #4	; (adr r3, 2ff4 <usb_midi_read+0xf8>)
    2ff0:	ldr.w	pc, [r3, r0, lsl #2]
    2ff4:	.word	0x000031ab
    2ff8:	.word	0x0000318f
    2ffc:	.word	0x0000317d
    3000:	.word	0x00002f7d
    3004:	.word	0x00002f7d
    3008:	.word	0x0000316f
    300c:	.word	0x00002f7d
    3010:	.word	0x0000324f
    3014:	.word	0x00002f7d
    3018:	.word	0x00003219
    301c:	.word	0x00003233
    3020:	.word	0x00003157
    3024:	.word	0x00002f7d
    3028:	.word	0x0000313f
    302c:	.word	0x00003123
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    3030:	ldr	r3, [pc, #412]	; (31d0 <usb_midi_read+0x2d4>)
    3032:	ldrb	r3, [r3, #0]
    3034:	cmp	r3, #0
    3036:	beq.n	2f7c <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    3038:	movs	r0, #5
    303a:	bl	33c4 <usb_rx>
    303e:	mov	r3, r0
    3040:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    3042:	cmp	r0, #0
    3044:	beq.n	2f7c <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    3046:	ldrh	r5, [r0, #0]
    3048:	cmp	r5, #0
    304a:	bne.w	2f0e <usb_midi_read+0x12>
			usb_free(rx_packet);
    304e:	bl	3378 <usb_free>
			rx_packet = NULL;
    3052:	str	r5, [r6, #0]
			return 0;
    3054:	mov	r0, r5
    3056:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    305a:	bl	2dec <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    305e:	ubfx	r0, r4, #16, #8
    3062:	bl	2dec <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    3066:	cmp	r6, #7
    3068:	bne.n	3070 <usb_midi_read+0x174>
    306a:	lsrs	r0, r4, #24
    306c:	bl	2dec <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    3070:	ldr	r3, [pc, #332]	; (31c0 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    3072:	ldr	r2, [pc, #352]	; (31d4 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    3074:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    3076:	ldr	r0, [pc, #352]	; (31d8 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    3078:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    307a:	ldr	r5, [pc, #352]	; (31dc <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    307c:	ldr	r2, [pc, #328]	; (31c8 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    307e:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    3080:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    3082:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    3084:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    3086:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    3088:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    308a:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    308c:	cbz	r4, 30d2 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    308e:	movs	r2, #1
    3090:	ldr	r0, [pc, #332]	; (31e0 <usb_midi_read+0x2e4>)
    3092:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    3094:	movs	r0, #1
    3096:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    309a:	cmp	r3, #8
    309c:	bne.w	2f7c <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    30a0:	ldr	r3, [pc, #320]	; (31e4 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    30a2:	ldr	r2, [pc, #292]	; (31c8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    30a4:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    30a6:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    30a8:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    30ac:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    30ae:	uxtb	r5, r5
    30b0:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    30b2:	cbz	r3, 3110 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    30b4:	mov	r0, r5
    30b6:	mov	r2, r4
    30b8:	mov	r1, r6
    30ba:	blx	r3
    30bc:	b.n	3110 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    30be:	cmp	r6, #11
    30c0:	bne.n	30e6 <usb_midi_read+0x1ea>
    30c2:	cmp	r3, #11
    30c4:	bne.w	2f7c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    30c8:	ldr	r3, [pc, #284]	; (31e8 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    30ca:	ldr	r2, [pc, #252]	; (31c8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    30cc:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    30ce:	movs	r1, #176	; 0xb0
    30d0:	b.n	30a8 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    30d2:	ldr	r3, [pc, #280]	; (31ec <usb_midi_read+0x2f0>)
    30d4:	ldr	r3, [r3, #0]
    30d6:	cmp	r3, #0
    30d8:	beq.w	32d2 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    30dc:	ldr	r0, [pc, #256]	; (31e0 <usb_midi_read+0x2e4>)
    30de:	blx	r3
		}
		return 1;
    30e0:	movs	r0, #1
    30e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    30e6:	cmp	r6, #12
    30e8:	bne.w	32ec <usb_midi_read+0x3f0>
    30ec:	cmp	r3, #12
    30ee:	bne.w	2f7c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    30f2:	ldr	r3, [pc, #252]	; (31f0 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    30f4:	ldr	r2, [pc, #208]	; (31c8 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    30f6:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    30f8:	movs	r1, #192	; 0xc0
    30fa:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    30fc:	uxtb	r5, r5
    30fe:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    3102:	cmp	r3, #0
    3104:	beq.w	3298 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    3108:	mov	r0, r5
    310a:	mov	r1, r6
    310c:	lsrs	r4, r4, #24
    310e:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    3110:	ldr	r1, [pc, #224]	; (31f4 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    3112:	ldr	r2, [pc, #196]	; (31d8 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    3114:	ldr	r3, [pc, #196]	; (31dc <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    3116:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    3118:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    311a:	strb	r4, [r3, #0]
		return 1;
    311c:	movs	r0, #1
    311e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    3122:	ldr	r3, [pc, #212]	; (31f8 <usb_midi_read+0x2fc>)
    3124:	ldr	r3, [r3, #0]
    3126:	cmp	r3, #0
    3128:	beq.w	32d8 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    312c:	blx	r3
    312e:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    3132:	ldr	r3, [pc, #148]	; (31c8 <usb_midi_read+0x2cc>)
    3134:	uxtb	r5, r5
    3136:	lsrs	r4, r4, #24
    3138:	strb.w	r8, [r3]
		goto return_message;
    313c:	b.n	3110 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    313e:	ldr	r3, [pc, #188]	; (31fc <usb_midi_read+0x300>)
    3140:	ldr	r3, [r3, #0]
    3142:	cmp	r3, #0
    3144:	bne.n	312c <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    3146:	ldr	r3, [pc, #184]	; (3200 <usb_midi_read+0x304>)
    3148:	ldr	r3, [r3, #0]
    314a:	cbz	r3, 3176 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    314c:	movs	r0, #254	; 0xfe
    314e:	blx	r3
    3150:	ubfx	r6, r4, #16, #8
    3154:	b.n	3132 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    3156:	ldr	r3, [pc, #172]	; (3204 <usb_midi_read+0x308>)
    3158:	ldr	r3, [r3, #0]
    315a:	cmp	r3, #0
    315c:	bne.n	312c <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    315e:	ldr	r3, [pc, #160]	; (3200 <usb_midi_read+0x304>)
    3160:	ldr	r3, [r3, #0]
    3162:	cbz	r3, 3176 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    3164:	movs	r0, #252	; 0xfc
    3166:	blx	r3
    3168:	ubfx	r6, r4, #16, #8
    316c:	b.n	3132 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    316e:	ldr	r3, [pc, #152]	; (3208 <usb_midi_read+0x30c>)
    3170:	ldr	r3, [r3, #0]
    3172:	cmp	r3, #0
    3174:	bne.n	312c <usb_midi_read+0x230>
    3176:	ubfx	r6, r4, #16, #8
    317a:	b.n	3132 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    317c:	ldr	r3, [pc, #140]	; (320c <usb_midi_read+0x310>)
    317e:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    3180:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    3184:	cmp	r3, #0
    3186:	beq.n	3132 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    3188:	mov	r0, r6
    318a:	blx	r3
    318c:	b.n	3132 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    318e:	ldr	r3, [pc, #128]	; (3210 <usb_midi_read+0x314>)
    3190:	ldr	r2, [r3, #0]
    3192:	cmp	r2, #0
    3194:	beq.n	3176 <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    3196:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    3198:	lsrs	r3, r4, #17
    319a:	and.w	r0, r6, #127	; 0x7f
    319e:	and.w	r3, r3, #16256	; 0x3f80
    31a2:	orrs	r0, r3
    31a4:	uxtb	r6, r6
    31a6:	blx	r2
    31a8:	b.n	3132 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    31aa:	ldr	r3, [pc, #104]	; (3214 <usb_midi_read+0x318>)
    31ac:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    31ae:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    31b2:	cmp	r3, #0
    31b4:	bne.n	3188 <usb_midi_read+0x28c>
    31b6:	b.n	3132 <usb_midi_read+0x236>
    31b8:	.word	0x1fff197c
    31bc:	.word	0x1fff1dee
    31c0:	.word	0x1fff1dea
    31c4:	.word	0x1fff1958
    31c8:	.word	0x1fff1de8
    31cc:	.word	0x1fff198c
    31d0:	.word	0x1fff1a80
    31d4:	.word	0x1fff1954
    31d8:	.word	0x1fff1dec
    31dc:	.word	0x1fff1ded
    31e0:	.word	0x1fff1df0
    31e4:	.word	0x1fff1984
    31e8:	.word	0x1fff1988
    31ec:	.word	0x1fff196c
    31f0:	.word	0x1fff1948
    31f4:	.word	0x1fff1def
    31f8:	.word	0x1fff1934
    31fc:	.word	0x1fff1938
    3200:	.word	0x1fff193c
    3204:	.word	0x1fff1978
    3208:	.word	0x1fff1968
    320c:	.word	0x1fff1980
    3210:	.word	0x1fff1950
    3214:	.word	0x1fff1964
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    3218:	ldr	r3, [pc, #252]	; (3318 <usb_midi_read+0x41c>)
    321a:	ldr	r3, [r3, #0]
    321c:	cmp	r3, #0
    321e:	bne.n	312c <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    3220:	ldr	r3, [pc, #248]	; (331c <usb_midi_read+0x420>)
    3222:	ldr	r3, [r3, #0]
    3224:	cmp	r3, #0
    3226:	beq.n	3176 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    3228:	movs	r0, #250	; 0xfa
    322a:	blx	r3
    322c:	ubfx	r6, r4, #16, #8
    3230:	b.n	3132 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    3232:	ldr	r3, [pc, #236]	; (3320 <usb_midi_read+0x424>)
    3234:	ldr	r3, [r3, #0]
    3236:	cmp	r3, #0
    3238:	bne.w	312c <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    323c:	ldr	r3, [pc, #220]	; (331c <usb_midi_read+0x420>)
    323e:	ldr	r3, [r3, #0]
    3240:	cmp	r3, #0
    3242:	beq.n	3176 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    3244:	movs	r0, #251	; 0xfb
    3246:	blx	r3
    3248:	ubfx	r6, r4, #16, #8
    324c:	b.n	3132 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    324e:	ldr	r3, [pc, #212]	; (3324 <usb_midi_read+0x428>)
    3250:	ldr	r3, [r3, #0]
    3252:	cmp	r3, #0
    3254:	bne.w	312c <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    3258:	ldr	r3, [pc, #192]	; (331c <usb_midi_read+0x420>)
    325a:	ldr	r3, [r3, #0]
    325c:	cmp	r3, #0
    325e:	beq.n	3176 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    3260:	movs	r0, #248	; 0xf8
    3262:	blx	r3
    3264:	ubfx	r6, r4, #16, #8
    3268:	b.n	3132 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    326a:	cmp	r3, #14
    326c:	bne.w	2f7c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    3270:	ldr	r2, [pc, #180]	; (3328 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    3272:	ldr	r3, [pc, #184]	; (332c <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    3274:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    3276:	movs	r1, #224	; 0xe0
    3278:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    327a:	cmp	r2, #0
    327c:	beq.n	330e <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    327e:	lsrs	r6, r4, #16
    3280:	lsrs	r1, r4, #17
    3282:	and.w	r3, r6, #127	; 0x7f
    3286:	and.w	r1, r1, #16256	; 0x3f80
    328a:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    328c:	uxtb	r5, r5
    328e:	sub.w	r1, r1, #8192	; 0x2000
    3292:	mov	r0, r5
    3294:	blx	r2
    3296:	uxtb	r6, r6
    3298:	lsrs	r4, r4, #24
    329a:	b.n	3110 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    329c:	bl	2dec <sysex_byte>
		sysex_byte(n >> 16);
    32a0:	ubfx	r0, r4, #16, #8
    32a4:	bl	2dec <sysex_byte>
		sysex_byte(n >> 24);
    32a8:	lsrs	r0, r4, #24
    32aa:	bl	2dec <sysex_byte>
		return 0;
    32ae:	movs	r0, #0
    32b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    32b4:	ldr	r3, [pc, #120]	; (3330 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    32b6:	ldr	r2, [pc, #116]	; (332c <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    32b8:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    32ba:	movs	r1, #128	; 0x80
    32bc:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    32be:	uxtb	r5, r5
    32c0:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    32c4:	cbz	r3, 32e8 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    32c6:	mov	r1, r6
    32c8:	mov	r0, r5
    32ca:	mov	r2, r7
    32cc:	blx	r3
    32ce:	mov	r4, r7
    32d0:	b.n	3110 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    32d2:	movs	r0, #1
    32d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    32d8:	ldr	r3, [pc, #64]	; (331c <usb_midi_read+0x420>)
    32da:	ldr	r3, [r3, #0]
    32dc:	cmp	r3, #0
    32de:	beq.w	3176 <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    32e2:	movs	r0, #255	; 0xff
    32e4:	blx	r3
    32e6:	b.n	3176 <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    32e8:	mov	r4, r3
    32ea:	b.n	3110 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    32ec:	cmp	r6, #13
    32ee:	bne.n	326a <usb_midi_read+0x36e>
    32f0:	cmp	r3, #13
    32f2:	bne.w	2f7c <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    32f6:	ldr	r3, [pc, #60]	; (3334 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    32f8:	ldr	r2, [pc, #48]	; (332c <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    32fa:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    32fc:	movs	r1, #208	; 0xd0
    32fe:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    3300:	uxtb	r5, r5
    3302:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    3306:	cmp	r3, #0
    3308:	bne.w	3108 <usb_midi_read+0x20c>
    330c:	b.n	3298 <usb_midi_read+0x39c>
    330e:	ubfx	r6, r4, #16, #8
    3312:	uxtb	r5, r5
    3314:	lsrs	r4, r4, #24
    3316:	b.n	3110 <usb_midi_read+0x214>
    3318:	.word	0x1fff1960
    331c:	.word	0x1fff193c
    3320:	.word	0x1fff1940
    3324:	.word	0x1fff1930
    3328:	.word	0x1fff194c
    332c:	.word	0x1fff1de8
    3330:	.word	0x1fff1984
    3334:	.word	0x1fff195c

00003338 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    3338:	cpsid	i
	avail = usb_buffer_available;
    333a:	ldr	r0, [pc, #52]	; (3370 <usb_malloc+0x38>)
    333c:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    333e:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    3342:	cmp	r3, #29
    3344:	bgt.n	3368 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    3346:	mov.w	r1, #2147483648	; 0x80000000
    334a:	lsrs	r1, r3
    334c:	bic.w	r2, r2, r1
    3350:	str	r2, [r0, #0]
	__enable_irq();
    3352:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    3354:	ldr	r0, [pc, #28]	; (3374 <usb_malloc+0x3c>)
    3356:	add.w	r3, r3, r3, lsl #3
    335a:	lsls	r3, r3, #3
    335c:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    335e:	movs	r1, #0
    3360:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    3362:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    3364:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    3366:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    3368:	cpsie	i
		return NULL;
    336a:	movs	r0, #0
    336c:	bx	lr
    336e:	nop
    3370:	.word	0x1fff0c6c
    3374:	.word	0x1fff03d0

00003378 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    3378:	ldr	r3, [pc, #52]	; (33b0 <usb_free+0x38>)
    337a:	ldr	r2, [pc, #56]	; (33b4 <usb_free+0x3c>)
    337c:	subs	r3, r0, r3
    337e:	umull	r2, r3, r2, r3
    3382:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    3384:	cmp	r3, #29
    3386:	bhi.n	33a2 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3388:	ldr	r2, [pc, #44]	; (33b8 <usb_free+0x40>)
    338a:	ldrb	r2, [r2, #0]
    338c:	cbnz	r2, 33a4 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    338e:	cpsid	i
	usb_buffer_available |= mask;
    3390:	ldr	r0, [pc, #40]	; (33bc <usb_free+0x44>)
    3392:	mov.w	r1, #2147483648	; 0x80000000
    3396:	ldr	r2, [r0, #0]
    3398:	lsr.w	r3, r1, r3
    339c:	orrs	r2, r3
    339e:	str	r2, [r0, #0]
	__enable_irq();
    33a0:	cpsie	i
    33a2:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    33a4:	ldr	r2, [pc, #24]	; (33c0 <usb_free+0x48>)
    33a6:	ldrb	r2, [r2, #0]
    33a8:	cmp	r2, #0
    33aa:	beq.n	338e <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    33ac:	b.w	342c <usb_rx_memory>
    33b0:	.word	0x1fff03d0
    33b4:	.word	0x38e38e39
    33b8:	.word	0x1fff1a75
    33bc:	.word	0x1fff0c6c
    33c0:	.word	0x1fff1a80

000033c4 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    33c4:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    33c6:	cmp	r3, #4
    33c8:	bhi.n	33f4 <usb_rx+0x30>
	__disable_irq();
    33ca:	cpsid	i
	ret = rx_first[endpoint];
    33cc:	ldr	r1, [pc, #40]	; (33f8 <usb_rx+0x34>)
    33ce:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    33d2:	cbz	r0, 33f0 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    33d4:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    33d6:	ldr	r4, [pc, #36]	; (33fc <usb_rx+0x38>)
    33d8:	ldrh	r5, [r0, #0]
    33da:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    33de:	ldr	r6, [r0, #4]
    33e0:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    33e4:	subs	r2, r2, r5
    33e6:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    33ea:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    33ec:	pop	{r4, r5, r6}
    33ee:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    33f0:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    33f2:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    33f4:	movs	r0, #0
    33f6:	bx	lr
    33f8:	.word	0x1fff19ec
    33fc:	.word	0x1fff1f14

00003400 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    3400:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    3402:	cmp	r0, #4
    3404:	bhi.n	341e <usb_tx_packet_count+0x1e>
	__disable_irq();
    3406:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    3408:	ldr	r3, [pc, #28]	; (3428 <usb_tx_packet_count+0x28>)
    340a:	ldr.w	r3, [r3, r0, lsl #2]
    340e:	cbz	r3, 3422 <usb_tx_packet_count+0x22>
    3410:	movs	r0, #0
    3412:	ldr	r3, [r3, #4]
    3414:	adds	r0, #1
    3416:	cmp	r3, #0
    3418:	bne.n	3412 <usb_tx_packet_count+0x12>
	__enable_irq();
    341a:	cpsie	i
	return count;
    341c:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    341e:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    3420:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    3422:	mov	r0, r3
    3424:	b.n	341a <usb_tx_packet_count+0x1a>
    3426:	nop
    3428:	.word	0x1fff1a44

0000342c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    342c:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    342e:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3430:	ldr	r2, [pc, #204]	; (3500 <usb_rx_memory+0xd4>)
    3432:	ldrb	r3, [r2, #0]
    3434:	lsls	r3, r3, #28
    3436:	bpl.n	3446 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3438:	ldr	r3, [pc, #200]	; (3504 <usb_rx_memory+0xd8>)
    343a:	ldr	r1, [r3, #32]
    343c:	cmp	r1, #0
    343e:	beq.n	34c8 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3440:	ldr	r1, [r3, #40]	; 0x28
    3442:	cmp	r1, #0
    3444:	beq.n	34e4 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3446:	ldrb	r3, [r2, #1]
    3448:	lsls	r5, r3, #28
    344a:	bpl.n	345a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    344c:	ldr	r3, [pc, #180]	; (3504 <usb_rx_memory+0xd8>)
    344e:	ldr	r1, [r3, #64]	; 0x40
    3450:	cmp	r1, #0
    3452:	beq.n	34f0 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3454:	ldr	r1, [r3, #72]	; 0x48
    3456:	cmp	r1, #0
    3458:	beq.n	34e8 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    345a:	ldrb	r3, [r2, #2]
    345c:	lsls	r4, r3, #28
    345e:	bpl.n	346e <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3460:	ldr	r3, [pc, #160]	; (3504 <usb_rx_memory+0xd8>)
    3462:	ldr	r1, [r3, #96]	; 0x60
    3464:	cmp	r1, #0
    3466:	beq.n	34f4 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3468:	ldr	r1, [r3, #104]	; 0x68
    346a:	cmp	r1, #0
    346c:	beq.n	34ec <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    346e:	ldrb	r3, [r2, #3]
    3470:	lsls	r1, r3, #28
    3472:	bpl.n	3484 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3474:	ldr	r3, [pc, #140]	; (3504 <usb_rx_memory+0xd8>)
    3476:	ldr.w	r1, [r3, #128]	; 0x80
    347a:	cmp	r1, #0
    347c:	beq.n	34fc <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    347e:	ldr.w	r1, [r3, #136]	; 0x88
    3482:	cbz	r1, 34aa <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3484:	ldrb	r3, [r2, #4]
    3486:	lsls	r3, r3, #28
    3488:	bpl.n	349c <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    348a:	ldr	r3, [pc, #120]	; (3504 <usb_rx_memory+0xd8>)
    348c:	ldr.w	r2, [r3, #160]	; 0xa0
    3490:	cmp	r2, #0
    3492:	beq.n	34f8 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3494:	ldr.w	r2, [r3, #168]	; 0xa8
    3498:	movs	r4, #21
    349a:	cbz	r2, 34ac <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    349c:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    349e:	ldr	r3, [pc, #104]	; (3508 <usb_rx_memory+0xdc>)
    34a0:	movs	r2, #0
    34a2:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    34a4:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    34a6:	b.w	3378 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    34aa:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    34ac:	ldr	r1, [pc, #88]	; (3508 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34ae:	ldr	r5, [pc, #92]	; (350c <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    34b0:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34b2:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    34b6:	add.w	r3, r3, r4, lsl #3
    34ba:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    34bc:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    34be:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    34c0:	strb	r2, [r1, #0]
				__enable_irq();
    34c2:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    34c4:	pop	{r4, r5}
    34c6:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    34c8:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    34ca:	ldr	r4, [pc, #60]	; (3508 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34cc:	ldr	r5, [pc, #64]	; (3510 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    34ce:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34d0:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    34d4:	add.w	r3, r3, r2, lsl #3
    34d8:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    34da:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    34dc:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    34de:	strb	r2, [r4, #0]
				__enable_irq();
    34e0:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    34e2:	b.n	34c4 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    34e4:	movs	r4, #5
    34e6:	b.n	34ac <usb_rx_memory+0x80>
    34e8:	movs	r4, #9
    34ea:	b.n	34ac <usb_rx_memory+0x80>
    34ec:	movs	r4, #13
    34ee:	b.n	34ac <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    34f0:	movs	r2, #8
    34f2:	b.n	34ca <usb_rx_memory+0x9e>
    34f4:	movs	r2, #12
    34f6:	b.n	34ca <usb_rx_memory+0x9e>
    34f8:	movs	r2, #20
    34fa:	b.n	34ca <usb_rx_memory+0x9e>
    34fc:	movs	r2, #16
    34fe:	b.n	34ca <usb_rx_memory+0x9e>
    3500:	.word	0x00005954
    3504:	.word	0x1fff0000
    3508:	.word	0x1fff1a75
    350c:	.word	0x004000c8
    3510:	.word	0x00400088

00003514 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    3514:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    3516:	cmp	r3, #4
    3518:	bhi.n	3556 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    351a:	ldr	r2, [pc, #108]	; (3588 <usb_tx+0x74>)
    351c:	lsls	r0, r0, #5
    351e:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    3522:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    3524:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    3526:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    3528:	ldr	r4, [pc, #96]	; (358c <usb_tx+0x78>)
    352a:	ldrb	r2, [r4, r3]
    352c:	cmp	r2, #3
    352e:	bhi.n	3568 <usb_tx+0x54>
    3530:	tbb	[pc, r2]
    3534:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    3538:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    353a:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    353c:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    353e:	tst.w	r0, #8
    3542:	ite	ne
    3544:	movne	r3, #200	; 0xc8
    3546:	moveq	r3, #136	; 0x88
    3548:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    354c:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    354e:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3550:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    3552:	cpsie	i
}
    3554:	pop	{r4, r5}
    3556:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    3558:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    355a:	movs	r2, #2
		break;
    355c:	b.n	353a <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    355e:	movs	r2, #5
    3560:	b.n	353a <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    3562:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    3564:	movs	r2, #4
		break;
    3566:	b.n	353a <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    3568:	ldr	r2, [pc, #36]	; (3590 <usb_tx+0x7c>)
    356a:	ldr.w	r0, [r2, r3, lsl #2]
    356e:	cbz	r0, 3580 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    3570:	ldr	r2, [pc, #32]	; (3594 <usb_tx+0x80>)
    3572:	ldr.w	r0, [r2, r3, lsl #2]
    3576:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    3578:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    357c:	cpsie	i
		return;
    357e:	b.n	3554 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    3580:	str.w	r1, [r2, r3, lsl #2]
    3584:	ldr	r2, [pc, #12]	; (3594 <usb_tx+0x80>)
    3586:	b.n	3578 <usb_tx+0x64>
    3588:	.word	0x1fff0000
    358c:	.word	0x1fff1a84
    3590:	.word	0x1fff1a44
    3594:	.word	0x1fff1a58

00003598 <usb_isr>:
}



void usb_isr(void)
{
    3598:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    359c:	ldr.w	fp, [pc, #776]	; 38a8 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    35a0:	ldr.w	sl, [pc, #776]	; 38ac <usb_isr+0x314>
}



void usb_isr(void)
{
    35a4:	sub	sp, #28
    35a6:	b.n	3632 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    35a8:	ldr	r7, [pc, #680]	; (3854 <usb_isr+0x2bc>)
    35aa:	mov.w	r8, r3, lsr #2
    35ae:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    35b2:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    35b4:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    35b8:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    35bc:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    35be:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    35c2:	and.w	r4, r3, #255	; 0xff
    35c6:	cmp	r3, #0
    35c8:	bne.w	37cc <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    35cc:	ldr.w	r3, [r7, r8, lsl #3]
    35d0:	lsrs	r3, r3, #16
    35d2:	uxth	r1, r3
    35d4:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    35d8:	cmp	r3, #0
    35da:	beq.w	37ba <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    35de:	ldr	r3, [pc, #632]	; (3858 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    35e0:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    35e4:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    35e8:	ldr.w	r2, [r3, r6, lsl #2]
    35ec:	cmp	r2, #0
    35ee:	beq.w	3a5c <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    35f2:	ldr	r5, [pc, #616]	; (385c <usb_isr+0x2c4>)
    35f4:	ldr.w	r3, [r5, r6, lsl #2]
    35f8:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    35fa:	ldr	r4, [pc, #612]	; (3860 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    35fc:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    3600:	ldrh.w	r3, [r4, r6, lsl #1]
    3604:	add	r1, r3
    3606:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    360a:	bl	3338 <usb_malloc>
					if (packet) {
    360e:	cmp	r0, #0
    3610:	beq.w	3a4e <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    3614:	ldr	r2, [pc, #588]	; (3864 <usb_isr+0x2cc>)
    3616:	ldr	r3, [pc, #592]	; (3868 <usb_isr+0x2d0>)
    3618:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    361c:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    3620:	it	ne
    3622:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    3624:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    3628:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    362c:	movs	r3, #8
    362e:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    3632:	ldrb.w	r4, [fp]
    3636:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    3638:	lsls	r0, r4, #29
    363a:	bpl.n	3676 <usb_isr+0xde>
		if (usb_configuration) {
    363c:	ldr	r3, [pc, #556]	; (386c <usb_isr+0x2d4>)
    363e:	ldrb	r3, [r3, #0]
    3640:	cbz	r3, 3670 <usb_isr+0xd8>
			t = usb_reboot_timer;
    3642:	ldr	r1, [pc, #556]	; (3870 <usb_isr+0x2d8>)
    3644:	ldrb	r2, [r1, #0]
			if (t) {
    3646:	and.w	r3, r2, #255	; 0xff
    364a:	cbz	r2, 3656 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    364c:	subs	r3, #1
    364e:	uxtb	r3, r3
    3650:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    3652:	cbnz	r3, 3656 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    3654:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    3656:	ldr	r1, [pc, #540]	; (3874 <usb_isr+0x2dc>)
    3658:	ldrb	r2, [r1, #0]
			if (t) {
    365a:	and.w	r3, r2, #255	; 0xff
    365e:	cbz	r2, 366c <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    3660:	subs	r3, #1
    3662:	uxtb	r3, r3
    3664:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    3666:	cmp	r3, #0
    3668:	beq.w	39fa <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    366c:	bl	2ed0 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    3670:	movs	r3, #4
    3672:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    3676:	and.w	r3, r4, #8
    367a:	and.w	r2, r3, #255	; 0xff
    367e:	cmp	r3, #0
    3680:	beq.w	3814 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    3684:	ldrb.w	r3, [sl]
    3688:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    368a:	lsrs	r6, r3, #4
    368c:	bne.n	35a8 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    368e:	lsrs	r4, r3, #2
    3690:	ldr.w	r9, [pc, #448]	; 3854 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3694:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    3698:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    369c:	ubfx	r2, r2, #2, #4
    36a0:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    36a2:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    36a4:	cmp	r2, #12
    36a6:	bhi.w	37b2 <usb_isr+0x21a>
    36aa:	tbb	[pc, r2]
    36ae:	.short	0x7878
    36b0:	.word	0x82828282
    36b4:	.word	0x82438282
    36b8:	.short	0x8282
    36ba:	.byte	0x07
    36bb:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    36bc:	ldr	r0, [r1, #0]
    36be:	ldr	r5, [pc, #440]	; (3878 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    36c0:	ldr	r3, [pc, #416]	; (3864 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    36c2:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    36c4:	ldr	r7, [pc, #436]	; (387c <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    36c6:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    36ca:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    36cc:	ldr	r6, [pc, #432]	; (3880 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    36ce:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    36d0:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    36d4:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    36d6:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    36d8:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    36da:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    36de:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    36e0:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    36e4:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    36e8:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    36ea:	bhi.w	38b0 <usb_isr+0x318>
    36ee:	cmp.w	r1, #1664	; 0x680
    36f2:	bcs.w	3d1c <usb_isr+0x784>
    36f6:	cmp.w	r1, #258	; 0x102
    36fa:	beq.w	3aca <usb_isr+0x532>
    36fe:	bhi.w	3a94 <usb_isr+0x4fc>
    3702:	cmp	r1, #128	; 0x80
    3704:	beq.w	3d50 <usb_isr+0x7b8>
    3708:	cmp	r1, #130	; 0x82
    370a:	bne.w	3ad6 <usb_isr+0x53e>
    370e:	ldrh	r1, [r5, #4]
    3710:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    3714:	cmp	r1, #5
    3716:	bhi.w	3ad6 <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    371a:	ldr	r3, [pc, #360]	; (3884 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    371c:	ldr	r4, [pc, #360]	; (3888 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    371e:	lsls	r1, r1, #2
    3720:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3722:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3724:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3726:	ldrb	r2, [r3, #0]
    3728:	lsls	r3, r2, #30
    372a:	bpl.w	3e60 <usb_isr+0x8c8>
    372e:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    3730:	movs	r0, #2
    3732:	b.n	3b5e <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    3734:	ldr	r7, [pc, #324]	; (387c <usb_isr+0x2e4>)
    3736:	ldr	r2, [r7, #0]
		if (data) {
    3738:	cbz	r2, 3788 <usb_isr+0x1f0>
			size = ep0_tx_len;
    373a:	ldr	r3, [pc, #336]	; (388c <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    373c:	ldr	r6, [pc, #320]	; (3880 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    373e:	ldr	r1, [pc, #336]	; (3890 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    3740:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3742:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3744:	ldrb	r5, [r1, #0]
    3746:	cmp	r0, #64	; 0x40
    3748:	mov	lr, r0
    374a:	orr.w	r8, r5, #2
    374e:	it	cs
    3750:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3754:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    3756:	eor.w	r4, r4, #1
    375a:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    375c:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3760:	ite	eq
    3762:	moveq	r4, #136	; 0x88
    3764:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3766:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    376a:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    376c:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3770:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3774:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3776:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3778:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    377c:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    377e:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3780:	cmp	r0, #0
    3782:	beq.w	38f2 <usb_isr+0x35a>
    3786:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    3788:	ldr	r3, [pc, #236]	; (3878 <usb_isr+0x2e0>)
    378a:	ldrh	r2, [r3, #0]
    378c:	cmp.w	r2, #1280	; 0x500
    3790:	bne.n	37b2 <usb_isr+0x21a>
			setup.bRequest = 0;
    3792:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3794:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    3796:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3798:	ldr	r3, [pc, #248]	; (3894 <usb_isr+0x2fc>)
    379a:	strb	r2, [r3, #0]
    379c:	b.n	37b2 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    379e:	ldr	r2, [pc, #216]	; (3878 <usb_isr+0x2e0>)
    37a0:	ldrh	r0, [r2, #0]
    37a2:	movw	r2, #8225	; 0x2021
    37a6:	cmp	r0, r2
    37a8:	beq.w	38fc <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    37ac:	ldr	r2, [pc, #180]	; (3864 <usb_isr+0x2cc>)
    37ae:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    37b2:	ldr	r2, [pc, #228]	; (3898 <usb_isr+0x300>)
    37b4:	movs	r3, #1
    37b6:	strb	r3, [r2, #0]
    37b8:	b.n	362c <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    37ba:	ldr	r2, [pc, #168]	; (3864 <usb_isr+0x2cc>)
    37bc:	ldr	r3, [pc, #168]	; (3868 <usb_isr+0x2d0>)
    37be:	tst.w	r9, #8
    37c2:	it	ne
    37c4:	movne	r3, r2
    37c6:	str.w	r3, [r7, r8, lsl #3]
    37ca:	b.n	362c <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    37cc:	bl	3378 <usb_free>
				packet = tx_first[endpoint];
    37d0:	ldr	r2, [pc, #200]	; (389c <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    37d2:	ldr	r1, [pc, #204]	; (38a0 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    37d4:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    37d8:	cmp	r3, #0
    37da:	beq.w	3a64 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    37de:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    37e0:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    37e2:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    37e6:	add.w	r2, r3, #8
    37ea:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    37ee:	cmp	r4, #3
    37f0:	bhi.n	37fe <usb_isr+0x266>
    37f2:	tbb	[pc, r4]
    37f6:	.short	0x022c
    37f8:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    37fa:	movs	r2, #2
    37fc:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    37fe:	ldrh	r2, [r3, #0]
    3800:	tst.w	r9, #8
    3804:	ite	eq
    3806:	moveq	r3, #136	; 0x88
    3808:	movne	r3, #200	; 0xc8
    380a:	orr.w	r3, r3, r2, lsl #16
    380e:	str.w	r3, [r7, r8, lsl #3]
    3812:	b.n	362c <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    3814:	lsls	r0, r4, #31
    3816:	bmi.w	3a00 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    381a:	lsls	r1, r4, #24
    381c:	bmi.w	3a80 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3820:	lsls	r2, r4, #30
    3822:	bpl.n	3832 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    3824:	ldr	r2, [pc, #124]	; (38a4 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3826:	ldr	r1, [pc, #128]	; (38a8 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3828:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    382a:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    382c:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    382e:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3830:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    3832:	lsls	r3, r4, #27
    3834:	bpl.n	383c <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    3836:	ldr	r3, [pc, #112]	; (38a8 <usb_isr+0x310>)
    3838:	movs	r2, #16
    383a:	strb	r2, [r3, #0]
	}

}
    383c:	add	sp, #28
    383e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    3842:	movs	r2, #4
    3844:	strb	r2, [r1, r6]
						break;
    3846:	b.n	37fe <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    3848:	movs	r2, #5
    384a:	strb	r2, [r1, r6]
						break;
    384c:	b.n	37fe <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    384e:	movs	r2, #3
    3850:	strb	r2, [r1, r6]
						break;
    3852:	b.n	37fe <usb_isr+0x266>
    3854:	.word	0x1fff0000
    3858:	.word	0x1fff19ec
    385c:	.word	0x1fff1994
    3860:	.word	0x1fff1f14
    3864:	.word	0x004000c8
    3868:	.word	0x00400088
    386c:	.word	0x1fff1a80
    3870:	.word	0x1fff1a01
    3874:	.word	0x1fff1914
    3878:	.word	0x1fff1a6c
    387c:	.word	0x1fff1990
    3880:	.word	0x1fff1a00
    3884:	.word	0x400720c0
    3888:	.word	0x1fff1a78
    388c:	.word	0x1fff19a8
    3890:	.word	0x1fff1a74
    3894:	.word	0x40072098
    3898:	.word	0x40072094
    389c:	.word	0x1fff1a44
    38a0:	.word	0x1fff1a84
    38a4:	.word	0x40072088
    38a8:	.word	0x40072080
    38ac:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    38b0:	movw	r4, #8225	; 0x2021
    38b4:	cmp	r1, r4
    38b6:	beq.w	39f2 <usb_isr+0x45a>
    38ba:	bhi.n	3950 <usb_isr+0x3b8>
    38bc:	cmp.w	r1, #2176	; 0x880
    38c0:	beq.w	3b56 <usb_isr+0x5be>
    38c4:	cmp.w	r1, #2304	; 0x900
    38c8:	bne.w	3ad6 <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    38cc:	ldr	r2, [pc, #712]	; (3b98 <usb_isr+0x600>)
    38ce:	ldr	r4, [pc, #716]	; (3b9c <usb_isr+0x604>)
    38d0:	ldrb	r1, [r5, #2]
    38d2:	strb	r1, [r2, #0]
    38d4:	add.w	r5, r4, #160	; 0xa0
    38d8:	b.n	38e2 <usb_isr+0x34a>
    38da:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    38dc:	cmp	r5, r4
    38de:	beq.w	3bf4 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    38e2:	ldr	r3, [r4, #32]
    38e4:	lsls	r1, r3, #24
    38e6:	bpl.n	38da <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    38e8:	ldr	r0, [r4, #36]	; 0x24
    38ea:	subs	r0, #8
    38ec:	bl	3378 <usb_free>
    38f0:	b.n	38da <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    38f2:	cmp.w	lr, #64	; 0x40
    38f6:	it	ne
    38f8:	movne	r2, #0
    38fa:	b.n	3786 <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    38fc:	ldr	r2, [pc, #672]	; (3ba0 <usb_isr+0x608>)
    38fe:	ldrb	r5, [r1, #0]
    3900:	ldrb	r0, [r1, #1]
    3902:	strb	r5, [r2, #0]
    3904:	strb	r0, [r2, #1]
    3906:	ldrb	r5, [r1, #2]
    3908:	ldrb	r0, [r1, #3]
    390a:	strb	r5, [r2, #2]
    390c:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    390e:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3910:	ldrb	r5, [r1, #4]
    3912:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3914:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3916:	ldrb	r5, [r1, #5]
    3918:	ldrb	r1, [r1, #6]
    391a:	strb	r5, [r2, #5]
    391c:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    391e:	beq.w	3b4e <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3922:	ldr	r1, [pc, #640]	; (3ba4 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3924:	ldr	r6, [pc, #640]	; (3ba8 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3926:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3928:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    392a:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    392e:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3930:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3934:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3936:	ite	eq
    3938:	moveq	r1, #136	; 0x88
    393a:	movne	r1, #200	; 0xc8
    393c:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3940:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3944:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3948:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    394a:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    394c:	str	r1, [r2, #4]
    394e:	b.n	37ac <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3950:	movw	r4, #8737	; 0x2221
    3954:	cmp	r1, r4
    3956:	bne.w	3d6a <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    395a:	ldr.w	ip, [pc, #656]	; 3bec <usb_isr+0x654>
    395e:	ldr	r3, [pc, #588]	; (3bac <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    3960:	ldr	r1, [pc, #588]	; (3bb0 <usb_isr+0x618>)
    3962:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3964:	ldr.w	r5, [ip]
    3968:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    396a:	str	r0, [sp, #4]
    396c:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    396e:	movs	r0, #0
    3970:	str	r0, [sp, #8]
    3972:	mov	r8, r0
    3974:	mov	ip, r0
    3976:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3978:	ldr	r1, [pc, #552]	; (3ba4 <usb_isr+0x60c>)
    397a:	ldrb	r5, [r1, #0]
    397c:	orr.w	lr, r5, #2
    3980:	add.w	r3, r9, lr, lsl #3
    3984:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3986:	ldr	r3, [sp, #4]
    3988:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    398a:	ldr	r3, [sp, #12]
    398c:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    398e:	ite	eq
    3990:	moveq	r4, #136	; 0x88
    3992:	movne	r4, #200	; 0xc8
    3994:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3998:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    399c:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    39a0:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    39a2:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    39a4:	ldr.w	lr, [pc, #500]	; 3b9c <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    39a8:	ldr	r3, [pc, #508]	; (3ba8 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    39aa:	ldr.w	r8, [pc, #504]	; 3ba4 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    39ae:	cmp	r0, #0
    39b0:	bne.w	3ae4 <usb_isr+0x54c>
    39b4:	cmp.w	ip, #64	; 0x40
    39b8:	bne.n	39f2 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    39ba:	orr.w	ip, r4, #2
    39be:	add.w	r3, r9, ip, lsl #3
    39c2:	ldr	r4, [sp, #8]
    39c4:	ldr.w	lr, [pc, #468]	; 3b9c <usb_isr+0x604>
    39c8:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    39ca:	cmp	r2, #0
    39cc:	bne.w	3b10 <usb_isr+0x578>
    39d0:	lsls	r2, r0, #16
    39d2:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    39d6:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    39da:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    39de:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    39e0:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    39e2:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    39e4:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    39e6:	cmp	r0, #64	; 0x40
    39e8:	bne.n	39f2 <usb_isr+0x45a>
    39ea:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    39ec:	ldr	r2, [pc, #452]	; (3bb4 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    39ee:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    39f0:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    39f2:	ldr	r2, [pc, #452]	; (3bb8 <usb_isr+0x620>)
    39f4:	movs	r3, #1
    39f6:	strb	r3, [r2, #0]
    39f8:	b.n	37b2 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    39fa:	bl	2758 <usb_serial_flush_callback>
    39fe:	b.n	366c <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3a00:	ldr	r3, [pc, #408]	; (3b9c <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3a02:	ldr	r0, [pc, #436]	; (3bb8 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    3a04:	ldr	r1, [pc, #412]	; (3ba4 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    3a06:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3a08:	mov.w	lr, #2
    3a0c:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3a10:	ldr	r7, [pc, #424]	; (3bbc <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    3a12:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3a14:	ldr	r1, [pc, #424]	; (3bc0 <usb_isr+0x628>)
    3a16:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3a18:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3a1a:	ldr	r6, [pc, #424]	; (3bc4 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    3a1c:	ldr	r5, [pc, #424]	; (3bc8 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3a1e:	ldr	r4, [pc, #428]	; (3bcc <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3a20:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3a22:	movs	r1, #13
    3a24:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3a26:	movs	r1, #255	; 0xff
    3a28:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3a2a:	ldr.w	lr, [pc, #452]	; 3bf0 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    3a2e:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3a30:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3a32:	ldr	r5, [pc, #412]	; (3bd0 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3a34:	ldr	r2, [pc, #412]	; (3bd4 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3a36:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3a3a:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3a3c:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3a3e:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3a42:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3a44:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3a46:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    3a48:	add	sp, #28
    3a4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    3a4e:	ldr	r2, [pc, #392]	; (3bd8 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    3a50:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    3a54:	ldrb	r3, [r2, #0]
    3a56:	adds	r3, #1
    3a58:	strb	r3, [r2, #0]
    3a5a:	b.n	362c <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3a5c:	str.w	r0, [r3, r6, lsl #2]
    3a60:	ldr	r5, [pc, #376]	; (3bdc <usb_isr+0x644>)
    3a62:	b.n	35fa <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3a64:	ldrb	r3, [r1, r6]
    3a66:	cmp	r3, #3
    3a68:	bhi.n	3b40 <usb_isr+0x5a8>
    3a6a:	add	r2, pc, #4	; (adr r2, 3a70 <usb_isr+0x4d8>)
    3a6c:	ldr.w	pc, [r2, r3, lsl #2]
    3a70:	.word	0x0000362d
    3a74:	.word	0x0000362d
    3a78:	.word	0x00003ac5
    3a7c:	.word	0x00003abf
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3a80:	ldr	r1, [pc, #312]	; (3bbc <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    3a82:	ldr	r3, [pc, #324]	; (3bc8 <usb_isr+0x630>)
    3a84:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3a86:	movs	r0, #13
    3a88:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    3a8a:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3a8c:	lsls	r2, r4, #30
    3a8e:	bpl.w	3832 <usb_isr+0x29a>
    3a92:	b.n	3824 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3a94:	movw	r2, #770	; 0x302
    3a98:	cmp	r1, r2
    3a9a:	bne.w	3d5a <usb_isr+0x7c2>
    3a9e:	ldrh	r1, [r5, #4]
    3aa0:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3aa4:	cmp	r1, #5
    3aa6:	bhi.n	3ad6 <usb_isr+0x53e>
    3aa8:	ldrh	r2, [r5, #2]
    3aaa:	cbnz	r2, 3ad6 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    3aac:	ldr	r4, [pc, #268]	; (3bbc <usb_isr+0x624>)
    3aae:	str	r0, [sp, #4]
    3ab0:	lsls	r1, r1, #2
    3ab2:	add	r4, r1
    3ab4:	ldrb	r1, [r4, #0]
    3ab6:	orr.w	r1, r1, #2
    3aba:	strb	r1, [r4, #0]
    3abc:	b.n	396e <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3abe:	movs	r3, #1
    3ac0:	strb	r3, [r1, r6]
						break;
    3ac2:	b.n	362c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3ac4:	movs	r3, #0
    3ac6:	strb	r3, [r1, r6]
						break;
    3ac8:	b.n	362c <usb_isr+0x94>
    3aca:	ldrh	r1, [r5, #4]
    3acc:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3ad0:	cmp	r1, #5
    3ad2:	bls.w	3d74 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3ad6:	ldr	r2, [pc, #228]	; (3bbc <usb_isr+0x624>)
    3ad8:	movs	r3, #15
    3ada:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3adc:	ldr	r2, [pc, #216]	; (3bb8 <usb_isr+0x620>)
    3ade:	movs	r3, #1
    3ae0:	strb	r3, [r2, #0]
    3ae2:	b.n	37b2 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    3ae4:	cmp	r0, #64	; 0x40
    3ae6:	bls.w	39ba <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3aea:	orr.w	r4, r4, #2
    3aee:	add.w	r1, lr, r4, lsl #3
    3af2:	ldr	r6, [sp, #8]
    3af4:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3af6:	cbz	r2, 3b28 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    3af8:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3afc:	ldr	r2, [pc, #224]	; (3be0 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    3afe:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3b00:	mov	r3, r6
    3b02:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3b04:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3b08:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b0a:	str.w	r2, [lr, r4, lsl #3]
    3b0e:	b.n	39ec <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    3b10:	ldrb.w	r3, [sp, #4]
    3b14:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b16:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3b18:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3b1a:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b1c:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3b20:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b22:	str.w	r2, [lr, ip, lsl #3]
    3b26:	b.n	39e6 <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    3b28:	ldrb.w	r1, [sp, #4]
    3b2c:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3b2e:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b30:	ldr	r2, [pc, #140]	; (3bc0 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3b32:	strb.w	r5, [r8]
    3b36:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3b38:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b3a:	str.w	r2, [lr, r4, lsl #3]
    3b3e:	b.n	39ec <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3b40:	tst.w	r9, #8
    3b44:	ite	eq
    3b46:	moveq	r3, #2
    3b48:	movne	r3, #3
    3b4a:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3b4c:	b.n	362c <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3b4e:	ldr	r2, [pc, #148]	; (3be4 <usb_isr+0x64c>)
    3b50:	movs	r1, #15
    3b52:	strb	r1, [r2, #0]
    3b54:	b.n	3922 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3b56:	ldr	r2, [pc, #64]	; (3b98 <usb_isr+0x600>)
    3b58:	ldr	r4, [pc, #140]	; (3be8 <usb_isr+0x650>)
    3b5a:	ldrb	r2, [r2, #0]
    3b5c:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3b5e:	ldrh	r2, [r5, #6]
    3b60:	cmp	r2, r0
    3b62:	bcs.w	3f28 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b66:	ldr	r1, [pc, #60]	; (3ba4 <usb_isr+0x60c>)
    3b68:	ldrb	r5, [r1, #0]
    3b6a:	cmp	r2, #64	; 0x40
    3b6c:	mov	ip, r2
    3b6e:	orr.w	lr, r5, #2
    3b72:	it	cs
    3b74:	movcs.w	ip, #64	; 0x40
    3b78:	add.w	r3, r4, ip
    3b7c:	add.w	r0, r9, lr, lsl #3
    3b80:	str	r3, [sp, #8]
    3b82:	movs	r3, #1
    3b84:	str	r4, [r0, #4]
    3b86:	mov.w	r8, ip, lsl #16
    3b8a:	rsb	r0, ip, r2
    3b8e:	str	r3, [sp, #4]
    3b90:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b92:	movs	r4, #200	; 0xc8
    3b94:	b.n	3994 <usb_isr+0x3fc>
    3b96:	nop
    3b98:	.word	0x1fff1a80
    3b9c:	.word	0x1fff0000
    3ba0:	.word	0x1fff1ddc
    3ba4:	.word	0x1fff1a74
    3ba8:	.word	0x1fff1a00
    3bac:	.word	0x1fff1de4
    3bb0:	.word	0x1fff1924
    3bb4:	.word	0x1fff19a8
    3bb8:	.word	0x40072094
    3bbc:	.word	0x400720c0
    3bc0:	.word	0x00400088
    3bc4:	.word	0x40072088
    3bc8:	.word	0x40072080
    3bcc:	.word	0x40072098
    3bd0:	.word	0x1fff19ac
    3bd4:	.word	0x1fff1a04
    3bd8:	.word	0x1fff1a75
    3bdc:	.word	0x1fff1994
    3be0:	.word	0x004000c8
    3be4:	.word	0x1fff1a01
    3be8:	.word	0x1fff1a78
    3bec:	.word	0x1fff192c
    3bf0:	.word	0x4007208c
    3bf4:	ldr	r4, [pc, #704]	; (3eb8 <usb_isr+0x920>)
    3bf6:	ldr	r2, [pc, #708]	; (3ebc <usb_isr+0x924>)
    3bf8:	ldr	r1, [pc, #708]	; (3ec0 <usb_isr+0x928>)
    3bfa:	ldr	r0, [pc, #712]	; (3ec4 <usb_isr+0x92c>)
    3bfc:	ldr	r5, [pc, #712]	; (3ec8 <usb_isr+0x930>)
    3bfe:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3c00:	movs	r3, #0
    3c02:	ldr	r4, [pc, #712]	; (3ecc <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3c04:	str	r4, [sp, #8]
    3c06:	str	r6, [sp, #20]
    3c08:	str	r5, [sp, #12]
    3c0a:	mov	r8, r0
    3c0c:	mov	r4, r3
    3c0e:	str	r7, [sp, #16]
    3c10:	mov	r6, r2
    3c12:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3c14:	ldr	r0, [r6, #0]
			while (p) {
    3c16:	cbz	r0, 3c24 <usb_isr+0x68c>
				n = p->next;
    3c18:	ldr	r7, [r0, #4]
				usb_free(p);
    3c1a:	bl	3378 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    3c1e:	mov	r0, r7
    3c20:	cmp	r7, #0
    3c22:	bne.n	3c18 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3c24:	movs	r3, #0
    3c26:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3c28:	ldr	r3, [sp, #12]
			p = tx_first[i];
    3c2a:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3c2c:	mov	r2, r3
    3c2e:	movs	r3, #0
    3c30:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    3c34:	cbz	r0, 3c42 <usb_isr+0x6aa>
				n = p->next;
    3c36:	ldr	r7, [r0, #4]
				usb_free(p);
    3c38:	bl	3378 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3c3c:	mov	r0, r7
    3c3e:	cmp	r7, #0
    3c40:	bne.n	3c36 <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3c42:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3c44:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3c46:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3c48:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    3c4a:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    3c4e:	ldr	r2, [sp, #8]
    3c50:	mov.w	r1, #0
			switch (tx_state[i]) {
    3c54:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    3c56:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    3c5a:	cmp	r3, #3
    3c5c:	bhi.n	3c6e <usb_isr+0x6d6>
    3c5e:	tbb	[pc, r3]
    3c62:	.short	0x0258
    3c64:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3c66:	ldr	r3, [sp, #4]
    3c68:	mov.w	r2, #1
    3c6c:	strb	r2, [r3, #0]
    3c6e:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3c70:	adds	r4, #1
    3c72:	adds	r3, #1
    3c74:	cmp	r4, #5
    3c76:	add.w	r6, r6, #4
    3c7a:	add.w	r5, r5, #4
    3c7e:	str	r3, [sp, #4]
    3c80:	bne.n	3c14 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3c82:	ldr	r4, [pc, #588]	; (3ed0 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3c84:	ldr	r5, [pc, #588]	; (3ed4 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3c86:	ldrb	r2, [r4, #0]
			*reg = epconf;
    3c88:	ldr	r3, [pc, #588]	; (3ed8 <usb_isr+0x940>)
    3c8a:	ldr	r7, [sp, #16]
    3c8c:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3c8e:	movs	r1, #0
    3c90:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3c92:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3c94:	lsls	r2, r2, #28
    3c96:	bmi.n	3d8e <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3c98:	ldrb	r2, [r4, #1]
			*reg = epconf;
    3c9a:	ldr	r1, [pc, #576]	; (3edc <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3c9c:	ldr.w	r8, [pc, #588]	; 3eec <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3ca0:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3ca2:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3ca4:	mov.w	r1, #0
    3ca8:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    3cac:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3cb0:	bmi.w	3e3a <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3cb4:	ldrb	r2, [r4, #2]
			*reg = epconf;
    3cb6:	ldr	r1, [pc, #552]	; (3ee0 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3cb8:	ldr.w	r8, [pc, #560]	; 3eec <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3cbc:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3cbe:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3cc0:	mov.w	r1, #0
    3cc4:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    3cc8:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3ccc:	bmi.w	3e12 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3cd0:	ldr	r1, [pc, #528]	; (3ee4 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3cd2:	ldrb	r2, [r4, #3]
			*reg = epconf;
    3cd4:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3cd6:	movs	r1, #0
    3cd8:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3cdc:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3ce0:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3ce2:	ldr.w	r8, [pc, #520]	; 3eec <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3ce6:	bmi.n	3de4 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3ce8:	ldrb	r2, [r4, #4]
			*reg = epconf;
    3cea:	ldr	r1, [pc, #508]	; (3ee8 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3cec:	ldr	r4, [pc, #508]	; (3eec <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3cee:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3cf0:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3cf2:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3cf4:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3cf8:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3cfc:	bmi.n	3dba <usb_isr+0x822>
    3cfe:	ldrb	r3, [r6, #0]
    3d00:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3d02:	movs	r1, #0
    3d04:	eor.w	r2, r3, #1
    3d08:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3d0c:	str.w	r1, [r9, #184]	; 0xb8
    3d10:	b.n	396e <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3d12:	ldr	r3, [sp, #4]
    3d14:	mov.w	r2, #0
    3d18:	strb	r2, [r3, #0]
    3d1a:	b.n	3c6e <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3d1c:	ldr	r2, [pc, #464]	; (3ef0 <usb_isr+0x958>)
    3d1e:	ldr	r4, [r2, #4]
    3d20:	cmp	r4, #0
    3d22:	beq.w	3ad6 <usb_isr+0x53e>
    3d26:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3d28:	ldrh.w	lr, [r5, #4]
    3d2c:	b.n	3d38 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3d2e:	adds	r2, #12
			if (list->addr == NULL) break;
    3d30:	ldr	r4, [r2, #4]
    3d32:	cmp	r4, #0
    3d34:	beq.w	3ad6 <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3d38:	ldrh	r3, [r2, #0]
    3d3a:	cmp	r3, r0
    3d3c:	bne.n	3d2e <usb_isr+0x796>
    3d3e:	ldrh	r3, [r2, #2]
    3d40:	cmp	r3, lr
    3d42:	bne.n	3d2e <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3d44:	lsrs	r0, r0, #8
    3d46:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3d48:	ite	eq
    3d4a:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    3d4c:	ldrhne	r0, [r2, #8]
    3d4e:	b.n	3b5e <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3d50:	ldr	r4, [pc, #416]	; (3ef4 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    3d52:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3d54:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3d56:	strb	r2, [r4, #1]
    3d58:	b.n	3b5e <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3d5a:	cmp.w	r1, #1280	; 0x500
    3d5e:	bne.w	3ad6 <usb_isr+0x53e>
    3d62:	movs	r3, #1
    3d64:	movs	r2, #0
    3d66:	str	r3, [sp, #4]
    3d68:	b.n	396e <usb_isr+0x3d6>
    3d6a:	movw	r2, #8993	; 0x2321
    3d6e:	cmp	r1, r2
    3d70:	beq.n	3d62 <usb_isr+0x7ca>
    3d72:	b.n	3ad6 <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3d74:	ldrh	r2, [r5, #2]
    3d76:	cmp	r2, #0
    3d78:	bne.w	3ad6 <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3d7c:	ldr	r4, [pc, #376]	; (3ef8 <usb_isr+0x960>)
    3d7e:	str	r0, [sp, #4]
    3d80:	lsls	r1, r1, #2
    3d82:	add	r4, r1
    3d84:	ldrb	r1, [r4, #0]
    3d86:	bic.w	r1, r1, #2
    3d8a:	strb	r1, [r4, #0]
    3d8c:	b.n	396e <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3d8e:	bl	3338 <usb_malloc>
				if (p) {
    3d92:	cmp	r0, #0
    3d94:	beq.w	3f04 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    3d98:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3d9a:	ldr	r2, [pc, #352]	; (3efc <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3d9c:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3da0:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3da4:	bl	3338 <usb_malloc>
				if (p) {
    3da8:	cmp	r0, #0
    3daa:	beq.n	3eac <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    3dac:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3dae:	ldr	r2, [pc, #336]	; (3f00 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3db0:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3db4:	str.w	r2, [r9, #40]	; 0x28
    3db8:	b.n	3c98 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3dba:	bl	3338 <usb_malloc>
				if (p) {
    3dbe:	cmp	r0, #0
    3dc0:	beq.n	3e70 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    3dc2:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3dc4:	ldr	r2, [pc, #308]	; (3efc <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3dc6:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3dca:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3dce:	bl	3338 <usb_malloc>
				if (p) {
    3dd2:	cmp	r0, #0
    3dd4:	beq.n	3e64 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    3dd6:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3dd8:	ldr	r2, [pc, #292]	; (3f00 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3dda:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3dde:	str.w	r2, [r9, #168]	; 0xa8
    3de2:	b.n	3cfe <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3de4:	bl	3338 <usb_malloc>
				if (p) {
    3de8:	cmp	r0, #0
    3dea:	beq.w	3f1c <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    3dee:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3df0:	ldr	r2, [pc, #264]	; (3efc <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3df2:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3df6:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3dfa:	bl	3338 <usb_malloc>
				if (p) {
    3dfe:	cmp	r0, #0
    3e00:	beq.w	3f10 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    3e04:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3e06:	ldr	r2, [pc, #248]	; (3f00 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3e08:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3e0c:	str.w	r2, [r9, #136]	; 0x88
    3e10:	b.n	3ce8 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3e12:	bl	3338 <usb_malloc>
				if (p) {
    3e16:	cmp	r0, #0
    3e18:	beq.n	3ea0 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    3e1a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3e1c:	ldr	r2, [pc, #220]	; (3efc <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3e1e:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3e22:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3e26:	bl	3338 <usb_malloc>
				if (p) {
    3e2a:	cbz	r0, 3e94 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3e2c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3e2e:	ldr	r2, [pc, #208]	; (3f00 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3e30:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3e34:	str.w	r2, [r9, #104]	; 0x68
    3e38:	b.n	3cd0 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3e3a:	bl	3338 <usb_malloc>
				if (p) {
    3e3e:	cbz	r0, 3e88 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3e40:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3e42:	ldr	r2, [pc, #184]	; (3efc <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3e44:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3e48:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3e4c:	bl	3338 <usb_malloc>
				if (p) {
    3e50:	cbz	r0, 3e7c <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    3e52:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3e54:	ldr	r2, [pc, #168]	; (3f00 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3e56:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3e5a:	str.w	r2, [r9, #72]	; 0x48
    3e5e:	b.n	3cb4 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3e60:	movs	r0, #2
    3e62:	b.n	3b5e <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3e64:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3e66:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    3e6a:	adds	r2, #1
    3e6c:	strb	r2, [r5, #0]
    3e6e:	b.n	3cfe <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3e70:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3e72:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    3e76:	adds	r2, #1
    3e78:	strb	r2, [r5, #0]
    3e7a:	b.n	3dce <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3e7c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3e7e:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    3e82:	adds	r2, #1
    3e84:	strb	r2, [r5, #0]
    3e86:	b.n	3cb4 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3e88:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3e8a:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    3e8e:	adds	r2, #1
    3e90:	strb	r2, [r5, #0]
    3e92:	b.n	3e4c <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3e94:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3e96:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    3e9a:	adds	r2, #1
    3e9c:	strb	r2, [r5, #0]
    3e9e:	b.n	3cd0 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3ea0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3ea2:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    3ea6:	adds	r2, #1
    3ea8:	strb	r2, [r5, #0]
    3eaa:	b.n	3e26 <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3eac:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3eae:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    3eb2:	adds	r2, #1
    3eb4:	strb	r2, [r5, #0]
    3eb6:	b.n	3c98 <usb_isr+0x700>
    3eb8:	.word	0x1fff1a84
    3ebc:	.word	0x1fff19ec
    3ec0:	.word	0x1fff1a44
    3ec4:	.word	0x1fff1a58
    3ec8:	.word	0x1fff1994
    3ecc:	.word	0x1fff1f14
    3ed0:	.word	0x00005954
    3ed4:	.word	0x1fff1a75
    3ed8:	.word	0x400720c4
    3edc:	.word	0x400720c8
    3ee0:	.word	0x400720cc
    3ee4:	.word	0x400720d0
    3ee8:	.word	0x400720d4
    3eec:	.word	0x1fff0000
    3ef0:	.word	0x0000595c
    3ef4:	.word	0x1fff1a78
    3ef8:	.word	0x400720c0
    3efc:	.word	0x00400088
    3f00:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3f04:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3f06:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    3f0a:	adds	r2, #1
    3f0c:	strb	r2, [r5, #0]
    3f0e:	b.n	3da4 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3f10:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3f12:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    3f16:	adds	r2, #1
    3f18:	strb	r2, [r5, #0]
    3f1a:	b.n	3ce8 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3f1c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3f1e:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    3f22:	adds	r2, #1
    3f24:	strb	r2, [r5, #0]
    3f26:	b.n	3dfa <usb_isr+0x862>
    3f28:	cmp	r0, #64	; 0x40
    3f2a:	mov	ip, r0
    3f2c:	it	cs
    3f2e:	movcs.w	ip, #64	; 0x40
    3f32:	add.w	r3, r4, ip
    3f36:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3f38:	movs	r3, #1
    3f3a:	rsb	r0, ip, r0
    3f3e:	mov.w	r8, ip, lsl #16
    3f42:	movs	r2, #0
    3f44:	str	r3, [sp, #4]
    3f46:	b.n	3978 <usb_isr+0x3e0>

00003f48 <usb_init>:
}



void usb_init(void)
{
    3f48:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f4c:	ldr	r4, [pc, #156]	; (3fec <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3f4e:	bl	481c <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3f52:	movs	r2, #0
    3f54:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3f58:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3f5a:	str	r2, [r3, #0]
		table[i].addr = 0;
    3f5c:	str	r2, [r3, #4]
    3f5e:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3f60:	cmp	r3, r0
		table[i].desc = 0;
    3f62:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3f66:	bne.n	3f5a <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3f68:	ldr	r0, [pc, #132]	; (3ff0 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3f6a:	ldr	r2, [pc, #136]	; (3ff4 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3f6c:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3f6e:	ldr.w	lr, [pc, #156]	; 400c <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3f72:	ldr	r6, [pc, #132]	; (3ff8 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3f74:	ldr	r5, [pc, #132]	; (3ffc <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3f76:	ldr	r7, [pc, #136]	; (4000 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3f78:	ldr.w	ip, [pc, #148]	; 4010 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    3f7c:	ldr.w	r8, [pc, #148]	; 4014 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3f80:	orr.w	r3, r3, #262144	; 0x40000
    3f84:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3f86:	ldr	r3, [r2, #0]
    3f88:	orr.w	r3, r3, #50331648	; 0x3000000
    3f8c:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3f8e:	movs	r3, #3
    3f90:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3f94:	movs	r3, #160	; 0xa0
    3f96:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3f98:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3f9c:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3fa0:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3fa4:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3fa6:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3fa8:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3fac:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3fae:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3fb0:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3fb2:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3fb4:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3fb6:	ldr	r5, [pc, #76]	; (4004 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3fb8:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3fbc:	ldr	r0, [pc, #72]	; (4008 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    3fbe:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    3fc2:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3fc4:	movs	r3, #1
    3fc6:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3fca:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    3fce:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3fd2:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3fd4:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    3fd6:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3fda:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3fdc:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3fde:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    3fe2:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3fe6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3fea:	nop
    3fec:	.word	0x1fff0000
    3ff0:	.word	0x40048034
    3ff4:	.word	0x4000d800
    3ff8:	.word	0x40072140
    3ffc:	.word	0x4007209c
    4000:	.word	0x400720b0
    4004:	.word	0xe000e435
    4008:	.word	0xe000e104
    400c:	.word	0x40072144
    4010:	.word	0x40072080
    4014:	.word	0x40072088

00004018 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    4018:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    401a:	ldr	r4, [pc, #176]	; (40cc <yield+0xb4>)
    401c:	ldrb	r3, [r4, #0]
    401e:	cbz	r3, 4022 <yield+0xa>
    4020:	pop	{r3, r4, r5, pc}
	running = 1;
    4022:	movs	r3, #1
    4024:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4026:	bl	2544 <usb_serial_available>
	if (Serial.available()) serialEvent();
    402a:	cmp	r0, #0
    402c:	bne.n	40b4 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    402e:	bl	45ec <serial_available>
	if (Serial1.available()) serialEvent1();
    4032:	cmp	r0, #0
    4034:	bne.n	40ae <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    4036:	bl	42d4 <serial2_available>
	if (Serial2.available()) serialEvent2();
    403a:	cmp	r0, #0
    403c:	bne.n	40a8 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    403e:	bl	48ec <serial3_available>
	if (Serial3.available()) serialEvent3();
    4042:	cbnz	r0, 40a2 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    4044:	bl	4400 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    4048:	cbnz	r0, 409c <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    404a:	bl	41dc <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    404e:	cbnz	r0, 4096 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    4050:	bl	4718 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    4054:	cbnz	r0, 4090 <yield+0x78>
#endif
	running = 0;
    4056:	movs	r3, #0
    4058:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    405a:	mrs	r3, IPSR
		if (ipsr != 0) return;
    405e:	cmp	r3, #0
    4060:	bne.n	4020 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4062:	mrs	r1, PRIMASK
		__disable_irq();
    4066:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    4068:	ldr	r3, [pc, #100]	; (40d0 <yield+0xb8>)
    406a:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    406c:	cbz	r0, 40ba <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    406e:	ldr	r4, [pc, #100]	; (40d4 <yield+0xbc>)
    4070:	ldrb	r2, [r4, #0]
    4072:	cbnz	r2, 40ba <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    4074:	ldr	r5, [r0, #20]
    4076:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    4078:	movs	r3, #1
    407a:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    407c:	cbz	r5, 40c2 <yield+0xaa>
			firstYield->_prev = nullptr;
    407e:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4080:	cbnz	r1, 4084 <yield+0x6c>
    4082:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    4084:	movs	r5, #0
    4086:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    4088:	ldr	r3, [r0, #8]
    408a:	blx	r3
		runningFromYield = false;
    408c:	strb	r5, [r4, #0]
    408e:	b.n	4020 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    4090:	bl	41d4 <serialEvent6()>
    4094:	b.n	4056 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    4096:	bl	40dc <serialEvent5()>
    409a:	b.n	4050 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    409c:	bl	41c0 <serialEvent4()>
    40a0:	b.n	404a <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    40a2:	bl	49e8 <serialEvent3()>
    40a6:	b.n	4044 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    40a8:	bl	41bc <serialEvent2()>
    40ac:	b.n	403e <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    40ae:	bl	49e4 <serialEvent1()>
    40b2:	b.n	4036 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    40b4:	bl	4108 <serialEvent()>
    40b8:	b.n	402e <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    40ba:	cmp	r1, #0
    40bc:	bne.n	4020 <yield+0x8>
    40be:	cpsie	i
    40c0:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    40c2:	ldr	r3, [pc, #20]	; (40d8 <yield+0xc0>)
    40c4:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    40c6:	cmp	r1, #0
    40c8:	bne.n	4084 <yield+0x6c>
    40ca:	b.n	4082 <yield+0x6a>
    40cc:	.word	0x1fff1a89
    40d0:	.word	0x1fff1d9c
    40d4:	.word	0x1fff1da0
    40d8:	.word	0x1fff1d98

000040dc <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    40dc:	bx	lr
    40de:	nop

000040e0 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    40e0:	b.w	2560 <usb_serial_flush_input>

000040e4 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    40e4:	b.w	2514 <usb_serial_peekchar>

000040e8 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    40e8:	b.w	24cc <usb_serial_getchar>

000040ec <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    40ec:	b.w	2544 <usb_serial_available>

000040f0 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    40f0:	b.w	2700 <usb_serial_flush_output>

000040f4 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    40f4:	b.w	26b8 <usb_serial_write_buffer_free>

000040f8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    40f8:	mov	r0, r1
    40fa:	mov	r1, r2
    40fc:	b.w	2598 <usb_serial_write>

00004100 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4100:	mov	r0, r1
    4102:	b.w	26a0 <usb_serial_putchar>
    4106:	nop

00004108 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    4108:	bx	lr
    410a:	nop

0000410c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    410c:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    410e:	ldr	r2, [pc, #24]	; (4128 <Print::println()+0x1c>)
	return write(buf, 2);
    4110:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    4112:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    4114:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4116:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    4118:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    411a:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    411e:	movs	r2, #2
    4120:	blx	r3
}
    4122:	add	sp, #12
    4124:	ldr.w	pc, [sp], #4
    4128:	.word	0x00005950

0000412c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    412c:	push	{r4, r5, r6, r7, lr}
    412e:	mov	r7, r0
    4130:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    4132:	cmp	r2, #0
    4134:	beq.n	419e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    4136:	cmp	r2, #1
    4138:	it	eq
    413a:	moveq	r2, #10
	}


	if (n == 0) {
    413c:	cbz	r1, 4194 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    413e:	movs	r4, #33	; 0x21
    4140:	b.n	4144 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    4142:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    4144:	udiv	r5, r1, r2
    4148:	mls	r1, r2, r5, r1
    414c:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    414e:	cmp	r1, #9
    4150:	add.w	r1, r0, #48	; 0x30
    4154:	it	ls
    4156:	uxtbls	r0, r1
    4158:	add	r1, sp, #40	; 0x28
    415a:	it	hi
    415c:	addhi	r0, #55	; 0x37
    415e:	add	r1, r4
    4160:	it	hi
    4162:	uxtbhi	r0, r0
    4164:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    4168:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    416a:	mov	r1, r5
    416c:	cmp	r5, #0
    416e:	bne.n	4142 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    4170:	cbz	r3, 4180 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    4172:	subs	r4, #1
    4174:	uxtb	r4, r4
		buf[i] = '-';
    4176:	add	r3, sp, #40	; 0x28
    4178:	add	r3, r4
    417a:	movs	r2, #45	; 0x2d
    417c:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    4180:	ldr	r3, [r7, #0]
    4182:	add	r2, sp, #4
    4184:	adds	r1, r2, r4
    4186:	ldr	r3, [r3, #4]
    4188:	mov	r0, r7
    418a:	rsb	r2, r4, #34	; 0x22
    418e:	blx	r3
}
    4190:	add	sp, #44	; 0x2c
    4192:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    4194:	movs	r2, #48	; 0x30
    4196:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    419a:	movs	r4, #33	; 0x21
    419c:	b.n	4170 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    419e:	ldr	r3, [r0, #0]
    41a0:	uxtb	r1, r1
    41a2:	ldr	r3, [r3, #0]
    41a4:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    41a6:	add	sp, #44	; 0x2c
    41a8:	pop	{r4, r5, r6, r7, pc}
    41aa:	nop

000041ac <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    41ac:	cmp	r1, #0
		sign = '-';
		n = -n;
    41ae:	itte	lt
    41b0:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    41b2:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    41b4:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    41b6:	movs	r2, #10
    41b8:	b.w	412c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000041bc <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    41bc:	bx	lr
    41be:	nop

000041c0 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    41c0:	bx	lr
    41c2:	nop

000041c4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    41c4:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    41c6:	bl	7fc <setup>
	while (1) {
		loop();
    41ca:	bl	800 <loop>
		yield();
    41ce:	bl	4018 <yield>
    41d2:	b.n	41ca <main+0x6>

000041d4 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    41d4:	bx	lr
    41d6:	nop

000041d8 <operator new(unsigned int)>:
    41d8:	b.w	4c3c <malloc>

000041dc <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    41dc:	ldr	r2, [pc, #20]	; (41f4 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    41de:	ldr	r3, [pc, #24]	; (41f8 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    41e0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    41e2:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    41e4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    41e6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    41e8:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    41ea:	it	cc
    41ec:	addcc	r0, #64	; 0x40
    41ee:	subs	r0, r0, r3
}
    41f0:	bx	lr
    41f2:	nop
    41f4:	.word	0x1fff1a90
    41f8:	.word	0x1fff1a91

000041fc <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    41fc:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    41fe:	ldr	r3, [pc, #172]	; (42ac <uart4_status_isr+0xb0>)
    4200:	ldrb	r2, [r3, #4]
    4202:	lsls	r4, r2, #26
    4204:	bpl.n	4246 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    4206:	ldr	r0, [pc, #168]	; (42b0 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    4208:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    420a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    420c:	ldr	r1, [pc, #164]	; (42b4 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    420e:	adds	r3, #1
    4210:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4212:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    4214:	it	gt
    4216:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4218:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    421a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    421c:	beq.n	4226 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    421e:	ldr	r4, [pc, #152]	; (42b8 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    4220:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4222:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4224:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4226:	ldr	r2, [pc, #148]	; (42bc <uart4_status_isr+0xc0>)
    4228:	ldr	r1, [r2, #0]
    422a:	cbz	r1, 4246 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    422c:	ldr	r2, [pc, #144]	; (42c0 <uart4_status_isr+0xc4>)
    422e:	ldrb	r2, [r2, #0]
    4230:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4232:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    4234:	itet	cc
    4236:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    423a:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    423c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    423e:	cmp	r3, #39	; 0x27
    4240:	itt	gt
    4242:	movgt	r3, #1
    4244:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    4246:	ldr	r2, [pc, #100]	; (42ac <uart4_status_isr+0xb0>)
    4248:	ldrb	r3, [r2, #3]
    424a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    424c:	lsls	r0, r3, #24
    424e:	bmi.n	4274 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    4250:	lsls	r2, r3, #25
    4252:	bpl.n	4270 <uart4_status_isr+0x74>
    4254:	ldr	r3, [pc, #84]	; (42ac <uart4_status_isr+0xb0>)
    4256:	ldrb	r3, [r3, #4]
    4258:	lsls	r3, r3, #25
    425a:	bpl.n	4270 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    425c:	ldr	r3, [pc, #100]	; (42c4 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    425e:	ldr	r1, [pc, #104]	; (42c8 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4260:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    4262:	movs	r2, #0
    4264:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4266:	cbz	r3, 426a <uart4_status_isr+0x6e>
    4268:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    426a:	ldr	r3, [pc, #64]	; (42ac <uart4_status_isr+0xb0>)
    426c:	movs	r2, #44	; 0x2c
    426e:	strb	r2, [r3, #3]
	}
}
    4270:	pop	{r4, r5}
    4272:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    4274:	ldrb	r1, [r2, #4]
    4276:	lsls	r1, r1, #24
    4278:	bpl.n	4250 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    427a:	ldr	r1, [pc, #80]	; (42cc <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    427c:	ldr	r0, [pc, #64]	; (42c0 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    427e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4280:	ldrb	r1, [r0, #0]
    4282:	uxtb	r1, r1
		if (head == tail) {
    4284:	cmp	r4, r1
    4286:	beq.n	42a4 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    4288:	adds	r2, r1, #1
    428a:	cmp	r2, #39	; 0x27
    428c:	itt	hi
    428e:	movhi	r1, #0
    4290:	movhi	r2, r1
			n = tx_buffer[tail];
    4292:	ldr	r5, [pc, #60]	; (42d0 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    4294:	ldr	r4, [pc, #20]	; (42ac <uart4_status_isr+0xb0>)
    4296:	it	ls
    4298:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    429a:	ldrb	r2, [r5, r2]
    429c:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    429e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    42a0:	strb	r1, [r0, #0]
    42a2:	b.n	4250 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    42a4:	movs	r1, #108	; 0x6c
    42a6:	strb	r1, [r2, #3]
    42a8:	b.n	4250 <uart4_status_isr+0x54>
    42aa:	nop
    42ac:	.word	0x400ea000
    42b0:	.word	0x1fff1a90
    42b4:	.word	0x1fff1a91
    42b8:	.word	0x1fff1abc
    42bc:	.word	0x1fff1a8c
    42c0:	.word	0x1fff1afd
    42c4:	.word	0x1fff1b00
    42c8:	.word	0x1fff1afc
    42cc:	.word	0x1fff1b04
    42d0:	.word	0x1fff1a94

000042d4 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    42d4:	ldr	r2, [pc, #20]	; (42ec <serial2_available+0x18>)
	tail = rx_buffer_tail;
    42d6:	ldr	r3, [pc, #24]	; (42f0 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    42d8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    42da:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    42dc:	uxtb	r0, r0
	tail = rx_buffer_tail;
    42de:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    42e0:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    42e2:	it	cc
    42e4:	addcc	r0, #64	; 0x40
    42e6:	subs	r0, r0, r3
}
    42e8:	bx	lr
    42ea:	nop
    42ec:	.word	0x1fff1b78
    42f0:	.word	0x1fff1b0d

000042f4 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    42f4:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    42f6:	ldr	r3, [pc, #224]	; (43d8 <uart1_status_isr+0xe4>)
    42f8:	ldrb	r2, [r3, #4]
    42fa:	tst.w	r2, #48	; 0x30
    42fe:	beq.n	435a <uart1_status_isr+0x66>
		__disable_irq();
    4300:	cpsid	i
		avail = UART1_RCFIFO;
    4302:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    4304:	and.w	r2, r1, #255	; 0xff
    4308:	cmp	r1, #0
    430a:	beq.n	4388 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    430c:	cpsie	i
			head = rx_buffer_head;
    430e:	ldr	r7, [pc, #204]	; (43dc <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4310:	ldr	r1, [pc, #204]	; (43e0 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4312:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    4314:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4316:	ldr	r6, [pc, #204]	; (43e4 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    4318:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    431a:	uxtb	r0, r0
			tail = rx_buffer_tail;
    431c:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    431e:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    4320:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    4322:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    4324:	it	cs
    4326:	movcs	r3, #0
				if (newhead != tail) {
    4328:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    432a:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    432e:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4330:	itt	ne
    4332:	strbne	r1, [r6, r3]
    4334:	movne	r0, r3
				}
			} while (--avail > 0);
    4336:	ands.w	r2, r2, #255	; 0xff
    433a:	bne.n	431e <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    433c:	ldr	r3, [pc, #168]	; (43e8 <uart1_status_isr+0xf4>)
    433e:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4340:	uxtb	r2, r0
    4342:	strb	r2, [r7, #0]
			if (rts_pin) {
    4344:	cbz	r3, 435a <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    4346:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    4348:	itet	cc
    434a:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    434e:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    4350:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4352:	cmp	r0, #39	; 0x27
    4354:	itt	gt
    4356:	movgt	r2, #1
    4358:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    435a:	ldr	r1, [pc, #124]	; (43d8 <uart1_status_isr+0xe4>)
    435c:	ldrb	r2, [r1, #3]
    435e:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    4360:	lsls	r5, r2, #24
    4362:	bmi.n	4392 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    4364:	lsls	r2, r2, #25
    4366:	bpl.n	4384 <uart1_status_isr+0x90>
    4368:	ldr	r3, [pc, #108]	; (43d8 <uart1_status_isr+0xe4>)
    436a:	ldrb	r3, [r3, #4]
    436c:	lsls	r3, r3, #25
    436e:	bpl.n	4384 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4370:	ldr	r3, [pc, #120]	; (43ec <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    4372:	ldr	r1, [pc, #124]	; (43f0 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    4374:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    4376:	movs	r2, #0
    4378:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    437a:	cbz	r3, 437e <uart1_status_isr+0x8a>
    437c:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    437e:	ldr	r3, [pc, #88]	; (43d8 <uart1_status_isr+0xe4>)
    4380:	movs	r2, #60	; 0x3c
    4382:	strb	r2, [r3, #3]
	}
}
    4384:	pop	{r4, r5, r6, r7}
    4386:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    4388:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    438a:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    438c:	strb	r2, [r3, #17]
			__enable_irq();
    438e:	cpsie	i
    4390:	b.n	435a <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    4392:	ldrb	r3, [r1, #4]
    4394:	lsls	r4, r3, #24
    4396:	bpl.n	4364 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    4398:	ldr	r3, [pc, #88]	; (43f4 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    439a:	ldr	r6, [pc, #92]	; (43f8 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    439c:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    439e:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    43a0:	uxtb	r4, r4
		tail = tx_buffer_tail;
    43a2:	uxtb	r3, r3
		do {
			if (tail == head) break;
    43a4:	cmp	r4, r3
    43a6:	beq.n	43c6 <uart1_status_isr+0xd2>
    43a8:	ldr	r5, [pc, #80]	; (43fc <uart1_status_isr+0x108>)
    43aa:	b.n	43b0 <uart1_status_isr+0xbc>
    43ac:	cmp	r3, r4
    43ae:	beq.n	43c6 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    43b0:	adds	r3, #1
    43b2:	cmp	r3, #40	; 0x28
    43b4:	it	cs
    43b6:	movcs	r3, #0
			avail = UART1_S1;
    43b8:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    43ba:	ldrb	r0, [r5, r3]
    43bc:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    43be:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    43c0:	ldrb	r0, [r1, #20]
    43c2:	cmp	r0, #7
    43c4:	bls.n	43ac <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    43c6:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    43c8:	ldr	r1, [pc, #12]	; (43d8 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    43ca:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    43cc:	ldrb	r3, [r1, #4]
    43ce:	lsls	r0, r3, #24
    43d0:	itt	mi
    43d2:	movmi	r3, #124	; 0x7c
    43d4:	strbmi	r3, [r1, #3]
    43d6:	b.n	4364 <uart1_status_isr+0x70>
    43d8:	.word	0x4006b000
    43dc:	.word	0x1fff1b78
    43e0:	.word	0x1fff1b0d
    43e4:	.word	0x1fff1b38
    43e8:	.word	0x1fff1b08
    43ec:	.word	0x1fff1b7c
    43f0:	.word	0x1fff1b0c
    43f4:	.word	0x1fff1b80
    43f8:	.word	0x1fff1b79
    43fc:	.word	0x1fff1b10

00004400 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4400:	ldr	r2, [pc, #20]	; (4418 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    4402:	ldr	r3, [pc, #24]	; (441c <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4404:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4406:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4408:	uxtb	r0, r0
	tail = rx_buffer_tail;
    440a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    440c:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    440e:	it	cc
    4410:	addcc	r0, #64	; 0x40
    4412:	subs	r0, r0, r3
}
    4414:	bx	lr
    4416:	nop
    4418:	.word	0x1fff1b88
    441c:	.word	0x1fff1b89

00004420 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    4420:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    4422:	ldr	r3, [pc, #172]	; (44d0 <uart3_status_isr+0xb0>)
    4424:	ldrb	r2, [r3, #4]
    4426:	lsls	r4, r2, #26
    4428:	bpl.n	446a <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    442a:	ldr	r0, [pc, #168]	; (44d4 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    442c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    442e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4430:	ldr	r1, [pc, #164]	; (44d8 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    4432:	adds	r3, #1
    4434:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4436:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    4438:	it	gt
    443a:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    443c:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    443e:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4440:	beq.n	444a <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    4442:	ldr	r4, [pc, #152]	; (44dc <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    4444:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4446:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4448:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    444a:	ldr	r2, [pc, #148]	; (44e0 <uart3_status_isr+0xc0>)
    444c:	ldr	r1, [r2, #0]
    444e:	cbz	r1, 446a <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4450:	ldr	r2, [pc, #144]	; (44e4 <uart3_status_isr+0xc4>)
    4452:	ldrb	r2, [r2, #0]
    4454:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4456:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    4458:	itet	cc
    445a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    445e:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    4460:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4462:	cmp	r3, #39	; 0x27
    4464:	itt	gt
    4466:	movgt	r3, #1
    4468:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    446a:	ldr	r2, [pc, #100]	; (44d0 <uart3_status_isr+0xb0>)
    446c:	ldrb	r3, [r2, #3]
    446e:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    4470:	lsls	r0, r3, #24
    4472:	bmi.n	4498 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    4474:	lsls	r2, r3, #25
    4476:	bpl.n	4494 <uart3_status_isr+0x74>
    4478:	ldr	r3, [pc, #84]	; (44d0 <uart3_status_isr+0xb0>)
    447a:	ldrb	r3, [r3, #4]
    447c:	lsls	r3, r3, #25
    447e:	bpl.n	4494 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4480:	ldr	r3, [pc, #100]	; (44e8 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    4482:	ldr	r1, [pc, #104]	; (44ec <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4484:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    4486:	movs	r2, #0
    4488:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    448a:	cbz	r3, 448e <uart3_status_isr+0x6e>
    448c:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    448e:	ldr	r3, [pc, #64]	; (44d0 <uart3_status_isr+0xb0>)
    4490:	movs	r2, #44	; 0x2c
    4492:	strb	r2, [r3, #3]
	}
}
    4494:	pop	{r4, r5}
    4496:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    4498:	ldrb	r1, [r2, #4]
    449a:	lsls	r1, r1, #24
    449c:	bpl.n	4474 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    449e:	ldr	r1, [pc, #80]	; (44f0 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    44a0:	ldr	r0, [pc, #64]	; (44e4 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    44a2:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    44a4:	ldrb	r1, [r0, #0]
    44a6:	uxtb	r1, r1
		if (head == tail) {
    44a8:	cmp	r4, r1
    44aa:	beq.n	44c8 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    44ac:	adds	r2, r1, #1
    44ae:	cmp	r2, #39	; 0x27
    44b0:	itt	hi
    44b2:	movhi	r1, #0
    44b4:	movhi	r2, r1
			n = tx_buffer[tail];
    44b6:	ldr	r5, [pc, #60]	; (44f4 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    44b8:	ldr	r4, [pc, #20]	; (44d0 <uart3_status_isr+0xb0>)
    44ba:	it	ls
    44bc:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    44be:	ldrb	r2, [r5, r2]
    44c0:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    44c2:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    44c4:	strb	r1, [r0, #0]
    44c6:	b.n	4474 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    44c8:	movs	r1, #108	; 0x6c
    44ca:	strb	r1, [r2, #3]
    44cc:	b.n	4474 <uart3_status_isr+0x54>
    44ce:	nop
    44d0:	.word	0x4006d000
    44d4:	.word	0x1fff1b88
    44d8:	.word	0x1fff1b89
    44dc:	.word	0x1fff1bb4
    44e0:	.word	0x1fff1b84
    44e4:	.word	0x1fff1bf5
    44e8:	.word	0x1fff1bf8
    44ec:	.word	0x1fff1bf4
    44f0:	.word	0x1fff1bfc
    44f4:	.word	0x1fff1b8c

000044f8 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    44f8:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    44fa:	ldr	r4, [pc, #64]	; (453c <fault_isr+0x44>)
    44fc:	b.n	4510 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    44fe:	ldr	r3, [r4, #0]
    4500:	lsls	r1, r3, #21
    4502:	bmi.n	4520 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4504:	ldr	r3, [r4, #0]
    4506:	lsls	r2, r3, #20
    4508:	bmi.n	452a <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    450a:	ldr	r3, [r4, #0]
    450c:	lsls	r3, r3, #19
    450e:	bmi.n	4534 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    4510:	ldr	r3, [r4, #0]
    4512:	lsls	r0, r3, #13
    4514:	bpl.n	44fe <fault_isr+0x6>
    4516:	bl	3598 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    451a:	ldr	r3, [r4, #0]
    451c:	lsls	r1, r3, #21
    451e:	bpl.n	4504 <fault_isr+0xc>
    4520:	bl	460c <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4524:	ldr	r3, [r4, #0]
    4526:	lsls	r2, r3, #20
    4528:	bpl.n	450a <fault_isr+0x12>
    452a:	bl	42f4 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    452e:	ldr	r3, [r4, #0]
    4530:	lsls	r3, r3, #19
    4532:	bpl.n	4510 <fault_isr+0x18>
    4534:	bl	490c <uart2_status_isr>
    4538:	b.n	4510 <fault_isr+0x18>
    453a:	nop
    453c:	.word	0x40048034

00004540 <unused_isr>:
	}
}

void unused_isr(void)
{
    4540:	push	{r3, lr}
	fault_isr();
    4542:	bl	44f8 <fault_isr>
    4546:	nop

00004548 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    4548:	ldr	r3, [pc, #4]	; (4550 <startup_early_hook+0x8>)
    454a:	movs	r2, #16
    454c:	strh	r2, [r3, #0]
    454e:	bx	lr
    4550:	.word	0x40052000

00004554 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    4554:	bx	lr
    4556:	nop

00004558 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    4558:	ldr	r1, [pc, #36]	; (4580 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    455a:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    455c:	ldr	r3, [r1, #0]
	if (incr != 0) {
    455e:	cbz	r0, 456e <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    4560:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    4562:	add	r0, r3
    4564:	sub.w	r2, r2, #8192	; 0x2000
    4568:	cmp	r0, r2
    456a:	bcs.n	4572 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    456c:	str	r0, [r1, #0]
	}
	return prev;
    456e:	mov	r0, r3
}
    4570:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    4572:	bl	4be0 <__errno>
    4576:	movs	r3, #12
    4578:	str	r3, [r0, #0]
			return (void *)-1;
    457a:	mov.w	r0, #4294967295
    457e:	pop	{r3, pc}
    4580:	.word	0x1fff0c80

00004584 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    4584:	ldr	r2, [pc, #32]	; (45a8 <kinetis_hsrun_disable+0x24>)
    4586:	ldrb	r3, [r2, #0]
    4588:	cmp	r3, #128	; 0x80
    458a:	beq.n	4590 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    458c:	movs	r0, #0
}
    458e:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    4590:	ldr	r1, [pc, #24]	; (45ac <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    4592:	ldr	r3, [pc, #28]	; (45b0 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    4594:	ldr	r0, [pc, #28]	; (45b4 <kinetis_hsrun_disable+0x30>)
    4596:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    4598:	movs	r1, #0
    459a:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    459c:	ldrb	r3, [r2, #0]
    459e:	cmp	r3, #128	; 0x80
    45a0:	beq.n	459c <kinetis_hsrun_disable+0x18>
		return 1;
    45a2:	movs	r0, #1
    45a4:	bx	lr
    45a6:	nop
    45a8:	.word	0x4007e003
    45ac:	.word	0x40048044
    45b0:	.word	0x4007e001
    45b4:	.word	0x22280000

000045b8 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    45b8:	ldr	r2, [pc, #36]	; (45e0 <kinetis_hsrun_enable+0x28>)
    45ba:	ldrb	r3, [r2, #0]
    45bc:	cmp	r3, #1
    45be:	beq.n	45c4 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    45c0:	movs	r0, #0
}
    45c2:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    45c4:	add.w	r3, r3, #1073741824	; 0x40000000
    45c8:	add.w	r3, r3, #516096	; 0x7e000
    45cc:	movs	r1, #96	; 0x60
    45ce:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    45d0:	ldrb	r3, [r2, #0]
    45d2:	cmp	r3, #128	; 0x80
    45d4:	bne.n	45d0 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    45d6:	ldr	r3, [pc, #12]	; (45e4 <kinetis_hsrun_enable+0x2c>)
    45d8:	ldr	r2, [pc, #12]	; (45e8 <kinetis_hsrun_enable+0x30>)
    45da:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    45dc:	movs	r0, #1
    45de:	bx	lr
    45e0:	.word	0x4007e003
    45e4:	.word	0x40048044
    45e8:	.word	0x02060000

000045ec <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    45ec:	ldr	r2, [pc, #20]	; (4604 <serial_available+0x18>)
	tail = rx_buffer_tail;
    45ee:	ldr	r3, [pc, #24]	; (4608 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    45f0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    45f2:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    45f4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    45f6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    45f8:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    45fa:	it	cc
    45fc:	addcc	r0, #64	; 0x40
    45fe:	subs	r0, r0, r3
}
    4600:	bx	lr
    4602:	nop
    4604:	.word	0x1fff1c04
    4608:	.word	0x1fff1c05

0000460c <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    460c:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    460e:	ldr	r3, [pc, #224]	; (46f0 <uart0_status_isr+0xe4>)
    4610:	ldrb	r2, [r3, #4]
    4612:	tst.w	r2, #48	; 0x30
    4616:	beq.n	4672 <uart0_status_isr+0x66>
		__disable_irq();
    4618:	cpsid	i
		avail = UART0_RCFIFO;
    461a:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    461c:	and.w	r2, r1, #255	; 0xff
    4620:	cmp	r1, #0
    4622:	beq.n	46a0 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    4624:	cpsie	i
			head = rx_buffer_head;
    4626:	ldr	r7, [pc, #204]	; (46f4 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4628:	ldr	r1, [pc, #204]	; (46f8 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    462a:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    462c:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    462e:	ldr	r6, [pc, #204]	; (46fc <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4630:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4632:	uxtb	r0, r0
			tail = rx_buffer_tail;
    4634:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    4636:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4638:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    463a:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    463c:	it	cs
    463e:	movcs	r3, #0
				if (newhead != tail) {
    4640:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    4642:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4646:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4648:	itt	ne
    464a:	strbne	r1, [r6, r3]
    464c:	movne	r0, r3
				}
			} while (--avail > 0);
    464e:	ands.w	r2, r2, #255	; 0xff
    4652:	bne.n	4636 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    4654:	ldr	r3, [pc, #168]	; (4700 <uart0_status_isr+0xf4>)
    4656:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4658:	uxtb	r2, r0
    465a:	strb	r2, [r7, #0]
			if (rts_pin) {
    465c:	cbz	r3, 4672 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    465e:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4660:	itet	cc
    4662:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    4666:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4668:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    466a:	cmp	r0, #39	; 0x27
    466c:	itt	gt
    466e:	movgt	r2, #1
    4670:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    4672:	ldr	r1, [pc, #124]	; (46f0 <uart0_status_isr+0xe4>)
    4674:	ldrb	r2, [r1, #3]
    4676:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4678:	lsls	r5, r2, #24
    467a:	bmi.n	46aa <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    467c:	lsls	r2, r2, #25
    467e:	bpl.n	469c <uart0_status_isr+0x90>
    4680:	ldr	r3, [pc, #108]	; (46f0 <uart0_status_isr+0xe4>)
    4682:	ldrb	r3, [r3, #4]
    4684:	lsls	r3, r3, #25
    4686:	bpl.n	469c <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4688:	ldr	r3, [pc, #120]	; (4704 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    468a:	ldr	r1, [pc, #124]	; (4708 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    468c:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    468e:	movs	r2, #0
    4690:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4692:	cbz	r3, 4696 <uart0_status_isr+0x8a>
    4694:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    4696:	ldr	r3, [pc, #88]	; (46f0 <uart0_status_isr+0xe4>)
    4698:	movs	r2, #60	; 0x3c
    469a:	strb	r2, [r3, #3]
	}
}
    469c:	pop	{r4, r5, r6, r7}
    469e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    46a0:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    46a2:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    46a4:	strb	r2, [r3, #17]
			__enable_irq();
    46a6:	cpsie	i
    46a8:	b.n	4672 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    46aa:	ldrb	r3, [r1, #4]
    46ac:	lsls	r4, r3, #24
    46ae:	bpl.n	467c <uart0_status_isr+0x70>
		head = tx_buffer_head;
    46b0:	ldr	r3, [pc, #88]	; (470c <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    46b2:	ldr	r6, [pc, #92]	; (4710 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    46b4:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    46b6:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    46b8:	uxtb	r4, r4
		tail = tx_buffer_tail;
    46ba:	uxtb	r3, r3
		do {
			if (tail == head) break;
    46bc:	cmp	r4, r3
    46be:	beq.n	46de <uart0_status_isr+0xd2>
    46c0:	ldr	r5, [pc, #80]	; (4714 <uart0_status_isr+0x108>)
    46c2:	b.n	46c8 <uart0_status_isr+0xbc>
    46c4:	cmp	r3, r4
    46c6:	beq.n	46de <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    46c8:	adds	r3, #1
    46ca:	cmp	r3, #64	; 0x40
    46cc:	it	cs
    46ce:	movcs	r3, #0
			avail = UART0_S1;
    46d0:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    46d2:	ldrb	r0, [r5, r3]
    46d4:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    46d6:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    46d8:	ldrb	r0, [r1, #20]
    46da:	cmp	r0, #7
    46dc:	bls.n	46c4 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    46de:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    46e0:	ldr	r1, [pc, #12]	; (46f0 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    46e2:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    46e4:	ldrb	r3, [r1, #4]
    46e6:	lsls	r0, r3, #24
    46e8:	itt	mi
    46ea:	movmi	r3, #124	; 0x7c
    46ec:	strbmi	r3, [r1, #3]
    46ee:	b.n	467c <uart0_status_isr+0x70>
    46f0:	.word	0x4006a000
    46f4:	.word	0x1fff1c04
    46f8:	.word	0x1fff1c05
    46fc:	.word	0x1fff1c48
    4700:	.word	0x1fff1c00
    4704:	.word	0x1fff1c8c
    4708:	.word	0x1fff1c88
    470c:	.word	0x1fff1c90
    4710:	.word	0x1fff1c89
    4714:	.word	0x1fff1c08

00004718 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4718:	ldr	r2, [pc, #20]	; (4730 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    471a:	ldr	r3, [pc, #24]	; (4734 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    471c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    471e:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4720:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4722:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4724:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    4726:	it	cc
    4728:	addcc	r0, #64	; 0x40
    472a:	subs	r0, r0, r3
}
    472c:	bx	lr
    472e:	nop
    4730:	.word	0x1fff1c98
    4734:	.word	0x1fff1c99

00004738 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    4738:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    473a:	ldr	r3, [pc, #176]	; (47ec <lpuart0_status_isr+0xb4>)
    473c:	ldr	r2, [r3, #4]
    473e:	lsls	r4, r2, #10
    4740:	bpl.n	4782 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4742:	ldr	r0, [pc, #172]	; (47f0 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    4744:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    4746:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4748:	ldr	r1, [pc, #168]	; (47f4 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    474a:	adds	r3, #1
    474c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    474e:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4750:	it	gt
    4752:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4754:	cmp	r3, r1
    4756:	beq.n	4762 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    4758:	ldr	r4, [pc, #156]	; (47f8 <lpuart0_status_isr+0xc0>)
    475a:	uxtb	r2, r2
			rx_buffer_head = head;
    475c:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    475e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4760:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4762:	ldr	r2, [pc, #152]	; (47fc <lpuart0_status_isr+0xc4>)
    4764:	ldr	r1, [r2, #0]
    4766:	cbz	r1, 4782 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4768:	ldr	r2, [pc, #148]	; (4800 <lpuart0_status_isr+0xc8>)
    476a:	ldrb	r2, [r2, #0]
    476c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    476e:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    4770:	itet	cc
    4772:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    4776:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    4778:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    477a:	cmp	r3, #39	; 0x27
    477c:	itt	gt
    477e:	movgt	r3, #1
    4780:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    4782:	ldr	r2, [pc, #104]	; (47ec <lpuart0_status_isr+0xb4>)
    4784:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    4786:	lsls	r0, r3, #8
    4788:	bpl.n	4790 <lpuart0_status_isr+0x58>
    478a:	ldr	r2, [r2, #4]
    478c:	lsls	r1, r2, #8
    478e:	bmi.n	47b4 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    4790:	lsls	r2, r3, #9
    4792:	bpl.n	47b0 <lpuart0_status_isr+0x78>
    4794:	ldr	r3, [pc, #84]	; (47ec <lpuart0_status_isr+0xb4>)
    4796:	ldr	r3, [r3, #4]
    4798:	lsls	r3, r3, #9
    479a:	bpl.n	47b0 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    479c:	ldr	r3, [pc, #100]	; (4804 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    479e:	ldr	r1, [pc, #104]	; (4808 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    47a0:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    47a2:	movs	r2, #0
    47a4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    47a6:	cbz	r3, 47aa <lpuart0_status_isr+0x72>
    47a8:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    47aa:	ldr	r3, [pc, #96]	; (480c <lpuart0_status_isr+0xd4>)
    47ac:	movs	r2, #0
    47ae:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    47b0:	pop	{r4, r5}
    47b2:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    47b4:	ldr	r2, [pc, #88]	; (4810 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    47b6:	ldr	r1, [pc, #72]	; (4800 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    47b8:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    47ba:	ldrb	r2, [r1, #0]
    47bc:	uxtb	r2, r2
		if (head == tail) {
    47be:	cmp	r0, r2
    47c0:	beq.n	47de <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    47c2:	adds	r2, #1
    47c4:	cmp	r2, #39	; 0x27
    47c6:	itt	hi
    47c8:	movhi	r0, #0
    47ca:	movhi	r2, r0
			n = tx_buffer[tail];
    47cc:	ldr	r5, [pc, #68]	; (4814 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    47ce:	ldr	r4, [pc, #28]	; (47ec <lpuart0_status_isr+0xb4>)
    47d0:	it	ls
    47d2:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    47d4:	ldrb	r2, [r5, r2]
    47d6:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    47d8:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    47da:	strb	r0, [r1, #0]
    47dc:	b.n	4790 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    47de:	ldr	r0, [pc, #56]	; (4818 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    47e0:	ldr	r2, [pc, #40]	; (480c <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    47e2:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    47e4:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    47e6:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    47e8:	str	r1, [r2, #0]
    47ea:	b.n	4790 <lpuart0_status_isr+0x58>
    47ec:	.word	0x400c4000
    47f0:	.word	0x1fff1c98
    47f4:	.word	0x1fff1c99
    47f8:	.word	0x1fff1cc4
    47fc:	.word	0x1fff1c94
    4800:	.word	0x1fff1d05
    4804:	.word	0x1fff1d08
    4808:	.word	0x1fff1d04
    480c:	.word	0x43880158
    4810:	.word	0x1fff1d0c
    4814:	.word	0x1fff1c9c
    4818:	.word	0x4388015c

0000481c <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    481c:	push	{r4, lr}
    481e:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    4820:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    4822:	bl	4584 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    4826:	ldr	r2, [pc, #96]	; (4888 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4828:	ldr	r3, [pc, #96]	; (488c <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    482a:	ldr	r1, [pc, #100]	; (4890 <usb_init_serialnumber+0x74>)
    482c:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    482e:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    4830:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4832:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4834:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    4836:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4838:	ldrb	r3, [r2, #0]
    483a:	lsls	r3, r3, #24
    483c:	bpl.n	4838 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    483e:	ldr	r3, [pc, #84]	; (4894 <usb_init_serialnumber+0x78>)
    4840:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    4842:	bl	45b8 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    4846:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4848:	ldr	r3, [pc, #76]	; (4898 <usb_init_serialnumber+0x7c>)
    484a:	cmp	r4, r3
    484c:	itt	ls
    484e:	addls.w	r4, r4, r4, lsl #2
    4852:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    4854:	mov	r0, r4
    4856:	ldr	r4, [pc, #68]	; (489c <usb_init_serialnumber+0x80>)
    4858:	add	r1, sp, #4
    485a:	movs	r2, #10
    485c:	bl	48a0 <ultoa>
    4860:	add	r1, sp, #4
    4862:	mov	r0, r4
	for (i=0; i<10; i++) {
    4864:	movs	r3, #0
		char c = buf[i];
    4866:	ldrb.w	r2, [r1], #1
    486a:	adds	r3, #1
		if (!c) break;
    486c:	cbz	r2, 487e <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    486e:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4870:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    4874:	bne.n	4866 <usb_init_serialnumber+0x4a>
    4876:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4878:	strb	r3, [r4, #0]
}
    487a:	add	sp, #16
    487c:	pop	{r4, pc}
    487e:	lsls	r3, r3, #1
    4880:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4882:	strb	r3, [r4, #0]
}
    4884:	add	sp, #16
    4886:	pop	{r4, pc}
    4888:	.word	0x40020004
    488c:	.word	0x40020000
    4890:	.word	0x41070000
    4894:	.word	0x4002000c
    4898:	.word	0x0098967f
    489c:	.word	0x1fff0d64

000048a0 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    48a0:	push	{r4, r5, r6, r7}
    48a2:	subs	r5, r1, #1
    48a4:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    48a6:	movs	r4, #0
    48a8:	b.n	48ac <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    48aa:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    48ac:	udiv	r3, r0, r2
    48b0:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    48b4:	cmp	r0, #9
    48b6:	add.w	r7, r0, #48	; 0x30
    48ba:	itet	hi
    48bc:	addhi	r0, #55	; 0x37
    48be:	uxtbls	r0, r7
    48c0:	uxtbhi	r0, r0
    48c2:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    48c6:	mov	r0, r3
    48c8:	cmp	r3, #0
    48ca:	bne.n	48aa <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    48cc:	adds	r2, r1, r4
    48ce:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    48d0:	cbz	r4, 48e6 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    48d2:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    48d4:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    48d8:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    48da:	adds	r3, #1
    48dc:	subs	r0, r4, r3
    48de:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    48e0:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    48e4:	blt.n	48d2 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    48e6:	mov	r0, r1
    48e8:	pop	{r4, r5, r6, r7}
    48ea:	bx	lr

000048ec <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    48ec:	ldr	r2, [pc, #20]	; (4904 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    48ee:	ldr	r3, [pc, #24]	; (4908 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    48f0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    48f2:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    48f4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    48f6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    48f8:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    48fa:	it	cc
    48fc:	addcc	r0, #64	; 0x40
    48fe:	subs	r0, r0, r3
}
    4900:	bx	lr
    4902:	nop
    4904:	.word	0x1fff1d14
    4908:	.word	0x1fff1d15

0000490c <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    490c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    490e:	ldr	r3, [pc, #172]	; (49bc <uart2_status_isr+0xb0>)
    4910:	ldrb	r2, [r3, #4]
    4912:	lsls	r4, r2, #26
    4914:	bpl.n	4956 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4916:	ldr	r0, [pc, #168]	; (49c0 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    4918:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    491a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    491c:	ldr	r1, [pc, #164]	; (49c4 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    491e:	adds	r3, #1
    4920:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4922:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4924:	it	gt
    4926:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4928:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    492a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    492c:	beq.n	4936 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    492e:	ldr	r4, [pc, #152]	; (49c8 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    4930:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4932:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4934:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4936:	ldr	r2, [pc, #148]	; (49cc <uart2_status_isr+0xc0>)
    4938:	ldr	r1, [r2, #0]
    493a:	cbz	r1, 4956 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    493c:	ldr	r2, [pc, #144]	; (49d0 <uart2_status_isr+0xc4>)
    493e:	ldrb	r2, [r2, #0]
    4940:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4942:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4944:	itet	cc
    4946:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    494a:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    494c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    494e:	cmp	r3, #39	; 0x27
    4950:	itt	gt
    4952:	movgt	r3, #1
    4954:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    4956:	ldr	r2, [pc, #100]	; (49bc <uart2_status_isr+0xb0>)
    4958:	ldrb	r3, [r2, #3]
    495a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    495c:	lsls	r0, r3, #24
    495e:	bmi.n	4984 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    4960:	lsls	r2, r3, #25
    4962:	bpl.n	4980 <uart2_status_isr+0x74>
    4964:	ldr	r3, [pc, #84]	; (49bc <uart2_status_isr+0xb0>)
    4966:	ldrb	r3, [r3, #4]
    4968:	lsls	r3, r3, #25
    496a:	bpl.n	4980 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    496c:	ldr	r3, [pc, #100]	; (49d4 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    496e:	ldr	r1, [pc, #104]	; (49d8 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4970:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4972:	movs	r2, #0
    4974:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4976:	cbz	r3, 497a <uart2_status_isr+0x6e>
    4978:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    497a:	ldr	r3, [pc, #64]	; (49bc <uart2_status_isr+0xb0>)
    497c:	movs	r2, #44	; 0x2c
    497e:	strb	r2, [r3, #3]
	}
}
    4980:	pop	{r4, r5}
    4982:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4984:	ldrb	r1, [r2, #4]
    4986:	lsls	r1, r1, #24
    4988:	bpl.n	4960 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    498a:	ldr	r1, [pc, #80]	; (49dc <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    498c:	ldr	r0, [pc, #64]	; (49d0 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    498e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4990:	ldrb	r1, [r0, #0]
    4992:	uxtb	r1, r1
		if (head == tail) {
    4994:	cmp	r4, r1
    4996:	beq.n	49b4 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    4998:	adds	r2, r1, #1
    499a:	cmp	r2, #39	; 0x27
    499c:	itt	hi
    499e:	movhi	r1, #0
    49a0:	movhi	r2, r1
			n = tx_buffer[tail];
    49a2:	ldr	r5, [pc, #60]	; (49e0 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    49a4:	ldr	r4, [pc, #20]	; (49bc <uart2_status_isr+0xb0>)
    49a6:	it	ls
    49a8:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    49aa:	ldrb	r2, [r5, r2]
    49ac:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    49ae:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    49b0:	strb	r1, [r0, #0]
    49b2:	b.n	4960 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    49b4:	movs	r1, #108	; 0x6c
    49b6:	strb	r1, [r2, #3]
    49b8:	b.n	4960 <uart2_status_isr+0x54>
    49ba:	nop
    49bc:	.word	0x4006c000
    49c0:	.word	0x1fff1d14
    49c4:	.word	0x1fff1d15
    49c8:	.word	0x1fff1d40
    49cc:	.word	0x1fff1d10
    49d0:	.word	0x1fff1d81
    49d4:	.word	0x1fff1d84
    49d8:	.word	0x1fff1d80
    49dc:	.word	0x1fff1d88
    49e0:	.word	0x1fff1d18

000049e4 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    49e4:	bx	lr
    49e6:	nop

000049e8 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    49e8:	bx	lr
    49ea:	nop

000049ec <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    49ec:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    49ee:	mrs	r2, PRIMASK
		__disable_irq();
    49f2:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    49f4:	ldrb	r3, [r0, #29]
    49f6:	cbnz	r3, 4a06 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    49f8:	ldrb	r1, [r0, #28]
    49fa:	cmp	r1, #1
    49fc:	beq.n	4a10 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    49fe:	cmp	r1, #3
    4a00:	beq.n	4a24 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    4a02:	movs	r3, #1
    4a04:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4a06:	cbnz	r2, 4a0a <EventResponder::triggerEventNotImmediate()+0x1e>
    4a08:	cpsie	i
	}
	enableInterrupts(irq);
}
    4a0a:	ldr.w	r4, [sp], #4
    4a0e:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4a10:	ldr	r4, [pc, #68]	; (4a58 <EventResponder::triggerEventNotImmediate()+0x6c>)
    4a12:	ldr	r1, [r4, #0]
    4a14:	cbz	r1, 4a40 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    4a16:	ldr	r1, [pc, #68]	; (4a5c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    4a18:	str	r3, [r0, #20]
				_prev = lastYield;
    4a1a:	ldr	r3, [r1, #0]
    4a1c:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    4a1e:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    4a20:	str	r0, [r3, #20]
    4a22:	b.n	4a02 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    4a24:	ldr	r4, [pc, #56]	; (4a60 <EventResponder::triggerEventNotImmediate()+0x74>)
    4a26:	ldr	r1, [r4, #0]
    4a28:	cbz	r1, 4a4c <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4a2a:	ldr	r1, [pc, #56]	; (4a64 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    4a2c:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    4a2e:	ldr	r3, [r1, #0]
    4a30:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    4a32:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    4a34:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    4a36:	ldr	r3, [pc, #48]	; (4a68 <EventResponder::triggerEventNotImmediate()+0x7c>)
    4a38:	mov.w	r1, #268435456	; 0x10000000
    4a3c:	str	r1, [r3, #0]
    4a3e:	b.n	4a02 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    4a40:	ldr	r3, [pc, #24]	; (4a5c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    4a42:	str	r1, [r0, #20]
				_prev = nullptr;
    4a44:	str	r1, [r0, #24]
				firstYield = this;
    4a46:	str	r0, [r4, #0]
				lastYield = this;
    4a48:	str	r0, [r3, #0]
    4a4a:	b.n	4a02 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    4a4c:	ldr	r3, [pc, #20]	; (4a64 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    4a4e:	str	r1, [r0, #20]
				_prev = nullptr;
    4a50:	str	r1, [r0, #24]
				firstInterrupt = this;
    4a52:	str	r0, [r4, #0]
				lastInterrupt = this;
    4a54:	str	r0, [r3, #0]
    4a56:	b.n	4a36 <EventResponder::triggerEventNotImmediate()+0x4a>
    4a58:	.word	0x1fff1d9c
    4a5c:	.word	0x1fff1d98
    4a60:	.word	0x1fff1d8c
    4a64:	.word	0x1fff1d90
    4a68:	.word	0xe000ed04

00004a6c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    4a6c:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4a6e:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4a70:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4a72:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4a74:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    4a76:	beq.n	4a80 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    4a78:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4a7c:	b.w	49ec <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4a80:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    4a82:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4a86:	bx	r3

00004a88 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    4a88:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4a8a:	mrs	r2, PRIMASK
		__disable_irq();
    4a8e:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4a90:	ldr	r4, [pc, #48]	; (4ac4 <EventResponder::runFromInterrupt()+0x3c>)
    4a92:	ldr	r0, [r4, #0]
		if (first) {
    4a94:	cbz	r0, 4ab8 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4a96:	ldr	r6, [pc, #48]	; (4ac8 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4a98:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    4a9a:	ldr	r3, [r0, #20]
    4a9c:	str	r3, [r4, #0]
			if (firstInterrupt) {
    4a9e:	cbz	r3, 4abe <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4aa0:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4aa2:	cbnz	r2, 4aa6 <EventResponder::runFromInterrupt()+0x1e>
    4aa4:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    4aa6:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4aa8:	ldr	r3, [r0, #8]
    4aaa:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4aac:	mrs	r2, PRIMASK
		__disable_irq();
    4ab0:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4ab2:	ldr	r0, [r4, #0]
		if (first) {
    4ab4:	cmp	r0, #0
    4ab6:	bne.n	4a9a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4ab8:	cbnz	r2, 4abc <EventResponder::runFromInterrupt()+0x34>
    4aba:	cpsie	i
    4abc:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4abe:	str	r3, [r6, #0]
    4ac0:	b.n	4aa2 <EventResponder::runFromInterrupt()+0x1a>
    4ac2:	nop
    4ac4:	.word	0x1fff1d8c
    4ac8:	.word	0x1fff1d90

00004acc <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    4acc:	b.w	4a88 <EventResponder::runFromInterrupt()>

00004ad0 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    4ad0:	ldr	r2, [pc, #96]	; (4b34 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    4ad2:	push	{r4, r5}
	if (listActive == nullptr) {
    4ad4:	ldr	r4, [r2, #0]
    4ad6:	cmp	r4, #0
    4ad8:	beq.n	4b2a <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    4ada:	ldr	r3, [r0, #0]
    4adc:	ldr	r1, [r4, #0]
    4ade:	cmp	r3, r1
    4ae0:	bcs.n	4b00 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4ae2:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4ae4:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    4ae6:	str	r4, [r0, #8]
		_prev = nullptr;
    4ae8:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4aea:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4aec:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    4aee:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4af0:	movs	r3, #2
    4af2:	strb	r3, [r0, #20]
}
    4af4:	pop	{r4, r5}
    4af6:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4af8:	ldr	r1, [r2, #0]
    4afa:	cmp	r3, r1
    4afc:	mov	r4, r2
    4afe:	bcc.n	4b12 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4b00:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    4b02:	subs	r3, r3, r1
    4b04:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4b06:	cmp	r2, #0
    4b08:	bne.n	4af8 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    4b0a:	str	r2, [r0, #8]
		_prev = timer;
    4b0c:	str	r4, [r0, #12]
		timer->_next = this;
    4b0e:	str	r0, [r4, #8]
    4b10:	b.n	4af0 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    4b12:	ldr	r2, [r2, #12]
    4b14:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    4b16:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    4b18:	str	r0, [r4, #12]
				_prev->_next = this;
    4b1a:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    4b1c:	subs	r3, r1, r3
				_state = TimerActive;
    4b1e:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    4b20:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    4b22:	str	r3, [r4, #0]
				_state = TimerActive;
    4b24:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    4b26:	pop	{r4, r5}
    4b28:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    4b2a:	str	r4, [r0, #8]
		_prev = nullptr;
    4b2c:	str	r4, [r0, #12]
		listActive = this;
    4b2e:	str	r0, [r2, #0]
    4b30:	b.n	4af0 <MillisTimer::addToActiveList()+0x20>
    4b32:	nop
    4b34:	.word	0x1fff1d94

00004b38 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    4b38:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    4b3a:	ldr	r6, [pc, #136]	; (4bc4 <MillisTimer::runFromTimer()+0x8c>)
    4b3c:	ldr	r4, [r6, #0]
	while (timer) {
    4b3e:	cbz	r4, 4b8c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4b40:	ldr	r3, [r4, #0]
    4b42:	cmp	r3, #0
    4b44:	bne.n	4bbc <MillisTimer::runFromTimer()+0x84>
    4b46:	ldr	r7, [pc, #128]	; (4bc8 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    4b48:	mov	r5, r3
    4b4a:	b.n	4b56 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    4b4c:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4b4e:	cbz	r4, 4b8c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4b50:	ldr	r3, [r4, #0]
    4b52:	cmp	r3, #0
    4b54:	bne.n	4bbc <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    4b56:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    4b58:	cbz	r3, 4b5c <MillisTimer::runFromTimer()+0x24>
    4b5a:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    4b5c:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    4b5e:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4b60:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    4b62:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4b64:	ldr	r3, [r3, #0]
    4b66:	cmp	r3, r7
    4b68:	bne.n	4bae <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4b6a:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4b6c:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4b6e:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4b70:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    4b72:	beq.n	4bb6 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4b74:	bl	49ec <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    4b78:	ldr	r3, [r4, #4]
    4b7a:	cmp	r3, #0
    4b7c:	beq.n	4b4c <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    4b7e:	str	r3, [r4, #0]
				timer->addToActiveList();
    4b80:	mov	r0, r4
    4b82:	bl	4ad0 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    4b86:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4b88:	cmp	r4, #0
    4b8a:	bne.n	4b50 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4b8c:	mrs	r3, PRIMASK
		__disable_irq();
    4b90:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4b92:	ldr	r2, [pc, #56]	; (4bcc <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4b94:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4b96:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4b98:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    4b9a:	cbnz	r3, 4b9e <MillisTimer::runFromTimer()+0x66>
    4b9c:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    4b9e:	cbz	r0, 4bac <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4ba0:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    4ba2:	bl	4ad0 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    4ba6:	mov	r0, r4
    4ba8:	cmp	r0, #0
    4baa:	bne.n	4ba0 <MillisTimer::runFromTimer()+0x68>
    4bac:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4bae:	mov	r2, r4
    4bb0:	movs	r1, #0
    4bb2:	blx	r3
    4bb4:	b.n	4b78 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4bb6:	ldr	r3, [r0, #8]
    4bb8:	blx	r3
    4bba:	b.n	4b78 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    4bbc:	subs	r3, #1
    4bbe:	str	r3, [r4, #0]
			break;
    4bc0:	b.n	4b8c <MillisTimer::runFromTimer()+0x54>
    4bc2:	nop
    4bc4:	.word	0x1fff1d94
    4bc8:	.word	0x00004a6d
    4bcc:	.word	0x1fff1da4

00004bd0 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    4bd0:	ldr	r2, [pc, #8]	; (4bdc <systick_isr+0xc>)
    4bd2:	ldr	r3, [r2, #0]
    4bd4:	adds	r3, #1
    4bd6:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4bd8:	b.w	4b38 <MillisTimer::runFromTimer()>
    4bdc:	.word	0x1fff192c

00004be0 <__errno>:
    4be0:	ldr	r3, [pc, #4]	; (4be8 <__errno+0x8>)
    4be2:	ldr	r0, [r3, #0]
    4be4:	bx	lr
    4be6:	nop
    4be8:	.word	0x1fff11a8

00004bec <__libc_init_array>:
    4bec:	push	{r4, r5, r6, lr}
    4bee:	ldr	r6, [pc, #60]	; (4c2c <__libc_init_array+0x40>)
    4bf0:	ldr	r5, [pc, #60]	; (4c30 <__libc_init_array+0x44>)
    4bf2:	subs	r6, r6, r5
    4bf4:	asrs	r6, r6, #2
    4bf6:	it	ne
    4bf8:	movne	r4, #0
    4bfa:	beq.n	4c08 <__libc_init_array+0x1c>
    4bfc:	adds	r4, #1
    4bfe:	ldr.w	r3, [r5], #4
    4c02:	blx	r3
    4c04:	cmp	r6, r4
    4c06:	bne.n	4bfc <__libc_init_array+0x10>
    4c08:	ldr	r6, [pc, #40]	; (4c34 <__libc_init_array+0x48>)
    4c0a:	ldr	r5, [pc, #44]	; (4c38 <__libc_init_array+0x4c>)
    4c0c:	subs	r6, r6, r5
    4c0e:	bl	59b4 <_init>
    4c12:	asrs	r6, r6, #2
    4c14:	it	ne
    4c16:	movne	r4, #0
    4c18:	beq.n	4c28 <__libc_init_array+0x3c>
    4c1a:	adds	r4, #1
    4c1c:	ldr.w	r3, [r5], #4
    4c20:	blx	r3
    4c22:	cmp	r6, r4
    4c24:	bne.n	4c1a <__libc_init_array+0x2e>
    4c26:	pop	{r4, r5, r6, pc}
    4c28:	pop	{r4, r5, r6, pc}
    4c2a:	nop
    4c2c:	.word	0x000059c0
    4c30:	.word	0x000059c0
    4c34:	.word	0x000059cc
    4c38:	.word	0x000059c0

00004c3c <malloc>:
    4c3c:	ldr	r3, [pc, #8]	; (4c48 <malloc+0xc>)
    4c3e:	mov	r1, r0
    4c40:	ldr	r0, [r3, #0]
    4c42:	b.w	4c4c <_malloc_r>
    4c46:	nop
    4c48:	.word	0x1fff11a8

00004c4c <_malloc_r>:
    4c4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c50:	add.w	r5, r1, #11
    4c54:	cmp	r5, #22
    4c56:	sub	sp, #12
    4c58:	mov	r6, r0
    4c5a:	bls.w	4d9c <_malloc_r+0x150>
    4c5e:	bics.w	r5, r5, #7
    4c62:	bmi.w	4de4 <_malloc_r+0x198>
    4c66:	cmp	r1, r5
    4c68:	bhi.w	4de4 <_malloc_r+0x198>
    4c6c:	bl	51bc <__malloc_lock>
    4c70:	cmp.w	r5, #504	; 0x1f8
    4c74:	bcc.w	51b0 <_malloc_r+0x564>
    4c78:	lsrs	r3, r5, #9
    4c7a:	beq.w	4df2 <_malloc_r+0x1a6>
    4c7e:	cmp	r3, #4
    4c80:	bhi.w	4f8a <_malloc_r+0x33e>
    4c84:	lsrs	r0, r5, #6
    4c86:	add.w	lr, r0, #57	; 0x39
    4c8a:	mov.w	r3, lr, lsl #1
    4c8e:	adds	r0, #56	; 0x38
    4c90:	ldr	r7, [pc, #784]	; (4fa4 <_malloc_r+0x358>)
    4c92:	add.w	r3, r7, r3, lsl #2
    4c96:	sub.w	r1, r3, #8
    4c9a:	ldr	r4, [r3, #4]
    4c9c:	cmp	r1, r4
    4c9e:	bne.n	4cb0 <_malloc_r+0x64>
    4ca0:	b.n	4dfc <_malloc_r+0x1b0>
    4ca2:	cmp	r2, #0
    4ca4:	bge.w	4e00 <_malloc_r+0x1b4>
    4ca8:	ldr	r4, [r4, #12]
    4caa:	cmp	r1, r4
    4cac:	beq.w	4dfc <_malloc_r+0x1b0>
    4cb0:	ldr	r3, [r4, #4]
    4cb2:	bic.w	r3, r3, #3
    4cb6:	subs	r2, r3, r5
    4cb8:	cmp	r2, #15
    4cba:	ble.n	4ca2 <_malloc_r+0x56>
    4cbc:	ldr	r1, [pc, #740]	; (4fa4 <_malloc_r+0x358>)
    4cbe:	ldr	r4, [r7, #16]
    4cc0:	add.w	lr, r1, #8
    4cc4:	cmp	r4, lr
    4cc6:	beq.w	5030 <_malloc_r+0x3e4>
    4cca:	ldr	r3, [r4, #4]
    4ccc:	bic.w	r3, r3, #3
    4cd0:	subs	r2, r3, r5
    4cd2:	cmp	r2, #15
    4cd4:	bgt.w	500a <_malloc_r+0x3be>
    4cd8:	cmp	r2, #0
    4cda:	str.w	lr, [r1, #20]
    4cde:	str.w	lr, [r1, #16]
    4ce2:	bge.w	4e22 <_malloc_r+0x1d6>
    4ce6:	cmp.w	r3, #512	; 0x200
    4cea:	bcs.w	4fbc <_malloc_r+0x370>
    4cee:	lsrs	r3, r3, #3
    4cf0:	add.w	ip, r3, #1
    4cf4:	movs	r2, #1
    4cf6:	asrs	r3, r3, #2
    4cf8:	lsl.w	r3, r2, r3
    4cfc:	ldr	r2, [r1, #4]
    4cfe:	ldr.w	r8, [r1, ip, lsl #3]
    4d02:	str.w	r8, [r4, #8]
    4d06:	add.w	r9, r1, ip, lsl #3
    4d0a:	orrs	r2, r3
    4d0c:	sub.w	r3, r9, #8
    4d10:	str	r3, [r4, #12]
    4d12:	str	r2, [r1, #4]
    4d14:	str.w	r4, [r1, ip, lsl #3]
    4d18:	str.w	r4, [r8, #12]
    4d1c:	asrs	r3, r0, #2
    4d1e:	movs	r4, #1
    4d20:	lsls	r4, r3
    4d22:	cmp	r4, r2
    4d24:	bhi.w	4e3c <_malloc_r+0x1f0>
    4d28:	tst	r4, r2
    4d2a:	bne.n	4d3a <_malloc_r+0xee>
    4d2c:	bic.w	r0, r0, #3
    4d30:	lsls	r4, r4, #1
    4d32:	tst	r4, r2
    4d34:	add.w	r0, r0, #4
    4d38:	beq.n	4d30 <_malloc_r+0xe4>
    4d3a:	add.w	r9, r7, r0, lsl #3
    4d3e:	mov	ip, r9
    4d40:	mov	r8, r0
    4d42:	ldr.w	r1, [ip, #12]
    4d46:	cmp	ip, r1
    4d48:	bne.n	4d5a <_malloc_r+0x10e>
    4d4a:	b.n	5034 <_malloc_r+0x3e8>
    4d4c:	cmp	r2, #0
    4d4e:	bge.w	5054 <_malloc_r+0x408>
    4d52:	ldr	r1, [r1, #12]
    4d54:	cmp	ip, r1
    4d56:	beq.w	5034 <_malloc_r+0x3e8>
    4d5a:	ldr	r3, [r1, #4]
    4d5c:	bic.w	r3, r3, #3
    4d60:	subs	r2, r3, r5
    4d62:	cmp	r2, #15
    4d64:	ble.n	4d4c <_malloc_r+0x100>
    4d66:	mov	r4, r1
    4d68:	ldr.w	ip, [r1, #12]
    4d6c:	ldr.w	r8, [r4, #8]!
    4d70:	adds	r3, r1, r5
    4d72:	orr.w	r5, r5, #1
    4d76:	str	r5, [r1, #4]
    4d78:	orr.w	r1, r2, #1
    4d7c:	str.w	ip, [r8, #12]
    4d80:	mov	r0, r6
    4d82:	str.w	r8, [ip, #8]
    4d86:	str	r3, [r7, #20]
    4d88:	str	r3, [r7, #16]
    4d8a:	str.w	lr, [r3, #12]
    4d8e:	str.w	lr, [r3, #8]
    4d92:	str	r1, [r3, #4]
    4d94:	str	r2, [r3, r2]
    4d96:	bl	51c0 <__malloc_unlock>
    4d9a:	b.n	4ddc <_malloc_r+0x190>
    4d9c:	cmp	r1, #16
    4d9e:	bhi.n	4de4 <_malloc_r+0x198>
    4da0:	bl	51bc <__malloc_lock>
    4da4:	movs	r5, #16
    4da6:	movs	r3, #6
    4da8:	movs	r0, #2
    4daa:	ldr	r7, [pc, #504]	; (4fa4 <_malloc_r+0x358>)
    4dac:	add.w	r3, r7, r3, lsl #2
    4db0:	sub.w	r2, r3, #8
    4db4:	ldr	r4, [r3, #4]
    4db6:	cmp	r4, r2
    4db8:	beq.w	5046 <_malloc_r+0x3fa>
    4dbc:	ldr	r3, [r4, #4]
    4dbe:	ldr	r1, [r4, #12]
    4dc0:	ldr	r5, [r4, #8]
    4dc2:	bic.w	r3, r3, #3
    4dc6:	add	r3, r4
    4dc8:	mov	r0, r6
    4dca:	ldr	r2, [r3, #4]
    4dcc:	str	r1, [r5, #12]
    4dce:	orr.w	r2, r2, #1
    4dd2:	str	r5, [r1, #8]
    4dd4:	str	r2, [r3, #4]
    4dd6:	bl	51c0 <__malloc_unlock>
    4dda:	adds	r4, #8
    4ddc:	mov	r0, r4
    4dde:	add	sp, #12
    4de0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4de4:	movs	r4, #0
    4de6:	movs	r3, #12
    4de8:	mov	r0, r4
    4dea:	str	r3, [r6, #0]
    4dec:	add	sp, #12
    4dee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4df2:	movs	r3, #128	; 0x80
    4df4:	mov.w	lr, #64	; 0x40
    4df8:	movs	r0, #63	; 0x3f
    4dfa:	b.n	4c90 <_malloc_r+0x44>
    4dfc:	mov	r0, lr
    4dfe:	b.n	4cbc <_malloc_r+0x70>
    4e00:	add	r3, r4
    4e02:	ldr	r1, [r4, #12]
    4e04:	ldr	r2, [r3, #4]
    4e06:	ldr	r5, [r4, #8]
    4e08:	orr.w	r2, r2, #1
    4e0c:	str	r1, [r5, #12]
    4e0e:	mov	r0, r6
    4e10:	str	r5, [r1, #8]
    4e12:	str	r2, [r3, #4]
    4e14:	bl	51c0 <__malloc_unlock>
    4e18:	adds	r4, #8
    4e1a:	mov	r0, r4
    4e1c:	add	sp, #12
    4e1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e22:	add	r3, r4
    4e24:	mov	r0, r6
    4e26:	ldr	r2, [r3, #4]
    4e28:	orr.w	r2, r2, #1
    4e2c:	str	r2, [r3, #4]
    4e2e:	bl	51c0 <__malloc_unlock>
    4e32:	adds	r4, #8
    4e34:	mov	r0, r4
    4e36:	add	sp, #12
    4e38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e3c:	ldr	r4, [r7, #8]
    4e3e:	ldr	r3, [r4, #4]
    4e40:	bic.w	r8, r3, #3
    4e44:	cmp	r8, r5
    4e46:	bcc.n	4e52 <_malloc_r+0x206>
    4e48:	rsb	r3, r5, r8
    4e4c:	cmp	r3, #15
    4e4e:	bgt.w	4f6a <_malloc_r+0x31e>
    4e52:	ldr	r3, [pc, #340]	; (4fa8 <_malloc_r+0x35c>)
    4e54:	ldr.w	r9, [pc, #352]	; 4fb8 <_malloc_r+0x36c>
    4e58:	ldr	r2, [r3, #0]
    4e5a:	ldr.w	r3, [r9]
    4e5e:	adds	r3, #1
    4e60:	add	r2, r5
    4e62:	add.w	sl, r4, r8
    4e66:	beq.w	512a <_malloc_r+0x4de>
    4e6a:	add.w	r2, r2, #4096	; 0x1000
    4e6e:	adds	r2, #15
    4e70:	bic.w	r2, r2, #4080	; 0xff0
    4e74:	bic.w	r2, r2, #15
    4e78:	mov	r1, r2
    4e7a:	mov	r0, r6
    4e7c:	str	r2, [sp, #4]
    4e7e:	bl	51c4 <_sbrk_r>
    4e82:	cmp.w	r0, #4294967295
    4e86:	mov	fp, r0
    4e88:	ldr	r2, [sp, #4]
    4e8a:	beq.w	513e <_malloc_r+0x4f2>
    4e8e:	cmp	sl, r0
    4e90:	bhi.w	508c <_malloc_r+0x440>
    4e94:	ldr	r3, [pc, #276]	; (4fac <_malloc_r+0x360>)
    4e96:	ldr	r1, [r3, #0]
    4e98:	cmp	sl, fp
    4e9a:	add	r1, r2
    4e9c:	str	r1, [r3, #0]
    4e9e:	beq.w	5148 <_malloc_r+0x4fc>
    4ea2:	ldr.w	r0, [r9]
    4ea6:	ldr.w	lr, [pc, #272]	; 4fb8 <_malloc_r+0x36c>
    4eaa:	adds	r0, #1
    4eac:	ittet	ne
    4eae:	rsbne	sl, sl, fp
    4eb2:	addne	r1, sl
    4eb4:	streq.w	fp, [lr]
    4eb8:	strne	r1, [r3, #0]
    4eba:	ands.w	r1, fp, #7
    4ebe:	beq.w	50f0 <_malloc_r+0x4a4>
    4ec2:	rsb	r0, r1, #8
    4ec6:	rsb	r1, r1, #4096	; 0x1000
    4eca:	add	fp, r0
    4ecc:	adds	r1, #8
    4ece:	add	r2, fp
    4ed0:	ubfx	r2, r2, #0, #12
    4ed4:	rsb	r9, r2, r1
    4ed8:	mov	r1, r9
    4eda:	mov	r0, r6
    4edc:	str	r3, [sp, #4]
    4ede:	bl	51c4 <_sbrk_r>
    4ee2:	adds	r3, r0, #1
    4ee4:	ldr	r3, [sp, #4]
    4ee6:	beq.w	5168 <_malloc_r+0x51c>
    4eea:	rsb	r2, fp, r0
    4eee:	add	r2, r9
    4ef0:	orr.w	r2, r2, #1
    4ef4:	ldr	r1, [r3, #0]
    4ef6:	str.w	fp, [r7, #8]
    4efa:	add	r1, r9
    4efc:	cmp	r4, r7
    4efe:	str.w	r2, [fp, #4]
    4f02:	str	r1, [r3, #0]
    4f04:	ldr.w	r9, [pc, #164]	; 4fac <_malloc_r+0x360>
    4f08:	beq.n	4f38 <_malloc_r+0x2ec>
    4f0a:	cmp.w	r8, #15
    4f0e:	bls.w	510c <_malloc_r+0x4c0>
    4f12:	ldr	r2, [r4, #4]
    4f14:	sub.w	r3, r8, #12
    4f18:	bic.w	r3, r3, #7
    4f1c:	adds	r0, r4, r3
    4f1e:	and.w	r2, r2, #1
    4f22:	mov.w	lr, #5
    4f26:	orrs	r2, r3
    4f28:	cmp	r3, #15
    4f2a:	str	r2, [r4, #4]
    4f2c:	str.w	lr, [r0, #4]
    4f30:	str.w	lr, [r0, #8]
    4f34:	bhi.w	5170 <_malloc_r+0x524>
    4f38:	ldr	r3, [pc, #116]	; (4fb0 <_malloc_r+0x364>)
    4f3a:	ldr	r4, [r7, #8]
    4f3c:	ldr	r2, [r3, #0]
    4f3e:	cmp	r1, r2
    4f40:	it	hi
    4f42:	strhi	r1, [r3, #0]
    4f44:	ldr	r3, [pc, #108]	; (4fb4 <_malloc_r+0x368>)
    4f46:	ldr	r2, [r3, #0]
    4f48:	cmp	r1, r2
    4f4a:	ldr	r2, [r4, #4]
    4f4c:	it	hi
    4f4e:	strhi	r1, [r3, #0]
    4f50:	bic.w	r2, r2, #3
    4f54:	cmp	r5, r2
    4f56:	sub.w	r3, r2, r5
    4f5a:	bhi.n	4f60 <_malloc_r+0x314>
    4f5c:	cmp	r3, #15
    4f5e:	bgt.n	4f6a <_malloc_r+0x31e>
    4f60:	mov	r0, r6
    4f62:	bl	51c0 <__malloc_unlock>
    4f66:	movs	r4, #0
    4f68:	b.n	4ddc <_malloc_r+0x190>
    4f6a:	adds	r2, r4, r5
    4f6c:	orr.w	r3, r3, #1
    4f70:	orr.w	r5, r5, #1
    4f74:	str	r5, [r4, #4]
    4f76:	mov	r0, r6
    4f78:	str	r2, [r7, #8]
    4f7a:	str	r3, [r2, #4]
    4f7c:	bl	51c0 <__malloc_unlock>
    4f80:	adds	r4, #8
    4f82:	mov	r0, r4
    4f84:	add	sp, #12
    4f86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f8a:	cmp	r3, #20
    4f8c:	bls.n	5072 <_malloc_r+0x426>
    4f8e:	cmp	r3, #84	; 0x54
    4f90:	bhi.w	50dc <_malloc_r+0x490>
    4f94:	lsrs	r0, r5, #12
    4f96:	add.w	lr, r0, #111	; 0x6f
    4f9a:	mov.w	r3, lr, lsl #1
    4f9e:	adds	r0, #110	; 0x6e
    4fa0:	b.n	4c90 <_malloc_r+0x44>
    4fa2:	nop
    4fa4:	.word	0x1fff11ac
    4fa8:	.word	0x1fff1db0
    4fac:	.word	0x1fff1db4
    4fb0:	.word	0x1fff1dac
    4fb4:	.word	0x1fff1da8
    4fb8:	.word	0x1fff15b8
    4fbc:	lsrs	r2, r3, #9
    4fbe:	cmp	r2, #4
    4fc0:	bls.n	5080 <_malloc_r+0x434>
    4fc2:	cmp	r2, #20
    4fc4:	bhi.w	512e <_malloc_r+0x4e2>
    4fc8:	add.w	r1, r2, #92	; 0x5c
    4fcc:	lsls	r1, r1, #1
    4fce:	adds	r2, #91	; 0x5b
    4fd0:	add.w	ip, r7, r1, lsl #2
    4fd4:	ldr.w	r1, [r7, r1, lsl #2]
    4fd8:	ldr.w	r8, [pc, #476]	; 51b8 <_malloc_r+0x56c>
    4fdc:	sub.w	ip, ip, #8
    4fe0:	cmp	ip, r1
    4fe2:	beq.w	50f6 <_malloc_r+0x4aa>
    4fe6:	ldr	r2, [r1, #4]
    4fe8:	bic.w	r2, r2, #3
    4fec:	cmp	r3, r2
    4fee:	bcs.n	4ff6 <_malloc_r+0x3aa>
    4ff0:	ldr	r1, [r1, #8]
    4ff2:	cmp	ip, r1
    4ff4:	bne.n	4fe6 <_malloc_r+0x39a>
    4ff6:	ldr.w	ip, [r1, #12]
    4ffa:	ldr	r2, [r7, #4]
    4ffc:	str.w	ip, [r4, #12]
    5000:	str	r1, [r4, #8]
    5002:	str.w	r4, [ip, #8]
    5006:	str	r4, [r1, #12]
    5008:	b.n	4d1c <_malloc_r+0xd0>
    500a:	adds	r3, r4, r5
    500c:	orr.w	r7, r2, #1
    5010:	orr.w	r5, r5, #1
    5014:	str	r5, [r4, #4]
    5016:	mov	r0, r6
    5018:	str	r3, [r1, #20]
    501a:	str	r3, [r1, #16]
    501c:	str.w	lr, [r3, #12]
    5020:	str.w	lr, [r3, #8]
    5024:	str	r7, [r3, #4]
    5026:	str	r2, [r3, r2]
    5028:	adds	r4, #8
    502a:	bl	51c0 <__malloc_unlock>
    502e:	b.n	4ddc <_malloc_r+0x190>
    5030:	ldr	r2, [r1, #4]
    5032:	b.n	4d1c <_malloc_r+0xd0>
    5034:	add.w	r8, r8, #1
    5038:	tst.w	r8, #3
    503c:	add.w	ip, ip, #8
    5040:	bne.w	4d42 <_malloc_r+0xf6>
    5044:	b.n	50a8 <_malloc_r+0x45c>
    5046:	ldr	r4, [r3, #12]
    5048:	cmp	r3, r4
    504a:	it	eq
    504c:	addeq	r0, #2
    504e:	beq.w	4cbc <_malloc_r+0x70>
    5052:	b.n	4dbc <_malloc_r+0x170>
    5054:	add	r3, r1
    5056:	mov	r4, r1
    5058:	ldr	r2, [r3, #4]
    505a:	ldr	r1, [r1, #12]
    505c:	ldr.w	r5, [r4, #8]!
    5060:	orr.w	r2, r2, #1
    5064:	str	r2, [r3, #4]
    5066:	mov	r0, r6
    5068:	str	r1, [r5, #12]
    506a:	str	r5, [r1, #8]
    506c:	bl	51c0 <__malloc_unlock>
    5070:	b.n	4ddc <_malloc_r+0x190>
    5072:	add.w	lr, r3, #92	; 0x5c
    5076:	add.w	r0, r3, #91	; 0x5b
    507a:	mov.w	r3, lr, lsl #1
    507e:	b.n	4c90 <_malloc_r+0x44>
    5080:	lsrs	r2, r3, #6
    5082:	add.w	r1, r2, #57	; 0x39
    5086:	lsls	r1, r1, #1
    5088:	adds	r2, #56	; 0x38
    508a:	b.n	4fd0 <_malloc_r+0x384>
    508c:	cmp	r4, r7
    508e:	ldr	r3, [pc, #296]	; (51b8 <_malloc_r+0x56c>)
    5090:	beq.w	4e94 <_malloc_r+0x248>
    5094:	ldr	r4, [r3, #8]
    5096:	ldr	r2, [r4, #4]
    5098:	bic.w	r2, r2, #3
    509c:	b.n	4f54 <_malloc_r+0x308>
    509e:	ldr.w	r3, [r9], #-8
    50a2:	cmp	r9, r3
    50a4:	bne.w	51ac <_malloc_r+0x560>
    50a8:	tst.w	r0, #3
    50ac:	add.w	r0, r0, #4294967295
    50b0:	bne.n	509e <_malloc_r+0x452>
    50b2:	ldr	r3, [r7, #4]
    50b4:	bic.w	r3, r3, r4
    50b8:	str	r3, [r7, #4]
    50ba:	lsls	r4, r4, #1
    50bc:	cmp	r4, r3
    50be:	bhi.w	4e3c <_malloc_r+0x1f0>
    50c2:	cmp	r4, #0
    50c4:	beq.w	4e3c <_malloc_r+0x1f0>
    50c8:	tst	r4, r3
    50ca:	mov	r0, r8
    50cc:	bne.w	4d3a <_malloc_r+0xee>
    50d0:	lsls	r4, r4, #1
    50d2:	tst	r4, r3
    50d4:	add.w	r0, r0, #4
    50d8:	beq.n	50d0 <_malloc_r+0x484>
    50da:	b.n	4d3a <_malloc_r+0xee>
    50dc:	cmp.w	r3, #340	; 0x154
    50e0:	bhi.n	5114 <_malloc_r+0x4c8>
    50e2:	lsrs	r0, r5, #15
    50e4:	add.w	lr, r0, #120	; 0x78
    50e8:	mov.w	r3, lr, lsl #1
    50ec:	adds	r0, #119	; 0x77
    50ee:	b.n	4c90 <_malloc_r+0x44>
    50f0:	mov.w	r1, #4096	; 0x1000
    50f4:	b.n	4ece <_malloc_r+0x282>
    50f6:	movs	r1, #1
    50f8:	ldr.w	r3, [r8, #4]
    50fc:	asrs	r2, r2, #2
    50fe:	lsl.w	r2, r1, r2
    5102:	orrs	r2, r3
    5104:	str.w	r2, [r8, #4]
    5108:	mov	r1, ip
    510a:	b.n	4ffc <_malloc_r+0x3b0>
    510c:	movs	r3, #1
    510e:	str.w	r3, [fp, #4]
    5112:	b.n	4f60 <_malloc_r+0x314>
    5114:	movw	r2, #1364	; 0x554
    5118:	cmp	r3, r2
    511a:	bhi.n	515e <_malloc_r+0x512>
    511c:	lsrs	r0, r5, #18
    511e:	add.w	lr, r0, #125	; 0x7d
    5122:	mov.w	r3, lr, lsl #1
    5126:	adds	r0, #124	; 0x7c
    5128:	b.n	4c90 <_malloc_r+0x44>
    512a:	adds	r2, #16
    512c:	b.n	4e78 <_malloc_r+0x22c>
    512e:	cmp	r2, #84	; 0x54
    5130:	bhi.n	5180 <_malloc_r+0x534>
    5132:	lsrs	r2, r3, #12
    5134:	add.w	r1, r2, #111	; 0x6f
    5138:	lsls	r1, r1, #1
    513a:	adds	r2, #110	; 0x6e
    513c:	b.n	4fd0 <_malloc_r+0x384>
    513e:	ldr	r4, [r7, #8]
    5140:	ldr	r2, [r4, #4]
    5142:	bic.w	r2, r2, #3
    5146:	b.n	4f54 <_malloc_r+0x308>
    5148:	ubfx	r0, sl, #0, #12
    514c:	cmp	r0, #0
    514e:	bne.w	4ea2 <_malloc_r+0x256>
    5152:	add	r2, r8
    5154:	ldr	r3, [r7, #8]
    5156:	orr.w	r2, r2, #1
    515a:	str	r2, [r3, #4]
    515c:	b.n	4f38 <_malloc_r+0x2ec>
    515e:	movs	r3, #254	; 0xfe
    5160:	mov.w	lr, #127	; 0x7f
    5164:	movs	r0, #126	; 0x7e
    5166:	b.n	4c90 <_malloc_r+0x44>
    5168:	movs	r2, #1
    516a:	mov.w	r9, #0
    516e:	b.n	4ef4 <_malloc_r+0x2a8>
    5170:	add.w	r1, r4, #8
    5174:	mov	r0, r6
    5176:	bl	53c0 <_free_r>
    517a:	ldr.w	r1, [r9]
    517e:	b.n	4f38 <_malloc_r+0x2ec>
    5180:	cmp.w	r2, #340	; 0x154
    5184:	bhi.n	5192 <_malloc_r+0x546>
    5186:	lsrs	r2, r3, #15
    5188:	add.w	r1, r2, #120	; 0x78
    518c:	lsls	r1, r1, #1
    518e:	adds	r2, #119	; 0x77
    5190:	b.n	4fd0 <_malloc_r+0x384>
    5192:	movw	r1, #1364	; 0x554
    5196:	cmp	r2, r1
    5198:	bhi.n	51a6 <_malloc_r+0x55a>
    519a:	lsrs	r2, r3, #18
    519c:	add.w	r1, r2, #125	; 0x7d
    51a0:	lsls	r1, r1, #1
    51a2:	adds	r2, #124	; 0x7c
    51a4:	b.n	4fd0 <_malloc_r+0x384>
    51a6:	movs	r1, #254	; 0xfe
    51a8:	movs	r2, #126	; 0x7e
    51aa:	b.n	4fd0 <_malloc_r+0x384>
    51ac:	ldr	r3, [r7, #4]
    51ae:	b.n	50ba <_malloc_r+0x46e>
    51b0:	lsrs	r0, r5, #3
    51b2:	adds	r3, r0, #1
    51b4:	lsls	r3, r3, #1
    51b6:	b.n	4daa <_malloc_r+0x15e>
    51b8:	.word	0x1fff11ac

000051bc <__malloc_lock>:
    51bc:	bx	lr
    51be:	nop

000051c0 <__malloc_unlock>:
    51c0:	bx	lr
    51c2:	nop

000051c4 <_sbrk_r>:
    51c4:	push	{r3, r4, r5, lr}
    51c6:	ldr	r4, [pc, #28]	; (51e4 <_sbrk_r+0x20>)
    51c8:	movs	r3, #0
    51ca:	mov	r5, r0
    51cc:	mov	r0, r1
    51ce:	str	r3, [r4, #0]
    51d0:	bl	4558 <_sbrk>
    51d4:	adds	r3, r0, #1
    51d6:	beq.n	51da <_sbrk_r+0x16>
    51d8:	pop	{r3, r4, r5, pc}
    51da:	ldr	r3, [r4, #0]
    51dc:	cmp	r3, #0
    51de:	beq.n	51d8 <_sbrk_r+0x14>
    51e0:	str	r3, [r5, #0]
    51e2:	pop	{r3, r4, r5, pc}
    51e4:	.word	0x1fff1f20
    51e8:	.word	0xffffffff
    51ec:	.word	0xffffffff
    51f0:	.word	0xffffffff
    51f4:	.word	0xffffffff
    51f8:	.word	0xffffffff
    51fc:	.word	0xffffffff

00005200 <strlen>:
    5200:	pld	[r0]
    5204:	strd	r4, r5, [sp, #-8]!
    5208:	bic.w	r1, r0, #7
    520c:	mvn.w	ip, #0
    5210:	ands.w	r4, r0, #7
    5214:	pld	[r1, #32]
    5218:	bne.w	52ae <strlen+0xae>
    521c:	mov.w	r4, #0
    5220:	mvn.w	r0, #7
    5224:	ldrd	r2, r3, [r1]
    5228:	pld	[r1, #64]	; 0x40
    522c:	add.w	r0, r0, #8
    5230:	uadd8	r2, r2, ip
    5234:	sel	r2, r4, ip
    5238:	uadd8	r3, r3, ip
    523c:	sel	r3, r2, ip
    5240:	cbnz	r3, 5296 <strlen+0x96>
    5242:	ldrd	r2, r3, [r1, #8]
    5246:	uadd8	r2, r2, ip
    524a:	add.w	r0, r0, #8
    524e:	sel	r2, r4, ip
    5252:	uadd8	r3, r3, ip
    5256:	sel	r3, r2, ip
    525a:	cbnz	r3, 5296 <strlen+0x96>
    525c:	ldrd	r2, r3, [r1, #16]
    5260:	uadd8	r2, r2, ip
    5264:	add.w	r0, r0, #8
    5268:	sel	r2, r4, ip
    526c:	uadd8	r3, r3, ip
    5270:	sel	r3, r2, ip
    5274:	cbnz	r3, 5296 <strlen+0x96>
    5276:	ldrd	r2, r3, [r1, #24]
    527a:	add.w	r1, r1, #32
    527e:	uadd8	r2, r2, ip
    5282:	add.w	r0, r0, #8
    5286:	sel	r2, r4, ip
    528a:	uadd8	r3, r3, ip
    528e:	sel	r3, r2, ip
    5292:	cmp	r3, #0
    5294:	beq.n	5224 <strlen+0x24>
    5296:	cmp	r2, #0
    5298:	itt	eq
    529a:	addeq	r0, #4
    529c:	moveq	r2, r3
    529e:	rev	r2, r2
    52a0:	clz	r2, r2
    52a4:	ldrd	r4, r5, [sp], #8
    52a8:	add.w	r0, r0, r2, lsr #3
    52ac:	bx	lr
    52ae:	ldrd	r2, r3, [r1]
    52b2:	and.w	r5, r4, #3
    52b6:	rsb	r0, r4, #0
    52ba:	mov.w	r5, r5, lsl #3
    52be:	tst.w	r4, #4
    52c2:	pld	[r1, #64]	; 0x40
    52c6:	lsl.w	r5, ip, r5
    52ca:	orn	r2, r2, r5
    52ce:	itt	ne
    52d0:	ornne	r3, r3, r5
    52d4:	movne	r2, ip
    52d6:	mov.w	r4, #0
    52da:	b.n	5230 <strlen+0x30>

000052dc <register_fini>:
    52dc:	ldr	r3, [pc, #8]	; (52e8 <register_fini+0xc>)
    52de:	cbz	r3, 52e6 <register_fini+0xa>
    52e0:	ldr	r0, [pc, #8]	; (52ec <register_fini+0x10>)
    52e2:	b.w	52f0 <atexit>
    52e6:	bx	lr
    52e8:	.word	0x00000000
    52ec:	.word	0x000052fd

000052f0 <atexit>:
    52f0:	movs	r3, #0
    52f2:	mov	r1, r0
    52f4:	mov	r2, r3
    52f6:	mov	r0, r3
    52f8:	b.w	5590 <__register_exitproc>

000052fc <__libc_fini_array>:
    52fc:	push	{r3, r4, r5, lr}
    52fe:	ldr	r5, [pc, #28]	; (531c <__libc_fini_array+0x20>)
    5300:	ldr	r4, [pc, #28]	; (5320 <__libc_fini_array+0x24>)
    5302:	subs	r4, r5, r4
    5304:	asrs	r4, r4, #2
    5306:	beq.n	5314 <__libc_fini_array+0x18>
    5308:	subs	r4, #1
    530a:	ldr.w	r3, [r5, #-4]!
    530e:	blx	r3
    5310:	cmp	r4, #0
    5312:	bne.n	5308 <__libc_fini_array+0xc>
    5314:	ldmia.w	sp!, {r3, r4, r5, lr}
    5318:	b.w	59cc <__init_array_end>
	...

00005324 <_malloc_trim_r>:
    5324:	push	{r3, r4, r5, r6, r7, lr}
    5326:	ldr	r7, [pc, #140]	; (53b4 <_malloc_trim_r+0x90>)
    5328:	mov	r4, r1
    532a:	mov	r6, r0
    532c:	bl	51bc <__malloc_lock>
    5330:	ldr	r3, [r7, #8]
    5332:	ldr	r5, [r3, #4]
    5334:	bic.w	r5, r5, #3
    5338:	subs	r1, r5, r4
    533a:	addw	r1, r1, #4079	; 0xfef
    533e:	bic.w	r1, r1, #4080	; 0xff0
    5342:	bic.w	r1, r1, #15
    5346:	sub.w	r4, r1, #4096	; 0x1000
    534a:	cmp.w	r4, #4096	; 0x1000
    534e:	blt.n	5360 <_malloc_trim_r+0x3c>
    5350:	movs	r1, #0
    5352:	mov	r0, r6
    5354:	bl	51c4 <_sbrk_r>
    5358:	ldr	r3, [r7, #8]
    535a:	add	r3, r5
    535c:	cmp	r0, r3
    535e:	beq.n	536a <_malloc_trim_r+0x46>
    5360:	mov	r0, r6
    5362:	bl	51c0 <__malloc_unlock>
    5366:	movs	r0, #0
    5368:	pop	{r3, r4, r5, r6, r7, pc}
    536a:	negs	r1, r4
    536c:	mov	r0, r6
    536e:	bl	51c4 <_sbrk_r>
    5372:	adds	r0, #1
    5374:	beq.n	5392 <_malloc_trim_r+0x6e>
    5376:	ldr	r3, [pc, #64]	; (53b8 <_malloc_trim_r+0x94>)
    5378:	ldr	r2, [r7, #8]
    537a:	ldr	r1, [r3, #0]
    537c:	subs	r5, r5, r4
    537e:	orr.w	r5, r5, #1
    5382:	mov	r0, r6
    5384:	subs	r1, r1, r4
    5386:	str	r5, [r2, #4]
    5388:	str	r1, [r3, #0]
    538a:	bl	51c0 <__malloc_unlock>
    538e:	movs	r0, #1
    5390:	pop	{r3, r4, r5, r6, r7, pc}
    5392:	movs	r1, #0
    5394:	mov	r0, r6
    5396:	bl	51c4 <_sbrk_r>
    539a:	ldr	r2, [r7, #8]
    539c:	subs	r3, r0, r2
    539e:	cmp	r3, #15
    53a0:	ble.n	5360 <_malloc_trim_r+0x3c>
    53a2:	ldr	r4, [pc, #24]	; (53bc <_malloc_trim_r+0x98>)
    53a4:	ldr	r1, [pc, #16]	; (53b8 <_malloc_trim_r+0x94>)
    53a6:	ldr	r4, [r4, #0]
    53a8:	orr.w	r3, r3, #1
    53ac:	subs	r0, r0, r4
    53ae:	str	r3, [r2, #4]
    53b0:	str	r0, [r1, #0]
    53b2:	b.n	5360 <_malloc_trim_r+0x3c>
    53b4:	.word	0x1fff11ac
    53b8:	.word	0x1fff1db4
    53bc:	.word	0x1fff15b8

000053c0 <_free_r>:
    53c0:	cmp	r1, #0
    53c2:	beq.n	5450 <_free_r+0x90>
    53c4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53c8:	mov	r5, r1
    53ca:	mov	r8, r0
    53cc:	bl	51bc <__malloc_lock>
    53d0:	ldr.w	r7, [r5, #-4]
    53d4:	ldr	r1, [pc, #424]	; (5580 <_free_r+0x1c0>)
    53d6:	bic.w	r3, r7, #1
    53da:	sub.w	r4, r5, #8
    53de:	adds	r2, r4, r3
    53e0:	ldr	r6, [r1, #8]
    53e2:	ldr	r0, [r2, #4]
    53e4:	cmp	r2, r6
    53e6:	bic.w	r0, r0, #3
    53ea:	beq.n	54b2 <_free_r+0xf2>
    53ec:	lsls	r6, r7, #31
    53ee:	str	r0, [r2, #4]
    53f0:	bmi.n	540a <_free_r+0x4a>
    53f2:	ldr.w	r7, [r5, #-8]
    53f6:	subs	r4, r4, r7
    53f8:	add.w	lr, r1, #8
    53fc:	ldr	r5, [r4, #8]
    53fe:	cmp	r5, lr
    5400:	add	r3, r7
    5402:	beq.n	54e4 <_free_r+0x124>
    5404:	ldr	r7, [r4, #12]
    5406:	str	r7, [r5, #12]
    5408:	str	r5, [r7, #8]
    540a:	adds	r5, r2, r0
    540c:	ldr	r5, [r5, #4]
    540e:	lsls	r5, r5, #31
    5410:	bpl.n	5498 <_free_r+0xd8>
    5412:	orr.w	r2, r3, #1
    5416:	str	r2, [r4, #4]
    5418:	str	r3, [r4, r3]
    541a:	cmp.w	r3, #512	; 0x200
    541e:	bcs.n	5452 <_free_r+0x92>
    5420:	lsrs	r3, r3, #3
    5422:	adds	r2, r3, #1
    5424:	ldr	r5, [r1, #4]
    5426:	ldr.w	r7, [r1, r2, lsl #3]
    542a:	str	r7, [r4, #8]
    542c:	movs	r0, #1
    542e:	asrs	r3, r3, #2
    5430:	lsl.w	r3, r0, r3
    5434:	add.w	r0, r1, r2, lsl #3
    5438:	orrs	r5, r3
    543a:	subs	r0, #8
    543c:	str	r0, [r4, #12]
    543e:	str	r5, [r1, #4]
    5440:	str.w	r4, [r1, r2, lsl #3]
    5444:	str	r4, [r7, #12]
    5446:	mov	r0, r8
    5448:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    544c:	b.w	51c0 <__malloc_unlock>
    5450:	bx	lr
    5452:	lsrs	r2, r3, #9
    5454:	cmp	r2, #4
    5456:	bhi.n	5500 <_free_r+0x140>
    5458:	lsrs	r2, r3, #6
    545a:	add.w	r7, r2, #57	; 0x39
    545e:	lsls	r7, r7, #1
    5460:	add.w	r5, r2, #56	; 0x38
    5464:	add.w	r0, r1, r7, lsl #2
    5468:	ldr.w	r2, [r1, r7, lsl #2]
    546c:	ldr	r1, [pc, #272]	; (5580 <_free_r+0x1c0>)
    546e:	subs	r0, #8
    5470:	cmp	r0, r2
    5472:	beq.n	5510 <_free_r+0x150>
    5474:	ldr	r1, [r2, #4]
    5476:	bic.w	r1, r1, #3
    547a:	cmp	r3, r1
    547c:	bcs.n	5484 <_free_r+0xc4>
    547e:	ldr	r2, [r2, #8]
    5480:	cmp	r0, r2
    5482:	bne.n	5474 <_free_r+0xb4>
    5484:	ldr	r0, [r2, #12]
    5486:	str	r0, [r4, #12]
    5488:	str	r2, [r4, #8]
    548a:	str	r4, [r0, #8]
    548c:	str	r4, [r2, #12]
    548e:	mov	r0, r8
    5490:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5494:	b.w	51c0 <__malloc_unlock>
    5498:	ldr	r5, [r2, #8]
    549a:	ldr	r7, [pc, #232]	; (5584 <_free_r+0x1c4>)
    549c:	cmp	r5, r7
    549e:	add	r3, r0
    54a0:	beq.n	5522 <_free_r+0x162>
    54a2:	ldr	r0, [r2, #12]
    54a4:	str	r0, [r5, #12]
    54a6:	orr.w	r2, r3, #1
    54aa:	str	r5, [r0, #8]
    54ac:	str	r2, [r4, #4]
    54ae:	str	r3, [r4, r3]
    54b0:	b.n	541a <_free_r+0x5a>
    54b2:	lsls	r7, r7, #31
    54b4:	add	r3, r0
    54b6:	bmi.n	54c8 <_free_r+0x108>
    54b8:	ldr.w	r2, [r5, #-8]
    54bc:	subs	r4, r4, r2
    54be:	add	r3, r2
    54c0:	ldr	r0, [r4, #8]
    54c2:	ldr	r2, [r4, #12]
    54c4:	str	r2, [r0, #12]
    54c6:	str	r0, [r2, #8]
    54c8:	ldr	r2, [pc, #188]	; (5588 <_free_r+0x1c8>)
    54ca:	ldr	r2, [r2, #0]
    54cc:	orr.w	r0, r3, #1
    54d0:	cmp	r3, r2
    54d2:	str	r0, [r4, #4]
    54d4:	str	r4, [r1, #8]
    54d6:	bcc.n	5446 <_free_r+0x86>
    54d8:	ldr	r3, [pc, #176]	; (558c <_free_r+0x1cc>)
    54da:	mov	r0, r8
    54dc:	ldr	r1, [r3, #0]
    54de:	bl	5324 <_malloc_trim_r>
    54e2:	b.n	5446 <_free_r+0x86>
    54e4:	adds	r1, r2, r0
    54e6:	ldr	r1, [r1, #4]
    54e8:	lsls	r1, r1, #31
    54ea:	bmi.n	5576 <_free_r+0x1b6>
    54ec:	ldr	r1, [r2, #8]
    54ee:	ldr	r2, [r2, #12]
    54f0:	str	r2, [r1, #12]
    54f2:	add	r3, r0
    54f4:	orr.w	r0, r3, #1
    54f8:	str	r1, [r2, #8]
    54fa:	str	r0, [r4, #4]
    54fc:	str	r3, [r4, r3]
    54fe:	b.n	5446 <_free_r+0x86>
    5500:	cmp	r2, #20
    5502:	bhi.n	5534 <_free_r+0x174>
    5504:	add.w	r7, r2, #92	; 0x5c
    5508:	lsls	r7, r7, #1
    550a:	add.w	r5, r2, #91	; 0x5b
    550e:	b.n	5464 <_free_r+0xa4>
    5510:	asrs	r2, r5, #2
    5512:	ldr	r3, [r1, #4]
    5514:	movs	r5, #1
    5516:	lsl.w	r2, r5, r2
    551a:	orrs	r3, r2
    551c:	str	r3, [r1, #4]
    551e:	mov	r2, r0
    5520:	b.n	5486 <_free_r+0xc6>
    5522:	orr.w	r2, r3, #1
    5526:	str	r4, [r1, #20]
    5528:	str	r4, [r1, #16]
    552a:	str	r5, [r4, #12]
    552c:	str	r5, [r4, #8]
    552e:	str	r2, [r4, #4]
    5530:	str	r3, [r4, r3]
    5532:	b.n	5446 <_free_r+0x86>
    5534:	cmp	r2, #84	; 0x54
    5536:	bhi.n	5546 <_free_r+0x186>
    5538:	lsrs	r2, r3, #12
    553a:	add.w	r7, r2, #111	; 0x6f
    553e:	lsls	r7, r7, #1
    5540:	add.w	r5, r2, #110	; 0x6e
    5544:	b.n	5464 <_free_r+0xa4>
    5546:	cmp.w	r2, #340	; 0x154
    554a:	bhi.n	555a <_free_r+0x19a>
    554c:	lsrs	r2, r3, #15
    554e:	add.w	r7, r2, #120	; 0x78
    5552:	lsls	r7, r7, #1
    5554:	add.w	r5, r2, #119	; 0x77
    5558:	b.n	5464 <_free_r+0xa4>
    555a:	movw	r0, #1364	; 0x554
    555e:	cmp	r2, r0
    5560:	bhi.n	5570 <_free_r+0x1b0>
    5562:	lsrs	r2, r3, #18
    5564:	add.w	r7, r2, #125	; 0x7d
    5568:	lsls	r7, r7, #1
    556a:	add.w	r5, r2, #124	; 0x7c
    556e:	b.n	5464 <_free_r+0xa4>
    5570:	movs	r7, #254	; 0xfe
    5572:	movs	r5, #126	; 0x7e
    5574:	b.n	5464 <_free_r+0xa4>
    5576:	orr.w	r2, r3, #1
    557a:	str	r2, [r4, #4]
    557c:	str	r3, [r4, r3]
    557e:	b.n	5446 <_free_r+0x86>
    5580:	.word	0x1fff11ac
    5584:	.word	0x1fff11b4
    5588:	.word	0x1fff15b4
    558c:	.word	0x1fff1db0

00005590 <__register_exitproc>:
    5590:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5594:	ldr	r4, [pc, #148]	; (562c <__register_exitproc+0x9c>)
    5596:	ldr	r5, [r4, #0]
    5598:	ldr.w	r4, [r5, #328]	; 0x148
    559c:	mov	r6, r0
    559e:	mov	r8, r1
    55a0:	mov	sl, r2
    55a2:	mov	r9, r3
    55a4:	cbz	r4, 5618 <__register_exitproc+0x88>
    55a6:	ldr	r0, [r4, #4]
    55a8:	cmp	r0, #31
    55aa:	bgt.n	55dc <__register_exitproc+0x4c>
    55ac:	adds	r3, r0, #1
    55ae:	cbz	r6, 55ce <__register_exitproc+0x3e>
    55b0:	add.w	r5, r4, r0, lsl #2
    55b4:	movs	r2, #1
    55b6:	str.w	sl, [r5, #136]	; 0x88
    55ba:	ldr.w	r1, [r4, #392]	; 0x188
    55be:	lsls	r2, r0
    55c0:	orrs	r1, r2
    55c2:	cmp	r6, #2
    55c4:	str.w	r1, [r4, #392]	; 0x188
    55c8:	str.w	r9, [r5, #264]	; 0x108
    55cc:	beq.n	560c <__register_exitproc+0x7c>
    55ce:	adds	r0, #2
    55d0:	str	r3, [r4, #4]
    55d2:	str.w	r8, [r4, r0, lsl #2]
    55d6:	movs	r0, #0
    55d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    55dc:	ldr	r3, [pc, #80]	; (5630 <__register_exitproc+0xa0>)
    55de:	cbz	r3, 5622 <__register_exitproc+0x92>
    55e0:	mov.w	r0, #400	; 0x190
    55e4:	bl	4c3c <malloc>
    55e8:	mov	r4, r0
    55ea:	cbz	r0, 5622 <__register_exitproc+0x92>
    55ec:	ldr.w	r3, [r5, #328]	; 0x148
    55f0:	movs	r7, #0
    55f2:	stmia.w	r0, {r3, r7}
    55f6:	str.w	r4, [r5, #328]	; 0x148
    55fa:	mov	r0, r7
    55fc:	movs	r3, #1
    55fe:	str.w	r7, [r4, #392]	; 0x188
    5602:	str.w	r7, [r4, #396]	; 0x18c
    5606:	cmp	r6, #0
    5608:	beq.n	55ce <__register_exitproc+0x3e>
    560a:	b.n	55b0 <__register_exitproc+0x20>
    560c:	ldr.w	r1, [r4, #396]	; 0x18c
    5610:	orrs	r2, r1
    5612:	str.w	r2, [r4, #396]	; 0x18c
    5616:	b.n	55ce <__register_exitproc+0x3e>
    5618:	add.w	r4, r5, #332	; 0x14c
    561c:	str.w	r4, [r5, #328]	; 0x148
    5620:	b.n	55a6 <__register_exitproc+0x16>
    5622:	mov.w	r0, #4294967295
    5626:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    562a:	nop
    562c:	.word	0x000059b0
    5630:	.word	0x00004c3d
    5634:	.word	0x6f486e6f
    5638:	.word	0x0000646c
    563c:	.word	0x72506e6f
    5640:	.word	0x20737365
    5644:	.word	0x66696873
    5648:	.word	0x646f4d74
    564c:	.word	0x00000065
    5650:	.word	0x72506e6f
    5654:	.word	0x20737365
    5658:	.word	0x65676170
    565c:	.word	0x00000000
    5660:	.word	0x4f4c4556
    5664:	.word	0x59544943
    5668:	.word	0x00000000
    566c:	.word	0x45544f4e
    5670:	.word	0x474e454c
    5674:	.word	0x00004854
    5678:	.word	0x43544950
    567c:	.word	0x00000048
    5680:	.word	0x6f636553
    5684:	.word	0x2073646e
    5688:	.word	0x646c6568
    568c:	.word	0x0000203a
    5690:	.word	0x6c6c694d
    5694:	.word	0x63657369
    5698:	.word	0x73646e6f
    569c:	.word	0x6c656820
    56a0:	.word	0x00203a64
    56a4:	.word	0x72506e6f
    56a8:	.word	0x00737365
    56ac:	.word	0x7370704f
    56b0:	.word	0x6e61202c
    56b4:	.word	0x6b6e7520
    56b8:	.word	0x6e776f6e
    56bc:	.word	0x44494d20
    56c0:	.word	0x656d2049
    56c4:	.word	0x67617373
    56c8:	.word	0x79742065
    56cc:	.word	0x00216570
    56d0:	.word	0x74696e49
    56d4:	.word	0x53206465
    56d8:	.word	0x65757165
    56dc:	.word	0x0065636e

000056e0 <pin2sc1a>:
    56e0:	................
    56f0:	................
    5700:	................
    5710:	................
    5720:	........

00005728 <digital_pin_to_info_PGM>:
    5728:	@..C@..@D..CD..@
    5738:	...C...@0..C0..@
    5748:	4..C4..@...C...@
    5758:	...C...@...C...@
    5768:	...C...@...C...@
    5778:	...C...@...C...@
    5788:	...C...@...C...@
    5798:	...C...@...C...@
    57a8:	...C...@...C...@
    57b8:	...C...@...C...@
    57c8:	...C...@...C...@
    57d8:	...C...@...C...@
    57e8:	h .Ch..@...C...@
    57f8:	8..C8..@<..C<..@
    5808:	@..C@..@H..CH..@
    5818:	L..CL..@(..C(..@
    5828:	,..C,..@` .C`..@
    5838:	d .Cd..@ ..C ..@
    5848:	$..C$..@(..C(..@
    5858:	,..C,..@D..CD..@
    5868:	p..Cp..@t..Ct..@
    5878:	h..Ch..@P..CP..@
    5888:	X..CX..@\..C\..@
    5898:	T..CT..@ ..C ..@
    58a8:	$..C$..@...C...@
    58b8:	...C...@8..C8..@
    58c8:	4..C4..@0..C0..@
    58d8:	<..C<..@,..C,..@
    58e8:	( .C(..@, .C,..@
    58f8:	. .C...@. .C...@
    5908:	. .C...@. .C...@
    5918:	. .C...@. .C...@

00005928 <vtable for usb_serial_class>:
	...
    5930:	.A...@...@...@..
    5940:	.@...@...@...@..
    5950:	....

00005954 <usb_endpoint_config_table>:
    5954:	........

0000595c <usb_descriptor_list>:
    595c:	................
    596c:	............`...
    597c:	................
    598c:	....H...........
    599c:	d...............
    59ac:	....

000059b0 <_global_impure_ptr>:
    59b0:	....

000059b4 <_init>:
    59b4:	push	{r3, r4, r5, r6, r7, lr}
    59b6:	nop
    59b8:	pop	{r3, r4, r5, r6, r7}
    59ba:	pop	{r3}
    59bc:	mov	lr, r3
    59be:	bx	lr

000059c0 <__init_array_start>:
    59c0:	.word	0x000052dd

000059c4 <__frame_dummy_init_array_entry>:
    59c4:	5...1"..

Disassembly of section .fini:

000059cc <_fini>:
    59cc:	push	{r3, r4, r5, r6, r7, lr}
    59ce:	nop

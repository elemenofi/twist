
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00005a90 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15bc l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00004700 l     F .text	0000000c startup_default_early_hook
0000470c l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15bc l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15c0 l       .bss	00000000 object.8610
00005a88 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
0000234c l     F .text	00000338 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff18f5 l     O .bss	00000001 tx_noautoflush
1fff18f8 l     O .bss	00000004 tx_packet
1fff18fc l     O .bss	00000001 transmit_previous_timeout
1fff1900 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00002958 l     F .text	00000144 wait_for_cal
1fff1905 l     O .bss	00000001 analog_right_shift
1fff1906 l     O .bss	00000001 calibrating
000057a4 l     O .text	00000048 pin2sc1a
1fff0c68 l     O .data	00000001 analog_config_bits
1fff1907 l     O .bss	00000001 analogReadBusyADC1
1fff1908 l     O .bss	00000001 analogReadBusyADC0
1fff1909 l     O .bss	00000001 analog_reference_internal
1fff0c69 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00002c78 l     F .text	0000004c digitalWrite.part.1
00002cc4 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002fa4 l     F .text	00000048 sysex_byte
1fff1924 l     O .bss	00000001 tx_noautoflush
1fff1950 l     O .bss	00000004 tx_packet
1fff1954 l     O .bss	00000001 transmit_previous_timeout
1fff195c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c6c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1970 l     O .bss	00000004 ep0_tx_ptr
1fff1974 l     O .bss	00000014 rx_last
1fff1988 l     O .bss	00000002 ep0_tx_len
1fff198c l     O .bss	00000040 ep0_rx0_buf
1fff19cc l     O .bss	00000014 rx_first
1fff19e0 l     O .bss	00000001 ep0_tx_data_toggle
1fff19e4 l     O .bss	00000040 ep0_rx1_buf
1fff1a24 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff1a38 l     O .bss	00000014 tx_last
1fff1a4c l     O .bss	00000008 setup
1fff1a54 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1a58 l     O .bss	00000008 reply_buffer
1fff1a64 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1a69 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1a6c l     O .bss	00000004 rts_pin
1fff1a70 l     O .bss	00000001 rx_buffer_head
1fff1a71 l     O .bss	00000001 rx_buffer_tail
1fff1a74 l     O .bss	00000028 tx_buffer
1fff1a9c l     O .bss	00000040 rx_buffer
1fff1adc l     O .bss	00000001 transmitting
1fff1add l     O .bss	00000001 tx_buffer_tail
1fff1ae0 l     O .bss	00000004 transmit_pin
1fff1ae4 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1ae8 l     O .bss	00000004 rts_pin
1fff1aec l     O .bss	00000001 transmitting
1fff1aed l     O .bss	00000001 rx_buffer_tail
1fff1af0 l     O .bss	00000028 tx_buffer
1fff1b18 l     O .bss	00000040 rx_buffer
1fff1b58 l     O .bss	00000001 rx_buffer_head
1fff1b59 l     O .bss	00000001 tx_buffer_tail
1fff1b5c l     O .bss	00000004 transmit_pin
1fff1b60 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1b64 l     O .bss	00000004 rts_pin
1fff1b68 l     O .bss	00000001 rx_buffer_head
1fff1b69 l     O .bss	00000001 rx_buffer_tail
1fff1b6c l     O .bss	00000028 tx_buffer
1fff1b94 l     O .bss	00000040 rx_buffer
1fff1bd4 l     O .bss	00000001 transmitting
1fff1bd5 l     O .bss	00000001 tx_buffer_tail
1fff1bd8 l     O .bss	00000004 transmit_pin
1fff1bdc l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1be0 l     O .bss	00000004 rts_pin
1fff1be4 l     O .bss	00000001 rx_buffer_head
1fff1be5 l     O .bss	00000001 rx_buffer_tail
1fff1be8 l     O .bss	00000040 tx_buffer
1fff1c28 l     O .bss	00000040 rx_buffer
1fff1c68 l     O .bss	00000001 transmitting
1fff1c69 l     O .bss	00000001 tx_buffer_tail
1fff1c6c l     O .bss	00000004 transmit_pin
1fff1c70 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1c74 l     O .bss	00000004 rts_pin
1fff1c78 l     O .bss	00000001 rx_buffer_head
1fff1c79 l     O .bss	00000001 rx_buffer_tail
1fff1c7c l     O .bss	00000028 tx_buffer
1fff1ca4 l     O .bss	00000040 rx_buffer
1fff1ce4 l     O .bss	00000001 transmitting
1fff1ce5 l     O .bss	00000001 tx_buffer_tail
1fff1ce8 l     O .bss	00000004 transmit_pin
1fff1cec l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c84 l     O .data	00000012 device_descriptor
1fff0cb0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1cf0 l     O .bss	00000004 rts_pin
1fff1cf4 l     O .bss	00000001 rx_buffer_head
1fff1cf5 l     O .bss	00000001 rx_buffer_tail
1fff1cf8 l     O .bss	00000028 tx_buffer
1fff1d20 l     O .bss	00000040 rx_buffer
1fff1d60 l     O .bss	00000001 transmitting
1fff1d61 l     O .bss	00000001 tx_buffer_tail
1fff1d64 l     O .bss	00000004 transmit_pin
1fff1d68 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000053a0 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d80 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15bc l       .bss	00000000 __bss_start__
1fff1f04 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
000046f8  w    F .text	00000006 adc0_isr
000026fc g     F .text	0000001c usb_serial_available
000045b8 g     F .text	00000020 serial4_available
000041d0  w    F .text	000000c4 yield
1fff0c98 g     O .data	00000018 usb_string_manufacturer_name_default
000047a4 g     F .text	00000020 serial_available
1fff1928 g     O .bss	00000004 usb_midi_handleProgramChange
1fff1768 g     O .bss	0000003c sequence
000046b0  w    F .text	00000048 hard_fault_isr
000046f8  w    F .text	00000006 dma_ch6_isr
000042c4 g     F .text	00000020 Print::println()
0000448c g     F .text	00000020 serial2_available
000046f8  w    F .text	00000006 uart0_lon_isr
000035e4 g     F .text	000000e8 usb_rx_memory
00004294  w    F .text	00000002 serialEvent5()
000046f8  w    F .text	00000006 dma_ch8_isr
000048d0 g     F .text	00000020 serial6_available
00005378 g     F .text	00000002 __malloc_unlock
1fff193c g     O .bss	00000004 usb_midi_handleAfterTouch
00002a9c g     F .text	000000e0 analog_init
000036cc g     F .text	00000084 usb_tx
000046f8  w    F .text	00000006 portcd_isr
1fff194c g     O .bss	00000004 usb_midi_handleSysExComplete
00004cf0 g     F .text	00000098 MillisTimer::runFromTimer()
000046f8  w    F .text	00000006 can1_rx_warn_isr
00005a94 g       .fini	00000000 __exidx_end
000046f8  w    F .text	00000006 dma_error_isr
1fff1dc8 g     O .bss	00000001 usb_midi_msg_type
1fff1d80 g     O .bss	00000001 EventResponder::runningFromYield
000046f8  w    F .text	00000006 i2c0_isr
00004d98 g     F .text	0000000c __errno
000046f8  w    F .text	00000006 portd_isr
000046f8  w    F .text	00000006 enet_error_isr
1fff1d6c g     O .bss	00000004 EventResponder::firstInterrupt
000046f8  w    F .text	00000006 tpm1_isr
000042b0  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000057ec g     O .text	00000200 digital_pin_to_info_PGM
1fff1f00 g     O .bss	00000004 errno
00005a94 g       .fini	00000000 _etext
1fff15bc g       .bss	00000000 _sbss
0000438c  w    F .text	00000002 serialEvent6()
1fff1938 g     O .bss	00000004 usb_midi_handleVelocityChange
00002d6c g     F .text	0000001c digitalRead
000046f8  w    F .text	00000006 porte_isr
000007d0 g     F .text	00001b7c loop
000046f8  w    F .text	00000006 portb_isr
1fff17cc g     O .bss	00000014 step3
00003088 g     F .text	0000002c usb_midi_flush_output
000046f8  w    F .text	00000006 spi1_isr
000045d8 g     F .text	000000d8 uart3_status_isr
00004b9c  w    F .text	00000002 serialEvent1()
1fff18dc g     O .bss	00000018 led4
000046f8  w    F .text	00000006 mcm_isr
00004c88 g     F .text	00000068 MillisTimer::addToActiveList()
000030b4 g     F .text	0000043c usb_midi_read
1fff1914 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1d70 g     O .bss	00000004 EventResponder::lastInterrupt
000044ac g     F .text	0000010c uart1_status_isr
1fff1dca g     O .bss	00000002 usb_midi_msg_sysex_len
000046f8  w    F .text	00000006 randnum_isr
1fff191c g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff190c g     O .bss	00000004 systick_millis_count
000046b0  w    F .text	00000048 bus_fault_isr
000046f8  w    F .text	00000006 watchdog_isr
000046f8  w    F .text	00000006 i2c1_isr
1fff1a60 g     O .bss	00000001 usb_configuration
000046f8  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00004374  w    F .text	00000002 serialEvent2()
000046f8  w    F .text	00000006 i2c2_isr
1fff0c98  w    O .data	00000018 usb_string_manufacturer_name
1fff1ef4 g     O .bss	0000000a usb_rx_byte_count_data
000046f8  w    F .text	00000006 pit1_isr
00004df4 g     F .text	00000010 malloc
000046f8  w    F .text	00000006 dma_ch4_isr
000046f8  w    F .text	00000006 software_isr
000046f8  w    F .text	00000006 dma_ch7_isr
00004c24  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00004100 g     F .text	000000d0 usb_init
000046f8  w    F .text	00000006 lptmr_isr
1fff1d90 g     O .bss	00000004 __malloc_top_pad
00002d3c g     F .text	00000024 rtc_set
1fff16f8 g     O .bss	00000038 button5
1fff16c0 g     O .bss	00000038 button4
1fff0c40 g       .data	00000000 _sdata
1fff196c g     O .bss	00000004 usb_midi_handleNoteOn
00004770 g     F .text	00000034 kinetis_hsrun_enable
0000537c g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00002684 g     F .text	00000048 usb_serial_getchar
000046f8  w    F .text	00000006 can1_bus_off_isr
000046f8  w    F .text	00000006 ftm2_isr
1fff1dbc g     O .bss	00000008 usb_cdc_line_coding
00002d60 g     F .text	0000000a digitalWrite
000046f8  w    F .text	00000006 uart5_status_isr
000048f0 g     F .text	000000e4 lpuart0_status_isr
1fff1d78 g     O .bss	00000004 EventResponder::lastYield
00005a18 g     O .text	00000005 usb_endpoint_config_table
000046f8  w    F .text	00000006 dma_ch9_isr
000046f8  w    F .text	00000006 pit2_isr
00004aa4 g     F .text	00000020 serial3_available
1fff17e0 g     O .bss	00000014 step4
1fff1d8c g     O .bss	00000004 __malloc_max_sbrked_mem
00002d88 g     F .text	0000000a pinMode
00003530 g     F .text	0000004c usb_free
000046f8  w    F .text	00000006 i2c3_isr
1fff1894 g     O .bss	00000018 led1
1fff1934 g     O .bss	00000004 usb_midi_handleSysExPartial
00005a94 g       .fini	00000000 __exidx_start
000046f8  w    F .text	00000006 pit0_isr
1fff1dcc g     O .bss	00000001 usb_midi_msg_data1
1fff1d7c g     O .bss	00000004 EventResponder::firstYield
00005a74 g     O .text	00000004 _global_impure_ptr
000046f8  w    F .text	00000006 can1_error_isr
00004da4 g     F .text	00000050 __libc_init_array
1fff1f04 g       .bss	00000000 __bss_end
000046f8  w    F .text	00000006 can0_wakeup_isr
000046f8  w    F .text	00000006 flash_cmd_isr
1fff1864 g     O .bss	0000001c knob5
00004298  w    F .text	00000004 usb_serial_class::clear()
00004ac4 g     F .text	000000d8 uart2_status_isr
00004710 g     F .text	0000002c _sbrk
1fff1d84 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c80 g     O .data	00000004 __brkval
1fff1904 g     O .bss	00000001 usb_cdc_line_rtsdtr
00002910 g     F .text	00000048 usb_serial_flush_callback
00005a78 g     F .text	00000000 _init
1fff0c40 g     O .data	00000010 steps
000046f8  w    F .text	00000006 svcall_isr
000046f8  w    F .text	00000006 dma_ch15_isr
000046f8  w    F .text	00000006 uart1_error_isr
000053c0 g     F .text	00000028 __libc_fini_array
000046f8  w    F .text	00000006 usbhs_phy_isr
1fff1f04 g       .bss	00000000 _ebss
000046f8 g     F .text	00000006 unused_isr
000046f8  w    F .text	00000006 spi0_isr
000046f8  w    F .text	00000006 dma_ch3_isr
000046f8  w    F .text	00000006 flash_error_isr
1fff1810 g     O .bss	0000001c knob2
00004394 g     F .text	00000020 serial5_available
000046f8  w    F .text	00000006 uart5_error_isr
000046f8  w    F .text	00000006 rtc_seconds_isr
000046f8  w    F .text	00000006 pdb_isr
000046b0  w    F .text	00000048 usage_fault_isr
000046f8  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
000046f8  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1dc4 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff1880 g     O .bss	00000010 transport
1fff0c50 g     O .data	00000018 leds
00004d88 g     F .text	00000010 systick_isr
000046f8  w    F .text	00000006 rtc_alarm_isr
000046f8  w    F .text	00000006 dma_ch2_isr
1fff0c70 g     O .data	00000010 Serial
000046f8  w    F .text	00000006 ftm1_isr
000042b8  w    F .text	00000006 usb_serial_class::write(unsigned char)
00004700  w    F .text	0000000c startup_early_hook
000046f8  w    F .text	00000006 dma_ch13_isr
000046f8  w    F .text	00000006 uart2_error_isr
000026cc g     F .text	00000030 usb_serial_peekchar
00000490  w    F .text	00000034 Led::blink(int)
1fff0d64 g     O .data	00000016 usb_string_serial_number_default
000046b0 g     F .text	00000048 fault_isr
00005484 g     F .text	000001d0 _free_r
1fff1958 g     O .bss	00000004 usb_midi_handleStop
000046f8  w    F .text	00000006 usb_charge_isr
000042a8  w    F .text	00000004 usb_serial_class::flush()
000046f8  w    F .text	00000006 cmt_isr
000046f8  w    F .text	00000006 usbhs_isr
1fff1968 g     O .bss	00000004 usb_midi_handleControlChange
1fff15b8 g     O .data	00000004 __malloc_sbrk_base
000042a0  w    F .text	00000004 usb_serial_class::read()
000046f8  w    F .text	00000006 ftm3_isr
000046f8  w    F .text	00000006 tsi0_isr
1fff15f0 g     O .bss	00000018 led6
1fff17f4 g     O .bss	0000001c knob1
000046f8  w    F .text	00000006 spi2_isr
00004378  w    F .text	00000002 serialEvent4()
000042c0  w    F .text	00000002 serialEvent()
1fff19e1 g     O .bss	00000001 usb_reboot_timer
00005654 g     F .text	000000a4 __register_exitproc
00002718 g     F .text	00000038 usb_serial_flush_input
00002858 g     F .text	00000018 usb_serial_putchar
1fff1d94 g     O .bss	00000028 __malloc_current_mallinfo
000046f8  w    F .text	00000006 can0_bus_off_isr
1fff15d8 g     O .bss	00000018 led5
1fff1a55 g     O .bss	00000001 usb_rx_memory_needed
00003750 g     F .text	000009b0 usb_isr
1fff17a4 g     O .bss	00000014 step1
1fff1964 g     O .bss	00000004 usb_midi_handleNoteOff
000059ec  w    O .text	00000028 vtable for usb_serial_class
1fff182c g     O .bss	0000001c knob3
000046f8  w    F .text	00000006 uart3_error_isr
1fff1d74 g     O .bss	00000004 MillisTimer::listActive
000046f8  w    F .text	00000006 porta_isr
1fff1608 g     O .bss	00000010 controller
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
000046f8  w    F .text	00000006 low_voltage_isr
1fff1650 g     O .bss	00000038 button2
1fff11ac g     O .data	00000408 __malloc_av_
000046f8  w    F .text	00000006 can0_error_isr
00002e38 g     F .text	0000016c _init_Teensyduino_internal_
000028b8 g     F .text	00000058 usb_serial_flush_output
000046f8  w    F .text	00000006 dma_ch12_isr
00005374 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
000046f8  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
000046f8  w    F .text	00000006 pit3_isr
000046f8  w    F .text	00000006 enet_rx_isr
000046f8  w    F .text	00000006 portc_isr
0000437c g     F .text	00000010 main
1fff1d88 g     O .bss	00000004 __malloc_max_total_mem
1fff18c4 g     O .bss	00000018 led3
000046b0  w    F .text	00000048 memmanage_fault_isr
000049d4 g     F .text	00000084 usb_init_serialnumber
1fff1890 g     O .bss	00000001 currentMode
00005a90 g       .text	00000000 __init_array_end
00004e04 g     F .text	00000570 _malloc_r
000046f8  w    F .text	00000006 debugmonitor_isr
1fff1930 g     O .bss	00000004 usb_midi_handleSongPosition
00004ba4 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1920 g     O .bss	00000004 usb_midi_handleContinue
1fff1dcd g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
000046f8  w    F .text	00000006 cmp1_isr
1fff1688 g     O .bss	00000038 button3
000046f8  w    F .text	00000006 ftm0_isr
000053e8 g     F .text	0000009c _malloc_trim_r
1fff0d60 g     O .data	00000004 string0
00002750 g     F .text	00000108 usb_serial_write
0000470c  w    F .text	00000002 startup_late_hook
000042a4  w    F .text	00000004 usb_serial_class::available()
1fff1dce g     O .bss	00000001 usb_midi_msg_cable
1fff0d48  w    O .data	00000018 usb_string_product_name
000004c4  w    F .text	00000308 Button::check()
00002d94 g     F .text	000000a4 delay
000046f8  w    F .text	00000006 tpm0_isr
00005a90 g     F .fini	00000000 _fini
1fff17b8 g     O .bss	00000014 step2
000046f8  w    F .text	00000006 i2s0_rx_isr
000046f8  w    F .text	00000006 uart4_error_isr
00004364 g     F .text	00000010 Print::print(long)
00002fec g     F .text	0000009c usb_midi_write_packed
000053b4 g     F .text	0000000c atexit
000046f8  w    F .text	00000006 can0_message_isr
1fff11a8 g     O .data	00000004 _impure_ptr
000046f8  w    F .text	00000006 can1_message_isr
000046f8  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1948 g     O .bss	00000004 usb_midi_handleTuneRequest
00005a84 g       .text	00000000 __preinit_array_end
000046f8  w    F .text	00000006 sdhc_isr
1fff1dcf g     O .bss	00000001 usb_midi_msg_channel
000007cc g     F .text	00000002 setup
00005a20 g     O .text	00000054 usb_descriptor_list
0000357c g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1848 g     O .bss	0000001c knob4
000046f8  w    F .text	00000006 dma_ch10_isr
1fff1940 g     O .bss	00000004 usb_midi_handleStart
000046f8  w    F .text	00000006 uart0_error_isr
000034f0 g     F .text	00000040 usb_malloc
000046f8  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00002870 g     F .text	00000048 usb_serial_write_buffer_free
000046f8  w    F .text	00000006 enet_timer_isr
1fff1730 g     O .bss	00000038 button6
1fff1618 g     O .bss	00000038 button1
1fff15bc g       .data	00000000 _edata
000046f8  w    F .text	00000006 i2s0_tx_isr
000046f8  w    F .text	00000006 adc1_isr
000042ac  w    F .text	00000004 usb_serial_class::availableForWrite()
000046f8  w    F .text	00000006 cmp0_isr
1fff1910 g     O .bss	00000004 usb_midi_handleClock
00004a58 g     F .text	0000004c ultoa
00004390 g     F .text	00000004 operator new(unsigned int)
00004c40 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15b4 g     O .data	00000004 __malloc_trim_threshold
0000429c  w    F .text	00000004 usb_serial_class::peek()
1fff18f4 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff192c g     O .bss	00000004 usb_midi_handlePitchChange
000046f8  w    F .text	00000006 pit_isr
1fff1944 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
000046f8  w    F .text	00000006 dac0_isr
00005a84 g       .text	00000000 __init_array_start
000046f8  w    F .text	00000006 can1_tx_warn_isr
00002b7c g     F .text	000000fc analogRead
1fff1dd0 g     O .bss	00000122 usb_midi_msg_sysex
000047c4 g     F .text	0000010c uart0_status_isr
000046f8  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d48 g     O .data	00000018 usb_string_product_name_default
000046f8  w    F .text	00000006 dma_ch1_isr
000035b8 g     F .text	0000002c usb_tx_packet_count
000046f8  w    F .text	00000006 dma_ch5_isr
000046f8  w    F .text	00000006 can0_rx_warn_isr
000046f8  w    F .text	00000006 can0_tx_warn_isr
000043b4 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000473c g     F .text	00000034 kinetis_hsrun_disable
00005a84 g       .text	00000000 __preinit_array_start
00004ba0  w    F .text	00000002 serialEvent3()
1fff1960 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff18ac g     O .bss	00000018 led2
000046f8  w    F .text	00000006 cmp2_isr
00004c84 g     F .text	00000004 pendablesrvreq_isr
000046f8  w    F .text	00000006 wakeup_isr
000046f8  w    F .text	00000006 cmp3_isr
000042e4 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
1fff1918 g     O .bss	00000004 usb_midi_handleActiveSensing
000046f8  w    F .text	00000006 tpm2_isr
000046f8  w    F .text	00000006 dma_ch0_isr
1fff0d64  w    O .data	00000016 usb_string_serial_number
000046f8  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
  free(ptr);
}

void operator delete[](void * ptr)
{
  free(ptr);
       0:	... .....F...F..
      10:	.F...F...F...F..
      20:	.F...F...F...F..
      30:	.F...F...L...M..
      40:	.F...F...F...F..
      50:	.F...F...F...F..
      60:	.F...F...F...F..
      70:	.F...F...F...F..
      80:	.F...F...F...F..
      90:	.F...F...F...F..
      a0:	.F...F...F...F..
      b0:	.F...F...F...G..
      c0:	.F...D...F...J..
      d0:	.F...E...F...F..
      e0:	.F...F...F...F..
      f0:	.F...F...F...F..
     100:	.F...F...F...F..
     110:	.F..Q7...F...F..
     120:	.F...F...F...F..
     130:	.F...F...F...F..
     140:	.F...F...C...F..
     150:	.F...F...F...F..
     160:	.F...F...F...F..
     170:	.F...F...F...F..
     180:	.F...F...F...F..
     190:	.F...F...H...F..
     1a0:	.F...F...F...F..
     1b0:	.F...F...F...F..
     1c0:	.F...F...F...F..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	4700 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	2e38 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	2d3c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	2d3c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	4da4 <__libc_init_array>

	startup_late_hook();
     33a:	bl	470c <startup_late_hook>
	main();
     33e:	bl	437c <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15bc
     374:	.word	0x00005a90
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15bc
     380:	.word	0x1fff1f04
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15bc
     42c:	.word	0x00000000
     430:	.word	0x00005a94

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15c0
     460:	.word	0x00005a94
     464:	.word	0x1fff15bc
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #75	; 0x4b
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	2d88 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	2d60 <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <Led::blink(int)>:

    void blink (int times = 0) {
     490:	push	{r4, r5, r6, lr}
      digitalWrite(m_pin, !digitalRead(m_pin));
     492:	ldrb	r5, [r0, #0]

      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
     494:	sub	sp, #8
     496:	mov	r4, r0
      digitalWrite(m_pin, !digitalRead(m_pin));
     498:	mov	r0, r5

      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
     49a:	mov	r6, r1
      digitalWrite(m_pin, !digitalRead(m_pin));
     49c:	bl	2d6c <digitalRead>
     4a0:	clz	r1, r0
     4a4:	lsrs	r1, r1, #5
     4a6:	mov	r0, r5
     4a8:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ac:	ldr	r3, [pc, #16]	; (4c0 <Led::blink(int)+0x30>)
      blinking = true;
      blinkingCounter = times;
     4ae:	str	r6, [r4, #20]
     4b0:	ldr	r3, [r3, #0]
     4b2:	str	r3, [sp, #4]
	return ret;
     4b4:	ldr	r3, [sp, #4]
      lastBlink = millis();  
     4b6:	str	r3, [r4, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     4b8:	movs	r2, #1
     4ba:	strb	r2, [r4, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    };
     4bc:	add	sp, #8
     4be:	pop	{r4, r5, r6, pc}
     4c0:	.word	0x1fff190c

000004c4 <Button::check()>:

    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
     4c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     4c8:	mov	r4, r0
     4ca:	sub	sp, #60	; 0x3c
      current = digitalRead(m_pin);
     4cc:	ldrb.w	r0, [r0, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4d0:	ldr	r6, [pc, #660]	; (768 <Button::check()+0x2a4>)
     4d2:	bl	2d6c <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     4d6:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     4d8:	mov	r5, r0
     4da:	str	r0, [r4, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     4dc:	ldrb.w	r7, [r4, #36]	; 0x24
     4e0:	beq.n	5a2 <Button::check()+0xde>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     4e2:	cmp	r7, r5
     4e4:	beq.n	59e <Button::check()+0xda>
     4e6:	ldr	r3, [r6, #0]
     4e8:	str	r3, [sp, #32]
	return ret;
     4ea:	ldr	r3, [sp, #32]
        m_lastDebounceTime = millis();
     4ec:	str	r3, [r4, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ee:	ldr	r2, [r6, #0]
     4f0:	str	r2, [sp, #28]
	return ret;
     4f2:	ldr	r2, [sp, #28]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4f4:	ldr	r7, [pc, #624]	; (768 <Button::check()+0x2a4>)
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     4f6:	cmp	r2, r3
     4f8:	beq.n	512 <Button::check()+0x4e>
        // and the current changed
        if (current != m_state) {
     4fa:	ldr	r3, [r4, #4]
     4fc:	cmp	r5, r3
     4fe:	beq.n	512 <Button::check()+0x4e>
     500:	ldr	r3, [r7, #0]
     502:	str	r3, [sp, #36]	; 0x24
	return ret;
     504:	ldr	r3, [sp, #36]	; 0x24
     506:	ldr	r1, [r4, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     508:	ldr	r2, [r4, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     50a:	str	r5, [r4, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     50c:	subs	r3, r3, r1
     50e:	cmp	r2, r3
     510:	bhi.n	556 <Button::check()+0x92>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     512:	cbnz	r5, 51c <Button::check()+0x58>
     514:	ldrb.w	r3, [r4, #36]	; 0x24
     518:	cmp	r3, #1
     51a:	beq.n	526 <Button::check()+0x62>
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     51c:	strb.w	r5, [r4, #36]	; 0x24
    };
     520:	add	sp, #60	; 0x3c
     522:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     526:	ldr	r3, [r6, #0]
     528:	str	r3, [sp, #40]	; 0x28
	return ret;
     52a:	ldr	r3, [sp, #40]	; 0x28
     52c:	ldr	r1, [r4, #40]	; 0x28

      if (debounced && timeSincePress() < m_holdThreshold) {
        onPress();
      }
 
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
     52e:	ldr	r2, [r4, #48]	; 0x30
     530:	subs	r3, r3, r1
     532:	cmp	r2, r3
     534:	bhi.n	51c <Button::check()+0x58>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     536:	movs	r1, #9
     538:	ldr	r0, [pc, #560]	; (76c <Button::check()+0x2a8>)
     53a:	bl	2750 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     53e:	ldr	r0, [pc, #560]	; (770 <Button::check()+0x2ac>)
     540:	bl	42c4 <Print::println()>
    void enterShiftMode () {
      m_shiftMode = true;
    };

    void exitShiftMode () {
      m_shiftMode = false;
     544:	ldr	r3, [r4, #28]
     546:	strb.w	r5, [r3, #46]	; 0x2e
     54a:	ldr	r5, [r4, #32]
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     54c:	strb.w	r5, [r4, #36]	; 0x24
    };
     550:	add	sp, #60	; 0x3c
     552:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
     556:	ldr	r3, [r4, #28]
     558:	ldr	r0, [pc, #536]	; (774 <Button::check()+0x2b0>)
     55a:	ldr	r5, [r3, #52]	; 0x34
     55c:	movs	r1, #7
     55e:	bl	2750 <usb_serial_write>
     562:	ldr	r0, [pc, #524]	; (770 <Button::check()+0x2ac>)
     564:	bl	42c4 <Print::println()>
      // Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
     568:	ldr	r3, [r4, #4]
     56a:	cmp	r3, #0
     56c:	bne.n	668 <Button::check()+0x1a4>
     56e:	ldrb	r3, [r4, #16]
     570:	cmp	r3, #0
     572:	beq.w	680 <Button::check()+0x1bc>
        if (m_sequence.getShiftMode()) {
     576:	ldr.w	r8, [r4, #28]
     57a:	ldrb.w	r3, [r8, #46]	; 0x2e
     57e:	cmp	r3, #0
     580:	beq.w	708 <Button::check()+0x244>
    void nextPage () {
      if (m_page < 4) m_page++;
    };

    void previousPage () {
      if (m_page > 1) m_page--;
     584:	ldr	r1, [r5, #4]
     586:	cmp	r1, #1
     588:	ble.n	58e <Button::check()+0xca>
     58a:	subs	r1, #1
     58c:	str	r1, [r5, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     58e:	ldr	r0, [pc, #480]	; (770 <Button::check()+0x2ac>)
     590:	bl	4364 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     594:	ldr	r0, [pc, #472]	; (770 <Button::check()+0x2ac>)
     596:	bl	42c4 <Print::println()>
     59a:	ldr	r5, [r4, #32]
     59c:	b.n	512 <Button::check()+0x4e>
     59e:	ldr	r3, [r4, #20]
     5a0:	b.n	4ee <Button::check()+0x2a>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     5a2:	cbnz	r7, 5f2 <Button::check()+0x12e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5a4:	ldr	r3, [r6, #0]
     5a6:	str	r3, [sp, #20]
     5a8:	ldr	r2, [r4, #40]	; 0x28
	return ret;
     5aa:	ldr	r3, [sp, #20]
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
     5ac:	subs	r3, r3, r2
     5ae:	cmp	r3, #200	; 0xc8
     5b0:	bls.n	4e6 <Button::check()+0x22>
        firstTime = millis();
        m_led.blink();
     5b2:	ldr.w	r8, [r4, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5b6:	ldr	r3, [r6, #0]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     5b8:	ldrb.w	r9, [r8]
     5bc:	str	r3, [sp, #12]
	return ret;
     5be:	ldr	r3, [sp, #12]
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
     5c0:	str	r3, [r4, #40]	; 0x28
     5c2:	mov	r0, r9
     5c4:	bl	2d6c <digitalRead>
     5c8:	clz	r1, r0
     5cc:	lsrs	r1, r1, #5
     5ce:	mov	r0, r9
     5d0:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d4:	ldr	r3, [r6, #0]
      blinking = true;
      blinkingCounter = times;
     5d6:	str.w	r7, [r8, #20]
     5da:	str	r3, [sp, #44]	; 0x2c
     5dc:	ldr	r3, [r4, #32]
	return ret;
     5de:	ldr	r2, [sp, #44]	; 0x2c
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     5e0:	strb.w	r5, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
     5e4:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
     5e8:	cmp	r3, #1
     5ea:	ldrb.w	r7, [r4, #36]	; 0x24
     5ee:	bne.w	7be <Button::check()+0x2fa>
     5f2:	cmp	r7, #1
     5f4:	bne.w	4e2 <Button::check()+0x1e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5f8:	ldr	r3, [r6, #0]
     5fa:	str	r3, [sp, #24]
	return ret;
     5fc:	ldr	r3, [sp, #24]
     5fe:	ldr	r1, [r4, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
     600:	ldr	r2, [r4, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     602:	ldr	r0, [pc, #356]	; (768 <Button::check()+0x2a4>)
     604:	subs	r3, r3, r1
     606:	cmp	r2, r3
     608:	bcs.n	59e <Button::check()+0xda>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
     60a:	ldr	r3, [r4, #28]
     60c:	ldr	r2, [r0, #0]
     60e:	str	r2, [sp, #16]
     610:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
     614:	ldr	r1, [sp, #16]
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
     616:	str	r1, [r4, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
     618:	cbz	r2, 66c <Button::check()+0x1a8>
      Serial.println("Inited Sequence");
      Serial.println(m_paginator->getPage());
    };

    void enterShiftMode () {
      m_shiftMode = true;
     61a:	movs	r2, #1
     61c:	strb.w	r2, [r3, #46]	; 0x2e
     620:	ldrb.w	r7, [r4, #36]	; 0x24
     624:	b.n	4e2 <Button::check()+0x1e>
     626:	movs	r1, #8
    }

    void toggleGlobalMode () {
            
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
     628:	mov.w	r9, #1
     62c:	ldr	r0, [pc, #328]	; (778 <Button::check()+0x2b4>)
     62e:	strb.w	r9, [r5]
     632:	bl	2750 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     636:	ldr	r0, [pc, #312]	; (770 <Button::check()+0x2ac>)
     638:	bl	42c4 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
     63c:	ldr.w	r5, [r8, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     640:	ldrb.w	r8, [r5]
     644:	mov	r0, r8
     646:	bl	2d6c <digitalRead>
     64a:	clz	r1, r0
     64e:	lsrs	r1, r1, #5
     650:	mov	r0, r8
     652:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     656:	ldr	r3, [r7, #0]
     658:	str	r3, [sp, #48]	; 0x30
      blinking = true;
      blinkingCounter = times;
     65a:	movw	r3, #999	; 0x3e7
     65e:	str	r3, [r5, #20]
	return ret;
     660:	ldr	r3, [sp, #48]	; 0x30
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     662:	strb.w	r9, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
     666:	str	r3, [r5, #8]
     668:	ldr	r5, [r4, #32]
     66a:	b.n	512 <Button::check()+0x4e>
     66c:	movs	r1, #6
     66e:	ldr	r0, [pc, #268]	; (77c <Button::check()+0x2b8>)
     670:	bl	2750 <usb_serial_write>
     674:	ldr	r0, [pc, #248]	; (770 <Button::check()+0x2ac>)
     676:	bl	42c4 <Print::println()>
     67a:	ldr	r3, [r4, #28]
     67c:	ldr	r5, [r4, #32]
     67e:	b.n	61a <Button::check()+0x156>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
     680:	ldrb	r3, [r4, #17]
     682:	cbz	r3, 698 <Button::check()+0x1d4>
     684:	ldr	r3, [r4, #28]
        if (m_sequence.getShiftMode()) {
     686:	ldrb.w	r3, [r3, #46]	; 0x2e
     68a:	cbz	r3, 6d2 <Button::check()+0x20e>
    int getPage () {
      return m_page;
    }

    void nextPage () {
      if (m_page < 4) m_page++;
     68c:	ldr	r1, [r5, #4]
     68e:	cmp	r1, #3
     690:	itt	le
     692:	addle	r1, #1
     694:	strle	r1, [r5, #4]
     696:	b.n	58e <Button::check()+0xca>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
     698:	ldr	r5, [r4, #24]
    };

    void toggle () {
      m_state = !m_state;
     69a:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
     69c:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     69e:	clz	r1, r1
     6a2:	lsrs	r1, r1, #5
     6a4:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
     6a6:	bl	2d60 <digitalWrite>

      if (blinking) {
     6aa:	ldrb	r3, [r5, #16]
     6ac:	cbnz	r3, 6c2 <Button::check()+0x1fe>
        m_sequence.m_steps[m_id - 1]->toggle();
     6ae:	ldr	r3, [r4, #28]
     6b0:	ldr	r2, [r4, #0]
     6b2:	ldr	r5, [r4, #32]
     6b4:	ldr.w	r2, [r3, r2, lsl #2]
      m_velocity = 100;
      m_length = 4;
    };

    void toggle () {
      m_state = !m_state;
     6b8:	ldrb	r3, [r2, #4]
     6ba:	eor.w	r3, r3, #1
     6be:	strb	r3, [r2, #4]
     6c0:	b.n	512 <Button::check()+0x4e>
        digitalWrite(m_pin, !m_state);
     6c2:	ldr	r1, [r5, #4]
     6c4:	ldrb	r0, [r5, #0]
     6c6:	clz	r1, r1
     6ca:	lsrs	r1, r1, #5
     6cc:	bl	2d60 <digitalWrite>
     6d0:	b.n	6ae <Button::check()+0x1ea>
      } else if (m_state == LOW && m_reverseButton) {
        if (m_sequence.getShiftMode()) {
          paginator->nextPage();
          Serial.println(paginator->getPage());
        } else {
          m_led.toggle();
     6d2:	ldr	r5, [r4, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     6d4:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
     6d6:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     6d8:	clz	r1, r1
     6dc:	lsrs	r1, r1, #5
     6de:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
     6e0:	bl	2d60 <digitalWrite>

      if (blinking) {
     6e4:	ldrb	r3, [r5, #16]
     6e6:	cbz	r3, 6f6 <Button::check()+0x232>
        digitalWrite(m_pin, !m_state);
     6e8:	ldr	r1, [r5, #4]
     6ea:	ldrb	r0, [r5, #0]
     6ec:	clz	r1, r1
     6f0:	lsrs	r1, r1, #5
     6f2:	bl	2d60 <digitalWrite>
     6f6:	ldr	r2, [r4, #28]
     6f8:	ldr	r5, [r4, #32]
    void resetStep () {
      m_currentStep = 0;
    };

    void reverse () {
      m_reverse = !m_reverse;
     6fa:	ldrb.w	r3, [r2, #45]	; 0x2d
     6fe:	eor.w	r3, r3, #1
     702:	strb.w	r3, [r2, #45]	; 0x2d
     706:	b.n	512 <Button::check()+0x4e>
      return m_shiftMode;
    }

    void toggleGlobalMode () {
            
      if (currentMode == PITCH) {
     708:	ldr	r5, [pc, #116]	; (780 <Button::check()+0x2bc>)
     70a:	ldrb	r2, [r5, #0]
     70c:	cmp	r2, #0
     70e:	beq.n	626 <Button::check()+0x162>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
     710:	cmp	r2, #1
     712:	beq.n	788 <Button::check()+0x2c4>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
     714:	cmp	r2, #2
     716:	bne.n	668 <Button::check()+0x1a4>
     718:	movs	r1, #5
     71a:	ldr	r0, [pc, #104]	; (784 <Button::check()+0x2c0>)
        currentMode = PITCH;
     71c:	strb	r3, [r5, #0]
     71e:	str	r3, [sp, #4]
     720:	bl	2750 <usb_serial_write>
     724:	ldr	r0, [pc, #72]	; (770 <Button::check()+0x2ac>)
     726:	bl	42c4 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
     72a:	ldr.w	r5, [r8, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     72e:	ldrb.w	r9, [r5]
     732:	mov	r0, r9
     734:	bl	2d6c <digitalRead>
     738:	clz	r1, r0
     73c:	lsrs	r1, r1, #5
     73e:	mov	r0, r9
     740:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     744:	ldr	r2, [r7, #0]
     746:	str	r2, [sp, #52]	; 0x34
      blinking = true;
      blinkingCounter = times;
     748:	ldr	r3, [sp, #4]
        m_leds[4]->on();
     74a:	ldr.w	r2, [r8, #36]	; 0x24
	return ret;
     74e:	ldr	r1, [sp, #52]	; 0x34
     750:	str	r3, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     752:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
     754:	str	r1, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     756:	strb	r0, [r5, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
     758:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
     75a:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
     75c:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
     75e:	ldrb	r0, [r2, #0]
     760:	bl	2d60 <digitalWrite>
     764:	ldr	r5, [r4, #32]
     766:	b.n	512 <Button::check()+0x4e>
     768:	.word	0x1fff190c
     76c:	.word	0x00005728
     770:	.word	0x1fff0c70
     774:	.word	0x00005700
     778:	.word	0x00005708
     77c:	.word	0x000056f8
     780:	.word	0x1fff1890
     784:	.word	0x00005720
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
     788:	movs	r2, #2
     78a:	movs	r1, #10
     78c:	ldr	r0, [pc, #52]	; (7c4 <Button::check()+0x300>)
     78e:	strb	r2, [r5, #0]
     790:	str	r3, [sp, #4]
     792:	bl	2750 <usb_serial_write>
     796:	ldr	r0, [pc, #48]	; (7c8 <Button::check()+0x304>)
     798:	bl	42c4 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
     79c:	ldr	r3, [sp, #4]
     79e:	ldr.w	r0, [r8, #36]	; 0x24
     7a2:	mov	r1, r3
     7a4:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
     7a8:	ldr.w	r2, [r8, #36]	; 0x24
    };

    void off () {
      blinking = false;
      m_state = 0;
      digitalWrite(m_pin, m_state);
     7ac:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
     7ae:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
     7b0:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
     7b2:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
     7b4:	ldrb	r0, [r2, #0]
     7b6:	bl	2d60 <digitalWrite>
     7ba:	ldr	r5, [r4, #32]
     7bc:	b.n	512 <Button::check()+0x4e>
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
     7be:	mov	r5, r3
     7c0:	b.n	4e2 <Button::check()+0x1e>
     7c2:	nop
     7c4:	.word	0x00005714
     7c8:	.word	0x1fff0c70

000007cc <setup>:
Knob knob4(A3, sequence, transport, FOURTH, 3);
Knob knob5(A4, sequence, transport, FIFTH, 4);
// implement a scale knob that transposes the sequencer
// or implement a midi channel knob to change the sequence

void setup() {
     7cc:	bx	lr
     7ce:	nop

000007d0 <loop>:
  Serial.begin(9600);
}

void loop() {
     7d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     7d4:	movs	r0, #0
     7d6:	sub	sp, #340	; 0x154
     7d8:	bl	30b4 <usb_midi_read>
  if (usbMIDI.read()) {
     7dc:	cmp	r0, #0
     7de:	bne.w	1212 <loop+0xa42>
     7e2:	ldr	r4, [pc, #684]	; (a90 <loop+0x2c0>)
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     7e4:	ldr	r5, [pc, #684]	; (a94 <loop+0x2c4>)
     7e6:	ldrb.w	r0, [r5, #52]	; 0x34
     7ea:	bl	2d6c <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     7ee:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     7f0:	mov	r7, r0
     7f2:	str	r0, [r5, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     7f4:	ldrb.w	r6, [r5, #36]	; 0x24
     7f8:	beq.w	1268 <loop+0xa98>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     7fc:	cmp	r7, r6
     7fe:	beq.w	11f4 <loop+0xa24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     802:	ldr	r3, [r4, #0]
     804:	str	r3, [sp, #232]	; 0xe8
	return ret;
     806:	ldr	r3, [sp, #232]	; 0xe8
        m_lastDebounceTime = millis();
     808:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     80a:	ldr	r2, [r4, #0]
     80c:	str	r2, [sp, #228]	; 0xe4
	return ret;
     80e:	ldr	r2, [sp, #228]	; 0xe4
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     810:	ldr.w	r8, [pc, #636]	; a90 <loop+0x2c0>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     814:	cmp	r3, r2
     816:	beq.n	836 <loop+0x66>
        // and the current changed
        if (current != m_state) {
     818:	ldr	r3, [r5, #4]
     81a:	ldr	r6, [pc, #632]	; (a94 <loop+0x2c4>)
     81c:	cmp	r7, r3
     81e:	beq.n	836 <loop+0x66>
     820:	ldr.w	r3, [r8]
     824:	str	r3, [sp, #224]	; 0xe0
	return ret;
     826:	ldr	r3, [sp, #224]	; 0xe0
     828:	ldr	r1, [r6, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     82a:	ldr	r2, [r6, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     82c:	str	r7, [r6, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     82e:	subs	r3, r3, r1
     830:	cmp	r3, r2
     832:	bcc.w	1098 <loop+0x8c8>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     836:	cbnz	r7, 844 <loop+0x74>
     838:	ldrb.w	r3, [r5, #36]	; 0x24
     83c:	ldr	r6, [pc, #596]	; (a94 <loop+0x2c4>)
     83e:	cmp	r3, #1
     840:	beq.w	eb2 <loop+0x6e2>
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     844:	ldr	r6, [pc, #592]	; (a98 <loop+0x2c8>)
    transport.processMidi();
  }
  
  button1.check();
  button2.check();
     846:	ldr	r0, [pc, #596]	; (a9c <loop+0x2cc>)
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     848:	strb.w	r7, [r5, #36]	; 0x24
     84c:	bl	4c4 <Button::check()>
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     850:	ldrb.w	r0, [r6, #52]	; 0x34
     854:	bl	2d6c <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     858:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     85a:	mov	r7, r0
     85c:	str	r0, [r6, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     85e:	ldrb.w	r5, [r6, #36]	; 0x24
     862:	beq.w	139a <loop+0xbca>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     866:	cmp	r5, r7
     868:	beq.w	120c <loop+0xa3c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     86c:	ldr	r3, [r4, #0]
     86e:	str	r3, [sp, #200]	; 0xc8
	return ret;
     870:	ldr	r3, [sp, #200]	; 0xc8
        m_lastDebounceTime = millis();
     872:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     874:	ldr	r2, [r4, #0]
     876:	str	r2, [sp, #196]	; 0xc4
	return ret;
     878:	ldr	r2, [sp, #196]	; 0xc4
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     87a:	ldr.w	r8, [pc, #532]	; a90 <loop+0x2c0>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     87e:	cmp	r2, r3
     880:	beq.n	8a0 <loop+0xd0>
        // and the current changed
        if (current != m_state) {
     882:	ldr	r3, [r6, #4]
     884:	ldr	r5, [pc, #528]	; (a98 <loop+0x2c8>)
     886:	cmp	r7, r3
     888:	beq.n	8a0 <loop+0xd0>
     88a:	ldr.w	r3, [r8]
     88e:	str	r3, [sp, #192]	; 0xc0
	return ret;
     890:	ldr	r3, [sp, #192]	; 0xc0
     892:	ldr	r1, [r5, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     894:	ldr	r2, [r5, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     896:	str	r7, [r5, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     898:	subs	r3, r3, r1
     89a:	cmp	r3, r2
     89c:	bcc.w	100c <loop+0x83c>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     8a0:	cbnz	r7, 8ae <loop+0xde>
     8a2:	ldrb.w	r3, [r6, #36]	; 0x24
     8a6:	ldr	r5, [pc, #496]	; (a98 <loop+0x2c8>)
     8a8:	cmp	r3, #1
     8aa:	beq.w	edc <loop+0x70c>
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     8ae:	ldr	r5, [pc, #496]	; (aa0 <loop+0x2d0>)
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     8b0:	strb.w	r7, [r6, #36]	; 0x24
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     8b4:	ldrb.w	r0, [r5, #52]	; 0x34
     8b8:	bl	2d6c <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     8bc:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     8be:	mov	r7, r0
     8c0:	str	r0, [r5, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     8c2:	ldrb.w	r6, [r5, #36]	; 0x24
     8c6:	beq.w	1300 <loop+0xb30>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     8ca:	cmp	r6, r7
     8cc:	beq.w	1206 <loop+0xa36>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8d0:	ldr	r3, [r4, #0]
     8d2:	str	r3, [sp, #168]	; 0xa8
	return ret;
     8d4:	ldr	r3, [sp, #168]	; 0xa8
        m_lastDebounceTime = millis();
     8d6:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8d8:	ldr	r2, [r4, #0]
     8da:	str	r2, [sp, #164]	; 0xa4
	return ret;
     8dc:	ldr	r2, [sp, #164]	; 0xa4
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8de:	ldr.w	r8, [pc, #432]	; a90 <loop+0x2c0>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     8e2:	cmp	r2, r3
     8e4:	beq.n	904 <loop+0x134>
        // and the current changed
        if (current != m_state) {
     8e6:	ldr	r3, [r5, #4]
     8e8:	ldr	r6, [pc, #436]	; (aa0 <loop+0x2d0>)
     8ea:	cmp	r7, r3
     8ec:	beq.n	904 <loop+0x134>
     8ee:	ldr.w	r3, [r8]
     8f2:	str	r3, [sp, #160]	; 0xa0
	return ret;
     8f4:	ldr	r3, [sp, #160]	; 0xa0
     8f6:	ldr	r1, [r6, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     8f8:	ldr	r2, [r6, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     8fa:	str	r7, [r6, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     8fc:	subs	r3, r3, r1
     8fe:	cmp	r3, r2
     900:	bcc.w	1052 <loop+0x882>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     904:	cbnz	r7, 912 <loop+0x142>
     906:	ldrb.w	r3, [r5, #36]	; 0x24
     90a:	ldr	r6, [pc, #404]	; (aa0 <loop+0x2d0>)
     90c:	cmp	r3, #1
     90e:	beq.w	f06 <loop+0x736>
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     912:	ldr	r6, [pc, #400]	; (aa4 <loop+0x2d4>)
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     914:	strb.w	r7, [r5, #36]	; 0x24
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     918:	ldrb.w	r0, [r6, #52]	; 0x34
     91c:	bl	2d6c <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     920:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     922:	mov	r7, r0
     924:	str	r0, [r6, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     926:	ldrb.w	r5, [r6, #36]	; 0x24
     92a:	beq.w	14ce <loop+0xcfe>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     92e:	cmp	r5, r7
     930:	beq.w	1200 <loop+0xa30>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     934:	ldr	r3, [r4, #0]
     936:	str	r3, [sp, #136]	; 0x88
	return ret;
     938:	ldr	r3, [sp, #136]	; 0x88
        m_lastDebounceTime = millis();
     93a:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     93c:	ldr	r2, [r4, #0]
     93e:	str	r2, [sp, #132]	; 0x84
	return ret;
     940:	ldr	r2, [sp, #132]	; 0x84
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     942:	ldr.w	r8, [pc, #332]	; a90 <loop+0x2c0>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     946:	cmp	r2, r3
     948:	beq.n	968 <loop+0x198>
        // and the current changed
        if (current != m_state) {
     94a:	ldr	r3, [r6, #4]
     94c:	ldr	r5, [pc, #340]	; (aa4 <loop+0x2d4>)
     94e:	cmp	r7, r3
     950:	beq.n	968 <loop+0x198>
     952:	ldr.w	r3, [r8]
     956:	str	r3, [sp, #128]	; 0x80
	return ret;
     958:	ldr	r3, [sp, #128]	; 0x80
     95a:	ldr	r1, [r5, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     95c:	ldr	r2, [r5, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     95e:	str	r7, [r5, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     960:	subs	r3, r3, r1
     962:	cmp	r3, r2
     964:	bcc.w	fc6 <loop+0x7f6>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     968:	cbnz	r7, 976 <loop+0x1a6>
     96a:	ldrb.w	r3, [r6, #36]	; 0x24
     96e:	ldr	r5, [pc, #308]	; (aa4 <loop+0x2d4>)
     970:	cmp	r3, #1
     972:	beq.w	f30 <loop+0x760>
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     976:	ldr	r5, [pc, #304]	; (aa8 <loop+0x2d8>)
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     978:	strb.w	r7, [r6, #36]	; 0x24
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     97c:	ldrb.w	r0, [r5, #52]	; 0x34
     980:	bl	2d6c <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     984:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     986:	mov	r6, r0
     988:	str	r0, [r5, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     98a:	ldrb.w	r7, [r5, #36]	; 0x24
     98e:	beq.w	1434 <loop+0xc64>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     992:	cmp	r7, r6
     994:	beq.w	11fa <loop+0xa2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     998:	ldr	r3, [r4, #0]
     99a:	str	r3, [sp, #104]	; 0x68
	return ret;
     99c:	ldr	r3, [sp, #104]	; 0x68
        m_lastDebounceTime = millis();
     99e:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9a0:	ldr	r2, [r4, #0]
     9a2:	str	r2, [sp, #100]	; 0x64
	return ret;
     9a4:	ldr	r2, [sp, #100]	; 0x64
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9a6:	ldr.w	r8, [pc, #232]	; a90 <loop+0x2c0>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     9aa:	cmp	r2, r3
     9ac:	beq.n	9cc <loop+0x1fc>
        // and the current changed
        if (current != m_state) {
     9ae:	ldr	r3, [r5, #4]
     9b0:	ldr	r7, [pc, #244]	; (aa8 <loop+0x2d8>)
     9b2:	cmp	r6, r3
     9b4:	beq.n	9cc <loop+0x1fc>
     9b6:	ldr.w	r3, [r8]
     9ba:	str	r3, [sp, #96]	; 0x60
	return ret;
     9bc:	ldr	r3, [sp, #96]	; 0x60
     9be:	ldr	r1, [r7, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     9c0:	ldr	r2, [r7, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     9c2:	str	r6, [r7, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     9c4:	subs	r3, r3, r1
     9c6:	cmp	r3, r2
     9c8:	bcc.w	f80 <loop+0x7b0>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     9cc:	cbnz	r6, 9da <loop+0x20a>
     9ce:	ldrb.w	r3, [r5, #36]	; 0x24
     9d2:	ldr	r7, [pc, #212]	; (aa8 <loop+0x2d8>)
     9d4:	cmp	r3, #1
     9d6:	beq.w	ca8 <loop+0x4d8>
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     9da:	ldr	r7, [pc, #208]	; (aac <loop+0x2dc>)
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     9dc:	strb.w	r6, [r5, #36]	; 0x24
     9e0:	ldrb	r3, [r7, #16]
     9e2:	cmp	r3, #0
     9e4:	beq.w	cde <loop+0x50e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9e8:	ldr	r3, [r4, #0]
     9ea:	str	r3, [sp, #84]	; 0x54
	return ret;
     9ec:	ldr	r3, [sp, #84]	; 0x54
     9ee:	ldr	r1, [r7, #8]
     9f0:	ldr	r2, [r7, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9f2:	ldr	r6, [pc, #156]	; (a90 <loop+0x2c0>)
     9f4:	subs	r3, r3, r1
     9f6:	cmp	r2, r3
     9f8:	bcc.w	11c6 <loop+0x9f6>
     9fc:	ldr	r5, [pc, #176]	; (ab0 <loop+0x2e0>)
     9fe:	ldrb	r3, [r5, #16]
     a00:	cmp	r3, #0
     a02:	beq.w	d2e <loop+0x55e>
     a06:	ldr	r3, [r4, #0]
     a08:	str	r3, [sp, #72]	; 0x48
	return ret;
     a0a:	ldr	r3, [sp, #72]	; 0x48
     a0c:	ldr	r1, [r5, #8]
     a0e:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a10:	ldr	r7, [pc, #124]	; (a90 <loop+0x2c0>)
     a12:	subs	r3, r3, r1
     a14:	cmp	r2, r3
     a16:	bcc.w	1198 <loop+0x9c8>
     a1a:	ldr	r5, [pc, #152]	; (ab4 <loop+0x2e4>)
     a1c:	ldrb	r3, [r5, #16]
     a1e:	cmp	r3, #0
     a20:	beq.w	d7e <loop+0x5ae>
     a24:	ldr	r3, [r4, #0]
     a26:	str	r3, [sp, #60]	; 0x3c
	return ret;
     a28:	ldr	r3, [sp, #60]	; 0x3c
     a2a:	ldr	r1, [r5, #8]
     a2c:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a2e:	ldr	r7, [pc, #96]	; (a90 <loop+0x2c0>)
     a30:	subs	r3, r3, r1
     a32:	cmp	r2, r3
     a34:	bcc.w	116a <loop+0x99a>
     a38:	ldr	r5, [pc, #124]	; (ab8 <loop+0x2e8>)
     a3a:	ldrb	r3, [r5, #16]
     a3c:	cmp	r3, #0
     a3e:	beq.w	dce <loop+0x5fe>
     a42:	ldr	r3, [r4, #0]
     a44:	str	r3, [sp, #48]	; 0x30
	return ret;
     a46:	ldr	r3, [sp, #48]	; 0x30
     a48:	ldr	r1, [r5, #8]
     a4a:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a4c:	ldr	r7, [pc, #64]	; (a90 <loop+0x2c0>)
     a4e:	subs	r3, r3, r1
     a50:	cmp	r2, r3
     a52:	bcc.w	113c <loop+0x96c>
     a56:	ldr	r5, [pc, #100]	; (abc <loop+0x2ec>)
     a58:	ldrb	r3, [r5, #16]
     a5a:	cmp	r3, #0
     a5c:	beq.w	e1e <loop+0x64e>
     a60:	ldr	r3, [r4, #0]
     a62:	str	r3, [sp, #36]	; 0x24
	return ret;
     a64:	ldr	r3, [sp, #36]	; 0x24
     a66:	ldr	r1, [r5, #8]
     a68:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a6a:	ldr	r7, [pc, #36]	; (a90 <loop+0x2c0>)
     a6c:	subs	r3, r3, r1
     a6e:	cmp	r2, r3
     a70:	bcc.w	110e <loop+0x93e>
     a74:	ldr	r5, [pc, #72]	; (ac0 <loop+0x2f0>)
     a76:	ldrb	r3, [r5, #16]
     a78:	cmp	r3, #0
     a7a:	beq.w	e6e <loop+0x69e>
     a7e:	ldr	r3, [r4, #0]
     a80:	str	r3, [sp, #24]
	return ret;
     a82:	ldr	r3, [sp, #24]
     a84:	ldr	r1, [r5, #8]
     a86:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a88:	ldr	r7, [pc, #4]	; (a90 <loop+0x2c0>)
     a8a:	subs	r3, r3, r1
     a8c:	cmp	r2, r3
     a8e:	b.n	ac4 <loop+0x2f4>
     a90:	.word	0x1fff190c
     a94:	.word	0x1fff1618
     a98:	.word	0x1fff1688
     a9c:	.word	0x1fff1650
     aa0:	.word	0x1fff16c0
     aa4:	.word	0x1fff16f8
     aa8:	.word	0x1fff1730
     aac:	.word	0x1fff1894
     ab0:	.word	0x1fff18ac
     ab4:	.word	0x1fff18c4
     ab8:	.word	0x1fff18dc
     abc:	.word	0x1fff15d8
     ac0:	.word	0x1fff15f0
     ac4:	bcc.w	10e0 <loop+0x910>
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     ac8:	ldr	r4, [pc, #452]	; (c90 <loop+0x4c0>)
     aca:	ldrb	r0, [r4, #0]
     acc:	bl	2b7c <analogRead>

      int diff = abs(m_value - m_lastValue);
     ad0:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     ad2:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     ad4:	cmp	r0, r3
     ad6:	beq.n	b22 <loop+0x352>
     ad8:	subs	r3, r0, r3
     ada:	cmp	r3, #0
     adc:	it	lt
     ade:	neglt	r3, r3
     ae0:	cmp	r3, #10
     ae2:	ble.n	b22 <loop+0x352>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     ae4:	ldrb	r3, [r4, #24]
     ae6:	cmp	r3, #4
     ae8:	beq.w	1706 <loop+0xf36>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     aec:	ldr	r3, [pc, #420]	; (c94 <loop+0x4c4>)
     aee:	ldrb	r3, [r3, #0]
     af0:	cmp	r3, #1
     af2:	beq.w	1aec <loop+0x131c>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     af6:	cmp	r3, #0
     af8:	beq.w	161c <loop+0xe4c>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     afc:	cmp	r3, #2
     afe:	bne.n	b20 <loop+0x350>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     b00:	ldr	r2, [r4, #16]
     b02:	ldr	r1, [r4, #12]
    //   m_controller.controlChange(0, 123, 127);
    // };

    void controlLength (int value) {
      int newValue = map(value, 0, 1023, 24, 1);
      m_length = newValue;
     b04:	mvn.w	r3, #21
     b08:	mul.w	r3, r3, r0
     b0c:	cmp	r3, #0
     b0e:	add.w	r2, r2, r1, lsl #2
     b12:	it	lt
     b14:	addwlt	r3, r3, #1023	; 0x3ff
     b18:	ldr	r2, [r2, #4]
     b1a:	asrs	r3, r3, #10
     b1c:	adds	r3, #24
     b1e:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     b20:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     b22:	ldr	r4, [pc, #372]	; (c98 <loop+0x4c8>)
     b24:	ldrb	r0, [r4, #0]
     b26:	bl	2b7c <analogRead>

      int diff = abs(m_value - m_lastValue);
     b2a:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     b2c:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     b2e:	cmp	r0, r3
     b30:	beq.n	b7c <loop+0x3ac>
     b32:	subs	r3, r0, r3
     b34:	cmp	r3, #0
     b36:	it	lt
     b38:	neglt	r3, r3
     b3a:	cmp	r3, #10
     b3c:	ble.n	b7c <loop+0x3ac>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     b3e:	ldrb	r3, [r4, #24]
     b40:	cmp	r3, #4
     b42:	beq.w	16e8 <loop+0xf18>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     b46:	ldr	r3, [pc, #332]	; (c94 <loop+0x4c4>)
     b48:	ldrb	r3, [r3, #0]
     b4a:	cmp	r3, #1
     b4c:	beq.w	1ab0 <loop+0x12e0>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     b50:	cmp	r3, #0
     b52:	beq.w	163c <loop+0xe6c>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     b56:	cmp	r3, #2
     b58:	bne.n	b7a <loop+0x3aa>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     b5a:	ldr	r2, [r4, #16]
     b5c:	ldr	r1, [r4, #12]
     b5e:	mvn.w	r3, #21
     b62:	mul.w	r3, r3, r0
     b66:	cmp	r3, #0
     b68:	add.w	r2, r2, r1, lsl #2
     b6c:	it	lt
     b6e:	addwlt	r3, r3, #1023	; 0x3ff
     b72:	ldr	r2, [r2, #4]
     b74:	asrs	r3, r3, #10
     b76:	adds	r3, #24
     b78:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     b7a:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     b7c:	ldr	r4, [pc, #284]	; (c9c <loop+0x4cc>)
     b7e:	ldrb	r0, [r4, #0]
     b80:	bl	2b7c <analogRead>

      int diff = abs(m_value - m_lastValue);
     b84:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     b86:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     b88:	cmp	r0, r3
     b8a:	beq.n	bd6 <loop+0x406>
     b8c:	subs	r3, r0, r3
     b8e:	cmp	r3, #0
     b90:	it	lt
     b92:	neglt	r3, r3
     b94:	cmp	r3, #10
     b96:	ble.n	bd6 <loop+0x406>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     b98:	ldrb	r3, [r4, #24]
     b9a:	cmp	r3, #4
     b9c:	beq.w	1742 <loop+0xf72>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     ba0:	ldr	r3, [pc, #240]	; (c94 <loop+0x4c4>)
     ba2:	ldrb	r3, [r3, #0]
     ba4:	cmp	r3, #1
     ba6:	beq.w	1b0a <loop+0x133a>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     baa:	cmp	r3, #0
     bac:	beq.w	15fc <loop+0xe2c>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     bb0:	cmp	r3, #2
     bb2:	bne.n	bd4 <loop+0x404>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     bb4:	ldr	r2, [r4, #16]
     bb6:	ldr	r1, [r4, #12]
     bb8:	mvn.w	r3, #21
     bbc:	mul.w	r3, r3, r0
     bc0:	cmp	r3, #0
     bc2:	add.w	r2, r2, r1, lsl #2
     bc6:	it	lt
     bc8:	addwlt	r3, r3, #1023	; 0x3ff
     bcc:	ldr	r2, [r2, #4]
     bce:	asrs	r3, r3, #10
     bd0:	adds	r3, #24
     bd2:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     bd4:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     bd6:	ldr	r4, [pc, #200]	; (ca0 <loop+0x4d0>)
     bd8:	ldrb	r0, [r4, #0]
     bda:	bl	2b7c <analogRead>

      int diff = abs(m_value - m_lastValue);
     bde:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     be0:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     be2:	cmp	r0, r3
     be4:	beq.n	c30 <loop+0x460>
     be6:	subs	r3, r0, r3
     be8:	cmp	r3, #0
     bea:	it	lt
     bec:	neglt	r3, r3
     bee:	cmp	r3, #10
     bf0:	ble.n	c30 <loop+0x460>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     bf2:	ldrb	r3, [r4, #24]
     bf4:	cmp	r3, #4
     bf6:	beq.w	1760 <loop+0xf90>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     bfa:	ldr	r3, [pc, #152]	; (c94 <loop+0x4c4>)
     bfc:	ldrb	r3, [r3, #0]
     bfe:	cmp	r3, #1
     c00:	beq.w	1ace <loop+0x12fe>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     c04:	cmp	r3, #0
     c06:	beq.w	15dc <loop+0xe0c>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     c0a:	cmp	r3, #2
     c0c:	bne.n	c2e <loop+0x45e>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     c0e:	ldr	r2, [r4, #16]
     c10:	ldr	r1, [r4, #12]
     c12:	mvn.w	r3, #21
     c16:	mul.w	r3, r3, r0
     c1a:	cmp	r3, #0
     c1c:	add.w	r2, r2, r1, lsl #2
     c20:	it	lt
     c22:	addwlt	r3, r3, #1023	; 0x3ff
     c26:	ldr	r2, [r2, #4]
     c28:	asrs	r3, r3, #10
     c2a:	adds	r3, #24
     c2c:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     c2e:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     c30:	ldr	r4, [pc, #112]	; (ca4 <loop+0x4d4>)
     c32:	ldrb	r0, [r4, #0]
     c34:	bl	2b7c <analogRead>

      int diff = abs(m_value - m_lastValue);
     c38:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     c3a:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     c3c:	cmp	r0, r3
     c3e:	beq.n	c8a <loop+0x4ba>
     c40:	subs	r3, r0, r3
     c42:	cmp	r3, #0
     c44:	it	lt
     c46:	neglt	r3, r3
     c48:	cmp	r3, #10
     c4a:	ble.n	c8a <loop+0x4ba>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     c4c:	ldrb	r3, [r4, #24]
     c4e:	cmp	r3, #4
     c50:	beq.w	1724 <loop+0xf54>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     c54:	ldr	r3, [pc, #60]	; (c94 <loop+0x4c4>)
     c56:	ldrb	r3, [r3, #0]
     c58:	cmp	r3, #1
     c5a:	beq.w	1b28 <loop+0x1358>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     c5e:	cmp	r3, #0
     c60:	beq.w	15a0 <loop+0xdd0>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     c64:	cmp	r3, #2
     c66:	bne.n	c88 <loop+0x4b8>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     c68:	ldr	r2, [r4, #16]
     c6a:	ldr	r1, [r4, #12]
     c6c:	mvn.w	r3, #21
     c70:	mul.w	r3, r3, r0
     c74:	cmp	r3, #0
     c76:	add.w	r2, r2, r1, lsl #2
     c7a:	it	lt
     c7c:	addwlt	r3, r3, #1023	; 0x3ff
     c80:	ldr	r2, [r2, #4]
     c82:	asrs	r3, r3, #10
     c84:	adds	r3, #24
     c86:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     c88:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     c8a:	add	sp, #340	; 0x154
     c8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c90:	.word	0x1fff17f4
     c94:	.word	0x1fff1890
     c98:	.word	0x1fff1810
     c9c:	.word	0x1fff182c
     ca0:	.word	0x1fff1848
     ca4:	.word	0x1fff1864
     ca8:	ldr	r3, [r4, #0]
     caa:	str	r3, [sp, #92]	; 0x5c
	return ret;
     cac:	ldr	r3, [sp, #92]	; 0x5c
     cae:	ldr	r1, [r7, #40]	; 0x28

      if (debounced && timeSincePress() < m_holdThreshold) {
        onPress();
      }
 
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
     cb0:	ldr	r2, [r7, #48]	; 0x30
     cb2:	subs	r3, r3, r1
     cb4:	cmp	r3, r2
     cb6:	bcc.w	9da <loop+0x20a>
     cba:	movs	r1, #9
     cbc:	ldr	r0, [pc, #668]	; (f5c <loop+0x78c>)
     cbe:	bl	2750 <usb_serial_write>
     cc2:	ldr	r0, [pc, #668]	; (f60 <loop+0x790>)
     cc4:	bl	42c4 <Print::println()>
    void enterShiftMode () {
      m_shiftMode = true;
    };

    void exitShiftMode () {
      m_shiftMode = false;
     cc8:	ldr	r3, [r7, #28]
     cca:	strb.w	r6, [r3, #46]	; 0x2e
     cce:	ldr	r6, [r7, #32]
     cd0:	ldr	r7, [pc, #656]	; (f64 <loop+0x794>)
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     cd2:	strb.w	r6, [r5, #36]	; 0x24
     cd6:	ldrb	r3, [r7, #16]
     cd8:	cmp	r3, #0
     cda:	bne.w	9e8 <loop+0x218>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     cde:	ldr	r6, [r7, #20]
     ce0:	ldr	r5, [pc, #640]	; (f64 <loop+0x794>)
     ce2:	cmp	r6, #0
     ce4:	ble.w	9fc <loop+0x22c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ce8:	ldr	r3, [r4, #0]
     cea:	str	r3, [sp, #80]	; 0x50
	return ret;
     cec:	ldr	r3, [sp, #80]	; 0x50
     cee:	ldr	r1, [r5, #8]
     cf0:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cf2:	ldr.w	r8, [pc, #648]	; f7c <loop+0x7ac>
     cf6:	subs	r3, r3, r1
     cf8:	cmp	r2, r3
     cfa:	bcs.w	9fc <loop+0x22c>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     cfe:	ldrb	r7, [r5, #0]
     d00:	mov	r0, r7
     d02:	bl	2d6c <digitalRead>
     d06:	clz	r1, r0
     d0a:	lsrs	r1, r1, #5
     d0c:	mov	r0, r7
     d0e:	bl	2d60 <digitalWrite>
     d12:	ldr.w	r3, [r8]
     d16:	str	r3, [sp, #312]	; 0x138
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     d18:	subs	r6, #2
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d1a:	movs	r3, #1
	return ret;
     d1c:	ldr	r2, [sp, #312]	; 0x138
     d1e:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     d20:	str	r6, [r5, #20]

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     d22:	str	r2, [r5, #8]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     d24:	ldr	r5, [pc, #576]	; (f68 <loop+0x798>)
     d26:	ldrb	r3, [r5, #16]
     d28:	cmp	r3, #0
     d2a:	bne.w	a06 <loop+0x236>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     d2e:	ldr	r6, [r5, #20]
     d30:	ldr	r5, [pc, #564]	; (f68 <loop+0x798>)
     d32:	cmp	r6, #0
     d34:	ble.w	a1a <loop+0x24a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d38:	ldr	r3, [r4, #0]
     d3a:	str	r3, [sp, #68]	; 0x44
	return ret;
     d3c:	ldr	r3, [sp, #68]	; 0x44
     d3e:	ldr	r1, [r5, #8]
     d40:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d42:	ldr.w	r8, [pc, #568]	; f7c <loop+0x7ac>
     d46:	subs	r3, r3, r1
     d48:	cmp	r2, r3
     d4a:	bcs.w	a1a <loop+0x24a>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     d4e:	ldrb	r7, [r5, #0]
     d50:	mov	r0, r7
     d52:	bl	2d6c <digitalRead>
     d56:	clz	r1, r0
     d5a:	lsrs	r1, r1, #5
     d5c:	mov	r0, r7
     d5e:	bl	2d60 <digitalWrite>
     d62:	ldr.w	r3, [r8]
     d66:	str	r3, [sp, #316]	; 0x13c
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     d68:	subs	r6, #2
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d6a:	movs	r3, #1
	return ret;
     d6c:	ldr	r2, [sp, #316]	; 0x13c
     d6e:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     d70:	str	r6, [r5, #20]

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     d72:	str	r2, [r5, #8]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     d74:	ldr	r5, [pc, #500]	; (f6c <loop+0x79c>)
     d76:	ldrb	r3, [r5, #16]
     d78:	cmp	r3, #0
     d7a:	bne.w	a24 <loop+0x254>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     d7e:	ldr	r6, [r5, #20]
     d80:	ldr	r5, [pc, #488]	; (f6c <loop+0x79c>)
     d82:	cmp	r6, #0
     d84:	ble.w	a38 <loop+0x268>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d88:	ldr	r3, [r4, #0]
     d8a:	str	r3, [sp, #56]	; 0x38
	return ret;
     d8c:	ldr	r3, [sp, #56]	; 0x38
     d8e:	ldr	r1, [r5, #8]
     d90:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d92:	ldr.w	r8, [pc, #488]	; f7c <loop+0x7ac>
     d96:	subs	r3, r3, r1
     d98:	cmp	r2, r3
     d9a:	bcs.w	a38 <loop+0x268>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     d9e:	ldrb	r7, [r5, #0]
     da0:	mov	r0, r7
     da2:	bl	2d6c <digitalRead>
     da6:	clz	r1, r0
     daa:	lsrs	r1, r1, #5
     dac:	mov	r0, r7
     dae:	bl	2d60 <digitalWrite>
     db2:	ldr.w	r3, [r8]
     db6:	str	r3, [sp, #320]	; 0x140
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     db8:	subs	r6, #2
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     dba:	movs	r3, #1
	return ret;
     dbc:	ldr	r2, [sp, #320]	; 0x140
     dbe:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     dc0:	str	r6, [r5, #20]

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     dc2:	str	r2, [r5, #8]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     dc4:	ldr	r5, [pc, #424]	; (f70 <loop+0x7a0>)
     dc6:	ldrb	r3, [r5, #16]
     dc8:	cmp	r3, #0
     dca:	bne.w	a42 <loop+0x272>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     dce:	ldr	r6, [r5, #20]
     dd0:	ldr	r5, [pc, #412]	; (f70 <loop+0x7a0>)
     dd2:	cmp	r6, #0
     dd4:	ble.w	a56 <loop+0x286>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     dd8:	ldr	r3, [r4, #0]
     dda:	str	r3, [sp, #44]	; 0x2c
	return ret;
     ddc:	ldr	r3, [sp, #44]	; 0x2c
     dde:	ldr	r1, [r5, #8]
     de0:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     de2:	ldr.w	r8, [pc, #408]	; f7c <loop+0x7ac>
     de6:	subs	r3, r3, r1
     de8:	cmp	r2, r3
     dea:	bcs.w	a56 <loop+0x286>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     dee:	ldrb	r7, [r5, #0]
     df0:	mov	r0, r7
     df2:	bl	2d6c <digitalRead>
     df6:	clz	r1, r0
     dfa:	lsrs	r1, r1, #5
     dfc:	mov	r0, r7
     dfe:	bl	2d60 <digitalWrite>
     e02:	ldr.w	r3, [r8]
     e06:	str	r3, [sp, #324]	; 0x144
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     e08:	subs	r6, #2
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     e0a:	movs	r3, #1
	return ret;
     e0c:	ldr	r2, [sp, #324]	; 0x144
     e0e:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     e10:	str	r6, [r5, #20]

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     e12:	str	r2, [r5, #8]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     e14:	ldr	r5, [pc, #348]	; (f74 <loop+0x7a4>)
     e16:	ldrb	r3, [r5, #16]
     e18:	cmp	r3, #0
     e1a:	bne.w	a60 <loop+0x290>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     e1e:	ldr	r6, [r5, #20]
     e20:	ldr	r5, [pc, #336]	; (f74 <loop+0x7a4>)
     e22:	cmp	r6, #0
     e24:	ble.w	a74 <loop+0x2a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e28:	ldr	r3, [r4, #0]
     e2a:	str	r3, [sp, #32]
	return ret;
     e2c:	ldr	r3, [sp, #32]
     e2e:	ldr	r1, [r5, #8]
     e30:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e32:	ldr.w	r8, [pc, #328]	; f7c <loop+0x7ac>
     e36:	subs	r3, r3, r1
     e38:	cmp	r2, r3
     e3a:	bcs.w	a74 <loop+0x2a4>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     e3e:	ldrb	r7, [r5, #0]
     e40:	mov	r0, r7
     e42:	bl	2d6c <digitalRead>
     e46:	clz	r1, r0
     e4a:	lsrs	r1, r1, #5
     e4c:	mov	r0, r7
     e4e:	bl	2d60 <digitalWrite>
     e52:	ldr.w	r3, [r8]
     e56:	str	r3, [sp, #328]	; 0x148
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     e58:	subs	r6, #2
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     e5a:	movs	r3, #1
	return ret;
     e5c:	ldr	r2, [sp, #328]	; 0x148
     e5e:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     e60:	str	r6, [r5, #20]

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     e62:	str	r2, [r5, #8]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     e64:	ldr	r5, [pc, #272]	; (f78 <loop+0x7a8>)
     e66:	ldrb	r3, [r5, #16]
     e68:	cmp	r3, #0
     e6a:	bne.w	a7e <loop+0x2ae>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     e6e:	ldr	r6, [r5, #20]
     e70:	ldr	r5, [pc, #260]	; (f78 <loop+0x7a8>)
     e72:	cmp	r6, #0
     e74:	ble.w	ac8 <loop+0x2f8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e78:	ldr	r3, [r4, #0]
     e7a:	str	r3, [sp, #20]
	return ret;
     e7c:	ldr	r3, [sp, #20]
     e7e:	ldr	r1, [r5, #8]
     e80:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e82:	ldr	r7, [pc, #248]	; (f7c <loop+0x7ac>)
     e84:	subs	r3, r3, r1
     e86:	cmp	r2, r3
     e88:	bcs.w	ac8 <loop+0x2f8>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     e8c:	ldrb	r4, [r5, #0]
     e8e:	mov	r0, r4
     e90:	bl	2d6c <digitalRead>
     e94:	clz	r1, r0
     e98:	lsrs	r1, r1, #5
     e9a:	mov	r0, r4
     e9c:	bl	2d60 <digitalWrite>
     ea0:	ldr	r3, [r7, #0]
     ea2:	str	r3, [sp, #332]	; 0x14c
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     ea4:	subs	r6, #2
	return ret;
     ea6:	ldr	r2, [sp, #332]	; 0x14c
     ea8:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     eaa:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     eac:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     eae:	strb	r3, [r5, #16]
     eb0:	b.n	ac8 <loop+0x2f8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     eb2:	ldr	r3, [r4, #0]
     eb4:	str	r3, [sp, #220]	; 0xdc
	return ret;
     eb6:	ldr	r3, [sp, #220]	; 0xdc
     eb8:	ldr	r1, [r6, #40]	; 0x28

      if (debounced && timeSincePress() < m_holdThreshold) {
        onPress();
      }
 
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
     eba:	ldr	r2, [r6, #48]	; 0x30
     ebc:	subs	r3, r3, r1
     ebe:	cmp	r3, r2
     ec0:	bcc.w	844 <loop+0x74>
     ec4:	movs	r1, #9
     ec6:	ldr	r0, [pc, #148]	; (f5c <loop+0x78c>)
     ec8:	bl	2750 <usb_serial_write>
     ecc:	ldr	r0, [pc, #144]	; (f60 <loop+0x790>)
     ece:	bl	42c4 <Print::println()>
     ed2:	ldr	r3, [r6, #28]
     ed4:	strb.w	r7, [r3, #46]	; 0x2e
     ed8:	ldr	r7, [r6, #32]
     eda:	b.n	844 <loop+0x74>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     edc:	ldr	r3, [r4, #0]
     ede:	str	r3, [sp, #188]	; 0xbc
	return ret;
     ee0:	ldr	r3, [sp, #188]	; 0xbc
     ee2:	ldr	r1, [r5, #40]	; 0x28
     ee4:	ldr	r2, [r5, #48]	; 0x30
     ee6:	subs	r3, r3, r1
     ee8:	cmp	r3, r2
     eea:	bcc.w	8ae <loop+0xde>
     eee:	movs	r1, #9
     ef0:	ldr	r0, [pc, #104]	; (f5c <loop+0x78c>)
     ef2:	bl	2750 <usb_serial_write>
     ef6:	ldr	r0, [pc, #104]	; (f60 <loop+0x790>)
     ef8:	bl	42c4 <Print::println()>
     efc:	ldr	r3, [r5, #28]
     efe:	strb.w	r7, [r3, #46]	; 0x2e
     f02:	ldr	r7, [r5, #32]
     f04:	b.n	8ae <loop+0xde>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f06:	ldr	r3, [r4, #0]
     f08:	str	r3, [sp, #156]	; 0x9c
	return ret;
     f0a:	ldr	r3, [sp, #156]	; 0x9c
     f0c:	ldr	r1, [r6, #40]	; 0x28
     f0e:	ldr	r2, [r6, #48]	; 0x30
     f10:	subs	r3, r3, r1
     f12:	cmp	r3, r2
     f14:	bcc.w	912 <loop+0x142>
     f18:	movs	r1, #9
     f1a:	ldr	r0, [pc, #64]	; (f5c <loop+0x78c>)
     f1c:	bl	2750 <usb_serial_write>
     f20:	ldr	r0, [pc, #60]	; (f60 <loop+0x790>)
     f22:	bl	42c4 <Print::println()>
     f26:	ldr	r3, [r6, #28]
     f28:	strb.w	r7, [r3, #46]	; 0x2e
     f2c:	ldr	r7, [r6, #32]
     f2e:	b.n	912 <loop+0x142>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f30:	ldr	r3, [r4, #0]
     f32:	str	r3, [sp, #124]	; 0x7c
	return ret;
     f34:	ldr	r3, [sp, #124]	; 0x7c
     f36:	ldr	r1, [r5, #40]	; 0x28
     f38:	ldr	r2, [r5, #48]	; 0x30
     f3a:	subs	r3, r3, r1
     f3c:	cmp	r3, r2
     f3e:	bcc.w	976 <loop+0x1a6>
     f42:	movs	r1, #9
     f44:	ldr	r0, [pc, #20]	; (f5c <loop+0x78c>)
     f46:	bl	2750 <usb_serial_write>
     f4a:	ldr	r0, [pc, #20]	; (f60 <loop+0x790>)
     f4c:	bl	42c4 <Print::println()>
     f50:	ldr	r3, [r5, #28]
     f52:	strb.w	r7, [r3, #46]	; 0x2e
     f56:	ldr	r7, [r5, #32]
     f58:	b.n	976 <loop+0x1a6>
     f5a:	nop
     f5c:	.word	0x00005728
     f60:	.word	0x1fff0c70
     f64:	.word	0x1fff1894
     f68:	.word	0x1fff18ac
     f6c:	.word	0x1fff18c4
     f70:	.word	0x1fff18dc
     f74:	.word	0x1fff15d8
     f78:	.word	0x1fff15f0
     f7c:	.word	0x1fff190c

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
     f80:	ldr	r3, [r7, #28]
     f82:	ldr	r0, [pc, #696]	; (123c <loop+0xa6c>)
     f84:	ldr	r6, [r3, #52]	; 0x34
     f86:	movs	r1, #7
     f88:	bl	2750 <usb_serial_write>
     f8c:	ldr	r0, [pc, #688]	; (1240 <loop+0xa70>)
     f8e:	bl	42c4 <Print::println()>
      // Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
     f92:	ldr	r3, [r7, #4]
     f94:	cbnz	r3, fc2 <loop+0x7f2>
     f96:	ldrb	r3, [r7, #16]
     f98:	cmp	r3, #0
     f9a:	beq.w	177e <loop+0xfae>
        if (m_sequence.getShiftMode()) {
     f9e:	ldr.w	r9, [r7, #28]
     fa2:	ldrb.w	r3, [r9, #46]	; 0x2e
     fa6:	cmp	r3, #0
     fa8:	beq.w	1e04 <loop+0x1634>
    };

    void previousPage () {
      if (m_page > 1) m_page--;
     fac:	ldr	r1, [r6, #4]
     fae:	cmp	r1, #1
     fb0:	ble.n	fb6 <loop+0x7e6>
     fb2:	subs	r1, #1
     fb4:	str	r1, [r6, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     fb6:	ldr	r0, [pc, #648]	; (1240 <loop+0xa70>)
     fb8:	bl	4364 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     fbc:	ldr	r0, [pc, #640]	; (1240 <loop+0xa70>)
     fbe:	bl	42c4 <Print::println()>
     fc2:	ldr	r6, [r5, #32]
     fc4:	b.n	9cc <loop+0x1fc>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
     fc6:	ldr	r3, [r5, #28]
     fc8:	ldr	r0, [pc, #624]	; (123c <loop+0xa6c>)
     fca:	ldr	r7, [r3, #52]	; 0x34
     fcc:	movs	r1, #7
     fce:	bl	2750 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     fd2:	ldr	r0, [pc, #620]	; (1240 <loop+0xa70>)
     fd4:	bl	42c4 <Print::println()>
      // Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
     fd8:	ldr	r3, [r5, #4]
     fda:	cbnz	r3, 1008 <loop+0x838>
     fdc:	ldrb	r3, [r5, #16]
     fde:	cmp	r3, #0
     fe0:	beq.w	17de <loop+0x100e>
        if (m_sequence.getShiftMode()) {
     fe4:	ldr.w	r9, [r5, #28]
     fe8:	ldrb.w	r3, [r9, #46]	; 0x2e
     fec:	cmp	r3, #0
     fee:	beq.w	1e6e <loop+0x169e>
     ff2:	ldr	r1, [r7, #4]
     ff4:	cmp	r1, #1
     ff6:	ble.n	ffc <loop+0x82c>
     ff8:	subs	r1, #1
     ffa:	str	r1, [r7, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ffc:	ldr	r0, [pc, #576]	; (1240 <loop+0xa70>)
     ffe:	bl	4364 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1002:	ldr	r0, [pc, #572]	; (1240 <loop+0xa70>)
    1004:	bl	42c4 <Print::println()>
    1008:	ldr	r7, [r6, #32]
    100a:	b.n	968 <loop+0x198>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
    100c:	ldr	r3, [r5, #28]
    100e:	ldr	r0, [pc, #556]	; (123c <loop+0xa6c>)
    1010:	ldr	r7, [r3, #52]	; 0x34
    1012:	movs	r1, #7
    1014:	bl	2750 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1018:	ldr	r0, [pc, #548]	; (1240 <loop+0xa70>)
    101a:	bl	42c4 <Print::println()>
      // Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
    101e:	ldr	r3, [r5, #4]
    1020:	cbnz	r3, 104e <loop+0x87e>
    1022:	ldrb	r3, [r5, #16]
    1024:	cmp	r3, #0
    1026:	beq.w	17be <loop+0xfee>
        if (m_sequence.getShiftMode()) {
    102a:	ldr.w	r9, [r5, #28]
    102e:	ldrb.w	r3, [r9, #46]	; 0x2e
    1032:	cmp	r3, #0
    1034:	beq.w	1ed8 <loop+0x1708>
    1038:	ldr	r1, [r7, #4]
    103a:	cmp	r1, #1
    103c:	ble.n	1042 <loop+0x872>
    103e:	subs	r1, #1
    1040:	str	r1, [r7, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1042:	ldr	r0, [pc, #508]	; (1240 <loop+0xa70>)
    1044:	bl	4364 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1048:	ldr	r0, [pc, #500]	; (1240 <loop+0xa70>)
    104a:	bl	42c4 <Print::println()>
    104e:	ldr	r7, [r6, #32]
    1050:	b.n	8a0 <loop+0xd0>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
    1052:	ldr	r3, [r6, #28]
    1054:	ldr	r0, [pc, #484]	; (123c <loop+0xa6c>)
    1056:	ldr	r7, [r3, #52]	; 0x34
    1058:	movs	r1, #7
    105a:	bl	2750 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    105e:	ldr	r0, [pc, #480]	; (1240 <loop+0xa70>)
    1060:	bl	42c4 <Print::println()>
      // Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
    1064:	ldr	r3, [r6, #4]
    1066:	cbnz	r3, 1094 <loop+0x8c4>
    1068:	ldrb	r3, [r6, #16]
    106a:	cmp	r3, #0
    106c:	beq.w	179e <loop+0xfce>
        if (m_sequence.getShiftMode()) {
    1070:	ldr.w	r9, [r6, #28]
    1074:	ldrb.w	r3, [r9, #46]	; 0x2e
    1078:	cmp	r3, #0
    107a:	beq.w	1f42 <loop+0x1772>
    107e:	ldr	r1, [r7, #4]
    1080:	cmp	r1, #1
    1082:	ble.n	1088 <loop+0x8b8>
    1084:	subs	r1, #1
    1086:	str	r1, [r7, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1088:	ldr	r0, [pc, #436]	; (1240 <loop+0xa70>)
    108a:	bl	4364 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    108e:	ldr	r0, [pc, #432]	; (1240 <loop+0xa70>)
    1090:	bl	42c4 <Print::println()>
    1094:	ldr	r7, [r5, #32]
    1096:	b.n	904 <loop+0x134>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
    1098:	ldr	r3, [r6, #28]
    109a:	ldr	r0, [pc, #416]	; (123c <loop+0xa6c>)
    109c:	ldr	r7, [r3, #52]	; 0x34
    109e:	movs	r1, #7
    10a0:	bl	2750 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    10a4:	ldr	r0, [pc, #408]	; (1240 <loop+0xa70>)
    10a6:	bl	42c4 <Print::println()>
      // Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
    10aa:	ldr	r3, [r6, #4]
    10ac:	cbnz	r3, 10da <loop+0x90a>
    10ae:	ldrb	r3, [r6, #16]
    10b0:	cmp	r3, #0
    10b2:	beq.w	1800 <loop+0x1030>
        if (m_sequence.getShiftMode()) {
    10b6:	ldr.w	r9, [r6, #28]
    10ba:	ldrb.w	r3, [r9, #46]	; 0x2e
    10be:	cmp	r3, #0
    10c0:	beq.w	1fac <loop+0x17dc>
    10c4:	ldr	r1, [r7, #4]
    10c6:	cmp	r1, #1
    10c8:	ble.n	10ce <loop+0x8fe>
    10ca:	subs	r1, #1
    10cc:	str	r1, [r7, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    10ce:	ldr	r0, [pc, #368]	; (1240 <loop+0xa70>)
    10d0:	bl	4364 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    10d4:	ldr	r0, [pc, #360]	; (1240 <loop+0xa70>)
    10d6:	bl	42c4 <Print::println()>
    10da:	ldr	r7, [r5, #32]
    10dc:	b.w	836 <loop+0x66>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
    10e0:	ldrb	r6, [r5, #0]
    10e2:	mov	r0, r6
    10e4:	bl	2d6c <digitalRead>
    10e8:	clz	r1, r0
    10ec:	lsrs	r1, r1, #5
    10ee:	mov	r0, r6
    10f0:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10f4:	ldr	r3, [r7, #0]
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    10f6:	ldr	r6, [r5, #20]
    10f8:	str	r3, [sp, #28]
	return ret;
    10fa:	ldr	r3, [sp, #28]

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
    10fc:	str	r3, [r5, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    10fe:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
    1100:	mov.w	r3, #0
    1104:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    1106:	ldr	r5, [pc, #316]	; (1244 <loop+0xa74>)
    1108:	bgt.w	e78 <loop+0x6a8>
    110c:	b.n	ac8 <loop+0x2f8>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
    110e:	ldrb	r6, [r5, #0]
    1110:	mov	r0, r6
    1112:	bl	2d6c <digitalRead>
    1116:	clz	r1, r0
    111a:	lsrs	r1, r1, #5
    111c:	mov	r0, r6
    111e:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1122:	ldr	r3, [r7, #0]
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    1124:	ldr	r6, [r5, #20]
    1126:	str	r3, [sp, #40]	; 0x28
	return ret;
    1128:	ldr	r3, [sp, #40]	; 0x28

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
    112a:	str	r3, [r5, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    112c:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
    112e:	mov.w	r3, #0
    1132:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    1134:	ldr	r5, [pc, #272]	; (1248 <loop+0xa78>)
    1136:	bgt.w	e28 <loop+0x658>
    113a:	b.n	a74 <loop+0x2a4>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
    113c:	ldrb	r6, [r5, #0]
    113e:	mov	r0, r6
    1140:	bl	2d6c <digitalRead>
    1144:	clz	r1, r0
    1148:	lsrs	r1, r1, #5
    114a:	mov	r0, r6
    114c:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1150:	ldr	r3, [r7, #0]
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    1152:	ldr	r6, [r5, #20]
    1154:	str	r3, [sp, #52]	; 0x34
	return ret;
    1156:	ldr	r3, [sp, #52]	; 0x34

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
    1158:	str	r3, [r5, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    115a:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
    115c:	mov.w	r3, #0
    1160:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    1162:	ldr	r5, [pc, #232]	; (124c <loop+0xa7c>)
    1164:	bgt.w	dd8 <loop+0x608>
    1168:	b.n	a56 <loop+0x286>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
    116a:	ldrb	r6, [r5, #0]
    116c:	mov	r0, r6
    116e:	bl	2d6c <digitalRead>
    1172:	clz	r1, r0
    1176:	lsrs	r1, r1, #5
    1178:	mov	r0, r6
    117a:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    117e:	ldr	r3, [r7, #0]
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    1180:	ldr	r6, [r5, #20]
    1182:	str	r3, [sp, #64]	; 0x40
	return ret;
    1184:	ldr	r3, [sp, #64]	; 0x40

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
    1186:	str	r3, [r5, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    1188:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
    118a:	mov.w	r3, #0
    118e:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    1190:	ldr	r5, [pc, #188]	; (1250 <loop+0xa80>)
    1192:	bgt.w	d88 <loop+0x5b8>
    1196:	b.n	a38 <loop+0x268>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
    1198:	ldrb	r6, [r5, #0]
    119a:	mov	r0, r6
    119c:	bl	2d6c <digitalRead>
    11a0:	clz	r1, r0
    11a4:	lsrs	r1, r1, #5
    11a6:	mov	r0, r6
    11a8:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11ac:	ldr	r3, [r7, #0]
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    11ae:	ldr	r6, [r5, #20]
    11b0:	str	r3, [sp, #76]	; 0x4c
	return ret;
    11b2:	ldr	r3, [sp, #76]	; 0x4c

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
    11b4:	str	r3, [r5, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    11b6:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
    11b8:	mov.w	r3, #0
    11bc:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    11be:	ldr	r5, [pc, #148]	; (1254 <loop+0xa84>)
    11c0:	bgt.w	d38 <loop+0x568>
    11c4:	b.n	a1a <loop+0x24a>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
    11c6:	ldrb	r5, [r7, #0]
    11c8:	mov	r0, r5
    11ca:	bl	2d6c <digitalRead>
    11ce:	clz	r1, r0
    11d2:	lsrs	r1, r1, #5
    11d4:	mov	r0, r5
    11d6:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11da:	ldr	r3, [r6, #0]
    11dc:	str	r3, [sp, #88]	; 0x58
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    11de:	ldr	r6, [r7, #20]
	return ret;
    11e0:	ldr	r3, [sp, #88]	; 0x58

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
    11e2:	str	r3, [r7, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    11e4:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
    11e6:	mov.w	r3, #0
    11ea:	strb	r3, [r7, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
    11ec:	ldr	r5, [pc, #104]	; (1258 <loop+0xa88>)
    11ee:	bgt.w	ce8 <loop+0x518>
    11f2:	b.n	9fc <loop+0x22c>
    11f4:	ldr	r3, [r5, #20]
    11f6:	b.w	80a <loop+0x3a>
    11fa:	ldr	r3, [r5, #20]
    11fc:	b.w	9a0 <loop+0x1d0>
    1200:	ldr	r3, [r6, #20]
    1202:	b.w	93c <loop+0x16c>
    1206:	ldr	r3, [r5, #20]
    1208:	b.w	8d8 <loop+0x108>
    120c:	ldr	r3, [r6, #20]
    120e:	b.w	874 <loop+0xa4>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
    1212:	ldr	r3, [pc, #72]	; (125c <loop+0xa8c>)
      // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
    1214:	ldrb	r3, [r3, #0]
    1216:	cmp	r3, #250	; 0xfa
    1218:	beq.w	1820 <loop+0x1050>
    121c:	cmp	r3, #252	; 0xfc
    121e:	beq.w	1566 <loop+0xd96>
    1222:	cmp	r3, #248	; 0xf8
    1224:	beq.w	18c8 <loop+0x10f8>
    1228:	movs	r1, #35	; 0x23
    122a:	ldr	r0, [pc, #52]	; (1260 <loop+0xa90>)
    122c:	ldr	r4, [pc, #52]	; (1264 <loop+0xa94>)
    122e:	bl	2750 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1232:	ldr	r0, [pc, #12]	; (1240 <loop+0xa70>)
    1234:	bl	42c4 <Print::println()>
    1238:	b.w	7e4 <loop+0x14>
    123c:	.word	0x00005700
    1240:	.word	0x1fff0c70
    1244:	.word	0x1fff15f0
    1248:	.word	0x1fff15d8
    124c:	.word	0x1fff18dc
    1250:	.word	0x1fff18c4
    1254:	.word	0x1fff18ac
    1258:	.word	0x1fff1894
    125c:	.word	0x1fff1dc8
    1260:	.word	0x00005770
    1264:	.word	0x1fff190c
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    1268:	cbnz	r6, 12c2 <loop+0xaf2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    126a:	ldr	r3, [r4, #0]
    126c:	str	r3, [sp, #240]	; 0xf0
	return ret;
    126e:	ldr	r3, [sp, #240]	; 0xf0
    1270:	ldr	r2, [r5, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1272:	ldr.w	r9, [pc, #844]	; 15c0 <loop+0xdf0>
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
    1276:	subs	r3, r3, r2
    1278:	cmp	r3, #200	; 0xc8
    127a:	bls.w	802 <loop+0x32>
        firstTime = millis();
        m_led.blink();
    127e:	ldr.w	r8, [r5, #24]
    1282:	ldr.w	r3, [r9]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1286:	ldrb.w	sl, [r8]
    128a:	str	r3, [sp, #248]	; 0xf8
	return ret;
    128c:	ldr	r3, [sp, #248]	; 0xf8
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
    128e:	str	r3, [r5, #40]	; 0x28
    1290:	mov	r0, sl
    1292:	bl	2d6c <digitalRead>
    1296:	clz	r1, r0
    129a:	lsrs	r1, r1, #5
    129c:	mov	r0, sl
    129e:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12a2:	ldr.w	r3, [r9]
      blinking = true;
      blinkingCounter = times;
    12a6:	str.w	r6, [r8, #20]
    12aa:	str	r3, [sp, #252]	; 0xfc
    12ac:	ldr	r3, [r5, #32]
	return ret;
    12ae:	ldr	r2, [sp, #252]	; 0xfc
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    12b0:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    12b4:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    12b8:	cmp	r3, #1
    12ba:	ldrb.w	r6, [r5, #36]	; 0x24
    12be:	bne.w	232e <loop+0x1b5e>
    12c2:	cmp	r6, #1
    12c4:	bne.w	7fc <loop+0x2c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12c8:	ldr	r3, [r4, #0]
    12ca:	str	r3, [sp, #236]	; 0xec
	return ret;
    12cc:	ldr	r3, [sp, #236]	; 0xec
    12ce:	ldr	r1, [r5, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
    12d0:	ldr	r2, [r5, #48]	; 0x30
    12d2:	ldr.w	r8, [pc, #756]	; 15c8 <loop+0xdf8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12d6:	ldr	r0, [pc, #744]	; (15c0 <loop+0xdf0>)
    12d8:	subs	r3, r3, r1
    12da:	cmp	r3, r2
    12dc:	bls.n	11f4 <loop+0xa24>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    12de:	ldr.w	r3, [r8, #28]
    12e2:	ldr	r2, [r0, #0]
    12e4:	str	r2, [sp, #244]	; 0xf4
    12e6:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
    12ea:	ldr	r1, [sp, #244]	; 0xf4
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
    12ec:	str.w	r1, [r8, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    12f0:	cmp	r2, #0
    12f2:	beq.w	16cc <loop+0xefc>
      Serial.println("Inited Sequence");
      Serial.println(m_paginator->getPage());
    };

    void enterShiftMode () {
      m_shiftMode = true;
    12f6:	movs	r2, #1
    12f8:	strb.w	r2, [r3, #46]	; 0x2e
    12fc:	b.w	7fc <loop+0x2c>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    1300:	cbnz	r6, 135a <loop+0xb8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1302:	ldr	r3, [r4, #0]
    1304:	str	r3, [sp, #176]	; 0xb0
	return ret;
    1306:	ldr	r3, [sp, #176]	; 0xb0
    1308:	ldr	r2, [r5, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    130a:	ldr.w	r9, [pc, #692]	; 15c0 <loop+0xdf0>
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
    130e:	subs	r3, r3, r2
    1310:	cmp	r3, #200	; 0xc8
    1312:	bls.w	8d0 <loop+0x100>
        firstTime = millis();
        m_led.blink();
    1316:	ldr.w	r8, [r5, #24]
    131a:	ldr.w	r3, [r9]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    131e:	ldrb.w	sl, [r8]
    1322:	str	r3, [sp, #184]	; 0xb8
	return ret;
    1324:	ldr	r3, [sp, #184]	; 0xb8
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
    1326:	str	r3, [r5, #40]	; 0x28
    1328:	mov	r0, sl
    132a:	bl	2d6c <digitalRead>
    132e:	clz	r1, r0
    1332:	lsrs	r1, r1, #5
    1334:	mov	r0, sl
    1336:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    133a:	ldr.w	r3, [r9]
      blinking = true;
      blinkingCounter = times;
    133e:	str.w	r6, [r8, #20]
    1342:	str	r3, [sp, #276]	; 0x114
    1344:	ldr	r3, [r5, #32]
	return ret;
    1346:	ldr	r2, [sp, #276]	; 0x114
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1348:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    134c:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    1350:	cmp	r3, #1
    1352:	ldrb.w	r6, [r5, #36]	; 0x24
    1356:	bne.w	2334 <loop+0x1b64>
    135a:	cmp	r6, #1
    135c:	bne.w	8ca <loop+0xfa>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1360:	ldr	r3, [r4, #0]
    1362:	str	r3, [sp, #172]	; 0xac
	return ret;
    1364:	ldr	r3, [sp, #172]	; 0xac
    1366:	ldr	r1, [r5, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
    1368:	ldr	r2, [r5, #48]	; 0x30
    136a:	ldr.w	r8, [pc, #608]	; 15cc <loop+0xdfc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    136e:	ldr	r0, [pc, #592]	; (15c0 <loop+0xdf0>)
    1370:	subs	r3, r3, r1
    1372:	cmp	r3, r2
    1374:	bls.w	1206 <loop+0xa36>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    1378:	ldr.w	r3, [r8, #28]
    137c:	ldr	r2, [r0, #0]
    137e:	str	r2, [sp, #180]	; 0xb4
    1380:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
    1384:	ldr	r1, [sp, #180]	; 0xb4
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
    1386:	str.w	r1, [r8, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    138a:	cmp	r2, #0
    138c:	beq.w	16b0 <loop+0xee0>
    1390:	movs	r2, #1
    1392:	strb.w	r2, [r3, #46]	; 0x2e
    1396:	b.w	8ca <loop+0xfa>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    139a:	cbnz	r5, 13f4 <loop+0xc24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    139c:	ldr	r3, [r4, #0]
    139e:	str	r3, [sp, #208]	; 0xd0
	return ret;
    13a0:	ldr	r3, [sp, #208]	; 0xd0
    13a2:	ldr	r2, [r6, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13a4:	ldr.w	r9, [pc, #536]	; 15c0 <loop+0xdf0>
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
    13a8:	subs	r3, r3, r2
    13aa:	cmp	r3, #200	; 0xc8
    13ac:	bls.w	86c <loop+0x9c>
        firstTime = millis();
        m_led.blink();
    13b0:	ldr.w	r8, [r6, #24]
    13b4:	ldr.w	r3, [r9]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    13b8:	ldrb.w	sl, [r8]
    13bc:	str	r3, [sp, #216]	; 0xd8
	return ret;
    13be:	ldr	r3, [sp, #216]	; 0xd8
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
    13c0:	str	r3, [r6, #40]	; 0x28
    13c2:	mov	r0, sl
    13c4:	bl	2d6c <digitalRead>
    13c8:	clz	r1, r0
    13cc:	lsrs	r1, r1, #5
    13ce:	mov	r0, sl
    13d0:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13d4:	ldr.w	r3, [r9]
      blinking = true;
      blinkingCounter = times;
    13d8:	str.w	r5, [r8, #20]
    13dc:	str	r3, [sp, #264]	; 0x108
    13de:	ldr	r3, [r6, #32]
	return ret;
    13e0:	ldr	r2, [sp, #264]	; 0x108
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    13e2:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    13e6:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    13ea:	cmp	r3, #1
    13ec:	ldrb.w	r5, [r6, #36]	; 0x24
    13f0:	bne.w	2322 <loop+0x1b52>
    13f4:	cmp	r5, #1
    13f6:	bne.w	866 <loop+0x96>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13fa:	ldr	r3, [r4, #0]
    13fc:	str	r3, [sp, #204]	; 0xcc
	return ret;
    13fe:	ldr	r3, [sp, #204]	; 0xcc
    1400:	ldr	r1, [r6, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
    1402:	ldr	r2, [r6, #48]	; 0x30
    1404:	ldr.w	r8, [pc, #456]	; 15d0 <loop+0xe00>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1408:	ldr	r0, [pc, #436]	; (15c0 <loop+0xdf0>)
    140a:	subs	r3, r3, r1
    140c:	cmp	r3, r2
    140e:	bls.w	120c <loop+0xa3c>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    1412:	ldr.w	r3, [r8, #28]
    1416:	ldr	r2, [r0, #0]
    1418:	str	r2, [sp, #212]	; 0xd4
    141a:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
    141e:	ldr	r1, [sp, #212]	; 0xd4
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
    1420:	str.w	r1, [r8, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    1424:	cmp	r2, #0
    1426:	beq.w	1694 <loop+0xec4>
    142a:	movs	r2, #1
    142c:	strb.w	r2, [r3, #46]	; 0x2e
    1430:	b.w	866 <loop+0x96>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    1434:	cbnz	r7, 148e <loop+0xcbe>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1436:	ldr	r3, [r4, #0]
    1438:	str	r3, [sp, #112]	; 0x70
	return ret;
    143a:	ldr	r3, [sp, #112]	; 0x70
    143c:	ldr	r2, [r5, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    143e:	ldr.w	r9, [pc, #384]	; 15c0 <loop+0xdf0>
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
    1442:	subs	r3, r3, r2
    1444:	cmp	r3, #200	; 0xc8
    1446:	bls.w	998 <loop+0x1c8>
        firstTime = millis();
        m_led.blink();
    144a:	ldr.w	r8, [r5, #24]
    144e:	ldr.w	r3, [r9]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1452:	ldrb.w	sl, [r8]
    1456:	str	r3, [sp, #120]	; 0x78
	return ret;
    1458:	ldr	r3, [sp, #120]	; 0x78
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
    145a:	str	r3, [r5, #40]	; 0x28
    145c:	mov	r0, sl
    145e:	bl	2d6c <digitalRead>
    1462:	clz	r1, r0
    1466:	lsrs	r1, r1, #5
    1468:	mov	r0, sl
    146a:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    146e:	ldr.w	r3, [r9]
      blinking = true;
      blinkingCounter = times;
    1472:	str.w	r7, [r8, #20]
    1476:	str	r3, [sp, #300]	; 0x12c
    1478:	ldr	r3, [r5, #32]
	return ret;
    147a:	ldr	r2, [sp, #300]	; 0x12c
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    147c:	strb.w	r6, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1480:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    1484:	cmp	r3, #1
    1486:	ldrb.w	r7, [r5, #36]	; 0x24
    148a:	bne.w	2328 <loop+0x1b58>
    148e:	cmp	r7, #1
    1490:	bne.w	992 <loop+0x1c2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1494:	ldr	r3, [r4, #0]
    1496:	str	r3, [sp, #108]	; 0x6c
	return ret;
    1498:	ldr	r3, [sp, #108]	; 0x6c
    149a:	ldr	r1, [r5, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
    149c:	ldr	r2, [r5, #48]	; 0x30
    149e:	ldr.w	r8, [pc, #308]	; 15d4 <loop+0xe04>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14a2:	ldr	r0, [pc, #284]	; (15c0 <loop+0xdf0>)
    14a4:	subs	r3, r3, r1
    14a6:	cmp	r3, r2
    14a8:	bls.w	11fa <loop+0xa2a>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    14ac:	ldr.w	r3, [r8, #28]
    14b0:	ldr	r2, [r0, #0]
    14b2:	str	r2, [sp, #116]	; 0x74
    14b4:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
    14b8:	ldr	r1, [sp, #116]	; 0x74
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
    14ba:	str.w	r1, [r8, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    14be:	cmp	r2, #0
    14c0:	beq.w	1678 <loop+0xea8>
    14c4:	movs	r2, #1
    14c6:	strb.w	r2, [r3, #46]	; 0x2e
    14ca:	b.w	992 <loop+0x1c2>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    14ce:	cbnz	r5, 1528 <loop+0xd58>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14d0:	ldr	r3, [r4, #0]
    14d2:	str	r3, [sp, #144]	; 0x90
	return ret;
    14d4:	ldr	r3, [sp, #144]	; 0x90
    14d6:	ldr	r2, [r6, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14d8:	ldr.w	r9, [pc, #228]	; 15c0 <loop+0xdf0>
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
    14dc:	subs	r3, r3, r2
    14de:	cmp	r3, #200	; 0xc8
    14e0:	bls.w	934 <loop+0x164>
        firstTime = millis();
        m_led.blink();
    14e4:	ldr.w	r8, [r6, #24]
    14e8:	ldr.w	r3, [r9]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14ec:	ldrb.w	sl, [r8]
    14f0:	str	r3, [sp, #152]	; 0x98
	return ret;
    14f2:	ldr	r3, [sp, #152]	; 0x98
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
    14f4:	str	r3, [r6, #40]	; 0x28
    14f6:	mov	r0, sl
    14f8:	bl	2d6c <digitalRead>
    14fc:	clz	r1, r0
    1500:	lsrs	r1, r1, #5
    1502:	mov	r0, sl
    1504:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1508:	ldr.w	r3, [r9]
      blinking = true;
      blinkingCounter = times;
    150c:	str.w	r5, [r8, #20]
    1510:	str	r3, [sp, #288]	; 0x120
    1512:	ldr	r3, [r6, #32]
	return ret;
    1514:	ldr	r2, [sp, #288]	; 0x120
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1516:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    151a:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    151e:	cmp	r3, #1
    1520:	ldrb.w	r5, [r6, #36]	; 0x24
    1524:	bne.w	233a <loop+0x1b6a>
    1528:	cmp	r5, #1
    152a:	bne.w	92e <loop+0x15e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    152e:	ldr	r3, [r4, #0]
    1530:	str	r3, [sp, #140]	; 0x8c
	return ret;
    1532:	ldr	r3, [sp, #140]	; 0x8c
    1534:	ldr	r1, [r6, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
    1536:	ldr	r2, [r6, #48]	; 0x30
    1538:	ldr.w	r8, [pc, #156]	; 15d8 <loop+0xe08>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    153c:	ldr	r0, [pc, #128]	; (15c0 <loop+0xdf0>)
    153e:	subs	r3, r3, r1
    1540:	cmp	r3, r2
    1542:	bls.w	1200 <loop+0xa30>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    1546:	ldr.w	r3, [r8, #28]
    154a:	ldr	r2, [r0, #0]
    154c:	str	r2, [sp, #148]	; 0x94
    154e:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
    1552:	ldr	r1, [sp, #148]	; 0x94
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
    1554:	str.w	r1, [r8, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    1558:	cmp	r2, #0
    155a:	beq.n	165c <loop+0xe8c>
    155c:	movs	r2, #1
    155e:	strb.w	r2, [r3, #46]	; 0x2e
    1562:	b.w	92e <loop+0x15e>
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
    1566:	ldr	r2, [pc, #92]	; (15c4 <loop+0xdf4>)
      ppqn = 0;
      m_sequence.resetStep();
    1568:	ldr	r1, [r2, #12]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
    156a:	movs	r3, #0
      ppqn = 0;
      m_sequence.resetStep();
      m_sequence.m_leds[5]->toggle();
    156c:	ldr	r4, [r1, #40]	; 0x28
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
      ppqn = 0;
    156e:	str	r3, [r2, #8]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
    1570:	strb	r3, [r2, #0]
        }
      }
    };

    void resetStep () {
      m_currentStep = 0;
    1572:	str	r3, [r1, #0]
    };

    void toggle () {
      m_state = !m_state;
    1574:	ldr	r1, [r4, #4]

      digitalWrite(m_pin, m_state);
    1576:	ldrb	r0, [r4, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1578:	clz	r1, r1
    157c:	lsrs	r1, r1, #5
    157e:	str	r1, [r4, #4]

      digitalWrite(m_pin, m_state);
    1580:	bl	2d60 <digitalWrite>

      if (blinking) {
    1584:	ldrb	r3, [r4, #16]
    1586:	cmp	r3, #0
    1588:	beq.w	7e2 <loop+0x12>
        digitalWrite(m_pin, !m_state);
    158c:	ldr	r1, [r4, #4]
    158e:	ldrb	r0, [r4, #0]
    1590:	ldr	r4, [pc, #44]	; (15c0 <loop+0xdf0>)
    1592:	clz	r1, r1
    1596:	lsrs	r1, r1, #5
    1598:	bl	2d60 <digitalWrite>
    159c:	b.w	7e4 <loop+0x14>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
          m_sequence.m_steps[m_id]->controlPitch(m_value);
    15a0:	ldr	r3, [r4, #16]
    15a2:	ldr	r2, [r4, #12]
    15a4:	add.w	r2, r3, r2, lsl #2
    };

    void controlPitch (int value) {
      int newValue = map(value, 0, 1023, 51, 38);
      m_pitch = newValue;
    15a8:	sub.w	r3, r0, r0, lsl #2
    15ac:	lsls	r3, r3, #2
    15ae:	it	mi
    15b0:	addwmi	r3, r3, #1023	; 0x3ff
    15b4:	ldr	r2, [r2, #4]
    15b6:	asrs	r3, r3, #10
    15b8:	adds	r3, #51	; 0x33
    15ba:	str	r3, [r2, #8]
    15bc:	b.w	c88 <loop+0x4b8>
    15c0:	.word	0x1fff190c
    15c4:	.word	0x1fff1880
    15c8:	.word	0x1fff1618
    15cc:	.word	0x1fff16c0
    15d0:	.word	0x1fff1688
    15d4:	.word	0x1fff1730
    15d8:	.word	0x1fff16f8
    15dc:	ldr	r3, [r4, #16]
    15de:	ldr	r2, [r4, #12]
    15e0:	add.w	r2, r3, r2, lsl #2
    15e4:	sub.w	r3, r0, r0, lsl #2
    15e8:	lsls	r3, r3, #2
    15ea:	it	mi
    15ec:	addwmi	r3, r3, #1023	; 0x3ff
    15f0:	ldr	r2, [r2, #4]
    15f2:	asrs	r3, r3, #10
    15f4:	adds	r3, #51	; 0x33
    15f6:	str	r3, [r2, #8]
    15f8:	b.w	c2e <loop+0x45e>
    15fc:	ldr	r3, [r4, #16]
    15fe:	ldr	r2, [r4, #12]
    1600:	add.w	r2, r3, r2, lsl #2
    1604:	sub.w	r3, r0, r0, lsl #2
    1608:	lsls	r3, r3, #2
    160a:	it	mi
    160c:	addwmi	r3, r3, #1023	; 0x3ff
    1610:	ldr	r2, [r2, #4]
    1612:	asrs	r3, r3, #10
    1614:	adds	r3, #51	; 0x33
    1616:	str	r3, [r2, #8]
    1618:	b.w	bd4 <loop+0x404>
    161c:	ldr	r3, [r4, #16]
    161e:	ldr	r2, [r4, #12]
    1620:	add.w	r2, r3, r2, lsl #2
    1624:	sub.w	r3, r0, r0, lsl #2
    1628:	lsls	r3, r3, #2
    162a:	it	mi
    162c:	addwmi	r3, r3, #1023	; 0x3ff
    1630:	ldr	r2, [r2, #4]
    1632:	asrs	r3, r3, #10
    1634:	adds	r3, #51	; 0x33
    1636:	str	r3, [r2, #8]
    1638:	b.w	b20 <loop+0x350>
    163c:	ldr	r3, [r4, #16]
    163e:	ldr	r2, [r4, #12]
    1640:	add.w	r2, r3, r2, lsl #2
    1644:	sub.w	r3, r0, r0, lsl #2
    1648:	lsls	r3, r3, #2
    164a:	it	mi
    164c:	addwmi	r3, r3, #1023	; 0x3ff
    1650:	ldr	r2, [r2, #4]
    1652:	asrs	r3, r3, #10
    1654:	adds	r3, #51	; 0x33
    1656:	str	r3, [r2, #8]
    1658:	b.w	b7a <loop+0x3aa>
    165c:	movs	r1, #6
    165e:	ldr	r0, [pc, #600]	; (18b8 <loop+0x10e8>)
    1660:	bl	2750 <usb_serial_write>
    1664:	ldr	r0, [pc, #596]	; (18bc <loop+0x10ec>)
    1666:	bl	42c4 <Print::println()>
    166a:	ldr.w	r3, [r8, #28]
    166e:	ldr.w	r7, [r8, #32]
    1672:	ldrb.w	r5, [r8, #36]	; 0x24
    1676:	b.n	155c <loop+0xd8c>
    1678:	movs	r1, #6
    167a:	ldr	r0, [pc, #572]	; (18b8 <loop+0x10e8>)
    167c:	bl	2750 <usb_serial_write>
    1680:	ldr	r0, [pc, #568]	; (18bc <loop+0x10ec>)
    1682:	bl	42c4 <Print::println()>
    1686:	ldr.w	r3, [r8, #28]
    168a:	ldr.w	r6, [r8, #32]
    168e:	ldrb.w	r7, [r8, #36]	; 0x24
    1692:	b.n	14c4 <loop+0xcf4>
    1694:	movs	r1, #6
    1696:	ldr	r0, [pc, #544]	; (18b8 <loop+0x10e8>)
    1698:	bl	2750 <usb_serial_write>
    169c:	ldr	r0, [pc, #540]	; (18bc <loop+0x10ec>)
    169e:	bl	42c4 <Print::println()>
    16a2:	ldr.w	r3, [r8, #28]
    16a6:	ldr.w	r7, [r8, #32]
    16aa:	ldrb.w	r5, [r8, #36]	; 0x24
    16ae:	b.n	142a <loop+0xc5a>
    16b0:	movs	r1, #6
    16b2:	ldr	r0, [pc, #516]	; (18b8 <loop+0x10e8>)
    16b4:	bl	2750 <usb_serial_write>
    16b8:	ldr	r0, [pc, #512]	; (18bc <loop+0x10ec>)
    16ba:	bl	42c4 <Print::println()>
    16be:	ldr.w	r3, [r8, #28]
    16c2:	ldr.w	r7, [r8, #32]
    16c6:	ldrb.w	r6, [r8, #36]	; 0x24
    16ca:	b.n	1390 <loop+0xbc0>
    16cc:	movs	r1, #6
    16ce:	ldr	r0, [pc, #488]	; (18b8 <loop+0x10e8>)
    16d0:	bl	2750 <usb_serial_write>
    16d4:	ldr	r0, [pc, #484]	; (18bc <loop+0x10ec>)
    16d6:	bl	42c4 <Print::println()>
    16da:	ldr.w	r3, [r8, #28]
    16de:	ldr.w	r7, [r8, #32]
    16e2:	ldrb.w	r6, [r8, #36]	; 0x24
    16e6:	b.n	12f6 <loop+0xb26>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    16e8:	cmp.w	r0, #400	; 0x190
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
        m_transport.controlTempo(m_value);
    16ec:	ldr	r3, [r4, #20]
    16ee:	bge.w	1bd8 <loop+0x1408>
        max_ppqn = 6;

        if (ppqn >= 6) {
    16f2:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    16f4:	movs	r1, #6

        if (ppqn >= 6) {
    16f6:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    16f8:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    16fa:	ble.n	1700 <loop+0xf30>
          ppqn = 0;
    16fc:	movs	r2, #0
    16fe:	str	r2, [r3, #8]
    1700:	ldr	r0, [r4, #4]
    1702:	b.w	b7a <loop+0x3aa>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    1706:	cmp.w	r0, #400	; 0x190
    170a:	ldr	r3, [r4, #20]
    170c:	bge.w	1ba0 <loop+0x13d0>
        max_ppqn = 6;

        if (ppqn >= 6) {
    1710:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1712:	movs	r1, #6

        if (ppqn >= 6) {
    1714:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1716:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    1718:	ble.n	171e <loop+0xf4e>
          ppqn = 0;
    171a:	movs	r2, #0
    171c:	str	r2, [r3, #8]
    171e:	ldr	r0, [r4, #4]
    1720:	b.w	b20 <loop+0x350>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    1724:	cmp.w	r0, #400	; 0x190
    1728:	ldr	r3, [r4, #20]
    172a:	bge.w	1b64 <loop+0x1394>
        max_ppqn = 6;

        if (ppqn >= 6) {
    172e:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1730:	movs	r1, #6

        if (ppqn >= 6) {
    1732:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1734:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    1736:	ble.n	173c <loop+0xf6c>
          ppqn = 0;
    1738:	movs	r2, #0
    173a:	str	r2, [r3, #8]
    173c:	ldr	r0, [r4, #4]
    173e:	b.w	c88 <loop+0x4b8>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    1742:	cmp.w	r0, #400	; 0x190
    1746:	ldr	r3, [r4, #20]
    1748:	bge.w	1b46 <loop+0x1376>
        max_ppqn = 6;

        if (ppqn >= 6) {
    174c:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    174e:	movs	r1, #6

        if (ppqn >= 6) {
    1750:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1752:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    1754:	ble.n	175a <loop+0xf8a>
          ppqn = 0;
    1756:	movs	r2, #0
    1758:	str	r2, [r3, #8]
    175a:	ldr	r0, [r4, #4]
    175c:	b.w	bd4 <loop+0x404>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    1760:	cmp.w	r0, #400	; 0x190
    1764:	ldr	r3, [r4, #20]
    1766:	bge.w	1b82 <loop+0x13b2>
        max_ppqn = 6;

        if (ppqn >= 6) {
    176a:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    176c:	movs	r1, #6

        if (ppqn >= 6) {
    176e:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1770:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    1772:	ble.n	1778 <loop+0xfa8>
          ppqn = 0;
    1774:	movs	r2, #0
    1776:	str	r2, [r3, #8]
    1778:	ldr	r0, [r4, #4]
    177a:	b.w	c2e <loop+0x45e>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    177e:	ldrb	r3, [r7, #17]
    1780:	cmp	r3, #0
    1782:	beq.w	1a50 <loop+0x1280>
    1786:	ldr	r3, [r7, #28]
        if (m_sequence.getShiftMode()) {
    1788:	ldrb.w	r3, [r3, #46]	; 0x2e
    178c:	cmp	r3, #0
    178e:	beq.w	1d40 <loop+0x1570>
    int getPage () {
      return m_page;
    }

    void nextPage () {
      if (m_page < 4) m_page++;
    1792:	ldr	r1, [r6, #4]
    1794:	cmp	r1, #3
    1796:	itt	le
    1798:	addle	r1, #1
    179a:	strle	r1, [r6, #4]
    179c:	b.n	fb6 <loop+0x7e6>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    179e:	ldrb	r3, [r6, #17]
    17a0:	cmp	r3, #0
    17a2:	beq.w	19f0 <loop+0x1220>
    17a6:	ldr	r3, [r6, #28]
        if (m_sequence.getShiftMode()) {
    17a8:	ldrb.w	r3, [r3, #46]	; 0x2e
    17ac:	cmp	r3, #0
    17ae:	beq.w	1d08 <loop+0x1538>
    17b2:	ldr	r1, [r7, #4]
    17b4:	cmp	r1, #3
    17b6:	itt	le
    17b8:	addle	r1, #1
    17ba:	strle	r1, [r7, #4]
    17bc:	b.n	1088 <loop+0x8b8>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    17be:	ldrb	r3, [r5, #17]
    17c0:	cmp	r3, #0
    17c2:	beq.w	1a80 <loop+0x12b0>
    17c6:	ldr	r3, [r5, #28]
        if (m_sequence.getShiftMode()) {
    17c8:	ldrb.w	r3, [r3, #46]	; 0x2e
    17cc:	cmp	r3, #0
    17ce:	beq.w	1cd0 <loop+0x1500>
    17d2:	ldr	r1, [r7, #4]
    17d4:	cmp	r1, #3
    17d6:	itt	le
    17d8:	addle	r1, #1
    17da:	strle	r1, [r7, #4]
    17dc:	b.n	1042 <loop+0x872>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    17de:	ldrb	r3, [r5, #17]
    17e0:	cmp	r3, #0
    17e2:	beq.w	1a20 <loop+0x1250>
    17e6:	ldr	r3, [r5, #28]
        if (m_sequence.getShiftMode()) {
    17e8:	ldrb.w	r3, [r3, #46]	; 0x2e
    17ec:	cmp	r3, #0
    17ee:	beq.w	1c98 <loop+0x14c8>
    17f2:	ldr	r1, [r7, #4]
    17f4:	cmp	r1, #3
    17f6:	itt	le
    17f8:	addle	r1, #1
    17fa:	strle	r1, [r7, #4]
    17fc:	b.w	ffc <loop+0x82c>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    1800:	ldrb	r3, [r6, #17]
    1802:	cmp	r3, #0
    1804:	beq.w	19c0 <loop+0x11f0>
    1808:	ldr	r3, [r6, #28]
        if (m_sequence.getShiftMode()) {
    180a:	ldrb.w	r3, [r3, #46]	; 0x2e
    180e:	cmp	r3, #0
    1810:	beq.w	1d78 <loop+0x15a8>
    1814:	ldr	r1, [r7, #4]
    1816:	cmp	r1, #3
    1818:	itt	le
    181a:	addle	r1, #1
    181c:	strle	r1, [r7, #4]
    181e:	b.n	10ce <loop+0x8fe>
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
    1820:	ldr	r5, [pc, #156]	; (18c0 <loop+0x10f0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1822:	ldr	r4, [pc, #160]	; (18c4 <loop+0x10f4>)
      ppqn = 0;
      m_sequence.doStep(); 
    1824:	ldr	r6, [r5, #12]
      Serial.println("Tick in sequence");
      m_controller.tick();
    };

    void doStep () {  
      m_leds[m_currentStep]->blink();
    1826:	ldr	r3, [r6, #0]
    1828:	add.w	r3, r6, r3, lsl #2
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
    182c:	movs	r7, #1
    182e:	ldr.w	r9, [r3, #20]
    1832:	strb	r7, [r5, #0]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1834:	ldrb.w	r8, [r9]
      ppqn = 0;
    1838:	mov.w	sl, #0
    183c:	mov	r0, r8
    183e:	str.w	sl, [r5, #8]
    1842:	bl	2d6c <digitalRead>
    1846:	clz	r1, r0
    184a:	lsrs	r1, r1, #5
    184c:	mov	r0, r8
    184e:	bl	2d60 <digitalWrite>

      Step* current = m_steps[m_currentStep];
    1852:	ldr	r3, [r6, #0]
    1854:	ldr	r1, [r4, #0]
    1856:	str	r1, [sp, #16]
    1858:	add.w	r2, r6, r3, lsl #2
	return ret;
    185c:	ldr	r1, [sp, #16]
    185e:	ldr	r2, [r2, #4]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1860:	str.w	r1, [r9, #8]

      if (current->m_state) {
    1864:	ldrb	r1, [r2, #4]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1866:	strb.w	r7, [r9, #16]
      blinkingCounter = times;
    186a:	str.w	sl, [r9, #20]
    186e:	cmp	r1, #0
    1870:	bne.w	1db0 <loop+0x15e0>
          current->m_velocity,
          current->m_length
        );
      }

      if (!m_reverse) {
    1874:	ldrb.w	r2, [r6, #45]	; 0x2d
    1878:	cmp	r2, #0
    187a:	beq.w	1bf6 <loop+0x1426>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    187e:	subs	r2, r3, #1
    1880:	cmp	r3, #0
    1882:	beq.w	1dfe <loop+0x162e>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    1886:	str	r2, [r6, #0]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    1888:	ldr	r3, [r5, #12]
    188a:	ldr	r5, [r3, #40]	; 0x28
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    188c:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    188e:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1890:	clz	r1, r1
    1894:	lsrs	r1, r1, #5
    1896:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1898:	bl	2d60 <digitalWrite>

      if (blinking) {
    189c:	ldrb	r3, [r5, #16]
    189e:	cmp	r3, #0
    18a0:	beq.w	7e4 <loop+0x14>
        digitalWrite(m_pin, !m_state);
    18a4:	ldr	r1, [r5, #4]
    18a6:	ldrb	r0, [r5, #0]
    18a8:	clz	r1, r1
    18ac:	lsrs	r1, r1, #5
    18ae:	bl	2d60 <digitalWrite>
    18b2:	b.w	7e4 <loop+0x14>
    18b6:	nop
    18b8:	.word	0x000056f8
    18bc:	.word	0x1fff0c70
    18c0:	.word	0x1fff1880
    18c4:	.word	0x1fff190c
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
    18c8:	ldr	r5, [pc, #756]	; (1bc0 <loop+0x13f0>)
    18ca:	ldr	r0, [pc, #760]	; (1bc4 <loop+0x13f4>)
    18cc:	ldr	r3, [r5, #8]
    18ce:	movs	r1, #17
    18d0:	adds	r3, #1
    18d2:	str	r3, [r5, #8]
    18d4:	bl	2750 <usb_serial_write>
    18d8:	ldr	r0, [pc, #748]	; (1bc8 <loop+0x13f8>)
    18da:	bl	42c4 <Print::println()>
    18de:	movs	r1, #16

      Serial.println("Tick in transport");
      m_sequence.tick();
    18e0:	ldr	r4, [r5, #12]
    18e2:	ldr	r0, [pc, #744]	; (1bcc <loop+0x13fc>)
    18e4:	bl	2750 <usb_serial_write>
    18e8:	ldr	r0, [pc, #732]	; (1bc8 <loop+0x13f8>)
    18ea:	bl	42c4 <Print::println()>
      }
    }

    void tick () {
      Serial.println("Tick in sequence");
      m_controller.tick();
    18ee:	ldr	r4, [r4, #56]	; 0x38
    18f0:	ldr	r0, [pc, #732]	; (1bd0 <loop+0x1400>)
    18f2:	movs	r1, #18
    18f4:	bl	2750 <usb_serial_write>
    18f8:	ldr	r0, [pc, #716]	; (1bc8 <loop+0x13f8>)
    18fa:	bl	42c4 <Print::println()>
  public:
    Controller () {};

    void tick () {
      Serial.println("Tick in controller");
      if (m_notes[0]) m_notes[0]->update();
    18fe:	ldr	r3, [r4, #0]
    1900:	cbz	r3, 190c <loop+0x113c>
    int m_channel;
    boolean m_ended;

    void update () {
      // Serial.println("Note updating");
      m_length--;
    1902:	ldr	r2, [r3, #8]
    1904:	subs	r2, #1
      
      if (m_length <= 0) {
    1906:	cmp	r2, #0
    int m_channel;
    boolean m_ended;

    void update () {
      // Serial.println("Note updating");
      m_length--;
    1908:	str	r2, [r3, #8]
      
      if (m_length <= 0) {
    190a:	ble.n	1986 <loop+0x11b6>
    190c:	ldrb	r2, [r3, #16]

      // i have to figure out how to destroy the objects because
      // this length check is a hack. length would go infinite negative
      // calling note off all the time
      if (m_notes[0]->m_ended && m_notes[0]->m_length == 0) {
    190e:	cmp	r2, #0
    1910:	bne.n	198a <loop+0x11ba>

      if (ppqn == max_ppqn) {
    1912:	ldr	r2, [r5, #8]
    1914:	ldr	r3, [r5, #4]
    1916:	ldr	r1, [pc, #680]	; (1bc0 <loop+0x13f0>)
    1918:	cmp	r2, r3
    191a:	bne.w	7e2 <loop+0x12>
        m_sequence.doStep(); 
    191e:	ldr	r6, [r1, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1920:	ldr	r4, [pc, #688]	; (1bd4 <loop+0x1404>)
    };

    void doStep () {  
      m_leds[m_currentStep]->blink();
    1922:	ldr	r3, [r6, #0]
    1924:	add.w	r3, r6, r3, lsl #2
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    1928:	mov.w	r9, #0
    192c:	ldr.w	r8, [r3, #20]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1930:	ldrb.w	r7, [r8]
    1934:	mov	r0, r7
    1936:	bl	2d6c <digitalRead>
    193a:	clz	r1, r0
    193e:	lsrs	r1, r1, #5
    1940:	mov	r0, r7
    1942:	bl	2d60 <digitalWrite>

      Step* current = m_steps[m_currentStep];
    1946:	ldr	r3, [r6, #0]
    1948:	ldr	r1, [r4, #0]
    194a:	str	r1, [sp, #12]
    194c:	add.w	r2, r6, r3, lsl #2
	return ret;
    1950:	ldr	r1, [sp, #12]
    1952:	ldr	r2, [r2, #4]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1954:	str.w	r1, [r8, #8]

      if (current->m_state) {
    1958:	ldrb	r1, [r2, #4]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    195a:	str.w	r9, [r8, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    195e:	movs	r0, #1
    1960:	strb.w	r0, [r8, #16]
    1964:	cmp	r1, #0
    1966:	bne.w	201e <loop+0x184e>
          current->m_velocity,
          current->m_length
        );
      }

      if (!m_reverse) {
    196a:	ldrb.w	r2, [r6, #45]	; 0x2d
    196e:	cmp	r2, #0
    1970:	bne.w	2016 <loop+0x1846>
        m_currentStep++;
    1974:	adds	r3, #1
    1976:	cmp	r3, #3
    1978:	it	gt
    197a:	movgt	r3, #0
    197c:	str	r3, [r6, #0]
        ppqn = 0;
    197e:	movs	r3, #0
    1980:	str	r3, [r5, #8]
    1982:	b.w	7e4 <loop+0x14>
        m_ended = true;
    1986:	movs	r2, #1
    1988:	strb	r2, [r3, #16]
    198a:	ldr	r2, [r3, #8]
    198c:	cmp	r2, #0
    198e:	bne.n	1912 <loop+0x1142>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1990:	ldmia.w	r3, {r1, r2}
    1994:	ldrb	r0, [r3, #12]
    1996:	lsls	r1, r1, #16
    1998:	lsls	r3, r2, #24
    199a:	and.w	r3, r3, #2130706432	; 0x7f000000
    199e:	and.w	r2, r1, #8323072	; 0x7f0000
    19a2:	orrs	r3, r2
    19a4:	subs	r0, #1
    19a6:	orr.w	r3, r3, #32768	; 0x8000
    19aa:	lsls	r0, r0, #8
    19ac:	orr.w	r3, r3, #8
    19b0:	and.w	r0, r0, #3840	; 0xf00
    19b4:	orrs	r0, r3
    19b6:	bl	2fec <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    19ba:	bl	3088 <usb_midi_flush_output>
    19be:	b.n	1912 <loop+0x1142>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    19c0:	ldr	r6, [r6, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    19c2:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    19c4:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    19c6:	clz	r1, r1
    19ca:	lsrs	r1, r1, #5
    19cc:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    19ce:	bl	2d60 <digitalWrite>

      if (blinking) {
    19d2:	ldrb	r3, [r6, #16]
    19d4:	cmp	r3, #0
    19d6:	bne.w	1c88 <loop+0x14b8>
        m_sequence.m_steps[m_id - 1]->toggle();
    19da:	ldr	r3, [r5, #28]
    19dc:	ldr	r2, [r5, #0]
    19de:	ldr	r7, [r5, #32]
    19e0:	ldr.w	r2, [r3, r2, lsl #2]
      m_velocity = 100;
      m_length = 4;
    };

    void toggle () {
      m_state = !m_state;
    19e4:	ldrb	r3, [r2, #4]
    19e6:	eor.w	r3, r3, #1
    19ea:	strb	r3, [r2, #4]
    19ec:	b.w	836 <loop+0x66>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    19f0:	ldr	r6, [r6, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    19f2:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    19f4:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    19f6:	clz	r1, r1
    19fa:	lsrs	r1, r1, #5
    19fc:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    19fe:	bl	2d60 <digitalWrite>

      if (blinking) {
    1a02:	ldrb	r3, [r6, #16]
    1a04:	cmp	r3, #0
    1a06:	bne.w	1c78 <loop+0x14a8>
        m_sequence.m_steps[m_id - 1]->toggle();
    1a0a:	ldr	r3, [r5, #28]
    1a0c:	ldr	r2, [r5, #0]
    1a0e:	ldr	r7, [r5, #32]
    1a10:	ldr.w	r2, [r3, r2, lsl #2]
    1a14:	ldrb	r3, [r2, #4]
    1a16:	eor.w	r3, r3, #1
    1a1a:	strb	r3, [r2, #4]
    1a1c:	b.w	904 <loop+0x134>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    1a20:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a22:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1a24:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a26:	clz	r1, r1
    1a2a:	lsrs	r1, r1, #5
    1a2c:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1a2e:	bl	2d60 <digitalWrite>

      if (blinking) {
    1a32:	ldrb	r3, [r5, #16]
    1a34:	cmp	r3, #0
    1a36:	bne.w	1c68 <loop+0x1498>
        m_sequence.m_steps[m_id - 1]->toggle();
    1a3a:	ldr	r3, [r6, #28]
    1a3c:	ldr	r2, [r6, #0]
    1a3e:	ldr	r7, [r6, #32]
    1a40:	ldr.w	r2, [r3, r2, lsl #2]
    1a44:	ldrb	r3, [r2, #4]
    1a46:	eor.w	r3, r3, #1
    1a4a:	strb	r3, [r2, #4]
    1a4c:	b.w	968 <loop+0x198>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    1a50:	ldr	r6, [r7, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a52:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1a54:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a56:	clz	r1, r1
    1a5a:	lsrs	r1, r1, #5
    1a5c:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1a5e:	bl	2d60 <digitalWrite>

      if (blinking) {
    1a62:	ldrb	r3, [r6, #16]
    1a64:	cmp	r3, #0
    1a66:	bne.w	1c58 <loop+0x1488>
        m_sequence.m_steps[m_id - 1]->toggle();
    1a6a:	ldr	r3, [r5, #28]
    1a6c:	ldr	r2, [r5, #0]
    1a6e:	ldr	r6, [r5, #32]
    1a70:	ldr.w	r2, [r3, r2, lsl #2]
    1a74:	ldrb	r3, [r2, #4]
    1a76:	eor.w	r3, r3, #1
    1a7a:	strb	r3, [r2, #4]
    1a7c:	b.w	9cc <loop+0x1fc>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    1a80:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a82:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1a84:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a86:	clz	r1, r1
    1a8a:	lsrs	r1, r1, #5
    1a8c:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1a8e:	bl	2d60 <digitalWrite>

      if (blinking) {
    1a92:	ldrb	r3, [r5, #16]
    1a94:	cmp	r3, #0
    1a96:	bne.w	1c48 <loop+0x1478>
        m_sequence.m_steps[m_id - 1]->toggle();
    1a9a:	ldr	r3, [r6, #28]
    1a9c:	ldr	r2, [r6, #0]
    1a9e:	ldr	r7, [r6, #32]
    1aa0:	ldr.w	r2, [r3, r2, lsl #2]
    1aa4:	ldrb	r3, [r2, #4]
    1aa6:	eor.w	r3, r3, #1
    1aaa:	strb	r3, [r2, #4]
    1aac:	b.w	8a0 <loop+0xd0>
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
    1ab0:	ldr	r2, [r4, #12]
    1ab2:	ldr	r3, [r4, #16]
    1ab4:	add.w	r3, r3, r2, lsl #2
      m_pitch = newValue;
    };

    void controlVelocity (int value) {
      int newValue = map(value, 0, 1023, 127, 63);
      m_velocity = newValue;
    1ab8:	ldr	r2, [r3, #4]
    1aba:	subs.w	r3, r0, r0, lsl #6
    1abe:	it	mi
    1ac0:	addwmi	r3, r3, #1023	; 0x3ff
    1ac4:	asrs	r3, r3, #10
    1ac6:	adds	r3, #127	; 0x7f
    1ac8:	str	r3, [r2, #12]
    1aca:	b.w	b7a <loop+0x3aa>
    1ace:	ldr	r2, [r4, #12]
    1ad0:	ldr	r3, [r4, #16]
    1ad2:	add.w	r3, r3, r2, lsl #2
    1ad6:	ldr	r2, [r3, #4]
    1ad8:	subs.w	r3, r0, r0, lsl #6
    1adc:	it	mi
    1ade:	addwmi	r3, r3, #1023	; 0x3ff
    1ae2:	asrs	r3, r3, #10
    1ae4:	adds	r3, #127	; 0x7f
    1ae6:	str	r3, [r2, #12]
    1ae8:	b.w	c2e <loop+0x45e>
    1aec:	ldr	r2, [r4, #12]
    1aee:	ldr	r3, [r4, #16]
    1af0:	add.w	r3, r3, r2, lsl #2
    1af4:	ldr	r2, [r3, #4]
    1af6:	subs.w	r3, r0, r0, lsl #6
    1afa:	it	mi
    1afc:	addwmi	r3, r3, #1023	; 0x3ff
    1b00:	asrs	r3, r3, #10
    1b02:	adds	r3, #127	; 0x7f
    1b04:	str	r3, [r2, #12]
    1b06:	b.w	b20 <loop+0x350>
    1b0a:	ldr	r2, [r4, #12]
    1b0c:	ldr	r3, [r4, #16]
    1b0e:	add.w	r3, r3, r2, lsl #2
    1b12:	ldr	r2, [r3, #4]
    1b14:	subs.w	r3, r0, r0, lsl #6
    1b18:	it	mi
    1b1a:	addwmi	r3, r3, #1023	; 0x3ff
    1b1e:	asrs	r3, r3, #10
    1b20:	adds	r3, #127	; 0x7f
    1b22:	str	r3, [r2, #12]
    1b24:	b.w	bd4 <loop+0x404>
    1b28:	ldr	r2, [r4, #12]
    1b2a:	ldr	r3, [r4, #16]
    1b2c:	add.w	r3, r3, r2, lsl #2
    1b30:	ldr	r2, [r3, #4]
    1b32:	subs.w	r3, r0, r0, lsl #6
    1b36:	it	mi
    1b38:	addwmi	r3, r3, #1023	; 0x3ff
    1b3c:	asrs	r3, r3, #10
    1b3e:	adds	r3, #127	; 0x7f
    1b40:	str	r3, [r2, #12]
    1b42:	b.w	c88 <loop+0x4b8>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1b46:	sub.w	r2, r0, #400	; 0x190
    1b4a:	cmp.w	r2, #400	; 0x190
    1b4e:	bcc.n	1c3a <loop+0x146a>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1b50:	sub.w	r2, r0, #800	; 0x320
    1b54:	cmp	r2, #223	; 0xdf
    1b56:	bhi.w	bd4 <loop+0x404>
        max_ppqn = 10;
    1b5a:	movs	r2, #10
    1b5c:	str	r2, [r3, #4]
    1b5e:	ldr	r0, [r4, #4]
    1b60:	b.w	bd4 <loop+0x404>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1b64:	sub.w	r2, r0, #400	; 0x190
    1b68:	cmp.w	r2, #400	; 0x190
    1b6c:	bcc.n	1c2c <loop+0x145c>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1b6e:	sub.w	r2, r0, #800	; 0x320
    1b72:	cmp	r2, #223	; 0xdf
    1b74:	bhi.w	c88 <loop+0x4b8>
        max_ppqn = 10;
    1b78:	movs	r2, #10
    1b7a:	str	r2, [r3, #4]
    1b7c:	ldr	r0, [r4, #4]
    1b7e:	b.w	c88 <loop+0x4b8>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1b82:	sub.w	r2, r0, #400	; 0x190
    1b86:	cmp.w	r2, #400	; 0x190
    1b8a:	bcc.n	1c1e <loop+0x144e>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1b8c:	sub.w	r2, r0, #800	; 0x320
    1b90:	cmp	r2, #223	; 0xdf
    1b92:	bhi.w	c2e <loop+0x45e>
        max_ppqn = 10;
    1b96:	movs	r2, #10
    1b98:	str	r2, [r3, #4]
    1b9a:	ldr	r0, [r4, #4]
    1b9c:	b.w	c2e <loop+0x45e>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1ba0:	sub.w	r2, r0, #400	; 0x190
    1ba4:	cmp.w	r2, #400	; 0x190
    1ba8:	bcc.n	1c10 <loop+0x1440>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1baa:	sub.w	r2, r0, #800	; 0x320
    1bae:	cmp	r2, #223	; 0xdf
    1bb0:	bhi.w	b20 <loop+0x350>
        max_ppqn = 10;
    1bb4:	movs	r2, #10
    1bb6:	str	r2, [r3, #4]
    1bb8:	ldr	r0, [r4, #4]
    1bba:	b.w	b20 <loop+0x350>
    1bbe:	nop
    1bc0:	.word	0x1fff1880
    1bc4:	.word	0x00005734
    1bc8:	.word	0x1fff0c70
    1bcc:	.word	0x00005748
    1bd0:	.word	0x0000575c
    1bd4:	.word	0x1fff190c
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1bd8:	sub.w	r2, r0, #400	; 0x190
    1bdc:	cmp.w	r2, #400	; 0x190
    1be0:	bcc.n	1c02 <loop+0x1432>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1be2:	sub.w	r2, r0, #800	; 0x320
    1be6:	cmp	r2, #223	; 0xdf
    1be8:	bhi.w	b7a <loop+0x3aa>
        max_ppqn = 10;
    1bec:	movs	r2, #10
    1bee:	str	r2, [r3, #4]
    1bf0:	ldr	r0, [r4, #4]
    1bf2:	b.w	b7a <loop+0x3aa>
    1bf6:	adds	r3, #1
    1bf8:	cmp	r3, #3
    1bfa:	it	gt
    1bfc:	movgt	r3, #0
    1bfe:	str	r3, [r6, #0]
    1c00:	b.n	1888 <loop+0x10b8>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
    1c02:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1c04:	movs	r1, #8

        if (ppqn >= 8) {
    1c06:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1c08:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1c0a:	bgt.w	16fc <loop+0xf2c>
    1c0e:	b.n	1700 <loop+0xf30>
    1c10:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1c12:	movs	r1, #8

        if (ppqn >= 8) {
    1c14:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1c16:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1c18:	bgt.w	171a <loop+0xf4a>
    1c1c:	b.n	171e <loop+0xf4e>
    1c1e:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1c20:	movs	r1, #8

        if (ppqn >= 8) {
    1c22:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1c24:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1c26:	bgt.w	1774 <loop+0xfa4>
    1c2a:	b.n	1778 <loop+0xfa8>
    1c2c:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1c2e:	movs	r1, #8

        if (ppqn >= 8) {
    1c30:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1c32:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1c34:	bgt.w	1738 <loop+0xf68>
    1c38:	b.n	173c <loop+0xf6c>
    1c3a:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1c3c:	movs	r1, #8

        if (ppqn >= 8) {
    1c3e:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1c40:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1c42:	bgt.w	1756 <loop+0xf86>
    1c46:	b.n	175a <loop+0xf8a>
        digitalWrite(m_pin, !m_state);
    1c48:	ldr	r1, [r5, #4]
    1c4a:	ldrb	r0, [r5, #0]
    1c4c:	clz	r1, r1
    1c50:	lsrs	r1, r1, #5
    1c52:	bl	2d60 <digitalWrite>
    1c56:	b.n	1a9a <loop+0x12ca>
    1c58:	ldr	r1, [r6, #4]
    1c5a:	ldrb	r0, [r6, #0]
    1c5c:	clz	r1, r1
    1c60:	lsrs	r1, r1, #5
    1c62:	bl	2d60 <digitalWrite>
    1c66:	b.n	1a6a <loop+0x129a>
    1c68:	ldr	r1, [r5, #4]
    1c6a:	ldrb	r0, [r5, #0]
    1c6c:	clz	r1, r1
    1c70:	lsrs	r1, r1, #5
    1c72:	bl	2d60 <digitalWrite>
    1c76:	b.n	1a3a <loop+0x126a>
    1c78:	ldr	r1, [r6, #4]
    1c7a:	ldrb	r0, [r6, #0]
    1c7c:	clz	r1, r1
    1c80:	lsrs	r1, r1, #5
    1c82:	bl	2d60 <digitalWrite>
    1c86:	b.n	1a0a <loop+0x123a>
    1c88:	ldr	r1, [r6, #4]
    1c8a:	ldrb	r0, [r6, #0]
    1c8c:	clz	r1, r1
    1c90:	lsrs	r1, r1, #5
    1c92:	bl	2d60 <digitalWrite>
    1c96:	b.n	19da <loop+0x120a>
      } else if (m_state == LOW && m_reverseButton) {
        if (m_sequence.getShiftMode()) {
          paginator->nextPage();
          Serial.println(paginator->getPage());
        } else {
          m_led.toggle();
    1c98:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1c9a:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1c9c:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1c9e:	clz	r1, r1
    1ca2:	lsrs	r1, r1, #5
    1ca4:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1ca6:	bl	2d60 <digitalWrite>

      if (blinking) {
    1caa:	ldrb	r3, [r5, #16]
    1cac:	cbz	r3, 1cbc <loop+0x14ec>
        digitalWrite(m_pin, !m_state);
    1cae:	ldr	r1, [r5, #4]
    1cb0:	ldrb	r0, [r5, #0]
    1cb2:	clz	r1, r1
    1cb6:	lsrs	r1, r1, #5
    1cb8:	bl	2d60 <digitalWrite>
    1cbc:	ldr	r2, [r6, #28]
    1cbe:	ldr	r7, [r6, #32]
    void resetStep () {
      m_currentStep = 0;
    };

    void reverse () {
      m_reverse = !m_reverse;
    1cc0:	ldrb.w	r3, [r2, #45]	; 0x2d
    1cc4:	eor.w	r3, r3, #1
    1cc8:	strb.w	r3, [r2, #45]	; 0x2d
    1ccc:	b.w	968 <loop+0x198>
    1cd0:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1cd2:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1cd4:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1cd6:	clz	r1, r1
    1cda:	lsrs	r1, r1, #5
    1cdc:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1cde:	bl	2d60 <digitalWrite>

      if (blinking) {
    1ce2:	ldrb	r3, [r5, #16]
    1ce4:	cbz	r3, 1cf4 <loop+0x1524>
        digitalWrite(m_pin, !m_state);
    1ce6:	ldr	r1, [r5, #4]
    1ce8:	ldrb	r0, [r5, #0]
    1cea:	clz	r1, r1
    1cee:	lsrs	r1, r1, #5
    1cf0:	bl	2d60 <digitalWrite>
    1cf4:	ldr	r2, [r6, #28]
    1cf6:	ldr	r7, [r6, #32]
    1cf8:	ldrb.w	r3, [r2, #45]	; 0x2d
    1cfc:	eor.w	r3, r3, #1
    1d00:	strb.w	r3, [r2, #45]	; 0x2d
    1d04:	b.w	8a0 <loop+0xd0>
    1d08:	ldr	r6, [r6, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d0a:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1d0c:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d0e:	clz	r1, r1
    1d12:	lsrs	r1, r1, #5
    1d14:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1d16:	bl	2d60 <digitalWrite>

      if (blinking) {
    1d1a:	ldrb	r3, [r6, #16]
    1d1c:	cbz	r3, 1d2c <loop+0x155c>
        digitalWrite(m_pin, !m_state);
    1d1e:	ldr	r1, [r6, #4]
    1d20:	ldrb	r0, [r6, #0]
    1d22:	clz	r1, r1
    1d26:	lsrs	r1, r1, #5
    1d28:	bl	2d60 <digitalWrite>
    1d2c:	ldr	r2, [r5, #28]
    1d2e:	ldr	r7, [r5, #32]
    1d30:	ldrb.w	r3, [r2, #45]	; 0x2d
    1d34:	eor.w	r3, r3, #1
    1d38:	strb.w	r3, [r2, #45]	; 0x2d
    1d3c:	b.w	904 <loop+0x134>
    1d40:	ldr	r6, [r7, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d42:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1d44:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d46:	clz	r1, r1
    1d4a:	lsrs	r1, r1, #5
    1d4c:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1d4e:	bl	2d60 <digitalWrite>

      if (blinking) {
    1d52:	ldrb	r3, [r6, #16]
    1d54:	cbz	r3, 1d64 <loop+0x1594>
        digitalWrite(m_pin, !m_state);
    1d56:	ldr	r1, [r6, #4]
    1d58:	ldrb	r0, [r6, #0]
    1d5a:	clz	r1, r1
    1d5e:	lsrs	r1, r1, #5
    1d60:	bl	2d60 <digitalWrite>
    1d64:	ldr	r2, [r5, #28]
    1d66:	ldr	r6, [r5, #32]
    1d68:	ldrb.w	r3, [r2, #45]	; 0x2d
    1d6c:	eor.w	r3, r3, #1
    1d70:	strb.w	r3, [r2, #45]	; 0x2d
    1d74:	b.w	9cc <loop+0x1fc>
    1d78:	ldr	r6, [r6, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d7a:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1d7c:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d7e:	clz	r1, r1
    1d82:	lsrs	r1, r1, #5
    1d84:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1d86:	bl	2d60 <digitalWrite>

      if (blinking) {
    1d8a:	ldrb	r3, [r6, #16]
    1d8c:	cbz	r3, 1d9c <loop+0x15cc>
        digitalWrite(m_pin, !m_state);
    1d8e:	ldr	r1, [r6, #4]
    1d90:	ldrb	r0, [r6, #0]
    1d92:	clz	r1, r1
    1d96:	lsrs	r1, r1, #5
    1d98:	bl	2d60 <digitalWrite>
    1d9c:	ldr	r2, [r5, #28]
    1d9e:	ldr	r7, [r5, #32]
    1da0:	ldrb.w	r3, [r2, #45]	; 0x2d
    1da4:	eor.w	r3, r3, #1
    1da8:	strb.w	r3, [r2, #45]	; 0x2d
    1dac:	b.w	836 <loop+0x66>
      m_leds[m_currentStep]->blink();

      Step* current = m_steps[m_currentStep];

      if (current->m_state) {
        m_controller.play(
    1db0:	ldr.w	r8, [r2, #8]
    1db4:	ldr	r7, [r2, #12]
    1db6:	ldr.w	fp, [r2, #16]
    1dba:	ldr.w	r9, [r6, #56]	; 0x38
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1dbe:	mov.w	r0, r8, lsl #16
    1dc2:	lsls	r3, r7, #24
    1dc4:	and.w	r3, r3, #2130706432	; 0x7f000000
    1dc8:	and.w	r0, r0, #8323072	; 0x7f0000
    1dcc:	orrs	r0, r3
    1dce:	orr.w	r0, r0, #40704	; 0x9f00
    1dd2:	orr.w	r0, r0, #9
    1dd6:	bl	2fec <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1dda:	bl	3088 <usb_midi_flush_output>
    }

    void play (int pitch, int velocity, int length) {
      // create new note pass self as reference
      noteOn(0, pitch, velocity);
      Note* note = new Note(pitch, velocity, length, 0);
    1dde:	movs	r0, #20
    1de0:	bl	4390 <operator new(unsigned int)>
    1de4:	ldr	r3, [r6, #0]
    Note (
      int pitch, 
      int velocity, 
      int length,
      int channel
    ): m_pitch(pitch), m_velocity(velocity), m_length(length), m_channel(channel) {
    1de6:	str.w	r8, [r0]
    1dea:	str	r7, [r0, #4]
    1dec:	str.w	fp, [r0, #8]
    1df0:	str.w	sl, [r0, #12]
      m_ended = false;
    1df4:	strb.w	sl, [r0, #16]
      m_notes[0] = note;
    1df8:	str.w	r0, [r9]
    1dfc:	b.n	1874 <loop+0x10a4>
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
          m_currentStep = 3;
    1dfe:	movs	r3, #3
    1e00:	str	r3, [r6, #0]
    1e02:	b.n	1888 <loop+0x10b8>
      return m_shiftMode;
    }

    void toggleGlobalMode () {
            
      if (currentMode == PITCH) {
    1e04:	ldr	r6, [pc, #776]	; (2110 <loop+0x1940>)
    1e06:	ldrb	r2, [r6, #0]
    1e08:	cmp	r2, #0
    1e0a:	beq.w	20c0 <loop+0x18f0>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1e0e:	cmp	r2, #1
    1e10:	beq.w	227a <loop+0x1aaa>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1e14:	cmp	r2, #2
    1e16:	bne.w	fc2 <loop+0x7f2>
    1e1a:	movs	r1, #5
    1e1c:	ldr	r0, [pc, #756]	; (2114 <loop+0x1944>)
        currentMode = PITCH;
    1e1e:	strb	r3, [r6, #0]
    1e20:	str	r3, [sp, #4]
    1e22:	bl	2750 <usb_serial_write>
    1e26:	ldr	r0, [pc, #752]	; (2118 <loop+0x1948>)
    1e28:	bl	42c4 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1e2c:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1e30:	ldrb.w	sl, [r6]
    1e34:	mov	r0, sl
    1e36:	bl	2d6c <digitalRead>
    1e3a:	clz	r1, r0
    1e3e:	lsrs	r1, r1, #5
    1e40:	mov	r0, sl
    1e42:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e46:	ldr.w	r2, [r8]
    1e4a:	str	r2, [sp, #308]	; 0x134
      blinking = true;
      blinkingCounter = times;
    1e4c:	ldr	r3, [sp, #4]
        m_leds[4]->on();
    1e4e:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1e52:	ldr	r1, [sp, #308]	; 0x134
    1e54:	str	r3, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1e56:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1e58:	str	r1, [r6, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1e5a:	strb	r0, [r6, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1e5c:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1e5e:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1e60:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1e62:	ldrb	r0, [r2, #0]
    1e64:	bl	2d60 <digitalWrite>
    1e68:	ldr	r6, [r7, #32]
    1e6a:	b.w	9cc <loop+0x1fc>
      return m_shiftMode;
    }

    void toggleGlobalMode () {
            
      if (currentMode == PITCH) {
    1e6e:	ldr	r7, [pc, #672]	; (2110 <loop+0x1940>)
    1e70:	ldrb	r2, [r7, #0]
    1e72:	cmp	r2, #0
    1e74:	beq.w	2120 <loop+0x1950>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1e78:	cmp	r2, #1
    1e7a:	beq.w	22b2 <loop+0x1ae2>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1e7e:	cmp	r2, #2
    1e80:	bne.w	1008 <loop+0x838>
    1e84:	movs	r1, #5
    1e86:	ldr	r0, [pc, #652]	; (2114 <loop+0x1944>)
        currentMode = PITCH;
    1e88:	strb	r3, [r7, #0]
    1e8a:	str	r3, [sp, #4]
    1e8c:	bl	2750 <usb_serial_write>
    1e90:	ldr	r0, [pc, #644]	; (2118 <loop+0x1948>)
    1e92:	bl	42c4 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1e96:	ldr.w	r7, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1e9a:	ldrb.w	sl, [r7]
    1e9e:	mov	r0, sl
    1ea0:	bl	2d6c <digitalRead>
    1ea4:	clz	r1, r0
    1ea8:	lsrs	r1, r1, #5
    1eaa:	mov	r0, sl
    1eac:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1eb0:	ldr.w	r2, [r8]
    1eb4:	str	r2, [sp, #296]	; 0x128
      blinking = true;
      blinkingCounter = times;
    1eb6:	ldr	r3, [sp, #4]
        m_leds[4]->on();
    1eb8:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1ebc:	ldr	r1, [sp, #296]	; 0x128
    1ebe:	str	r3, [r7, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1ec0:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1ec2:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1ec4:	strb	r0, [r7, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1ec6:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1ec8:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1eca:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1ecc:	ldrb	r0, [r2, #0]
    1ece:	bl	2d60 <digitalWrite>
    1ed2:	ldr	r7, [r5, #32]
    1ed4:	b.w	968 <loop+0x198>
      return m_shiftMode;
    }

    void toggleGlobalMode () {
            
      if (currentMode == PITCH) {
    1ed8:	ldr	r7, [pc, #564]	; (2110 <loop+0x1940>)
    1eda:	ldrb	r2, [r7, #0]
    1edc:	cmp	r2, #0
    1ede:	beq.w	2072 <loop+0x18a2>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1ee2:	cmp	r2, #1
    1ee4:	beq.w	22ea <loop+0x1b1a>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1ee8:	cmp	r2, #2
    1eea:	bne.w	104e <loop+0x87e>
    1eee:	movs	r1, #5
    1ef0:	ldr	r0, [pc, #544]	; (2114 <loop+0x1944>)
        currentMode = PITCH;
    1ef2:	strb	r3, [r7, #0]
    1ef4:	str	r3, [sp, #4]
    1ef6:	bl	2750 <usb_serial_write>
    1efa:	ldr	r0, [pc, #540]	; (2118 <loop+0x1948>)
    1efc:	bl	42c4 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1f00:	ldr.w	r7, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1f04:	ldrb.w	sl, [r7]
    1f08:	mov	r0, sl
    1f0a:	bl	2d6c <digitalRead>
    1f0e:	clz	r1, r0
    1f12:	lsrs	r1, r1, #5
    1f14:	mov	r0, sl
    1f16:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1f1a:	ldr.w	r2, [r8]
    1f1e:	str	r2, [sp, #272]	; 0x110
      blinking = true;
      blinkingCounter = times;
    1f20:	ldr	r3, [sp, #4]
        m_leds[4]->on();
    1f22:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1f26:	ldr	r1, [sp, #272]	; 0x110
    1f28:	str	r3, [r7, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1f2a:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1f2c:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1f2e:	strb	r0, [r7, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1f30:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1f32:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1f34:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1f36:	ldrb	r0, [r2, #0]
    1f38:	bl	2d60 <digitalWrite>
    1f3c:	ldr	r7, [r5, #32]
    1f3e:	b.w	8a0 <loop+0xd0>
      return m_shiftMode;
    }

    void toggleGlobalMode () {
            
      if (currentMode == PITCH) {
    1f42:	ldr	r7, [pc, #460]	; (2110 <loop+0x1940>)
    1f44:	ldrb	r2, [r7, #0]
    1f46:	cmp	r2, #0
    1f48:	beq.w	216e <loop+0x199e>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1f4c:	cmp	r2, #1
    1f4e:	beq.w	220a <loop+0x1a3a>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1f52:	cmp	r2, #2
    1f54:	bne.w	1094 <loop+0x8c4>
    1f58:	movs	r1, #5
    1f5a:	ldr	r0, [pc, #440]	; (2114 <loop+0x1944>)
        currentMode = PITCH;
    1f5c:	strb	r3, [r7, #0]
    1f5e:	str	r3, [sp, #4]
    1f60:	bl	2750 <usb_serial_write>
    1f64:	ldr	r0, [pc, #432]	; (2118 <loop+0x1948>)
    1f66:	bl	42c4 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1f6a:	ldr.w	r7, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1f6e:	ldrb.w	sl, [r7]
    1f72:	mov	r0, sl
    1f74:	bl	2d6c <digitalRead>
    1f78:	clz	r1, r0
    1f7c:	lsrs	r1, r1, #5
    1f7e:	mov	r0, sl
    1f80:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1f84:	ldr.w	r2, [r8]
    1f88:	str	r2, [sp, #284]	; 0x11c
      blinking = true;
      blinkingCounter = times;
    1f8a:	ldr	r3, [sp, #4]
        m_leds[4]->on();
    1f8c:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1f90:	ldr	r1, [sp, #284]	; 0x11c
    1f92:	str	r3, [r7, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1f94:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1f96:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1f98:	strb	r0, [r7, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1f9a:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1f9c:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1f9e:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1fa0:	ldrb	r0, [r2, #0]
    1fa2:	bl	2d60 <digitalWrite>
    1fa6:	ldr	r7, [r6, #32]
    1fa8:	b.w	904 <loop+0x134>
      return m_shiftMode;
    }

    void toggleGlobalMode () {
            
      if (currentMode == PITCH) {
    1fac:	ldr	r7, [pc, #352]	; (2110 <loop+0x1940>)
    1fae:	ldrb	r2, [r7, #0]
    1fb0:	cmp	r2, #0
    1fb2:	beq.w	21bc <loop+0x19ec>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1fb6:	cmp	r2, #1
    1fb8:	beq.w	2242 <loop+0x1a72>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1fbc:	cmp	r2, #2
    1fbe:	bne.w	10da <loop+0x90a>
    1fc2:	movs	r1, #5
    1fc4:	ldr	r0, [pc, #332]	; (2114 <loop+0x1944>)
        currentMode = PITCH;
    1fc6:	strb	r3, [r7, #0]
    1fc8:	str	r3, [sp, #4]
    1fca:	bl	2750 <usb_serial_write>
    1fce:	ldr	r0, [pc, #328]	; (2118 <loop+0x1948>)
    1fd0:	bl	42c4 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1fd4:	ldr.w	r7, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1fd8:	ldrb.w	sl, [r7]
    1fdc:	mov	r0, sl
    1fde:	bl	2d6c <digitalRead>
    1fe2:	clz	r1, r0
    1fe6:	lsrs	r1, r1, #5
    1fe8:	mov	r0, sl
    1fea:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1fee:	ldr.w	r2, [r8]
    1ff2:	str	r2, [sp, #260]	; 0x104
      blinking = true;
      blinkingCounter = times;
    1ff4:	ldr	r3, [sp, #4]
        m_leds[4]->on();
    1ff6:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1ffa:	ldr	r1, [sp, #260]	; 0x104
    1ffc:	str	r3, [r7, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1ffe:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
    2000:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    2002:	strb	r0, [r7, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    2004:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    2006:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    2008:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    200a:	ldrb	r0, [r2, #0]
    200c:	bl	2d60 <digitalWrite>
    2010:	ldr	r7, [r6, #32]
    2012:	b.w	836 <loop+0x66>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    2016:	subs	r2, r3, #1
    2018:	cbz	r3, 206c <loop+0x189c>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    201a:	str	r2, [r6, #0]
    201c:	b.n	197e <loop+0x11ae>
      m_leds[m_currentStep]->blink();

      Step* current = m_steps[m_currentStep];

      if (current->m_state) {
        m_controller.play(
    201e:	ldr.w	r8, [r2, #8]
    2022:	ldr	r7, [r2, #12]
    2024:	ldr.w	fp, [r2, #16]
    2028:	ldr.w	sl, [r6, #56]	; 0x38
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    202c:	mov.w	r0, r8, lsl #16
    2030:	lsls	r3, r7, #24
    2032:	and.w	r3, r3, #2130706432	; 0x7f000000
    2036:	and.w	r0, r0, #8323072	; 0x7f0000
    203a:	orrs	r0, r3
    203c:	orr.w	r0, r0, #40704	; 0x9f00
    2040:	orr.w	r0, r0, #9
    2044:	bl	2fec <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    2048:	bl	3088 <usb_midi_flush_output>
    }

    void play (int pitch, int velocity, int length) {
      // create new note pass self as reference
      noteOn(0, pitch, velocity);
      Note* note = new Note(pitch, velocity, length, 0);
    204c:	movs	r0, #20
    204e:	bl	4390 <operator new(unsigned int)>
    2052:	ldr	r3, [r6, #0]
    Note (
      int pitch, 
      int velocity, 
      int length,
      int channel
    ): m_pitch(pitch), m_velocity(velocity), m_length(length), m_channel(channel) {
    2054:	str.w	r8, [r0]
    2058:	str	r7, [r0, #4]
    205a:	str.w	fp, [r0, #8]
    205e:	str.w	r9, [r0, #12]
      m_ended = false;
    2062:	strb.w	r9, [r0, #16]
      m_notes[0] = note;
    2066:	str.w	r0, [sl]
    206a:	b.n	196a <loop+0x119a>
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
          m_currentStep = 3;
    206c:	movs	r3, #3
    206e:	str	r3, [r6, #0]
    2070:	b.n	197e <loop+0x11ae>
    2072:	movs	r1, #8
    }

    void toggleGlobalMode () {
            
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    2074:	mov.w	sl, #1
    2078:	ldr	r0, [pc, #160]	; (211c <loop+0x194c>)
    207a:	strb.w	sl, [r7]
    207e:	bl	2750 <usb_serial_write>
    2082:	ldr	r0, [pc, #148]	; (2118 <loop+0x1948>)
    2084:	bl	42c4 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    2088:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    208c:	ldrb.w	r7, [r9]
    2090:	mov	r0, r7
    2092:	bl	2d6c <digitalRead>
    2096:	clz	r1, r0
    209a:	lsrs	r1, r1, #5
    209c:	mov	r0, r7
    209e:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    20a2:	ldr.w	r3, [r8]
    20a6:	str	r3, [sp, #268]	; 0x10c
      blinking = true;
      blinkingCounter = times;
    20a8:	movw	r3, #999	; 0x3e7
    20ac:	str.w	r3, [r9, #20]
	return ret;
    20b0:	ldr	r3, [sp, #268]	; 0x10c
    20b2:	ldr	r7, [r5, #32]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    20b4:	strb.w	sl, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    20b8:	str.w	r3, [r9, #8]
    20bc:	b.w	8a0 <loop+0xd0>
    20c0:	movs	r1, #8
    }

    void toggleGlobalMode () {
            
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    20c2:	mov.w	sl, #1
    20c6:	ldr	r0, [pc, #84]	; (211c <loop+0x194c>)
    20c8:	strb.w	sl, [r6]
    20cc:	bl	2750 <usb_serial_write>
    20d0:	ldr	r0, [pc, #68]	; (2118 <loop+0x1948>)
    20d2:	bl	42c4 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    20d6:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    20da:	ldrb.w	r6, [r9]
    20de:	mov	r0, r6
    20e0:	bl	2d6c <digitalRead>
    20e4:	clz	r1, r0
    20e8:	lsrs	r1, r1, #5
    20ea:	mov	r0, r6
    20ec:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    20f0:	ldr.w	r3, [r8]
    20f4:	str	r3, [sp, #304]	; 0x130
      blinking = true;
      blinkingCounter = times;
    20f6:	movw	r3, #999	; 0x3e7
    20fa:	str.w	r3, [r9, #20]
	return ret;
    20fe:	ldr	r3, [sp, #304]	; 0x130
    2100:	ldr	r6, [r7, #32]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    2102:	strb.w	sl, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    2106:	str.w	r3, [r9, #8]
    210a:	b.w	9cc <loop+0x1fc>
    210e:	nop
    2110:	.word	0x1fff1890
    2114:	.word	0x00005720
    2118:	.word	0x1fff0c70
    211c:	.word	0x00005708
    2120:	movs	r1, #8
    }

    void toggleGlobalMode () {
            
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    2122:	mov.w	sl, #1
    2126:	ldr	r0, [pc, #536]	; (2340 <loop+0x1b70>)
    2128:	strb.w	sl, [r7]
    212c:	bl	2750 <usb_serial_write>
    2130:	ldr	r0, [pc, #528]	; (2344 <loop+0x1b74>)
    2132:	bl	42c4 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    2136:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    213a:	ldrb.w	r7, [r9]
    213e:	mov	r0, r7
    2140:	bl	2d6c <digitalRead>
    2144:	clz	r1, r0
    2148:	lsrs	r1, r1, #5
    214a:	mov	r0, r7
    214c:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2150:	ldr.w	r3, [r8]
    2154:	str	r3, [sp, #292]	; 0x124
      blinking = true;
      blinkingCounter = times;
    2156:	movw	r3, #999	; 0x3e7
    215a:	str.w	r3, [r9, #20]
	return ret;
    215e:	ldr	r3, [sp, #292]	; 0x124
    2160:	ldr	r7, [r5, #32]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    2162:	strb.w	sl, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    2166:	str.w	r3, [r9, #8]
    216a:	b.w	968 <loop+0x198>
    216e:	movs	r1, #8
    }

    void toggleGlobalMode () {
            
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    2170:	mov.w	sl, #1
    2174:	ldr	r0, [pc, #456]	; (2340 <loop+0x1b70>)
    2176:	strb.w	sl, [r7]
    217a:	bl	2750 <usb_serial_write>
    217e:	ldr	r0, [pc, #452]	; (2344 <loop+0x1b74>)
    2180:	bl	42c4 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    2184:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    2188:	ldrb.w	r7, [r9]
    218c:	mov	r0, r7
    218e:	bl	2d6c <digitalRead>
    2192:	clz	r1, r0
    2196:	lsrs	r1, r1, #5
    2198:	mov	r0, r7
    219a:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    219e:	ldr.w	r3, [r8]
    21a2:	str	r3, [sp, #280]	; 0x118
      blinking = true;
      blinkingCounter = times;
    21a4:	movw	r3, #999	; 0x3e7
    21a8:	str.w	r3, [r9, #20]
	return ret;
    21ac:	ldr	r3, [sp, #280]	; 0x118
    21ae:	ldr	r7, [r6, #32]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    21b0:	strb.w	sl, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    21b4:	str.w	r3, [r9, #8]
    21b8:	b.w	904 <loop+0x134>
    21bc:	movs	r1, #8
    }

    void toggleGlobalMode () {
            
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    21be:	mov.w	sl, #1
    21c2:	ldr	r0, [pc, #380]	; (2340 <loop+0x1b70>)
    21c4:	strb.w	sl, [r7]
    21c8:	bl	2750 <usb_serial_write>
    21cc:	ldr	r0, [pc, #372]	; (2344 <loop+0x1b74>)
    21ce:	bl	42c4 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    21d2:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    21d6:	ldrb.w	r7, [r9]
    21da:	mov	r0, r7
    21dc:	bl	2d6c <digitalRead>
    21e0:	clz	r1, r0
    21e4:	lsrs	r1, r1, #5
    21e6:	mov	r0, r7
    21e8:	bl	2d60 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    21ec:	ldr.w	r3, [r8]
    21f0:	str	r3, [sp, #256]	; 0x100
      blinking = true;
      blinkingCounter = times;
    21f2:	movw	r3, #999	; 0x3e7
    21f6:	str.w	r3, [r9, #20]
	return ret;
    21fa:	ldr	r3, [sp, #256]	; 0x100
    21fc:	ldr	r7, [r6, #32]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    21fe:	strb.w	sl, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    2202:	str.w	r3, [r9, #8]
    2206:	b.w	836 <loop+0x66>
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    220a:	movs	r2, #2
    220c:	movs	r1, #10
    220e:	ldr	r0, [pc, #312]	; (2348 <loop+0x1b78>)
    2210:	strb	r2, [r7, #0]
    2212:	str	r3, [sp, #4]
    2214:	bl	2750 <usb_serial_write>
    2218:	ldr	r0, [pc, #296]	; (2344 <loop+0x1b74>)
    221a:	bl	42c4 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    221e:	ldr	r3, [sp, #4]
    2220:	ldr.w	r0, [r9, #36]	; 0x24
    2224:	mov	r1, r3
    2226:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    222a:	ldr.w	r2, [r9, #36]	; 0x24
    };

    void off () {
      blinking = false;
      m_state = 0;
      digitalWrite(m_pin, m_state);
    222e:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    2230:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    2232:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
    2234:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
    2236:	ldrb	r0, [r2, #0]
    2238:	bl	2d60 <digitalWrite>
    223c:	ldr	r7, [r6, #32]
    223e:	b.w	904 <loop+0x134>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    2242:	movs	r2, #2
    2244:	movs	r1, #10
    2246:	ldr	r0, [pc, #256]	; (2348 <loop+0x1b78>)
    2248:	strb	r2, [r7, #0]
    224a:	str	r3, [sp, #4]
    224c:	bl	2750 <usb_serial_write>
    2250:	ldr	r0, [pc, #240]	; (2344 <loop+0x1b74>)
    2252:	bl	42c4 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    2256:	ldr	r3, [sp, #4]
    2258:	ldr.w	r0, [r9, #36]	; 0x24
    225c:	mov	r1, r3
    225e:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    2262:	ldr.w	r2, [r9, #36]	; 0x24
    2266:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    2268:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    226a:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
    226c:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
    226e:	ldrb	r0, [r2, #0]
    2270:	bl	2d60 <digitalWrite>
    2274:	ldr	r7, [r6, #32]
    2276:	b.w	836 <loop+0x66>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    227a:	movs	r2, #2
    227c:	movs	r1, #10
    227e:	ldr	r0, [pc, #200]	; (2348 <loop+0x1b78>)
    2280:	strb	r2, [r6, #0]
    2282:	str	r3, [sp, #4]
    2284:	bl	2750 <usb_serial_write>
    2288:	ldr	r0, [pc, #184]	; (2344 <loop+0x1b74>)
    228a:	bl	42c4 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    228e:	ldr	r3, [sp, #4]
    2290:	ldr.w	r0, [r9, #36]	; 0x24
    2294:	mov	r1, r3
    2296:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    229a:	ldr.w	r2, [r9, #36]	; 0x24
    229e:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    22a0:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    22a2:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
    22a4:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
    22a6:	ldrb	r0, [r2, #0]
    22a8:	bl	2d60 <digitalWrite>
    22ac:	ldr	r6, [r7, #32]
    22ae:	b.w	9cc <loop+0x1fc>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    22b2:	movs	r2, #2
    22b4:	movs	r1, #10
    22b6:	ldr	r0, [pc, #144]	; (2348 <loop+0x1b78>)
    22b8:	strb	r2, [r7, #0]
    22ba:	str	r3, [sp, #4]
    22bc:	bl	2750 <usb_serial_write>
    22c0:	ldr	r0, [pc, #128]	; (2344 <loop+0x1b74>)
    22c2:	bl	42c4 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    22c6:	ldr	r3, [sp, #4]
    22c8:	ldr.w	r0, [r9, #36]	; 0x24
    22cc:	mov	r1, r3
    22ce:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    22d2:	ldr.w	r2, [r9, #36]	; 0x24
    22d6:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    22d8:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    22da:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
    22dc:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
    22de:	ldrb	r0, [r2, #0]
    22e0:	bl	2d60 <digitalWrite>
    22e4:	ldr	r7, [r5, #32]
    22e6:	b.w	968 <loop+0x198>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    22ea:	movs	r2, #2
    22ec:	movs	r1, #10
    22ee:	ldr	r0, [pc, #88]	; (2348 <loop+0x1b78>)
    22f0:	strb	r2, [r7, #0]
    22f2:	str	r3, [sp, #4]
    22f4:	bl	2750 <usb_serial_write>
    22f8:	ldr	r0, [pc, #72]	; (2344 <loop+0x1b74>)
    22fa:	bl	42c4 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    22fe:	ldr	r3, [sp, #4]
    2300:	ldr.w	r0, [r9, #36]	; 0x24
    2304:	mov	r1, r3
    2306:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    230a:	ldr.w	r2, [r9, #36]	; 0x24
    230e:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    2310:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    2312:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
    2314:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
    2316:	ldrb	r0, [r2, #0]
    2318:	bl	2d60 <digitalWrite>
    231c:	ldr	r7, [r5, #32]
    231e:	b.w	8a0 <loop+0xd0>
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    2322:	mov	r7, r3
    2324:	b.w	866 <loop+0x96>
    2328:	mov	r6, r3
    232a:	b.w	992 <loop+0x1c2>
    232e:	mov	r7, r3
    2330:	b.w	7fc <loop+0x2c>
    2334:	mov	r7, r3
    2336:	b.w	8ca <loop+0xfa>
    233a:	mov	r7, r3
    233c:	b.w	92e <loop+0x15e>
    2340:	.word	0x00005708
    2344:	.word	0x1fff0c70
    2348:	.word	0x00005714

0000234c <_GLOBAL__sub_I_currentMode>:
    234c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#include "definitions.h"
#include "controller.h"
#include "transport.h"
#include "step.h"

Led led1(3, LOW);
    2350:	movs	r2, #0
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
    2352:	sub	sp, #12
#include "definitions.h"
#include "controller.h"
#include "transport.h"
#include "step.h"

Led led1(3, LOW);
    2354:	movs	r1, #3
    2356:	ldr	r0, [pc, #700]	; (2614 <_GLOBAL__sub_I_currentMode+0x2c8>)
    boolean m_shiftMode;
    int m_page = 1;
    Paginator* m_paginator;
    Controller &m_controller;

    Sequence (Step* steps[4], Led* leds[6], Controller& controller): m_controller(controller) {
    2358:	ldr	r4, [pc, #700]	; (2618 <_GLOBAL__sub_I_currentMode+0x2cc>)
    235a:	ldr	r7, [pc, #704]	; (261c <_GLOBAL__sub_I_currentMode+0x2d0>)
    235c:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    2360:	movs	r2, #0
    2362:	movs	r1, #5
    2364:	ldr	r0, [pc, #696]	; (2620 <_GLOBAL__sub_I_currentMode+0x2d4>)
    2366:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    236a:	movs	r2, #0
    236c:	movs	r1, #7
    236e:	ldr	r0, [pc, #692]	; (2624 <_GLOBAL__sub_I_currentMode+0x2d8>)
    2370:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    2374:	movs	r2, #0
    2376:	movs	r1, #9
    2378:	ldr	r0, [pc, #684]	; (2628 <_GLOBAL__sub_I_currentMode+0x2dc>)
    237a:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    237e:	movs	r2, #0
    2380:	movs	r1, #11
    2382:	ldr	r0, [pc, #680]	; (262c <_GLOBAL__sub_I_currentMode+0x2e0>)
    2384:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    2388:	movs	r2, #0
    238a:	movs	r1, #24
    238c:	ldr	r0, [pc, #672]	; (2630 <_GLOBAL__sub_I_currentMode+0x2e4>)
    238e:	bl	46c <Led::Led(int, int)>
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    2392:	ldr	r1, [pc, #672]	; (2634 <_GLOBAL__sub_I_currentMode+0x2e8>)
    2394:	ldr	r3, [pc, #672]	; (2638 <_GLOBAL__sub_I_currentMode+0x2ec>)
    2396:	ldr	r2, [pc, #676]	; (263c <_GLOBAL__sub_I_currentMode+0x2f0>)
    2398:	str	r3, [r1, #0]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
      m_length = 4;
    239a:	movs	r0, #4
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    239c:	mov.w	lr, #0
      m_controller = controller;
      m_pitch = 38;
    23a0:	movs	r6, #38	; 0x26
      m_velocity = 100;
    23a2:	movs	r5, #100	; 0x64
      m_length = 4;
    23a4:	str	r0, [r1, #16]
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    23a6:	strb.w	lr, [r1, #4]
      m_controller = controller;
      m_pitch = 38;
    23aa:	str	r6, [r1, #8]
      m_velocity = 100;
    23ac:	str	r5, [r1, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    23ae:	ldr	r1, [pc, #656]	; (2640 <_GLOBAL__sub_I_currentMode+0x2f4>)
    23b0:	str	r3, [r2, #0]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
      m_length = 4;
    23b2:	str	r0, [r2, #16]
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    23b4:	strb.w	lr, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
    23b8:	str	r6, [r2, #8]
      m_velocity = 100;
    23ba:	str	r5, [r2, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    23bc:	ldr	r2, [pc, #644]	; (2644 <_GLOBAL__sub_I_currentMode+0x2f8>)
    23be:	str	r3, [r1, #0]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
      m_length = 4;
    23c0:	str	r0, [r1, #16]
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    23c2:	strb.w	lr, [r1, #4]
      m_controller = controller;
      m_pitch = 38;
    23c6:	str	r6, [r1, #8]
      m_velocity = 100;
    23c8:	str	r5, [r1, #12]
    23ca:	movs	r1, #1
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    23cc:	str	r3, [r2, #0]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
      m_length = 4;
    23ce:	str	r0, [r2, #16]
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    23d0:	strb.w	lr, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
    23d4:	str	r6, [r2, #8]
      m_velocity = 100;
    23d6:	str	r5, [r2, #12]
    23d8:	str	r3, [r4, #56]	; 0x38
    23da:	str	r1, [r4, #48]	; 0x30
    23dc:	add.w	r3, r4, #16
    23e0:	add.w	r0, r4, #40	; 0x28
    23e4:	mov	r2, r7
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
    23e6:	ldr.w	r1, [r2], #4
    23ea:	str.w	r1, [r3, #4]!
    int m_page = 1;
    Paginator* m_paginator;
    Controller &m_controller;

    Sequence (Step* steps[4], Led* leds[6], Controller& controller): m_controller(controller) {
      for (int i = 0; i < 6; i++) {
    23ee:	cmp	r0, r3
    23f0:	bne.n	23e6 <_GLOBAL__sub_I_currentMode+0x9a>
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    23f2:	ldr	r3, [pc, #596]	; (2648 <_GLOBAL__sub_I_currentMode+0x2fc>)
    23f4:	ldmia.w	r3, {r0, r5}
      };
      
      m_currentStep = 0;
    23f8:	movs	r2, #0
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    23fa:	ldr	r1, [r3, #8]
    23fc:	str	r0, [r4, #4]
    23fe:	ldr	r3, [r3, #12]
    2400:	str	r5, [r4, #8]
      
      m_currentStep = 0;
      m_mode = PITCH;
      m_reverse = false;
      m_controller = controller;
      m_paginator = new Paginator();
    2402:	movs	r0, #8
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    2404:	str	r1, [r4, #12]
    2406:	str	r3, [r4, #16]
      };
      
      m_currentStep = 0;
    2408:	str	r2, [r4, #0]
      m_mode = PITCH;
    240a:	strb.w	r2, [r4, #44]	; 0x2c
      m_reverse = false;
    240e:	strb.w	r2, [r4, #45]	; 0x2d
      m_controller = controller;
      m_paginator = new Paginator();
    2412:	bl	4390 <operator new(unsigned int)>
      m_leds[4]->toggle();
    2416:	ldr	r5, [r4, #36]	; 0x24
      
      m_currentStep = 0;
      m_mode = PITCH;
      m_reverse = false;
      m_controller = controller;
      m_paginator = new Paginator();
    2418:	str	r0, [r4, #52]	; 0x34
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    241a:	ldr	r3, [r5, #4]
    241c:	mov	r2, r0
    241e:	clz	r3, r3
    2422:	lsrs	r3, r3, #5
  Sequence* m_sequence;
  private:
    int m_page = 1;  

  public:
    Paginator () {
    2424:	movs	r1, #1

      digitalWrite(m_pin, m_state);
    2426:	ldrb	r0, [r5, #0]
    2428:	str	r1, [r2, #4]
    242a:	mov	r1, r3
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    242c:	str	r3, [r5, #4]

      digitalWrite(m_pin, m_state);
    242e:	bl	2d60 <digitalWrite>

      if (blinking) {
    2432:	ldrb	r3, [r5, #16]
    2434:	cbz	r3, 2444 <_GLOBAL__sub_I_currentMode+0xf8>
        digitalWrite(m_pin, !m_state);
    2436:	ldr	r1, [r5, #4]
    2438:	ldrb	r0, [r5, #0]
    243a:	clz	r1, r1
    243e:	lsrs	r1, r1, #5
    2440:	bl	2d60 <digitalWrite>
      m_leds[4]->toggle();
      m_leds[5]->toggle();
    2444:	ldr	r5, [r4, #40]	; 0x28
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    2446:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    2448:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    244a:	clz	r1, r1
    244e:	lsrs	r1, r1, #5
    2450:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    2452:	bl	2d60 <digitalWrite>

      if (blinking) {
    2456:	ldrb	r3, [r5, #16]
    2458:	cbz	r3, 2468 <_GLOBAL__sub_I_currentMode+0x11c>
        digitalWrite(m_pin, !m_state);
    245a:	ldr	r1, [r5, #4]
    245c:	ldrb	r0, [r5, #0]
    245e:	clz	r1, r1
    2462:	lsrs	r1, r1, #5
    2464:	bl	2d60 <digitalWrite>
    2468:	movs	r1, #15
    246a:	ldr	r0, [pc, #480]	; (264c <_GLOBAL__sub_I_currentMode+0x300>)
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    246c:	ldr	r6, [pc, #480]	; (2650 <_GLOBAL__sub_I_currentMode+0x304>)
    246e:	bl	2750 <usb_serial_write>
    2472:	ldr	r0, [pc, #480]	; (2654 <_GLOBAL__sub_I_currentMode+0x308>)
    2474:	bl	42c4 <Print::println()>
    2478:	ldr	r3, [r4, #52]	; 0x34
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    247a:	ldr	r0, [pc, #472]	; (2654 <_GLOBAL__sub_I_currentMode+0x308>)
    247c:	ldr	r1, [r3, #4]
    247e:	bl	4364 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    2482:	ldr	r0, [pc, #464]	; (2654 <_GLOBAL__sub_I_currentMode+0x308>)
    2484:	movs	r5, #0
    2486:	bl	42c4 <Print::println()>
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    248a:	mov.w	sl, #2
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    248e:	ldr	r2, [pc, #456]	; (2658 <_GLOBAL__sub_I_currentMode+0x30c>)
    2490:	str	r5, [r6, #8]
    2492:	movs	r3, #24
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;
    2494:	mov.w	r8, #1000	; 0x3e8
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    2498:	mov.w	fp, #1
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    249c:	mov	r1, r5
    249e:	mov	r0, sl
    24a0:	str	r3, [r6, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24a2:	ldr	r3, [r7, #0]
      m_state = false;
    24a4:	strb	r5, [r6, #0]
      m_id = id;
      m_pin = pin;
    24a6:	mov.w	r9, #4
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24aa:	strb.w	r5, [r2, #36]	; 0x24
    24ae:	str	r4, [r2, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    24b0:	strb	r5, [r2, #16]
      m_reverseButton = reverseButton;
    24b2:	strb	r5, [r2, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24b4:	str	r3, [r2, #24]
      m_id = id;
    24b6:	str.w	fp, [r2]
      m_pin = pin;
    24ba:	str.w	sl, [r2, #52]	; 0x34
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;
    24be:	str.w	r8, [r2, #48]	; 0x30
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    24c2:	str	r4, [r6, #12]

      pinMode(pin, INPUT);
    24c4:	bl	2d88 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24c8:	ldr	r2, [pc, #400]	; (265c <_GLOBAL__sub_I_currentMode+0x310>)
    24ca:	ldr	r3, [r7, #4]
    24cc:	strb.w	r5, [r2, #36]	; 0x24
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    24d0:	mov	r1, r5
    24d2:	mov	r0, r9
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24d4:	str	r4, [r2, #28]
      m_id = id;
    24d6:	str.w	sl, [r2]
      m_pin = pin;
      m_shiftButton = shiftButton;
    24da:	strb	r5, [r2, #16]
      m_reverseButton = reverseButton;
    24dc:	strb	r5, [r2, #17]
      m_holdThreshold = 1000;
    24de:	str.w	r8, [r2, #48]	; 0x30
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24e2:	str	r3, [r2, #24]
      m_id = id;
      m_pin = pin;
    24e4:	str.w	r9, [r2, #52]	; 0x34
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    24e8:	bl	2d88 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24ec:	ldr	r2, [pc, #368]	; (2660 <_GLOBAL__sub_I_currentMode+0x314>)
    24ee:	ldr	r3, [r7, #8]
    24f0:	str	r3, [r2, #24]
      m_id = id;
    24f2:	mov.w	ip, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    24f6:	mov	r1, r5
    24f8:	movs	r0, #6
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24fa:	strb.w	r5, [r2, #36]	; 0x24
    24fe:	str	r4, [r2, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    2500:	strb	r5, [r2, #16]
      m_reverseButton = reverseButton;
    2502:	strb	r5, [r2, #17]
      m_holdThreshold = 1000;
    2504:	str.w	r8, [r2, #48]	; 0x30
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    2508:	str.w	ip, [r2]
    250c:	str.w	ip, [sp, #4]
      m_pin = pin;
    2510:	str	r0, [r2, #52]	; 0x34
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    2512:	bl	2d88 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2516:	ldr	r2, [pc, #332]	; (2664 <_GLOBAL__sub_I_currentMode+0x318>)
    2518:	ldr	r0, [r7, #12]
    251a:	str	r0, [r2, #24]
      m_id = id;
      m_pin = pin;
    251c:	mov.w	ip, #8
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    2520:	mov	r1, r5
    2522:	mov	r0, ip
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2524:	strb.w	r5, [r2, #36]	; 0x24
    2528:	str	r4, [r2, #28]
      m_id = id;
    252a:	str.w	r9, [r2]
      m_pin = pin;
      m_shiftButton = shiftButton;
    252e:	strb	r5, [r2, #16]
      m_reverseButton = reverseButton;
    2530:	strb	r5, [r2, #17]
      m_holdThreshold = 1000;
    2532:	str.w	r8, [r2, #48]	; 0x30
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    2536:	str.w	ip, [r2, #52]	; 0x34
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    253a:	bl	2d88 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    253e:	ldr	r2, [pc, #296]	; (2668 <_GLOBAL__sub_I_currentMode+0x31c>)
    2540:	ldr	r0, [r7, #16]
    2542:	str	r0, [r2, #24]
      m_id = id;
      m_pin = pin;
    2544:	mov.w	ip, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    2548:	movs	r0, #5
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    254a:	mov	r1, r5
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    254c:	str	r0, [r2, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    254e:	mov	r0, ip
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    2550:	str.w	ip, [r2, #52]	; 0x34
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2554:	strb.w	r5, [r2, #36]	; 0x24
    2558:	str	r4, [r2, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    255a:	strb.w	fp, [r2, #16]
      m_reverseButton = reverseButton;
    255e:	strb	r5, [r2, #17]
      m_holdThreshold = 1000;
    2560:	str.w	r8, [r2, #48]	; 0x30

      pinMode(pin, INPUT);
    2564:	bl	2d88 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2568:	ldr.w	lr, [pc, #272]	; 267c <_GLOBAL__sub_I_currentMode+0x330>
    256c:	ldr	r7, [r7, #20]
    256e:	str.w	r7, [lr, #24]
      m_id = id;
      m_pin = pin;
    2572:	movs	r2, #12
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2574:	ldr	r7, [pc, #244]	; (266c <_GLOBAL__sub_I_currentMode+0x320>)
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2576:	str.w	r4, [lr, #28]
      m_id = id;
    257a:	movs	r3, #6
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    257c:	mov	r0, r2
    257e:	mov	r1, r5
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    2580:	str.w	r3, [lr]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2584:	strb.w	r5, [lr, #36]	; 0x24
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    2588:	strb.w	r5, [lr, #16]
      m_reverseButton = reverseButton;
    258c:	strb.w	fp, [lr, #17]
      m_holdThreshold = 1000;
    2590:	str.w	r8, [lr, #48]	; 0x30
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    2594:	str.w	r2, [lr, #52]	; 0x34
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    2598:	bl	2d88 <pinMode>
    259c:	ldr.w	lr, [pc, #224]	; 2680 <_GLOBAL__sub_I_currentMode+0x334>
    25a0:	ldr	r0, [pc, #204]	; (2670 <_GLOBAL__sub_I_currentMode+0x324>)
    25a2:	ldr	r1, [pc, #208]	; (2674 <_GLOBAL__sub_I_currentMode+0x328>)
    25a4:	ldr	r2, [pc, #208]	; (2678 <_GLOBAL__sub_I_currentMode+0x32c>)
      m_pin = pin;
      m_knobType = knobType;
    25a6:	strb.w	r5, [lr, #24]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    25aa:	mov.w	ip, #15
    25ae:	mov.w	r8, #14
    25b2:	strb.w	ip, [r7]
      m_knobType = knobType;
    25b6:	ldr.w	ip, [sp, #4]
      m_id = id;
    25ba:	str.w	r5, [lr, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    25be:	strb.w	r8, [lr]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    25c2:	str.w	r6, [lr, #20]
    25c6:	str.w	r4, [lr, #16]
      m_pin = pin;
    25ca:	movs	r5, #16
    25cc:	mov.w	r8, #17
    25d0:	mov.w	lr, #18
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    25d4:	str	r6, [r7, #20]
    25d6:	str	r4, [r7, #16]
      m_pin = pin;
      m_knobType = knobType;
    25d8:	strb.w	fp, [r7, #24]
      m_id = id;
    25dc:	str.w	fp, [r7, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    25e0:	str	r6, [r0, #20]
    25e2:	str	r4, [r0, #16]
      m_pin = pin;
      m_knobType = knobType;
    25e4:	strb.w	sl, [r0, #24]
      m_id = id;
    25e8:	str.w	sl, [r0, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    25ec:	strb	r5, [r0, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    25ee:	str	r6, [r1, #20]
    25f0:	str	r4, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    25f2:	strb.w	ip, [r1, #24]
      m_id = id;
    25f6:	str.w	ip, [r1, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    25fa:	strb.w	r8, [r1]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    25fe:	str	r6, [r2, #20]
    2600:	str	r4, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    2602:	strb.w	r9, [r2, #24]
      m_id = id;
    2606:	str.w	r9, [r2, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    260a:	strb.w	lr, [r2]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
    260e:	add	sp, #12
    2610:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2614:	.word	0x1fff1894
    2618:	.word	0x1fff1768
    261c:	.word	0x1fff0c50
    2620:	.word	0x1fff18ac
    2624:	.word	0x1fff18c4
    2628:	.word	0x1fff18dc
    262c:	.word	0x1fff15d8
    2630:	.word	0x1fff15f0
    2634:	.word	0x1fff17a4
    2638:	.word	0x1fff1608
    263c:	.word	0x1fff17b8
    2640:	.word	0x1fff17cc
    2644:	.word	0x1fff17e0
    2648:	.word	0x1fff0c40
    264c:	.word	0x00005794
    2650:	.word	0x1fff1880
    2654:	.word	0x1fff0c70
    2658:	.word	0x1fff1618
    265c:	.word	0x1fff1650
    2660:	.word	0x1fff1688
    2664:	.word	0x1fff16c0
    2668:	.word	0x1fff16f8
    266c:	.word	0x1fff1810
    2670:	.word	0x1fff182c
    2674:	.word	0x1fff1848
    2678:	.word	0x1fff1864
    267c:	.word	0x1fff1730
    2680:	.word	0x1fff17f4

00002684 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    2684:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    2686:	ldr	r5, [pc, #60]	; (26c4 <usb_serial_getchar+0x40>)
    2688:	ldr	r0, [r5, #0]
    268a:	cbz	r0, 26ac <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    268c:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    268e:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    2690:	adds	r1, r0, r3
    2692:	adds	r3, #1
	if (i >= rx_packet->len) {
    2694:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    2696:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    2698:	bcs.n	26a0 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    269a:	strh	r3, [r0, #2]
	}
	return c;
    269c:	mov	r0, r4
}
    269e:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    26a0:	bl	3530 <usb_free>
		rx_packet = NULL;
    26a4:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    26a6:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    26a8:	str	r3, [r5, #0]
    26aa:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    26ac:	ldr	r3, [pc, #24]	; (26c8 <usb_serial_getchar+0x44>)
    26ae:	ldrb	r3, [r3, #0]
    26b0:	cbz	r3, 26be <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    26b2:	movs	r0, #2
    26b4:	bl	357c <usb_rx>
    26b8:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    26ba:	cmp	r0, #0
    26bc:	bne.n	268c <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    26be:	mov.w	r0, #4294967295
    26c2:	pop	{r3, r4, r5, pc}
    26c4:	.word	0x1fff1900
    26c8:	.word	0x1fff1a60

000026cc <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    26cc:	push	{r4, lr}
	if (!rx_packet) {
    26ce:	ldr	r4, [pc, #36]	; (26f4 <usb_serial_peekchar+0x28>)
    26d0:	ldr	r0, [r4, #0]
    26d2:	cbz	r0, 26dc <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    26d4:	ldrh	r3, [r0, #2]
    26d6:	add	r0, r3
    26d8:	ldrb	r0, [r0, #8]
}
    26da:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    26dc:	ldr	r3, [pc, #24]	; (26f8 <usb_serial_peekchar+0x2c>)
    26de:	ldrb	r3, [r3, #0]
    26e0:	cbz	r3, 26ee <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    26e2:	movs	r0, #2
    26e4:	bl	357c <usb_rx>
    26e8:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    26ea:	cmp	r0, #0
    26ec:	bne.n	26d4 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    26ee:	mov.w	r0, #4294967295
    26f2:	pop	{r4, pc}
    26f4:	.word	0x1fff1900
    26f8:	.word	0x1fff1a60

000026fc <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    26fc:	ldr	r3, [pc, #16]	; (2710 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    26fe:	ldr	r2, [pc, #20]	; (2714 <usb_serial_available+0x18>)
    2700:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    2702:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    2704:	cbz	r3, 270e <usb_serial_available+0x12>
    2706:	ldrh	r2, [r3, #0]
    2708:	ldrh	r3, [r3, #2]
    270a:	subs	r3, r2, r3
    270c:	add	r0, r3
	return count;
}
    270e:	bx	lr
    2710:	.word	0x1fff1900
    2714:	.word	0x1fff1ef4

00002718 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    2718:	ldr	r3, [pc, #44]	; (2748 <usb_serial_flush_input+0x30>)
    271a:	ldrb	r3, [r3, #0]
    271c:	cbz	r3, 2746 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    271e:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    2720:	ldr	r4, [pc, #40]	; (274c <usb_serial_flush_input+0x34>)
    2722:	ldr	r0, [r4, #0]
    2724:	cbz	r0, 273a <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    2726:	bl	3530 <usb_free>
		rx_packet = NULL;
    272a:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    272c:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    272e:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    2730:	bl	357c <usb_rx>
		if (!rx) break;
    2734:	cbz	r0, 2744 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    2736:	bl	3530 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    273a:	movs	r0, #2
    273c:	bl	357c <usb_rx>
		if (!rx) break;
    2740:	cmp	r0, #0
    2742:	bne.n	2736 <usb_serial_flush_input+0x1e>
    2744:	pop	{r4, pc}
    2746:	bx	lr
    2748:	.word	0x1fff1a60
    274c:	.word	0x1fff1900

00002750 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    2750:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    2754:	ldr.w	r9, [pc, #248]	; 2850 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    2758:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    275a:	movs	r2, #1
    275c:	strb.w	r2, [r9]
	while (size > 0) {
    2760:	str	r1, [sp, #4]
    2762:	cbz	r1, 27c0 <usb_serial_write+0x70>
    2764:	ldr.w	r8, [pc, #236]	; 2854 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    2768:	ldr	r7, [pc, #212]	; (2840 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    276a:	ldr	r6, [sp, #4]
    276c:	mov	fp, r0
		if (!tx_packet) {
    276e:	ldr.w	r0, [r8]
    2772:	cbz	r0, 27e2 <usb_serial_write+0x92>
    2774:	ldr	r5, [pc, #204]	; (2844 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    2776:	ldrh	r4, [r0, #2]
    2778:	rsb	r1, r4, #64	; 0x40
    277c:	cmp	r1, r6
    277e:	it	cs
    2780:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    2782:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    2786:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    2788:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    278c:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    278e:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    2790:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    2794:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    2798:	cbz	r1, 27b0 <usb_serial_write+0x60>
    279a:	subs	r4, #1
    279c:	add	r2, r4
    279e:	add	r1, fp
    27a0:	ldrb.w	r4, [fp], #1
    27a4:	strb.w	r4, [r2, #1]!
    27a8:	cmp	fp, r1
    27aa:	bne.n	27a0 <usb_serial_write+0x50>
    27ac:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    27b0:	cmp.w	lr, #63	; 0x3f
    27b4:	bhi.n	27ce <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    27b6:	ldr	r2, [pc, #144]	; (2848 <usb_serial_write+0xf8>)
    27b8:	movs	r1, #5
    27ba:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    27bc:	cmp	r6, #0
    27be:	bne.n	276e <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    27c0:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    27c2:	movs	r3, #0
    27c4:	strb.w	r3, [r9]
	return ret;
}
    27c8:	add	sp, #12
    27ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    27ce:	movs	r2, #64	; 0x40
    27d0:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    27d2:	mov	r1, r0
    27d4:	movs	r0, #3
    27d6:	bl	36cc <usb_tx>
			tx_packet = NULL;
    27da:	movs	r2, #0
    27dc:	str.w	r2, [r8]
    27e0:	b.n	27b6 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    27e2:	ldrb	r2, [r7, #0]
    27e4:	cbz	r2, 2830 <usb_serial_write+0xe0>
    27e6:	ldr	r4, [pc, #100]	; (284c <usb_serial_write+0xfc>)
    27e8:	ldr	r5, [pc, #88]	; (2844 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    27ea:	mov.w	sl, #1
    27ee:	b.n	2800 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    27f0:	subs	r4, #1
    27f2:	beq.n	2822 <usb_serial_write+0xd2>
    27f4:	ldrb	r2, [r5, #0]
    27f6:	cbnz	r2, 2822 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    27f8:	bl	41d0 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    27fc:	ldrb	r2, [r7, #0]
    27fe:	cbz	r2, 2830 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2800:	movs	r0, #3
    2802:	bl	35b8 <usb_tx_packet_count>
    2806:	cmp	r0, #7
    2808:	bhi.n	27f0 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    280a:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    280e:	bl	34f0 <usb_malloc>
    2812:	str.w	r0, [r8]
					if (tx_packet) break;
    2816:	cmp	r0, #0
    2818:	bne.n	2776 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    281a:	ldr	r3, [pc, #52]	; (2850 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    281c:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    281e:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2820:	bne.n	27f4 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    2822:	movs	r3, #1
					return -1;
    2824:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    2828:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    282a:	add	sp, #12
    282c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    2830:	movs	r3, #0
					return -1;
    2832:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    2836:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    283a:	add	sp, #12
    283c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2840:	.word	0x1fff1a60
    2844:	.word	0x1fff18fc
    2848:	.word	0x1fff18f4
    284c:	.word	0x00014821
    2850:	.word	0x1fff18f5
    2854:	.word	0x1fff18f8

00002858 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2858:	push	{lr}
    285a:	sub	sp, #12
    285c:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    285e:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2860:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    2864:	mov	r0, r3
    2866:	bl	2750 <usb_serial_write>
}
    286a:	add	sp, #12
    286c:	ldr.w	pc, [sp], #4

00002870 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    2870:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    2872:	ldr	r5, [pc, #56]	; (28ac <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    2874:	ldr	r4, [pc, #56]	; (28b0 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    2876:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    2878:	movs	r3, #1
    287a:	strb	r3, [r4, #0]
	if (!tx_packet) {
    287c:	cbz	r0, 288a <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    287e:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    2880:	movs	r3, #0
    2882:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    2884:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    2888:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    288a:	ldr	r3, [pc, #40]	; (28b4 <usb_serial_write_buffer_free+0x44>)
    288c:	ldrb	r3, [r3, #0]
    288e:	cbnz	r3, 2896 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    2890:	movs	r0, #0
    2892:	strb	r0, [r4, #0]
			return 0;
    2894:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    2896:	movs	r0, #3
    2898:	bl	35b8 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    289c:	cmp	r0, #7
    289e:	bhi.n	2890 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    28a0:	bl	34f0 <usb_malloc>
    28a4:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    28a6:	cmp	r0, #0
    28a8:	bne.n	287e <usb_serial_write_buffer_free+0xe>
    28aa:	b.n	2890 <usb_serial_write_buffer_free+0x20>
    28ac:	.word	0x1fff18f8
    28b0:	.word	0x1fff18f5
    28b4:	.word	0x1fff1a60

000028b8 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    28b8:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    28ba:	ldr	r3, [pc, #68]	; (2900 <usb_serial_flush_output+0x48>)
    28bc:	ldrb	r3, [r3, #0]
    28be:	cbz	r3, 28e4 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    28c0:	ldr	r6, [pc, #64]	; (2904 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    28c2:	ldr	r5, [pc, #68]	; (2908 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    28c4:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    28c6:	movs	r7, #1
    28c8:	strb	r7, [r5, #0]
	if (tx_packet) {
    28ca:	cbz	r4, 28e6 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    28cc:	ldr	r2, [pc, #60]	; (290c <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    28ce:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    28d0:	movs	r7, #0
    28d2:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    28d4:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    28d6:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    28d8:	movs	r0, #3
    28da:	bl	36cc <usb_tx>
		tx_packet = NULL;
    28de:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    28e0:	movs	r3, #0
    28e2:	strb	r3, [r5, #0]
    28e4:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    28e6:	bl	34f0 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    28ea:	ldr	r3, [pc, #32]	; (290c <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    28ec:	cbz	r0, 28fa <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    28ee:	mov	r1, r0
    28f0:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    28f2:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    28f4:	bl	36cc <usb_tx>
    28f8:	b.n	28e0 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    28fa:	strb	r7, [r3, #0]
    28fc:	b.n	28e0 <usb_serial_flush_output+0x28>
    28fe:	nop
    2900:	.word	0x1fff1a60
    2904:	.word	0x1fff18f8
    2908:	.word	0x1fff18f5
    290c:	.word	0x1fff18f4

00002910 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    2910:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    2912:	ldr	r3, [pc, #56]	; (294c <usb_serial_flush_callback+0x3c>)
    2914:	ldrb	r3, [r3, #0]
    2916:	cbnz	r3, 2936 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    2918:	ldr	r4, [pc, #52]	; (2950 <usb_serial_flush_callback+0x40>)
    291a:	ldr	r1, [r4, #0]
    291c:	cbz	r1, 2938 <usb_serial_flush_callback+0x28>
    291e:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    2922:	ldrh	r3, [r1, #2]
    2924:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2926:	movs	r0, #3
    2928:	bl	36cc <usb_tx>
		tx_packet = NULL;
    292c:	str	r5, [r4, #0]
    292e:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    2930:	ldr	r3, [pc, #32]	; (2954 <usb_serial_flush_callback+0x44>)
    2932:	movs	r2, #1
    2934:	strb	r2, [r3, #0]
    2936:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    2938:	bl	34f0 <usb_malloc>
		if (tx) {
    293c:	cmp	r0, #0
    293e:	beq.n	2930 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    2940:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    2942:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    2946:	movs	r0, #3
    2948:	b.w	36cc <usb_tx>
    294c:	.word	0x1fff18f5
    2950:	.word	0x1fff18f8
    2954:	.word	0x1fff18f4

00002958 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    2958:	ldr	r2, [pc, #220]	; (2a38 <wait_for_cal+0xe0>)
    295a:	ldr	r1, [pc, #224]	; (2a3c <wait_for_cal+0xe4>)
    295c:	ldr	r3, [r2, #0]
    295e:	lsls	r3, r3, #24
    2960:	bmi.n	295c <wait_for_cal+0x4>
    2962:	ldr	r3, [r1, #0]
    2964:	ands.w	r3, r3, #128	; 0x80
    2968:	bne.n	295c <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    296a:	cpsid	i
	if (calibrating) {
    296c:	ldr	r1, [pc, #208]	; (2a40 <wait_for_cal+0xe8>)
    296e:	ldrb	r2, [r1, #0]
    2970:	cmp	r2, #0
    2972:	beq.n	2a34 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    2974:	ldr	r2, [pc, #204]	; (2a44 <wait_for_cal+0xec>)
    2976:	ldr	r0, [pc, #208]	; (2a48 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    2978:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    297a:	ldr	r4, [pc, #208]	; (2a4c <wait_for_cal+0xf4>)
    297c:	ldr	r7, [r2, #0]
    297e:	ldr	r6, [r0, #0]
    2980:	ldr	r5, [r4, #0]
    2982:	ldr	r4, [r2, #12]
    2984:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2986:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    2988:	adds	r2, #20
    298a:	ldr	r0, [r0, #0]
    298c:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    298e:	ldr	r7, [pc, #192]	; (2a50 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    2990:	add	r5, r6
    2992:	add	r4, r5
    2994:	add	r0, r4
    2996:	add	r2, r0
    2998:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    299c:	ldr	r6, [pc, #180]	; (2a54 <wait_for_cal+0xfc>)
    299e:	ldr	r0, [pc, #184]	; (2a58 <wait_for_cal+0x100>)
    29a0:	ldr	r5, [pc, #184]	; (2a5c <wait_for_cal+0x104>)
    29a2:	ldr	r4, [pc, #188]	; (2a60 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    29a4:	orr.w	r2, r2, #32768	; 0x8000
    29a8:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    29aa:	ldr	r7, [r6, #0]
    29ac:	ldr	r6, [r0, #0]
    29ae:	ldr	r5, [r5, #0]
    29b0:	ldr	r2, [pc, #176]	; (2a64 <wait_for_cal+0x10c>)
    29b2:	ldr	r4, [r4, #0]
    29b4:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    29b6:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    29b8:	ldr	r0, [r0, #0]
    29ba:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    29bc:	ldr	r7, [pc, #168]	; (2a68 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    29be:	add	r5, r6
    29c0:	add	r4, r5
    29c2:	add	r0, r4
    29c4:	add	r2, r0
    29c6:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    29ca:	ldr	r6, [pc, #160]	; (2a6c <wait_for_cal+0x114>)
    29cc:	ldr	r0, [pc, #160]	; (2a70 <wait_for_cal+0x118>)
    29ce:	ldr	r5, [pc, #164]	; (2a74 <wait_for_cal+0x11c>)
    29d0:	ldr	r4, [pc, #164]	; (2a78 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    29d2:	orr.w	r2, r2, #32768	; 0x8000
    29d6:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    29d8:	ldr	r7, [r6, #0]
    29da:	ldr	r6, [r0, #0]
    29dc:	ldr	r5, [r5, #0]
    29de:	ldr	r2, [pc, #156]	; (2a7c <wait_for_cal+0x124>)
    29e0:	ldr	r4, [r4, #0]
    29e2:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    29e4:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    29e6:	ldr	r0, [r0, #0]
    29e8:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    29ea:	ldr	r7, [pc, #148]	; (2a80 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    29ec:	add	r5, r6
    29ee:	add	r4, r5
    29f0:	add	r0, r4
    29f2:	add	r2, r0
    29f4:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    29f8:	ldr	r6, [pc, #136]	; (2a84 <wait_for_cal+0x12c>)
    29fa:	ldr	r0, [pc, #140]	; (2a88 <wait_for_cal+0x130>)
    29fc:	ldr	r5, [pc, #140]	; (2a8c <wait_for_cal+0x134>)
    29fe:	ldr	r4, [pc, #144]	; (2a90 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    2a00:	orr.w	r2, r2, #32768	; 0x8000
    2a04:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2a06:	ldr	r7, [r6, #0]
    2a08:	ldr	r6, [r0, #0]
    2a0a:	ldr	r5, [r5, #0]
    2a0c:	ldr	r2, [pc, #132]	; (2a94 <wait_for_cal+0x13c>)
    2a0e:	ldr	r4, [r4, #0]
    2a10:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2a12:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2a14:	ldr	r0, [r0, #0]
    2a16:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    2a18:	add	r5, r6
    2a1a:	add	r4, r5
    2a1c:	add	r0, r4
    2a1e:	add	r2, r0
    2a20:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    2a24:	ldr	r0, [pc, #112]	; (2a98 <wait_for_cal+0x140>)
    2a26:	orr.w	r2, r2, #32768	; 0x8000
    2a2a:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    2a2c:	strb	r3, [r1, #0]
	}
	__enable_irq();
    2a2e:	cpsie	i
}
    2a30:	pop	{r4, r5, r6, r7}
    2a32:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    2a34:	cpsie	i
    2a36:	bx	lr
    2a38:	.word	0x4003b024
    2a3c:	.word	0x400bb024
    2a40:	.word	0x1fff1906
    2a44:	.word	0x4003b038
    2a48:	.word	0x4003b03c
    2a4c:	.word	0x4003b040
    2a50:	.word	0x4003b02c
    2a54:	.word	0x4003b058
    2a58:	.word	0x4003b05c
    2a5c:	.word	0x4003b060
    2a60:	.word	0x4003b064
    2a64:	.word	0x4003b06c
    2a68:	.word	0x4003b030
    2a6c:	.word	0x400bb038
    2a70:	.word	0x400bb03c
    2a74:	.word	0x400bb040
    2a78:	.word	0x400bb044
    2a7c:	.word	0x400bb04c
    2a80:	.word	0x400bb02c
    2a84:	.word	0x400bb058
    2a88:	.word	0x400bb05c
    2a8c:	.word	0x400bb060
    2a90:	.word	0x400bb064
    2a94:	.word	0x400bb06c
    2a98:	.word	0x400bb030

00002a9c <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    2a9c:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2a9e:	ldr	r0, [pc, #164]	; (2b44 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2aa0:	ldr	r2, [pc, #164]	; (2b48 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    2aa2:	ldr	r3, [pc, #168]	; (2b4c <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2aa4:	ldr	r5, [pc, #168]	; (2b50 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2aa6:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2aa8:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2aaa:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2aac:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    2aae:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2ab0:	ldr	r4, [pc, #160]	; (2b54 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    2ab2:	cmp	r3, #8
    2ab4:	beq.n	2b18 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2ab6:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2ab8:	ldr	r0, [pc, #156]	; (2b58 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2aba:	ldr	r1, [pc, #160]	; (2b5c <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2abc:	beq.n	2b2e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    2abe:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    2ac0:	ite	eq
    2ac2:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2ac4:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2ac6:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2ac8:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2aca:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2acc:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2ace:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2ad0:	ldr	r3, [pc, #140]	; (2b60 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2ad2:	ldr	r1, [pc, #144]	; (2b64 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2ad4:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2ad6:	ldr	r2, [pc, #144]	; (2b68 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2ad8:	cbz	r3, 2b0a <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2ada:	movs	r3, #1
    2adc:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2ade:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2ae0:	ldr	r3, [pc, #136]	; (2b6c <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2ae2:	ldr	r1, [pc, #140]	; (2b70 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2ae4:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2ae6:	ldr	r2, [pc, #140]	; (2b74 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    2ae8:	cmp	r3, #1
    2aea:	bls.n	2b3a <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2aec:	cmp	r3, #4
    2aee:	bls.n	2b10 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    2af0:	cmp	r3, #8
    2af2:	bls.n	2b32 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2af4:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2af6:	ite	ls
    2af8:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2afa:	movhi	r3, #135	; 0x87
    2afc:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2afe:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    2b00:	ldr	r3, [pc, #116]	; (2b78 <analog_init+0xdc>)
    2b02:	movs	r2, #1
    2b04:	strb	r2, [r3, #0]
}
    2b06:	pop	{r4, r5}
    2b08:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2b0a:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2b0c:	str	r3, [r2, #0]
    2b0e:	b.n	2ae0 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2b10:	movs	r3, #132	; 0x84
    2b12:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2b14:	str	r3, [r2, #0]
    2b16:	b.n	2b00 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2b18:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2b1c:	ldr	r1, [pc, #60]	; (2b5c <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2b1e:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2b20:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2b22:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2b24:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2b26:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2b28:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2b2a:	str	r3, [r1, #0]
    2b2c:	b.n	2ad0 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2b2e:	movs	r2, #57	; 0x39
    2b30:	b.n	2b22 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2b32:	movs	r3, #133	; 0x85
    2b34:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2b36:	str	r3, [r2, #0]
    2b38:	b.n	2b00 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2b3a:	movs	r3, #128	; 0x80
    2b3c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2b3e:	str	r3, [r2, #0]
    2b40:	b.n	2b00 <analog_init+0x64>
    2b42:	nop
    2b44:	.word	0x40074000
    2b48:	.word	0x40074001
    2b4c:	.word	0x1fff0c68
    2b50:	.word	0x4003b008
    2b54:	.word	0x4003b00c
    2b58:	.word	0x400bb008
    2b5c:	.word	0x400bb00c
    2b60:	.word	0x1fff1909
    2b64:	.word	0x4003b020
    2b68:	.word	0x400bb020
    2b6c:	.word	0x1fff0c69
    2b70:	.word	0x4003b024
    2b74:	.word	0x400bb024
    2b78:	.word	0x1fff1906

00002b7c <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2b7c:	cmp	r0, #71	; 0x47
    2b7e:	bhi.n	2be0 <analogRead+0x64>
	channel = pin2sc1a[pin];
    2b80:	ldr	r3, [pc, #204]	; (2c50 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    2b82:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    2b86:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    2b88:	cmp	r6, #255	; 0xff
    2b8a:	beq.n	2be4 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    2b8c:	ldr	r3, [pc, #196]	; (2c54 <analogRead+0xd8>)
    2b8e:	ldrb	r3, [r3, #0]
    2b90:	cmp	r3, #0
    2b92:	bne.n	2bea <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2b94:	lsls	r2, r6, #24
    2b96:	bmi.n	2bf2 <analogRead+0x76>
#endif

	__disable_irq();
    2b98:	cpsid	i
    2b9a:	ldr	r5, [pc, #188]	; (2c58 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2b9c:	ldr	r4, [pc, #188]	; (2c5c <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    2b9e:	mov	r7, r5
    2ba0:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2ba2:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    2ba4:	strb	r3, [r5, #0]
	__enable_irq();
    2ba6:	cpsie	i
	while (1) {
		__disable_irq();
    2ba8:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2baa:	ldr	r3, [r4, #0]
    2bac:	lsls	r3, r3, #24
    2bae:	bmi.n	2bca <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    2bb0:	ldrb	r3, [r7, #0]
    2bb2:	cbnz	r3, 2bbc <analogRead+0x40>
    2bb4:	b.n	2ba0 <analogRead+0x24>
    2bb6:	ldrb	r3, [r5, #0]
    2bb8:	cmp	r3, #0
    2bba:	beq.n	2ba0 <analogRead+0x24>
		__enable_irq();
    2bbc:	cpsie	i
		yield();
    2bbe:	bl	41d0 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2bc2:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2bc4:	ldr	r3, [r4, #0]
    2bc6:	lsls	r0, r3, #24
    2bc8:	bpl.n	2bb6 <analogRead+0x3a>
			result = ADC0_RA;
    2bca:	ldr	r3, [pc, #148]	; (2c60 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    2bcc:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    2bce:	movs	r2, #0
    2bd0:	strb	r2, [r5, #0]
			__enable_irq();
    2bd2:	cpsie	i
			result >>= analog_right_shift;
    2bd4:	ldr	r2, [pc, #140]	; (2c64 <analogRead+0xe8>)
    2bd6:	ldrb	r0, [r2, #0]
    2bd8:	asr.w	r0, r3, r0
			return result;
    2bdc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2be0:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2be2:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2be4:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2be6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    2bea:	bl	2958 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2bee:	lsls	r2, r6, #24
    2bf0:	bpl.n	2b98 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    2bf2:	cpsid	i
    2bf4:	ldr	r5, [pc, #112]	; (2c68 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2bf6:	ldr.w	r8, [pc, #124]	; 2c74 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    2bfa:	ldr	r4, [pc, #112]	; (2c6c <analogRead+0xf0>)
    2bfc:	and.w	r7, r6, #64	; 0x40
    2c00:	uxtb	r7, r7
    2c02:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2c06:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    2c0a:	cbz	r7, 2c44 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2c0c:	bic.w	r3, r3, #16
    2c10:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    2c14:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    2c16:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    2c18:	ldr	r2, [pc, #76]	; (2c68 <analogRead+0xec>)
    2c1a:	strb	r3, [r5, #0]
	__enable_irq();
    2c1c:	cpsie	i
	while (1) {
		__disable_irq();
    2c1e:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2c20:	ldr	r3, [r4, #0]
    2c22:	lsls	r1, r3, #24
    2c24:	bmi.n	2c40 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    2c26:	ldrb	r3, [r2, #0]
    2c28:	cbnz	r3, 2c32 <analogRead+0xb6>
    2c2a:	b.n	2c06 <analogRead+0x8a>
    2c2c:	ldrb	r3, [r5, #0]
    2c2e:	cmp	r3, #0
    2c30:	beq.n	2c06 <analogRead+0x8a>
		__enable_irq();
    2c32:	cpsie	i
		yield();
    2c34:	bl	41d0 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2c38:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2c3a:	ldr	r3, [r4, #0]
    2c3c:	lsls	r3, r3, #24
    2c3e:	bpl.n	2c2c <analogRead+0xb0>
			result = ADC1_RA;
    2c40:	ldr	r3, [pc, #44]	; (2c70 <analogRead+0xf4>)
    2c42:	b.n	2bcc <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2c44:	orr.w	r3, r3, #16
    2c48:	str.w	r3, [r8]
    2c4c:	b.n	2c14 <analogRead+0x98>
    2c4e:	nop
    2c50:	.word	0x000057a4
    2c54:	.word	0x1fff1906
    2c58:	.word	0x1fff1908
    2c5c:	.word	0x4003b000
    2c60:	.word	0x4003b010
    2c64:	.word	0x1fff1905
    2c68:	.word	0x1fff1907
    2c6c:	.word	0x400bb000
    2c70:	.word	0x400bb010
    2c74:	.word	0x400bb00c

00002c78 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    2c78:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    2c7a:	ldr	r3, [pc, #68]	; (2cc0 <digitalWrite.part.1+0x48>)
    2c7c:	ldr.w	r2, [r3, r0, lsl #3]
    2c80:	ldrb.w	r4, [r2, #640]	; 0x280
    2c84:	cbz	r4, 2c94 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    2c86:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    2c88:	cbz	r1, 2caa <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    2c8a:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2c8e:	ldr.w	r4, [sp], #4
    2c92:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    2c94:	add.w	r3, r3, r0, lsl #3
    2c98:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2c9a:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    2c9c:	cbnz	r1, 2cb4 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    2c9e:	bic.w	r2, r2, #2
    2ca2:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2ca4:	ldr.w	r4, [sp], #4
    2ca8:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    2caa:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2cae:	ldr.w	r4, [sp], #4
    2cb2:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2cb4:	orr.w	r2, r2, #3
    2cb8:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2cba:	ldr.w	r4, [sp], #4
    2cbe:	bx	lr
    2cc0:	.word	0x000057ec

00002cc4 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2cc4:	ldr	r2, [pc, #112]	; (2d38 <pinMode.part.2+0x74>)
    2cc6:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2cca:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2ccc:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2cce:	beq.n	2cf4 <pinMode.part.2+0x30>
    2cd0:	cmp	r1, #4
    2cd2:	beq.n	2d0c <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2cd4:	ldr.w	r0, [r2, r0, lsl #3]
    2cd8:	movs	r2, #0
    2cda:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    2cde:	cbz	r1, 2cec <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2ce0:	cmp	r1, #2
    2ce2:	beq.n	2d26 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2ce4:	cmp	r1, #3
    2ce6:	beq.n	2d2e <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2ce8:	str	r2, [r3, #0]
    2cea:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2cec:	mov.w	r2, #256	; 0x100
    2cf0:	str	r2, [r3, #0]
    2cf2:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2cf4:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2cf8:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2cfc:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2d00:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2d02:	ldr	r2, [r3, #0]
    2d04:	bic.w	r2, r2, #32
    2d08:	str	r2, [r3, #0]
    2d0a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2d0c:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2d10:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2d14:	movs	r0, #1
    2d16:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2d1a:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    2d1c:	ldr	r2, [r3, #0]
    2d1e:	orr.w	r2, r2, #32
    2d22:	str	r2, [r3, #0]
    2d24:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    2d26:	movw	r2, #259	; 0x103
    2d2a:	str	r2, [r3, #0]
    2d2c:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    2d2e:	mov.w	r2, #258	; 0x102
    2d32:	str	r2, [r3, #0]
    2d34:	bx	lr
    2d36:	nop
    2d38:	.word	0x000057ec

00002d3c <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    2d3c:	push	{r4, r5}
	RTC_SR = 0;
    2d3e:	ldr	r3, [pc, #20]	; (2d54 <rtc_set+0x18>)
	RTC_TPR = 0;
    2d40:	ldr	r5, [pc, #20]	; (2d58 <rtc_set+0x1c>)
	RTC_TSR = t;
    2d42:	ldr	r4, [pc, #24]	; (2d5c <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2d44:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    2d46:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2d48:	str	r2, [r3, #0]
	RTC_TPR = 0;
    2d4a:	str	r2, [r5, #0]
	RTC_TSR = t;
    2d4c:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    2d4e:	str	r1, [r3, #0]
}
    2d50:	pop	{r4, r5}
    2d52:	bx	lr
    2d54:	.word	0x4003d014
    2d58:	.word	0x4003d004
    2d5c:	.word	0x4003d000

00002d60 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    2d60:	cmp	r0, #63	; 0x3f
    2d62:	bhi.n	2d68 <digitalWrite+0x8>
    2d64:	b.w	2c78 <digitalWrite.part.1>
    2d68:	bx	lr
    2d6a:	nop

00002d6c <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2d6c:	cmp	r0, #63	; 0x3f
    2d6e:	bhi.n	2d7e <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    2d70:	ldr	r3, [pc, #16]	; (2d84 <digitalRead+0x18>)
    2d72:	ldr.w	r3, [r3, r0, lsl #3]
    2d76:	ldrb.w	r0, [r3, #512]	; 0x200
    2d7a:	uxtb	r0, r0
    2d7c:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2d7e:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    2d80:	bx	lr
    2d82:	nop
    2d84:	.word	0x000057ec

00002d88 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    2d88:	cmp	r0, #63	; 0x3f
    2d8a:	bhi.n	2d90 <pinMode+0x8>
    2d8c:	b.w	2cc4 <pinMode.part.2>
    2d90:	bx	lr
    2d92:	nop

00002d94 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    2d94:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2d98:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2d9a:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2d9c:	ldr	r7, [pc, #136]	; (2e28 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2d9e:	ldr	r3, [pc, #140]	; (2e2c <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2da0:	ldr	r2, [pc, #140]	; (2e30 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2da2:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2da4:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2da6:	ldr	r2, [r2, #0]
	__enable_irq();
    2da8:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2daa:	lsls	r2, r2, #5
    2dac:	bpl.n	2db4 <delay+0x20>
    2dae:	cmp	r3, #50	; 0x32
    2db0:	it	hi
    2db2:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2db4:	cbz	r5, 2e24 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2db6:	rsb	r3, r3, #179200	; 0x2bc00
    2dba:	addw	r3, r3, #799	; 0x31f
    2dbe:	ldr	r6, [pc, #116]	; (2e34 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2dc0:	ldr.w	r9, [pc, #104]	; 2e2c <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2dc4:	ldr.w	r8, [pc, #104]	; 2e30 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2dc8:	lsrs	r3, r3, #2
    2dca:	mov.w	r2, #1000	; 0x3e8
    2dce:	umull	r1, r3, r6, r3
    2dd2:	mul.w	r4, r2, r4
    2dd6:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2dda:	cpsid	i
	current = SYST_CVR;
    2ddc:	ldr.w	r1, [r9]
	count = systick_millis_count;
    2de0:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2de2:	ldr.w	lr, [r8]
	__enable_irq();
    2de6:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2de8:	rsb	r3, r1, #179200	; 0x2bc00
    2dec:	addw	r3, r3, #799	; 0x31f
    2df0:	lsrs	r3, r3, #2
    2df2:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2df6:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2dfa:	rsb	r3, r4, r3, lsr #2
    2dfe:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2e02:	beq.n	2e0a <delay+0x76>
    2e04:	cmp	r1, #50	; 0x32
    2e06:	it	hi
    2e08:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2e0a:	mla	r3, r0, r2, r3
    2e0e:	cmp.w	r3, #1000	; 0x3e8
    2e12:	bcc.n	2e1e <delay+0x8a>
				ms--;
				if (ms == 0) return;
    2e14:	subs	r5, #1
    2e16:	beq.n	2e24 <delay+0x90>
				start += 1000;
    2e18:	add.w	r4, r4, #1000	; 0x3e8
    2e1c:	b.n	2dda <delay+0x46>
			}
			yield();
    2e1e:	bl	41d0 <yield>
		}
    2e22:	b.n	2dda <delay+0x46>
    2e24:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e28:	.word	0x1fff190c
    2e2c:	.word	0xe000e018
    2e30:	.word	0xe000ed04
    2e34:	.word	0x16c16c17

00002e38 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    2e38:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2e3a:	ldr	r3, [pc, #312]	; (2f74 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2e3c:	ldr	r0, [pc, #312]	; (2f78 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    2e3e:	ldr.w	ip, [pc, #348]	; 2f9c <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    2e42:	ldr	r4, [pc, #312]	; (2f7c <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    2e44:	ldr	r1, [pc, #312]	; (2f80 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2e46:	ldr.w	lr, [pc, #344]	; 2fa0 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    2e4a:	ldr	r6, [pc, #312]	; (2f84 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    2e4c:	ldr	r5, [pc, #312]	; (2f88 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    2e4e:	ldr	r7, [pc, #316]	; (2f8c <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2e50:	mov.w	r2, #134217728	; 0x8000000
    2e54:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    2e56:	mov.w	r2, #268435456	; 0x10000000
    2e5a:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    2e5c:	mov.w	r2, #536870912	; 0x20000000
    2e60:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    2e62:	mov.w	r2, #1073741824	; 0x40000000
    2e66:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    2e68:	mov.w	r2, #2147483648	; 0x80000000
    2e6c:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2e6e:	movs	r2, #0
    2e70:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2e72:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2e74:	movw	r0, #61439	; 0xefff
    2e78:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2e7c:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    2e80:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2e82:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    2e86:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    2e88:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    2e8a:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2e8c:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    2e90:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    2e92:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    2e96:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2e98:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    2e9c:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2e9e:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    2ea2:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2ea6:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    2eaa:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2eae:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    2eb2:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2eb4:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2eb8:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2eba:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2ebc:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    2ebe:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    2ec2:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2ec4:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2ec6:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2ec8:	ldr	r4, [pc, #196]	; (2f90 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    2eca:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2ecc:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2ece:	movs	r1, #9
    2ed0:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    2ed2:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2ed6:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2eda:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2edc:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2ede:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    2ee0:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    2ee2:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2ee4:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2ee6:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2eea:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    2eee:	add.w	r7, r7, #520192	; 0x7f000
    2ef2:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2ef4:	addw	r4, r4, #2044	; 0x7fc
    2ef8:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2efa:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2efc:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    2efe:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2f00:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2f04:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    2f06:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    2f0a:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    2f0e:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2f10:	sub.w	r4, r4, #460800	; 0x70800
    2f14:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    2f18:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2f1a:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2f1c:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2f20:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2f22:	ldr	r0, [pc, #112]	; (2f94 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2f24:	orr.w	r1, r1, #512	; 0x200
    2f28:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2f2a:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2f2c:	ldr	r4, [pc, #104]	; (2f98 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    2f2e:	add.w	lr, lr, #65280	; 0xff00
    2f32:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    2f36:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    2f3a:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    2f3e:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2f42:	orr.w	r1, r1, #33554432	; 0x2000000
    2f46:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    2f48:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    2f4c:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2f50:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    2f52:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    2f54:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    2f56:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2f58:	str	r2, [r4, #0]
#endif
	analog_init();
    2f5a:	bl	2a9c <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    2f5e:	movs	r0, #25
    2f60:	bl	2d94 <delay>
	usb_init();
    2f64:	bl	4100 <usb_init>
	delay(275);
    2f68:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    2f6c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    2f70:	b.w	2d94 <delay>
    2f74:	.word	0xe000e104
    2f78:	.word	0x40038004
    2f7c:	.word	0x40038014
    2f80:	.word	0x4003801c
    2f84:	.word	0x40038024
    2f88:	.word	0x4003802c
    2f8c:	.word	0x40038034
    2f90:	.word	0x40038000
    2f94:	.word	0x40048004
    2f98:	.word	0x400c9000
    2f9c:	.word	0x40038008
    2fa0:	.word	0x4003800c

00002fa4 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2fa4:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2fa6:	ldr	r3, [pc, #56]	; (2fe0 <sysex_byte+0x3c>)
    2fa8:	ldr	r4, [pc, #56]	; (2fe4 <sysex_byte+0x40>)
    2faa:	ldr	r3, [r3, #0]
    2fac:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2fae:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2fb0:	cbz	r3, 2fd6 <sysex_byte+0x32>
    2fb2:	cmp.w	r1, #290	; 0x122
    2fb6:	bcs.n	2fc4 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2fb8:	ldr	r2, [pc, #44]	; (2fe8 <sysex_byte+0x44>)
    2fba:	adds	r3, r1, #1
    2fbc:	strb	r5, [r2, r1]
    2fbe:	uxth	r3, r3
    2fc0:	strh	r3, [r4, #0]
	}
}
    2fc2:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2fc4:	movs	r2, #0
    2fc6:	ldr	r0, [pc, #32]	; (2fe8 <sysex_byte+0x44>)
    2fc8:	blx	r3
    2fca:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2fcc:	ldr	r2, [pc, #24]	; (2fe8 <sysex_byte+0x44>)
    2fce:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2fd0:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2fd2:	strh	r3, [r4, #0]
	}
}
    2fd4:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    2fd6:	cmp.w	r1, #290	; 0x122
    2fda:	bcc.n	2fb8 <sysex_byte+0x14>
    2fdc:	pop	{r3, r4, r5, pc}
    2fde:	nop
    2fe0:	.word	0x1fff1934
    2fe4:	.word	0x1fff1dca
    2fe8:	.word	0x1fff1dd0

00002fec <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2fec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    2ff0:	ldr	r6, [pc, #132]	; (3078 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2ff2:	ldr	r7, [pc, #136]	; (307c <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    2ff4:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2ff6:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2ff8:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2ffa:	strb	r3, [r7, #0]
	if (!tx_packet) {
    2ffc:	cbz	r1, 302c <usb_midi_write_packed+0x40>
    2ffe:	ldr	r5, [pc, #128]	; (3080 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    3000:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    3002:	add.w	r2, r1, r3, lsl #2
    3006:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    3008:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    300a:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    300c:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    3010:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    3012:	bhi.n	301e <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    3014:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    3016:	movs	r3, #0
    3018:	strb	r3, [r7, #0]
    301a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    301e:	movs	r3, #64	; 0x40
    3020:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    3022:	movs	r0, #4
    3024:	bl	36cc <usb_tx>
		tx_packet = NULL;
    3028:	str	r4, [r6, #0]
    302a:	b.n	3016 <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    302c:	ldr.w	r9, [pc, #84]	; 3084 <usb_midi_write_packed+0x98>
    3030:	ldrb.w	r3, [r9]
    3034:	cmp	r3, #0
    3036:	beq.n	301a <usb_midi_write_packed+0x2e>
    3038:	ldr	r5, [pc, #68]	; (3080 <usb_midi_write_packed+0x94>)
    303a:	movw	r4, #48001	; 0xbb81
    303e:	b.n	3052 <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    3040:	subs	r4, #1
    3042:	beq.n	306a <usb_midi_write_packed+0x7e>
    3044:	ldrb	r3, [r5, #0]
    3046:	cbnz	r3, 306a <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    3048:	bl	41d0 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    304c:	ldrb.w	r3, [r9]
    3050:	cbz	r3, 3072 <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    3052:	movs	r0, #4
    3054:	bl	35b8 <usb_tx_packet_count>
    3058:	cmp	r0, #5
    305a:	bhi.n	3040 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    305c:	bl	34f0 <usb_malloc>
    3060:	mov	r1, r0
    3062:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    3064:	cmp	r0, #0
    3066:	beq.n	3040 <usb_midi_write_packed+0x54>
    3068:	b.n	3000 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    306a:	movs	r3, #1
    306c:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    306e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3072:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3076:	nop
    3078:	.word	0x1fff1950
    307c:	.word	0x1fff1924
    3080:	.word	0x1fff1954
    3084:	.word	0x1fff1a60

00003088 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    3088:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    308a:	ldr	r3, [pc, #32]	; (30ac <usb_midi_flush_output+0x24>)
    308c:	ldrb	r4, [r3, #0]
    308e:	cbnz	r4, 309a <usb_midi_flush_output+0x12>
    3090:	ldr	r5, [pc, #28]	; (30b0 <usb_midi_flush_output+0x28>)
    3092:	ldr	r1, [r5, #0]
    3094:	cbz	r1, 309a <usb_midi_flush_output+0x12>
    3096:	ldrh	r3, [r1, #2]
    3098:	cbnz	r3, 309c <usb_midi_flush_output+0x14>
    309a:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    309c:	lsls	r3, r3, #2
    309e:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    30a0:	movs	r0, #4
    30a2:	bl	36cc <usb_tx>
		tx_packet = NULL;
    30a6:	str	r4, [r5, #0]
    30a8:	pop	{r3, r4, r5, pc}
    30aa:	nop
    30ac:	.word	0x1fff1924
    30b0:	.word	0x1fff1950

000030b4 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    30b4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    30b8:	ldr	r6, [pc, #692]	; (3370 <usb_midi_read+0x2bc>)
    30ba:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    30bc:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    30be:	cmp	r3, #0
    30c0:	beq.w	31e8 <usb_midi_read+0x134>
    30c4:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    30c6:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    30c8:	lsrs	r1, r2, #2
    30ca:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    30ce:	adds	r2, #4
	if (index < rx_packet->len) {
    30d0:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    30d2:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    30d4:	bcs.n	315c <usb_midi_read+0xa8>
		rx_packet->index = index;
    30d6:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    30d8:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    30dc:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    30e0:	ldr	r1, [pc, #656]	; (3374 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    30e2:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    30e6:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    30ea:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    30ee:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    30f0:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    30f4:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    30f6:	bls.n	312e <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    30f8:	subs	r3, r6, #2
    30fa:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    30fc:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    3100:	bls.n	31a0 <usb_midi_read+0xec>
    3102:	cmp	r6, #5
    3104:	beq.n	3198 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    3106:	cmp	r6, #4
    3108:	beq.w	3454 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    310c:	subs	r3, r6, #5
    310e:	cmp	r3, #2
    3110:	bls.n	3212 <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    3112:	cmp	r6, #15
    3114:	bne.n	3134 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    3116:	cmp	r0, #247	; 0xf7
    3118:	bhi.n	31a0 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    311a:	cmp	r0, #240	; 0xf0
    311c:	beq.n	3124 <usb_midi_read+0x70>
    311e:	ldr	r3, [pc, #600]	; (3378 <usb_midi_read+0x2c4>)
    3120:	ldrh	r3, [r3, #0]
    3122:	cbz	r3, 3134 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    3124:	bl	2fa4 <sysex_byte>
		}
	}
	return 0;
    3128:	movs	r0, #0
    312a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    312e:	cbz	r7, 313a <usb_midi_read+0x86>
    3130:	cmp	r5, r7
    3132:	beq.n	313a <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    3134:	movs	r0, #0
    3136:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    313a:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    313c:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    3140:	beq.w	3252 <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    3144:	cmp	r6, #9
    3146:	beq.n	316c <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    3148:	cmp	r6, #10
    314a:	bne.w	3276 <usb_midi_read+0x1c2>
    314e:	cmp	r3, #10
    3150:	bne.n	3134 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    3152:	ldr	r3, [pc, #552]	; (337c <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    3154:	ldr	r2, [pc, #552]	; (3380 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    3156:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    3158:	movs	r1, #160	; 0xa0
    315a:	b.n	3260 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    315c:	mov	r0, r3
    315e:	bl	3530 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    3162:	movs	r0, #5
    3164:	bl	357c <usb_rx>
    3168:	str	r0, [r6, #0]
    316a:	b.n	30d8 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    316c:	cmp	r3, #9
    316e:	bne.n	3134 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    3170:	lsrs	r7, r4, #24
    3172:	beq.w	346c <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    3176:	ldr	r3, [pc, #524]	; (3384 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    3178:	ldr	r2, [pc, #516]	; (3380 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    317a:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    317c:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    317e:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    3182:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    3184:	uxtb	r5, r5
    3186:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    3188:	cmp	r3, #0
    318a:	beq.w	32c8 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    318e:	mov	r2, r4
    3190:	mov	r1, r6
    3192:	mov	r0, r5
    3194:	blx	r3
    3196:	b.n	32c8 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    3198:	cmp	r0, #240	; 0xf0
    319a:	bls.n	3224 <usb_midi_read+0x170>
    319c:	cmp	r0, #247	; 0xf7
    319e:	beq.n	3224 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    31a0:	subs	r0, #241	; 0xf1
    31a2:	cmp	r0, #14
    31a4:	bhi.n	3134 <usb_midi_read+0x80>
    31a6:	add	r3, pc, #4	; (adr r3, 31ac <usb_midi_read+0xf8>)
    31a8:	ldr.w	pc, [r3, r0, lsl #2]
    31ac:	.word	0x00003363
    31b0:	.word	0x00003347
    31b4:	.word	0x00003335
    31b8:	.word	0x00003135
    31bc:	.word	0x00003135
    31c0:	.word	0x00003327
    31c4:	.word	0x00003135
    31c8:	.word	0x00003407
    31cc:	.word	0x00003135
    31d0:	.word	0x000033d1
    31d4:	.word	0x000033eb
    31d8:	.word	0x0000330f
    31dc:	.word	0x00003135
    31e0:	.word	0x000032f7
    31e4:	.word	0x000032db
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    31e8:	ldr	r3, [pc, #412]	; (3388 <usb_midi_read+0x2d4>)
    31ea:	ldrb	r3, [r3, #0]
    31ec:	cmp	r3, #0
    31ee:	beq.n	3134 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    31f0:	movs	r0, #5
    31f2:	bl	357c <usb_rx>
    31f6:	mov	r3, r0
    31f8:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    31fa:	cmp	r0, #0
    31fc:	beq.n	3134 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    31fe:	ldrh	r5, [r0, #0]
    3200:	cmp	r5, #0
    3202:	bne.w	30c6 <usb_midi_read+0x12>
			usb_free(rx_packet);
    3206:	bl	3530 <usb_free>
			rx_packet = NULL;
    320a:	str	r5, [r6, #0]
			return 0;
    320c:	mov	r0, r5
    320e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    3212:	bl	2fa4 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    3216:	ubfx	r0, r4, #16, #8
    321a:	bl	2fa4 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    321e:	cmp	r6, #7
    3220:	bne.n	3228 <usb_midi_read+0x174>
    3222:	lsrs	r0, r4, #24
    3224:	bl	2fa4 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    3228:	ldr	r3, [pc, #332]	; (3378 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    322a:	ldr	r2, [pc, #352]	; (338c <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    322c:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    322e:	ldr	r0, [pc, #352]	; (3390 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    3230:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    3232:	ldr	r5, [pc, #352]	; (3394 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    3234:	ldr	r2, [pc, #328]	; (3380 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    3236:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    3238:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    323a:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    323c:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    323e:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    3240:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    3242:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    3244:	cbz	r4, 328a <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    3246:	movs	r2, #1
    3248:	ldr	r0, [pc, #332]	; (3398 <usb_midi_read+0x2e4>)
    324a:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    324c:	movs	r0, #1
    324e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    3252:	cmp	r3, #8
    3254:	bne.w	3134 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    3258:	ldr	r3, [pc, #320]	; (339c <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    325a:	ldr	r2, [pc, #292]	; (3380 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    325c:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    325e:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    3260:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    3264:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    3266:	uxtb	r5, r5
    3268:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    326a:	cbz	r3, 32c8 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    326c:	mov	r0, r5
    326e:	mov	r2, r4
    3270:	mov	r1, r6
    3272:	blx	r3
    3274:	b.n	32c8 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    3276:	cmp	r6, #11
    3278:	bne.n	329e <usb_midi_read+0x1ea>
    327a:	cmp	r3, #11
    327c:	bne.w	3134 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    3280:	ldr	r3, [pc, #284]	; (33a0 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    3282:	ldr	r2, [pc, #252]	; (3380 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    3284:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    3286:	movs	r1, #176	; 0xb0
    3288:	b.n	3260 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    328a:	ldr	r3, [pc, #280]	; (33a4 <usb_midi_read+0x2f0>)
    328c:	ldr	r3, [r3, #0]
    328e:	cmp	r3, #0
    3290:	beq.w	348a <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    3294:	ldr	r0, [pc, #256]	; (3398 <usb_midi_read+0x2e4>)
    3296:	blx	r3
		}
		return 1;
    3298:	movs	r0, #1
    329a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    329e:	cmp	r6, #12
    32a0:	bne.w	34a4 <usb_midi_read+0x3f0>
    32a4:	cmp	r3, #12
    32a6:	bne.w	3134 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    32aa:	ldr	r3, [pc, #252]	; (33a8 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    32ac:	ldr	r2, [pc, #208]	; (3380 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    32ae:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    32b0:	movs	r1, #192	; 0xc0
    32b2:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    32b4:	uxtb	r5, r5
    32b6:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    32ba:	cmp	r3, #0
    32bc:	beq.w	3450 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    32c0:	mov	r0, r5
    32c2:	mov	r1, r6
    32c4:	lsrs	r4, r4, #24
    32c6:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    32c8:	ldr	r1, [pc, #224]	; (33ac <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    32ca:	ldr	r2, [pc, #196]	; (3390 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    32cc:	ldr	r3, [pc, #196]	; (3394 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    32ce:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    32d0:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    32d2:	strb	r4, [r3, #0]
		return 1;
    32d4:	movs	r0, #1
    32d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    32da:	ldr	r3, [pc, #212]	; (33b0 <usb_midi_read+0x2fc>)
    32dc:	ldr	r3, [r3, #0]
    32de:	cmp	r3, #0
    32e0:	beq.w	3490 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    32e4:	blx	r3
    32e6:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    32ea:	ldr	r3, [pc, #148]	; (3380 <usb_midi_read+0x2cc>)
    32ec:	uxtb	r5, r5
    32ee:	lsrs	r4, r4, #24
    32f0:	strb.w	r8, [r3]
		goto return_message;
    32f4:	b.n	32c8 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    32f6:	ldr	r3, [pc, #188]	; (33b4 <usb_midi_read+0x300>)
    32f8:	ldr	r3, [r3, #0]
    32fa:	cmp	r3, #0
    32fc:	bne.n	32e4 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    32fe:	ldr	r3, [pc, #184]	; (33b8 <usb_midi_read+0x304>)
    3300:	ldr	r3, [r3, #0]
    3302:	cbz	r3, 332e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    3304:	movs	r0, #254	; 0xfe
    3306:	blx	r3
    3308:	ubfx	r6, r4, #16, #8
    330c:	b.n	32ea <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    330e:	ldr	r3, [pc, #172]	; (33bc <usb_midi_read+0x308>)
    3310:	ldr	r3, [r3, #0]
    3312:	cmp	r3, #0
    3314:	bne.n	32e4 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    3316:	ldr	r3, [pc, #160]	; (33b8 <usb_midi_read+0x304>)
    3318:	ldr	r3, [r3, #0]
    331a:	cbz	r3, 332e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    331c:	movs	r0, #252	; 0xfc
    331e:	blx	r3
    3320:	ubfx	r6, r4, #16, #8
    3324:	b.n	32ea <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    3326:	ldr	r3, [pc, #152]	; (33c0 <usb_midi_read+0x30c>)
    3328:	ldr	r3, [r3, #0]
    332a:	cmp	r3, #0
    332c:	bne.n	32e4 <usb_midi_read+0x230>
    332e:	ubfx	r6, r4, #16, #8
    3332:	b.n	32ea <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    3334:	ldr	r3, [pc, #140]	; (33c4 <usb_midi_read+0x310>)
    3336:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    3338:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    333c:	cmp	r3, #0
    333e:	beq.n	32ea <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    3340:	mov	r0, r6
    3342:	blx	r3
    3344:	b.n	32ea <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    3346:	ldr	r3, [pc, #128]	; (33c8 <usb_midi_read+0x314>)
    3348:	ldr	r2, [r3, #0]
    334a:	cmp	r2, #0
    334c:	beq.n	332e <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    334e:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    3350:	lsrs	r3, r4, #17
    3352:	and.w	r0, r6, #127	; 0x7f
    3356:	and.w	r3, r3, #16256	; 0x3f80
    335a:	orrs	r0, r3
    335c:	uxtb	r6, r6
    335e:	blx	r2
    3360:	b.n	32ea <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    3362:	ldr	r3, [pc, #104]	; (33cc <usb_midi_read+0x318>)
    3364:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    3366:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    336a:	cmp	r3, #0
    336c:	bne.n	3340 <usb_midi_read+0x28c>
    336e:	b.n	32ea <usb_midi_read+0x236>
    3370:	.word	0x1fff195c
    3374:	.word	0x1fff1dce
    3378:	.word	0x1fff1dca
    337c:	.word	0x1fff1938
    3380:	.word	0x1fff1dc8
    3384:	.word	0x1fff196c
    3388:	.word	0x1fff1a60
    338c:	.word	0x1fff1934
    3390:	.word	0x1fff1dcc
    3394:	.word	0x1fff1dcd
    3398:	.word	0x1fff1dd0
    339c:	.word	0x1fff1964
    33a0:	.word	0x1fff1968
    33a4:	.word	0x1fff194c
    33a8:	.word	0x1fff1928
    33ac:	.word	0x1fff1dcf
    33b0:	.word	0x1fff1914
    33b4:	.word	0x1fff1918
    33b8:	.word	0x1fff191c
    33bc:	.word	0x1fff1958
    33c0:	.word	0x1fff1948
    33c4:	.word	0x1fff1960
    33c8:	.word	0x1fff1930
    33cc:	.word	0x1fff1944
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    33d0:	ldr	r3, [pc, #252]	; (34d0 <usb_midi_read+0x41c>)
    33d2:	ldr	r3, [r3, #0]
    33d4:	cmp	r3, #0
    33d6:	bne.n	32e4 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    33d8:	ldr	r3, [pc, #248]	; (34d4 <usb_midi_read+0x420>)
    33da:	ldr	r3, [r3, #0]
    33dc:	cmp	r3, #0
    33de:	beq.n	332e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    33e0:	movs	r0, #250	; 0xfa
    33e2:	blx	r3
    33e4:	ubfx	r6, r4, #16, #8
    33e8:	b.n	32ea <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    33ea:	ldr	r3, [pc, #236]	; (34d8 <usb_midi_read+0x424>)
    33ec:	ldr	r3, [r3, #0]
    33ee:	cmp	r3, #0
    33f0:	bne.w	32e4 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    33f4:	ldr	r3, [pc, #220]	; (34d4 <usb_midi_read+0x420>)
    33f6:	ldr	r3, [r3, #0]
    33f8:	cmp	r3, #0
    33fa:	beq.n	332e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    33fc:	movs	r0, #251	; 0xfb
    33fe:	blx	r3
    3400:	ubfx	r6, r4, #16, #8
    3404:	b.n	32ea <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    3406:	ldr	r3, [pc, #212]	; (34dc <usb_midi_read+0x428>)
    3408:	ldr	r3, [r3, #0]
    340a:	cmp	r3, #0
    340c:	bne.w	32e4 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    3410:	ldr	r3, [pc, #192]	; (34d4 <usb_midi_read+0x420>)
    3412:	ldr	r3, [r3, #0]
    3414:	cmp	r3, #0
    3416:	beq.n	332e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    3418:	movs	r0, #248	; 0xf8
    341a:	blx	r3
    341c:	ubfx	r6, r4, #16, #8
    3420:	b.n	32ea <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    3422:	cmp	r3, #14
    3424:	bne.w	3134 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    3428:	ldr	r2, [pc, #180]	; (34e0 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    342a:	ldr	r3, [pc, #184]	; (34e4 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    342c:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    342e:	movs	r1, #224	; 0xe0
    3430:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    3432:	cmp	r2, #0
    3434:	beq.n	34c6 <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    3436:	lsrs	r6, r4, #16
    3438:	lsrs	r1, r4, #17
    343a:	and.w	r3, r6, #127	; 0x7f
    343e:	and.w	r1, r1, #16256	; 0x3f80
    3442:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    3444:	uxtb	r5, r5
    3446:	sub.w	r1, r1, #8192	; 0x2000
    344a:	mov	r0, r5
    344c:	blx	r2
    344e:	uxtb	r6, r6
    3450:	lsrs	r4, r4, #24
    3452:	b.n	32c8 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    3454:	bl	2fa4 <sysex_byte>
		sysex_byte(n >> 16);
    3458:	ubfx	r0, r4, #16, #8
    345c:	bl	2fa4 <sysex_byte>
		sysex_byte(n >> 24);
    3460:	lsrs	r0, r4, #24
    3462:	bl	2fa4 <sysex_byte>
		return 0;
    3466:	movs	r0, #0
    3468:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    346c:	ldr	r3, [pc, #120]	; (34e8 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    346e:	ldr	r2, [pc, #116]	; (34e4 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    3470:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    3472:	movs	r1, #128	; 0x80
    3474:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    3476:	uxtb	r5, r5
    3478:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    347c:	cbz	r3, 34a0 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    347e:	mov	r1, r6
    3480:	mov	r0, r5
    3482:	mov	r2, r7
    3484:	blx	r3
    3486:	mov	r4, r7
    3488:	b.n	32c8 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    348a:	movs	r0, #1
    348c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    3490:	ldr	r3, [pc, #64]	; (34d4 <usb_midi_read+0x420>)
    3492:	ldr	r3, [r3, #0]
    3494:	cmp	r3, #0
    3496:	beq.w	332e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    349a:	movs	r0, #255	; 0xff
    349c:	blx	r3
    349e:	b.n	332e <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    34a0:	mov	r4, r3
    34a2:	b.n	32c8 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    34a4:	cmp	r6, #13
    34a6:	bne.n	3422 <usb_midi_read+0x36e>
    34a8:	cmp	r3, #13
    34aa:	bne.w	3134 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    34ae:	ldr	r3, [pc, #60]	; (34ec <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    34b0:	ldr	r2, [pc, #48]	; (34e4 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    34b2:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    34b4:	movs	r1, #208	; 0xd0
    34b6:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    34b8:	uxtb	r5, r5
    34ba:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    34be:	cmp	r3, #0
    34c0:	bne.w	32c0 <usb_midi_read+0x20c>
    34c4:	b.n	3450 <usb_midi_read+0x39c>
    34c6:	ubfx	r6, r4, #16, #8
    34ca:	uxtb	r5, r5
    34cc:	lsrs	r4, r4, #24
    34ce:	b.n	32c8 <usb_midi_read+0x214>
    34d0:	.word	0x1fff1940
    34d4:	.word	0x1fff191c
    34d8:	.word	0x1fff1920
    34dc:	.word	0x1fff1910
    34e0:	.word	0x1fff192c
    34e4:	.word	0x1fff1dc8
    34e8:	.word	0x1fff1964
    34ec:	.word	0x1fff193c

000034f0 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    34f0:	cpsid	i
	avail = usb_buffer_available;
    34f2:	ldr	r0, [pc, #52]	; (3528 <usb_malloc+0x38>)
    34f4:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    34f6:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    34fa:	cmp	r3, #29
    34fc:	bgt.n	3520 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    34fe:	mov.w	r1, #2147483648	; 0x80000000
    3502:	lsrs	r1, r3
    3504:	bic.w	r2, r2, r1
    3508:	str	r2, [r0, #0]
	__enable_irq();
    350a:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    350c:	ldr	r0, [pc, #28]	; (352c <usb_malloc+0x3c>)
    350e:	add.w	r3, r3, r3, lsl #3
    3512:	lsls	r3, r3, #3
    3514:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    3516:	movs	r1, #0
    3518:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    351a:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    351c:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    351e:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    3520:	cpsie	i
		return NULL;
    3522:	movs	r0, #0
    3524:	bx	lr
    3526:	nop
    3528:	.word	0x1fff0c6c
    352c:	.word	0x1fff03d0

00003530 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    3530:	ldr	r3, [pc, #52]	; (3568 <usb_free+0x38>)
    3532:	ldr	r2, [pc, #56]	; (356c <usb_free+0x3c>)
    3534:	subs	r3, r0, r3
    3536:	umull	r2, r3, r2, r3
    353a:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    353c:	cmp	r3, #29
    353e:	bhi.n	355a <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3540:	ldr	r2, [pc, #44]	; (3570 <usb_free+0x40>)
    3542:	ldrb	r2, [r2, #0]
    3544:	cbnz	r2, 355c <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    3546:	cpsid	i
	usb_buffer_available |= mask;
    3548:	ldr	r0, [pc, #40]	; (3574 <usb_free+0x44>)
    354a:	mov.w	r1, #2147483648	; 0x80000000
    354e:	ldr	r2, [r0, #0]
    3550:	lsr.w	r3, r1, r3
    3554:	orrs	r2, r3
    3556:	str	r2, [r0, #0]
	__enable_irq();
    3558:	cpsie	i
    355a:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    355c:	ldr	r2, [pc, #24]	; (3578 <usb_free+0x48>)
    355e:	ldrb	r2, [r2, #0]
    3560:	cmp	r2, #0
    3562:	beq.n	3546 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    3564:	b.w	35e4 <usb_rx_memory>
    3568:	.word	0x1fff03d0
    356c:	.word	0x38e38e39
    3570:	.word	0x1fff1a55
    3574:	.word	0x1fff0c6c
    3578:	.word	0x1fff1a60

0000357c <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    357c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    357e:	cmp	r3, #4
    3580:	bhi.n	35ac <usb_rx+0x30>
	__disable_irq();
    3582:	cpsid	i
	ret = rx_first[endpoint];
    3584:	ldr	r1, [pc, #40]	; (35b0 <usb_rx+0x34>)
    3586:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    358a:	cbz	r0, 35a8 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    358c:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    358e:	ldr	r4, [pc, #36]	; (35b4 <usb_rx+0x38>)
    3590:	ldrh	r5, [r0, #0]
    3592:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    3596:	ldr	r6, [r0, #4]
    3598:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    359c:	subs	r2, r2, r5
    359e:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    35a2:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    35a4:	pop	{r4, r5, r6}
    35a6:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    35a8:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    35aa:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    35ac:	movs	r0, #0
    35ae:	bx	lr
    35b0:	.word	0x1fff19cc
    35b4:	.word	0x1fff1ef4

000035b8 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    35b8:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    35ba:	cmp	r0, #4
    35bc:	bhi.n	35d6 <usb_tx_packet_count+0x1e>
	__disable_irq();
    35be:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    35c0:	ldr	r3, [pc, #28]	; (35e0 <usb_tx_packet_count+0x28>)
    35c2:	ldr.w	r3, [r3, r0, lsl #2]
    35c6:	cbz	r3, 35da <usb_tx_packet_count+0x22>
    35c8:	movs	r0, #0
    35ca:	ldr	r3, [r3, #4]
    35cc:	adds	r0, #1
    35ce:	cmp	r3, #0
    35d0:	bne.n	35ca <usb_tx_packet_count+0x12>
	__enable_irq();
    35d2:	cpsie	i
	return count;
    35d4:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    35d6:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    35d8:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    35da:	mov	r0, r3
    35dc:	b.n	35d2 <usb_tx_packet_count+0x1a>
    35de:	nop
    35e0:	.word	0x1fff1a24

000035e4 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    35e4:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    35e6:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    35e8:	ldr	r2, [pc, #204]	; (36b8 <usb_rx_memory+0xd4>)
    35ea:	ldrb	r3, [r2, #0]
    35ec:	lsls	r3, r3, #28
    35ee:	bpl.n	35fe <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    35f0:	ldr	r3, [pc, #200]	; (36bc <usb_rx_memory+0xd8>)
    35f2:	ldr	r1, [r3, #32]
    35f4:	cmp	r1, #0
    35f6:	beq.n	3680 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    35f8:	ldr	r1, [r3, #40]	; 0x28
    35fa:	cmp	r1, #0
    35fc:	beq.n	369c <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    35fe:	ldrb	r3, [r2, #1]
    3600:	lsls	r5, r3, #28
    3602:	bpl.n	3612 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3604:	ldr	r3, [pc, #180]	; (36bc <usb_rx_memory+0xd8>)
    3606:	ldr	r1, [r3, #64]	; 0x40
    3608:	cmp	r1, #0
    360a:	beq.n	36a8 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    360c:	ldr	r1, [r3, #72]	; 0x48
    360e:	cmp	r1, #0
    3610:	beq.n	36a0 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3612:	ldrb	r3, [r2, #2]
    3614:	lsls	r4, r3, #28
    3616:	bpl.n	3626 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3618:	ldr	r3, [pc, #160]	; (36bc <usb_rx_memory+0xd8>)
    361a:	ldr	r1, [r3, #96]	; 0x60
    361c:	cmp	r1, #0
    361e:	beq.n	36ac <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3620:	ldr	r1, [r3, #104]	; 0x68
    3622:	cmp	r1, #0
    3624:	beq.n	36a4 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3626:	ldrb	r3, [r2, #3]
    3628:	lsls	r1, r3, #28
    362a:	bpl.n	363c <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    362c:	ldr	r3, [pc, #140]	; (36bc <usb_rx_memory+0xd8>)
    362e:	ldr.w	r1, [r3, #128]	; 0x80
    3632:	cmp	r1, #0
    3634:	beq.n	36b4 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3636:	ldr.w	r1, [r3, #136]	; 0x88
    363a:	cbz	r1, 3662 <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    363c:	ldrb	r3, [r2, #4]
    363e:	lsls	r3, r3, #28
    3640:	bpl.n	3654 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3642:	ldr	r3, [pc, #120]	; (36bc <usb_rx_memory+0xd8>)
    3644:	ldr.w	r2, [r3, #160]	; 0xa0
    3648:	cmp	r2, #0
    364a:	beq.n	36b0 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    364c:	ldr.w	r2, [r3, #168]	; 0xa8
    3650:	movs	r4, #21
    3652:	cbz	r2, 3664 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    3654:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    3656:	ldr	r3, [pc, #104]	; (36c0 <usb_rx_memory+0xdc>)
    3658:	movs	r2, #0
    365a:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    365c:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    365e:	b.w	3530 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3662:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3664:	ldr	r1, [pc, #88]	; (36c0 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3666:	ldr	r5, [pc, #92]	; (36c4 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    3668:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    366a:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    366e:	add.w	r3, r3, r4, lsl #3
    3672:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3674:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    3676:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3678:	strb	r2, [r1, #0]
				__enable_irq();
    367a:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    367c:	pop	{r4, r5}
    367e:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    3680:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3682:	ldr	r4, [pc, #60]	; (36c0 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3684:	ldr	r5, [pc, #64]	; (36c8 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    3686:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3688:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    368c:	add.w	r3, r3, r2, lsl #3
    3690:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3692:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    3694:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3696:	strb	r2, [r4, #0]
				__enable_irq();
    3698:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    369a:	b.n	367c <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    369c:	movs	r4, #5
    369e:	b.n	3664 <usb_rx_memory+0x80>
    36a0:	movs	r4, #9
    36a2:	b.n	3664 <usb_rx_memory+0x80>
    36a4:	movs	r4, #13
    36a6:	b.n	3664 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    36a8:	movs	r2, #8
    36aa:	b.n	3682 <usb_rx_memory+0x9e>
    36ac:	movs	r2, #12
    36ae:	b.n	3682 <usb_rx_memory+0x9e>
    36b0:	movs	r2, #20
    36b2:	b.n	3682 <usb_rx_memory+0x9e>
    36b4:	movs	r2, #16
    36b6:	b.n	3682 <usb_rx_memory+0x9e>
    36b8:	.word	0x00005a18
    36bc:	.word	0x1fff0000
    36c0:	.word	0x1fff1a55
    36c4:	.word	0x004000c8
    36c8:	.word	0x00400088

000036cc <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    36cc:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    36ce:	cmp	r3, #4
    36d0:	bhi.n	370e <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    36d2:	ldr	r2, [pc, #108]	; (3740 <usb_tx+0x74>)
    36d4:	lsls	r0, r0, #5
    36d6:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    36da:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    36dc:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    36de:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    36e0:	ldr	r4, [pc, #96]	; (3744 <usb_tx+0x78>)
    36e2:	ldrb	r2, [r4, r3]
    36e4:	cmp	r2, #3
    36e6:	bhi.n	3720 <usb_tx+0x54>
    36e8:	tbb	[pc, r2]
    36ec:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    36f0:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    36f2:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    36f4:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    36f6:	tst.w	r0, #8
    36fa:	ite	ne
    36fc:	movne	r3, #200	; 0xc8
    36fe:	moveq	r3, #136	; 0x88
    3700:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3704:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3706:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3708:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    370a:	cpsie	i
}
    370c:	pop	{r4, r5}
    370e:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    3710:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    3712:	movs	r2, #2
		break;
    3714:	b.n	36f2 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    3716:	movs	r2, #5
    3718:	b.n	36f2 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    371a:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    371c:	movs	r2, #4
		break;
    371e:	b.n	36f2 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    3720:	ldr	r2, [pc, #36]	; (3748 <usb_tx+0x7c>)
    3722:	ldr.w	r0, [r2, r3, lsl #2]
    3726:	cbz	r0, 3738 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    3728:	ldr	r2, [pc, #32]	; (374c <usb_tx+0x80>)
    372a:	ldr.w	r0, [r2, r3, lsl #2]
    372e:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    3730:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    3734:	cpsie	i
		return;
    3736:	b.n	370c <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    3738:	str.w	r1, [r2, r3, lsl #2]
    373c:	ldr	r2, [pc, #12]	; (374c <usb_tx+0x80>)
    373e:	b.n	3730 <usb_tx+0x64>
    3740:	.word	0x1fff0000
    3744:	.word	0x1fff1a64
    3748:	.word	0x1fff1a24
    374c:	.word	0x1fff1a38

00003750 <usb_isr>:
}



void usb_isr(void)
{
    3750:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    3754:	ldr.w	fp, [pc, #776]	; 3a60 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    3758:	ldr.w	sl, [pc, #776]	; 3a64 <usb_isr+0x314>
}



void usb_isr(void)
{
    375c:	sub	sp, #28
    375e:	b.n	37ea <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    3760:	ldr	r7, [pc, #680]	; (3a0c <usb_isr+0x2bc>)
    3762:	mov.w	r8, r3, lsr #2
    3766:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    376a:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    376c:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    3770:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3774:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3776:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    377a:	and.w	r4, r3, #255	; 0xff
    377e:	cmp	r3, #0
    3780:	bne.w	3984 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    3784:	ldr.w	r3, [r7, r8, lsl #3]
    3788:	lsrs	r3, r3, #16
    378a:	uxth	r1, r3
    378c:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    3790:	cmp	r3, #0
    3792:	beq.w	3972 <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    3796:	ldr	r3, [pc, #632]	; (3a10 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    3798:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    379c:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    37a0:	ldr.w	r2, [r3, r6, lsl #2]
    37a4:	cmp	r2, #0
    37a6:	beq.w	3c14 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    37aa:	ldr	r5, [pc, #616]	; (3a14 <usb_isr+0x2c4>)
    37ac:	ldr.w	r3, [r5, r6, lsl #2]
    37b0:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    37b2:	ldr	r4, [pc, #612]	; (3a18 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    37b4:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    37b8:	ldrh.w	r3, [r4, r6, lsl #1]
    37bc:	add	r1, r3
    37be:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    37c2:	bl	34f0 <usb_malloc>
					if (packet) {
    37c6:	cmp	r0, #0
    37c8:	beq.w	3c06 <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    37cc:	ldr	r2, [pc, #588]	; (3a1c <usb_isr+0x2cc>)
    37ce:	ldr	r3, [pc, #592]	; (3a20 <usb_isr+0x2d0>)
    37d0:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    37d4:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    37d8:	it	ne
    37da:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    37dc:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    37e0:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    37e4:	movs	r3, #8
    37e6:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    37ea:	ldrb.w	r4, [fp]
    37ee:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    37f0:	lsls	r0, r4, #29
    37f2:	bpl.n	382e <usb_isr+0xde>
		if (usb_configuration) {
    37f4:	ldr	r3, [pc, #556]	; (3a24 <usb_isr+0x2d4>)
    37f6:	ldrb	r3, [r3, #0]
    37f8:	cbz	r3, 3828 <usb_isr+0xd8>
			t = usb_reboot_timer;
    37fa:	ldr	r1, [pc, #556]	; (3a28 <usb_isr+0x2d8>)
    37fc:	ldrb	r2, [r1, #0]
			if (t) {
    37fe:	and.w	r3, r2, #255	; 0xff
    3802:	cbz	r2, 380e <usb_isr+0xbe>
				usb_reboot_timer = --t;
    3804:	subs	r3, #1
    3806:	uxtb	r3, r3
    3808:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    380a:	cbnz	r3, 380e <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    380c:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    380e:	ldr	r1, [pc, #540]	; (3a2c <usb_isr+0x2dc>)
    3810:	ldrb	r2, [r1, #0]
			if (t) {
    3812:	and.w	r3, r2, #255	; 0xff
    3816:	cbz	r2, 3824 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    3818:	subs	r3, #1
    381a:	uxtb	r3, r3
    381c:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    381e:	cmp	r3, #0
    3820:	beq.w	3bb2 <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    3824:	bl	3088 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    3828:	movs	r3, #4
    382a:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    382e:	and.w	r3, r4, #8
    3832:	and.w	r2, r3, #255	; 0xff
    3836:	cmp	r3, #0
    3838:	beq.w	39cc <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    383c:	ldrb.w	r3, [sl]
    3840:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    3842:	lsrs	r6, r3, #4
    3844:	bne.n	3760 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    3846:	lsrs	r4, r3, #2
    3848:	ldr.w	r9, [pc, #448]	; 3a0c <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    384c:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    3850:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3854:	ubfx	r2, r2, #2, #4
    3858:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    385a:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    385c:	cmp	r2, #12
    385e:	bhi.w	396a <usb_isr+0x21a>
    3862:	tbb	[pc, r2]
    3866:	.short	0x7878
    3868:	.word	0x82828282
    386c:	.word	0x82438282
    3870:	.short	0x8282
    3872:	.byte	0x07
    3873:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    3874:	ldr	r0, [r1, #0]
    3876:	ldr	r5, [pc, #440]	; (3a30 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3878:	ldr	r3, [pc, #416]	; (3a1c <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    387a:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    387c:	ldr	r7, [pc, #436]	; (3a34 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    387e:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3882:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3884:	ldr	r6, [pc, #432]	; (3a38 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    3886:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3888:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    388c:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    388e:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3890:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3892:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3896:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    3898:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    389c:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    38a0:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    38a2:	bhi.w	3a68 <usb_isr+0x318>
    38a6:	cmp.w	r1, #1664	; 0x680
    38aa:	bcs.w	3ed4 <usb_isr+0x784>
    38ae:	cmp.w	r1, #258	; 0x102
    38b2:	beq.w	3c82 <usb_isr+0x532>
    38b6:	bhi.w	3c4c <usb_isr+0x4fc>
    38ba:	cmp	r1, #128	; 0x80
    38bc:	beq.w	3f08 <usb_isr+0x7b8>
    38c0:	cmp	r1, #130	; 0x82
    38c2:	bne.w	3c8e <usb_isr+0x53e>
    38c6:	ldrh	r1, [r5, #4]
    38c8:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    38cc:	cmp	r1, #5
    38ce:	bhi.w	3c8e <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    38d2:	ldr	r3, [pc, #360]	; (3a3c <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    38d4:	ldr	r4, [pc, #360]	; (3a40 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    38d6:	lsls	r1, r1, #2
    38d8:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    38da:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    38dc:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    38de:	ldrb	r2, [r3, #0]
    38e0:	lsls	r3, r2, #30
    38e2:	bpl.w	4018 <usb_isr+0x8c8>
    38e6:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    38e8:	movs	r0, #2
    38ea:	b.n	3d16 <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    38ec:	ldr	r7, [pc, #324]	; (3a34 <usb_isr+0x2e4>)
    38ee:	ldr	r2, [r7, #0]
		if (data) {
    38f0:	cbz	r2, 3940 <usb_isr+0x1f0>
			size = ep0_tx_len;
    38f2:	ldr	r3, [pc, #336]	; (3a44 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    38f4:	ldr	r6, [pc, #320]	; (3a38 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    38f6:	ldr	r1, [pc, #336]	; (3a48 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    38f8:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    38fa:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    38fc:	ldrb	r5, [r1, #0]
    38fe:	cmp	r0, #64	; 0x40
    3900:	mov	lr, r0
    3902:	orr.w	r8, r5, #2
    3906:	it	cs
    3908:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    390c:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    390e:	eor.w	r4, r4, #1
    3912:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3914:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3918:	ite	eq
    391a:	moveq	r4, #136	; 0x88
    391c:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    391e:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3922:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3924:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3928:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    392c:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    392e:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3930:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    3934:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3936:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3938:	cmp	r0, #0
    393a:	beq.w	3aaa <usb_isr+0x35a>
    393e:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    3940:	ldr	r3, [pc, #236]	; (3a30 <usb_isr+0x2e0>)
    3942:	ldrh	r2, [r3, #0]
    3944:	cmp.w	r2, #1280	; 0x500
    3948:	bne.n	396a <usb_isr+0x21a>
			setup.bRequest = 0;
    394a:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    394c:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    394e:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3950:	ldr	r3, [pc, #248]	; (3a4c <usb_isr+0x2fc>)
    3952:	strb	r2, [r3, #0]
    3954:	b.n	396a <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    3956:	ldr	r2, [pc, #216]	; (3a30 <usb_isr+0x2e0>)
    3958:	ldrh	r0, [r2, #0]
    395a:	movw	r2, #8225	; 0x2021
    395e:	cmp	r0, r2
    3960:	beq.w	3ab4 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3964:	ldr	r2, [pc, #180]	; (3a1c <usb_isr+0x2cc>)
    3966:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    396a:	ldr	r2, [pc, #228]	; (3a50 <usb_isr+0x300>)
    396c:	movs	r3, #1
    396e:	strb	r3, [r2, #0]
    3970:	b.n	37e4 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3972:	ldr	r2, [pc, #168]	; (3a1c <usb_isr+0x2cc>)
    3974:	ldr	r3, [pc, #168]	; (3a20 <usb_isr+0x2d0>)
    3976:	tst.w	r9, #8
    397a:	it	ne
    397c:	movne	r3, r2
    397e:	str.w	r3, [r7, r8, lsl #3]
    3982:	b.n	37e4 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    3984:	bl	3530 <usb_free>
				packet = tx_first[endpoint];
    3988:	ldr	r2, [pc, #200]	; (3a54 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    398a:	ldr	r1, [pc, #204]	; (3a58 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    398c:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    3990:	cmp	r3, #0
    3992:	beq.w	3c1c <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    3996:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    3998:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    399a:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    399e:	add.w	r2, r3, #8
    39a2:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    39a6:	cmp	r4, #3
    39a8:	bhi.n	39b6 <usb_isr+0x266>
    39aa:	tbb	[pc, r4]
    39ae:	.short	0x022c
    39b0:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    39b2:	movs	r2, #2
    39b4:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    39b6:	ldrh	r2, [r3, #0]
    39b8:	tst.w	r9, #8
    39bc:	ite	eq
    39be:	moveq	r3, #136	; 0x88
    39c0:	movne	r3, #200	; 0xc8
    39c2:	orr.w	r3, r3, r2, lsl #16
    39c6:	str.w	r3, [r7, r8, lsl #3]
    39ca:	b.n	37e4 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    39cc:	lsls	r0, r4, #31
    39ce:	bmi.w	3bb8 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    39d2:	lsls	r1, r4, #24
    39d4:	bmi.w	3c38 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    39d8:	lsls	r2, r4, #30
    39da:	bpl.n	39ea <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    39dc:	ldr	r2, [pc, #124]	; (3a5c <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    39de:	ldr	r1, [pc, #128]	; (3a60 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    39e0:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    39e2:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    39e4:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    39e6:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    39e8:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    39ea:	lsls	r3, r4, #27
    39ec:	bpl.n	39f4 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    39ee:	ldr	r3, [pc, #112]	; (3a60 <usb_isr+0x310>)
    39f0:	movs	r2, #16
    39f2:	strb	r2, [r3, #0]
	}

}
    39f4:	add	sp, #28
    39f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    39fa:	movs	r2, #4
    39fc:	strb	r2, [r1, r6]
						break;
    39fe:	b.n	39b6 <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    3a00:	movs	r2, #5
    3a02:	strb	r2, [r1, r6]
						break;
    3a04:	b.n	39b6 <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    3a06:	movs	r2, #3
    3a08:	strb	r2, [r1, r6]
						break;
    3a0a:	b.n	39b6 <usb_isr+0x266>
    3a0c:	.word	0x1fff0000
    3a10:	.word	0x1fff19cc
    3a14:	.word	0x1fff1974
    3a18:	.word	0x1fff1ef4
    3a1c:	.word	0x004000c8
    3a20:	.word	0x00400088
    3a24:	.word	0x1fff1a60
    3a28:	.word	0x1fff19e1
    3a2c:	.word	0x1fff18f4
    3a30:	.word	0x1fff1a4c
    3a34:	.word	0x1fff1970
    3a38:	.word	0x1fff19e0
    3a3c:	.word	0x400720c0
    3a40:	.word	0x1fff1a58
    3a44:	.word	0x1fff1988
    3a48:	.word	0x1fff1a54
    3a4c:	.word	0x40072098
    3a50:	.word	0x40072094
    3a54:	.word	0x1fff1a24
    3a58:	.word	0x1fff1a64
    3a5c:	.word	0x40072088
    3a60:	.word	0x40072080
    3a64:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3a68:	movw	r4, #8225	; 0x2021
    3a6c:	cmp	r1, r4
    3a6e:	beq.w	3baa <usb_isr+0x45a>
    3a72:	bhi.n	3b08 <usb_isr+0x3b8>
    3a74:	cmp.w	r1, #2176	; 0x880
    3a78:	beq.w	3d0e <usb_isr+0x5be>
    3a7c:	cmp.w	r1, #2304	; 0x900
    3a80:	bne.w	3c8e <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    3a84:	ldr	r2, [pc, #712]	; (3d50 <usb_isr+0x600>)
    3a86:	ldr	r4, [pc, #716]	; (3d54 <usb_isr+0x604>)
    3a88:	ldrb	r1, [r5, #2]
    3a8a:	strb	r1, [r2, #0]
    3a8c:	add.w	r5, r4, #160	; 0xa0
    3a90:	b.n	3a9a <usb_isr+0x34a>
    3a92:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3a94:	cmp	r5, r4
    3a96:	beq.w	3dac <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    3a9a:	ldr	r3, [r4, #32]
    3a9c:	lsls	r1, r3, #24
    3a9e:	bpl.n	3a92 <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    3aa0:	ldr	r0, [r4, #36]	; 0x24
    3aa2:	subs	r0, #8
    3aa4:	bl	3530 <usb_free>
    3aa8:	b.n	3a92 <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3aaa:	cmp.w	lr, #64	; 0x40
    3aae:	it	ne
    3ab0:	movne	r2, #0
    3ab2:	b.n	393e <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3ab4:	ldr	r2, [pc, #672]	; (3d58 <usb_isr+0x608>)
    3ab6:	ldrb	r5, [r1, #0]
    3ab8:	ldrb	r0, [r1, #1]
    3aba:	strb	r5, [r2, #0]
    3abc:	strb	r0, [r2, #1]
    3abe:	ldrb	r5, [r1, #2]
    3ac0:	ldrb	r0, [r1, #3]
    3ac2:	strb	r5, [r2, #2]
    3ac4:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3ac6:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3ac8:	ldrb	r5, [r1, #4]
    3aca:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3acc:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3ace:	ldrb	r5, [r1, #5]
    3ad0:	ldrb	r1, [r1, #6]
    3ad2:	strb	r5, [r2, #5]
    3ad4:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3ad6:	beq.w	3d06 <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3ada:	ldr	r1, [pc, #640]	; (3d5c <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3adc:	ldr	r6, [pc, #640]	; (3d60 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3ade:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3ae0:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3ae2:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3ae6:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3ae8:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3aec:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3aee:	ite	eq
    3af0:	moveq	r1, #136	; 0x88
    3af2:	movne	r1, #200	; 0xc8
    3af4:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3af8:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3afc:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b00:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3b02:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b04:	str	r1, [r2, #4]
    3b06:	b.n	3964 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3b08:	movw	r4, #8737	; 0x2221
    3b0c:	cmp	r1, r4
    3b0e:	bne.w	3f22 <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3b12:	ldr.w	ip, [pc, #656]	; 3da4 <usb_isr+0x654>
    3b16:	ldr	r3, [pc, #588]	; (3d64 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    3b18:	ldr	r1, [pc, #588]	; (3d68 <usb_isr+0x618>)
    3b1a:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3b1c:	ldr.w	r5, [ip]
    3b20:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    3b22:	str	r0, [sp, #4]
    3b24:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3b26:	movs	r0, #0
    3b28:	str	r0, [sp, #8]
    3b2a:	mov	r8, r0
    3b2c:	mov	ip, r0
    3b2e:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b30:	ldr	r1, [pc, #552]	; (3d5c <usb_isr+0x60c>)
    3b32:	ldrb	r5, [r1, #0]
    3b34:	orr.w	lr, r5, #2
    3b38:	add.w	r3, r9, lr, lsl #3
    3b3c:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b3e:	ldr	r3, [sp, #4]
    3b40:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b42:	ldr	r3, [sp, #12]
    3b44:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b46:	ite	eq
    3b48:	moveq	r4, #136	; 0x88
    3b4a:	movne	r4, #200	; 0xc8
    3b4c:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3b50:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b54:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    3b58:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3b5a:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b5c:	ldr.w	lr, [pc, #500]	; 3d54 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    3b60:	ldr	r3, [pc, #508]	; (3d60 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    3b62:	ldr.w	r8, [pc, #504]	; 3d5c <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3b66:	cmp	r0, #0
    3b68:	bne.w	3c9c <usb_isr+0x54c>
    3b6c:	cmp.w	ip, #64	; 0x40
    3b70:	bne.n	3baa <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b72:	orr.w	ip, r4, #2
    3b76:	add.w	r3, r9, ip, lsl #3
    3b7a:	ldr	r4, [sp, #8]
    3b7c:	ldr.w	lr, [pc, #468]	; 3d54 <usb_isr+0x604>
    3b80:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b82:	cmp	r2, #0
    3b84:	bne.w	3cc8 <usb_isr+0x578>
    3b88:	lsls	r2, r0, #16
    3b8a:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    3b8e:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b92:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3b96:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3b98:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3b9a:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3b9c:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3b9e:	cmp	r0, #64	; 0x40
    3ba0:	bne.n	3baa <usb_isr+0x45a>
    3ba2:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3ba4:	ldr	r2, [pc, #452]	; (3d6c <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    3ba6:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    3ba8:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3baa:	ldr	r2, [pc, #452]	; (3d70 <usb_isr+0x620>)
    3bac:	movs	r3, #1
    3bae:	strb	r3, [r2, #0]
    3bb0:	b.n	396a <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    3bb2:	bl	2910 <usb_serial_flush_callback>
    3bb6:	b.n	3824 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3bb8:	ldr	r3, [pc, #408]	; (3d54 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3bba:	ldr	r0, [pc, #436]	; (3d70 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    3bbc:	ldr	r1, [pc, #412]	; (3d5c <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    3bbe:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3bc0:	mov.w	lr, #2
    3bc4:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3bc8:	ldr	r7, [pc, #424]	; (3d74 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    3bca:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3bcc:	ldr	r1, [pc, #424]	; (3d78 <usb_isr+0x628>)
    3bce:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3bd0:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3bd2:	ldr	r6, [pc, #424]	; (3d7c <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    3bd4:	ldr	r5, [pc, #424]	; (3d80 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3bd6:	ldr	r4, [pc, #428]	; (3d84 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3bd8:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3bda:	movs	r1, #13
    3bdc:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3bde:	movs	r1, #255	; 0xff
    3be0:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3be2:	ldr.w	lr, [pc, #452]	; 3da8 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    3be6:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3be8:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3bea:	ldr	r5, [pc, #412]	; (3d88 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3bec:	ldr	r2, [pc, #412]	; (3d8c <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3bee:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3bf2:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3bf4:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3bf6:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3bfa:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3bfc:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3bfe:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    3c00:	add	sp, #28
    3c02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    3c06:	ldr	r2, [pc, #392]	; (3d90 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    3c08:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    3c0c:	ldrb	r3, [r2, #0]
    3c0e:	adds	r3, #1
    3c10:	strb	r3, [r2, #0]
    3c12:	b.n	37e4 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3c14:	str.w	r0, [r3, r6, lsl #2]
    3c18:	ldr	r5, [pc, #376]	; (3d94 <usb_isr+0x644>)
    3c1a:	b.n	37b2 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3c1c:	ldrb	r3, [r1, r6]
    3c1e:	cmp	r3, #3
    3c20:	bhi.n	3cf8 <usb_isr+0x5a8>
    3c22:	add	r2, pc, #4	; (adr r2, 3c28 <usb_isr+0x4d8>)
    3c24:	ldr.w	pc, [r2, r3, lsl #2]
    3c28:	.word	0x000037e5
    3c2c:	.word	0x000037e5
    3c30:	.word	0x00003c7d
    3c34:	.word	0x00003c77
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3c38:	ldr	r1, [pc, #312]	; (3d74 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    3c3a:	ldr	r3, [pc, #324]	; (3d80 <usb_isr+0x630>)
    3c3c:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3c3e:	movs	r0, #13
    3c40:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    3c42:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3c44:	lsls	r2, r4, #30
    3c46:	bpl.w	39ea <usb_isr+0x29a>
    3c4a:	b.n	39dc <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3c4c:	movw	r2, #770	; 0x302
    3c50:	cmp	r1, r2
    3c52:	bne.w	3f12 <usb_isr+0x7c2>
    3c56:	ldrh	r1, [r5, #4]
    3c58:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3c5c:	cmp	r1, #5
    3c5e:	bhi.n	3c8e <usb_isr+0x53e>
    3c60:	ldrh	r2, [r5, #2]
    3c62:	cbnz	r2, 3c8e <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    3c64:	ldr	r4, [pc, #268]	; (3d74 <usb_isr+0x624>)
    3c66:	str	r0, [sp, #4]
    3c68:	lsls	r1, r1, #2
    3c6a:	add	r4, r1
    3c6c:	ldrb	r1, [r4, #0]
    3c6e:	orr.w	r1, r1, #2
    3c72:	strb	r1, [r4, #0]
    3c74:	b.n	3b26 <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3c76:	movs	r3, #1
    3c78:	strb	r3, [r1, r6]
						break;
    3c7a:	b.n	37e4 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3c7c:	movs	r3, #0
    3c7e:	strb	r3, [r1, r6]
						break;
    3c80:	b.n	37e4 <usb_isr+0x94>
    3c82:	ldrh	r1, [r5, #4]
    3c84:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3c88:	cmp	r1, #5
    3c8a:	bls.w	3f2c <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3c8e:	ldr	r2, [pc, #228]	; (3d74 <usb_isr+0x624>)
    3c90:	movs	r3, #15
    3c92:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3c94:	ldr	r2, [pc, #216]	; (3d70 <usb_isr+0x620>)
    3c96:	movs	r3, #1
    3c98:	strb	r3, [r2, #0]
    3c9a:	b.n	396a <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    3c9c:	cmp	r0, #64	; 0x40
    3c9e:	bls.w	3b72 <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3ca2:	orr.w	r4, r4, #2
    3ca6:	add.w	r1, lr, r4, lsl #3
    3caa:	ldr	r6, [sp, #8]
    3cac:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3cae:	cbz	r2, 3ce0 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    3cb0:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3cb4:	ldr	r2, [pc, #224]	; (3d98 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    3cb6:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3cb8:	mov	r3, r6
    3cba:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3cbc:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3cc0:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3cc2:	str.w	r2, [lr, r4, lsl #3]
    3cc6:	b.n	3ba4 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    3cc8:	ldrb.w	r3, [sp, #4]
    3ccc:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3cce:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3cd0:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3cd2:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3cd4:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3cd8:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3cda:	str.w	r2, [lr, ip, lsl #3]
    3cde:	b.n	3b9e <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    3ce0:	ldrb.w	r1, [sp, #4]
    3ce4:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3ce6:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3ce8:	ldr	r2, [pc, #140]	; (3d78 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3cea:	strb.w	r5, [r8]
    3cee:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3cf0:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3cf2:	str.w	r2, [lr, r4, lsl #3]
    3cf6:	b.n	3ba4 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3cf8:	tst.w	r9, #8
    3cfc:	ite	eq
    3cfe:	moveq	r3, #2
    3d00:	movne	r3, #3
    3d02:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3d04:	b.n	37e4 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3d06:	ldr	r2, [pc, #148]	; (3d9c <usb_isr+0x64c>)
    3d08:	movs	r1, #15
    3d0a:	strb	r1, [r2, #0]
    3d0c:	b.n	3ada <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3d0e:	ldr	r2, [pc, #64]	; (3d50 <usb_isr+0x600>)
    3d10:	ldr	r4, [pc, #140]	; (3da0 <usb_isr+0x650>)
    3d12:	ldrb	r2, [r2, #0]
    3d14:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3d16:	ldrh	r2, [r5, #6]
    3d18:	cmp	r2, r0
    3d1a:	bcs.w	40e0 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3d1e:	ldr	r1, [pc, #60]	; (3d5c <usb_isr+0x60c>)
    3d20:	ldrb	r5, [r1, #0]
    3d22:	cmp	r2, #64	; 0x40
    3d24:	mov	ip, r2
    3d26:	orr.w	lr, r5, #2
    3d2a:	it	cs
    3d2c:	movcs.w	ip, #64	; 0x40
    3d30:	add.w	r3, r4, ip
    3d34:	add.w	r0, r9, lr, lsl #3
    3d38:	str	r3, [sp, #8]
    3d3a:	movs	r3, #1
    3d3c:	str	r4, [r0, #4]
    3d3e:	mov.w	r8, ip, lsl #16
    3d42:	rsb	r0, ip, r2
    3d46:	str	r3, [sp, #4]
    3d48:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3d4a:	movs	r4, #200	; 0xc8
    3d4c:	b.n	3b4c <usb_isr+0x3fc>
    3d4e:	nop
    3d50:	.word	0x1fff1a60
    3d54:	.word	0x1fff0000
    3d58:	.word	0x1fff1dbc
    3d5c:	.word	0x1fff1a54
    3d60:	.word	0x1fff19e0
    3d64:	.word	0x1fff1dc4
    3d68:	.word	0x1fff1904
    3d6c:	.word	0x1fff1988
    3d70:	.word	0x40072094
    3d74:	.word	0x400720c0
    3d78:	.word	0x00400088
    3d7c:	.word	0x40072088
    3d80:	.word	0x40072080
    3d84:	.word	0x40072098
    3d88:	.word	0x1fff198c
    3d8c:	.word	0x1fff19e4
    3d90:	.word	0x1fff1a55
    3d94:	.word	0x1fff1974
    3d98:	.word	0x004000c8
    3d9c:	.word	0x1fff19e1
    3da0:	.word	0x1fff1a58
    3da4:	.word	0x1fff190c
    3da8:	.word	0x4007208c
    3dac:	ldr	r4, [pc, #704]	; (4070 <usb_isr+0x920>)
    3dae:	ldr	r2, [pc, #708]	; (4074 <usb_isr+0x924>)
    3db0:	ldr	r1, [pc, #708]	; (4078 <usb_isr+0x928>)
    3db2:	ldr	r0, [pc, #712]	; (407c <usb_isr+0x92c>)
    3db4:	ldr	r5, [pc, #712]	; (4080 <usb_isr+0x930>)
    3db6:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3db8:	movs	r3, #0
    3dba:	ldr	r4, [pc, #712]	; (4084 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3dbc:	str	r4, [sp, #8]
    3dbe:	str	r6, [sp, #20]
    3dc0:	str	r5, [sp, #12]
    3dc2:	mov	r8, r0
    3dc4:	mov	r4, r3
    3dc6:	str	r7, [sp, #16]
    3dc8:	mov	r6, r2
    3dca:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3dcc:	ldr	r0, [r6, #0]
			while (p) {
    3dce:	cbz	r0, 3ddc <usb_isr+0x68c>
				n = p->next;
    3dd0:	ldr	r7, [r0, #4]
				usb_free(p);
    3dd2:	bl	3530 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    3dd6:	mov	r0, r7
    3dd8:	cmp	r7, #0
    3dda:	bne.n	3dd0 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3ddc:	movs	r3, #0
    3dde:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3de0:	ldr	r3, [sp, #12]
			p = tx_first[i];
    3de2:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3de4:	mov	r2, r3
    3de6:	movs	r3, #0
    3de8:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    3dec:	cbz	r0, 3dfa <usb_isr+0x6aa>
				n = p->next;
    3dee:	ldr	r7, [r0, #4]
				usb_free(p);
    3df0:	bl	3530 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3df4:	mov	r0, r7
    3df6:	cmp	r7, #0
    3df8:	bne.n	3dee <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3dfa:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3dfc:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3dfe:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3e00:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    3e02:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    3e06:	ldr	r2, [sp, #8]
    3e08:	mov.w	r1, #0
			switch (tx_state[i]) {
    3e0c:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    3e0e:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    3e12:	cmp	r3, #3
    3e14:	bhi.n	3e26 <usb_isr+0x6d6>
    3e16:	tbb	[pc, r3]
    3e1a:	.short	0x0258
    3e1c:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3e1e:	ldr	r3, [sp, #4]
    3e20:	mov.w	r2, #1
    3e24:	strb	r2, [r3, #0]
    3e26:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3e28:	adds	r4, #1
    3e2a:	adds	r3, #1
    3e2c:	cmp	r4, #5
    3e2e:	add.w	r6, r6, #4
    3e32:	add.w	r5, r5, #4
    3e36:	str	r3, [sp, #4]
    3e38:	bne.n	3dcc <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3e3a:	ldr	r4, [pc, #588]	; (4088 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3e3c:	ldr	r5, [pc, #588]	; (408c <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3e3e:	ldrb	r2, [r4, #0]
			*reg = epconf;
    3e40:	ldr	r3, [pc, #588]	; (4090 <usb_isr+0x940>)
    3e42:	ldr	r7, [sp, #16]
    3e44:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3e46:	movs	r1, #0
    3e48:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3e4a:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3e4c:	lsls	r2, r2, #28
    3e4e:	bmi.n	3f46 <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3e50:	ldrb	r2, [r4, #1]
			*reg = epconf;
    3e52:	ldr	r1, [pc, #576]	; (4094 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3e54:	ldr.w	r8, [pc, #588]	; 40a4 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3e58:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3e5a:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3e5c:	mov.w	r1, #0
    3e60:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    3e64:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3e68:	bmi.w	3ff2 <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3e6c:	ldrb	r2, [r4, #2]
			*reg = epconf;
    3e6e:	ldr	r1, [pc, #552]	; (4098 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3e70:	ldr.w	r8, [pc, #560]	; 40a4 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3e74:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3e76:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3e78:	mov.w	r1, #0
    3e7c:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    3e80:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3e84:	bmi.w	3fca <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3e88:	ldr	r1, [pc, #528]	; (409c <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3e8a:	ldrb	r2, [r4, #3]
			*reg = epconf;
    3e8c:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3e8e:	movs	r1, #0
    3e90:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3e94:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3e98:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3e9a:	ldr.w	r8, [pc, #520]	; 40a4 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3e9e:	bmi.n	3f9c <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3ea0:	ldrb	r2, [r4, #4]
			*reg = epconf;
    3ea2:	ldr	r1, [pc, #508]	; (40a0 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3ea4:	ldr	r4, [pc, #508]	; (40a4 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3ea6:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3ea8:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3eaa:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3eac:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3eb0:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3eb4:	bmi.n	3f72 <usb_isr+0x822>
    3eb6:	ldrb	r3, [r6, #0]
    3eb8:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3eba:	movs	r1, #0
    3ebc:	eor.w	r2, r3, #1
    3ec0:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3ec4:	str.w	r1, [r9, #184]	; 0xb8
    3ec8:	b.n	3b26 <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3eca:	ldr	r3, [sp, #4]
    3ecc:	mov.w	r2, #0
    3ed0:	strb	r2, [r3, #0]
    3ed2:	b.n	3e26 <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3ed4:	ldr	r2, [pc, #464]	; (40a8 <usb_isr+0x958>)
    3ed6:	ldr	r4, [r2, #4]
    3ed8:	cmp	r4, #0
    3eda:	beq.w	3c8e <usb_isr+0x53e>
    3ede:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3ee0:	ldrh.w	lr, [r5, #4]
    3ee4:	b.n	3ef0 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3ee6:	adds	r2, #12
			if (list->addr == NULL) break;
    3ee8:	ldr	r4, [r2, #4]
    3eea:	cmp	r4, #0
    3eec:	beq.w	3c8e <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3ef0:	ldrh	r3, [r2, #0]
    3ef2:	cmp	r3, r0
    3ef4:	bne.n	3ee6 <usb_isr+0x796>
    3ef6:	ldrh	r3, [r2, #2]
    3ef8:	cmp	r3, lr
    3efa:	bne.n	3ee6 <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3efc:	lsrs	r0, r0, #8
    3efe:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3f00:	ite	eq
    3f02:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    3f04:	ldrhne	r0, [r2, #8]
    3f06:	b.n	3d16 <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3f08:	ldr	r4, [pc, #416]	; (40ac <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    3f0a:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3f0c:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3f0e:	strb	r2, [r4, #1]
    3f10:	b.n	3d16 <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3f12:	cmp.w	r1, #1280	; 0x500
    3f16:	bne.w	3c8e <usb_isr+0x53e>
    3f1a:	movs	r3, #1
    3f1c:	movs	r2, #0
    3f1e:	str	r3, [sp, #4]
    3f20:	b.n	3b26 <usb_isr+0x3d6>
    3f22:	movw	r2, #8993	; 0x2321
    3f26:	cmp	r1, r2
    3f28:	beq.n	3f1a <usb_isr+0x7ca>
    3f2a:	b.n	3c8e <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3f2c:	ldrh	r2, [r5, #2]
    3f2e:	cmp	r2, #0
    3f30:	bne.w	3c8e <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3f34:	ldr	r4, [pc, #376]	; (40b0 <usb_isr+0x960>)
    3f36:	str	r0, [sp, #4]
    3f38:	lsls	r1, r1, #2
    3f3a:	add	r4, r1
    3f3c:	ldrb	r1, [r4, #0]
    3f3e:	bic.w	r1, r1, #2
    3f42:	strb	r1, [r4, #0]
    3f44:	b.n	3b26 <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3f46:	bl	34f0 <usb_malloc>
				if (p) {
    3f4a:	cmp	r0, #0
    3f4c:	beq.w	40bc <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    3f50:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f52:	ldr	r2, [pc, #352]	; (40b4 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3f54:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f58:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3f5c:	bl	34f0 <usb_malloc>
				if (p) {
    3f60:	cmp	r0, #0
    3f62:	beq.n	4064 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    3f64:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f66:	ldr	r2, [pc, #336]	; (40b8 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3f68:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f6c:	str.w	r2, [r9, #40]	; 0x28
    3f70:	b.n	3e50 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3f72:	bl	34f0 <usb_malloc>
				if (p) {
    3f76:	cmp	r0, #0
    3f78:	beq.n	4028 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    3f7a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f7c:	ldr	r2, [pc, #308]	; (40b4 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3f7e:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f82:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3f86:	bl	34f0 <usb_malloc>
				if (p) {
    3f8a:	cmp	r0, #0
    3f8c:	beq.n	401c <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    3f8e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f90:	ldr	r2, [pc, #292]	; (40b8 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3f92:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f96:	str.w	r2, [r9, #168]	; 0xa8
    3f9a:	b.n	3eb6 <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3f9c:	bl	34f0 <usb_malloc>
				if (p) {
    3fa0:	cmp	r0, #0
    3fa2:	beq.w	40d4 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    3fa6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3fa8:	ldr	r2, [pc, #264]	; (40b4 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3faa:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3fae:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3fb2:	bl	34f0 <usb_malloc>
				if (p) {
    3fb6:	cmp	r0, #0
    3fb8:	beq.w	40c8 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    3fbc:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3fbe:	ldr	r2, [pc, #248]	; (40b8 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3fc0:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3fc4:	str.w	r2, [r9, #136]	; 0x88
    3fc8:	b.n	3ea0 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3fca:	bl	34f0 <usb_malloc>
				if (p) {
    3fce:	cmp	r0, #0
    3fd0:	beq.n	4058 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    3fd2:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3fd4:	ldr	r2, [pc, #220]	; (40b4 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3fd6:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3fda:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3fde:	bl	34f0 <usb_malloc>
				if (p) {
    3fe2:	cbz	r0, 404c <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3fe4:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3fe6:	ldr	r2, [pc, #208]	; (40b8 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3fe8:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3fec:	str.w	r2, [r9, #104]	; 0x68
    3ff0:	b.n	3e88 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3ff2:	bl	34f0 <usb_malloc>
				if (p) {
    3ff6:	cbz	r0, 4040 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3ff8:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3ffa:	ldr	r2, [pc, #184]	; (40b4 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3ffc:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4000:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    4004:	bl	34f0 <usb_malloc>
				if (p) {
    4008:	cbz	r0, 4034 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    400a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    400c:	ldr	r2, [pc, #168]	; (40b8 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    400e:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4012:	str.w	r2, [r9, #72]	; 0x48
    4016:	b.n	3e6c <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    4018:	movs	r0, #2
    401a:	b.n	3d16 <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    401c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    401e:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    4022:	adds	r2, #1
    4024:	strb	r2, [r5, #0]
    4026:	b.n	3eb6 <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    4028:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    402a:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    402e:	adds	r2, #1
    4030:	strb	r2, [r5, #0]
    4032:	b.n	3f86 <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    4034:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    4036:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    403a:	adds	r2, #1
    403c:	strb	r2, [r5, #0]
    403e:	b.n	3e6c <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    4040:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    4042:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    4046:	adds	r2, #1
    4048:	strb	r2, [r5, #0]
    404a:	b.n	4004 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    404c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    404e:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    4052:	adds	r2, #1
    4054:	strb	r2, [r5, #0]
    4056:	b.n	3e88 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    4058:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    405a:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    405e:	adds	r2, #1
    4060:	strb	r2, [r5, #0]
    4062:	b.n	3fde <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    4064:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    4066:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    406a:	adds	r2, #1
    406c:	strb	r2, [r5, #0]
    406e:	b.n	3e50 <usb_isr+0x700>
    4070:	.word	0x1fff1a64
    4074:	.word	0x1fff19cc
    4078:	.word	0x1fff1a24
    407c:	.word	0x1fff1a38
    4080:	.word	0x1fff1974
    4084:	.word	0x1fff1ef4
    4088:	.word	0x00005a18
    408c:	.word	0x1fff1a55
    4090:	.word	0x400720c4
    4094:	.word	0x400720c8
    4098:	.word	0x400720cc
    409c:	.word	0x400720d0
    40a0:	.word	0x400720d4
    40a4:	.word	0x1fff0000
    40a8:	.word	0x00005a20
    40ac:	.word	0x1fff1a58
    40b0:	.word	0x400720c0
    40b4:	.word	0x00400088
    40b8:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    40bc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    40be:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    40c2:	adds	r2, #1
    40c4:	strb	r2, [r5, #0]
    40c6:	b.n	3f5c <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    40c8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    40ca:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    40ce:	adds	r2, #1
    40d0:	strb	r2, [r5, #0]
    40d2:	b.n	3ea0 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    40d4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    40d6:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    40da:	adds	r2, #1
    40dc:	strb	r2, [r5, #0]
    40de:	b.n	3fb2 <usb_isr+0x862>
    40e0:	cmp	r0, #64	; 0x40
    40e2:	mov	ip, r0
    40e4:	it	cs
    40e6:	movcs.w	ip, #64	; 0x40
    40ea:	add.w	r3, r4, ip
    40ee:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    40f0:	movs	r3, #1
    40f2:	rsb	r0, ip, r0
    40f6:	mov.w	r8, ip, lsl #16
    40fa:	movs	r2, #0
    40fc:	str	r3, [sp, #4]
    40fe:	b.n	3b30 <usb_isr+0x3e0>

00004100 <usb_init>:
}



void usb_init(void)
{
    4100:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4104:	ldr	r4, [pc, #156]	; (41a4 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    4106:	bl	49d4 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    410a:	movs	r2, #0
    410c:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    4110:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4112:	str	r2, [r3, #0]
		table[i].addr = 0;
    4114:	str	r2, [r3, #4]
    4116:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    4118:	cmp	r3, r0
		table[i].desc = 0;
    411a:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    411e:	bne.n	4112 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4120:	ldr	r0, [pc, #132]	; (41a8 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    4122:	ldr	r2, [pc, #136]	; (41ac <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4124:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    4126:	ldr.w	lr, [pc, #156]	; 41c4 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    412a:	ldr	r6, [pc, #132]	; (41b0 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    412c:	ldr	r5, [pc, #132]	; (41b4 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    412e:	ldr	r7, [pc, #136]	; (41b8 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    4130:	ldr.w	ip, [pc, #148]	; 41c8 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    4134:	ldr.w	r8, [pc, #148]	; 41cc <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4138:	orr.w	r3, r3, #262144	; 0x40000
    413c:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    413e:	ldr	r3, [r2, #0]
    4140:	orr.w	r3, r3, #50331648	; 0x3000000
    4144:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    4146:	movs	r3, #3
    4148:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    414c:	movs	r3, #160	; 0xa0
    414e:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    4150:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    4154:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    4158:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    415c:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    415e:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    4160:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    4164:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    4166:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    4168:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    416a:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    416c:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    416e:	ldr	r5, [pc, #76]	; (41bc <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    4170:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    4174:	ldr	r0, [pc, #72]	; (41c0 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    4176:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    417a:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    417c:	movs	r3, #1
    417e:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    4182:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    4186:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    418a:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    418c:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    418e:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    4192:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    4194:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    4196:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    419a:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    419e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41a2:	nop
    41a4:	.word	0x1fff0000
    41a8:	.word	0x40048034
    41ac:	.word	0x4000d800
    41b0:	.word	0x40072140
    41b4:	.word	0x4007209c
    41b8:	.word	0x400720b0
    41bc:	.word	0xe000e435
    41c0:	.word	0xe000e104
    41c4:	.word	0x40072144
    41c8:	.word	0x40072080
    41cc:	.word	0x40072088

000041d0 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    41d0:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    41d2:	ldr	r4, [pc, #176]	; (4284 <yield+0xb4>)
    41d4:	ldrb	r3, [r4, #0]
    41d6:	cbz	r3, 41da <yield+0xa>
    41d8:	pop	{r3, r4, r5, pc}
	running = 1;
    41da:	movs	r3, #1
    41dc:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    41de:	bl	26fc <usb_serial_available>
	if (Serial.available()) serialEvent();
    41e2:	cmp	r0, #0
    41e4:	bne.n	426c <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    41e6:	bl	47a4 <serial_available>
	if (Serial1.available()) serialEvent1();
    41ea:	cmp	r0, #0
    41ec:	bne.n	4266 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    41ee:	bl	448c <serial2_available>
	if (Serial2.available()) serialEvent2();
    41f2:	cmp	r0, #0
    41f4:	bne.n	4260 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    41f6:	bl	4aa4 <serial3_available>
	if (Serial3.available()) serialEvent3();
    41fa:	cbnz	r0, 425a <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    41fc:	bl	45b8 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    4200:	cbnz	r0, 4254 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    4202:	bl	4394 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    4206:	cbnz	r0, 424e <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    4208:	bl	48d0 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    420c:	cbnz	r0, 4248 <yield+0x78>
#endif
	running = 0;
    420e:	movs	r3, #0
    4210:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    4212:	mrs	r3, IPSR
		if (ipsr != 0) return;
    4216:	cmp	r3, #0
    4218:	bne.n	41d8 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    421a:	mrs	r1, PRIMASK
		__disable_irq();
    421e:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    4220:	ldr	r3, [pc, #100]	; (4288 <yield+0xb8>)
    4222:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    4224:	cbz	r0, 4272 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    4226:	ldr	r4, [pc, #100]	; (428c <yield+0xbc>)
    4228:	ldrb	r2, [r4, #0]
    422a:	cbnz	r2, 4272 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    422c:	ldr	r5, [r0, #20]
    422e:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    4230:	movs	r3, #1
    4232:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    4234:	cbz	r5, 427a <yield+0xaa>
			firstYield->_prev = nullptr;
    4236:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4238:	cbnz	r1, 423c <yield+0x6c>
    423a:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    423c:	movs	r5, #0
    423e:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    4240:	ldr	r3, [r0, #8]
    4242:	blx	r3
		runningFromYield = false;
    4244:	strb	r5, [r4, #0]
    4246:	b.n	41d8 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    4248:	bl	438c <serialEvent6()>
    424c:	b.n	420e <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    424e:	bl	4294 <serialEvent5()>
    4252:	b.n	4208 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    4254:	bl	4378 <serialEvent4()>
    4258:	b.n	4202 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    425a:	bl	4ba0 <serialEvent3()>
    425e:	b.n	41fc <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    4260:	bl	4374 <serialEvent2()>
    4264:	b.n	41f6 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    4266:	bl	4b9c <serialEvent1()>
    426a:	b.n	41ee <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    426c:	bl	42c0 <serialEvent()>
    4270:	b.n	41e6 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4272:	cmp	r1, #0
    4274:	bne.n	41d8 <yield+0x8>
    4276:	cpsie	i
    4278:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    427a:	ldr	r3, [pc, #20]	; (4290 <yield+0xc0>)
    427c:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    427e:	cmp	r1, #0
    4280:	bne.n	423c <yield+0x6c>
    4282:	b.n	423a <yield+0x6a>
    4284:	.word	0x1fff1a69
    4288:	.word	0x1fff1d7c
    428c:	.word	0x1fff1d80
    4290:	.word	0x1fff1d78

00004294 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    4294:	bx	lr
    4296:	nop

00004298 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    4298:	b.w	2718 <usb_serial_flush_input>

0000429c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    429c:	b.w	26cc <usb_serial_peekchar>

000042a0 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    42a0:	b.w	2684 <usb_serial_getchar>

000042a4 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    42a4:	b.w	26fc <usb_serial_available>

000042a8 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    42a8:	b.w	28b8 <usb_serial_flush_output>

000042ac <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    42ac:	b.w	2870 <usb_serial_write_buffer_free>

000042b0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    42b0:	mov	r0, r1
    42b2:	mov	r1, r2
    42b4:	b.w	2750 <usb_serial_write>

000042b8 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    42b8:	mov	r0, r1
    42ba:	b.w	2858 <usb_serial_putchar>
    42be:	nop

000042c0 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    42c0:	bx	lr
    42c2:	nop

000042c4 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    42c4:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    42c6:	ldr	r2, [pc, #24]	; (42e0 <Print::println()+0x1c>)
	return write(buf, 2);
    42c8:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    42ca:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    42cc:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    42ce:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    42d0:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    42d2:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    42d6:	movs	r2, #2
    42d8:	blx	r3
}
    42da:	add	sp, #12
    42dc:	ldr.w	pc, [sp], #4
    42e0:	.word	0x00005a14

000042e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    42e4:	push	{r4, r5, r6, r7, lr}
    42e6:	mov	r7, r0
    42e8:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    42ea:	cmp	r2, #0
    42ec:	beq.n	4356 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    42ee:	cmp	r2, #1
    42f0:	it	eq
    42f2:	moveq	r2, #10
	}


	if (n == 0) {
    42f4:	cbz	r1, 434c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    42f6:	movs	r4, #33	; 0x21
    42f8:	b.n	42fc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    42fa:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    42fc:	udiv	r5, r1, r2
    4300:	mls	r1, r2, r5, r1
    4304:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4306:	cmp	r1, #9
    4308:	add.w	r1, r0, #48	; 0x30
    430c:	it	ls
    430e:	uxtbls	r0, r1
    4310:	add	r1, sp, #40	; 0x28
    4312:	it	hi
    4314:	addhi	r0, #55	; 0x37
    4316:	add	r1, r4
    4318:	it	hi
    431a:	uxtbhi	r0, r0
    431c:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    4320:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    4322:	mov	r1, r5
    4324:	cmp	r5, #0
    4326:	bne.n	42fa <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    4328:	cbz	r3, 4338 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    432a:	subs	r4, #1
    432c:	uxtb	r4, r4
		buf[i] = '-';
    432e:	add	r3, sp, #40	; 0x28
    4330:	add	r3, r4
    4332:	movs	r2, #45	; 0x2d
    4334:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    4338:	ldr	r3, [r7, #0]
    433a:	add	r2, sp, #4
    433c:	adds	r1, r2, r4
    433e:	ldr	r3, [r3, #4]
    4340:	mov	r0, r7
    4342:	rsb	r2, r4, #34	; 0x22
    4346:	blx	r3
}
    4348:	add	sp, #44	; 0x2c
    434a:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    434c:	movs	r2, #48	; 0x30
    434e:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    4352:	movs	r4, #33	; 0x21
    4354:	b.n	4328 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    4356:	ldr	r3, [r0, #0]
    4358:	uxtb	r1, r1
    435a:	ldr	r3, [r3, #0]
    435c:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    435e:	add	sp, #44	; 0x2c
    4360:	pop	{r4, r5, r6, r7, pc}
    4362:	nop

00004364 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    4364:	cmp	r1, #0
		sign = '-';
		n = -n;
    4366:	itte	lt
    4368:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    436a:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    436c:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    436e:	movs	r2, #10
    4370:	b.w	42e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00004374 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    4374:	bx	lr
    4376:	nop

00004378 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    4378:	bx	lr
    437a:	nop

0000437c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    437c:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    437e:	bl	7cc <setup>
	while (1) {
		loop();
    4382:	bl	7d0 <loop>
		yield();
    4386:	bl	41d0 <yield>
    438a:	b.n	4382 <main+0x6>

0000438c <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    438c:	bx	lr
    438e:	nop

00004390 <operator new(unsigned int)>:
    4390:	b.w	4df4 <malloc>

00004394 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4394:	ldr	r2, [pc, #20]	; (43ac <serial5_available+0x18>)
	tail = rx_buffer_tail;
    4396:	ldr	r3, [pc, #24]	; (43b0 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4398:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    439a:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    439c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    439e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    43a0:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    43a2:	it	cc
    43a4:	addcc	r0, #64	; 0x40
    43a6:	subs	r0, r0, r3
}
    43a8:	bx	lr
    43aa:	nop
    43ac:	.word	0x1fff1a70
    43b0:	.word	0x1fff1a71

000043b4 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    43b4:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    43b6:	ldr	r3, [pc, #172]	; (4464 <uart4_status_isr+0xb0>)
    43b8:	ldrb	r2, [r3, #4]
    43ba:	lsls	r4, r2, #26
    43bc:	bpl.n	43fe <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    43be:	ldr	r0, [pc, #168]	; (4468 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    43c0:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    43c2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    43c4:	ldr	r1, [pc, #164]	; (446c <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    43c6:	adds	r3, #1
    43c8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    43ca:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    43cc:	it	gt
    43ce:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    43d0:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    43d2:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    43d4:	beq.n	43de <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    43d6:	ldr	r4, [pc, #152]	; (4470 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    43d8:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    43da:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    43dc:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    43de:	ldr	r2, [pc, #148]	; (4474 <uart4_status_isr+0xc0>)
    43e0:	ldr	r1, [r2, #0]
    43e2:	cbz	r1, 43fe <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    43e4:	ldr	r2, [pc, #144]	; (4478 <uart4_status_isr+0xc4>)
    43e6:	ldrb	r2, [r2, #0]
    43e8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    43ea:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    43ec:	itet	cc
    43ee:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    43f2:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    43f4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    43f6:	cmp	r3, #39	; 0x27
    43f8:	itt	gt
    43fa:	movgt	r3, #1
    43fc:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    43fe:	ldr	r2, [pc, #100]	; (4464 <uart4_status_isr+0xb0>)
    4400:	ldrb	r3, [r2, #3]
    4402:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    4404:	lsls	r0, r3, #24
    4406:	bmi.n	442c <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    4408:	lsls	r2, r3, #25
    440a:	bpl.n	4428 <uart4_status_isr+0x74>
    440c:	ldr	r3, [pc, #84]	; (4464 <uart4_status_isr+0xb0>)
    440e:	ldrb	r3, [r3, #4]
    4410:	lsls	r3, r3, #25
    4412:	bpl.n	4428 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4414:	ldr	r3, [pc, #100]	; (447c <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    4416:	ldr	r1, [pc, #104]	; (4480 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4418:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    441a:	movs	r2, #0
    441c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    441e:	cbz	r3, 4422 <uart4_status_isr+0x6e>
    4420:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    4422:	ldr	r3, [pc, #64]	; (4464 <uart4_status_isr+0xb0>)
    4424:	movs	r2, #44	; 0x2c
    4426:	strb	r2, [r3, #3]
	}
}
    4428:	pop	{r4, r5}
    442a:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    442c:	ldrb	r1, [r2, #4]
    442e:	lsls	r1, r1, #24
    4430:	bpl.n	4408 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    4432:	ldr	r1, [pc, #80]	; (4484 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    4434:	ldr	r0, [pc, #64]	; (4478 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4436:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4438:	ldrb	r1, [r0, #0]
    443a:	uxtb	r1, r1
		if (head == tail) {
    443c:	cmp	r4, r1
    443e:	beq.n	445c <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    4440:	adds	r2, r1, #1
    4442:	cmp	r2, #39	; 0x27
    4444:	itt	hi
    4446:	movhi	r1, #0
    4448:	movhi	r2, r1
			n = tx_buffer[tail];
    444a:	ldr	r5, [pc, #60]	; (4488 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    444c:	ldr	r4, [pc, #20]	; (4464 <uart4_status_isr+0xb0>)
    444e:	it	ls
    4450:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4452:	ldrb	r2, [r5, r2]
    4454:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    4456:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4458:	strb	r1, [r0, #0]
    445a:	b.n	4408 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    445c:	movs	r1, #108	; 0x6c
    445e:	strb	r1, [r2, #3]
    4460:	b.n	4408 <uart4_status_isr+0x54>
    4462:	nop
    4464:	.word	0x400ea000
    4468:	.word	0x1fff1a70
    446c:	.word	0x1fff1a71
    4470:	.word	0x1fff1a9c
    4474:	.word	0x1fff1a6c
    4478:	.word	0x1fff1add
    447c:	.word	0x1fff1ae0
    4480:	.word	0x1fff1adc
    4484:	.word	0x1fff1ae4
    4488:	.word	0x1fff1a74

0000448c <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    448c:	ldr	r2, [pc, #20]	; (44a4 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    448e:	ldr	r3, [pc, #24]	; (44a8 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4490:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4492:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4494:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4496:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4498:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    449a:	it	cc
    449c:	addcc	r0, #64	; 0x40
    449e:	subs	r0, r0, r3
}
    44a0:	bx	lr
    44a2:	nop
    44a4:	.word	0x1fff1b58
    44a8:	.word	0x1fff1aed

000044ac <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    44ac:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    44ae:	ldr	r3, [pc, #224]	; (4590 <uart1_status_isr+0xe4>)
    44b0:	ldrb	r2, [r3, #4]
    44b2:	tst.w	r2, #48	; 0x30
    44b6:	beq.n	4512 <uart1_status_isr+0x66>
		__disable_irq();
    44b8:	cpsid	i
		avail = UART1_RCFIFO;
    44ba:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    44bc:	and.w	r2, r1, #255	; 0xff
    44c0:	cmp	r1, #0
    44c2:	beq.n	4540 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    44c4:	cpsie	i
			head = rx_buffer_head;
    44c6:	ldr	r7, [pc, #204]	; (4594 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    44c8:	ldr	r1, [pc, #204]	; (4598 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    44ca:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    44cc:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    44ce:	ldr	r6, [pc, #204]	; (459c <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    44d0:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    44d2:	uxtb	r0, r0
			tail = rx_buffer_tail;
    44d4:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    44d6:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    44d8:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    44da:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    44dc:	it	cs
    44de:	movcs	r3, #0
				if (newhead != tail) {
    44e0:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    44e2:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    44e6:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    44e8:	itt	ne
    44ea:	strbne	r1, [r6, r3]
    44ec:	movne	r0, r3
				}
			} while (--avail > 0);
    44ee:	ands.w	r2, r2, #255	; 0xff
    44f2:	bne.n	44d6 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    44f4:	ldr	r3, [pc, #168]	; (45a0 <uart1_status_isr+0xf4>)
    44f6:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    44f8:	uxtb	r2, r0
    44fa:	strb	r2, [r7, #0]
			if (rts_pin) {
    44fc:	cbz	r3, 4512 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    44fe:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    4500:	itet	cc
    4502:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    4506:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    4508:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    450a:	cmp	r0, #39	; 0x27
    450c:	itt	gt
    450e:	movgt	r2, #1
    4510:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    4512:	ldr	r1, [pc, #124]	; (4590 <uart1_status_isr+0xe4>)
    4514:	ldrb	r2, [r1, #3]
    4516:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    4518:	lsls	r5, r2, #24
    451a:	bmi.n	454a <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    451c:	lsls	r2, r2, #25
    451e:	bpl.n	453c <uart1_status_isr+0x90>
    4520:	ldr	r3, [pc, #108]	; (4590 <uart1_status_isr+0xe4>)
    4522:	ldrb	r3, [r3, #4]
    4524:	lsls	r3, r3, #25
    4526:	bpl.n	453c <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4528:	ldr	r3, [pc, #120]	; (45a4 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    452a:	ldr	r1, [pc, #124]	; (45a8 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    452c:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    452e:	movs	r2, #0
    4530:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4532:	cbz	r3, 4536 <uart1_status_isr+0x8a>
    4534:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    4536:	ldr	r3, [pc, #88]	; (4590 <uart1_status_isr+0xe4>)
    4538:	movs	r2, #60	; 0x3c
    453a:	strb	r2, [r3, #3]
	}
}
    453c:	pop	{r4, r5, r6, r7}
    453e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    4540:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    4542:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    4544:	strb	r2, [r3, #17]
			__enable_irq();
    4546:	cpsie	i
    4548:	b.n	4512 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    454a:	ldrb	r3, [r1, #4]
    454c:	lsls	r4, r3, #24
    454e:	bpl.n	451c <uart1_status_isr+0x70>
		head = tx_buffer_head;
    4550:	ldr	r3, [pc, #88]	; (45ac <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    4552:	ldr	r6, [pc, #92]	; (45b0 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4554:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    4556:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4558:	uxtb	r4, r4
		tail = tx_buffer_tail;
    455a:	uxtb	r3, r3
		do {
			if (tail == head) break;
    455c:	cmp	r4, r3
    455e:	beq.n	457e <uart1_status_isr+0xd2>
    4560:	ldr	r5, [pc, #80]	; (45b4 <uart1_status_isr+0x108>)
    4562:	b.n	4568 <uart1_status_isr+0xbc>
    4564:	cmp	r3, r4
    4566:	beq.n	457e <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    4568:	adds	r3, #1
    456a:	cmp	r3, #40	; 0x28
    456c:	it	cs
    456e:	movcs	r3, #0
			avail = UART1_S1;
    4570:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    4572:	ldrb	r0, [r5, r3]
    4574:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    4576:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    4578:	ldrb	r0, [r1, #20]
    457a:	cmp	r0, #7
    457c:	bls.n	4564 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    457e:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    4580:	ldr	r1, [pc, #12]	; (4590 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    4582:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    4584:	ldrb	r3, [r1, #4]
    4586:	lsls	r0, r3, #24
    4588:	itt	mi
    458a:	movmi	r3, #124	; 0x7c
    458c:	strbmi	r3, [r1, #3]
    458e:	b.n	451c <uart1_status_isr+0x70>
    4590:	.word	0x4006b000
    4594:	.word	0x1fff1b58
    4598:	.word	0x1fff1aed
    459c:	.word	0x1fff1b18
    45a0:	.word	0x1fff1ae8
    45a4:	.word	0x1fff1b5c
    45a8:	.word	0x1fff1aec
    45ac:	.word	0x1fff1b60
    45b0:	.word	0x1fff1b59
    45b4:	.word	0x1fff1af0

000045b8 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    45b8:	ldr	r2, [pc, #20]	; (45d0 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    45ba:	ldr	r3, [pc, #24]	; (45d4 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    45bc:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    45be:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    45c0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    45c2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    45c4:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    45c6:	it	cc
    45c8:	addcc	r0, #64	; 0x40
    45ca:	subs	r0, r0, r3
}
    45cc:	bx	lr
    45ce:	nop
    45d0:	.word	0x1fff1b68
    45d4:	.word	0x1fff1b69

000045d8 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    45d8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    45da:	ldr	r3, [pc, #172]	; (4688 <uart3_status_isr+0xb0>)
    45dc:	ldrb	r2, [r3, #4]
    45de:	lsls	r4, r2, #26
    45e0:	bpl.n	4622 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    45e2:	ldr	r0, [pc, #168]	; (468c <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    45e4:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    45e6:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    45e8:	ldr	r1, [pc, #164]	; (4690 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    45ea:	adds	r3, #1
    45ec:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    45ee:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    45f0:	it	gt
    45f2:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    45f4:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    45f6:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    45f8:	beq.n	4602 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    45fa:	ldr	r4, [pc, #152]	; (4694 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    45fc:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    45fe:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4600:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4602:	ldr	r2, [pc, #148]	; (4698 <uart3_status_isr+0xc0>)
    4604:	ldr	r1, [r2, #0]
    4606:	cbz	r1, 4622 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4608:	ldr	r2, [pc, #144]	; (469c <uart3_status_isr+0xc4>)
    460a:	ldrb	r2, [r2, #0]
    460c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    460e:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    4610:	itet	cc
    4612:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    4616:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    4618:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    461a:	cmp	r3, #39	; 0x27
    461c:	itt	gt
    461e:	movgt	r3, #1
    4620:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    4622:	ldr	r2, [pc, #100]	; (4688 <uart3_status_isr+0xb0>)
    4624:	ldrb	r3, [r2, #3]
    4626:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    4628:	lsls	r0, r3, #24
    462a:	bmi.n	4650 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    462c:	lsls	r2, r3, #25
    462e:	bpl.n	464c <uart3_status_isr+0x74>
    4630:	ldr	r3, [pc, #84]	; (4688 <uart3_status_isr+0xb0>)
    4632:	ldrb	r3, [r3, #4]
    4634:	lsls	r3, r3, #25
    4636:	bpl.n	464c <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4638:	ldr	r3, [pc, #100]	; (46a0 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    463a:	ldr	r1, [pc, #104]	; (46a4 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    463c:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    463e:	movs	r2, #0
    4640:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4642:	cbz	r3, 4646 <uart3_status_isr+0x6e>
    4644:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    4646:	ldr	r3, [pc, #64]	; (4688 <uart3_status_isr+0xb0>)
    4648:	movs	r2, #44	; 0x2c
    464a:	strb	r2, [r3, #3]
	}
}
    464c:	pop	{r4, r5}
    464e:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    4650:	ldrb	r1, [r2, #4]
    4652:	lsls	r1, r1, #24
    4654:	bpl.n	462c <uart3_status_isr+0x54>
		head = tx_buffer_head;
    4656:	ldr	r1, [pc, #80]	; (46a8 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    4658:	ldr	r0, [pc, #64]	; (469c <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    465a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    465c:	ldrb	r1, [r0, #0]
    465e:	uxtb	r1, r1
		if (head == tail) {
    4660:	cmp	r4, r1
    4662:	beq.n	4680 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    4664:	adds	r2, r1, #1
    4666:	cmp	r2, #39	; 0x27
    4668:	itt	hi
    466a:	movhi	r1, #0
    466c:	movhi	r2, r1
			n = tx_buffer[tail];
    466e:	ldr	r5, [pc, #60]	; (46ac <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    4670:	ldr	r4, [pc, #20]	; (4688 <uart3_status_isr+0xb0>)
    4672:	it	ls
    4674:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4676:	ldrb	r2, [r5, r2]
    4678:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    467a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    467c:	strb	r1, [r0, #0]
    467e:	b.n	462c <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    4680:	movs	r1, #108	; 0x6c
    4682:	strb	r1, [r2, #3]
    4684:	b.n	462c <uart3_status_isr+0x54>
    4686:	nop
    4688:	.word	0x4006d000
    468c:	.word	0x1fff1b68
    4690:	.word	0x1fff1b69
    4694:	.word	0x1fff1b94
    4698:	.word	0x1fff1b64
    469c:	.word	0x1fff1bd5
    46a0:	.word	0x1fff1bd8
    46a4:	.word	0x1fff1bd4
    46a8:	.word	0x1fff1bdc
    46ac:	.word	0x1fff1b6c

000046b0 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    46b0:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    46b2:	ldr	r4, [pc, #64]	; (46f4 <fault_isr+0x44>)
    46b4:	b.n	46c8 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    46b6:	ldr	r3, [r4, #0]
    46b8:	lsls	r1, r3, #21
    46ba:	bmi.n	46d8 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    46bc:	ldr	r3, [r4, #0]
    46be:	lsls	r2, r3, #20
    46c0:	bmi.n	46e2 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    46c2:	ldr	r3, [r4, #0]
    46c4:	lsls	r3, r3, #19
    46c6:	bmi.n	46ec <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    46c8:	ldr	r3, [r4, #0]
    46ca:	lsls	r0, r3, #13
    46cc:	bpl.n	46b6 <fault_isr+0x6>
    46ce:	bl	3750 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    46d2:	ldr	r3, [r4, #0]
    46d4:	lsls	r1, r3, #21
    46d6:	bpl.n	46bc <fault_isr+0xc>
    46d8:	bl	47c4 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    46dc:	ldr	r3, [r4, #0]
    46de:	lsls	r2, r3, #20
    46e0:	bpl.n	46c2 <fault_isr+0x12>
    46e2:	bl	44ac <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    46e6:	ldr	r3, [r4, #0]
    46e8:	lsls	r3, r3, #19
    46ea:	bpl.n	46c8 <fault_isr+0x18>
    46ec:	bl	4ac4 <uart2_status_isr>
    46f0:	b.n	46c8 <fault_isr+0x18>
    46f2:	nop
    46f4:	.word	0x40048034

000046f8 <unused_isr>:
	}
}

void unused_isr(void)
{
    46f8:	push	{r3, lr}
	fault_isr();
    46fa:	bl	46b0 <fault_isr>
    46fe:	nop

00004700 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    4700:	ldr	r3, [pc, #4]	; (4708 <startup_early_hook+0x8>)
    4702:	movs	r2, #16
    4704:	strh	r2, [r3, #0]
    4706:	bx	lr
    4708:	.word	0x40052000

0000470c <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    470c:	bx	lr
    470e:	nop

00004710 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    4710:	ldr	r1, [pc, #36]	; (4738 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    4712:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    4714:	ldr	r3, [r1, #0]
	if (incr != 0) {
    4716:	cbz	r0, 4726 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    4718:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    471a:	add	r0, r3
    471c:	sub.w	r2, r2, #8192	; 0x2000
    4720:	cmp	r0, r2
    4722:	bcs.n	472a <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    4724:	str	r0, [r1, #0]
	}
	return prev;
    4726:	mov	r0, r3
}
    4728:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    472a:	bl	4d98 <__errno>
    472e:	movs	r3, #12
    4730:	str	r3, [r0, #0]
			return (void *)-1;
    4732:	mov.w	r0, #4294967295
    4736:	pop	{r3, pc}
    4738:	.word	0x1fff0c80

0000473c <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    473c:	ldr	r2, [pc, #32]	; (4760 <kinetis_hsrun_disable+0x24>)
    473e:	ldrb	r3, [r2, #0]
    4740:	cmp	r3, #128	; 0x80
    4742:	beq.n	4748 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    4744:	movs	r0, #0
}
    4746:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    4748:	ldr	r1, [pc, #24]	; (4764 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    474a:	ldr	r3, [pc, #28]	; (4768 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    474c:	ldr	r0, [pc, #28]	; (476c <kinetis_hsrun_disable+0x30>)
    474e:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    4750:	movs	r1, #0
    4752:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    4754:	ldrb	r3, [r2, #0]
    4756:	cmp	r3, #128	; 0x80
    4758:	beq.n	4754 <kinetis_hsrun_disable+0x18>
		return 1;
    475a:	movs	r0, #1
    475c:	bx	lr
    475e:	nop
    4760:	.word	0x4007e003
    4764:	.word	0x40048044
    4768:	.word	0x4007e001
    476c:	.word	0x22280000

00004770 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    4770:	ldr	r2, [pc, #36]	; (4798 <kinetis_hsrun_enable+0x28>)
    4772:	ldrb	r3, [r2, #0]
    4774:	cmp	r3, #1
    4776:	beq.n	477c <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    4778:	movs	r0, #0
}
    477a:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    477c:	add.w	r3, r3, #1073741824	; 0x40000000
    4780:	add.w	r3, r3, #516096	; 0x7e000
    4784:	movs	r1, #96	; 0x60
    4786:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    4788:	ldrb	r3, [r2, #0]
    478a:	cmp	r3, #128	; 0x80
    478c:	bne.n	4788 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    478e:	ldr	r3, [pc, #12]	; (479c <kinetis_hsrun_enable+0x2c>)
    4790:	ldr	r2, [pc, #12]	; (47a0 <kinetis_hsrun_enable+0x30>)
    4792:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    4794:	movs	r0, #1
    4796:	bx	lr
    4798:	.word	0x4007e003
    479c:	.word	0x40048044
    47a0:	.word	0x02060000

000047a4 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    47a4:	ldr	r2, [pc, #20]	; (47bc <serial_available+0x18>)
	tail = rx_buffer_tail;
    47a6:	ldr	r3, [pc, #24]	; (47c0 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    47a8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    47aa:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    47ac:	uxtb	r0, r0
	tail = rx_buffer_tail;
    47ae:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    47b0:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    47b2:	it	cc
    47b4:	addcc	r0, #64	; 0x40
    47b6:	subs	r0, r0, r3
}
    47b8:	bx	lr
    47ba:	nop
    47bc:	.word	0x1fff1be4
    47c0:	.word	0x1fff1be5

000047c4 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    47c4:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    47c6:	ldr	r3, [pc, #224]	; (48a8 <uart0_status_isr+0xe4>)
    47c8:	ldrb	r2, [r3, #4]
    47ca:	tst.w	r2, #48	; 0x30
    47ce:	beq.n	482a <uart0_status_isr+0x66>
		__disable_irq();
    47d0:	cpsid	i
		avail = UART0_RCFIFO;
    47d2:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    47d4:	and.w	r2, r1, #255	; 0xff
    47d8:	cmp	r1, #0
    47da:	beq.n	4858 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    47dc:	cpsie	i
			head = rx_buffer_head;
    47de:	ldr	r7, [pc, #204]	; (48ac <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    47e0:	ldr	r1, [pc, #204]	; (48b0 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    47e2:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    47e4:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    47e6:	ldr	r6, [pc, #204]	; (48b4 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    47e8:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    47ea:	uxtb	r0, r0
			tail = rx_buffer_tail;
    47ec:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    47ee:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    47f0:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    47f2:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    47f4:	it	cs
    47f6:	movcs	r3, #0
				if (newhead != tail) {
    47f8:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    47fa:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    47fe:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4800:	itt	ne
    4802:	strbne	r1, [r6, r3]
    4804:	movne	r0, r3
				}
			} while (--avail > 0);
    4806:	ands.w	r2, r2, #255	; 0xff
    480a:	bne.n	47ee <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    480c:	ldr	r3, [pc, #168]	; (48b8 <uart0_status_isr+0xf4>)
    480e:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4810:	uxtb	r2, r0
    4812:	strb	r2, [r7, #0]
			if (rts_pin) {
    4814:	cbz	r3, 482a <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    4816:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4818:	itet	cc
    481a:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    481e:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4820:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4822:	cmp	r0, #39	; 0x27
    4824:	itt	gt
    4826:	movgt	r2, #1
    4828:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    482a:	ldr	r1, [pc, #124]	; (48a8 <uart0_status_isr+0xe4>)
    482c:	ldrb	r2, [r1, #3]
    482e:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4830:	lsls	r5, r2, #24
    4832:	bmi.n	4862 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    4834:	lsls	r2, r2, #25
    4836:	bpl.n	4854 <uart0_status_isr+0x90>
    4838:	ldr	r3, [pc, #108]	; (48a8 <uart0_status_isr+0xe4>)
    483a:	ldrb	r3, [r3, #4]
    483c:	lsls	r3, r3, #25
    483e:	bpl.n	4854 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4840:	ldr	r3, [pc, #120]	; (48bc <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    4842:	ldr	r1, [pc, #124]	; (48c0 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    4844:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    4846:	movs	r2, #0
    4848:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    484a:	cbz	r3, 484e <uart0_status_isr+0x8a>
    484c:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    484e:	ldr	r3, [pc, #88]	; (48a8 <uart0_status_isr+0xe4>)
    4850:	movs	r2, #60	; 0x3c
    4852:	strb	r2, [r3, #3]
	}
}
    4854:	pop	{r4, r5, r6, r7}
    4856:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    4858:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    485a:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    485c:	strb	r2, [r3, #17]
			__enable_irq();
    485e:	cpsie	i
    4860:	b.n	482a <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4862:	ldrb	r3, [r1, #4]
    4864:	lsls	r4, r3, #24
    4866:	bpl.n	4834 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    4868:	ldr	r3, [pc, #88]	; (48c4 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    486a:	ldr	r6, [pc, #92]	; (48c8 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    486c:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    486e:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4870:	uxtb	r4, r4
		tail = tx_buffer_tail;
    4872:	uxtb	r3, r3
		do {
			if (tail == head) break;
    4874:	cmp	r4, r3
    4876:	beq.n	4896 <uart0_status_isr+0xd2>
    4878:	ldr	r5, [pc, #80]	; (48cc <uart0_status_isr+0x108>)
    487a:	b.n	4880 <uart0_status_isr+0xbc>
    487c:	cmp	r3, r4
    487e:	beq.n	4896 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    4880:	adds	r3, #1
    4882:	cmp	r3, #64	; 0x40
    4884:	it	cs
    4886:	movcs	r3, #0
			avail = UART0_S1;
    4888:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    488a:	ldrb	r0, [r5, r3]
    488c:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    488e:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    4890:	ldrb	r0, [r1, #20]
    4892:	cmp	r0, #7
    4894:	bls.n	487c <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    4896:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4898:	ldr	r1, [pc, #12]	; (48a8 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    489a:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    489c:	ldrb	r3, [r1, #4]
    489e:	lsls	r0, r3, #24
    48a0:	itt	mi
    48a2:	movmi	r3, #124	; 0x7c
    48a4:	strbmi	r3, [r1, #3]
    48a6:	b.n	4834 <uart0_status_isr+0x70>
    48a8:	.word	0x4006a000
    48ac:	.word	0x1fff1be4
    48b0:	.word	0x1fff1be5
    48b4:	.word	0x1fff1c28
    48b8:	.word	0x1fff1be0
    48bc:	.word	0x1fff1c6c
    48c0:	.word	0x1fff1c68
    48c4:	.word	0x1fff1c70
    48c8:	.word	0x1fff1c69
    48cc:	.word	0x1fff1be8

000048d0 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    48d0:	ldr	r2, [pc, #20]	; (48e8 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    48d2:	ldr	r3, [pc, #24]	; (48ec <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    48d4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    48d6:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    48d8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    48da:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    48dc:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    48de:	it	cc
    48e0:	addcc	r0, #64	; 0x40
    48e2:	subs	r0, r0, r3
}
    48e4:	bx	lr
    48e6:	nop
    48e8:	.word	0x1fff1c78
    48ec:	.word	0x1fff1c79

000048f0 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    48f0:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    48f2:	ldr	r3, [pc, #176]	; (49a4 <lpuart0_status_isr+0xb4>)
    48f4:	ldr	r2, [r3, #4]
    48f6:	lsls	r4, r2, #10
    48f8:	bpl.n	493a <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    48fa:	ldr	r0, [pc, #172]	; (49a8 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    48fc:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    48fe:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4900:	ldr	r1, [pc, #168]	; (49ac <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4902:	adds	r3, #1
    4904:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4906:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4908:	it	gt
    490a:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    490c:	cmp	r3, r1
    490e:	beq.n	491a <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    4910:	ldr	r4, [pc, #156]	; (49b0 <lpuart0_status_isr+0xc0>)
    4912:	uxtb	r2, r2
			rx_buffer_head = head;
    4914:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4916:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4918:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    491a:	ldr	r2, [pc, #152]	; (49b4 <lpuart0_status_isr+0xc4>)
    491c:	ldr	r1, [r2, #0]
    491e:	cbz	r1, 493a <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4920:	ldr	r2, [pc, #148]	; (49b8 <lpuart0_status_isr+0xc8>)
    4922:	ldrb	r2, [r2, #0]
    4924:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4926:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    4928:	itet	cc
    492a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    492e:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    4930:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4932:	cmp	r3, #39	; 0x27
    4934:	itt	gt
    4936:	movgt	r3, #1
    4938:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    493a:	ldr	r2, [pc, #104]	; (49a4 <lpuart0_status_isr+0xb4>)
    493c:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    493e:	lsls	r0, r3, #8
    4940:	bpl.n	4948 <lpuart0_status_isr+0x58>
    4942:	ldr	r2, [r2, #4]
    4944:	lsls	r1, r2, #8
    4946:	bmi.n	496c <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    4948:	lsls	r2, r3, #9
    494a:	bpl.n	4968 <lpuart0_status_isr+0x78>
    494c:	ldr	r3, [pc, #84]	; (49a4 <lpuart0_status_isr+0xb4>)
    494e:	ldr	r3, [r3, #4]
    4950:	lsls	r3, r3, #9
    4952:	bpl.n	4968 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4954:	ldr	r3, [pc, #100]	; (49bc <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    4956:	ldr	r1, [pc, #104]	; (49c0 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    4958:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    495a:	movs	r2, #0
    495c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    495e:	cbz	r3, 4962 <lpuart0_status_isr+0x72>
    4960:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    4962:	ldr	r3, [pc, #96]	; (49c4 <lpuart0_status_isr+0xd4>)
    4964:	movs	r2, #0
    4966:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    4968:	pop	{r4, r5}
    496a:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    496c:	ldr	r2, [pc, #88]	; (49c8 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    496e:	ldr	r1, [pc, #72]	; (49b8 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    4970:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    4972:	ldrb	r2, [r1, #0]
    4974:	uxtb	r2, r2
		if (head == tail) {
    4976:	cmp	r0, r2
    4978:	beq.n	4996 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    497a:	adds	r2, #1
    497c:	cmp	r2, #39	; 0x27
    497e:	itt	hi
    4980:	movhi	r0, #0
    4982:	movhi	r2, r0
			n = tx_buffer[tail];
    4984:	ldr	r5, [pc, #68]	; (49cc <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    4986:	ldr	r4, [pc, #28]	; (49a4 <lpuart0_status_isr+0xb4>)
    4988:	it	ls
    498a:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    498c:	ldrb	r2, [r5, r2]
    498e:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    4990:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    4992:	strb	r0, [r1, #0]
    4994:	b.n	4948 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    4996:	ldr	r0, [pc, #56]	; (49d0 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4998:	ldr	r2, [pc, #40]	; (49c4 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    499a:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    499c:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    499e:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    49a0:	str	r1, [r2, #0]
    49a2:	b.n	4948 <lpuart0_status_isr+0x58>
    49a4:	.word	0x400c4000
    49a8:	.word	0x1fff1c78
    49ac:	.word	0x1fff1c79
    49b0:	.word	0x1fff1ca4
    49b4:	.word	0x1fff1c74
    49b8:	.word	0x1fff1ce5
    49bc:	.word	0x1fff1ce8
    49c0:	.word	0x1fff1ce4
    49c4:	.word	0x43880158
    49c8:	.word	0x1fff1cec
    49cc:	.word	0x1fff1c7c
    49d0:	.word	0x4388015c

000049d4 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    49d4:	push	{r4, lr}
    49d6:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    49d8:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    49da:	bl	473c <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    49de:	ldr	r2, [pc, #96]	; (4a40 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    49e0:	ldr	r3, [pc, #96]	; (4a44 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    49e2:	ldr	r1, [pc, #100]	; (4a48 <usb_init_serialnumber+0x74>)
    49e4:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    49e6:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    49e8:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    49ea:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    49ec:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    49ee:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    49f0:	ldrb	r3, [r2, #0]
    49f2:	lsls	r3, r3, #24
    49f4:	bpl.n	49f0 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    49f6:	ldr	r3, [pc, #84]	; (4a4c <usb_init_serialnumber+0x78>)
    49f8:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    49fa:	bl	4770 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    49fe:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4a00:	ldr	r3, [pc, #76]	; (4a50 <usb_init_serialnumber+0x7c>)
    4a02:	cmp	r4, r3
    4a04:	itt	ls
    4a06:	addls.w	r4, r4, r4, lsl #2
    4a0a:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    4a0c:	mov	r0, r4
    4a0e:	ldr	r4, [pc, #68]	; (4a54 <usb_init_serialnumber+0x80>)
    4a10:	add	r1, sp, #4
    4a12:	movs	r2, #10
    4a14:	bl	4a58 <ultoa>
    4a18:	add	r1, sp, #4
    4a1a:	mov	r0, r4
	for (i=0; i<10; i++) {
    4a1c:	movs	r3, #0
		char c = buf[i];
    4a1e:	ldrb.w	r2, [r1], #1
    4a22:	adds	r3, #1
		if (!c) break;
    4a24:	cbz	r2, 4a36 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    4a26:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4a28:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    4a2c:	bne.n	4a1e <usb_init_serialnumber+0x4a>
    4a2e:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4a30:	strb	r3, [r4, #0]
}
    4a32:	add	sp, #16
    4a34:	pop	{r4, pc}
    4a36:	lsls	r3, r3, #1
    4a38:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4a3a:	strb	r3, [r4, #0]
}
    4a3c:	add	sp, #16
    4a3e:	pop	{r4, pc}
    4a40:	.word	0x40020004
    4a44:	.word	0x40020000
    4a48:	.word	0x41070000
    4a4c:	.word	0x4002000c
    4a50:	.word	0x0098967f
    4a54:	.word	0x1fff0d64

00004a58 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    4a58:	push	{r4, r5, r6, r7}
    4a5a:	subs	r5, r1, #1
    4a5c:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    4a5e:	movs	r4, #0
    4a60:	b.n	4a64 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    4a62:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    4a64:	udiv	r3, r0, r2
    4a68:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4a6c:	cmp	r0, #9
    4a6e:	add.w	r7, r0, #48	; 0x30
    4a72:	itet	hi
    4a74:	addhi	r0, #55	; 0x37
    4a76:	uxtbls	r0, r7
    4a78:	uxtbhi	r0, r0
    4a7a:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    4a7e:	mov	r0, r3
    4a80:	cmp	r3, #0
    4a82:	bne.n	4a62 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    4a84:	adds	r2, r1, r4
    4a86:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    4a88:	cbz	r4, 4a9e <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    4a8a:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    4a8c:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    4a90:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4a92:	adds	r3, #1
    4a94:	subs	r0, r4, r3
    4a96:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    4a98:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4a9c:	blt.n	4a8a <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    4a9e:	mov	r0, r1
    4aa0:	pop	{r4, r5, r6, r7}
    4aa2:	bx	lr

00004aa4 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4aa4:	ldr	r2, [pc, #20]	; (4abc <serial3_available+0x18>)
	tail = rx_buffer_tail;
    4aa6:	ldr	r3, [pc, #24]	; (4ac0 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4aa8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4aaa:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4aac:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4aae:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4ab0:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    4ab2:	it	cc
    4ab4:	addcc	r0, #64	; 0x40
    4ab6:	subs	r0, r0, r3
}
    4ab8:	bx	lr
    4aba:	nop
    4abc:	.word	0x1fff1cf4
    4ac0:	.word	0x1fff1cf5

00004ac4 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    4ac4:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    4ac6:	ldr	r3, [pc, #172]	; (4b74 <uart2_status_isr+0xb0>)
    4ac8:	ldrb	r2, [r3, #4]
    4aca:	lsls	r4, r2, #26
    4acc:	bpl.n	4b0e <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4ace:	ldr	r0, [pc, #168]	; (4b78 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    4ad0:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    4ad2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4ad4:	ldr	r1, [pc, #164]	; (4b7c <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4ad6:	adds	r3, #1
    4ad8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4ada:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4adc:	it	gt
    4ade:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4ae0:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    4ae2:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4ae4:	beq.n	4aee <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    4ae6:	ldr	r4, [pc, #152]	; (4b80 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    4ae8:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4aea:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4aec:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4aee:	ldr	r2, [pc, #148]	; (4b84 <uart2_status_isr+0xc0>)
    4af0:	ldr	r1, [r2, #0]
    4af2:	cbz	r1, 4b0e <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4af4:	ldr	r2, [pc, #144]	; (4b88 <uart2_status_isr+0xc4>)
    4af6:	ldrb	r2, [r2, #0]
    4af8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4afa:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4afc:	itet	cc
    4afe:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    4b02:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4b04:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4b06:	cmp	r3, #39	; 0x27
    4b08:	itt	gt
    4b0a:	movgt	r3, #1
    4b0c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    4b0e:	ldr	r2, [pc, #100]	; (4b74 <uart2_status_isr+0xb0>)
    4b10:	ldrb	r3, [r2, #3]
    4b12:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4b14:	lsls	r0, r3, #24
    4b16:	bmi.n	4b3c <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    4b18:	lsls	r2, r3, #25
    4b1a:	bpl.n	4b38 <uart2_status_isr+0x74>
    4b1c:	ldr	r3, [pc, #84]	; (4b74 <uart2_status_isr+0xb0>)
    4b1e:	ldrb	r3, [r3, #4]
    4b20:	lsls	r3, r3, #25
    4b22:	bpl.n	4b38 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4b24:	ldr	r3, [pc, #100]	; (4b8c <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4b26:	ldr	r1, [pc, #104]	; (4b90 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4b28:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4b2a:	movs	r2, #0
    4b2c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4b2e:	cbz	r3, 4b32 <uart2_status_isr+0x6e>
    4b30:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    4b32:	ldr	r3, [pc, #64]	; (4b74 <uart2_status_isr+0xb0>)
    4b34:	movs	r2, #44	; 0x2c
    4b36:	strb	r2, [r3, #3]
	}
}
    4b38:	pop	{r4, r5}
    4b3a:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4b3c:	ldrb	r1, [r2, #4]
    4b3e:	lsls	r1, r1, #24
    4b40:	bpl.n	4b18 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    4b42:	ldr	r1, [pc, #80]	; (4b94 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    4b44:	ldr	r0, [pc, #64]	; (4b88 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4b46:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4b48:	ldrb	r1, [r0, #0]
    4b4a:	uxtb	r1, r1
		if (head == tail) {
    4b4c:	cmp	r4, r1
    4b4e:	beq.n	4b6c <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    4b50:	adds	r2, r1, #1
    4b52:	cmp	r2, #39	; 0x27
    4b54:	itt	hi
    4b56:	movhi	r1, #0
    4b58:	movhi	r2, r1
			n = tx_buffer[tail];
    4b5a:	ldr	r5, [pc, #60]	; (4b98 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4b5c:	ldr	r4, [pc, #20]	; (4b74 <uart2_status_isr+0xb0>)
    4b5e:	it	ls
    4b60:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4b62:	ldrb	r2, [r5, r2]
    4b64:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4b66:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4b68:	strb	r1, [r0, #0]
    4b6a:	b.n	4b18 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    4b6c:	movs	r1, #108	; 0x6c
    4b6e:	strb	r1, [r2, #3]
    4b70:	b.n	4b18 <uart2_status_isr+0x54>
    4b72:	nop
    4b74:	.word	0x4006c000
    4b78:	.word	0x1fff1cf4
    4b7c:	.word	0x1fff1cf5
    4b80:	.word	0x1fff1d20
    4b84:	.word	0x1fff1cf0
    4b88:	.word	0x1fff1d61
    4b8c:	.word	0x1fff1d64
    4b90:	.word	0x1fff1d60
    4b94:	.word	0x1fff1d68
    4b98:	.word	0x1fff1cf8

00004b9c <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    4b9c:	bx	lr
    4b9e:	nop

00004ba0 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    4ba0:	bx	lr
    4ba2:	nop

00004ba4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    4ba4:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4ba6:	mrs	r2, PRIMASK
		__disable_irq();
    4baa:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    4bac:	ldrb	r3, [r0, #29]
    4bae:	cbnz	r3, 4bbe <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    4bb0:	ldrb	r1, [r0, #28]
    4bb2:	cmp	r1, #1
    4bb4:	beq.n	4bc8 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    4bb6:	cmp	r1, #3
    4bb8:	beq.n	4bdc <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    4bba:	movs	r3, #1
    4bbc:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4bbe:	cbnz	r2, 4bc2 <EventResponder::triggerEventNotImmediate()+0x1e>
    4bc0:	cpsie	i
	}
	enableInterrupts(irq);
}
    4bc2:	ldr.w	r4, [sp], #4
    4bc6:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4bc8:	ldr	r4, [pc, #68]	; (4c10 <EventResponder::triggerEventNotImmediate()+0x6c>)
    4bca:	ldr	r1, [r4, #0]
    4bcc:	cbz	r1, 4bf8 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    4bce:	ldr	r1, [pc, #68]	; (4c14 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    4bd0:	str	r3, [r0, #20]
				_prev = lastYield;
    4bd2:	ldr	r3, [r1, #0]
    4bd4:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    4bd6:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    4bd8:	str	r0, [r3, #20]
    4bda:	b.n	4bba <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    4bdc:	ldr	r4, [pc, #56]	; (4c18 <EventResponder::triggerEventNotImmediate()+0x74>)
    4bde:	ldr	r1, [r4, #0]
    4be0:	cbz	r1, 4c04 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4be2:	ldr	r1, [pc, #56]	; (4c1c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    4be4:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    4be6:	ldr	r3, [r1, #0]
    4be8:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    4bea:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    4bec:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    4bee:	ldr	r3, [pc, #48]	; (4c20 <EventResponder::triggerEventNotImmediate()+0x7c>)
    4bf0:	mov.w	r1, #268435456	; 0x10000000
    4bf4:	str	r1, [r3, #0]
    4bf6:	b.n	4bba <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    4bf8:	ldr	r3, [pc, #24]	; (4c14 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    4bfa:	str	r1, [r0, #20]
				_prev = nullptr;
    4bfc:	str	r1, [r0, #24]
				firstYield = this;
    4bfe:	str	r0, [r4, #0]
				lastYield = this;
    4c00:	str	r0, [r3, #0]
    4c02:	b.n	4bba <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    4c04:	ldr	r3, [pc, #20]	; (4c1c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    4c06:	str	r1, [r0, #20]
				_prev = nullptr;
    4c08:	str	r1, [r0, #24]
				firstInterrupt = this;
    4c0a:	str	r0, [r4, #0]
				lastInterrupt = this;
    4c0c:	str	r0, [r3, #0]
    4c0e:	b.n	4bee <EventResponder::triggerEventNotImmediate()+0x4a>
    4c10:	.word	0x1fff1d7c
    4c14:	.word	0x1fff1d78
    4c18:	.word	0x1fff1d6c
    4c1c:	.word	0x1fff1d70
    4c20:	.word	0xe000ed04

00004c24 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    4c24:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4c26:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4c28:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4c2a:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4c2c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    4c2e:	beq.n	4c38 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    4c30:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4c34:	b.w	4ba4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4c38:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    4c3a:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4c3e:	bx	r3

00004c40 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    4c40:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4c42:	mrs	r2, PRIMASK
		__disable_irq();
    4c46:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4c48:	ldr	r4, [pc, #48]	; (4c7c <EventResponder::runFromInterrupt()+0x3c>)
    4c4a:	ldr	r0, [r4, #0]
		if (first) {
    4c4c:	cbz	r0, 4c70 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4c4e:	ldr	r6, [pc, #48]	; (4c80 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4c50:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    4c52:	ldr	r3, [r0, #20]
    4c54:	str	r3, [r4, #0]
			if (firstInterrupt) {
    4c56:	cbz	r3, 4c76 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4c58:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4c5a:	cbnz	r2, 4c5e <EventResponder::runFromInterrupt()+0x1e>
    4c5c:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    4c5e:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4c60:	ldr	r3, [r0, #8]
    4c62:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4c64:	mrs	r2, PRIMASK
		__disable_irq();
    4c68:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4c6a:	ldr	r0, [r4, #0]
		if (first) {
    4c6c:	cmp	r0, #0
    4c6e:	bne.n	4c52 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4c70:	cbnz	r2, 4c74 <EventResponder::runFromInterrupt()+0x34>
    4c72:	cpsie	i
    4c74:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4c76:	str	r3, [r6, #0]
    4c78:	b.n	4c5a <EventResponder::runFromInterrupt()+0x1a>
    4c7a:	nop
    4c7c:	.word	0x1fff1d6c
    4c80:	.word	0x1fff1d70

00004c84 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    4c84:	b.w	4c40 <EventResponder::runFromInterrupt()>

00004c88 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    4c88:	ldr	r2, [pc, #96]	; (4cec <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    4c8a:	push	{r4, r5}
	if (listActive == nullptr) {
    4c8c:	ldr	r4, [r2, #0]
    4c8e:	cmp	r4, #0
    4c90:	beq.n	4ce2 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    4c92:	ldr	r3, [r0, #0]
    4c94:	ldr	r1, [r4, #0]
    4c96:	cmp	r3, r1
    4c98:	bcs.n	4cb8 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4c9a:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4c9c:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    4c9e:	str	r4, [r0, #8]
		_prev = nullptr;
    4ca0:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4ca2:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4ca4:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    4ca6:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4ca8:	movs	r3, #2
    4caa:	strb	r3, [r0, #20]
}
    4cac:	pop	{r4, r5}
    4cae:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4cb0:	ldr	r1, [r2, #0]
    4cb2:	cmp	r3, r1
    4cb4:	mov	r4, r2
    4cb6:	bcc.n	4cca <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4cb8:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    4cba:	subs	r3, r3, r1
    4cbc:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4cbe:	cmp	r2, #0
    4cc0:	bne.n	4cb0 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    4cc2:	str	r2, [r0, #8]
		_prev = timer;
    4cc4:	str	r4, [r0, #12]
		timer->_next = this;
    4cc6:	str	r0, [r4, #8]
    4cc8:	b.n	4ca8 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    4cca:	ldr	r2, [r2, #12]
    4ccc:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    4cce:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    4cd0:	str	r0, [r4, #12]
				_prev->_next = this;
    4cd2:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    4cd4:	subs	r3, r1, r3
				_state = TimerActive;
    4cd6:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    4cd8:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    4cda:	str	r3, [r4, #0]
				_state = TimerActive;
    4cdc:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    4cde:	pop	{r4, r5}
    4ce0:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    4ce2:	str	r4, [r0, #8]
		_prev = nullptr;
    4ce4:	str	r4, [r0, #12]
		listActive = this;
    4ce6:	str	r0, [r2, #0]
    4ce8:	b.n	4ca8 <MillisTimer::addToActiveList()+0x20>
    4cea:	nop
    4cec:	.word	0x1fff1d74

00004cf0 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    4cf0:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    4cf2:	ldr	r6, [pc, #136]	; (4d7c <MillisTimer::runFromTimer()+0x8c>)
    4cf4:	ldr	r4, [r6, #0]
	while (timer) {
    4cf6:	cbz	r4, 4d44 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4cf8:	ldr	r3, [r4, #0]
    4cfa:	cmp	r3, #0
    4cfc:	bne.n	4d74 <MillisTimer::runFromTimer()+0x84>
    4cfe:	ldr	r7, [pc, #128]	; (4d80 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    4d00:	mov	r5, r3
    4d02:	b.n	4d0e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    4d04:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4d06:	cbz	r4, 4d44 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4d08:	ldr	r3, [r4, #0]
    4d0a:	cmp	r3, #0
    4d0c:	bne.n	4d74 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    4d0e:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    4d10:	cbz	r3, 4d14 <MillisTimer::runFromTimer()+0x24>
    4d12:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    4d14:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    4d16:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4d18:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    4d1a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4d1c:	ldr	r3, [r3, #0]
    4d1e:	cmp	r3, r7
    4d20:	bne.n	4d66 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4d22:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4d24:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4d26:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4d28:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    4d2a:	beq.n	4d6e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4d2c:	bl	4ba4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    4d30:	ldr	r3, [r4, #4]
    4d32:	cmp	r3, #0
    4d34:	beq.n	4d04 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    4d36:	str	r3, [r4, #0]
				timer->addToActiveList();
    4d38:	mov	r0, r4
    4d3a:	bl	4c88 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    4d3e:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4d40:	cmp	r4, #0
    4d42:	bne.n	4d08 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4d44:	mrs	r3, PRIMASK
		__disable_irq();
    4d48:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4d4a:	ldr	r2, [pc, #56]	; (4d84 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4d4c:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4d4e:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4d50:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    4d52:	cbnz	r3, 4d56 <MillisTimer::runFromTimer()+0x66>
    4d54:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    4d56:	cbz	r0, 4d64 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4d58:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    4d5a:	bl	4c88 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    4d5e:	mov	r0, r4
    4d60:	cmp	r0, #0
    4d62:	bne.n	4d58 <MillisTimer::runFromTimer()+0x68>
    4d64:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4d66:	mov	r2, r4
    4d68:	movs	r1, #0
    4d6a:	blx	r3
    4d6c:	b.n	4d30 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4d6e:	ldr	r3, [r0, #8]
    4d70:	blx	r3
    4d72:	b.n	4d30 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    4d74:	subs	r3, #1
    4d76:	str	r3, [r4, #0]
			break;
    4d78:	b.n	4d44 <MillisTimer::runFromTimer()+0x54>
    4d7a:	nop
    4d7c:	.word	0x1fff1d74
    4d80:	.word	0x00004c25
    4d84:	.word	0x1fff1d84

00004d88 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    4d88:	ldr	r2, [pc, #8]	; (4d94 <systick_isr+0xc>)
    4d8a:	ldr	r3, [r2, #0]
    4d8c:	adds	r3, #1
    4d8e:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4d90:	b.w	4cf0 <MillisTimer::runFromTimer()>
    4d94:	.word	0x1fff190c

00004d98 <__errno>:
    4d98:	ldr	r3, [pc, #4]	; (4da0 <__errno+0x8>)
    4d9a:	ldr	r0, [r3, #0]
    4d9c:	bx	lr
    4d9e:	nop
    4da0:	.word	0x1fff11a8

00004da4 <__libc_init_array>:
    4da4:	push	{r4, r5, r6, lr}
    4da6:	ldr	r6, [pc, #60]	; (4de4 <__libc_init_array+0x40>)
    4da8:	ldr	r5, [pc, #60]	; (4de8 <__libc_init_array+0x44>)
    4daa:	subs	r6, r6, r5
    4dac:	asrs	r6, r6, #2
    4dae:	it	ne
    4db0:	movne	r4, #0
    4db2:	beq.n	4dc0 <__libc_init_array+0x1c>
    4db4:	adds	r4, #1
    4db6:	ldr.w	r3, [r5], #4
    4dba:	blx	r3
    4dbc:	cmp	r6, r4
    4dbe:	bne.n	4db4 <__libc_init_array+0x10>
    4dc0:	ldr	r6, [pc, #40]	; (4dec <__libc_init_array+0x48>)
    4dc2:	ldr	r5, [pc, #44]	; (4df0 <__libc_init_array+0x4c>)
    4dc4:	subs	r6, r6, r5
    4dc6:	bl	5a78 <_init>
    4dca:	asrs	r6, r6, #2
    4dcc:	it	ne
    4dce:	movne	r4, #0
    4dd0:	beq.n	4de0 <__libc_init_array+0x3c>
    4dd2:	adds	r4, #1
    4dd4:	ldr.w	r3, [r5], #4
    4dd8:	blx	r3
    4dda:	cmp	r6, r4
    4ddc:	bne.n	4dd2 <__libc_init_array+0x2e>
    4dde:	pop	{r4, r5, r6, pc}
    4de0:	pop	{r4, r5, r6, pc}
    4de2:	nop
    4de4:	.word	0x00005a84
    4de8:	.word	0x00005a84
    4dec:	.word	0x00005a90
    4df0:	.word	0x00005a84

00004df4 <malloc>:
    4df4:	ldr	r3, [pc, #8]	; (4e00 <malloc+0xc>)
    4df6:	mov	r1, r0
    4df8:	ldr	r0, [r3, #0]
    4dfa:	b.w	4e04 <_malloc_r>
    4dfe:	nop
    4e00:	.word	0x1fff11a8

00004e04 <_malloc_r>:
    4e04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e08:	add.w	r5, r1, #11
    4e0c:	cmp	r5, #22
    4e0e:	sub	sp, #12
    4e10:	mov	r6, r0
    4e12:	bls.w	4f54 <_malloc_r+0x150>
    4e16:	bics.w	r5, r5, #7
    4e1a:	bmi.w	4f9c <_malloc_r+0x198>
    4e1e:	cmp	r1, r5
    4e20:	bhi.w	4f9c <_malloc_r+0x198>
    4e24:	bl	5374 <__malloc_lock>
    4e28:	cmp.w	r5, #504	; 0x1f8
    4e2c:	bcc.w	5368 <_malloc_r+0x564>
    4e30:	lsrs	r3, r5, #9
    4e32:	beq.w	4faa <_malloc_r+0x1a6>
    4e36:	cmp	r3, #4
    4e38:	bhi.w	5142 <_malloc_r+0x33e>
    4e3c:	lsrs	r0, r5, #6
    4e3e:	add.w	lr, r0, #57	; 0x39
    4e42:	mov.w	r3, lr, lsl #1
    4e46:	adds	r0, #56	; 0x38
    4e48:	ldr	r7, [pc, #784]	; (515c <_malloc_r+0x358>)
    4e4a:	add.w	r3, r7, r3, lsl #2
    4e4e:	sub.w	r1, r3, #8
    4e52:	ldr	r4, [r3, #4]
    4e54:	cmp	r1, r4
    4e56:	bne.n	4e68 <_malloc_r+0x64>
    4e58:	b.n	4fb4 <_malloc_r+0x1b0>
    4e5a:	cmp	r2, #0
    4e5c:	bge.w	4fb8 <_malloc_r+0x1b4>
    4e60:	ldr	r4, [r4, #12]
    4e62:	cmp	r1, r4
    4e64:	beq.w	4fb4 <_malloc_r+0x1b0>
    4e68:	ldr	r3, [r4, #4]
    4e6a:	bic.w	r3, r3, #3
    4e6e:	subs	r2, r3, r5
    4e70:	cmp	r2, #15
    4e72:	ble.n	4e5a <_malloc_r+0x56>
    4e74:	ldr	r1, [pc, #740]	; (515c <_malloc_r+0x358>)
    4e76:	ldr	r4, [r7, #16]
    4e78:	add.w	lr, r1, #8
    4e7c:	cmp	r4, lr
    4e7e:	beq.w	51e8 <_malloc_r+0x3e4>
    4e82:	ldr	r3, [r4, #4]
    4e84:	bic.w	r3, r3, #3
    4e88:	subs	r2, r3, r5
    4e8a:	cmp	r2, #15
    4e8c:	bgt.w	51c2 <_malloc_r+0x3be>
    4e90:	cmp	r2, #0
    4e92:	str.w	lr, [r1, #20]
    4e96:	str.w	lr, [r1, #16]
    4e9a:	bge.w	4fda <_malloc_r+0x1d6>
    4e9e:	cmp.w	r3, #512	; 0x200
    4ea2:	bcs.w	5174 <_malloc_r+0x370>
    4ea6:	lsrs	r3, r3, #3
    4ea8:	add.w	ip, r3, #1
    4eac:	movs	r2, #1
    4eae:	asrs	r3, r3, #2
    4eb0:	lsl.w	r3, r2, r3
    4eb4:	ldr	r2, [r1, #4]
    4eb6:	ldr.w	r8, [r1, ip, lsl #3]
    4eba:	str.w	r8, [r4, #8]
    4ebe:	add.w	r9, r1, ip, lsl #3
    4ec2:	orrs	r2, r3
    4ec4:	sub.w	r3, r9, #8
    4ec8:	str	r3, [r4, #12]
    4eca:	str	r2, [r1, #4]
    4ecc:	str.w	r4, [r1, ip, lsl #3]
    4ed0:	str.w	r4, [r8, #12]
    4ed4:	asrs	r3, r0, #2
    4ed6:	movs	r4, #1
    4ed8:	lsls	r4, r3
    4eda:	cmp	r4, r2
    4edc:	bhi.w	4ff4 <_malloc_r+0x1f0>
    4ee0:	tst	r4, r2
    4ee2:	bne.n	4ef2 <_malloc_r+0xee>
    4ee4:	bic.w	r0, r0, #3
    4ee8:	lsls	r4, r4, #1
    4eea:	tst	r4, r2
    4eec:	add.w	r0, r0, #4
    4ef0:	beq.n	4ee8 <_malloc_r+0xe4>
    4ef2:	add.w	r9, r7, r0, lsl #3
    4ef6:	mov	ip, r9
    4ef8:	mov	r8, r0
    4efa:	ldr.w	r1, [ip, #12]
    4efe:	cmp	ip, r1
    4f00:	bne.n	4f12 <_malloc_r+0x10e>
    4f02:	b.n	51ec <_malloc_r+0x3e8>
    4f04:	cmp	r2, #0
    4f06:	bge.w	520c <_malloc_r+0x408>
    4f0a:	ldr	r1, [r1, #12]
    4f0c:	cmp	ip, r1
    4f0e:	beq.w	51ec <_malloc_r+0x3e8>
    4f12:	ldr	r3, [r1, #4]
    4f14:	bic.w	r3, r3, #3
    4f18:	subs	r2, r3, r5
    4f1a:	cmp	r2, #15
    4f1c:	ble.n	4f04 <_malloc_r+0x100>
    4f1e:	mov	r4, r1
    4f20:	ldr.w	ip, [r1, #12]
    4f24:	ldr.w	r8, [r4, #8]!
    4f28:	adds	r3, r1, r5
    4f2a:	orr.w	r5, r5, #1
    4f2e:	str	r5, [r1, #4]
    4f30:	orr.w	r1, r2, #1
    4f34:	str.w	ip, [r8, #12]
    4f38:	mov	r0, r6
    4f3a:	str.w	r8, [ip, #8]
    4f3e:	str	r3, [r7, #20]
    4f40:	str	r3, [r7, #16]
    4f42:	str.w	lr, [r3, #12]
    4f46:	str.w	lr, [r3, #8]
    4f4a:	str	r1, [r3, #4]
    4f4c:	str	r2, [r3, r2]
    4f4e:	bl	5378 <__malloc_unlock>
    4f52:	b.n	4f94 <_malloc_r+0x190>
    4f54:	cmp	r1, #16
    4f56:	bhi.n	4f9c <_malloc_r+0x198>
    4f58:	bl	5374 <__malloc_lock>
    4f5c:	movs	r5, #16
    4f5e:	movs	r3, #6
    4f60:	movs	r0, #2
    4f62:	ldr	r7, [pc, #504]	; (515c <_malloc_r+0x358>)
    4f64:	add.w	r3, r7, r3, lsl #2
    4f68:	sub.w	r2, r3, #8
    4f6c:	ldr	r4, [r3, #4]
    4f6e:	cmp	r4, r2
    4f70:	beq.w	51fe <_malloc_r+0x3fa>
    4f74:	ldr	r3, [r4, #4]
    4f76:	ldr	r1, [r4, #12]
    4f78:	ldr	r5, [r4, #8]
    4f7a:	bic.w	r3, r3, #3
    4f7e:	add	r3, r4
    4f80:	mov	r0, r6
    4f82:	ldr	r2, [r3, #4]
    4f84:	str	r1, [r5, #12]
    4f86:	orr.w	r2, r2, #1
    4f8a:	str	r5, [r1, #8]
    4f8c:	str	r2, [r3, #4]
    4f8e:	bl	5378 <__malloc_unlock>
    4f92:	adds	r4, #8
    4f94:	mov	r0, r4
    4f96:	add	sp, #12
    4f98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f9c:	movs	r4, #0
    4f9e:	movs	r3, #12
    4fa0:	mov	r0, r4
    4fa2:	str	r3, [r6, #0]
    4fa4:	add	sp, #12
    4fa6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4faa:	movs	r3, #128	; 0x80
    4fac:	mov.w	lr, #64	; 0x40
    4fb0:	movs	r0, #63	; 0x3f
    4fb2:	b.n	4e48 <_malloc_r+0x44>
    4fb4:	mov	r0, lr
    4fb6:	b.n	4e74 <_malloc_r+0x70>
    4fb8:	add	r3, r4
    4fba:	ldr	r1, [r4, #12]
    4fbc:	ldr	r2, [r3, #4]
    4fbe:	ldr	r5, [r4, #8]
    4fc0:	orr.w	r2, r2, #1
    4fc4:	str	r1, [r5, #12]
    4fc6:	mov	r0, r6
    4fc8:	str	r5, [r1, #8]
    4fca:	str	r2, [r3, #4]
    4fcc:	bl	5378 <__malloc_unlock>
    4fd0:	adds	r4, #8
    4fd2:	mov	r0, r4
    4fd4:	add	sp, #12
    4fd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4fda:	add	r3, r4
    4fdc:	mov	r0, r6
    4fde:	ldr	r2, [r3, #4]
    4fe0:	orr.w	r2, r2, #1
    4fe4:	str	r2, [r3, #4]
    4fe6:	bl	5378 <__malloc_unlock>
    4fea:	adds	r4, #8
    4fec:	mov	r0, r4
    4fee:	add	sp, #12
    4ff0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ff4:	ldr	r4, [r7, #8]
    4ff6:	ldr	r3, [r4, #4]
    4ff8:	bic.w	r8, r3, #3
    4ffc:	cmp	r8, r5
    4ffe:	bcc.n	500a <_malloc_r+0x206>
    5000:	rsb	r3, r5, r8
    5004:	cmp	r3, #15
    5006:	bgt.w	5122 <_malloc_r+0x31e>
    500a:	ldr	r3, [pc, #340]	; (5160 <_malloc_r+0x35c>)
    500c:	ldr.w	r9, [pc, #352]	; 5170 <_malloc_r+0x36c>
    5010:	ldr	r2, [r3, #0]
    5012:	ldr.w	r3, [r9]
    5016:	adds	r3, #1
    5018:	add	r2, r5
    501a:	add.w	sl, r4, r8
    501e:	beq.w	52e2 <_malloc_r+0x4de>
    5022:	add.w	r2, r2, #4096	; 0x1000
    5026:	adds	r2, #15
    5028:	bic.w	r2, r2, #4080	; 0xff0
    502c:	bic.w	r2, r2, #15
    5030:	mov	r1, r2
    5032:	mov	r0, r6
    5034:	str	r2, [sp, #4]
    5036:	bl	537c <_sbrk_r>
    503a:	cmp.w	r0, #4294967295
    503e:	mov	fp, r0
    5040:	ldr	r2, [sp, #4]
    5042:	beq.w	52f6 <_malloc_r+0x4f2>
    5046:	cmp	sl, r0
    5048:	bhi.w	5244 <_malloc_r+0x440>
    504c:	ldr	r3, [pc, #276]	; (5164 <_malloc_r+0x360>)
    504e:	ldr	r1, [r3, #0]
    5050:	cmp	sl, fp
    5052:	add	r1, r2
    5054:	str	r1, [r3, #0]
    5056:	beq.w	5300 <_malloc_r+0x4fc>
    505a:	ldr.w	r0, [r9]
    505e:	ldr.w	lr, [pc, #272]	; 5170 <_malloc_r+0x36c>
    5062:	adds	r0, #1
    5064:	ittet	ne
    5066:	rsbne	sl, sl, fp
    506a:	addne	r1, sl
    506c:	streq.w	fp, [lr]
    5070:	strne	r1, [r3, #0]
    5072:	ands.w	r1, fp, #7
    5076:	beq.w	52a8 <_malloc_r+0x4a4>
    507a:	rsb	r0, r1, #8
    507e:	rsb	r1, r1, #4096	; 0x1000
    5082:	add	fp, r0
    5084:	adds	r1, #8
    5086:	add	r2, fp
    5088:	ubfx	r2, r2, #0, #12
    508c:	rsb	r9, r2, r1
    5090:	mov	r1, r9
    5092:	mov	r0, r6
    5094:	str	r3, [sp, #4]
    5096:	bl	537c <_sbrk_r>
    509a:	adds	r3, r0, #1
    509c:	ldr	r3, [sp, #4]
    509e:	beq.w	5320 <_malloc_r+0x51c>
    50a2:	rsb	r2, fp, r0
    50a6:	add	r2, r9
    50a8:	orr.w	r2, r2, #1
    50ac:	ldr	r1, [r3, #0]
    50ae:	str.w	fp, [r7, #8]
    50b2:	add	r1, r9
    50b4:	cmp	r4, r7
    50b6:	str.w	r2, [fp, #4]
    50ba:	str	r1, [r3, #0]
    50bc:	ldr.w	r9, [pc, #164]	; 5164 <_malloc_r+0x360>
    50c0:	beq.n	50f0 <_malloc_r+0x2ec>
    50c2:	cmp.w	r8, #15
    50c6:	bls.w	52c4 <_malloc_r+0x4c0>
    50ca:	ldr	r2, [r4, #4]
    50cc:	sub.w	r3, r8, #12
    50d0:	bic.w	r3, r3, #7
    50d4:	adds	r0, r4, r3
    50d6:	and.w	r2, r2, #1
    50da:	mov.w	lr, #5
    50de:	orrs	r2, r3
    50e0:	cmp	r3, #15
    50e2:	str	r2, [r4, #4]
    50e4:	str.w	lr, [r0, #4]
    50e8:	str.w	lr, [r0, #8]
    50ec:	bhi.w	5328 <_malloc_r+0x524>
    50f0:	ldr	r3, [pc, #116]	; (5168 <_malloc_r+0x364>)
    50f2:	ldr	r4, [r7, #8]
    50f4:	ldr	r2, [r3, #0]
    50f6:	cmp	r1, r2
    50f8:	it	hi
    50fa:	strhi	r1, [r3, #0]
    50fc:	ldr	r3, [pc, #108]	; (516c <_malloc_r+0x368>)
    50fe:	ldr	r2, [r3, #0]
    5100:	cmp	r1, r2
    5102:	ldr	r2, [r4, #4]
    5104:	it	hi
    5106:	strhi	r1, [r3, #0]
    5108:	bic.w	r2, r2, #3
    510c:	cmp	r5, r2
    510e:	sub.w	r3, r2, r5
    5112:	bhi.n	5118 <_malloc_r+0x314>
    5114:	cmp	r3, #15
    5116:	bgt.n	5122 <_malloc_r+0x31e>
    5118:	mov	r0, r6
    511a:	bl	5378 <__malloc_unlock>
    511e:	movs	r4, #0
    5120:	b.n	4f94 <_malloc_r+0x190>
    5122:	adds	r2, r4, r5
    5124:	orr.w	r3, r3, #1
    5128:	orr.w	r5, r5, #1
    512c:	str	r5, [r4, #4]
    512e:	mov	r0, r6
    5130:	str	r2, [r7, #8]
    5132:	str	r3, [r2, #4]
    5134:	bl	5378 <__malloc_unlock>
    5138:	adds	r4, #8
    513a:	mov	r0, r4
    513c:	add	sp, #12
    513e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5142:	cmp	r3, #20
    5144:	bls.n	522a <_malloc_r+0x426>
    5146:	cmp	r3, #84	; 0x54
    5148:	bhi.w	5294 <_malloc_r+0x490>
    514c:	lsrs	r0, r5, #12
    514e:	add.w	lr, r0, #111	; 0x6f
    5152:	mov.w	r3, lr, lsl #1
    5156:	adds	r0, #110	; 0x6e
    5158:	b.n	4e48 <_malloc_r+0x44>
    515a:	nop
    515c:	.word	0x1fff11ac
    5160:	.word	0x1fff1d90
    5164:	.word	0x1fff1d94
    5168:	.word	0x1fff1d8c
    516c:	.word	0x1fff1d88
    5170:	.word	0x1fff15b8
    5174:	lsrs	r2, r3, #9
    5176:	cmp	r2, #4
    5178:	bls.n	5238 <_malloc_r+0x434>
    517a:	cmp	r2, #20
    517c:	bhi.w	52e6 <_malloc_r+0x4e2>
    5180:	add.w	r1, r2, #92	; 0x5c
    5184:	lsls	r1, r1, #1
    5186:	adds	r2, #91	; 0x5b
    5188:	add.w	ip, r7, r1, lsl #2
    518c:	ldr.w	r1, [r7, r1, lsl #2]
    5190:	ldr.w	r8, [pc, #476]	; 5370 <_malloc_r+0x56c>
    5194:	sub.w	ip, ip, #8
    5198:	cmp	ip, r1
    519a:	beq.w	52ae <_malloc_r+0x4aa>
    519e:	ldr	r2, [r1, #4]
    51a0:	bic.w	r2, r2, #3
    51a4:	cmp	r3, r2
    51a6:	bcs.n	51ae <_malloc_r+0x3aa>
    51a8:	ldr	r1, [r1, #8]
    51aa:	cmp	ip, r1
    51ac:	bne.n	519e <_malloc_r+0x39a>
    51ae:	ldr.w	ip, [r1, #12]
    51b2:	ldr	r2, [r7, #4]
    51b4:	str.w	ip, [r4, #12]
    51b8:	str	r1, [r4, #8]
    51ba:	str.w	r4, [ip, #8]
    51be:	str	r4, [r1, #12]
    51c0:	b.n	4ed4 <_malloc_r+0xd0>
    51c2:	adds	r3, r4, r5
    51c4:	orr.w	r7, r2, #1
    51c8:	orr.w	r5, r5, #1
    51cc:	str	r5, [r4, #4]
    51ce:	mov	r0, r6
    51d0:	str	r3, [r1, #20]
    51d2:	str	r3, [r1, #16]
    51d4:	str.w	lr, [r3, #12]
    51d8:	str.w	lr, [r3, #8]
    51dc:	str	r7, [r3, #4]
    51de:	str	r2, [r3, r2]
    51e0:	adds	r4, #8
    51e2:	bl	5378 <__malloc_unlock>
    51e6:	b.n	4f94 <_malloc_r+0x190>
    51e8:	ldr	r2, [r1, #4]
    51ea:	b.n	4ed4 <_malloc_r+0xd0>
    51ec:	add.w	r8, r8, #1
    51f0:	tst.w	r8, #3
    51f4:	add.w	ip, ip, #8
    51f8:	bne.w	4efa <_malloc_r+0xf6>
    51fc:	b.n	5260 <_malloc_r+0x45c>
    51fe:	ldr	r4, [r3, #12]
    5200:	cmp	r3, r4
    5202:	it	eq
    5204:	addeq	r0, #2
    5206:	beq.w	4e74 <_malloc_r+0x70>
    520a:	b.n	4f74 <_malloc_r+0x170>
    520c:	add	r3, r1
    520e:	mov	r4, r1
    5210:	ldr	r2, [r3, #4]
    5212:	ldr	r1, [r1, #12]
    5214:	ldr.w	r5, [r4, #8]!
    5218:	orr.w	r2, r2, #1
    521c:	str	r2, [r3, #4]
    521e:	mov	r0, r6
    5220:	str	r1, [r5, #12]
    5222:	str	r5, [r1, #8]
    5224:	bl	5378 <__malloc_unlock>
    5228:	b.n	4f94 <_malloc_r+0x190>
    522a:	add.w	lr, r3, #92	; 0x5c
    522e:	add.w	r0, r3, #91	; 0x5b
    5232:	mov.w	r3, lr, lsl #1
    5236:	b.n	4e48 <_malloc_r+0x44>
    5238:	lsrs	r2, r3, #6
    523a:	add.w	r1, r2, #57	; 0x39
    523e:	lsls	r1, r1, #1
    5240:	adds	r2, #56	; 0x38
    5242:	b.n	5188 <_malloc_r+0x384>
    5244:	cmp	r4, r7
    5246:	ldr	r3, [pc, #296]	; (5370 <_malloc_r+0x56c>)
    5248:	beq.w	504c <_malloc_r+0x248>
    524c:	ldr	r4, [r3, #8]
    524e:	ldr	r2, [r4, #4]
    5250:	bic.w	r2, r2, #3
    5254:	b.n	510c <_malloc_r+0x308>
    5256:	ldr.w	r3, [r9], #-8
    525a:	cmp	r9, r3
    525c:	bne.w	5364 <_malloc_r+0x560>
    5260:	tst.w	r0, #3
    5264:	add.w	r0, r0, #4294967295
    5268:	bne.n	5256 <_malloc_r+0x452>
    526a:	ldr	r3, [r7, #4]
    526c:	bic.w	r3, r3, r4
    5270:	str	r3, [r7, #4]
    5272:	lsls	r4, r4, #1
    5274:	cmp	r4, r3
    5276:	bhi.w	4ff4 <_malloc_r+0x1f0>
    527a:	cmp	r4, #0
    527c:	beq.w	4ff4 <_malloc_r+0x1f0>
    5280:	tst	r4, r3
    5282:	mov	r0, r8
    5284:	bne.w	4ef2 <_malloc_r+0xee>
    5288:	lsls	r4, r4, #1
    528a:	tst	r4, r3
    528c:	add.w	r0, r0, #4
    5290:	beq.n	5288 <_malloc_r+0x484>
    5292:	b.n	4ef2 <_malloc_r+0xee>
    5294:	cmp.w	r3, #340	; 0x154
    5298:	bhi.n	52cc <_malloc_r+0x4c8>
    529a:	lsrs	r0, r5, #15
    529c:	add.w	lr, r0, #120	; 0x78
    52a0:	mov.w	r3, lr, lsl #1
    52a4:	adds	r0, #119	; 0x77
    52a6:	b.n	4e48 <_malloc_r+0x44>
    52a8:	mov.w	r1, #4096	; 0x1000
    52ac:	b.n	5086 <_malloc_r+0x282>
    52ae:	movs	r1, #1
    52b0:	ldr.w	r3, [r8, #4]
    52b4:	asrs	r2, r2, #2
    52b6:	lsl.w	r2, r1, r2
    52ba:	orrs	r2, r3
    52bc:	str.w	r2, [r8, #4]
    52c0:	mov	r1, ip
    52c2:	b.n	51b4 <_malloc_r+0x3b0>
    52c4:	movs	r3, #1
    52c6:	str.w	r3, [fp, #4]
    52ca:	b.n	5118 <_malloc_r+0x314>
    52cc:	movw	r2, #1364	; 0x554
    52d0:	cmp	r3, r2
    52d2:	bhi.n	5316 <_malloc_r+0x512>
    52d4:	lsrs	r0, r5, #18
    52d6:	add.w	lr, r0, #125	; 0x7d
    52da:	mov.w	r3, lr, lsl #1
    52de:	adds	r0, #124	; 0x7c
    52e0:	b.n	4e48 <_malloc_r+0x44>
    52e2:	adds	r2, #16
    52e4:	b.n	5030 <_malloc_r+0x22c>
    52e6:	cmp	r2, #84	; 0x54
    52e8:	bhi.n	5338 <_malloc_r+0x534>
    52ea:	lsrs	r2, r3, #12
    52ec:	add.w	r1, r2, #111	; 0x6f
    52f0:	lsls	r1, r1, #1
    52f2:	adds	r2, #110	; 0x6e
    52f4:	b.n	5188 <_malloc_r+0x384>
    52f6:	ldr	r4, [r7, #8]
    52f8:	ldr	r2, [r4, #4]
    52fa:	bic.w	r2, r2, #3
    52fe:	b.n	510c <_malloc_r+0x308>
    5300:	ubfx	r0, sl, #0, #12
    5304:	cmp	r0, #0
    5306:	bne.w	505a <_malloc_r+0x256>
    530a:	add	r2, r8
    530c:	ldr	r3, [r7, #8]
    530e:	orr.w	r2, r2, #1
    5312:	str	r2, [r3, #4]
    5314:	b.n	50f0 <_malloc_r+0x2ec>
    5316:	movs	r3, #254	; 0xfe
    5318:	mov.w	lr, #127	; 0x7f
    531c:	movs	r0, #126	; 0x7e
    531e:	b.n	4e48 <_malloc_r+0x44>
    5320:	movs	r2, #1
    5322:	mov.w	r9, #0
    5326:	b.n	50ac <_malloc_r+0x2a8>
    5328:	add.w	r1, r4, #8
    532c:	mov	r0, r6
    532e:	bl	5484 <_free_r>
    5332:	ldr.w	r1, [r9]
    5336:	b.n	50f0 <_malloc_r+0x2ec>
    5338:	cmp.w	r2, #340	; 0x154
    533c:	bhi.n	534a <_malloc_r+0x546>
    533e:	lsrs	r2, r3, #15
    5340:	add.w	r1, r2, #120	; 0x78
    5344:	lsls	r1, r1, #1
    5346:	adds	r2, #119	; 0x77
    5348:	b.n	5188 <_malloc_r+0x384>
    534a:	movw	r1, #1364	; 0x554
    534e:	cmp	r2, r1
    5350:	bhi.n	535e <_malloc_r+0x55a>
    5352:	lsrs	r2, r3, #18
    5354:	add.w	r1, r2, #125	; 0x7d
    5358:	lsls	r1, r1, #1
    535a:	adds	r2, #124	; 0x7c
    535c:	b.n	5188 <_malloc_r+0x384>
    535e:	movs	r1, #254	; 0xfe
    5360:	movs	r2, #126	; 0x7e
    5362:	b.n	5188 <_malloc_r+0x384>
    5364:	ldr	r3, [r7, #4]
    5366:	b.n	5272 <_malloc_r+0x46e>
    5368:	lsrs	r0, r5, #3
    536a:	adds	r3, r0, #1
    536c:	lsls	r3, r3, #1
    536e:	b.n	4f62 <_malloc_r+0x15e>
    5370:	.word	0x1fff11ac

00005374 <__malloc_lock>:
    5374:	bx	lr
    5376:	nop

00005378 <__malloc_unlock>:
    5378:	bx	lr
    537a:	nop

0000537c <_sbrk_r>:
    537c:	push	{r3, r4, r5, lr}
    537e:	ldr	r4, [pc, #28]	; (539c <_sbrk_r+0x20>)
    5380:	movs	r3, #0
    5382:	mov	r5, r0
    5384:	mov	r0, r1
    5386:	str	r3, [r4, #0]
    5388:	bl	4710 <_sbrk>
    538c:	adds	r3, r0, #1
    538e:	beq.n	5392 <_sbrk_r+0x16>
    5390:	pop	{r3, r4, r5, pc}
    5392:	ldr	r3, [r4, #0]
    5394:	cmp	r3, #0
    5396:	beq.n	5390 <_sbrk_r+0x14>
    5398:	str	r3, [r5, #0]
    539a:	pop	{r3, r4, r5, pc}
    539c:	.word	0x1fff1f00

000053a0 <register_fini>:
    53a0:	ldr	r3, [pc, #8]	; (53ac <register_fini+0xc>)
    53a2:	cbz	r3, 53aa <register_fini+0xa>
    53a4:	ldr	r0, [pc, #8]	; (53b0 <register_fini+0x10>)
    53a6:	b.w	53b4 <atexit>
    53aa:	bx	lr
    53ac:	.word	0x00000000
    53b0:	.word	0x000053c1

000053b4 <atexit>:
    53b4:	movs	r3, #0
    53b6:	mov	r1, r0
    53b8:	mov	r2, r3
    53ba:	mov	r0, r3
    53bc:	b.w	5654 <__register_exitproc>

000053c0 <__libc_fini_array>:
    53c0:	push	{r3, r4, r5, lr}
    53c2:	ldr	r5, [pc, #28]	; (53e0 <__libc_fini_array+0x20>)
    53c4:	ldr	r4, [pc, #28]	; (53e4 <__libc_fini_array+0x24>)
    53c6:	subs	r4, r5, r4
    53c8:	asrs	r4, r4, #2
    53ca:	beq.n	53d8 <__libc_fini_array+0x18>
    53cc:	subs	r4, #1
    53ce:	ldr.w	r3, [r5, #-4]!
    53d2:	blx	r3
    53d4:	cmp	r4, #0
    53d6:	bne.n	53cc <__libc_fini_array+0xc>
    53d8:	ldmia.w	sp!, {r3, r4, r5, lr}
    53dc:	b.w	5a90 <__init_array_end>
	...

000053e8 <_malloc_trim_r>:
    53e8:	push	{r3, r4, r5, r6, r7, lr}
    53ea:	ldr	r7, [pc, #140]	; (5478 <_malloc_trim_r+0x90>)
    53ec:	mov	r4, r1
    53ee:	mov	r6, r0
    53f0:	bl	5374 <__malloc_lock>
    53f4:	ldr	r3, [r7, #8]
    53f6:	ldr	r5, [r3, #4]
    53f8:	bic.w	r5, r5, #3
    53fc:	subs	r1, r5, r4
    53fe:	addw	r1, r1, #4079	; 0xfef
    5402:	bic.w	r1, r1, #4080	; 0xff0
    5406:	bic.w	r1, r1, #15
    540a:	sub.w	r4, r1, #4096	; 0x1000
    540e:	cmp.w	r4, #4096	; 0x1000
    5412:	blt.n	5424 <_malloc_trim_r+0x3c>
    5414:	movs	r1, #0
    5416:	mov	r0, r6
    5418:	bl	537c <_sbrk_r>
    541c:	ldr	r3, [r7, #8]
    541e:	add	r3, r5
    5420:	cmp	r0, r3
    5422:	beq.n	542e <_malloc_trim_r+0x46>
    5424:	mov	r0, r6
    5426:	bl	5378 <__malloc_unlock>
    542a:	movs	r0, #0
    542c:	pop	{r3, r4, r5, r6, r7, pc}
    542e:	negs	r1, r4
    5430:	mov	r0, r6
    5432:	bl	537c <_sbrk_r>
    5436:	adds	r0, #1
    5438:	beq.n	5456 <_malloc_trim_r+0x6e>
    543a:	ldr	r3, [pc, #64]	; (547c <_malloc_trim_r+0x94>)
    543c:	ldr	r2, [r7, #8]
    543e:	ldr	r1, [r3, #0]
    5440:	subs	r5, r5, r4
    5442:	orr.w	r5, r5, #1
    5446:	mov	r0, r6
    5448:	subs	r1, r1, r4
    544a:	str	r5, [r2, #4]
    544c:	str	r1, [r3, #0]
    544e:	bl	5378 <__malloc_unlock>
    5452:	movs	r0, #1
    5454:	pop	{r3, r4, r5, r6, r7, pc}
    5456:	movs	r1, #0
    5458:	mov	r0, r6
    545a:	bl	537c <_sbrk_r>
    545e:	ldr	r2, [r7, #8]
    5460:	subs	r3, r0, r2
    5462:	cmp	r3, #15
    5464:	ble.n	5424 <_malloc_trim_r+0x3c>
    5466:	ldr	r4, [pc, #24]	; (5480 <_malloc_trim_r+0x98>)
    5468:	ldr	r1, [pc, #16]	; (547c <_malloc_trim_r+0x94>)
    546a:	ldr	r4, [r4, #0]
    546c:	orr.w	r3, r3, #1
    5470:	subs	r0, r0, r4
    5472:	str	r3, [r2, #4]
    5474:	str	r0, [r1, #0]
    5476:	b.n	5424 <_malloc_trim_r+0x3c>
    5478:	.word	0x1fff11ac
    547c:	.word	0x1fff1d94
    5480:	.word	0x1fff15b8

00005484 <_free_r>:
    5484:	cmp	r1, #0
    5486:	beq.n	5514 <_free_r+0x90>
    5488:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    548c:	mov	r5, r1
    548e:	mov	r8, r0
    5490:	bl	5374 <__malloc_lock>
    5494:	ldr.w	r7, [r5, #-4]
    5498:	ldr	r1, [pc, #424]	; (5644 <_free_r+0x1c0>)
    549a:	bic.w	r3, r7, #1
    549e:	sub.w	r4, r5, #8
    54a2:	adds	r2, r4, r3
    54a4:	ldr	r6, [r1, #8]
    54a6:	ldr	r0, [r2, #4]
    54a8:	cmp	r2, r6
    54aa:	bic.w	r0, r0, #3
    54ae:	beq.n	5576 <_free_r+0xf2>
    54b0:	lsls	r6, r7, #31
    54b2:	str	r0, [r2, #4]
    54b4:	bmi.n	54ce <_free_r+0x4a>
    54b6:	ldr.w	r7, [r5, #-8]
    54ba:	subs	r4, r4, r7
    54bc:	add.w	lr, r1, #8
    54c0:	ldr	r5, [r4, #8]
    54c2:	cmp	r5, lr
    54c4:	add	r3, r7
    54c6:	beq.n	55a8 <_free_r+0x124>
    54c8:	ldr	r7, [r4, #12]
    54ca:	str	r7, [r5, #12]
    54cc:	str	r5, [r7, #8]
    54ce:	adds	r5, r2, r0
    54d0:	ldr	r5, [r5, #4]
    54d2:	lsls	r5, r5, #31
    54d4:	bpl.n	555c <_free_r+0xd8>
    54d6:	orr.w	r2, r3, #1
    54da:	str	r2, [r4, #4]
    54dc:	str	r3, [r4, r3]
    54de:	cmp.w	r3, #512	; 0x200
    54e2:	bcs.n	5516 <_free_r+0x92>
    54e4:	lsrs	r3, r3, #3
    54e6:	adds	r2, r3, #1
    54e8:	ldr	r5, [r1, #4]
    54ea:	ldr.w	r7, [r1, r2, lsl #3]
    54ee:	str	r7, [r4, #8]
    54f0:	movs	r0, #1
    54f2:	asrs	r3, r3, #2
    54f4:	lsl.w	r3, r0, r3
    54f8:	add.w	r0, r1, r2, lsl #3
    54fc:	orrs	r5, r3
    54fe:	subs	r0, #8
    5500:	str	r0, [r4, #12]
    5502:	str	r5, [r1, #4]
    5504:	str.w	r4, [r1, r2, lsl #3]
    5508:	str	r4, [r7, #12]
    550a:	mov	r0, r8
    550c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5510:	b.w	5378 <__malloc_unlock>
    5514:	bx	lr
    5516:	lsrs	r2, r3, #9
    5518:	cmp	r2, #4
    551a:	bhi.n	55c4 <_free_r+0x140>
    551c:	lsrs	r2, r3, #6
    551e:	add.w	r7, r2, #57	; 0x39
    5522:	lsls	r7, r7, #1
    5524:	add.w	r5, r2, #56	; 0x38
    5528:	add.w	r0, r1, r7, lsl #2
    552c:	ldr.w	r2, [r1, r7, lsl #2]
    5530:	ldr	r1, [pc, #272]	; (5644 <_free_r+0x1c0>)
    5532:	subs	r0, #8
    5534:	cmp	r0, r2
    5536:	beq.n	55d4 <_free_r+0x150>
    5538:	ldr	r1, [r2, #4]
    553a:	bic.w	r1, r1, #3
    553e:	cmp	r3, r1
    5540:	bcs.n	5548 <_free_r+0xc4>
    5542:	ldr	r2, [r2, #8]
    5544:	cmp	r0, r2
    5546:	bne.n	5538 <_free_r+0xb4>
    5548:	ldr	r0, [r2, #12]
    554a:	str	r0, [r4, #12]
    554c:	str	r2, [r4, #8]
    554e:	str	r4, [r0, #8]
    5550:	str	r4, [r2, #12]
    5552:	mov	r0, r8
    5554:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5558:	b.w	5378 <__malloc_unlock>
    555c:	ldr	r5, [r2, #8]
    555e:	ldr	r7, [pc, #232]	; (5648 <_free_r+0x1c4>)
    5560:	cmp	r5, r7
    5562:	add	r3, r0
    5564:	beq.n	55e6 <_free_r+0x162>
    5566:	ldr	r0, [r2, #12]
    5568:	str	r0, [r5, #12]
    556a:	orr.w	r2, r3, #1
    556e:	str	r5, [r0, #8]
    5570:	str	r2, [r4, #4]
    5572:	str	r3, [r4, r3]
    5574:	b.n	54de <_free_r+0x5a>
    5576:	lsls	r7, r7, #31
    5578:	add	r3, r0
    557a:	bmi.n	558c <_free_r+0x108>
    557c:	ldr.w	r2, [r5, #-8]
    5580:	subs	r4, r4, r2
    5582:	add	r3, r2
    5584:	ldr	r0, [r4, #8]
    5586:	ldr	r2, [r4, #12]
    5588:	str	r2, [r0, #12]
    558a:	str	r0, [r2, #8]
    558c:	ldr	r2, [pc, #188]	; (564c <_free_r+0x1c8>)
    558e:	ldr	r2, [r2, #0]
    5590:	orr.w	r0, r3, #1
    5594:	cmp	r3, r2
    5596:	str	r0, [r4, #4]
    5598:	str	r4, [r1, #8]
    559a:	bcc.n	550a <_free_r+0x86>
    559c:	ldr	r3, [pc, #176]	; (5650 <_free_r+0x1cc>)
    559e:	mov	r0, r8
    55a0:	ldr	r1, [r3, #0]
    55a2:	bl	53e8 <_malloc_trim_r>
    55a6:	b.n	550a <_free_r+0x86>
    55a8:	adds	r1, r2, r0
    55aa:	ldr	r1, [r1, #4]
    55ac:	lsls	r1, r1, #31
    55ae:	bmi.n	563a <_free_r+0x1b6>
    55b0:	ldr	r1, [r2, #8]
    55b2:	ldr	r2, [r2, #12]
    55b4:	str	r2, [r1, #12]
    55b6:	add	r3, r0
    55b8:	orr.w	r0, r3, #1
    55bc:	str	r1, [r2, #8]
    55be:	str	r0, [r4, #4]
    55c0:	str	r3, [r4, r3]
    55c2:	b.n	550a <_free_r+0x86>
    55c4:	cmp	r2, #20
    55c6:	bhi.n	55f8 <_free_r+0x174>
    55c8:	add.w	r7, r2, #92	; 0x5c
    55cc:	lsls	r7, r7, #1
    55ce:	add.w	r5, r2, #91	; 0x5b
    55d2:	b.n	5528 <_free_r+0xa4>
    55d4:	asrs	r2, r5, #2
    55d6:	ldr	r3, [r1, #4]
    55d8:	movs	r5, #1
    55da:	lsl.w	r2, r5, r2
    55de:	orrs	r3, r2
    55e0:	str	r3, [r1, #4]
    55e2:	mov	r2, r0
    55e4:	b.n	554a <_free_r+0xc6>
    55e6:	orr.w	r2, r3, #1
    55ea:	str	r4, [r1, #20]
    55ec:	str	r4, [r1, #16]
    55ee:	str	r5, [r4, #12]
    55f0:	str	r5, [r4, #8]
    55f2:	str	r2, [r4, #4]
    55f4:	str	r3, [r4, r3]
    55f6:	b.n	550a <_free_r+0x86>
    55f8:	cmp	r2, #84	; 0x54
    55fa:	bhi.n	560a <_free_r+0x186>
    55fc:	lsrs	r2, r3, #12
    55fe:	add.w	r7, r2, #111	; 0x6f
    5602:	lsls	r7, r7, #1
    5604:	add.w	r5, r2, #110	; 0x6e
    5608:	b.n	5528 <_free_r+0xa4>
    560a:	cmp.w	r2, #340	; 0x154
    560e:	bhi.n	561e <_free_r+0x19a>
    5610:	lsrs	r2, r3, #15
    5612:	add.w	r7, r2, #120	; 0x78
    5616:	lsls	r7, r7, #1
    5618:	add.w	r5, r2, #119	; 0x77
    561c:	b.n	5528 <_free_r+0xa4>
    561e:	movw	r0, #1364	; 0x554
    5622:	cmp	r2, r0
    5624:	bhi.n	5634 <_free_r+0x1b0>
    5626:	lsrs	r2, r3, #18
    5628:	add.w	r7, r2, #125	; 0x7d
    562c:	lsls	r7, r7, #1
    562e:	add.w	r5, r2, #124	; 0x7c
    5632:	b.n	5528 <_free_r+0xa4>
    5634:	movs	r7, #254	; 0xfe
    5636:	movs	r5, #126	; 0x7e
    5638:	b.n	5528 <_free_r+0xa4>
    563a:	orr.w	r2, r3, #1
    563e:	str	r2, [r4, #4]
    5640:	str	r3, [r4, r3]
    5642:	b.n	550a <_free_r+0x86>
    5644:	.word	0x1fff11ac
    5648:	.word	0x1fff11b4
    564c:	.word	0x1fff15b4
    5650:	.word	0x1fff1d90

00005654 <__register_exitproc>:
    5654:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5658:	ldr	r4, [pc, #148]	; (56f0 <__register_exitproc+0x9c>)
    565a:	ldr	r5, [r4, #0]
    565c:	ldr.w	r4, [r5, #328]	; 0x148
    5660:	mov	r6, r0
    5662:	mov	r8, r1
    5664:	mov	sl, r2
    5666:	mov	r9, r3
    5668:	cbz	r4, 56dc <__register_exitproc+0x88>
    566a:	ldr	r0, [r4, #4]
    566c:	cmp	r0, #31
    566e:	bgt.n	56a0 <__register_exitproc+0x4c>
    5670:	adds	r3, r0, #1
    5672:	cbz	r6, 5692 <__register_exitproc+0x3e>
    5674:	add.w	r5, r4, r0, lsl #2
    5678:	movs	r2, #1
    567a:	str.w	sl, [r5, #136]	; 0x88
    567e:	ldr.w	r1, [r4, #392]	; 0x188
    5682:	lsls	r2, r0
    5684:	orrs	r1, r2
    5686:	cmp	r6, #2
    5688:	str.w	r1, [r4, #392]	; 0x188
    568c:	str.w	r9, [r5, #264]	; 0x108
    5690:	beq.n	56d0 <__register_exitproc+0x7c>
    5692:	adds	r0, #2
    5694:	str	r3, [r4, #4]
    5696:	str.w	r8, [r4, r0, lsl #2]
    569a:	movs	r0, #0
    569c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    56a0:	ldr	r3, [pc, #80]	; (56f4 <__register_exitproc+0xa0>)
    56a2:	cbz	r3, 56e6 <__register_exitproc+0x92>
    56a4:	mov.w	r0, #400	; 0x190
    56a8:	bl	4df4 <malloc>
    56ac:	mov	r4, r0
    56ae:	cbz	r0, 56e6 <__register_exitproc+0x92>
    56b0:	ldr.w	r3, [r5, #328]	; 0x148
    56b4:	movs	r7, #0
    56b6:	stmia.w	r0, {r3, r7}
    56ba:	str.w	r4, [r5, #328]	; 0x148
    56be:	mov	r0, r7
    56c0:	movs	r3, #1
    56c2:	str.w	r7, [r4, #392]	; 0x188
    56c6:	str.w	r7, [r4, #396]	; 0x18c
    56ca:	cmp	r6, #0
    56cc:	beq.n	5692 <__register_exitproc+0x3e>
    56ce:	b.n	5674 <__register_exitproc+0x20>
    56d0:	ldr.w	r1, [r4, #396]	; 0x18c
    56d4:	orrs	r2, r1
    56d6:	str.w	r2, [r4, #396]	; 0x18c
    56da:	b.n	5692 <__register_exitproc+0x3e>
    56dc:	add.w	r4, r5, #332	; 0x14c
    56e0:	str.w	r4, [r5, #328]	; 0x148
    56e4:	b.n	566a <__register_exitproc+0x16>
    56e6:	mov.w	r0, #4294967295
    56ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    56ee:	nop
    56f0:	.word	0x00005a74
    56f4:	.word	0x00004df5
    56f8:	.word	0x6f486e6f
    56fc:	.word	0x0000646c
    5700:	.word	0x72506e6f
    5704:	.word	0x00737365
    5708:	.word	0x4f4c4556
    570c:	.word	0x59544943
    5710:	.word	0x00000000
    5714:	.word	0x45544f4e
    5718:	.word	0x474e454c
    571c:	.word	0x00004854
    5720:	.word	0x43544950
    5724:	.word	0x00000048
    5728:	.word	0x65526e6f
    572c:	.word	0x7361656c
    5730:	.word	0x00000065
    5734:	.word	0x6b636954
    5738:	.word	0x206e6920
    573c:	.word	0x6e617274
    5740:	.word	0x726f7073
    5744:	.word	0x00000074
    5748:	.word	0x6b636954
    574c:	.word	0x206e6920
    5750:	.word	0x75716573
    5754:	.word	0x65636e65
    5758:	.word	0x00000000
    575c:	.word	0x6b636954
    5760:	.word	0x206e6920
    5764:	.word	0x746e6f63
    5768:	.word	0x6c6c6f72
    576c:	.word	0x00007265
    5770:	.word	0x7370704f
    5774:	.word	0x6e61202c
    5778:	.word	0x6b6e7520
    577c:	.word	0x6e776f6e
    5780:	.word	0x44494d20
    5784:	.word	0x656d2049
    5788:	.word	0x67617373
    578c:	.word	0x79742065
    5790:	.word	0x00216570
    5794:	.word	0x74696e49
    5798:	.word	0x53206465
    579c:	.word	0x65757165
    57a0:	.word	0x0065636e

000057a4 <pin2sc1a>:
    57a4:	................
    57b4:	................
    57c4:	................
    57d4:	................
    57e4:	........

000057ec <digital_pin_to_info_PGM>:
    57ec:	@..C@..@D..CD..@
    57fc:	...C...@0..C0..@
    580c:	4..C4..@...C...@
    581c:	...C...@...C...@
    582c:	...C...@...C...@
    583c:	...C...@...C...@
    584c:	...C...@...C...@
    585c:	...C...@...C...@
    586c:	...C...@...C...@
    587c:	...C...@...C...@
    588c:	...C...@...C...@
    589c:	...C...@...C...@
    58ac:	h .Ch..@...C...@
    58bc:	8..C8..@<..C<..@
    58cc:	@..C@..@H..CH..@
    58dc:	L..CL..@(..C(..@
    58ec:	,..C,..@` .C`..@
    58fc:	d .Cd..@ ..C ..@
    590c:	$..C$..@(..C(..@
    591c:	,..C,..@D..CD..@
    592c:	p..Cp..@t..Ct..@
    593c:	h..Ch..@P..CP..@
    594c:	X..CX..@\..C\..@
    595c:	T..CT..@ ..C ..@
    596c:	$..C$..@...C...@
    597c:	...C...@8..C8..@
    598c:	4..C4..@0..C0..@
    599c:	<..C<..@,..C,..@
    59ac:	( .C(..@, .C,..@
    59bc:	. .C...@. .C...@
    59cc:	. .C...@. .C...@
    59dc:	. .C...@. .C...@

000059ec <vtable for usb_serial_class>:
	...
    59f4:	.B...B...B...B..
    5a04:	.B...B...B...B..
    5a14:	....

00005a18 <usb_endpoint_config_table>:
    5a18:	........

00005a20 <usb_descriptor_list>:
    5a20:	................
    5a30:	............`...
    5a40:	................
    5a50:	....H...........
    5a60:	d...............
    5a70:	....

00005a74 <_global_impure_ptr>:
    5a74:	....

00005a78 <_init>:
    5a78:	push	{r3, r4, r5, r6, r7, lr}
    5a7a:	nop
    5a7c:	pop	{r3, r4, r5, r6, r7}
    5a7e:	pop	{r3}
    5a80:	mov	lr, r3
    5a82:	bx	lr

00005a84 <__init_array_start>:
    5a84:	.word	0x000053a1

00005a88 <__frame_dummy_init_array_entry>:
    5a88:	5...M#..

Disassembly of section .fini:

00005a90 <_fini>:
    5a90:	push	{r3, r4, r5, r6, r7, lr}
    5a92:	nop


.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000050f0 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15bc l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003dbc l     F .text	0000000c startup_default_early_hook
00003dc8 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15bc l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15c0 l       .bss	00000000 object.8610
000050e8 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00001af8 l     F .text	000002dc _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff1865 l     O .bss	00000001 tx_noautoflush
1fff1868 l     O .bss	00000004 tx_packet
1fff186c l     O .bss	00000001 transmit_previous_timeout
1fff1870 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
000020a8 l     F .text	00000144 wait_for_cal
1fff1875 l     O .bss	00000001 analog_right_shift
1fff1876 l     O .bss	00000001 calibrating
00004e04 l     O .text	00000048 pin2sc1a
1fff0c68 l     O .data	00000001 analog_config_bits
1fff1877 l     O .bss	00000001 analogReadBusyADC1
1fff1878 l     O .bss	00000001 analogReadBusyADC0
1fff1879 l     O .bss	00000001 analog_reference_internal
1fff0c69 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
000023c8 l     F .text	0000004c digitalWrite.part.1
00002414 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
000026f4 l     F .text	00000048 sysex_byte
1fff1894 l     O .bss	00000001 tx_noautoflush
1fff18c0 l     O .bss	00000004 tx_packet
1fff18c4 l     O .bss	00000001 transmit_previous_timeout
1fff18cc l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c6c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff18e0 l     O .bss	00000004 ep0_tx_ptr
1fff18e4 l     O .bss	00000014 rx_last
1fff18f8 l     O .bss	00000002 ep0_tx_len
1fff18fc l     O .bss	00000040 ep0_rx0_buf
1fff193c l     O .bss	00000014 rx_first
1fff1950 l     O .bss	00000001 ep0_tx_data_toggle
1fff1954 l     O .bss	00000040 ep0_rx1_buf
1fff1994 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff19a8 l     O .bss	00000014 tx_last
1fff19bc l     O .bss	00000008 setup
1fff19c4 l     O .bss	00000001 ep0_tx_bdt_bank
1fff19c8 l     O .bss	00000008 reply_buffer
1fff19d4 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff19d9 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff19dc l     O .bss	00000004 rts_pin
1fff19e0 l     O .bss	00000001 rx_buffer_head
1fff19e1 l     O .bss	00000001 rx_buffer_tail
1fff19e4 l     O .bss	00000028 tx_buffer
1fff1a0c l     O .bss	00000040 rx_buffer
1fff1a4c l     O .bss	00000001 transmitting
1fff1a4d l     O .bss	00000001 tx_buffer_tail
1fff1a50 l     O .bss	00000004 transmit_pin
1fff1a54 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1a58 l     O .bss	00000004 rts_pin
1fff1a5c l     O .bss	00000001 transmitting
1fff1a5d l     O .bss	00000001 rx_buffer_tail
1fff1a60 l     O .bss	00000028 tx_buffer
1fff1a88 l     O .bss	00000040 rx_buffer
1fff1ac8 l     O .bss	00000001 rx_buffer_head
1fff1ac9 l     O .bss	00000001 tx_buffer_tail
1fff1acc l     O .bss	00000004 transmit_pin
1fff1ad0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1ad4 l     O .bss	00000004 rts_pin
1fff1ad8 l     O .bss	00000001 rx_buffer_head
1fff1ad9 l     O .bss	00000001 rx_buffer_tail
1fff1adc l     O .bss	00000028 tx_buffer
1fff1b04 l     O .bss	00000040 rx_buffer
1fff1b44 l     O .bss	00000001 transmitting
1fff1b45 l     O .bss	00000001 tx_buffer_tail
1fff1b48 l     O .bss	00000004 transmit_pin
1fff1b4c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1b50 l     O .bss	00000004 rts_pin
1fff1b54 l     O .bss	00000001 rx_buffer_head
1fff1b55 l     O .bss	00000001 rx_buffer_tail
1fff1b58 l     O .bss	00000040 tx_buffer
1fff1b98 l     O .bss	00000040 rx_buffer
1fff1bd8 l     O .bss	00000001 transmitting
1fff1bd9 l     O .bss	00000001 tx_buffer_tail
1fff1bdc l     O .bss	00000004 transmit_pin
1fff1be0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1be4 l     O .bss	00000004 rts_pin
1fff1be8 l     O .bss	00000001 rx_buffer_head
1fff1be9 l     O .bss	00000001 rx_buffer_tail
1fff1bec l     O .bss	00000028 tx_buffer
1fff1c14 l     O .bss	00000040 rx_buffer
1fff1c54 l     O .bss	00000001 transmitting
1fff1c55 l     O .bss	00000001 tx_buffer_tail
1fff1c58 l     O .bss	00000004 transmit_pin
1fff1c5c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c84 l     O .data	00000012 device_descriptor
1fff0cb0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1c60 l     O .bss	00000004 rts_pin
1fff1c64 l     O .bss	00000001 rx_buffer_head
1fff1c65 l     O .bss	00000001 rx_buffer_tail
1fff1c68 l     O .bss	00000028 tx_buffer
1fff1c90 l     O .bss	00000040 rx_buffer
1fff1cd0 l     O .bss	00000001 transmitting
1fff1cd1 l     O .bss	00000001 tx_buffer_tail
1fff1cd4 l     O .bss	00000004 transmit_pin
1fff1cd8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004a5c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d80 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15bc l       .bss	00000000 __bss_start__
1fff1e74 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00003db4  w    F .text	00000006 adc0_isr
00001e4c g     F .text	0000001c usb_serial_available
00003c74 g     F .text	00000020 serial4_available
00003920  w    F .text	000000c4 yield
1fff0c98 g     O .data	00000018 usb_string_manufacturer_name_default
00003e60 g     F .text	00000020 serial_available
1fff1898 g     O .bss	00000004 usb_midi_handleProgramChange
00003d6c  w    F .text	00000048 hard_fault_isr
00003db4  w    F .text	00000006 dma_ch6_isr
00003a14 g     F .text	00000020 Print::println()
00003b48 g     F .text	00000020 serial2_available
00003db4  w    F .text	00000006 uart0_lon_isr
00002d34 g     F .text	000000e8 usb_rx_memory
000039e4  w    F .text	00000002 serialEvent5()
00003db4  w    F .text	00000006 dma_ch8_isr
00003f8c g     F .text	00000020 serial6_available
00004a34 g     F .text	00000002 __malloc_unlock
1fff18ac g     O .bss	00000004 usb_midi_handleAfterTouch
000021ec g     F .text	000000e0 analog_init
00002e1c g     F .text	00000084 usb_tx
00003db4  w    F .text	00000006 portcd_isr
1fff18bc g     O .bss	00000004 usb_midi_handleSysExComplete
000043ac g     F .text	00000098 MillisTimer::runFromTimer()
00003db4  w    F .text	00000006 can1_rx_warn_isr
000050f4 g       .fini	00000000 __exidx_end
00003db4  w    F .text	00000006 dma_error_isr
1fff1d38 g     O .bss	00000001 usb_midi_msg_type
1fff1cf0 g     O .bss	00000001 EventResponder::runningFromYield
00003db4  w    F .text	00000006 i2c0_isr
00004454 g     F .text	0000000c __errno
00003db4  w    F .text	00000006 portd_isr
00003db4  w    F .text	00000006 enet_error_isr
1fff1cdc g     O .bss	00000004 EventResponder::firstInterrupt
00003db4  w    F .text	00000006 tpm1_isr
00003a00  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00004e4c g     O .text	00000200 digital_pin_to_info_PGM
1fff1e70 g     O .bss	00000004 errno
000050f4 g       .fini	00000000 _etext
1fff15bc g       .bss	00000000 _sbss
00003a4c  w    F .text	00000002 serialEvent6()
1fff18a8 g     O .bss	00000004 usb_midi_handleVelocityChange
000024bc g     F .text	0000001c digitalRead
00003db4  w    F .text	00000006 porte_isr
00000494 g     F .text	00001664 loop
00003db4  w    F .text	00000006 portb_isr
1fff170c g     O .bss	00000014 step3
000027d8 g     F .text	0000002c usb_midi_flush_output
00003db4  w    F .text	00000006 spi1_isr
00003c94 g     F .text	000000d8 uart3_status_isr
00004258  w    F .text	00000002 serialEvent1()
1fff184c g     O .bss	00000018 led4
00003db4  w    F .text	00000006 mcm_isr
00004344 g     F .text	00000068 MillisTimer::addToActiveList()
00002804 g     F .text	0000043c usb_midi_read
1fff1884 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1ce0 g     O .bss	00000004 EventResponder::lastInterrupt
00003b68 g     F .text	0000010c uart1_status_isr
1fff1d3a g     O .bss	00000002 usb_midi_msg_sysex_len
00003db4  w    F .text	00000006 randnum_isr
1fff188c g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff187c g     O .bss	00000004 systick_millis_count
00003d6c  w    F .text	00000048 bus_fault_isr
00003db4  w    F .text	00000006 watchdog_isr
00003db4  w    F .text	00000006 i2c1_isr
1fff19d0 g     O .bss	00000001 usb_configuration
00003db4  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00003a34  w    F .text	00000002 serialEvent2()
00003db4  w    F .text	00000006 i2c2_isr
1fff0c98  w    O .data	00000018 usb_string_manufacturer_name
1fff1e64 g     O .bss	0000000a usb_rx_byte_count_data
00003db4  w    F .text	00000006 pit1_isr
000044b0 g     F .text	00000010 malloc
00003db4  w    F .text	00000006 dma_ch4_isr
00003db4  w    F .text	00000006 software_isr
00003db4  w    F .text	00000006 dma_ch7_isr
000042e0  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00003850 g     F .text	000000d0 usb_init
00003db4  w    F .text	00000006 lptmr_isr
1fff1d00 g     O .bss	00000004 __malloc_top_pad
0000248c g     F .text	00000024 rtc_set
1fff169c g     O .bss	00000024 button5
1fff1678 g     O .bss	00000024 button4
1fff0c40 g       .data	00000000 _sdata
1fff18dc g     O .bss	00000004 usb_midi_handleNoteOn
00003e2c g     F .text	00000034 kinetis_hsrun_enable
00004a38 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00001dd4 g     F .text	00000048 usb_serial_getchar
00003db4  w    F .text	00000006 can1_bus_off_isr
00003db4  w    F .text	00000006 ftm2_isr
1fff1d2c g     O .bss	00000008 usb_cdc_line_coding
000024b0 g     F .text	0000000a digitalWrite
00003db4  w    F .text	00000006 uart5_status_isr
00003fac g     F .text	000000e4 lpuart0_status_isr
1fff1ce8 g     O .bss	00000004 EventResponder::lastYield
00005078 g     O .text	00000005 usb_endpoint_config_table
00003db4  w    F .text	00000006 dma_ch9_isr
00003db4  w    F .text	00000006 pit2_isr
00004160 g     F .text	00000020 serial3_available
1fff1720 g     O .bss	00000014 step4
1fff1cfc g     O .bss	00000004 __malloc_max_sbrked_mem
000024d8 g     F .text	0000000a pinMode
00002c80 g     F .text	0000004c usb_free
00003db4  w    F .text	00000006 i2c3_isr
1fff1804 g     O .bss	00000018 led1
1fff18a4 g     O .bss	00000004 usb_midi_handleSysExPartial
000050f4 g       .fini	00000000 __exidx_start
00003db4  w    F .text	00000006 pit0_isr
1fff1d3c g     O .bss	00000001 usb_midi_msg_data1
1fff1cec g     O .bss	00000004 EventResponder::firstYield
000050d4 g     O .text	00000004 _global_impure_ptr
00003db4  w    F .text	00000006 can1_error_isr
00004460 g     F .text	00000050 __libc_init_array
1fff1e74 g       .bss	00000000 __bss_end
00003db4  w    F .text	00000006 can0_wakeup_isr
00003db4  w    F .text	00000006 flash_cmd_isr
1fff17a4 g     O .bss	0000001c knob5
000039e8  w    F .text	00000004 usb_serial_class::clear()
00004180 g     F .text	000000d8 uart2_status_isr
00003dcc g     F .text	0000002c _sbrk
1fff1cf4 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c80 g     O .data	00000004 __brkval
1fff1874 g     O .bss	00000001 usb_cdc_line_rtsdtr
00002060 g     F .text	00000048 usb_serial_flush_callback
000050d8 g     F .text	00000000 _init
1fff0c40 g     O .data	00000010 steps
00003db4  w    F .text	00000006 svcall_isr
00003db4  w    F .text	00000006 dma_ch15_isr
00003db4  w    F .text	00000006 uart1_error_isr
00004a7c g     F .text	00000028 __libc_fini_array
00003db4  w    F .text	00000006 usbhs_phy_isr
1fff1e74 g       .bss	00000000 _ebss
00003db4 g     F .text	00000006 unused_isr
00003db4  w    F .text	00000006 spi0_isr
00003db4  w    F .text	00000006 dma_ch3_isr
00003db4  w    F .text	00000006 flash_error_isr
1fff1750 g     O .bss	0000001c knob2
00003a50 g     F .text	00000020 serial5_available
00003db4  w    F .text	00000006 uart5_error_isr
00003db4  w    F .text	00000006 rtc_seconds_isr
00003db4  w    F .text	00000006 pdb_isr
00003d6c  w    F .text	00000048 usage_fault_isr
00003db4  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00003db4  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1d34 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff17f0 g     O .bss	00000010 transport
1fff0c50 g     O .data	00000018 leds
00004444 g     F .text	00000010 systick_isr
00003db4  w    F .text	00000006 rtc_alarm_isr
00003db4  w    F .text	00000006 dma_ch2_isr
1fff0c70 g     O .data	00000010 Serial
00003db4  w    F .text	00000006 ftm1_isr
00003a08  w    F .text	00000006 usb_serial_class::write(unsigned char)
00003dbc  w    F .text	0000000c startup_early_hook
00003db4  w    F .text	00000006 dma_ch13_isr
00003db4  w    F .text	00000006 uart2_error_isr
00001e1c g     F .text	00000030 usb_serial_peekchar
1fff0d64 g     O .data	00000016 usb_string_serial_number_default
00003d6c g     F .text	00000048 fault_isr
00004b40 g     F .text	000001d0 _free_r
1fff18c8 g     O .bss	00000004 usb_midi_handleStop
00003db4  w    F .text	00000006 usb_charge_isr
000039f8  w    F .text	00000004 usb_serial_class::flush()
00003db4  w    F .text	00000006 cmt_isr
00003db4  w    F .text	00000006 usbhs_isr
1fff18d8 g     O .bss	00000004 usb_midi_handleControlChange
1fff15b8 g     O .data	00000004 __malloc_sbrk_base
000039f0  w    F .text	00000004 usb_serial_class::read()
00003db4  w    F .text	00000006 ftm3_isr
00003db4  w    F .text	00000006 tsi0_isr
1fff15f0 g     O .bss	00000018 led6
1fff1734 g     O .bss	0000001c knob1
00003db4  w    F .text	00000006 spi2_isr
00003a38  w    F .text	00000002 serialEvent4()
00003a10  w    F .text	00000002 serialEvent()
1fff1951 g     O .bss	00000001 usb_reboot_timer
00004d10 g     F .text	000000a4 __register_exitproc
00001e68 g     F .text	00000038 usb_serial_flush_input
00001fa8 g     F .text	00000018 usb_serial_putchar
1fff1d04 g     O .bss	00000028 __malloc_current_mallinfo
00003db4  w    F .text	00000006 can0_bus_off_isr
1fff15d8 g     O .bss	00000018 led5
1fff19c5 g     O .bss	00000001 usb_rx_memory_needed
00002ea0 g     F .text	000009b0 usb_isr
1fff16e4 g     O .bss	00000014 step1
1fff18d4 g     O .bss	00000004 usb_midi_handleNoteOff
0000504c  w    O .text	00000028 vtable for usb_serial_class
1fff176c g     O .bss	0000001c knob3
00003db4  w    F .text	00000006 uart3_error_isr
1fff1ce4 g     O .bss	00000004 MillisTimer::listActive
00003db4  w    F .text	00000006 porta_isr
1fff1608 g     O .bss	00000001 controller
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00003db4  w    F .text	00000006 low_voltage_isr
1fff1630 g     O .bss	00000024 button2
1fff11ac g     O .data	00000408 __malloc_av_
00003db4  w    F .text	00000006 can0_error_isr
00002588 g     F .text	0000016c _init_Teensyduino_internal_
00002008 g     F .text	00000058 usb_serial_flush_output
00003db4  w    F .text	00000006 dma_ch12_isr
00004a30 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00003db4  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00003db4  w    F .text	00000006 pit3_isr
00003db4  w    F .text	00000006 enet_rx_isr
00003db4  w    F .text	00000006 portc_isr
00003a3c g     F .text	00000010 main
1fff1cf8 g     O .bss	00000004 __malloc_max_total_mem
1fff1834 g     O .bss	00000018 led3
00003d6c  w    F .text	00000048 memmanage_fault_isr
00004090 g     F .text	00000084 usb_init_serialnumber
1fff1800 g     O .bss	00000001 currentMode
000050f0 g       .text	00000000 __init_array_end
000044c0 g     F .text	00000570 _malloc_r
00003db4  w    F .text	00000006 debugmonitor_isr
1fff18a0 g     O .bss	00000004 usb_midi_handleSongPosition
00004260 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1890 g     O .bss	00000004 usb_midi_handleContinue
1fff1d3d g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00003db4  w    F .text	00000006 cmp1_isr
1fff1654 g     O .bss	00000024 button3
00003db4  w    F .text	00000006 ftm0_isr
00004aa4 g     F .text	0000009c _malloc_trim_r
1fff0d60 g     O .data	00000004 string0
00001ea0 g     F .text	00000108 usb_serial_write
00003dc8  w    F .text	00000002 startup_late_hook
000039f4  w    F .text	00000004 usb_serial_class::available()
1fff1d3e g     O .bss	00000001 usb_midi_msg_cable
1fff0d48  w    O .data	00000018 usb_string_product_name
000024e4 g     F .text	000000a4 delay
00003db4  w    F .text	00000006 tpm0_isr
000050f0 g     F .fini	00000000 _fini
1fff16f8 g     O .bss	00000014 step2
00003db4  w    F .text	00000006 i2s0_rx_isr
00003db4  w    F .text	00000006 uart4_error_isr
0000273c g     F .text	0000009c usb_midi_write_packed
00004a70 g     F .text	0000000c atexit
00003db4  w    F .text	00000006 can0_message_isr
1fff11a8 g     O .data	00000004 _impure_ptr
00003db4  w    F .text	00000006 can1_message_isr
00003db4  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff18b8 g     O .bss	00000004 usb_midi_handleTuneRequest
000050e4 g       .text	00000000 __preinit_array_end
00003db4  w    F .text	00000006 sdhc_isr
1fff1d3f g     O .bss	00000001 usb_midi_msg_channel
00000490 g     F .text	00000002 setup
00005080 g     O .text	00000054 usb_descriptor_list
00002ccc g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1788 g     O .bss	0000001c knob4
00003db4  w    F .text	00000006 dma_ch10_isr
1fff17c0 g     O .bss	00000030 sequence1
1fff18b0 g     O .bss	00000004 usb_midi_handleStart
00003db4  w    F .text	00000006 uart0_error_isr
00002c40 g     F .text	00000040 usb_malloc
00003db4  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00001fc0 g     F .text	00000048 usb_serial_write_buffer_free
00003db4  w    F .text	00000006 enet_timer_isr
1fff16c0 g     O .bss	00000024 button6
1fff160c g     O .bss	00000024 button1
1fff15bc g       .data	00000000 _edata
00003db4  w    F .text	00000006 i2s0_tx_isr
00003db4  w    F .text	00000006 adc1_isr
000039fc  w    F .text	00000004 usb_serial_class::availableForWrite()
00003db4  w    F .text	00000006 cmp0_isr
1fff1880 g     O .bss	00000004 usb_midi_handleClock
00004114 g     F .text	0000004c ultoa
000042fc g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15b4 g     O .data	00000004 __malloc_trim_threshold
000039ec  w    F .text	00000004 usb_serial_class::peek()
1fff1864 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff189c g     O .bss	00000004 usb_midi_handlePitchChange
00003db4  w    F .text	00000006 pit_isr
1fff18b4 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00003db4  w    F .text	00000006 dac0_isr
000050e4 g       .text	00000000 __init_array_start
00003db4  w    F .text	00000006 can1_tx_warn_isr
000022cc g     F .text	000000fc analogRead
1fff1d40 g     O .bss	00000122 usb_midi_msg_sysex
00003e80 g     F .text	0000010c uart0_status_isr
00003db4  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d48 g     O .data	00000018 usb_string_product_name_default
00003db4  w    F .text	00000006 dma_ch1_isr
00002d08 g     F .text	0000002c usb_tx_packet_count
00003db4  w    F .text	00000006 dma_ch5_isr
00003db4  w    F .text	00000006 can0_rx_warn_isr
00003db4  w    F .text	00000006 can0_tx_warn_isr
00003a70 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00003df8 g     F .text	00000034 kinetis_hsrun_disable
000050e4 g       .text	00000000 __preinit_array_start
0000425c  w    F .text	00000002 serialEvent3()
1fff18d0 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff181c g     O .bss	00000018 led2
00003db4  w    F .text	00000006 cmp2_isr
00004340 g     F .text	00000004 pendablesrvreq_isr
00003db4  w    F .text	00000006 wakeup_isr
00003db4  w    F .text	00000006 cmp3_isr
1fff1888 g     O .bss	00000004 usb_midi_handleActiveSensing
00003db4  w    F .text	00000006 tpm2_isr
00003db4  w    F .text	00000006 dma_ch0_isr
1fff0d64  w    O .data	00000016 usb_string_serial_number
00003db4  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... .....=..m=..
      10:	m=..m=..m=..m=..
      20:	m=..m=..m=...=..
      30:	.=..m=..AC..ED..
      40:	.=...=...=...=..
      50:	.=...=...=...=..
      60:	.=...=...=...=..
      70:	.=...=...=...=..
      80:	.=...=...=...=..
      90:	.=...=...=...=..
      a0:	.=...=...=...=..
      b0:	.=...=...=...>..
      c0:	.=..i;...=...A..
      d0:	.=...<...=...=..
      e0:	.=...=...=...=..
      f0:	.=...=...=...=..
     100:	.=...=...=...=..
     110:	.=.......=...=..
     120:	.=...=...=...=..
     130:	.=...=...=...=..
     140:	.=...=..q:...=..
     150:	.=...=...=...=..
     160:	.=...=...=...=..
     170:	.=...=...=...=..
     180:	.=...=...=...=..
     190:	.=...=...?...=..
     1a0:	.=...=...=...=..
     1b0:	.=...=...=...=..
     1c0:	.=...=...=...=..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	3dbc <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	2588 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	248c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	248c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	4460 <__libc_init_array>

	startup_late_hook();
     33a:	bl	3dc8 <startup_late_hook>
	main();
     33e:	bl	3a3c <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15bc
     374:	.word	0x000050f0
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15bc
     380:	.word	0x1fff1e74
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15bc
     42c:	.word	0x00000000
     430:	.word	0x000050f4

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15c0
     460:	.word	0x000050f4
     464:	.word	0x1fff15bc
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #75	; 0x4b
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	24d8 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	24b0 <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob2(A1, sequence1, transport, SECOND, 1);
Knob knob3(A2, sequence1, transport, THIRD, 2);
Knob knob4(A3, sequence1, transport, FOURTH, 3);
Knob knob5(A4, sequence1, transport, FIFTH, 4);

void setup() {
     490:	bx	lr
     492:	nop

00000494 <loop>:
  Serial.begin(9600);
}

void loop() {
     494:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     498:	movs	r0, #0
     49a:	sub	sp, #236	; 0xec
     49c:	bl	2804 <usb_midi_read>
  if (usbMIDI.read()) {
     4a0:	cmp	r0, #0
     4a2:	bne.w	d8c <loop+0x8f8>
     4a6:	ldr	r4, [pc, #664]	; (740 <loop+0x2ac>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4a8:	ldr	r6, [pc, #664]	; (744 <loop+0x2b0>)
     4aa:	ldrb.w	r0, [r6, #32]
     4ae:	bl	24bc <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b2:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b4:	str	r0, [r6, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b6:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b8:	mov	r5, r0
     4ba:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4bc:	beq.w	dbc <loop+0x928>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c0:	ldr	r3, [r4, #0]
     4c2:	str	r3, [sp, #132]	; 0x84
	return ret;
     4c4:	ldr	r3, [sp, #132]	; 0x84
        m_lastDebounceTime = millis();
     4c6:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c8:	ldr	r1, [r4, #0]
     4ca:	str	r1, [sp, #128]	; 0x80
	return ret;
     4cc:	ldr	r1, [sp, #128]	; 0x80
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ce:	ldr.w	r8, [pc, #624]	; 740 <loop+0x2ac>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4d2:	cmp	r3, r1
     4d4:	beq.n	53a <loop+0xa6>
        if (reading != m_state) {
     4d6:	ldr	r3, [r6, #4]
     4d8:	ldr	r7, [pc, #616]	; (744 <loop+0x2b0>)
     4da:	cmp	r5, r3
     4dc:	beq.w	dda <loop+0x946>
          m_state = reading;
     4e0:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     4e2:	cbnz	r5, 53a <loop+0xa6>
     4e4:	ldrb	r3, [r7, #16]
     4e6:	cmp	r3, #0
     4e8:	bne.w	1382 <loop+0xeee>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     4ec:	ldrb	r3, [r7, #17]
        m_led.toggle();
     4ee:	ldr	r5, [r7, #24]
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     4f0:	ldr	r0, [pc, #596]	; (748 <loop+0x2b4>)
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     4f2:	cmp	r3, #0
     4f4:	bne.w	15b0 <loop+0x111c>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     4f8:	ldr	r3, [r5, #4]
     4fa:	clz	r3, r3
     4fe:	lsrs	r3, r3, #5
     500:	str	r3, [r5, #4]
     502:	movs	r1, #8
     504:	bl	1ea0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     508:	ldr	r0, [pc, #576]	; (74c <loop+0x2b8>)
     50a:	bl	3a14 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
     50e:	ldrb	r1, [r5, #4]
     510:	ldrb	r0, [r5, #0]
     512:	bl	24b0 <digitalWrite>

      if (blinking) {
     516:	ldrb	r3, [r5, #16]
     518:	cbz	r3, 528 <loop+0x94>
        digitalWrite(m_pin, !m_state);
     51a:	ldr	r1, [r5, #4]
     51c:	ldrb	r0, [r5, #0]
     51e:	clz	r1, r1
     522:	lsrs	r1, r1, #5
     524:	bl	24b0 <digitalWrite>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
     528:	ldr	r3, [r6, #28]
     52a:	ldr	r1, [r6, #0]
     52c:	ldr	r2, [r6, #12]
     52e:	ldr.w	r1, [r3, r1, lsl #2]
      m_velocity = 100;
      m_length = 4;
    };

    void toggle () {
      m_state = !m_state;
     532:	ldrb	r3, [r1, #4]
     534:	eor.w	r3, r3, #1
     538:	strb	r3, [r1, #4]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     53a:	ldr	r5, [pc, #532]	; (750 <loop+0x2bc>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     53c:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     53e:	ldrb.w	r0, [r5, #32]
     542:	bl	24bc <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     546:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     548:	str	r0, [r5, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     54a:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     54c:	mov	r6, r0
     54e:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     550:	beq.w	dca <loop+0x936>
     554:	ldr	r3, [r4, #0]
     556:	str	r3, [sp, #124]	; 0x7c
	return ret;
     558:	ldr	r3, [sp, #124]	; 0x7c
        m_lastDebounceTime = millis();
     55a:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     55c:	ldr	r1, [r4, #0]
     55e:	str	r1, [sp, #120]	; 0x78
	return ret;
     560:	ldr	r1, [sp, #120]	; 0x78
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     562:	ldr.w	r8, [pc, #476]	; 740 <loop+0x2ac>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     566:	cmp	r1, r3
     568:	beq.n	5ce <loop+0x13a>
        if (reading != m_state) {
     56a:	ldr	r3, [r5, #4]
     56c:	ldr	r7, [pc, #480]	; (750 <loop+0x2bc>)
     56e:	cmp	r6, r3
     570:	beq.w	dd4 <loop+0x940>
          m_state = reading;
     574:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     576:	cbnz	r6, 5ce <loop+0x13a>
     578:	ldrb	r3, [r7, #16]
     57a:	cmp	r3, #0
     57c:	bne.w	13f8 <loop+0xf64>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     580:	ldrb	r3, [r7, #17]
        m_led.toggle();
     582:	ldr	r6, [r7, #24]
     584:	ldr	r0, [pc, #448]	; (748 <loop+0x2b4>)
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     586:	cmp	r3, #0
     588:	bne.w	15f4 <loop+0x1160>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     58c:	ldr	r3, [r6, #4]
     58e:	clz	r3, r3
     592:	lsrs	r3, r3, #5
     594:	str	r3, [r6, #4]
     596:	movs	r1, #8
     598:	bl	1ea0 <usb_serial_write>
     59c:	ldr	r0, [pc, #428]	; (74c <loop+0x2b8>)
     59e:	bl	3a14 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
     5a2:	ldrb	r1, [r6, #4]
     5a4:	ldrb	r0, [r6, #0]
     5a6:	bl	24b0 <digitalWrite>

      if (blinking) {
     5aa:	ldrb	r3, [r6, #16]
     5ac:	cbz	r3, 5bc <loop+0x128>
        digitalWrite(m_pin, !m_state);
     5ae:	ldr	r1, [r6, #4]
     5b0:	ldrb	r0, [r6, #0]
     5b2:	clz	r1, r1
     5b6:	lsrs	r1, r1, #5
     5b8:	bl	24b0 <digitalWrite>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
     5bc:	ldr	r3, [r5, #28]
     5be:	ldr	r1, [r5, #0]
     5c0:	ldr	r2, [r5, #12]
     5c2:	ldr.w	r1, [r3, r1, lsl #2]
     5c6:	ldrb	r3, [r1, #4]
     5c8:	eor.w	r3, r3, #1
     5cc:	strb	r3, [r1, #4]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ce:	ldr	r6, [pc, #388]	; (754 <loop+0x2c0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5d0:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5d2:	ldrb.w	r0, [r6, #32]
     5d6:	bl	24bc <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5da:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5dc:	str	r0, [r6, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5de:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5e0:	mov	r5, r0
     5e2:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5e4:	beq.w	dc6 <loop+0x932>
     5e8:	ldr	r3, [r4, #0]
     5ea:	str	r3, [sp, #116]	; 0x74
	return ret;
     5ec:	ldr	r3, [sp, #116]	; 0x74
        m_lastDebounceTime = millis();
     5ee:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5f0:	ldr	r1, [r4, #0]
     5f2:	str	r1, [sp, #112]	; 0x70
	return ret;
     5f4:	ldr	r1, [sp, #112]	; 0x70
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5f6:	ldr.w	r8, [pc, #328]	; 740 <loop+0x2ac>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5fa:	cmp	r1, r3
     5fc:	beq.n	662 <loop+0x1ce>
        if (reading != m_state) {
     5fe:	ldr	r3, [r6, #4]
     600:	ldr	r7, [pc, #336]	; (754 <loop+0x2c0>)
     602:	cmp	r5, r3
     604:	beq.w	dd0 <loop+0x93c>
          m_state = reading;
     608:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     60a:	cbnz	r5, 662 <loop+0x1ce>
     60c:	ldrb	r3, [r7, #16]
     60e:	cmp	r3, #0
     610:	bne.w	130c <loop+0xe78>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     614:	ldrb	r3, [r7, #17]
        m_led.toggle();
     616:	ldr	r5, [r7, #24]
     618:	ldr	r0, [pc, #300]	; (748 <loop+0x2b4>)
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     61a:	cmp	r3, #0
     61c:	bne.w	156c <loop+0x10d8>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     620:	ldr	r3, [r5, #4]
     622:	clz	r3, r3
     626:	lsrs	r3, r3, #5
     628:	str	r3, [r5, #4]
     62a:	movs	r1, #8
     62c:	bl	1ea0 <usb_serial_write>
     630:	ldr	r0, [pc, #280]	; (74c <loop+0x2b8>)
     632:	bl	3a14 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
     636:	ldrb	r1, [r5, #4]
     638:	ldrb	r0, [r5, #0]
     63a:	bl	24b0 <digitalWrite>

      if (blinking) {
     63e:	ldrb	r3, [r5, #16]
     640:	cbz	r3, 650 <loop+0x1bc>
        digitalWrite(m_pin, !m_state);
     642:	ldr	r1, [r5, #4]
     644:	ldrb	r0, [r5, #0]
     646:	clz	r1, r1
     64a:	lsrs	r1, r1, #5
     64c:	bl	24b0 <digitalWrite>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
     650:	ldr	r3, [r6, #28]
     652:	ldr	r1, [r6, #0]
     654:	ldr	r2, [r6, #12]
     656:	ldr.w	r1, [r3, r1, lsl #2]
     65a:	ldrb	r3, [r1, #4]
     65c:	eor.w	r3, r3, #1
     660:	strb	r3, [r1, #4]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     662:	ldr	r5, [pc, #244]	; (758 <loop+0x2c4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     664:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     666:	ldrb.w	r0, [r5, #32]
     66a:	bl	24bc <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     66e:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     670:	str	r0, [r5, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     672:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     674:	mov	r6, r0
     676:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     678:	beq.w	dc2 <loop+0x92e>
     67c:	ldr	r3, [r4, #0]
     67e:	str	r3, [sp, #108]	; 0x6c
	return ret;
     680:	ldr	r3, [sp, #108]	; 0x6c
        m_lastDebounceTime = millis();
     682:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     684:	ldr	r1, [r4, #0]
     686:	str	r1, [sp, #104]	; 0x68
	return ret;
     688:	ldr	r1, [sp, #104]	; 0x68
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     68a:	ldr.w	r8, [pc, #180]	; 740 <loop+0x2ac>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     68e:	cmp	r1, r3
     690:	beq.n	6f6 <loop+0x262>
        if (reading != m_state) {
     692:	ldr	r3, [r5, #4]
     694:	ldr	r7, [pc, #192]	; (758 <loop+0x2c4>)
     696:	cmp	r6, r3
     698:	beq.w	de0 <loop+0x94c>
          m_state = reading;
     69c:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     69e:	cbnz	r6, 6f6 <loop+0x262>
     6a0:	ldrb	r3, [r7, #16]
     6a2:	cmp	r3, #0
     6a4:	bne.w	1280 <loop+0xdec>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     6a8:	ldrb	r3, [r7, #17]
        m_led.toggle();
     6aa:	ldr	r6, [r7, #24]
     6ac:	ldr	r0, [pc, #152]	; (748 <loop+0x2b4>)
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     6ae:	cmp	r3, #0
     6b0:	bne.w	1528 <loop+0x1094>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     6b4:	ldr	r3, [r6, #4]
     6b6:	clz	r3, r3
     6ba:	lsrs	r3, r3, #5
     6bc:	str	r3, [r6, #4]
     6be:	movs	r1, #8
     6c0:	bl	1ea0 <usb_serial_write>
     6c4:	ldr	r0, [pc, #132]	; (74c <loop+0x2b8>)
     6c6:	bl	3a14 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
     6ca:	ldrb	r1, [r6, #4]
     6cc:	ldrb	r0, [r6, #0]
     6ce:	bl	24b0 <digitalWrite>

      if (blinking) {
     6d2:	ldrb	r3, [r6, #16]
     6d4:	cbz	r3, 6e4 <loop+0x250>
        digitalWrite(m_pin, !m_state);
     6d6:	ldr	r1, [r6, #4]
     6d8:	ldrb	r0, [r6, #0]
     6da:	clz	r1, r1
     6de:	lsrs	r1, r1, #5
     6e0:	bl	24b0 <digitalWrite>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
     6e4:	ldr	r3, [r5, #28]
     6e6:	ldr	r1, [r5, #0]
     6e8:	ldr	r2, [r5, #12]
     6ea:	ldr.w	r1, [r3, r1, lsl #2]
     6ee:	ldrb	r3, [r1, #4]
     6f0:	eor.w	r3, r3, #1
     6f4:	strb	r3, [r1, #4]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     6f6:	ldr	r6, [pc, #100]	; (75c <loop+0x2c8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     6f8:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     6fa:	ldrb.w	r0, [r6, #32]
     6fe:	bl	24bc <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     702:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     704:	str	r0, [r6, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     706:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     708:	mov	r5, r0
     70a:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     70c:	beq.w	db4 <loop+0x920>
     710:	ldr	r3, [r4, #0]
     712:	str	r3, [sp, #100]	; 0x64
	return ret;
     714:	ldr	r3, [sp, #100]	; 0x64
        m_lastDebounceTime = millis();
     716:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     718:	ldr	r1, [r4, #0]
     71a:	str	r1, [sp, #96]	; 0x60
	return ret;
     71c:	ldr	r1, [sp, #96]	; 0x60
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     71e:	ldr.w	r8, [pc, #32]	; 740 <loop+0x2ac>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     722:	cmp	r1, r3
     724:	beq.n	7ae <loop+0x31a>
        if (reading != m_state) {
     726:	ldr	r3, [r6, #4]
     728:	ldr	r7, [pc, #48]	; (75c <loop+0x2c8>)
     72a:	cmp	r5, r3
     72c:	beq.w	de4 <loop+0x950>
          m_state = reading;
     730:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     732:	cmp	r5, #0
     734:	bne.n	7ae <loop+0x31a>
     736:	ldrb	r3, [r7, #16]
     738:	cmp	r3, #0
     73a:	bne.w	120a <loop+0xd76>
     73e:	b.n	760 <loop+0x2cc>
     740:	.word	0x1fff187c
     744:	.word	0x1fff160c
     748:	.word	0x00004db4
     74c:	.word	0x1fff0c70
     750:	.word	0x1fff1630
     754:	.word	0x1fff1654
     758:	.word	0x1fff1678
     75c:	.word	0x1fff169c
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     760:	ldrb	r3, [r7, #17]
        m_led.toggle();
     762:	ldr	r5, [r7, #24]
     764:	ldr	r0, [pc, #684]	; (a14 <loop+0x580>)
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     766:	cmp	r3, #0
     768:	bne.w	1644 <loop+0x11b0>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     76c:	ldr	r3, [r5, #4]
     76e:	clz	r3, r3
     772:	lsrs	r3, r3, #5
     774:	str	r3, [r5, #4]
     776:	movs	r1, #8
     778:	bl	1ea0 <usb_serial_write>
     77c:	ldr	r0, [pc, #664]	; (a18 <loop+0x584>)
     77e:	bl	3a14 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
     782:	ldrb	r1, [r5, #4]
     784:	ldrb	r0, [r5, #0]
     786:	bl	24b0 <digitalWrite>

      if (blinking) {
     78a:	ldrb	r3, [r5, #16]
     78c:	cbz	r3, 79c <loop+0x308>
        digitalWrite(m_pin, !m_state);
     78e:	ldr	r1, [r5, #4]
     790:	ldrb	r0, [r5, #0]
     792:	clz	r1, r1
     796:	lsrs	r1, r1, #5
     798:	bl	24b0 <digitalWrite>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
     79c:	ldr	r3, [r6, #28]
     79e:	ldr	r1, [r6, #0]
     7a0:	ldr	r2, [r6, #12]
     7a2:	ldr.w	r1, [r3, r1, lsl #2]
     7a6:	ldrb	r3, [r1, #4]
     7a8:	eor.w	r3, r3, #1
     7ac:	strb	r3, [r1, #4]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     7ae:	ldr	r5, [pc, #620]	; (a1c <loop+0x588>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     7b0:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     7b2:	ldrb.w	r0, [r5, #32]
     7b6:	bl	24bc <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     7ba:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     7bc:	str	r0, [r5, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     7be:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     7c0:	mov	r6, r0
     7c2:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     7c4:	beq.w	db8 <loop+0x924>
     7c8:	ldr	r3, [r4, #0]
     7ca:	str	r3, [sp, #92]	; 0x5c
	return ret;
     7cc:	ldr	r3, [sp, #92]	; 0x5c
        m_lastDebounceTime = millis();
     7ce:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7d0:	ldr	r1, [r4, #0]
     7d2:	str	r1, [sp, #88]	; 0x58
	return ret;
     7d4:	ldr	r1, [sp, #88]	; 0x58
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7d6:	ldr.w	r8, [pc, #588]	; a24 <loop+0x590>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     7da:	cmp	r1, r3
     7dc:	beq.n	842 <loop+0x3ae>
        if (reading != m_state) {
     7de:	ldr	r3, [r5, #4]
     7e0:	ldr	r7, [pc, #568]	; (a1c <loop+0x588>)
     7e2:	cmp	r6, r3
     7e4:	beq.w	de8 <loop+0x954>
          m_state = reading;
     7e8:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     7ea:	cbnz	r6, 842 <loop+0x3ae>
     7ec:	ldrb	r3, [r7, #16]
     7ee:	cmp	r3, #0
     7f0:	bne.w	146e <loop+0xfda>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     7f4:	ldrb	r3, [r7, #17]
        m_led.toggle();
     7f6:	ldr	r6, [r7, #24]
     7f8:	ldr	r0, [pc, #536]	; (a14 <loop+0x580>)
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     7fa:	cmp	r3, #0
     7fc:	bne.w	14e4 <loop+0x1050>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     800:	ldr	r3, [r6, #4]
     802:	clz	r3, r3
     806:	lsrs	r3, r3, #5
     808:	str	r3, [r6, #4]
     80a:	movs	r1, #8
     80c:	bl	1ea0 <usb_serial_write>
     810:	ldr	r0, [pc, #516]	; (a18 <loop+0x584>)
     812:	bl	3a14 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
     816:	ldrb	r1, [r6, #4]
     818:	ldrb	r0, [r6, #0]
     81a:	bl	24b0 <digitalWrite>

      if (blinking) {
     81e:	ldrb	r3, [r6, #16]
     820:	cbz	r3, 830 <loop+0x39c>
        digitalWrite(m_pin, !m_state);
     822:	ldr	r1, [r6, #4]
     824:	ldrb	r0, [r6, #0]
     826:	clz	r1, r1
     82a:	lsrs	r1, r1, #5
     82c:	bl	24b0 <digitalWrite>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
        m_sequence.m_steps[m_id - 1]->toggle();
     830:	ldr	r3, [r5, #28]
     832:	ldr	r1, [r5, #0]
     834:	ldr	r2, [r5, #12]
     836:	ldr.w	r1, [r3, r1, lsl #2]
     83a:	ldrb	r3, [r1, #4]
     83c:	eor.w	r3, r3, #1
     840:	strb	r3, [r1, #4]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
     842:	ldr	r6, [pc, #476]	; (a20 <loop+0x58c>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     844:	str	r2, [r5, #8]
     846:	ldrb	r3, [r6, #16]
     848:	cmp	r3, #0
     84a:	beq.w	d44 <loop+0x8b0>
     84e:	ldr	r3, [r4, #0]
     850:	str	r3, [sp, #80]	; 0x50
	return ret;
     852:	ldr	r3, [sp, #80]	; 0x50
     854:	ldr	r1, [r6, #8]
     856:	ldr	r2, [r6, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     858:	ldr	r7, [pc, #456]	; (a24 <loop+0x590>)
     85a:	subs	r3, r3, r1
     85c:	cmp	r2, r3
     85e:	bcc.w	d24 <loop+0x890>
     862:	ldr	r5, [pc, #452]	; (a28 <loop+0x594>)
     864:	ldrb	r3, [r5, #16]
     866:	cmp	r3, #0
     868:	beq.w	cbc <loop+0x828>
     86c:	ldr	r3, [r4, #0]
     86e:	str	r3, [sp, #68]	; 0x44
	return ret;
     870:	ldr	r3, [sp, #68]	; 0x44
     872:	ldr	r1, [r5, #8]
     874:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     876:	ldr	r7, [pc, #428]	; (a24 <loop+0x590>)
     878:	subs	r3, r3, r1
     87a:	cmp	r2, r3
     87c:	bcc.w	c9c <loop+0x808>
     880:	ldr	r5, [pc, #424]	; (a2c <loop+0x598>)
     882:	ldrb	r3, [r5, #16]
     884:	cmp	r3, #0
     886:	beq.w	c54 <loop+0x7c0>
     88a:	ldr	r3, [r4, #0]
     88c:	str	r3, [sp, #56]	; 0x38
	return ret;
     88e:	ldr	r3, [sp, #56]	; 0x38
     890:	ldr	r1, [r5, #8]
     892:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     894:	ldr	r7, [pc, #396]	; (a24 <loop+0x590>)
     896:	subs	r3, r3, r1
     898:	cmp	r2, r3
     89a:	bcc.w	c34 <loop+0x7a0>
     89e:	ldr	r5, [pc, #400]	; (a30 <loop+0x59c>)
     8a0:	ldrb	r3, [r5, #16]
     8a2:	cmp	r3, #0
     8a4:	beq.w	bec <loop+0x758>
     8a8:	ldr	r3, [r4, #0]
     8aa:	str	r3, [sp, #44]	; 0x2c
	return ret;
     8ac:	ldr	r3, [sp, #44]	; 0x2c
     8ae:	ldr	r1, [r5, #8]
     8b0:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8b2:	ldr	r7, [pc, #368]	; (a24 <loop+0x590>)
     8b4:	subs	r3, r3, r1
     8b6:	cmp	r2, r3
     8b8:	bcc.w	bcc <loop+0x738>
     8bc:	ldr	r5, [pc, #372]	; (a34 <loop+0x5a0>)
     8be:	ldrb	r3, [r5, #16]
     8c0:	cmp	r3, #0
     8c2:	beq.w	b84 <loop+0x6f0>
     8c6:	ldr	r3, [r4, #0]
     8c8:	str	r3, [sp, #32]
	return ret;
     8ca:	ldr	r3, [sp, #32]
     8cc:	ldr	r1, [r5, #8]
     8ce:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8d0:	ldr	r7, [pc, #336]	; (a24 <loop+0x590>)
     8d2:	subs	r3, r3, r1
     8d4:	cmp	r2, r3
     8d6:	bcc.w	b64 <loop+0x6d0>
     8da:	ldr	r5, [pc, #348]	; (a38 <loop+0x5a4>)
     8dc:	ldrb	r3, [r5, #16]
     8de:	cmp	r3, #0
     8e0:	beq.w	b20 <loop+0x68c>
     8e4:	ldr	r3, [r4, #0]
     8e6:	str	r3, [sp, #20]
	return ret;
     8e8:	ldr	r3, [sp, #20]
     8ea:	ldr	r1, [r5, #8]
     8ec:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8ee:	ldr	r7, [pc, #308]	; (a24 <loop+0x590>)
     8f0:	subs	r3, r3, r1
     8f2:	cmp	r2, r3
     8f4:	bcc.w	b00 <loop+0x66c>
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     8f8:	ldr	r4, [pc, #320]	; (a3c <loop+0x5a8>)
     8fa:	ldrb	r0, [r4, #0]
     8fc:	bl	22cc <analogRead>

      int diff = abs(m_value - m_lastValue);
     900:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     902:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     904:	cmp	r0, r3
     906:	beq.n	952 <loop+0x4be>
     908:	subs	r3, r0, r3
     90a:	cmp	r3, #0
     90c:	it	lt
     90e:	neglt	r3, r3
     910:	cmp	r3, #10
     912:	ble.n	952 <loop+0x4be>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     914:	ldrb	r3, [r4, #24]
     916:	cmp	r3, #4
     918:	beq.w	ee8 <loop+0xa54>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     91c:	ldr	r3, [pc, #288]	; (a40 <loop+0x5ac>)
     91e:	ldrb	r3, [r3, #0]
     920:	cmp	r3, #1
     922:	beq.w	10f2 <loop+0xc5e>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     926:	cmp	r3, #0
     928:	beq.w	e36 <loop+0x9a2>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     92c:	cmp	r3, #2
     92e:	bne.n	950 <loop+0x4bc>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     930:	ldr	r2, [r4, #16]
     932:	ldr	r1, [r4, #12]
      m_controller.controlChange(0, 123, 127);
    };

    void controlLength (int value) {
      int newValue = map(value, 0, 1023, 24, 1);
      m_length = newValue;
     934:	mvn.w	r3, #21
     938:	mul.w	r3, r3, r0
     93c:	cmp	r3, #0
     93e:	add.w	r2, r2, r1, lsl #2
     942:	it	lt
     944:	addwlt	r3, r3, #1023	; 0x3ff
     948:	ldr	r2, [r2, #4]
     94a:	asrs	r3, r3, #10
     94c:	adds	r3, #24
     94e:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     950:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     952:	ldr	r4, [pc, #240]	; (a44 <loop+0x5b0>)
     954:	ldrb	r0, [r4, #0]
     956:	bl	22cc <analogRead>

      int diff = abs(m_value - m_lastValue);
     95a:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     95c:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     95e:	cmp	r0, r3
     960:	beq.n	9ac <loop+0x518>
     962:	subs	r3, r0, r3
     964:	cmp	r3, #0
     966:	it	lt
     968:	neglt	r3, r3
     96a:	cmp	r3, #10
     96c:	ble.n	9ac <loop+0x518>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     96e:	ldrb	r3, [r4, #24]
     970:	cmp	r3, #4
     972:	beq.w	f04 <loop+0xa70>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     976:	ldr	r3, [pc, #200]	; (a40 <loop+0x5ac>)
     978:	ldrb	r3, [r3, #0]
     97a:	cmp	r3, #1
     97c:	beq.w	109e <loop+0xc0a>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     980:	cmp	r3, #0
     982:	beq.w	eae <loop+0xa1a>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     986:	cmp	r3, #2
     988:	bne.n	9aa <loop+0x516>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     98a:	ldr	r2, [r4, #16]
     98c:	ldr	r1, [r4, #12]
     98e:	mvn.w	r3, #21
     992:	mul.w	r3, r3, r0
     996:	cmp	r3, #0
     998:	add.w	r2, r2, r1, lsl #2
     99c:	it	lt
     99e:	addwlt	r3, r3, #1023	; 0x3ff
     9a2:	ldr	r2, [r2, #4]
     9a4:	asrs	r3, r3, #10
     9a6:	adds	r3, #24
     9a8:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     9aa:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     9ac:	ldr	r4, [pc, #152]	; (a48 <loop+0x5b4>)
     9ae:	ldrb	r0, [r4, #0]
     9b0:	bl	22cc <analogRead>

      int diff = abs(m_value - m_lastValue);
     9b4:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     9b6:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     9b8:	cmp	r0, r3
     9ba:	beq.n	a06 <loop+0x572>
     9bc:	subs	r3, r0, r3
     9be:	cmp	r3, #0
     9c0:	it	lt
     9c2:	neglt	r3, r3
     9c4:	cmp	r3, #10
     9c6:	ble.n	a06 <loop+0x572>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     9c8:	ldrb	r3, [r4, #24]
     9ca:	cmp	r3, #4
     9cc:	beq.w	f3c <loop+0xaa8>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     9d0:	ldr	r3, [pc, #108]	; (a40 <loop+0x5ac>)
     9d2:	ldrb	r3, [r3, #0]
     9d4:	cmp	r3, #1
     9d6:	beq.w	10ba <loop+0xc26>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     9da:	cmp	r3, #0
     9dc:	beq.w	e90 <loop+0x9fc>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     9e0:	cmp	r3, #2
     9e2:	bne.n	a04 <loop+0x570>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     9e4:	ldr	r2, [r4, #16]
     9e6:	ldr	r1, [r4, #12]
     9e8:	mvn.w	r3, #21
     9ec:	mul.w	r3, r3, r0
     9f0:	cmp	r3, #0
     9f2:	add.w	r2, r2, r1, lsl #2
     9f6:	it	lt
     9f8:	addwlt	r3, r3, #1023	; 0x3ff
     9fc:	ldr	r2, [r2, #4]
     9fe:	asrs	r3, r3, #10
     a00:	adds	r3, #24
     a02:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     a04:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     a06:	ldr	r4, [pc, #68]	; (a4c <loop+0x5b8>)
     a08:	ldrb	r0, [r4, #0]
     a0a:	bl	22cc <analogRead>

      int diff = abs(m_value - m_lastValue);
     a0e:	ldr	r3, [r4, #8]
     a10:	b.n	a50 <loop+0x5bc>
     a12:	nop
     a14:	.word	0x00004db4
     a18:	.word	0x1fff0c70
     a1c:	.word	0x1fff16c0
     a20:	.word	0x1fff1804
     a24:	.word	0x1fff187c
     a28:	.word	0x1fff181c
     a2c:	.word	0x1fff1834
     a30:	.word	0x1fff184c
     a34:	.word	0x1fff15d8
     a38:	.word	0x1fff15f0
     a3c:	.word	0x1fff1734
     a40:	.word	0x1fff1800
     a44:	.word	0x1fff1750
     a48:	.word	0x1fff176c
     a4c:	.word	0x1fff1788
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     a50:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     a52:	cmp	r0, r3
     a54:	beq.n	aa0 <loop+0x60c>
     a56:	subs	r3, r0, r3
     a58:	cmp	r3, #0
     a5a:	it	lt
     a5c:	neglt	r3, r3
     a5e:	cmp	r3, #10
     a60:	ble.n	aa0 <loop+0x60c>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     a62:	ldrb	r3, [r4, #24]
     a64:	cmp	r3, #4
     a66:	beq.w	f20 <loop+0xa8c>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     a6a:	ldr	r3, [pc, #664]	; (d04 <loop+0x870>)
     a6c:	ldrb	r3, [r3, #0]
     a6e:	cmp	r3, #1
     a70:	beq.w	10d6 <loop+0xc42>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     a74:	cmp	r3, #0
     a76:	beq.w	e54 <loop+0x9c0>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     a7a:	cmp	r3, #2
     a7c:	bne.n	a9e <loop+0x60a>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     a7e:	ldr	r2, [r4, #16]
     a80:	ldr	r1, [r4, #12]
     a82:	mvn.w	r3, #21
     a86:	mul.w	r3, r3, r0
     a8a:	cmp	r3, #0
     a8c:	add.w	r2, r2, r1, lsl #2
     a90:	it	lt
     a92:	addwlt	r3, r3, #1023	; 0x3ff
     a96:	ldr	r2, [r2, #4]
     a98:	asrs	r3, r3, #10
     a9a:	adds	r3, #24
     a9c:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     a9e:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     aa0:	ldr	r4, [pc, #612]	; (d08 <loop+0x874>)
     aa2:	ldrb	r0, [r4, #0]
     aa4:	bl	22cc <analogRead>

      int diff = abs(m_value - m_lastValue);
     aa8:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     aaa:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     aac:	cmp	r0, r3
     aae:	beq.n	afa <loop+0x666>
     ab0:	subs	r3, r0, r3
     ab2:	cmp	r3, #0
     ab4:	it	lt
     ab6:	neglt	r3, r3
     ab8:	cmp	r3, #10
     aba:	ble.n	afa <loop+0x666>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     abc:	ldrb	r3, [r4, #24]
     abe:	cmp	r3, #4
     ac0:	beq.w	ecc <loop+0xa38>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     ac4:	ldr	r3, [pc, #572]	; (d04 <loop+0x870>)
     ac6:	ldrb	r3, [r3, #0]
     ac8:	cmp	r3, #1
     aca:	beq.w	110e <loop+0xc7a>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     ace:	cmp	r3, #0
     ad0:	beq.w	e72 <loop+0x9de>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     ad4:	cmp	r3, #2
     ad6:	bne.n	af8 <loop+0x664>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     ad8:	ldr	r2, [r4, #16]
     ada:	ldr	r1, [r4, #12]
     adc:	mvn.w	r3, #21
     ae0:	mul.w	r3, r3, r0
     ae4:	cmp	r3, #0
     ae6:	add.w	r2, r2, r1, lsl #2
     aea:	it	lt
     aec:	addwlt	r3, r3, #1023	; 0x3ff
     af0:	ldr	r2, [r2, #4]
     af2:	asrs	r3, r3, #10
     af4:	adds	r3, #24
     af6:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     af8:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     afa:	add	sp, #236	; 0xec
     afc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        digitalWrite(m_pin, !digitalRead(m_pin));
     b00:	ldrb	r6, [r5, #0]
     b02:	mov	r0, r6
     b04:	bl	24bc <digitalRead>
     b08:	clz	r1, r0
     b0c:	lsrs	r1, r1, #5
     b0e:	mov	r0, r6
     b10:	bl	24b0 <digitalWrite>
     b14:	ldr	r3, [r7, #0]
     b16:	str	r3, [sp, #24]
	return ret;
     b18:	ldr	r3, [sp, #24]
        blinking = false;
        lastBlink = millis();        
     b1a:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     b1c:	movs	r3, #0
     b1e:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     b20:	ldr	r6, [r5, #20]
     b22:	ldr	r5, [pc, #488]	; (d0c <loop+0x878>)
     b24:	cmp	r6, #0
     b26:	ble.w	8f8 <loop+0x464>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b2a:	ldr	r3, [r4, #0]
     b2c:	str	r3, [sp, #16]
	return ret;
     b2e:	ldr	r3, [sp, #16]
     b30:	ldr	r1, [r5, #8]
     b32:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b34:	ldr	r7, [pc, #472]	; (d10 <loop+0x87c>)
     b36:	subs	r3, r3, r1
     b38:	cmp	r2, r3
     b3a:	bcs.w	8f8 <loop+0x464>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     b3e:	ldrb	r4, [r5, #0]
     b40:	mov	r0, r4
     b42:	bl	24bc <digitalRead>
     b46:	clz	r1, r0
     b4a:	lsrs	r1, r1, #5
     b4c:	mov	r0, r4
     b4e:	bl	24b0 <digitalWrite>
     b52:	ldr	r3, [r7, #0]
     b54:	str	r3, [sp, #228]	; 0xe4
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     b56:	subs	r6, #2
	return ret;
     b58:	ldr	r2, [sp, #228]	; 0xe4
     b5a:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b5c:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     b5e:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b60:	strb	r3, [r5, #16]
     b62:	b.n	8f8 <loop+0x464>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     b64:	ldrb	r6, [r5, #0]
     b66:	mov	r0, r6
     b68:	bl	24bc <digitalRead>
     b6c:	clz	r1, r0
     b70:	lsrs	r1, r1, #5
     b72:	mov	r0, r6
     b74:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b78:	ldr	r3, [r7, #0]
     b7a:	str	r3, [sp, #36]	; 0x24
	return ret;
     b7c:	ldr	r3, [sp, #36]	; 0x24
        blinking = false;
        lastBlink = millis();        
     b7e:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     b80:	movs	r3, #0
     b82:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     b84:	ldr	r6, [r5, #20]
     b86:	ldr	r5, [pc, #396]	; (d14 <loop+0x880>)
     b88:	cmp	r6, #0
     b8a:	ble.w	8da <loop+0x446>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b8e:	ldr	r3, [r4, #0]
     b90:	str	r3, [sp, #28]
	return ret;
     b92:	ldr	r3, [sp, #28]
     b94:	ldr	r1, [r5, #8]
     b96:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b98:	ldr.w	r8, [pc, #372]	; d10 <loop+0x87c>
     b9c:	subs	r3, r3, r1
     b9e:	cmp	r2, r3
     ba0:	bcs.w	8da <loop+0x446>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     ba4:	ldrb	r7, [r5, #0]
     ba6:	mov	r0, r7
     ba8:	bl	24bc <digitalRead>
     bac:	clz	r1, r0
     bb0:	lsrs	r1, r1, #5
     bb2:	mov	r0, r7
     bb4:	bl	24b0 <digitalWrite>
     bb8:	ldr.w	r3, [r8]
     bbc:	str	r3, [sp, #224]	; 0xe0
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     bbe:	subs	r6, #2
	return ret;
     bc0:	ldr	r2, [sp, #224]	; 0xe0
     bc2:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     bc4:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     bc6:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     bc8:	strb	r3, [r5, #16]
     bca:	b.n	8da <loop+0x446>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     bcc:	ldrb	r6, [r5, #0]
     bce:	mov	r0, r6
     bd0:	bl	24bc <digitalRead>
     bd4:	clz	r1, r0
     bd8:	lsrs	r1, r1, #5
     bda:	mov	r0, r6
     bdc:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     be0:	ldr	r3, [r7, #0]
     be2:	str	r3, [sp, #48]	; 0x30
	return ret;
     be4:	ldr	r3, [sp, #48]	; 0x30
        blinking = false;
        lastBlink = millis();        
     be6:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     be8:	movs	r3, #0
     bea:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     bec:	ldr	r6, [r5, #20]
     bee:	ldr	r5, [pc, #296]	; (d18 <loop+0x884>)
     bf0:	cmp	r6, #0
     bf2:	ble.w	8bc <loop+0x428>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     bf6:	ldr	r3, [r4, #0]
     bf8:	str	r3, [sp, #40]	; 0x28
	return ret;
     bfa:	ldr	r3, [sp, #40]	; 0x28
     bfc:	ldr	r1, [r5, #8]
     bfe:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c00:	ldr.w	r8, [pc, #268]	; d10 <loop+0x87c>
     c04:	subs	r3, r3, r1
     c06:	cmp	r2, r3
     c08:	bcs.w	8bc <loop+0x428>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     c0c:	ldrb	r7, [r5, #0]
     c0e:	mov	r0, r7
     c10:	bl	24bc <digitalRead>
     c14:	clz	r1, r0
     c18:	lsrs	r1, r1, #5
     c1a:	mov	r0, r7
     c1c:	bl	24b0 <digitalWrite>
     c20:	ldr.w	r3, [r8]
     c24:	str	r3, [sp, #220]	; 0xdc
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     c26:	subs	r6, #2
	return ret;
     c28:	ldr	r2, [sp, #220]	; 0xdc
     c2a:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c2c:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     c2e:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c30:	strb	r3, [r5, #16]
     c32:	b.n	8bc <loop+0x428>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     c34:	ldrb	r6, [r5, #0]
     c36:	mov	r0, r6
     c38:	bl	24bc <digitalRead>
     c3c:	clz	r1, r0
     c40:	lsrs	r1, r1, #5
     c42:	mov	r0, r6
     c44:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c48:	ldr	r3, [r7, #0]
     c4a:	str	r3, [sp, #60]	; 0x3c
	return ret;
     c4c:	ldr	r3, [sp, #60]	; 0x3c
        blinking = false;
        lastBlink = millis();        
     c4e:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     c50:	movs	r3, #0
     c52:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     c54:	ldr	r6, [r5, #20]
     c56:	ldr	r5, [pc, #196]	; (d1c <loop+0x888>)
     c58:	cmp	r6, #0
     c5a:	ble.w	89e <loop+0x40a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c5e:	ldr	r3, [r4, #0]
     c60:	str	r3, [sp, #52]	; 0x34
	return ret;
     c62:	ldr	r3, [sp, #52]	; 0x34
     c64:	ldr	r1, [r5, #8]
     c66:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c68:	ldr.w	r8, [pc, #164]	; d10 <loop+0x87c>
     c6c:	subs	r3, r3, r1
     c6e:	cmp	r2, r3
     c70:	bcs.w	89e <loop+0x40a>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     c74:	ldrb	r7, [r5, #0]
     c76:	mov	r0, r7
     c78:	bl	24bc <digitalRead>
     c7c:	clz	r1, r0
     c80:	lsrs	r1, r1, #5
     c82:	mov	r0, r7
     c84:	bl	24b0 <digitalWrite>
     c88:	ldr.w	r3, [r8]
     c8c:	str	r3, [sp, #216]	; 0xd8
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     c8e:	subs	r6, #2
	return ret;
     c90:	ldr	r2, [sp, #216]	; 0xd8
     c92:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c94:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     c96:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c98:	strb	r3, [r5, #16]
     c9a:	b.n	89e <loop+0x40a>
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     c9c:	ldrb	r6, [r5, #0]
     c9e:	mov	r0, r6
     ca0:	bl	24bc <digitalRead>
     ca4:	clz	r1, r0
     ca8:	lsrs	r1, r1, #5
     caa:	mov	r0, r6
     cac:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cb0:	ldr	r3, [r7, #0]
     cb2:	str	r3, [sp, #72]	; 0x48
	return ret;
     cb4:	ldr	r3, [sp, #72]	; 0x48
        blinking = false;
        lastBlink = millis();        
     cb6:	str	r3, [r5, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     cb8:	movs	r3, #0
     cba:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     cbc:	ldr	r6, [r5, #20]
     cbe:	ldr	r5, [pc, #96]	; (d20 <loop+0x88c>)
     cc0:	cmp	r6, #0
     cc2:	ble.w	880 <loop+0x3ec>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cc6:	ldr	r3, [r4, #0]
     cc8:	str	r3, [sp, #64]	; 0x40
	return ret;
     cca:	ldr	r3, [sp, #64]	; 0x40
     ccc:	ldr	r1, [r5, #8]
     cce:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cd0:	ldr.w	r8, [pc, #60]	; d10 <loop+0x87c>
     cd4:	subs	r3, r3, r1
     cd6:	cmp	r2, r3
     cd8:	bcs.w	880 <loop+0x3ec>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     cdc:	ldrb	r7, [r5, #0]
     cde:	mov	r0, r7
     ce0:	bl	24bc <digitalRead>
     ce4:	clz	r1, r0
     ce8:	lsrs	r1, r1, #5
     cea:	mov	r0, r7
     cec:	bl	24b0 <digitalWrite>
     cf0:	ldr.w	r3, [r8]
     cf4:	str	r3, [sp, #212]	; 0xd4
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     cf6:	subs	r6, #2
	return ret;
     cf8:	ldr	r2, [sp, #212]	; 0xd4
     cfa:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     cfc:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     cfe:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d00:	strb	r3, [r5, #16]
     d02:	b.n	880 <loop+0x3ec>
     d04:	.word	0x1fff1800
     d08:	.word	0x1fff17a4
     d0c:	.word	0x1fff15f0
     d10:	.word	0x1fff187c
     d14:	.word	0x1fff15d8
     d18:	.word	0x1fff184c
     d1c:	.word	0x1fff1834
     d20:	.word	0x1fff181c
      return millis() - lastBlink > blinkLength;
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     d24:	ldrb	r5, [r6, #0]
     d26:	mov	r0, r5
     d28:	bl	24bc <digitalRead>
     d2c:	clz	r1, r0
     d30:	lsrs	r1, r1, #5
     d32:	mov	r0, r5
     d34:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d38:	ldr	r3, [r7, #0]
     d3a:	str	r3, [sp, #84]	; 0x54
	return ret;
     d3c:	ldr	r3, [sp, #84]	; 0x54
        blinking = false;
        lastBlink = millis();        
     d3e:	str	r3, [r6, #8]
    };

    int check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     d40:	movs	r3, #0
     d42:	strb	r3, [r6, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     d44:	ldr	r6, [r6, #20]
     d46:	ldr	r5, [pc, #696]	; (1000 <loop+0xb6c>)
     d48:	cmp	r6, #0
     d4a:	ble.w	862 <loop+0x3ce>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d4e:	ldr	r3, [r4, #0]
     d50:	str	r3, [sp, #76]	; 0x4c
	return ret;
     d52:	ldr	r3, [sp, #76]	; 0x4c
     d54:	ldr	r1, [r5, #8]
     d56:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d58:	ldr.w	r8, [pc, #688]	; 100c <loop+0xb78>
     d5c:	subs	r3, r3, r1
     d5e:	cmp	r2, r3
     d60:	bcs.w	862 <loop+0x3ce>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     d64:	ldrb	r7, [r5, #0]
     d66:	mov	r0, r7
     d68:	bl	24bc <digitalRead>
     d6c:	clz	r1, r0
     d70:	lsrs	r1, r1, #5
     d72:	mov	r0, r7
     d74:	bl	24b0 <digitalWrite>
     d78:	ldr.w	r3, [r8]
     d7c:	str	r3, [sp, #208]	; 0xd0
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     d7e:	subs	r6, #2
	return ret;
     d80:	ldr	r2, [sp, #208]	; 0xd0
     d82:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d84:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     d86:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d88:	strb	r3, [r5, #16]
     d8a:	b.n	862 <loop+0x3ce>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     d8c:	ldr	r3, [pc, #628]	; (1004 <loop+0xb70>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     d8e:	ldrb	r3, [r3, #0]
     d90:	cmp	r3, #250	; 0xfa
     d92:	beq.w	f58 <loop+0xac4>
     d96:	cmp	r3, #252	; 0xfc
     d98:	beq.n	dec <loop+0x958>
     d9a:	cmp	r3, #248	; 0xf8
     d9c:	beq.w	101c <loop+0xb88>
     da0:	movs	r1, #35	; 0x23
     da2:	ldr	r0, [pc, #612]	; (1008 <loop+0xb74>)
     da4:	ldr	r4, [pc, #612]	; (100c <loop+0xb78>)
     da6:	bl	1ea0 <usb_serial_write>
     daa:	ldr	r0, [pc, #612]	; (1010 <loop+0xb7c>)
     dac:	bl	3a14 <Print::println()>
     db0:	b.w	4a8 <loop+0x14>
     db4:	ldr	r3, [r6, #20]
     db6:	b.n	718 <loop+0x284>
     db8:	ldr	r3, [r5, #20]
     dba:	b.n	7d0 <loop+0x33c>
     dbc:	ldr	r3, [r6, #20]
     dbe:	b.w	4c8 <loop+0x34>
     dc2:	ldr	r3, [r5, #20]
     dc4:	b.n	684 <loop+0x1f0>
     dc6:	ldr	r3, [r6, #20]
     dc8:	b.n	5f0 <loop+0x15c>
     dca:	ldr	r3, [r5, #20]
     dcc:	b.w	55c <loop+0xc8>
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     dd0:	mov	r2, r5
     dd2:	b.n	662 <loop+0x1ce>
     dd4:	mov	r2, r6
     dd6:	b.w	5ce <loop+0x13a>
     dda:	mov	r2, r5
     ddc:	b.w	53a <loop+0xa6>
     de0:	mov	r2, r6
     de2:	b.n	6f6 <loop+0x262>
     de4:	mov	r2, r5
     de6:	b.n	7ae <loop+0x31a>
     de8:	mov	r2, r6
     dea:	b.n	842 <loop+0x3ae>
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     dec:	ldr	r2, [pc, #548]	; (1014 <loop+0xb80>)
     dee:	ldr	r0, [pc, #552]	; (1018 <loop+0xb84>)
      ppqn = 0;
      m_sequence.resetStep();
     df0:	ldr	r1, [r2, #12]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     df2:	movs	r3, #0
      ppqn = 0;
      m_sequence.resetStep();
      m_sequence.m_leds[5]->toggle();
     df4:	ldr	r4, [r1, #40]	; 0x28
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
      ppqn = 0;
     df6:	str	r3, [r2, #8]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     df8:	strb	r3, [r2, #0]
    void stopCurrentStep () {
      m_steps[m_currentStep]->stop();
    };

    void resetStep () {
      m_currentStep = 0;
     dfa:	str	r3, [r1, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     dfc:	ldr	r3, [r4, #4]
     dfe:	clz	r3, r3
     e02:	lsrs	r3, r3, #5
     e04:	str	r3, [r4, #4]
     e06:	movs	r1, #8
     e08:	bl	1ea0 <usb_serial_write>
     e0c:	ldr	r0, [pc, #512]	; (1010 <loop+0xb7c>)
     e0e:	bl	3a14 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
     e12:	ldrb	r1, [r4, #4]
     e14:	ldrb	r0, [r4, #0]
     e16:	bl	24b0 <digitalWrite>

      if (blinking) {
     e1a:	ldrb	r3, [r4, #16]
     e1c:	cmp	r3, #0
     e1e:	beq.w	4a6 <loop+0x12>
        digitalWrite(m_pin, !m_state);
     e22:	ldr	r1, [r4, #4]
     e24:	ldrb	r0, [r4, #0]
     e26:	ldr	r4, [pc, #484]	; (100c <loop+0xb78>)
     e28:	clz	r1, r1
     e2c:	lsrs	r1, r1, #5
     e2e:	bl	24b0 <digitalWrite>
     e32:	b.w	4a8 <loop+0x14>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
          m_sequence.m_steps[m_id]->controlPitch(m_value);
     e36:	ldr	r3, [r4, #16]
     e38:	ldr	r2, [r4, #12]
     e3a:	add.w	r2, r3, r2, lsl #2
    };

    void controlPitch (int value) {
      int newValue = map(value, 0, 1023, 51, 38);
      m_pitch = newValue;
     e3e:	sub.w	r3, r0, r0, lsl #2
     e42:	lsls	r3, r3, #2
     e44:	it	mi
     e46:	addwmi	r3, r3, #1023	; 0x3ff
     e4a:	ldr	r2, [r2, #4]
     e4c:	asrs	r3, r3, #10
     e4e:	adds	r3, #51	; 0x33
     e50:	str	r3, [r2, #8]
     e52:	b.n	950 <loop+0x4bc>
     e54:	ldr	r3, [r4, #16]
     e56:	ldr	r2, [r4, #12]
     e58:	add.w	r2, r3, r2, lsl #2
     e5c:	sub.w	r3, r0, r0, lsl #2
     e60:	lsls	r3, r3, #2
     e62:	it	mi
     e64:	addwmi	r3, r3, #1023	; 0x3ff
     e68:	ldr	r2, [r2, #4]
     e6a:	asrs	r3, r3, #10
     e6c:	adds	r3, #51	; 0x33
     e6e:	str	r3, [r2, #8]
     e70:	b.n	a9e <loop+0x60a>
     e72:	ldr	r3, [r4, #16]
     e74:	ldr	r2, [r4, #12]
     e76:	add.w	r2, r3, r2, lsl #2
     e7a:	sub.w	r3, r0, r0, lsl #2
     e7e:	lsls	r3, r3, #2
     e80:	it	mi
     e82:	addwmi	r3, r3, #1023	; 0x3ff
     e86:	ldr	r2, [r2, #4]
     e88:	asrs	r3, r3, #10
     e8a:	adds	r3, #51	; 0x33
     e8c:	str	r3, [r2, #8]
     e8e:	b.n	af8 <loop+0x664>
     e90:	ldr	r3, [r4, #16]
     e92:	ldr	r2, [r4, #12]
     e94:	add.w	r2, r3, r2, lsl #2
     e98:	sub.w	r3, r0, r0, lsl #2
     e9c:	lsls	r3, r3, #2
     e9e:	it	mi
     ea0:	addwmi	r3, r3, #1023	; 0x3ff
     ea4:	ldr	r2, [r2, #4]
     ea6:	asrs	r3, r3, #10
     ea8:	adds	r3, #51	; 0x33
     eaa:	str	r3, [r2, #8]
     eac:	b.n	a04 <loop+0x570>
     eae:	ldr	r3, [r4, #16]
     eb0:	ldr	r2, [r4, #12]
     eb2:	add.w	r2, r3, r2, lsl #2
     eb6:	sub.w	r3, r0, r0, lsl #2
     eba:	lsls	r3, r3, #2
     ebc:	it	mi
     ebe:	addwmi	r3, r3, #1023	; 0x3ff
     ec2:	ldr	r2, [r2, #4]
     ec4:	asrs	r3, r3, #10
     ec6:	adds	r3, #51	; 0x33
     ec8:	str	r3, [r2, #8]
     eca:	b.n	9aa <loop+0x516>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     ecc:	cmp.w	r0, #400	; 0x190
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
        m_transport.controlTempo(m_value);
     ed0:	ldr	r3, [r4, #20]
     ed2:	bge.w	112a <loop+0xc96>
        max_ppqn = 6;

        if (ppqn >= 6) {
     ed6:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ed8:	movs	r1, #6

        if (ppqn >= 6) {
     eda:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     edc:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     ede:	ble.n	ee4 <loop+0xa50>
          ppqn = 0;
     ee0:	movs	r2, #0
     ee2:	str	r2, [r3, #8]
     ee4:	ldr	r0, [r4, #4]
     ee6:	b.n	af8 <loop+0x664>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     ee8:	cmp.w	r0, #400	; 0x190
     eec:	ldr	r3, [r4, #20]
     eee:	bge.w	119a <loop+0xd06>
        max_ppqn = 6;

        if (ppqn >= 6) {
     ef2:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ef4:	movs	r1, #6

        if (ppqn >= 6) {
     ef6:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ef8:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     efa:	ble.n	f00 <loop+0xa6c>
          ppqn = 0;
     efc:	movs	r2, #0
     efe:	str	r2, [r3, #8]
     f00:	ldr	r0, [r4, #4]
     f02:	b.n	950 <loop+0x4bc>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     f04:	cmp.w	r0, #400	; 0x190
     f08:	ldr	r3, [r4, #20]
     f0a:	bge.w	1146 <loop+0xcb2>
        max_ppqn = 6;

        if (ppqn >= 6) {
     f0e:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     f10:	movs	r1, #6

        if (ppqn >= 6) {
     f12:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     f14:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     f16:	ble.n	f1c <loop+0xa88>
          ppqn = 0;
     f18:	movs	r2, #0
     f1a:	str	r2, [r3, #8]
     f1c:	ldr	r0, [r4, #4]
     f1e:	b.n	9aa <loop+0x516>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     f20:	cmp.w	r0, #400	; 0x190
     f24:	ldr	r3, [r4, #20]
     f26:	bge.w	117e <loop+0xcea>
        max_ppqn = 6;

        if (ppqn >= 6) {
     f2a:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     f2c:	movs	r1, #6

        if (ppqn >= 6) {
     f2e:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     f30:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     f32:	ble.n	f38 <loop+0xaa4>
          ppqn = 0;
     f34:	movs	r2, #0
     f36:	str	r2, [r3, #8]
     f38:	ldr	r0, [r4, #4]
     f3a:	b.n	a9e <loop+0x60a>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     f3c:	cmp.w	r0, #400	; 0x190
     f40:	ldr	r3, [r4, #20]
     f42:	bge.w	1162 <loop+0xcce>
        max_ppqn = 6;

        if (ppqn >= 6) {
     f46:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     f48:	movs	r1, #6

        if (ppqn >= 6) {
     f4a:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     f4c:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     f4e:	ble.n	f54 <loop+0xac0>
          ppqn = 0;
     f50:	movs	r2, #0
     f52:	str	r2, [r3, #8]
     f54:	ldr	r0, [r4, #4]
     f56:	b.n	a04 <loop+0x570>
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     f58:	ldr	r5, [pc, #184]	; (1014 <loop+0xb80>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f5a:	ldr	r4, [pc, #176]	; (100c <loop+0xb78>)
      ppqn = 0;
      m_sequence.doStep(); 
     f5c:	ldr	r6, [r5, #12]
        m_leds[4]->on();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
     f5e:	ldr	r3, [r6, #0]
     f60:	add.w	r3, r6, r3, lsl #2
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     f64:	mov.w	r9, #1
     f68:	ldr	r7, [r3, #20]
     f6a:	strb.w	r9, [r5]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     f6e:	ldrb.w	sl, [r7]
      ppqn = 0;
     f72:	mov.w	r8, #0
     f76:	mov	r0, sl
     f78:	str.w	r8, [r5, #8]
     f7c:	bl	24bc <digitalRead>
     f80:	clz	r1, r0
     f84:	lsrs	r1, r1, #5
     f86:	mov	r0, sl
     f88:	bl	24b0 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
     f8c:	ldr	r3, [r6, #0]
     f8e:	ldr	r2, [r4, #0]
     f90:	str	r2, [sp, #12]
     f92:	add.w	r2, r6, r3, lsl #2
	return ret;
     f96:	ldr	r0, [sp, #12]
     f98:	ldr	r2, [r2, #4]
      blinking = true;
     f9a:	strb.w	r9, [r7, #16]
     f9e:	ldrb	r1, [r2, #4]
      blinkingCounter = times;
     fa0:	str.w	r8, [r7, #20]
      lastBlink = millis();  
     fa4:	str	r0, [r7, #8]
     fa6:	cmp	r1, #0
     fa8:	bne.w	1692 <loop+0x11fe>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
     fac:	ldrb.w	r2, [r6, #45]	; 0x2d
     fb0:	cmp	r2, #0
     fb2:	beq.w	11b8 <loop+0xd24>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
     fb6:	subs	r2, r3, #1
     fb8:	cmp	r3, #0
     fba:	beq.w	16b8 <loop+0x1224>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
     fbe:	str	r2, [r6, #0]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
     fc0:	ldr	r3, [r5, #12]
     fc2:	ldr	r0, [pc, #84]	; (1018 <loop+0xb84>)
     fc4:	ldr	r5, [r3, #40]	; 0x28
    };

    void toggle () {
      m_state = !m_state;
     fc6:	ldr	r3, [r5, #4]
     fc8:	clz	r3, r3
     fcc:	lsrs	r3, r3, #5
     fce:	str	r3, [r5, #4]
     fd0:	movs	r1, #8
     fd2:	bl	1ea0 <usb_serial_write>
     fd6:	ldr	r0, [pc, #56]	; (1010 <loop+0xb7c>)
     fd8:	bl	3a14 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
     fdc:	ldrb	r1, [r5, #4]
     fde:	ldrb	r0, [r5, #0]
     fe0:	bl	24b0 <digitalWrite>

      if (blinking) {
     fe4:	ldrb	r3, [r5, #16]
     fe6:	cmp	r3, #0
     fe8:	beq.w	4a8 <loop+0x14>
        digitalWrite(m_pin, !m_state);
     fec:	ldr	r1, [r5, #4]
     fee:	ldrb	r0, [r5, #0]
     ff0:	clz	r1, r1
     ff4:	lsrs	r1, r1, #5
     ff6:	bl	24b0 <digitalWrite>
     ffa:	b.w	4a8 <loop+0x14>
     ffe:	nop
    1000:	.word	0x1fff1804
    1004:	.word	0x1fff1d38
    1008:	.word	0x00004dc0
    100c:	.word	0x1fff187c
    1010:	.word	0x1fff0c70
    1014:	.word	0x1fff17f0
    1018:	.word	0x00004db4
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
    101c:	ldr	r5, [pc, #728]	; (12f8 <loop+0xe64>)

      m_sequence.stopSteps(ppqn);
    101e:	ldr	r2, [r5, #12]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
    1020:	ldr	r3, [r5, #8]
        }
      }
    };

    boolean stepIsOver (int ppqn) {
      return ppqn >= m_steps[m_currentStep]->m_length;
    1022:	ldr	r1, [r2, #0]
    1024:	add.w	r2, r2, r1, lsl #2
    1028:	adds	r3, #1
    102a:	ldr	r2, [r2, #4]
    102c:	str	r3, [r5, #8]
    void reverse () {
      m_reverse = !m_reverse;
    };

    void stopSteps (int ppqn) {
      if (stepIsOver(ppqn)) {
    102e:	ldr	r2, [r2, #16]
    1030:	cmp	r3, r2
    1032:	bge.w	1688 <loop+0x11f4>

      m_sequence.stopSteps(ppqn);

      if (ppqn == max_ppqn) {
    1036:	ldr	r2, [r5, #4]
    1038:	ldr	r1, [pc, #700]	; (12f8 <loop+0xe64>)
    103a:	cmp	r2, r3
    103c:	bne.w	4a6 <loop+0x12>
        m_sequence.doStep(); 
    1040:	ldr	r6, [r1, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1042:	ldr	r4, [pc, #696]	; (12fc <loop+0xe68>)
        m_leds[4]->on();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
    1044:	ldr	r3, [r6, #0]
    1046:	add.w	r3, r6, r3, lsl #2
    104a:	ldr	r7, [r3, #20]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    104c:	ldrb.w	r8, [r7]
    1050:	mov	r0, r8
    1052:	bl	24bc <digitalRead>
    1056:	clz	r1, r0
    105a:	lsrs	r1, r1, #5
    105c:	mov	r0, r8
    105e:	bl	24b0 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
    1062:	ldr	r3, [r6, #0]
    1064:	ldr	r2, [r4, #0]
    1066:	str	r2, [sp, #8]
    1068:	add.w	r2, r6, r3, lsl #2
      blinking = true;
    106c:	movs	r1, #1
    106e:	ldr	r2, [r2, #4]
    1070:	strb	r1, [r7, #16]
      blinkingCounter = times;
    1072:	movs	r1, #0
    1074:	str	r1, [r7, #20]
    1076:	ldrb	r1, [r2, #4]
	return ret;
    1078:	ldr	r0, [sp, #8]
      lastBlink = millis();  
    107a:	str	r0, [r7, #8]
    107c:	cmp	r1, #0
    107e:	bne.w	1886 <loop+0x13f2>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
    1082:	ldrb.w	r2, [r6, #45]	; 0x2d
    1086:	cmp	r2, #0
    1088:	bne.w	16be <loop+0x122a>
        m_currentStep++;
    108c:	adds	r3, #1
    108e:	cmp	r3, #3
    1090:	it	gt
    1092:	movgt	r3, #0
    1094:	str	r3, [r6, #0]
        ppqn = 0;
    1096:	movs	r3, #0
    1098:	str	r3, [r5, #8]
    109a:	b.w	4a8 <loop+0x14>
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
    109e:	ldr	r2, [r4, #12]
    10a0:	ldr	r3, [r4, #16]
    10a2:	add.w	r3, r3, r2, lsl #2
    };

    void controlVelocity (int value) {
      int newValue = map(value, 0, 1023, 127, 63);
      m_velocity = newValue;
    10a6:	ldr	r2, [r3, #4]
    10a8:	subs.w	r3, r0, r0, lsl #6
    10ac:	it	mi
    10ae:	addwmi	r3, r3, #1023	; 0x3ff
    10b2:	asrs	r3, r3, #10
    10b4:	adds	r3, #127	; 0x7f
    10b6:	str	r3, [r2, #12]
    10b8:	b.n	9aa <loop+0x516>
    10ba:	ldr	r2, [r4, #12]
    10bc:	ldr	r3, [r4, #16]
    10be:	add.w	r3, r3, r2, lsl #2
    10c2:	ldr	r2, [r3, #4]
    10c4:	subs.w	r3, r0, r0, lsl #6
    10c8:	it	mi
    10ca:	addwmi	r3, r3, #1023	; 0x3ff
    10ce:	asrs	r3, r3, #10
    10d0:	adds	r3, #127	; 0x7f
    10d2:	str	r3, [r2, #12]
    10d4:	b.n	a04 <loop+0x570>
    10d6:	ldr	r2, [r4, #12]
    10d8:	ldr	r3, [r4, #16]
    10da:	add.w	r3, r3, r2, lsl #2
    10de:	ldr	r2, [r3, #4]
    10e0:	subs.w	r3, r0, r0, lsl #6
    10e4:	it	mi
    10e6:	addwmi	r3, r3, #1023	; 0x3ff
    10ea:	asrs	r3, r3, #10
    10ec:	adds	r3, #127	; 0x7f
    10ee:	str	r3, [r2, #12]
    10f0:	b.n	a9e <loop+0x60a>
    10f2:	ldr	r2, [r4, #12]
    10f4:	ldr	r3, [r4, #16]
    10f6:	add.w	r3, r3, r2, lsl #2
    10fa:	ldr	r2, [r3, #4]
    10fc:	subs.w	r3, r0, r0, lsl #6
    1100:	it	mi
    1102:	addwmi	r3, r3, #1023	; 0x3ff
    1106:	asrs	r3, r3, #10
    1108:	adds	r3, #127	; 0x7f
    110a:	str	r3, [r2, #12]
    110c:	b.n	950 <loop+0x4bc>
    110e:	ldr	r2, [r4, #12]
    1110:	ldr	r3, [r4, #16]
    1112:	add.w	r3, r3, r2, lsl #2
    1116:	ldr	r2, [r3, #4]
    1118:	subs.w	r3, r0, r0, lsl #6
    111c:	it	mi
    111e:	addwmi	r3, r3, #1023	; 0x3ff
    1122:	asrs	r3, r3, #10
    1124:	adds	r3, #127	; 0x7f
    1126:	str	r3, [r2, #12]
    1128:	b.n	af8 <loop+0x664>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    112a:	sub.w	r2, r0, #400	; 0x190
    112e:	cmp.w	r2, #400	; 0x190
    1132:	bcc.n	11fc <loop+0xd68>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1134:	sub.w	r2, r0, #800	; 0x320
    1138:	cmp	r2, #223	; 0xdf
    113a:	bhi.w	af8 <loop+0x664>
        max_ppqn = 10;
    113e:	movs	r2, #10
    1140:	str	r2, [r3, #4]
    1142:	ldr	r0, [r4, #4]
    1144:	b.n	af8 <loop+0x664>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1146:	sub.w	r2, r0, #400	; 0x190
    114a:	cmp.w	r2, #400	; 0x190
    114e:	bcc.n	11ee <loop+0xd5a>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1150:	sub.w	r2, r0, #800	; 0x320
    1154:	cmp	r2, #223	; 0xdf
    1156:	bhi.w	9aa <loop+0x516>
        max_ppqn = 10;
    115a:	movs	r2, #10
    115c:	str	r2, [r3, #4]
    115e:	ldr	r0, [r4, #4]
    1160:	b.n	9aa <loop+0x516>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1162:	sub.w	r2, r0, #400	; 0x190
    1166:	cmp.w	r2, #400	; 0x190
    116a:	bcc.n	11e0 <loop+0xd4c>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    116c:	sub.w	r2, r0, #800	; 0x320
    1170:	cmp	r2, #223	; 0xdf
    1172:	bhi.w	a04 <loop+0x570>
        max_ppqn = 10;
    1176:	movs	r2, #10
    1178:	str	r2, [r3, #4]
    117a:	ldr	r0, [r4, #4]
    117c:	b.n	a04 <loop+0x570>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    117e:	sub.w	r2, r0, #400	; 0x190
    1182:	cmp.w	r2, #400	; 0x190
    1186:	bcc.n	11d2 <loop+0xd3e>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1188:	sub.w	r2, r0, #800	; 0x320
    118c:	cmp	r2, #223	; 0xdf
    118e:	bhi.w	a9e <loop+0x60a>
        max_ppqn = 10;
    1192:	movs	r2, #10
    1194:	str	r2, [r3, #4]
    1196:	ldr	r0, [r4, #4]
    1198:	b.n	a9e <loop+0x60a>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    119a:	sub.w	r2, r0, #400	; 0x190
    119e:	cmp.w	r2, #400	; 0x190
    11a2:	bcc.n	11c4 <loop+0xd30>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    11a4:	sub.w	r2, r0, #800	; 0x320
    11a8:	cmp	r2, #223	; 0xdf
    11aa:	bhi.w	950 <loop+0x4bc>
        max_ppqn = 10;
    11ae:	movs	r2, #10
    11b0:	str	r2, [r3, #4]
    11b2:	ldr	r0, [r4, #4]
    11b4:	b.w	950 <loop+0x4bc>
    11b8:	adds	r3, #1
    11ba:	cmp	r3, #3
    11bc:	it	gt
    11be:	movgt	r3, #0
    11c0:	str	r3, [r6, #0]
    11c2:	b.n	fc0 <loop+0xb2c>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
    11c4:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    11c6:	movs	r1, #8

        if (ppqn >= 8) {
    11c8:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    11ca:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    11cc:	bgt.w	efc <loop+0xa68>
    11d0:	b.n	f00 <loop+0xa6c>
    11d2:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    11d4:	movs	r1, #8

        if (ppqn >= 8) {
    11d6:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    11d8:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    11da:	bgt.w	f34 <loop+0xaa0>
    11de:	b.n	f38 <loop+0xaa4>
    11e0:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    11e2:	movs	r1, #8

        if (ppqn >= 8) {
    11e4:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    11e6:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    11e8:	bgt.w	f50 <loop+0xabc>
    11ec:	b.n	f54 <loop+0xac0>
    11ee:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    11f0:	movs	r1, #8

        if (ppqn >= 8) {
    11f2:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    11f4:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    11f6:	bgt.w	f18 <loop+0xa84>
    11fa:	b.n	f1c <loop+0xa88>
    11fc:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    11fe:	movs	r1, #8

        if (ppqn >= 8) {
    1200:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1202:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1204:	bgt.w	ee0 <loop+0xa4c>
    1208:	b.n	ee4 <loop+0xa50>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    120a:	ldr.w	lr, [pc, #252]	; 1308 <loop+0xe74>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_sequence.toggleGlobalMode();
    120e:	ldr.w	r9, [r7, #28]
    1212:	ldrb.w	r3, [lr]
    1216:	cmp	r3, #0
    1218:	beq.w	1714 <loop+0x1280>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    121c:	cmp	r3, #1
    121e:	beq.w	18b6 <loop+0x1422>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1222:	cmp	r3, #2
    1224:	bne.w	7ae <loop+0x31a>
    1228:	movs	r1, #5
    122a:	ldr	r0, [pc, #212]	; (1300 <loop+0xe6c>)
        currentMode = PITCH;
    122c:	strb.w	r5, [lr]
    1230:	bl	1ea0 <usb_serial_write>
    1234:	ldr	r0, [pc, #204]	; (1304 <loop+0xe70>)
    1236:	bl	3a14 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    123a:	ldr.w	sl, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    123e:	ldrb.w	fp, [sl]
    1242:	mov	r0, fp
    1244:	bl	24bc <digitalRead>
    1248:	clz	r1, r0
    124c:	lsrs	r1, r1, #5
    124e:	mov	r0, fp
    1250:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1254:	ldr.w	r3, [r8]
    1258:	str	r3, [sp, #192]	; 0xc0
        m_leds[4]->on();
    125a:	ldr.w	r3, [r9, #36]	; 0x24
	return ret;
    125e:	ldr	r1, [sp, #192]	; 0xc0
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1260:	str.w	r1, [sl, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1264:	movs	r2, #1
    1266:	strb.w	r2, [sl, #16]
      blinkingCounter = times;
    126a:	str.w	r5, [sl, #20]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    126e:	mov	r1, r2
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1270:	str	r2, [r3, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1272:	strb	r5, [r3, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1274:	ldrb	r0, [r3, #0]
    1276:	bl	24b0 <digitalWrite>
    127a:	ldr	r2, [r7, #12]
    127c:	b.w	7ae <loop+0x31a>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1280:	ldr.w	lr, [pc, #132]	; 1308 <loop+0xe74>
    1284:	ldr.w	r9, [r7, #28]
    1288:	ldrb.w	r3, [lr]
    128c:	cmp	r3, #0
    128e:	beq.w	175e <loop+0x12ca>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1292:	cmp	r3, #1
    1294:	beq.w	1a38 <loop+0x15a4>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1298:	cmp	r3, #2
    129a:	bne.w	6f6 <loop+0x262>
    129e:	movs	r1, #5
    12a0:	ldr	r0, [pc, #92]	; (1300 <loop+0xe6c>)
        currentMode = PITCH;
    12a2:	strb.w	r6, [lr]
    12a6:	bl	1ea0 <usb_serial_write>
    12aa:	ldr	r0, [pc, #88]	; (1304 <loop+0xe70>)
    12ac:	bl	3a14 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    12b0:	ldr.w	sl, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    12b4:	ldrb.w	fp, [sl]
    12b8:	mov	r0, fp
    12ba:	bl	24bc <digitalRead>
    12be:	clz	r1, r0
    12c2:	lsrs	r1, r1, #5
    12c4:	mov	r0, fp
    12c6:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12ca:	ldr.w	r3, [r8]
    12ce:	str	r3, [sp, #180]	; 0xb4
        m_leds[4]->on();
    12d0:	ldr.w	r3, [r9, #36]	; 0x24
	return ret;
    12d4:	ldr	r1, [sp, #180]	; 0xb4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    12d6:	str.w	r1, [sl, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    12da:	movs	r2, #1
    12dc:	strb.w	r2, [sl, #16]
      blinkingCounter = times;
    12e0:	str.w	r6, [sl, #20]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    12e4:	mov	r1, r2
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    12e6:	str	r2, [r3, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    12e8:	strb	r6, [r3, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    12ea:	ldrb	r0, [r3, #0]
    12ec:	bl	24b0 <digitalWrite>
    12f0:	ldr	r2, [r7, #12]
    12f2:	b.w	6f6 <loop+0x262>
    12f6:	nop
    12f8:	.word	0x1fff17f0
    12fc:	.word	0x1fff187c
    1300:	.word	0x00004dfc
    1304:	.word	0x1fff0c70
    1308:	.word	0x1fff1800
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    130c:	ldr.w	lr, [pc, #816]	; 1640 <loop+0x11ac>
    1310:	ldr.w	r9, [r7, #28]
    1314:	ldrb.w	r3, [lr]
    1318:	cmp	r3, #0
    131a:	beq.w	17f2 <loop+0x135e>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    131e:	cmp	r3, #1
    1320:	beq.w	1980 <loop+0x14ec>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1324:	cmp	r3, #2
    1326:	bne.w	662 <loop+0x1ce>
    132a:	movs	r1, #5
    132c:	ldr	r0, [pc, #776]	; (1638 <loop+0x11a4>)
        currentMode = PITCH;
    132e:	strb.w	r5, [lr]
    1332:	bl	1ea0 <usb_serial_write>
    1336:	ldr	r0, [pc, #772]	; (163c <loop+0x11a8>)
    1338:	bl	3a14 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    133c:	ldr.w	sl, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1340:	ldrb.w	fp, [sl]
    1344:	mov	r0, fp
    1346:	bl	24bc <digitalRead>
    134a:	clz	r1, r0
    134e:	lsrs	r1, r1, #5
    1350:	mov	r0, fp
    1352:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1356:	ldr.w	r3, [r8]
    135a:	str	r3, [sp, #168]	; 0xa8
        m_leds[4]->on();
    135c:	ldr.w	r3, [r9, #36]	; 0x24
	return ret;
    1360:	ldr	r1, [sp, #168]	; 0xa8
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1362:	str.w	r1, [sl, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1366:	movs	r2, #1
    1368:	strb.w	r2, [sl, #16]
      blinkingCounter = times;
    136c:	str.w	r5, [sl, #20]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1370:	mov	r1, r2
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1372:	str	r2, [r3, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1374:	strb	r5, [r3, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1376:	ldrb	r0, [r3, #0]
    1378:	bl	24b0 <digitalWrite>
    137c:	ldr	r2, [r7, #12]
    137e:	b.w	662 <loop+0x1ce>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1382:	ldr.w	lr, [pc, #700]	; 1640 <loop+0x11ac>
    1386:	ldr.w	r9, [r7, #28]
    138a:	ldrb.w	r3, [lr]
    138e:	cmp	r3, #0
    1390:	beq.w	17a8 <loop+0x1314>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1394:	cmp	r3, #1
    1396:	beq.w	1a94 <loop+0x1600>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    139a:	cmp	r3, #2
    139c:	bne.w	53a <loop+0xa6>
    13a0:	movs	r1, #5
    13a2:	ldr	r0, [pc, #660]	; (1638 <loop+0x11a4>)
        currentMode = PITCH;
    13a4:	strb.w	r5, [lr]
    13a8:	bl	1ea0 <usb_serial_write>
    13ac:	ldr	r0, [pc, #652]	; (163c <loop+0x11a8>)
    13ae:	bl	3a14 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    13b2:	ldr.w	sl, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    13b6:	ldrb.w	fp, [sl]
    13ba:	mov	r0, fp
    13bc:	bl	24bc <digitalRead>
    13c0:	clz	r1, r0
    13c4:	lsrs	r1, r1, #5
    13c6:	mov	r0, fp
    13c8:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13cc:	ldr.w	r3, [r8]
    13d0:	str	r3, [sp, #144]	; 0x90
        m_leds[4]->on();
    13d2:	ldr.w	r3, [r9, #36]	; 0x24
	return ret;
    13d6:	ldr	r1, [sp, #144]	; 0x90
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    13d8:	str.w	r1, [sl, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    13dc:	movs	r2, #1
    13de:	strb.w	r2, [sl, #16]
      blinkingCounter = times;
    13e2:	str.w	r5, [sl, #20]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    13e6:	mov	r1, r2
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    13e8:	str	r2, [r3, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    13ea:	strb	r5, [r3, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    13ec:	ldrb	r0, [r3, #0]
    13ee:	bl	24b0 <digitalWrite>
    13f2:	ldr	r2, [r7, #12]
    13f4:	b.w	53a <loop+0xa6>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    13f8:	ldr.w	lr, [pc, #580]	; 1640 <loop+0x11ac>
    13fc:	ldr.w	r9, [r7, #28]
    1400:	ldrb.w	r3, [lr]
    1404:	cmp	r3, #0
    1406:	beq.w	183c <loop+0x13a8>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    140a:	cmp	r3, #1
    140c:	beq.w	19dc <loop+0x1548>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1410:	cmp	r3, #2
    1412:	bne.w	5ce <loop+0x13a>
    1416:	movs	r1, #5
    1418:	ldr	r0, [pc, #540]	; (1638 <loop+0x11a4>)
        currentMode = PITCH;
    141a:	strb.w	r6, [lr]
    141e:	bl	1ea0 <usb_serial_write>
    1422:	ldr	r0, [pc, #536]	; (163c <loop+0x11a8>)
    1424:	bl	3a14 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    1428:	ldr.w	sl, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    142c:	ldrb.w	fp, [sl]
    1430:	mov	r0, fp
    1432:	bl	24bc <digitalRead>
    1436:	clz	r1, r0
    143a:	lsrs	r1, r1, #5
    143c:	mov	r0, fp
    143e:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1442:	ldr.w	r3, [r8]
    1446:	str	r3, [sp, #156]	; 0x9c
        m_leds[4]->on();
    1448:	ldr.w	r3, [r9, #36]	; 0x24
	return ret;
    144c:	ldr	r1, [sp, #156]	; 0x9c
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    144e:	str.w	r1, [sl, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1452:	movs	r2, #1
    1454:	strb.w	r2, [sl, #16]
      blinkingCounter = times;
    1458:	str.w	r6, [sl, #20]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    145c:	mov	r1, r2
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    145e:	str	r2, [r3, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1460:	strb	r6, [r3, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1462:	ldrb	r0, [r3, #0]
    1464:	bl	24b0 <digitalWrite>
    1468:	ldr	r2, [r7, #12]
    146a:	b.w	5ce <loop+0x13a>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    146e:	ldr.w	lr, [pc, #464]	; 1640 <loop+0x11ac>
    1472:	ldr.w	r9, [r7, #28]
    1476:	ldrb.w	r3, [lr]
    147a:	cmp	r3, #0
    147c:	beq.w	16ca <loop+0x1236>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1480:	cmp	r3, #1
    1482:	beq.w	1912 <loop+0x147e>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1486:	cmp	r3, #2
    1488:	bne.w	842 <loop+0x3ae>
    148c:	movs	r1, #5
    148e:	ldr	r0, [pc, #424]	; (1638 <loop+0x11a4>)
        currentMode = PITCH;
    1490:	strb.w	r6, [lr]
    1494:	bl	1ea0 <usb_serial_write>
    1498:	ldr	r0, [pc, #416]	; (163c <loop+0x11a8>)
    149a:	bl	3a14 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink();
    149e:	ldr.w	sl, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14a2:	ldrb.w	fp, [sl]
    14a6:	mov	r0, fp
    14a8:	bl	24bc <digitalRead>
    14ac:	clz	r1, r0
    14b0:	lsrs	r1, r1, #5
    14b2:	mov	r0, fp
    14b4:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14b8:	ldr.w	r3, [r8]
    14bc:	str	r3, [sp, #204]	; 0xcc
        m_leds[4]->on();
    14be:	ldr.w	r3, [r9, #36]	; 0x24
	return ret;
    14c2:	ldr	r1, [sp, #204]	; 0xcc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    14c4:	str.w	r1, [sl, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    14c8:	movs	r2, #1
    14ca:	strb.w	r2, [sl, #16]
      blinkingCounter = times;
    14ce:	str.w	r6, [sl, #20]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    14d2:	mov	r1, r2
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    14d4:	str	r2, [r3, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    14d6:	strb	r6, [r3, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    14d8:	ldrb	r0, [r3, #0]
    14da:	bl	24b0 <digitalWrite>
    14de:	ldr	r2, [r7, #12]
    14e0:	b.w	842 <loop+0x3ae>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    14e4:	ldr	r3, [r6, #4]
    14e6:	clz	r3, r3
    14ea:	lsrs	r3, r3, #5
    14ec:	str	r3, [r6, #4]
    14ee:	movs	r1, #8
    14f0:	bl	1ea0 <usb_serial_write>
    14f4:	ldr	r0, [pc, #324]	; (163c <loop+0x11a8>)
    14f6:	bl	3a14 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    14fa:	ldrb	r1, [r6, #4]
    14fc:	ldrb	r0, [r6, #0]
    14fe:	bl	24b0 <digitalWrite>

      if (blinking) {
    1502:	ldrb	r3, [r6, #16]
    1504:	cbz	r3, 1514 <loop+0x1080>
        digitalWrite(m_pin, !m_state);
    1506:	ldr	r1, [r6, #4]
    1508:	ldrb	r0, [r6, #0]
    150a:	clz	r1, r1
    150e:	lsrs	r1, r1, #5
    1510:	bl	24b0 <digitalWrite>
    1514:	ldr	r1, [r5, #28]
    1516:	ldr	r2, [r5, #12]
    void resetStep () {
      m_currentStep = 0;
    };

    void reverse () {
      m_reverse = !m_reverse;
    1518:	ldrb.w	r3, [r1, #45]	; 0x2d
    151c:	eor.w	r3, r3, #1
    1520:	strb.w	r3, [r1, #45]	; 0x2d
    1524:	b.w	842 <loop+0x3ae>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1528:	ldr	r3, [r6, #4]
    152a:	clz	r3, r3
    152e:	lsrs	r3, r3, #5
    1530:	str	r3, [r6, #4]
    1532:	movs	r1, #8
    1534:	bl	1ea0 <usb_serial_write>
    1538:	ldr	r0, [pc, #256]	; (163c <loop+0x11a8>)
    153a:	bl	3a14 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    153e:	ldrb	r1, [r6, #4]
    1540:	ldrb	r0, [r6, #0]
    1542:	bl	24b0 <digitalWrite>

      if (blinking) {
    1546:	ldrb	r3, [r6, #16]
    1548:	cbz	r3, 1558 <loop+0x10c4>
        digitalWrite(m_pin, !m_state);
    154a:	ldr	r1, [r6, #4]
    154c:	ldrb	r0, [r6, #0]
    154e:	clz	r1, r1
    1552:	lsrs	r1, r1, #5
    1554:	bl	24b0 <digitalWrite>
    1558:	ldr	r1, [r5, #28]
    155a:	ldr	r2, [r5, #12]
    155c:	ldrb.w	r3, [r1, #45]	; 0x2d
    1560:	eor.w	r3, r3, #1
    1564:	strb.w	r3, [r1, #45]	; 0x2d
    1568:	b.w	6f6 <loop+0x262>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    156c:	ldr	r3, [r5, #4]
    156e:	clz	r3, r3
    1572:	lsrs	r3, r3, #5
    1574:	str	r3, [r5, #4]
    1576:	movs	r1, #8
    1578:	bl	1ea0 <usb_serial_write>
    157c:	ldr	r0, [pc, #188]	; (163c <loop+0x11a8>)
    157e:	bl	3a14 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1582:	ldrb	r1, [r5, #4]
    1584:	ldrb	r0, [r5, #0]
    1586:	bl	24b0 <digitalWrite>

      if (blinking) {
    158a:	ldrb	r3, [r5, #16]
    158c:	cbz	r3, 159c <loop+0x1108>
        digitalWrite(m_pin, !m_state);
    158e:	ldr	r1, [r5, #4]
    1590:	ldrb	r0, [r5, #0]
    1592:	clz	r1, r1
    1596:	lsrs	r1, r1, #5
    1598:	bl	24b0 <digitalWrite>
    159c:	ldr	r1, [r6, #28]
    159e:	ldr	r2, [r6, #12]
    15a0:	ldrb.w	r3, [r1, #45]	; 0x2d
    15a4:	eor.w	r3, r3, #1
    15a8:	strb.w	r3, [r1, #45]	; 0x2d
    15ac:	b.w	662 <loop+0x1ce>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    15b0:	ldr	r3, [r5, #4]
    15b2:	clz	r3, r3
    15b6:	lsrs	r3, r3, #5
    15b8:	str	r3, [r5, #4]
    15ba:	movs	r1, #8
    15bc:	bl	1ea0 <usb_serial_write>
    15c0:	ldr	r0, [pc, #120]	; (163c <loop+0x11a8>)
    15c2:	bl	3a14 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    15c6:	ldrb	r1, [r5, #4]
    15c8:	ldrb	r0, [r5, #0]
    15ca:	bl	24b0 <digitalWrite>

      if (blinking) {
    15ce:	ldrb	r3, [r5, #16]
    15d0:	cbz	r3, 15e0 <loop+0x114c>
        digitalWrite(m_pin, !m_state);
    15d2:	ldr	r1, [r5, #4]
    15d4:	ldrb	r0, [r5, #0]
    15d6:	clz	r1, r1
    15da:	lsrs	r1, r1, #5
    15dc:	bl	24b0 <digitalWrite>
    15e0:	ldr	r1, [r6, #28]
    15e2:	ldr	r2, [r6, #12]
    15e4:	ldrb.w	r3, [r1, #45]	; 0x2d
    15e8:	eor.w	r3, r3, #1
    15ec:	strb.w	r3, [r1, #45]	; 0x2d
    15f0:	b.w	53a <loop+0xa6>
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    15f4:	ldr	r3, [r6, #4]
    15f6:	clz	r3, r3
    15fa:	lsrs	r3, r3, #5
    15fc:	str	r3, [r6, #4]
    15fe:	movs	r1, #8
    1600:	bl	1ea0 <usb_serial_write>
    1604:	ldr	r0, [pc, #52]	; (163c <loop+0x11a8>)
    1606:	bl	3a14 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    160a:	ldrb	r1, [r6, #4]
    160c:	ldrb	r0, [r6, #0]
    160e:	bl	24b0 <digitalWrite>

      if (blinking) {
    1612:	ldrb	r3, [r6, #16]
    1614:	cbz	r3, 1624 <loop+0x1190>
        digitalWrite(m_pin, !m_state);
    1616:	ldr	r1, [r6, #4]
    1618:	ldrb	r0, [r6, #0]
    161a:	clz	r1, r1
    161e:	lsrs	r1, r1, #5
    1620:	bl	24b0 <digitalWrite>
    1624:	ldr	r1, [r5, #28]
    1626:	ldr	r2, [r5, #12]
    1628:	ldrb.w	r3, [r1, #45]	; 0x2d
    162c:	eor.w	r3, r3, #1
    1630:	strb.w	r3, [r1, #45]	; 0x2d
    1634:	b.w	5ce <loop+0x13a>
    1638:	.word	0x00004dfc
    163c:	.word	0x1fff0c70
    1640:	.word	0x1fff1800
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1644:	ldr	r3, [r5, #4]
    1646:	clz	r3, r3
    164a:	lsrs	r3, r3, #5
    164c:	str	r3, [r5, #4]
    164e:	movs	r1, #8
    1650:	bl	1ea0 <usb_serial_write>
    1654:	ldr	r0, [pc, #792]	; (1970 <loop+0x14dc>)
    1656:	bl	3a14 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    165a:	ldrb	r1, [r5, #4]
    165c:	ldrb	r0, [r5, #0]
    165e:	bl	24b0 <digitalWrite>

      if (blinking) {
    1662:	ldrb	r3, [r5, #16]
    1664:	cbz	r3, 1674 <loop+0x11e0>
        digitalWrite(m_pin, !m_state);
    1666:	ldr	r1, [r5, #4]
    1668:	ldrb	r0, [r5, #0]
    166a:	clz	r1, r1
    166e:	lsrs	r1, r1, #5
    1670:	bl	24b0 <digitalWrite>
    1674:	ldr	r1, [r6, #28]
    1676:	ldr	r2, [r6, #12]
    1678:	ldrb.w	r3, [r1, #45]	; 0x2d
    167c:	eor.w	r3, r3, #1
    1680:	strb.w	r3, [r1, #45]	; 0x2d
    1684:	b.w	7ae <loop+0x31a>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1688:	ldr	r0, [pc, #744]	; (1974 <loop+0x14e0>)
    168a:	bl	273c <usb_midi_write_packed>
    168e:	ldr	r3, [r5, #8]
    1690:	b.n	1036 <loop+0xba2>
    1692:	ldr	r0, [r2, #8]
    1694:	ldr	r3, [r2, #12]
    1696:	lsls	r0, r0, #16
    1698:	lsls	r3, r3, #24
    169a:	and.w	r3, r3, #2130706432	; 0x7f000000
    169e:	and.w	r0, r0, #8323072	; 0x7f0000
    16a2:	orrs	r0, r3
    16a4:	orr.w	r0, r0, #40704	; 0x9f00
    16a8:	orr.w	r0, r0, #9
    16ac:	bl	273c <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    16b0:	bl	27d8 <usb_midi_flush_output>
    16b4:	ldr	r3, [r6, #0]
    16b6:	b.n	fac <loop+0xb18>
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
          m_currentStep = 3;
    16b8:	movs	r3, #3
    16ba:	str	r3, [r6, #0]
    16bc:	b.n	fc0 <loop+0xb2c>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    16be:	subs	r2, r3, #1
    16c0:	cmp	r3, #0
    16c2:	beq.w	18ae <loop+0x141a>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    16c6:	str	r2, [r6, #0]
    16c8:	b.n	1096 <loop+0xc02>
    16ca:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    16cc:	mov.w	sl, #1
    16d0:	ldr	r0, [pc, #676]	; (1978 <loop+0x14e4>)
    16d2:	strb.w	sl, [lr]
    16d6:	bl	1ea0 <usb_serial_write>
    16da:	ldr	r0, [pc, #660]	; (1970 <loop+0x14dc>)
    16dc:	bl	3a14 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    16e0:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    16e4:	ldrb.w	r9, [r6]
    16e8:	mov	r0, r9
    16ea:	bl	24bc <digitalRead>
    16ee:	clz	r1, r0
    16f2:	lsrs	r1, r1, #5
    16f4:	mov	r0, r9
    16f6:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16fa:	ldr.w	r3, [r8]
    16fe:	str	r3, [sp, #196]	; 0xc4
      blinking = true;
      blinkingCounter = times;
    1700:	movw	r1, #999	; 0x3e7
	return ret;
    1704:	ldr	r3, [sp, #196]	; 0xc4
    1706:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1708:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    170c:	str	r1, [r6, #20]
      lastBlink = millis();  
    170e:	str	r3, [r6, #8]
    1710:	b.w	842 <loop+0x3ae>
    1714:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1716:	mov.w	sl, #1
    171a:	ldr	r0, [pc, #604]	; (1978 <loop+0x14e4>)
    171c:	strb.w	sl, [lr]
    1720:	bl	1ea0 <usb_serial_write>
    1724:	ldr	r0, [pc, #584]	; (1970 <loop+0x14dc>)
    1726:	bl	3a14 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    172a:	ldr.w	r5, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    172e:	ldrb.w	r9, [r5]
    1732:	mov	r0, r9
    1734:	bl	24bc <digitalRead>
    1738:	clz	r1, r0
    173c:	lsrs	r1, r1, #5
    173e:	mov	r0, r9
    1740:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1744:	ldr.w	r3, [r8]
    1748:	str	r3, [sp, #184]	; 0xb8
      blinking = true;
      blinkingCounter = times;
    174a:	movw	r1, #999	; 0x3e7
	return ret;
    174e:	ldr	r3, [sp, #184]	; 0xb8
    1750:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1752:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    1756:	str	r1, [r5, #20]
      lastBlink = millis();  
    1758:	str	r3, [r5, #8]
    175a:	b.w	7ae <loop+0x31a>
    175e:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1760:	mov.w	sl, #1
    1764:	ldr	r0, [pc, #528]	; (1978 <loop+0x14e4>)
    1766:	strb.w	sl, [lr]
    176a:	bl	1ea0 <usb_serial_write>
    176e:	ldr	r0, [pc, #512]	; (1970 <loop+0x14dc>)
    1770:	bl	3a14 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    1774:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1778:	ldrb.w	r9, [r6]
    177c:	mov	r0, r9
    177e:	bl	24bc <digitalRead>
    1782:	clz	r1, r0
    1786:	lsrs	r1, r1, #5
    1788:	mov	r0, r9
    178a:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    178e:	ldr.w	r3, [r8]
    1792:	str	r3, [sp, #172]	; 0xac
      blinking = true;
      blinkingCounter = times;
    1794:	movw	r1, #999	; 0x3e7
	return ret;
    1798:	ldr	r3, [sp, #172]	; 0xac
    179a:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    179c:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    17a0:	str	r1, [r6, #20]
      lastBlink = millis();  
    17a2:	str	r3, [r6, #8]
    17a4:	b.w	6f6 <loop+0x262>
    17a8:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    17aa:	mov.w	sl, #1
    17ae:	ldr	r0, [pc, #456]	; (1978 <loop+0x14e4>)
    17b0:	strb.w	sl, [lr]
    17b4:	bl	1ea0 <usb_serial_write>
    17b8:	ldr	r0, [pc, #436]	; (1970 <loop+0x14dc>)
    17ba:	bl	3a14 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    17be:	ldr.w	r5, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    17c2:	ldrb.w	r9, [r5]
    17c6:	mov	r0, r9
    17c8:	bl	24bc <digitalRead>
    17cc:	clz	r1, r0
    17d0:	lsrs	r1, r1, #5
    17d2:	mov	r0, r9
    17d4:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17d8:	ldr.w	r3, [r8]
    17dc:	str	r3, [sp, #136]	; 0x88
      blinking = true;
      blinkingCounter = times;
    17de:	movw	r1, #999	; 0x3e7
	return ret;
    17e2:	ldr	r3, [sp, #136]	; 0x88
    17e4:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    17e6:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    17ea:	str	r1, [r5, #20]
      lastBlink = millis();  
    17ec:	str	r3, [r5, #8]
    17ee:	b.w	53a <loop+0xa6>
    17f2:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    17f4:	mov.w	sl, #1
    17f8:	ldr	r0, [pc, #380]	; (1978 <loop+0x14e4>)
    17fa:	strb.w	sl, [lr]
    17fe:	bl	1ea0 <usb_serial_write>
    1802:	ldr	r0, [pc, #364]	; (1970 <loop+0x14dc>)
    1804:	bl	3a14 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    1808:	ldr.w	r5, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    180c:	ldrb.w	r9, [r5]
    1810:	mov	r0, r9
    1812:	bl	24bc <digitalRead>
    1816:	clz	r1, r0
    181a:	lsrs	r1, r1, #5
    181c:	mov	r0, r9
    181e:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1822:	ldr.w	r3, [r8]
    1826:	str	r3, [sp, #160]	; 0xa0
      blinking = true;
      blinkingCounter = times;
    1828:	movw	r1, #999	; 0x3e7
	return ret;
    182c:	ldr	r3, [sp, #160]	; 0xa0
    182e:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1830:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    1834:	str	r1, [r5, #20]
      lastBlink = millis();  
    1836:	str	r3, [r5, #8]
    1838:	b.w	662 <loop+0x1ce>
    183c:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    183e:	mov.w	sl, #1
    1842:	ldr	r0, [pc, #308]	; (1978 <loop+0x14e4>)
    1844:	strb.w	sl, [lr]
    1848:	bl	1ea0 <usb_serial_write>
    184c:	ldr	r0, [pc, #288]	; (1970 <loop+0x14dc>)
    184e:	bl	3a14 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    1852:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1856:	ldrb.w	r9, [r6]
    185a:	mov	r0, r9
    185c:	bl	24bc <digitalRead>
    1860:	clz	r1, r0
    1864:	lsrs	r1, r1, #5
    1866:	mov	r0, r9
    1868:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    186c:	ldr.w	r3, [r8]
    1870:	str	r3, [sp, #148]	; 0x94
      blinking = true;
      blinkingCounter = times;
    1872:	movw	r1, #999	; 0x3e7
	return ret;
    1876:	ldr	r3, [sp, #148]	; 0x94
    1878:	ldr	r2, [r7, #12]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    187a:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    187e:	str	r1, [r6, #20]
      lastBlink = millis();  
    1880:	str	r3, [r6, #8]
    1882:	b.w	5ce <loop+0x13a>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1886:	ldr	r0, [r2, #8]
    1888:	ldr	r3, [r2, #12]
    188a:	lsls	r0, r0, #16
    188c:	lsls	r3, r3, #24
    188e:	and.w	r3, r3, #2130706432	; 0x7f000000
    1892:	and.w	r0, r0, #8323072	; 0x7f0000
    1896:	orrs	r0, r3
    1898:	orr.w	r0, r0, #40704	; 0x9f00
    189c:	orr.w	r0, r0, #9
    18a0:	bl	273c <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    18a4:	bl	27d8 <usb_midi_flush_output>
    18a8:	ldr	r3, [r6, #0]
    18aa:	b.w	1082 <loop+0xbee>
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
          m_currentStep = 3;
    18ae:	movs	r3, #3
    18b0:	str	r3, [r6, #0]
    18b2:	b.w	1096 <loop+0xc02>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    18b6:	movs	r2, #2
    18b8:	movs	r1, #10
    18ba:	ldr	r0, [pc, #192]	; (197c <loop+0x14e8>)
    18bc:	strb.w	r2, [lr]
    18c0:	str	r3, [sp, #4]
    18c2:	bl	1ea0 <usb_serial_write>
    18c6:	ldr	r0, [pc, #168]	; (1970 <loop+0x14dc>)
    18c8:	bl	3a14 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    18cc:	ldr.w	sl, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    18d0:	ldrb.w	fp, [sl]
    18d4:	mov	r0, fp
    18d6:	bl	24bc <digitalRead>
    18da:	clz	r1, r0
    18de:	lsrs	r1, r1, #5
    18e0:	mov	r0, fp
    18e2:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18e6:	ldr.w	r2, [r8]
    18ea:	str	r2, [sp, #188]	; 0xbc
        m_leds[4]->off();
    18ec:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    18f0:	ldr	r1, [sp, #188]	; 0xbc
      blinking = true;
    18f2:	ldr	r3, [sp, #4]
      blinkingCounter = times;
      lastBlink = millis();  
    18f4:	str.w	r1, [sl, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    18f8:	strb.w	r3, [sl, #16]
      blinkingCounter = times;
    18fc:	str.w	r5, [sl, #20]
    };

    void off () {
      blinking = false;
      m_state = 0;
      digitalWrite(m_pin, m_state);
    1900:	ldrb	r0, [r2, #0]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    1902:	strb	r5, [r2, #16]
      m_state = 0;
    1904:	str	r5, [r2, #4]
      digitalWrite(m_pin, m_state);
    1906:	mov	r1, r5
    1908:	bl	24b0 <digitalWrite>
    190c:	ldr	r2, [r7, #12]
    190e:	b.w	7ae <loop+0x31a>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1912:	movs	r2, #2
    1914:	movs	r1, #10
    1916:	ldr	r0, [pc, #100]	; (197c <loop+0x14e8>)
    1918:	strb.w	r2, [lr]
    191c:	str	r3, [sp, #4]
    191e:	bl	1ea0 <usb_serial_write>
    1922:	ldr	r0, [pc, #76]	; (1970 <loop+0x14dc>)
    1924:	bl	3a14 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    1928:	ldr.w	sl, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    192c:	ldrb.w	fp, [sl]
    1930:	mov	r0, fp
    1932:	bl	24bc <digitalRead>
    1936:	clz	r1, r0
    193a:	lsrs	r1, r1, #5
    193c:	mov	r0, fp
    193e:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1942:	ldr.w	r2, [r8]
    1946:	str	r2, [sp, #200]	; 0xc8
        m_leds[4]->off();
    1948:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    194c:	ldr	r1, [sp, #200]	; 0xc8
      blinking = true;
    194e:	ldr	r3, [sp, #4]
      blinkingCounter = times;
      lastBlink = millis();  
    1950:	str.w	r1, [sl, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1954:	strb.w	r3, [sl, #16]
      blinkingCounter = times;
    1958:	str.w	r6, [sl, #20]
    };

    void off () {
      blinking = false;
      m_state = 0;
      digitalWrite(m_pin, m_state);
    195c:	ldrb	r0, [r2, #0]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    195e:	strb	r6, [r2, #16]
      m_state = 0;
    1960:	str	r6, [r2, #4]
      digitalWrite(m_pin, m_state);
    1962:	mov	r1, r6
    1964:	bl	24b0 <digitalWrite>
    1968:	ldr	r2, [r7, #12]
    196a:	b.w	842 <loop+0x3ae>
    196e:	nop
    1970:	.word	0x1fff0c70
    1974:	.word	0x7f7bbf0b
    1978:	.word	0x00004de4
    197c:	.word	0x00004df0
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1980:	movs	r2, #2
    1982:	movs	r1, #10
    1984:	ldr	r0, [pc, #360]	; (1af0 <loop+0x165c>)
    1986:	strb.w	r2, [lr]
    198a:	str	r3, [sp, #4]
    198c:	bl	1ea0 <usb_serial_write>
    1990:	ldr	r0, [pc, #352]	; (1af4 <loop+0x1660>)
    1992:	bl	3a14 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    1996:	ldr.w	sl, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    199a:	ldrb.w	fp, [sl]
    199e:	mov	r0, fp
    19a0:	bl	24bc <digitalRead>
    19a4:	clz	r1, r0
    19a8:	lsrs	r1, r1, #5
    19aa:	mov	r0, fp
    19ac:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19b0:	ldr.w	r2, [r8]
    19b4:	str	r2, [sp, #164]	; 0xa4
        m_leds[4]->off();
    19b6:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    19ba:	ldr	r1, [sp, #164]	; 0xa4
      blinking = true;
    19bc:	ldr	r3, [sp, #4]
      blinkingCounter = times;
      lastBlink = millis();  
    19be:	str.w	r1, [sl, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    19c2:	strb.w	r3, [sl, #16]
      blinkingCounter = times;
    19c6:	str.w	r5, [sl, #20]
    };

    void off () {
      blinking = false;
      m_state = 0;
      digitalWrite(m_pin, m_state);
    19ca:	ldrb	r0, [r2, #0]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    19cc:	strb	r5, [r2, #16]
      m_state = 0;
    19ce:	str	r5, [r2, #4]
      digitalWrite(m_pin, m_state);
    19d0:	mov	r1, r5
    19d2:	bl	24b0 <digitalWrite>
    19d6:	ldr	r2, [r7, #12]
    19d8:	b.w	662 <loop+0x1ce>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    19dc:	movs	r2, #2
    19de:	movs	r1, #10
    19e0:	ldr	r0, [pc, #268]	; (1af0 <loop+0x165c>)
    19e2:	strb.w	r2, [lr]
    19e6:	str	r3, [sp, #4]
    19e8:	bl	1ea0 <usb_serial_write>
    19ec:	ldr	r0, [pc, #260]	; (1af4 <loop+0x1660>)
    19ee:	bl	3a14 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    19f2:	ldr.w	sl, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    19f6:	ldrb.w	fp, [sl]
    19fa:	mov	r0, fp
    19fc:	bl	24bc <digitalRead>
    1a00:	clz	r1, r0
    1a04:	lsrs	r1, r1, #5
    1a06:	mov	r0, fp
    1a08:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a0c:	ldr.w	r2, [r8]
    1a10:	str	r2, [sp, #152]	; 0x98
        m_leds[4]->off();
    1a12:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1a16:	ldr	r1, [sp, #152]	; 0x98
      blinking = true;
    1a18:	ldr	r3, [sp, #4]
      blinkingCounter = times;
      lastBlink = millis();  
    1a1a:	str.w	r1, [sl, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1a1e:	strb.w	r3, [sl, #16]
      blinkingCounter = times;
    1a22:	str.w	r6, [sl, #20]
    };

    void off () {
      blinking = false;
      m_state = 0;
      digitalWrite(m_pin, m_state);
    1a26:	ldrb	r0, [r2, #0]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    1a28:	strb	r6, [r2, #16]
      m_state = 0;
    1a2a:	str	r6, [r2, #4]
      digitalWrite(m_pin, m_state);
    1a2c:	mov	r1, r6
    1a2e:	bl	24b0 <digitalWrite>
    1a32:	ldr	r2, [r7, #12]
    1a34:	b.w	5ce <loop+0x13a>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1a38:	movs	r2, #2
    1a3a:	movs	r1, #10
    1a3c:	ldr	r0, [pc, #176]	; (1af0 <loop+0x165c>)
    1a3e:	strb.w	r2, [lr]
    1a42:	str	r3, [sp, #4]
    1a44:	bl	1ea0 <usb_serial_write>
    1a48:	ldr	r0, [pc, #168]	; (1af4 <loop+0x1660>)
    1a4a:	bl	3a14 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    1a4e:	ldr.w	sl, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1a52:	ldrb.w	fp, [sl]
    1a56:	mov	r0, fp
    1a58:	bl	24bc <digitalRead>
    1a5c:	clz	r1, r0
    1a60:	lsrs	r1, r1, #5
    1a62:	mov	r0, fp
    1a64:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a68:	ldr.w	r2, [r8]
    1a6c:	str	r2, [sp, #176]	; 0xb0
        m_leds[4]->off();
    1a6e:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1a72:	ldr	r1, [sp, #176]	; 0xb0
      blinking = true;
    1a74:	ldr	r3, [sp, #4]
      blinkingCounter = times;
      lastBlink = millis();  
    1a76:	str.w	r1, [sl, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1a7a:	strb.w	r3, [sl, #16]
      blinkingCounter = times;
    1a7e:	str.w	r6, [sl, #20]
    };

    void off () {
      blinking = false;
      m_state = 0;
      digitalWrite(m_pin, m_state);
    1a82:	ldrb	r0, [r2, #0]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    1a84:	strb	r6, [r2, #16]
      m_state = 0;
    1a86:	str	r6, [r2, #4]
      digitalWrite(m_pin, m_state);
    1a88:	mov	r1, r6
    1a8a:	bl	24b0 <digitalWrite>
    1a8e:	ldr	r2, [r7, #12]
    1a90:	b.w	6f6 <loop+0x262>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1a94:	movs	r2, #2
    1a96:	movs	r1, #10
    1a98:	ldr	r0, [pc, #84]	; (1af0 <loop+0x165c>)
    1a9a:	strb.w	r2, [lr]
    1a9e:	str	r3, [sp, #4]
    1aa0:	bl	1ea0 <usb_serial_write>
    1aa4:	ldr	r0, [pc, #76]	; (1af4 <loop+0x1660>)
    1aa6:	bl	3a14 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    1aaa:	ldr.w	sl, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1aae:	ldrb.w	fp, [sl]
    1ab2:	mov	r0, fp
    1ab4:	bl	24bc <digitalRead>
    1ab8:	clz	r1, r0
    1abc:	lsrs	r1, r1, #5
    1abe:	mov	r0, fp
    1ac0:	bl	24b0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ac4:	ldr.w	r2, [r8]
    1ac8:	str	r2, [sp, #140]	; 0x8c
        m_leds[4]->off();
    1aca:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1ace:	ldr	r1, [sp, #140]	; 0x8c
      blinking = true;
    1ad0:	ldr	r3, [sp, #4]
      blinkingCounter = times;
      lastBlink = millis();  
    1ad2:	str.w	r1, [sl, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1ad6:	strb.w	r3, [sl, #16]
      blinkingCounter = times;
    1ada:	str.w	r5, [sl, #20]
    };

    void off () {
      blinking = false;
      m_state = 0;
      digitalWrite(m_pin, m_state);
    1ade:	ldrb	r0, [r2, #0]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    1ae0:	strb	r5, [r2, #16]
      m_state = 0;
    1ae2:	str	r5, [r2, #4]
      digitalWrite(m_pin, m_state);
    1ae4:	mov	r1, r5
    1ae6:	bl	24b0 <digitalWrite>
    1aea:	ldr	r2, [r7, #12]
    1aec:	b.w	53a <loop+0xa6>
    1af0:	.word	0x00004df0
    1af4:	.word	0x1fff0c70

00001af8 <_GLOBAL__sub_I_currentMode>:
    1af8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#include "controller.h"
#include "transport.h"
#include "step.h"


Led led1(3, LOW);
    1afc:	movs	r2, #0
    1afe:	movs	r1, #3
    1b00:	ldr	r0, [pc, #608]	; (1d64 <_GLOBAL__sub_I_currentMode+0x26c>)
    Led* m_leds[6];
    Modes m_mode;
    boolean m_reverse;

    Sequence (Step* steps[4], Led* leds[6]) {
      m_leds[0] = leds[0];
    1b02:	ldr	r6, [pc, #612]	; (1d68 <_GLOBAL__sub_I_currentMode+0x270>)
    1b04:	ldr	r4, [pc, #612]	; (1d6c <_GLOBAL__sub_I_currentMode+0x274>)
    1b06:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    1b0a:	movs	r2, #0
    1b0c:	movs	r1, #5
    1b0e:	ldr	r0, [pc, #608]	; (1d70 <_GLOBAL__sub_I_currentMode+0x278>)
    1b10:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    1b14:	movs	r2, #0
    1b16:	movs	r1, #7
    1b18:	ldr	r0, [pc, #600]	; (1d74 <_GLOBAL__sub_I_currentMode+0x27c>)
    1b1a:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    1b1e:	movs	r2, #0
    1b20:	movs	r1, #9
    1b22:	ldr	r0, [pc, #596]	; (1d78 <_GLOBAL__sub_I_currentMode+0x280>)
    1b24:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    1b28:	movs	r2, #0
    1b2a:	movs	r1, #11
    1b2c:	ldr	r0, [pc, #588]	; (1d7c <_GLOBAL__sub_I_currentMode+0x284>)
    1b2e:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    1b32:	movs	r2, #0
    1b34:	movs	r1, #24
    1b36:	ldr	r0, [pc, #584]	; (1d80 <_GLOBAL__sub_I_currentMode+0x288>)
    1b38:	bl	46c <Led::Led(int, int)>
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1b3c:	ldr	r2, [pc, #580]	; (1d84 <_GLOBAL__sub_I_currentMode+0x28c>)
    1b3e:	ldr.w	lr, [pc, #652]	; 1dcc <_GLOBAL__sub_I_currentMode+0x2d4>
    1b42:	ldr	r7, [r6, #0]
      m_leds[1] = leds[1];
    1b44:	ldr	r3, [r6, #4]
      m_leds[2] = leds[2];
    1b46:	ldr	r0, [r6, #8]
      m_leds[3] = leds[3];
    1b48:	ldr	r1, [r6, #12]
    Led* m_leds[6];
    Modes m_mode;
    boolean m_reverse;

    Sequence (Step* steps[4], Led* leds[6]) {
      m_leds[0] = leds[0];
    1b4a:	str	r7, [r4, #20]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
    1b4c:	mov.w	r8, #38	; 0x26
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1b50:	ldr	r7, [pc, #564]	; (1d88 <_GLOBAL__sub_I_currentMode+0x290>)
      m_leds[1] = leds[1];
    1b52:	str	r3, [r4, #24]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    1b54:	mov.w	r9, #100	; 0x64
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    1b58:	movs	r3, #0
      m_leds[2] = leds[2];
    1b5a:	str	r0, [r4, #28]
      m_leds[3] = leds[3];
    1b5c:	str	r1, [r4, #32]
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
      m_length = 4;
    1b5e:	movs	r0, #4
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
    1b60:	ldr	r1, [r6, #20]
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    1b62:	strb	r3, [r2, #4]
    1b64:	strb.w	r3, [lr, #4]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1b68:	str	r7, [r2, #0]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
      m_length = 4;
    1b6a:	str	r0, [r2, #16]
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
    1b6c:	str.w	r8, [r2, #8]
      m_velocity = 100;
    1b70:	str.w	r9, [r2, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1b74:	str.w	r7, [lr]
    1b78:	ldr	r2, [pc, #528]	; (1d8c <_GLOBAL__sub_I_currentMode+0x294>)
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
      m_length = 4;
    1b7a:	str.w	r0, [lr, #16]
    1b7e:	str	r1, [r4, #40]	; 0x28
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
    1b80:	str.w	r8, [lr, #8]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1b84:	ldr	r1, [pc, #520]	; (1d90 <_GLOBAL__sub_I_currentMode+0x298>)
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    1b86:	str.w	r9, [lr, #12]
      m_steps[0] = steps[0];
    1b8a:	ldr.w	lr, [pc, #580]	; 1dd0 <_GLOBAL__sub_I_currentMode+0x2d8>
    Sequence (Step* steps[4], Led* leds[6]) {
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
    1b8e:	ldr	r5, [r6, #16]
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    1b90:	strb	r3, [r1, #4]
    1b92:	strb	r3, [r2, #4]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1b94:	str	r7, [r1, #0]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
      m_length = 4;
    1b96:	str	r0, [r1, #16]
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
    1b98:	str.w	r8, [r1, #8]
      m_velocity = 100;
    1b9c:	str.w	r9, [r1, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1ba0:	str	r7, [r2, #0]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
      m_length = 4;
    1ba2:	str	r0, [r2, #16]
    1ba4:	str	r5, [r4, #36]	; 0x24
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
    1ba6:	str.w	r8, [r2, #8]
      m_velocity = 100;
    1baa:	str.w	r9, [r2, #12]
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
    1bae:	ldr.w	r2, [lr]
    1bb2:	str	r2, [r4, #4]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1bb4:	ldr	r2, [r5, #4]
      m_steps[1] = steps[1];
      m_steps[2] = steps[2];
    1bb6:	ldr.w	r0, [lr, #8]
      m_steps[3] = steps[3];
    1bba:	ldr.w	r1, [lr, #12]
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
      m_steps[1] = steps[1];
    1bbe:	ldr.w	r7, [lr, #4]
      m_steps[2] = steps[2];
      m_steps[3] = steps[3];
      m_currentStep = 0;
      m_mode = PITCH;
    1bc2:	strb.w	r3, [r4, #44]	; 0x2c
    1bc6:	clz	r2, r2
    1bca:	lsrs	r2, r2, #5
      m_reverse = false;
    1bcc:	strb.w	r3, [r4, #45]	; 0x2d
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
      m_steps[1] = steps[1];
      m_steps[2] = steps[2];
    1bd0:	str	r0, [r4, #12]
      m_steps[3] = steps[3];
    1bd2:	str	r1, [r4, #16]
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
      m_steps[1] = steps[1];
    1bd4:	str	r7, [r4, #8]
    1bd6:	movs	r1, #8
    1bd8:	str	r2, [r5, #4]
    1bda:	ldr	r0, [pc, #440]	; (1d94 <_GLOBAL__sub_I_currentMode+0x29c>)
      m_steps[2] = steps[2];
      m_steps[3] = steps[3];
      m_currentStep = 0;
    1bdc:	str	r3, [r4, #0]
    1bde:	bl	1ea0 <usb_serial_write>
    1be2:	ldr	r0, [pc, #436]	; (1d98 <_GLOBAL__sub_I_currentMode+0x2a0>)
    1be4:	bl	3a14 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1be8:	ldrb	r1, [r5, #4]
    1bea:	ldrb	r0, [r5, #0]
    1bec:	bl	24b0 <digitalWrite>

      if (blinking) {
    1bf0:	ldrb	r3, [r5, #16]
    1bf2:	cbz	r3, 1c02 <_GLOBAL__sub_I_currentMode+0x10a>
        digitalWrite(m_pin, !m_state);
    1bf4:	ldr	r1, [r5, #4]
    1bf6:	ldrb	r0, [r5, #0]
    1bf8:	clz	r1, r1
    1bfc:	lsrs	r1, r1, #5
    1bfe:	bl	24b0 <digitalWrite>
      m_mode = PITCH;
      m_reverse = false;
      m_leds[4]->toggle();
      m_leds[5]->toggle();
    1c02:	ldr	r5, [r4, #40]	; 0x28
    1c04:	ldr	r0, [pc, #396]	; (1d94 <_GLOBAL__sub_I_currentMode+0x29c>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1c06:	ldr	r3, [r5, #4]
    1c08:	clz	r3, r3
    1c0c:	lsrs	r3, r3, #5
    1c0e:	str	r3, [r5, #4]
    1c10:	movs	r1, #8
    1c12:	bl	1ea0 <usb_serial_write>
    1c16:	ldr	r0, [pc, #384]	; (1d98 <_GLOBAL__sub_I_currentMode+0x2a0>)
    1c18:	bl	3a14 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1c1c:	ldrb	r1, [r5, #4]
    1c1e:	ldrb	r0, [r5, #0]
    1c20:	bl	24b0 <digitalWrite>

      if (blinking) {
    1c24:	ldrb	r3, [r5, #16]
    1c26:	cbz	r3, 1c36 <_GLOBAL__sub_I_currentMode+0x13e>
        digitalWrite(m_pin, !m_state);
    1c28:	ldr	r1, [r5, #4]
    1c2a:	ldrb	r0, [r5, #0]
    1c2c:	clz	r1, r1
    1c30:	lsrs	r1, r1, #5
    1c32:	bl	24b0 <digitalWrite>
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    1c36:	ldr	r7, [pc, #356]	; (1d9c <_GLOBAL__sub_I_currentMode+0x2a4>)
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1c38:	ldr	r2, [pc, #356]	; (1da0 <_GLOBAL__sub_I_currentMode+0x2a8>)
    1c3a:	str	r4, [r7, #12]
    1c3c:	movs	r5, #0
      m_id = id;
      m_pin = pin;
    1c3e:	mov.w	r9, #2
    1c42:	movs	r3, #24
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1c44:	mov.w	sl, #1
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1c48:	mov	r1, r5
    1c4a:	mov	r0, r9
    1c4c:	str	r3, [r7, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1c4e:	ldr	r3, [r6, #0]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1c50:	strb	r5, [r2, #16]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1c52:	mov.w	r8, #4
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    1c56:	strb	r5, [r2, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1c58:	str	r3, [r2, #24]
    1c5a:	str	r5, [r7, #8]
      m_state = false;
    1c5c:	strb	r5, [r7, #0]
    1c5e:	str	r4, [r2, #28]
      m_id = id;
    1c60:	str.w	sl, [r2]
      m_pin = pin;
    1c64:	str.w	r9, [r2, #32]
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1c68:	bl	24d8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1c6c:	ldr	r2, [pc, #308]	; (1da4 <_GLOBAL__sub_I_currentMode+0x2ac>)
    1c6e:	ldr	r3, [r6, #4]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1c70:	strb	r5, [r2, #16]
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1c72:	mov	r1, r5
    1c74:	mov	r0, r8
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    1c76:	strb	r5, [r2, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1c78:	str	r3, [r2, #24]
      m_id = id;
    1c7a:	str.w	r9, [r2]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1c7e:	str	r4, [r2, #28]
      m_id = id;
      m_pin = pin;
    1c80:	str.w	r8, [r2, #32]
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1c84:	bl	24d8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1c88:	ldr	r3, [pc, #284]	; (1da8 <_GLOBAL__sub_I_currentMode+0x2b0>)
    1c8a:	ldr	r2, [r6, #8]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1c8c:	strb	r5, [r3, #16]
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1c8e:	mov	r1, r5
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1c90:	mov.w	fp, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1c94:	movs	r0, #6
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    1c96:	strb	r5, [r3, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1c98:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1c9a:	str	r0, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1c9c:	str	r4, [r3, #28]
      m_id = id;
    1c9e:	str.w	fp, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1ca2:	bl	24d8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1ca6:	ldr	r3, [pc, #260]	; (1dac <_GLOBAL__sub_I_currentMode+0x2b4>)
    1ca8:	ldr	r0, [r6, #12]
    1caa:	str	r0, [r3, #24]
      m_id = id;
      m_pin = pin;
    1cac:	movs	r2, #8
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1cae:	mov	r1, r5
    1cb0:	mov	r0, r2
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1cb2:	strb	r5, [r3, #16]
      m_reverseButton = reverseButton;
    1cb4:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1cb6:	str	r2, [r3, #32]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1cb8:	str.w	r8, [r3]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1cbc:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1cbe:	bl	24d8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1cc2:	ldr	r3, [pc, #236]	; (1db0 <_GLOBAL__sub_I_currentMode+0x2b8>)
    1cc4:	ldr	r0, [r6, #16]
    1cc6:	str	r0, [r3, #24]
      m_id = id;
      m_pin = pin;
    1cc8:	movs	r2, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1cca:	movs	r0, #5
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1ccc:	mov	r1, r5
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1cce:	str	r0, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1cd0:	mov	r0, r2
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    1cd2:	strb	r5, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1cd4:	str	r2, [r3, #32]
      m_shiftButton = shiftButton;
    1cd6:	strb.w	sl, [r3, #16]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1cda:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1cdc:	bl	24d8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1ce0:	ldr	r3, [pc, #208]	; (1db4 <_GLOBAL__sub_I_currentMode+0x2bc>)
    1ce2:	ldr	r6, [r6, #20]
    1ce4:	str	r6, [r3, #24]
      m_id = id;
    1ce6:	movs	r2, #6
    1ce8:	str	r2, [r3, #0]
      m_pin = pin;
    1cea:	movs	r2, #12
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1cec:	ldr	r6, [pc, #200]	; (1db8 <_GLOBAL__sub_I_currentMode+0x2c0>)
      m_shiftButton = shiftButton;
    1cee:	strb	r5, [r3, #16]
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1cf0:	mov	r0, r2
    1cf2:	mov	r1, r5
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1cf4:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1cf6:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    1cf8:	strb.w	sl, [r3, #17]

      pinMode(pin, INPUT);
    1cfc:	bl	24d8 <pinMode>
    1d00:	ldr	r0, [pc, #184]	; (1dbc <_GLOBAL__sub_I_currentMode+0x2c4>)
    1d02:	ldr	r1, [pc, #188]	; (1dc0 <_GLOBAL__sub_I_currentMode+0x2c8>)
    1d04:	ldr	r2, [pc, #188]	; (1dc4 <_GLOBAL__sub_I_currentMode+0x2cc>)
    1d06:	ldr	r3, [pc, #192]	; (1dc8 <_GLOBAL__sub_I_currentMode+0x2d0>)
      m_pin = pin;
      m_knobType = knobType;
    1d08:	strb	r5, [r6, #24]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1d0a:	mov.w	ip, #14
      m_knobType = knobType;
      m_id = id;
    1d0e:	str	r5, [r6, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1d10:	strb.w	ip, [r6]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1d14:	str	r7, [r6, #20]
    1d16:	str	r4, [r6, #16]
      m_pin = pin;
    1d18:	mov.w	lr, #15
    1d1c:	mov.w	ip, #16
    1d20:	movs	r6, #17
    1d22:	movs	r5, #18
    1d24:	strb.w	lr, [r0]
    1d28:	strb.w	ip, [r1]
    1d2c:	strb	r6, [r2, #0]
    1d2e:	strb	r5, [r3, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1d30:	str	r7, [r0, #20]
    1d32:	str	r4, [r0, #16]
      m_pin = pin;
      m_knobType = knobType;
    1d34:	strb.w	sl, [r0, #24]
      m_id = id;
    1d38:	str.w	sl, [r0, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1d3c:	str	r7, [r1, #20]
    1d3e:	str	r4, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    1d40:	strb.w	r9, [r1, #24]
      m_id = id;
    1d44:	str.w	r9, [r1, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1d48:	str	r7, [r2, #20]
    1d4a:	str	r4, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    1d4c:	strb.w	fp, [r2, #24]
      m_id = id;
    1d50:	str.w	fp, [r2, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1d54:	str	r7, [r3, #20]
    1d56:	str	r4, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
    1d58:	strb.w	r8, [r3, #24]
      m_id = id;
    1d5c:	str.w	r8, [r3, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1d60:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d64:	.word	0x1fff1804
    1d68:	.word	0x1fff0c50
    1d6c:	.word	0x1fff17c0
    1d70:	.word	0x1fff181c
    1d74:	.word	0x1fff1834
    1d78:	.word	0x1fff184c
    1d7c:	.word	0x1fff15d8
    1d80:	.word	0x1fff15f0
    1d84:	.word	0x1fff16e4
    1d88:	.word	0x1fff1608
    1d8c:	.word	0x1fff1720
    1d90:	.word	0x1fff170c
    1d94:	.word	0x00004db4
    1d98:	.word	0x1fff0c70
    1d9c:	.word	0x1fff17f0
    1da0:	.word	0x1fff160c
    1da4:	.word	0x1fff1630
    1da8:	.word	0x1fff1654
    1dac:	.word	0x1fff1678
    1db0:	.word	0x1fff169c
    1db4:	.word	0x1fff16c0
    1db8:	.word	0x1fff1734
    1dbc:	.word	0x1fff1750
    1dc0:	.word	0x1fff176c
    1dc4:	.word	0x1fff1788
    1dc8:	.word	0x1fff17a4
    1dcc:	.word	0x1fff16f8
    1dd0:	.word	0x1fff0c40

00001dd4 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1dd4:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    1dd6:	ldr	r5, [pc, #60]	; (1e14 <usb_serial_getchar+0x40>)
    1dd8:	ldr	r0, [r5, #0]
    1dda:	cbz	r0, 1dfc <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1ddc:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    1dde:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1de0:	adds	r1, r0, r3
    1de2:	adds	r3, #1
	if (i >= rx_packet->len) {
    1de4:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1de6:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    1de8:	bcs.n	1df0 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    1dea:	strh	r3, [r0, #2]
	}
	return c;
    1dec:	mov	r0, r4
}
    1dee:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    1df0:	bl	2c80 <usb_free>
		rx_packet = NULL;
    1df4:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    1df6:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1df8:	str	r3, [r5, #0]
    1dfa:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1dfc:	ldr	r3, [pc, #24]	; (1e18 <usb_serial_getchar+0x44>)
    1dfe:	ldrb	r3, [r3, #0]
    1e00:	cbz	r3, 1e0e <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1e02:	movs	r0, #2
    1e04:	bl	2ccc <usb_rx>
    1e08:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    1e0a:	cmp	r0, #0
    1e0c:	bne.n	1ddc <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1e0e:	mov.w	r0, #4294967295
    1e12:	pop	{r3, r4, r5, pc}
    1e14:	.word	0x1fff1870
    1e18:	.word	0x1fff19d0

00001e1c <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1e1c:	push	{r4, lr}
	if (!rx_packet) {
    1e1e:	ldr	r4, [pc, #36]	; (1e44 <usb_serial_peekchar+0x28>)
    1e20:	ldr	r0, [r4, #0]
    1e22:	cbz	r0, 1e2c <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    1e24:	ldrh	r3, [r0, #2]
    1e26:	add	r0, r3
    1e28:	ldrb	r0, [r0, #8]
}
    1e2a:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1e2c:	ldr	r3, [pc, #24]	; (1e48 <usb_serial_peekchar+0x2c>)
    1e2e:	ldrb	r3, [r3, #0]
    1e30:	cbz	r3, 1e3e <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    1e32:	movs	r0, #2
    1e34:	bl	2ccc <usb_rx>
    1e38:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1e3a:	cmp	r0, #0
    1e3c:	bne.n	1e24 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1e3e:	mov.w	r0, #4294967295
    1e42:	pop	{r4, pc}
    1e44:	.word	0x1fff1870
    1e48:	.word	0x1fff19d0

00001e4c <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1e4c:	ldr	r3, [pc, #16]	; (1e60 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    1e4e:	ldr	r2, [pc, #20]	; (1e64 <usb_serial_available+0x18>)
    1e50:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    1e52:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1e54:	cbz	r3, 1e5e <usb_serial_available+0x12>
    1e56:	ldrh	r2, [r3, #0]
    1e58:	ldrh	r3, [r3, #2]
    1e5a:	subs	r3, r2, r3
    1e5c:	add	r0, r3
	return count;
}
    1e5e:	bx	lr
    1e60:	.word	0x1fff1870
    1e64:	.word	0x1fff1e64

00001e68 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    1e68:	ldr	r3, [pc, #44]	; (1e98 <usb_serial_flush_input+0x30>)
    1e6a:	ldrb	r3, [r3, #0]
    1e6c:	cbz	r3, 1e96 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    1e6e:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    1e70:	ldr	r4, [pc, #40]	; (1e9c <usb_serial_flush_input+0x34>)
    1e72:	ldr	r0, [r4, #0]
    1e74:	cbz	r0, 1e8a <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    1e76:	bl	2c80 <usb_free>
		rx_packet = NULL;
    1e7a:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1e7c:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1e7e:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1e80:	bl	2ccc <usb_rx>
		if (!rx) break;
    1e84:	cbz	r0, 1e94 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    1e86:	bl	2c80 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1e8a:	movs	r0, #2
    1e8c:	bl	2ccc <usb_rx>
		if (!rx) break;
    1e90:	cmp	r0, #0
    1e92:	bne.n	1e86 <usb_serial_flush_input+0x1e>
    1e94:	pop	{r4, pc}
    1e96:	bx	lr
    1e98:	.word	0x1fff19d0
    1e9c:	.word	0x1fff1870

00001ea0 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1ea0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1ea4:	ldr.w	r9, [pc, #248]	; 1fa0 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1ea8:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1eaa:	movs	r2, #1
    1eac:	strb.w	r2, [r9]
	while (size > 0) {
    1eb0:	str	r1, [sp, #4]
    1eb2:	cbz	r1, 1f10 <usb_serial_write+0x70>
    1eb4:	ldr.w	r8, [pc, #236]	; 1fa4 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1eb8:	ldr	r7, [pc, #212]	; (1f90 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1eba:	ldr	r6, [sp, #4]
    1ebc:	mov	fp, r0
		if (!tx_packet) {
    1ebe:	ldr.w	r0, [r8]
    1ec2:	cbz	r0, 1f32 <usb_serial_write+0x92>
    1ec4:	ldr	r5, [pc, #204]	; (1f94 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    1ec6:	ldrh	r4, [r0, #2]
    1ec8:	rsb	r1, r4, #64	; 0x40
    1ecc:	cmp	r1, r6
    1ece:	it	cs
    1ed0:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1ed2:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1ed6:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1ed8:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1edc:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    1ede:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1ee0:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1ee4:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1ee8:	cbz	r1, 1f00 <usb_serial_write+0x60>
    1eea:	subs	r4, #1
    1eec:	add	r2, r4
    1eee:	add	r1, fp
    1ef0:	ldrb.w	r4, [fp], #1
    1ef4:	strb.w	r4, [r2, #1]!
    1ef8:	cmp	fp, r1
    1efa:	bne.n	1ef0 <usb_serial_write+0x50>
    1efc:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    1f00:	cmp.w	lr, #63	; 0x3f
    1f04:	bhi.n	1f1e <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1f06:	ldr	r2, [pc, #144]	; (1f98 <usb_serial_write+0xf8>)
    1f08:	movs	r1, #5
    1f0a:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1f0c:	cmp	r6, #0
    1f0e:	bne.n	1ebe <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    1f10:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    1f12:	movs	r3, #0
    1f14:	strb.w	r3, [r9]
	return ret;
}
    1f18:	add	sp, #12
    1f1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    1f1e:	movs	r2, #64	; 0x40
    1f20:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1f22:	mov	r1, r0
    1f24:	movs	r0, #3
    1f26:	bl	2e1c <usb_tx>
			tx_packet = NULL;
    1f2a:	movs	r2, #0
    1f2c:	str.w	r2, [r8]
    1f30:	b.n	1f06 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1f32:	ldrb	r2, [r7, #0]
    1f34:	cbz	r2, 1f80 <usb_serial_write+0xe0>
    1f36:	ldr	r4, [pc, #100]	; (1f9c <usb_serial_write+0xfc>)
    1f38:	ldr	r5, [pc, #88]	; (1f94 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1f3a:	mov.w	sl, #1
    1f3e:	b.n	1f50 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1f40:	subs	r4, #1
    1f42:	beq.n	1f72 <usb_serial_write+0xd2>
    1f44:	ldrb	r2, [r5, #0]
    1f46:	cbnz	r2, 1f72 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    1f48:	bl	3920 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1f4c:	ldrb	r2, [r7, #0]
    1f4e:	cbz	r2, 1f80 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1f50:	movs	r0, #3
    1f52:	bl	2d08 <usb_tx_packet_count>
    1f56:	cmp	r0, #7
    1f58:	bhi.n	1f40 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    1f5a:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    1f5e:	bl	2c40 <usb_malloc>
    1f62:	str.w	r0, [r8]
					if (tx_packet) break;
    1f66:	cmp	r0, #0
    1f68:	bne.n	1ec6 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    1f6a:	ldr	r3, [pc, #52]	; (1fa0 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1f6c:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    1f6e:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1f70:	bne.n	1f44 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    1f72:	movs	r3, #1
					return -1;
    1f74:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    1f78:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1f7a:	add	sp, #12
    1f7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1f80:	movs	r3, #0
					return -1;
    1f82:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1f86:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1f8a:	add	sp, #12
    1f8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f90:	.word	0x1fff19d0
    1f94:	.word	0x1fff186c
    1f98:	.word	0x1fff1864
    1f9c:	.word	0x00014821
    1fa0:	.word	0x1fff1865
    1fa4:	.word	0x1fff1868

00001fa8 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1fa8:	push	{lr}
    1faa:	sub	sp, #12
    1fac:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    1fae:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1fb0:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    1fb4:	mov	r0, r3
    1fb6:	bl	1ea0 <usb_serial_write>
}
    1fba:	add	sp, #12
    1fbc:	ldr.w	pc, [sp], #4

00001fc0 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    1fc0:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1fc2:	ldr	r5, [pc, #56]	; (1ffc <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1fc4:	ldr	r4, [pc, #56]	; (2000 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    1fc6:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1fc8:	movs	r3, #1
    1fca:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1fcc:	cbz	r0, 1fda <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1fce:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    1fd0:	movs	r3, #0
    1fd2:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1fd4:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1fd8:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1fda:	ldr	r3, [pc, #40]	; (2004 <usb_serial_write_buffer_free+0x44>)
    1fdc:	ldrb	r3, [r3, #0]
    1fde:	cbnz	r3, 1fe6 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    1fe0:	movs	r0, #0
    1fe2:	strb	r0, [r4, #0]
			return 0;
    1fe4:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1fe6:	movs	r0, #3
    1fe8:	bl	2d08 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1fec:	cmp	r0, #7
    1fee:	bhi.n	1fe0 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    1ff0:	bl	2c40 <usb_malloc>
    1ff4:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1ff6:	cmp	r0, #0
    1ff8:	bne.n	1fce <usb_serial_write_buffer_free+0xe>
    1ffa:	b.n	1fe0 <usb_serial_write_buffer_free+0x20>
    1ffc:	.word	0x1fff1868
    2000:	.word	0x1fff1865
    2004:	.word	0x1fff19d0

00002008 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    2008:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    200a:	ldr	r3, [pc, #68]	; (2050 <usb_serial_flush_output+0x48>)
    200c:	ldrb	r3, [r3, #0]
    200e:	cbz	r3, 2034 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    2010:	ldr	r6, [pc, #64]	; (2054 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    2012:	ldr	r5, [pc, #68]	; (2058 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    2014:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    2016:	movs	r7, #1
    2018:	strb	r7, [r5, #0]
	if (tx_packet) {
    201a:	cbz	r4, 2036 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    201c:	ldr	r2, [pc, #60]	; (205c <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    201e:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    2020:	movs	r7, #0
    2022:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2024:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    2026:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2028:	movs	r0, #3
    202a:	bl	2e1c <usb_tx>
		tx_packet = NULL;
    202e:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    2030:	movs	r3, #0
    2032:	strb	r3, [r5, #0]
    2034:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    2036:	bl	2c40 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    203a:	ldr	r3, [pc, #32]	; (205c <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    203c:	cbz	r0, 204a <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    203e:	mov	r1, r0
    2040:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    2042:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    2044:	bl	2e1c <usb_tx>
    2048:	b.n	2030 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    204a:	strb	r7, [r3, #0]
    204c:	b.n	2030 <usb_serial_flush_output+0x28>
    204e:	nop
    2050:	.word	0x1fff19d0
    2054:	.word	0x1fff1868
    2058:	.word	0x1fff1865
    205c:	.word	0x1fff1864

00002060 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    2060:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    2062:	ldr	r3, [pc, #56]	; (209c <usb_serial_flush_callback+0x3c>)
    2064:	ldrb	r3, [r3, #0]
    2066:	cbnz	r3, 2086 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    2068:	ldr	r4, [pc, #52]	; (20a0 <usb_serial_flush_callback+0x40>)
    206a:	ldr	r1, [r4, #0]
    206c:	cbz	r1, 2088 <usb_serial_flush_callback+0x28>
    206e:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    2072:	ldrh	r3, [r1, #2]
    2074:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2076:	movs	r0, #3
    2078:	bl	2e1c <usb_tx>
		tx_packet = NULL;
    207c:	str	r5, [r4, #0]
    207e:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    2080:	ldr	r3, [pc, #32]	; (20a4 <usb_serial_flush_callback+0x44>)
    2082:	movs	r2, #1
    2084:	strb	r2, [r3, #0]
    2086:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    2088:	bl	2c40 <usb_malloc>
		if (tx) {
    208c:	cmp	r0, #0
    208e:	beq.n	2080 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    2090:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    2092:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    2096:	movs	r0, #3
    2098:	b.w	2e1c <usb_tx>
    209c:	.word	0x1fff1865
    20a0:	.word	0x1fff1868
    20a4:	.word	0x1fff1864

000020a8 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    20a8:	ldr	r2, [pc, #220]	; (2188 <wait_for_cal+0xe0>)
    20aa:	ldr	r1, [pc, #224]	; (218c <wait_for_cal+0xe4>)
    20ac:	ldr	r3, [r2, #0]
    20ae:	lsls	r3, r3, #24
    20b0:	bmi.n	20ac <wait_for_cal+0x4>
    20b2:	ldr	r3, [r1, #0]
    20b4:	ands.w	r3, r3, #128	; 0x80
    20b8:	bne.n	20ac <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    20ba:	cpsid	i
	if (calibrating) {
    20bc:	ldr	r1, [pc, #208]	; (2190 <wait_for_cal+0xe8>)
    20be:	ldrb	r2, [r1, #0]
    20c0:	cmp	r2, #0
    20c2:	beq.n	2184 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    20c4:	ldr	r2, [pc, #204]	; (2194 <wait_for_cal+0xec>)
    20c6:	ldr	r0, [pc, #208]	; (2198 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    20c8:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    20ca:	ldr	r4, [pc, #208]	; (219c <wait_for_cal+0xf4>)
    20cc:	ldr	r7, [r2, #0]
    20ce:	ldr	r6, [r0, #0]
    20d0:	ldr	r5, [r4, #0]
    20d2:	ldr	r4, [r2, #12]
    20d4:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    20d6:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    20d8:	adds	r2, #20
    20da:	ldr	r0, [r0, #0]
    20dc:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    20de:	ldr	r7, [pc, #192]	; (21a0 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    20e0:	add	r5, r6
    20e2:	add	r4, r5
    20e4:	add	r0, r4
    20e6:	add	r2, r0
    20e8:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    20ec:	ldr	r6, [pc, #180]	; (21a4 <wait_for_cal+0xfc>)
    20ee:	ldr	r0, [pc, #184]	; (21a8 <wait_for_cal+0x100>)
    20f0:	ldr	r5, [pc, #184]	; (21ac <wait_for_cal+0x104>)
    20f2:	ldr	r4, [pc, #188]	; (21b0 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    20f4:	orr.w	r2, r2, #32768	; 0x8000
    20f8:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    20fa:	ldr	r7, [r6, #0]
    20fc:	ldr	r6, [r0, #0]
    20fe:	ldr	r5, [r5, #0]
    2100:	ldr	r2, [pc, #176]	; (21b4 <wait_for_cal+0x10c>)
    2102:	ldr	r4, [r4, #0]
    2104:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2106:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2108:	ldr	r0, [r0, #0]
    210a:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    210c:	ldr	r7, [pc, #168]	; (21b8 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    210e:	add	r5, r6
    2110:	add	r4, r5
    2112:	add	r0, r4
    2114:	add	r2, r0
    2116:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    211a:	ldr	r6, [pc, #160]	; (21bc <wait_for_cal+0x114>)
    211c:	ldr	r0, [pc, #160]	; (21c0 <wait_for_cal+0x118>)
    211e:	ldr	r5, [pc, #164]	; (21c4 <wait_for_cal+0x11c>)
    2120:	ldr	r4, [pc, #164]	; (21c8 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    2122:	orr.w	r2, r2, #32768	; 0x8000
    2126:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2128:	ldr	r7, [r6, #0]
    212a:	ldr	r6, [r0, #0]
    212c:	ldr	r5, [r5, #0]
    212e:	ldr	r2, [pc, #156]	; (21cc <wait_for_cal+0x124>)
    2130:	ldr	r4, [r4, #0]
    2132:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2134:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2136:	ldr	r0, [r0, #0]
    2138:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    213a:	ldr	r7, [pc, #148]	; (21d0 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    213c:	add	r5, r6
    213e:	add	r4, r5
    2140:	add	r0, r4
    2142:	add	r2, r0
    2144:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2148:	ldr	r6, [pc, #136]	; (21d4 <wait_for_cal+0x12c>)
    214a:	ldr	r0, [pc, #140]	; (21d8 <wait_for_cal+0x130>)
    214c:	ldr	r5, [pc, #140]	; (21dc <wait_for_cal+0x134>)
    214e:	ldr	r4, [pc, #144]	; (21e0 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    2150:	orr.w	r2, r2, #32768	; 0x8000
    2154:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2156:	ldr	r7, [r6, #0]
    2158:	ldr	r6, [r0, #0]
    215a:	ldr	r5, [r5, #0]
    215c:	ldr	r2, [pc, #132]	; (21e4 <wait_for_cal+0x13c>)
    215e:	ldr	r4, [r4, #0]
    2160:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2162:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2164:	ldr	r0, [r0, #0]
    2166:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    2168:	add	r5, r6
    216a:	add	r4, r5
    216c:	add	r0, r4
    216e:	add	r2, r0
    2170:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    2174:	ldr	r0, [pc, #112]	; (21e8 <wait_for_cal+0x140>)
    2176:	orr.w	r2, r2, #32768	; 0x8000
    217a:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    217c:	strb	r3, [r1, #0]
	}
	__enable_irq();
    217e:	cpsie	i
}
    2180:	pop	{r4, r5, r6, r7}
    2182:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    2184:	cpsie	i
    2186:	bx	lr
    2188:	.word	0x4003b024
    218c:	.word	0x400bb024
    2190:	.word	0x1fff1876
    2194:	.word	0x4003b038
    2198:	.word	0x4003b03c
    219c:	.word	0x4003b040
    21a0:	.word	0x4003b02c
    21a4:	.word	0x4003b058
    21a8:	.word	0x4003b05c
    21ac:	.word	0x4003b060
    21b0:	.word	0x4003b064
    21b4:	.word	0x4003b06c
    21b8:	.word	0x4003b030
    21bc:	.word	0x400bb038
    21c0:	.word	0x400bb03c
    21c4:	.word	0x400bb040
    21c8:	.word	0x400bb044
    21cc:	.word	0x400bb04c
    21d0:	.word	0x400bb02c
    21d4:	.word	0x400bb058
    21d8:	.word	0x400bb05c
    21dc:	.word	0x400bb060
    21e0:	.word	0x400bb064
    21e4:	.word	0x400bb06c
    21e8:	.word	0x400bb030

000021ec <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    21ec:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    21ee:	ldr	r0, [pc, #164]	; (2294 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    21f0:	ldr	r2, [pc, #164]	; (2298 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    21f2:	ldr	r3, [pc, #168]	; (229c <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    21f4:	ldr	r5, [pc, #168]	; (22a0 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    21f6:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    21f8:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    21fa:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    21fc:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    21fe:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2200:	ldr	r4, [pc, #160]	; (22a4 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    2202:	cmp	r3, #8
    2204:	beq.n	2268 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2206:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2208:	ldr	r0, [pc, #156]	; (22a8 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    220a:	ldr	r1, [pc, #160]	; (22ac <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    220c:	beq.n	227e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    220e:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    2210:	ite	eq
    2212:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2214:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2216:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2218:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    221a:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    221c:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    221e:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2220:	ldr	r3, [pc, #140]	; (22b0 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2222:	ldr	r1, [pc, #144]	; (22b4 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2224:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2226:	ldr	r2, [pc, #144]	; (22b8 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2228:	cbz	r3, 225a <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    222a:	movs	r3, #1
    222c:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    222e:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2230:	ldr	r3, [pc, #136]	; (22bc <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2232:	ldr	r1, [pc, #140]	; (22c0 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2234:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2236:	ldr	r2, [pc, #140]	; (22c4 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    2238:	cmp	r3, #1
    223a:	bls.n	228a <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    223c:	cmp	r3, #4
    223e:	bls.n	2260 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    2240:	cmp	r3, #8
    2242:	bls.n	2282 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2244:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2246:	ite	ls
    2248:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    224a:	movhi	r3, #135	; 0x87
    224c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    224e:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    2250:	ldr	r3, [pc, #116]	; (22c8 <analog_init+0xdc>)
    2252:	movs	r2, #1
    2254:	strb	r2, [r3, #0]
}
    2256:	pop	{r4, r5}
    2258:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    225a:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    225c:	str	r3, [r2, #0]
    225e:	b.n	2230 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2260:	movs	r3, #132	; 0x84
    2262:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2264:	str	r3, [r2, #0]
    2266:	b.n	2250 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2268:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    226c:	ldr	r1, [pc, #60]	; (22ac <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    226e:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2270:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2272:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2274:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2276:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2278:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    227a:	str	r3, [r1, #0]
    227c:	b.n	2220 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    227e:	movs	r2, #57	; 0x39
    2280:	b.n	2272 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2282:	movs	r3, #133	; 0x85
    2284:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2286:	str	r3, [r2, #0]
    2288:	b.n	2250 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    228a:	movs	r3, #128	; 0x80
    228c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    228e:	str	r3, [r2, #0]
    2290:	b.n	2250 <analog_init+0x64>
    2292:	nop
    2294:	.word	0x40074000
    2298:	.word	0x40074001
    229c:	.word	0x1fff0c68
    22a0:	.word	0x4003b008
    22a4:	.word	0x4003b00c
    22a8:	.word	0x400bb008
    22ac:	.word	0x400bb00c
    22b0:	.word	0x1fff1879
    22b4:	.word	0x4003b020
    22b8:	.word	0x400bb020
    22bc:	.word	0x1fff0c69
    22c0:	.word	0x4003b024
    22c4:	.word	0x400bb024
    22c8:	.word	0x1fff1876

000022cc <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    22cc:	cmp	r0, #71	; 0x47
    22ce:	bhi.n	2330 <analogRead+0x64>
	channel = pin2sc1a[pin];
    22d0:	ldr	r3, [pc, #204]	; (23a0 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    22d2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    22d6:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    22d8:	cmp	r6, #255	; 0xff
    22da:	beq.n	2334 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    22dc:	ldr	r3, [pc, #196]	; (23a4 <analogRead+0xd8>)
    22de:	ldrb	r3, [r3, #0]
    22e0:	cmp	r3, #0
    22e2:	bne.n	233a <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    22e4:	lsls	r2, r6, #24
    22e6:	bmi.n	2342 <analogRead+0x76>
#endif

	__disable_irq();
    22e8:	cpsid	i
    22ea:	ldr	r5, [pc, #188]	; (23a8 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    22ec:	ldr	r4, [pc, #188]	; (23ac <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    22ee:	mov	r7, r5
    22f0:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    22f2:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    22f4:	strb	r3, [r5, #0]
	__enable_irq();
    22f6:	cpsie	i
	while (1) {
		__disable_irq();
    22f8:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    22fa:	ldr	r3, [r4, #0]
    22fc:	lsls	r3, r3, #24
    22fe:	bmi.n	231a <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    2300:	ldrb	r3, [r7, #0]
    2302:	cbnz	r3, 230c <analogRead+0x40>
    2304:	b.n	22f0 <analogRead+0x24>
    2306:	ldrb	r3, [r5, #0]
    2308:	cmp	r3, #0
    230a:	beq.n	22f0 <analogRead+0x24>
		__enable_irq();
    230c:	cpsie	i
		yield();
    230e:	bl	3920 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2312:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2314:	ldr	r3, [r4, #0]
    2316:	lsls	r0, r3, #24
    2318:	bpl.n	2306 <analogRead+0x3a>
			result = ADC0_RA;
    231a:	ldr	r3, [pc, #148]	; (23b0 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    231c:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    231e:	movs	r2, #0
    2320:	strb	r2, [r5, #0]
			__enable_irq();
    2322:	cpsie	i
			result >>= analog_right_shift;
    2324:	ldr	r2, [pc, #140]	; (23b4 <analogRead+0xe8>)
    2326:	ldrb	r0, [r2, #0]
    2328:	asr.w	r0, r3, r0
			return result;
    232c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2330:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2332:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2334:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2336:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    233a:	bl	20a8 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    233e:	lsls	r2, r6, #24
    2340:	bpl.n	22e8 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    2342:	cpsid	i
    2344:	ldr	r5, [pc, #112]	; (23b8 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2346:	ldr.w	r8, [pc, #124]	; 23c4 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    234a:	ldr	r4, [pc, #112]	; (23bc <analogRead+0xf0>)
    234c:	and.w	r7, r6, #64	; 0x40
    2350:	uxtb	r7, r7
    2352:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2356:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    235a:	cbz	r7, 2394 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    235c:	bic.w	r3, r3, #16
    2360:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    2364:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    2366:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    2368:	ldr	r2, [pc, #76]	; (23b8 <analogRead+0xec>)
    236a:	strb	r3, [r5, #0]
	__enable_irq();
    236c:	cpsie	i
	while (1) {
		__disable_irq();
    236e:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2370:	ldr	r3, [r4, #0]
    2372:	lsls	r1, r3, #24
    2374:	bmi.n	2390 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    2376:	ldrb	r3, [r2, #0]
    2378:	cbnz	r3, 2382 <analogRead+0xb6>
    237a:	b.n	2356 <analogRead+0x8a>
    237c:	ldrb	r3, [r5, #0]
    237e:	cmp	r3, #0
    2380:	beq.n	2356 <analogRead+0x8a>
		__enable_irq();
    2382:	cpsie	i
		yield();
    2384:	bl	3920 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2388:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    238a:	ldr	r3, [r4, #0]
    238c:	lsls	r3, r3, #24
    238e:	bpl.n	237c <analogRead+0xb0>
			result = ADC1_RA;
    2390:	ldr	r3, [pc, #44]	; (23c0 <analogRead+0xf4>)
    2392:	b.n	231c <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2394:	orr.w	r3, r3, #16
    2398:	str.w	r3, [r8]
    239c:	b.n	2364 <analogRead+0x98>
    239e:	nop
    23a0:	.word	0x00004e04
    23a4:	.word	0x1fff1876
    23a8:	.word	0x1fff1878
    23ac:	.word	0x4003b000
    23b0:	.word	0x4003b010
    23b4:	.word	0x1fff1875
    23b8:	.word	0x1fff1877
    23bc:	.word	0x400bb000
    23c0:	.word	0x400bb010
    23c4:	.word	0x400bb00c

000023c8 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    23c8:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    23ca:	ldr	r3, [pc, #68]	; (2410 <digitalWrite.part.1+0x48>)
    23cc:	ldr.w	r2, [r3, r0, lsl #3]
    23d0:	ldrb.w	r4, [r2, #640]	; 0x280
    23d4:	cbz	r4, 23e4 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    23d6:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    23d8:	cbz	r1, 23fa <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    23da:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    23de:	ldr.w	r4, [sp], #4
    23e2:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    23e4:	add.w	r3, r3, r0, lsl #3
    23e8:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    23ea:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    23ec:	cbnz	r1, 2404 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    23ee:	bic.w	r2, r2, #2
    23f2:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    23f4:	ldr.w	r4, [sp], #4
    23f8:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    23fa:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    23fe:	ldr.w	r4, [sp], #4
    2402:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2404:	orr.w	r2, r2, #3
    2408:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    240a:	ldr.w	r4, [sp], #4
    240e:	bx	lr
    2410:	.word	0x00004e4c

00002414 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2414:	ldr	r2, [pc, #112]	; (2488 <pinMode.part.2+0x74>)
    2416:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    241a:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    241c:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    241e:	beq.n	2444 <pinMode.part.2+0x30>
    2420:	cmp	r1, #4
    2422:	beq.n	245c <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2424:	ldr.w	r0, [r2, r0, lsl #3]
    2428:	movs	r2, #0
    242a:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    242e:	cbz	r1, 243c <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2430:	cmp	r1, #2
    2432:	beq.n	2476 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2434:	cmp	r1, #3
    2436:	beq.n	247e <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2438:	str	r2, [r3, #0]
    243a:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    243c:	mov.w	r2, #256	; 0x100
    2440:	str	r2, [r3, #0]
    2442:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2444:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2448:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    244c:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2450:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2452:	ldr	r2, [r3, #0]
    2454:	bic.w	r2, r2, #32
    2458:	str	r2, [r3, #0]
    245a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    245c:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2460:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2464:	movs	r0, #1
    2466:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    246a:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    246c:	ldr	r2, [r3, #0]
    246e:	orr.w	r2, r2, #32
    2472:	str	r2, [r3, #0]
    2474:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    2476:	movw	r2, #259	; 0x103
    247a:	str	r2, [r3, #0]
    247c:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    247e:	mov.w	r2, #258	; 0x102
    2482:	str	r2, [r3, #0]
    2484:	bx	lr
    2486:	nop
    2488:	.word	0x00004e4c

0000248c <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    248c:	push	{r4, r5}
	RTC_SR = 0;
    248e:	ldr	r3, [pc, #20]	; (24a4 <rtc_set+0x18>)
	RTC_TPR = 0;
    2490:	ldr	r5, [pc, #20]	; (24a8 <rtc_set+0x1c>)
	RTC_TSR = t;
    2492:	ldr	r4, [pc, #24]	; (24ac <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2494:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    2496:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2498:	str	r2, [r3, #0]
	RTC_TPR = 0;
    249a:	str	r2, [r5, #0]
	RTC_TSR = t;
    249c:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    249e:	str	r1, [r3, #0]
}
    24a0:	pop	{r4, r5}
    24a2:	bx	lr
    24a4:	.word	0x4003d014
    24a8:	.word	0x4003d004
    24ac:	.word	0x4003d000

000024b0 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    24b0:	cmp	r0, #63	; 0x3f
    24b2:	bhi.n	24b8 <digitalWrite+0x8>
    24b4:	b.w	23c8 <digitalWrite.part.1>
    24b8:	bx	lr
    24ba:	nop

000024bc <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    24bc:	cmp	r0, #63	; 0x3f
    24be:	bhi.n	24ce <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    24c0:	ldr	r3, [pc, #16]	; (24d4 <digitalRead+0x18>)
    24c2:	ldr.w	r3, [r3, r0, lsl #3]
    24c6:	ldrb.w	r0, [r3, #512]	; 0x200
    24ca:	uxtb	r0, r0
    24cc:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    24ce:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    24d0:	bx	lr
    24d2:	nop
    24d4:	.word	0x00004e4c

000024d8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    24d8:	cmp	r0, #63	; 0x3f
    24da:	bhi.n	24e0 <pinMode+0x8>
    24dc:	b.w	2414 <pinMode.part.2>
    24e0:	bx	lr
    24e2:	nop

000024e4 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    24e4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    24e8:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    24ea:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    24ec:	ldr	r7, [pc, #136]	; (2578 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    24ee:	ldr	r3, [pc, #140]	; (257c <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    24f0:	ldr	r2, [pc, #140]	; (2580 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    24f2:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    24f4:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    24f6:	ldr	r2, [r2, #0]
	__enable_irq();
    24f8:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    24fa:	lsls	r2, r2, #5
    24fc:	bpl.n	2504 <delay+0x20>
    24fe:	cmp	r3, #50	; 0x32
    2500:	it	hi
    2502:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2504:	cbz	r5, 2574 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2506:	rsb	r3, r3, #179200	; 0x2bc00
    250a:	addw	r3, r3, #799	; 0x31f
    250e:	ldr	r6, [pc, #116]	; (2584 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2510:	ldr.w	r9, [pc, #104]	; 257c <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2514:	ldr.w	r8, [pc, #104]	; 2580 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2518:	lsrs	r3, r3, #2
    251a:	mov.w	r2, #1000	; 0x3e8
    251e:	umull	r1, r3, r6, r3
    2522:	mul.w	r4, r2, r4
    2526:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    252a:	cpsid	i
	current = SYST_CVR;
    252c:	ldr.w	r1, [r9]
	count = systick_millis_count;
    2530:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2532:	ldr.w	lr, [r8]
	__enable_irq();
    2536:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2538:	rsb	r3, r1, #179200	; 0x2bc00
    253c:	addw	r3, r3, #799	; 0x31f
    2540:	lsrs	r3, r3, #2
    2542:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2546:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    254a:	rsb	r3, r4, r3, lsr #2
    254e:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2552:	beq.n	255a <delay+0x76>
    2554:	cmp	r1, #50	; 0x32
    2556:	it	hi
    2558:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    255a:	mla	r3, r0, r2, r3
    255e:	cmp.w	r3, #1000	; 0x3e8
    2562:	bcc.n	256e <delay+0x8a>
				ms--;
				if (ms == 0) return;
    2564:	subs	r5, #1
    2566:	beq.n	2574 <delay+0x90>
				start += 1000;
    2568:	add.w	r4, r4, #1000	; 0x3e8
    256c:	b.n	252a <delay+0x46>
			}
			yield();
    256e:	bl	3920 <yield>
		}
    2572:	b.n	252a <delay+0x46>
    2574:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2578:	.word	0x1fff187c
    257c:	.word	0xe000e018
    2580:	.word	0xe000ed04
    2584:	.word	0x16c16c17

00002588 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    2588:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    258a:	ldr	r3, [pc, #312]	; (26c4 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    258c:	ldr	r0, [pc, #312]	; (26c8 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    258e:	ldr.w	ip, [pc, #348]	; 26ec <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    2592:	ldr	r4, [pc, #312]	; (26cc <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    2594:	ldr	r1, [pc, #312]	; (26d0 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2596:	ldr.w	lr, [pc, #344]	; 26f0 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    259a:	ldr	r6, [pc, #312]	; (26d4 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    259c:	ldr	r5, [pc, #312]	; (26d8 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    259e:	ldr	r7, [pc, #316]	; (26dc <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    25a0:	mov.w	r2, #134217728	; 0x8000000
    25a4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    25a6:	mov.w	r2, #268435456	; 0x10000000
    25aa:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    25ac:	mov.w	r2, #536870912	; 0x20000000
    25b0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    25b2:	mov.w	r2, #1073741824	; 0x40000000
    25b6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    25b8:	mov.w	r2, #2147483648	; 0x80000000
    25bc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    25be:	movs	r2, #0
    25c0:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    25c2:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    25c4:	movw	r0, #61439	; 0xefff
    25c8:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    25cc:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    25d0:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    25d2:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    25d6:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    25d8:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    25da:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    25dc:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    25e0:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    25e2:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    25e6:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    25e8:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    25ec:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    25ee:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    25f2:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    25f6:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    25fa:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    25fe:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    2602:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2604:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2608:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    260a:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    260c:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    260e:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    2612:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2614:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2616:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2618:	ldr	r4, [pc, #196]	; (26e0 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    261a:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    261c:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    261e:	movs	r1, #9
    2620:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    2622:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2626:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    262a:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    262c:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    262e:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    2630:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    2632:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2634:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2636:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    263a:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    263e:	add.w	r7, r7, #520192	; 0x7f000
    2642:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2644:	addw	r4, r4, #2044	; 0x7fc
    2648:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    264a:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    264c:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    264e:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2650:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2654:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    2656:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    265a:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    265e:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2660:	sub.w	r4, r4, #460800	; 0x70800
    2664:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    2668:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    266a:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    266c:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2670:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2672:	ldr	r0, [pc, #112]	; (26e4 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2674:	orr.w	r1, r1, #512	; 0x200
    2678:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    267a:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    267c:	ldr	r4, [pc, #104]	; (26e8 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    267e:	add.w	lr, lr, #65280	; 0xff00
    2682:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    2686:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    268a:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    268e:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2692:	orr.w	r1, r1, #33554432	; 0x2000000
    2696:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    2698:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    269c:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    26a0:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    26a2:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    26a4:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    26a6:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    26a8:	str	r2, [r4, #0]
#endif
	analog_init();
    26aa:	bl	21ec <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    26ae:	movs	r0, #25
    26b0:	bl	24e4 <delay>
	usb_init();
    26b4:	bl	3850 <usb_init>
	delay(275);
    26b8:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    26bc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    26c0:	b.w	24e4 <delay>
    26c4:	.word	0xe000e104
    26c8:	.word	0x40038004
    26cc:	.word	0x40038014
    26d0:	.word	0x4003801c
    26d4:	.word	0x40038024
    26d8:	.word	0x4003802c
    26dc:	.word	0x40038034
    26e0:	.word	0x40038000
    26e4:	.word	0x40048004
    26e8:	.word	0x400c9000
    26ec:	.word	0x40038008
    26f0:	.word	0x4003800c

000026f4 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    26f4:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    26f6:	ldr	r3, [pc, #56]	; (2730 <sysex_byte+0x3c>)
    26f8:	ldr	r4, [pc, #56]	; (2734 <sysex_byte+0x40>)
    26fa:	ldr	r3, [r3, #0]
    26fc:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    26fe:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2700:	cbz	r3, 2726 <sysex_byte+0x32>
    2702:	cmp.w	r1, #290	; 0x122
    2706:	bcs.n	2714 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2708:	ldr	r2, [pc, #44]	; (2738 <sysex_byte+0x44>)
    270a:	adds	r3, r1, #1
    270c:	strb	r5, [r2, r1]
    270e:	uxth	r3, r3
    2710:	strh	r3, [r4, #0]
	}
}
    2712:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2714:	movs	r2, #0
    2716:	ldr	r0, [pc, #32]	; (2738 <sysex_byte+0x44>)
    2718:	blx	r3
    271a:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    271c:	ldr	r2, [pc, #24]	; (2738 <sysex_byte+0x44>)
    271e:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2720:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2722:	strh	r3, [r4, #0]
	}
}
    2724:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    2726:	cmp.w	r1, #290	; 0x122
    272a:	bcc.n	2708 <sysex_byte+0x14>
    272c:	pop	{r3, r4, r5, pc}
    272e:	nop
    2730:	.word	0x1fff18a4
    2734:	.word	0x1fff1d3a
    2738:	.word	0x1fff1d40

0000273c <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    273c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    2740:	ldr	r6, [pc, #132]	; (27c8 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2742:	ldr	r7, [pc, #136]	; (27cc <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    2744:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2746:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2748:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    274a:	strb	r3, [r7, #0]
	if (!tx_packet) {
    274c:	cbz	r1, 277c <usb_midi_write_packed+0x40>
    274e:	ldr	r5, [pc, #128]	; (27d0 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    2750:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2752:	add.w	r2, r1, r3, lsl #2
    2756:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2758:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    275a:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    275c:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2760:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2762:	bhi.n	276e <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    2764:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    2766:	movs	r3, #0
    2768:	strb	r3, [r7, #0]
    276a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    276e:	movs	r3, #64	; 0x40
    2770:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2772:	movs	r0, #4
    2774:	bl	2e1c <usb_tx>
		tx_packet = NULL;
    2778:	str	r4, [r6, #0]
    277a:	b.n	2766 <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    277c:	ldr.w	r9, [pc, #84]	; 27d4 <usb_midi_write_packed+0x98>
    2780:	ldrb.w	r3, [r9]
    2784:	cmp	r3, #0
    2786:	beq.n	276a <usb_midi_write_packed+0x2e>
    2788:	ldr	r5, [pc, #68]	; (27d0 <usb_midi_write_packed+0x94>)
    278a:	movw	r4, #48001	; 0xbb81
    278e:	b.n	27a2 <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2790:	subs	r4, #1
    2792:	beq.n	27ba <usb_midi_write_packed+0x7e>
    2794:	ldrb	r3, [r5, #0]
    2796:	cbnz	r3, 27ba <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    2798:	bl	3920 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    279c:	ldrb.w	r3, [r9]
    27a0:	cbz	r3, 27c2 <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    27a2:	movs	r0, #4
    27a4:	bl	2d08 <usb_tx_packet_count>
    27a8:	cmp	r0, #5
    27aa:	bhi.n	2790 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    27ac:	bl	2c40 <usb_malloc>
    27b0:	mov	r1, r0
    27b2:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    27b4:	cmp	r0, #0
    27b6:	beq.n	2790 <usb_midi_write_packed+0x54>
    27b8:	b.n	2750 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    27ba:	movs	r3, #1
    27bc:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    27be:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    27c2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    27c6:	nop
    27c8:	.word	0x1fff18c0
    27cc:	.word	0x1fff1894
    27d0:	.word	0x1fff18c4
    27d4:	.word	0x1fff19d0

000027d8 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    27d8:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    27da:	ldr	r3, [pc, #32]	; (27fc <usb_midi_flush_output+0x24>)
    27dc:	ldrb	r4, [r3, #0]
    27de:	cbnz	r4, 27ea <usb_midi_flush_output+0x12>
    27e0:	ldr	r5, [pc, #28]	; (2800 <usb_midi_flush_output+0x28>)
    27e2:	ldr	r1, [r5, #0]
    27e4:	cbz	r1, 27ea <usb_midi_flush_output+0x12>
    27e6:	ldrh	r3, [r1, #2]
    27e8:	cbnz	r3, 27ec <usb_midi_flush_output+0x14>
    27ea:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    27ec:	lsls	r3, r3, #2
    27ee:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    27f0:	movs	r0, #4
    27f2:	bl	2e1c <usb_tx>
		tx_packet = NULL;
    27f6:	str	r4, [r5, #0]
    27f8:	pop	{r3, r4, r5, pc}
    27fa:	nop
    27fc:	.word	0x1fff1894
    2800:	.word	0x1fff18c0

00002804 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2804:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2808:	ldr	r6, [pc, #692]	; (2ac0 <usb_midi_read+0x2bc>)
    280a:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    280c:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    280e:	cmp	r3, #0
    2810:	beq.w	2938 <usb_midi_read+0x134>
    2814:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    2816:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2818:	lsrs	r1, r2, #2
    281a:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    281e:	adds	r2, #4
	if (index < rx_packet->len) {
    2820:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2822:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    2824:	bcs.n	28ac <usb_midi_read+0xa8>
		rx_packet->index = index;
    2826:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    2828:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    282c:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    2830:	ldr	r1, [pc, #656]	; (2ac4 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2832:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2836:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    283a:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    283e:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2840:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    2844:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2846:	bls.n	287e <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2848:	subs	r3, r6, #2
    284a:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    284c:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2850:	bls.n	28f0 <usb_midi_read+0xec>
    2852:	cmp	r6, #5
    2854:	beq.n	28e8 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    2856:	cmp	r6, #4
    2858:	beq.w	2ba4 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    285c:	subs	r3, r6, #5
    285e:	cmp	r3, #2
    2860:	bls.n	2962 <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    2862:	cmp	r6, #15
    2864:	bne.n	2884 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    2866:	cmp	r0, #247	; 0xf7
    2868:	bhi.n	28f0 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    286a:	cmp	r0, #240	; 0xf0
    286c:	beq.n	2874 <usb_midi_read+0x70>
    286e:	ldr	r3, [pc, #600]	; (2ac8 <usb_midi_read+0x2c4>)
    2870:	ldrh	r3, [r3, #0]
    2872:	cbz	r3, 2884 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    2874:	bl	26f4 <sysex_byte>
		}
	}
	return 0;
    2878:	movs	r0, #0
    287a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    287e:	cbz	r7, 288a <usb_midi_read+0x86>
    2880:	cmp	r5, r7
    2882:	beq.n	288a <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    2884:	movs	r0, #0
    2886:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    288a:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    288c:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2890:	beq.w	29a2 <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    2894:	cmp	r6, #9
    2896:	beq.n	28bc <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    2898:	cmp	r6, #10
    289a:	bne.w	29c6 <usb_midi_read+0x1c2>
    289e:	cmp	r3, #10
    28a0:	bne.n	2884 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    28a2:	ldr	r3, [pc, #552]	; (2acc <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    28a4:	ldr	r2, [pc, #552]	; (2ad0 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    28a6:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    28a8:	movs	r1, #160	; 0xa0
    28aa:	b.n	29b0 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    28ac:	mov	r0, r3
    28ae:	bl	2c80 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    28b2:	movs	r0, #5
    28b4:	bl	2ccc <usb_rx>
    28b8:	str	r0, [r6, #0]
    28ba:	b.n	2828 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    28bc:	cmp	r3, #9
    28be:	bne.n	2884 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    28c0:	lsrs	r7, r4, #24
    28c2:	beq.w	2bbc <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    28c6:	ldr	r3, [pc, #524]	; (2ad4 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    28c8:	ldr	r2, [pc, #516]	; (2ad0 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    28ca:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    28cc:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    28ce:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    28d2:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    28d4:	uxtb	r5, r5
    28d6:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    28d8:	cmp	r3, #0
    28da:	beq.w	2a18 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    28de:	mov	r2, r4
    28e0:	mov	r1, r6
    28e2:	mov	r0, r5
    28e4:	blx	r3
    28e6:	b.n	2a18 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    28e8:	cmp	r0, #240	; 0xf0
    28ea:	bls.n	2974 <usb_midi_read+0x170>
    28ec:	cmp	r0, #247	; 0xf7
    28ee:	beq.n	2974 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    28f0:	subs	r0, #241	; 0xf1
    28f2:	cmp	r0, #14
    28f4:	bhi.n	2884 <usb_midi_read+0x80>
    28f6:	add	r3, pc, #4	; (adr r3, 28fc <usb_midi_read+0xf8>)
    28f8:	ldr.w	pc, [r3, r0, lsl #2]
    28fc:	.word	0x00002ab3
    2900:	.word	0x00002a97
    2904:	.word	0x00002a85
    2908:	.word	0x00002885
    290c:	.word	0x00002885
    2910:	.word	0x00002a77
    2914:	.word	0x00002885
    2918:	.word	0x00002b57
    291c:	.word	0x00002885
    2920:	.word	0x00002b21
    2924:	.word	0x00002b3b
    2928:	.word	0x00002a5f
    292c:	.word	0x00002885
    2930:	.word	0x00002a47
    2934:	.word	0x00002a2b
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    2938:	ldr	r3, [pc, #412]	; (2ad8 <usb_midi_read+0x2d4>)
    293a:	ldrb	r3, [r3, #0]
    293c:	cmp	r3, #0
    293e:	beq.n	2884 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2940:	movs	r0, #5
    2942:	bl	2ccc <usb_rx>
    2946:	mov	r3, r0
    2948:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    294a:	cmp	r0, #0
    294c:	beq.n	2884 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    294e:	ldrh	r5, [r0, #0]
    2950:	cmp	r5, #0
    2952:	bne.w	2816 <usb_midi_read+0x12>
			usb_free(rx_packet);
    2956:	bl	2c80 <usb_free>
			rx_packet = NULL;
    295a:	str	r5, [r6, #0]
			return 0;
    295c:	mov	r0, r5
    295e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    2962:	bl	26f4 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    2966:	ubfx	r0, r4, #16, #8
    296a:	bl	26f4 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    296e:	cmp	r6, #7
    2970:	bne.n	2978 <usb_midi_read+0x174>
    2972:	lsrs	r0, r4, #24
    2974:	bl	26f4 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    2978:	ldr	r3, [pc, #332]	; (2ac8 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    297a:	ldr	r2, [pc, #352]	; (2adc <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    297c:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    297e:	ldr	r0, [pc, #352]	; (2ae0 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2980:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2982:	ldr	r5, [pc, #352]	; (2ae4 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2984:	ldr	r2, [pc, #328]	; (2ad0 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    2986:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2988:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    298a:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    298c:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    298e:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2990:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2992:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    2994:	cbz	r4, 29da <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    2996:	movs	r2, #1
    2998:	ldr	r0, [pc, #332]	; (2ae8 <usb_midi_read+0x2e4>)
    299a:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    299c:	movs	r0, #1
    299e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    29a2:	cmp	r3, #8
    29a4:	bne.w	2884 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    29a8:	ldr	r3, [pc, #320]	; (2aec <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    29aa:	ldr	r2, [pc, #292]	; (2ad0 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    29ac:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    29ae:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    29b0:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    29b4:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    29b6:	uxtb	r5, r5
    29b8:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    29ba:	cbz	r3, 2a18 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    29bc:	mov	r0, r5
    29be:	mov	r2, r4
    29c0:	mov	r1, r6
    29c2:	blx	r3
    29c4:	b.n	2a18 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    29c6:	cmp	r6, #11
    29c8:	bne.n	29ee <usb_midi_read+0x1ea>
    29ca:	cmp	r3, #11
    29cc:	bne.w	2884 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    29d0:	ldr	r3, [pc, #284]	; (2af0 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    29d2:	ldr	r2, [pc, #252]	; (2ad0 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    29d4:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    29d6:	movs	r1, #176	; 0xb0
    29d8:	b.n	29b0 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    29da:	ldr	r3, [pc, #280]	; (2af4 <usb_midi_read+0x2f0>)
    29dc:	ldr	r3, [r3, #0]
    29de:	cmp	r3, #0
    29e0:	beq.w	2bda <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    29e4:	ldr	r0, [pc, #256]	; (2ae8 <usb_midi_read+0x2e4>)
    29e6:	blx	r3
		}
		return 1;
    29e8:	movs	r0, #1
    29ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    29ee:	cmp	r6, #12
    29f0:	bne.w	2bf4 <usb_midi_read+0x3f0>
    29f4:	cmp	r3, #12
    29f6:	bne.w	2884 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    29fa:	ldr	r3, [pc, #252]	; (2af8 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    29fc:	ldr	r2, [pc, #208]	; (2ad0 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    29fe:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2a00:	movs	r1, #192	; 0xc0
    2a02:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    2a04:	uxtb	r5, r5
    2a06:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2a0a:	cmp	r3, #0
    2a0c:	beq.w	2ba0 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2a10:	mov	r0, r5
    2a12:	mov	r1, r6
    2a14:	lsrs	r4, r4, #24
    2a16:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2a18:	ldr	r1, [pc, #224]	; (2afc <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    2a1a:	ldr	r2, [pc, #196]	; (2ae0 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    2a1c:	ldr	r3, [pc, #196]	; (2ae4 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2a1e:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    2a20:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    2a22:	strb	r4, [r3, #0]
		return 1;
    2a24:	movs	r0, #1
    2a26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    2a2a:	ldr	r3, [pc, #212]	; (2b00 <usb_midi_read+0x2fc>)
    2a2c:	ldr	r3, [r3, #0]
    2a2e:	cmp	r3, #0
    2a30:	beq.w	2be0 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    2a34:	blx	r3
    2a36:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    2a3a:	ldr	r3, [pc, #148]	; (2ad0 <usb_midi_read+0x2cc>)
    2a3c:	uxtb	r5, r5
    2a3e:	lsrs	r4, r4, #24
    2a40:	strb.w	r8, [r3]
		goto return_message;
    2a44:	b.n	2a18 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    2a46:	ldr	r3, [pc, #188]	; (2b04 <usb_midi_read+0x300>)
    2a48:	ldr	r3, [r3, #0]
    2a4a:	cmp	r3, #0
    2a4c:	bne.n	2a34 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    2a4e:	ldr	r3, [pc, #184]	; (2b08 <usb_midi_read+0x304>)
    2a50:	ldr	r3, [r3, #0]
    2a52:	cbz	r3, 2a7e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    2a54:	movs	r0, #254	; 0xfe
    2a56:	blx	r3
    2a58:	ubfx	r6, r4, #16, #8
    2a5c:	b.n	2a3a <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    2a5e:	ldr	r3, [pc, #172]	; (2b0c <usb_midi_read+0x308>)
    2a60:	ldr	r3, [r3, #0]
    2a62:	cmp	r3, #0
    2a64:	bne.n	2a34 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    2a66:	ldr	r3, [pc, #160]	; (2b08 <usb_midi_read+0x304>)
    2a68:	ldr	r3, [r3, #0]
    2a6a:	cbz	r3, 2a7e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    2a6c:	movs	r0, #252	; 0xfc
    2a6e:	blx	r3
    2a70:	ubfx	r6, r4, #16, #8
    2a74:	b.n	2a3a <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    2a76:	ldr	r3, [pc, #152]	; (2b10 <usb_midi_read+0x30c>)
    2a78:	ldr	r3, [r3, #0]
    2a7a:	cmp	r3, #0
    2a7c:	bne.n	2a34 <usb_midi_read+0x230>
    2a7e:	ubfx	r6, r4, #16, #8
    2a82:	b.n	2a3a <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2a84:	ldr	r3, [pc, #140]	; (2b14 <usb_midi_read+0x310>)
    2a86:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    2a88:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2a8c:	cmp	r3, #0
    2a8e:	beq.n	2a3a <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    2a90:	mov	r0, r6
    2a92:	blx	r3
    2a94:	b.n	2a3a <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    2a96:	ldr	r3, [pc, #128]	; (2b18 <usb_midi_read+0x314>)
    2a98:	ldr	r2, [r3, #0]
    2a9a:	cmp	r2, #0
    2a9c:	beq.n	2a7e <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    2a9e:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    2aa0:	lsrs	r3, r4, #17
    2aa2:	and.w	r0, r6, #127	; 0x7f
    2aa6:	and.w	r3, r3, #16256	; 0x3f80
    2aaa:	orrs	r0, r3
    2aac:	uxtb	r6, r6
    2aae:	blx	r2
    2ab0:	b.n	2a3a <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    2ab2:	ldr	r3, [pc, #104]	; (2b1c <usb_midi_read+0x318>)
    2ab4:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    2ab6:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    2aba:	cmp	r3, #0
    2abc:	bne.n	2a90 <usb_midi_read+0x28c>
    2abe:	b.n	2a3a <usb_midi_read+0x236>
    2ac0:	.word	0x1fff18cc
    2ac4:	.word	0x1fff1d3e
    2ac8:	.word	0x1fff1d3a
    2acc:	.word	0x1fff18a8
    2ad0:	.word	0x1fff1d38
    2ad4:	.word	0x1fff18dc
    2ad8:	.word	0x1fff19d0
    2adc:	.word	0x1fff18a4
    2ae0:	.word	0x1fff1d3c
    2ae4:	.word	0x1fff1d3d
    2ae8:	.word	0x1fff1d40
    2aec:	.word	0x1fff18d4
    2af0:	.word	0x1fff18d8
    2af4:	.word	0x1fff18bc
    2af8:	.word	0x1fff1898
    2afc:	.word	0x1fff1d3f
    2b00:	.word	0x1fff1884
    2b04:	.word	0x1fff1888
    2b08:	.word	0x1fff188c
    2b0c:	.word	0x1fff18c8
    2b10:	.word	0x1fff18b8
    2b14:	.word	0x1fff18d0
    2b18:	.word	0x1fff18a0
    2b1c:	.word	0x1fff18b4
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    2b20:	ldr	r3, [pc, #252]	; (2c20 <usb_midi_read+0x41c>)
    2b22:	ldr	r3, [r3, #0]
    2b24:	cmp	r3, #0
    2b26:	bne.n	2a34 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    2b28:	ldr	r3, [pc, #248]	; (2c24 <usb_midi_read+0x420>)
    2b2a:	ldr	r3, [r3, #0]
    2b2c:	cmp	r3, #0
    2b2e:	beq.n	2a7e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    2b30:	movs	r0, #250	; 0xfa
    2b32:	blx	r3
    2b34:	ubfx	r6, r4, #16, #8
    2b38:	b.n	2a3a <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    2b3a:	ldr	r3, [pc, #236]	; (2c28 <usb_midi_read+0x424>)
    2b3c:	ldr	r3, [r3, #0]
    2b3e:	cmp	r3, #0
    2b40:	bne.w	2a34 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    2b44:	ldr	r3, [pc, #220]	; (2c24 <usb_midi_read+0x420>)
    2b46:	ldr	r3, [r3, #0]
    2b48:	cmp	r3, #0
    2b4a:	beq.n	2a7e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    2b4c:	movs	r0, #251	; 0xfb
    2b4e:	blx	r3
    2b50:	ubfx	r6, r4, #16, #8
    2b54:	b.n	2a3a <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    2b56:	ldr	r3, [pc, #212]	; (2c2c <usb_midi_read+0x428>)
    2b58:	ldr	r3, [r3, #0]
    2b5a:	cmp	r3, #0
    2b5c:	bne.w	2a34 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    2b60:	ldr	r3, [pc, #192]	; (2c24 <usb_midi_read+0x420>)
    2b62:	ldr	r3, [r3, #0]
    2b64:	cmp	r3, #0
    2b66:	beq.n	2a7e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    2b68:	movs	r0, #248	; 0xf8
    2b6a:	blx	r3
    2b6c:	ubfx	r6, r4, #16, #8
    2b70:	b.n	2a3a <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    2b72:	cmp	r3, #14
    2b74:	bne.w	2884 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    2b78:	ldr	r2, [pc, #180]	; (2c30 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2b7a:	ldr	r3, [pc, #184]	; (2c34 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    2b7c:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2b7e:	movs	r1, #224	; 0xe0
    2b80:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    2b82:	cmp	r2, #0
    2b84:	beq.n	2c16 <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    2b86:	lsrs	r6, r4, #16
    2b88:	lsrs	r1, r4, #17
    2b8a:	and.w	r3, r6, #127	; 0x7f
    2b8e:	and.w	r1, r1, #16256	; 0x3f80
    2b92:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    2b94:	uxtb	r5, r5
    2b96:	sub.w	r1, r1, #8192	; 0x2000
    2b9a:	mov	r0, r5
    2b9c:	blx	r2
    2b9e:	uxtb	r6, r6
    2ba0:	lsrs	r4, r4, #24
    2ba2:	b.n	2a18 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    2ba4:	bl	26f4 <sysex_byte>
		sysex_byte(n >> 16);
    2ba8:	ubfx	r0, r4, #16, #8
    2bac:	bl	26f4 <sysex_byte>
		sysex_byte(n >> 24);
    2bb0:	lsrs	r0, r4, #24
    2bb2:	bl	26f4 <sysex_byte>
		return 0;
    2bb6:	movs	r0, #0
    2bb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2bbc:	ldr	r3, [pc, #120]	; (2c38 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2bbe:	ldr	r2, [pc, #116]	; (2c34 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    2bc0:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2bc2:	movs	r1, #128	; 0x80
    2bc4:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2bc6:	uxtb	r5, r5
    2bc8:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2bcc:	cbz	r3, 2bf0 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2bce:	mov	r1, r6
    2bd0:	mov	r0, r5
    2bd2:	mov	r2, r7
    2bd4:	blx	r3
    2bd6:	mov	r4, r7
    2bd8:	b.n	2a18 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2bda:	movs	r0, #1
    2bdc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    2be0:	ldr	r3, [pc, #64]	; (2c24 <usb_midi_read+0x420>)
    2be2:	ldr	r3, [r3, #0]
    2be4:	cmp	r3, #0
    2be6:	beq.w	2a7e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    2bea:	movs	r0, #255	; 0xff
    2bec:	blx	r3
    2bee:	b.n	2a7e <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2bf0:	mov	r4, r3
    2bf2:	b.n	2a18 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    2bf4:	cmp	r6, #13
    2bf6:	bne.n	2b72 <usb_midi_read+0x36e>
    2bf8:	cmp	r3, #13
    2bfa:	bne.w	2884 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2bfe:	ldr	r3, [pc, #60]	; (2c3c <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2c00:	ldr	r2, [pc, #48]	; (2c34 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    2c02:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2c04:	movs	r1, #208	; 0xd0
    2c06:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2c08:	uxtb	r5, r5
    2c0a:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2c0e:	cmp	r3, #0
    2c10:	bne.w	2a10 <usb_midi_read+0x20c>
    2c14:	b.n	2ba0 <usb_midi_read+0x39c>
    2c16:	ubfx	r6, r4, #16, #8
    2c1a:	uxtb	r5, r5
    2c1c:	lsrs	r4, r4, #24
    2c1e:	b.n	2a18 <usb_midi_read+0x214>
    2c20:	.word	0x1fff18b0
    2c24:	.word	0x1fff188c
    2c28:	.word	0x1fff1890
    2c2c:	.word	0x1fff1880
    2c30:	.word	0x1fff189c
    2c34:	.word	0x1fff1d38
    2c38:	.word	0x1fff18d4
    2c3c:	.word	0x1fff18ac

00002c40 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    2c40:	cpsid	i
	avail = usb_buffer_available;
    2c42:	ldr	r0, [pc, #52]	; (2c78 <usb_malloc+0x38>)
    2c44:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    2c46:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    2c4a:	cmp	r3, #29
    2c4c:	bgt.n	2c70 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    2c4e:	mov.w	r1, #2147483648	; 0x80000000
    2c52:	lsrs	r1, r3
    2c54:	bic.w	r2, r2, r1
    2c58:	str	r2, [r0, #0]
	__enable_irq();
    2c5a:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    2c5c:	ldr	r0, [pc, #28]	; (2c7c <usb_malloc+0x3c>)
    2c5e:	add.w	r3, r3, r3, lsl #3
    2c62:	lsls	r3, r3, #3
    2c64:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    2c66:	movs	r1, #0
    2c68:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    2c6a:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    2c6c:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    2c6e:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    2c70:	cpsie	i
		return NULL;
    2c72:	movs	r0, #0
    2c74:	bx	lr
    2c76:	nop
    2c78:	.word	0x1fff0c6c
    2c7c:	.word	0x1fff03d0

00002c80 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    2c80:	ldr	r3, [pc, #52]	; (2cb8 <usb_free+0x38>)
    2c82:	ldr	r2, [pc, #56]	; (2cbc <usb_free+0x3c>)
    2c84:	subs	r3, r0, r3
    2c86:	umull	r2, r3, r2, r3
    2c8a:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    2c8c:	cmp	r3, #29
    2c8e:	bhi.n	2caa <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2c90:	ldr	r2, [pc, #44]	; (2cc0 <usb_free+0x40>)
    2c92:	ldrb	r2, [r2, #0]
    2c94:	cbnz	r2, 2cac <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    2c96:	cpsid	i
	usb_buffer_available |= mask;
    2c98:	ldr	r0, [pc, #40]	; (2cc4 <usb_free+0x44>)
    2c9a:	mov.w	r1, #2147483648	; 0x80000000
    2c9e:	ldr	r2, [r0, #0]
    2ca0:	lsr.w	r3, r1, r3
    2ca4:	orrs	r2, r3
    2ca6:	str	r2, [r0, #0]
	__enable_irq();
    2ca8:	cpsie	i
    2caa:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2cac:	ldr	r2, [pc, #24]	; (2cc8 <usb_free+0x48>)
    2cae:	ldrb	r2, [r2, #0]
    2cb0:	cmp	r2, #0
    2cb2:	beq.n	2c96 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    2cb4:	b.w	2d34 <usb_rx_memory>
    2cb8:	.word	0x1fff03d0
    2cbc:	.word	0x38e38e39
    2cc0:	.word	0x1fff19c5
    2cc4:	.word	0x1fff0c6c
    2cc8:	.word	0x1fff19d0

00002ccc <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    2ccc:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2cce:	cmp	r3, #4
    2cd0:	bhi.n	2cfc <usb_rx+0x30>
	__disable_irq();
    2cd2:	cpsid	i
	ret = rx_first[endpoint];
    2cd4:	ldr	r1, [pc, #40]	; (2d00 <usb_rx+0x34>)
    2cd6:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    2cda:	cbz	r0, 2cf8 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2cdc:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2cde:	ldr	r4, [pc, #36]	; (2d04 <usb_rx+0x38>)
    2ce0:	ldrh	r5, [r0, #0]
    2ce2:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    2ce6:	ldr	r6, [r0, #4]
    2ce8:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2cec:	subs	r2, r2, r5
    2cee:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    2cf2:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2cf4:	pop	{r4, r5, r6}
    2cf6:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2cf8:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2cfa:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2cfc:	movs	r0, #0
    2cfe:	bx	lr
    2d00:	.word	0x1fff193c
    2d04:	.word	0x1fff1e64

00002d08 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2d08:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2d0a:	cmp	r0, #4
    2d0c:	bhi.n	2d26 <usb_tx_packet_count+0x1e>
	__disable_irq();
    2d0e:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    2d10:	ldr	r3, [pc, #28]	; (2d30 <usb_tx_packet_count+0x28>)
    2d12:	ldr.w	r3, [r3, r0, lsl #2]
    2d16:	cbz	r3, 2d2a <usb_tx_packet_count+0x22>
    2d18:	movs	r0, #0
    2d1a:	ldr	r3, [r3, #4]
    2d1c:	adds	r0, #1
    2d1e:	cmp	r3, #0
    2d20:	bne.n	2d1a <usb_tx_packet_count+0x12>
	__enable_irq();
    2d22:	cpsie	i
	return count;
    2d24:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2d26:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2d28:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2d2a:	mov	r0, r3
    2d2c:	b.n	2d22 <usb_tx_packet_count+0x1a>
    2d2e:	nop
    2d30:	.word	0x1fff1994

00002d34 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2d34:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2d36:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2d38:	ldr	r2, [pc, #204]	; (2e08 <usb_rx_memory+0xd4>)
    2d3a:	ldrb	r3, [r2, #0]
    2d3c:	lsls	r3, r3, #28
    2d3e:	bpl.n	2d4e <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2d40:	ldr	r3, [pc, #200]	; (2e0c <usb_rx_memory+0xd8>)
    2d42:	ldr	r1, [r3, #32]
    2d44:	cmp	r1, #0
    2d46:	beq.n	2dd0 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2d48:	ldr	r1, [r3, #40]	; 0x28
    2d4a:	cmp	r1, #0
    2d4c:	beq.n	2dec <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2d4e:	ldrb	r3, [r2, #1]
    2d50:	lsls	r5, r3, #28
    2d52:	bpl.n	2d62 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2d54:	ldr	r3, [pc, #180]	; (2e0c <usb_rx_memory+0xd8>)
    2d56:	ldr	r1, [r3, #64]	; 0x40
    2d58:	cmp	r1, #0
    2d5a:	beq.n	2df8 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2d5c:	ldr	r1, [r3, #72]	; 0x48
    2d5e:	cmp	r1, #0
    2d60:	beq.n	2df0 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2d62:	ldrb	r3, [r2, #2]
    2d64:	lsls	r4, r3, #28
    2d66:	bpl.n	2d76 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2d68:	ldr	r3, [pc, #160]	; (2e0c <usb_rx_memory+0xd8>)
    2d6a:	ldr	r1, [r3, #96]	; 0x60
    2d6c:	cmp	r1, #0
    2d6e:	beq.n	2dfc <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2d70:	ldr	r1, [r3, #104]	; 0x68
    2d72:	cmp	r1, #0
    2d74:	beq.n	2df4 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2d76:	ldrb	r3, [r2, #3]
    2d78:	lsls	r1, r3, #28
    2d7a:	bpl.n	2d8c <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2d7c:	ldr	r3, [pc, #140]	; (2e0c <usb_rx_memory+0xd8>)
    2d7e:	ldr.w	r1, [r3, #128]	; 0x80
    2d82:	cmp	r1, #0
    2d84:	beq.n	2e04 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2d86:	ldr.w	r1, [r3, #136]	; 0x88
    2d8a:	cbz	r1, 2db2 <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2d8c:	ldrb	r3, [r2, #4]
    2d8e:	lsls	r3, r3, #28
    2d90:	bpl.n	2da4 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2d92:	ldr	r3, [pc, #120]	; (2e0c <usb_rx_memory+0xd8>)
    2d94:	ldr.w	r2, [r3, #160]	; 0xa0
    2d98:	cmp	r2, #0
    2d9a:	beq.n	2e00 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2d9c:	ldr.w	r2, [r3, #168]	; 0xa8
    2da0:	movs	r4, #21
    2da2:	cbz	r2, 2db4 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2da4:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    2da6:	ldr	r3, [pc, #104]	; (2e10 <usb_rx_memory+0xdc>)
    2da8:	movs	r2, #0
    2daa:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2dac:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2dae:	b.w	2c80 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2db2:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2db4:	ldr	r1, [pc, #88]	; (2e10 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2db6:	ldr	r5, [pc, #92]	; (2e14 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    2db8:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2dba:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2dbe:	add.w	r3, r3, r4, lsl #3
    2dc2:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2dc4:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2dc6:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2dc8:	strb	r2, [r1, #0]
				__enable_irq();
    2dca:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2dcc:	pop	{r4, r5}
    2dce:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2dd0:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2dd2:	ldr	r4, [pc, #60]	; (2e10 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2dd4:	ldr	r5, [pc, #64]	; (2e18 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    2dd6:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2dd8:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2ddc:	add.w	r3, r3, r2, lsl #3
    2de0:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2de2:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2de4:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2de6:	strb	r2, [r4, #0]
				__enable_irq();
    2de8:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2dea:	b.n	2dcc <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2dec:	movs	r4, #5
    2dee:	b.n	2db4 <usb_rx_memory+0x80>
    2df0:	movs	r4, #9
    2df2:	b.n	2db4 <usb_rx_memory+0x80>
    2df4:	movs	r4, #13
    2df6:	b.n	2db4 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2df8:	movs	r2, #8
    2dfa:	b.n	2dd2 <usb_rx_memory+0x9e>
    2dfc:	movs	r2, #12
    2dfe:	b.n	2dd2 <usb_rx_memory+0x9e>
    2e00:	movs	r2, #20
    2e02:	b.n	2dd2 <usb_rx_memory+0x9e>
    2e04:	movs	r2, #16
    2e06:	b.n	2dd2 <usb_rx_memory+0x9e>
    2e08:	.word	0x00005078
    2e0c:	.word	0x1fff0000
    2e10:	.word	0x1fff19c5
    2e14:	.word	0x004000c8
    2e18:	.word	0x00400088

00002e1c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2e1c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2e1e:	cmp	r3, #4
    2e20:	bhi.n	2e5e <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2e22:	ldr	r2, [pc, #108]	; (2e90 <usb_tx+0x74>)
    2e24:	lsls	r0, r0, #5
    2e26:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2e2a:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2e2c:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    2e2e:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    2e30:	ldr	r4, [pc, #96]	; (2e94 <usb_tx+0x78>)
    2e32:	ldrb	r2, [r4, r3]
    2e34:	cmp	r2, #3
    2e36:	bhi.n	2e70 <usb_tx+0x54>
    2e38:	tbb	[pc, r2]
    2e3c:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    2e40:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2e42:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2e44:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2e46:	tst.w	r0, #8
    2e4a:	ite	ne
    2e4c:	movne	r3, #200	; 0xc8
    2e4e:	moveq	r3, #136	; 0x88
    2e50:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2e54:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2e56:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2e58:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2e5a:	cpsie	i
}
    2e5c:	pop	{r4, r5}
    2e5e:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    2e60:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    2e62:	movs	r2, #2
		break;
    2e64:	b.n	2e42 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    2e66:	movs	r2, #5
    2e68:	b.n	2e42 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    2e6a:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2e6c:	movs	r2, #4
		break;
    2e6e:	b.n	2e42 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    2e70:	ldr	r2, [pc, #36]	; (2e98 <usb_tx+0x7c>)
    2e72:	ldr.w	r0, [r2, r3, lsl #2]
    2e76:	cbz	r0, 2e88 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    2e78:	ldr	r2, [pc, #32]	; (2e9c <usb_tx+0x80>)
    2e7a:	ldr.w	r0, [r2, r3, lsl #2]
    2e7e:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    2e80:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    2e84:	cpsie	i
		return;
    2e86:	b.n	2e5c <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    2e88:	str.w	r1, [r2, r3, lsl #2]
    2e8c:	ldr	r2, [pc, #12]	; (2e9c <usb_tx+0x80>)
    2e8e:	b.n	2e80 <usb_tx+0x64>
    2e90:	.word	0x1fff0000
    2e94:	.word	0x1fff19d4
    2e98:	.word	0x1fff1994
    2e9c:	.word	0x1fff19a8

00002ea0 <usb_isr>:
}



void usb_isr(void)
{
    2ea0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2ea4:	ldr.w	fp, [pc, #776]	; 31b0 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2ea8:	ldr.w	sl, [pc, #776]	; 31b4 <usb_isr+0x314>
}



void usb_isr(void)
{
    2eac:	sub	sp, #28
    2eae:	b.n	2f3a <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2eb0:	ldr	r7, [pc, #680]	; (315c <usb_isr+0x2bc>)
    2eb2:	mov.w	r8, r3, lsr #2
    2eb6:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2eba:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2ebc:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2ec0:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2ec4:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2ec6:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2eca:	and.w	r4, r3, #255	; 0xff
    2ece:	cmp	r3, #0
    2ed0:	bne.w	30d4 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2ed4:	ldr.w	r3, [r7, r8, lsl #3]
    2ed8:	lsrs	r3, r3, #16
    2eda:	uxth	r1, r3
    2edc:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2ee0:	cmp	r3, #0
    2ee2:	beq.w	30c2 <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    2ee6:	ldr	r3, [pc, #632]	; (3160 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2ee8:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2eec:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2ef0:	ldr.w	r2, [r3, r6, lsl #2]
    2ef4:	cmp	r2, #0
    2ef6:	beq.w	3364 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2efa:	ldr	r5, [pc, #616]	; (3164 <usb_isr+0x2c4>)
    2efc:	ldr.w	r3, [r5, r6, lsl #2]
    2f00:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    2f02:	ldr	r4, [pc, #612]	; (3168 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2f04:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2f08:	ldrh.w	r3, [r4, r6, lsl #1]
    2f0c:	add	r1, r3
    2f0e:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    2f12:	bl	2c40 <usb_malloc>
					if (packet) {
    2f16:	cmp	r0, #0
    2f18:	beq.w	3356 <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2f1c:	ldr	r2, [pc, #588]	; (316c <usb_isr+0x2cc>)
    2f1e:	ldr	r3, [pc, #592]	; (3170 <usb_isr+0x2d0>)
    2f20:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2f24:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2f28:	it	ne
    2f2a:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2f2c:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2f30:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2f34:	movs	r3, #8
    2f36:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2f3a:	ldrb.w	r4, [fp]
    2f3e:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2f40:	lsls	r0, r4, #29
    2f42:	bpl.n	2f7e <usb_isr+0xde>
		if (usb_configuration) {
    2f44:	ldr	r3, [pc, #556]	; (3174 <usb_isr+0x2d4>)
    2f46:	ldrb	r3, [r3, #0]
    2f48:	cbz	r3, 2f78 <usb_isr+0xd8>
			t = usb_reboot_timer;
    2f4a:	ldr	r1, [pc, #556]	; (3178 <usb_isr+0x2d8>)
    2f4c:	ldrb	r2, [r1, #0]
			if (t) {
    2f4e:	and.w	r3, r2, #255	; 0xff
    2f52:	cbz	r2, 2f5e <usb_isr+0xbe>
				usb_reboot_timer = --t;
    2f54:	subs	r3, #1
    2f56:	uxtb	r3, r3
    2f58:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2f5a:	cbnz	r3, 2f5e <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2f5c:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    2f5e:	ldr	r1, [pc, #540]	; (317c <usb_isr+0x2dc>)
    2f60:	ldrb	r2, [r1, #0]
			if (t) {
    2f62:	and.w	r3, r2, #255	; 0xff
    2f66:	cbz	r2, 2f74 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    2f68:	subs	r3, #1
    2f6a:	uxtb	r3, r3
    2f6c:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    2f6e:	cmp	r3, #0
    2f70:	beq.w	3302 <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    2f74:	bl	27d8 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2f78:	movs	r3, #4
    2f7a:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2f7e:	and.w	r3, r4, #8
    2f82:	and.w	r2, r3, #255	; 0xff
    2f86:	cmp	r3, #0
    2f88:	beq.w	311c <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    2f8c:	ldrb.w	r3, [sl]
    2f90:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    2f92:	lsrs	r6, r3, #4
    2f94:	bne.n	2eb0 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2f96:	lsrs	r4, r3, #2
    2f98:	ldr.w	r9, [pc, #448]	; 315c <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2f9c:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2fa0:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2fa4:	ubfx	r2, r2, #2, #4
    2fa8:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2faa:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2fac:	cmp	r2, #12
    2fae:	bhi.w	30ba <usb_isr+0x21a>
    2fb2:	tbb	[pc, r2]
    2fb6:	.short	0x7878
    2fb8:	.word	0x82828282
    2fbc:	.word	0x82438282
    2fc0:	.short	0x8282
    2fc2:	.byte	0x07
    2fc3:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2fc4:	ldr	r0, [r1, #0]
    2fc6:	ldr	r5, [pc, #440]	; (3180 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2fc8:	ldr	r3, [pc, #416]	; (316c <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2fca:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2fcc:	ldr	r7, [pc, #436]	; (3184 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2fce:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2fd2:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2fd4:	ldr	r6, [pc, #432]	; (3188 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2fd6:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2fd8:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2fdc:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2fde:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2fe0:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2fe2:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2fe6:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2fe8:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2fec:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2ff0:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2ff2:	bhi.w	31b8 <usb_isr+0x318>
    2ff6:	cmp.w	r1, #1664	; 0x680
    2ffa:	bcs.w	3624 <usb_isr+0x784>
    2ffe:	cmp.w	r1, #258	; 0x102
    3002:	beq.w	33d2 <usb_isr+0x532>
    3006:	bhi.w	339c <usb_isr+0x4fc>
    300a:	cmp	r1, #128	; 0x80
    300c:	beq.w	3658 <usb_isr+0x7b8>
    3010:	cmp	r1, #130	; 0x82
    3012:	bne.w	33de <usb_isr+0x53e>
    3016:	ldrh	r1, [r5, #4]
    3018:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    301c:	cmp	r1, #5
    301e:	bhi.w	33de <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3022:	ldr	r3, [pc, #360]	; (318c <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3024:	ldr	r4, [pc, #360]	; (3190 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3026:	lsls	r1, r1, #2
    3028:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    302a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    302c:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    302e:	ldrb	r2, [r3, #0]
    3030:	lsls	r3, r2, #30
    3032:	bpl.w	3768 <usb_isr+0x8c8>
    3036:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    3038:	movs	r0, #2
    303a:	b.n	3466 <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    303c:	ldr	r7, [pc, #324]	; (3184 <usb_isr+0x2e4>)
    303e:	ldr	r2, [r7, #0]
		if (data) {
    3040:	cbz	r2, 3090 <usb_isr+0x1f0>
			size = ep0_tx_len;
    3042:	ldr	r3, [pc, #336]	; (3194 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3044:	ldr	r6, [pc, #320]	; (3188 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3046:	ldr	r1, [pc, #336]	; (3198 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    3048:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    304a:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    304c:	ldrb	r5, [r1, #0]
    304e:	cmp	r0, #64	; 0x40
    3050:	mov	lr, r0
    3052:	orr.w	r8, r5, #2
    3056:	it	cs
    3058:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    305c:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    305e:	eor.w	r4, r4, #1
    3062:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3064:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3068:	ite	eq
    306a:	moveq	r4, #136	; 0x88
    306c:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    306e:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3072:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3074:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3078:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    307c:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    307e:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3080:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    3084:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3086:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3088:	cmp	r0, #0
    308a:	beq.w	31fa <usb_isr+0x35a>
    308e:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    3090:	ldr	r3, [pc, #236]	; (3180 <usb_isr+0x2e0>)
    3092:	ldrh	r2, [r3, #0]
    3094:	cmp.w	r2, #1280	; 0x500
    3098:	bne.n	30ba <usb_isr+0x21a>
			setup.bRequest = 0;
    309a:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    309c:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    309e:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    30a0:	ldr	r3, [pc, #248]	; (319c <usb_isr+0x2fc>)
    30a2:	strb	r2, [r3, #0]
    30a4:	b.n	30ba <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    30a6:	ldr	r2, [pc, #216]	; (3180 <usb_isr+0x2e0>)
    30a8:	ldrh	r0, [r2, #0]
    30aa:	movw	r2, #8225	; 0x2021
    30ae:	cmp	r0, r2
    30b0:	beq.w	3204 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    30b4:	ldr	r2, [pc, #180]	; (316c <usb_isr+0x2cc>)
    30b6:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    30ba:	ldr	r2, [pc, #228]	; (31a0 <usb_isr+0x300>)
    30bc:	movs	r3, #1
    30be:	strb	r3, [r2, #0]
    30c0:	b.n	2f34 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    30c2:	ldr	r2, [pc, #168]	; (316c <usb_isr+0x2cc>)
    30c4:	ldr	r3, [pc, #168]	; (3170 <usb_isr+0x2d0>)
    30c6:	tst.w	r9, #8
    30ca:	it	ne
    30cc:	movne	r3, r2
    30ce:	str.w	r3, [r7, r8, lsl #3]
    30d2:	b.n	2f34 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    30d4:	bl	2c80 <usb_free>
				packet = tx_first[endpoint];
    30d8:	ldr	r2, [pc, #200]	; (31a4 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    30da:	ldr	r1, [pc, #204]	; (31a8 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    30dc:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    30e0:	cmp	r3, #0
    30e2:	beq.w	336c <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    30e6:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    30e8:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    30ea:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    30ee:	add.w	r2, r3, #8
    30f2:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    30f6:	cmp	r4, #3
    30f8:	bhi.n	3106 <usb_isr+0x266>
    30fa:	tbb	[pc, r4]
    30fe:	.short	0x022c
    3100:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    3102:	movs	r2, #2
    3104:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    3106:	ldrh	r2, [r3, #0]
    3108:	tst.w	r9, #8
    310c:	ite	eq
    310e:	moveq	r3, #136	; 0x88
    3110:	movne	r3, #200	; 0xc8
    3112:	orr.w	r3, r3, r2, lsl #16
    3116:	str.w	r3, [r7, r8, lsl #3]
    311a:	b.n	2f34 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    311c:	lsls	r0, r4, #31
    311e:	bmi.w	3308 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    3122:	lsls	r1, r4, #24
    3124:	bmi.w	3388 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3128:	lsls	r2, r4, #30
    312a:	bpl.n	313a <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    312c:	ldr	r2, [pc, #124]	; (31ac <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    312e:	ldr	r1, [pc, #128]	; (31b0 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3130:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3132:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3134:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    3136:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3138:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    313a:	lsls	r3, r4, #27
    313c:	bpl.n	3144 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    313e:	ldr	r3, [pc, #112]	; (31b0 <usb_isr+0x310>)
    3140:	movs	r2, #16
    3142:	strb	r2, [r3, #0]
	}

}
    3144:	add	sp, #28
    3146:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    314a:	movs	r2, #4
    314c:	strb	r2, [r1, r6]
						break;
    314e:	b.n	3106 <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    3150:	movs	r2, #5
    3152:	strb	r2, [r1, r6]
						break;
    3154:	b.n	3106 <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    3156:	movs	r2, #3
    3158:	strb	r2, [r1, r6]
						break;
    315a:	b.n	3106 <usb_isr+0x266>
    315c:	.word	0x1fff0000
    3160:	.word	0x1fff193c
    3164:	.word	0x1fff18e4
    3168:	.word	0x1fff1e64
    316c:	.word	0x004000c8
    3170:	.word	0x00400088
    3174:	.word	0x1fff19d0
    3178:	.word	0x1fff1951
    317c:	.word	0x1fff1864
    3180:	.word	0x1fff19bc
    3184:	.word	0x1fff18e0
    3188:	.word	0x1fff1950
    318c:	.word	0x400720c0
    3190:	.word	0x1fff19c8
    3194:	.word	0x1fff18f8
    3198:	.word	0x1fff19c4
    319c:	.word	0x40072098
    31a0:	.word	0x40072094
    31a4:	.word	0x1fff1994
    31a8:	.word	0x1fff19d4
    31ac:	.word	0x40072088
    31b0:	.word	0x40072080
    31b4:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    31b8:	movw	r4, #8225	; 0x2021
    31bc:	cmp	r1, r4
    31be:	beq.w	32fa <usb_isr+0x45a>
    31c2:	bhi.n	3258 <usb_isr+0x3b8>
    31c4:	cmp.w	r1, #2176	; 0x880
    31c8:	beq.w	345e <usb_isr+0x5be>
    31cc:	cmp.w	r1, #2304	; 0x900
    31d0:	bne.w	33de <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    31d4:	ldr	r2, [pc, #712]	; (34a0 <usb_isr+0x600>)
    31d6:	ldr	r4, [pc, #716]	; (34a4 <usb_isr+0x604>)
    31d8:	ldrb	r1, [r5, #2]
    31da:	strb	r1, [r2, #0]
    31dc:	add.w	r5, r4, #160	; 0xa0
    31e0:	b.n	31ea <usb_isr+0x34a>
    31e2:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    31e4:	cmp	r5, r4
    31e6:	beq.w	34fc <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    31ea:	ldr	r3, [r4, #32]
    31ec:	lsls	r1, r3, #24
    31ee:	bpl.n	31e2 <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    31f0:	ldr	r0, [r4, #36]	; 0x24
    31f2:	subs	r0, #8
    31f4:	bl	2c80 <usb_free>
    31f8:	b.n	31e2 <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    31fa:	cmp.w	lr, #64	; 0x40
    31fe:	it	ne
    3200:	movne	r2, #0
    3202:	b.n	308e <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3204:	ldr	r2, [pc, #672]	; (34a8 <usb_isr+0x608>)
    3206:	ldrb	r5, [r1, #0]
    3208:	ldrb	r0, [r1, #1]
    320a:	strb	r5, [r2, #0]
    320c:	strb	r0, [r2, #1]
    320e:	ldrb	r5, [r1, #2]
    3210:	ldrb	r0, [r1, #3]
    3212:	strb	r5, [r2, #2]
    3214:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3216:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3218:	ldrb	r5, [r1, #4]
    321a:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    321c:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    321e:	ldrb	r5, [r1, #5]
    3220:	ldrb	r1, [r1, #6]
    3222:	strb	r5, [r2, #5]
    3224:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3226:	beq.w	3456 <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    322a:	ldr	r1, [pc, #640]	; (34ac <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    322c:	ldr	r6, [pc, #640]	; (34b0 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    322e:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3230:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3232:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3236:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3238:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    323c:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    323e:	ite	eq
    3240:	moveq	r1, #136	; 0x88
    3242:	movne	r1, #200	; 0xc8
    3244:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3248:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    324c:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3250:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3252:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3254:	str	r1, [r2, #4]
    3256:	b.n	30b4 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3258:	movw	r4, #8737	; 0x2221
    325c:	cmp	r1, r4
    325e:	bne.w	3672 <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3262:	ldr.w	ip, [pc, #656]	; 34f4 <usb_isr+0x654>
    3266:	ldr	r3, [pc, #588]	; (34b4 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    3268:	ldr	r1, [pc, #588]	; (34b8 <usb_isr+0x618>)
    326a:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    326c:	ldr.w	r5, [ip]
    3270:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    3272:	str	r0, [sp, #4]
    3274:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3276:	movs	r0, #0
    3278:	str	r0, [sp, #8]
    327a:	mov	r8, r0
    327c:	mov	ip, r0
    327e:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3280:	ldr	r1, [pc, #552]	; (34ac <usb_isr+0x60c>)
    3282:	ldrb	r5, [r1, #0]
    3284:	orr.w	lr, r5, #2
    3288:	add.w	r3, r9, lr, lsl #3
    328c:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    328e:	ldr	r3, [sp, #4]
    3290:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3292:	ldr	r3, [sp, #12]
    3294:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3296:	ite	eq
    3298:	moveq	r4, #136	; 0x88
    329a:	movne	r4, #200	; 0xc8
    329c:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    32a0:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32a4:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    32a8:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    32aa:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32ac:	ldr.w	lr, [pc, #500]	; 34a4 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    32b0:	ldr	r3, [pc, #508]	; (34b0 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    32b2:	ldr.w	r8, [pc, #504]	; 34ac <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    32b6:	cmp	r0, #0
    32b8:	bne.w	33ec <usb_isr+0x54c>
    32bc:	cmp.w	ip, #64	; 0x40
    32c0:	bne.n	32fa <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    32c2:	orr.w	ip, r4, #2
    32c6:	add.w	r3, r9, ip, lsl #3
    32ca:	ldr	r4, [sp, #8]
    32cc:	ldr.w	lr, [pc, #468]	; 34a4 <usb_isr+0x604>
    32d0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32d2:	cmp	r2, #0
    32d4:	bne.w	3418 <usb_isr+0x578>
    32d8:	lsls	r2, r0, #16
    32da:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    32de:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32e2:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    32e6:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    32e8:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    32ea:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    32ec:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    32ee:	cmp	r0, #64	; 0x40
    32f0:	bne.n	32fa <usb_isr+0x45a>
    32f2:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    32f4:	ldr	r2, [pc, #452]	; (34bc <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    32f6:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    32f8:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    32fa:	ldr	r2, [pc, #452]	; (34c0 <usb_isr+0x620>)
    32fc:	movs	r3, #1
    32fe:	strb	r3, [r2, #0]
    3300:	b.n	30ba <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    3302:	bl	2060 <usb_serial_flush_callback>
    3306:	b.n	2f74 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3308:	ldr	r3, [pc, #408]	; (34a4 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    330a:	ldr	r0, [pc, #436]	; (34c0 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    330c:	ldr	r1, [pc, #412]	; (34ac <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    330e:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3310:	mov.w	lr, #2
    3314:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3318:	ldr	r7, [pc, #424]	; (34c4 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    331a:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    331c:	ldr	r1, [pc, #424]	; (34c8 <usb_isr+0x628>)
    331e:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3320:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3322:	ldr	r6, [pc, #424]	; (34cc <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    3324:	ldr	r5, [pc, #424]	; (34d0 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3326:	ldr	r4, [pc, #428]	; (34d4 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3328:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    332a:	movs	r1, #13
    332c:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    332e:	movs	r1, #255	; 0xff
    3330:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3332:	ldr.w	lr, [pc, #452]	; 34f8 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    3336:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3338:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    333a:	ldr	r5, [pc, #412]	; (34d8 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    333c:	ldr	r2, [pc, #412]	; (34dc <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    333e:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3342:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3344:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3346:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    334a:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    334c:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    334e:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    3350:	add	sp, #28
    3352:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    3356:	ldr	r2, [pc, #392]	; (34e0 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    3358:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    335c:	ldrb	r3, [r2, #0]
    335e:	adds	r3, #1
    3360:	strb	r3, [r2, #0]
    3362:	b.n	2f34 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3364:	str.w	r0, [r3, r6, lsl #2]
    3368:	ldr	r5, [pc, #376]	; (34e4 <usb_isr+0x644>)
    336a:	b.n	2f02 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    336c:	ldrb	r3, [r1, r6]
    336e:	cmp	r3, #3
    3370:	bhi.n	3448 <usb_isr+0x5a8>
    3372:	add	r2, pc, #4	; (adr r2, 3378 <usb_isr+0x4d8>)
    3374:	ldr.w	pc, [r2, r3, lsl #2]
    3378:	.word	0x00002f35
    337c:	.word	0x00002f35
    3380:	.word	0x000033cd
    3384:	.word	0x000033c7
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3388:	ldr	r1, [pc, #312]	; (34c4 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    338a:	ldr	r3, [pc, #324]	; (34d0 <usb_isr+0x630>)
    338c:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    338e:	movs	r0, #13
    3390:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    3392:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3394:	lsls	r2, r4, #30
    3396:	bpl.w	313a <usb_isr+0x29a>
    339a:	b.n	312c <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    339c:	movw	r2, #770	; 0x302
    33a0:	cmp	r1, r2
    33a2:	bne.w	3662 <usb_isr+0x7c2>
    33a6:	ldrh	r1, [r5, #4]
    33a8:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    33ac:	cmp	r1, #5
    33ae:	bhi.n	33de <usb_isr+0x53e>
    33b0:	ldrh	r2, [r5, #2]
    33b2:	cbnz	r2, 33de <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    33b4:	ldr	r4, [pc, #268]	; (34c4 <usb_isr+0x624>)
    33b6:	str	r0, [sp, #4]
    33b8:	lsls	r1, r1, #2
    33ba:	add	r4, r1
    33bc:	ldrb	r1, [r4, #0]
    33be:	orr.w	r1, r1, #2
    33c2:	strb	r1, [r4, #0]
    33c4:	b.n	3276 <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    33c6:	movs	r3, #1
    33c8:	strb	r3, [r1, r6]
						break;
    33ca:	b.n	2f34 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    33cc:	movs	r3, #0
    33ce:	strb	r3, [r1, r6]
						break;
    33d0:	b.n	2f34 <usb_isr+0x94>
    33d2:	ldrh	r1, [r5, #4]
    33d4:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    33d8:	cmp	r1, #5
    33da:	bls.w	367c <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    33de:	ldr	r2, [pc, #228]	; (34c4 <usb_isr+0x624>)
    33e0:	movs	r3, #15
    33e2:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    33e4:	ldr	r2, [pc, #216]	; (34c0 <usb_isr+0x620>)
    33e6:	movs	r3, #1
    33e8:	strb	r3, [r2, #0]
    33ea:	b.n	30ba <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    33ec:	cmp	r0, #64	; 0x40
    33ee:	bls.w	32c2 <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    33f2:	orr.w	r4, r4, #2
    33f6:	add.w	r1, lr, r4, lsl #3
    33fa:	ldr	r6, [sp, #8]
    33fc:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    33fe:	cbz	r2, 3430 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    3400:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3404:	ldr	r2, [pc, #224]	; (34e8 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    3406:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3408:	mov	r3, r6
    340a:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    340c:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3410:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3412:	str.w	r2, [lr, r4, lsl #3]
    3416:	b.n	32f4 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    3418:	ldrb.w	r3, [sp, #4]
    341c:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    341e:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3420:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3422:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3424:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3428:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    342a:	str.w	r2, [lr, ip, lsl #3]
    342e:	b.n	32ee <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    3430:	ldrb.w	r1, [sp, #4]
    3434:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3436:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3438:	ldr	r2, [pc, #140]	; (34c8 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    343a:	strb.w	r5, [r8]
    343e:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3440:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3442:	str.w	r2, [lr, r4, lsl #3]
    3446:	b.n	32f4 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3448:	tst.w	r9, #8
    344c:	ite	eq
    344e:	moveq	r3, #2
    3450:	movne	r3, #3
    3452:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3454:	b.n	2f34 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3456:	ldr	r2, [pc, #148]	; (34ec <usb_isr+0x64c>)
    3458:	movs	r1, #15
    345a:	strb	r1, [r2, #0]
    345c:	b.n	322a <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    345e:	ldr	r2, [pc, #64]	; (34a0 <usb_isr+0x600>)
    3460:	ldr	r4, [pc, #140]	; (34f0 <usb_isr+0x650>)
    3462:	ldrb	r2, [r2, #0]
    3464:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3466:	ldrh	r2, [r5, #6]
    3468:	cmp	r2, r0
    346a:	bcs.w	3830 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    346e:	ldr	r1, [pc, #60]	; (34ac <usb_isr+0x60c>)
    3470:	ldrb	r5, [r1, #0]
    3472:	cmp	r2, #64	; 0x40
    3474:	mov	ip, r2
    3476:	orr.w	lr, r5, #2
    347a:	it	cs
    347c:	movcs.w	ip, #64	; 0x40
    3480:	add.w	r3, r4, ip
    3484:	add.w	r0, r9, lr, lsl #3
    3488:	str	r3, [sp, #8]
    348a:	movs	r3, #1
    348c:	str	r4, [r0, #4]
    348e:	mov.w	r8, ip, lsl #16
    3492:	rsb	r0, ip, r2
    3496:	str	r3, [sp, #4]
    3498:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    349a:	movs	r4, #200	; 0xc8
    349c:	b.n	329c <usb_isr+0x3fc>
    349e:	nop
    34a0:	.word	0x1fff19d0
    34a4:	.word	0x1fff0000
    34a8:	.word	0x1fff1d2c
    34ac:	.word	0x1fff19c4
    34b0:	.word	0x1fff1950
    34b4:	.word	0x1fff1d34
    34b8:	.word	0x1fff1874
    34bc:	.word	0x1fff18f8
    34c0:	.word	0x40072094
    34c4:	.word	0x400720c0
    34c8:	.word	0x00400088
    34cc:	.word	0x40072088
    34d0:	.word	0x40072080
    34d4:	.word	0x40072098
    34d8:	.word	0x1fff18fc
    34dc:	.word	0x1fff1954
    34e0:	.word	0x1fff19c5
    34e4:	.word	0x1fff18e4
    34e8:	.word	0x004000c8
    34ec:	.word	0x1fff1951
    34f0:	.word	0x1fff19c8
    34f4:	.word	0x1fff187c
    34f8:	.word	0x4007208c
    34fc:	ldr	r4, [pc, #704]	; (37c0 <usb_isr+0x920>)
    34fe:	ldr	r2, [pc, #708]	; (37c4 <usb_isr+0x924>)
    3500:	ldr	r1, [pc, #708]	; (37c8 <usb_isr+0x928>)
    3502:	ldr	r0, [pc, #712]	; (37cc <usb_isr+0x92c>)
    3504:	ldr	r5, [pc, #712]	; (37d0 <usb_isr+0x930>)
    3506:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3508:	movs	r3, #0
    350a:	ldr	r4, [pc, #712]	; (37d4 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    350c:	str	r4, [sp, #8]
    350e:	str	r6, [sp, #20]
    3510:	str	r5, [sp, #12]
    3512:	mov	r8, r0
    3514:	mov	r4, r3
    3516:	str	r7, [sp, #16]
    3518:	mov	r6, r2
    351a:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    351c:	ldr	r0, [r6, #0]
			while (p) {
    351e:	cbz	r0, 352c <usb_isr+0x68c>
				n = p->next;
    3520:	ldr	r7, [r0, #4]
				usb_free(p);
    3522:	bl	2c80 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    3526:	mov	r0, r7
    3528:	cmp	r7, #0
    352a:	bne.n	3520 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    352c:	movs	r3, #0
    352e:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3530:	ldr	r3, [sp, #12]
			p = tx_first[i];
    3532:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3534:	mov	r2, r3
    3536:	movs	r3, #0
    3538:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    353c:	cbz	r0, 354a <usb_isr+0x6aa>
				n = p->next;
    353e:	ldr	r7, [r0, #4]
				usb_free(p);
    3540:	bl	2c80 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3544:	mov	r0, r7
    3546:	cmp	r7, #0
    3548:	bne.n	353e <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    354a:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    354c:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    354e:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3550:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    3552:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    3556:	ldr	r2, [sp, #8]
    3558:	mov.w	r1, #0
			switch (tx_state[i]) {
    355c:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    355e:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    3562:	cmp	r3, #3
    3564:	bhi.n	3576 <usb_isr+0x6d6>
    3566:	tbb	[pc, r3]
    356a:	.short	0x0258
    356c:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    356e:	ldr	r3, [sp, #4]
    3570:	mov.w	r2, #1
    3574:	strb	r2, [r3, #0]
    3576:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3578:	adds	r4, #1
    357a:	adds	r3, #1
    357c:	cmp	r4, #5
    357e:	add.w	r6, r6, #4
    3582:	add.w	r5, r5, #4
    3586:	str	r3, [sp, #4]
    3588:	bne.n	351c <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    358a:	ldr	r4, [pc, #588]	; (37d8 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    358c:	ldr	r5, [pc, #588]	; (37dc <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    358e:	ldrb	r2, [r4, #0]
			*reg = epconf;
    3590:	ldr	r3, [pc, #588]	; (37e0 <usb_isr+0x940>)
    3592:	ldr	r7, [sp, #16]
    3594:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3596:	movs	r1, #0
    3598:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    359a:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    359c:	lsls	r2, r2, #28
    359e:	bmi.n	3696 <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    35a0:	ldrb	r2, [r4, #1]
			*reg = epconf;
    35a2:	ldr	r1, [pc, #576]	; (37e4 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35a4:	ldr.w	r8, [pc, #588]	; 37f4 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    35a8:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35aa:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35ac:	mov.w	r1, #0
    35b0:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    35b4:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35b8:	bmi.w	3742 <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    35bc:	ldrb	r2, [r4, #2]
			*reg = epconf;
    35be:	ldr	r1, [pc, #552]	; (37e8 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35c0:	ldr.w	r8, [pc, #560]	; 37f4 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    35c4:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35c6:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35c8:	mov.w	r1, #0
    35cc:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    35d0:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35d4:	bmi.w	371a <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    35d8:	ldr	r1, [pc, #528]	; (37ec <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    35da:	ldrb	r2, [r4, #3]
			*reg = epconf;
    35dc:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35de:	movs	r1, #0
    35e0:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    35e4:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35e8:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35ea:	ldr.w	r8, [pc, #520]	; 37f4 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35ee:	bmi.n	36ec <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    35f0:	ldrb	r2, [r4, #4]
			*reg = epconf;
    35f2:	ldr	r1, [pc, #508]	; (37f0 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35f4:	ldr	r4, [pc, #508]	; (37f4 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    35f6:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35f8:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35fa:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35fc:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3600:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3604:	bmi.n	36c2 <usb_isr+0x822>
    3606:	ldrb	r3, [r6, #0]
    3608:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    360a:	movs	r1, #0
    360c:	eor.w	r2, r3, #1
    3610:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3614:	str.w	r1, [r9, #184]	; 0xb8
    3618:	b.n	3276 <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    361a:	ldr	r3, [sp, #4]
    361c:	mov.w	r2, #0
    3620:	strb	r2, [r3, #0]
    3622:	b.n	3576 <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3624:	ldr	r2, [pc, #464]	; (37f8 <usb_isr+0x958>)
    3626:	ldr	r4, [r2, #4]
    3628:	cmp	r4, #0
    362a:	beq.w	33de <usb_isr+0x53e>
    362e:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3630:	ldrh.w	lr, [r5, #4]
    3634:	b.n	3640 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3636:	adds	r2, #12
			if (list->addr == NULL) break;
    3638:	ldr	r4, [r2, #4]
    363a:	cmp	r4, #0
    363c:	beq.w	33de <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3640:	ldrh	r3, [r2, #0]
    3642:	cmp	r3, r0
    3644:	bne.n	3636 <usb_isr+0x796>
    3646:	ldrh	r3, [r2, #2]
    3648:	cmp	r3, lr
    364a:	bne.n	3636 <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    364c:	lsrs	r0, r0, #8
    364e:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3650:	ite	eq
    3652:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    3654:	ldrhne	r0, [r2, #8]
    3656:	b.n	3466 <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3658:	ldr	r4, [pc, #416]	; (37fc <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    365a:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    365c:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    365e:	strb	r2, [r4, #1]
    3660:	b.n	3466 <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3662:	cmp.w	r1, #1280	; 0x500
    3666:	bne.w	33de <usb_isr+0x53e>
    366a:	movs	r3, #1
    366c:	movs	r2, #0
    366e:	str	r3, [sp, #4]
    3670:	b.n	3276 <usb_isr+0x3d6>
    3672:	movw	r2, #8993	; 0x2321
    3676:	cmp	r1, r2
    3678:	beq.n	366a <usb_isr+0x7ca>
    367a:	b.n	33de <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    367c:	ldrh	r2, [r5, #2]
    367e:	cmp	r2, #0
    3680:	bne.w	33de <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3684:	ldr	r4, [pc, #376]	; (3800 <usb_isr+0x960>)
    3686:	str	r0, [sp, #4]
    3688:	lsls	r1, r1, #2
    368a:	add	r4, r1
    368c:	ldrb	r1, [r4, #0]
    368e:	bic.w	r1, r1, #2
    3692:	strb	r1, [r4, #0]
    3694:	b.n	3276 <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3696:	bl	2c40 <usb_malloc>
				if (p) {
    369a:	cmp	r0, #0
    369c:	beq.w	380c <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    36a0:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    36a2:	ldr	r2, [pc, #352]	; (3804 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    36a4:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    36a8:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    36ac:	bl	2c40 <usb_malloc>
				if (p) {
    36b0:	cmp	r0, #0
    36b2:	beq.n	37b4 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    36b4:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    36b6:	ldr	r2, [pc, #336]	; (3808 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    36b8:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    36bc:	str.w	r2, [r9, #40]	; 0x28
    36c0:	b.n	35a0 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    36c2:	bl	2c40 <usb_malloc>
				if (p) {
    36c6:	cmp	r0, #0
    36c8:	beq.n	3778 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    36ca:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    36cc:	ldr	r2, [pc, #308]	; (3804 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    36ce:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    36d2:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    36d6:	bl	2c40 <usb_malloc>
				if (p) {
    36da:	cmp	r0, #0
    36dc:	beq.n	376c <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    36de:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    36e0:	ldr	r2, [pc, #292]	; (3808 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    36e2:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    36e6:	str.w	r2, [r9, #168]	; 0xa8
    36ea:	b.n	3606 <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    36ec:	bl	2c40 <usb_malloc>
				if (p) {
    36f0:	cmp	r0, #0
    36f2:	beq.w	3824 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    36f6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    36f8:	ldr	r2, [pc, #264]	; (3804 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    36fa:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    36fe:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3702:	bl	2c40 <usb_malloc>
				if (p) {
    3706:	cmp	r0, #0
    3708:	beq.w	3818 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    370c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    370e:	ldr	r2, [pc, #248]	; (3808 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3710:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3714:	str.w	r2, [r9, #136]	; 0x88
    3718:	b.n	35f0 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    371a:	bl	2c40 <usb_malloc>
				if (p) {
    371e:	cmp	r0, #0
    3720:	beq.n	37a8 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    3722:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3724:	ldr	r2, [pc, #220]	; (3804 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3726:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    372a:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    372e:	bl	2c40 <usb_malloc>
				if (p) {
    3732:	cbz	r0, 379c <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3734:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3736:	ldr	r2, [pc, #208]	; (3808 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3738:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    373c:	str.w	r2, [r9, #104]	; 0x68
    3740:	b.n	35d8 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3742:	bl	2c40 <usb_malloc>
				if (p) {
    3746:	cbz	r0, 3790 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3748:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    374a:	ldr	r2, [pc, #184]	; (3804 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    374c:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3750:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3754:	bl	2c40 <usb_malloc>
				if (p) {
    3758:	cbz	r0, 3784 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    375a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    375c:	ldr	r2, [pc, #168]	; (3808 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    375e:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3762:	str.w	r2, [r9, #72]	; 0x48
    3766:	b.n	35bc <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3768:	movs	r0, #2
    376a:	b.n	3466 <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    376c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    376e:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    3772:	adds	r2, #1
    3774:	strb	r2, [r5, #0]
    3776:	b.n	3606 <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3778:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    377a:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    377e:	adds	r2, #1
    3780:	strb	r2, [r5, #0]
    3782:	b.n	36d6 <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3784:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3786:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    378a:	adds	r2, #1
    378c:	strb	r2, [r5, #0]
    378e:	b.n	35bc <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3790:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3792:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    3796:	adds	r2, #1
    3798:	strb	r2, [r5, #0]
    379a:	b.n	3754 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    379c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    379e:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    37a2:	adds	r2, #1
    37a4:	strb	r2, [r5, #0]
    37a6:	b.n	35d8 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    37a8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    37aa:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    37ae:	adds	r2, #1
    37b0:	strb	r2, [r5, #0]
    37b2:	b.n	372e <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    37b4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    37b6:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    37ba:	adds	r2, #1
    37bc:	strb	r2, [r5, #0]
    37be:	b.n	35a0 <usb_isr+0x700>
    37c0:	.word	0x1fff19d4
    37c4:	.word	0x1fff193c
    37c8:	.word	0x1fff1994
    37cc:	.word	0x1fff19a8
    37d0:	.word	0x1fff18e4
    37d4:	.word	0x1fff1e64
    37d8:	.word	0x00005078
    37dc:	.word	0x1fff19c5
    37e0:	.word	0x400720c4
    37e4:	.word	0x400720c8
    37e8:	.word	0x400720cc
    37ec:	.word	0x400720d0
    37f0:	.word	0x400720d4
    37f4:	.word	0x1fff0000
    37f8:	.word	0x00005080
    37fc:	.word	0x1fff19c8
    3800:	.word	0x400720c0
    3804:	.word	0x00400088
    3808:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    380c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    380e:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    3812:	adds	r2, #1
    3814:	strb	r2, [r5, #0]
    3816:	b.n	36ac <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3818:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    381a:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    381e:	adds	r2, #1
    3820:	strb	r2, [r5, #0]
    3822:	b.n	35f0 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3824:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3826:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    382a:	adds	r2, #1
    382c:	strb	r2, [r5, #0]
    382e:	b.n	3702 <usb_isr+0x862>
    3830:	cmp	r0, #64	; 0x40
    3832:	mov	ip, r0
    3834:	it	cs
    3836:	movcs.w	ip, #64	; 0x40
    383a:	add.w	r3, r4, ip
    383e:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3840:	movs	r3, #1
    3842:	rsb	r0, ip, r0
    3846:	mov.w	r8, ip, lsl #16
    384a:	movs	r2, #0
    384c:	str	r3, [sp, #4]
    384e:	b.n	3280 <usb_isr+0x3e0>

00003850 <usb_init>:
}



void usb_init(void)
{
    3850:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3854:	ldr	r4, [pc, #156]	; (38f4 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3856:	bl	4090 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    385a:	movs	r2, #0
    385c:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3860:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3862:	str	r2, [r3, #0]
		table[i].addr = 0;
    3864:	str	r2, [r3, #4]
    3866:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3868:	cmp	r3, r0
		table[i].desc = 0;
    386a:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    386e:	bne.n	3862 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3870:	ldr	r0, [pc, #132]	; (38f8 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3872:	ldr	r2, [pc, #136]	; (38fc <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3874:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3876:	ldr.w	lr, [pc, #156]	; 3914 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    387a:	ldr	r6, [pc, #132]	; (3900 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    387c:	ldr	r5, [pc, #132]	; (3904 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    387e:	ldr	r7, [pc, #136]	; (3908 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3880:	ldr.w	ip, [pc, #148]	; 3918 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    3884:	ldr.w	r8, [pc, #148]	; 391c <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3888:	orr.w	r3, r3, #262144	; 0x40000
    388c:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    388e:	ldr	r3, [r2, #0]
    3890:	orr.w	r3, r3, #50331648	; 0x3000000
    3894:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3896:	movs	r3, #3
    3898:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    389c:	movs	r3, #160	; 0xa0
    389e:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    38a0:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    38a4:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    38a8:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    38ac:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    38ae:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    38b0:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    38b4:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    38b6:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    38b8:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    38ba:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    38bc:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    38be:	ldr	r5, [pc, #76]	; (390c <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    38c0:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    38c4:	ldr	r0, [pc, #72]	; (3910 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    38c6:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    38ca:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    38cc:	movs	r3, #1
    38ce:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    38d2:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    38d6:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    38da:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    38dc:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    38de:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    38e2:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    38e4:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    38e6:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    38ea:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    38ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38f2:	nop
    38f4:	.word	0x1fff0000
    38f8:	.word	0x40048034
    38fc:	.word	0x4000d800
    3900:	.word	0x40072140
    3904:	.word	0x4007209c
    3908:	.word	0x400720b0
    390c:	.word	0xe000e435
    3910:	.word	0xe000e104
    3914:	.word	0x40072144
    3918:	.word	0x40072080
    391c:	.word	0x40072088

00003920 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3920:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    3922:	ldr	r4, [pc, #176]	; (39d4 <yield+0xb4>)
    3924:	ldrb	r3, [r4, #0]
    3926:	cbz	r3, 392a <yield+0xa>
    3928:	pop	{r3, r4, r5, pc}
	running = 1;
    392a:	movs	r3, #1
    392c:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    392e:	bl	1e4c <usb_serial_available>
	if (Serial.available()) serialEvent();
    3932:	cmp	r0, #0
    3934:	bne.n	39bc <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    3936:	bl	3e60 <serial_available>
	if (Serial1.available()) serialEvent1();
    393a:	cmp	r0, #0
    393c:	bne.n	39b6 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    393e:	bl	3b48 <serial2_available>
	if (Serial2.available()) serialEvent2();
    3942:	cmp	r0, #0
    3944:	bne.n	39b0 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    3946:	bl	4160 <serial3_available>
	if (Serial3.available()) serialEvent3();
    394a:	cbnz	r0, 39aa <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    394c:	bl	3c74 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3950:	cbnz	r0, 39a4 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    3952:	bl	3a50 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3956:	cbnz	r0, 399e <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    3958:	bl	3f8c <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    395c:	cbnz	r0, 3998 <yield+0x78>
#endif
	running = 0;
    395e:	movs	r3, #0
    3960:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3962:	mrs	r3, IPSR
		if (ipsr != 0) return;
    3966:	cmp	r3, #0
    3968:	bne.n	3928 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    396a:	mrs	r1, PRIMASK
		__disable_irq();
    396e:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3970:	ldr	r3, [pc, #100]	; (39d8 <yield+0xb8>)
    3972:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    3974:	cbz	r0, 39c2 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    3976:	ldr	r4, [pc, #100]	; (39dc <yield+0xbc>)
    3978:	ldrb	r2, [r4, #0]
    397a:	cbnz	r2, 39c2 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    397c:	ldr	r5, [r0, #20]
    397e:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3980:	movs	r3, #1
    3982:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    3984:	cbz	r5, 39ca <yield+0xaa>
			firstYield->_prev = nullptr;
    3986:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3988:	cbnz	r1, 398c <yield+0x6c>
    398a:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    398c:	movs	r5, #0
    398e:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    3990:	ldr	r3, [r0, #8]
    3992:	blx	r3
		runningFromYield = false;
    3994:	strb	r5, [r4, #0]
    3996:	b.n	3928 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    3998:	bl	3a4c <serialEvent6()>
    399c:	b.n	395e <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    399e:	bl	39e4 <serialEvent5()>
    39a2:	b.n	3958 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    39a4:	bl	3a38 <serialEvent4()>
    39a8:	b.n	3952 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    39aa:	bl	425c <serialEvent3()>
    39ae:	b.n	394c <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    39b0:	bl	3a34 <serialEvent2()>
    39b4:	b.n	3946 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    39b6:	bl	4258 <serialEvent1()>
    39ba:	b.n	393e <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    39bc:	bl	3a10 <serialEvent()>
    39c0:	b.n	3936 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    39c2:	cmp	r1, #0
    39c4:	bne.n	3928 <yield+0x8>
    39c6:	cpsie	i
    39c8:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    39ca:	ldr	r3, [pc, #20]	; (39e0 <yield+0xc0>)
    39cc:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    39ce:	cmp	r1, #0
    39d0:	bne.n	398c <yield+0x6c>
    39d2:	b.n	398a <yield+0x6a>
    39d4:	.word	0x1fff19d9
    39d8:	.word	0x1fff1cec
    39dc:	.word	0x1fff1cf0
    39e0:	.word	0x1fff1ce8

000039e4 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    39e4:	bx	lr
    39e6:	nop

000039e8 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    39e8:	b.w	1e68 <usb_serial_flush_input>

000039ec <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    39ec:	b.w	1e1c <usb_serial_peekchar>

000039f0 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    39f0:	b.w	1dd4 <usb_serial_getchar>

000039f4 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    39f4:	b.w	1e4c <usb_serial_available>

000039f8 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    39f8:	b.w	2008 <usb_serial_flush_output>

000039fc <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    39fc:	b.w	1fc0 <usb_serial_write_buffer_free>

00003a00 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3a00:	mov	r0, r1
    3a02:	mov	r1, r2
    3a04:	b.w	1ea0 <usb_serial_write>

00003a08 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3a08:	mov	r0, r1
    3a0a:	b.w	1fa8 <usb_serial_putchar>
    3a0e:	nop

00003a10 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    3a10:	bx	lr
    3a12:	nop

00003a14 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3a14:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    3a16:	ldr	r2, [pc, #24]	; (3a30 <Print::println()+0x1c>)
	return write(buf, 2);
    3a18:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3a1a:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    3a1c:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3a1e:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3a20:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3a22:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    3a26:	movs	r2, #2
    3a28:	blx	r3
}
    3a2a:	add	sp, #12
    3a2c:	ldr.w	pc, [sp], #4
    3a30:	.word	0x00005074

00003a34 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    3a34:	bx	lr
    3a36:	nop

00003a38 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    3a38:	bx	lr
    3a3a:	nop

00003a3c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3a3c:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3a3e:	bl	490 <setup>
	while (1) {
		loop();
    3a42:	bl	494 <loop>
		yield();
    3a46:	bl	3920 <yield>
    3a4a:	b.n	3a42 <main+0x6>

00003a4c <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    3a4c:	bx	lr
    3a4e:	nop

00003a50 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a50:	ldr	r2, [pc, #20]	; (3a68 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    3a52:	ldr	r3, [pc, #24]	; (3a6c <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a54:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3a56:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a58:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3a5a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3a5c:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    3a5e:	it	cc
    3a60:	addcc	r0, #64	; 0x40
    3a62:	subs	r0, r0, r3
}
    3a64:	bx	lr
    3a66:	nop
    3a68:	.word	0x1fff19e0
    3a6c:	.word	0x1fff19e1

00003a70 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    3a70:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    3a72:	ldr	r3, [pc, #172]	; (3b20 <uart4_status_isr+0xb0>)
    3a74:	ldrb	r2, [r3, #4]
    3a76:	lsls	r4, r2, #26
    3a78:	bpl.n	3aba <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3a7a:	ldr	r0, [pc, #168]	; (3b24 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3a7c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3a7e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a80:	ldr	r1, [pc, #164]	; (3b28 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3a82:	adds	r3, #1
    3a84:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a86:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3a88:	it	gt
    3a8a:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a8c:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3a8e:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3a90:	beq.n	3a9a <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    3a92:	ldr	r4, [pc, #152]	; (3b2c <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    3a94:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3a96:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3a98:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3a9a:	ldr	r2, [pc, #148]	; (3b30 <uart4_status_isr+0xc0>)
    3a9c:	ldr	r1, [r2, #0]
    3a9e:	cbz	r1, 3aba <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3aa0:	ldr	r2, [pc, #144]	; (3b34 <uart4_status_isr+0xc4>)
    3aa2:	ldrb	r2, [r2, #0]
    3aa4:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3aa6:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3aa8:	itet	cc
    3aaa:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3aae:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3ab0:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3ab2:	cmp	r3, #39	; 0x27
    3ab4:	itt	gt
    3ab6:	movgt	r3, #1
    3ab8:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    3aba:	ldr	r2, [pc, #100]	; (3b20 <uart4_status_isr+0xb0>)
    3abc:	ldrb	r3, [r2, #3]
    3abe:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3ac0:	lsls	r0, r3, #24
    3ac2:	bmi.n	3ae8 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    3ac4:	lsls	r2, r3, #25
    3ac6:	bpl.n	3ae4 <uart4_status_isr+0x74>
    3ac8:	ldr	r3, [pc, #84]	; (3b20 <uart4_status_isr+0xb0>)
    3aca:	ldrb	r3, [r3, #4]
    3acc:	lsls	r3, r3, #25
    3ace:	bpl.n	3ae4 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3ad0:	ldr	r3, [pc, #100]	; (3b38 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3ad2:	ldr	r1, [pc, #104]	; (3b3c <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3ad4:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3ad6:	movs	r2, #0
    3ad8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3ada:	cbz	r3, 3ade <uart4_status_isr+0x6e>
    3adc:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    3ade:	ldr	r3, [pc, #64]	; (3b20 <uart4_status_isr+0xb0>)
    3ae0:	movs	r2, #44	; 0x2c
    3ae2:	strb	r2, [r3, #3]
	}
}
    3ae4:	pop	{r4, r5}
    3ae6:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3ae8:	ldrb	r1, [r2, #4]
    3aea:	lsls	r1, r1, #24
    3aec:	bpl.n	3ac4 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    3aee:	ldr	r1, [pc, #80]	; (3b40 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3af0:	ldr	r0, [pc, #64]	; (3b34 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3af2:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3af4:	ldrb	r1, [r0, #0]
    3af6:	uxtb	r1, r1
		if (head == tail) {
    3af8:	cmp	r4, r1
    3afa:	beq.n	3b18 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    3afc:	adds	r2, r1, #1
    3afe:	cmp	r2, #39	; 0x27
    3b00:	itt	hi
    3b02:	movhi	r1, #0
    3b04:	movhi	r2, r1
			n = tx_buffer[tail];
    3b06:	ldr	r5, [pc, #60]	; (3b44 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3b08:	ldr	r4, [pc, #20]	; (3b20 <uart4_status_isr+0xb0>)
    3b0a:	it	ls
    3b0c:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3b0e:	ldrb	r2, [r5, r2]
    3b10:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3b12:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3b14:	strb	r1, [r0, #0]
    3b16:	b.n	3ac4 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    3b18:	movs	r1, #108	; 0x6c
    3b1a:	strb	r1, [r2, #3]
    3b1c:	b.n	3ac4 <uart4_status_isr+0x54>
    3b1e:	nop
    3b20:	.word	0x400ea000
    3b24:	.word	0x1fff19e0
    3b28:	.word	0x1fff19e1
    3b2c:	.word	0x1fff1a0c
    3b30:	.word	0x1fff19dc
    3b34:	.word	0x1fff1a4d
    3b38:	.word	0x1fff1a50
    3b3c:	.word	0x1fff1a4c
    3b40:	.word	0x1fff1a54
    3b44:	.word	0x1fff19e4

00003b48 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b48:	ldr	r2, [pc, #20]	; (3b60 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    3b4a:	ldr	r3, [pc, #24]	; (3b64 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b4c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3b4e:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b50:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3b52:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3b54:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    3b56:	it	cc
    3b58:	addcc	r0, #64	; 0x40
    3b5a:	subs	r0, r0, r3
}
    3b5c:	bx	lr
    3b5e:	nop
    3b60:	.word	0x1fff1ac8
    3b64:	.word	0x1fff1a5d

00003b68 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    3b68:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3b6a:	ldr	r3, [pc, #224]	; (3c4c <uart1_status_isr+0xe4>)
    3b6c:	ldrb	r2, [r3, #4]
    3b6e:	tst.w	r2, #48	; 0x30
    3b72:	beq.n	3bce <uart1_status_isr+0x66>
		__disable_irq();
    3b74:	cpsid	i
		avail = UART1_RCFIFO;
    3b76:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3b78:	and.w	r2, r1, #255	; 0xff
    3b7c:	cmp	r1, #0
    3b7e:	beq.n	3bfc <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3b80:	cpsie	i
			head = rx_buffer_head;
    3b82:	ldr	r7, [pc, #204]	; (3c50 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3b84:	ldr	r1, [pc, #204]	; (3c54 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3b86:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3b88:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3b8a:	ldr	r6, [pc, #204]	; (3c58 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3b8c:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3b8e:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3b90:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    3b92:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3b94:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3b96:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3b98:	it	cs
    3b9a:	movcs	r3, #0
				if (newhead != tail) {
    3b9c:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3b9e:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3ba2:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3ba4:	itt	ne
    3ba6:	strbne	r1, [r6, r3]
    3ba8:	movne	r0, r3
				}
			} while (--avail > 0);
    3baa:	ands.w	r2, r2, #255	; 0xff
    3bae:	bne.n	3b92 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3bb0:	ldr	r3, [pc, #168]	; (3c5c <uart1_status_isr+0xf4>)
    3bb2:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3bb4:	uxtb	r2, r0
    3bb6:	strb	r2, [r7, #0]
			if (rts_pin) {
    3bb8:	cbz	r3, 3bce <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3bba:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3bbc:	itet	cc
    3bbe:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3bc2:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3bc4:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3bc6:	cmp	r0, #39	; 0x27
    3bc8:	itt	gt
    3bca:	movgt	r2, #1
    3bcc:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    3bce:	ldr	r1, [pc, #124]	; (3c4c <uart1_status_isr+0xe4>)
    3bd0:	ldrb	r2, [r1, #3]
    3bd2:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3bd4:	lsls	r5, r2, #24
    3bd6:	bmi.n	3c06 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    3bd8:	lsls	r2, r2, #25
    3bda:	bpl.n	3bf8 <uart1_status_isr+0x90>
    3bdc:	ldr	r3, [pc, #108]	; (3c4c <uart1_status_isr+0xe4>)
    3bde:	ldrb	r3, [r3, #4]
    3be0:	lsls	r3, r3, #25
    3be2:	bpl.n	3bf8 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3be4:	ldr	r3, [pc, #120]	; (3c60 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3be6:	ldr	r1, [pc, #124]	; (3c64 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3be8:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3bea:	movs	r2, #0
    3bec:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3bee:	cbz	r3, 3bf2 <uart1_status_isr+0x8a>
    3bf0:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    3bf2:	ldr	r3, [pc, #88]	; (3c4c <uart1_status_isr+0xe4>)
    3bf4:	movs	r2, #60	; 0x3c
    3bf6:	strb	r2, [r3, #3]
	}
}
    3bf8:	pop	{r4, r5, r6, r7}
    3bfa:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3bfc:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    3bfe:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3c00:	strb	r2, [r3, #17]
			__enable_irq();
    3c02:	cpsie	i
    3c04:	b.n	3bce <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3c06:	ldrb	r3, [r1, #4]
    3c08:	lsls	r4, r3, #24
    3c0a:	bpl.n	3bd8 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    3c0c:	ldr	r3, [pc, #88]	; (3c68 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    3c0e:	ldr	r6, [pc, #92]	; (3c6c <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3c10:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3c12:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3c14:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3c16:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3c18:	cmp	r4, r3
    3c1a:	beq.n	3c3a <uart1_status_isr+0xd2>
    3c1c:	ldr	r5, [pc, #80]	; (3c70 <uart1_status_isr+0x108>)
    3c1e:	b.n	3c24 <uart1_status_isr+0xbc>
    3c20:	cmp	r3, r4
    3c22:	beq.n	3c3a <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    3c24:	adds	r3, #1
    3c26:	cmp	r3, #40	; 0x28
    3c28:	it	cs
    3c2a:	movcs	r3, #0
			avail = UART1_S1;
    3c2c:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3c2e:	ldrb	r0, [r5, r3]
    3c30:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    3c32:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    3c34:	ldrb	r0, [r1, #20]
    3c36:	cmp	r0, #7
    3c38:	bls.n	3c20 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    3c3a:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3c3c:	ldr	r1, [pc, #12]	; (3c4c <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    3c3e:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3c40:	ldrb	r3, [r1, #4]
    3c42:	lsls	r0, r3, #24
    3c44:	itt	mi
    3c46:	movmi	r3, #124	; 0x7c
    3c48:	strbmi	r3, [r1, #3]
    3c4a:	b.n	3bd8 <uart1_status_isr+0x70>
    3c4c:	.word	0x4006b000
    3c50:	.word	0x1fff1ac8
    3c54:	.word	0x1fff1a5d
    3c58:	.word	0x1fff1a88
    3c5c:	.word	0x1fff1a58
    3c60:	.word	0x1fff1acc
    3c64:	.word	0x1fff1a5c
    3c68:	.word	0x1fff1ad0
    3c6c:	.word	0x1fff1ac9
    3c70:	.word	0x1fff1a60

00003c74 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c74:	ldr	r2, [pc, #20]	; (3c8c <serial4_available+0x18>)
	tail = rx_buffer_tail;
    3c76:	ldr	r3, [pc, #24]	; (3c90 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c78:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3c7a:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c7c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3c7e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3c80:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    3c82:	it	cc
    3c84:	addcc	r0, #64	; 0x40
    3c86:	subs	r0, r0, r3
}
    3c88:	bx	lr
    3c8a:	nop
    3c8c:	.word	0x1fff1ad8
    3c90:	.word	0x1fff1ad9

00003c94 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    3c94:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    3c96:	ldr	r3, [pc, #172]	; (3d44 <uart3_status_isr+0xb0>)
    3c98:	ldrb	r2, [r3, #4]
    3c9a:	lsls	r4, r2, #26
    3c9c:	bpl.n	3cde <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3c9e:	ldr	r0, [pc, #168]	; (3d48 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3ca0:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3ca2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ca4:	ldr	r1, [pc, #164]	; (3d4c <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3ca6:	adds	r3, #1
    3ca8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3caa:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3cac:	it	gt
    3cae:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cb0:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3cb2:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cb4:	beq.n	3cbe <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    3cb6:	ldr	r4, [pc, #152]	; (3d50 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    3cb8:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3cba:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3cbc:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3cbe:	ldr	r2, [pc, #148]	; (3d54 <uart3_status_isr+0xc0>)
    3cc0:	ldr	r1, [r2, #0]
    3cc2:	cbz	r1, 3cde <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3cc4:	ldr	r2, [pc, #144]	; (3d58 <uart3_status_isr+0xc4>)
    3cc6:	ldrb	r2, [r2, #0]
    3cc8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3cca:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3ccc:	itet	cc
    3cce:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3cd2:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3cd4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3cd6:	cmp	r3, #39	; 0x27
    3cd8:	itt	gt
    3cda:	movgt	r3, #1
    3cdc:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    3cde:	ldr	r2, [pc, #100]	; (3d44 <uart3_status_isr+0xb0>)
    3ce0:	ldrb	r3, [r2, #3]
    3ce2:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3ce4:	lsls	r0, r3, #24
    3ce6:	bmi.n	3d0c <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    3ce8:	lsls	r2, r3, #25
    3cea:	bpl.n	3d08 <uart3_status_isr+0x74>
    3cec:	ldr	r3, [pc, #84]	; (3d44 <uart3_status_isr+0xb0>)
    3cee:	ldrb	r3, [r3, #4]
    3cf0:	lsls	r3, r3, #25
    3cf2:	bpl.n	3d08 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3cf4:	ldr	r3, [pc, #100]	; (3d5c <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3cf6:	ldr	r1, [pc, #104]	; (3d60 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3cf8:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3cfa:	movs	r2, #0
    3cfc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3cfe:	cbz	r3, 3d02 <uart3_status_isr+0x6e>
    3d00:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    3d02:	ldr	r3, [pc, #64]	; (3d44 <uart3_status_isr+0xb0>)
    3d04:	movs	r2, #44	; 0x2c
    3d06:	strb	r2, [r3, #3]
	}
}
    3d08:	pop	{r4, r5}
    3d0a:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3d0c:	ldrb	r1, [r2, #4]
    3d0e:	lsls	r1, r1, #24
    3d10:	bpl.n	3ce8 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    3d12:	ldr	r1, [pc, #80]	; (3d64 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3d14:	ldr	r0, [pc, #64]	; (3d58 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3d16:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3d18:	ldrb	r1, [r0, #0]
    3d1a:	uxtb	r1, r1
		if (head == tail) {
    3d1c:	cmp	r4, r1
    3d1e:	beq.n	3d3c <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    3d20:	adds	r2, r1, #1
    3d22:	cmp	r2, #39	; 0x27
    3d24:	itt	hi
    3d26:	movhi	r1, #0
    3d28:	movhi	r2, r1
			n = tx_buffer[tail];
    3d2a:	ldr	r5, [pc, #60]	; (3d68 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3d2c:	ldr	r4, [pc, #20]	; (3d44 <uart3_status_isr+0xb0>)
    3d2e:	it	ls
    3d30:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3d32:	ldrb	r2, [r5, r2]
    3d34:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3d36:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3d38:	strb	r1, [r0, #0]
    3d3a:	b.n	3ce8 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    3d3c:	movs	r1, #108	; 0x6c
    3d3e:	strb	r1, [r2, #3]
    3d40:	b.n	3ce8 <uart3_status_isr+0x54>
    3d42:	nop
    3d44:	.word	0x4006d000
    3d48:	.word	0x1fff1ad8
    3d4c:	.word	0x1fff1ad9
    3d50:	.word	0x1fff1b04
    3d54:	.word	0x1fff1ad4
    3d58:	.word	0x1fff1b45
    3d5c:	.word	0x1fff1b48
    3d60:	.word	0x1fff1b44
    3d64:	.word	0x1fff1b4c
    3d68:	.word	0x1fff1adc

00003d6c <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3d6c:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3d6e:	ldr	r4, [pc, #64]	; (3db0 <fault_isr+0x44>)
    3d70:	b.n	3d84 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3d72:	ldr	r3, [r4, #0]
    3d74:	lsls	r1, r3, #21
    3d76:	bmi.n	3d94 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3d78:	ldr	r3, [r4, #0]
    3d7a:	lsls	r2, r3, #20
    3d7c:	bmi.n	3d9e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3d7e:	ldr	r3, [r4, #0]
    3d80:	lsls	r3, r3, #19
    3d82:	bmi.n	3da8 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3d84:	ldr	r3, [r4, #0]
    3d86:	lsls	r0, r3, #13
    3d88:	bpl.n	3d72 <fault_isr+0x6>
    3d8a:	bl	2ea0 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3d8e:	ldr	r3, [r4, #0]
    3d90:	lsls	r1, r3, #21
    3d92:	bpl.n	3d78 <fault_isr+0xc>
    3d94:	bl	3e80 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3d98:	ldr	r3, [r4, #0]
    3d9a:	lsls	r2, r3, #20
    3d9c:	bpl.n	3d7e <fault_isr+0x12>
    3d9e:	bl	3b68 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3da2:	ldr	r3, [r4, #0]
    3da4:	lsls	r3, r3, #19
    3da6:	bpl.n	3d84 <fault_isr+0x18>
    3da8:	bl	4180 <uart2_status_isr>
    3dac:	b.n	3d84 <fault_isr+0x18>
    3dae:	nop
    3db0:	.word	0x40048034

00003db4 <unused_isr>:
	}
}

void unused_isr(void)
{
    3db4:	push	{r3, lr}
	fault_isr();
    3db6:	bl	3d6c <fault_isr>
    3dba:	nop

00003dbc <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3dbc:	ldr	r3, [pc, #4]	; (3dc4 <startup_early_hook+0x8>)
    3dbe:	movs	r2, #16
    3dc0:	strh	r2, [r3, #0]
    3dc2:	bx	lr
    3dc4:	.word	0x40052000

00003dc8 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3dc8:	bx	lr
    3dca:	nop

00003dcc <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3dcc:	ldr	r1, [pc, #36]	; (3df4 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3dce:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3dd0:	ldr	r3, [r1, #0]
	if (incr != 0) {
    3dd2:	cbz	r0, 3de2 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    3dd4:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    3dd6:	add	r0, r3
    3dd8:	sub.w	r2, r2, #8192	; 0x2000
    3ddc:	cmp	r0, r2
    3dde:	bcs.n	3de6 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3de0:	str	r0, [r1, #0]
	}
	return prev;
    3de2:	mov	r0, r3
}
    3de4:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    3de6:	bl	4454 <__errno>
    3dea:	movs	r3, #12
    3dec:	str	r3, [r0, #0]
			return (void *)-1;
    3dee:	mov.w	r0, #4294967295
    3df2:	pop	{r3, pc}
    3df4:	.word	0x1fff0c80

00003df8 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    3df8:	ldr	r2, [pc, #32]	; (3e1c <kinetis_hsrun_disable+0x24>)
    3dfa:	ldrb	r3, [r2, #0]
    3dfc:	cmp	r3, #128	; 0x80
    3dfe:	beq.n	3e04 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3e00:	movs	r0, #0
}
    3e02:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3e04:	ldr	r1, [pc, #24]	; (3e20 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3e06:	ldr	r3, [pc, #28]	; (3e24 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3e08:	ldr	r0, [pc, #28]	; (3e28 <kinetis_hsrun_disable+0x30>)
    3e0a:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3e0c:	movs	r1, #0
    3e0e:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3e10:	ldrb	r3, [r2, #0]
    3e12:	cmp	r3, #128	; 0x80
    3e14:	beq.n	3e10 <kinetis_hsrun_disable+0x18>
		return 1;
    3e16:	movs	r0, #1
    3e18:	bx	lr
    3e1a:	nop
    3e1c:	.word	0x4007e003
    3e20:	.word	0x40048044
    3e24:	.word	0x4007e001
    3e28:	.word	0x22280000

00003e2c <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3e2c:	ldr	r2, [pc, #36]	; (3e54 <kinetis_hsrun_enable+0x28>)
    3e2e:	ldrb	r3, [r2, #0]
    3e30:	cmp	r3, #1
    3e32:	beq.n	3e38 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3e34:	movs	r0, #0
}
    3e36:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3e38:	add.w	r3, r3, #1073741824	; 0x40000000
    3e3c:	add.w	r3, r3, #516096	; 0x7e000
    3e40:	movs	r1, #96	; 0x60
    3e42:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3e44:	ldrb	r3, [r2, #0]
    3e46:	cmp	r3, #128	; 0x80
    3e48:	bne.n	3e44 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3e4a:	ldr	r3, [pc, #12]	; (3e58 <kinetis_hsrun_enable+0x2c>)
    3e4c:	ldr	r2, [pc, #12]	; (3e5c <kinetis_hsrun_enable+0x30>)
    3e4e:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3e50:	movs	r0, #1
    3e52:	bx	lr
    3e54:	.word	0x4007e003
    3e58:	.word	0x40048044
    3e5c:	.word	0x02060000

00003e60 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3e60:	ldr	r2, [pc, #20]	; (3e78 <serial_available+0x18>)
	tail = rx_buffer_tail;
    3e62:	ldr	r3, [pc, #24]	; (3e7c <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3e64:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3e66:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3e68:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3e6a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3e6c:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3e6e:	it	cc
    3e70:	addcc	r0, #64	; 0x40
    3e72:	subs	r0, r0, r3
}
    3e74:	bx	lr
    3e76:	nop
    3e78:	.word	0x1fff1b54
    3e7c:	.word	0x1fff1b55

00003e80 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3e80:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3e82:	ldr	r3, [pc, #224]	; (3f64 <uart0_status_isr+0xe4>)
    3e84:	ldrb	r2, [r3, #4]
    3e86:	tst.w	r2, #48	; 0x30
    3e8a:	beq.n	3ee6 <uart0_status_isr+0x66>
		__disable_irq();
    3e8c:	cpsid	i
		avail = UART0_RCFIFO;
    3e8e:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3e90:	and.w	r2, r1, #255	; 0xff
    3e94:	cmp	r1, #0
    3e96:	beq.n	3f14 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3e98:	cpsie	i
			head = rx_buffer_head;
    3e9a:	ldr	r7, [pc, #204]	; (3f68 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3e9c:	ldr	r1, [pc, #204]	; (3f6c <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3e9e:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3ea0:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3ea2:	ldr	r6, [pc, #204]	; (3f70 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3ea4:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3ea6:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3ea8:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    3eaa:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3eac:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3eae:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3eb0:	it	cs
    3eb2:	movcs	r3, #0
				if (newhead != tail) {
    3eb4:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3eb6:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3eba:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3ebc:	itt	ne
    3ebe:	strbne	r1, [r6, r3]
    3ec0:	movne	r0, r3
				}
			} while (--avail > 0);
    3ec2:	ands.w	r2, r2, #255	; 0xff
    3ec6:	bne.n	3eaa <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3ec8:	ldr	r3, [pc, #168]	; (3f74 <uart0_status_isr+0xf4>)
    3eca:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3ecc:	uxtb	r2, r0
    3ece:	strb	r2, [r7, #0]
			if (rts_pin) {
    3ed0:	cbz	r3, 3ee6 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3ed2:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3ed4:	itet	cc
    3ed6:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3eda:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3edc:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3ede:	cmp	r0, #39	; 0x27
    3ee0:	itt	gt
    3ee2:	movgt	r2, #1
    3ee4:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    3ee6:	ldr	r1, [pc, #124]	; (3f64 <uart0_status_isr+0xe4>)
    3ee8:	ldrb	r2, [r1, #3]
    3eea:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3eec:	lsls	r5, r2, #24
    3eee:	bmi.n	3f1e <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3ef0:	lsls	r2, r2, #25
    3ef2:	bpl.n	3f10 <uart0_status_isr+0x90>
    3ef4:	ldr	r3, [pc, #108]	; (3f64 <uart0_status_isr+0xe4>)
    3ef6:	ldrb	r3, [r3, #4]
    3ef8:	lsls	r3, r3, #25
    3efa:	bpl.n	3f10 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3efc:	ldr	r3, [pc, #120]	; (3f78 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3efe:	ldr	r1, [pc, #124]	; (3f7c <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3f00:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3f02:	movs	r2, #0
    3f04:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3f06:	cbz	r3, 3f0a <uart0_status_isr+0x8a>
    3f08:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3f0a:	ldr	r3, [pc, #88]	; (3f64 <uart0_status_isr+0xe4>)
    3f0c:	movs	r2, #60	; 0x3c
    3f0e:	strb	r2, [r3, #3]
	}
}
    3f10:	pop	{r4, r5, r6, r7}
    3f12:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3f14:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    3f16:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3f18:	strb	r2, [r3, #17]
			__enable_irq();
    3f1a:	cpsie	i
    3f1c:	b.n	3ee6 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3f1e:	ldrb	r3, [r1, #4]
    3f20:	lsls	r4, r3, #24
    3f22:	bpl.n	3ef0 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3f24:	ldr	r3, [pc, #88]	; (3f80 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    3f26:	ldr	r6, [pc, #92]	; (3f84 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3f28:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3f2a:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3f2c:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3f2e:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3f30:	cmp	r4, r3
    3f32:	beq.n	3f52 <uart0_status_isr+0xd2>
    3f34:	ldr	r5, [pc, #80]	; (3f88 <uart0_status_isr+0x108>)
    3f36:	b.n	3f3c <uart0_status_isr+0xbc>
    3f38:	cmp	r3, r4
    3f3a:	beq.n	3f52 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3f3c:	adds	r3, #1
    3f3e:	cmp	r3, #64	; 0x40
    3f40:	it	cs
    3f42:	movcs	r3, #0
			avail = UART0_S1;
    3f44:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3f46:	ldrb	r0, [r5, r3]
    3f48:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3f4a:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3f4c:	ldrb	r0, [r1, #20]
    3f4e:	cmp	r0, #7
    3f50:	bls.n	3f38 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    3f52:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3f54:	ldr	r1, [pc, #12]	; (3f64 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    3f56:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3f58:	ldrb	r3, [r1, #4]
    3f5a:	lsls	r0, r3, #24
    3f5c:	itt	mi
    3f5e:	movmi	r3, #124	; 0x7c
    3f60:	strbmi	r3, [r1, #3]
    3f62:	b.n	3ef0 <uart0_status_isr+0x70>
    3f64:	.word	0x4006a000
    3f68:	.word	0x1fff1b54
    3f6c:	.word	0x1fff1b55
    3f70:	.word	0x1fff1b98
    3f74:	.word	0x1fff1b50
    3f78:	.word	0x1fff1bdc
    3f7c:	.word	0x1fff1bd8
    3f80:	.word	0x1fff1be0
    3f84:	.word	0x1fff1bd9
    3f88:	.word	0x1fff1b58

00003f8c <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3f8c:	ldr	r2, [pc, #20]	; (3fa4 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    3f8e:	ldr	r3, [pc, #24]	; (3fa8 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3f90:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3f92:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3f94:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3f96:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3f98:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    3f9a:	it	cc
    3f9c:	addcc	r0, #64	; 0x40
    3f9e:	subs	r0, r0, r3
}
    3fa0:	bx	lr
    3fa2:	nop
    3fa4:	.word	0x1fff1be8
    3fa8:	.word	0x1fff1be9

00003fac <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    3fac:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    3fae:	ldr	r3, [pc, #176]	; (4060 <lpuart0_status_isr+0xb4>)
    3fb0:	ldr	r2, [r3, #4]
    3fb2:	lsls	r4, r2, #10
    3fb4:	bpl.n	3ff6 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3fb6:	ldr	r0, [pc, #172]	; (4064 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    3fb8:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    3fba:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3fbc:	ldr	r1, [pc, #168]	; (4068 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3fbe:	adds	r3, #1
    3fc0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3fc2:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3fc4:	it	gt
    3fc6:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3fc8:	cmp	r3, r1
    3fca:	beq.n	3fd6 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3fcc:	ldr	r4, [pc, #156]	; (406c <lpuart0_status_isr+0xc0>)
    3fce:	uxtb	r2, r2
			rx_buffer_head = head;
    3fd0:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3fd2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3fd4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3fd6:	ldr	r2, [pc, #152]	; (4070 <lpuart0_status_isr+0xc4>)
    3fd8:	ldr	r1, [r2, #0]
    3fda:	cbz	r1, 3ff6 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3fdc:	ldr	r2, [pc, #148]	; (4074 <lpuart0_status_isr+0xc8>)
    3fde:	ldrb	r2, [r2, #0]
    3fe0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3fe2:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3fe4:	itet	cc
    3fe6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3fea:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3fec:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3fee:	cmp	r3, #39	; 0x27
    3ff0:	itt	gt
    3ff2:	movgt	r3, #1
    3ff4:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    3ff6:	ldr	r2, [pc, #104]	; (4060 <lpuart0_status_isr+0xb4>)
    3ff8:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    3ffa:	lsls	r0, r3, #8
    3ffc:	bpl.n	4004 <lpuart0_status_isr+0x58>
    3ffe:	ldr	r2, [r2, #4]
    4000:	lsls	r1, r2, #8
    4002:	bmi.n	4028 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    4004:	lsls	r2, r3, #9
    4006:	bpl.n	4024 <lpuart0_status_isr+0x78>
    4008:	ldr	r3, [pc, #84]	; (4060 <lpuart0_status_isr+0xb4>)
    400a:	ldr	r3, [r3, #4]
    400c:	lsls	r3, r3, #9
    400e:	bpl.n	4024 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4010:	ldr	r3, [pc, #100]	; (4078 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    4012:	ldr	r1, [pc, #104]	; (407c <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    4014:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    4016:	movs	r2, #0
    4018:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    401a:	cbz	r3, 401e <lpuart0_status_isr+0x72>
    401c:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    401e:	ldr	r3, [pc, #96]	; (4080 <lpuart0_status_isr+0xd4>)
    4020:	movs	r2, #0
    4022:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    4024:	pop	{r4, r5}
    4026:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    4028:	ldr	r2, [pc, #88]	; (4084 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    402a:	ldr	r1, [pc, #72]	; (4074 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    402c:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    402e:	ldrb	r2, [r1, #0]
    4030:	uxtb	r2, r2
		if (head == tail) {
    4032:	cmp	r0, r2
    4034:	beq.n	4052 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    4036:	adds	r2, #1
    4038:	cmp	r2, #39	; 0x27
    403a:	itt	hi
    403c:	movhi	r0, #0
    403e:	movhi	r2, r0
			n = tx_buffer[tail];
    4040:	ldr	r5, [pc, #68]	; (4088 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    4042:	ldr	r4, [pc, #28]	; (4060 <lpuart0_status_isr+0xb4>)
    4044:	it	ls
    4046:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4048:	ldrb	r2, [r5, r2]
    404a:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    404c:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    404e:	strb	r0, [r1, #0]
    4050:	b.n	4004 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    4052:	ldr	r0, [pc, #56]	; (408c <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4054:	ldr	r2, [pc, #40]	; (4080 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    4056:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4058:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    405a:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    405c:	str	r1, [r2, #0]
    405e:	b.n	4004 <lpuart0_status_isr+0x58>
    4060:	.word	0x400c4000
    4064:	.word	0x1fff1be8
    4068:	.word	0x1fff1be9
    406c:	.word	0x1fff1c14
    4070:	.word	0x1fff1be4
    4074:	.word	0x1fff1c55
    4078:	.word	0x1fff1c58
    407c:	.word	0x1fff1c54
    4080:	.word	0x43880158
    4084:	.word	0x1fff1c5c
    4088:	.word	0x1fff1bec
    408c:	.word	0x4388015c

00004090 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    4090:	push	{r4, lr}
    4092:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    4094:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    4096:	bl	3df8 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    409a:	ldr	r2, [pc, #96]	; (40fc <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    409c:	ldr	r3, [pc, #96]	; (4100 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    409e:	ldr	r1, [pc, #100]	; (4104 <usb_init_serialnumber+0x74>)
    40a0:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    40a2:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    40a4:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    40a6:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    40a8:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    40aa:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    40ac:	ldrb	r3, [r2, #0]
    40ae:	lsls	r3, r3, #24
    40b0:	bpl.n	40ac <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    40b2:	ldr	r3, [pc, #84]	; (4108 <usb_init_serialnumber+0x78>)
    40b4:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    40b6:	bl	3e2c <kinetis_hsrun_enable>
#endif
	__enable_irq();
    40ba:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    40bc:	ldr	r3, [pc, #76]	; (410c <usb_init_serialnumber+0x7c>)
    40be:	cmp	r4, r3
    40c0:	itt	ls
    40c2:	addls.w	r4, r4, r4, lsl #2
    40c6:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    40c8:	mov	r0, r4
    40ca:	ldr	r4, [pc, #68]	; (4110 <usb_init_serialnumber+0x80>)
    40cc:	add	r1, sp, #4
    40ce:	movs	r2, #10
    40d0:	bl	4114 <ultoa>
    40d4:	add	r1, sp, #4
    40d6:	mov	r0, r4
	for (i=0; i<10; i++) {
    40d8:	movs	r3, #0
		char c = buf[i];
    40da:	ldrb.w	r2, [r1], #1
    40de:	adds	r3, #1
		if (!c) break;
    40e0:	cbz	r2, 40f2 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    40e2:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    40e4:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    40e8:	bne.n	40da <usb_init_serialnumber+0x4a>
    40ea:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    40ec:	strb	r3, [r4, #0]
}
    40ee:	add	sp, #16
    40f0:	pop	{r4, pc}
    40f2:	lsls	r3, r3, #1
    40f4:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    40f6:	strb	r3, [r4, #0]
}
    40f8:	add	sp, #16
    40fa:	pop	{r4, pc}
    40fc:	.word	0x40020004
    4100:	.word	0x40020000
    4104:	.word	0x41070000
    4108:	.word	0x4002000c
    410c:	.word	0x0098967f
    4110:	.word	0x1fff0d64

00004114 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    4114:	push	{r4, r5, r6, r7}
    4116:	subs	r5, r1, #1
    4118:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    411a:	movs	r4, #0
    411c:	b.n	4120 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    411e:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    4120:	udiv	r3, r0, r2
    4124:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4128:	cmp	r0, #9
    412a:	add.w	r7, r0, #48	; 0x30
    412e:	itet	hi
    4130:	addhi	r0, #55	; 0x37
    4132:	uxtbls	r0, r7
    4134:	uxtbhi	r0, r0
    4136:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    413a:	mov	r0, r3
    413c:	cmp	r3, #0
    413e:	bne.n	411e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    4140:	adds	r2, r1, r4
    4142:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    4144:	cbz	r4, 415a <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    4146:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    4148:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    414c:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    414e:	adds	r3, #1
    4150:	subs	r0, r4, r3
    4152:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    4154:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4158:	blt.n	4146 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    415a:	mov	r0, r1
    415c:	pop	{r4, r5, r6, r7}
    415e:	bx	lr

00004160 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4160:	ldr	r2, [pc, #20]	; (4178 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    4162:	ldr	r3, [pc, #24]	; (417c <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4164:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4166:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4168:	uxtb	r0, r0
	tail = rx_buffer_tail;
    416a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    416c:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    416e:	it	cc
    4170:	addcc	r0, #64	; 0x40
    4172:	subs	r0, r0, r3
}
    4174:	bx	lr
    4176:	nop
    4178:	.word	0x1fff1c64
    417c:	.word	0x1fff1c65

00004180 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    4180:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    4182:	ldr	r3, [pc, #172]	; (4230 <uart2_status_isr+0xb0>)
    4184:	ldrb	r2, [r3, #4]
    4186:	lsls	r4, r2, #26
    4188:	bpl.n	41ca <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    418a:	ldr	r0, [pc, #168]	; (4234 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    418c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    418e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4190:	ldr	r1, [pc, #164]	; (4238 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4192:	adds	r3, #1
    4194:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4196:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4198:	it	gt
    419a:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    419c:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    419e:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    41a0:	beq.n	41aa <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    41a2:	ldr	r4, [pc, #152]	; (423c <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    41a4:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    41a6:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    41a8:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    41aa:	ldr	r2, [pc, #148]	; (4240 <uart2_status_isr+0xc0>)
    41ac:	ldr	r1, [r2, #0]
    41ae:	cbz	r1, 41ca <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    41b0:	ldr	r2, [pc, #144]	; (4244 <uart2_status_isr+0xc4>)
    41b2:	ldrb	r2, [r2, #0]
    41b4:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    41b6:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    41b8:	itet	cc
    41ba:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    41be:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    41c0:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    41c2:	cmp	r3, #39	; 0x27
    41c4:	itt	gt
    41c6:	movgt	r3, #1
    41c8:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    41ca:	ldr	r2, [pc, #100]	; (4230 <uart2_status_isr+0xb0>)
    41cc:	ldrb	r3, [r2, #3]
    41ce:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    41d0:	lsls	r0, r3, #24
    41d2:	bmi.n	41f8 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    41d4:	lsls	r2, r3, #25
    41d6:	bpl.n	41f4 <uart2_status_isr+0x74>
    41d8:	ldr	r3, [pc, #84]	; (4230 <uart2_status_isr+0xb0>)
    41da:	ldrb	r3, [r3, #4]
    41dc:	lsls	r3, r3, #25
    41de:	bpl.n	41f4 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    41e0:	ldr	r3, [pc, #100]	; (4248 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    41e2:	ldr	r1, [pc, #104]	; (424c <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    41e4:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    41e6:	movs	r2, #0
    41e8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    41ea:	cbz	r3, 41ee <uart2_status_isr+0x6e>
    41ec:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    41ee:	ldr	r3, [pc, #64]	; (4230 <uart2_status_isr+0xb0>)
    41f0:	movs	r2, #44	; 0x2c
    41f2:	strb	r2, [r3, #3]
	}
}
    41f4:	pop	{r4, r5}
    41f6:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    41f8:	ldrb	r1, [r2, #4]
    41fa:	lsls	r1, r1, #24
    41fc:	bpl.n	41d4 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    41fe:	ldr	r1, [pc, #80]	; (4250 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    4200:	ldr	r0, [pc, #64]	; (4244 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4202:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4204:	ldrb	r1, [r0, #0]
    4206:	uxtb	r1, r1
		if (head == tail) {
    4208:	cmp	r4, r1
    420a:	beq.n	4228 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    420c:	adds	r2, r1, #1
    420e:	cmp	r2, #39	; 0x27
    4210:	itt	hi
    4212:	movhi	r1, #0
    4214:	movhi	r2, r1
			n = tx_buffer[tail];
    4216:	ldr	r5, [pc, #60]	; (4254 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4218:	ldr	r4, [pc, #20]	; (4230 <uart2_status_isr+0xb0>)
    421a:	it	ls
    421c:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    421e:	ldrb	r2, [r5, r2]
    4220:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4222:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4224:	strb	r1, [r0, #0]
    4226:	b.n	41d4 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    4228:	movs	r1, #108	; 0x6c
    422a:	strb	r1, [r2, #3]
    422c:	b.n	41d4 <uart2_status_isr+0x54>
    422e:	nop
    4230:	.word	0x4006c000
    4234:	.word	0x1fff1c64
    4238:	.word	0x1fff1c65
    423c:	.word	0x1fff1c90
    4240:	.word	0x1fff1c60
    4244:	.word	0x1fff1cd1
    4248:	.word	0x1fff1cd4
    424c:	.word	0x1fff1cd0
    4250:	.word	0x1fff1cd8
    4254:	.word	0x1fff1c68

00004258 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    4258:	bx	lr
    425a:	nop

0000425c <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    425c:	bx	lr
    425e:	nop

00004260 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    4260:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4262:	mrs	r2, PRIMASK
		__disable_irq();
    4266:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    4268:	ldrb	r3, [r0, #29]
    426a:	cbnz	r3, 427a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    426c:	ldrb	r1, [r0, #28]
    426e:	cmp	r1, #1
    4270:	beq.n	4284 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    4272:	cmp	r1, #3
    4274:	beq.n	4298 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    4276:	movs	r3, #1
    4278:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    427a:	cbnz	r2, 427e <EventResponder::triggerEventNotImmediate()+0x1e>
    427c:	cpsie	i
	}
	enableInterrupts(irq);
}
    427e:	ldr.w	r4, [sp], #4
    4282:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4284:	ldr	r4, [pc, #68]	; (42cc <EventResponder::triggerEventNotImmediate()+0x6c>)
    4286:	ldr	r1, [r4, #0]
    4288:	cbz	r1, 42b4 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    428a:	ldr	r1, [pc, #68]	; (42d0 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    428c:	str	r3, [r0, #20]
				_prev = lastYield;
    428e:	ldr	r3, [r1, #0]
    4290:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    4292:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    4294:	str	r0, [r3, #20]
    4296:	b.n	4276 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    4298:	ldr	r4, [pc, #56]	; (42d4 <EventResponder::triggerEventNotImmediate()+0x74>)
    429a:	ldr	r1, [r4, #0]
    429c:	cbz	r1, 42c0 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    429e:	ldr	r1, [pc, #56]	; (42d8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    42a0:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    42a2:	ldr	r3, [r1, #0]
    42a4:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    42a6:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    42a8:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    42aa:	ldr	r3, [pc, #48]	; (42dc <EventResponder::triggerEventNotImmediate()+0x7c>)
    42ac:	mov.w	r1, #268435456	; 0x10000000
    42b0:	str	r1, [r3, #0]
    42b2:	b.n	4276 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    42b4:	ldr	r3, [pc, #24]	; (42d0 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    42b6:	str	r1, [r0, #20]
				_prev = nullptr;
    42b8:	str	r1, [r0, #24]
				firstYield = this;
    42ba:	str	r0, [r4, #0]
				lastYield = this;
    42bc:	str	r0, [r3, #0]
    42be:	b.n	4276 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    42c0:	ldr	r3, [pc, #20]	; (42d8 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    42c2:	str	r1, [r0, #20]
				_prev = nullptr;
    42c4:	str	r1, [r0, #24]
				firstInterrupt = this;
    42c6:	str	r0, [r4, #0]
				lastInterrupt = this;
    42c8:	str	r0, [r3, #0]
    42ca:	b.n	42aa <EventResponder::triggerEventNotImmediate()+0x4a>
    42cc:	.word	0x1fff1cec
    42d0:	.word	0x1fff1ce8
    42d4:	.word	0x1fff1cdc
    42d8:	.word	0x1fff1ce0
    42dc:	.word	0xe000ed04

000042e0 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    42e0:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    42e2:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    42e4:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    42e6:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    42e8:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    42ea:	beq.n	42f4 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    42ec:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    42f0:	b.w	4260 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    42f4:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    42f6:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    42fa:	bx	r3

000042fc <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    42fc:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    42fe:	mrs	r2, PRIMASK
		__disable_irq();
    4302:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4304:	ldr	r4, [pc, #48]	; (4338 <EventResponder::runFromInterrupt()+0x3c>)
    4306:	ldr	r0, [r4, #0]
		if (first) {
    4308:	cbz	r0, 432c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    430a:	ldr	r6, [pc, #48]	; (433c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    430c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    430e:	ldr	r3, [r0, #20]
    4310:	str	r3, [r4, #0]
			if (firstInterrupt) {
    4312:	cbz	r3, 4332 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4314:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4316:	cbnz	r2, 431a <EventResponder::runFromInterrupt()+0x1e>
    4318:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    431a:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    431c:	ldr	r3, [r0, #8]
    431e:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4320:	mrs	r2, PRIMASK
		__disable_irq();
    4324:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4326:	ldr	r0, [r4, #0]
		if (first) {
    4328:	cmp	r0, #0
    432a:	bne.n	430e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    432c:	cbnz	r2, 4330 <EventResponder::runFromInterrupt()+0x34>
    432e:	cpsie	i
    4330:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4332:	str	r3, [r6, #0]
    4334:	b.n	4316 <EventResponder::runFromInterrupt()+0x1a>
    4336:	nop
    4338:	.word	0x1fff1cdc
    433c:	.word	0x1fff1ce0

00004340 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    4340:	b.w	42fc <EventResponder::runFromInterrupt()>

00004344 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    4344:	ldr	r2, [pc, #96]	; (43a8 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    4346:	push	{r4, r5}
	if (listActive == nullptr) {
    4348:	ldr	r4, [r2, #0]
    434a:	cmp	r4, #0
    434c:	beq.n	439e <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    434e:	ldr	r3, [r0, #0]
    4350:	ldr	r1, [r4, #0]
    4352:	cmp	r3, r1
    4354:	bcs.n	4374 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4356:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4358:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    435a:	str	r4, [r0, #8]
		_prev = nullptr;
    435c:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    435e:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4360:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    4362:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4364:	movs	r3, #2
    4366:	strb	r3, [r0, #20]
}
    4368:	pop	{r4, r5}
    436a:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    436c:	ldr	r1, [r2, #0]
    436e:	cmp	r3, r1
    4370:	mov	r4, r2
    4372:	bcc.n	4386 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4374:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    4376:	subs	r3, r3, r1
    4378:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    437a:	cmp	r2, #0
    437c:	bne.n	436c <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    437e:	str	r2, [r0, #8]
		_prev = timer;
    4380:	str	r4, [r0, #12]
		timer->_next = this;
    4382:	str	r0, [r4, #8]
    4384:	b.n	4364 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    4386:	ldr	r2, [r2, #12]
    4388:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    438a:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    438c:	str	r0, [r4, #12]
				_prev->_next = this;
    438e:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    4390:	subs	r3, r1, r3
				_state = TimerActive;
    4392:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    4394:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    4396:	str	r3, [r4, #0]
				_state = TimerActive;
    4398:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    439a:	pop	{r4, r5}
    439c:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    439e:	str	r4, [r0, #8]
		_prev = nullptr;
    43a0:	str	r4, [r0, #12]
		listActive = this;
    43a2:	str	r0, [r2, #0]
    43a4:	b.n	4364 <MillisTimer::addToActiveList()+0x20>
    43a6:	nop
    43a8:	.word	0x1fff1ce4

000043ac <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    43ac:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    43ae:	ldr	r6, [pc, #136]	; (4438 <MillisTimer::runFromTimer()+0x8c>)
    43b0:	ldr	r4, [r6, #0]
	while (timer) {
    43b2:	cbz	r4, 4400 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    43b4:	ldr	r3, [r4, #0]
    43b6:	cmp	r3, #0
    43b8:	bne.n	4430 <MillisTimer::runFromTimer()+0x84>
    43ba:	ldr	r7, [pc, #128]	; (443c <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    43bc:	mov	r5, r3
    43be:	b.n	43ca <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    43c0:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    43c2:	cbz	r4, 4400 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    43c4:	ldr	r3, [r4, #0]
    43c6:	cmp	r3, #0
    43c8:	bne.n	4430 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    43ca:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    43cc:	cbz	r3, 43d0 <MillisTimer::runFromTimer()+0x24>
    43ce:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    43d0:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    43d2:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    43d4:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    43d6:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    43d8:	ldr	r3, [r3, #0]
    43da:	cmp	r3, r7
    43dc:	bne.n	4422 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    43de:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    43e0:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    43e2:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    43e4:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    43e6:	beq.n	442a <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    43e8:	bl	4260 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    43ec:	ldr	r3, [r4, #4]
    43ee:	cmp	r3, #0
    43f0:	beq.n	43c0 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    43f2:	str	r3, [r4, #0]
				timer->addToActiveList();
    43f4:	mov	r0, r4
    43f6:	bl	4344 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    43fa:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    43fc:	cmp	r4, #0
    43fe:	bne.n	43c4 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4400:	mrs	r3, PRIMASK
		__disable_irq();
    4404:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4406:	ldr	r2, [pc, #56]	; (4440 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4408:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    440a:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    440c:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    440e:	cbnz	r3, 4412 <MillisTimer::runFromTimer()+0x66>
    4410:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    4412:	cbz	r0, 4420 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4414:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    4416:	bl	4344 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    441a:	mov	r0, r4
    441c:	cmp	r0, #0
    441e:	bne.n	4414 <MillisTimer::runFromTimer()+0x68>
    4420:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4422:	mov	r2, r4
    4424:	movs	r1, #0
    4426:	blx	r3
    4428:	b.n	43ec <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    442a:	ldr	r3, [r0, #8]
    442c:	blx	r3
    442e:	b.n	43ec <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    4430:	subs	r3, #1
    4432:	str	r3, [r4, #0]
			break;
    4434:	b.n	4400 <MillisTimer::runFromTimer()+0x54>
    4436:	nop
    4438:	.word	0x1fff1ce4
    443c:	.word	0x000042e1
    4440:	.word	0x1fff1cf4

00004444 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    4444:	ldr	r2, [pc, #8]	; (4450 <systick_isr+0xc>)
    4446:	ldr	r3, [r2, #0]
    4448:	adds	r3, #1
    444a:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    444c:	b.w	43ac <MillisTimer::runFromTimer()>
    4450:	.word	0x1fff187c

00004454 <__errno>:
    4454:	ldr	r3, [pc, #4]	; (445c <__errno+0x8>)
    4456:	ldr	r0, [r3, #0]
    4458:	bx	lr
    445a:	nop
    445c:	.word	0x1fff11a8

00004460 <__libc_init_array>:
    4460:	push	{r4, r5, r6, lr}
    4462:	ldr	r6, [pc, #60]	; (44a0 <__libc_init_array+0x40>)
    4464:	ldr	r5, [pc, #60]	; (44a4 <__libc_init_array+0x44>)
    4466:	subs	r6, r6, r5
    4468:	asrs	r6, r6, #2
    446a:	it	ne
    446c:	movne	r4, #0
    446e:	beq.n	447c <__libc_init_array+0x1c>
    4470:	adds	r4, #1
    4472:	ldr.w	r3, [r5], #4
    4476:	blx	r3
    4478:	cmp	r6, r4
    447a:	bne.n	4470 <__libc_init_array+0x10>
    447c:	ldr	r6, [pc, #40]	; (44a8 <__libc_init_array+0x48>)
    447e:	ldr	r5, [pc, #44]	; (44ac <__libc_init_array+0x4c>)
    4480:	subs	r6, r6, r5
    4482:	bl	50d8 <_init>
    4486:	asrs	r6, r6, #2
    4488:	it	ne
    448a:	movne	r4, #0
    448c:	beq.n	449c <__libc_init_array+0x3c>
    448e:	adds	r4, #1
    4490:	ldr.w	r3, [r5], #4
    4494:	blx	r3
    4496:	cmp	r6, r4
    4498:	bne.n	448e <__libc_init_array+0x2e>
    449a:	pop	{r4, r5, r6, pc}
    449c:	pop	{r4, r5, r6, pc}
    449e:	nop
    44a0:	.word	0x000050e4
    44a4:	.word	0x000050e4
    44a8:	.word	0x000050f0
    44ac:	.word	0x000050e4

000044b0 <malloc>:
    44b0:	ldr	r3, [pc, #8]	; (44bc <malloc+0xc>)
    44b2:	mov	r1, r0
    44b4:	ldr	r0, [r3, #0]
    44b6:	b.w	44c0 <_malloc_r>
    44ba:	nop
    44bc:	.word	0x1fff11a8

000044c0 <_malloc_r>:
    44c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44c4:	add.w	r5, r1, #11
    44c8:	cmp	r5, #22
    44ca:	sub	sp, #12
    44cc:	mov	r6, r0
    44ce:	bls.w	4610 <_malloc_r+0x150>
    44d2:	bics.w	r5, r5, #7
    44d6:	bmi.w	4658 <_malloc_r+0x198>
    44da:	cmp	r1, r5
    44dc:	bhi.w	4658 <_malloc_r+0x198>
    44e0:	bl	4a30 <__malloc_lock>
    44e4:	cmp.w	r5, #504	; 0x1f8
    44e8:	bcc.w	4a24 <_malloc_r+0x564>
    44ec:	lsrs	r3, r5, #9
    44ee:	beq.w	4666 <_malloc_r+0x1a6>
    44f2:	cmp	r3, #4
    44f4:	bhi.w	47fe <_malloc_r+0x33e>
    44f8:	lsrs	r0, r5, #6
    44fa:	add.w	lr, r0, #57	; 0x39
    44fe:	mov.w	r3, lr, lsl #1
    4502:	adds	r0, #56	; 0x38
    4504:	ldr	r7, [pc, #784]	; (4818 <_malloc_r+0x358>)
    4506:	add.w	r3, r7, r3, lsl #2
    450a:	sub.w	r1, r3, #8
    450e:	ldr	r4, [r3, #4]
    4510:	cmp	r1, r4
    4512:	bne.n	4524 <_malloc_r+0x64>
    4514:	b.n	4670 <_malloc_r+0x1b0>
    4516:	cmp	r2, #0
    4518:	bge.w	4674 <_malloc_r+0x1b4>
    451c:	ldr	r4, [r4, #12]
    451e:	cmp	r1, r4
    4520:	beq.w	4670 <_malloc_r+0x1b0>
    4524:	ldr	r3, [r4, #4]
    4526:	bic.w	r3, r3, #3
    452a:	subs	r2, r3, r5
    452c:	cmp	r2, #15
    452e:	ble.n	4516 <_malloc_r+0x56>
    4530:	ldr	r1, [pc, #740]	; (4818 <_malloc_r+0x358>)
    4532:	ldr	r4, [r7, #16]
    4534:	add.w	lr, r1, #8
    4538:	cmp	r4, lr
    453a:	beq.w	48a4 <_malloc_r+0x3e4>
    453e:	ldr	r3, [r4, #4]
    4540:	bic.w	r3, r3, #3
    4544:	subs	r2, r3, r5
    4546:	cmp	r2, #15
    4548:	bgt.w	487e <_malloc_r+0x3be>
    454c:	cmp	r2, #0
    454e:	str.w	lr, [r1, #20]
    4552:	str.w	lr, [r1, #16]
    4556:	bge.w	4696 <_malloc_r+0x1d6>
    455a:	cmp.w	r3, #512	; 0x200
    455e:	bcs.w	4830 <_malloc_r+0x370>
    4562:	lsrs	r3, r3, #3
    4564:	add.w	ip, r3, #1
    4568:	movs	r2, #1
    456a:	asrs	r3, r3, #2
    456c:	lsl.w	r3, r2, r3
    4570:	ldr	r2, [r1, #4]
    4572:	ldr.w	r8, [r1, ip, lsl #3]
    4576:	str.w	r8, [r4, #8]
    457a:	add.w	r9, r1, ip, lsl #3
    457e:	orrs	r2, r3
    4580:	sub.w	r3, r9, #8
    4584:	str	r3, [r4, #12]
    4586:	str	r2, [r1, #4]
    4588:	str.w	r4, [r1, ip, lsl #3]
    458c:	str.w	r4, [r8, #12]
    4590:	asrs	r3, r0, #2
    4592:	movs	r4, #1
    4594:	lsls	r4, r3
    4596:	cmp	r4, r2
    4598:	bhi.w	46b0 <_malloc_r+0x1f0>
    459c:	tst	r4, r2
    459e:	bne.n	45ae <_malloc_r+0xee>
    45a0:	bic.w	r0, r0, #3
    45a4:	lsls	r4, r4, #1
    45a6:	tst	r4, r2
    45a8:	add.w	r0, r0, #4
    45ac:	beq.n	45a4 <_malloc_r+0xe4>
    45ae:	add.w	r9, r7, r0, lsl #3
    45b2:	mov	ip, r9
    45b4:	mov	r8, r0
    45b6:	ldr.w	r1, [ip, #12]
    45ba:	cmp	ip, r1
    45bc:	bne.n	45ce <_malloc_r+0x10e>
    45be:	b.n	48a8 <_malloc_r+0x3e8>
    45c0:	cmp	r2, #0
    45c2:	bge.w	48c8 <_malloc_r+0x408>
    45c6:	ldr	r1, [r1, #12]
    45c8:	cmp	ip, r1
    45ca:	beq.w	48a8 <_malloc_r+0x3e8>
    45ce:	ldr	r3, [r1, #4]
    45d0:	bic.w	r3, r3, #3
    45d4:	subs	r2, r3, r5
    45d6:	cmp	r2, #15
    45d8:	ble.n	45c0 <_malloc_r+0x100>
    45da:	mov	r4, r1
    45dc:	ldr.w	ip, [r1, #12]
    45e0:	ldr.w	r8, [r4, #8]!
    45e4:	adds	r3, r1, r5
    45e6:	orr.w	r5, r5, #1
    45ea:	str	r5, [r1, #4]
    45ec:	orr.w	r1, r2, #1
    45f0:	str.w	ip, [r8, #12]
    45f4:	mov	r0, r6
    45f6:	str.w	r8, [ip, #8]
    45fa:	str	r3, [r7, #20]
    45fc:	str	r3, [r7, #16]
    45fe:	str.w	lr, [r3, #12]
    4602:	str.w	lr, [r3, #8]
    4606:	str	r1, [r3, #4]
    4608:	str	r2, [r3, r2]
    460a:	bl	4a34 <__malloc_unlock>
    460e:	b.n	4650 <_malloc_r+0x190>
    4610:	cmp	r1, #16
    4612:	bhi.n	4658 <_malloc_r+0x198>
    4614:	bl	4a30 <__malloc_lock>
    4618:	movs	r5, #16
    461a:	movs	r3, #6
    461c:	movs	r0, #2
    461e:	ldr	r7, [pc, #504]	; (4818 <_malloc_r+0x358>)
    4620:	add.w	r3, r7, r3, lsl #2
    4624:	sub.w	r2, r3, #8
    4628:	ldr	r4, [r3, #4]
    462a:	cmp	r4, r2
    462c:	beq.w	48ba <_malloc_r+0x3fa>
    4630:	ldr	r3, [r4, #4]
    4632:	ldr	r1, [r4, #12]
    4634:	ldr	r5, [r4, #8]
    4636:	bic.w	r3, r3, #3
    463a:	add	r3, r4
    463c:	mov	r0, r6
    463e:	ldr	r2, [r3, #4]
    4640:	str	r1, [r5, #12]
    4642:	orr.w	r2, r2, #1
    4646:	str	r5, [r1, #8]
    4648:	str	r2, [r3, #4]
    464a:	bl	4a34 <__malloc_unlock>
    464e:	adds	r4, #8
    4650:	mov	r0, r4
    4652:	add	sp, #12
    4654:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4658:	movs	r4, #0
    465a:	movs	r3, #12
    465c:	mov	r0, r4
    465e:	str	r3, [r6, #0]
    4660:	add	sp, #12
    4662:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4666:	movs	r3, #128	; 0x80
    4668:	mov.w	lr, #64	; 0x40
    466c:	movs	r0, #63	; 0x3f
    466e:	b.n	4504 <_malloc_r+0x44>
    4670:	mov	r0, lr
    4672:	b.n	4530 <_malloc_r+0x70>
    4674:	add	r3, r4
    4676:	ldr	r1, [r4, #12]
    4678:	ldr	r2, [r3, #4]
    467a:	ldr	r5, [r4, #8]
    467c:	orr.w	r2, r2, #1
    4680:	str	r1, [r5, #12]
    4682:	mov	r0, r6
    4684:	str	r5, [r1, #8]
    4686:	str	r2, [r3, #4]
    4688:	bl	4a34 <__malloc_unlock>
    468c:	adds	r4, #8
    468e:	mov	r0, r4
    4690:	add	sp, #12
    4692:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4696:	add	r3, r4
    4698:	mov	r0, r6
    469a:	ldr	r2, [r3, #4]
    469c:	orr.w	r2, r2, #1
    46a0:	str	r2, [r3, #4]
    46a2:	bl	4a34 <__malloc_unlock>
    46a6:	adds	r4, #8
    46a8:	mov	r0, r4
    46aa:	add	sp, #12
    46ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46b0:	ldr	r4, [r7, #8]
    46b2:	ldr	r3, [r4, #4]
    46b4:	bic.w	r8, r3, #3
    46b8:	cmp	r8, r5
    46ba:	bcc.n	46c6 <_malloc_r+0x206>
    46bc:	rsb	r3, r5, r8
    46c0:	cmp	r3, #15
    46c2:	bgt.w	47de <_malloc_r+0x31e>
    46c6:	ldr	r3, [pc, #340]	; (481c <_malloc_r+0x35c>)
    46c8:	ldr.w	r9, [pc, #352]	; 482c <_malloc_r+0x36c>
    46cc:	ldr	r2, [r3, #0]
    46ce:	ldr.w	r3, [r9]
    46d2:	adds	r3, #1
    46d4:	add	r2, r5
    46d6:	add.w	sl, r4, r8
    46da:	beq.w	499e <_malloc_r+0x4de>
    46de:	add.w	r2, r2, #4096	; 0x1000
    46e2:	adds	r2, #15
    46e4:	bic.w	r2, r2, #4080	; 0xff0
    46e8:	bic.w	r2, r2, #15
    46ec:	mov	r1, r2
    46ee:	mov	r0, r6
    46f0:	str	r2, [sp, #4]
    46f2:	bl	4a38 <_sbrk_r>
    46f6:	cmp.w	r0, #4294967295
    46fa:	mov	fp, r0
    46fc:	ldr	r2, [sp, #4]
    46fe:	beq.w	49b2 <_malloc_r+0x4f2>
    4702:	cmp	sl, r0
    4704:	bhi.w	4900 <_malloc_r+0x440>
    4708:	ldr	r3, [pc, #276]	; (4820 <_malloc_r+0x360>)
    470a:	ldr	r1, [r3, #0]
    470c:	cmp	sl, fp
    470e:	add	r1, r2
    4710:	str	r1, [r3, #0]
    4712:	beq.w	49bc <_malloc_r+0x4fc>
    4716:	ldr.w	r0, [r9]
    471a:	ldr.w	lr, [pc, #272]	; 482c <_malloc_r+0x36c>
    471e:	adds	r0, #1
    4720:	ittet	ne
    4722:	rsbne	sl, sl, fp
    4726:	addne	r1, sl
    4728:	streq.w	fp, [lr]
    472c:	strne	r1, [r3, #0]
    472e:	ands.w	r1, fp, #7
    4732:	beq.w	4964 <_malloc_r+0x4a4>
    4736:	rsb	r0, r1, #8
    473a:	rsb	r1, r1, #4096	; 0x1000
    473e:	add	fp, r0
    4740:	adds	r1, #8
    4742:	add	r2, fp
    4744:	ubfx	r2, r2, #0, #12
    4748:	rsb	r9, r2, r1
    474c:	mov	r1, r9
    474e:	mov	r0, r6
    4750:	str	r3, [sp, #4]
    4752:	bl	4a38 <_sbrk_r>
    4756:	adds	r3, r0, #1
    4758:	ldr	r3, [sp, #4]
    475a:	beq.w	49dc <_malloc_r+0x51c>
    475e:	rsb	r2, fp, r0
    4762:	add	r2, r9
    4764:	orr.w	r2, r2, #1
    4768:	ldr	r1, [r3, #0]
    476a:	str.w	fp, [r7, #8]
    476e:	add	r1, r9
    4770:	cmp	r4, r7
    4772:	str.w	r2, [fp, #4]
    4776:	str	r1, [r3, #0]
    4778:	ldr.w	r9, [pc, #164]	; 4820 <_malloc_r+0x360>
    477c:	beq.n	47ac <_malloc_r+0x2ec>
    477e:	cmp.w	r8, #15
    4782:	bls.w	4980 <_malloc_r+0x4c0>
    4786:	ldr	r2, [r4, #4]
    4788:	sub.w	r3, r8, #12
    478c:	bic.w	r3, r3, #7
    4790:	adds	r0, r4, r3
    4792:	and.w	r2, r2, #1
    4796:	mov.w	lr, #5
    479a:	orrs	r2, r3
    479c:	cmp	r3, #15
    479e:	str	r2, [r4, #4]
    47a0:	str.w	lr, [r0, #4]
    47a4:	str.w	lr, [r0, #8]
    47a8:	bhi.w	49e4 <_malloc_r+0x524>
    47ac:	ldr	r3, [pc, #116]	; (4824 <_malloc_r+0x364>)
    47ae:	ldr	r4, [r7, #8]
    47b0:	ldr	r2, [r3, #0]
    47b2:	cmp	r1, r2
    47b4:	it	hi
    47b6:	strhi	r1, [r3, #0]
    47b8:	ldr	r3, [pc, #108]	; (4828 <_malloc_r+0x368>)
    47ba:	ldr	r2, [r3, #0]
    47bc:	cmp	r1, r2
    47be:	ldr	r2, [r4, #4]
    47c0:	it	hi
    47c2:	strhi	r1, [r3, #0]
    47c4:	bic.w	r2, r2, #3
    47c8:	cmp	r5, r2
    47ca:	sub.w	r3, r2, r5
    47ce:	bhi.n	47d4 <_malloc_r+0x314>
    47d0:	cmp	r3, #15
    47d2:	bgt.n	47de <_malloc_r+0x31e>
    47d4:	mov	r0, r6
    47d6:	bl	4a34 <__malloc_unlock>
    47da:	movs	r4, #0
    47dc:	b.n	4650 <_malloc_r+0x190>
    47de:	adds	r2, r4, r5
    47e0:	orr.w	r3, r3, #1
    47e4:	orr.w	r5, r5, #1
    47e8:	str	r5, [r4, #4]
    47ea:	mov	r0, r6
    47ec:	str	r2, [r7, #8]
    47ee:	str	r3, [r2, #4]
    47f0:	bl	4a34 <__malloc_unlock>
    47f4:	adds	r4, #8
    47f6:	mov	r0, r4
    47f8:	add	sp, #12
    47fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    47fe:	cmp	r3, #20
    4800:	bls.n	48e6 <_malloc_r+0x426>
    4802:	cmp	r3, #84	; 0x54
    4804:	bhi.w	4950 <_malloc_r+0x490>
    4808:	lsrs	r0, r5, #12
    480a:	add.w	lr, r0, #111	; 0x6f
    480e:	mov.w	r3, lr, lsl #1
    4812:	adds	r0, #110	; 0x6e
    4814:	b.n	4504 <_malloc_r+0x44>
    4816:	nop
    4818:	.word	0x1fff11ac
    481c:	.word	0x1fff1d00
    4820:	.word	0x1fff1d04
    4824:	.word	0x1fff1cfc
    4828:	.word	0x1fff1cf8
    482c:	.word	0x1fff15b8
    4830:	lsrs	r2, r3, #9
    4832:	cmp	r2, #4
    4834:	bls.n	48f4 <_malloc_r+0x434>
    4836:	cmp	r2, #20
    4838:	bhi.w	49a2 <_malloc_r+0x4e2>
    483c:	add.w	r1, r2, #92	; 0x5c
    4840:	lsls	r1, r1, #1
    4842:	adds	r2, #91	; 0x5b
    4844:	add.w	ip, r7, r1, lsl #2
    4848:	ldr.w	r1, [r7, r1, lsl #2]
    484c:	ldr.w	r8, [pc, #476]	; 4a2c <_malloc_r+0x56c>
    4850:	sub.w	ip, ip, #8
    4854:	cmp	ip, r1
    4856:	beq.w	496a <_malloc_r+0x4aa>
    485a:	ldr	r2, [r1, #4]
    485c:	bic.w	r2, r2, #3
    4860:	cmp	r3, r2
    4862:	bcs.n	486a <_malloc_r+0x3aa>
    4864:	ldr	r1, [r1, #8]
    4866:	cmp	ip, r1
    4868:	bne.n	485a <_malloc_r+0x39a>
    486a:	ldr.w	ip, [r1, #12]
    486e:	ldr	r2, [r7, #4]
    4870:	str.w	ip, [r4, #12]
    4874:	str	r1, [r4, #8]
    4876:	str.w	r4, [ip, #8]
    487a:	str	r4, [r1, #12]
    487c:	b.n	4590 <_malloc_r+0xd0>
    487e:	adds	r3, r4, r5
    4880:	orr.w	r7, r2, #1
    4884:	orr.w	r5, r5, #1
    4888:	str	r5, [r4, #4]
    488a:	mov	r0, r6
    488c:	str	r3, [r1, #20]
    488e:	str	r3, [r1, #16]
    4890:	str.w	lr, [r3, #12]
    4894:	str.w	lr, [r3, #8]
    4898:	str	r7, [r3, #4]
    489a:	str	r2, [r3, r2]
    489c:	adds	r4, #8
    489e:	bl	4a34 <__malloc_unlock>
    48a2:	b.n	4650 <_malloc_r+0x190>
    48a4:	ldr	r2, [r1, #4]
    48a6:	b.n	4590 <_malloc_r+0xd0>
    48a8:	add.w	r8, r8, #1
    48ac:	tst.w	r8, #3
    48b0:	add.w	ip, ip, #8
    48b4:	bne.w	45b6 <_malloc_r+0xf6>
    48b8:	b.n	491c <_malloc_r+0x45c>
    48ba:	ldr	r4, [r3, #12]
    48bc:	cmp	r3, r4
    48be:	it	eq
    48c0:	addeq	r0, #2
    48c2:	beq.w	4530 <_malloc_r+0x70>
    48c6:	b.n	4630 <_malloc_r+0x170>
    48c8:	add	r3, r1
    48ca:	mov	r4, r1
    48cc:	ldr	r2, [r3, #4]
    48ce:	ldr	r1, [r1, #12]
    48d0:	ldr.w	r5, [r4, #8]!
    48d4:	orr.w	r2, r2, #1
    48d8:	str	r2, [r3, #4]
    48da:	mov	r0, r6
    48dc:	str	r1, [r5, #12]
    48de:	str	r5, [r1, #8]
    48e0:	bl	4a34 <__malloc_unlock>
    48e4:	b.n	4650 <_malloc_r+0x190>
    48e6:	add.w	lr, r3, #92	; 0x5c
    48ea:	add.w	r0, r3, #91	; 0x5b
    48ee:	mov.w	r3, lr, lsl #1
    48f2:	b.n	4504 <_malloc_r+0x44>
    48f4:	lsrs	r2, r3, #6
    48f6:	add.w	r1, r2, #57	; 0x39
    48fa:	lsls	r1, r1, #1
    48fc:	adds	r2, #56	; 0x38
    48fe:	b.n	4844 <_malloc_r+0x384>
    4900:	cmp	r4, r7
    4902:	ldr	r3, [pc, #296]	; (4a2c <_malloc_r+0x56c>)
    4904:	beq.w	4708 <_malloc_r+0x248>
    4908:	ldr	r4, [r3, #8]
    490a:	ldr	r2, [r4, #4]
    490c:	bic.w	r2, r2, #3
    4910:	b.n	47c8 <_malloc_r+0x308>
    4912:	ldr.w	r3, [r9], #-8
    4916:	cmp	r9, r3
    4918:	bne.w	4a20 <_malloc_r+0x560>
    491c:	tst.w	r0, #3
    4920:	add.w	r0, r0, #4294967295
    4924:	bne.n	4912 <_malloc_r+0x452>
    4926:	ldr	r3, [r7, #4]
    4928:	bic.w	r3, r3, r4
    492c:	str	r3, [r7, #4]
    492e:	lsls	r4, r4, #1
    4930:	cmp	r4, r3
    4932:	bhi.w	46b0 <_malloc_r+0x1f0>
    4936:	cmp	r4, #0
    4938:	beq.w	46b0 <_malloc_r+0x1f0>
    493c:	tst	r4, r3
    493e:	mov	r0, r8
    4940:	bne.w	45ae <_malloc_r+0xee>
    4944:	lsls	r4, r4, #1
    4946:	tst	r4, r3
    4948:	add.w	r0, r0, #4
    494c:	beq.n	4944 <_malloc_r+0x484>
    494e:	b.n	45ae <_malloc_r+0xee>
    4950:	cmp.w	r3, #340	; 0x154
    4954:	bhi.n	4988 <_malloc_r+0x4c8>
    4956:	lsrs	r0, r5, #15
    4958:	add.w	lr, r0, #120	; 0x78
    495c:	mov.w	r3, lr, lsl #1
    4960:	adds	r0, #119	; 0x77
    4962:	b.n	4504 <_malloc_r+0x44>
    4964:	mov.w	r1, #4096	; 0x1000
    4968:	b.n	4742 <_malloc_r+0x282>
    496a:	movs	r1, #1
    496c:	ldr.w	r3, [r8, #4]
    4970:	asrs	r2, r2, #2
    4972:	lsl.w	r2, r1, r2
    4976:	orrs	r2, r3
    4978:	str.w	r2, [r8, #4]
    497c:	mov	r1, ip
    497e:	b.n	4870 <_malloc_r+0x3b0>
    4980:	movs	r3, #1
    4982:	str.w	r3, [fp, #4]
    4986:	b.n	47d4 <_malloc_r+0x314>
    4988:	movw	r2, #1364	; 0x554
    498c:	cmp	r3, r2
    498e:	bhi.n	49d2 <_malloc_r+0x512>
    4990:	lsrs	r0, r5, #18
    4992:	add.w	lr, r0, #125	; 0x7d
    4996:	mov.w	r3, lr, lsl #1
    499a:	adds	r0, #124	; 0x7c
    499c:	b.n	4504 <_malloc_r+0x44>
    499e:	adds	r2, #16
    49a0:	b.n	46ec <_malloc_r+0x22c>
    49a2:	cmp	r2, #84	; 0x54
    49a4:	bhi.n	49f4 <_malloc_r+0x534>
    49a6:	lsrs	r2, r3, #12
    49a8:	add.w	r1, r2, #111	; 0x6f
    49ac:	lsls	r1, r1, #1
    49ae:	adds	r2, #110	; 0x6e
    49b0:	b.n	4844 <_malloc_r+0x384>
    49b2:	ldr	r4, [r7, #8]
    49b4:	ldr	r2, [r4, #4]
    49b6:	bic.w	r2, r2, #3
    49ba:	b.n	47c8 <_malloc_r+0x308>
    49bc:	ubfx	r0, sl, #0, #12
    49c0:	cmp	r0, #0
    49c2:	bne.w	4716 <_malloc_r+0x256>
    49c6:	add	r2, r8
    49c8:	ldr	r3, [r7, #8]
    49ca:	orr.w	r2, r2, #1
    49ce:	str	r2, [r3, #4]
    49d0:	b.n	47ac <_malloc_r+0x2ec>
    49d2:	movs	r3, #254	; 0xfe
    49d4:	mov.w	lr, #127	; 0x7f
    49d8:	movs	r0, #126	; 0x7e
    49da:	b.n	4504 <_malloc_r+0x44>
    49dc:	movs	r2, #1
    49de:	mov.w	r9, #0
    49e2:	b.n	4768 <_malloc_r+0x2a8>
    49e4:	add.w	r1, r4, #8
    49e8:	mov	r0, r6
    49ea:	bl	4b40 <_free_r>
    49ee:	ldr.w	r1, [r9]
    49f2:	b.n	47ac <_malloc_r+0x2ec>
    49f4:	cmp.w	r2, #340	; 0x154
    49f8:	bhi.n	4a06 <_malloc_r+0x546>
    49fa:	lsrs	r2, r3, #15
    49fc:	add.w	r1, r2, #120	; 0x78
    4a00:	lsls	r1, r1, #1
    4a02:	adds	r2, #119	; 0x77
    4a04:	b.n	4844 <_malloc_r+0x384>
    4a06:	movw	r1, #1364	; 0x554
    4a0a:	cmp	r2, r1
    4a0c:	bhi.n	4a1a <_malloc_r+0x55a>
    4a0e:	lsrs	r2, r3, #18
    4a10:	add.w	r1, r2, #125	; 0x7d
    4a14:	lsls	r1, r1, #1
    4a16:	adds	r2, #124	; 0x7c
    4a18:	b.n	4844 <_malloc_r+0x384>
    4a1a:	movs	r1, #254	; 0xfe
    4a1c:	movs	r2, #126	; 0x7e
    4a1e:	b.n	4844 <_malloc_r+0x384>
    4a20:	ldr	r3, [r7, #4]
    4a22:	b.n	492e <_malloc_r+0x46e>
    4a24:	lsrs	r0, r5, #3
    4a26:	adds	r3, r0, #1
    4a28:	lsls	r3, r3, #1
    4a2a:	b.n	461e <_malloc_r+0x15e>
    4a2c:	.word	0x1fff11ac

00004a30 <__malloc_lock>:
    4a30:	bx	lr
    4a32:	nop

00004a34 <__malloc_unlock>:
    4a34:	bx	lr
    4a36:	nop

00004a38 <_sbrk_r>:
    4a38:	push	{r3, r4, r5, lr}
    4a3a:	ldr	r4, [pc, #28]	; (4a58 <_sbrk_r+0x20>)
    4a3c:	movs	r3, #0
    4a3e:	mov	r5, r0
    4a40:	mov	r0, r1
    4a42:	str	r3, [r4, #0]
    4a44:	bl	3dcc <_sbrk>
    4a48:	adds	r3, r0, #1
    4a4a:	beq.n	4a4e <_sbrk_r+0x16>
    4a4c:	pop	{r3, r4, r5, pc}
    4a4e:	ldr	r3, [r4, #0]
    4a50:	cmp	r3, #0
    4a52:	beq.n	4a4c <_sbrk_r+0x14>
    4a54:	str	r3, [r5, #0]
    4a56:	pop	{r3, r4, r5, pc}
    4a58:	.word	0x1fff1e70

00004a5c <register_fini>:
    4a5c:	ldr	r3, [pc, #8]	; (4a68 <register_fini+0xc>)
    4a5e:	cbz	r3, 4a66 <register_fini+0xa>
    4a60:	ldr	r0, [pc, #8]	; (4a6c <register_fini+0x10>)
    4a62:	b.w	4a70 <atexit>
    4a66:	bx	lr
    4a68:	.word	0x00000000
    4a6c:	.word	0x00004a7d

00004a70 <atexit>:
    4a70:	movs	r3, #0
    4a72:	mov	r1, r0
    4a74:	mov	r2, r3
    4a76:	mov	r0, r3
    4a78:	b.w	4d10 <__register_exitproc>

00004a7c <__libc_fini_array>:
    4a7c:	push	{r3, r4, r5, lr}
    4a7e:	ldr	r5, [pc, #28]	; (4a9c <__libc_fini_array+0x20>)
    4a80:	ldr	r4, [pc, #28]	; (4aa0 <__libc_fini_array+0x24>)
    4a82:	subs	r4, r5, r4
    4a84:	asrs	r4, r4, #2
    4a86:	beq.n	4a94 <__libc_fini_array+0x18>
    4a88:	subs	r4, #1
    4a8a:	ldr.w	r3, [r5, #-4]!
    4a8e:	blx	r3
    4a90:	cmp	r4, #0
    4a92:	bne.n	4a88 <__libc_fini_array+0xc>
    4a94:	ldmia.w	sp!, {r3, r4, r5, lr}
    4a98:	b.w	50f0 <__init_array_end>
	...

00004aa4 <_malloc_trim_r>:
    4aa4:	push	{r3, r4, r5, r6, r7, lr}
    4aa6:	ldr	r7, [pc, #140]	; (4b34 <_malloc_trim_r+0x90>)
    4aa8:	mov	r4, r1
    4aaa:	mov	r6, r0
    4aac:	bl	4a30 <__malloc_lock>
    4ab0:	ldr	r3, [r7, #8]
    4ab2:	ldr	r5, [r3, #4]
    4ab4:	bic.w	r5, r5, #3
    4ab8:	subs	r1, r5, r4
    4aba:	addw	r1, r1, #4079	; 0xfef
    4abe:	bic.w	r1, r1, #4080	; 0xff0
    4ac2:	bic.w	r1, r1, #15
    4ac6:	sub.w	r4, r1, #4096	; 0x1000
    4aca:	cmp.w	r4, #4096	; 0x1000
    4ace:	blt.n	4ae0 <_malloc_trim_r+0x3c>
    4ad0:	movs	r1, #0
    4ad2:	mov	r0, r6
    4ad4:	bl	4a38 <_sbrk_r>
    4ad8:	ldr	r3, [r7, #8]
    4ada:	add	r3, r5
    4adc:	cmp	r0, r3
    4ade:	beq.n	4aea <_malloc_trim_r+0x46>
    4ae0:	mov	r0, r6
    4ae2:	bl	4a34 <__malloc_unlock>
    4ae6:	movs	r0, #0
    4ae8:	pop	{r3, r4, r5, r6, r7, pc}
    4aea:	negs	r1, r4
    4aec:	mov	r0, r6
    4aee:	bl	4a38 <_sbrk_r>
    4af2:	adds	r0, #1
    4af4:	beq.n	4b12 <_malloc_trim_r+0x6e>
    4af6:	ldr	r3, [pc, #64]	; (4b38 <_malloc_trim_r+0x94>)
    4af8:	ldr	r2, [r7, #8]
    4afa:	ldr	r1, [r3, #0]
    4afc:	subs	r5, r5, r4
    4afe:	orr.w	r5, r5, #1
    4b02:	mov	r0, r6
    4b04:	subs	r1, r1, r4
    4b06:	str	r5, [r2, #4]
    4b08:	str	r1, [r3, #0]
    4b0a:	bl	4a34 <__malloc_unlock>
    4b0e:	movs	r0, #1
    4b10:	pop	{r3, r4, r5, r6, r7, pc}
    4b12:	movs	r1, #0
    4b14:	mov	r0, r6
    4b16:	bl	4a38 <_sbrk_r>
    4b1a:	ldr	r2, [r7, #8]
    4b1c:	subs	r3, r0, r2
    4b1e:	cmp	r3, #15
    4b20:	ble.n	4ae0 <_malloc_trim_r+0x3c>
    4b22:	ldr	r4, [pc, #24]	; (4b3c <_malloc_trim_r+0x98>)
    4b24:	ldr	r1, [pc, #16]	; (4b38 <_malloc_trim_r+0x94>)
    4b26:	ldr	r4, [r4, #0]
    4b28:	orr.w	r3, r3, #1
    4b2c:	subs	r0, r0, r4
    4b2e:	str	r3, [r2, #4]
    4b30:	str	r0, [r1, #0]
    4b32:	b.n	4ae0 <_malloc_trim_r+0x3c>
    4b34:	.word	0x1fff11ac
    4b38:	.word	0x1fff1d04
    4b3c:	.word	0x1fff15b8

00004b40 <_free_r>:
    4b40:	cmp	r1, #0
    4b42:	beq.n	4bd0 <_free_r+0x90>
    4b44:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b48:	mov	r5, r1
    4b4a:	mov	r8, r0
    4b4c:	bl	4a30 <__malloc_lock>
    4b50:	ldr.w	r7, [r5, #-4]
    4b54:	ldr	r1, [pc, #424]	; (4d00 <_free_r+0x1c0>)
    4b56:	bic.w	r3, r7, #1
    4b5a:	sub.w	r4, r5, #8
    4b5e:	adds	r2, r4, r3
    4b60:	ldr	r6, [r1, #8]
    4b62:	ldr	r0, [r2, #4]
    4b64:	cmp	r2, r6
    4b66:	bic.w	r0, r0, #3
    4b6a:	beq.n	4c32 <_free_r+0xf2>
    4b6c:	lsls	r6, r7, #31
    4b6e:	str	r0, [r2, #4]
    4b70:	bmi.n	4b8a <_free_r+0x4a>
    4b72:	ldr.w	r7, [r5, #-8]
    4b76:	subs	r4, r4, r7
    4b78:	add.w	lr, r1, #8
    4b7c:	ldr	r5, [r4, #8]
    4b7e:	cmp	r5, lr
    4b80:	add	r3, r7
    4b82:	beq.n	4c64 <_free_r+0x124>
    4b84:	ldr	r7, [r4, #12]
    4b86:	str	r7, [r5, #12]
    4b88:	str	r5, [r7, #8]
    4b8a:	adds	r5, r2, r0
    4b8c:	ldr	r5, [r5, #4]
    4b8e:	lsls	r5, r5, #31
    4b90:	bpl.n	4c18 <_free_r+0xd8>
    4b92:	orr.w	r2, r3, #1
    4b96:	str	r2, [r4, #4]
    4b98:	str	r3, [r4, r3]
    4b9a:	cmp.w	r3, #512	; 0x200
    4b9e:	bcs.n	4bd2 <_free_r+0x92>
    4ba0:	lsrs	r3, r3, #3
    4ba2:	adds	r2, r3, #1
    4ba4:	ldr	r5, [r1, #4]
    4ba6:	ldr.w	r7, [r1, r2, lsl #3]
    4baa:	str	r7, [r4, #8]
    4bac:	movs	r0, #1
    4bae:	asrs	r3, r3, #2
    4bb0:	lsl.w	r3, r0, r3
    4bb4:	add.w	r0, r1, r2, lsl #3
    4bb8:	orrs	r5, r3
    4bba:	subs	r0, #8
    4bbc:	str	r0, [r4, #12]
    4bbe:	str	r5, [r1, #4]
    4bc0:	str.w	r4, [r1, r2, lsl #3]
    4bc4:	str	r4, [r7, #12]
    4bc6:	mov	r0, r8
    4bc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4bcc:	b.w	4a34 <__malloc_unlock>
    4bd0:	bx	lr
    4bd2:	lsrs	r2, r3, #9
    4bd4:	cmp	r2, #4
    4bd6:	bhi.n	4c80 <_free_r+0x140>
    4bd8:	lsrs	r2, r3, #6
    4bda:	add.w	r7, r2, #57	; 0x39
    4bde:	lsls	r7, r7, #1
    4be0:	add.w	r5, r2, #56	; 0x38
    4be4:	add.w	r0, r1, r7, lsl #2
    4be8:	ldr.w	r2, [r1, r7, lsl #2]
    4bec:	ldr	r1, [pc, #272]	; (4d00 <_free_r+0x1c0>)
    4bee:	subs	r0, #8
    4bf0:	cmp	r0, r2
    4bf2:	beq.n	4c90 <_free_r+0x150>
    4bf4:	ldr	r1, [r2, #4]
    4bf6:	bic.w	r1, r1, #3
    4bfa:	cmp	r3, r1
    4bfc:	bcs.n	4c04 <_free_r+0xc4>
    4bfe:	ldr	r2, [r2, #8]
    4c00:	cmp	r0, r2
    4c02:	bne.n	4bf4 <_free_r+0xb4>
    4c04:	ldr	r0, [r2, #12]
    4c06:	str	r0, [r4, #12]
    4c08:	str	r2, [r4, #8]
    4c0a:	str	r4, [r0, #8]
    4c0c:	str	r4, [r2, #12]
    4c0e:	mov	r0, r8
    4c10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4c14:	b.w	4a34 <__malloc_unlock>
    4c18:	ldr	r5, [r2, #8]
    4c1a:	ldr	r7, [pc, #232]	; (4d04 <_free_r+0x1c4>)
    4c1c:	cmp	r5, r7
    4c1e:	add	r3, r0
    4c20:	beq.n	4ca2 <_free_r+0x162>
    4c22:	ldr	r0, [r2, #12]
    4c24:	str	r0, [r5, #12]
    4c26:	orr.w	r2, r3, #1
    4c2a:	str	r5, [r0, #8]
    4c2c:	str	r2, [r4, #4]
    4c2e:	str	r3, [r4, r3]
    4c30:	b.n	4b9a <_free_r+0x5a>
    4c32:	lsls	r7, r7, #31
    4c34:	add	r3, r0
    4c36:	bmi.n	4c48 <_free_r+0x108>
    4c38:	ldr.w	r2, [r5, #-8]
    4c3c:	subs	r4, r4, r2
    4c3e:	add	r3, r2
    4c40:	ldr	r0, [r4, #8]
    4c42:	ldr	r2, [r4, #12]
    4c44:	str	r2, [r0, #12]
    4c46:	str	r0, [r2, #8]
    4c48:	ldr	r2, [pc, #188]	; (4d08 <_free_r+0x1c8>)
    4c4a:	ldr	r2, [r2, #0]
    4c4c:	orr.w	r0, r3, #1
    4c50:	cmp	r3, r2
    4c52:	str	r0, [r4, #4]
    4c54:	str	r4, [r1, #8]
    4c56:	bcc.n	4bc6 <_free_r+0x86>
    4c58:	ldr	r3, [pc, #176]	; (4d0c <_free_r+0x1cc>)
    4c5a:	mov	r0, r8
    4c5c:	ldr	r1, [r3, #0]
    4c5e:	bl	4aa4 <_malloc_trim_r>
    4c62:	b.n	4bc6 <_free_r+0x86>
    4c64:	adds	r1, r2, r0
    4c66:	ldr	r1, [r1, #4]
    4c68:	lsls	r1, r1, #31
    4c6a:	bmi.n	4cf6 <_free_r+0x1b6>
    4c6c:	ldr	r1, [r2, #8]
    4c6e:	ldr	r2, [r2, #12]
    4c70:	str	r2, [r1, #12]
    4c72:	add	r3, r0
    4c74:	orr.w	r0, r3, #1
    4c78:	str	r1, [r2, #8]
    4c7a:	str	r0, [r4, #4]
    4c7c:	str	r3, [r4, r3]
    4c7e:	b.n	4bc6 <_free_r+0x86>
    4c80:	cmp	r2, #20
    4c82:	bhi.n	4cb4 <_free_r+0x174>
    4c84:	add.w	r7, r2, #92	; 0x5c
    4c88:	lsls	r7, r7, #1
    4c8a:	add.w	r5, r2, #91	; 0x5b
    4c8e:	b.n	4be4 <_free_r+0xa4>
    4c90:	asrs	r2, r5, #2
    4c92:	ldr	r3, [r1, #4]
    4c94:	movs	r5, #1
    4c96:	lsl.w	r2, r5, r2
    4c9a:	orrs	r3, r2
    4c9c:	str	r3, [r1, #4]
    4c9e:	mov	r2, r0
    4ca0:	b.n	4c06 <_free_r+0xc6>
    4ca2:	orr.w	r2, r3, #1
    4ca6:	str	r4, [r1, #20]
    4ca8:	str	r4, [r1, #16]
    4caa:	str	r5, [r4, #12]
    4cac:	str	r5, [r4, #8]
    4cae:	str	r2, [r4, #4]
    4cb0:	str	r3, [r4, r3]
    4cb2:	b.n	4bc6 <_free_r+0x86>
    4cb4:	cmp	r2, #84	; 0x54
    4cb6:	bhi.n	4cc6 <_free_r+0x186>
    4cb8:	lsrs	r2, r3, #12
    4cba:	add.w	r7, r2, #111	; 0x6f
    4cbe:	lsls	r7, r7, #1
    4cc0:	add.w	r5, r2, #110	; 0x6e
    4cc4:	b.n	4be4 <_free_r+0xa4>
    4cc6:	cmp.w	r2, #340	; 0x154
    4cca:	bhi.n	4cda <_free_r+0x19a>
    4ccc:	lsrs	r2, r3, #15
    4cce:	add.w	r7, r2, #120	; 0x78
    4cd2:	lsls	r7, r7, #1
    4cd4:	add.w	r5, r2, #119	; 0x77
    4cd8:	b.n	4be4 <_free_r+0xa4>
    4cda:	movw	r0, #1364	; 0x554
    4cde:	cmp	r2, r0
    4ce0:	bhi.n	4cf0 <_free_r+0x1b0>
    4ce2:	lsrs	r2, r3, #18
    4ce4:	add.w	r7, r2, #125	; 0x7d
    4ce8:	lsls	r7, r7, #1
    4cea:	add.w	r5, r2, #124	; 0x7c
    4cee:	b.n	4be4 <_free_r+0xa4>
    4cf0:	movs	r7, #254	; 0xfe
    4cf2:	movs	r5, #126	; 0x7e
    4cf4:	b.n	4be4 <_free_r+0xa4>
    4cf6:	orr.w	r2, r3, #1
    4cfa:	str	r2, [r4, #4]
    4cfc:	str	r3, [r4, r3]
    4cfe:	b.n	4bc6 <_free_r+0x86>
    4d00:	.word	0x1fff11ac
    4d04:	.word	0x1fff11b4
    4d08:	.word	0x1fff15b4
    4d0c:	.word	0x1fff1d00

00004d10 <__register_exitproc>:
    4d10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d14:	ldr	r4, [pc, #148]	; (4dac <__register_exitproc+0x9c>)
    4d16:	ldr	r5, [r4, #0]
    4d18:	ldr.w	r4, [r5, #328]	; 0x148
    4d1c:	mov	r6, r0
    4d1e:	mov	r8, r1
    4d20:	mov	sl, r2
    4d22:	mov	r9, r3
    4d24:	cbz	r4, 4d98 <__register_exitproc+0x88>
    4d26:	ldr	r0, [r4, #4]
    4d28:	cmp	r0, #31
    4d2a:	bgt.n	4d5c <__register_exitproc+0x4c>
    4d2c:	adds	r3, r0, #1
    4d2e:	cbz	r6, 4d4e <__register_exitproc+0x3e>
    4d30:	add.w	r5, r4, r0, lsl #2
    4d34:	movs	r2, #1
    4d36:	str.w	sl, [r5, #136]	; 0x88
    4d3a:	ldr.w	r1, [r4, #392]	; 0x188
    4d3e:	lsls	r2, r0
    4d40:	orrs	r1, r2
    4d42:	cmp	r6, #2
    4d44:	str.w	r1, [r4, #392]	; 0x188
    4d48:	str.w	r9, [r5, #264]	; 0x108
    4d4c:	beq.n	4d8c <__register_exitproc+0x7c>
    4d4e:	adds	r0, #2
    4d50:	str	r3, [r4, #4]
    4d52:	str.w	r8, [r4, r0, lsl #2]
    4d56:	movs	r0, #0
    4d58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d5c:	ldr	r3, [pc, #80]	; (4db0 <__register_exitproc+0xa0>)
    4d5e:	cbz	r3, 4da2 <__register_exitproc+0x92>
    4d60:	mov.w	r0, #400	; 0x190
    4d64:	bl	44b0 <malloc>
    4d68:	mov	r4, r0
    4d6a:	cbz	r0, 4da2 <__register_exitproc+0x92>
    4d6c:	ldr.w	r3, [r5, #328]	; 0x148
    4d70:	movs	r7, #0
    4d72:	stmia.w	r0, {r3, r7}
    4d76:	str.w	r4, [r5, #328]	; 0x148
    4d7a:	mov	r0, r7
    4d7c:	movs	r3, #1
    4d7e:	str.w	r7, [r4, #392]	; 0x188
    4d82:	str.w	r7, [r4, #396]	; 0x18c
    4d86:	cmp	r6, #0
    4d88:	beq.n	4d4e <__register_exitproc+0x3e>
    4d8a:	b.n	4d30 <__register_exitproc+0x20>
    4d8c:	ldr.w	r1, [r4, #396]	; 0x18c
    4d90:	orrs	r2, r1
    4d92:	str.w	r2, [r4, #396]	; 0x18c
    4d96:	b.n	4d4e <__register_exitproc+0x3e>
    4d98:	add.w	r4, r5, #332	; 0x14c
    4d9c:	str.w	r4, [r5, #328]	; 0x148
    4da0:	b.n	4d26 <__register_exitproc+0x16>
    4da2:	mov.w	r0, #4294967295
    4da6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4daa:	nop
    4dac:	.word	0x000050d4
    4db0:	.word	0x000044b1
    4db4:	.word	0x67676f54
    4db8:	.word	0x676e696c
    4dbc:	.word	0x00000000
    4dc0:	.word	0x7370704f
    4dc4:	.word	0x6e61202c
    4dc8:	.word	0x6b6e7520
    4dcc:	.word	0x6e776f6e
    4dd0:	.word	0x44494d20
    4dd4:	.word	0x656d2049
    4dd8:	.word	0x67617373
    4ddc:	.word	0x79742065
    4de0:	.word	0x00216570
    4de4:	.word	0x4f4c4556
    4de8:	.word	0x59544943
    4dec:	.word	0x00000000
    4df0:	.word	0x45544f4e
    4df4:	.word	0x474e454c
    4df8:	.word	0x00004854
    4dfc:	.word	0x43544950
    4e00:	.word	0x00000048

00004e04 <pin2sc1a>:
    4e04:	................
    4e14:	................
    4e24:	................
    4e34:	................
    4e44:	........

00004e4c <digital_pin_to_info_PGM>:
    4e4c:	@..C@..@D..CD..@
    4e5c:	...C...@0..C0..@
    4e6c:	4..C4..@...C...@
    4e7c:	...C...@...C...@
    4e8c:	...C...@...C...@
    4e9c:	...C...@...C...@
    4eac:	...C...@...C...@
    4ebc:	...C...@...C...@
    4ecc:	...C...@...C...@
    4edc:	...C...@...C...@
    4eec:	...C...@...C...@
    4efc:	...C...@...C...@
    4f0c:	h .Ch..@...C...@
    4f1c:	8..C8..@<..C<..@
    4f2c:	@..C@..@H..CH..@
    4f3c:	L..CL..@(..C(..@
    4f4c:	,..C,..@` .C`..@
    4f5c:	d .Cd..@ ..C ..@
    4f6c:	$..C$..@(..C(..@
    4f7c:	,..C,..@D..CD..@
    4f8c:	p..Cp..@t..Ct..@
    4f9c:	h..Ch..@P..CP..@
    4fac:	X..CX..@\..C\..@
    4fbc:	T..CT..@ ..C ..@
    4fcc:	$..C$..@...C...@
    4fdc:	...C...@8..C8..@
    4fec:	4..C4..@0..C0..@
    4ffc:	<..C<..@,..C,..@
    500c:	( .C(..@, .C,..@
    501c:	. .C...@. .C...@
    502c:	. .C...@. .C...@
    503c:	. .C...@. .C...@

0000504c <vtable for usb_serial_class>:
	...
    5054:	.:...:...9...9..
    5064:	.9...9...9...9..
    5074:	....

00005078 <usb_endpoint_config_table>:
    5078:	........

00005080 <usb_descriptor_list>:
    5080:	................
    5090:	............`...
    50a0:	................
    50b0:	....H...........
    50c0:	d...............
    50d0:	....

000050d4 <_global_impure_ptr>:
    50d4:	....

000050d8 <_init>:
    50d8:	push	{r3, r4, r5, r6, r7, lr}
    50da:	nop
    50dc:	pop	{r3, r4, r5, r6, r7}
    50de:	pop	{r3}
    50e0:	mov	lr, r3
    50e2:	bx	lr

000050e4 <__init_array_start>:
    50e4:	.word	0x00004a5d

000050e8 <__frame_dummy_init_array_entry>:
    50e8:	5.......

Disassembly of section .fini:

000050f0 <_fini>:
    50f0:	push	{r3, r4, r5, r6, r7, lr}
    50f2:	nop

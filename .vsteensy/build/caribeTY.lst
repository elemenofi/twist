
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004af0 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15bc l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
000037c8 l     F .text	0000000c startup_default_early_hook
000037d4 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15bc l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15c0 l       .bss	00000000 object.8610
00004ae8 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
0000156c l     F .text	00000274 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff1865 l     O .bss	00000001 tx_noautoflush
1fff1868 l     O .bss	00000004 tx_packet
1fff186c l     O .bss	00000001 transmit_previous_timeout
1fff1870 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00001ab4 l     F .text	00000144 wait_for_cal
1fff1875 l     O .bss	00000001 analog_right_shift
1fff1876 l     O .bss	00000001 calibrating
00004804 l     O .text	00000048 pin2sc1a
1fff0c68 l     O .data	00000001 analog_config_bits
1fff1877 l     O .bss	00000001 analogReadBusyADC1
1fff1878 l     O .bss	00000001 analogReadBusyADC0
1fff1879 l     O .bss	00000001 analog_reference_internal
1fff0c69 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00001dd4 l     F .text	0000004c digitalWrite.part.1
00001e20 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002100 l     F .text	00000048 sysex_byte
1fff1894 l     O .bss	00000001 tx_noautoflush
1fff18c0 l     O .bss	00000004 tx_packet
1fff18c4 l     O .bss	00000001 transmit_previous_timeout
1fff18cc l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c6c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff18e0 l     O .bss	00000004 ep0_tx_ptr
1fff18e4 l     O .bss	00000014 rx_last
1fff18f8 l     O .bss	00000002 ep0_tx_len
1fff18fc l     O .bss	00000040 ep0_rx0_buf
1fff193c l     O .bss	00000014 rx_first
1fff1950 l     O .bss	00000001 ep0_tx_data_toggle
1fff1954 l     O .bss	00000040 ep0_rx1_buf
1fff1994 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff19a8 l     O .bss	00000014 tx_last
1fff19bc l     O .bss	00000008 setup
1fff19c4 l     O .bss	00000001 ep0_tx_bdt_bank
1fff19c8 l     O .bss	00000008 reply_buffer
1fff19d4 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff19d9 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff19dc l     O .bss	00000004 rts_pin
1fff19e0 l     O .bss	00000001 rx_buffer_head
1fff19e1 l     O .bss	00000001 rx_buffer_tail
1fff19e4 l     O .bss	00000028 tx_buffer
1fff1a0c l     O .bss	00000040 rx_buffer
1fff1a4c l     O .bss	00000001 transmitting
1fff1a4d l     O .bss	00000001 tx_buffer_tail
1fff1a50 l     O .bss	00000004 transmit_pin
1fff1a54 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1a58 l     O .bss	00000004 rts_pin
1fff1a5c l     O .bss	00000001 transmitting
1fff1a5d l     O .bss	00000001 rx_buffer_tail
1fff1a60 l     O .bss	00000028 tx_buffer
1fff1a88 l     O .bss	00000040 rx_buffer
1fff1ac8 l     O .bss	00000001 rx_buffer_head
1fff1ac9 l     O .bss	00000001 tx_buffer_tail
1fff1acc l     O .bss	00000004 transmit_pin
1fff1ad0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1ad4 l     O .bss	00000004 rts_pin
1fff1ad8 l     O .bss	00000001 rx_buffer_head
1fff1ad9 l     O .bss	00000001 rx_buffer_tail
1fff1adc l     O .bss	00000028 tx_buffer
1fff1b04 l     O .bss	00000040 rx_buffer
1fff1b44 l     O .bss	00000001 transmitting
1fff1b45 l     O .bss	00000001 tx_buffer_tail
1fff1b48 l     O .bss	00000004 transmit_pin
1fff1b4c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1b50 l     O .bss	00000004 rts_pin
1fff1b54 l     O .bss	00000001 rx_buffer_head
1fff1b55 l     O .bss	00000001 rx_buffer_tail
1fff1b58 l     O .bss	00000040 tx_buffer
1fff1b98 l     O .bss	00000040 rx_buffer
1fff1bd8 l     O .bss	00000001 transmitting
1fff1bd9 l     O .bss	00000001 tx_buffer_tail
1fff1bdc l     O .bss	00000004 transmit_pin
1fff1be0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1be4 l     O .bss	00000004 rts_pin
1fff1be8 l     O .bss	00000001 rx_buffer_head
1fff1be9 l     O .bss	00000001 rx_buffer_tail
1fff1bec l     O .bss	00000028 tx_buffer
1fff1c14 l     O .bss	00000040 rx_buffer
1fff1c54 l     O .bss	00000001 transmitting
1fff1c55 l     O .bss	00000001 tx_buffer_tail
1fff1c58 l     O .bss	00000004 transmit_pin
1fff1c5c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c84 l     O .data	00000012 device_descriptor
1fff0cb0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1c60 l     O .bss	00000004 rts_pin
1fff1c64 l     O .bss	00000001 rx_buffer_head
1fff1c65 l     O .bss	00000001 rx_buffer_tail
1fff1c68 l     O .bss	00000028 tx_buffer
1fff1c90 l     O .bss	00000040 rx_buffer
1fff1cd0 l     O .bss	00000001 transmitting
1fff1cd1 l     O .bss	00000001 tx_buffer_tail
1fff1cd4 l     O .bss	00000004 transmit_pin
1fff1cd8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004468 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d80 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15bc l       .bss	00000000 __bss_start__
1fff1e74 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
000037c0  w    F .text	00000006 adc0_isr
00001858 g     F .text	0000001c usb_serial_available
00003680 g     F .text	00000020 serial4_available
0000332c  w    F .text	000000c4 yield
1fff0c98 g     O .data	00000018 usb_string_manufacturer_name_default
0000386c g     F .text	00000020 serial_available
1fff1898 g     O .bss	00000004 usb_midi_handleProgramChange
00003778  w    F .text	00000048 hard_fault_isr
000037c0  w    F .text	00000006 dma_ch6_isr
00003420 g     F .text	00000020 Print::println()
00003554 g     F .text	00000020 serial2_available
000037c0  w    F .text	00000006 uart0_lon_isr
00002740 g     F .text	000000e8 usb_rx_memory
000033f0  w    F .text	00000002 serialEvent5()
000037c0  w    F .text	00000006 dma_ch8_isr
00003998 g     F .text	00000020 serial6_available
00004440 g     F .text	00000002 __malloc_unlock
1fff18ac g     O .bss	00000004 usb_midi_handleAfterTouch
00001bf8 g     F .text	000000e0 analog_init
00002828 g     F .text	00000084 usb_tx
000037c0  w    F .text	00000006 portcd_isr
1fff18bc g     O .bss	00000004 usb_midi_handleSysExComplete
00003db8 g     F .text	00000098 MillisTimer::runFromTimer()
000037c0  w    F .text	00000006 can1_rx_warn_isr
00004af4 g       .fini	00000000 __exidx_end
000037c0  w    F .text	00000006 dma_error_isr
1fff1d38 g     O .bss	00000001 usb_midi_msg_type
1fff1cf0 g     O .bss	00000001 EventResponder::runningFromYield
000037c0  w    F .text	00000006 i2c0_isr
00003e60 g     F .text	0000000c __errno
000037c0  w    F .text	00000006 portd_isr
000037c0  w    F .text	00000006 enet_error_isr
1fff1cdc g     O .bss	00000004 EventResponder::firstInterrupt
000037c0  w    F .text	00000006 tpm1_isr
0000340c  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
0000484c g     O .text	00000200 digital_pin_to_info_PGM
1fff1e70 g     O .bss	00000004 errno
00004af4 g       .fini	00000000 _etext
1fff15bc g       .bss	00000000 _sbss
00003458  w    F .text	00000002 serialEvent6()
1fff18a8 g     O .bss	00000004 usb_midi_handleVelocityChange
00001ec8 g     F .text	0000001c digitalRead
000037c0  w    F .text	00000006 porte_isr
00000494 g     F .text	000010d8 loop
000037c0  w    F .text	00000006 portb_isr
1fff170c g     O .bss	00000014 step3
000021e4 g     F .text	0000002c usb_midi_flush_output
000037c0  w    F .text	00000006 spi1_isr
000036a0 g     F .text	000000d8 uart3_status_isr
00003c64  w    F .text	00000002 serialEvent1()
1fff184c g     O .bss	00000018 led4
000037c0  w    F .text	00000006 mcm_isr
00003d50 g     F .text	00000068 MillisTimer::addToActiveList()
00002210 g     F .text	0000043c usb_midi_read
1fff1884 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1ce0 g     O .bss	00000004 EventResponder::lastInterrupt
00003574 g     F .text	0000010c uart1_status_isr
1fff1d3a g     O .bss	00000002 usb_midi_msg_sysex_len
000037c0  w    F .text	00000006 randnum_isr
1fff188c g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff187c g     O .bss	00000004 systick_millis_count
00003778  w    F .text	00000048 bus_fault_isr
000037c0  w    F .text	00000006 watchdog_isr
000037c0  w    F .text	00000006 i2c1_isr
1fff19d0 g     O .bss	00000001 usb_configuration
000037c0  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00003440  w    F .text	00000002 serialEvent2()
000037c0  w    F .text	00000006 i2c2_isr
1fff0c98  w    O .data	00000018 usb_string_manufacturer_name
1fff1e64 g     O .bss	0000000a usb_rx_byte_count_data
000037c0  w    F .text	00000006 pit1_isr
00003ebc g     F .text	00000010 malloc
000037c0  w    F .text	00000006 dma_ch4_isr
000037c0  w    F .text	00000006 software_isr
000037c0  w    F .text	00000006 dma_ch7_isr
00003cec  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
0000325c g     F .text	000000d0 usb_init
000037c0  w    F .text	00000006 lptmr_isr
1fff1d00 g     O .bss	00000004 __malloc_top_pad
00001e98 g     F .text	00000024 rtc_set
1fff169c g     O .bss	00000024 button5
1fff1678 g     O .bss	00000024 button4
1fff0c40 g       .data	00000000 _sdata
1fff18dc g     O .bss	00000004 usb_midi_handleNoteOn
00003838 g     F .text	00000034 kinetis_hsrun_enable
00004444 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
000017e0 g     F .text	00000048 usb_serial_getchar
000037c0  w    F .text	00000006 can1_bus_off_isr
000037c0  w    F .text	00000006 ftm2_isr
1fff1d2c g     O .bss	00000008 usb_cdc_line_coding
00001ebc g     F .text	0000000a digitalWrite
000037c0  w    F .text	00000006 uart5_status_isr
000039b8 g     F .text	000000e4 lpuart0_status_isr
1fff1ce8 g     O .bss	00000004 EventResponder::lastYield
00004a78 g     O .text	00000005 usb_endpoint_config_table
000037c0  w    F .text	00000006 dma_ch9_isr
000037c0  w    F .text	00000006 pit2_isr
00003b6c g     F .text	00000020 serial3_available
1fff1720 g     O .bss	00000014 step4
1fff1cfc g     O .bss	00000004 __malloc_max_sbrked_mem
00001ee4 g     F .text	0000000a pinMode
0000268c g     F .text	0000004c usb_free
000037c0  w    F .text	00000006 i2c3_isr
1fff1804 g     O .bss	00000018 led1
1fff18a4 g     O .bss	00000004 usb_midi_handleSysExPartial
00004af4 g       .fini	00000000 __exidx_start
000037c0  w    F .text	00000006 pit0_isr
1fff1d3c g     O .bss	00000001 usb_midi_msg_data1
1fff1cec g     O .bss	00000004 EventResponder::firstYield
00004ad4 g     O .text	00000004 _global_impure_ptr
000037c0  w    F .text	00000006 can1_error_isr
00003e6c g     F .text	00000050 __libc_init_array
1fff1e74 g       .bss	00000000 __bss_end
000037c0  w    F .text	00000006 can0_wakeup_isr
000037c0  w    F .text	00000006 flash_cmd_isr
1fff17a4 g     O .bss	0000001c knob5
000033f4  w    F .text	00000004 usb_serial_class::clear()
00003b8c g     F .text	000000d8 uart2_status_isr
000037d8 g     F .text	0000002c _sbrk
1fff1cf4 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c80 g     O .data	00000004 __brkval
1fff1874 g     O .bss	00000001 usb_cdc_line_rtsdtr
00001a6c g     F .text	00000048 usb_serial_flush_callback
00004ad8 g     F .text	00000000 _init
1fff0c40 g     O .data	00000010 steps
000037c0  w    F .text	00000006 svcall_isr
000037c0  w    F .text	00000006 dma_ch15_isr
000037c0  w    F .text	00000006 uart1_error_isr
00004488 g     F .text	00000028 __libc_fini_array
000037c0  w    F .text	00000006 usbhs_phy_isr
1fff1e74 g       .bss	00000000 _ebss
000037c0 g     F .text	00000006 unused_isr
000037c0  w    F .text	00000006 spi0_isr
000037c0  w    F .text	00000006 dma_ch3_isr
000037c0  w    F .text	00000006 flash_error_isr
1fff1750 g     O .bss	0000001c knob2
0000345c g     F .text	00000020 serial5_available
000037c0  w    F .text	00000006 uart5_error_isr
000037c0  w    F .text	00000006 rtc_seconds_isr
000037c0  w    F .text	00000006 pdb_isr
00003778  w    F .text	00000048 usage_fault_isr
000037c0  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
000037c0  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1d34 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff17f0 g     O .bss	00000010 transport
1fff0c50 g     O .data	00000018 leds
00003e50 g     F .text	00000010 systick_isr
000037c0  w    F .text	00000006 rtc_alarm_isr
000037c0  w    F .text	00000006 dma_ch2_isr
1fff0c70 g     O .data	00000010 Serial
000037c0  w    F .text	00000006 ftm1_isr
00003414  w    F .text	00000006 usb_serial_class::write(unsigned char)
000037c8  w    F .text	0000000c startup_early_hook
000037c0  w    F .text	00000006 dma_ch13_isr
000037c0  w    F .text	00000006 uart2_error_isr
00001828 g     F .text	00000030 usb_serial_peekchar
1fff0d64 g     O .data	00000016 usb_string_serial_number_default
00003778 g     F .text	00000048 fault_isr
0000454c g     F .text	000001d0 _free_r
1fff18c8 g     O .bss	00000004 usb_midi_handleStop
000037c0  w    F .text	00000006 usb_charge_isr
00003404  w    F .text	00000004 usb_serial_class::flush()
000037c0  w    F .text	00000006 cmt_isr
000037c0  w    F .text	00000006 usbhs_isr
1fff18d8 g     O .bss	00000004 usb_midi_handleControlChange
1fff15b8 g     O .data	00000004 __malloc_sbrk_base
000033fc  w    F .text	00000004 usb_serial_class::read()
000037c0  w    F .text	00000006 ftm3_isr
000037c0  w    F .text	00000006 tsi0_isr
1fff15f0 g     O .bss	00000018 led6
1fff1734 g     O .bss	0000001c knob1
000037c0  w    F .text	00000006 spi2_isr
00003444  w    F .text	00000002 serialEvent4()
0000341c  w    F .text	00000002 serialEvent()
1fff1951 g     O .bss	00000001 usb_reboot_timer
0000471c g     F .text	000000a4 __register_exitproc
00001874 g     F .text	00000038 usb_serial_flush_input
000019b4 g     F .text	00000018 usb_serial_putchar
1fff1d04 g     O .bss	00000028 __malloc_current_mallinfo
000037c0  w    F .text	00000006 can0_bus_off_isr
1fff15d8 g     O .bss	00000018 led5
1fff19c5 g     O .bss	00000001 usb_rx_memory_needed
000028ac g     F .text	000009b0 usb_isr
1fff16e4 g     O .bss	00000014 step1
1fff18d4 g     O .bss	00000004 usb_midi_handleNoteOff
00004a4c  w    O .text	00000028 vtable for usb_serial_class
1fff176c g     O .bss	0000001c knob3
000037c0  w    F .text	00000006 uart3_error_isr
1fff1ce4 g     O .bss	00000004 MillisTimer::listActive
000037c0  w    F .text	00000006 porta_isr
1fff1608 g     O .bss	00000001 controller
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
000037c0  w    F .text	00000006 low_voltage_isr
1fff1630 g     O .bss	00000024 button2
1fff11ac g     O .data	00000408 __malloc_av_
000037c0  w    F .text	00000006 can0_error_isr
00001f94 g     F .text	0000016c _init_Teensyduino_internal_
00001a14 g     F .text	00000058 usb_serial_flush_output
000037c0  w    F .text	00000006 dma_ch12_isr
0000443c g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
000037c0  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
000037c0  w    F .text	00000006 pit3_isr
000037c0  w    F .text	00000006 enet_rx_isr
000037c0  w    F .text	00000006 portc_isr
00003448 g     F .text	00000010 main
1fff1cf8 g     O .bss	00000004 __malloc_max_total_mem
1fff1834 g     O .bss	00000018 led3
00003778  w    F .text	00000048 memmanage_fault_isr
00003a9c g     F .text	00000084 usb_init_serialnumber
1fff1800 g     O .bss	00000001 currentMode
00004af0 g       .text	00000000 __init_array_end
00003ecc g     F .text	00000570 _malloc_r
000037c0  w    F .text	00000006 debugmonitor_isr
1fff18a0 g     O .bss	00000004 usb_midi_handleSongPosition
00003c6c g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1890 g     O .bss	00000004 usb_midi_handleContinue
1fff1d3d g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
000037c0  w    F .text	00000006 cmp1_isr
1fff1654 g     O .bss	00000024 button3
000037c0  w    F .text	00000006 ftm0_isr
000044b0 g     F .text	0000009c _malloc_trim_r
1fff0d60 g     O .data	00000004 string0
000018ac g     F .text	00000108 usb_serial_write
000037d4  w    F .text	00000002 startup_late_hook
00003400  w    F .text	00000004 usb_serial_class::available()
1fff1d3e g     O .bss	00000001 usb_midi_msg_cable
1fff0d48  w    O .data	00000018 usb_string_product_name
00001ef0 g     F .text	000000a4 delay
000037c0  w    F .text	00000006 tpm0_isr
00004af0 g     F .fini	00000000 _fini
1fff16f8 g     O .bss	00000014 step2
000037c0  w    F .text	00000006 i2s0_rx_isr
000037c0  w    F .text	00000006 uart4_error_isr
00002148 g     F .text	0000009c usb_midi_write_packed
0000447c g     F .text	0000000c atexit
000037c0  w    F .text	00000006 can0_message_isr
1fff11a8 g     O .data	00000004 _impure_ptr
000037c0  w    F .text	00000006 can1_message_isr
000037c0  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff18b8 g     O .bss	00000004 usb_midi_handleTuneRequest
00004ae4 g       .text	00000000 __preinit_array_end
000037c0  w    F .text	00000006 sdhc_isr
1fff1d3f g     O .bss	00000001 usb_midi_msg_channel
00000490 g     F .text	00000002 setup
00004a80 g     O .text	00000054 usb_descriptor_list
000026d8 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1788 g     O .bss	0000001c knob4
000037c0  w    F .text	00000006 dma_ch10_isr
1fff17c0 g     O .bss	00000030 sequence1
1fff18b0 g     O .bss	00000004 usb_midi_handleStart
000037c0  w    F .text	00000006 uart0_error_isr
0000264c g     F .text	00000040 usb_malloc
000037c0  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
000019cc g     F .text	00000048 usb_serial_write_buffer_free
000037c0  w    F .text	00000006 enet_timer_isr
1fff16c0 g     O .bss	00000024 button6
1fff160c g     O .bss	00000024 button1
1fff15bc g       .data	00000000 _edata
000037c0  w    F .text	00000006 i2s0_tx_isr
000037c0  w    F .text	00000006 adc1_isr
00003408  w    F .text	00000004 usb_serial_class::availableForWrite()
000037c0  w    F .text	00000006 cmp0_isr
1fff1880 g     O .bss	00000004 usb_midi_handleClock
00003b20 g     F .text	0000004c ultoa
00003d08 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15b4 g     O .data	00000004 __malloc_trim_threshold
000033f8  w    F .text	00000004 usb_serial_class::peek()
1fff1864 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff189c g     O .bss	00000004 usb_midi_handlePitchChange
000037c0  w    F .text	00000006 pit_isr
1fff18b4 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
000037c0  w    F .text	00000006 dac0_isr
00004ae4 g       .text	00000000 __init_array_start
000037c0  w    F .text	00000006 can1_tx_warn_isr
00001cd8 g     F .text	000000fc analogRead
1fff1d40 g     O .bss	00000122 usb_midi_msg_sysex
0000388c g     F .text	0000010c uart0_status_isr
000037c0  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d48 g     O .data	00000018 usb_string_product_name_default
000037c0  w    F .text	00000006 dma_ch1_isr
00002714 g     F .text	0000002c usb_tx_packet_count
000037c0  w    F .text	00000006 dma_ch5_isr
000037c0  w    F .text	00000006 can0_rx_warn_isr
000037c0  w    F .text	00000006 can0_tx_warn_isr
0000347c g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00003804 g     F .text	00000034 kinetis_hsrun_disable
00004ae4 g       .text	00000000 __preinit_array_start
00003c68  w    F .text	00000002 serialEvent3()
1fff18d0 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff181c g     O .bss	00000018 led2
000037c0  w    F .text	00000006 cmp2_isr
00003d4c g     F .text	00000004 pendablesrvreq_isr
000037c0  w    F .text	00000006 wakeup_isr
000037c0  w    F .text	00000006 cmp3_isr
1fff1888 g     O .bss	00000004 usb_midi_handleActiveSensing
000037c0  w    F .text	00000006 tpm2_isr
000037c0  w    F .text	00000006 dma_ch0_isr
1fff0d64  w    O .data	00000016 usb_string_serial_number
000037c0  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... .....7..y7..
      10:	y7..y7..y7..y7..
      20:	y7..y7..y7...7..
      30:	.7..y7..M=..Q>..
      40:	.7...7...7...7..
      50:	.7...7...7...7..
      60:	.7...7...7...7..
      70:	.7...7...7...7..
      80:	.7...7...7...7..
      90:	.7...7...7...7..
      a0:	.7...7...7...7..
      b0:	.7...7...7...8..
      c0:	.7..u5...7...;..
      d0:	.7...6...7...7..
      e0:	.7...7...7...7..
      f0:	.7...7...7...7..
     100:	.7...7...7...7..
     110:	.7...(...7...7..
     120:	.7...7...7...7..
     130:	.7...7...7...7..
     140:	.7...7..}4...7..
     150:	.7...7...7...7..
     160:	.7...7...7...7..
     170:	.7...7...7...7..
     180:	.7...7...7...7..
     190:	.7...7...9...7..
     1a0:	.7...7...7...7..
     1b0:	.7...7...7...7..
     1c0:	.7...7...7...7..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	37c8 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	1f94 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	1e98 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	1e98 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	3e6c <__libc_init_array>

	startup_late_hook();
     33a:	bl	37d4 <startup_late_hook>
	main();
     33e:	bl	3448 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15bc
     374:	.word	0x00004af0
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15bc
     380:	.word	0x1fff1e74
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15bc
     42c:	.word	0x00000000
     430:	.word	0x00004af4

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15c0
     460:	.word	0x00004af4
     464:	.word	0x1fff15bc
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    unsigned long blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #25
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    unsigned long blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	1ee4 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	1ebc <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob2(A1, sequence1, transport, SECOND, 1);
Knob knob3(A2, sequence1, transport, THIRD, 2);
Knob knob4(A3, sequence1, transport, FOURTH, 3);
Knob knob5(A4, sequence1, transport, FIFTH, 4);

void setup() {
     490:	bx	lr
     492:	nop

00000494 <loop>:
  Serial.begin(9600);
}

void loop() {
     494:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     498:	movs	r0, #0
     49a:	sub	sp, #128	; 0x80
     49c:	bl	2210 <usb_midi_read>
  if (usbMIDI.read()) {
     4a0:	cmp	r0, #0
     4a2:	bne.w	acc <loop+0x638>
     4a6:	ldr	r4, [pc, #644]	; (72c <loop+0x298>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4a8:	ldr	r6, [pc, #644]	; (730 <loop+0x29c>)
     4aa:	ldrb.w	r0, [r6, #32]
     4ae:	bl	1ec8 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b2:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b4:	str	r0, [r6, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b6:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b8:	mov	r5, r0
     4ba:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4bc:	beq.w	af4 <loop+0x660>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c0:	ldr	r3, [r4, #0]
     4c2:	str	r3, [sp, #76]	; 0x4c
	return ret;
     4c4:	ldr	r3, [sp, #76]	; 0x4c
        m_lastDebounceTime = millis();
     4c6:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c8:	ldr	r1, [r4, #0]
     4ca:	str	r1, [sp, #72]	; 0x48
	return ret;
     4cc:	ldr	r1, [sp, #72]	; 0x48
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ce:	ldr.w	r8, [pc, #604]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4d2:	cmp	r1, r3
     4d4:	beq.n	4e8 <loop+0x54>
        if (reading != m_state) {
     4d6:	ldr	r3, [r6, #4]
     4d8:	ldr	r7, [pc, #596]	; (730 <loop+0x29c>)
     4da:	cmp	r5, r3
     4dc:	beq.w	b1c <loop+0x688>
          m_state = reading;
     4e0:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     4e2:	cmp	r5, #0
     4e4:	beq.w	b24 <loop+0x690>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e8:	ldr	r5, [pc, #584]	; (734 <loop+0x2a0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     4ea:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4ec:	ldrb.w	r0, [r5, #32]
     4f0:	bl	1ec8 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f4:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f6:	str	r0, [r5, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f8:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4fa:	mov	r6, r0
     4fc:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4fe:	beq.w	b08 <loop+0x674>
     502:	ldr	r3, [r4, #0]
     504:	str	r3, [sp, #68]	; 0x44
	return ret;
     506:	ldr	r3, [sp, #68]	; 0x44
        m_lastDebounceTime = millis();
     508:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     50a:	ldr	r1, [r4, #0]
     50c:	str	r1, [sp, #64]	; 0x40
	return ret;
     50e:	ldr	r1, [sp, #64]	; 0x40
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     510:	ldr.w	r8, [pc, #536]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     514:	cmp	r3, r1
     516:	beq.n	52a <loop+0x96>
        if (reading != m_state) {
     518:	ldr	r3, [r5, #4]
     51a:	ldr	r7, [pc, #536]	; (734 <loop+0x2a0>)
     51c:	cmp	r6, r3
     51e:	beq.w	b10 <loop+0x67c>
          m_state = reading;
     522:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     524:	cmp	r6, #0
     526:	beq.w	b5c <loop+0x6c8>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52a:	ldr	r6, [pc, #524]	; (738 <loop+0x2a4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     52c:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52e:	ldrb.w	r0, [r6, #32]
     532:	bl	1ec8 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     536:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     538:	str	r0, [r6, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     53a:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     53c:	mov	r5, r0
     53e:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     540:	beq.w	b04 <loop+0x670>
     544:	ldr	r3, [r4, #0]
     546:	str	r3, [sp, #60]	; 0x3c
	return ret;
     548:	ldr	r3, [sp, #60]	; 0x3c
        m_lastDebounceTime = millis();
     54a:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     54c:	ldr	r1, [r4, #0]
     54e:	str	r1, [sp, #56]	; 0x38
	return ret;
     550:	ldr	r1, [sp, #56]	; 0x38
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     552:	ldr.w	r8, [pc, #472]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     556:	cmp	r1, r3
     558:	beq.n	56c <loop+0xd8>
        if (reading != m_state) {
     55a:	ldr	r3, [r6, #4]
     55c:	ldr	r7, [pc, #472]	; (738 <loop+0x2a4>)
     55e:	cmp	r5, r3
     560:	beq.w	b0c <loop+0x678>
          m_state = reading;
     564:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     566:	cmp	r5, #0
     568:	beq.w	b94 <loop+0x700>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     56c:	ldr	r5, [pc, #460]	; (73c <loop+0x2a8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     56e:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     570:	ldrb.w	r0, [r5, #32]
     574:	bl	1ec8 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     578:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57a:	str	r0, [r5, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     57c:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57e:	mov	r6, r0
     580:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     582:	beq.w	b00 <loop+0x66c>
     586:	ldr	r3, [r4, #0]
     588:	str	r3, [sp, #52]	; 0x34
	return ret;
     58a:	ldr	r3, [sp, #52]	; 0x34
        m_lastDebounceTime = millis();
     58c:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     58e:	ldr	r1, [r4, #0]
     590:	str	r1, [sp, #48]	; 0x30
	return ret;
     592:	ldr	r1, [sp, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     594:	ldr.w	r8, [pc, #404]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     598:	cmp	r1, r3
     59a:	beq.n	5ae <loop+0x11a>
        if (reading != m_state) {
     59c:	ldr	r3, [r5, #4]
     59e:	ldr	r7, [pc, #412]	; (73c <loop+0x2a8>)
     5a0:	cmp	r6, r3
     5a2:	beq.w	b18 <loop+0x684>
          m_state = reading;
     5a6:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5a8:	cmp	r6, #0
     5aa:	beq.w	bcc <loop+0x738>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ae:	ldr	r6, [pc, #400]	; (740 <loop+0x2ac>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5b0:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5b2:	ldrb.w	r0, [r6, #32]
     5b6:	bl	1ec8 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5ba:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5bc:	str	r0, [r6, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5be:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5c0:	mov	r5, r0
     5c2:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5c4:	beq.w	afc <loop+0x668>
     5c8:	ldr	r3, [r4, #0]
     5ca:	str	r3, [sp, #44]	; 0x2c
	return ret;
     5cc:	ldr	r3, [sp, #44]	; 0x2c
        m_lastDebounceTime = millis();
     5ce:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d0:	ldr	r1, [r4, #0]
     5d2:	str	r1, [sp, #40]	; 0x28
	return ret;
     5d4:	ldr	r1, [sp, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d6:	ldr.w	r8, [pc, #340]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5da:	cmp	r1, r3
     5dc:	beq.n	5f0 <loop+0x15c>
        if (reading != m_state) {
     5de:	ldr	r3, [r6, #4]
     5e0:	ldr	r7, [pc, #348]	; (740 <loop+0x2ac>)
     5e2:	cmp	r5, r3
     5e4:	beq.w	b14 <loop+0x680>
          m_state = reading;
     5e8:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5ea:	cmp	r5, #0
     5ec:	beq.w	c04 <loop+0x770>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f0:	ldr	r5, [pc, #336]	; (744 <loop+0x2b0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5f2:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f4:	ldrb.w	r0, [r5, #32]
     5f8:	bl	1ec8 <digitalRead>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5fc:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5fe:	str	r0, [r5, #12]
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     600:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     602:	mov	r6, r0
     604:	mov	r2, r0
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     606:	beq.w	af8 <loop+0x664>
     60a:	ldr	r3, [r4, #0]
     60c:	str	r3, [sp, #36]	; 0x24
	return ret;
     60e:	ldr	r3, [sp, #36]	; 0x24
        m_lastDebounceTime = millis();
     610:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     612:	ldr	r1, [r4, #0]
     614:	str	r1, [sp, #32]
	return ret;
     616:	ldr	r1, [sp, #32]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     618:	ldr.w	r8, [pc, #272]	; 72c <loop+0x298>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     61c:	cmp	r1, r3
     61e:	beq.n	664 <loop+0x1d0>
        if (reading != m_state) {
     620:	ldr	r3, [r5, #4]
     622:	ldr	r7, [pc, #288]	; (744 <loop+0x2b0>)
     624:	cmp	r6, r3
     626:	beq.w	b20 <loop+0x68c>
          m_state = reading;
     62a:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     62c:	cbnz	r6, 664 <loop+0x1d0>
     62e:	ldrb	r3, [r7, #16]
     630:	cmp	r3, #0
     632:	bne.w	1130 <loop+0xc9c>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     636:	ldrb	r3, [r7, #17]
     638:	cmp	r3, #0
     63a:	bne.w	1262 <loop+0xdce>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
     63e:	ldr	r3, [r7, #24]
     640:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     644:	clz	r1, r1
     648:	lsrs	r1, r1, #5
     64a:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     64c:	uxtb	r0, r0
     64e:	bl	1ebc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     652:	ldr	r3, [r7, #28]
     654:	ldr	r1, [r7, #0]
     656:	ldr	r2, [r7, #12]
     658:	ldr.w	r1, [r3, r1, lsl #2]
      m_velocity = 100;
      m_length = 4;
    };

    void toggle () {
      m_state = !m_state;
     65c:	ldrb	r3, [r1, #4]
     65e:	eor.w	r3, r3, #1
     662:	strb	r3, [r1, #4]
    };

    int check () {
      if (!blinking) {
     664:	ldr	r6, [pc, #224]	; (748 <loop+0x2b4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     666:	str	r2, [r5, #8]
     668:	ldrb	r3, [r6, #16]
     66a:	cbz	r3, 680 <loop+0x1ec>
     66c:	ldr	r3, [r4, #0]
     66e:	str	r3, [sp, #28]
	return ret;
     670:	ldr	r3, [sp, #28]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     672:	ldr	r1, [r6, #8]
     674:	ldr	r2, [r6, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     676:	ldr	r5, [pc, #180]	; (72c <loop+0x298>)
     678:	subs	r3, r3, r1
     67a:	cmp	r3, r2
     67c:	bhi.w	950 <loop+0x4bc>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     680:	ldr	r5, [pc, #200]	; (74c <loop+0x2b8>)
     682:	ldrb	r3, [r5, #16]
     684:	cbz	r3, 69a <loop+0x206>
     686:	ldr	r3, [r4, #0]
     688:	str	r3, [sp, #24]
	return ret;
     68a:	ldr	r3, [sp, #24]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     68c:	ldr	r1, [r5, #8]
     68e:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     690:	ldr	r6, [pc, #152]	; (72c <loop+0x298>)
     692:	subs	r3, r3, r1
     694:	cmp	r3, r2
     696:	bhi.w	a84 <loop+0x5f0>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     69a:	ldr	r5, [pc, #180]	; (750 <loop+0x2bc>)
     69c:	ldrb	r3, [r5, #16]
     69e:	cbz	r3, 6b4 <loop+0x220>
     6a0:	ldr	r3, [r4, #0]
     6a2:	str	r3, [sp, #20]
	return ret;
     6a4:	ldr	r3, [sp, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     6a6:	ldr	r1, [r5, #8]
     6a8:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6aa:	ldr	r6, [pc, #128]	; (72c <loop+0x298>)
     6ac:	subs	r3, r3, r1
     6ae:	cmp	r3, r2
     6b0:	bhi.w	a28 <loop+0x594>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     6b4:	ldr	r5, [pc, #156]	; (754 <loop+0x2c0>)
     6b6:	ldrb	r3, [r5, #16]
     6b8:	cbz	r3, 6ce <loop+0x23a>
     6ba:	ldr	r3, [r4, #0]
     6bc:	str	r3, [sp, #16]
	return ret;
     6be:	ldr	r3, [sp, #16]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     6c0:	ldr	r1, [r5, #8]
     6c2:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6c4:	ldr	r6, [pc, #100]	; (72c <loop+0x298>)
     6c6:	subs	r3, r3, r1
     6c8:	cmp	r3, r2
     6ca:	bhi.w	9e0 <loop+0x54c>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     6ce:	ldr	r5, [pc, #136]	; (758 <loop+0x2c4>)
     6d0:	ldrb	r3, [r5, #16]
     6d2:	cbz	r3, 6e8 <loop+0x254>
     6d4:	ldr	r3, [r4, #0]
     6d6:	str	r3, [sp, #12]
	return ret;
     6d8:	ldr	r3, [sp, #12]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     6da:	ldr	r1, [r5, #8]
     6dc:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6de:	ldr	r6, [pc, #76]	; (72c <loop+0x298>)
     6e0:	subs	r3, r3, r1
     6e2:	cmp	r3, r2
     6e4:	bhi.w	998 <loop+0x504>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     6e8:	ldr	r5, [pc, #112]	; (75c <loop+0x2c8>)
     6ea:	ldrb	r3, [r5, #16]
     6ec:	cbz	r3, 702 <loop+0x26e>
     6ee:	ldr	r3, [r4, #0]
     6f0:	str	r3, [sp, #8]
	return ret;
     6f2:	ldr	r3, [sp, #8]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     6f4:	ldr	r1, [r5, #8]
     6f6:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6f8:	ldr	r4, [pc, #48]	; (72c <loop+0x298>)
     6fa:	subs	r3, r3, r1
     6fc:	cmp	r3, r2
     6fe:	bhi.w	908 <loop+0x474>
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     702:	ldr	r4, [pc, #92]	; (760 <loop+0x2cc>)
     704:	ldrb	r0, [r4, #0]
     706:	bl	1cd8 <analogRead>

      int diff = abs(m_value - m_lastValue);
     70a:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     70c:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     70e:	cmp	r0, r3
     710:	beq.n	79a <loop+0x306>
     712:	subs	r3, r0, r3
     714:	cmp	r3, #0
     716:	it	lt
     718:	neglt	r3, r3
     71a:	cmp	r3, #10
     71c:	ble.n	79a <loop+0x306>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     71e:	ldrb	r3, [r4, #24]
     720:	cmp	r3, #4
     722:	beq.w	d2e <loop+0x89a>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     726:	ldr	r3, [pc, #60]	; (764 <loop+0x2d0>)
     728:	ldrb	r3, [r3, #0]
     72a:	b.n	768 <loop+0x2d4>
     72c:	.word	0x1fff187c
     730:	.word	0x1fff160c
     734:	.word	0x1fff1630
     738:	.word	0x1fff1654
     73c:	.word	0x1fff1678
     740:	.word	0x1fff169c
     744:	.word	0x1fff16c0
     748:	.word	0x1fff1804
     74c:	.word	0x1fff181c
     750:	.word	0x1fff1834
     754:	.word	0x1fff184c
     758:	.word	0x1fff15d8
     75c:	.word	0x1fff15f0
     760:	.word	0x1fff1734
     764:	.word	0x1fff1800
     768:	cmp	r3, #1
     76a:	beq.w	e88 <loop+0x9f4>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     76e:	cmp	r3, #0
     770:	beq.w	cd8 <loop+0x844>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     774:	cmp	r3, #2
     776:	bne.n	798 <loop+0x304>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     778:	ldr	r2, [r4, #16]
     77a:	ldr	r1, [r4, #12]
      m_controller.controlChange(0, 123, 127);
    };

    void controlLength (int value) {
      int newValue = map(value, 0, 1023, 24, 1);
      m_length = newValue;
     77c:	mvn.w	r3, #21
     780:	mul.w	r3, r3, r0
     784:	cmp	r3, #0
     786:	add.w	r2, r2, r1, lsl #2
     78a:	it	lt
     78c:	addwlt	r3, r3, #1023	; 0x3ff
     790:	ldr	r2, [r2, #4]
     792:	asrs	r3, r3, #10
     794:	adds	r3, #24
     796:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     798:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     79a:	ldr	r4, [pc, #724]	; (a70 <loop+0x5dc>)
     79c:	ldrb	r0, [r4, #0]
     79e:	bl	1cd8 <analogRead>

      int diff = abs(m_value - m_lastValue);
     7a2:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     7a4:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     7a6:	cmp	r0, r3
     7a8:	beq.n	7f4 <loop+0x360>
     7aa:	subs	r3, r0, r3
     7ac:	cmp	r3, #0
     7ae:	it	lt
     7b0:	neglt	r3, r3
     7b2:	cmp	r3, #10
     7b4:	ble.n	7f4 <loop+0x360>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     7b6:	ldrb	r3, [r4, #24]
     7b8:	cmp	r3, #4
     7ba:	beq.w	d66 <loop+0x8d2>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     7be:	ldr	r3, [pc, #692]	; (a74 <loop+0x5e0>)
     7c0:	ldrb	r3, [r3, #0]
     7c2:	cmp	r3, #1
     7c4:	beq.w	ea4 <loop+0xa10>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     7c8:	cmp	r3, #0
     7ca:	beq.w	c9c <loop+0x808>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     7ce:	cmp	r3, #2
     7d0:	bne.n	7f2 <loop+0x35e>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     7d2:	ldr	r2, [r4, #16]
     7d4:	ldr	r1, [r4, #12]
     7d6:	mvn.w	r3, #21
     7da:	mul.w	r3, r3, r0
     7de:	cmp	r3, #0
     7e0:	add.w	r2, r2, r1, lsl #2
     7e4:	it	lt
     7e6:	addwlt	r3, r3, #1023	; 0x3ff
     7ea:	ldr	r2, [r2, #4]
     7ec:	asrs	r3, r3, #10
     7ee:	adds	r3, #24
     7f0:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     7f2:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     7f4:	ldr	r4, [pc, #640]	; (a78 <loop+0x5e4>)
     7f6:	ldrb	r0, [r4, #0]
     7f8:	bl	1cd8 <analogRead>

      int diff = abs(m_value - m_lastValue);
     7fc:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     7fe:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     800:	cmp	r0, r3
     802:	beq.n	84e <loop+0x3ba>
     804:	subs	r3, r0, r3
     806:	cmp	r3, #0
     808:	it	lt
     80a:	neglt	r3, r3
     80c:	cmp	r3, #10
     80e:	ble.n	84e <loop+0x3ba>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     810:	ldrb	r3, [r4, #24]
     812:	cmp	r3, #4
     814:	beq.w	cf6 <loop+0x862>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     818:	ldr	r3, [pc, #600]	; (a74 <loop+0x5e0>)
     81a:	ldrb	r3, [r3, #0]
     81c:	cmp	r3, #1
     81e:	beq.w	ef8 <loop+0xa64>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     822:	cmp	r3, #0
     824:	beq.w	cba <loop+0x826>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     828:	cmp	r3, #2
     82a:	bne.n	84c <loop+0x3b8>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     82c:	ldr	r2, [r4, #16]
     82e:	ldr	r1, [r4, #12]
     830:	mvn.w	r3, #21
     834:	mul.w	r3, r3, r0
     838:	cmp	r3, #0
     83a:	add.w	r2, r2, r1, lsl #2
     83e:	it	lt
     840:	addwlt	r3, r3, #1023	; 0x3ff
     844:	ldr	r2, [r2, #4]
     846:	asrs	r3, r3, #10
     848:	adds	r3, #24
     84a:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     84c:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     84e:	ldr	r4, [pc, #556]	; (a7c <loop+0x5e8>)
     850:	ldrb	r0, [r4, #0]
     852:	bl	1cd8 <analogRead>

      int diff = abs(m_value - m_lastValue);
     856:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     858:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     85a:	cmp	r0, r3
     85c:	beq.n	8a8 <loop+0x414>
     85e:	subs	r3, r0, r3
     860:	cmp	r3, #0
     862:	it	lt
     864:	neglt	r3, r3
     866:	cmp	r3, #10
     868:	ble.n	8a8 <loop+0x414>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     86a:	ldrb	r3, [r4, #24]
     86c:	cmp	r3, #4
     86e:	beq.w	d4a <loop+0x8b6>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     872:	ldr	r3, [pc, #512]	; (a74 <loop+0x5e0>)
     874:	ldrb	r3, [r3, #0]
     876:	cmp	r3, #1
     878:	beq.w	ec0 <loop+0xa2c>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     87c:	cmp	r3, #0
     87e:	beq.w	c60 <loop+0x7cc>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     882:	cmp	r3, #2
     884:	bne.n	8a6 <loop+0x412>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     886:	ldr	r2, [r4, #16]
     888:	ldr	r1, [r4, #12]
     88a:	mvn.w	r3, #21
     88e:	mul.w	r3, r3, r0
     892:	cmp	r3, #0
     894:	add.w	r2, r2, r1, lsl #2
     898:	it	lt
     89a:	addwlt	r3, r3, #1023	; 0x3ff
     89e:	ldr	r2, [r2, #4]
     8a0:	asrs	r3, r3, #10
     8a2:	adds	r3, #24
     8a4:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     8a6:	str	r0, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     8a8:	ldr	r4, [pc, #468]	; (a80 <loop+0x5ec>)
     8aa:	ldrb	r0, [r4, #0]
     8ac:	bl	1cd8 <analogRead>

      int diff = abs(m_value - m_lastValue);
     8b0:	ldr	r3, [r4, #8]
        }
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     8b2:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     8b4:	cmp	r0, r3
     8b6:	beq.n	902 <loop+0x46e>
     8b8:	subs	r3, r0, r3
     8ba:	cmp	r3, #0
     8bc:	it	lt
     8be:	neglt	r3, r3
     8c0:	cmp	r3, #10
     8c2:	ble.n	902 <loop+0x46e>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     8c4:	ldrb	r3, [r4, #24]
     8c6:	cmp	r3, #4
     8c8:	beq.w	d12 <loop+0x87e>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     8cc:	ldr	r3, [pc, #420]	; (a74 <loop+0x5e0>)
     8ce:	ldrb	r3, [r3, #0]
     8d0:	cmp	r3, #1
     8d2:	beq.w	edc <loop+0xa48>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     8d6:	cmp	r3, #0
     8d8:	beq.w	c7e <loop+0x7ea>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     8dc:	cmp	r3, #2
     8de:	bne.n	900 <loop+0x46c>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     8e0:	ldr	r2, [r4, #16]
     8e2:	ldr	r1, [r4, #12]
     8e4:	mvn.w	r3, #21
     8e8:	mul.w	r3, r3, r0
     8ec:	cmp	r3, #0
     8ee:	add.w	r2, r2, r1, lsl #2
     8f2:	it	lt
     8f4:	addwlt	r3, r3, #1023	; 0x3ff
     8f8:	ldr	r2, [r2, #4]
     8fa:	asrs	r3, r3, #10
     8fc:	adds	r3, #24
     8fe:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     900:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     902:	add	sp, #128	; 0x80
     904:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        digitalWrite(m_pin, !digitalRead(m_pin));
     908:	ldrb	r6, [r5, #0]
     90a:	mov	r0, r6
     90c:	bl	1ec8 <digitalRead>
     910:	clz	r1, r0
     914:	lsrs	r1, r1, #5
     916:	mov	r0, r6
     918:	bl	1ebc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     91c:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     91e:	movs	r2, #0

        if (blinkingCounter > 0) {
     920:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     922:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     924:	ble.w	702 <loop+0x26e>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     928:	ldrb	r6, [r5, #0]
     92a:	mov	r0, r6
     92c:	bl	1ec8 <digitalRead>
     930:	clz	r1, r0
     934:	lsrs	r1, r1, #5
     936:	mov	r0, r6
     938:	bl	1ebc <digitalWrite>
     93c:	ldr	r3, [r4, #0]
     93e:	str	r3, [sp, #124]	; 0x7c
	return ret;
     940:	ldr	r3, [sp, #124]	; 0x7c
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     942:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     944:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     946:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     94a:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     94c:	str	r3, [r5, #20]
     94e:	b.n	702 <loop+0x26e>
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     950:	ldrb	r7, [r6, #0]
     952:	mov	r0, r7
     954:	bl	1ec8 <digitalRead>
     958:	clz	r1, r0
     95c:	lsrs	r1, r1, #5
     95e:	mov	r0, r7
     960:	bl	1ebc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     964:	ldr	r3, [r6, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     966:	movs	r2, #0

        if (blinkingCounter > 0) {
     968:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     96a:	strb	r2, [r6, #16]

        if (blinkingCounter > 0) {
     96c:	ble.w	680 <loop+0x1ec>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     970:	ldrb	r7, [r6, #0]
     972:	mov	r0, r7
     974:	bl	1ec8 <digitalRead>
     978:	clz	r1, r0
     97c:	lsrs	r1, r1, #5
     97e:	mov	r0, r7
     980:	bl	1ebc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     984:	ldr	r3, [r5, #0]
     986:	str	r3, [sp, #104]	; 0x68
	return ret;
     988:	ldr	r3, [sp, #104]	; 0x68
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     98a:	str	r3, [r6, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     98c:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     98e:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     992:	strb	r2, [r6, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     994:	str	r3, [r6, #20]
     996:	b.n	680 <loop+0x1ec>
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     998:	ldrb	r7, [r5, #0]
     99a:	mov	r0, r7
     99c:	bl	1ec8 <digitalRead>
     9a0:	clz	r1, r0
     9a4:	lsrs	r1, r1, #5
     9a6:	mov	r0, r7
     9a8:	bl	1ebc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     9ac:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9ae:	movs	r2, #0

        if (blinkingCounter > 0) {
     9b0:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9b2:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     9b4:	ble.w	6e8 <loop+0x254>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     9b8:	ldrb	r7, [r5, #0]
     9ba:	mov	r0, r7
     9bc:	bl	1ec8 <digitalRead>
     9c0:	clz	r1, r0
     9c4:	lsrs	r1, r1, #5
     9c6:	mov	r0, r7
     9c8:	bl	1ebc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9cc:	ldr	r3, [r6, #0]
     9ce:	str	r3, [sp, #120]	; 0x78
	return ret;
     9d0:	ldr	r3, [sp, #120]	; 0x78
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     9d2:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9d4:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9d6:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9da:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9dc:	str	r3, [r5, #20]
     9de:	b.n	6e8 <loop+0x254>
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     9e0:	ldrb	r7, [r5, #0]
     9e2:	mov	r0, r7
     9e4:	bl	1ec8 <digitalRead>
     9e8:	clz	r1, r0
     9ec:	lsrs	r1, r1, #5
     9ee:	mov	r0, r7
     9f0:	bl	1ebc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     9f4:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9f6:	movs	r2, #0

        if (blinkingCounter > 0) {
     9f8:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9fa:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     9fc:	ble.w	6ce <loop+0x23a>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     a00:	ldrb	r7, [r5, #0]
     a02:	mov	r0, r7
     a04:	bl	1ec8 <digitalRead>
     a08:	clz	r1, r0
     a0c:	lsrs	r1, r1, #5
     a0e:	mov	r0, r7
     a10:	bl	1ebc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a14:	ldr	r3, [r6, #0]
     a16:	str	r3, [sp, #116]	; 0x74
	return ret;
     a18:	ldr	r3, [sp, #116]	; 0x74
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     a1a:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a1c:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a1e:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a22:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a24:	str	r3, [r5, #20]
     a26:	b.n	6ce <loop+0x23a>
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     a28:	ldrb	r7, [r5, #0]
     a2a:	mov	r0, r7
     a2c:	bl	1ec8 <digitalRead>
     a30:	clz	r1, r0
     a34:	lsrs	r1, r1, #5
     a36:	mov	r0, r7
     a38:	bl	1ebc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     a3c:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a3e:	movs	r2, #0

        if (blinkingCounter > 0) {
     a40:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a42:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     a44:	ble.w	6b4 <loop+0x220>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     a48:	ldrb	r7, [r5, #0]
     a4a:	mov	r0, r7
     a4c:	bl	1ec8 <digitalRead>
     a50:	clz	r1, r0
     a54:	lsrs	r1, r1, #5
     a56:	mov	r0, r7
     a58:	bl	1ebc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a5c:	ldr	r3, [r6, #0]
     a5e:	str	r3, [sp, #112]	; 0x70
	return ret;
     a60:	ldr	r3, [sp, #112]	; 0x70
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     a62:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a64:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a66:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a6a:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a6c:	str	r3, [r5, #20]
     a6e:	b.n	6b4 <loop+0x220>
     a70:	.word	0x1fff1750
     a74:	.word	0x1fff1800
     a78:	.word	0x1fff176c
     a7c:	.word	0x1fff1788
     a80:	.word	0x1fff17a4
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     a84:	ldrb	r7, [r5, #0]
     a86:	mov	r0, r7
     a88:	bl	1ec8 <digitalRead>
     a8c:	clz	r1, r0
     a90:	lsrs	r1, r1, #5
     a92:	mov	r0, r7
     a94:	bl	1ebc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     a98:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a9a:	movs	r2, #0

        if (blinkingCounter > 0) {
     a9c:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a9e:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     aa0:	ble.w	69a <loop+0x206>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     aa4:	ldrb	r7, [r5, #0]
     aa6:	mov	r0, r7
     aa8:	bl	1ec8 <digitalRead>
     aac:	clz	r1, r0
     ab0:	lsrs	r1, r1, #5
     ab2:	mov	r0, r7
     ab4:	bl	1ebc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ab8:	ldr	r3, [r6, #0]
     aba:	str	r3, [sp, #108]	; 0x6c
	return ret;
     abc:	ldr	r3, [sp, #108]	; 0x6c
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     abe:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     ac0:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     ac2:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     ac6:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     ac8:	str	r3, [r5, #20]
     aca:	b.n	69a <loop+0x206>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     acc:	ldr	r3, [pc, #692]	; (d84 <loop+0x8f0>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     ace:	ldrb	r3, [r3, #0]
     ad0:	cmp	r3, #250	; 0xfa
     ad2:	beq.w	e1a <loop+0x986>
     ad6:	cmp	r3, #252	; 0xfc
     ad8:	beq.w	c3c <loop+0x7a8>
     adc:	cmp	r3, #248	; 0xf8
     ade:	beq.w	d98 <loop+0x904>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     ae2:	movs	r1, #35	; 0x23
     ae4:	ldr	r0, [pc, #672]	; (d88 <loop+0x8f4>)
     ae6:	ldr	r4, [pc, #676]	; (d8c <loop+0x8f8>)
     ae8:	bl	18ac <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     aec:	ldr	r0, [pc, #672]	; (d90 <loop+0x8fc>)
     aee:	bl	3420 <Print::println()>
     af2:	b.n	4a8 <loop+0x14>
     af4:	ldr	r3, [r6, #20]
     af6:	b.n	4c8 <loop+0x34>
     af8:	ldr	r3, [r5, #20]
     afa:	b.n	612 <loop+0x17e>
     afc:	ldr	r3, [r6, #20]
     afe:	b.n	5d0 <loop+0x13c>
     b00:	ldr	r3, [r5, #20]
     b02:	b.n	58e <loop+0xfa>
     b04:	ldr	r3, [r6, #20]
     b06:	b.n	54c <loop+0xb8>
     b08:	ldr	r3, [r5, #20]
     b0a:	b.n	50a <loop+0x76>
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     b0c:	mov	r2, r5
     b0e:	b.n	56c <loop+0xd8>
     b10:	mov	r2, r6
     b12:	b.n	52a <loop+0x96>
     b14:	mov	r2, r5
     b16:	b.n	5f0 <loop+0x15c>
     b18:	mov	r2, r6
     b1a:	b.n	5ae <loop+0x11a>
     b1c:	mov	r2, r5
     b1e:	b.n	4e8 <loop+0x54>
     b20:	mov	r2, r6
     b22:	b.n	664 <loop+0x1d0>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b24:	ldrb	r3, [r7, #16]
     b26:	cmp	r3, #0
     b28:	bne.w	11fc <loop+0xd68>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     b2c:	ldrb	r3, [r7, #17]
     b2e:	cmp	r3, #0
     b30:	bne.w	128a <loop+0xdf6>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
     b34:	ldr	r3, [r7, #24]
     b36:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b3a:	clz	r1, r1
     b3e:	lsrs	r1, r1, #5
     b40:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b42:	uxtb	r0, r0
     b44:	bl	1ebc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     b48:	ldr	r3, [r7, #28]
     b4a:	ldr	r1, [r7, #0]
     b4c:	ldr	r2, [r7, #12]
     b4e:	ldr.w	r1, [r3, r1, lsl #2]
      m_velocity = 100;
      m_length = 4;
    };

    void toggle () {
      m_state = !m_state;
     b52:	ldrb	r3, [r1, #4]
     b54:	eor.w	r3, r3, #1
     b58:	strb	r3, [r1, #4]
     b5a:	b.n	4e8 <loop+0x54>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b5c:	ldrb	r3, [r7, #16]
     b5e:	cmp	r3, #0
     b60:	bne.w	1196 <loop+0xd02>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     b64:	ldrb	r3, [r7, #17]
     b66:	cmp	r3, #0
     b68:	bne.w	132a <loop+0xe96>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
     b6c:	ldr	r3, [r7, #24]
     b6e:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b72:	clz	r1, r1
     b76:	lsrs	r1, r1, #5
     b78:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b7a:	uxtb	r0, r0
     b7c:	bl	1ebc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     b80:	ldr	r3, [r7, #28]
     b82:	ldr	r1, [r7, #0]
     b84:	ldr	r2, [r7, #12]
     b86:	ldr.w	r1, [r3, r1, lsl #2]
     b8a:	ldrb	r3, [r1, #4]
     b8c:	eor.w	r3, r3, #1
     b90:	strb	r3, [r1, #4]
     b92:	b.n	52a <loop+0x96>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b94:	ldrb	r3, [r7, #16]
     b96:	cmp	r3, #0
     b98:	bne.w	1064 <loop+0xbd0>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     b9c:	ldrb	r3, [r7, #17]
     b9e:	cmp	r3, #0
     ba0:	bne.w	12da <loop+0xe46>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
     ba4:	ldr	r3, [r7, #24]
     ba6:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     baa:	clz	r1, r1
     bae:	lsrs	r1, r1, #5
     bb0:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     bb2:	uxtb	r0, r0
     bb4:	bl	1ebc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     bb8:	ldr	r3, [r7, #28]
     bba:	ldr	r1, [r7, #0]
     bbc:	ldr	r2, [r7, #12]
     bbe:	ldr.w	r1, [r3, r1, lsl #2]
     bc2:	ldrb	r3, [r1, #4]
     bc4:	eor.w	r3, r3, #1
     bc8:	strb	r3, [r1, #4]
     bca:	b.n	56c <loop+0xd8>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     bcc:	ldrb	r3, [r7, #16]
     bce:	cmp	r3, #0
     bd0:	bne.w	ff2 <loop+0xb5e>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     bd4:	ldrb	r3, [r7, #17]
     bd6:	cmp	r3, #0
     bd8:	bne.w	12b2 <loop+0xe1e>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
     bdc:	ldr	r3, [r7, #24]
     bde:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     be2:	clz	r1, r1
     be6:	lsrs	r1, r1, #5
     be8:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     bea:	uxtb	r0, r0
     bec:	bl	1ebc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     bf0:	ldr	r3, [r7, #28]
     bf2:	ldr	r1, [r7, #0]
     bf4:	ldr	r2, [r7, #12]
     bf6:	ldr.w	r1, [r3, r1, lsl #2]
     bfa:	ldrb	r3, [r1, #4]
     bfc:	eor.w	r3, r3, #1
     c00:	strb	r3, [r1, #4]
     c02:	b.n	5ae <loop+0x11a>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     c04:	ldrb	r3, [r7, #16]
     c06:	cmp	r3, #0
     c08:	bne.w	10ca <loop+0xc36>
        m_led.toggle();
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
     c0c:	ldrb	r3, [r7, #17]
     c0e:	cmp	r3, #0
     c10:	bne.w	1302 <loop+0xe6e>
        m_led.toggle();
        reverse();
      } else if (m_state == LOW) {
        m_led.toggle();
     c14:	ldr	r3, [r7, #24]
     c16:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c1a:	clz	r1, r1
     c1e:	lsrs	r1, r1, #5
     c20:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c22:	uxtb	r0, r0
     c24:	bl	1ebc <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
     c28:	ldr	r3, [r7, #28]
     c2a:	ldr	r1, [r7, #0]
     c2c:	ldr	r2, [r7, #12]
     c2e:	ldr.w	r1, [r3, r1, lsl #2]
     c32:	ldrb	r3, [r1, #4]
     c34:	eor.w	r3, r3, #1
     c38:	strb	r3, [r1, #4]
     c3a:	b.n	5f0 <loop+0x15c>
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     c3c:	ldr	r1, [pc, #340]	; (d94 <loop+0x900>)
     c3e:	ldr	r4, [pc, #332]	; (d8c <loop+0x8f8>)
      ppqn = 0;
      m_sequence.resetStep();
     c40:	ldr	r0, [r1, #12]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     c42:	movs	r2, #0
      ppqn = 0;
      m_sequence.resetStep();
      m_sequence.m_leds[5]->toggle();
     c44:	ldr	r3, [r0, #40]	; 0x28
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     c46:	strb	r2, [r1, #0]
      ppqn = 0;
     c48:	str	r2, [r1, #8]
    void stopCurrentStep () {
      m_steps[m_currentStep]->stop();
    };

    void resetStep () {
      m_currentStep = 0;
     c4a:	str	r2, [r0, #0]
     c4c:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     c50:	clz	r1, r1
     c54:	lsrs	r1, r1, #5
     c56:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     c58:	uxtb	r0, r0
     c5a:	bl	1ebc <digitalWrite>
     c5e:	b.n	4a8 <loop+0x14>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
          m_sequence.m_steps[m_id]->controlPitch(m_value);
     c60:	ldr	r3, [r4, #16]
     c62:	ldr	r2, [r4, #12]
     c64:	add.w	r2, r3, r2, lsl #2
      m_length = newValue;
    };

    void controlPitch (int value) {
      int newValue = map(value, 0, 1023, 51, 38);
      m_pitch = newValue;
     c68:	sub.w	r3, r0, r0, lsl #2
     c6c:	lsls	r3, r3, #2
     c6e:	it	mi
     c70:	addwmi	r3, r3, #1023	; 0x3ff
     c74:	ldr	r2, [r2, #4]
     c76:	asrs	r3, r3, #10
     c78:	adds	r3, #51	; 0x33
     c7a:	str	r3, [r2, #8]
     c7c:	b.n	8a6 <loop+0x412>
     c7e:	ldr	r3, [r4, #16]
     c80:	ldr	r2, [r4, #12]
     c82:	add.w	r2, r3, r2, lsl #2
     c86:	sub.w	r3, r0, r0, lsl #2
     c8a:	lsls	r3, r3, #2
     c8c:	it	mi
     c8e:	addwmi	r3, r3, #1023	; 0x3ff
     c92:	ldr	r2, [r2, #4]
     c94:	asrs	r3, r3, #10
     c96:	adds	r3, #51	; 0x33
     c98:	str	r3, [r2, #8]
     c9a:	b.n	900 <loop+0x46c>
     c9c:	ldr	r3, [r4, #16]
     c9e:	ldr	r2, [r4, #12]
     ca0:	add.w	r2, r3, r2, lsl #2
     ca4:	sub.w	r3, r0, r0, lsl #2
     ca8:	lsls	r3, r3, #2
     caa:	it	mi
     cac:	addwmi	r3, r3, #1023	; 0x3ff
     cb0:	ldr	r2, [r2, #4]
     cb2:	asrs	r3, r3, #10
     cb4:	adds	r3, #51	; 0x33
     cb6:	str	r3, [r2, #8]
     cb8:	b.n	7f2 <loop+0x35e>
     cba:	ldr	r3, [r4, #16]
     cbc:	ldr	r2, [r4, #12]
     cbe:	add.w	r2, r3, r2, lsl #2
     cc2:	sub.w	r3, r0, r0, lsl #2
     cc6:	lsls	r3, r3, #2
     cc8:	it	mi
     cca:	addwmi	r3, r3, #1023	; 0x3ff
     cce:	ldr	r2, [r2, #4]
     cd0:	asrs	r3, r3, #10
     cd2:	adds	r3, #51	; 0x33
     cd4:	str	r3, [r2, #8]
     cd6:	b.n	84c <loop+0x3b8>
     cd8:	ldr	r3, [r4, #16]
     cda:	ldr	r2, [r4, #12]
     cdc:	add.w	r2, r3, r2, lsl #2
     ce0:	sub.w	r3, r0, r0, lsl #2
     ce4:	lsls	r3, r3, #2
     ce6:	it	mi
     ce8:	addwmi	r3, r3, #1023	; 0x3ff
     cec:	ldr	r2, [r2, #4]
     cee:	asrs	r3, r3, #10
     cf0:	adds	r3, #51	; 0x33
     cf2:	str	r3, [r2, #8]
     cf4:	b.n	798 <loop+0x304>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     cf6:	cmp.w	r0, #400	; 0x190
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
        m_transport.controlTempo(m_value);
     cfa:	ldr	r3, [r4, #20]
     cfc:	bge.w	f14 <loop+0xa80>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d00:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d02:	movs	r1, #6

        if (ppqn >= 6) {
     d04:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d06:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     d08:	ble.n	d0e <loop+0x87a>
          ppqn = 0;
     d0a:	movs	r2, #0
     d0c:	str	r2, [r3, #8]
     d0e:	ldr	r0, [r4, #4]
     d10:	b.n	84c <loop+0x3b8>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     d12:	cmp.w	r0, #400	; 0x190
     d16:	ldr	r3, [r4, #20]
     d18:	bge.w	f84 <loop+0xaf0>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d1c:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d1e:	movs	r1, #6

        if (ppqn >= 6) {
     d20:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d22:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     d24:	ble.n	d2a <loop+0x896>
          ppqn = 0;
     d26:	movs	r2, #0
     d28:	str	r2, [r3, #8]
     d2a:	ldr	r0, [r4, #4]
     d2c:	b.n	900 <loop+0x46c>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     d2e:	cmp.w	r0, #400	; 0x190
     d32:	ldr	r3, [r4, #20]
     d34:	bge.w	f30 <loop+0xa9c>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d38:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d3a:	movs	r1, #6

        if (ppqn >= 6) {
     d3c:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d3e:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     d40:	ble.n	d46 <loop+0x8b2>
          ppqn = 0;
     d42:	movs	r2, #0
     d44:	str	r2, [r3, #8]
     d46:	ldr	r0, [r4, #4]
     d48:	b.n	798 <loop+0x304>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     d4a:	cmp.w	r0, #400	; 0x190
     d4e:	ldr	r3, [r4, #20]
     d50:	bge.w	f68 <loop+0xad4>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d54:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d56:	movs	r1, #6

        if (ppqn >= 6) {
     d58:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d5a:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     d5c:	ble.n	d62 <loop+0x8ce>
          ppqn = 0;
     d5e:	movs	r2, #0
     d60:	str	r2, [r3, #8]
     d62:	ldr	r0, [r4, #4]
     d64:	b.n	8a6 <loop+0x412>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
     d66:	cmp.w	r0, #400	; 0x190
     d6a:	ldr	r3, [r4, #20]
     d6c:	bge.w	f4c <loop+0xab8>
        max_ppqn = 6;

        if (ppqn >= 6) {
     d70:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d72:	movs	r1, #6

        if (ppqn >= 6) {
     d74:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     d76:	str	r1, [r3, #4]

        if (ppqn >= 6) {
     d78:	ble.n	d7e <loop+0x8ea>
          ppqn = 0;
     d7a:	movs	r2, #0
     d7c:	str	r2, [r3, #8]
     d7e:	ldr	r0, [r4, #4]
     d80:	b.n	7f2 <loop+0x35e>
     d82:	nop
     d84:	.word	0x1fff1d38
     d88:	.word	0x000047c0
     d8c:	.word	0x1fff187c
     d90:	.word	0x1fff0c70
     d94:	.word	0x1fff17f0
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
     d98:	ldr	r5, [pc, #700]	; (1058 <loop+0xbc4>)

      if (m_sequence.stepIsOver(ppqn)) {
     d9a:	ldr	r2, [r5, #12]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
     d9c:	ldr	r3, [r5, #8]
        }
      }
    };

    boolean stepIsOver (int ppqn) {
      return ppqn >= m_steps[m_currentStep]->m_length;
     d9e:	ldr	r1, [r2, #0]
     da0:	add.w	r2, r2, r1, lsl #2
     da4:	adds	r3, #1
     da6:	ldr	r2, [r2, #4]
     da8:	str	r3, [r5, #8]

      if (m_sequence.stepIsOver(ppqn)) {
     daa:	ldr	r2, [r2, #16]
     dac:	cmp	r3, r2
     dae:	bge.w	1378 <loop+0xee4>
        // here i have to check the note length
        // of the active note to see if i do the stop step
        m_sequence.stopCurrentStep();
      }

      if (ppqn == max_ppqn) {
     db2:	ldr	r2, [r5, #4]
     db4:	ldr	r1, [pc, #672]	; (1058 <loop+0xbc4>)
     db6:	cmp	r2, r3
     db8:	bne.w	4a6 <loop+0x12>
        m_sequence.doStep(); 
     dbc:	ldr	r6, [r1, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     dbe:	ldr	r4, [pc, #668]	; (105c <loop+0xbc8>)
        Serial.println("PITCH");
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
     dc0:	ldr	r3, [r6, #0]
     dc2:	add.w	r3, r6, r3, lsl #2
     dc6:	ldr	r7, [r3, #20]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     dc8:	ldrb.w	r8, [r7]
     dcc:	mov	r0, r8
     dce:	bl	1ec8 <digitalRead>
     dd2:	clz	r1, r0
     dd6:	lsrs	r1, r1, #5
     dd8:	mov	r0, r8
     dda:	bl	1ebc <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
     dde:	ldr	r3, [r6, #0]
     de0:	ldr	r2, [r4, #0]
     de2:	str	r2, [sp, #0]
     de4:	add.w	r2, r6, r3, lsl #2
      blinking = true;
     de8:	movs	r1, #1
     dea:	ldr	r2, [r2, #4]
     dec:	strb	r1, [r7, #16]
      blinkingCounter = times;
     dee:	movs	r1, #0
     df0:	str	r1, [r7, #20]
     df2:	ldrb	r1, [r2, #4]
	return ret;
     df4:	ldr	r0, [sp, #0]
      lastBlink = millis();  
     df6:	str	r0, [r7, #8]
     df8:	cmp	r1, #0
     dfa:	bne.w	14a0 <loop+0x100c>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
     dfe:	ldrb.w	r2, [r6, #45]	; 0x2d
     e02:	cmp	r2, #0
     e04:	bne.w	1388 <loop+0xef4>
        m_currentStep++;
     e08:	adds	r3, #1
     e0a:	cmp	r3, #3
     e0c:	it	gt
     e0e:	movgt	r3, #0
     e10:	str	r3, [r6, #0]
        ppqn = 0;
     e12:	movs	r3, #0
     e14:	str	r3, [r5, #8]
     e16:	b.w	4a8 <loop+0x14>
      }
    };

    void startPPQN () {
      m_state = true;
     e1a:	ldr	r5, [pc, #572]	; (1058 <loop+0xbc4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e1c:	ldr	r4, [pc, #572]	; (105c <loop+0xbc8>)
      ppqn = 0;
      m_sequence.doStep(); 
     e1e:	ldr	r6, [r5, #12]
        Serial.println("PITCH");
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
     e20:	ldr	r3, [r6, #0]
     e22:	add.w	r3, r6, r3, lsl #2
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     e26:	mov.w	r9, #1
     e2a:	ldr	r7, [r3, #20]
     e2c:	strb.w	r9, [r5]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     e30:	ldrb.w	sl, [r7]
      ppqn = 0;
     e34:	mov.w	r8, #0
     e38:	mov	r0, sl
     e3a:	str.w	r8, [r5, #8]
     e3e:	bl	1ec8 <digitalRead>
     e42:	clz	r1, r0
     e46:	lsrs	r1, r1, #5
     e48:	mov	r0, sl
     e4a:	bl	1ebc <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
     e4e:	ldr	r3, [r6, #0]
     e50:	ldr	r2, [r4, #0]
     e52:	str	r2, [sp, #4]
     e54:	add.w	r2, r6, r3, lsl #2
	return ret;
     e58:	ldr	r0, [sp, #4]
     e5a:	ldr	r2, [r2, #4]
      blinking = true;
     e5c:	strb.w	r9, [r7, #16]
     e60:	ldrb	r1, [r2, #4]
      blinkingCounter = times;
     e62:	str.w	r8, [r7, #20]
      lastBlink = millis();  
     e66:	str	r0, [r7, #8]
     e68:	cmp	r1, #0
     e6a:	bne.w	1352 <loop+0xebe>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
     e6e:	ldrb.w	r2, [r6, #45]	; 0x2d
     e72:	cmp	r2, #0
     e74:	beq.w	fa0 <loop+0xb0c>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
     e78:	subs	r2, r3, #1
     e7a:	cmp	r3, #0
     e7c:	beq.w	1382 <loop+0xeee>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
     e80:	str	r2, [r6, #0]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
     e82:	ldr	r3, [r5, #12]
     e84:	ldr	r3, [r3, #40]	; 0x28
     e86:	b.n	c4c <loop+0x7b8>
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
     e88:	ldr	r2, [r4, #12]
     e8a:	ldr	r3, [r4, #16]
     e8c:	add.w	r3, r3, r2, lsl #2
    };

    void controlVelocity (int value) {
      int newValue = map(value, 0, 1023, 127, 63);
      m_velocity = newValue;
     e90:	ldr	r2, [r3, #4]
     e92:	subs.w	r3, r0, r0, lsl #6
     e96:	it	mi
     e98:	addwmi	r3, r3, #1023	; 0x3ff
     e9c:	asrs	r3, r3, #10
     e9e:	adds	r3, #127	; 0x7f
     ea0:	str	r3, [r2, #12]
     ea2:	b.n	798 <loop+0x304>
     ea4:	ldr	r2, [r4, #12]
     ea6:	ldr	r3, [r4, #16]
     ea8:	add.w	r3, r3, r2, lsl #2
     eac:	ldr	r2, [r3, #4]
     eae:	subs.w	r3, r0, r0, lsl #6
     eb2:	it	mi
     eb4:	addwmi	r3, r3, #1023	; 0x3ff
     eb8:	asrs	r3, r3, #10
     eba:	adds	r3, #127	; 0x7f
     ebc:	str	r3, [r2, #12]
     ebe:	b.n	7f2 <loop+0x35e>
     ec0:	ldr	r2, [r4, #12]
     ec2:	ldr	r3, [r4, #16]
     ec4:	add.w	r3, r3, r2, lsl #2
     ec8:	ldr	r2, [r3, #4]
     eca:	subs.w	r3, r0, r0, lsl #6
     ece:	it	mi
     ed0:	addwmi	r3, r3, #1023	; 0x3ff
     ed4:	asrs	r3, r3, #10
     ed6:	adds	r3, #127	; 0x7f
     ed8:	str	r3, [r2, #12]
     eda:	b.n	8a6 <loop+0x412>
     edc:	ldr	r2, [r4, #12]
     ede:	ldr	r3, [r4, #16]
     ee0:	add.w	r3, r3, r2, lsl #2
     ee4:	ldr	r2, [r3, #4]
     ee6:	subs.w	r3, r0, r0, lsl #6
     eea:	it	mi
     eec:	addwmi	r3, r3, #1023	; 0x3ff
     ef0:	asrs	r3, r3, #10
     ef2:	adds	r3, #127	; 0x7f
     ef4:	str	r3, [r2, #12]
     ef6:	b.n	900 <loop+0x46c>
     ef8:	ldr	r2, [r4, #12]
     efa:	ldr	r3, [r4, #16]
     efc:	add.w	r3, r3, r2, lsl #2
     f00:	ldr	r2, [r3, #4]
     f02:	subs.w	r3, r0, r0, lsl #6
     f06:	it	mi
     f08:	addwmi	r3, r3, #1023	; 0x3ff
     f0c:	asrs	r3, r3, #10
     f0e:	adds	r3, #127	; 0x7f
     f10:	str	r3, [r2, #12]
     f12:	b.n	84c <loop+0x3b8>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     f14:	sub.w	r2, r0, #400	; 0x190
     f18:	cmp.w	r2, #400	; 0x190
     f1c:	bcc.n	fe4 <loop+0xb50>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     f1e:	sub.w	r2, r0, #800	; 0x320
     f22:	cmp	r2, #223	; 0xdf
     f24:	bhi.w	84c <loop+0x3b8>
        max_ppqn = 12;
     f28:	movs	r2, #12
     f2a:	str	r2, [r3, #4]
     f2c:	ldr	r0, [r4, #4]
     f2e:	b.n	84c <loop+0x3b8>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     f30:	sub.w	r2, r0, #400	; 0x190
     f34:	cmp.w	r2, #400	; 0x190
     f38:	bcc.n	fd6 <loop+0xb42>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     f3a:	sub.w	r2, r0, #800	; 0x320
     f3e:	cmp	r2, #223	; 0xdf
     f40:	bhi.w	798 <loop+0x304>
        max_ppqn = 12;
     f44:	movs	r2, #12
     f46:	str	r2, [r3, #4]
     f48:	ldr	r0, [r4, #4]
     f4a:	b.n	798 <loop+0x304>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     f4c:	sub.w	r2, r0, #400	; 0x190
     f50:	cmp.w	r2, #400	; 0x190
     f54:	bcc.n	fc8 <loop+0xb34>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     f56:	sub.w	r2, r0, #800	; 0x320
     f5a:	cmp	r2, #223	; 0xdf
     f5c:	bhi.w	7f2 <loop+0x35e>
        max_ppqn = 12;
     f60:	movs	r2, #12
     f62:	str	r2, [r3, #4]
     f64:	ldr	r0, [r4, #4]
     f66:	b.n	7f2 <loop+0x35e>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     f68:	sub.w	r2, r0, #400	; 0x190
     f6c:	cmp.w	r2, #400	; 0x190
     f70:	bcc.n	fba <loop+0xb26>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     f72:	sub.w	r2, r0, #800	; 0x320
     f76:	cmp	r2, #223	; 0xdf
     f78:	bhi.w	8a6 <loop+0x412>
        max_ppqn = 12;
     f7c:	movs	r2, #12
     f7e:	str	r2, [r3, #4]
     f80:	ldr	r0, [r4, #4]
     f82:	b.n	8a6 <loop+0x412>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     f84:	sub.w	r2, r0, #400	; 0x190
     f88:	cmp.w	r2, #400	; 0x190
     f8c:	bcc.n	fac <loop+0xb18>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     f8e:	sub.w	r2, r0, #800	; 0x320
     f92:	cmp	r2, #223	; 0xdf
     f94:	bhi.w	900 <loop+0x46c>
        max_ppqn = 12;
     f98:	movs	r2, #12
     f9a:	str	r2, [r3, #4]
     f9c:	ldr	r0, [r4, #4]
     f9e:	b.n	900 <loop+0x46c>
      if (m_steps[m_currentStep]->m_state) {
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
        m_currentStep++;
     fa0:	adds	r3, #1
     fa2:	cmp	r3, #3
     fa4:	it	gt
     fa6:	movgt	r3, #0
     fa8:	str	r3, [r6, #0]
     faa:	b.n	e82 <loop+0x9ee>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
     fac:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fae:	movs	r1, #8

        if (ppqn >= 8) {
     fb0:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fb2:	str	r1, [r3, #4]

        if (ppqn >= 8) {
     fb4:	bgt.w	d26 <loop+0x892>
     fb8:	b.n	d2a <loop+0x896>
     fba:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fbc:	movs	r1, #8

        if (ppqn >= 8) {
     fbe:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fc0:	str	r1, [r3, #4]

        if (ppqn >= 8) {
     fc2:	bgt.w	d5e <loop+0x8ca>
     fc6:	b.n	d62 <loop+0x8ce>
     fc8:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fca:	movs	r1, #8

        if (ppqn >= 8) {
     fcc:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fce:	str	r1, [r3, #4]

        if (ppqn >= 8) {
     fd0:	bgt.w	d7a <loop+0x8e6>
     fd4:	b.n	d7e <loop+0x8ea>
     fd6:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fd8:	movs	r1, #8

        if (ppqn >= 8) {
     fda:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fdc:	str	r1, [r3, #4]

        if (ppqn >= 8) {
     fde:	bgt.w	d42 <loop+0x8ae>
     fe2:	b.n	d46 <loop+0x8b2>
     fe4:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fe6:	movs	r1, #8

        if (ppqn >= 8) {
     fe8:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     fea:	str	r1, [r3, #4]

        if (ppqn >= 8) {
     fec:	bgt.w	d0a <loop+0x876>
     ff0:	b.n	d0e <loop+0x87a>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
     ff2:	ldr	r3, [r7, #24]
     ff4:	ldmia.w	r3, {r0, r1}
    };

    void toggle () {
      m_state = !m_state;
     ff8:	clz	r1, r1
     ffc:	lsrs	r1, r1, #5
     ffe:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1000:	uxtb	r0, r0
    1002:	bl	1ebc <digitalWrite>
    1006:	ldr	r3, [r7, #28]
    1008:	ldr.w	r9, [r3, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    100c:	ldrb.w	sl, [r9]
    1010:	mov	r0, sl
    1012:	bl	1ec8 <digitalRead>
    1016:	clz	r1, r0
    101a:	lsrs	r1, r1, #5
    101c:	mov	r0, sl
    101e:	bl	1ebc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1022:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1026:	ldr	r2, [pc, #56]	; (1060 <loop+0xbcc>)
    1028:	str	r3, [sp, #92]	; 0x5c
	return ret;
    102a:	ldr	r1, [sp, #92]	; 0x5c
    102c:	ldrb	r3, [r2, #0]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    102e:	str.w	r1, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1032:	mov.w	lr, #1
      blinkingCounter = times;
    1036:	movs	r1, #3
    1038:	str.w	r1, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    103c:	strb.w	lr, [r9, #16]
    1040:	cmp	r3, #0
    1042:	beq.w	141c <loop+0xf88>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
    1046:	cmp	r3, #1
    1048:	beq.w	1514 <loop+0x1080>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
      } else if (currentMode == NOTELENGTH) {
    104c:	cmp	r3, #2
    104e:	beq.w	147c <loop+0xfe8>
    1052:	ldr	r2, [r7, #12]
    1054:	b.w	5ae <loop+0x11a>
    1058:	.word	0x1fff17f0
    105c:	.word	0x1fff187c
    1060:	.word	0x1fff1800
    1064:	ldr	r3, [r7, #24]
    1066:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    106a:	clz	r1, r1
    106e:	lsrs	r1, r1, #5
    1070:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1072:	uxtb	r0, r0
    1074:	bl	1ebc <digitalWrite>
    1078:	ldr	r3, [r7, #28]
    107a:	ldr.w	r9, [r3, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    107e:	ldrb.w	sl, [r9]
    1082:	mov	r0, sl
    1084:	bl	1ec8 <digitalRead>
    1088:	clz	r1, r0
    108c:	lsrs	r1, r1, #5
    108e:	mov	r0, sl
    1090:	bl	1ebc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1094:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1098:	ldr	r2, [pc, #808]	; (13c4 <loop+0xf30>)
    109a:	str	r3, [sp, #88]	; 0x58
	return ret;
    109c:	ldr	r1, [sp, #88]	; 0x58
    109e:	ldrb	r3, [r2, #0]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    10a0:	str.w	r1, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    10a4:	mov.w	lr, #1
      blinkingCounter = times;
    10a8:	movs	r1, #3
    10aa:	str.w	r1, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    10ae:	strb.w	lr, [r9, #16]
    10b2:	cmp	r3, #0
    10b4:	beq.w	13ac <loop+0xf18>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
    10b8:	cmp	r3, #1
    10ba:	beq.w	14cc <loop+0x1038>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
      } else if (currentMode == NOTELENGTH) {
    10be:	cmp	r3, #2
    10c0:	beq.w	148e <loop+0xffa>
    10c4:	ldr	r2, [r7, #12]
    10c6:	b.w	56c <loop+0xd8>
    10ca:	ldr	r3, [r7, #24]
    10cc:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    10d0:	clz	r1, r1
    10d4:	lsrs	r1, r1, #5
    10d6:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    10d8:	uxtb	r0, r0
    10da:	bl	1ebc <digitalWrite>
    10de:	ldr	r3, [r7, #28]
    10e0:	ldr.w	r9, [r3, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    10e4:	ldrb.w	sl, [r9]
    10e8:	mov	r0, sl
    10ea:	bl	1ec8 <digitalRead>
    10ee:	clz	r1, r0
    10f2:	lsrs	r1, r1, #5
    10f4:	mov	r0, sl
    10f6:	bl	1ebc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10fa:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    10fe:	ldr	r2, [pc, #708]	; (13c4 <loop+0xf30>)
    1100:	str	r3, [sp, #96]	; 0x60
	return ret;
    1102:	ldr	r1, [sp, #96]	; 0x60
    1104:	ldrb	r3, [r2, #0]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1106:	str.w	r1, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    110a:	mov.w	lr, #1
      blinkingCounter = times;
    110e:	movs	r1, #3
    1110:	str.w	r1, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1114:	strb.w	lr, [r9, #16]
    1118:	cmp	r3, #0
    111a:	beq.w	1394 <loop+0xf00>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
    111e:	cmp	r3, #1
    1120:	beq.w	14e4 <loop+0x1050>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
      } else if (currentMode == NOTELENGTH) {
    1124:	cmp	r3, #2
    1126:	beq.w	1458 <loop+0xfc4>
    112a:	ldr	r2, [r7, #12]
    112c:	b.w	5f0 <loop+0x15c>
    1130:	ldr	r3, [r7, #24]
    1132:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1136:	clz	r1, r1
    113a:	lsrs	r1, r1, #5
    113c:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    113e:	uxtb	r0, r0
    1140:	bl	1ebc <digitalWrite>
    1144:	ldr	r3, [r7, #28]
    1146:	ldr.w	r9, [r3, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    114a:	ldrb.w	sl, [r9]
    114e:	mov	r0, sl
    1150:	bl	1ec8 <digitalRead>
    1154:	clz	r1, r0
    1158:	lsrs	r1, r1, #5
    115a:	mov	r0, sl
    115c:	bl	1ebc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1160:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1164:	ldr	r2, [pc, #604]	; (13c4 <loop+0xf30>)
    1166:	str	r3, [sp, #100]	; 0x64
	return ret;
    1168:	ldr	r1, [sp, #100]	; 0x64
    116a:	ldrb	r3, [r2, #0]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    116c:	str.w	r1, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1170:	mov.w	lr, #1
      blinkingCounter = times;
    1174:	movs	r1, #3
    1176:	str.w	r1, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    117a:	strb.w	lr, [r9, #16]
    117e:	cmp	r3, #0
    1180:	beq.w	13ec <loop+0xf58>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
    1184:	cmp	r3, #1
    1186:	beq.w	1544 <loop+0x10b0>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
      } else if (currentMode == NOTELENGTH) {
    118a:	cmp	r3, #2
    118c:	beq.w	1434 <loop+0xfa0>
    1190:	ldr	r2, [r7, #12]
    1192:	b.w	664 <loop+0x1d0>
    1196:	ldr	r3, [r7, #24]
    1198:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    119c:	clz	r1, r1
    11a0:	lsrs	r1, r1, #5
    11a2:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    11a4:	uxtb	r0, r0
    11a6:	bl	1ebc <digitalWrite>
    11aa:	ldr	r3, [r7, #28]
    11ac:	ldr.w	r9, [r3, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    11b0:	ldrb.w	sl, [r9]
    11b4:	mov	r0, sl
    11b6:	bl	1ec8 <digitalRead>
    11ba:	clz	r1, r0
    11be:	lsrs	r1, r1, #5
    11c0:	mov	r0, sl
    11c2:	bl	1ebc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11c6:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    11ca:	ldr	r2, [pc, #504]	; (13c4 <loop+0xf30>)
    11cc:	str	r3, [sp, #84]	; 0x54
	return ret;
    11ce:	ldr	r1, [sp, #84]	; 0x54
    11d0:	ldrb	r3, [r2, #0]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    11d2:	str.w	r1, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    11d6:	mov.w	lr, #1
      blinkingCounter = times;
    11da:	movs	r1, #3
    11dc:	str.w	r1, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    11e0:	strb.w	lr, [r9, #16]
    11e4:	cmp	r3, #0
    11e6:	beq.w	1404 <loop+0xf70>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
    11ea:	cmp	r3, #1
    11ec:	beq.w	14fc <loop+0x1068>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
      } else if (currentMode == NOTELENGTH) {
    11f0:	cmp	r3, #2
    11f2:	beq.w	1446 <loop+0xfb2>
    11f6:	ldr	r2, [r7, #12]
    11f8:	b.w	52a <loop+0x96>
    11fc:	ldr	r3, [r7, #24]
    11fe:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1202:	clz	r1, r1
    1206:	lsrs	r1, r1, #5
    1208:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    120a:	uxtb	r0, r0
    120c:	bl	1ebc <digitalWrite>
    1210:	ldr	r3, [r7, #28]
    1212:	ldr.w	r9, [r3, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1216:	ldrb.w	sl, [r9]
    121a:	mov	r0, sl
    121c:	bl	1ec8 <digitalRead>
    1220:	clz	r1, r0
    1224:	lsrs	r1, r1, #5
    1226:	mov	r0, sl
    1228:	bl	1ebc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    122c:	ldr.w	r3, [r8]
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1230:	ldr	r2, [pc, #400]	; (13c4 <loop+0xf30>)
    1232:	str	r3, [sp, #80]	; 0x50
	return ret;
    1234:	ldr	r1, [sp, #80]	; 0x50
    1236:	ldrb	r3, [r2, #0]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1238:	str.w	r1, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    123c:	mov.w	lr, #1
      blinkingCounter = times;
    1240:	movs	r1, #3
    1242:	str.w	r1, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1246:	strb.w	lr, [r9, #16]
    124a:	cmp	r3, #0
    124c:	beq.w	13d4 <loop+0xf40>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
    1250:	cmp	r3, #1
    1252:	beq.w	152c <loop+0x1098>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
      } else if (currentMode == NOTELENGTH) {
    1256:	cmp	r3, #2
    1258:	beq.w	146a <loop+0xfd6>
    125c:	ldr	r2, [r7, #12]
    125e:	b.w	4e8 <loop+0x54>
        m_sequence.toggleGlobalMode();
      } else if (m_state == LOW && m_reverseButton) {
        m_led.toggle();
    1262:	ldr	r3, [r7, #24]
    1264:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1268:	clz	r1, r1
    126c:	lsrs	r1, r1, #5
    126e:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1270:	uxtb	r0, r0
    1272:	bl	1ebc <digitalWrite>
    1276:	ldr	r1, [r7, #28]
    1278:	ldr	r2, [r7, #12]
    void resetStep () {
      m_currentStep = 0;
    };

    void reverse () {
      m_reverse = !m_reverse;
    127a:	ldrb.w	r3, [r1, #45]	; 0x2d
    127e:	eor.w	r3, r3, #1
    1282:	strb.w	r3, [r1, #45]	; 0x2d
    1286:	b.w	664 <loop+0x1d0>
    128a:	ldr	r3, [r7, #24]
    128c:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1290:	clz	r1, r1
    1294:	lsrs	r1, r1, #5
    1296:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1298:	uxtb	r0, r0
    129a:	bl	1ebc <digitalWrite>
    129e:	ldr	r1, [r7, #28]
    12a0:	ldr	r2, [r7, #12]
    12a2:	ldrb.w	r3, [r1, #45]	; 0x2d
    12a6:	eor.w	r3, r3, #1
    12aa:	strb.w	r3, [r1, #45]	; 0x2d
    12ae:	b.w	4e8 <loop+0x54>
    12b2:	ldr	r3, [r7, #24]
    12b4:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    12b8:	clz	r1, r1
    12bc:	lsrs	r1, r1, #5
    12be:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    12c0:	uxtb	r0, r0
    12c2:	bl	1ebc <digitalWrite>
    12c6:	ldr	r1, [r7, #28]
    12c8:	ldr	r2, [r7, #12]
    12ca:	ldrb.w	r3, [r1, #45]	; 0x2d
    12ce:	eor.w	r3, r3, #1
    12d2:	strb.w	r3, [r1, #45]	; 0x2d
    12d6:	b.w	5ae <loop+0x11a>
    12da:	ldr	r3, [r7, #24]
    12dc:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    12e0:	clz	r1, r1
    12e4:	lsrs	r1, r1, #5
    12e6:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    12e8:	uxtb	r0, r0
    12ea:	bl	1ebc <digitalWrite>
    12ee:	ldr	r1, [r7, #28]
    12f0:	ldr	r2, [r7, #12]
    12f2:	ldrb.w	r3, [r1, #45]	; 0x2d
    12f6:	eor.w	r3, r3, #1
    12fa:	strb.w	r3, [r1, #45]	; 0x2d
    12fe:	b.w	56c <loop+0xd8>
    1302:	ldr	r3, [r7, #24]
    1304:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1308:	clz	r1, r1
    130c:	lsrs	r1, r1, #5
    130e:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1310:	uxtb	r0, r0
    1312:	bl	1ebc <digitalWrite>
    1316:	ldr	r1, [r7, #28]
    1318:	ldr	r2, [r7, #12]
    131a:	ldrb.w	r3, [r1, #45]	; 0x2d
    131e:	eor.w	r3, r3, #1
    1322:	strb.w	r3, [r1, #45]	; 0x2d
    1326:	b.w	5f0 <loop+0x15c>
    132a:	ldr	r3, [r7, #24]
    132c:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1330:	clz	r1, r1
    1334:	lsrs	r1, r1, #5
    1336:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1338:	uxtb	r0, r0
    133a:	bl	1ebc <digitalWrite>
    133e:	ldr	r1, [r7, #28]
    1340:	ldr	r2, [r7, #12]
    1342:	ldrb.w	r3, [r1, #45]	; 0x2d
    1346:	eor.w	r3, r3, #1
    134a:	strb.w	r3, [r1, #45]	; 0x2d
    134e:	b.w	52a <loop+0x96>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1352:	ldr	r0, [r2, #8]
    1354:	ldr	r3, [r2, #12]
    1356:	lsls	r0, r0, #16
    1358:	lsls	r3, r3, #24
    135a:	and.w	r3, r3, #2130706432	; 0x7f000000
    135e:	and.w	r0, r0, #8323072	; 0x7f0000
    1362:	orrs	r0, r3
    1364:	orr.w	r0, r0, #40704	; 0x9f00
    1368:	orr.w	r0, r0, #9
    136c:	bl	2148 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1370:	bl	21e4 <usb_midi_flush_output>
    1374:	ldr	r3, [r6, #0]
    1376:	b.n	e6e <loop+0x9da>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1378:	ldr	r0, [pc, #76]	; (13c8 <loop+0xf34>)
    137a:	bl	2148 <usb_midi_write_packed>
    137e:	ldr	r3, [r5, #8]
    1380:	b.n	db2 <loop+0x91e>
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
          m_currentStep = 3;
    1382:	movs	r3, #3
    1384:	str	r3, [r6, #0]
    1386:	b.n	e82 <loop+0x9ee>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    1388:	subs	r2, r3, #1
    138a:	cmp	r3, #0
    138c:	beq.w	14c6 <loop+0x1032>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    1390:	str	r2, [r6, #0]
    1392:	b.n	e12 <loop+0x97e>
    1394:	movs	r1, #8
    1396:	ldr	r0, [pc, #52]	; (13cc <loop+0xf38>)
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1398:	strb.w	lr, [r2]
    139c:	bl	18ac <usb_serial_write>
    13a0:	ldr	r0, [pc, #44]	; (13d0 <loop+0xf3c>)
    13a2:	bl	3420 <Print::println()>
    13a6:	ldr	r2, [r7, #12]
    13a8:	b.w	5f0 <loop+0x15c>
    13ac:	movs	r1, #8
    13ae:	ldr	r0, [pc, #28]	; (13cc <loop+0xf38>)
    13b0:	strb.w	lr, [r2]
    13b4:	bl	18ac <usb_serial_write>
    13b8:	ldr	r0, [pc, #20]	; (13d0 <loop+0xf3c>)
    13ba:	bl	3420 <Print::println()>
    13be:	ldr	r2, [r7, #12]
    13c0:	b.w	56c <loop+0xd8>
    13c4:	.word	0x1fff1800
    13c8:	.word	0x7f7bbf0b
    13cc:	.word	0x000047e4
    13d0:	.word	0x1fff0c70
    13d4:	movs	r1, #8
    13d6:	ldr	r0, [pc, #388]	; (155c <loop+0x10c8>)
    13d8:	strb.w	lr, [r2]
    13dc:	bl	18ac <usb_serial_write>
    13e0:	ldr	r0, [pc, #380]	; (1560 <loop+0x10cc>)
    13e2:	bl	3420 <Print::println()>
    13e6:	ldr	r2, [r7, #12]
    13e8:	b.w	4e8 <loop+0x54>
    13ec:	movs	r1, #8
    13ee:	ldr	r0, [pc, #364]	; (155c <loop+0x10c8>)
    13f0:	strb.w	lr, [r2]
    13f4:	bl	18ac <usb_serial_write>
    13f8:	ldr	r0, [pc, #356]	; (1560 <loop+0x10cc>)
    13fa:	bl	3420 <Print::println()>
    13fe:	ldr	r2, [r7, #12]
    1400:	b.w	664 <loop+0x1d0>
    1404:	movs	r1, #8
    1406:	ldr	r0, [pc, #340]	; (155c <loop+0x10c8>)
    1408:	strb.w	lr, [r2]
    140c:	bl	18ac <usb_serial_write>
    1410:	ldr	r0, [pc, #332]	; (1560 <loop+0x10cc>)
    1412:	bl	3420 <Print::println()>
    1416:	ldr	r2, [r7, #12]
    1418:	b.w	52a <loop+0x96>
    141c:	movs	r1, #8
    141e:	ldr	r0, [pc, #316]	; (155c <loop+0x10c8>)
    1420:	strb.w	lr, [r2]
    1424:	bl	18ac <usb_serial_write>
    1428:	ldr	r0, [pc, #308]	; (1560 <loop+0x10cc>)
    142a:	bl	3420 <Print::println()>
    142e:	ldr	r2, [r7, #12]
    1430:	b.w	5ae <loop+0x11a>
    1434:	movs	r1, #5
    1436:	ldr	r0, [pc, #300]	; (1564 <loop+0x10d0>)
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1438:	strb	r6, [r2, #0]
    143a:	bl	18ac <usb_serial_write>
    143e:	ldr	r0, [pc, #288]	; (1560 <loop+0x10cc>)
    1440:	bl	3420 <Print::println()>
    1444:	b.n	1190 <loop+0xcfc>
    1446:	movs	r1, #5
    1448:	ldr	r0, [pc, #280]	; (1564 <loop+0x10d0>)
    144a:	strb	r6, [r2, #0]
    144c:	bl	18ac <usb_serial_write>
    1450:	ldr	r0, [pc, #268]	; (1560 <loop+0x10cc>)
    1452:	bl	3420 <Print::println()>
    1456:	b.n	11f6 <loop+0xd62>
    1458:	movs	r1, #5
    145a:	ldr	r0, [pc, #264]	; (1564 <loop+0x10d0>)
    145c:	strb	r5, [r2, #0]
    145e:	bl	18ac <usb_serial_write>
    1462:	ldr	r0, [pc, #252]	; (1560 <loop+0x10cc>)
    1464:	bl	3420 <Print::println()>
    1468:	b.n	112a <loop+0xc96>
    146a:	movs	r1, #5
    146c:	ldr	r0, [pc, #244]	; (1564 <loop+0x10d0>)
    146e:	strb	r5, [r2, #0]
    1470:	bl	18ac <usb_serial_write>
    1474:	ldr	r0, [pc, #232]	; (1560 <loop+0x10cc>)
    1476:	bl	3420 <Print::println()>
    147a:	b.n	125c <loop+0xdc8>
    147c:	movs	r1, #5
    147e:	ldr	r0, [pc, #228]	; (1564 <loop+0x10d0>)
    1480:	strb	r6, [r2, #0]
    1482:	bl	18ac <usb_serial_write>
    1486:	ldr	r0, [pc, #216]	; (1560 <loop+0x10cc>)
    1488:	bl	3420 <Print::println()>
    148c:	b.n	1052 <loop+0xbbe>
    148e:	movs	r1, #5
    1490:	ldr	r0, [pc, #208]	; (1564 <loop+0x10d0>)
    1492:	strb	r5, [r2, #0]
    1494:	bl	18ac <usb_serial_write>
    1498:	ldr	r0, [pc, #196]	; (1560 <loop+0x10cc>)
    149a:	bl	3420 <Print::println()>
    149e:	b.n	10c4 <loop+0xc30>
    14a0:	ldr	r0, [r2, #8]
    14a2:	ldr	r3, [r2, #12]
    14a4:	lsls	r0, r0, #16
    14a6:	lsls	r3, r3, #24
    14a8:	and.w	r3, r3, #2130706432	; 0x7f000000
    14ac:	and.w	r0, r0, #8323072	; 0x7f0000
    14b0:	orrs	r0, r3
    14b2:	orr.w	r0, r0, #40704	; 0x9f00
    14b6:	orr.w	r0, r0, #9
    14ba:	bl	2148 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    14be:	bl	21e4 <usb_midi_flush_output>
    14c2:	ldr	r3, [r6, #0]
    14c4:	b.n	dfe <loop+0x96a>
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
          m_currentStep = 3;
    14c6:	movs	r3, #3
    14c8:	str	r3, [r6, #0]
    14ca:	b.n	e12 <loop+0x97e>
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    14cc:	movs	r3, #2
    14ce:	movs	r1, #10
    14d0:	ldr	r0, [pc, #148]	; (1568 <loop+0x10d4>)
    14d2:	strb	r3, [r2, #0]
    14d4:	bl	18ac <usb_serial_write>
    14d8:	ldr	r0, [pc, #132]	; (1560 <loop+0x10cc>)
    14da:	bl	3420 <Print::println()>
    14de:	ldr	r2, [r7, #12]
    14e0:	b.w	56c <loop+0xd8>
    14e4:	movs	r3, #2
    14e6:	movs	r1, #10
    14e8:	ldr	r0, [pc, #124]	; (1568 <loop+0x10d4>)
    14ea:	strb	r3, [r2, #0]
    14ec:	bl	18ac <usb_serial_write>
    14f0:	ldr	r0, [pc, #108]	; (1560 <loop+0x10cc>)
    14f2:	bl	3420 <Print::println()>
    14f6:	ldr	r2, [r7, #12]
    14f8:	b.w	5f0 <loop+0x15c>
    14fc:	movs	r3, #2
    14fe:	movs	r1, #10
    1500:	ldr	r0, [pc, #100]	; (1568 <loop+0x10d4>)
    1502:	strb	r3, [r2, #0]
    1504:	bl	18ac <usb_serial_write>
    1508:	ldr	r0, [pc, #84]	; (1560 <loop+0x10cc>)
    150a:	bl	3420 <Print::println()>
    150e:	ldr	r2, [r7, #12]
    1510:	b.w	52a <loop+0x96>
    1514:	movs	r3, #2
    1516:	movs	r1, #10
    1518:	ldr	r0, [pc, #76]	; (1568 <loop+0x10d4>)
    151a:	strb	r3, [r2, #0]
    151c:	bl	18ac <usb_serial_write>
    1520:	ldr	r0, [pc, #60]	; (1560 <loop+0x10cc>)
    1522:	bl	3420 <Print::println()>
    1526:	ldr	r2, [r7, #12]
    1528:	b.w	5ae <loop+0x11a>
    152c:	movs	r3, #2
    152e:	movs	r1, #10
    1530:	ldr	r0, [pc, #52]	; (1568 <loop+0x10d4>)
    1532:	strb	r3, [r2, #0]
    1534:	bl	18ac <usb_serial_write>
    1538:	ldr	r0, [pc, #36]	; (1560 <loop+0x10cc>)
    153a:	bl	3420 <Print::println()>
    153e:	ldr	r2, [r7, #12]
    1540:	b.w	4e8 <loop+0x54>
    1544:	movs	r3, #2
    1546:	movs	r1, #10
    1548:	ldr	r0, [pc, #28]	; (1568 <loop+0x10d4>)
    154a:	strb	r3, [r2, #0]
    154c:	bl	18ac <usb_serial_write>
    1550:	ldr	r0, [pc, #12]	; (1560 <loop+0x10cc>)
    1552:	bl	3420 <Print::println()>
    1556:	ldr	r2, [r7, #12]
    1558:	b.w	664 <loop+0x1d0>
    155c:	.word	0x000047e4
    1560:	.word	0x1fff0c70
    1564:	.word	0x000047fc
    1568:	.word	0x000047f0

0000156c <_GLOBAL__sub_I_currentMode>:
    156c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#include "controller.h"
#include "transport.h"
#include "step.h"


Led led1(3, LOW);
    1570:	movs	r2, #0
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
    1572:	sub	sp, #12
#include "controller.h"
#include "transport.h"
#include "step.h"


Led led1(3, LOW);
    1574:	movs	r1, #3
    1576:	ldr	r0, [pc, #512]	; (1778 <_GLOBAL__sub_I_currentMode+0x20c>)
    Led* m_leds[6];
    Modes m_mode;
    boolean m_reverse;

    Sequence (Step* steps[4], Led* leds[6]) {
      m_leds[0] = leds[0];
    1578:	ldr	r6, [pc, #512]	; (177c <_GLOBAL__sub_I_currentMode+0x210>)
    157a:	ldr	r5, [pc, #516]	; (1780 <_GLOBAL__sub_I_currentMode+0x214>)
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    157c:	ldr.w	r9, [pc, #600]	; 17d8 <_GLOBAL__sub_I_currentMode+0x26c>
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    1580:	ldr.w	r8, [pc, #600]	; 17dc <_GLOBAL__sub_I_currentMode+0x270>
    1584:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    1588:	movs	r2, #0
    158a:	movs	r1, #5
    158c:	ldr	r0, [pc, #500]	; (1784 <_GLOBAL__sub_I_currentMode+0x218>)
    158e:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    1592:	movs	r2, #0
    1594:	movs	r1, #7
    1596:	ldr	r0, [pc, #496]	; (1788 <_GLOBAL__sub_I_currentMode+0x21c>)
    1598:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    159c:	movs	r2, #0
    159e:	movs	r1, #9
    15a0:	ldr	r0, [pc, #488]	; (178c <_GLOBAL__sub_I_currentMode+0x220>)
    15a2:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    15a6:	movs	r2, #0
    15a8:	movs	r1, #11
    15aa:	ldr	r0, [pc, #484]	; (1790 <_GLOBAL__sub_I_currentMode+0x224>)
    15ac:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    15b0:	movs	r2, #0
    15b2:	movs	r1, #24
    15b4:	ldr	r0, [pc, #476]	; (1794 <_GLOBAL__sub_I_currentMode+0x228>)
    15b6:	bl	46c <Led::Led(int, int)>
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
    15ba:	adds	r2, r6, #4
    15bc:	ldmia	r2, {r2, r4, r7}
    15be:	ldr	r0, [pc, #472]	; (1798 <_GLOBAL__sub_I_currentMode+0x22c>)
    Modes m_mode;
    boolean m_reverse;

    Sequence (Step* steps[4], Led* leds[6]) {
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
    15c0:	str	r2, [r5, #24]
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
    15c2:	ldr	r2, [r6, #16]
    boolean m_reverse;

    Sequence (Step* steps[4], Led* leds[6]) {
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
    15c4:	str	r4, [r5, #28]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    15c6:	mov.w	lr, #100	; 0x64
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    15ca:	movs	r4, #0
      m_controller = controller;
      m_pitch = 38;
    15cc:	mov.w	sl, #38	; 0x26
      m_leds[3] = leds[3];
    15d0:	str	r7, [r5, #32]
      m_leds[4] = leds[4];
    15d2:	str	r2, [r5, #36]	; 0x24
      m_velocity = 100;
      m_length = 4;
    15d4:	movs	r7, #4
      m_leds[5] = leds[5];
    15d6:	ldr	r2, [r6, #20]

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    15d8:	str.w	lr, [r0, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    15dc:	ldr	r1, [pc, #444]	; (179c <_GLOBAL__sub_I_currentMode+0x230>)
    15de:	ldr	r3, [pc, #448]	; (17a0 <_GLOBAL__sub_I_currentMode+0x234>)
    15e0:	str	r2, [r5, #40]	; 0x28
    15e2:	str.w	r9, [r0]
    15e6:	ldr	r2, [pc, #444]	; (17a4 <_GLOBAL__sub_I_currentMode+0x238>)
      m_state = false;
    15e8:	strb	r4, [r0, #4]
      m_controller = controller;
      m_pitch = 38;
    15ea:	str.w	sl, [r0, #8]
      m_velocity = 100;
      m_length = 4;
    15ee:	str	r7, [r0, #16]
      m_steps[0] = steps[0];
    15f0:	ldr	r0, [pc, #436]	; (17a8 <_GLOBAL__sub_I_currentMode+0x23c>)
    Led* m_leds[6];
    Modes m_mode;
    boolean m_reverse;

    Sequence (Step* steps[4], Led* leds[6]) {
      m_leds[0] = leds[0];
    15f2:	ldr.w	ip, [r6]

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    15f6:	str.w	lr, [r1, #12]
    15fa:	str.w	lr, [r3, #12]
    15fe:	str.w	ip, [r5, #20]
    1602:	str.w	lr, [r2, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1606:	str.w	r9, [r1]
      m_state = false;
    160a:	strb	r4, [r1, #4]
      m_controller = controller;
      m_pitch = 38;
    160c:	str.w	sl, [r1, #8]
      m_velocity = 100;
      m_length = 4;
    1610:	str	r7, [r1, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    1612:	str.w	r9, [r3]
      m_state = false;
    1616:	strb	r4, [r3, #4]
      m_controller = controller;
      m_pitch = 38;
    1618:	str.w	sl, [r3, #8]
      m_velocity = 100;
      m_length = 4;
    161c:	str	r7, [r3, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    161e:	str.w	r9, [r2]
      m_state = false;
    1622:	strb	r4, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
    1624:	str.w	sl, [r2, #8]
      m_velocity = 100;
      m_length = 4;
    1628:	str	r7, [r2, #16]
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
    162a:	ldr	r2, [r0, #0]
    162c:	str	r2, [sp, #4]
      m_steps[1] = steps[1];
    162e:	ldr	r2, [r0, #4]
    1630:	str	r2, [r5, #8]
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
      m_steps[0] = steps[0];
    1632:	ldr	r2, [sp, #4]
    1634:	str	r2, [r5, #4]
      m_steps[1] = steps[1];
      m_steps[2] = steps[2];
    1636:	ldr	r2, [r0, #8]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1638:	ldr	r3, [pc, #368]	; (17ac <_GLOBAL__sub_I_currentMode+0x240>)
    163a:	str	r2, [r5, #12]
      m_id = id;
      m_pin = pin;
    163c:	mov.w	r9, #2
      m_steps[3] = steps[3];
    1640:	ldr	r2, [r0, #12]
    1642:	str	r2, [r5, #16]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1644:	mov.w	sl, #1
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1648:	mov	r1, r4
    164a:	movs	r2, #24
    164c:	mov	r0, r9
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    164e:	str.w	ip, [r3, #24]
      m_currentStep = 0;
    1652:	str	r4, [r5, #0]
      m_mode = PITCH;
    1654:	strb.w	r4, [r5, #44]	; 0x2c
      m_reverse = false;
    1658:	strb.w	r4, [r5, #45]	; 0x2d
    165c:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    165e:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    1660:	strb	r4, [r3, #17]
    1662:	str.w	r4, [r8, #8]
      m_state = false;
    1666:	strb.w	r4, [r8]
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    166a:	str.w	r2, [r8, #4]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    166e:	str.w	sl, [r3]
      m_pin = pin;
    1672:	str.w	r9, [r3, #32]
    1676:	str.w	r5, [r8, #12]
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    167a:	bl	1ee4 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    167e:	ldr	r3, [pc, #304]	; (17b0 <_GLOBAL__sub_I_currentMode+0x244>)
    1680:	ldr	r2, [r6, #4]
    1682:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1684:	mov	r1, r4
    1686:	mov	r0, r7
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1688:	movs	r2, #6
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    168a:	str	r5, [r3, #28]
      m_id = id;
    168c:	str.w	r9, [r3]
      m_pin = pin;
    1690:	str	r7, [r3, #32]
      m_shiftButton = shiftButton;
    1692:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    1694:	strb	r4, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1696:	str	r2, [sp, #4]
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1698:	bl	1ee4 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    169c:	ldr	r3, [pc, #276]	; (17b4 <_GLOBAL__sub_I_currentMode+0x248>)
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    169e:	ldr	r2, [sp, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    16a0:	ldr	r1, [r6, #8]
    16a2:	str	r1, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    16a4:	mov	r0, r2
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    16a6:	mov.w	fp, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    16aa:	mov	r1, r4
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    16ac:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    16ae:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    16b0:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    16b2:	strb	r4, [r3, #17]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    16b4:	str.w	fp, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    16b8:	bl	1ee4 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    16bc:	ldr	r3, [pc, #248]	; (17b8 <_GLOBAL__sub_I_currentMode+0x24c>)
    16be:	ldr	r1, [r6, #12]
    16c0:	str	r1, [r3, #24]
      m_id = id;
      m_pin = pin;
    16c2:	movs	r1, #8
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    16c4:	mov	r0, r1
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    16c6:	str	r1, [r3, #32]
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    16c8:	mov	r1, r4
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    16ca:	str	r5, [r3, #28]
      m_id = id;
    16cc:	str	r7, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
    16ce:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    16d0:	strb	r4, [r3, #17]

      pinMode(pin, INPUT);
    16d2:	bl	1ee4 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    16d6:	ldr	r3, [pc, #228]	; (17bc <_GLOBAL__sub_I_currentMode+0x250>)
    16d8:	ldr	r1, [r6, #16]
    16da:	str	r1, [r3, #24]
      m_id = id;
    16dc:	movs	r0, #5
      m_pin = pin;
    16de:	movs	r1, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    16e0:	str	r0, [r3, #0]
      m_pin = pin;
    16e2:	str	r1, [r3, #32]
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    16e4:	mov	r0, r1
    16e6:	mov	r1, r4
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    16e8:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    16ea:	strb.w	sl, [r3, #16]
      m_reverseButton = reverseButton;
    16ee:	strb	r4, [r3, #17]

      pinMode(pin, INPUT);
    16f0:	bl	1ee4 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    16f4:	ldr	r3, [pc, #200]	; (17c0 <_GLOBAL__sub_I_currentMode+0x254>)
      m_id = id;
    16f6:	ldr	r2, [sp, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    16f8:	ldr	r6, [r6, #20]
      m_id = id;
    16fa:	str	r2, [r3, #0]
      m_pin = pin;
    16fc:	movs	r2, #12
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    16fe:	mov	r0, r2
    1700:	mov	r1, r4
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    1702:	str	r6, [r3, #24]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1704:	ldr	r6, [pc, #188]	; (17c4 <_GLOBAL__sub_I_currentMode+0x258>)
    1706:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1708:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    170a:	strb.w	sl, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    170e:	str	r2, [r3, #32]
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    1710:	bl	1ee4 <pinMode>
    1714:	ldr	r0, [pc, #176]	; (17c8 <_GLOBAL__sub_I_currentMode+0x25c>)
    1716:	ldr	r1, [pc, #180]	; (17cc <_GLOBAL__sub_I_currentMode+0x260>)
    1718:	ldr	r2, [pc, #180]	; (17d0 <_GLOBAL__sub_I_currentMode+0x264>)
    171a:	ldr	r3, [pc, #184]	; (17d4 <_GLOBAL__sub_I_currentMode+0x268>)
      m_pin = pin;
      m_knobType = knobType;
    171c:	strb	r4, [r6, #24]
      m_id = id;
    171e:	str	r4, [r6, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1720:	mov.w	lr, #15
    1724:	movs	r4, #14
    1726:	strb	r4, [r6, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1728:	str	r5, [r6, #16]
    172a:	str.w	r8, [r6, #20]
    172e:	str	r5, [r0, #16]
      m_pin = pin;
    1730:	movs	r6, #16
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1732:	str.w	r8, [r0, #20]
      m_pin = pin;
      m_knobType = knobType;
    1736:	strb.w	sl, [r0, #24]
      m_id = id;
    173a:	str.w	sl, [r0, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    173e:	movs	r4, #17
    1740:	strb.w	lr, [r0]
    1744:	movs	r0, #18
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1746:	str	r5, [r1, #16]
    1748:	str.w	r8, [r1, #20]
      m_pin = pin;
      m_knobType = knobType;
    174c:	strb.w	r9, [r1, #24]
      m_id = id;
    1750:	str.w	r9, [r1, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1754:	strb	r6, [r1, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1756:	str	r5, [r2, #16]
    1758:	str.w	r8, [r2, #20]
      m_pin = pin;
      m_knobType = knobType;
    175c:	strb.w	fp, [r2, #24]
      m_id = id;
    1760:	str.w	fp, [r2, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1764:	strb	r4, [r2, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    1766:	str	r5, [r3, #16]
    1768:	str.w	r8, [r3, #20]
      m_pin = pin;
      m_knobType = knobType;
    176c:	strb	r7, [r3, #24]
      m_id = id;
    176e:	str	r7, [r3, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    1770:	strb	r0, [r3, #0]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
    1772:	add	sp, #12
    1774:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1778:	.word	0x1fff1804
    177c:	.word	0x1fff0c50
    1780:	.word	0x1fff17c0
    1784:	.word	0x1fff181c
    1788:	.word	0x1fff1834
    178c:	.word	0x1fff184c
    1790:	.word	0x1fff15d8
    1794:	.word	0x1fff15f0
    1798:	.word	0x1fff16e4
    179c:	.word	0x1fff16f8
    17a0:	.word	0x1fff170c
    17a4:	.word	0x1fff1720
    17a8:	.word	0x1fff0c40
    17ac:	.word	0x1fff160c
    17b0:	.word	0x1fff1630
    17b4:	.word	0x1fff1654
    17b8:	.word	0x1fff1678
    17bc:	.word	0x1fff169c
    17c0:	.word	0x1fff16c0
    17c4:	.word	0x1fff1734
    17c8:	.word	0x1fff1750
    17cc:	.word	0x1fff176c
    17d0:	.word	0x1fff1788
    17d4:	.word	0x1fff17a4
    17d8:	.word	0x1fff1608
    17dc:	.word	0x1fff17f0

000017e0 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    17e0:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    17e2:	ldr	r5, [pc, #60]	; (1820 <usb_serial_getchar+0x40>)
    17e4:	ldr	r0, [r5, #0]
    17e6:	cbz	r0, 1808 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    17e8:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    17ea:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    17ec:	adds	r1, r0, r3
    17ee:	adds	r3, #1
	if (i >= rx_packet->len) {
    17f0:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    17f2:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    17f4:	bcs.n	17fc <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    17f6:	strh	r3, [r0, #2]
	}
	return c;
    17f8:	mov	r0, r4
}
    17fa:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    17fc:	bl	268c <usb_free>
		rx_packet = NULL;
    1800:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    1802:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1804:	str	r3, [r5, #0]
    1806:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1808:	ldr	r3, [pc, #24]	; (1824 <usb_serial_getchar+0x44>)
    180a:	ldrb	r3, [r3, #0]
    180c:	cbz	r3, 181a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    180e:	movs	r0, #2
    1810:	bl	26d8 <usb_rx>
    1814:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    1816:	cmp	r0, #0
    1818:	bne.n	17e8 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    181a:	mov.w	r0, #4294967295
    181e:	pop	{r3, r4, r5, pc}
    1820:	.word	0x1fff1870
    1824:	.word	0x1fff19d0

00001828 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1828:	push	{r4, lr}
	if (!rx_packet) {
    182a:	ldr	r4, [pc, #36]	; (1850 <usb_serial_peekchar+0x28>)
    182c:	ldr	r0, [r4, #0]
    182e:	cbz	r0, 1838 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    1830:	ldrh	r3, [r0, #2]
    1832:	add	r0, r3
    1834:	ldrb	r0, [r0, #8]
}
    1836:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1838:	ldr	r3, [pc, #24]	; (1854 <usb_serial_peekchar+0x2c>)
    183a:	ldrb	r3, [r3, #0]
    183c:	cbz	r3, 184a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    183e:	movs	r0, #2
    1840:	bl	26d8 <usb_rx>
    1844:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1846:	cmp	r0, #0
    1848:	bne.n	1830 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    184a:	mov.w	r0, #4294967295
    184e:	pop	{r4, pc}
    1850:	.word	0x1fff1870
    1854:	.word	0x1fff19d0

00001858 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1858:	ldr	r3, [pc, #16]	; (186c <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    185a:	ldr	r2, [pc, #20]	; (1870 <usb_serial_available+0x18>)
    185c:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    185e:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1860:	cbz	r3, 186a <usb_serial_available+0x12>
    1862:	ldrh	r2, [r3, #0]
    1864:	ldrh	r3, [r3, #2]
    1866:	subs	r3, r2, r3
    1868:	add	r0, r3
	return count;
}
    186a:	bx	lr
    186c:	.word	0x1fff1870
    1870:	.word	0x1fff1e64

00001874 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    1874:	ldr	r3, [pc, #44]	; (18a4 <usb_serial_flush_input+0x30>)
    1876:	ldrb	r3, [r3, #0]
    1878:	cbz	r3, 18a2 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    187a:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    187c:	ldr	r4, [pc, #40]	; (18a8 <usb_serial_flush_input+0x34>)
    187e:	ldr	r0, [r4, #0]
    1880:	cbz	r0, 1896 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    1882:	bl	268c <usb_free>
		rx_packet = NULL;
    1886:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1888:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    188a:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    188c:	bl	26d8 <usb_rx>
		if (!rx) break;
    1890:	cbz	r0, 18a0 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    1892:	bl	268c <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1896:	movs	r0, #2
    1898:	bl	26d8 <usb_rx>
		if (!rx) break;
    189c:	cmp	r0, #0
    189e:	bne.n	1892 <usb_serial_flush_input+0x1e>
    18a0:	pop	{r4, pc}
    18a2:	bx	lr
    18a4:	.word	0x1fff19d0
    18a8:	.word	0x1fff1870

000018ac <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    18ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    18b0:	ldr.w	r9, [pc, #248]	; 19ac <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    18b4:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    18b6:	movs	r2, #1
    18b8:	strb.w	r2, [r9]
	while (size > 0) {
    18bc:	str	r1, [sp, #4]
    18be:	cbz	r1, 191c <usb_serial_write+0x70>
    18c0:	ldr.w	r8, [pc, #236]	; 19b0 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    18c4:	ldr	r7, [pc, #212]	; (199c <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    18c6:	ldr	r6, [sp, #4]
    18c8:	mov	fp, r0
		if (!tx_packet) {
    18ca:	ldr.w	r0, [r8]
    18ce:	cbz	r0, 193e <usb_serial_write+0x92>
    18d0:	ldr	r5, [pc, #204]	; (19a0 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    18d2:	ldrh	r4, [r0, #2]
    18d4:	rsb	r1, r4, #64	; 0x40
    18d8:	cmp	r1, r6
    18da:	it	cs
    18dc:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    18de:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    18e2:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    18e4:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    18e8:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    18ea:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    18ec:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    18f0:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    18f4:	cbz	r1, 190c <usb_serial_write+0x60>
    18f6:	subs	r4, #1
    18f8:	add	r2, r4
    18fa:	add	r1, fp
    18fc:	ldrb.w	r4, [fp], #1
    1900:	strb.w	r4, [r2, #1]!
    1904:	cmp	fp, r1
    1906:	bne.n	18fc <usb_serial_write+0x50>
    1908:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    190c:	cmp.w	lr, #63	; 0x3f
    1910:	bhi.n	192a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1912:	ldr	r2, [pc, #144]	; (19a4 <usb_serial_write+0xf8>)
    1914:	movs	r1, #5
    1916:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1918:	cmp	r6, #0
    191a:	bne.n	18ca <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    191c:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    191e:	movs	r3, #0
    1920:	strb.w	r3, [r9]
	return ret;
}
    1924:	add	sp, #12
    1926:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    192a:	movs	r2, #64	; 0x40
    192c:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    192e:	mov	r1, r0
    1930:	movs	r0, #3
    1932:	bl	2828 <usb_tx>
			tx_packet = NULL;
    1936:	movs	r2, #0
    1938:	str.w	r2, [r8]
    193c:	b.n	1912 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    193e:	ldrb	r2, [r7, #0]
    1940:	cbz	r2, 198c <usb_serial_write+0xe0>
    1942:	ldr	r4, [pc, #100]	; (19a8 <usb_serial_write+0xfc>)
    1944:	ldr	r5, [pc, #88]	; (19a0 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1946:	mov.w	sl, #1
    194a:	b.n	195c <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    194c:	subs	r4, #1
    194e:	beq.n	197e <usb_serial_write+0xd2>
    1950:	ldrb	r2, [r5, #0]
    1952:	cbnz	r2, 197e <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    1954:	bl	332c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1958:	ldrb	r2, [r7, #0]
    195a:	cbz	r2, 198c <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    195c:	movs	r0, #3
    195e:	bl	2714 <usb_tx_packet_count>
    1962:	cmp	r0, #7
    1964:	bhi.n	194c <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    1966:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    196a:	bl	264c <usb_malloc>
    196e:	str.w	r0, [r8]
					if (tx_packet) break;
    1972:	cmp	r0, #0
    1974:	bne.n	18d2 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    1976:	ldr	r3, [pc, #52]	; (19ac <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1978:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    197a:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    197c:	bne.n	1950 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    197e:	movs	r3, #1
					return -1;
    1980:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    1984:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1986:	add	sp, #12
    1988:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    198c:	movs	r3, #0
					return -1;
    198e:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1992:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1996:	add	sp, #12
    1998:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    199c:	.word	0x1fff19d0
    19a0:	.word	0x1fff186c
    19a4:	.word	0x1fff1864
    19a8:	.word	0x00014821
    19ac:	.word	0x1fff1865
    19b0:	.word	0x1fff1868

000019b4 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    19b4:	push	{lr}
    19b6:	sub	sp, #12
    19b8:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    19ba:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    19bc:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    19c0:	mov	r0, r3
    19c2:	bl	18ac <usb_serial_write>
}
    19c6:	add	sp, #12
    19c8:	ldr.w	pc, [sp], #4

000019cc <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    19cc:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    19ce:	ldr	r5, [pc, #56]	; (1a08 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    19d0:	ldr	r4, [pc, #56]	; (1a0c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    19d2:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    19d4:	movs	r3, #1
    19d6:	strb	r3, [r4, #0]
	if (!tx_packet) {
    19d8:	cbz	r0, 19e6 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    19da:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    19dc:	movs	r3, #0
    19de:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    19e0:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    19e4:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    19e6:	ldr	r3, [pc, #40]	; (1a10 <usb_serial_write_buffer_free+0x44>)
    19e8:	ldrb	r3, [r3, #0]
    19ea:	cbnz	r3, 19f2 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    19ec:	movs	r0, #0
    19ee:	strb	r0, [r4, #0]
			return 0;
    19f0:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    19f2:	movs	r0, #3
    19f4:	bl	2714 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    19f8:	cmp	r0, #7
    19fa:	bhi.n	19ec <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    19fc:	bl	264c <usb_malloc>
    1a00:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1a02:	cmp	r0, #0
    1a04:	bne.n	19da <usb_serial_write_buffer_free+0xe>
    1a06:	b.n	19ec <usb_serial_write_buffer_free+0x20>
    1a08:	.word	0x1fff1868
    1a0c:	.word	0x1fff1865
    1a10:	.word	0x1fff19d0

00001a14 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1a14:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1a16:	ldr	r3, [pc, #68]	; (1a5c <usb_serial_flush_output+0x48>)
    1a18:	ldrb	r3, [r3, #0]
    1a1a:	cbz	r3, 1a40 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    1a1c:	ldr	r6, [pc, #64]	; (1a60 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1a1e:	ldr	r5, [pc, #68]	; (1a64 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    1a20:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1a22:	movs	r7, #1
    1a24:	strb	r7, [r5, #0]
	if (tx_packet) {
    1a26:	cbz	r4, 1a42 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1a28:	ldr	r2, [pc, #60]	; (1a68 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    1a2a:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    1a2c:	movs	r7, #0
    1a2e:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1a30:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    1a32:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1a34:	movs	r0, #3
    1a36:	bl	2828 <usb_tx>
		tx_packet = NULL;
    1a3a:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    1a3c:	movs	r3, #0
    1a3e:	strb	r3, [r5, #0]
    1a40:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1a42:	bl	264c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1a46:	ldr	r3, [pc, #32]	; (1a68 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1a48:	cbz	r0, 1a56 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    1a4a:	mov	r1, r0
    1a4c:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1a4e:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    1a50:	bl	2828 <usb_tx>
    1a54:	b.n	1a3c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1a56:	strb	r7, [r3, #0]
    1a58:	b.n	1a3c <usb_serial_flush_output+0x28>
    1a5a:	nop
    1a5c:	.word	0x1fff19d0
    1a60:	.word	0x1fff1868
    1a64:	.word	0x1fff1865
    1a68:	.word	0x1fff1864

00001a6c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    1a6c:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    1a6e:	ldr	r3, [pc, #56]	; (1aa8 <usb_serial_flush_callback+0x3c>)
    1a70:	ldrb	r3, [r3, #0]
    1a72:	cbnz	r3, 1a92 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    1a74:	ldr	r4, [pc, #52]	; (1aac <usb_serial_flush_callback+0x40>)
    1a76:	ldr	r1, [r4, #0]
    1a78:	cbz	r1, 1a94 <usb_serial_flush_callback+0x28>
    1a7a:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    1a7e:	ldrh	r3, [r1, #2]
    1a80:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1a82:	movs	r0, #3
    1a84:	bl	2828 <usb_tx>
		tx_packet = NULL;
    1a88:	str	r5, [r4, #0]
    1a8a:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1a8c:	ldr	r3, [pc, #32]	; (1ab0 <usb_serial_flush_callback+0x44>)
    1a8e:	movs	r2, #1
    1a90:	strb	r2, [r3, #0]
    1a92:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1a94:	bl	264c <usb_malloc>
		if (tx) {
    1a98:	cmp	r0, #0
    1a9a:	beq.n	1a8c <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    1a9c:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    1a9e:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    1aa2:	movs	r0, #3
    1aa4:	b.w	2828 <usb_tx>
    1aa8:	.word	0x1fff1865
    1aac:	.word	0x1fff1868
    1ab0:	.word	0x1fff1864

00001ab4 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1ab4:	ldr	r2, [pc, #220]	; (1b94 <wait_for_cal+0xe0>)
    1ab6:	ldr	r1, [pc, #224]	; (1b98 <wait_for_cal+0xe4>)
    1ab8:	ldr	r3, [r2, #0]
    1aba:	lsls	r3, r3, #24
    1abc:	bmi.n	1ab8 <wait_for_cal+0x4>
    1abe:	ldr	r3, [r1, #0]
    1ac0:	ands.w	r3, r3, #128	; 0x80
    1ac4:	bne.n	1ab8 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    1ac6:	cpsid	i
	if (calibrating) {
    1ac8:	ldr	r1, [pc, #208]	; (1b9c <wait_for_cal+0xe8>)
    1aca:	ldrb	r2, [r1, #0]
    1acc:	cmp	r2, #0
    1ace:	beq.n	1b90 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1ad0:	ldr	r2, [pc, #204]	; (1ba0 <wait_for_cal+0xec>)
    1ad2:	ldr	r0, [pc, #208]	; (1ba4 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1ad4:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1ad6:	ldr	r4, [pc, #208]	; (1ba8 <wait_for_cal+0xf4>)
    1ad8:	ldr	r7, [r2, #0]
    1ada:	ldr	r6, [r0, #0]
    1adc:	ldr	r5, [r4, #0]
    1ade:	ldr	r4, [r2, #12]
    1ae0:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1ae2:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1ae4:	adds	r2, #20
    1ae6:	ldr	r0, [r0, #0]
    1ae8:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1aea:	ldr	r7, [pc, #192]	; (1bac <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    1aec:	add	r5, r6
    1aee:	add	r4, r5
    1af0:	add	r0, r4
    1af2:	add	r2, r0
    1af4:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1af8:	ldr	r6, [pc, #180]	; (1bb0 <wait_for_cal+0xfc>)
    1afa:	ldr	r0, [pc, #184]	; (1bb4 <wait_for_cal+0x100>)
    1afc:	ldr	r5, [pc, #184]	; (1bb8 <wait_for_cal+0x104>)
    1afe:	ldr	r4, [pc, #188]	; (1bbc <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1b00:	orr.w	r2, r2, #32768	; 0x8000
    1b04:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1b06:	ldr	r7, [r6, #0]
    1b08:	ldr	r6, [r0, #0]
    1b0a:	ldr	r5, [r5, #0]
    1b0c:	ldr	r2, [pc, #176]	; (1bc0 <wait_for_cal+0x10c>)
    1b0e:	ldr	r4, [r4, #0]
    1b10:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1b12:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1b14:	ldr	r0, [r0, #0]
    1b16:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1b18:	ldr	r7, [pc, #168]	; (1bc4 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    1b1a:	add	r5, r6
    1b1c:	add	r4, r5
    1b1e:	add	r0, r4
    1b20:	add	r2, r0
    1b22:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1b26:	ldr	r6, [pc, #160]	; (1bc8 <wait_for_cal+0x114>)
    1b28:	ldr	r0, [pc, #160]	; (1bcc <wait_for_cal+0x118>)
    1b2a:	ldr	r5, [pc, #164]	; (1bd0 <wait_for_cal+0x11c>)
    1b2c:	ldr	r4, [pc, #164]	; (1bd4 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1b2e:	orr.w	r2, r2, #32768	; 0x8000
    1b32:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1b34:	ldr	r7, [r6, #0]
    1b36:	ldr	r6, [r0, #0]
    1b38:	ldr	r5, [r5, #0]
    1b3a:	ldr	r2, [pc, #156]	; (1bd8 <wait_for_cal+0x124>)
    1b3c:	ldr	r4, [r4, #0]
    1b3e:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1b40:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1b42:	ldr	r0, [r0, #0]
    1b44:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1b46:	ldr	r7, [pc, #148]	; (1bdc <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1b48:	add	r5, r6
    1b4a:	add	r4, r5
    1b4c:	add	r0, r4
    1b4e:	add	r2, r0
    1b50:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1b54:	ldr	r6, [pc, #136]	; (1be0 <wait_for_cal+0x12c>)
    1b56:	ldr	r0, [pc, #140]	; (1be4 <wait_for_cal+0x130>)
    1b58:	ldr	r5, [pc, #140]	; (1be8 <wait_for_cal+0x134>)
    1b5a:	ldr	r4, [pc, #144]	; (1bec <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1b5c:	orr.w	r2, r2, #32768	; 0x8000
    1b60:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1b62:	ldr	r7, [r6, #0]
    1b64:	ldr	r6, [r0, #0]
    1b66:	ldr	r5, [r5, #0]
    1b68:	ldr	r2, [pc, #132]	; (1bf0 <wait_for_cal+0x13c>)
    1b6a:	ldr	r4, [r4, #0]
    1b6c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1b6e:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1b70:	ldr	r0, [r0, #0]
    1b72:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    1b74:	add	r5, r6
    1b76:	add	r4, r5
    1b78:	add	r0, r4
    1b7a:	add	r2, r0
    1b7c:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    1b80:	ldr	r0, [pc, #112]	; (1bf4 <wait_for_cal+0x140>)
    1b82:	orr.w	r2, r2, #32768	; 0x8000
    1b86:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    1b88:	strb	r3, [r1, #0]
	}
	__enable_irq();
    1b8a:	cpsie	i
}
    1b8c:	pop	{r4, r5, r6, r7}
    1b8e:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    1b90:	cpsie	i
    1b92:	bx	lr
    1b94:	.word	0x4003b024
    1b98:	.word	0x400bb024
    1b9c:	.word	0x1fff1876
    1ba0:	.word	0x4003b038
    1ba4:	.word	0x4003b03c
    1ba8:	.word	0x4003b040
    1bac:	.word	0x4003b02c
    1bb0:	.word	0x4003b058
    1bb4:	.word	0x4003b05c
    1bb8:	.word	0x4003b060
    1bbc:	.word	0x4003b064
    1bc0:	.word	0x4003b06c
    1bc4:	.word	0x4003b030
    1bc8:	.word	0x400bb038
    1bcc:	.word	0x400bb03c
    1bd0:	.word	0x400bb040
    1bd4:	.word	0x400bb044
    1bd8:	.word	0x400bb04c
    1bdc:	.word	0x400bb02c
    1be0:	.word	0x400bb058
    1be4:	.word	0x400bb05c
    1be8:	.word	0x400bb060
    1bec:	.word	0x400bb064
    1bf0:	.word	0x400bb06c
    1bf4:	.word	0x400bb030

00001bf8 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1bf8:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1bfa:	ldr	r0, [pc, #164]	; (1ca0 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1bfc:	ldr	r2, [pc, #164]	; (1ca4 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    1bfe:	ldr	r3, [pc, #168]	; (1ca8 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1c00:	ldr	r5, [pc, #168]	; (1cac <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1c02:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1c04:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1c06:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1c08:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    1c0a:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1c0c:	ldr	r4, [pc, #160]	; (1cb0 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    1c0e:	cmp	r3, #8
    1c10:	beq.n	1c74 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1c12:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1c14:	ldr	r0, [pc, #156]	; (1cb4 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1c16:	ldr	r1, [pc, #160]	; (1cb8 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1c18:	beq.n	1c8a <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    1c1a:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    1c1c:	ite	eq
    1c1e:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1c20:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1c22:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1c24:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1c26:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1c28:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1c2a:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1c2c:	ldr	r3, [pc, #140]	; (1cbc <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1c2e:	ldr	r1, [pc, #144]	; (1cc0 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1c30:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1c32:	ldr	r2, [pc, #144]	; (1cc4 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1c34:	cbz	r3, 1c66 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1c36:	movs	r3, #1
    1c38:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1c3a:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1c3c:	ldr	r3, [pc, #136]	; (1cc8 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1c3e:	ldr	r1, [pc, #140]	; (1ccc <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1c40:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1c42:	ldr	r2, [pc, #140]	; (1cd0 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    1c44:	cmp	r3, #1
    1c46:	bls.n	1c96 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    1c48:	cmp	r3, #4
    1c4a:	bls.n	1c6c <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    1c4c:	cmp	r3, #8
    1c4e:	bls.n	1c8e <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    1c50:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    1c52:	ite	ls
    1c54:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1c56:	movhi	r3, #135	; 0x87
    1c58:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1c5a:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    1c5c:	ldr	r3, [pc, #116]	; (1cd4 <analog_init+0xdc>)
    1c5e:	movs	r2, #1
    1c60:	strb	r2, [r3, #0]
}
    1c62:	pop	{r4, r5}
    1c64:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1c66:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1c68:	str	r3, [r2, #0]
    1c6a:	b.n	1c3c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1c6c:	movs	r3, #132	; 0x84
    1c6e:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1c70:	str	r3, [r2, #0]
    1c72:	b.n	1c5c <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1c74:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1c78:	ldr	r1, [pc, #60]	; (1cb8 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1c7a:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1c7c:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1c7e:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1c80:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1c82:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1c84:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1c86:	str	r3, [r1, #0]
    1c88:	b.n	1c2c <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1c8a:	movs	r2, #57	; 0x39
    1c8c:	b.n	1c7e <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1c8e:	movs	r3, #133	; 0x85
    1c90:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1c92:	str	r3, [r2, #0]
    1c94:	b.n	1c5c <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1c96:	movs	r3, #128	; 0x80
    1c98:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1c9a:	str	r3, [r2, #0]
    1c9c:	b.n	1c5c <analog_init+0x64>
    1c9e:	nop
    1ca0:	.word	0x40074000
    1ca4:	.word	0x40074001
    1ca8:	.word	0x1fff0c68
    1cac:	.word	0x4003b008
    1cb0:	.word	0x4003b00c
    1cb4:	.word	0x400bb008
    1cb8:	.word	0x400bb00c
    1cbc:	.word	0x1fff1879
    1cc0:	.word	0x4003b020
    1cc4:	.word	0x400bb020
    1cc8:	.word	0x1fff0c69
    1ccc:	.word	0x4003b024
    1cd0:	.word	0x400bb024
    1cd4:	.word	0x1fff1876

00001cd8 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1cd8:	cmp	r0, #71	; 0x47
    1cda:	bhi.n	1d3c <analogRead+0x64>
	channel = pin2sc1a[pin];
    1cdc:	ldr	r3, [pc, #204]	; (1dac <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    1cde:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    1ce2:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    1ce4:	cmp	r6, #255	; 0xff
    1ce6:	beq.n	1d40 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1ce8:	ldr	r3, [pc, #196]	; (1db0 <analogRead+0xd8>)
    1cea:	ldrb	r3, [r3, #0]
    1cec:	cmp	r3, #0
    1cee:	bne.n	1d46 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1cf0:	lsls	r2, r6, #24
    1cf2:	bmi.n	1d4e <analogRead+0x76>
#endif

	__disable_irq();
    1cf4:	cpsid	i
    1cf6:	ldr	r5, [pc, #188]	; (1db4 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1cf8:	ldr	r4, [pc, #188]	; (1db8 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    1cfa:	mov	r7, r5
    1cfc:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1cfe:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    1d00:	strb	r3, [r5, #0]
	__enable_irq();
    1d02:	cpsie	i
	while (1) {
		__disable_irq();
    1d04:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1d06:	ldr	r3, [r4, #0]
    1d08:	lsls	r3, r3, #24
    1d0a:	bmi.n	1d26 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    1d0c:	ldrb	r3, [r7, #0]
    1d0e:	cbnz	r3, 1d18 <analogRead+0x40>
    1d10:	b.n	1cfc <analogRead+0x24>
    1d12:	ldrb	r3, [r5, #0]
    1d14:	cmp	r3, #0
    1d16:	beq.n	1cfc <analogRead+0x24>
		__enable_irq();
    1d18:	cpsie	i
		yield();
    1d1a:	bl	332c <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    1d1e:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1d20:	ldr	r3, [r4, #0]
    1d22:	lsls	r0, r3, #24
    1d24:	bpl.n	1d12 <analogRead+0x3a>
			result = ADC0_RA;
    1d26:	ldr	r3, [pc, #148]	; (1dbc <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    1d28:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    1d2a:	movs	r2, #0
    1d2c:	strb	r2, [r5, #0]
			__enable_irq();
    1d2e:	cpsie	i
			result >>= analog_right_shift;
    1d30:	ldr	r2, [pc, #140]	; (1dc0 <analogRead+0xe8>)
    1d32:	ldrb	r0, [r2, #0]
    1d34:	asr.w	r0, r3, r0
			return result;
    1d38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1d3c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    1d3e:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1d40:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    1d42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    1d46:	bl	1ab4 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1d4a:	lsls	r2, r6, #24
    1d4c:	bpl.n	1cf4 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    1d4e:	cpsid	i
    1d50:	ldr	r5, [pc, #112]	; (1dc4 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    1d52:	ldr.w	r8, [pc, #124]	; 1dd0 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    1d56:	ldr	r4, [pc, #112]	; (1dc8 <analogRead+0xf0>)
    1d58:	and.w	r7, r6, #64	; 0x40
    1d5c:	uxtb	r7, r7
    1d5e:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1d62:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    1d66:	cbz	r7, 1da0 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1d68:	bic.w	r3, r3, #16
    1d6c:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    1d70:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    1d72:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    1d74:	ldr	r2, [pc, #76]	; (1dc4 <analogRead+0xec>)
    1d76:	strb	r3, [r5, #0]
	__enable_irq();
    1d78:	cpsie	i
	while (1) {
		__disable_irq();
    1d7a:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    1d7c:	ldr	r3, [r4, #0]
    1d7e:	lsls	r1, r3, #24
    1d80:	bmi.n	1d9c <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    1d82:	ldrb	r3, [r2, #0]
    1d84:	cbnz	r3, 1d8e <analogRead+0xb6>
    1d86:	b.n	1d62 <analogRead+0x8a>
    1d88:	ldrb	r3, [r5, #0]
    1d8a:	cmp	r3, #0
    1d8c:	beq.n	1d62 <analogRead+0x8a>
		__enable_irq();
    1d8e:	cpsie	i
		yield();
    1d90:	bl	332c <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    1d94:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    1d96:	ldr	r3, [r4, #0]
    1d98:	lsls	r3, r3, #24
    1d9a:	bpl.n	1d88 <analogRead+0xb0>
			result = ADC1_RA;
    1d9c:	ldr	r3, [pc, #44]	; (1dcc <analogRead+0xf4>)
    1d9e:	b.n	1d28 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    1da0:	orr.w	r3, r3, #16
    1da4:	str.w	r3, [r8]
    1da8:	b.n	1d70 <analogRead+0x98>
    1daa:	nop
    1dac:	.word	0x00004804
    1db0:	.word	0x1fff1876
    1db4:	.word	0x1fff1878
    1db8:	.word	0x4003b000
    1dbc:	.word	0x4003b010
    1dc0:	.word	0x1fff1875
    1dc4:	.word	0x1fff1877
    1dc8:	.word	0x400bb000
    1dcc:	.word	0x400bb010
    1dd0:	.word	0x400bb00c

00001dd4 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    1dd4:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    1dd6:	ldr	r3, [pc, #68]	; (1e1c <digitalWrite.part.1+0x48>)
    1dd8:	ldr.w	r2, [r3, r0, lsl #3]
    1ddc:	ldrb.w	r4, [r2, #640]	; 0x280
    1de0:	cbz	r4, 1df0 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    1de2:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    1de4:	cbz	r1, 1e06 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    1de6:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1dea:	ldr.w	r4, [sp], #4
    1dee:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    1df0:	add.w	r3, r3, r0, lsl #3
    1df4:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1df6:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    1df8:	cbnz	r1, 1e10 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    1dfa:	bic.w	r2, r2, #2
    1dfe:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1e00:	ldr.w	r4, [sp], #4
    1e04:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    1e06:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1e0a:	ldr.w	r4, [sp], #4
    1e0e:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1e10:	orr.w	r2, r2, #3
    1e14:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1e16:	ldr.w	r4, [sp], #4
    1e1a:	bx	lr
    1e1c:	.word	0x0000484c

00001e20 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1e20:	ldr	r2, [pc, #112]	; (1e94 <pinMode.part.2+0x74>)
    1e22:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1e26:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1e28:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1e2a:	beq.n	1e50 <pinMode.part.2+0x30>
    1e2c:	cmp	r1, #4
    1e2e:	beq.n	1e68 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    1e30:	ldr.w	r0, [r2, r0, lsl #3]
    1e34:	movs	r2, #0
    1e36:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    1e3a:	cbz	r1, 1e48 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    1e3c:	cmp	r1, #2
    1e3e:	beq.n	1e82 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    1e40:	cmp	r1, #3
    1e42:	beq.n	1e8a <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1e44:	str	r2, [r3, #0]
    1e46:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    1e48:	mov.w	r2, #256	; 0x100
    1e4c:	str	r2, [r3, #0]
    1e4e:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1e50:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1e54:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1e58:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1e5c:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1e5e:	ldr	r2, [r3, #0]
    1e60:	bic.w	r2, r2, #32
    1e64:	str	r2, [r3, #0]
    1e66:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1e68:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1e6c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1e70:	movs	r0, #1
    1e72:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1e76:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    1e78:	ldr	r2, [r3, #0]
    1e7a:	orr.w	r2, r2, #32
    1e7e:	str	r2, [r3, #0]
    1e80:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    1e82:	movw	r2, #259	; 0x103
    1e86:	str	r2, [r3, #0]
    1e88:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    1e8a:	mov.w	r2, #258	; 0x102
    1e8e:	str	r2, [r3, #0]
    1e90:	bx	lr
    1e92:	nop
    1e94:	.word	0x0000484c

00001e98 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    1e98:	push	{r4, r5}
	RTC_SR = 0;
    1e9a:	ldr	r3, [pc, #20]	; (1eb0 <rtc_set+0x18>)
	RTC_TPR = 0;
    1e9c:	ldr	r5, [pc, #20]	; (1eb4 <rtc_set+0x1c>)
	RTC_TSR = t;
    1e9e:	ldr	r4, [pc, #24]	; (1eb8 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    1ea0:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    1ea2:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    1ea4:	str	r2, [r3, #0]
	RTC_TPR = 0;
    1ea6:	str	r2, [r5, #0]
	RTC_TSR = t;
    1ea8:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    1eaa:	str	r1, [r3, #0]
}
    1eac:	pop	{r4, r5}
    1eae:	bx	lr
    1eb0:	.word	0x4003d014
    1eb4:	.word	0x4003d004
    1eb8:	.word	0x4003d000

00001ebc <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    1ebc:	cmp	r0, #63	; 0x3f
    1ebe:	bhi.n	1ec4 <digitalWrite+0x8>
    1ec0:	b.w	1dd4 <digitalWrite.part.1>
    1ec4:	bx	lr
    1ec6:	nop

00001ec8 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1ec8:	cmp	r0, #63	; 0x3f
    1eca:	bhi.n	1eda <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    1ecc:	ldr	r3, [pc, #16]	; (1ee0 <digitalRead+0x18>)
    1ece:	ldr.w	r3, [r3, r0, lsl #3]
    1ed2:	ldrb.w	r0, [r3, #512]	; 0x200
    1ed6:	uxtb	r0, r0
    1ed8:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1eda:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    1edc:	bx	lr
    1ede:	nop
    1ee0:	.word	0x0000484c

00001ee4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    1ee4:	cmp	r0, #63	; 0x3f
    1ee6:	bhi.n	1eec <pinMode+0x8>
    1ee8:	b.w	1e20 <pinMode.part.2>
    1eec:	bx	lr
    1eee:	nop

00001ef0 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    1ef0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1ef4:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1ef6:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    1ef8:	ldr	r7, [pc, #136]	; (1f84 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1efa:	ldr	r3, [pc, #140]	; (1f88 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1efc:	ldr	r2, [pc, #140]	; (1f8c <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1efe:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    1f00:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1f02:	ldr	r2, [r2, #0]
	__enable_irq();
    1f04:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1f06:	lsls	r2, r2, #5
    1f08:	bpl.n	1f10 <delay+0x20>
    1f0a:	cmp	r3, #50	; 0x32
    1f0c:	it	hi
    1f0e:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    1f10:	cbz	r5, 1f80 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1f12:	rsb	r3, r3, #179200	; 0x2bc00
    1f16:	addw	r3, r3, #799	; 0x31f
    1f1a:	ldr	r6, [pc, #116]	; (1f90 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1f1c:	ldr.w	r9, [pc, #104]	; 1f88 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1f20:	ldr.w	r8, [pc, #104]	; 1f8c <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1f24:	lsrs	r3, r3, #2
    1f26:	mov.w	r2, #1000	; 0x3e8
    1f2a:	umull	r1, r3, r6, r3
    1f2e:	mul.w	r4, r2, r4
    1f32:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1f36:	cpsid	i
	current = SYST_CVR;
    1f38:	ldr.w	r1, [r9]
	count = systick_millis_count;
    1f3c:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1f3e:	ldr.w	lr, [r8]
	__enable_irq();
    1f42:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1f44:	rsb	r3, r1, #179200	; 0x2bc00
    1f48:	addw	r3, r3, #799	; 0x31f
    1f4c:	lsrs	r3, r3, #2
    1f4e:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1f52:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1f56:	rsb	r3, r4, r3, lsr #2
    1f5a:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1f5e:	beq.n	1f66 <delay+0x76>
    1f60:	cmp	r1, #50	; 0x32
    1f62:	it	hi
    1f64:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1f66:	mla	r3, r0, r2, r3
    1f6a:	cmp.w	r3, #1000	; 0x3e8
    1f6e:	bcc.n	1f7a <delay+0x8a>
				ms--;
				if (ms == 0) return;
    1f70:	subs	r5, #1
    1f72:	beq.n	1f80 <delay+0x90>
				start += 1000;
    1f74:	add.w	r4, r4, #1000	; 0x3e8
    1f78:	b.n	1f36 <delay+0x46>
			}
			yield();
    1f7a:	bl	332c <yield>
		}
    1f7e:	b.n	1f36 <delay+0x46>
    1f80:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1f84:	.word	0x1fff187c
    1f88:	.word	0xe000e018
    1f8c:	.word	0xe000ed04
    1f90:	.word	0x16c16c17

00001f94 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    1f94:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1f96:	ldr	r3, [pc, #312]	; (20d0 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1f98:	ldr	r0, [pc, #312]	; (20d4 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    1f9a:	ldr.w	ip, [pc, #348]	; 20f8 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    1f9e:	ldr	r4, [pc, #312]	; (20d8 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    1fa0:	ldr	r1, [pc, #312]	; (20dc <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1fa2:	ldr.w	lr, [pc, #344]	; 20fc <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    1fa6:	ldr	r6, [pc, #312]	; (20e0 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    1fa8:	ldr	r5, [pc, #312]	; (20e4 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    1faa:	ldr	r7, [pc, #316]	; (20e8 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1fac:	mov.w	r2, #134217728	; 0x8000000
    1fb0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    1fb2:	mov.w	r2, #268435456	; 0x10000000
    1fb6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    1fb8:	mov.w	r2, #536870912	; 0x20000000
    1fbc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    1fbe:	mov.w	r2, #1073741824	; 0x40000000
    1fc2:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    1fc4:	mov.w	r2, #2147483648	; 0x80000000
    1fc8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1fca:	movs	r2, #0
    1fcc:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1fce:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    1fd0:	movw	r0, #61439	; 0xefff
    1fd4:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1fd8:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    1fdc:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    1fde:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    1fe2:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    1fe4:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    1fe6:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1fe8:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    1fec:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    1fee:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    1ff2:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1ff4:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    1ff8:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1ffa:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    1ffe:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2002:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    2006:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    200a:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    200e:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2010:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2014:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2016:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2018:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    201a:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    201e:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2020:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2022:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2024:	ldr	r4, [pc, #196]	; (20ec <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    2026:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2028:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    202a:	movs	r1, #9
    202c:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    202e:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2032:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2036:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2038:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    203a:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    203c:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    203e:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2040:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2042:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2046:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    204a:	add.w	r7, r7, #520192	; 0x7f000
    204e:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2050:	addw	r4, r4, #2044	; 0x7fc
    2054:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2056:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2058:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    205a:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    205c:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2060:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    2062:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    2066:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    206a:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    206c:	sub.w	r4, r4, #460800	; 0x70800
    2070:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    2074:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2076:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2078:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    207c:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    207e:	ldr	r0, [pc, #112]	; (20f0 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2080:	orr.w	r1, r1, #512	; 0x200
    2084:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2086:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2088:	ldr	r4, [pc, #104]	; (20f4 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    208a:	add.w	lr, lr, #65280	; 0xff00
    208e:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    2092:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    2096:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    209a:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    209e:	orr.w	r1, r1, #33554432	; 0x2000000
    20a2:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    20a4:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    20a8:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    20ac:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    20ae:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    20b0:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    20b2:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    20b4:	str	r2, [r4, #0]
#endif
	analog_init();
    20b6:	bl	1bf8 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    20ba:	movs	r0, #25
    20bc:	bl	1ef0 <delay>
	usb_init();
    20c0:	bl	325c <usb_init>
	delay(275);
    20c4:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    20c8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    20cc:	b.w	1ef0 <delay>
    20d0:	.word	0xe000e104
    20d4:	.word	0x40038004
    20d8:	.word	0x40038014
    20dc:	.word	0x4003801c
    20e0:	.word	0x40038024
    20e4:	.word	0x4003802c
    20e8:	.word	0x40038034
    20ec:	.word	0x40038000
    20f0:	.word	0x40048004
    20f4:	.word	0x400c9000
    20f8:	.word	0x40038008
    20fc:	.word	0x4003800c

00002100 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2100:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2102:	ldr	r3, [pc, #56]	; (213c <sysex_byte+0x3c>)
    2104:	ldr	r4, [pc, #56]	; (2140 <sysex_byte+0x40>)
    2106:	ldr	r3, [r3, #0]
    2108:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    210a:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    210c:	cbz	r3, 2132 <sysex_byte+0x32>
    210e:	cmp.w	r1, #290	; 0x122
    2112:	bcs.n	2120 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2114:	ldr	r2, [pc, #44]	; (2144 <sysex_byte+0x44>)
    2116:	adds	r3, r1, #1
    2118:	strb	r5, [r2, r1]
    211a:	uxth	r3, r3
    211c:	strh	r3, [r4, #0]
	}
}
    211e:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2120:	movs	r2, #0
    2122:	ldr	r0, [pc, #32]	; (2144 <sysex_byte+0x44>)
    2124:	blx	r3
    2126:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2128:	ldr	r2, [pc, #24]	; (2144 <sysex_byte+0x44>)
    212a:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    212c:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    212e:	strh	r3, [r4, #0]
	}
}
    2130:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    2132:	cmp.w	r1, #290	; 0x122
    2136:	bcc.n	2114 <sysex_byte+0x14>
    2138:	pop	{r3, r4, r5, pc}
    213a:	nop
    213c:	.word	0x1fff18a4
    2140:	.word	0x1fff1d3a
    2144:	.word	0x1fff1d40

00002148 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2148:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    214c:	ldr	r6, [pc, #132]	; (21d4 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    214e:	ldr	r7, [pc, #136]	; (21d8 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    2150:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2152:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2154:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2156:	strb	r3, [r7, #0]
	if (!tx_packet) {
    2158:	cbz	r1, 2188 <usb_midi_write_packed+0x40>
    215a:	ldr	r5, [pc, #128]	; (21dc <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    215c:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    215e:	add.w	r2, r1, r3, lsl #2
    2162:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2164:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2166:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2168:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    216c:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    216e:	bhi.n	217a <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    2170:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    2172:	movs	r3, #0
    2174:	strb	r3, [r7, #0]
    2176:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    217a:	movs	r3, #64	; 0x40
    217c:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    217e:	movs	r0, #4
    2180:	bl	2828 <usb_tx>
		tx_packet = NULL;
    2184:	str	r4, [r6, #0]
    2186:	b.n	2172 <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2188:	ldr.w	r9, [pc, #84]	; 21e0 <usb_midi_write_packed+0x98>
    218c:	ldrb.w	r3, [r9]
    2190:	cmp	r3, #0
    2192:	beq.n	2176 <usb_midi_write_packed+0x2e>
    2194:	ldr	r5, [pc, #68]	; (21dc <usb_midi_write_packed+0x94>)
    2196:	movw	r4, #48001	; 0xbb81
    219a:	b.n	21ae <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    219c:	subs	r4, #1
    219e:	beq.n	21c6 <usb_midi_write_packed+0x7e>
    21a0:	ldrb	r3, [r5, #0]
    21a2:	cbnz	r3, 21c6 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    21a4:	bl	332c <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    21a8:	ldrb.w	r3, [r9]
    21ac:	cbz	r3, 21ce <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    21ae:	movs	r0, #4
    21b0:	bl	2714 <usb_tx_packet_count>
    21b4:	cmp	r0, #5
    21b6:	bhi.n	219c <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    21b8:	bl	264c <usb_malloc>
    21bc:	mov	r1, r0
    21be:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    21c0:	cmp	r0, #0
    21c2:	beq.n	219c <usb_midi_write_packed+0x54>
    21c4:	b.n	215c <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    21c6:	movs	r3, #1
    21c8:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    21ca:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    21ce:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    21d2:	nop
    21d4:	.word	0x1fff18c0
    21d8:	.word	0x1fff1894
    21dc:	.word	0x1fff18c4
    21e0:	.word	0x1fff19d0

000021e4 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    21e4:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    21e6:	ldr	r3, [pc, #32]	; (2208 <usb_midi_flush_output+0x24>)
    21e8:	ldrb	r4, [r3, #0]
    21ea:	cbnz	r4, 21f6 <usb_midi_flush_output+0x12>
    21ec:	ldr	r5, [pc, #28]	; (220c <usb_midi_flush_output+0x28>)
    21ee:	ldr	r1, [r5, #0]
    21f0:	cbz	r1, 21f6 <usb_midi_flush_output+0x12>
    21f2:	ldrh	r3, [r1, #2]
    21f4:	cbnz	r3, 21f8 <usb_midi_flush_output+0x14>
    21f6:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    21f8:	lsls	r3, r3, #2
    21fa:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    21fc:	movs	r0, #4
    21fe:	bl	2828 <usb_tx>
		tx_packet = NULL;
    2202:	str	r4, [r5, #0]
    2204:	pop	{r3, r4, r5, pc}
    2206:	nop
    2208:	.word	0x1fff1894
    220c:	.word	0x1fff18c0

00002210 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2210:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2214:	ldr	r6, [pc, #692]	; (24cc <usb_midi_read+0x2bc>)
    2216:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2218:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    221a:	cmp	r3, #0
    221c:	beq.w	2344 <usb_midi_read+0x134>
    2220:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    2222:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2224:	lsrs	r1, r2, #2
    2226:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    222a:	adds	r2, #4
	if (index < rx_packet->len) {
    222c:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    222e:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    2230:	bcs.n	22b8 <usb_midi_read+0xa8>
		rx_packet->index = index;
    2232:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    2234:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2238:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    223c:	ldr	r1, [pc, #656]	; (24d0 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    223e:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2242:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    2246:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    224a:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    224c:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    2250:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2252:	bls.n	228a <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2254:	subs	r3, r6, #2
    2256:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2258:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    225c:	bls.n	22fc <usb_midi_read+0xec>
    225e:	cmp	r6, #5
    2260:	beq.n	22f4 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    2262:	cmp	r6, #4
    2264:	beq.w	25b0 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    2268:	subs	r3, r6, #5
    226a:	cmp	r3, #2
    226c:	bls.n	236e <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    226e:	cmp	r6, #15
    2270:	bne.n	2290 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    2272:	cmp	r0, #247	; 0xf7
    2274:	bhi.n	22fc <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    2276:	cmp	r0, #240	; 0xf0
    2278:	beq.n	2280 <usb_midi_read+0x70>
    227a:	ldr	r3, [pc, #600]	; (24d4 <usb_midi_read+0x2c4>)
    227c:	ldrh	r3, [r3, #0]
    227e:	cbz	r3, 2290 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    2280:	bl	2100 <sysex_byte>
		}
	}
	return 0;
    2284:	movs	r0, #0
    2286:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    228a:	cbz	r7, 2296 <usb_midi_read+0x86>
    228c:	cmp	r5, r7
    228e:	beq.n	2296 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    2290:	movs	r0, #0
    2292:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2296:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    2298:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    229c:	beq.w	23ae <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    22a0:	cmp	r6, #9
    22a2:	beq.n	22c8 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    22a4:	cmp	r6, #10
    22a6:	bne.w	23d2 <usb_midi_read+0x1c2>
    22aa:	cmp	r3, #10
    22ac:	bne.n	2290 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    22ae:	ldr	r3, [pc, #552]	; (24d8 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    22b0:	ldr	r2, [pc, #552]	; (24dc <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    22b2:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    22b4:	movs	r1, #160	; 0xa0
    22b6:	b.n	23bc <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    22b8:	mov	r0, r3
    22ba:	bl	268c <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    22be:	movs	r0, #5
    22c0:	bl	26d8 <usb_rx>
    22c4:	str	r0, [r6, #0]
    22c6:	b.n	2234 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    22c8:	cmp	r3, #9
    22ca:	bne.n	2290 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    22cc:	lsrs	r7, r4, #24
    22ce:	beq.w	25c8 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    22d2:	ldr	r3, [pc, #524]	; (24e0 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    22d4:	ldr	r2, [pc, #516]	; (24dc <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    22d6:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    22d8:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    22da:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    22de:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    22e0:	uxtb	r5, r5
    22e2:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    22e4:	cmp	r3, #0
    22e6:	beq.w	2424 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    22ea:	mov	r2, r4
    22ec:	mov	r1, r6
    22ee:	mov	r0, r5
    22f0:	blx	r3
    22f2:	b.n	2424 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    22f4:	cmp	r0, #240	; 0xf0
    22f6:	bls.n	2380 <usb_midi_read+0x170>
    22f8:	cmp	r0, #247	; 0xf7
    22fa:	beq.n	2380 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    22fc:	subs	r0, #241	; 0xf1
    22fe:	cmp	r0, #14
    2300:	bhi.n	2290 <usb_midi_read+0x80>
    2302:	add	r3, pc, #4	; (adr r3, 2308 <usb_midi_read+0xf8>)
    2304:	ldr.w	pc, [r3, r0, lsl #2]
    2308:	.word	0x000024bf
    230c:	.word	0x000024a3
    2310:	.word	0x00002491
    2314:	.word	0x00002291
    2318:	.word	0x00002291
    231c:	.word	0x00002483
    2320:	.word	0x00002291
    2324:	.word	0x00002563
    2328:	.word	0x00002291
    232c:	.word	0x0000252d
    2330:	.word	0x00002547
    2334:	.word	0x0000246b
    2338:	.word	0x00002291
    233c:	.word	0x00002453
    2340:	.word	0x00002437
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    2344:	ldr	r3, [pc, #412]	; (24e4 <usb_midi_read+0x2d4>)
    2346:	ldrb	r3, [r3, #0]
    2348:	cmp	r3, #0
    234a:	beq.n	2290 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    234c:	movs	r0, #5
    234e:	bl	26d8 <usb_rx>
    2352:	mov	r3, r0
    2354:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    2356:	cmp	r0, #0
    2358:	beq.n	2290 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    235a:	ldrh	r5, [r0, #0]
    235c:	cmp	r5, #0
    235e:	bne.w	2222 <usb_midi_read+0x12>
			usb_free(rx_packet);
    2362:	bl	268c <usb_free>
			rx_packet = NULL;
    2366:	str	r5, [r6, #0]
			return 0;
    2368:	mov	r0, r5
    236a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    236e:	bl	2100 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    2372:	ubfx	r0, r4, #16, #8
    2376:	bl	2100 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    237a:	cmp	r6, #7
    237c:	bne.n	2384 <usb_midi_read+0x174>
    237e:	lsrs	r0, r4, #24
    2380:	bl	2100 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    2384:	ldr	r3, [pc, #332]	; (24d4 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2386:	ldr	r2, [pc, #352]	; (24e8 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    2388:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    238a:	ldr	r0, [pc, #352]	; (24ec <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    238c:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    238e:	ldr	r5, [pc, #352]	; (24f0 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2390:	ldr	r2, [pc, #328]	; (24dc <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    2392:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2394:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2396:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2398:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    239a:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    239c:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    239e:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    23a0:	cbz	r4, 23e6 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    23a2:	movs	r2, #1
    23a4:	ldr	r0, [pc, #332]	; (24f4 <usb_midi_read+0x2e4>)
    23a6:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    23a8:	movs	r0, #1
    23aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    23ae:	cmp	r3, #8
    23b0:	bne.w	2290 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    23b4:	ldr	r3, [pc, #320]	; (24f8 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    23b6:	ldr	r2, [pc, #292]	; (24dc <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    23b8:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    23ba:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    23bc:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    23c0:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    23c2:	uxtb	r5, r5
    23c4:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    23c6:	cbz	r3, 2424 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    23c8:	mov	r0, r5
    23ca:	mov	r2, r4
    23cc:	mov	r1, r6
    23ce:	blx	r3
    23d0:	b.n	2424 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    23d2:	cmp	r6, #11
    23d4:	bne.n	23fa <usb_midi_read+0x1ea>
    23d6:	cmp	r3, #11
    23d8:	bne.w	2290 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    23dc:	ldr	r3, [pc, #284]	; (24fc <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    23de:	ldr	r2, [pc, #252]	; (24dc <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    23e0:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    23e2:	movs	r1, #176	; 0xb0
    23e4:	b.n	23bc <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    23e6:	ldr	r3, [pc, #280]	; (2500 <usb_midi_read+0x2f0>)
    23e8:	ldr	r3, [r3, #0]
    23ea:	cmp	r3, #0
    23ec:	beq.w	25e6 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    23f0:	ldr	r0, [pc, #256]	; (24f4 <usb_midi_read+0x2e4>)
    23f2:	blx	r3
		}
		return 1;
    23f4:	movs	r0, #1
    23f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    23fa:	cmp	r6, #12
    23fc:	bne.w	2600 <usb_midi_read+0x3f0>
    2400:	cmp	r3, #12
    2402:	bne.w	2290 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2406:	ldr	r3, [pc, #252]	; (2504 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2408:	ldr	r2, [pc, #208]	; (24dc <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    240a:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    240c:	movs	r1, #192	; 0xc0
    240e:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    2410:	uxtb	r5, r5
    2412:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2416:	cmp	r3, #0
    2418:	beq.w	25ac <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    241c:	mov	r0, r5
    241e:	mov	r1, r6
    2420:	lsrs	r4, r4, #24
    2422:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2424:	ldr	r1, [pc, #224]	; (2508 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    2426:	ldr	r2, [pc, #196]	; (24ec <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    2428:	ldr	r3, [pc, #196]	; (24f0 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    242a:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    242c:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    242e:	strb	r4, [r3, #0]
		return 1;
    2430:	movs	r0, #1
    2432:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    2436:	ldr	r3, [pc, #212]	; (250c <usb_midi_read+0x2fc>)
    2438:	ldr	r3, [r3, #0]
    243a:	cmp	r3, #0
    243c:	beq.w	25ec <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    2440:	blx	r3
    2442:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    2446:	ldr	r3, [pc, #148]	; (24dc <usb_midi_read+0x2cc>)
    2448:	uxtb	r5, r5
    244a:	lsrs	r4, r4, #24
    244c:	strb.w	r8, [r3]
		goto return_message;
    2450:	b.n	2424 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    2452:	ldr	r3, [pc, #188]	; (2510 <usb_midi_read+0x300>)
    2454:	ldr	r3, [r3, #0]
    2456:	cmp	r3, #0
    2458:	bne.n	2440 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    245a:	ldr	r3, [pc, #184]	; (2514 <usb_midi_read+0x304>)
    245c:	ldr	r3, [r3, #0]
    245e:	cbz	r3, 248a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    2460:	movs	r0, #254	; 0xfe
    2462:	blx	r3
    2464:	ubfx	r6, r4, #16, #8
    2468:	b.n	2446 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    246a:	ldr	r3, [pc, #172]	; (2518 <usb_midi_read+0x308>)
    246c:	ldr	r3, [r3, #0]
    246e:	cmp	r3, #0
    2470:	bne.n	2440 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    2472:	ldr	r3, [pc, #160]	; (2514 <usb_midi_read+0x304>)
    2474:	ldr	r3, [r3, #0]
    2476:	cbz	r3, 248a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    2478:	movs	r0, #252	; 0xfc
    247a:	blx	r3
    247c:	ubfx	r6, r4, #16, #8
    2480:	b.n	2446 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    2482:	ldr	r3, [pc, #152]	; (251c <usb_midi_read+0x30c>)
    2484:	ldr	r3, [r3, #0]
    2486:	cmp	r3, #0
    2488:	bne.n	2440 <usb_midi_read+0x230>
    248a:	ubfx	r6, r4, #16, #8
    248e:	b.n	2446 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2490:	ldr	r3, [pc, #140]	; (2520 <usb_midi_read+0x310>)
    2492:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    2494:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2498:	cmp	r3, #0
    249a:	beq.n	2446 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    249c:	mov	r0, r6
    249e:	blx	r3
    24a0:	b.n	2446 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    24a2:	ldr	r3, [pc, #128]	; (2524 <usb_midi_read+0x314>)
    24a4:	ldr	r2, [r3, #0]
    24a6:	cmp	r2, #0
    24a8:	beq.n	248a <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    24aa:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    24ac:	lsrs	r3, r4, #17
    24ae:	and.w	r0, r6, #127	; 0x7f
    24b2:	and.w	r3, r3, #16256	; 0x3f80
    24b6:	orrs	r0, r3
    24b8:	uxtb	r6, r6
    24ba:	blx	r2
    24bc:	b.n	2446 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    24be:	ldr	r3, [pc, #104]	; (2528 <usb_midi_read+0x318>)
    24c0:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    24c2:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    24c6:	cmp	r3, #0
    24c8:	bne.n	249c <usb_midi_read+0x28c>
    24ca:	b.n	2446 <usb_midi_read+0x236>
    24cc:	.word	0x1fff18cc
    24d0:	.word	0x1fff1d3e
    24d4:	.word	0x1fff1d3a
    24d8:	.word	0x1fff18a8
    24dc:	.word	0x1fff1d38
    24e0:	.word	0x1fff18dc
    24e4:	.word	0x1fff19d0
    24e8:	.word	0x1fff18a4
    24ec:	.word	0x1fff1d3c
    24f0:	.word	0x1fff1d3d
    24f4:	.word	0x1fff1d40
    24f8:	.word	0x1fff18d4
    24fc:	.word	0x1fff18d8
    2500:	.word	0x1fff18bc
    2504:	.word	0x1fff1898
    2508:	.word	0x1fff1d3f
    250c:	.word	0x1fff1884
    2510:	.word	0x1fff1888
    2514:	.word	0x1fff188c
    2518:	.word	0x1fff18c8
    251c:	.word	0x1fff18b8
    2520:	.word	0x1fff18d0
    2524:	.word	0x1fff18a0
    2528:	.word	0x1fff18b4
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    252c:	ldr	r3, [pc, #252]	; (262c <usb_midi_read+0x41c>)
    252e:	ldr	r3, [r3, #0]
    2530:	cmp	r3, #0
    2532:	bne.n	2440 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    2534:	ldr	r3, [pc, #248]	; (2630 <usb_midi_read+0x420>)
    2536:	ldr	r3, [r3, #0]
    2538:	cmp	r3, #0
    253a:	beq.n	248a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    253c:	movs	r0, #250	; 0xfa
    253e:	blx	r3
    2540:	ubfx	r6, r4, #16, #8
    2544:	b.n	2446 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    2546:	ldr	r3, [pc, #236]	; (2634 <usb_midi_read+0x424>)
    2548:	ldr	r3, [r3, #0]
    254a:	cmp	r3, #0
    254c:	bne.w	2440 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    2550:	ldr	r3, [pc, #220]	; (2630 <usb_midi_read+0x420>)
    2552:	ldr	r3, [r3, #0]
    2554:	cmp	r3, #0
    2556:	beq.n	248a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    2558:	movs	r0, #251	; 0xfb
    255a:	blx	r3
    255c:	ubfx	r6, r4, #16, #8
    2560:	b.n	2446 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    2562:	ldr	r3, [pc, #212]	; (2638 <usb_midi_read+0x428>)
    2564:	ldr	r3, [r3, #0]
    2566:	cmp	r3, #0
    2568:	bne.w	2440 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    256c:	ldr	r3, [pc, #192]	; (2630 <usb_midi_read+0x420>)
    256e:	ldr	r3, [r3, #0]
    2570:	cmp	r3, #0
    2572:	beq.n	248a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    2574:	movs	r0, #248	; 0xf8
    2576:	blx	r3
    2578:	ubfx	r6, r4, #16, #8
    257c:	b.n	2446 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    257e:	cmp	r3, #14
    2580:	bne.w	2290 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    2584:	ldr	r2, [pc, #180]	; (263c <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2586:	ldr	r3, [pc, #184]	; (2640 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    2588:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    258a:	movs	r1, #224	; 0xe0
    258c:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    258e:	cmp	r2, #0
    2590:	beq.n	2622 <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    2592:	lsrs	r6, r4, #16
    2594:	lsrs	r1, r4, #17
    2596:	and.w	r3, r6, #127	; 0x7f
    259a:	and.w	r1, r1, #16256	; 0x3f80
    259e:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    25a0:	uxtb	r5, r5
    25a2:	sub.w	r1, r1, #8192	; 0x2000
    25a6:	mov	r0, r5
    25a8:	blx	r2
    25aa:	uxtb	r6, r6
    25ac:	lsrs	r4, r4, #24
    25ae:	b.n	2424 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    25b0:	bl	2100 <sysex_byte>
		sysex_byte(n >> 16);
    25b4:	ubfx	r0, r4, #16, #8
    25b8:	bl	2100 <sysex_byte>
		sysex_byte(n >> 24);
    25bc:	lsrs	r0, r4, #24
    25be:	bl	2100 <sysex_byte>
		return 0;
    25c2:	movs	r0, #0
    25c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    25c8:	ldr	r3, [pc, #120]	; (2644 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    25ca:	ldr	r2, [pc, #116]	; (2640 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    25cc:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    25ce:	movs	r1, #128	; 0x80
    25d0:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    25d2:	uxtb	r5, r5
    25d4:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    25d8:	cbz	r3, 25fc <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    25da:	mov	r1, r6
    25dc:	mov	r0, r5
    25de:	mov	r2, r7
    25e0:	blx	r3
    25e2:	mov	r4, r7
    25e4:	b.n	2424 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    25e6:	movs	r0, #1
    25e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    25ec:	ldr	r3, [pc, #64]	; (2630 <usb_midi_read+0x420>)
    25ee:	ldr	r3, [r3, #0]
    25f0:	cmp	r3, #0
    25f2:	beq.w	248a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    25f6:	movs	r0, #255	; 0xff
    25f8:	blx	r3
    25fa:	b.n	248a <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    25fc:	mov	r4, r3
    25fe:	b.n	2424 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    2600:	cmp	r6, #13
    2602:	bne.n	257e <usb_midi_read+0x36e>
    2604:	cmp	r3, #13
    2606:	bne.w	2290 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    260a:	ldr	r3, [pc, #60]	; (2648 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    260c:	ldr	r2, [pc, #48]	; (2640 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    260e:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2610:	movs	r1, #208	; 0xd0
    2612:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2614:	uxtb	r5, r5
    2616:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    261a:	cmp	r3, #0
    261c:	bne.w	241c <usb_midi_read+0x20c>
    2620:	b.n	25ac <usb_midi_read+0x39c>
    2622:	ubfx	r6, r4, #16, #8
    2626:	uxtb	r5, r5
    2628:	lsrs	r4, r4, #24
    262a:	b.n	2424 <usb_midi_read+0x214>
    262c:	.word	0x1fff18b0
    2630:	.word	0x1fff188c
    2634:	.word	0x1fff1890
    2638:	.word	0x1fff1880
    263c:	.word	0x1fff189c
    2640:	.word	0x1fff1d38
    2644:	.word	0x1fff18d4
    2648:	.word	0x1fff18ac

0000264c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    264c:	cpsid	i
	avail = usb_buffer_available;
    264e:	ldr	r0, [pc, #52]	; (2684 <usb_malloc+0x38>)
    2650:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    2652:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    2656:	cmp	r3, #29
    2658:	bgt.n	267c <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    265a:	mov.w	r1, #2147483648	; 0x80000000
    265e:	lsrs	r1, r3
    2660:	bic.w	r2, r2, r1
    2664:	str	r2, [r0, #0]
	__enable_irq();
    2666:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    2668:	ldr	r0, [pc, #28]	; (2688 <usb_malloc+0x3c>)
    266a:	add.w	r3, r3, r3, lsl #3
    266e:	lsls	r3, r3, #3
    2670:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    2672:	movs	r1, #0
    2674:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    2676:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    2678:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    267a:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    267c:	cpsie	i
		return NULL;
    267e:	movs	r0, #0
    2680:	bx	lr
    2682:	nop
    2684:	.word	0x1fff0c6c
    2688:	.word	0x1fff03d0

0000268c <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    268c:	ldr	r3, [pc, #52]	; (26c4 <usb_free+0x38>)
    268e:	ldr	r2, [pc, #56]	; (26c8 <usb_free+0x3c>)
    2690:	subs	r3, r0, r3
    2692:	umull	r2, r3, r2, r3
    2696:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    2698:	cmp	r3, #29
    269a:	bhi.n	26b6 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    269c:	ldr	r2, [pc, #44]	; (26cc <usb_free+0x40>)
    269e:	ldrb	r2, [r2, #0]
    26a0:	cbnz	r2, 26b8 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    26a2:	cpsid	i
	usb_buffer_available |= mask;
    26a4:	ldr	r0, [pc, #40]	; (26d0 <usb_free+0x44>)
    26a6:	mov.w	r1, #2147483648	; 0x80000000
    26aa:	ldr	r2, [r0, #0]
    26ac:	lsr.w	r3, r1, r3
    26b0:	orrs	r2, r3
    26b2:	str	r2, [r0, #0]
	__enable_irq();
    26b4:	cpsie	i
    26b6:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    26b8:	ldr	r2, [pc, #24]	; (26d4 <usb_free+0x48>)
    26ba:	ldrb	r2, [r2, #0]
    26bc:	cmp	r2, #0
    26be:	beq.n	26a2 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    26c0:	b.w	2740 <usb_rx_memory>
    26c4:	.word	0x1fff03d0
    26c8:	.word	0x38e38e39
    26cc:	.word	0x1fff19c5
    26d0:	.word	0x1fff0c6c
    26d4:	.word	0x1fff19d0

000026d8 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    26d8:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    26da:	cmp	r3, #4
    26dc:	bhi.n	2708 <usb_rx+0x30>
	__disable_irq();
    26de:	cpsid	i
	ret = rx_first[endpoint];
    26e0:	ldr	r1, [pc, #40]	; (270c <usb_rx+0x34>)
    26e2:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    26e6:	cbz	r0, 2704 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    26e8:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    26ea:	ldr	r4, [pc, #36]	; (2710 <usb_rx+0x38>)
    26ec:	ldrh	r5, [r0, #0]
    26ee:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    26f2:	ldr	r6, [r0, #4]
    26f4:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    26f8:	subs	r2, r2, r5
    26fa:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    26fe:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2700:	pop	{r4, r5, r6}
    2702:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2704:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2706:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2708:	movs	r0, #0
    270a:	bx	lr
    270c:	.word	0x1fff193c
    2710:	.word	0x1fff1e64

00002714 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2714:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2716:	cmp	r0, #4
    2718:	bhi.n	2732 <usb_tx_packet_count+0x1e>
	__disable_irq();
    271a:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    271c:	ldr	r3, [pc, #28]	; (273c <usb_tx_packet_count+0x28>)
    271e:	ldr.w	r3, [r3, r0, lsl #2]
    2722:	cbz	r3, 2736 <usb_tx_packet_count+0x22>
    2724:	movs	r0, #0
    2726:	ldr	r3, [r3, #4]
    2728:	adds	r0, #1
    272a:	cmp	r3, #0
    272c:	bne.n	2726 <usb_tx_packet_count+0x12>
	__enable_irq();
    272e:	cpsie	i
	return count;
    2730:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2732:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2734:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2736:	mov	r0, r3
    2738:	b.n	272e <usb_tx_packet_count+0x1a>
    273a:	nop
    273c:	.word	0x1fff1994

00002740 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2740:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2742:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2744:	ldr	r2, [pc, #204]	; (2814 <usb_rx_memory+0xd4>)
    2746:	ldrb	r3, [r2, #0]
    2748:	lsls	r3, r3, #28
    274a:	bpl.n	275a <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    274c:	ldr	r3, [pc, #200]	; (2818 <usb_rx_memory+0xd8>)
    274e:	ldr	r1, [r3, #32]
    2750:	cmp	r1, #0
    2752:	beq.n	27dc <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2754:	ldr	r1, [r3, #40]	; 0x28
    2756:	cmp	r1, #0
    2758:	beq.n	27f8 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    275a:	ldrb	r3, [r2, #1]
    275c:	lsls	r5, r3, #28
    275e:	bpl.n	276e <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2760:	ldr	r3, [pc, #180]	; (2818 <usb_rx_memory+0xd8>)
    2762:	ldr	r1, [r3, #64]	; 0x40
    2764:	cmp	r1, #0
    2766:	beq.n	2804 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2768:	ldr	r1, [r3, #72]	; 0x48
    276a:	cmp	r1, #0
    276c:	beq.n	27fc <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    276e:	ldrb	r3, [r2, #2]
    2770:	lsls	r4, r3, #28
    2772:	bpl.n	2782 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2774:	ldr	r3, [pc, #160]	; (2818 <usb_rx_memory+0xd8>)
    2776:	ldr	r1, [r3, #96]	; 0x60
    2778:	cmp	r1, #0
    277a:	beq.n	2808 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    277c:	ldr	r1, [r3, #104]	; 0x68
    277e:	cmp	r1, #0
    2780:	beq.n	2800 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2782:	ldrb	r3, [r2, #3]
    2784:	lsls	r1, r3, #28
    2786:	bpl.n	2798 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2788:	ldr	r3, [pc, #140]	; (2818 <usb_rx_memory+0xd8>)
    278a:	ldr.w	r1, [r3, #128]	; 0x80
    278e:	cmp	r1, #0
    2790:	beq.n	2810 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2792:	ldr.w	r1, [r3, #136]	; 0x88
    2796:	cbz	r1, 27be <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2798:	ldrb	r3, [r2, #4]
    279a:	lsls	r3, r3, #28
    279c:	bpl.n	27b0 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    279e:	ldr	r3, [pc, #120]	; (2818 <usb_rx_memory+0xd8>)
    27a0:	ldr.w	r2, [r3, #160]	; 0xa0
    27a4:	cmp	r2, #0
    27a6:	beq.n	280c <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    27a8:	ldr.w	r2, [r3, #168]	; 0xa8
    27ac:	movs	r4, #21
    27ae:	cbz	r2, 27c0 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    27b0:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    27b2:	ldr	r3, [pc, #104]	; (281c <usb_rx_memory+0xdc>)
    27b4:	movs	r2, #0
    27b6:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    27b8:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    27ba:	b.w	268c <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    27be:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    27c0:	ldr	r1, [pc, #88]	; (281c <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    27c2:	ldr	r5, [pc, #92]	; (2820 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    27c4:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    27c6:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    27ca:	add.w	r3, r3, r4, lsl #3
    27ce:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    27d0:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    27d2:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    27d4:	strb	r2, [r1, #0]
				__enable_irq();
    27d6:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    27d8:	pop	{r4, r5}
    27da:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    27dc:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    27de:	ldr	r4, [pc, #60]	; (281c <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    27e0:	ldr	r5, [pc, #64]	; (2824 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    27e2:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    27e4:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    27e8:	add.w	r3, r3, r2, lsl #3
    27ec:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    27ee:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    27f0:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    27f2:	strb	r2, [r4, #0]
				__enable_irq();
    27f4:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    27f6:	b.n	27d8 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    27f8:	movs	r4, #5
    27fa:	b.n	27c0 <usb_rx_memory+0x80>
    27fc:	movs	r4, #9
    27fe:	b.n	27c0 <usb_rx_memory+0x80>
    2800:	movs	r4, #13
    2802:	b.n	27c0 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2804:	movs	r2, #8
    2806:	b.n	27de <usb_rx_memory+0x9e>
    2808:	movs	r2, #12
    280a:	b.n	27de <usb_rx_memory+0x9e>
    280c:	movs	r2, #20
    280e:	b.n	27de <usb_rx_memory+0x9e>
    2810:	movs	r2, #16
    2812:	b.n	27de <usb_rx_memory+0x9e>
    2814:	.word	0x00004a78
    2818:	.word	0x1fff0000
    281c:	.word	0x1fff19c5
    2820:	.word	0x004000c8
    2824:	.word	0x00400088

00002828 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2828:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    282a:	cmp	r3, #4
    282c:	bhi.n	286a <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    282e:	ldr	r2, [pc, #108]	; (289c <usb_tx+0x74>)
    2830:	lsls	r0, r0, #5
    2832:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2836:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2838:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    283a:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    283c:	ldr	r4, [pc, #96]	; (28a0 <usb_tx+0x78>)
    283e:	ldrb	r2, [r4, r3]
    2840:	cmp	r2, #3
    2842:	bhi.n	287c <usb_tx+0x54>
    2844:	tbb	[pc, r2]
    2848:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    284c:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    284e:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2850:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2852:	tst.w	r0, #8
    2856:	ite	ne
    2858:	movne	r3, #200	; 0xc8
    285a:	moveq	r3, #136	; 0x88
    285c:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2860:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2862:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2864:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2866:	cpsie	i
}
    2868:	pop	{r4, r5}
    286a:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    286c:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    286e:	movs	r2, #2
		break;
    2870:	b.n	284e <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    2872:	movs	r2, #5
    2874:	b.n	284e <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    2876:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2878:	movs	r2, #4
		break;
    287a:	b.n	284e <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    287c:	ldr	r2, [pc, #36]	; (28a4 <usb_tx+0x7c>)
    287e:	ldr.w	r0, [r2, r3, lsl #2]
    2882:	cbz	r0, 2894 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    2884:	ldr	r2, [pc, #32]	; (28a8 <usb_tx+0x80>)
    2886:	ldr.w	r0, [r2, r3, lsl #2]
    288a:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    288c:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    2890:	cpsie	i
		return;
    2892:	b.n	2868 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    2894:	str.w	r1, [r2, r3, lsl #2]
    2898:	ldr	r2, [pc, #12]	; (28a8 <usb_tx+0x80>)
    289a:	b.n	288c <usb_tx+0x64>
    289c:	.word	0x1fff0000
    28a0:	.word	0x1fff19d4
    28a4:	.word	0x1fff1994
    28a8:	.word	0x1fff19a8

000028ac <usb_isr>:
}



void usb_isr(void)
{
    28ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    28b0:	ldr.w	fp, [pc, #776]	; 2bbc <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    28b4:	ldr.w	sl, [pc, #776]	; 2bc0 <usb_isr+0x314>
}



void usb_isr(void)
{
    28b8:	sub	sp, #28
    28ba:	b.n	2946 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    28bc:	ldr	r7, [pc, #680]	; (2b68 <usb_isr+0x2bc>)
    28be:	mov.w	r8, r3, lsr #2
    28c2:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    28c6:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    28c8:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    28cc:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    28d0:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    28d2:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    28d6:	and.w	r4, r3, #255	; 0xff
    28da:	cmp	r3, #0
    28dc:	bne.w	2ae0 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    28e0:	ldr.w	r3, [r7, r8, lsl #3]
    28e4:	lsrs	r3, r3, #16
    28e6:	uxth	r1, r3
    28e8:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    28ec:	cmp	r3, #0
    28ee:	beq.w	2ace <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    28f2:	ldr	r3, [pc, #632]	; (2b6c <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    28f4:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    28f8:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    28fc:	ldr.w	r2, [r3, r6, lsl #2]
    2900:	cmp	r2, #0
    2902:	beq.w	2d70 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2906:	ldr	r5, [pc, #616]	; (2b70 <usb_isr+0x2c4>)
    2908:	ldr.w	r3, [r5, r6, lsl #2]
    290c:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    290e:	ldr	r4, [pc, #612]	; (2b74 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2910:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2914:	ldrh.w	r3, [r4, r6, lsl #1]
    2918:	add	r1, r3
    291a:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    291e:	bl	264c <usb_malloc>
					if (packet) {
    2922:	cmp	r0, #0
    2924:	beq.w	2d62 <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2928:	ldr	r2, [pc, #588]	; (2b78 <usb_isr+0x2cc>)
    292a:	ldr	r3, [pc, #592]	; (2b7c <usb_isr+0x2d0>)
    292c:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2930:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2934:	it	ne
    2936:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2938:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    293c:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2940:	movs	r3, #8
    2942:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2946:	ldrb.w	r4, [fp]
    294a:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    294c:	lsls	r0, r4, #29
    294e:	bpl.n	298a <usb_isr+0xde>
		if (usb_configuration) {
    2950:	ldr	r3, [pc, #556]	; (2b80 <usb_isr+0x2d4>)
    2952:	ldrb	r3, [r3, #0]
    2954:	cbz	r3, 2984 <usb_isr+0xd8>
			t = usb_reboot_timer;
    2956:	ldr	r1, [pc, #556]	; (2b84 <usb_isr+0x2d8>)
    2958:	ldrb	r2, [r1, #0]
			if (t) {
    295a:	and.w	r3, r2, #255	; 0xff
    295e:	cbz	r2, 296a <usb_isr+0xbe>
				usb_reboot_timer = --t;
    2960:	subs	r3, #1
    2962:	uxtb	r3, r3
    2964:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2966:	cbnz	r3, 296a <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2968:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    296a:	ldr	r1, [pc, #540]	; (2b88 <usb_isr+0x2dc>)
    296c:	ldrb	r2, [r1, #0]
			if (t) {
    296e:	and.w	r3, r2, #255	; 0xff
    2972:	cbz	r2, 2980 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    2974:	subs	r3, #1
    2976:	uxtb	r3, r3
    2978:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    297a:	cmp	r3, #0
    297c:	beq.w	2d0e <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    2980:	bl	21e4 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2984:	movs	r3, #4
    2986:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    298a:	and.w	r3, r4, #8
    298e:	and.w	r2, r3, #255	; 0xff
    2992:	cmp	r3, #0
    2994:	beq.w	2b28 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    2998:	ldrb.w	r3, [sl]
    299c:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    299e:	lsrs	r6, r3, #4
    29a0:	bne.n	28bc <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    29a2:	lsrs	r4, r3, #2
    29a4:	ldr.w	r9, [pc, #448]	; 2b68 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    29a8:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    29ac:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    29b0:	ubfx	r2, r2, #2, #4
    29b4:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    29b6:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    29b8:	cmp	r2, #12
    29ba:	bhi.w	2ac6 <usb_isr+0x21a>
    29be:	tbb	[pc, r2]
    29c2:	.short	0x7878
    29c4:	.word	0x82828282
    29c8:	.word	0x82438282
    29cc:	.short	0x8282
    29ce:	.byte	0x07
    29cf:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    29d0:	ldr	r0, [r1, #0]
    29d2:	ldr	r5, [pc, #440]	; (2b8c <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    29d4:	ldr	r3, [pc, #416]	; (2b78 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    29d6:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    29d8:	ldr	r7, [pc, #436]	; (2b90 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    29da:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    29de:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    29e0:	ldr	r6, [pc, #432]	; (2b94 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    29e2:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    29e4:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    29e8:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    29ea:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    29ec:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    29ee:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    29f2:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    29f4:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    29f8:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    29fc:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    29fe:	bhi.w	2bc4 <usb_isr+0x318>
    2a02:	cmp.w	r1, #1664	; 0x680
    2a06:	bcs.w	3030 <usb_isr+0x784>
    2a0a:	cmp.w	r1, #258	; 0x102
    2a0e:	beq.w	2dde <usb_isr+0x532>
    2a12:	bhi.w	2da8 <usb_isr+0x4fc>
    2a16:	cmp	r1, #128	; 0x80
    2a18:	beq.w	3064 <usb_isr+0x7b8>
    2a1c:	cmp	r1, #130	; 0x82
    2a1e:	bne.w	2dea <usb_isr+0x53e>
    2a22:	ldrh	r1, [r5, #4]
    2a24:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2a28:	cmp	r1, #5
    2a2a:	bhi.w	2dea <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2a2e:	ldr	r3, [pc, #360]	; (2b98 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2a30:	ldr	r4, [pc, #360]	; (2b9c <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2a32:	lsls	r1, r1, #2
    2a34:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2a36:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2a38:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2a3a:	ldrb	r2, [r3, #0]
    2a3c:	lsls	r3, r2, #30
    2a3e:	bpl.w	3174 <usb_isr+0x8c8>
    2a42:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    2a44:	movs	r0, #2
    2a46:	b.n	2e72 <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2a48:	ldr	r7, [pc, #324]	; (2b90 <usb_isr+0x2e4>)
    2a4a:	ldr	r2, [r7, #0]
		if (data) {
    2a4c:	cbz	r2, 2a9c <usb_isr+0x1f0>
			size = ep0_tx_len;
    2a4e:	ldr	r3, [pc, #336]	; (2ba0 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a50:	ldr	r6, [pc, #320]	; (2b94 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2a52:	ldr	r1, [pc, #336]	; (2ba4 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2a54:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a56:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2a58:	ldrb	r5, [r1, #0]
    2a5a:	cmp	r0, #64	; 0x40
    2a5c:	mov	lr, r0
    2a5e:	orr.w	r8, r5, #2
    2a62:	it	cs
    2a64:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a68:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    2a6a:	eor.w	r4, r4, #1
    2a6e:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2a70:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a74:	ite	eq
    2a76:	moveq	r4, #136	; 0x88
    2a78:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2a7a:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2a7e:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2a80:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a84:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2a88:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2a8a:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2a8c:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    2a90:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2a92:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2a94:	cmp	r0, #0
    2a96:	beq.w	2c06 <usb_isr+0x35a>
    2a9a:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    2a9c:	ldr	r3, [pc, #236]	; (2b8c <usb_isr+0x2e0>)
    2a9e:	ldrh	r2, [r3, #0]
    2aa0:	cmp.w	r2, #1280	; 0x500
    2aa4:	bne.n	2ac6 <usb_isr+0x21a>
			setup.bRequest = 0;
    2aa6:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2aa8:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    2aaa:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2aac:	ldr	r3, [pc, #248]	; (2ba8 <usb_isr+0x2fc>)
    2aae:	strb	r2, [r3, #0]
    2ab0:	b.n	2ac6 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    2ab2:	ldr	r2, [pc, #216]	; (2b8c <usb_isr+0x2e0>)
    2ab4:	ldrh	r0, [r2, #0]
    2ab6:	movw	r2, #8225	; 0x2021
    2aba:	cmp	r0, r2
    2abc:	beq.w	2c10 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2ac0:	ldr	r2, [pc, #180]	; (2b78 <usb_isr+0x2cc>)
    2ac2:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2ac6:	ldr	r2, [pc, #228]	; (2bac <usb_isr+0x300>)
    2ac8:	movs	r3, #1
    2aca:	strb	r3, [r2, #0]
    2acc:	b.n	2940 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2ace:	ldr	r2, [pc, #168]	; (2b78 <usb_isr+0x2cc>)
    2ad0:	ldr	r3, [pc, #168]	; (2b7c <usb_isr+0x2d0>)
    2ad2:	tst.w	r9, #8
    2ad6:	it	ne
    2ad8:	movne	r3, r2
    2ada:	str.w	r3, [r7, r8, lsl #3]
    2ade:	b.n	2940 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2ae0:	bl	268c <usb_free>
				packet = tx_first[endpoint];
    2ae4:	ldr	r2, [pc, #200]	; (2bb0 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2ae6:	ldr	r1, [pc, #204]	; (2bb4 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2ae8:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2aec:	cmp	r3, #0
    2aee:	beq.w	2d78 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2af2:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2af4:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2af6:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    2afa:	add.w	r2, r3, #8
    2afe:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    2b02:	cmp	r4, #3
    2b04:	bhi.n	2b12 <usb_isr+0x266>
    2b06:	tbb	[pc, r4]
    2b0a:	.short	0x022c
    2b0c:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    2b0e:	movs	r2, #2
    2b10:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    2b12:	ldrh	r2, [r3, #0]
    2b14:	tst.w	r9, #8
    2b18:	ite	eq
    2b1a:	moveq	r3, #136	; 0x88
    2b1c:	movne	r3, #200	; 0xc8
    2b1e:	orr.w	r3, r3, r2, lsl #16
    2b22:	str.w	r3, [r7, r8, lsl #3]
    2b26:	b.n	2940 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2b28:	lsls	r0, r4, #31
    2b2a:	bmi.w	2d14 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    2b2e:	lsls	r1, r4, #24
    2b30:	bmi.w	2d94 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2b34:	lsls	r2, r4, #30
    2b36:	bpl.n	2b46 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2b38:	ldr	r2, [pc, #124]	; (2bb8 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2b3a:	ldr	r1, [pc, #128]	; (2bbc <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2b3c:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2b3e:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2b40:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    2b42:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2b44:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2b46:	lsls	r3, r4, #27
    2b48:	bpl.n	2b50 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2b4a:	ldr	r3, [pc, #112]	; (2bbc <usb_isr+0x310>)
    2b4c:	movs	r2, #16
    2b4e:	strb	r2, [r3, #0]
	}

}
    2b50:	add	sp, #28
    2b52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2b56:	movs	r2, #4
    2b58:	strb	r2, [r1, r6]
						break;
    2b5a:	b.n	2b12 <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2b5c:	movs	r2, #5
    2b5e:	strb	r2, [r1, r6]
						break;
    2b60:	b.n	2b12 <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    2b62:	movs	r2, #3
    2b64:	strb	r2, [r1, r6]
						break;
    2b66:	b.n	2b12 <usb_isr+0x266>
    2b68:	.word	0x1fff0000
    2b6c:	.word	0x1fff193c
    2b70:	.word	0x1fff18e4
    2b74:	.word	0x1fff1e64
    2b78:	.word	0x004000c8
    2b7c:	.word	0x00400088
    2b80:	.word	0x1fff19d0
    2b84:	.word	0x1fff1951
    2b88:	.word	0x1fff1864
    2b8c:	.word	0x1fff19bc
    2b90:	.word	0x1fff18e0
    2b94:	.word	0x1fff1950
    2b98:	.word	0x400720c0
    2b9c:	.word	0x1fff19c8
    2ba0:	.word	0x1fff18f8
    2ba4:	.word	0x1fff19c4
    2ba8:	.word	0x40072098
    2bac:	.word	0x40072094
    2bb0:	.word	0x1fff1994
    2bb4:	.word	0x1fff19d4
    2bb8:	.word	0x40072088
    2bbc:	.word	0x40072080
    2bc0:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2bc4:	movw	r4, #8225	; 0x2021
    2bc8:	cmp	r1, r4
    2bca:	beq.w	2d06 <usb_isr+0x45a>
    2bce:	bhi.n	2c64 <usb_isr+0x3b8>
    2bd0:	cmp.w	r1, #2176	; 0x880
    2bd4:	beq.w	2e6a <usb_isr+0x5be>
    2bd8:	cmp.w	r1, #2304	; 0x900
    2bdc:	bne.w	2dea <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2be0:	ldr	r2, [pc, #712]	; (2eac <usb_isr+0x600>)
    2be2:	ldr	r4, [pc, #716]	; (2eb0 <usb_isr+0x604>)
    2be4:	ldrb	r1, [r5, #2]
    2be6:	strb	r1, [r2, #0]
    2be8:	add.w	r5, r4, #160	; 0xa0
    2bec:	b.n	2bf6 <usb_isr+0x34a>
    2bee:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2bf0:	cmp	r5, r4
    2bf2:	beq.w	2f08 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    2bf6:	ldr	r3, [r4, #32]
    2bf8:	lsls	r1, r3, #24
    2bfa:	bpl.n	2bee <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2bfc:	ldr	r0, [r4, #36]	; 0x24
    2bfe:	subs	r0, #8
    2c00:	bl	268c <usb_free>
    2c04:	b.n	2bee <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2c06:	cmp.w	lr, #64	; 0x40
    2c0a:	it	ne
    2c0c:	movne	r2, #0
    2c0e:	b.n	2a9a <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2c10:	ldr	r2, [pc, #672]	; (2eb4 <usb_isr+0x608>)
    2c12:	ldrb	r5, [r1, #0]
    2c14:	ldrb	r0, [r1, #1]
    2c16:	strb	r5, [r2, #0]
    2c18:	strb	r0, [r2, #1]
    2c1a:	ldrb	r5, [r1, #2]
    2c1c:	ldrb	r0, [r1, #3]
    2c1e:	strb	r5, [r2, #2]
    2c20:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2c22:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2c24:	ldrb	r5, [r1, #4]
    2c26:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2c28:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2c2a:	ldrb	r5, [r1, #5]
    2c2c:	ldrb	r1, [r1, #6]
    2c2e:	strb	r5, [r2, #5]
    2c30:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2c32:	beq.w	2e62 <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c36:	ldr	r1, [pc, #640]	; (2eb8 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c38:	ldr	r6, [pc, #640]	; (2ebc <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c3a:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c3c:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2c3e:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c42:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c44:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2c48:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c4a:	ite	eq
    2c4c:	moveq	r1, #136	; 0x88
    2c4e:	movne	r1, #200	; 0xc8
    2c50:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c54:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2c58:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c5c:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2c5e:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c60:	str	r1, [r2, #4]
    2c62:	b.n	2ac0 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2c64:	movw	r4, #8737	; 0x2221
    2c68:	cmp	r1, r4
    2c6a:	bne.w	307e <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2c6e:	ldr.w	ip, [pc, #656]	; 2f00 <usb_isr+0x654>
    2c72:	ldr	r3, [pc, #588]	; (2ec0 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    2c74:	ldr	r1, [pc, #588]	; (2ec4 <usb_isr+0x618>)
    2c76:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2c78:	ldr.w	r5, [ip]
    2c7c:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    2c7e:	str	r0, [sp, #4]
    2c80:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2c82:	movs	r0, #0
    2c84:	str	r0, [sp, #8]
    2c86:	mov	r8, r0
    2c88:	mov	ip, r0
    2c8a:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c8c:	ldr	r1, [pc, #552]	; (2eb8 <usb_isr+0x60c>)
    2c8e:	ldrb	r5, [r1, #0]
    2c90:	orr.w	lr, r5, #2
    2c94:	add.w	r3, r9, lr, lsl #3
    2c98:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c9a:	ldr	r3, [sp, #4]
    2c9c:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c9e:	ldr	r3, [sp, #12]
    2ca0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ca2:	ite	eq
    2ca4:	moveq	r4, #136	; 0x88
    2ca6:	movne	r4, #200	; 0xc8
    2ca8:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2cac:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2cb0:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    2cb4:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2cb6:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2cb8:	ldr.w	lr, [pc, #500]	; 2eb0 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    2cbc:	ldr	r3, [pc, #508]	; (2ebc <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    2cbe:	ldr.w	r8, [pc, #504]	; 2eb8 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2cc2:	cmp	r0, #0
    2cc4:	bne.w	2df8 <usb_isr+0x54c>
    2cc8:	cmp.w	ip, #64	; 0x40
    2ccc:	bne.n	2d06 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2cce:	orr.w	ip, r4, #2
    2cd2:	add.w	r3, r9, ip, lsl #3
    2cd6:	ldr	r4, [sp, #8]
    2cd8:	ldr.w	lr, [pc, #468]	; 2eb0 <usb_isr+0x604>
    2cdc:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2cde:	cmp	r2, #0
    2ce0:	bne.w	2e24 <usb_isr+0x578>
    2ce4:	lsls	r2, r0, #16
    2ce6:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    2cea:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2cee:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2cf2:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2cf4:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2cf6:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2cf8:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2cfa:	cmp	r0, #64	; 0x40
    2cfc:	bne.n	2d06 <usb_isr+0x45a>
    2cfe:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    2d00:	ldr	r2, [pc, #452]	; (2ec8 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    2d02:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    2d04:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2d06:	ldr	r2, [pc, #452]	; (2ecc <usb_isr+0x620>)
    2d08:	movs	r3, #1
    2d0a:	strb	r3, [r2, #0]
    2d0c:	b.n	2ac6 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    2d0e:	bl	1a6c <usb_serial_flush_callback>
    2d12:	b.n	2980 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2d14:	ldr	r3, [pc, #408]	; (2eb0 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2d16:	ldr	r0, [pc, #436]	; (2ecc <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    2d18:	ldr	r1, [pc, #412]	; (2eb8 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    2d1a:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2d1c:	mov.w	lr, #2
    2d20:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2d24:	ldr	r7, [pc, #424]	; (2ed0 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    2d26:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2d28:	ldr	r1, [pc, #424]	; (2ed4 <usb_isr+0x628>)
    2d2a:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    2d2c:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2d2e:	ldr	r6, [pc, #424]	; (2ed8 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    2d30:	ldr	r5, [pc, #424]	; (2edc <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2d32:	ldr	r4, [pc, #428]	; (2ee0 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    2d34:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2d36:	movs	r1, #13
    2d38:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2d3a:	movs	r1, #255	; 0xff
    2d3c:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2d3e:	ldr.w	lr, [pc, #452]	; 2f04 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    2d42:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2d44:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2d46:	ldr	r5, [pc, #412]	; (2ee4 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2d48:	ldr	r2, [pc, #412]	; (2ee8 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2d4a:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2d4e:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2d50:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2d52:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2d56:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2d58:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2d5a:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    2d5c:	add	sp, #28
    2d5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    2d62:	ldr	r2, [pc, #392]	; (2eec <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    2d64:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    2d68:	ldrb	r3, [r2, #0]
    2d6a:	adds	r3, #1
    2d6c:	strb	r3, [r2, #0]
    2d6e:	b.n	2940 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    2d70:	str.w	r0, [r3, r6, lsl #2]
    2d74:	ldr	r5, [pc, #376]	; (2ef0 <usb_isr+0x644>)
    2d76:	b.n	290e <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    2d78:	ldrb	r3, [r1, r6]
    2d7a:	cmp	r3, #3
    2d7c:	bhi.n	2e54 <usb_isr+0x5a8>
    2d7e:	add	r2, pc, #4	; (adr r2, 2d84 <usb_isr+0x4d8>)
    2d80:	ldr.w	pc, [r2, r3, lsl #2]
    2d84:	.word	0x00002941
    2d88:	.word	0x00002941
    2d8c:	.word	0x00002dd9
    2d90:	.word	0x00002dd3
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2d94:	ldr	r1, [pc, #312]	; (2ed0 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    2d96:	ldr	r3, [pc, #324]	; (2edc <usb_isr+0x630>)
    2d98:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2d9a:	movs	r0, #13
    2d9c:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    2d9e:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2da0:	lsls	r2, r4, #30
    2da2:	bpl.w	2b46 <usb_isr+0x29a>
    2da6:	b.n	2b38 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2da8:	movw	r2, #770	; 0x302
    2dac:	cmp	r1, r2
    2dae:	bne.w	306e <usb_isr+0x7c2>
    2db2:	ldrh	r1, [r5, #4]
    2db4:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2db8:	cmp	r1, #5
    2dba:	bhi.n	2dea <usb_isr+0x53e>
    2dbc:	ldrh	r2, [r5, #2]
    2dbe:	cbnz	r2, 2dea <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    2dc0:	ldr	r4, [pc, #268]	; (2ed0 <usb_isr+0x624>)
    2dc2:	str	r0, [sp, #4]
    2dc4:	lsls	r1, r1, #2
    2dc6:	add	r4, r1
    2dc8:	ldrb	r1, [r4, #0]
    2dca:	orr.w	r1, r1, #2
    2dce:	strb	r1, [r4, #0]
    2dd0:	b.n	2c82 <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2dd2:	movs	r3, #1
    2dd4:	strb	r3, [r1, r6]
						break;
    2dd6:	b.n	2940 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2dd8:	movs	r3, #0
    2dda:	strb	r3, [r1, r6]
						break;
    2ddc:	b.n	2940 <usb_isr+0x94>
    2dde:	ldrh	r1, [r5, #4]
    2de0:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2de4:	cmp	r1, #5
    2de6:	bls.w	3088 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2dea:	ldr	r2, [pc, #228]	; (2ed0 <usb_isr+0x624>)
    2dec:	movs	r3, #15
    2dee:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2df0:	ldr	r2, [pc, #216]	; (2ecc <usb_isr+0x620>)
    2df2:	movs	r3, #1
    2df4:	strb	r3, [r2, #0]
    2df6:	b.n	2ac6 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2df8:	cmp	r0, #64	; 0x40
    2dfa:	bls.w	2cce <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2dfe:	orr.w	r4, r4, #2
    2e02:	add.w	r1, lr, r4, lsl #3
    2e06:	ldr	r6, [sp, #8]
    2e08:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e0a:	cbz	r2, 2e3c <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    2e0c:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e10:	ldr	r2, [pc, #224]	; (2ef4 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    2e12:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2e14:	mov	r3, r6
    2e16:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2e18:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2e1c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e1e:	str.w	r2, [lr, r4, lsl #3]
    2e22:	b.n	2d00 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    2e24:	ldrb.w	r3, [sp, #4]
    2e28:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e2a:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2e2c:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2e2e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e30:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2e34:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e36:	str.w	r2, [lr, ip, lsl #3]
    2e3a:	b.n	2cfa <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    2e3c:	ldrb.w	r1, [sp, #4]
    2e40:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2e42:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e44:	ldr	r2, [pc, #140]	; (2ed4 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2e46:	strb.w	r5, [r8]
    2e4a:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2e4c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2e4e:	str.w	r2, [lr, r4, lsl #3]
    2e52:	b.n	2d00 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    2e54:	tst.w	r9, #8
    2e58:	ite	eq
    2e5a:	moveq	r3, #2
    2e5c:	movne	r3, #3
    2e5e:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    2e60:	b.n	2940 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2e62:	ldr	r2, [pc, #148]	; (2ef8 <usb_isr+0x64c>)
    2e64:	movs	r1, #15
    2e66:	strb	r1, [r2, #0]
    2e68:	b.n	2c36 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2e6a:	ldr	r2, [pc, #64]	; (2eac <usb_isr+0x600>)
    2e6c:	ldr	r4, [pc, #140]	; (2efc <usb_isr+0x650>)
    2e6e:	ldrb	r2, [r2, #0]
    2e70:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2e72:	ldrh	r2, [r5, #6]
    2e74:	cmp	r2, r0
    2e76:	bcs.w	323c <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2e7a:	ldr	r1, [pc, #60]	; (2eb8 <usb_isr+0x60c>)
    2e7c:	ldrb	r5, [r1, #0]
    2e7e:	cmp	r2, #64	; 0x40
    2e80:	mov	ip, r2
    2e82:	orr.w	lr, r5, #2
    2e86:	it	cs
    2e88:	movcs.w	ip, #64	; 0x40
    2e8c:	add.w	r3, r4, ip
    2e90:	add.w	r0, r9, lr, lsl #3
    2e94:	str	r3, [sp, #8]
    2e96:	movs	r3, #1
    2e98:	str	r4, [r0, #4]
    2e9a:	mov.w	r8, ip, lsl #16
    2e9e:	rsb	r0, ip, r2
    2ea2:	str	r3, [sp, #4]
    2ea4:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ea6:	movs	r4, #200	; 0xc8
    2ea8:	b.n	2ca8 <usb_isr+0x3fc>
    2eaa:	nop
    2eac:	.word	0x1fff19d0
    2eb0:	.word	0x1fff0000
    2eb4:	.word	0x1fff1d2c
    2eb8:	.word	0x1fff19c4
    2ebc:	.word	0x1fff1950
    2ec0:	.word	0x1fff1d34
    2ec4:	.word	0x1fff1874
    2ec8:	.word	0x1fff18f8
    2ecc:	.word	0x40072094
    2ed0:	.word	0x400720c0
    2ed4:	.word	0x00400088
    2ed8:	.word	0x40072088
    2edc:	.word	0x40072080
    2ee0:	.word	0x40072098
    2ee4:	.word	0x1fff18fc
    2ee8:	.word	0x1fff1954
    2eec:	.word	0x1fff19c5
    2ef0:	.word	0x1fff18e4
    2ef4:	.word	0x004000c8
    2ef8:	.word	0x1fff1951
    2efc:	.word	0x1fff19c8
    2f00:	.word	0x1fff187c
    2f04:	.word	0x4007208c
    2f08:	ldr	r4, [pc, #704]	; (31cc <usb_isr+0x920>)
    2f0a:	ldr	r2, [pc, #708]	; (31d0 <usb_isr+0x924>)
    2f0c:	ldr	r1, [pc, #708]	; (31d4 <usb_isr+0x928>)
    2f0e:	ldr	r0, [pc, #712]	; (31d8 <usb_isr+0x92c>)
    2f10:	ldr	r5, [pc, #712]	; (31dc <usb_isr+0x930>)
    2f12:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2f14:	movs	r3, #0
    2f16:	ldr	r4, [pc, #712]	; (31e0 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2f18:	str	r4, [sp, #8]
    2f1a:	str	r6, [sp, #20]
    2f1c:	str	r5, [sp, #12]
    2f1e:	mov	r8, r0
    2f20:	mov	r4, r3
    2f22:	str	r7, [sp, #16]
    2f24:	mov	r6, r2
    2f26:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    2f28:	ldr	r0, [r6, #0]
			while (p) {
    2f2a:	cbz	r0, 2f38 <usb_isr+0x68c>
				n = p->next;
    2f2c:	ldr	r7, [r0, #4]
				usb_free(p);
    2f2e:	bl	268c <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    2f32:	mov	r0, r7
    2f34:	cmp	r7, #0
    2f36:	bne.n	2f2c <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    2f38:	movs	r3, #0
    2f3a:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    2f3c:	ldr	r3, [sp, #12]
			p = tx_first[i];
    2f3e:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    2f40:	mov	r2, r3
    2f42:	movs	r3, #0
    2f44:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    2f48:	cbz	r0, 2f56 <usb_isr+0x6aa>
				n = p->next;
    2f4a:	ldr	r7, [r0, #4]
				usb_free(p);
    2f4c:	bl	268c <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    2f50:	mov	r0, r7
    2f52:	cmp	r7, #0
    2f54:	bne.n	2f4a <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    2f56:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2f58:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    2f5a:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2f5c:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    2f5e:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    2f62:	ldr	r2, [sp, #8]
    2f64:	mov.w	r1, #0
			switch (tx_state[i]) {
    2f68:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    2f6a:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    2f6e:	cmp	r3, #3
    2f70:	bhi.n	2f82 <usb_isr+0x6d6>
    2f72:	tbb	[pc, r3]
    2f76:	.short	0x0258
    2f78:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2f7a:	ldr	r3, [sp, #4]
    2f7c:	mov.w	r2, #1
    2f80:	strb	r2, [r3, #0]
    2f82:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    2f84:	adds	r4, #1
    2f86:	adds	r3, #1
    2f88:	cmp	r4, #5
    2f8a:	add.w	r6, r6, #4
    2f8e:	add.w	r5, r5, #4
    2f92:	str	r3, [sp, #4]
    2f94:	bne.n	2f28 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2f96:	ldr	r4, [pc, #588]	; (31e4 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    2f98:	ldr	r5, [pc, #588]	; (31e8 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2f9a:	ldrb	r2, [r4, #0]
			*reg = epconf;
    2f9c:	ldr	r3, [pc, #588]	; (31ec <usb_isr+0x940>)
    2f9e:	ldr	r7, [sp, #16]
    2fa0:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    2fa2:	movs	r1, #0
    2fa4:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2fa6:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2fa8:	lsls	r2, r2, #28
    2faa:	bmi.n	30a2 <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2fac:	ldrb	r2, [r4, #1]
			*reg = epconf;
    2fae:	ldr	r1, [pc, #576]	; (31f0 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2fb0:	ldr.w	r8, [pc, #588]	; 3200 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2fb4:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2fb6:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2fb8:	mov.w	r1, #0
    2fbc:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    2fc0:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2fc4:	bmi.w	314e <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2fc8:	ldrb	r2, [r4, #2]
			*reg = epconf;
    2fca:	ldr	r1, [pc, #552]	; (31f4 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2fcc:	ldr.w	r8, [pc, #560]	; 3200 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2fd0:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2fd2:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2fd4:	mov.w	r1, #0
    2fd8:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    2fdc:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2fe0:	bmi.w	3126 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2fe4:	ldr	r1, [pc, #528]	; (31f8 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2fe6:	ldrb	r2, [r4, #3]
			*reg = epconf;
    2fe8:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2fea:	movs	r1, #0
    2fec:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    2ff0:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2ff4:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2ff6:	ldr.w	r8, [pc, #520]	; 3200 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2ffa:	bmi.n	30f8 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2ffc:	ldrb	r2, [r4, #4]
			*reg = epconf;
    2ffe:	ldr	r1, [pc, #508]	; (31fc <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3000:	ldr	r4, [pc, #508]	; (3200 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3002:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3004:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3006:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3008:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    300c:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3010:	bmi.n	30ce <usb_isr+0x822>
    3012:	ldrb	r3, [r6, #0]
    3014:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3016:	movs	r1, #0
    3018:	eor.w	r2, r3, #1
    301c:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3020:	str.w	r1, [r9, #184]	; 0xb8
    3024:	b.n	2c82 <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3026:	ldr	r3, [sp, #4]
    3028:	mov.w	r2, #0
    302c:	strb	r2, [r3, #0]
    302e:	b.n	2f82 <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3030:	ldr	r2, [pc, #464]	; (3204 <usb_isr+0x958>)
    3032:	ldr	r4, [r2, #4]
    3034:	cmp	r4, #0
    3036:	beq.w	2dea <usb_isr+0x53e>
    303a:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    303c:	ldrh.w	lr, [r5, #4]
    3040:	b.n	304c <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3042:	adds	r2, #12
			if (list->addr == NULL) break;
    3044:	ldr	r4, [r2, #4]
    3046:	cmp	r4, #0
    3048:	beq.w	2dea <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    304c:	ldrh	r3, [r2, #0]
    304e:	cmp	r3, r0
    3050:	bne.n	3042 <usb_isr+0x796>
    3052:	ldrh	r3, [r2, #2]
    3054:	cmp	r3, lr
    3056:	bne.n	3042 <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3058:	lsrs	r0, r0, #8
    305a:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    305c:	ite	eq
    305e:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    3060:	ldrhne	r0, [r2, #8]
    3062:	b.n	2e72 <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3064:	ldr	r4, [pc, #416]	; (3208 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    3066:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3068:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    306a:	strb	r2, [r4, #1]
    306c:	b.n	2e72 <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    306e:	cmp.w	r1, #1280	; 0x500
    3072:	bne.w	2dea <usb_isr+0x53e>
    3076:	movs	r3, #1
    3078:	movs	r2, #0
    307a:	str	r3, [sp, #4]
    307c:	b.n	2c82 <usb_isr+0x3d6>
    307e:	movw	r2, #8993	; 0x2321
    3082:	cmp	r1, r2
    3084:	beq.n	3076 <usb_isr+0x7ca>
    3086:	b.n	2dea <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3088:	ldrh	r2, [r5, #2]
    308a:	cmp	r2, #0
    308c:	bne.w	2dea <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3090:	ldr	r4, [pc, #376]	; (320c <usb_isr+0x960>)
    3092:	str	r0, [sp, #4]
    3094:	lsls	r1, r1, #2
    3096:	add	r4, r1
    3098:	ldrb	r1, [r4, #0]
    309a:	bic.w	r1, r1, #2
    309e:	strb	r1, [r4, #0]
    30a0:	b.n	2c82 <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    30a2:	bl	264c <usb_malloc>
				if (p) {
    30a6:	cmp	r0, #0
    30a8:	beq.w	3218 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    30ac:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    30ae:	ldr	r2, [pc, #352]	; (3210 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    30b0:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    30b4:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    30b8:	bl	264c <usb_malloc>
				if (p) {
    30bc:	cmp	r0, #0
    30be:	beq.n	31c0 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    30c0:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    30c2:	ldr	r2, [pc, #336]	; (3214 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    30c4:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    30c8:	str.w	r2, [r9, #40]	; 0x28
    30cc:	b.n	2fac <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    30ce:	bl	264c <usb_malloc>
				if (p) {
    30d2:	cmp	r0, #0
    30d4:	beq.n	3184 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    30d6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    30d8:	ldr	r2, [pc, #308]	; (3210 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    30da:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    30de:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    30e2:	bl	264c <usb_malloc>
				if (p) {
    30e6:	cmp	r0, #0
    30e8:	beq.n	3178 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    30ea:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    30ec:	ldr	r2, [pc, #292]	; (3214 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    30ee:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    30f2:	str.w	r2, [r9, #168]	; 0xa8
    30f6:	b.n	3012 <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    30f8:	bl	264c <usb_malloc>
				if (p) {
    30fc:	cmp	r0, #0
    30fe:	beq.w	3230 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    3102:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3104:	ldr	r2, [pc, #264]	; (3210 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3106:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    310a:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    310e:	bl	264c <usb_malloc>
				if (p) {
    3112:	cmp	r0, #0
    3114:	beq.w	3224 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    3118:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    311a:	ldr	r2, [pc, #248]	; (3214 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    311c:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3120:	str.w	r2, [r9, #136]	; 0x88
    3124:	b.n	2ffc <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3126:	bl	264c <usb_malloc>
				if (p) {
    312a:	cmp	r0, #0
    312c:	beq.n	31b4 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    312e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3130:	ldr	r2, [pc, #220]	; (3210 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3132:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3136:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    313a:	bl	264c <usb_malloc>
				if (p) {
    313e:	cbz	r0, 31a8 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3140:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3142:	ldr	r2, [pc, #208]	; (3214 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3144:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3148:	str.w	r2, [r9, #104]	; 0x68
    314c:	b.n	2fe4 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    314e:	bl	264c <usb_malloc>
				if (p) {
    3152:	cbz	r0, 319c <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3154:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3156:	ldr	r2, [pc, #184]	; (3210 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3158:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    315c:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3160:	bl	264c <usb_malloc>
				if (p) {
    3164:	cbz	r0, 3190 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    3166:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3168:	ldr	r2, [pc, #168]	; (3214 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    316a:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    316e:	str.w	r2, [r9, #72]	; 0x48
    3172:	b.n	2fc8 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3174:	movs	r0, #2
    3176:	b.n	2e72 <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3178:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    317a:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    317e:	adds	r2, #1
    3180:	strb	r2, [r5, #0]
    3182:	b.n	3012 <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3184:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3186:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    318a:	adds	r2, #1
    318c:	strb	r2, [r5, #0]
    318e:	b.n	30e2 <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3190:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3192:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    3196:	adds	r2, #1
    3198:	strb	r2, [r5, #0]
    319a:	b.n	2fc8 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    319c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    319e:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    31a2:	adds	r2, #1
    31a4:	strb	r2, [r5, #0]
    31a6:	b.n	3160 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    31a8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    31aa:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    31ae:	adds	r2, #1
    31b0:	strb	r2, [r5, #0]
    31b2:	b.n	2fe4 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    31b4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    31b6:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    31ba:	adds	r2, #1
    31bc:	strb	r2, [r5, #0]
    31be:	b.n	313a <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    31c0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    31c2:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    31c6:	adds	r2, #1
    31c8:	strb	r2, [r5, #0]
    31ca:	b.n	2fac <usb_isr+0x700>
    31cc:	.word	0x1fff19d4
    31d0:	.word	0x1fff193c
    31d4:	.word	0x1fff1994
    31d8:	.word	0x1fff19a8
    31dc:	.word	0x1fff18e4
    31e0:	.word	0x1fff1e64
    31e4:	.word	0x00004a78
    31e8:	.word	0x1fff19c5
    31ec:	.word	0x400720c4
    31f0:	.word	0x400720c8
    31f4:	.word	0x400720cc
    31f8:	.word	0x400720d0
    31fc:	.word	0x400720d4
    3200:	.word	0x1fff0000
    3204:	.word	0x00004a80
    3208:	.word	0x1fff19c8
    320c:	.word	0x400720c0
    3210:	.word	0x00400088
    3214:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3218:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    321a:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    321e:	adds	r2, #1
    3220:	strb	r2, [r5, #0]
    3222:	b.n	30b8 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3224:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3226:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    322a:	adds	r2, #1
    322c:	strb	r2, [r5, #0]
    322e:	b.n	2ffc <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3230:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3232:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    3236:	adds	r2, #1
    3238:	strb	r2, [r5, #0]
    323a:	b.n	310e <usb_isr+0x862>
    323c:	cmp	r0, #64	; 0x40
    323e:	mov	ip, r0
    3240:	it	cs
    3242:	movcs.w	ip, #64	; 0x40
    3246:	add.w	r3, r4, ip
    324a:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    324c:	movs	r3, #1
    324e:	rsb	r0, ip, r0
    3252:	mov.w	r8, ip, lsl #16
    3256:	movs	r2, #0
    3258:	str	r3, [sp, #4]
    325a:	b.n	2c8c <usb_isr+0x3e0>

0000325c <usb_init>:
}



void usb_init(void)
{
    325c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3260:	ldr	r4, [pc, #156]	; (3300 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3262:	bl	3a9c <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3266:	movs	r2, #0
    3268:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    326c:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    326e:	str	r2, [r3, #0]
		table[i].addr = 0;
    3270:	str	r2, [r3, #4]
    3272:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3274:	cmp	r3, r0
		table[i].desc = 0;
    3276:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    327a:	bne.n	326e <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    327c:	ldr	r0, [pc, #132]	; (3304 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    327e:	ldr	r2, [pc, #136]	; (3308 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3280:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3282:	ldr.w	lr, [pc, #156]	; 3320 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3286:	ldr	r6, [pc, #132]	; (330c <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3288:	ldr	r5, [pc, #132]	; (3310 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    328a:	ldr	r7, [pc, #136]	; (3314 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    328c:	ldr.w	ip, [pc, #148]	; 3324 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    3290:	ldr.w	r8, [pc, #148]	; 3328 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3294:	orr.w	r3, r3, #262144	; 0x40000
    3298:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    329a:	ldr	r3, [r2, #0]
    329c:	orr.w	r3, r3, #50331648	; 0x3000000
    32a0:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    32a2:	movs	r3, #3
    32a4:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    32a8:	movs	r3, #160	; 0xa0
    32aa:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    32ac:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    32b0:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    32b4:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    32b8:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    32ba:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    32bc:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    32c0:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    32c2:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    32c4:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    32c6:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    32c8:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    32ca:	ldr	r5, [pc, #76]	; (3318 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    32cc:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    32d0:	ldr	r0, [pc, #72]	; (331c <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    32d2:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    32d6:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    32d8:	movs	r3, #1
    32da:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    32de:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    32e2:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    32e6:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    32e8:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    32ea:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    32ee:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    32f0:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    32f2:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    32f6:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    32fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32fe:	nop
    3300:	.word	0x1fff0000
    3304:	.word	0x40048034
    3308:	.word	0x4000d800
    330c:	.word	0x40072140
    3310:	.word	0x4007209c
    3314:	.word	0x400720b0
    3318:	.word	0xe000e435
    331c:	.word	0xe000e104
    3320:	.word	0x40072144
    3324:	.word	0x40072080
    3328:	.word	0x40072088

0000332c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    332c:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    332e:	ldr	r4, [pc, #176]	; (33e0 <yield+0xb4>)
    3330:	ldrb	r3, [r4, #0]
    3332:	cbz	r3, 3336 <yield+0xa>
    3334:	pop	{r3, r4, r5, pc}
	running = 1;
    3336:	movs	r3, #1
    3338:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    333a:	bl	1858 <usb_serial_available>
	if (Serial.available()) serialEvent();
    333e:	cmp	r0, #0
    3340:	bne.n	33c8 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    3342:	bl	386c <serial_available>
	if (Serial1.available()) serialEvent1();
    3346:	cmp	r0, #0
    3348:	bne.n	33c2 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    334a:	bl	3554 <serial2_available>
	if (Serial2.available()) serialEvent2();
    334e:	cmp	r0, #0
    3350:	bne.n	33bc <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    3352:	bl	3b6c <serial3_available>
	if (Serial3.available()) serialEvent3();
    3356:	cbnz	r0, 33b6 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    3358:	bl	3680 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    335c:	cbnz	r0, 33b0 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    335e:	bl	345c <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3362:	cbnz	r0, 33aa <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    3364:	bl	3998 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    3368:	cbnz	r0, 33a4 <yield+0x78>
#endif
	running = 0;
    336a:	movs	r3, #0
    336c:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    336e:	mrs	r3, IPSR
		if (ipsr != 0) return;
    3372:	cmp	r3, #0
    3374:	bne.n	3334 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3376:	mrs	r1, PRIMASK
		__disable_irq();
    337a:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    337c:	ldr	r3, [pc, #100]	; (33e4 <yield+0xb8>)
    337e:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    3380:	cbz	r0, 33ce <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    3382:	ldr	r4, [pc, #100]	; (33e8 <yield+0xbc>)
    3384:	ldrb	r2, [r4, #0]
    3386:	cbnz	r2, 33ce <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    3388:	ldr	r5, [r0, #20]
    338a:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    338c:	movs	r3, #1
    338e:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    3390:	cbz	r5, 33d6 <yield+0xaa>
			firstYield->_prev = nullptr;
    3392:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3394:	cbnz	r1, 3398 <yield+0x6c>
    3396:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3398:	movs	r5, #0
    339a:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    339c:	ldr	r3, [r0, #8]
    339e:	blx	r3
		runningFromYield = false;
    33a0:	strb	r5, [r4, #0]
    33a2:	b.n	3334 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    33a4:	bl	3458 <serialEvent6()>
    33a8:	b.n	336a <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    33aa:	bl	33f0 <serialEvent5()>
    33ae:	b.n	3364 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    33b0:	bl	3444 <serialEvent4()>
    33b4:	b.n	335e <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    33b6:	bl	3c68 <serialEvent3()>
    33ba:	b.n	3358 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    33bc:	bl	3440 <serialEvent2()>
    33c0:	b.n	3352 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    33c2:	bl	3c64 <serialEvent1()>
    33c6:	b.n	334a <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    33c8:	bl	341c <serialEvent()>
    33cc:	b.n	3342 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    33ce:	cmp	r1, #0
    33d0:	bne.n	3334 <yield+0x8>
    33d2:	cpsie	i
    33d4:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    33d6:	ldr	r3, [pc, #20]	; (33ec <yield+0xc0>)
    33d8:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    33da:	cmp	r1, #0
    33dc:	bne.n	3398 <yield+0x6c>
    33de:	b.n	3396 <yield+0x6a>
    33e0:	.word	0x1fff19d9
    33e4:	.word	0x1fff1cec
    33e8:	.word	0x1fff1cf0
    33ec:	.word	0x1fff1ce8

000033f0 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    33f0:	bx	lr
    33f2:	nop

000033f4 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    33f4:	b.w	1874 <usb_serial_flush_input>

000033f8 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    33f8:	b.w	1828 <usb_serial_peekchar>

000033fc <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    33fc:	b.w	17e0 <usb_serial_getchar>

00003400 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3400:	b.w	1858 <usb_serial_available>

00003404 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3404:	b.w	1a14 <usb_serial_flush_output>

00003408 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3408:	b.w	19cc <usb_serial_write_buffer_free>

0000340c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    340c:	mov	r0, r1
    340e:	mov	r1, r2
    3410:	b.w	18ac <usb_serial_write>

00003414 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3414:	mov	r0, r1
    3416:	b.w	19b4 <usb_serial_putchar>
    341a:	nop

0000341c <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    341c:	bx	lr
    341e:	nop

00003420 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3420:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    3422:	ldr	r2, [pc, #24]	; (343c <Print::println()+0x1c>)
	return write(buf, 2);
    3424:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3426:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    3428:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    342a:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    342c:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    342e:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    3432:	movs	r2, #2
    3434:	blx	r3
}
    3436:	add	sp, #12
    3438:	ldr.w	pc, [sp], #4
    343c:	.word	0x00004a74

00003440 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    3440:	bx	lr
    3442:	nop

00003444 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    3444:	bx	lr
    3446:	nop

00003448 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3448:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    344a:	bl	490 <setup>
	while (1) {
		loop();
    344e:	bl	494 <loop>
		yield();
    3452:	bl	332c <yield>
    3456:	b.n	344e <main+0x6>

00003458 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    3458:	bx	lr
    345a:	nop

0000345c <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    345c:	ldr	r2, [pc, #20]	; (3474 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    345e:	ldr	r3, [pc, #24]	; (3478 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3460:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3462:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3464:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3466:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3468:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    346a:	it	cc
    346c:	addcc	r0, #64	; 0x40
    346e:	subs	r0, r0, r3
}
    3470:	bx	lr
    3472:	nop
    3474:	.word	0x1fff19e0
    3478:	.word	0x1fff19e1

0000347c <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    347c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    347e:	ldr	r3, [pc, #172]	; (352c <uart4_status_isr+0xb0>)
    3480:	ldrb	r2, [r3, #4]
    3482:	lsls	r4, r2, #26
    3484:	bpl.n	34c6 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3486:	ldr	r0, [pc, #168]	; (3530 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3488:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    348a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    348c:	ldr	r1, [pc, #164]	; (3534 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    348e:	adds	r3, #1
    3490:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3492:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3494:	it	gt
    3496:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3498:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    349a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    349c:	beq.n	34a6 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    349e:	ldr	r4, [pc, #152]	; (3538 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    34a0:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    34a2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    34a4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    34a6:	ldr	r2, [pc, #148]	; (353c <uart4_status_isr+0xc0>)
    34a8:	ldr	r1, [r2, #0]
    34aa:	cbz	r1, 34c6 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    34ac:	ldr	r2, [pc, #144]	; (3540 <uart4_status_isr+0xc4>)
    34ae:	ldrb	r2, [r2, #0]
    34b0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    34b2:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    34b4:	itet	cc
    34b6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    34ba:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    34bc:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    34be:	cmp	r3, #39	; 0x27
    34c0:	itt	gt
    34c2:	movgt	r3, #1
    34c4:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    34c6:	ldr	r2, [pc, #100]	; (352c <uart4_status_isr+0xb0>)
    34c8:	ldrb	r3, [r2, #3]
    34ca:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    34cc:	lsls	r0, r3, #24
    34ce:	bmi.n	34f4 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    34d0:	lsls	r2, r3, #25
    34d2:	bpl.n	34f0 <uart4_status_isr+0x74>
    34d4:	ldr	r3, [pc, #84]	; (352c <uart4_status_isr+0xb0>)
    34d6:	ldrb	r3, [r3, #4]
    34d8:	lsls	r3, r3, #25
    34da:	bpl.n	34f0 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    34dc:	ldr	r3, [pc, #100]	; (3544 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    34de:	ldr	r1, [pc, #104]	; (3548 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    34e0:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    34e2:	movs	r2, #0
    34e4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    34e6:	cbz	r3, 34ea <uart4_status_isr+0x6e>
    34e8:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    34ea:	ldr	r3, [pc, #64]	; (352c <uart4_status_isr+0xb0>)
    34ec:	movs	r2, #44	; 0x2c
    34ee:	strb	r2, [r3, #3]
	}
}
    34f0:	pop	{r4, r5}
    34f2:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    34f4:	ldrb	r1, [r2, #4]
    34f6:	lsls	r1, r1, #24
    34f8:	bpl.n	34d0 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    34fa:	ldr	r1, [pc, #80]	; (354c <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    34fc:	ldr	r0, [pc, #64]	; (3540 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    34fe:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3500:	ldrb	r1, [r0, #0]
    3502:	uxtb	r1, r1
		if (head == tail) {
    3504:	cmp	r4, r1
    3506:	beq.n	3524 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    3508:	adds	r2, r1, #1
    350a:	cmp	r2, #39	; 0x27
    350c:	itt	hi
    350e:	movhi	r1, #0
    3510:	movhi	r2, r1
			n = tx_buffer[tail];
    3512:	ldr	r5, [pc, #60]	; (3550 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3514:	ldr	r4, [pc, #20]	; (352c <uart4_status_isr+0xb0>)
    3516:	it	ls
    3518:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    351a:	ldrb	r2, [r5, r2]
    351c:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    351e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3520:	strb	r1, [r0, #0]
    3522:	b.n	34d0 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    3524:	movs	r1, #108	; 0x6c
    3526:	strb	r1, [r2, #3]
    3528:	b.n	34d0 <uart4_status_isr+0x54>
    352a:	nop
    352c:	.word	0x400ea000
    3530:	.word	0x1fff19e0
    3534:	.word	0x1fff19e1
    3538:	.word	0x1fff1a0c
    353c:	.word	0x1fff19dc
    3540:	.word	0x1fff1a4d
    3544:	.word	0x1fff1a50
    3548:	.word	0x1fff1a4c
    354c:	.word	0x1fff1a54
    3550:	.word	0x1fff19e4

00003554 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3554:	ldr	r2, [pc, #20]	; (356c <serial2_available+0x18>)
	tail = rx_buffer_tail;
    3556:	ldr	r3, [pc, #24]	; (3570 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3558:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    355a:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    355c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    355e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3560:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    3562:	it	cc
    3564:	addcc	r0, #64	; 0x40
    3566:	subs	r0, r0, r3
}
    3568:	bx	lr
    356a:	nop
    356c:	.word	0x1fff1ac8
    3570:	.word	0x1fff1a5d

00003574 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    3574:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3576:	ldr	r3, [pc, #224]	; (3658 <uart1_status_isr+0xe4>)
    3578:	ldrb	r2, [r3, #4]
    357a:	tst.w	r2, #48	; 0x30
    357e:	beq.n	35da <uart1_status_isr+0x66>
		__disable_irq();
    3580:	cpsid	i
		avail = UART1_RCFIFO;
    3582:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3584:	and.w	r2, r1, #255	; 0xff
    3588:	cmp	r1, #0
    358a:	beq.n	3608 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    358c:	cpsie	i
			head = rx_buffer_head;
    358e:	ldr	r7, [pc, #204]	; (365c <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3590:	ldr	r1, [pc, #204]	; (3660 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3592:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3594:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3596:	ldr	r6, [pc, #204]	; (3664 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3598:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    359a:	uxtb	r0, r0
			tail = rx_buffer_tail;
    359c:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    359e:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    35a0:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    35a2:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    35a4:	it	cs
    35a6:	movcs	r3, #0
				if (newhead != tail) {
    35a8:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    35aa:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    35ae:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    35b0:	itt	ne
    35b2:	strbne	r1, [r6, r3]
    35b4:	movne	r0, r3
				}
			} while (--avail > 0);
    35b6:	ands.w	r2, r2, #255	; 0xff
    35ba:	bne.n	359e <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    35bc:	ldr	r3, [pc, #168]	; (3668 <uart1_status_isr+0xf4>)
    35be:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    35c0:	uxtb	r2, r0
    35c2:	strb	r2, [r7, #0]
			if (rts_pin) {
    35c4:	cbz	r3, 35da <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    35c6:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    35c8:	itet	cc
    35ca:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    35ce:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    35d0:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    35d2:	cmp	r0, #39	; 0x27
    35d4:	itt	gt
    35d6:	movgt	r2, #1
    35d8:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    35da:	ldr	r1, [pc, #124]	; (3658 <uart1_status_isr+0xe4>)
    35dc:	ldrb	r2, [r1, #3]
    35de:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    35e0:	lsls	r5, r2, #24
    35e2:	bmi.n	3612 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    35e4:	lsls	r2, r2, #25
    35e6:	bpl.n	3604 <uart1_status_isr+0x90>
    35e8:	ldr	r3, [pc, #108]	; (3658 <uart1_status_isr+0xe4>)
    35ea:	ldrb	r3, [r3, #4]
    35ec:	lsls	r3, r3, #25
    35ee:	bpl.n	3604 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    35f0:	ldr	r3, [pc, #120]	; (366c <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    35f2:	ldr	r1, [pc, #124]	; (3670 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    35f4:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    35f6:	movs	r2, #0
    35f8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    35fa:	cbz	r3, 35fe <uart1_status_isr+0x8a>
    35fc:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    35fe:	ldr	r3, [pc, #88]	; (3658 <uart1_status_isr+0xe4>)
    3600:	movs	r2, #60	; 0x3c
    3602:	strb	r2, [r3, #3]
	}
}
    3604:	pop	{r4, r5, r6, r7}
    3606:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3608:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    360a:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    360c:	strb	r2, [r3, #17]
			__enable_irq();
    360e:	cpsie	i
    3610:	b.n	35da <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3612:	ldrb	r3, [r1, #4]
    3614:	lsls	r4, r3, #24
    3616:	bpl.n	35e4 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    3618:	ldr	r3, [pc, #88]	; (3674 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    361a:	ldr	r6, [pc, #92]	; (3678 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    361c:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    361e:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3620:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3622:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3624:	cmp	r4, r3
    3626:	beq.n	3646 <uart1_status_isr+0xd2>
    3628:	ldr	r5, [pc, #80]	; (367c <uart1_status_isr+0x108>)
    362a:	b.n	3630 <uart1_status_isr+0xbc>
    362c:	cmp	r3, r4
    362e:	beq.n	3646 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    3630:	adds	r3, #1
    3632:	cmp	r3, #40	; 0x28
    3634:	it	cs
    3636:	movcs	r3, #0
			avail = UART1_S1;
    3638:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    363a:	ldrb	r0, [r5, r3]
    363c:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    363e:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    3640:	ldrb	r0, [r1, #20]
    3642:	cmp	r0, #7
    3644:	bls.n	362c <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    3646:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3648:	ldr	r1, [pc, #12]	; (3658 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    364a:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    364c:	ldrb	r3, [r1, #4]
    364e:	lsls	r0, r3, #24
    3650:	itt	mi
    3652:	movmi	r3, #124	; 0x7c
    3654:	strbmi	r3, [r1, #3]
    3656:	b.n	35e4 <uart1_status_isr+0x70>
    3658:	.word	0x4006b000
    365c:	.word	0x1fff1ac8
    3660:	.word	0x1fff1a5d
    3664:	.word	0x1fff1a88
    3668:	.word	0x1fff1a58
    366c:	.word	0x1fff1acc
    3670:	.word	0x1fff1a5c
    3674:	.word	0x1fff1ad0
    3678:	.word	0x1fff1ac9
    367c:	.word	0x1fff1a60

00003680 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3680:	ldr	r2, [pc, #20]	; (3698 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    3682:	ldr	r3, [pc, #24]	; (369c <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3684:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3686:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3688:	uxtb	r0, r0
	tail = rx_buffer_tail;
    368a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    368c:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    368e:	it	cc
    3690:	addcc	r0, #64	; 0x40
    3692:	subs	r0, r0, r3
}
    3694:	bx	lr
    3696:	nop
    3698:	.word	0x1fff1ad8
    369c:	.word	0x1fff1ad9

000036a0 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    36a0:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    36a2:	ldr	r3, [pc, #172]	; (3750 <uart3_status_isr+0xb0>)
    36a4:	ldrb	r2, [r3, #4]
    36a6:	lsls	r4, r2, #26
    36a8:	bpl.n	36ea <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    36aa:	ldr	r0, [pc, #168]	; (3754 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    36ac:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    36ae:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    36b0:	ldr	r1, [pc, #164]	; (3758 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    36b2:	adds	r3, #1
    36b4:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    36b6:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    36b8:	it	gt
    36ba:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    36bc:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    36be:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    36c0:	beq.n	36ca <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    36c2:	ldr	r4, [pc, #152]	; (375c <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    36c4:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    36c6:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    36c8:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    36ca:	ldr	r2, [pc, #148]	; (3760 <uart3_status_isr+0xc0>)
    36cc:	ldr	r1, [r2, #0]
    36ce:	cbz	r1, 36ea <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    36d0:	ldr	r2, [pc, #144]	; (3764 <uart3_status_isr+0xc4>)
    36d2:	ldrb	r2, [r2, #0]
    36d4:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    36d6:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    36d8:	itet	cc
    36da:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    36de:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    36e0:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    36e2:	cmp	r3, #39	; 0x27
    36e4:	itt	gt
    36e6:	movgt	r3, #1
    36e8:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    36ea:	ldr	r2, [pc, #100]	; (3750 <uart3_status_isr+0xb0>)
    36ec:	ldrb	r3, [r2, #3]
    36ee:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    36f0:	lsls	r0, r3, #24
    36f2:	bmi.n	3718 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    36f4:	lsls	r2, r3, #25
    36f6:	bpl.n	3714 <uart3_status_isr+0x74>
    36f8:	ldr	r3, [pc, #84]	; (3750 <uart3_status_isr+0xb0>)
    36fa:	ldrb	r3, [r3, #4]
    36fc:	lsls	r3, r3, #25
    36fe:	bpl.n	3714 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3700:	ldr	r3, [pc, #100]	; (3768 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3702:	ldr	r1, [pc, #104]	; (376c <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3704:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3706:	movs	r2, #0
    3708:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    370a:	cbz	r3, 370e <uart3_status_isr+0x6e>
    370c:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    370e:	ldr	r3, [pc, #64]	; (3750 <uart3_status_isr+0xb0>)
    3710:	movs	r2, #44	; 0x2c
    3712:	strb	r2, [r3, #3]
	}
}
    3714:	pop	{r4, r5}
    3716:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3718:	ldrb	r1, [r2, #4]
    371a:	lsls	r1, r1, #24
    371c:	bpl.n	36f4 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    371e:	ldr	r1, [pc, #80]	; (3770 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3720:	ldr	r0, [pc, #64]	; (3764 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3722:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3724:	ldrb	r1, [r0, #0]
    3726:	uxtb	r1, r1
		if (head == tail) {
    3728:	cmp	r4, r1
    372a:	beq.n	3748 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    372c:	adds	r2, r1, #1
    372e:	cmp	r2, #39	; 0x27
    3730:	itt	hi
    3732:	movhi	r1, #0
    3734:	movhi	r2, r1
			n = tx_buffer[tail];
    3736:	ldr	r5, [pc, #60]	; (3774 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3738:	ldr	r4, [pc, #20]	; (3750 <uart3_status_isr+0xb0>)
    373a:	it	ls
    373c:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    373e:	ldrb	r2, [r5, r2]
    3740:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3742:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3744:	strb	r1, [r0, #0]
    3746:	b.n	36f4 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    3748:	movs	r1, #108	; 0x6c
    374a:	strb	r1, [r2, #3]
    374c:	b.n	36f4 <uart3_status_isr+0x54>
    374e:	nop
    3750:	.word	0x4006d000
    3754:	.word	0x1fff1ad8
    3758:	.word	0x1fff1ad9
    375c:	.word	0x1fff1b04
    3760:	.word	0x1fff1ad4
    3764:	.word	0x1fff1b45
    3768:	.word	0x1fff1b48
    376c:	.word	0x1fff1b44
    3770:	.word	0x1fff1b4c
    3774:	.word	0x1fff1adc

00003778 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3778:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    377a:	ldr	r4, [pc, #64]	; (37bc <fault_isr+0x44>)
    377c:	b.n	3790 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    377e:	ldr	r3, [r4, #0]
    3780:	lsls	r1, r3, #21
    3782:	bmi.n	37a0 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3784:	ldr	r3, [r4, #0]
    3786:	lsls	r2, r3, #20
    3788:	bmi.n	37aa <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    378a:	ldr	r3, [r4, #0]
    378c:	lsls	r3, r3, #19
    378e:	bmi.n	37b4 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3790:	ldr	r3, [r4, #0]
    3792:	lsls	r0, r3, #13
    3794:	bpl.n	377e <fault_isr+0x6>
    3796:	bl	28ac <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    379a:	ldr	r3, [r4, #0]
    379c:	lsls	r1, r3, #21
    379e:	bpl.n	3784 <fault_isr+0xc>
    37a0:	bl	388c <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    37a4:	ldr	r3, [r4, #0]
    37a6:	lsls	r2, r3, #20
    37a8:	bpl.n	378a <fault_isr+0x12>
    37aa:	bl	3574 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    37ae:	ldr	r3, [r4, #0]
    37b0:	lsls	r3, r3, #19
    37b2:	bpl.n	3790 <fault_isr+0x18>
    37b4:	bl	3b8c <uart2_status_isr>
    37b8:	b.n	3790 <fault_isr+0x18>
    37ba:	nop
    37bc:	.word	0x40048034

000037c0 <unused_isr>:
	}
}

void unused_isr(void)
{
    37c0:	push	{r3, lr}
	fault_isr();
    37c2:	bl	3778 <fault_isr>
    37c6:	nop

000037c8 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    37c8:	ldr	r3, [pc, #4]	; (37d0 <startup_early_hook+0x8>)
    37ca:	movs	r2, #16
    37cc:	strh	r2, [r3, #0]
    37ce:	bx	lr
    37d0:	.word	0x40052000

000037d4 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    37d4:	bx	lr
    37d6:	nop

000037d8 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    37d8:	ldr	r1, [pc, #36]	; (3800 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    37da:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    37dc:	ldr	r3, [r1, #0]
	if (incr != 0) {
    37de:	cbz	r0, 37ee <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    37e0:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    37e2:	add	r0, r3
    37e4:	sub.w	r2, r2, #8192	; 0x2000
    37e8:	cmp	r0, r2
    37ea:	bcs.n	37f2 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    37ec:	str	r0, [r1, #0]
	}
	return prev;
    37ee:	mov	r0, r3
}
    37f0:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    37f2:	bl	3e60 <__errno>
    37f6:	movs	r3, #12
    37f8:	str	r3, [r0, #0]
			return (void *)-1;
    37fa:	mov.w	r0, #4294967295
    37fe:	pop	{r3, pc}
    3800:	.word	0x1fff0c80

00003804 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    3804:	ldr	r2, [pc, #32]	; (3828 <kinetis_hsrun_disable+0x24>)
    3806:	ldrb	r3, [r2, #0]
    3808:	cmp	r3, #128	; 0x80
    380a:	beq.n	3810 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    380c:	movs	r0, #0
}
    380e:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3810:	ldr	r1, [pc, #24]	; (382c <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3812:	ldr	r3, [pc, #28]	; (3830 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3814:	ldr	r0, [pc, #28]	; (3834 <kinetis_hsrun_disable+0x30>)
    3816:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3818:	movs	r1, #0
    381a:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    381c:	ldrb	r3, [r2, #0]
    381e:	cmp	r3, #128	; 0x80
    3820:	beq.n	381c <kinetis_hsrun_disable+0x18>
		return 1;
    3822:	movs	r0, #1
    3824:	bx	lr
    3826:	nop
    3828:	.word	0x4007e003
    382c:	.word	0x40048044
    3830:	.word	0x4007e001
    3834:	.word	0x22280000

00003838 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3838:	ldr	r2, [pc, #36]	; (3860 <kinetis_hsrun_enable+0x28>)
    383a:	ldrb	r3, [r2, #0]
    383c:	cmp	r3, #1
    383e:	beq.n	3844 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3840:	movs	r0, #0
}
    3842:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3844:	add.w	r3, r3, #1073741824	; 0x40000000
    3848:	add.w	r3, r3, #516096	; 0x7e000
    384c:	movs	r1, #96	; 0x60
    384e:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3850:	ldrb	r3, [r2, #0]
    3852:	cmp	r3, #128	; 0x80
    3854:	bne.n	3850 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3856:	ldr	r3, [pc, #12]	; (3864 <kinetis_hsrun_enable+0x2c>)
    3858:	ldr	r2, [pc, #12]	; (3868 <kinetis_hsrun_enable+0x30>)
    385a:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    385c:	movs	r0, #1
    385e:	bx	lr
    3860:	.word	0x4007e003
    3864:	.word	0x40048044
    3868:	.word	0x02060000

0000386c <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    386c:	ldr	r2, [pc, #20]	; (3884 <serial_available+0x18>)
	tail = rx_buffer_tail;
    386e:	ldr	r3, [pc, #24]	; (3888 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3870:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3872:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3874:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3876:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3878:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    387a:	it	cc
    387c:	addcc	r0, #64	; 0x40
    387e:	subs	r0, r0, r3
}
    3880:	bx	lr
    3882:	nop
    3884:	.word	0x1fff1b54
    3888:	.word	0x1fff1b55

0000388c <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    388c:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    388e:	ldr	r3, [pc, #224]	; (3970 <uart0_status_isr+0xe4>)
    3890:	ldrb	r2, [r3, #4]
    3892:	tst.w	r2, #48	; 0x30
    3896:	beq.n	38f2 <uart0_status_isr+0x66>
		__disable_irq();
    3898:	cpsid	i
		avail = UART0_RCFIFO;
    389a:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    389c:	and.w	r2, r1, #255	; 0xff
    38a0:	cmp	r1, #0
    38a2:	beq.n	3920 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    38a4:	cpsie	i
			head = rx_buffer_head;
    38a6:	ldr	r7, [pc, #204]	; (3974 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    38a8:	ldr	r1, [pc, #204]	; (3978 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    38aa:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    38ac:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    38ae:	ldr	r6, [pc, #204]	; (397c <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    38b0:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    38b2:	uxtb	r0, r0
			tail = rx_buffer_tail;
    38b4:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    38b6:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    38b8:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    38ba:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    38bc:	it	cs
    38be:	movcs	r3, #0
				if (newhead != tail) {
    38c0:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    38c2:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    38c6:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    38c8:	itt	ne
    38ca:	strbne	r1, [r6, r3]
    38cc:	movne	r0, r3
				}
			} while (--avail > 0);
    38ce:	ands.w	r2, r2, #255	; 0xff
    38d2:	bne.n	38b6 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    38d4:	ldr	r3, [pc, #168]	; (3980 <uart0_status_isr+0xf4>)
    38d6:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    38d8:	uxtb	r2, r0
    38da:	strb	r2, [r7, #0]
			if (rts_pin) {
    38dc:	cbz	r3, 38f2 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    38de:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    38e0:	itet	cc
    38e2:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    38e6:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    38e8:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    38ea:	cmp	r0, #39	; 0x27
    38ec:	itt	gt
    38ee:	movgt	r2, #1
    38f0:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    38f2:	ldr	r1, [pc, #124]	; (3970 <uart0_status_isr+0xe4>)
    38f4:	ldrb	r2, [r1, #3]
    38f6:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    38f8:	lsls	r5, r2, #24
    38fa:	bmi.n	392a <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    38fc:	lsls	r2, r2, #25
    38fe:	bpl.n	391c <uart0_status_isr+0x90>
    3900:	ldr	r3, [pc, #108]	; (3970 <uart0_status_isr+0xe4>)
    3902:	ldrb	r3, [r3, #4]
    3904:	lsls	r3, r3, #25
    3906:	bpl.n	391c <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3908:	ldr	r3, [pc, #120]	; (3984 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    390a:	ldr	r1, [pc, #124]	; (3988 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    390c:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    390e:	movs	r2, #0
    3910:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3912:	cbz	r3, 3916 <uart0_status_isr+0x8a>
    3914:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3916:	ldr	r3, [pc, #88]	; (3970 <uart0_status_isr+0xe4>)
    3918:	movs	r2, #60	; 0x3c
    391a:	strb	r2, [r3, #3]
	}
}
    391c:	pop	{r4, r5, r6, r7}
    391e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3920:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    3922:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3924:	strb	r2, [r3, #17]
			__enable_irq();
    3926:	cpsie	i
    3928:	b.n	38f2 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    392a:	ldrb	r3, [r1, #4]
    392c:	lsls	r4, r3, #24
    392e:	bpl.n	38fc <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3930:	ldr	r3, [pc, #88]	; (398c <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    3932:	ldr	r6, [pc, #92]	; (3990 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3934:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3936:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3938:	uxtb	r4, r4
		tail = tx_buffer_tail;
    393a:	uxtb	r3, r3
		do {
			if (tail == head) break;
    393c:	cmp	r4, r3
    393e:	beq.n	395e <uart0_status_isr+0xd2>
    3940:	ldr	r5, [pc, #80]	; (3994 <uart0_status_isr+0x108>)
    3942:	b.n	3948 <uart0_status_isr+0xbc>
    3944:	cmp	r3, r4
    3946:	beq.n	395e <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3948:	adds	r3, #1
    394a:	cmp	r3, #64	; 0x40
    394c:	it	cs
    394e:	movcs	r3, #0
			avail = UART0_S1;
    3950:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3952:	ldrb	r0, [r5, r3]
    3954:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3956:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3958:	ldrb	r0, [r1, #20]
    395a:	cmp	r0, #7
    395c:	bls.n	3944 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    395e:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3960:	ldr	r1, [pc, #12]	; (3970 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    3962:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3964:	ldrb	r3, [r1, #4]
    3966:	lsls	r0, r3, #24
    3968:	itt	mi
    396a:	movmi	r3, #124	; 0x7c
    396c:	strbmi	r3, [r1, #3]
    396e:	b.n	38fc <uart0_status_isr+0x70>
    3970:	.word	0x4006a000
    3974:	.word	0x1fff1b54
    3978:	.word	0x1fff1b55
    397c:	.word	0x1fff1b98
    3980:	.word	0x1fff1b50
    3984:	.word	0x1fff1bdc
    3988:	.word	0x1fff1bd8
    398c:	.word	0x1fff1be0
    3990:	.word	0x1fff1bd9
    3994:	.word	0x1fff1b58

00003998 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3998:	ldr	r2, [pc, #20]	; (39b0 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    399a:	ldr	r3, [pc, #24]	; (39b4 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    399c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    399e:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    39a0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    39a2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    39a4:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    39a6:	it	cc
    39a8:	addcc	r0, #64	; 0x40
    39aa:	subs	r0, r0, r3
}
    39ac:	bx	lr
    39ae:	nop
    39b0:	.word	0x1fff1be8
    39b4:	.word	0x1fff1be9

000039b8 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    39b8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    39ba:	ldr	r3, [pc, #176]	; (3a6c <lpuart0_status_isr+0xb4>)
    39bc:	ldr	r2, [r3, #4]
    39be:	lsls	r4, r2, #10
    39c0:	bpl.n	3a02 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    39c2:	ldr	r0, [pc, #172]	; (3a70 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    39c4:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    39c6:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    39c8:	ldr	r1, [pc, #168]	; (3a74 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    39ca:	adds	r3, #1
    39cc:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    39ce:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    39d0:	it	gt
    39d2:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    39d4:	cmp	r3, r1
    39d6:	beq.n	39e2 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    39d8:	ldr	r4, [pc, #156]	; (3a78 <lpuart0_status_isr+0xc0>)
    39da:	uxtb	r2, r2
			rx_buffer_head = head;
    39dc:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    39de:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    39e0:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    39e2:	ldr	r2, [pc, #152]	; (3a7c <lpuart0_status_isr+0xc4>)
    39e4:	ldr	r1, [r2, #0]
    39e6:	cbz	r1, 3a02 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    39e8:	ldr	r2, [pc, #148]	; (3a80 <lpuart0_status_isr+0xc8>)
    39ea:	ldrb	r2, [r2, #0]
    39ec:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    39ee:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    39f0:	itet	cc
    39f2:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    39f6:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    39f8:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    39fa:	cmp	r3, #39	; 0x27
    39fc:	itt	gt
    39fe:	movgt	r3, #1
    3a00:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    3a02:	ldr	r2, [pc, #104]	; (3a6c <lpuart0_status_isr+0xb4>)
    3a04:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    3a06:	lsls	r0, r3, #8
    3a08:	bpl.n	3a10 <lpuart0_status_isr+0x58>
    3a0a:	ldr	r2, [r2, #4]
    3a0c:	lsls	r1, r2, #8
    3a0e:	bmi.n	3a34 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    3a10:	lsls	r2, r3, #9
    3a12:	bpl.n	3a30 <lpuart0_status_isr+0x78>
    3a14:	ldr	r3, [pc, #84]	; (3a6c <lpuart0_status_isr+0xb4>)
    3a16:	ldr	r3, [r3, #4]
    3a18:	lsls	r3, r3, #9
    3a1a:	bpl.n	3a30 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3a1c:	ldr	r3, [pc, #100]	; (3a84 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3a1e:	ldr	r1, [pc, #104]	; (3a88 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    3a20:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    3a22:	movs	r2, #0
    3a24:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3a26:	cbz	r3, 3a2a <lpuart0_status_isr+0x72>
    3a28:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3a2a:	ldr	r3, [pc, #96]	; (3a8c <lpuart0_status_isr+0xd4>)
    3a2c:	movs	r2, #0
    3a2e:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    3a30:	pop	{r4, r5}
    3a32:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3a34:	ldr	r2, [pc, #88]	; (3a90 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    3a36:	ldr	r1, [pc, #72]	; (3a80 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3a38:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3a3a:	ldrb	r2, [r1, #0]
    3a3c:	uxtb	r2, r2
		if (head == tail) {
    3a3e:	cmp	r0, r2
    3a40:	beq.n	3a5e <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    3a42:	adds	r2, #1
    3a44:	cmp	r2, #39	; 0x27
    3a46:	itt	hi
    3a48:	movhi	r0, #0
    3a4a:	movhi	r2, r0
			n = tx_buffer[tail];
    3a4c:	ldr	r5, [pc, #68]	; (3a94 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3a4e:	ldr	r4, [pc, #28]	; (3a6c <lpuart0_status_isr+0xb4>)
    3a50:	it	ls
    3a52:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3a54:	ldrb	r2, [r5, r2]
    3a56:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3a58:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3a5a:	strb	r0, [r1, #0]
    3a5c:	b.n	3a10 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3a5e:	ldr	r0, [pc, #56]	; (3a98 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3a60:	ldr	r2, [pc, #40]	; (3a8c <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3a62:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3a64:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3a66:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3a68:	str	r1, [r2, #0]
    3a6a:	b.n	3a10 <lpuart0_status_isr+0x58>
    3a6c:	.word	0x400c4000
    3a70:	.word	0x1fff1be8
    3a74:	.word	0x1fff1be9
    3a78:	.word	0x1fff1c14
    3a7c:	.word	0x1fff1be4
    3a80:	.word	0x1fff1c55
    3a84:	.word	0x1fff1c58
    3a88:	.word	0x1fff1c54
    3a8c:	.word	0x43880158
    3a90:	.word	0x1fff1c5c
    3a94:	.word	0x1fff1bec
    3a98:	.word	0x4388015c

00003a9c <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3a9c:	push	{r4, lr}
    3a9e:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3aa0:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    3aa2:	bl	3804 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3aa6:	ldr	r2, [pc, #96]	; (3b08 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3aa8:	ldr	r3, [pc, #96]	; (3b0c <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3aaa:	ldr	r1, [pc, #100]	; (3b10 <usb_init_serialnumber+0x74>)
    3aac:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3aae:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3ab0:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3ab2:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3ab4:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3ab6:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3ab8:	ldrb	r3, [r2, #0]
    3aba:	lsls	r3, r3, #24
    3abc:	bpl.n	3ab8 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    3abe:	ldr	r3, [pc, #84]	; (3b14 <usb_init_serialnumber+0x78>)
    3ac0:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    3ac2:	bl	3838 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    3ac6:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3ac8:	ldr	r3, [pc, #76]	; (3b18 <usb_init_serialnumber+0x7c>)
    3aca:	cmp	r4, r3
    3acc:	itt	ls
    3ace:	addls.w	r4, r4, r4, lsl #2
    3ad2:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    3ad4:	mov	r0, r4
    3ad6:	ldr	r4, [pc, #68]	; (3b1c <usb_init_serialnumber+0x80>)
    3ad8:	add	r1, sp, #4
    3ada:	movs	r2, #10
    3adc:	bl	3b20 <ultoa>
    3ae0:	add	r1, sp, #4
    3ae2:	mov	r0, r4
	for (i=0; i<10; i++) {
    3ae4:	movs	r3, #0
		char c = buf[i];
    3ae6:	ldrb.w	r2, [r1], #1
    3aea:	adds	r3, #1
		if (!c) break;
    3aec:	cbz	r2, 3afe <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3aee:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3af0:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3af4:	bne.n	3ae6 <usb_init_serialnumber+0x4a>
    3af6:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3af8:	strb	r3, [r4, #0]
}
    3afa:	add	sp, #16
    3afc:	pop	{r4, pc}
    3afe:	lsls	r3, r3, #1
    3b00:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3b02:	strb	r3, [r4, #0]
}
    3b04:	add	sp, #16
    3b06:	pop	{r4, pc}
    3b08:	.word	0x40020004
    3b0c:	.word	0x40020000
    3b10:	.word	0x41070000
    3b14:	.word	0x4002000c
    3b18:	.word	0x0098967f
    3b1c:	.word	0x1fff0d64

00003b20 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3b20:	push	{r4, r5, r6, r7}
    3b22:	subs	r5, r1, #1
    3b24:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3b26:	movs	r4, #0
    3b28:	b.n	3b2c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3b2a:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3b2c:	udiv	r3, r0, r2
    3b30:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3b34:	cmp	r0, #9
    3b36:	add.w	r7, r0, #48	; 0x30
    3b3a:	itet	hi
    3b3c:	addhi	r0, #55	; 0x37
    3b3e:	uxtbls	r0, r7
    3b40:	uxtbhi	r0, r0
    3b42:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3b46:	mov	r0, r3
    3b48:	cmp	r3, #0
    3b4a:	bne.n	3b2a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3b4c:	adds	r2, r1, r4
    3b4e:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3b50:	cbz	r4, 3b66 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    3b52:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3b54:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3b58:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3b5a:	adds	r3, #1
    3b5c:	subs	r0, r4, r3
    3b5e:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3b60:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3b64:	blt.n	3b52 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3b66:	mov	r0, r1
    3b68:	pop	{r4, r5, r6, r7}
    3b6a:	bx	lr

00003b6c <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b6c:	ldr	r2, [pc, #20]	; (3b84 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    3b6e:	ldr	r3, [pc, #24]	; (3b88 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b70:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3b72:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b74:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3b76:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3b78:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3b7a:	it	cc
    3b7c:	addcc	r0, #64	; 0x40
    3b7e:	subs	r0, r0, r3
}
    3b80:	bx	lr
    3b82:	nop
    3b84:	.word	0x1fff1c64
    3b88:	.word	0x1fff1c65

00003b8c <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3b8c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    3b8e:	ldr	r3, [pc, #172]	; (3c3c <uart2_status_isr+0xb0>)
    3b90:	ldrb	r2, [r3, #4]
    3b92:	lsls	r4, r2, #26
    3b94:	bpl.n	3bd6 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3b96:	ldr	r0, [pc, #168]	; (3c40 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3b98:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3b9a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3b9c:	ldr	r1, [pc, #164]	; (3c44 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3b9e:	adds	r3, #1
    3ba0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ba2:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3ba4:	it	gt
    3ba6:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ba8:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3baa:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3bac:	beq.n	3bb6 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    3bae:	ldr	r4, [pc, #152]	; (3c48 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    3bb0:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3bb2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3bb4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3bb6:	ldr	r2, [pc, #148]	; (3c4c <uart2_status_isr+0xc0>)
    3bb8:	ldr	r1, [r2, #0]
    3bba:	cbz	r1, 3bd6 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3bbc:	ldr	r2, [pc, #144]	; (3c50 <uart2_status_isr+0xc4>)
    3bbe:	ldrb	r2, [r2, #0]
    3bc0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3bc2:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3bc4:	itet	cc
    3bc6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3bca:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3bcc:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3bce:	cmp	r3, #39	; 0x27
    3bd0:	itt	gt
    3bd2:	movgt	r3, #1
    3bd4:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    3bd6:	ldr	r2, [pc, #100]	; (3c3c <uart2_status_isr+0xb0>)
    3bd8:	ldrb	r3, [r2, #3]
    3bda:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3bdc:	lsls	r0, r3, #24
    3bde:	bmi.n	3c04 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    3be0:	lsls	r2, r3, #25
    3be2:	bpl.n	3c00 <uart2_status_isr+0x74>
    3be4:	ldr	r3, [pc, #84]	; (3c3c <uart2_status_isr+0xb0>)
    3be6:	ldrb	r3, [r3, #4]
    3be8:	lsls	r3, r3, #25
    3bea:	bpl.n	3c00 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3bec:	ldr	r3, [pc, #100]	; (3c54 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3bee:	ldr	r1, [pc, #104]	; (3c58 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3bf0:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3bf2:	movs	r2, #0
    3bf4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3bf6:	cbz	r3, 3bfa <uart2_status_isr+0x6e>
    3bf8:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3bfa:	ldr	r3, [pc, #64]	; (3c3c <uart2_status_isr+0xb0>)
    3bfc:	movs	r2, #44	; 0x2c
    3bfe:	strb	r2, [r3, #3]
	}
}
    3c00:	pop	{r4, r5}
    3c02:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3c04:	ldrb	r1, [r2, #4]
    3c06:	lsls	r1, r1, #24
    3c08:	bpl.n	3be0 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    3c0a:	ldr	r1, [pc, #80]	; (3c5c <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3c0c:	ldr	r0, [pc, #64]	; (3c50 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3c0e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3c10:	ldrb	r1, [r0, #0]
    3c12:	uxtb	r1, r1
		if (head == tail) {
    3c14:	cmp	r4, r1
    3c16:	beq.n	3c34 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3c18:	adds	r2, r1, #1
    3c1a:	cmp	r2, #39	; 0x27
    3c1c:	itt	hi
    3c1e:	movhi	r1, #0
    3c20:	movhi	r2, r1
			n = tx_buffer[tail];
    3c22:	ldr	r5, [pc, #60]	; (3c60 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3c24:	ldr	r4, [pc, #20]	; (3c3c <uart2_status_isr+0xb0>)
    3c26:	it	ls
    3c28:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3c2a:	ldrb	r2, [r5, r2]
    3c2c:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3c2e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3c30:	strb	r1, [r0, #0]
    3c32:	b.n	3be0 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    3c34:	movs	r1, #108	; 0x6c
    3c36:	strb	r1, [r2, #3]
    3c38:	b.n	3be0 <uart2_status_isr+0x54>
    3c3a:	nop
    3c3c:	.word	0x4006c000
    3c40:	.word	0x1fff1c64
    3c44:	.word	0x1fff1c65
    3c48:	.word	0x1fff1c90
    3c4c:	.word	0x1fff1c60
    3c50:	.word	0x1fff1cd1
    3c54:	.word	0x1fff1cd4
    3c58:	.word	0x1fff1cd0
    3c5c:	.word	0x1fff1cd8
    3c60:	.word	0x1fff1c68

00003c64 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    3c64:	bx	lr
    3c66:	nop

00003c68 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    3c68:	bx	lr
    3c6a:	nop

00003c6c <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    3c6c:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3c6e:	mrs	r2, PRIMASK
		__disable_irq();
    3c72:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3c74:	ldrb	r3, [r0, #29]
    3c76:	cbnz	r3, 3c86 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3c78:	ldrb	r1, [r0, #28]
    3c7a:	cmp	r1, #1
    3c7c:	beq.n	3c90 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    3c7e:	cmp	r1, #3
    3c80:	beq.n	3ca4 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    3c82:	movs	r3, #1
    3c84:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3c86:	cbnz	r2, 3c8a <EventResponder::triggerEventNotImmediate()+0x1e>
    3c88:	cpsie	i
	}
	enableInterrupts(irq);
}
    3c8a:	ldr.w	r4, [sp], #4
    3c8e:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3c90:	ldr	r4, [pc, #68]	; (3cd8 <EventResponder::triggerEventNotImmediate()+0x6c>)
    3c92:	ldr	r1, [r4, #0]
    3c94:	cbz	r1, 3cc0 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3c96:	ldr	r1, [pc, #68]	; (3cdc <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3c98:	str	r3, [r0, #20]
				_prev = lastYield;
    3c9a:	ldr	r3, [r1, #0]
    3c9c:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    3c9e:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    3ca0:	str	r0, [r3, #20]
    3ca2:	b.n	3c82 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3ca4:	ldr	r4, [pc, #56]	; (3ce0 <EventResponder::triggerEventNotImmediate()+0x74>)
    3ca6:	ldr	r1, [r4, #0]
    3ca8:	cbz	r1, 3ccc <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3caa:	ldr	r1, [pc, #56]	; (3ce4 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3cac:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    3cae:	ldr	r3, [r1, #0]
    3cb0:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    3cb2:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    3cb4:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3cb6:	ldr	r3, [pc, #48]	; (3ce8 <EventResponder::triggerEventNotImmediate()+0x7c>)
    3cb8:	mov.w	r1, #268435456	; 0x10000000
    3cbc:	str	r1, [r3, #0]
    3cbe:	b.n	3c82 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3cc0:	ldr	r3, [pc, #24]	; (3cdc <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    3cc2:	str	r1, [r0, #20]
				_prev = nullptr;
    3cc4:	str	r1, [r0, #24]
				firstYield = this;
    3cc6:	str	r0, [r4, #0]
				lastYield = this;
    3cc8:	str	r0, [r3, #0]
    3cca:	b.n	3c82 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3ccc:	ldr	r3, [pc, #20]	; (3ce4 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    3cce:	str	r1, [r0, #20]
				_prev = nullptr;
    3cd0:	str	r1, [r0, #24]
				firstInterrupt = this;
    3cd2:	str	r0, [r4, #0]
				lastInterrupt = this;
    3cd4:	str	r0, [r3, #0]
    3cd6:	b.n	3cb6 <EventResponder::triggerEventNotImmediate()+0x4a>
    3cd8:	.word	0x1fff1cec
    3cdc:	.word	0x1fff1ce8
    3ce0:	.word	0x1fff1cdc
    3ce4:	.word	0x1fff1ce0
    3ce8:	.word	0xe000ed04

00003cec <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    3cec:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3cee:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3cf0:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3cf2:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3cf4:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3cf6:	beq.n	3d00 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    3cf8:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3cfc:	b.w	3c6c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3d00:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    3d02:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3d06:	bx	r3

00003d08 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3d08:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3d0a:	mrs	r2, PRIMASK
		__disable_irq();
    3d0e:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3d10:	ldr	r4, [pc, #48]	; (3d44 <EventResponder::runFromInterrupt()+0x3c>)
    3d12:	ldr	r0, [r4, #0]
		if (first) {
    3d14:	cbz	r0, 3d38 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3d16:	ldr	r6, [pc, #48]	; (3d48 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3d18:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3d1a:	ldr	r3, [r0, #20]
    3d1c:	str	r3, [r4, #0]
			if (firstInterrupt) {
    3d1e:	cbz	r3, 3d3e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    3d20:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3d22:	cbnz	r2, 3d26 <EventResponder::runFromInterrupt()+0x1e>
    3d24:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3d26:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3d28:	ldr	r3, [r0, #8]
    3d2a:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3d2c:	mrs	r2, PRIMASK
		__disable_irq();
    3d30:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3d32:	ldr	r0, [r4, #0]
		if (first) {
    3d34:	cmp	r0, #0
    3d36:	bne.n	3d1a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3d38:	cbnz	r2, 3d3c <EventResponder::runFromInterrupt()+0x34>
    3d3a:	cpsie	i
    3d3c:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3d3e:	str	r3, [r6, #0]
    3d40:	b.n	3d22 <EventResponder::runFromInterrupt()+0x1a>
    3d42:	nop
    3d44:	.word	0x1fff1cdc
    3d48:	.word	0x1fff1ce0

00003d4c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3d4c:	b.w	3d08 <EventResponder::runFromInterrupt()>

00003d50 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    3d50:	ldr	r2, [pc, #96]	; (3db4 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    3d52:	push	{r4, r5}
	if (listActive == nullptr) {
    3d54:	ldr	r4, [r2, #0]
    3d56:	cmp	r4, #0
    3d58:	beq.n	3daa <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    3d5a:	ldr	r3, [r0, #0]
    3d5c:	ldr	r1, [r4, #0]
    3d5e:	cmp	r3, r1
    3d60:	bcs.n	3d80 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3d62:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    3d64:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    3d66:	str	r4, [r0, #8]
		_prev = nullptr;
    3d68:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3d6a:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    3d6c:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    3d6e:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3d70:	movs	r3, #2
    3d72:	strb	r3, [r0, #20]
}
    3d74:	pop	{r4, r5}
    3d76:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    3d78:	ldr	r1, [r2, #0]
    3d7a:	cmp	r3, r1
    3d7c:	mov	r4, r2
    3d7e:	bcc.n	3d92 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3d80:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    3d82:	subs	r3, r3, r1
    3d84:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3d86:	cmp	r2, #0
    3d88:	bne.n	3d78 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    3d8a:	str	r2, [r0, #8]
		_prev = timer;
    3d8c:	str	r4, [r0, #12]
		timer->_next = this;
    3d8e:	str	r0, [r4, #8]
    3d90:	b.n	3d70 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    3d92:	ldr	r2, [r2, #12]
    3d94:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    3d96:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    3d98:	str	r0, [r4, #12]
				_prev->_next = this;
    3d9a:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    3d9c:	subs	r3, r1, r3
				_state = TimerActive;
    3d9e:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    3da0:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    3da2:	str	r3, [r4, #0]
				_state = TimerActive;
    3da4:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    3da6:	pop	{r4, r5}
    3da8:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    3daa:	str	r4, [r0, #8]
		_prev = nullptr;
    3dac:	str	r4, [r0, #12]
		listActive = this;
    3dae:	str	r0, [r2, #0]
    3db0:	b.n	3d70 <MillisTimer::addToActiveList()+0x20>
    3db2:	nop
    3db4:	.word	0x1fff1ce4

00003db8 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    3db8:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    3dba:	ldr	r6, [pc, #136]	; (3e44 <MillisTimer::runFromTimer()+0x8c>)
    3dbc:	ldr	r4, [r6, #0]
	while (timer) {
    3dbe:	cbz	r4, 3e0c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3dc0:	ldr	r3, [r4, #0]
    3dc2:	cmp	r3, #0
    3dc4:	bne.n	3e3c <MillisTimer::runFromTimer()+0x84>
    3dc6:	ldr	r7, [pc, #128]	; (3e48 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    3dc8:	mov	r5, r3
    3dca:	b.n	3dd6 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    3dcc:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3dce:	cbz	r4, 3e0c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3dd0:	ldr	r3, [r4, #0]
    3dd2:	cmp	r3, #0
    3dd4:	bne.n	3e3c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    3dd6:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    3dd8:	cbz	r3, 3ddc <MillisTimer::runFromTimer()+0x24>
    3dda:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    3ddc:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    3dde:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3de0:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    3de2:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3de4:	ldr	r3, [r3, #0]
    3de6:	cmp	r3, r7
    3de8:	bne.n	3e2e <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3dea:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3dec:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3dee:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3df0:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    3df2:	beq.n	3e36 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3df4:	bl	3c6c <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    3df8:	ldr	r3, [r4, #4]
    3dfa:	cmp	r3, #0
    3dfc:	beq.n	3dcc <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    3dfe:	str	r3, [r4, #0]
				timer->addToActiveList();
    3e00:	mov	r0, r4
    3e02:	bl	3d50 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    3e06:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3e08:	cmp	r4, #0
    3e0a:	bne.n	3dd0 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3e0c:	mrs	r3, PRIMASK
		__disable_irq();
    3e10:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3e12:	ldr	r2, [pc, #56]	; (3e4c <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3e14:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3e16:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3e18:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    3e1a:	cbnz	r3, 3e1e <MillisTimer::runFromTimer()+0x66>
    3e1c:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    3e1e:	cbz	r0, 3e2c <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    3e20:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    3e22:	bl	3d50 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    3e26:	mov	r0, r4
    3e28:	cmp	r0, #0
    3e2a:	bne.n	3e20 <MillisTimer::runFromTimer()+0x68>
    3e2c:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3e2e:	mov	r2, r4
    3e30:	movs	r1, #0
    3e32:	blx	r3
    3e34:	b.n	3df8 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3e36:	ldr	r3, [r0, #8]
    3e38:	blx	r3
    3e3a:	b.n	3df8 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    3e3c:	subs	r3, #1
    3e3e:	str	r3, [r4, #0]
			break;
    3e40:	b.n	3e0c <MillisTimer::runFromTimer()+0x54>
    3e42:	nop
    3e44:	.word	0x1fff1ce4
    3e48:	.word	0x00003ced
    3e4c:	.word	0x1fff1cf4

00003e50 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    3e50:	ldr	r2, [pc, #8]	; (3e5c <systick_isr+0xc>)
    3e52:	ldr	r3, [r2, #0]
    3e54:	adds	r3, #1
    3e56:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    3e58:	b.w	3db8 <MillisTimer::runFromTimer()>
    3e5c:	.word	0x1fff187c

00003e60 <__errno>:
    3e60:	ldr	r3, [pc, #4]	; (3e68 <__errno+0x8>)
    3e62:	ldr	r0, [r3, #0]
    3e64:	bx	lr
    3e66:	nop
    3e68:	.word	0x1fff11a8

00003e6c <__libc_init_array>:
    3e6c:	push	{r4, r5, r6, lr}
    3e6e:	ldr	r6, [pc, #60]	; (3eac <__libc_init_array+0x40>)
    3e70:	ldr	r5, [pc, #60]	; (3eb0 <__libc_init_array+0x44>)
    3e72:	subs	r6, r6, r5
    3e74:	asrs	r6, r6, #2
    3e76:	it	ne
    3e78:	movne	r4, #0
    3e7a:	beq.n	3e88 <__libc_init_array+0x1c>
    3e7c:	adds	r4, #1
    3e7e:	ldr.w	r3, [r5], #4
    3e82:	blx	r3
    3e84:	cmp	r6, r4
    3e86:	bne.n	3e7c <__libc_init_array+0x10>
    3e88:	ldr	r6, [pc, #40]	; (3eb4 <__libc_init_array+0x48>)
    3e8a:	ldr	r5, [pc, #44]	; (3eb8 <__libc_init_array+0x4c>)
    3e8c:	subs	r6, r6, r5
    3e8e:	bl	4ad8 <_init>
    3e92:	asrs	r6, r6, #2
    3e94:	it	ne
    3e96:	movne	r4, #0
    3e98:	beq.n	3ea8 <__libc_init_array+0x3c>
    3e9a:	adds	r4, #1
    3e9c:	ldr.w	r3, [r5], #4
    3ea0:	blx	r3
    3ea2:	cmp	r6, r4
    3ea4:	bne.n	3e9a <__libc_init_array+0x2e>
    3ea6:	pop	{r4, r5, r6, pc}
    3ea8:	pop	{r4, r5, r6, pc}
    3eaa:	nop
    3eac:	.word	0x00004ae4
    3eb0:	.word	0x00004ae4
    3eb4:	.word	0x00004af0
    3eb8:	.word	0x00004ae4

00003ebc <malloc>:
    3ebc:	ldr	r3, [pc, #8]	; (3ec8 <malloc+0xc>)
    3ebe:	mov	r1, r0
    3ec0:	ldr	r0, [r3, #0]
    3ec2:	b.w	3ecc <_malloc_r>
    3ec6:	nop
    3ec8:	.word	0x1fff11a8

00003ecc <_malloc_r>:
    3ecc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ed0:	add.w	r5, r1, #11
    3ed4:	cmp	r5, #22
    3ed6:	sub	sp, #12
    3ed8:	mov	r6, r0
    3eda:	bls.w	401c <_malloc_r+0x150>
    3ede:	bics.w	r5, r5, #7
    3ee2:	bmi.w	4064 <_malloc_r+0x198>
    3ee6:	cmp	r1, r5
    3ee8:	bhi.w	4064 <_malloc_r+0x198>
    3eec:	bl	443c <__malloc_lock>
    3ef0:	cmp.w	r5, #504	; 0x1f8
    3ef4:	bcc.w	4430 <_malloc_r+0x564>
    3ef8:	lsrs	r3, r5, #9
    3efa:	beq.w	4072 <_malloc_r+0x1a6>
    3efe:	cmp	r3, #4
    3f00:	bhi.w	420a <_malloc_r+0x33e>
    3f04:	lsrs	r0, r5, #6
    3f06:	add.w	lr, r0, #57	; 0x39
    3f0a:	mov.w	r3, lr, lsl #1
    3f0e:	adds	r0, #56	; 0x38
    3f10:	ldr	r7, [pc, #784]	; (4224 <_malloc_r+0x358>)
    3f12:	add.w	r3, r7, r3, lsl #2
    3f16:	sub.w	r1, r3, #8
    3f1a:	ldr	r4, [r3, #4]
    3f1c:	cmp	r1, r4
    3f1e:	bne.n	3f30 <_malloc_r+0x64>
    3f20:	b.n	407c <_malloc_r+0x1b0>
    3f22:	cmp	r2, #0
    3f24:	bge.w	4080 <_malloc_r+0x1b4>
    3f28:	ldr	r4, [r4, #12]
    3f2a:	cmp	r1, r4
    3f2c:	beq.w	407c <_malloc_r+0x1b0>
    3f30:	ldr	r3, [r4, #4]
    3f32:	bic.w	r3, r3, #3
    3f36:	subs	r2, r3, r5
    3f38:	cmp	r2, #15
    3f3a:	ble.n	3f22 <_malloc_r+0x56>
    3f3c:	ldr	r1, [pc, #740]	; (4224 <_malloc_r+0x358>)
    3f3e:	ldr	r4, [r7, #16]
    3f40:	add.w	lr, r1, #8
    3f44:	cmp	r4, lr
    3f46:	beq.w	42b0 <_malloc_r+0x3e4>
    3f4a:	ldr	r3, [r4, #4]
    3f4c:	bic.w	r3, r3, #3
    3f50:	subs	r2, r3, r5
    3f52:	cmp	r2, #15
    3f54:	bgt.w	428a <_malloc_r+0x3be>
    3f58:	cmp	r2, #0
    3f5a:	str.w	lr, [r1, #20]
    3f5e:	str.w	lr, [r1, #16]
    3f62:	bge.w	40a2 <_malloc_r+0x1d6>
    3f66:	cmp.w	r3, #512	; 0x200
    3f6a:	bcs.w	423c <_malloc_r+0x370>
    3f6e:	lsrs	r3, r3, #3
    3f70:	add.w	ip, r3, #1
    3f74:	movs	r2, #1
    3f76:	asrs	r3, r3, #2
    3f78:	lsl.w	r3, r2, r3
    3f7c:	ldr	r2, [r1, #4]
    3f7e:	ldr.w	r8, [r1, ip, lsl #3]
    3f82:	str.w	r8, [r4, #8]
    3f86:	add.w	r9, r1, ip, lsl #3
    3f8a:	orrs	r2, r3
    3f8c:	sub.w	r3, r9, #8
    3f90:	str	r3, [r4, #12]
    3f92:	str	r2, [r1, #4]
    3f94:	str.w	r4, [r1, ip, lsl #3]
    3f98:	str.w	r4, [r8, #12]
    3f9c:	asrs	r3, r0, #2
    3f9e:	movs	r4, #1
    3fa0:	lsls	r4, r3
    3fa2:	cmp	r4, r2
    3fa4:	bhi.w	40bc <_malloc_r+0x1f0>
    3fa8:	tst	r4, r2
    3faa:	bne.n	3fba <_malloc_r+0xee>
    3fac:	bic.w	r0, r0, #3
    3fb0:	lsls	r4, r4, #1
    3fb2:	tst	r4, r2
    3fb4:	add.w	r0, r0, #4
    3fb8:	beq.n	3fb0 <_malloc_r+0xe4>
    3fba:	add.w	r9, r7, r0, lsl #3
    3fbe:	mov	ip, r9
    3fc0:	mov	r8, r0
    3fc2:	ldr.w	r1, [ip, #12]
    3fc6:	cmp	ip, r1
    3fc8:	bne.n	3fda <_malloc_r+0x10e>
    3fca:	b.n	42b4 <_malloc_r+0x3e8>
    3fcc:	cmp	r2, #0
    3fce:	bge.w	42d4 <_malloc_r+0x408>
    3fd2:	ldr	r1, [r1, #12]
    3fd4:	cmp	ip, r1
    3fd6:	beq.w	42b4 <_malloc_r+0x3e8>
    3fda:	ldr	r3, [r1, #4]
    3fdc:	bic.w	r3, r3, #3
    3fe0:	subs	r2, r3, r5
    3fe2:	cmp	r2, #15
    3fe4:	ble.n	3fcc <_malloc_r+0x100>
    3fe6:	mov	r4, r1
    3fe8:	ldr.w	ip, [r1, #12]
    3fec:	ldr.w	r8, [r4, #8]!
    3ff0:	adds	r3, r1, r5
    3ff2:	orr.w	r5, r5, #1
    3ff6:	str	r5, [r1, #4]
    3ff8:	orr.w	r1, r2, #1
    3ffc:	str.w	ip, [r8, #12]
    4000:	mov	r0, r6
    4002:	str.w	r8, [ip, #8]
    4006:	str	r3, [r7, #20]
    4008:	str	r3, [r7, #16]
    400a:	str.w	lr, [r3, #12]
    400e:	str.w	lr, [r3, #8]
    4012:	str	r1, [r3, #4]
    4014:	str	r2, [r3, r2]
    4016:	bl	4440 <__malloc_unlock>
    401a:	b.n	405c <_malloc_r+0x190>
    401c:	cmp	r1, #16
    401e:	bhi.n	4064 <_malloc_r+0x198>
    4020:	bl	443c <__malloc_lock>
    4024:	movs	r5, #16
    4026:	movs	r3, #6
    4028:	movs	r0, #2
    402a:	ldr	r7, [pc, #504]	; (4224 <_malloc_r+0x358>)
    402c:	add.w	r3, r7, r3, lsl #2
    4030:	sub.w	r2, r3, #8
    4034:	ldr	r4, [r3, #4]
    4036:	cmp	r4, r2
    4038:	beq.w	42c6 <_malloc_r+0x3fa>
    403c:	ldr	r3, [r4, #4]
    403e:	ldr	r1, [r4, #12]
    4040:	ldr	r5, [r4, #8]
    4042:	bic.w	r3, r3, #3
    4046:	add	r3, r4
    4048:	mov	r0, r6
    404a:	ldr	r2, [r3, #4]
    404c:	str	r1, [r5, #12]
    404e:	orr.w	r2, r2, #1
    4052:	str	r5, [r1, #8]
    4054:	str	r2, [r3, #4]
    4056:	bl	4440 <__malloc_unlock>
    405a:	adds	r4, #8
    405c:	mov	r0, r4
    405e:	add	sp, #12
    4060:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4064:	movs	r4, #0
    4066:	movs	r3, #12
    4068:	mov	r0, r4
    406a:	str	r3, [r6, #0]
    406c:	add	sp, #12
    406e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4072:	movs	r3, #128	; 0x80
    4074:	mov.w	lr, #64	; 0x40
    4078:	movs	r0, #63	; 0x3f
    407a:	b.n	3f10 <_malloc_r+0x44>
    407c:	mov	r0, lr
    407e:	b.n	3f3c <_malloc_r+0x70>
    4080:	add	r3, r4
    4082:	ldr	r1, [r4, #12]
    4084:	ldr	r2, [r3, #4]
    4086:	ldr	r5, [r4, #8]
    4088:	orr.w	r2, r2, #1
    408c:	str	r1, [r5, #12]
    408e:	mov	r0, r6
    4090:	str	r5, [r1, #8]
    4092:	str	r2, [r3, #4]
    4094:	bl	4440 <__malloc_unlock>
    4098:	adds	r4, #8
    409a:	mov	r0, r4
    409c:	add	sp, #12
    409e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40a2:	add	r3, r4
    40a4:	mov	r0, r6
    40a6:	ldr	r2, [r3, #4]
    40a8:	orr.w	r2, r2, #1
    40ac:	str	r2, [r3, #4]
    40ae:	bl	4440 <__malloc_unlock>
    40b2:	adds	r4, #8
    40b4:	mov	r0, r4
    40b6:	add	sp, #12
    40b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40bc:	ldr	r4, [r7, #8]
    40be:	ldr	r3, [r4, #4]
    40c0:	bic.w	r8, r3, #3
    40c4:	cmp	r8, r5
    40c6:	bcc.n	40d2 <_malloc_r+0x206>
    40c8:	rsb	r3, r5, r8
    40cc:	cmp	r3, #15
    40ce:	bgt.w	41ea <_malloc_r+0x31e>
    40d2:	ldr	r3, [pc, #340]	; (4228 <_malloc_r+0x35c>)
    40d4:	ldr.w	r9, [pc, #352]	; 4238 <_malloc_r+0x36c>
    40d8:	ldr	r2, [r3, #0]
    40da:	ldr.w	r3, [r9]
    40de:	adds	r3, #1
    40e0:	add	r2, r5
    40e2:	add.w	sl, r4, r8
    40e6:	beq.w	43aa <_malloc_r+0x4de>
    40ea:	add.w	r2, r2, #4096	; 0x1000
    40ee:	adds	r2, #15
    40f0:	bic.w	r2, r2, #4080	; 0xff0
    40f4:	bic.w	r2, r2, #15
    40f8:	mov	r1, r2
    40fa:	mov	r0, r6
    40fc:	str	r2, [sp, #4]
    40fe:	bl	4444 <_sbrk_r>
    4102:	cmp.w	r0, #4294967295
    4106:	mov	fp, r0
    4108:	ldr	r2, [sp, #4]
    410a:	beq.w	43be <_malloc_r+0x4f2>
    410e:	cmp	sl, r0
    4110:	bhi.w	430c <_malloc_r+0x440>
    4114:	ldr	r3, [pc, #276]	; (422c <_malloc_r+0x360>)
    4116:	ldr	r1, [r3, #0]
    4118:	cmp	sl, fp
    411a:	add	r1, r2
    411c:	str	r1, [r3, #0]
    411e:	beq.w	43c8 <_malloc_r+0x4fc>
    4122:	ldr.w	r0, [r9]
    4126:	ldr.w	lr, [pc, #272]	; 4238 <_malloc_r+0x36c>
    412a:	adds	r0, #1
    412c:	ittet	ne
    412e:	rsbne	sl, sl, fp
    4132:	addne	r1, sl
    4134:	streq.w	fp, [lr]
    4138:	strne	r1, [r3, #0]
    413a:	ands.w	r1, fp, #7
    413e:	beq.w	4370 <_malloc_r+0x4a4>
    4142:	rsb	r0, r1, #8
    4146:	rsb	r1, r1, #4096	; 0x1000
    414a:	add	fp, r0
    414c:	adds	r1, #8
    414e:	add	r2, fp
    4150:	ubfx	r2, r2, #0, #12
    4154:	rsb	r9, r2, r1
    4158:	mov	r1, r9
    415a:	mov	r0, r6
    415c:	str	r3, [sp, #4]
    415e:	bl	4444 <_sbrk_r>
    4162:	adds	r3, r0, #1
    4164:	ldr	r3, [sp, #4]
    4166:	beq.w	43e8 <_malloc_r+0x51c>
    416a:	rsb	r2, fp, r0
    416e:	add	r2, r9
    4170:	orr.w	r2, r2, #1
    4174:	ldr	r1, [r3, #0]
    4176:	str.w	fp, [r7, #8]
    417a:	add	r1, r9
    417c:	cmp	r4, r7
    417e:	str.w	r2, [fp, #4]
    4182:	str	r1, [r3, #0]
    4184:	ldr.w	r9, [pc, #164]	; 422c <_malloc_r+0x360>
    4188:	beq.n	41b8 <_malloc_r+0x2ec>
    418a:	cmp.w	r8, #15
    418e:	bls.w	438c <_malloc_r+0x4c0>
    4192:	ldr	r2, [r4, #4]
    4194:	sub.w	r3, r8, #12
    4198:	bic.w	r3, r3, #7
    419c:	adds	r0, r4, r3
    419e:	and.w	r2, r2, #1
    41a2:	mov.w	lr, #5
    41a6:	orrs	r2, r3
    41a8:	cmp	r3, #15
    41aa:	str	r2, [r4, #4]
    41ac:	str.w	lr, [r0, #4]
    41b0:	str.w	lr, [r0, #8]
    41b4:	bhi.w	43f0 <_malloc_r+0x524>
    41b8:	ldr	r3, [pc, #116]	; (4230 <_malloc_r+0x364>)
    41ba:	ldr	r4, [r7, #8]
    41bc:	ldr	r2, [r3, #0]
    41be:	cmp	r1, r2
    41c0:	it	hi
    41c2:	strhi	r1, [r3, #0]
    41c4:	ldr	r3, [pc, #108]	; (4234 <_malloc_r+0x368>)
    41c6:	ldr	r2, [r3, #0]
    41c8:	cmp	r1, r2
    41ca:	ldr	r2, [r4, #4]
    41cc:	it	hi
    41ce:	strhi	r1, [r3, #0]
    41d0:	bic.w	r2, r2, #3
    41d4:	cmp	r5, r2
    41d6:	sub.w	r3, r2, r5
    41da:	bhi.n	41e0 <_malloc_r+0x314>
    41dc:	cmp	r3, #15
    41de:	bgt.n	41ea <_malloc_r+0x31e>
    41e0:	mov	r0, r6
    41e2:	bl	4440 <__malloc_unlock>
    41e6:	movs	r4, #0
    41e8:	b.n	405c <_malloc_r+0x190>
    41ea:	adds	r2, r4, r5
    41ec:	orr.w	r3, r3, #1
    41f0:	orr.w	r5, r5, #1
    41f4:	str	r5, [r4, #4]
    41f6:	mov	r0, r6
    41f8:	str	r2, [r7, #8]
    41fa:	str	r3, [r2, #4]
    41fc:	bl	4440 <__malloc_unlock>
    4200:	adds	r4, #8
    4202:	mov	r0, r4
    4204:	add	sp, #12
    4206:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    420a:	cmp	r3, #20
    420c:	bls.n	42f2 <_malloc_r+0x426>
    420e:	cmp	r3, #84	; 0x54
    4210:	bhi.w	435c <_malloc_r+0x490>
    4214:	lsrs	r0, r5, #12
    4216:	add.w	lr, r0, #111	; 0x6f
    421a:	mov.w	r3, lr, lsl #1
    421e:	adds	r0, #110	; 0x6e
    4220:	b.n	3f10 <_malloc_r+0x44>
    4222:	nop
    4224:	.word	0x1fff11ac
    4228:	.word	0x1fff1d00
    422c:	.word	0x1fff1d04
    4230:	.word	0x1fff1cfc
    4234:	.word	0x1fff1cf8
    4238:	.word	0x1fff15b8
    423c:	lsrs	r2, r3, #9
    423e:	cmp	r2, #4
    4240:	bls.n	4300 <_malloc_r+0x434>
    4242:	cmp	r2, #20
    4244:	bhi.w	43ae <_malloc_r+0x4e2>
    4248:	add.w	r1, r2, #92	; 0x5c
    424c:	lsls	r1, r1, #1
    424e:	adds	r2, #91	; 0x5b
    4250:	add.w	ip, r7, r1, lsl #2
    4254:	ldr.w	r1, [r7, r1, lsl #2]
    4258:	ldr.w	r8, [pc, #476]	; 4438 <_malloc_r+0x56c>
    425c:	sub.w	ip, ip, #8
    4260:	cmp	ip, r1
    4262:	beq.w	4376 <_malloc_r+0x4aa>
    4266:	ldr	r2, [r1, #4]
    4268:	bic.w	r2, r2, #3
    426c:	cmp	r3, r2
    426e:	bcs.n	4276 <_malloc_r+0x3aa>
    4270:	ldr	r1, [r1, #8]
    4272:	cmp	ip, r1
    4274:	bne.n	4266 <_malloc_r+0x39a>
    4276:	ldr.w	ip, [r1, #12]
    427a:	ldr	r2, [r7, #4]
    427c:	str.w	ip, [r4, #12]
    4280:	str	r1, [r4, #8]
    4282:	str.w	r4, [ip, #8]
    4286:	str	r4, [r1, #12]
    4288:	b.n	3f9c <_malloc_r+0xd0>
    428a:	adds	r3, r4, r5
    428c:	orr.w	r7, r2, #1
    4290:	orr.w	r5, r5, #1
    4294:	str	r5, [r4, #4]
    4296:	mov	r0, r6
    4298:	str	r3, [r1, #20]
    429a:	str	r3, [r1, #16]
    429c:	str.w	lr, [r3, #12]
    42a0:	str.w	lr, [r3, #8]
    42a4:	str	r7, [r3, #4]
    42a6:	str	r2, [r3, r2]
    42a8:	adds	r4, #8
    42aa:	bl	4440 <__malloc_unlock>
    42ae:	b.n	405c <_malloc_r+0x190>
    42b0:	ldr	r2, [r1, #4]
    42b2:	b.n	3f9c <_malloc_r+0xd0>
    42b4:	add.w	r8, r8, #1
    42b8:	tst.w	r8, #3
    42bc:	add.w	ip, ip, #8
    42c0:	bne.w	3fc2 <_malloc_r+0xf6>
    42c4:	b.n	4328 <_malloc_r+0x45c>
    42c6:	ldr	r4, [r3, #12]
    42c8:	cmp	r3, r4
    42ca:	it	eq
    42cc:	addeq	r0, #2
    42ce:	beq.w	3f3c <_malloc_r+0x70>
    42d2:	b.n	403c <_malloc_r+0x170>
    42d4:	add	r3, r1
    42d6:	mov	r4, r1
    42d8:	ldr	r2, [r3, #4]
    42da:	ldr	r1, [r1, #12]
    42dc:	ldr.w	r5, [r4, #8]!
    42e0:	orr.w	r2, r2, #1
    42e4:	str	r2, [r3, #4]
    42e6:	mov	r0, r6
    42e8:	str	r1, [r5, #12]
    42ea:	str	r5, [r1, #8]
    42ec:	bl	4440 <__malloc_unlock>
    42f0:	b.n	405c <_malloc_r+0x190>
    42f2:	add.w	lr, r3, #92	; 0x5c
    42f6:	add.w	r0, r3, #91	; 0x5b
    42fa:	mov.w	r3, lr, lsl #1
    42fe:	b.n	3f10 <_malloc_r+0x44>
    4300:	lsrs	r2, r3, #6
    4302:	add.w	r1, r2, #57	; 0x39
    4306:	lsls	r1, r1, #1
    4308:	adds	r2, #56	; 0x38
    430a:	b.n	4250 <_malloc_r+0x384>
    430c:	cmp	r4, r7
    430e:	ldr	r3, [pc, #296]	; (4438 <_malloc_r+0x56c>)
    4310:	beq.w	4114 <_malloc_r+0x248>
    4314:	ldr	r4, [r3, #8]
    4316:	ldr	r2, [r4, #4]
    4318:	bic.w	r2, r2, #3
    431c:	b.n	41d4 <_malloc_r+0x308>
    431e:	ldr.w	r3, [r9], #-8
    4322:	cmp	r9, r3
    4324:	bne.w	442c <_malloc_r+0x560>
    4328:	tst.w	r0, #3
    432c:	add.w	r0, r0, #4294967295
    4330:	bne.n	431e <_malloc_r+0x452>
    4332:	ldr	r3, [r7, #4]
    4334:	bic.w	r3, r3, r4
    4338:	str	r3, [r7, #4]
    433a:	lsls	r4, r4, #1
    433c:	cmp	r4, r3
    433e:	bhi.w	40bc <_malloc_r+0x1f0>
    4342:	cmp	r4, #0
    4344:	beq.w	40bc <_malloc_r+0x1f0>
    4348:	tst	r4, r3
    434a:	mov	r0, r8
    434c:	bne.w	3fba <_malloc_r+0xee>
    4350:	lsls	r4, r4, #1
    4352:	tst	r4, r3
    4354:	add.w	r0, r0, #4
    4358:	beq.n	4350 <_malloc_r+0x484>
    435a:	b.n	3fba <_malloc_r+0xee>
    435c:	cmp.w	r3, #340	; 0x154
    4360:	bhi.n	4394 <_malloc_r+0x4c8>
    4362:	lsrs	r0, r5, #15
    4364:	add.w	lr, r0, #120	; 0x78
    4368:	mov.w	r3, lr, lsl #1
    436c:	adds	r0, #119	; 0x77
    436e:	b.n	3f10 <_malloc_r+0x44>
    4370:	mov.w	r1, #4096	; 0x1000
    4374:	b.n	414e <_malloc_r+0x282>
    4376:	movs	r1, #1
    4378:	ldr.w	r3, [r8, #4]
    437c:	asrs	r2, r2, #2
    437e:	lsl.w	r2, r1, r2
    4382:	orrs	r2, r3
    4384:	str.w	r2, [r8, #4]
    4388:	mov	r1, ip
    438a:	b.n	427c <_malloc_r+0x3b0>
    438c:	movs	r3, #1
    438e:	str.w	r3, [fp, #4]
    4392:	b.n	41e0 <_malloc_r+0x314>
    4394:	movw	r2, #1364	; 0x554
    4398:	cmp	r3, r2
    439a:	bhi.n	43de <_malloc_r+0x512>
    439c:	lsrs	r0, r5, #18
    439e:	add.w	lr, r0, #125	; 0x7d
    43a2:	mov.w	r3, lr, lsl #1
    43a6:	adds	r0, #124	; 0x7c
    43a8:	b.n	3f10 <_malloc_r+0x44>
    43aa:	adds	r2, #16
    43ac:	b.n	40f8 <_malloc_r+0x22c>
    43ae:	cmp	r2, #84	; 0x54
    43b0:	bhi.n	4400 <_malloc_r+0x534>
    43b2:	lsrs	r2, r3, #12
    43b4:	add.w	r1, r2, #111	; 0x6f
    43b8:	lsls	r1, r1, #1
    43ba:	adds	r2, #110	; 0x6e
    43bc:	b.n	4250 <_malloc_r+0x384>
    43be:	ldr	r4, [r7, #8]
    43c0:	ldr	r2, [r4, #4]
    43c2:	bic.w	r2, r2, #3
    43c6:	b.n	41d4 <_malloc_r+0x308>
    43c8:	ubfx	r0, sl, #0, #12
    43cc:	cmp	r0, #0
    43ce:	bne.w	4122 <_malloc_r+0x256>
    43d2:	add	r2, r8
    43d4:	ldr	r3, [r7, #8]
    43d6:	orr.w	r2, r2, #1
    43da:	str	r2, [r3, #4]
    43dc:	b.n	41b8 <_malloc_r+0x2ec>
    43de:	movs	r3, #254	; 0xfe
    43e0:	mov.w	lr, #127	; 0x7f
    43e4:	movs	r0, #126	; 0x7e
    43e6:	b.n	3f10 <_malloc_r+0x44>
    43e8:	movs	r2, #1
    43ea:	mov.w	r9, #0
    43ee:	b.n	4174 <_malloc_r+0x2a8>
    43f0:	add.w	r1, r4, #8
    43f4:	mov	r0, r6
    43f6:	bl	454c <_free_r>
    43fa:	ldr.w	r1, [r9]
    43fe:	b.n	41b8 <_malloc_r+0x2ec>
    4400:	cmp.w	r2, #340	; 0x154
    4404:	bhi.n	4412 <_malloc_r+0x546>
    4406:	lsrs	r2, r3, #15
    4408:	add.w	r1, r2, #120	; 0x78
    440c:	lsls	r1, r1, #1
    440e:	adds	r2, #119	; 0x77
    4410:	b.n	4250 <_malloc_r+0x384>
    4412:	movw	r1, #1364	; 0x554
    4416:	cmp	r2, r1
    4418:	bhi.n	4426 <_malloc_r+0x55a>
    441a:	lsrs	r2, r3, #18
    441c:	add.w	r1, r2, #125	; 0x7d
    4420:	lsls	r1, r1, #1
    4422:	adds	r2, #124	; 0x7c
    4424:	b.n	4250 <_malloc_r+0x384>
    4426:	movs	r1, #254	; 0xfe
    4428:	movs	r2, #126	; 0x7e
    442a:	b.n	4250 <_malloc_r+0x384>
    442c:	ldr	r3, [r7, #4]
    442e:	b.n	433a <_malloc_r+0x46e>
    4430:	lsrs	r0, r5, #3
    4432:	adds	r3, r0, #1
    4434:	lsls	r3, r3, #1
    4436:	b.n	402a <_malloc_r+0x15e>
    4438:	.word	0x1fff11ac

0000443c <__malloc_lock>:
    443c:	bx	lr
    443e:	nop

00004440 <__malloc_unlock>:
    4440:	bx	lr
    4442:	nop

00004444 <_sbrk_r>:
    4444:	push	{r3, r4, r5, lr}
    4446:	ldr	r4, [pc, #28]	; (4464 <_sbrk_r+0x20>)
    4448:	movs	r3, #0
    444a:	mov	r5, r0
    444c:	mov	r0, r1
    444e:	str	r3, [r4, #0]
    4450:	bl	37d8 <_sbrk>
    4454:	adds	r3, r0, #1
    4456:	beq.n	445a <_sbrk_r+0x16>
    4458:	pop	{r3, r4, r5, pc}
    445a:	ldr	r3, [r4, #0]
    445c:	cmp	r3, #0
    445e:	beq.n	4458 <_sbrk_r+0x14>
    4460:	str	r3, [r5, #0]
    4462:	pop	{r3, r4, r5, pc}
    4464:	.word	0x1fff1e70

00004468 <register_fini>:
    4468:	ldr	r3, [pc, #8]	; (4474 <register_fini+0xc>)
    446a:	cbz	r3, 4472 <register_fini+0xa>
    446c:	ldr	r0, [pc, #8]	; (4478 <register_fini+0x10>)
    446e:	b.w	447c <atexit>
    4472:	bx	lr
    4474:	.word	0x00000000
    4478:	.word	0x00004489

0000447c <atexit>:
    447c:	movs	r3, #0
    447e:	mov	r1, r0
    4480:	mov	r2, r3
    4482:	mov	r0, r3
    4484:	b.w	471c <__register_exitproc>

00004488 <__libc_fini_array>:
    4488:	push	{r3, r4, r5, lr}
    448a:	ldr	r5, [pc, #28]	; (44a8 <__libc_fini_array+0x20>)
    448c:	ldr	r4, [pc, #28]	; (44ac <__libc_fini_array+0x24>)
    448e:	subs	r4, r5, r4
    4490:	asrs	r4, r4, #2
    4492:	beq.n	44a0 <__libc_fini_array+0x18>
    4494:	subs	r4, #1
    4496:	ldr.w	r3, [r5, #-4]!
    449a:	blx	r3
    449c:	cmp	r4, #0
    449e:	bne.n	4494 <__libc_fini_array+0xc>
    44a0:	ldmia.w	sp!, {r3, r4, r5, lr}
    44a4:	b.w	4af0 <__init_array_end>
	...

000044b0 <_malloc_trim_r>:
    44b0:	push	{r3, r4, r5, r6, r7, lr}
    44b2:	ldr	r7, [pc, #140]	; (4540 <_malloc_trim_r+0x90>)
    44b4:	mov	r4, r1
    44b6:	mov	r6, r0
    44b8:	bl	443c <__malloc_lock>
    44bc:	ldr	r3, [r7, #8]
    44be:	ldr	r5, [r3, #4]
    44c0:	bic.w	r5, r5, #3
    44c4:	subs	r1, r5, r4
    44c6:	addw	r1, r1, #4079	; 0xfef
    44ca:	bic.w	r1, r1, #4080	; 0xff0
    44ce:	bic.w	r1, r1, #15
    44d2:	sub.w	r4, r1, #4096	; 0x1000
    44d6:	cmp.w	r4, #4096	; 0x1000
    44da:	blt.n	44ec <_malloc_trim_r+0x3c>
    44dc:	movs	r1, #0
    44de:	mov	r0, r6
    44e0:	bl	4444 <_sbrk_r>
    44e4:	ldr	r3, [r7, #8]
    44e6:	add	r3, r5
    44e8:	cmp	r0, r3
    44ea:	beq.n	44f6 <_malloc_trim_r+0x46>
    44ec:	mov	r0, r6
    44ee:	bl	4440 <__malloc_unlock>
    44f2:	movs	r0, #0
    44f4:	pop	{r3, r4, r5, r6, r7, pc}
    44f6:	negs	r1, r4
    44f8:	mov	r0, r6
    44fa:	bl	4444 <_sbrk_r>
    44fe:	adds	r0, #1
    4500:	beq.n	451e <_malloc_trim_r+0x6e>
    4502:	ldr	r3, [pc, #64]	; (4544 <_malloc_trim_r+0x94>)
    4504:	ldr	r2, [r7, #8]
    4506:	ldr	r1, [r3, #0]
    4508:	subs	r5, r5, r4
    450a:	orr.w	r5, r5, #1
    450e:	mov	r0, r6
    4510:	subs	r1, r1, r4
    4512:	str	r5, [r2, #4]
    4514:	str	r1, [r3, #0]
    4516:	bl	4440 <__malloc_unlock>
    451a:	movs	r0, #1
    451c:	pop	{r3, r4, r5, r6, r7, pc}
    451e:	movs	r1, #0
    4520:	mov	r0, r6
    4522:	bl	4444 <_sbrk_r>
    4526:	ldr	r2, [r7, #8]
    4528:	subs	r3, r0, r2
    452a:	cmp	r3, #15
    452c:	ble.n	44ec <_malloc_trim_r+0x3c>
    452e:	ldr	r4, [pc, #24]	; (4548 <_malloc_trim_r+0x98>)
    4530:	ldr	r1, [pc, #16]	; (4544 <_malloc_trim_r+0x94>)
    4532:	ldr	r4, [r4, #0]
    4534:	orr.w	r3, r3, #1
    4538:	subs	r0, r0, r4
    453a:	str	r3, [r2, #4]
    453c:	str	r0, [r1, #0]
    453e:	b.n	44ec <_malloc_trim_r+0x3c>
    4540:	.word	0x1fff11ac
    4544:	.word	0x1fff1d04
    4548:	.word	0x1fff15b8

0000454c <_free_r>:
    454c:	cmp	r1, #0
    454e:	beq.n	45dc <_free_r+0x90>
    4550:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4554:	mov	r5, r1
    4556:	mov	r8, r0
    4558:	bl	443c <__malloc_lock>
    455c:	ldr.w	r7, [r5, #-4]
    4560:	ldr	r1, [pc, #424]	; (470c <_free_r+0x1c0>)
    4562:	bic.w	r3, r7, #1
    4566:	sub.w	r4, r5, #8
    456a:	adds	r2, r4, r3
    456c:	ldr	r6, [r1, #8]
    456e:	ldr	r0, [r2, #4]
    4570:	cmp	r2, r6
    4572:	bic.w	r0, r0, #3
    4576:	beq.n	463e <_free_r+0xf2>
    4578:	lsls	r6, r7, #31
    457a:	str	r0, [r2, #4]
    457c:	bmi.n	4596 <_free_r+0x4a>
    457e:	ldr.w	r7, [r5, #-8]
    4582:	subs	r4, r4, r7
    4584:	add.w	lr, r1, #8
    4588:	ldr	r5, [r4, #8]
    458a:	cmp	r5, lr
    458c:	add	r3, r7
    458e:	beq.n	4670 <_free_r+0x124>
    4590:	ldr	r7, [r4, #12]
    4592:	str	r7, [r5, #12]
    4594:	str	r5, [r7, #8]
    4596:	adds	r5, r2, r0
    4598:	ldr	r5, [r5, #4]
    459a:	lsls	r5, r5, #31
    459c:	bpl.n	4624 <_free_r+0xd8>
    459e:	orr.w	r2, r3, #1
    45a2:	str	r2, [r4, #4]
    45a4:	str	r3, [r4, r3]
    45a6:	cmp.w	r3, #512	; 0x200
    45aa:	bcs.n	45de <_free_r+0x92>
    45ac:	lsrs	r3, r3, #3
    45ae:	adds	r2, r3, #1
    45b0:	ldr	r5, [r1, #4]
    45b2:	ldr.w	r7, [r1, r2, lsl #3]
    45b6:	str	r7, [r4, #8]
    45b8:	movs	r0, #1
    45ba:	asrs	r3, r3, #2
    45bc:	lsl.w	r3, r0, r3
    45c0:	add.w	r0, r1, r2, lsl #3
    45c4:	orrs	r5, r3
    45c6:	subs	r0, #8
    45c8:	str	r0, [r4, #12]
    45ca:	str	r5, [r1, #4]
    45cc:	str.w	r4, [r1, r2, lsl #3]
    45d0:	str	r4, [r7, #12]
    45d2:	mov	r0, r8
    45d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    45d8:	b.w	4440 <__malloc_unlock>
    45dc:	bx	lr
    45de:	lsrs	r2, r3, #9
    45e0:	cmp	r2, #4
    45e2:	bhi.n	468c <_free_r+0x140>
    45e4:	lsrs	r2, r3, #6
    45e6:	add.w	r7, r2, #57	; 0x39
    45ea:	lsls	r7, r7, #1
    45ec:	add.w	r5, r2, #56	; 0x38
    45f0:	add.w	r0, r1, r7, lsl #2
    45f4:	ldr.w	r2, [r1, r7, lsl #2]
    45f8:	ldr	r1, [pc, #272]	; (470c <_free_r+0x1c0>)
    45fa:	subs	r0, #8
    45fc:	cmp	r0, r2
    45fe:	beq.n	469c <_free_r+0x150>
    4600:	ldr	r1, [r2, #4]
    4602:	bic.w	r1, r1, #3
    4606:	cmp	r3, r1
    4608:	bcs.n	4610 <_free_r+0xc4>
    460a:	ldr	r2, [r2, #8]
    460c:	cmp	r0, r2
    460e:	bne.n	4600 <_free_r+0xb4>
    4610:	ldr	r0, [r2, #12]
    4612:	str	r0, [r4, #12]
    4614:	str	r2, [r4, #8]
    4616:	str	r4, [r0, #8]
    4618:	str	r4, [r2, #12]
    461a:	mov	r0, r8
    461c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4620:	b.w	4440 <__malloc_unlock>
    4624:	ldr	r5, [r2, #8]
    4626:	ldr	r7, [pc, #232]	; (4710 <_free_r+0x1c4>)
    4628:	cmp	r5, r7
    462a:	add	r3, r0
    462c:	beq.n	46ae <_free_r+0x162>
    462e:	ldr	r0, [r2, #12]
    4630:	str	r0, [r5, #12]
    4632:	orr.w	r2, r3, #1
    4636:	str	r5, [r0, #8]
    4638:	str	r2, [r4, #4]
    463a:	str	r3, [r4, r3]
    463c:	b.n	45a6 <_free_r+0x5a>
    463e:	lsls	r7, r7, #31
    4640:	add	r3, r0
    4642:	bmi.n	4654 <_free_r+0x108>
    4644:	ldr.w	r2, [r5, #-8]
    4648:	subs	r4, r4, r2
    464a:	add	r3, r2
    464c:	ldr	r0, [r4, #8]
    464e:	ldr	r2, [r4, #12]
    4650:	str	r2, [r0, #12]
    4652:	str	r0, [r2, #8]
    4654:	ldr	r2, [pc, #188]	; (4714 <_free_r+0x1c8>)
    4656:	ldr	r2, [r2, #0]
    4658:	orr.w	r0, r3, #1
    465c:	cmp	r3, r2
    465e:	str	r0, [r4, #4]
    4660:	str	r4, [r1, #8]
    4662:	bcc.n	45d2 <_free_r+0x86>
    4664:	ldr	r3, [pc, #176]	; (4718 <_free_r+0x1cc>)
    4666:	mov	r0, r8
    4668:	ldr	r1, [r3, #0]
    466a:	bl	44b0 <_malloc_trim_r>
    466e:	b.n	45d2 <_free_r+0x86>
    4670:	adds	r1, r2, r0
    4672:	ldr	r1, [r1, #4]
    4674:	lsls	r1, r1, #31
    4676:	bmi.n	4702 <_free_r+0x1b6>
    4678:	ldr	r1, [r2, #8]
    467a:	ldr	r2, [r2, #12]
    467c:	str	r2, [r1, #12]
    467e:	add	r3, r0
    4680:	orr.w	r0, r3, #1
    4684:	str	r1, [r2, #8]
    4686:	str	r0, [r4, #4]
    4688:	str	r3, [r4, r3]
    468a:	b.n	45d2 <_free_r+0x86>
    468c:	cmp	r2, #20
    468e:	bhi.n	46c0 <_free_r+0x174>
    4690:	add.w	r7, r2, #92	; 0x5c
    4694:	lsls	r7, r7, #1
    4696:	add.w	r5, r2, #91	; 0x5b
    469a:	b.n	45f0 <_free_r+0xa4>
    469c:	asrs	r2, r5, #2
    469e:	ldr	r3, [r1, #4]
    46a0:	movs	r5, #1
    46a2:	lsl.w	r2, r5, r2
    46a6:	orrs	r3, r2
    46a8:	str	r3, [r1, #4]
    46aa:	mov	r2, r0
    46ac:	b.n	4612 <_free_r+0xc6>
    46ae:	orr.w	r2, r3, #1
    46b2:	str	r4, [r1, #20]
    46b4:	str	r4, [r1, #16]
    46b6:	str	r5, [r4, #12]
    46b8:	str	r5, [r4, #8]
    46ba:	str	r2, [r4, #4]
    46bc:	str	r3, [r4, r3]
    46be:	b.n	45d2 <_free_r+0x86>
    46c0:	cmp	r2, #84	; 0x54
    46c2:	bhi.n	46d2 <_free_r+0x186>
    46c4:	lsrs	r2, r3, #12
    46c6:	add.w	r7, r2, #111	; 0x6f
    46ca:	lsls	r7, r7, #1
    46cc:	add.w	r5, r2, #110	; 0x6e
    46d0:	b.n	45f0 <_free_r+0xa4>
    46d2:	cmp.w	r2, #340	; 0x154
    46d6:	bhi.n	46e6 <_free_r+0x19a>
    46d8:	lsrs	r2, r3, #15
    46da:	add.w	r7, r2, #120	; 0x78
    46de:	lsls	r7, r7, #1
    46e0:	add.w	r5, r2, #119	; 0x77
    46e4:	b.n	45f0 <_free_r+0xa4>
    46e6:	movw	r0, #1364	; 0x554
    46ea:	cmp	r2, r0
    46ec:	bhi.n	46fc <_free_r+0x1b0>
    46ee:	lsrs	r2, r3, #18
    46f0:	add.w	r7, r2, #125	; 0x7d
    46f4:	lsls	r7, r7, #1
    46f6:	add.w	r5, r2, #124	; 0x7c
    46fa:	b.n	45f0 <_free_r+0xa4>
    46fc:	movs	r7, #254	; 0xfe
    46fe:	movs	r5, #126	; 0x7e
    4700:	b.n	45f0 <_free_r+0xa4>
    4702:	orr.w	r2, r3, #1
    4706:	str	r2, [r4, #4]
    4708:	str	r3, [r4, r3]
    470a:	b.n	45d2 <_free_r+0x86>
    470c:	.word	0x1fff11ac
    4710:	.word	0x1fff11b4
    4714:	.word	0x1fff15b4
    4718:	.word	0x1fff1d00

0000471c <__register_exitproc>:
    471c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4720:	ldr	r4, [pc, #148]	; (47b8 <__register_exitproc+0x9c>)
    4722:	ldr	r5, [r4, #0]
    4724:	ldr.w	r4, [r5, #328]	; 0x148
    4728:	mov	r6, r0
    472a:	mov	r8, r1
    472c:	mov	sl, r2
    472e:	mov	r9, r3
    4730:	cbz	r4, 47a4 <__register_exitproc+0x88>
    4732:	ldr	r0, [r4, #4]
    4734:	cmp	r0, #31
    4736:	bgt.n	4768 <__register_exitproc+0x4c>
    4738:	adds	r3, r0, #1
    473a:	cbz	r6, 475a <__register_exitproc+0x3e>
    473c:	add.w	r5, r4, r0, lsl #2
    4740:	movs	r2, #1
    4742:	str.w	sl, [r5, #136]	; 0x88
    4746:	ldr.w	r1, [r4, #392]	; 0x188
    474a:	lsls	r2, r0
    474c:	orrs	r1, r2
    474e:	cmp	r6, #2
    4750:	str.w	r1, [r4, #392]	; 0x188
    4754:	str.w	r9, [r5, #264]	; 0x108
    4758:	beq.n	4798 <__register_exitproc+0x7c>
    475a:	adds	r0, #2
    475c:	str	r3, [r4, #4]
    475e:	str.w	r8, [r4, r0, lsl #2]
    4762:	movs	r0, #0
    4764:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4768:	ldr	r3, [pc, #80]	; (47bc <__register_exitproc+0xa0>)
    476a:	cbz	r3, 47ae <__register_exitproc+0x92>
    476c:	mov.w	r0, #400	; 0x190
    4770:	bl	3ebc <malloc>
    4774:	mov	r4, r0
    4776:	cbz	r0, 47ae <__register_exitproc+0x92>
    4778:	ldr.w	r3, [r5, #328]	; 0x148
    477c:	movs	r7, #0
    477e:	stmia.w	r0, {r3, r7}
    4782:	str.w	r4, [r5, #328]	; 0x148
    4786:	mov	r0, r7
    4788:	movs	r3, #1
    478a:	str.w	r7, [r4, #392]	; 0x188
    478e:	str.w	r7, [r4, #396]	; 0x18c
    4792:	cmp	r6, #0
    4794:	beq.n	475a <__register_exitproc+0x3e>
    4796:	b.n	473c <__register_exitproc+0x20>
    4798:	ldr.w	r1, [r4, #396]	; 0x18c
    479c:	orrs	r2, r1
    479e:	str.w	r2, [r4, #396]	; 0x18c
    47a2:	b.n	475a <__register_exitproc+0x3e>
    47a4:	add.w	r4, r5, #332	; 0x14c
    47a8:	str.w	r4, [r5, #328]	; 0x148
    47ac:	b.n	4732 <__register_exitproc+0x16>
    47ae:	mov.w	r0, #4294967295
    47b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    47b6:	nop
    47b8:	.word	0x00004ad4
    47bc:	.word	0x00003ebd
    47c0:	.word	0x7370704f
    47c4:	.word	0x6e61202c
    47c8:	.word	0x6b6e7520
    47cc:	.word	0x6e776f6e
    47d0:	.word	0x44494d20
    47d4:	.word	0x656d2049
    47d8:	.word	0x67617373
    47dc:	.word	0x79742065
    47e0:	.word	0x00216570
    47e4:	.word	0x4f4c4556
    47e8:	.word	0x59544943
    47ec:	.word	0x00000000
    47f0:	.word	0x45544f4e
    47f4:	.word	0x474e454c
    47f8:	.word	0x00004854
    47fc:	.word	0x43544950
    4800:	.word	0x00000048

00004804 <pin2sc1a>:
    4804:	................
    4814:	................
    4824:	................
    4834:	................
    4844:	........

0000484c <digital_pin_to_info_PGM>:
    484c:	@..C@..@D..CD..@
    485c:	...C...@0..C0..@
    486c:	4..C4..@...C...@
    487c:	...C...@...C...@
    488c:	...C...@...C...@
    489c:	...C...@...C...@
    48ac:	...C...@...C...@
    48bc:	...C...@...C...@
    48cc:	...C...@...C...@
    48dc:	...C...@...C...@
    48ec:	...C...@...C...@
    48fc:	...C...@...C...@
    490c:	h .Ch..@...C...@
    491c:	8..C8..@<..C<..@
    492c:	@..C@..@H..CH..@
    493c:	L..CL..@(..C(..@
    494c:	,..C,..@` .C`..@
    495c:	d .Cd..@ ..C ..@
    496c:	$..C$..@(..C(..@
    497c:	,..C,..@D..CD..@
    498c:	p..Cp..@t..Ct..@
    499c:	h..Ch..@P..CP..@
    49ac:	X..CX..@\..C\..@
    49bc:	T..CT..@ ..C ..@
    49cc:	$..C$..@...C...@
    49dc:	...C...@8..C8..@
    49ec:	4..C4..@0..C0..@
    49fc:	<..C<..@,..C,..@
    4a0c:	( .C(..@, .C,..@
    4a1c:	. .C...@. .C...@
    4a2c:	. .C...@. .C...@
    4a3c:	. .C...@. .C...@

00004a4c <vtable for usb_serial_class>:
	...
    4a54:	.4...4...4...4..
    4a64:	.4...3...3...3..
    4a74:	....

00004a78 <usb_endpoint_config_table>:
    4a78:	........

00004a80 <usb_descriptor_list>:
    4a80:	................
    4a90:	............`...
    4aa0:	................
    4ab0:	....H...........
    4ac0:	d...............
    4ad0:	....

00004ad4 <_global_impure_ptr>:
    4ad4:	....

00004ad8 <_init>:
    4ad8:	push	{r3, r4, r5, r6, r7, lr}
    4ada:	nop
    4adc:	pop	{r3, r4, r5, r6, r7}
    4ade:	pop	{r3}
    4ae0:	mov	lr, r3
    4ae2:	bx	lr

00004ae4 <__init_array_start>:
    4ae4:	.word	0x00004469

00004ae8 <__frame_dummy_init_array_entry>:
    4ae8:	5...m...

Disassembly of section .fini:

00004af0 <_fini>:
    4af0:	push	{r3, r4, r5, r6, r7, lr}
    4af2:	nop

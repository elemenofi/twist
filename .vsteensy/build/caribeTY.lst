
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000044a8 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15b0 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003148 l     F .text	0000000c startup_default_early_hook
00003154 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15b0 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15b4 l       .bss	00000000 object.8610
000044a0 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000f7c l     F .text	000001e4 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff17e1 l     O .bss	00000001 tx_noautoflush
1fff17e4 l     O .bss	00000004 tx_packet
1fff17e8 l     O .bss	00000001 transmit_previous_timeout
1fff17ec l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
00001434 l     F .text	00000144 wait_for_cal
1fff17f1 l     O .bss	00000001 analog_right_shift
1fff17f2 l     O .bss	00000001 calibrating
000041bc l     O .text	00000048 pin2sc1a
1fff0c58 l     O .data	00000001 analog_config_bits
1fff17f3 l     O .bss	00000001 analogReadBusyADC1
1fff17f4 l     O .bss	00000001 analogReadBusyADC0
1fff17f5 l     O .bss	00000001 analog_reference_internal
1fff0c59 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00001754 l     F .text	0000004c digitalWrite.part.1
000017a0 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00001a80 l     F .text	00000048 sysex_byte
1fff1810 l     O .bss	00000001 tx_noautoflush
1fff183c l     O .bss	00000004 tx_packet
1fff1840 l     O .bss	00000001 transmit_previous_timeout
1fff1848 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c5c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff185c l     O .bss	00000004 ep0_tx_ptr
1fff1860 l     O .bss	00000014 rx_last
1fff1874 l     O .bss	00000002 ep0_tx_len
1fff1878 l     O .bss	00000040 ep0_rx0_buf
1fff18b8 l     O .bss	00000014 rx_first
1fff18cc l     O .bss	00000001 ep0_tx_data_toggle
1fff18d0 l     O .bss	00000040 ep0_rx1_buf
1fff1910 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff1924 l     O .bss	00000014 tx_last
1fff1938 l     O .bss	00000008 setup
1fff1940 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1944 l     O .bss	00000008 reply_buffer
1fff1950 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1955 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1958 l     O .bss	00000004 rts_pin
1fff195c l     O .bss	00000001 rx_buffer_head
1fff195d l     O .bss	00000001 rx_buffer_tail
1fff1960 l     O .bss	00000028 tx_buffer
1fff1988 l     O .bss	00000040 rx_buffer
1fff19c8 l     O .bss	00000001 transmitting
1fff19c9 l     O .bss	00000001 tx_buffer_tail
1fff19cc l     O .bss	00000004 transmit_pin
1fff19d0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff19d4 l     O .bss	00000004 rts_pin
1fff19d8 l     O .bss	00000001 transmitting
1fff19d9 l     O .bss	00000001 rx_buffer_tail
1fff19dc l     O .bss	00000028 tx_buffer
1fff1a04 l     O .bss	00000040 rx_buffer
1fff1a44 l     O .bss	00000001 rx_buffer_head
1fff1a45 l     O .bss	00000001 tx_buffer_tail
1fff1a48 l     O .bss	00000004 transmit_pin
1fff1a4c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1a50 l     O .bss	00000004 rts_pin
1fff1a54 l     O .bss	00000001 rx_buffer_head
1fff1a55 l     O .bss	00000001 rx_buffer_tail
1fff1a58 l     O .bss	00000028 tx_buffer
1fff1a80 l     O .bss	00000040 rx_buffer
1fff1ac0 l     O .bss	00000001 transmitting
1fff1ac1 l     O .bss	00000001 tx_buffer_tail
1fff1ac4 l     O .bss	00000004 transmit_pin
1fff1ac8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1acc l     O .bss	00000004 rts_pin
1fff1ad0 l     O .bss	00000001 rx_buffer_head
1fff1ad1 l     O .bss	00000001 rx_buffer_tail
1fff1ad4 l     O .bss	00000040 tx_buffer
1fff1b14 l     O .bss	00000040 rx_buffer
1fff1b54 l     O .bss	00000001 transmitting
1fff1b55 l     O .bss	00000001 tx_buffer_tail
1fff1b58 l     O .bss	00000004 transmit_pin
1fff1b5c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1b60 l     O .bss	00000004 rts_pin
1fff1b64 l     O .bss	00000001 rx_buffer_head
1fff1b65 l     O .bss	00000001 rx_buffer_tail
1fff1b68 l     O .bss	00000028 tx_buffer
1fff1b90 l     O .bss	00000040 rx_buffer
1fff1bd0 l     O .bss	00000001 transmitting
1fff1bd1 l     O .bss	00000001 tx_buffer_tail
1fff1bd4 l     O .bss	00000004 transmit_pin
1fff1bd8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c74 l     O .data	00000012 device_descriptor
1fff0ca0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1bdc l     O .bss	00000004 rts_pin
1fff1be0 l     O .bss	00000001 rx_buffer_head
1fff1be1 l     O .bss	00000001 rx_buffer_tail
1fff1be4 l     O .bss	00000028 tx_buffer
1fff1c0c l     O .bss	00000040 rx_buffer
1fff1c4c l     O .bss	00000001 transmitting
1fff1c4d l     O .bss	00000001 tx_buffer_tail
1fff1c50 l     O .bss	00000004 transmit_pin
1fff1c54 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00003de8 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d70 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15b0 l       .bss	00000000 __bss_start__
1fff1df0 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00003140  w    F .text	00000006 adc0_isr
000011d8 g     F .text	0000001c usb_serial_available
00003000 g     F .text	00000020 serial4_available
00002cac  w    F .text	000000c4 yield
1fff0c88 g     O .data	00000018 usb_string_manufacturer_name_default
000031ec g     F .text	00000020 serial_available
1fff1814 g     O .bss	00000004 usb_midi_handleProgramChange
000030f8  w    F .text	00000048 hard_fault_isr
00003140  w    F .text	00000006 dma_ch6_isr
00002da0 g     F .text	00000020 Print::println()
00002ed4 g     F .text	00000020 serial2_available
00003140  w    F .text	00000006 uart0_lon_isr
000020c0 g     F .text	000000e8 usb_rx_memory
00002d70  w    F .text	00000002 serialEvent5()
00003140  w    F .text	00000006 dma_ch8_isr
00003318 g     F .text	00000020 serial6_available
00003dc0 g     F .text	00000002 __malloc_unlock
1fff1828 g     O .bss	00000004 usb_midi_handleAfterTouch
00001578 g     F .text	000000e0 analog_init
000021a8 g     F .text	00000084 usb_tx
00003140  w    F .text	00000006 portcd_isr
1fff1838 g     O .bss	00000004 usb_midi_handleSysExComplete
00003738 g     F .text	00000098 MillisTimer::runFromTimer()
00003140  w    F .text	00000006 can1_rx_warn_isr
000044ac g       .fini	00000000 __exidx_end
00003140  w    F .text	00000006 dma_error_isr
1fff1cb4 g     O .bss	00000001 usb_midi_msg_type
1fff1c6c g     O .bss	00000001 EventResponder::runningFromYield
00003140  w    F .text	00000006 i2c0_isr
000037e0 g     F .text	0000000c __errno
00003140  w    F .text	00000006 portd_isr
00003140  w    F .text	00000006 enet_error_isr
1fff1c58 g     O .bss	00000004 EventResponder::firstInterrupt
00003140  w    F .text	00000006 tpm1_isr
00002d8c  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00004204 g     O .text	00000200 digital_pin_to_info_PGM
1fff1dec g     O .bss	00000004 errno
000044ac g       .fini	00000000 _etext
1fff15b0 g       .bss	00000000 _sbss
00002dd8  w    F .text	00000002 serialEvent6()
1fff1824 g     O .bss	00000004 usb_midi_handleVelocityChange
00001848 g     F .text	0000001c digitalRead
00003140  w    F .text	00000006 porte_isr
00000494 g     F .text	00000ae8 loop
00003140  w    F .text	00000006 portb_isr
00001b64 g     F .text	0000002c usb_midi_flush_output
00003140  w    F .text	00000006 spi1_isr
00003020 g     F .text	000000d8 uart3_status_isr
000035e4  w    F .text	00000002 serialEvent1()
1fff15f4 g     O .bss	00000014 led4
00003140  w    F .text	00000006 mcm_isr
000036d0 g     F .text	00000068 MillisTimer::addToActiveList()
00001b90 g     F .text	0000043c usb_midi_read
1fff1800 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1c5c g     O .bss	00000004 EventResponder::lastInterrupt
00002ef4 g     F .text	0000010c uart1_status_isr
1fff1cb6 g     O .bss	00000002 usb_midi_msg_sysex_len
00003140  w    F .text	00000006 randnum_isr
1fff1808 g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff17f8 g     O .bss	00000004 systick_millis_count
000030f8  w    F .text	00000048 bus_fault_isr
00003140  w    F .text	00000006 watchdog_isr
00003140  w    F .text	00000006 i2c1_isr
1fff194c g     O .bss	00000001 usb_configuration
00003140  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00002dc0  w    F .text	00000002 serialEvent2()
00003140  w    F .text	00000006 i2c2_isr
1fff0c88  w    O .data	00000018 usb_string_manufacturer_name
1fff1de0 g     O .bss	0000000a usb_rx_byte_count_data
00003140  w    F .text	00000006 pit1_isr
0000383c g     F .text	00000010 malloc
00003140  w    F .text	00000006 dma_ch4_isr
00003140  w    F .text	00000006 software_isr
00003140  w    F .text	00000006 dma_ch7_isr
0000366c  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00002bdc g     F .text	000000d0 usb_init
00003140  w    F .text	00000006 lptmr_isr
1fff1c7c g     O .bss	00000004 __malloc_top_pad
00001818 g     F .text	00000024 rtc_set
1fff1778 g     O .bss	00000028 button5
1fff17b8 g     O .bss	00000028 button4
1fff0c40 g       .data	00000000 _sdata
1fff1858 g     O .bss	00000004 usb_midi_handleNoteOn
000031b8 g     F .text	00000034 kinetis_hsrun_enable
00003dc4 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00001160 g     F .text	00000048 usb_serial_getchar
00003140  w    F .text	00000006 can1_bus_off_isr
00003140  w    F .text	00000006 ftm2_isr
1fff1ca8 g     O .bss	00000008 usb_cdc_line_coding
0000183c g     F .text	0000000a digitalWrite
00003140  w    F .text	00000006 uart5_status_isr
00003338 g     F .text	000000e4 lpuart0_status_isr
1fff1c64 g     O .bss	00000004 EventResponder::lastYield
00004430 g     O .text	00000005 usb_endpoint_config_table
00003140  w    F .text	00000006 dma_ch9_isr
00003140  w    F .text	00000006 pit2_isr
000034ec g     F .text	00000020 serial3_available
1fff1c78 g     O .bss	00000004 __malloc_max_sbrked_mem
00001864 g     F .text	0000000a pinMode
0000200c g     F .text	0000004c usb_free
00003140  w    F .text	00000006 i2c3_isr
1fff161c g     O .bss	00000014 led1
1fff1820 g     O .bss	00000004 usb_midi_handleSysExPartial
000044ac g       .fini	00000000 __exidx_start
00003140  w    F .text	00000006 pit0_isr
1fff1cb8 g     O .bss	00000001 usb_midi_msg_data1
1fff1c68 g     O .bss	00000004 EventResponder::firstYield
0000448c g     O .text	00000004 _global_impure_ptr
00003140  w    F .text	00000006 can1_error_isr
000037ec g     F .text	00000050 __libc_init_array
1fff1df0 g       .bss	00000000 __bss_end
00003140  w    F .text	00000006 can0_wakeup_isr
00003140  w    F .text	00000006 flash_cmd_isr
00002d74  w    F .text	00000004 usb_serial_class::clear()
0000350c g     F .text	000000d8 uart2_status_isr
00003158 g     F .text	0000002c _sbrk
1fff1c70 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c70 g     O .data	00000004 __brkval
1fff17f0 g     O .bss	00000001 usb_cdc_line_rtsdtr
000013ec g     F .text	00000048 usb_serial_flush_callback
00004490 g     F .text	00000000 _init
00003140  w    F .text	00000006 svcall_isr
00003140  w    F .text	00000006 dma_ch15_isr
00003140  w    F .text	00000006 uart1_error_isr
00003e08 g     F .text	00000028 __libc_fini_array
00003140  w    F .text	00000006 usbhs_phy_isr
1fff1df0 g       .bss	00000000 _ebss
00003140 g     F .text	00000006 unused_isr
00003140  w    F .text	00000006 spi0_isr
00003140  w    F .text	00000006 dma_ch3_isr
00003140  w    F .text	00000006 flash_error_isr
1fff1630 g     O .bss	00000018 knob2
00002ddc g     F .text	00000020 serial5_available
00003140  w    F .text	00000006 uart5_error_isr
00003140  w    F .text	00000006 rtc_seconds_isr
00003140  w    F .text	00000006 pdb_isr
000030f8  w    F .text	00000048 usage_fault_isr
00003140  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00003140  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1cb0 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff0c40 g     O .data	00000018 leds
000037d0 g     F .text	00000010 systick_isr
00003140  w    F .text	00000006 rtc_alarm_isr
00003140  w    F .text	00000006 dma_ch2_isr
1fff0c60 g     O .data	00000010 Serial
00003140  w    F .text	00000006 ftm1_isr
00002d94  w    F .text	00000006 usb_serial_class::write(unsigned char)
00003148  w    F .text	0000000c startup_early_hook
00003140  w    F .text	00000006 dma_ch13_isr
00003140  w    F .text	00000006 uart2_error_isr
000011a8 g     F .text	00000030 usb_serial_peekchar
1fff0d54 g     O .data	00000016 usb_string_serial_number_default
000030f8 g     F .text	00000048 fault_isr
00003ecc g     F .text	000001d0 _free_r
1fff1844 g     O .bss	00000004 usb_midi_handleStop
00003140  w    F .text	00000006 usb_charge_isr
00002d84  w    F .text	00000004 usb_serial_class::flush()
00003140  w    F .text	00000006 cmt_isr
00003140  w    F .text	00000006 usbhs_isr
1fff1854 g     O .bss	00000004 usb_midi_handleControlChange
1fff15a8 g     O .data	00000004 __malloc_sbrk_base
00002d7c  w    F .text	00000004 usb_serial_class::read()
00003140  w    F .text	00000006 ftm3_isr
00003140  w    F .text	00000006 tsi0_isr
1fff1664 g     O .bss	00000014 led6
1fff1678 g     O .bss	00000018 knob1
00003140  w    F .text	00000006 spi2_isr
00002dc4  w    F .text	00000002 serialEvent4()
00002d9c  w    F .text	00000002 serialEvent()
1fff18cd g     O .bss	00000001 usb_reboot_timer
0000409c g     F .text	000000a4 __register_exitproc
000011f4 g     F .text	00000038 usb_serial_flush_input
00001334 g     F .text	00000018 usb_serial_putchar
1fff1c80 g     O .bss	00000028 __malloc_current_mallinfo
00003140  w    F .text	00000006 can0_bus_off_isr
1fff1608 g     O .bss	00000014 led5
1fff1941 g     O .bss	00000001 usb_rx_memory_needed
0000222c g     F .text	000009b0 usb_isr
1fff1850 g     O .bss	00000004 usb_midi_handleNoteOff
00004404  w    O .text	00000028 vtable for usb_serial_class
1fff164c g     O .bss	00000018 knob3
00003140  w    F .text	00000006 uart3_error_isr
1fff1c60 g     O .bss	00000004 MillisTimer::listActive
00003140  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00003140  w    F .text	00000006 low_voltage_isr
1fff16b8 g     O .bss	00000028 button2
1fff119c g     O .data	00000408 __malloc_av_
00003140  w    F .text	00000006 can0_error_isr
00001914 g     F .text	0000016c _init_Teensyduino_internal_
00001394 g     F .text	00000058 usb_serial_flush_output
00003140  w    F .text	00000006 dma_ch12_isr
00003dbc g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00003140  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00003140  w    F .text	00000006 pit3_isr
00003140  w    F .text	00000006 enet_rx_isr
00003140  w    F .text	00000006 portc_isr
00002dc8 g     F .text	00000010 main
1fff1c74 g     O .bss	00000004 __malloc_max_total_mem
1fff15e0 g     O .bss	00000014 led3
000030f8  w    F .text	00000048 memmanage_fault_isr
0000341c g     F .text	00000084 usb_init_serialnumber
1fff1648 g     O .bss	00000001 currentMode
000044a8 g       .text	00000000 __init_array_end
0000384c g     F .text	00000570 _malloc_r
00003140  w    F .text	00000006 debugmonitor_isr
1fff181c g     O .bss	00000004 usb_midi_handleSongPosition
000035ec g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff180c g     O .bss	00000004 usb_midi_handleContinue
1fff1cb9 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00003140  w    F .text	00000006 cmp1_isr
1fff16e0 g     O .bss	00000028 button3
00003140  w    F .text	00000006 ftm0_isr
00003e30 g     F .text	0000009c _malloc_trim_r
1fff0d50 g     O .data	00000004 string0
0000122c g     F .text	00000108 usb_serial_write
00003154  w    F .text	00000002 startup_late_hook
00002d80  w    F .text	00000004 usb_serial_class::available()
1fff1cba g     O .bss	00000001 usb_midi_msg_cable
1fff0d38  w    O .data	00000018 usb_string_product_name
00001870 g     F .text	000000a4 delay
00003140  w    F .text	00000006 tpm0_isr
000044a8 g     F .fini	00000000 _fini
00003140  w    F .text	00000006 i2s0_rx_isr
00003140  w    F .text	00000006 uart4_error_isr
00001ac8 g     F .text	0000009c usb_midi_write_packed
00003dfc g     F .text	0000000c atexit
00003140  w    F .text	00000006 can0_message_isr
1fff1198 g     O .data	00000004 _impure_ptr
00003140  w    F .text	00000006 can1_message_isr
00003140  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1834 g     O .bss	00000004 usb_midi_handleTuneRequest
0000449c g       .text	00000000 __preinit_array_end
00003140  w    F .text	00000006 sdhc_isr
1fff1cbb g     O .bss	00000001 usb_midi_msg_channel
00000490 g     F .text	00000002 setup
00004438 g     O .text	00000054 usb_descriptor_list
00002058 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff17a0 g     O .bss	00000018 knob4
00003140  w    F .text	00000006 dma_ch10_isr
1fff1708 g     O .bss	00000070 sequence1
1fff182c g     O .bss	00000004 usb_midi_handleStart
00003140  w    F .text	00000006 uart0_error_isr
00001fcc g     F .text	00000040 usb_malloc
00003140  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
0000134c g     F .text	00000048 usb_serial_write_buffer_free
00003140  w    F .text	00000006 enet_timer_isr
1fff1690 g     O .bss	00000028 button1
1fff15ac g       .data	00000000 _edata
00003140  w    F .text	00000006 i2s0_tx_isr
00003140  w    F .text	00000006 adc1_isr
00002d88  w    F .text	00000004 usb_serial_class::availableForWrite()
00003140  w    F .text	00000006 cmp0_isr
1fff17fc g     O .bss	00000004 usb_midi_handleClock
000034a0 g     F .text	0000004c ultoa
00003688 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15a4 g     O .data	00000004 __malloc_trim_threshold
00002d78  w    F .text	00000004 usb_serial_class::peek()
1fff17e0 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff1818 g     O .bss	00000004 usb_midi_handlePitchChange
00003140  w    F .text	00000006 pit_isr
1fff1830 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00003140  w    F .text	00000006 dac0_isr
0000449c g       .text	00000000 __init_array_start
00003140  w    F .text	00000006 can1_tx_warn_isr
00001658 g     F .text	000000fc analogRead
1fff1cbc g     O .bss	00000122 usb_midi_msg_sysex
0000320c g     F .text	0000010c uart0_status_isr
00003140  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d38 g     O .data	00000018 usb_string_product_name_default
00003140  w    F .text	00000006 dma_ch1_isr
00002094 g     F .text	0000002c usb_tx_packet_count
00003140  w    F .text	00000006 dma_ch5_isr
00003140  w    F .text	00000006 can0_rx_warn_isr
00003140  w    F .text	00000006 can0_tx_warn_isr
00002dfc g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00003184 g     F .text	00000034 kinetis_hsrun_disable
0000449c g       .text	00000000 __preinit_array_start
000035e8  w    F .text	00000002 serialEvent3()
1fff184c g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff15cc g     O .bss	00000014 led2
00003140  w    F .text	00000006 cmp2_isr
000036cc g     F .text	00000004 pendablesrvreq_isr
00003140  w    F .text	00000006 wakeup_isr
00003140  w    F .text	00000006 cmp3_isr
1fff1804 g     O .bss	00000004 usb_midi_handleActiveSensing
00003140  w    F .text	00000006 tpm2_isr
00003140  w    F .text	00000006 dma_ch0_isr
1fff0d54  w    O .data	00000016 usb_string_serial_number
00003140  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... ....A1...0..
      10:	.0...0...0...0..
      20:	.0...0...0..A1..
      30:	A1...0...6...7..
      40:	A1..A1..A1..A1..
      50:	A1..A1..A1..A1..
      60:	A1..A1..A1..A1..
      70:	A1..A1..A1..A1..
      80:	A1..A1..A1..A1..
      90:	A1..A1..A1..A1..
      a0:	A1..A1..A1..A1..
      b0:	A1..A1..A1...2..
      c0:	A1......A1...5..
      d0:	A1..!0..A1..A1..
      e0:	A1..A1..A1..A1..
      f0:	A1..A1..A1..A1..
     100:	A1..A1..A1..A1..
     110:	A1..-"..A1..A1..
     120:	A1..A1..A1..A1..
     130:	A1..A1..A1..A1..
     140:	A1..A1...-..A1..
     150:	A1..A1..A1..A1..
     160:	A1..A1..A1..A1..
     170:	A1..A1..A1..A1..
     180:	A1..A1..A1..A1..
     190:	A1..A1..93..A1..
     1a0:	A1..A1..A1..A1..
     1b0:	A1..A1..A1..A1..
     1c0:	A1..A1..A1..A1..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	3148 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	1914 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	1818 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	1818 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	37ec <__libc_init_array>

	startup_late_hook();
     33a:	bl	3154 <startup_late_hook>
	main();
     33e:	bl	2dc8 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15ac
     374:	.word	0x000044a8
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15b0
     380:	.word	0x1fff1df0
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15b0
     42c:	.word	0x00000000
     430:	.word	0x000044ac

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15b4
     460:	.word	0x000044ac
     464:	.word	0x1fff15ac
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    unsigned long lastBlink;
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #25
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    unsigned long lastBlink;
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	1864 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	183c <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob1(A0, sequence1, FIRST, 0);
Knob knob2(A1, sequence1, SECOND, 1);
Knob knob3(A2, sequence1, THIRD, 2);
Knob knob4(A3, sequence1, FOURTH, 3);

void setup() {
     490:	bx	lr
     492:	nop

00000494 <loop>:
  Serial.begin(9600);
}

void loop() {
     494:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     498:	movs	r0, #0
     49a:	sub	sp, #72	; 0x48
     49c:	bl	1b90 <usb_midi_read>
  if (usbMIDI.read()) {
     4a0:	cmp	r0, #0
     4a2:	bne.w	836 <loop+0x3a2>
     4a6:	ldr	r4, [pc, #652]	; (734 <loop+0x2a0>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4a8:	ldr	r5, [pc, #652]	; (738 <loop+0x2a4>)
     4aa:	ldrb.w	r0, [r5, #32]
     4ae:	bl	1848 <digitalRead>
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b2:	ldr	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b4:	str	r0, [r5, #12]
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b6:	cmp	r0, r2

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b8:	mov	r3, r0
     4ba:	mov	r1, r0
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4bc:	beq.w	862 <loop+0x3ce>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c0:	ldr	r2, [r4, #0]
     4c2:	str	r2, [sp, #68]	; 0x44
	return ret;
     4c4:	ldr	r2, [sp, #68]	; 0x44
        m_lastDebounceTime = millis();
     4c6:	str	r2, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c8:	ldr	r0, [r4, #0]
     4ca:	str	r0, [sp, #64]	; 0x40
	return ret;
     4cc:	ldr	r0, [sp, #64]	; 0x40
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4ce:	cmp	r2, r0
     4d0:	beq.n	4e4 <loop+0x50>
        if (reading != m_state) {
     4d2:	ldr	r2, [r5, #4]
     4d4:	ldr	r6, [pc, #608]	; (738 <loop+0x2a4>)
     4d6:	cmp	r3, r2
     4d8:	beq.w	87e <loop+0x3ea>
          m_state = reading;
     4dc:	str	r3, [r6, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     4de:	cmp	r3, #0
     4e0:	beq.w	886 <loop+0x3f2>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e4:	ldr	r6, [pc, #596]	; (73c <loop+0x2a8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     4e6:	str	r1, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e8:	ldrb.w	r0, [r6, #32]
     4ec:	bl	1848 <digitalRead>
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f0:	ldr	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f2:	str	r0, [r6, #12]
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f4:	cmp	r0, r2

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f6:	mov	r3, r0
     4f8:	mov	r1, r0
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4fa:	beq.w	85e <loop+0x3ca>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4fe:	ldr	r2, [r4, #0]
     500:	str	r2, [sp, #60]	; 0x3c
	return ret;
     502:	ldr	r2, [sp, #60]	; 0x3c
        m_lastDebounceTime = millis();
     504:	str	r2, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     506:	ldr	r0, [r4, #0]
     508:	str	r0, [sp, #56]	; 0x38
	return ret;
     50a:	ldr	r0, [sp, #56]	; 0x38
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     50c:	cmp	r2, r0
     50e:	beq.n	522 <loop+0x8e>
        if (reading != m_state) {
     510:	ldr	r2, [r6, #4]
     512:	ldr	r5, [pc, #552]	; (73c <loop+0x2a8>)
     514:	cmp	r3, r2
     516:	beq.w	876 <loop+0x3e2>
          m_state = reading;
     51a:	str	r3, [r5, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     51c:	cmp	r3, #0
     51e:	beq.w	8b6 <loop+0x422>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     522:	ldr	r5, [pc, #540]	; (740 <loop+0x2ac>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     524:	str	r1, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     526:	ldrb.w	r0, [r5, #32]
     52a:	bl	1848 <digitalRead>
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     52e:	ldr	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     530:	str	r0, [r5, #12]
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     532:	cmp	r0, r2

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     534:	mov	r3, r0
     536:	mov	r1, r0
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     538:	beq.w	866 <loop+0x3d2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     53c:	ldr	r2, [r4, #0]
     53e:	str	r2, [sp, #52]	; 0x34
	return ret;
     540:	ldr	r2, [sp, #52]	; 0x34
        m_lastDebounceTime = millis();
     542:	str	r2, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     544:	ldr	r0, [r4, #0]
     546:	str	r0, [sp, #48]	; 0x30
	return ret;
     548:	ldr	r0, [sp, #48]	; 0x30
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     54a:	cmp	r0, r2
     54c:	beq.n	560 <loop+0xcc>
        if (reading != m_state) {
     54e:	ldr	r2, [r5, #4]
     550:	ldr	r6, [pc, #492]	; (740 <loop+0x2ac>)
     552:	cmp	r3, r2
     554:	beq.w	882 <loop+0x3ee>
          m_state = reading;
     558:	str	r3, [r6, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     55a:	cmp	r3, #0
     55c:	beq.w	8e6 <loop+0x452>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     560:	ldr	r6, [pc, #480]	; (744 <loop+0x2b0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     562:	str	r1, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     564:	ldrb.w	r0, [r6, #32]
     568:	bl	1848 <digitalRead>
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     56c:	ldr	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     56e:	str	r0, [r6, #12]
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     570:	cmp	r0, r2

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     572:	mov	r3, r0
     574:	mov	r1, r0
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     576:	beq.w	86e <loop+0x3da>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     57a:	ldr	r2, [r4, #0]
     57c:	str	r2, [sp, #44]	; 0x2c
	return ret;
     57e:	ldr	r2, [sp, #44]	; 0x2c
        m_lastDebounceTime = millis();
     580:	str	r2, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     582:	ldr	r0, [r4, #0]
     584:	str	r0, [sp, #40]	; 0x28
	return ret;
     586:	ldr	r0, [sp, #40]	; 0x28
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     588:	cmp	r0, r2
     58a:	beq.n	59e <loop+0x10a>
        if (reading != m_state) {
     58c:	ldr	r2, [r6, #4]
     58e:	ldr	r5, [pc, #436]	; (744 <loop+0x2b0>)
     590:	cmp	r3, r2
     592:	beq.w	872 <loop+0x3de>
          m_state = reading;
     596:	str	r3, [r5, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     598:	cmp	r3, #0
     59a:	beq.w	916 <loop+0x482>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     59e:	ldr	r5, [pc, #424]	; (748 <loop+0x2b4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5a0:	str	r1, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5a2:	ldrb.w	r0, [r5, #32]
     5a6:	bl	1848 <digitalRead>
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5aa:	ldr	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ac:	str	r0, [r5, #12]
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5ae:	cmp	r0, r2

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5b0:	mov	r3, r0
     5b2:	mov	r1, r0
        Serial.println("GLOBAL");
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5b4:	beq.w	86a <loop+0x3d6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5b8:	ldr	r2, [r4, #0]
     5ba:	str	r2, [sp, #36]	; 0x24
	return ret;
     5bc:	ldr	r2, [sp, #36]	; 0x24
        m_lastDebounceTime = millis();
     5be:	str	r2, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5c0:	ldr	r0, [r4, #0]
     5c2:	str	r0, [sp, #32]
	return ret;
     5c4:	ldr	r0, [sp, #32]
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5c6:	cmp	r0, r2
     5c8:	beq.n	606 <loop+0x172>
        if (reading != m_state) {
     5ca:	ldr	r2, [r5, #4]
     5cc:	ldr	r6, [pc, #376]	; (748 <loop+0x2b4>)
     5ce:	cmp	r3, r2
     5d0:	beq.w	87a <loop+0x3e6>
          m_state = reading;
     5d4:	str	r3, [r6, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5d6:	cbnz	r3, 606 <loop+0x172>
     5d8:	ldrb	r2, [r6, #16]
     5da:	cmp	r2, #0
     5dc:	bne.w	cbc <loop+0x828>
        toggleGlobalMode();
      } else if (m_state == LOW) {
        m_led.toggle();
     5e0:	ldr	r3, [r6, #24]
     5e2:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     5e6:	clz	r1, r1
     5ea:	lsrs	r1, r1, #5
     5ec:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     5ee:	uxtb	r0, r0
     5f0:	bl	183c <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     5f4:	ldr	r3, [r6, #0]
     5f6:	ldr	r2, [r6, #28]
     5f8:	ldr	r1, [r6, #12]
     5fa:	subs	r3, #1
    void toggle () {
      m_state = !m_state;
    };

    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
     5fc:	add	r3, r2
     5fe:	ldrb	r2, [r3, #24]
     600:	eor.w	r2, r2, #1
     604:	strb	r2, [r3, #24]
    };

    void check () {
      if (blinking) {
     606:	ldr	r6, [pc, #324]	; (74c <loop+0x2b8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     608:	str	r1, [r5, #8]
     60a:	ldrb	r3, [r6, #16]
     60c:	cbz	r3, 620 <loop+0x18c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     60e:	ldr	r3, [r4, #0]
     610:	str	r3, [sp, #28]
	return ret;
     612:	ldr	r3, [sp, #28]
        if (millis() - lastBlink > blinkLength) {
     614:	ldr	r1, [r6, #8]
     616:	ldr	r2, [r6, #12]
     618:	subs	r3, r3, r1
     61a:	cmp	r3, r2
     61c:	bhi.w	81c <loop+0x388>

      digitalWrite(m_pin, m_state); 
    };

    void check () {
      if (blinking) {
     620:	ldr	r5, [pc, #300]	; (750 <loop+0x2bc>)
     622:	ldrb	r3, [r5, #16]
     624:	cbz	r3, 638 <loop+0x1a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     626:	ldr	r3, [r4, #0]
     628:	str	r3, [sp, #24]
	return ret;
     62a:	ldr	r3, [sp, #24]
        if (millis() - lastBlink > blinkLength) {
     62c:	ldr	r1, [r5, #8]
     62e:	ldr	r2, [r5, #12]
     630:	subs	r3, r3, r1
     632:	cmp	r3, r2
     634:	bhi.w	802 <loop+0x36e>

      digitalWrite(m_pin, m_state); 
    };

    void check () {
      if (blinking) {
     638:	ldr	r5, [pc, #280]	; (754 <loop+0x2c0>)
     63a:	ldrb	r3, [r5, #16]
     63c:	cbz	r3, 650 <loop+0x1bc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     63e:	ldr	r3, [r4, #0]
     640:	str	r3, [sp, #20]
	return ret;
     642:	ldr	r3, [sp, #20]
        if (millis() - lastBlink > blinkLength) {
     644:	ldr	r1, [r5, #8]
     646:	ldr	r2, [r5, #12]
     648:	subs	r3, r3, r1
     64a:	cmp	r3, r2
     64c:	bhi.w	7e8 <loop+0x354>

      digitalWrite(m_pin, m_state); 
    };

    void check () {
      if (blinking) {
     650:	ldr	r5, [pc, #260]	; (758 <loop+0x2c4>)
     652:	ldrb	r3, [r5, #16]
     654:	cbz	r3, 668 <loop+0x1d4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     656:	ldr	r3, [r4, #0]
     658:	str	r3, [sp, #16]
	return ret;
     65a:	ldr	r3, [sp, #16]
        if (millis() - lastBlink > blinkLength) {
     65c:	ldr	r1, [r5, #8]
     65e:	ldr	r2, [r5, #12]
     660:	subs	r3, r3, r1
     662:	cmp	r3, r2
     664:	bhi.w	7ce <loop+0x33a>

      digitalWrite(m_pin, m_state); 
    };

    void check () {
      if (blinking) {
     668:	ldr	r5, [pc, #240]	; (75c <loop+0x2c8>)
     66a:	ldrb	r3, [r5, #16]
     66c:	cbz	r3, 680 <loop+0x1ec>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     66e:	ldr	r3, [r4, #0]
     670:	str	r3, [sp, #12]
	return ret;
     672:	ldr	r3, [sp, #12]
        if (millis() - lastBlink > blinkLength) {
     674:	ldr	r1, [r5, #8]
     676:	ldr	r2, [r5, #12]
     678:	subs	r3, r3, r1
     67a:	cmp	r3, r2
     67c:	bhi.w	7b4 <loop+0x320>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     680:	ldr	r4, [pc, #220]	; (760 <loop+0x2cc>)
     682:	ldrb	r0, [r4, #0]
     684:	bl	1658 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     688:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     68a:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     68c:	cmp	r0, r3
     68e:	beq.n	69c <loop+0x208>
     690:	subs	r3, r0, r3
     692:	cmp	r3, #0
     694:	it	lt
     696:	neglt	r3, r3
     698:	cmp	r3, #10
     69a:	bgt.n	794 <loop+0x300>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     69c:	ldr	r4, [pc, #196]	; (764 <loop+0x2d0>)
     69e:	ldrb	r0, [r4, #0]
     6a0:	bl	1658 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     6a4:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6a6:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6a8:	cmp	r0, r3
     6aa:	beq.n	6b8 <loop+0x224>
     6ac:	subs	r3, r0, r3
     6ae:	cmp	r3, #0
     6b0:	it	lt
     6b2:	neglt	r3, r3
     6b4:	cmp	r3, #10
     6b6:	bgt.n	774 <loop+0x2e0>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6b8:	ldr	r4, [pc, #172]	; (768 <loop+0x2d4>)
     6ba:	ldrb	r0, [r4, #0]
     6bc:	bl	1658 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     6c0:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6c2:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6c4:	cmp	r0, r3
     6c6:	beq.n	6d4 <loop+0x240>
     6c8:	subs	r3, r0, r3
     6ca:	cmp	r3, #0
     6cc:	it	lt
     6ce:	neglt	r3, r3
     6d0:	cmp	r3, #10
     6d2:	bgt.n	714 <loop+0x280>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6d4:	ldr	r4, [pc, #148]	; (76c <loop+0x2d8>)
     6d6:	ldrb	r0, [r4, #0]
     6d8:	bl	1658 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     6dc:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6de:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6e0:	cmp	r0, r3
     6e2:	beq.n	70e <loop+0x27a>
     6e4:	subs	r3, r0, r3
     6e6:	cmp	r3, #0
     6e8:	it	lt
     6ea:	neglt	r3, r3
     6ec:	cmp	r3, #10
     6ee:	ble.n	70e <loop+0x27a>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     6f0:	ldr	r3, [pc, #124]	; (770 <loop+0x2dc>)
     6f2:	ldrb	r3, [r3, #0]
     6f4:	cmp	r3, #0
     6f6:	beq.w	98a <loop+0x4f6>
        } else if (m_knobType == THIRD) {
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
     6fa:	cmp	r3, #2
     6fc:	beq.w	d24 <loop+0x890>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     700:	cmp	r3, #1
     702:	beq.w	d8c <loop+0x8f8>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     706:	cmp	r3, #3
     708:	beq.w	b66 <loop+0x6d2>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     70c:	str	r0, [r4, #8]
  led5.check();
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
}
     70e:	add	sp, #72	; 0x48
     710:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     714:	ldr	r3, [pc, #88]	; (770 <loop+0x2dc>)
     716:	ldrb	r3, [r3, #0]
     718:	cmp	r3, #0
     71a:	beq.w	9aa <loop+0x516>
        } else if (m_knobType == THIRD) {
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
     71e:	cmp	r3, #2
     720:	beq.w	cec <loop+0x858>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     724:	cmp	r3, #1
     726:	beq.w	dc4 <loop+0x930>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     72a:	cmp	r3, #3
     72c:	beq.w	bca <loop+0x736>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     730:	str	r0, [r4, #8]
     732:	b.n	6d4 <loop+0x240>
     734:	.word	0x1fff17f8
     738:	.word	0x1fff1690
     73c:	.word	0x1fff16b8
     740:	.word	0x1fff16e0
     744:	.word	0x1fff17b8
     748:	.word	0x1fff1778
     74c:	.word	0x1fff161c
     750:	.word	0x1fff15cc
     754:	.word	0x1fff15e0
     758:	.word	0x1fff15f4
     75c:	.word	0x1fff1608
     760:	.word	0x1fff1678
     764:	.word	0x1fff1630
     768:	.word	0x1fff164c
     76c:	.word	0x1fff17a0
     770:	.word	0x1fff1648
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     774:	ldr	r3, [pc, #724]	; (a4c <loop+0x5b8>)
     776:	ldrb	r3, [r3, #0]
     778:	cmp	r3, #0
     77a:	beq.w	968 <loop+0x4d4>
        } else if (m_knobType == THIRD) {
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
     77e:	cmp	r3, #2
     780:	beq.w	d08 <loop+0x874>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     784:	cmp	r3, #1
     786:	beq.w	d5c <loop+0x8c8>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     78a:	cmp	r3, #3
     78c:	beq.w	b34 <loop+0x6a0>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     790:	str	r0, [r4, #8]
     792:	b.n	6b8 <loop+0x224>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     794:	ldr	r3, [pc, #692]	; (a4c <loop+0x5b8>)
     796:	ldrb	r3, [r3, #0]
     798:	cmp	r3, #0
     79a:	beq.w	946 <loop+0x4b2>
        } else if (m_knobType == THIRD) {
        } else if (m_knobType == FOURTH) {  
          // delay
          // transpose
        }
      } else if (currentMode == VELOCITY) {
     79e:	cmp	r3, #2
     7a0:	beq.w	d40 <loop+0x8ac>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     7a4:	cmp	r3, #1
     7a6:	beq.w	da8 <loop+0x914>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     7aa:	cmp	r3, #3
     7ac:	beq.w	b98 <loop+0x704>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     7b0:	str	r0, [r4, #8]
     7b2:	b.n	69c <loop+0x208>
          digitalWrite(m_pin, !digitalRead(m_pin));
     7b4:	ldrb	r4, [r5, #0]
     7b6:	mov	r0, r4
     7b8:	bl	1848 <digitalRead>
     7bc:	clz	r1, r0
     7c0:	lsrs	r1, r1, #5
     7c2:	mov	r0, r4
     7c4:	bl	183c <digitalWrite>
          blinking = false;
     7c8:	movs	r3, #0
     7ca:	strb	r3, [r5, #16]
     7cc:	b.n	680 <loop+0x1ec>
    };

    void check () {
      if (blinking) {
        if (millis() - lastBlink > blinkLength) {
          digitalWrite(m_pin, !digitalRead(m_pin));
     7ce:	ldrb	r6, [r5, #0]
     7d0:	mov	r0, r6
     7d2:	bl	1848 <digitalRead>
     7d6:	clz	r1, r0
     7da:	lsrs	r1, r1, #5
     7dc:	mov	r0, r6
     7de:	bl	183c <digitalWrite>
          blinking = false;
     7e2:	movs	r3, #0
     7e4:	strb	r3, [r5, #16]
     7e6:	b.n	668 <loop+0x1d4>
    };

    void check () {
      if (blinking) {
        if (millis() - lastBlink > blinkLength) {
          digitalWrite(m_pin, !digitalRead(m_pin));
     7e8:	ldrb	r6, [r5, #0]
     7ea:	mov	r0, r6
     7ec:	bl	1848 <digitalRead>
     7f0:	clz	r1, r0
     7f4:	lsrs	r1, r1, #5
     7f6:	mov	r0, r6
     7f8:	bl	183c <digitalWrite>
          blinking = false;
     7fc:	movs	r3, #0
     7fe:	strb	r3, [r5, #16]
     800:	b.n	650 <loop+0x1bc>
    };

    void check () {
      if (blinking) {
        if (millis() - lastBlink > blinkLength) {
          digitalWrite(m_pin, !digitalRead(m_pin));
     802:	ldrb	r6, [r5, #0]
     804:	mov	r0, r6
     806:	bl	1848 <digitalRead>
     80a:	clz	r1, r0
     80e:	lsrs	r1, r1, #5
     810:	mov	r0, r6
     812:	bl	183c <digitalWrite>
          blinking = false;
     816:	movs	r3, #0
     818:	strb	r3, [r5, #16]
     81a:	b.n	638 <loop+0x1a4>
    };

    void check () {
      if (blinking) {
        if (millis() - lastBlink > blinkLength) {
          digitalWrite(m_pin, !digitalRead(m_pin));
     81c:	ldrb	r5, [r6, #0]
     81e:	mov	r0, r5
     820:	bl	1848 <digitalRead>
     824:	clz	r1, r0
     828:	lsrs	r1, r1, #5
     82a:	mov	r0, r5
     82c:	bl	183c <digitalWrite>
          blinking = false;
     830:	movs	r3, #0
     832:	strb	r3, [r6, #16]
     834:	b.n	620 <loop+0x18c>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     836:	ldr	r3, [pc, #536]	; (a50 <loop+0x5bc>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     838:	ldrb	r3, [r3, #0]
     83a:	cmp	r3, #250	; 0xfa
     83c:	beq.w	9ec <loop+0x558>
     840:	cmp	r3, #252	; 0xfc
     842:	beq.w	9ca <loop+0x536>
     846:	cmp	r3, #248	; 0xf8
     848:	beq.w	a64 <loop+0x5d0>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     84c:	movs	r1, #35	; 0x23
     84e:	ldr	r0, [pc, #516]	; (a54 <loop+0x5c0>)
     850:	ldr	r4, [pc, #516]	; (a58 <loop+0x5c4>)
     852:	bl	122c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     856:	ldr	r0, [pc, #516]	; (a5c <loop+0x5c8>)
     858:	bl	2da0 <Print::println()>
     85c:	b.n	4a8 <loop+0x14>
     85e:	ldr	r2, [r6, #20]
     860:	b.n	506 <loop+0x72>
     862:	ldr	r2, [r5, #20]
     864:	b.n	4c8 <loop+0x34>
     866:	ldr	r2, [r5, #20]
     868:	b.n	544 <loop+0xb0>
     86a:	ldr	r2, [r5, #20]
     86c:	b.n	5c0 <loop+0x12c>
     86e:	ldr	r2, [r6, #20]
     870:	b.n	582 <loop+0xee>
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     872:	mov	r1, r3
     874:	b.n	59e <loop+0x10a>
     876:	mov	r1, r3
     878:	b.n	522 <loop+0x8e>
     87a:	mov	r1, r3
     87c:	b.n	606 <loop+0x172>
     87e:	mov	r1, r3
     880:	b.n	4e4 <loop+0x50>
     882:	mov	r1, r3
     884:	b.n	560 <loop+0xcc>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     886:	ldrb	r2, [r6, #16]
     888:	cmp	r2, #0
     88a:	bne.w	c5c <loop+0x7c8>
        toggleGlobalMode();
      } else if (m_state == LOW) {
        m_led.toggle();
     88e:	ldr	r3, [r6, #24]
     890:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     894:	clz	r1, r1
     898:	lsrs	r1, r1, #5
     89a:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     89c:	uxtb	r0, r0
     89e:	bl	183c <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     8a2:	ldr	r3, [r6, #0]
     8a4:	ldr	r2, [r6, #28]
     8a6:	ldr	r1, [r6, #12]
     8a8:	subs	r3, #1
    void toggle () {
      m_state = !m_state;
    };

    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
     8aa:	add	r3, r2
     8ac:	ldrb	r2, [r3, #24]
     8ae:	eor.w	r2, r2, #1
     8b2:	strb	r2, [r3, #24]
     8b4:	b.n	4e4 <loop+0x50>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     8b6:	ldrb	r2, [r5, #16]
     8b8:	cmp	r2, #0
     8ba:	bne.w	c8c <loop+0x7f8>
        toggleGlobalMode();
      } else if (m_state == LOW) {
        m_led.toggle();
     8be:	ldr	r3, [r5, #24]
     8c0:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     8c4:	clz	r1, r1
     8c8:	lsrs	r1, r1, #5
     8ca:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     8cc:	uxtb	r0, r0
     8ce:	bl	183c <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     8d2:	ldr	r3, [r5, #0]
     8d4:	ldr	r2, [r5, #28]
     8d6:	ldr	r1, [r5, #12]
     8d8:	subs	r3, #1
     8da:	add	r3, r2
     8dc:	ldrb	r2, [r3, #24]
     8de:	eor.w	r2, r2, #1
     8e2:	strb	r2, [r3, #24]
     8e4:	b.n	522 <loop+0x8e>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     8e6:	ldrb	r2, [r6, #16]
     8e8:	cmp	r2, #0
     8ea:	bne.w	bfc <loop+0x768>
        toggleGlobalMode();
      } else if (m_state == LOW) {
        m_led.toggle();
     8ee:	ldr	r3, [r6, #24]
     8f0:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     8f4:	clz	r1, r1
     8f8:	lsrs	r1, r1, #5
     8fa:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     8fc:	uxtb	r0, r0
     8fe:	bl	183c <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     902:	ldr	r3, [r6, #0]
     904:	ldr	r2, [r6, #28]
     906:	ldr	r1, [r6, #12]
     908:	subs	r3, #1
     90a:	add	r3, r2
     90c:	ldrb	r2, [r3, #24]
     90e:	eor.w	r2, r2, #1
     912:	strb	r2, [r3, #24]
     914:	b.n	560 <loop+0xcc>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     916:	ldrb	r2, [r5, #16]
     918:	cmp	r2, #0
     91a:	bne.w	c2c <loop+0x798>
        toggleGlobalMode();
      } else if (m_state == LOW) {
        m_led.toggle();
     91e:	ldr	r3, [r5, #24]
     920:	ldmia.w	r3, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     924:	clz	r1, r1
     928:	lsrs	r1, r1, #5
     92a:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     92c:	uxtb	r0, r0
     92e:	bl	183c <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     932:	ldr	r3, [r5, #0]
     934:	ldr	r2, [r5, #28]
     936:	ldr	r1, [r5, #12]
     938:	subs	r3, #1
     93a:	add	r3, r2
     93c:	ldrb	r2, [r3, #24]
     93e:	eor.w	r2, r2, #1
     942:	strb	r2, [r3, #24]
     944:	b.n	59e <loop+0x10a>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     946:	ldrb	r3, [r4, #20]
     948:	cmp	r3, #0
     94a:	bne.w	7b0 <loop+0x31c>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     94e:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     952:	ldr	r2, [r4, #16]
     954:	bge.w	ac8 <loop+0x634>
        max_ppqn = 6;

        if (ppqn >= 6) {
     958:	ldr	r1, [r2, #52]	; 0x34
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     95a:	movs	r5, #6

        if (ppqn >= 6) {
     95c:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     95e:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 6) {
     960:	ble.w	7b0 <loop+0x31c>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     964:	str	r3, [r2, #52]	; 0x34
     966:	b.n	7b0 <loop+0x31c>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     968:	ldrb	r3, [r4, #20]
     96a:	cmp	r3, #0
     96c:	bne.w	790 <loop+0x2fc>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     970:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     974:	ldr	r2, [r4, #16]
     976:	bge.w	ae2 <loop+0x64e>
        max_ppqn = 6;

        if (ppqn >= 6) {
     97a:	ldr	r1, [r2, #52]	; 0x34
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     97c:	movs	r5, #6

        if (ppqn >= 6) {
     97e:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     980:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 6) {
     982:	ble.w	790 <loop+0x2fc>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     986:	str	r3, [r2, #52]	; 0x34
     988:	b.n	790 <loop+0x2fc>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     98a:	ldrb	r3, [r4, #20]
     98c:	cmp	r3, #0
     98e:	bne.w	70c <loop+0x278>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     992:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     996:	ldr	r2, [r4, #16]
     998:	bge.n	a94 <loop+0x600>
        max_ppqn = 6;

        if (ppqn >= 6) {
     99a:	ldr	r1, [r2, #52]	; 0x34
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     99c:	movs	r5, #6

        if (ppqn >= 6) {
     99e:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     9a0:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 6) {
     9a2:	ble.w	70c <loop+0x278>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     9a6:	str	r3, [r2, #52]	; 0x34
     9a8:	b.n	70c <loop+0x278>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     9aa:	ldrb	r3, [r4, #20]
     9ac:	cmp	r3, #0
     9ae:	bne.w	730 <loop+0x29c>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     9b2:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     9b6:	ldr	r2, [r4, #16]
     9b8:	bge.n	aae <loop+0x61a>
        max_ppqn = 6;

        if (ppqn >= 6) {
     9ba:	ldr	r1, [r2, #52]	; 0x34
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     9bc:	movs	r5, #6

        if (ppqn >= 6) {
     9be:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     9c0:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 6) {
     9c2:	ble.w	730 <loop+0x29c>
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
     9c6:	str	r3, [r2, #52]	; 0x34
     9c8:	b.n	730 <loop+0x29c>
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     9ca:	ldr	r3, [pc, #148]	; (a60 <loop+0x5cc>)
     9cc:	ldr	r4, [pc, #136]	; (a58 <loop+0x5c4>)
      ppqn = 0;
      m_currentStep = 0;
      m_leds[5]->toggle();
     9ce:	ldr	r2, [r3, #20]
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     9d0:	movs	r5, #0
      ppqn = 0;
     9d2:	str	r5, [r3, #52]	; 0x34
      m_currentStep = 0;
     9d4:	str	r5, [r3, #32]
     9d6:	ldmia.w	r2, {r0, r1}
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     9da:	clz	r1, r1
     9de:	lsrs	r1, r1, #5
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     9e0:	strb	r5, [r3, #28]

      digitalWrite(m_pin, m_state); 
     9e2:	uxtb	r0, r0
      blinking = true;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     9e4:	str	r1, [r2, #4]

      digitalWrite(m_pin, m_state); 
     9e6:	bl	183c <digitalWrite>
     9ea:	b.n	4a8 <loop+0x14>
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     9ec:	ldr	r5, [pc, #112]	; (a60 <loop+0x5cc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9ee:	ldr	r4, [pc, #104]	; (a58 <loop+0x5c4>)
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     9f0:	ldr	r3, [r5, #32]
     9f2:	ldr.w	r6, [r5, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink () {
      digitalWrite(m_pin, !digitalRead(m_pin));
     9f6:	ldrb.w	r8, [r6]
      }
    };

    void startPPQN () {
      m_state = true;
      ppqn = 0;
     9fa:	movs	r3, #0
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     9fc:	movs	r7, #1
     9fe:	mov	r0, r8
      ppqn = 0;
     a00:	str	r3, [r5, #52]	; 0x34
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     a02:	strb	r7, [r5, #28]
     a04:	bl	1848 <digitalRead>
     a08:	clz	r1, r0
     a0c:	lsrs	r1, r1, #5
     a0e:	mov	r0, r8
     a10:	bl	183c <digitalWrite>

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();

        if (m_steps[m_currentStep].m_state) {
     a14:	ldr	r3, [r5, #32]
     a16:	ldr	r2, [r4, #0]
     a18:	str	r2, [sp, #8]
     a1a:	adds	r2, r5, r3
	return ret;
     a1c:	ldr	r1, [sp, #8]
     a1e:	ldrb	r2, [r2, #24]
      blinking = true;
     a20:	strb	r7, [r6, #16]
      lastBlink = millis();  
     a22:	str	r1, [r6, #8]
     a24:	cmp	r2, #0
     a26:	bne.w	de0 <loop+0x94c>
          playStep(m_currentStep);
        }

        m_currentStep++;
     a2a:	adds	r3, #1

        if (m_currentStep > 3) {
     a2c:	cmp	r3, #3
          m_currentStep = 0;
     a2e:	it	gt
     a30:	movgt	r3, #0
     a32:	str	r3, [r5, #32]

    void startPPQN () {
      m_state = true;
      ppqn = 0;
      doStep();
      m_leds[5]->toggle();
     a34:	ldr	r3, [r5, #20]
     a36:	ldmia.w	r3, {r0, r1}
    };

    void toggle () {
      m_state = !m_state;
     a3a:	clz	r1, r1
     a3e:	lsrs	r1, r1, #5
     a40:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     a42:	uxtb	r0, r0
     a44:	bl	183c <digitalWrite>
     a48:	b.n	4a8 <loop+0x14>
     a4a:	nop
     a4c:	.word	0x1fff1648
     a50:	.word	0x1fff1cb4
     a54:	.word	0x00004170
     a58:	.word	0x1fff17f8
     a5c:	.word	0x1fff0c60
     a60:	.word	0x1fff1708
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     a64:	ldr	r5, [pc, #784]	; (d78 <loop+0x8e4>)

      if (ppqn >= notesLengths[m_currentStep]) {
     a66:	ldr	r2, [r5, #32]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     a68:	ldr	r3, [r5, #52]	; 0x34

      if (ppqn >= notesLengths[m_currentStep]) {
     a6a:	adds	r2, #24
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     a6c:	adds	r3, #1

      if (ppqn >= notesLengths[m_currentStep]) {
     a6e:	ldr.w	r2, [r5, r2, lsl #2]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     a72:	str	r3, [r5, #52]	; 0x34

      if (ppqn >= notesLengths[m_currentStep]) {
     a74:	cmp	r3, r2
     a76:	bge.w	e16 <loop+0x982>
        // of the active note to see if i do the stop step
        stopStep();
      }


      if (ppqn == max_ppqn) {
     a7a:	ldr	r2, [r5, #56]	; 0x38
     a7c:	ldr	r6, [pc, #760]	; (d78 <loop+0x8e4>)
     a7e:	cmp	r2, r3
     a80:	bne.w	4a6 <loop+0x12>
      noteOn(0, notes[step], notesVelocities[step]);
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
     a84:	ldrb	r3, [r6, #28]
     a86:	cmp	r3, #0
     a88:	bne.w	e78 <loop+0x9e4>
     a8c:	ldr	r4, [pc, #748]	; (d7c <loop+0x8e8>)
      }


      if (ppqn == max_ppqn) {
        doStep(); 
        ppqn = 0;
     a8e:	movs	r3, #0
     a90:	str	r3, [r5, #52]	; 0x34
     a92:	b.n	4a8 <loop+0x14>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     a94:	sub.w	r1, r0, #400	; 0x190
     a98:	cmp.w	r1, #400	; 0x190
     a9c:	bcc.n	b26 <loop+0x692>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     a9e:	sub.w	r3, r0, #800	; 0x320
     aa2:	cmp	r3, #223	; 0xdf
     aa4:	bhi.w	70c <loop+0x278>
        max_ppqn = 12;
     aa8:	movs	r3, #12
     aaa:	str	r3, [r2, #56]	; 0x38
     aac:	b.n	70c <loop+0x278>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     aae:	sub.w	r1, r0, #400	; 0x190
     ab2:	cmp.w	r1, #400	; 0x190
     ab6:	bcc.n	b18 <loop+0x684>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     ab8:	sub.w	r3, r0, #800	; 0x320
     abc:	cmp	r3, #223	; 0xdf
     abe:	bhi.w	730 <loop+0x29c>
        max_ppqn = 12;
     ac2:	movs	r3, #12
     ac4:	str	r3, [r2, #56]	; 0x38
     ac6:	b.n	730 <loop+0x29c>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     ac8:	sub.w	r1, r0, #400	; 0x190
     acc:	cmp.w	r1, #400	; 0x190
     ad0:	bcc.n	b0a <loop+0x676>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     ad2:	sub.w	r3, r0, #800	; 0x320
     ad6:	cmp	r3, #223	; 0xdf
     ad8:	bhi.w	7b0 <loop+0x31c>
        max_ppqn = 12;
     adc:	movs	r3, #12
     ade:	str	r3, [r2, #56]	; 0x38
     ae0:	b.n	7b0 <loop+0x31c>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     ae2:	sub.w	r1, r0, #400	; 0x190
     ae6:	cmp.w	r1, #400	; 0x190
     aea:	bcc.n	afc <loop+0x668>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
     aec:	sub.w	r3, r0, #800	; 0x320
     af0:	cmp	r3, #223	; 0xdf
     af2:	bhi.w	790 <loop+0x2fc>
        max_ppqn = 12;
     af6:	movs	r3, #12
     af8:	str	r3, [r2, #56]	; 0x38
     afa:	b.n	790 <loop+0x2fc>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
     afc:	ldr	r1, [r2, #52]	; 0x34

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     afe:	movs	r5, #8

        if (ppqn >= 8) {
     b00:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     b02:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 8) {
     b04:	ble.w	790 <loop+0x2fc>
     b08:	b.n	986 <loop+0x4f2>
     b0a:	ldr	r1, [r2, #52]	; 0x34

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     b0c:	movs	r5, #8

        if (ppqn >= 8) {
     b0e:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     b10:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 8) {
     b12:	ble.w	7b0 <loop+0x31c>
     b16:	b.n	964 <loop+0x4d0>
     b18:	ldr	r1, [r2, #52]	; 0x34

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     b1a:	movs	r5, #8

        if (ppqn >= 8) {
     b1c:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     b1e:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 8) {
     b20:	ble.w	730 <loop+0x29c>
     b24:	b.n	9c6 <loop+0x532>
     b26:	ldr	r1, [r2, #52]	; 0x34

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     b28:	movs	r5, #8

        if (ppqn >= 8) {
     b2a:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     b2c:	str	r5, [r2, #56]	; 0x38

        if (ppqn >= 8) {
     b2e:	ble.w	70c <loop+0x278>
     b32:	b.n	9a6 <loop+0x512>
      } else if (currentMode == VELOCITY) {
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
        m_sequence.controlLength(m_value, m_id);
     b34:	ldr	r5, [r4, #16]
     b36:	ldr	r1, [r4, #12]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     b38:	ldr	r2, [r5, #56]	; 0x38
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     b3a:	movw	r6, #1022	; 0x3fe
     b3e:	rsb	r3, r2, #1
     b42:	cmp	r3, r6
     b44:	bgt.w	e4c <loop+0x9b8>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     b48:	rsb	r3, r2, #2
     b4c:	mul.w	r3, r0, r3
     b50:	cmp	r3, #0
     b52:	it	lt
     b54:	addwlt	r3, r3, #1023	; 0x3ff
     b58:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     b5c:	add.w	r3, r1, #24
     b60:	str.w	r2, [r5, r3, lsl #2]
     b64:	b.n	790 <loop+0x2fc>
     b66:	ldr	r5, [r4, #16]
     b68:	ldr	r1, [r4, #12]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     b6a:	ldr	r2, [r5, #56]	; 0x38
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     b6c:	movw	r6, #1022	; 0x3fe
     b70:	rsb	r3, r2, #1
     b74:	cmp	r3, r6
     b76:	bgt.w	e20 <loop+0x98c>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     b7a:	rsb	r3, r2, #2
     b7e:	mul.w	r3, r0, r3
     b82:	cmp	r3, #0
     b84:	it	lt
     b86:	addwlt	r3, r3, #1023	; 0x3ff
     b8a:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     b8e:	add.w	r3, r1, #24
     b92:	str.w	r2, [r5, r3, lsl #2]
     b96:	b.n	70c <loop+0x278>
     b98:	ldr	r5, [r4, #16]
     b9a:	ldr	r1, [r4, #12]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     b9c:	ldr	r2, [r5, #56]	; 0x38
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     b9e:	movw	r6, #1022	; 0x3fe
     ba2:	rsb	r3, r2, #1
     ba6:	cmp	r3, r6
     ba8:	bgt.w	e36 <loop+0x9a2>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     bac:	rsb	r3, r2, #2
     bb0:	mul.w	r3, r0, r3
     bb4:	cmp	r3, #0
     bb6:	it	lt
     bb8:	addwlt	r3, r3, #1023	; 0x3ff
     bbc:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     bc0:	add.w	r3, r1, #24
     bc4:	str.w	r2, [r5, r3, lsl #2]
     bc8:	b.n	7b0 <loop+0x31c>
     bca:	ldr	r5, [r4, #16]
     bcc:	ldr	r1, [r4, #12]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     bce:	ldr	r2, [r5, #56]	; 0x38
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     bd0:	movw	r6, #1022	; 0x3fe
     bd4:	rsb	r3, r2, #1
     bd8:	cmp	r3, r6
     bda:	bgt.w	e62 <loop+0x9ce>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     bde:	rsb	r3, r2, #2
     be2:	mul.w	r3, r0, r3
     be6:	cmp	r3, #0
     be8:	it	lt
     bea:	addwlt	r3, r3, #1023	; 0x3ff
     bee:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     bf2:	add.w	r3, r1, #24
     bf6:	str.w	r2, [r5, r3, lsl #2]
     bfa:	b.n	730 <loop+0x29c>
      } 
    };

    void toggleGlobalMode() {
      if (currentMode == GLOBAL) {
     bfc:	ldr	r7, [pc, #384]	; (d80 <loop+0x8ec>)
     bfe:	ldrb	r2, [r7, #0]
     c00:	cmp	r2, #0
     c02:	beq.w	ece <loop+0xa3a>
        currentMode = PITCH;
        Serial.println("PITCH");
      } else if (currentMode == PITCH) {
     c06:	cmp	r2, #1
     c08:	beq.w	f34 <loop+0xaa0>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
     c0c:	cmp	r2, #2
     c0e:	beq.w	f5c <loop+0xac8>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
      } else if (currentMode == NOTELENGTH) {
     c12:	cmp	r2, #3
     c14:	bne.w	560 <loop+0xcc>
     c18:	ldr	r0, [pc, #360]	; (d84 <loop+0x8f0>)
     c1a:	movs	r1, #6
        currentMode = GLOBAL;
     c1c:	strb	r3, [r7, #0]
     c1e:	bl	122c <usb_serial_write>
     c22:	ldr	r0, [pc, #356]	; (d88 <loop+0x8f4>)
     c24:	bl	2da0 <Print::println()>
     c28:	ldr	r1, [r6, #12]
     c2a:	b.n	560 <loop+0xcc>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    void toggleGlobalMode() {
      if (currentMode == GLOBAL) {
     c2c:	ldr	r7, [pc, #336]	; (d80 <loop+0x8ec>)
     c2e:	ldrb	r2, [r7, #0]
     c30:	cmp	r2, #0
     c32:	beq.w	ebe <loop+0xa2a>
        currentMode = PITCH;
        Serial.println("PITCH");
      } else if (currentMode == PITCH) {
     c36:	cmp	r2, #1
     c38:	beq.w	f24 <loop+0xa90>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
     c3c:	cmp	r2, #2
     c3e:	beq.w	f44 <loop+0xab0>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
      } else if (currentMode == NOTELENGTH) {
     c42:	cmp	r2, #3
     c44:	bne.w	59e <loop+0x10a>
     c48:	ldr	r0, [pc, #312]	; (d84 <loop+0x8f0>)
     c4a:	movs	r1, #6
        currentMode = GLOBAL;
     c4c:	strb	r3, [r7, #0]
     c4e:	bl	122c <usb_serial_write>
     c52:	ldr	r0, [pc, #308]	; (d88 <loop+0x8f4>)
     c54:	bl	2da0 <Print::println()>
     c58:	ldr	r1, [r5, #12]
     c5a:	b.n	59e <loop+0x10a>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    void toggleGlobalMode() {
      if (currentMode == GLOBAL) {
     c5c:	ldr	r7, [pc, #288]	; (d80 <loop+0x8ec>)
     c5e:	ldrb	r2, [r7, #0]
     c60:	cmp	r2, #0
     c62:	beq.w	eb6 <loop+0xa22>
        currentMode = PITCH;
        Serial.println("PITCH");
      } else if (currentMode == PITCH) {
     c66:	cmp	r2, #1
     c68:	beq.w	f1c <loop+0xa88>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
     c6c:	cmp	r2, #2
     c6e:	beq.w	f3c <loop+0xaa8>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
      } else if (currentMode == NOTELENGTH) {
     c72:	cmp	r2, #3
     c74:	bne.w	4e4 <loop+0x50>
     c78:	ldr	r0, [pc, #264]	; (d84 <loop+0x8f0>)
     c7a:	movs	r1, #6
        currentMode = GLOBAL;
     c7c:	strb	r3, [r7, #0]
     c7e:	bl	122c <usb_serial_write>
     c82:	ldr	r0, [pc, #260]	; (d88 <loop+0x8f4>)
     c84:	bl	2da0 <Print::println()>
     c88:	ldr	r1, [r6, #12]
     c8a:	b.n	4e4 <loop+0x50>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    void toggleGlobalMode() {
      if (currentMode == GLOBAL) {
     c8c:	ldr	r7, [pc, #240]	; (d80 <loop+0x8ec>)
     c8e:	ldrb	r2, [r7, #0]
     c90:	cmp	r2, #0
     c92:	beq.w	ed6 <loop+0xa42>
        currentMode = PITCH;
        Serial.println("PITCH");
      } else if (currentMode == PITCH) {
     c96:	cmp	r2, #1
     c98:	beq.w	f14 <loop+0xa80>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
     c9c:	cmp	r2, #2
     c9e:	beq.w	f4c <loop+0xab8>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
      } else if (currentMode == NOTELENGTH) {
     ca2:	cmp	r2, #3
     ca4:	bne.w	522 <loop+0x8e>
     ca8:	ldr	r0, [pc, #216]	; (d84 <loop+0x8f0>)
     caa:	movs	r1, #6
        currentMode = GLOBAL;
     cac:	strb	r3, [r7, #0]
     cae:	bl	122c <usb_serial_write>
     cb2:	ldr	r0, [pc, #212]	; (d88 <loop+0x8f4>)
     cb4:	bl	2da0 <Print::println()>
     cb8:	ldr	r1, [r5, #12]
     cba:	b.n	522 <loop+0x8e>
        m_sequence.toggleStep(m_id - 1);
      } 
    };

    void toggleGlobalMode() {
      if (currentMode == GLOBAL) {
     cbc:	ldr	r7, [pc, #192]	; (d80 <loop+0x8ec>)
     cbe:	ldrb	r2, [r7, #0]
     cc0:	cmp	r2, #0
     cc2:	beq.w	ec6 <loop+0xa32>
        currentMode = PITCH;
        Serial.println("PITCH");
      } else if (currentMode == PITCH) {
     cc6:	cmp	r2, #1
     cc8:	beq.w	f2c <loop+0xa98>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
     ccc:	cmp	r2, #2
     cce:	beq.w	f54 <loop+0xac0>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
      } else if (currentMode == NOTELENGTH) {
     cd2:	cmp	r2, #3
     cd4:	bne.w	606 <loop+0x172>
     cd8:	ldr	r0, [pc, #168]	; (d84 <loop+0x8f0>)
     cda:	movs	r1, #6
        currentMode = GLOBAL;
     cdc:	strb	r3, [r7, #0]
     cde:	bl	122c <usb_serial_write>
     ce2:	ldr	r0, [pc, #164]	; (d88 <loop+0x8f4>)
     ce4:	bl	2da0 <Print::println()>
     ce8:	ldr	r1, [r6, #12]
     cea:	b.n	606 <loop+0x172>
      notes[id] = newValue;
    };

    void controlVelocity (int value, int id) {
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
     cec:	ldr	r3, [r4, #12]
     cee:	ldr	r1, [r4, #16]
     cf0:	add.w	r2, r3, #20
     cf4:	subs.w	r3, r0, r0, lsl #6
     cf8:	it	mi
     cfa:	addwmi	r3, r3, #1023	; 0x3ff
     cfe:	asrs	r3, r3, #10
     d00:	adds	r3, #127	; 0x7f
     d02:	str.w	r3, [r1, r2, lsl #2]
     d06:	b.n	730 <loop+0x29c>
     d08:	ldr	r3, [r4, #12]
     d0a:	ldr	r1, [r4, #16]
     d0c:	add.w	r2, r3, #20
     d10:	subs.w	r3, r0, r0, lsl #6
     d14:	it	mi
     d16:	addwmi	r3, r3, #1023	; 0x3ff
     d1a:	asrs	r3, r3, #10
     d1c:	adds	r3, #127	; 0x7f
     d1e:	str.w	r3, [r1, r2, lsl #2]
     d22:	b.n	790 <loop+0x2fc>
     d24:	ldr	r3, [r4, #12]
     d26:	ldr	r1, [r4, #16]
     d28:	add.w	r2, r3, #20
     d2c:	subs.w	r3, r0, r0, lsl #6
     d30:	it	mi
     d32:	addwmi	r3, r3, #1023	; 0x3ff
     d36:	asrs	r3, r3, #10
     d38:	adds	r3, #127	; 0x7f
     d3a:	str.w	r3, [r1, r2, lsl #2]
     d3e:	b.n	70c <loop+0x278>
     d40:	ldr	r3, [r4, #12]
     d42:	ldr	r1, [r4, #16]
     d44:	add.w	r2, r3, #20
     d48:	subs.w	r3, r0, r0, lsl #6
     d4c:	it	mi
     d4e:	addwmi	r3, r3, #1023	; 0x3ff
     d52:	asrs	r3, r3, #10
     d54:	adds	r3, #127	; 0x7f
     d56:	str.w	r3, [r1, r2, lsl #2]
     d5a:	b.n	7b0 <loop+0x31c>
      notesLengths[id] = newValue;
    };

    void controlPitch (int value, int id) {
      int newValue = map(value, 0, 1023, 51, 38);
      notes[id] = newValue;
     d5c:	sub.w	r3, r0, r0, lsl #2
     d60:	ldr	r2, [r4, #12]
     d62:	ldr	r1, [r4, #16]
     d64:	lsls	r3, r3, #2
     d66:	it	mi
     d68:	addwmi	r3, r3, #1023	; 0x3ff
     d6c:	adds	r2, #16
     d6e:	asrs	r3, r3, #10
     d70:	adds	r3, #51	; 0x33
     d72:	str.w	r3, [r1, r2, lsl #2]
     d76:	b.n	790 <loop+0x2fc>
     d78:	.word	0x1fff1708
     d7c:	.word	0x1fff17f8
     d80:	.word	0x1fff1648
     d84:	.word	0x000041b4
     d88:	.word	0x1fff0c60
     d8c:	sub.w	r3, r0, r0, lsl #2
     d90:	ldr	r2, [r4, #12]
     d92:	ldr	r1, [r4, #16]
     d94:	lsls	r3, r3, #2
     d96:	it	mi
     d98:	addwmi	r3, r3, #1023	; 0x3ff
     d9c:	adds	r2, #16
     d9e:	asrs	r3, r3, #10
     da0:	adds	r3, #51	; 0x33
     da2:	str.w	r3, [r1, r2, lsl #2]
     da6:	b.n	70c <loop+0x278>
     da8:	sub.w	r3, r0, r0, lsl #2
     dac:	ldr	r2, [r4, #12]
     dae:	ldr	r1, [r4, #16]
     db0:	lsls	r3, r3, #2
     db2:	it	mi
     db4:	addwmi	r3, r3, #1023	; 0x3ff
     db8:	adds	r2, #16
     dba:	asrs	r3, r3, #10
     dbc:	adds	r3, #51	; 0x33
     dbe:	str.w	r3, [r1, r2, lsl #2]
     dc2:	b.n	7b0 <loop+0x31c>
     dc4:	sub.w	r3, r0, r0, lsl #2
     dc8:	ldr	r2, [r4, #12]
     dca:	ldr	r1, [r4, #16]
     dcc:	lsls	r3, r3, #2
     dce:	it	mi
     dd0:	addwmi	r3, r3, #1023	; 0x3ff
     dd4:	adds	r2, #16
     dd6:	asrs	r3, r3, #10
     dd8:	adds	r3, #51	; 0x33
     dda:	str.w	r3, [r1, r2, lsl #2]
     dde:	b.n	730 <loop+0x29c>
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
     de0:	add.w	r6, r3, #16
     de4:	adds	r3, #20
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     de6:	ldr.w	r2, [r5, r6, lsl #2]
     dea:	ldr.w	r3, [r5, r3, lsl #2]
     dee:	lsls	r2, r2, #16
     df0:	lsls	r0, r3, #24
     df2:	and.w	r3, r0, #2130706432	; 0x7f000000
     df6:	and.w	r0, r2, #8323072	; 0x7f0000
     dfa:	orrs	r0, r3
     dfc:	orr.w	r0, r0, #40704	; 0x9f00
     e00:	orr.w	r0, r0, #9
     e04:	bl	1ac8 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     e08:	bl	1b64 <usb_midi_flush_output>
      activeNote = notes[step];
     e0c:	ldr.w	r2, [r5, r6, lsl #2]
     e10:	ldr	r3, [r5, #32]
     e12:	str	r2, [r5, #60]	; 0x3c
     e14:	b.n	a2a <loop+0x596>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     e16:	ldr	r0, [pc, #332]	; (f64 <loop+0xad0>)
     e18:	bl	1ac8 <usb_midi_write_packed>
     e1c:	ldr	r3, [r5, #52]	; 0x34
     e1e:	b.n	a7a <loop+0x5e6>
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     e20:	ldr	r6, [pc, #324]	; (f68 <loop+0xad4>)
     e22:	mul.w	r3, r3, r0
     e26:	smull	r7, r6, r6, r3
     e2a:	add	r6, r3
     e2c:	asrs	r3, r3, #31
     e2e:	rsb	r3, r3, r6, asr #9
     e32:	add	r2, r3
     e34:	b.n	b8e <loop+0x6fa>
     e36:	ldr	r6, [pc, #304]	; (f68 <loop+0xad4>)
     e38:	mul.w	r3, r3, r0
     e3c:	smull	r7, r6, r6, r3
     e40:	add	r6, r3
     e42:	asrs	r3, r3, #31
     e44:	rsb	r3, r3, r6, asr #9
     e48:	add	r2, r3
     e4a:	b.n	bc0 <loop+0x72c>
     e4c:	ldr	r6, [pc, #280]	; (f68 <loop+0xad4>)
     e4e:	mul.w	r3, r3, r0
     e52:	smull	r7, r6, r6, r3
     e56:	add	r6, r3
     e58:	asrs	r3, r3, #31
     e5a:	rsb	r3, r3, r6, asr #9
     e5e:	add	r2, r3
     e60:	b.n	b5c <loop+0x6c8>
     e62:	ldr	r6, [pc, #260]	; (f68 <loop+0xad4>)
     e64:	mul.w	r3, r3, r0
     e68:	smull	r7, r6, r6, r3
     e6c:	add	r6, r3
     e6e:	asrs	r3, r3, #31
     e70:	rsb	r3, r3, r6, asr #9
     e74:	add	r2, r3
     e76:	b.n	bf2 <loop+0x75e>
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     e78:	ldr	r3, [r6, #32]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e7a:	ldr	r4, [pc, #240]	; (f6c <loop+0xad8>)
     e7c:	ldr.w	r7, [r6, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink () {
      digitalWrite(m_pin, !digitalRead(m_pin));
     e80:	ldrb.w	r8, [r7]
     e84:	mov	r0, r8
     e86:	bl	1848 <digitalRead>
     e8a:	clz	r1, r0
     e8e:	lsrs	r1, r1, #5
     e90:	mov	r0, r8
     e92:	bl	183c <digitalWrite>

        if (m_steps[m_currentStep].m_state) {
     e96:	ldr	r3, [r6, #32]
     e98:	ldr	r2, [r4, #0]
     e9a:	str	r2, [sp, #4]
     e9c:	adds	r2, r6, r3
      blinking = true;
     e9e:	movs	r0, #1
     ea0:	ldrb	r2, [r2, #24]
	return ret;
     ea2:	ldr	r1, [sp, #4]
     ea4:	strb	r0, [r7, #16]
      lastBlink = millis();  
     ea6:	str	r1, [r7, #8]
     ea8:	cbnz	r2, ede <loop+0xa4a>
          playStep(m_currentStep);
        }

        m_currentStep++;
     eaa:	adds	r3, #1

        if (m_currentStep > 3) {
     eac:	cmp	r3, #3
          m_currentStep = 0;
     eae:	it	gt
     eb0:	movgt	r3, #0
     eb2:	str	r3, [r5, #32]
     eb4:	b.n	a8e <loop+0x5fa>
      } 
    };

    void toggleGlobalMode() {
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
     eb6:	movs	r3, #1
     eb8:	movs	r1, #5
     eba:	ldr	r0, [pc, #180]	; (f70 <loop+0xadc>)
     ebc:	b.n	c7c <loop+0x7e8>
     ebe:	movs	r3, #1
     ec0:	movs	r1, #5
     ec2:	ldr	r0, [pc, #172]	; (f70 <loop+0xadc>)
     ec4:	b.n	c4c <loop+0x7b8>
     ec6:	movs	r3, #1
     ec8:	movs	r1, #5
     eca:	ldr	r0, [pc, #164]	; (f70 <loop+0xadc>)
     ecc:	b.n	cdc <loop+0x848>
     ece:	movs	r3, #1
     ed0:	movs	r1, #5
     ed2:	ldr	r0, [pc, #156]	; (f70 <loop+0xadc>)
     ed4:	b.n	c1c <loop+0x788>
     ed6:	movs	r3, #1
     ed8:	movs	r1, #5
     eda:	ldr	r0, [pc, #148]	; (f70 <loop+0xadc>)
     edc:	b.n	cac <loop+0x818>
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
     ede:	add.w	r7, r3, #16
     ee2:	adds	r3, #20
     ee4:	ldr.w	r2, [r6, r7, lsl #2]
     ee8:	ldr.w	r3, [r6, r3, lsl #2]
     eec:	lsls	r0, r2, #16
     eee:	lsls	r3, r3, #24
     ef0:	and.w	r3, r3, #2130706432	; 0x7f000000
     ef4:	and.w	r0, r0, #8323072	; 0x7f0000
     ef8:	orrs	r0, r3
     efa:	orr.w	r0, r0, #40704	; 0x9f00
     efe:	orr.w	r0, r0, #9
     f02:	bl	1ac8 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     f06:	bl	1b64 <usb_midi_flush_output>
      activeNote = notes[step];
     f0a:	ldr.w	r2, [r6, r7, lsl #2]
     f0e:	ldr	r3, [r6, #32]
     f10:	str	r2, [r6, #60]	; 0x3c
     f12:	b.n	eaa <loop+0xa16>
        Serial.println("PITCH");
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
     f14:	movs	r3, #2
     f16:	movs	r1, #8
     f18:	ldr	r0, [pc, #88]	; (f74 <loop+0xae0>)
     f1a:	b.n	cac <loop+0x818>
     f1c:	movs	r3, #2
     f1e:	movs	r1, #8
     f20:	ldr	r0, [pc, #80]	; (f74 <loop+0xae0>)
     f22:	b.n	c7c <loop+0x7e8>
     f24:	movs	r3, #2
     f26:	movs	r1, #8
     f28:	ldr	r0, [pc, #72]	; (f74 <loop+0xae0>)
     f2a:	b.n	c4c <loop+0x7b8>
     f2c:	movs	r3, #2
     f2e:	movs	r1, #8
     f30:	ldr	r0, [pc, #64]	; (f74 <loop+0xae0>)
     f32:	b.n	cdc <loop+0x848>
     f34:	movs	r3, #2
     f36:	movs	r1, #8
     f38:	ldr	r0, [pc, #56]	; (f74 <loop+0xae0>)
     f3a:	b.n	c1c <loop+0x788>
        Serial.println("VELOCITY");
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
     f3c:	movs	r3, #3
     f3e:	movs	r1, #10
     f40:	ldr	r0, [pc, #52]	; (f78 <loop+0xae4>)
     f42:	b.n	c7c <loop+0x7e8>
     f44:	movs	r3, #3
     f46:	movs	r1, #10
     f48:	ldr	r0, [pc, #44]	; (f78 <loop+0xae4>)
     f4a:	b.n	c4c <loop+0x7b8>
     f4c:	movs	r3, #3
     f4e:	movs	r1, #10
     f50:	ldr	r0, [pc, #36]	; (f78 <loop+0xae4>)
     f52:	b.n	cac <loop+0x818>
     f54:	movs	r3, #3
     f56:	movs	r1, #10
     f58:	ldr	r0, [pc, #28]	; (f78 <loop+0xae4>)
     f5a:	b.n	cdc <loop+0x848>
     f5c:	movs	r3, #3
     f5e:	movs	r1, #10
     f60:	ldr	r0, [pc, #20]	; (f78 <loop+0xae4>)
     f62:	b.n	c1c <loop+0x788>
     f64:	.word	0x7f7bbf0b
     f68:	.word	0x80200803
     f6c:	.word	0x1fff17f8
     f70:	.word	0x00004194
     f74:	.word	0x0000419c
     f78:	.word	0x000041a8

00000f7c <_GLOBAL__sub_I_currentMode>:
     f7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
const int step2pin = 4;
const int step3pin = 6;
const int step4pin = 8;
const int shiftPin = 10;

Led led1(3, LOW);
     f80:	movs	r2, #0
     f82:	movs	r1, #3
     f84:	ldr	r0, [pc, #396]	; (1114 <_GLOBAL__sub_I_currentMode+0x198>)
    int notes[4] = {38, 41, 45, 51};
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Sequence (Led* leds[5], boolean state) {
     f86:	ldr	r5, [pc, #400]	; (1118 <_GLOBAL__sub_I_currentMode+0x19c>)
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
     f88:	ldr	r4, [pc, #400]	; (111c <_GLOBAL__sub_I_currentMode+0x1a0>)
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Sequence (Led* leds[5], boolean state) {
      m_leds[0] = leds[0];
     f8a:	ldr	r6, [pc, #404]	; (1120 <_GLOBAL__sub_I_currentMode+0x1a4>)
    int notes[4] = {38, 41, 45, 51};
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Sequence (Led* leds[5], boolean state) {
     f8c:	ldr.w	r9, [pc, #460]	; 115c <_GLOBAL__sub_I_currentMode+0x1e0>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
     f90:	ldr	r7, [pc, #400]	; (1124 <_GLOBAL__sub_I_currentMode+0x1a8>)
     f92:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
     f96:	movs	r2, #0
     f98:	movs	r1, #5
     f9a:	ldr	r0, [pc, #396]	; (1128 <_GLOBAL__sub_I_currentMode+0x1ac>)
     f9c:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
     fa0:	movs	r2, #0
     fa2:	movs	r1, #7
     fa4:	ldr	r0, [pc, #388]	; (112c <_GLOBAL__sub_I_currentMode+0x1b0>)
     fa6:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
     faa:	movs	r2, #0
     fac:	movs	r1, #9
     fae:	ldr	r0, [pc, #384]	; (1130 <_GLOBAL__sub_I_currentMode+0x1b4>)
     fb0:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
     fb4:	movs	r2, #0
     fb6:	movs	r1, #11
     fb8:	ldr	r0, [pc, #376]	; (1134 <_GLOBAL__sub_I_currentMode+0x1b8>)
     fba:	bl	46c <Led::Led(int, int)>
Led led6(13, LOW);
     fbe:	movs	r2, #0
     fc0:	movs	r1, #13
     fc2:	ldr	r0, [pc, #372]	; (1138 <_GLOBAL__sub_I_currentMode+0x1bc>)
     fc4:	bl	46c <Led::Led(int, int)>
     fc8:	ldmia.w	r5, {r0, r1, r2, r3}
     fcc:	add.w	lr, r5, #16
     fd0:	add.w	ip, r4, #64	; 0x40
     fd4:	stmia.w	ip, {r0, r1, r2, r3}
     fd8:	ldmia.w	lr, {r0, r1, r2, r3}
     fdc:	adds	r5, #32
     fde:	add.w	lr, r4, #80	; 0x50
     fe2:	stmia.w	lr, {r0, r1, r2, r3}
     fe6:	ldmia.w	r5, {r0, r1, r2, r3}
     fea:	movs	r5, #120	; 0x78
     fec:	mov.w	ip, #24
     ff0:	add.w	lr, r4, #96	; 0x60
     ff4:	mov.w	r8, #0
     ff8:	str	r5, [r4, #36]	; 0x24
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
     ffa:	movs	r5, #0
    int notes[4] = {38, 41, 45, 51};
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Sequence (Led* leds[5], boolean state) {
     ffc:	str.w	ip, [r4, #56]	; 0x38
    1000:	strd	r8, r9, [r4, #40]	; 0x28
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1004:	strb	r5, [r4, #24]
    1006:	strb	r5, [r4, #25]
    1008:	strb	r5, [r4, #26]
    100a:	strb	r5, [r4, #27]
    int notes[4] = {38, 41, 45, 51};
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Sequence (Led* leds[5], boolean state) {
    100c:	str	r5, [r4, #48]	; 0x30
    100e:	str	r5, [r4, #52]	; 0x34
    1010:	str	r5, [r4, #60]	; 0x3c
    1012:	stmia.w	lr, {r0, r1, r2, r3}
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
    1016:	adds	r0, r6, #4
    1018:	ldmia	r0, {r0, r1, r2}
      m_id = id;
      m_pin = pin;
    101a:	mov.w	r8, #2
    101e:	str	r2, [r4, #12]
      m_leds[4] = leds[4];
    1020:	ldr	r2, [r6, #16]
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Sequence (Led* leds[5], boolean state) {
      m_leds[0] = leds[0];
    1022:	ldr	r3, [r6, #0]
      m_leds[1] = leds[1];
    1024:	str	r0, [r4, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1026:	mov.w	r9, #1
      m_leds[2] = leds[2];
    102a:	str	r1, [r4, #8]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    102c:	mov	r0, r8
    102e:	mov	r1, r5
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
    1030:	str	r2, [r4, #16]
      m_leds[5] = leds[5];
    1032:	ldr	r2, [r6, #20]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    1034:	str	r3, [r7, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1036:	strb	r5, [r7, #16]
      m_mode = GLOBAL;
    1038:	strb.w	r5, [r7, #36]	; 0x24
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    103c:	mov.w	sl, #4
      m_state = state;
    1040:	strb	r5, [r4, #28]
      m_currentStep = 0;
    1042:	str	r5, [r4, #32]
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
    1044:	str	r2, [r4, #20]
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Sequence (Led* leds[5], boolean state) {
      m_leds[0] = leds[0];
    1046:	str	r3, [r4, #0]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    1048:	str	r4, [r7, #28]
      m_id = id;
    104a:	str.w	r9, [r7]
      m_pin = pin;
    104e:	str.w	r8, [r7, #32]
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1052:	bl	1864 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    1056:	ldr	r3, [pc, #228]	; (113c <_GLOBAL__sub_I_currentMode+0x1c0>)
    1058:	ldr	r2, [r6, #4]
    105a:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    105c:	mov	r1, r5
    105e:	mov	r0, sl
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1060:	strb	r5, [r3, #16]
      m_mode = GLOBAL;
    1062:	strb.w	r5, [r3, #36]	; 0x24
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    1066:	str	r4, [r3, #28]
      m_id = id;
    1068:	str.w	r8, [r3]
      m_pin = pin;
    106c:	str.w	sl, [r3, #32]
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1070:	bl	1864 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    1074:	ldr	r3, [pc, #200]	; (1140 <_GLOBAL__sub_I_currentMode+0x1c4>)
    1076:	ldr	r2, [r6, #8]
    1078:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    107a:	movs	r2, #6
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    107c:	mov	r1, r5
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    107e:	movs	r7, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1080:	mov	r0, r2
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1082:	strb	r5, [r3, #16]
      m_mode = GLOBAL;
    1084:	strb.w	r5, [r3, #36]	; 0x24
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1088:	str	r2, [r3, #32]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    108a:	str	r4, [r3, #28]
      m_id = id;
    108c:	str	r7, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    108e:	bl	1864 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    1092:	ldr	r2, [pc, #176]	; (1144 <_GLOBAL__sub_I_currentMode+0x1c8>)
    1094:	ldr	r3, [r6, #12]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1096:	strb	r5, [r2, #16]
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1098:	mov.w	lr, #8
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    109c:	mov	r0, lr
    109e:	mov	r1, r5
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    10a0:	str.w	lr, [r2, #32]
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;
    10a4:	strb.w	r5, [r2, #36]	; 0x24
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    10a8:	str	r3, [r2, #24]
      m_id = id;
    10aa:	str.w	sl, [r2]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    10ae:	str	r4, [r2, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    10b0:	bl	1864 <pinMode>
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    10b4:	ldr	r3, [pc, #144]	; (1148 <_GLOBAL__sub_I_currentMode+0x1cc>)
    10b6:	ldr	r2, [r6, #16]
    10b8:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    10ba:	movs	r2, #10
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    10bc:	mov	r0, r2
    10be:	mov	r1, r5
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    10c0:	movs	r6, #5
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_mode = GLOBAL;
    10c2:	strb.w	r5, [r3, #36]	; 0x24
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    10c6:	str	r6, [r3, #0]
      m_pin = pin;
    10c8:	str	r2, [r3, #32]
      int id,
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false
    ): m_led(led), m_sequence(sequence) {
    10ca:	str	r4, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    10cc:	strb.w	r9, [r3, #16]
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    10d0:	bl	1864 <pinMode>
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    10d4:	ldr	r0, [pc, #116]	; (114c <_GLOBAL__sub_I_currentMode+0x1d0>)
    10d6:	ldr	r1, [pc, #120]	; (1150 <_GLOBAL__sub_I_currentMode+0x1d4>)
    10d8:	ldr	r2, [pc, #120]	; (1154 <_GLOBAL__sub_I_currentMode+0x1d8>)
    10da:	ldr	r3, [pc, #124]	; (1158 <_GLOBAL__sub_I_currentMode+0x1dc>)
      m_pin = pin;
      m_knobType = knobType;
    10dc:	strb	r5, [r0, #20]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    10de:	mov.w	lr, #14
      m_knobType = knobType;
      m_id = id;
    10e2:	str	r5, [r0, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    10e4:	str	r4, [r0, #16]
      m_pin = pin;
    10e6:	movs	r6, #15
    10e8:	movs	r5, #16
    10ea:	strb.w	lr, [r0]
    10ee:	movs	r0, #17
    10f0:	strb	r6, [r1, #0]
    10f2:	strb	r5, [r2, #0]
    10f4:	strb	r0, [r3, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    10f6:	str	r4, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    10f8:	strb.w	r9, [r1, #20]
      m_id = id;
    10fc:	str.w	r9, [r1, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1100:	str	r4, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    1102:	strb.w	r8, [r2, #20]
      m_id = id;
    1106:	str.w	r8, [r2, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    110a:	str	r4, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
    110c:	strb	r7, [r3, #20]
      m_id = id;
    110e:	str	r7, [r3, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1110:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1114:	.word	0x1fff161c
    1118:	.word	0x00004140
    111c:	.word	0x1fff1708
    1120:	.word	0x1fff0c40
    1124:	.word	0x1fff1690
    1128:	.word	0x1fff15cc
    112c:	.word	0x1fff15e0
    1130:	.word	0x1fff15f4
    1134:	.word	0x1fff1608
    1138:	.word	0x1fff1664
    113c:	.word	0x1fff16b8
    1140:	.word	0x1fff16e0
    1144:	.word	0x1fff17b8
    1148:	.word	0x1fff1778
    114c:	.word	0x1fff1678
    1150:	.word	0x1fff1630
    1154:	.word	0x1fff164c
    1158:	.word	0x1fff17a0
    115c:	.word	0x407f4000

00001160 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1160:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    1162:	ldr	r5, [pc, #60]	; (11a0 <usb_serial_getchar+0x40>)
    1164:	ldr	r0, [r5, #0]
    1166:	cbz	r0, 1188 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1168:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    116a:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    116c:	adds	r1, r0, r3
    116e:	adds	r3, #1
	if (i >= rx_packet->len) {
    1170:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1172:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    1174:	bcs.n	117c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    1176:	strh	r3, [r0, #2]
	}
	return c;
    1178:	mov	r0, r4
}
    117a:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    117c:	bl	200c <usb_free>
		rx_packet = NULL;
    1180:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    1182:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1184:	str	r3, [r5, #0]
    1186:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1188:	ldr	r3, [pc, #24]	; (11a4 <usb_serial_getchar+0x44>)
    118a:	ldrb	r3, [r3, #0]
    118c:	cbz	r3, 119a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    118e:	movs	r0, #2
    1190:	bl	2058 <usb_rx>
    1194:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    1196:	cmp	r0, #0
    1198:	bne.n	1168 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    119a:	mov.w	r0, #4294967295
    119e:	pop	{r3, r4, r5, pc}
    11a0:	.word	0x1fff17ec
    11a4:	.word	0x1fff194c

000011a8 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    11a8:	push	{r4, lr}
	if (!rx_packet) {
    11aa:	ldr	r4, [pc, #36]	; (11d0 <usb_serial_peekchar+0x28>)
    11ac:	ldr	r0, [r4, #0]
    11ae:	cbz	r0, 11b8 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    11b0:	ldrh	r3, [r0, #2]
    11b2:	add	r0, r3
    11b4:	ldrb	r0, [r0, #8]
}
    11b6:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    11b8:	ldr	r3, [pc, #24]	; (11d4 <usb_serial_peekchar+0x2c>)
    11ba:	ldrb	r3, [r3, #0]
    11bc:	cbz	r3, 11ca <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    11be:	movs	r0, #2
    11c0:	bl	2058 <usb_rx>
    11c4:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    11c6:	cmp	r0, #0
    11c8:	bne.n	11b0 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    11ca:	mov.w	r0, #4294967295
    11ce:	pop	{r4, pc}
    11d0:	.word	0x1fff17ec
    11d4:	.word	0x1fff194c

000011d8 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    11d8:	ldr	r3, [pc, #16]	; (11ec <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    11da:	ldr	r2, [pc, #20]	; (11f0 <usb_serial_available+0x18>)
    11dc:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    11de:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    11e0:	cbz	r3, 11ea <usb_serial_available+0x12>
    11e2:	ldrh	r2, [r3, #0]
    11e4:	ldrh	r3, [r3, #2]
    11e6:	subs	r3, r2, r3
    11e8:	add	r0, r3
	return count;
}
    11ea:	bx	lr
    11ec:	.word	0x1fff17ec
    11f0:	.word	0x1fff1de0

000011f4 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    11f4:	ldr	r3, [pc, #44]	; (1224 <usb_serial_flush_input+0x30>)
    11f6:	ldrb	r3, [r3, #0]
    11f8:	cbz	r3, 1222 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    11fa:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    11fc:	ldr	r4, [pc, #40]	; (1228 <usb_serial_flush_input+0x34>)
    11fe:	ldr	r0, [r4, #0]
    1200:	cbz	r0, 1216 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    1202:	bl	200c <usb_free>
		rx_packet = NULL;
    1206:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1208:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    120a:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    120c:	bl	2058 <usb_rx>
		if (!rx) break;
    1210:	cbz	r0, 1220 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    1212:	bl	200c <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    1216:	movs	r0, #2
    1218:	bl	2058 <usb_rx>
		if (!rx) break;
    121c:	cmp	r0, #0
    121e:	bne.n	1212 <usb_serial_flush_input+0x1e>
    1220:	pop	{r4, pc}
    1222:	bx	lr
    1224:	.word	0x1fff194c
    1228:	.word	0x1fff17ec

0000122c <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    122c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1230:	ldr.w	r9, [pc, #248]	; 132c <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    1234:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    1236:	movs	r2, #1
    1238:	strb.w	r2, [r9]
	while (size > 0) {
    123c:	str	r1, [sp, #4]
    123e:	cbz	r1, 129c <usb_serial_write+0x70>
    1240:	ldr.w	r8, [pc, #236]	; 1330 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1244:	ldr	r7, [pc, #212]	; (131c <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1246:	ldr	r6, [sp, #4]
    1248:	mov	fp, r0
		if (!tx_packet) {
    124a:	ldr.w	r0, [r8]
    124e:	cbz	r0, 12be <usb_serial_write+0x92>
    1250:	ldr	r5, [pc, #204]	; (1320 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    1252:	ldrh	r4, [r0, #2]
    1254:	rsb	r1, r4, #64	; 0x40
    1258:	cmp	r1, r6
    125a:	it	cs
    125c:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    125e:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1262:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1264:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1268:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    126a:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    126c:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1270:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1274:	cbz	r1, 128c <usb_serial_write+0x60>
    1276:	subs	r4, #1
    1278:	add	r2, r4
    127a:	add	r1, fp
    127c:	ldrb.w	r4, [fp], #1
    1280:	strb.w	r4, [r2, #1]!
    1284:	cmp	fp, r1
    1286:	bne.n	127c <usb_serial_write+0x50>
    1288:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    128c:	cmp.w	lr, #63	; 0x3f
    1290:	bhi.n	12aa <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1292:	ldr	r2, [pc, #144]	; (1324 <usb_serial_write+0xf8>)
    1294:	movs	r1, #5
    1296:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1298:	cmp	r6, #0
    129a:	bne.n	124a <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    129c:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    129e:	movs	r3, #0
    12a0:	strb.w	r3, [r9]
	return ret;
}
    12a4:	add	sp, #12
    12a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    12aa:	movs	r2, #64	; 0x40
    12ac:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    12ae:	mov	r1, r0
    12b0:	movs	r0, #3
    12b2:	bl	21a8 <usb_tx>
			tx_packet = NULL;
    12b6:	movs	r2, #0
    12b8:	str.w	r2, [r8]
    12bc:	b.n	1292 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    12be:	ldrb	r2, [r7, #0]
    12c0:	cbz	r2, 130c <usb_serial_write+0xe0>
    12c2:	ldr	r4, [pc, #100]	; (1328 <usb_serial_write+0xfc>)
    12c4:	ldr	r5, [pc, #88]	; (1320 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    12c6:	mov.w	sl, #1
    12ca:	b.n	12dc <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    12cc:	subs	r4, #1
    12ce:	beq.n	12fe <usb_serial_write+0xd2>
    12d0:	ldrb	r2, [r5, #0]
    12d2:	cbnz	r2, 12fe <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    12d4:	bl	2cac <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    12d8:	ldrb	r2, [r7, #0]
    12da:	cbz	r2, 130c <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    12dc:	movs	r0, #3
    12de:	bl	2094 <usb_tx_packet_count>
    12e2:	cmp	r0, #7
    12e4:	bhi.n	12cc <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    12e6:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    12ea:	bl	1fcc <usb_malloc>
    12ee:	str.w	r0, [r8]
					if (tx_packet) break;
    12f2:	cmp	r0, #0
    12f4:	bne.n	1252 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    12f6:	ldr	r3, [pc, #52]	; (132c <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    12f8:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    12fa:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    12fc:	bne.n	12d0 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    12fe:	movs	r3, #1
					return -1;
    1300:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    1304:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1306:	add	sp, #12
    1308:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    130c:	movs	r3, #0
					return -1;
    130e:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    1312:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    1316:	add	sp, #12
    1318:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    131c:	.word	0x1fff194c
    1320:	.word	0x1fff17e8
    1324:	.word	0x1fff17e0
    1328:	.word	0x00014821
    132c:	.word	0x1fff17e1
    1330:	.word	0x1fff17e4

00001334 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1334:	push	{lr}
    1336:	sub	sp, #12
    1338:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    133a:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    133c:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    1340:	mov	r0, r3
    1342:	bl	122c <usb_serial_write>
}
    1346:	add	sp, #12
    1348:	ldr.w	pc, [sp], #4

0000134c <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    134c:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    134e:	ldr	r5, [pc, #56]	; (1388 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1350:	ldr	r4, [pc, #56]	; (138c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    1352:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    1354:	movs	r3, #1
    1356:	strb	r3, [r4, #0]
	if (!tx_packet) {
    1358:	cbz	r0, 1366 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    135a:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    135c:	movs	r3, #0
    135e:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1360:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1364:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1366:	ldr	r3, [pc, #40]	; (1390 <usb_serial_write_buffer_free+0x44>)
    1368:	ldrb	r3, [r3, #0]
    136a:	cbnz	r3, 1372 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    136c:	movs	r0, #0
    136e:	strb	r0, [r4, #0]
			return 0;
    1370:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1372:	movs	r0, #3
    1374:	bl	2094 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1378:	cmp	r0, #7
    137a:	bhi.n	136c <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    137c:	bl	1fcc <usb_malloc>
    1380:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1382:	cmp	r0, #0
    1384:	bne.n	135a <usb_serial_write_buffer_free+0xe>
    1386:	b.n	136c <usb_serial_write_buffer_free+0x20>
    1388:	.word	0x1fff17e4
    138c:	.word	0x1fff17e1
    1390:	.word	0x1fff194c

00001394 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1394:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1396:	ldr	r3, [pc, #68]	; (13dc <usb_serial_flush_output+0x48>)
    1398:	ldrb	r3, [r3, #0]
    139a:	cbz	r3, 13c0 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    139c:	ldr	r6, [pc, #64]	; (13e0 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    139e:	ldr	r5, [pc, #68]	; (13e4 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    13a0:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    13a2:	movs	r7, #1
    13a4:	strb	r7, [r5, #0]
	if (tx_packet) {
    13a6:	cbz	r4, 13c2 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    13a8:	ldr	r2, [pc, #60]	; (13e8 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    13aa:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    13ac:	movs	r7, #0
    13ae:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    13b0:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    13b2:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    13b4:	movs	r0, #3
    13b6:	bl	21a8 <usb_tx>
		tx_packet = NULL;
    13ba:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    13bc:	movs	r3, #0
    13be:	strb	r3, [r5, #0]
    13c0:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    13c2:	bl	1fcc <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    13c6:	ldr	r3, [pc, #32]	; (13e8 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    13c8:	cbz	r0, 13d6 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    13ca:	mov	r1, r0
    13cc:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    13ce:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    13d0:	bl	21a8 <usb_tx>
    13d4:	b.n	13bc <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    13d6:	strb	r7, [r3, #0]
    13d8:	b.n	13bc <usb_serial_flush_output+0x28>
    13da:	nop
    13dc:	.word	0x1fff194c
    13e0:	.word	0x1fff17e4
    13e4:	.word	0x1fff17e1
    13e8:	.word	0x1fff17e0

000013ec <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    13ec:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    13ee:	ldr	r3, [pc, #56]	; (1428 <usb_serial_flush_callback+0x3c>)
    13f0:	ldrb	r3, [r3, #0]
    13f2:	cbnz	r3, 1412 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    13f4:	ldr	r4, [pc, #52]	; (142c <usb_serial_flush_callback+0x40>)
    13f6:	ldr	r1, [r4, #0]
    13f8:	cbz	r1, 1414 <usb_serial_flush_callback+0x28>
    13fa:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    13fe:	ldrh	r3, [r1, #2]
    1400:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1402:	movs	r0, #3
    1404:	bl	21a8 <usb_tx>
		tx_packet = NULL;
    1408:	str	r5, [r4, #0]
    140a:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    140c:	ldr	r3, [pc, #32]	; (1430 <usb_serial_flush_callback+0x44>)
    140e:	movs	r2, #1
    1410:	strb	r2, [r3, #0]
    1412:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1414:	bl	1fcc <usb_malloc>
		if (tx) {
    1418:	cmp	r0, #0
    141a:	beq.n	140c <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    141c:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    141e:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    1422:	movs	r0, #3
    1424:	b.w	21a8 <usb_tx>
    1428:	.word	0x1fff17e1
    142c:	.word	0x1fff17e4
    1430:	.word	0x1fff17e0

00001434 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1434:	ldr	r2, [pc, #220]	; (1514 <wait_for_cal+0xe0>)
    1436:	ldr	r1, [pc, #224]	; (1518 <wait_for_cal+0xe4>)
    1438:	ldr	r3, [r2, #0]
    143a:	lsls	r3, r3, #24
    143c:	bmi.n	1438 <wait_for_cal+0x4>
    143e:	ldr	r3, [r1, #0]
    1440:	ands.w	r3, r3, #128	; 0x80
    1444:	bne.n	1438 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    1446:	cpsid	i
	if (calibrating) {
    1448:	ldr	r1, [pc, #208]	; (151c <wait_for_cal+0xe8>)
    144a:	ldrb	r2, [r1, #0]
    144c:	cmp	r2, #0
    144e:	beq.n	1510 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1450:	ldr	r2, [pc, #204]	; (1520 <wait_for_cal+0xec>)
    1452:	ldr	r0, [pc, #208]	; (1524 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1454:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1456:	ldr	r4, [pc, #208]	; (1528 <wait_for_cal+0xf4>)
    1458:	ldr	r7, [r2, #0]
    145a:	ldr	r6, [r0, #0]
    145c:	ldr	r5, [r4, #0]
    145e:	ldr	r4, [r2, #12]
    1460:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1462:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1464:	adds	r2, #20
    1466:	ldr	r0, [r0, #0]
    1468:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    146a:	ldr	r7, [pc, #192]	; (152c <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    146c:	add	r5, r6
    146e:	add	r4, r5
    1470:	add	r0, r4
    1472:	add	r2, r0
    1474:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1478:	ldr	r6, [pc, #180]	; (1530 <wait_for_cal+0xfc>)
    147a:	ldr	r0, [pc, #184]	; (1534 <wait_for_cal+0x100>)
    147c:	ldr	r5, [pc, #184]	; (1538 <wait_for_cal+0x104>)
    147e:	ldr	r4, [pc, #188]	; (153c <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1480:	orr.w	r2, r2, #32768	; 0x8000
    1484:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1486:	ldr	r7, [r6, #0]
    1488:	ldr	r6, [r0, #0]
    148a:	ldr	r5, [r5, #0]
    148c:	ldr	r2, [pc, #176]	; (1540 <wait_for_cal+0x10c>)
    148e:	ldr	r4, [r4, #0]
    1490:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1492:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1494:	ldr	r0, [r0, #0]
    1496:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1498:	ldr	r7, [pc, #168]	; (1544 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    149a:	add	r5, r6
    149c:	add	r4, r5
    149e:	add	r0, r4
    14a0:	add	r2, r0
    14a2:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    14a6:	ldr	r6, [pc, #160]	; (1548 <wait_for_cal+0x114>)
    14a8:	ldr	r0, [pc, #160]	; (154c <wait_for_cal+0x118>)
    14aa:	ldr	r5, [pc, #164]	; (1550 <wait_for_cal+0x11c>)
    14ac:	ldr	r4, [pc, #164]	; (1554 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    14ae:	orr.w	r2, r2, #32768	; 0x8000
    14b2:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    14b4:	ldr	r7, [r6, #0]
    14b6:	ldr	r6, [r0, #0]
    14b8:	ldr	r5, [r5, #0]
    14ba:	ldr	r2, [pc, #156]	; (1558 <wait_for_cal+0x124>)
    14bc:	ldr	r4, [r4, #0]
    14be:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    14c0:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    14c2:	ldr	r0, [r0, #0]
    14c4:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    14c6:	ldr	r7, [pc, #148]	; (155c <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    14c8:	add	r5, r6
    14ca:	add	r4, r5
    14cc:	add	r0, r4
    14ce:	add	r2, r0
    14d0:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    14d4:	ldr	r6, [pc, #136]	; (1560 <wait_for_cal+0x12c>)
    14d6:	ldr	r0, [pc, #140]	; (1564 <wait_for_cal+0x130>)
    14d8:	ldr	r5, [pc, #140]	; (1568 <wait_for_cal+0x134>)
    14da:	ldr	r4, [pc, #144]	; (156c <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    14dc:	orr.w	r2, r2, #32768	; 0x8000
    14e0:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    14e2:	ldr	r7, [r6, #0]
    14e4:	ldr	r6, [r0, #0]
    14e6:	ldr	r5, [r5, #0]
    14e8:	ldr	r2, [pc, #132]	; (1570 <wait_for_cal+0x13c>)
    14ea:	ldr	r4, [r4, #0]
    14ec:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    14ee:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    14f0:	ldr	r0, [r0, #0]
    14f2:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    14f4:	add	r5, r6
    14f6:	add	r4, r5
    14f8:	add	r0, r4
    14fa:	add	r2, r0
    14fc:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    1500:	ldr	r0, [pc, #112]	; (1574 <wait_for_cal+0x140>)
    1502:	orr.w	r2, r2, #32768	; 0x8000
    1506:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    1508:	strb	r3, [r1, #0]
	}
	__enable_irq();
    150a:	cpsie	i
}
    150c:	pop	{r4, r5, r6, r7}
    150e:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    1510:	cpsie	i
    1512:	bx	lr
    1514:	.word	0x4003b024
    1518:	.word	0x400bb024
    151c:	.word	0x1fff17f2
    1520:	.word	0x4003b038
    1524:	.word	0x4003b03c
    1528:	.word	0x4003b040
    152c:	.word	0x4003b02c
    1530:	.word	0x4003b058
    1534:	.word	0x4003b05c
    1538:	.word	0x4003b060
    153c:	.word	0x4003b064
    1540:	.word	0x4003b06c
    1544:	.word	0x4003b030
    1548:	.word	0x400bb038
    154c:	.word	0x400bb03c
    1550:	.word	0x400bb040
    1554:	.word	0x400bb044
    1558:	.word	0x400bb04c
    155c:	.word	0x400bb02c
    1560:	.word	0x400bb058
    1564:	.word	0x400bb05c
    1568:	.word	0x400bb060
    156c:	.word	0x400bb064
    1570:	.word	0x400bb06c
    1574:	.word	0x400bb030

00001578 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1578:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    157a:	ldr	r0, [pc, #164]	; (1620 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    157c:	ldr	r2, [pc, #164]	; (1624 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    157e:	ldr	r3, [pc, #168]	; (1628 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1580:	ldr	r5, [pc, #168]	; (162c <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1582:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1584:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1586:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1588:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    158a:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    158c:	ldr	r4, [pc, #160]	; (1630 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    158e:	cmp	r3, #8
    1590:	beq.n	15f4 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1592:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1594:	ldr	r0, [pc, #156]	; (1634 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1596:	ldr	r1, [pc, #160]	; (1638 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1598:	beq.n	160a <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    159a:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    159c:	ite	eq
    159e:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    15a0:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    15a2:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    15a4:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    15a6:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    15a8:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    15aa:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    15ac:	ldr	r3, [pc, #140]	; (163c <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    15ae:	ldr	r1, [pc, #144]	; (1640 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    15b0:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    15b2:	ldr	r2, [pc, #144]	; (1644 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    15b4:	cbz	r3, 15e6 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    15b6:	movs	r3, #1
    15b8:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    15ba:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    15bc:	ldr	r3, [pc, #136]	; (1648 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    15be:	ldr	r1, [pc, #140]	; (164c <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    15c0:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    15c2:	ldr	r2, [pc, #140]	; (1650 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    15c4:	cmp	r3, #1
    15c6:	bls.n	1616 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    15c8:	cmp	r3, #4
    15ca:	bls.n	15ec <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    15cc:	cmp	r3, #8
    15ce:	bls.n	160e <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    15d0:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    15d2:	ite	ls
    15d4:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    15d6:	movhi	r3, #135	; 0x87
    15d8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    15da:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    15dc:	ldr	r3, [pc, #116]	; (1654 <analog_init+0xdc>)
    15de:	movs	r2, #1
    15e0:	strb	r2, [r3, #0]
}
    15e2:	pop	{r4, r5}
    15e4:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    15e6:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    15e8:	str	r3, [r2, #0]
    15ea:	b.n	15bc <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    15ec:	movs	r3, #132	; 0x84
    15ee:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    15f0:	str	r3, [r2, #0]
    15f2:	b.n	15dc <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    15f4:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    15f8:	ldr	r1, [pc, #60]	; (1638 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    15fa:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    15fc:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    15fe:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1600:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1602:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1604:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1606:	str	r3, [r1, #0]
    1608:	b.n	15ac <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    160a:	movs	r2, #57	; 0x39
    160c:	b.n	15fe <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    160e:	movs	r3, #133	; 0x85
    1610:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1612:	str	r3, [r2, #0]
    1614:	b.n	15dc <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1616:	movs	r3, #128	; 0x80
    1618:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    161a:	str	r3, [r2, #0]
    161c:	b.n	15dc <analog_init+0x64>
    161e:	nop
    1620:	.word	0x40074000
    1624:	.word	0x40074001
    1628:	.word	0x1fff0c58
    162c:	.word	0x4003b008
    1630:	.word	0x4003b00c
    1634:	.word	0x400bb008
    1638:	.word	0x400bb00c
    163c:	.word	0x1fff17f5
    1640:	.word	0x4003b020
    1644:	.word	0x400bb020
    1648:	.word	0x1fff0c59
    164c:	.word	0x4003b024
    1650:	.word	0x400bb024
    1654:	.word	0x1fff17f2

00001658 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1658:	cmp	r0, #71	; 0x47
    165a:	bhi.n	16bc <analogRead+0x64>
	channel = pin2sc1a[pin];
    165c:	ldr	r3, [pc, #204]	; (172c <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    165e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    1662:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    1664:	cmp	r6, #255	; 0xff
    1666:	beq.n	16c0 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1668:	ldr	r3, [pc, #196]	; (1730 <analogRead+0xd8>)
    166a:	ldrb	r3, [r3, #0]
    166c:	cmp	r3, #0
    166e:	bne.n	16c6 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1670:	lsls	r2, r6, #24
    1672:	bmi.n	16ce <analogRead+0x76>
#endif

	__disable_irq();
    1674:	cpsid	i
    1676:	ldr	r5, [pc, #188]	; (1734 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1678:	ldr	r4, [pc, #188]	; (1738 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    167a:	mov	r7, r5
    167c:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    167e:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    1680:	strb	r3, [r5, #0]
	__enable_irq();
    1682:	cpsie	i
	while (1) {
		__disable_irq();
    1684:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1686:	ldr	r3, [r4, #0]
    1688:	lsls	r3, r3, #24
    168a:	bmi.n	16a6 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    168c:	ldrb	r3, [r7, #0]
    168e:	cbnz	r3, 1698 <analogRead+0x40>
    1690:	b.n	167c <analogRead+0x24>
    1692:	ldrb	r3, [r5, #0]
    1694:	cmp	r3, #0
    1696:	beq.n	167c <analogRead+0x24>
		__enable_irq();
    1698:	cpsie	i
		yield();
    169a:	bl	2cac <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    169e:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    16a0:	ldr	r3, [r4, #0]
    16a2:	lsls	r0, r3, #24
    16a4:	bpl.n	1692 <analogRead+0x3a>
			result = ADC0_RA;
    16a6:	ldr	r3, [pc, #148]	; (173c <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    16a8:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    16aa:	movs	r2, #0
    16ac:	strb	r2, [r5, #0]
			__enable_irq();
    16ae:	cpsie	i
			result >>= analog_right_shift;
    16b0:	ldr	r2, [pc, #140]	; (1740 <analogRead+0xe8>)
    16b2:	ldrb	r0, [r2, #0]
    16b4:	asr.w	r0, r3, r0
			return result;
    16b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    16bc:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    16be:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    16c0:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    16c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    16c6:	bl	1434 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    16ca:	lsls	r2, r6, #24
    16cc:	bpl.n	1674 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    16ce:	cpsid	i
    16d0:	ldr	r5, [pc, #112]	; (1744 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    16d2:	ldr.w	r8, [pc, #124]	; 1750 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    16d6:	ldr	r4, [pc, #112]	; (1748 <analogRead+0xf0>)
    16d8:	and.w	r7, r6, #64	; 0x40
    16dc:	uxtb	r7, r7
    16de:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    16e2:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    16e6:	cbz	r7, 1720 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    16e8:	bic.w	r3, r3, #16
    16ec:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    16f0:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    16f2:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    16f4:	ldr	r2, [pc, #76]	; (1744 <analogRead+0xec>)
    16f6:	strb	r3, [r5, #0]
	__enable_irq();
    16f8:	cpsie	i
	while (1) {
		__disable_irq();
    16fa:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    16fc:	ldr	r3, [r4, #0]
    16fe:	lsls	r1, r3, #24
    1700:	bmi.n	171c <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    1702:	ldrb	r3, [r2, #0]
    1704:	cbnz	r3, 170e <analogRead+0xb6>
    1706:	b.n	16e2 <analogRead+0x8a>
    1708:	ldrb	r3, [r5, #0]
    170a:	cmp	r3, #0
    170c:	beq.n	16e2 <analogRead+0x8a>
		__enable_irq();
    170e:	cpsie	i
		yield();
    1710:	bl	2cac <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    1714:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    1716:	ldr	r3, [r4, #0]
    1718:	lsls	r3, r3, #24
    171a:	bpl.n	1708 <analogRead+0xb0>
			result = ADC1_RA;
    171c:	ldr	r3, [pc, #44]	; (174c <analogRead+0xf4>)
    171e:	b.n	16a8 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    1720:	orr.w	r3, r3, #16
    1724:	str.w	r3, [r8]
    1728:	b.n	16f0 <analogRead+0x98>
    172a:	nop
    172c:	.word	0x000041bc
    1730:	.word	0x1fff17f2
    1734:	.word	0x1fff17f4
    1738:	.word	0x4003b000
    173c:	.word	0x4003b010
    1740:	.word	0x1fff17f1
    1744:	.word	0x1fff17f3
    1748:	.word	0x400bb000
    174c:	.word	0x400bb010
    1750:	.word	0x400bb00c

00001754 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    1754:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    1756:	ldr	r3, [pc, #68]	; (179c <digitalWrite.part.1+0x48>)
    1758:	ldr.w	r2, [r3, r0, lsl #3]
    175c:	ldrb.w	r4, [r2, #640]	; 0x280
    1760:	cbz	r4, 1770 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    1762:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    1764:	cbz	r1, 1786 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    1766:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    176a:	ldr.w	r4, [sp], #4
    176e:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    1770:	add.w	r3, r3, r0, lsl #3
    1774:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1776:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    1778:	cbnz	r1, 1790 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    177a:	bic.w	r2, r2, #2
    177e:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1780:	ldr.w	r4, [sp], #4
    1784:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    1786:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    178a:	ldr.w	r4, [sp], #4
    178e:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1790:	orr.w	r2, r2, #3
    1794:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1796:	ldr.w	r4, [sp], #4
    179a:	bx	lr
    179c:	.word	0x00004204

000017a0 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    17a0:	ldr	r2, [pc, #112]	; (1814 <pinMode.part.2+0x74>)
    17a2:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    17a6:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    17a8:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    17aa:	beq.n	17d0 <pinMode.part.2+0x30>
    17ac:	cmp	r1, #4
    17ae:	beq.n	17e8 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    17b0:	ldr.w	r0, [r2, r0, lsl #3]
    17b4:	movs	r2, #0
    17b6:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    17ba:	cbz	r1, 17c8 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    17bc:	cmp	r1, #2
    17be:	beq.n	1802 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    17c0:	cmp	r1, #3
    17c2:	beq.n	180a <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    17c4:	str	r2, [r3, #0]
    17c6:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    17c8:	mov.w	r2, #256	; 0x100
    17cc:	str	r2, [r3, #0]
    17ce:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    17d0:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    17d4:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    17d8:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    17dc:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    17de:	ldr	r2, [r3, #0]
    17e0:	bic.w	r2, r2, #32
    17e4:	str	r2, [r3, #0]
    17e6:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    17e8:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    17ec:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    17f0:	movs	r0, #1
    17f2:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    17f6:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    17f8:	ldr	r2, [r3, #0]
    17fa:	orr.w	r2, r2, #32
    17fe:	str	r2, [r3, #0]
    1800:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    1802:	movw	r2, #259	; 0x103
    1806:	str	r2, [r3, #0]
    1808:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    180a:	mov.w	r2, #258	; 0x102
    180e:	str	r2, [r3, #0]
    1810:	bx	lr
    1812:	nop
    1814:	.word	0x00004204

00001818 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    1818:	push	{r4, r5}
	RTC_SR = 0;
    181a:	ldr	r3, [pc, #20]	; (1830 <rtc_set+0x18>)
	RTC_TPR = 0;
    181c:	ldr	r5, [pc, #20]	; (1834 <rtc_set+0x1c>)
	RTC_TSR = t;
    181e:	ldr	r4, [pc, #24]	; (1838 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    1820:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    1822:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    1824:	str	r2, [r3, #0]
	RTC_TPR = 0;
    1826:	str	r2, [r5, #0]
	RTC_TSR = t;
    1828:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    182a:	str	r1, [r3, #0]
}
    182c:	pop	{r4, r5}
    182e:	bx	lr
    1830:	.word	0x4003d014
    1834:	.word	0x4003d004
    1838:	.word	0x4003d000

0000183c <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    183c:	cmp	r0, #63	; 0x3f
    183e:	bhi.n	1844 <digitalWrite+0x8>
    1840:	b.w	1754 <digitalWrite.part.1>
    1844:	bx	lr
    1846:	nop

00001848 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    1848:	cmp	r0, #63	; 0x3f
    184a:	bhi.n	185a <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    184c:	ldr	r3, [pc, #16]	; (1860 <digitalRead+0x18>)
    184e:	ldr.w	r3, [r3, r0, lsl #3]
    1852:	ldrb.w	r0, [r3, #512]	; 0x200
    1856:	uxtb	r0, r0
    1858:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    185a:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    185c:	bx	lr
    185e:	nop
    1860:	.word	0x00004204

00001864 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    1864:	cmp	r0, #63	; 0x3f
    1866:	bhi.n	186c <pinMode+0x8>
    1868:	b.w	17a0 <pinMode.part.2>
    186c:	bx	lr
    186e:	nop

00001870 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    1870:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1874:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1876:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    1878:	ldr	r7, [pc, #136]	; (1904 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    187a:	ldr	r3, [pc, #140]	; (1908 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    187c:	ldr	r2, [pc, #140]	; (190c <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    187e:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    1880:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1882:	ldr	r2, [r2, #0]
	__enable_irq();
    1884:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1886:	lsls	r2, r2, #5
    1888:	bpl.n	1890 <delay+0x20>
    188a:	cmp	r3, #50	; 0x32
    188c:	it	hi
    188e:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    1890:	cbz	r5, 1900 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1892:	rsb	r3, r3, #179200	; 0x2bc00
    1896:	addw	r3, r3, #799	; 0x31f
    189a:	ldr	r6, [pc, #116]	; (1910 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    189c:	ldr.w	r9, [pc, #104]	; 1908 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    18a0:	ldr.w	r8, [pc, #104]	; 190c <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    18a4:	lsrs	r3, r3, #2
    18a6:	mov.w	r2, #1000	; 0x3e8
    18aa:	umull	r1, r3, r6, r3
    18ae:	mul.w	r4, r2, r4
    18b2:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    18b6:	cpsid	i
	current = SYST_CVR;
    18b8:	ldr.w	r1, [r9]
	count = systick_millis_count;
    18bc:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    18be:	ldr.w	lr, [r8]
	__enable_irq();
    18c2:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    18c4:	rsb	r3, r1, #179200	; 0x2bc00
    18c8:	addw	r3, r3, #799	; 0x31f
    18cc:	lsrs	r3, r3, #2
    18ce:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    18d2:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    18d6:	rsb	r3, r4, r3, lsr #2
    18da:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    18de:	beq.n	18e6 <delay+0x76>
    18e0:	cmp	r1, #50	; 0x32
    18e2:	it	hi
    18e4:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    18e6:	mla	r3, r0, r2, r3
    18ea:	cmp.w	r3, #1000	; 0x3e8
    18ee:	bcc.n	18fa <delay+0x8a>
				ms--;
				if (ms == 0) return;
    18f0:	subs	r5, #1
    18f2:	beq.n	1900 <delay+0x90>
				start += 1000;
    18f4:	add.w	r4, r4, #1000	; 0x3e8
    18f8:	b.n	18b6 <delay+0x46>
			}
			yield();
    18fa:	bl	2cac <yield>
		}
    18fe:	b.n	18b6 <delay+0x46>
    1900:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1904:	.word	0x1fff17f8
    1908:	.word	0xe000e018
    190c:	.word	0xe000ed04
    1910:	.word	0x16c16c17

00001914 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    1914:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1916:	ldr	r3, [pc, #312]	; (1a50 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1918:	ldr	r0, [pc, #312]	; (1a54 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    191a:	ldr.w	ip, [pc, #348]	; 1a78 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    191e:	ldr	r4, [pc, #312]	; (1a58 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    1920:	ldr	r1, [pc, #312]	; (1a5c <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1922:	ldr.w	lr, [pc, #344]	; 1a7c <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    1926:	ldr	r6, [pc, #312]	; (1a60 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    1928:	ldr	r5, [pc, #312]	; (1a64 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    192a:	ldr	r7, [pc, #316]	; (1a68 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    192c:	mov.w	r2, #134217728	; 0x8000000
    1930:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    1932:	mov.w	r2, #268435456	; 0x10000000
    1936:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    1938:	mov.w	r2, #536870912	; 0x20000000
    193c:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    193e:	mov.w	r2, #1073741824	; 0x40000000
    1942:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    1944:	mov.w	r2, #2147483648	; 0x80000000
    1948:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    194a:	movs	r2, #0
    194c:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    194e:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    1950:	movw	r0, #61439	; 0xefff
    1954:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1958:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    195c:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    195e:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    1962:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    1964:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    1966:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1968:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    196c:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    196e:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    1972:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1974:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    1978:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    197a:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    197e:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1982:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    1986:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    198a:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    198e:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    1990:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1994:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1996:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    1998:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    199a:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    199e:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    19a0:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    19a2:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    19a4:	ldr	r4, [pc, #196]	; (1a6c <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    19a6:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    19a8:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    19aa:	movs	r1, #9
    19ac:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    19ae:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    19b2:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    19b6:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    19b8:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    19ba:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    19bc:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    19be:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    19c0:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    19c2:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    19c6:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    19ca:	add.w	r7, r7, #520192	; 0x7f000
    19ce:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    19d0:	addw	r4, r4, #2044	; 0x7fc
    19d4:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    19d6:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    19d8:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    19da:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    19dc:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    19e0:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    19e2:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    19e6:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    19ea:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    19ec:	sub.w	r4, r4, #460800	; 0x70800
    19f0:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    19f4:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    19f6:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    19f8:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    19fc:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    19fe:	ldr	r0, [pc, #112]	; (1a70 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    1a00:	orr.w	r1, r1, #512	; 0x200
    1a04:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    1a06:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1a08:	ldr	r4, [pc, #104]	; (1a74 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    1a0a:	add.w	lr, lr, #65280	; 0xff00
    1a0e:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    1a12:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    1a16:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    1a1a:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    1a1e:	orr.w	r1, r1, #33554432	; 0x2000000
    1a22:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    1a24:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    1a28:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1a2c:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    1a2e:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    1a30:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    1a32:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1a34:	str	r2, [r4, #0]
#endif
	analog_init();
    1a36:	bl	1578 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    1a3a:	movs	r0, #25
    1a3c:	bl	1870 <delay>
	usb_init();
    1a40:	bl	2bdc <usb_init>
	delay(275);
    1a44:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    1a48:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    1a4c:	b.w	1870 <delay>
    1a50:	.word	0xe000e104
    1a54:	.word	0x40038004
    1a58:	.word	0x40038014
    1a5c:	.word	0x4003801c
    1a60:	.word	0x40038024
    1a64:	.word	0x4003802c
    1a68:	.word	0x40038034
    1a6c:	.word	0x40038000
    1a70:	.word	0x40048004
    1a74:	.word	0x400c9000
    1a78:	.word	0x40038008
    1a7c:	.word	0x4003800c

00001a80 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    1a80:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    1a82:	ldr	r3, [pc, #56]	; (1abc <sysex_byte+0x3c>)
    1a84:	ldr	r4, [pc, #56]	; (1ac0 <sysex_byte+0x40>)
    1a86:	ldr	r3, [r3, #0]
    1a88:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    1a8a:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    1a8c:	cbz	r3, 1ab2 <sysex_byte+0x32>
    1a8e:	cmp.w	r1, #290	; 0x122
    1a92:	bcs.n	1aa0 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1a94:	ldr	r2, [pc, #44]	; (1ac4 <sysex_byte+0x44>)
    1a96:	adds	r3, r1, #1
    1a98:	strb	r5, [r2, r1]
    1a9a:	uxth	r3, r3
    1a9c:	strh	r3, [r4, #0]
	}
}
    1a9e:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    1aa0:	movs	r2, #0
    1aa2:	ldr	r0, [pc, #32]	; (1ac4 <sysex_byte+0x44>)
    1aa4:	blx	r3
    1aa6:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1aa8:	ldr	r2, [pc, #24]	; (1ac4 <sysex_byte+0x44>)
    1aaa:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    1aac:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1aae:	strh	r3, [r4, #0]
	}
}
    1ab0:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    1ab2:	cmp.w	r1, #290	; 0x122
    1ab6:	bcc.n	1a94 <sysex_byte+0x14>
    1ab8:	pop	{r3, r4, r5, pc}
    1aba:	nop
    1abc:	.word	0x1fff1820
    1ac0:	.word	0x1fff1cb6
    1ac4:	.word	0x1fff1cbc

00001ac8 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    1ac8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1acc:	ldr	r6, [pc, #132]	; (1b54 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1ace:	ldr	r7, [pc, #136]	; (1b58 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    1ad0:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1ad2:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    1ad4:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1ad6:	strb	r3, [r7, #0]
	if (!tx_packet) {
    1ad8:	cbz	r1, 1b08 <usb_midi_write_packed+0x40>
    1ada:	ldr	r5, [pc, #128]	; (1b5c <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    1adc:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    1ade:	add.w	r2, r1, r3, lsl #2
    1ae2:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    1ae4:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    1ae6:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    1ae8:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    1aec:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    1aee:	bhi.n	1afa <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    1af0:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    1af2:	movs	r3, #0
    1af4:	strb	r3, [r7, #0]
    1af6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    1afa:	movs	r3, #64	; 0x40
    1afc:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    1afe:	movs	r0, #4
    1b00:	bl	21a8 <usb_tx>
		tx_packet = NULL;
    1b04:	str	r4, [r6, #0]
    1b06:	b.n	1af2 <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    1b08:	ldr.w	r9, [pc, #84]	; 1b60 <usb_midi_write_packed+0x98>
    1b0c:	ldrb.w	r3, [r9]
    1b10:	cmp	r3, #0
    1b12:	beq.n	1af6 <usb_midi_write_packed+0x2e>
    1b14:	ldr	r5, [pc, #68]	; (1b5c <usb_midi_write_packed+0x94>)
    1b16:	movw	r4, #48001	; 0xbb81
    1b1a:	b.n	1b2e <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1b1c:	subs	r4, #1
    1b1e:	beq.n	1b46 <usb_midi_write_packed+0x7e>
    1b20:	ldrb	r3, [r5, #0]
    1b22:	cbnz	r3, 1b46 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    1b24:	bl	2cac <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    1b28:	ldrb.w	r3, [r9]
    1b2c:	cbz	r3, 1b4e <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1b2e:	movs	r0, #4
    1b30:	bl	2094 <usb_tx_packet_count>
    1b34:	cmp	r0, #5
    1b36:	bhi.n	1b1c <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    1b38:	bl	1fcc <usb_malloc>
    1b3c:	mov	r1, r0
    1b3e:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    1b40:	cmp	r0, #0
    1b42:	beq.n	1b1c <usb_midi_write_packed+0x54>
    1b44:	b.n	1adc <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    1b46:	movs	r3, #1
    1b48:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    1b4a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1b4e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1b52:	nop
    1b54:	.word	0x1fff183c
    1b58:	.word	0x1fff1810
    1b5c:	.word	0x1fff1840
    1b60:	.word	0x1fff194c

00001b64 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    1b64:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    1b66:	ldr	r3, [pc, #32]	; (1b88 <usb_midi_flush_output+0x24>)
    1b68:	ldrb	r4, [r3, #0]
    1b6a:	cbnz	r4, 1b76 <usb_midi_flush_output+0x12>
    1b6c:	ldr	r5, [pc, #28]	; (1b8c <usb_midi_flush_output+0x28>)
    1b6e:	ldr	r1, [r5, #0]
    1b70:	cbz	r1, 1b76 <usb_midi_flush_output+0x12>
    1b72:	ldrh	r3, [r1, #2]
    1b74:	cbnz	r3, 1b78 <usb_midi_flush_output+0x14>
    1b76:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    1b78:	lsls	r3, r3, #2
    1b7a:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    1b7c:	movs	r0, #4
    1b7e:	bl	21a8 <usb_tx>
		tx_packet = NULL;
    1b82:	str	r4, [r5, #0]
    1b84:	pop	{r3, r4, r5, pc}
    1b86:	nop
    1b88:	.word	0x1fff1810
    1b8c:	.word	0x1fff183c

00001b90 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1b90:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    1b94:	ldr	r6, [pc, #692]	; (1e4c <usb_midi_read+0x2bc>)
    1b96:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1b98:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    1b9a:	cmp	r3, #0
    1b9c:	beq.w	1cc4 <usb_midi_read+0x134>
    1ba0:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    1ba2:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    1ba4:	lsrs	r1, r2, #2
    1ba6:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    1baa:	adds	r2, #4
	if (index < rx_packet->len) {
    1bac:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    1bae:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    1bb0:	bcs.n	1c38 <usb_midi_read+0xa8>
		rx_packet->index = index;
    1bb2:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    1bb4:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1bb8:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    1bbc:	ldr	r1, [pc, #656]	; (1e50 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1bbe:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    1bc2:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    1bc6:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1bca:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    1bcc:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    1bd0:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1bd2:	bls.n	1c0a <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1bd4:	subs	r3, r6, #2
    1bd6:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1bd8:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1bdc:	bls.n	1c7c <usb_midi_read+0xec>
    1bde:	cmp	r6, #5
    1be0:	beq.n	1c74 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    1be2:	cmp	r6, #4
    1be4:	beq.w	1f30 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    1be8:	subs	r3, r6, #5
    1bea:	cmp	r3, #2
    1bec:	bls.n	1cee <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    1bee:	cmp	r6, #15
    1bf0:	bne.n	1c10 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    1bf2:	cmp	r0, #247	; 0xf7
    1bf4:	bhi.n	1c7c <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    1bf6:	cmp	r0, #240	; 0xf0
    1bf8:	beq.n	1c00 <usb_midi_read+0x70>
    1bfa:	ldr	r3, [pc, #600]	; (1e54 <usb_midi_read+0x2c4>)
    1bfc:	ldrh	r3, [r3, #0]
    1bfe:	cbz	r3, 1c10 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    1c00:	bl	1a80 <sysex_byte>
		}
	}
	return 0;
    1c04:	movs	r0, #0
    1c06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    1c0a:	cbz	r7, 1c16 <usb_midi_read+0x86>
    1c0c:	cmp	r5, r7
    1c0e:	beq.n	1c16 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    1c10:	movs	r0, #0
    1c12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1c16:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    1c18:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1c1c:	beq.w	1d2e <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    1c20:	cmp	r6, #9
    1c22:	beq.n	1c48 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    1c24:	cmp	r6, #10
    1c26:	bne.w	1d52 <usb_midi_read+0x1c2>
    1c2a:	cmp	r3, #10
    1c2c:	bne.n	1c10 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    1c2e:	ldr	r3, [pc, #552]	; (1e58 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    1c30:	ldr	r2, [pc, #552]	; (1e5c <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    1c32:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    1c34:	movs	r1, #160	; 0xa0
    1c36:	b.n	1d3c <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    1c38:	mov	r0, r3
    1c3a:	bl	200c <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    1c3e:	movs	r0, #5
    1c40:	bl	2058 <usb_rx>
    1c44:	str	r0, [r6, #0]
    1c46:	b.n	1bb4 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    1c48:	cmp	r3, #9
    1c4a:	bne.n	1c10 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    1c4c:	lsrs	r7, r4, #24
    1c4e:	beq.w	1f48 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    1c52:	ldr	r3, [pc, #524]	; (1e60 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1c54:	ldr	r2, [pc, #516]	; (1e5c <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    1c56:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1c58:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1c5a:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1c5e:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1c60:	uxtb	r5, r5
    1c62:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    1c64:	cmp	r3, #0
    1c66:	beq.w	1da4 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1c6a:	mov	r2, r4
    1c6c:	mov	r1, r6
    1c6e:	mov	r0, r5
    1c70:	blx	r3
    1c72:	b.n	1da4 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1c74:	cmp	r0, #240	; 0xf0
    1c76:	bls.n	1d00 <usb_midi_read+0x170>
    1c78:	cmp	r0, #247	; 0xf7
    1c7a:	beq.n	1d00 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    1c7c:	subs	r0, #241	; 0xf1
    1c7e:	cmp	r0, #14
    1c80:	bhi.n	1c10 <usb_midi_read+0x80>
    1c82:	add	r3, pc, #4	; (adr r3, 1c88 <usb_midi_read+0xf8>)
    1c84:	ldr.w	pc, [r3, r0, lsl #2]
    1c88:	.word	0x00001e3f
    1c8c:	.word	0x00001e23
    1c90:	.word	0x00001e11
    1c94:	.word	0x00001c11
    1c98:	.word	0x00001c11
    1c9c:	.word	0x00001e03
    1ca0:	.word	0x00001c11
    1ca4:	.word	0x00001ee3
    1ca8:	.word	0x00001c11
    1cac:	.word	0x00001ead
    1cb0:	.word	0x00001ec7
    1cb4:	.word	0x00001deb
    1cb8:	.word	0x00001c11
    1cbc:	.word	0x00001dd3
    1cc0:	.word	0x00001db7
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    1cc4:	ldr	r3, [pc, #412]	; (1e64 <usb_midi_read+0x2d4>)
    1cc6:	ldrb	r3, [r3, #0]
    1cc8:	cmp	r3, #0
    1cca:	beq.n	1c10 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    1ccc:	movs	r0, #5
    1cce:	bl	2058 <usb_rx>
    1cd2:	mov	r3, r0
    1cd4:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    1cd6:	cmp	r0, #0
    1cd8:	beq.n	1c10 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    1cda:	ldrh	r5, [r0, #0]
    1cdc:	cmp	r5, #0
    1cde:	bne.w	1ba2 <usb_midi_read+0x12>
			usb_free(rx_packet);
    1ce2:	bl	200c <usb_free>
			rx_packet = NULL;
    1ce6:	str	r5, [r6, #0]
			return 0;
    1ce8:	mov	r0, r5
    1cea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    1cee:	bl	1a80 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    1cf2:	ubfx	r0, r4, #16, #8
    1cf6:	bl	1a80 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    1cfa:	cmp	r6, #7
    1cfc:	bne.n	1d04 <usb_midi_read+0x174>
    1cfe:	lsrs	r0, r4, #24
    1d00:	bl	1a80 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    1d04:	ldr	r3, [pc, #332]	; (1e54 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1d06:	ldr	r2, [pc, #352]	; (1e68 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    1d08:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    1d0a:	ldr	r0, [pc, #352]	; (1e6c <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1d0c:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1d0e:	ldr	r5, [pc, #352]	; (1e70 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1d10:	ldr	r2, [pc, #328]	; (1e5c <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    1d12:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1d14:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1d16:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1d18:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1d1a:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1d1c:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1d1e:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    1d20:	cbz	r4, 1d66 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    1d22:	movs	r2, #1
    1d24:	ldr	r0, [pc, #332]	; (1e74 <usb_midi_read+0x2e4>)
    1d26:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1d28:	movs	r0, #1
    1d2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1d2e:	cmp	r3, #8
    1d30:	bne.w	1c10 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    1d34:	ldr	r3, [pc, #320]	; (1e78 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1d36:	ldr	r2, [pc, #292]	; (1e5c <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    1d38:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1d3a:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1d3c:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1d40:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1d42:	uxtb	r5, r5
    1d44:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    1d46:	cbz	r3, 1da4 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1d48:	mov	r0, r5
    1d4a:	mov	r2, r4
    1d4c:	mov	r1, r6
    1d4e:	blx	r3
    1d50:	b.n	1da4 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    1d52:	cmp	r6, #11
    1d54:	bne.n	1d7a <usb_midi_read+0x1ea>
    1d56:	cmp	r3, #11
    1d58:	bne.w	1c10 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    1d5c:	ldr	r3, [pc, #284]	; (1e7c <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1d5e:	ldr	r2, [pc, #252]	; (1e5c <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    1d60:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1d62:	movs	r1, #176	; 0xb0
    1d64:	b.n	1d3c <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    1d66:	ldr	r3, [pc, #280]	; (1e80 <usb_midi_read+0x2f0>)
    1d68:	ldr	r3, [r3, #0]
    1d6a:	cmp	r3, #0
    1d6c:	beq.w	1f66 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    1d70:	ldr	r0, [pc, #256]	; (1e74 <usb_midi_read+0x2e4>)
    1d72:	blx	r3
		}
		return 1;
    1d74:	movs	r0, #1
    1d76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    1d7a:	cmp	r6, #12
    1d7c:	bne.w	1f80 <usb_midi_read+0x3f0>
    1d80:	cmp	r3, #12
    1d82:	bne.w	1c10 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1d86:	ldr	r3, [pc, #252]	; (1e84 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1d88:	ldr	r2, [pc, #208]	; (1e5c <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    1d8a:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1d8c:	movs	r1, #192	; 0xc0
    1d8e:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    1d90:	uxtb	r5, r5
    1d92:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1d96:	cmp	r3, #0
    1d98:	beq.w	1f2c <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1d9c:	mov	r0, r5
    1d9e:	mov	r1, r6
    1da0:	lsrs	r4, r4, #24
    1da2:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1da4:	ldr	r1, [pc, #224]	; (1e88 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    1da6:	ldr	r2, [pc, #196]	; (1e6c <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    1da8:	ldr	r3, [pc, #196]	; (1e70 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1daa:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    1dac:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    1dae:	strb	r4, [r3, #0]
		return 1;
    1db0:	movs	r0, #1
    1db2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    1db6:	ldr	r3, [pc, #212]	; (1e8c <usb_midi_read+0x2fc>)
    1db8:	ldr	r3, [r3, #0]
    1dba:	cmp	r3, #0
    1dbc:	beq.w	1f6c <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    1dc0:	blx	r3
    1dc2:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    1dc6:	ldr	r3, [pc, #148]	; (1e5c <usb_midi_read+0x2cc>)
    1dc8:	uxtb	r5, r5
    1dca:	lsrs	r4, r4, #24
    1dcc:	strb.w	r8, [r3]
		goto return_message;
    1dd0:	b.n	1da4 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    1dd2:	ldr	r3, [pc, #188]	; (1e90 <usb_midi_read+0x300>)
    1dd4:	ldr	r3, [r3, #0]
    1dd6:	cmp	r3, #0
    1dd8:	bne.n	1dc0 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    1dda:	ldr	r3, [pc, #184]	; (1e94 <usb_midi_read+0x304>)
    1ddc:	ldr	r3, [r3, #0]
    1dde:	cbz	r3, 1e0a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    1de0:	movs	r0, #254	; 0xfe
    1de2:	blx	r3
    1de4:	ubfx	r6, r4, #16, #8
    1de8:	b.n	1dc6 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    1dea:	ldr	r3, [pc, #172]	; (1e98 <usb_midi_read+0x308>)
    1dec:	ldr	r3, [r3, #0]
    1dee:	cmp	r3, #0
    1df0:	bne.n	1dc0 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    1df2:	ldr	r3, [pc, #160]	; (1e94 <usb_midi_read+0x304>)
    1df4:	ldr	r3, [r3, #0]
    1df6:	cbz	r3, 1e0a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    1df8:	movs	r0, #252	; 0xfc
    1dfa:	blx	r3
    1dfc:	ubfx	r6, r4, #16, #8
    1e00:	b.n	1dc6 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    1e02:	ldr	r3, [pc, #152]	; (1e9c <usb_midi_read+0x30c>)
    1e04:	ldr	r3, [r3, #0]
    1e06:	cmp	r3, #0
    1e08:	bne.n	1dc0 <usb_midi_read+0x230>
    1e0a:	ubfx	r6, r4, #16, #8
    1e0e:	b.n	1dc6 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1e10:	ldr	r3, [pc, #140]	; (1ea0 <usb_midi_read+0x310>)
    1e12:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    1e14:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1e18:	cmp	r3, #0
    1e1a:	beq.n	1dc6 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    1e1c:	mov	r0, r6
    1e1e:	blx	r3
    1e20:	b.n	1dc6 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    1e22:	ldr	r3, [pc, #128]	; (1ea4 <usb_midi_read+0x314>)
    1e24:	ldr	r2, [r3, #0]
    1e26:	cmp	r2, #0
    1e28:	beq.n	1e0a <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    1e2a:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    1e2c:	lsrs	r3, r4, #17
    1e2e:	and.w	r0, r6, #127	; 0x7f
    1e32:	and.w	r3, r3, #16256	; 0x3f80
    1e36:	orrs	r0, r3
    1e38:	uxtb	r6, r6
    1e3a:	blx	r2
    1e3c:	b.n	1dc6 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1e3e:	ldr	r3, [pc, #104]	; (1ea8 <usb_midi_read+0x318>)
    1e40:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    1e42:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1e46:	cmp	r3, #0
    1e48:	bne.n	1e1c <usb_midi_read+0x28c>
    1e4a:	b.n	1dc6 <usb_midi_read+0x236>
    1e4c:	.word	0x1fff1848
    1e50:	.word	0x1fff1cba
    1e54:	.word	0x1fff1cb6
    1e58:	.word	0x1fff1824
    1e5c:	.word	0x1fff1cb4
    1e60:	.word	0x1fff1858
    1e64:	.word	0x1fff194c
    1e68:	.word	0x1fff1820
    1e6c:	.word	0x1fff1cb8
    1e70:	.word	0x1fff1cb9
    1e74:	.word	0x1fff1cbc
    1e78:	.word	0x1fff1850
    1e7c:	.word	0x1fff1854
    1e80:	.word	0x1fff1838
    1e84:	.word	0x1fff1814
    1e88:	.word	0x1fff1cbb
    1e8c:	.word	0x1fff1800
    1e90:	.word	0x1fff1804
    1e94:	.word	0x1fff1808
    1e98:	.word	0x1fff1844
    1e9c:	.word	0x1fff1834
    1ea0:	.word	0x1fff184c
    1ea4:	.word	0x1fff181c
    1ea8:	.word	0x1fff1830
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    1eac:	ldr	r3, [pc, #252]	; (1fac <usb_midi_read+0x41c>)
    1eae:	ldr	r3, [r3, #0]
    1eb0:	cmp	r3, #0
    1eb2:	bne.n	1dc0 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    1eb4:	ldr	r3, [pc, #248]	; (1fb0 <usb_midi_read+0x420>)
    1eb6:	ldr	r3, [r3, #0]
    1eb8:	cmp	r3, #0
    1eba:	beq.n	1e0a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    1ebc:	movs	r0, #250	; 0xfa
    1ebe:	blx	r3
    1ec0:	ubfx	r6, r4, #16, #8
    1ec4:	b.n	1dc6 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    1ec6:	ldr	r3, [pc, #236]	; (1fb4 <usb_midi_read+0x424>)
    1ec8:	ldr	r3, [r3, #0]
    1eca:	cmp	r3, #0
    1ecc:	bne.w	1dc0 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    1ed0:	ldr	r3, [pc, #220]	; (1fb0 <usb_midi_read+0x420>)
    1ed2:	ldr	r3, [r3, #0]
    1ed4:	cmp	r3, #0
    1ed6:	beq.n	1e0a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    1ed8:	movs	r0, #251	; 0xfb
    1eda:	blx	r3
    1edc:	ubfx	r6, r4, #16, #8
    1ee0:	b.n	1dc6 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    1ee2:	ldr	r3, [pc, #212]	; (1fb8 <usb_midi_read+0x428>)
    1ee4:	ldr	r3, [r3, #0]
    1ee6:	cmp	r3, #0
    1ee8:	bne.w	1dc0 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    1eec:	ldr	r3, [pc, #192]	; (1fb0 <usb_midi_read+0x420>)
    1eee:	ldr	r3, [r3, #0]
    1ef0:	cmp	r3, #0
    1ef2:	beq.n	1e0a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    1ef4:	movs	r0, #248	; 0xf8
    1ef6:	blx	r3
    1ef8:	ubfx	r6, r4, #16, #8
    1efc:	b.n	1dc6 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    1efe:	cmp	r3, #14
    1f00:	bne.w	1c10 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    1f04:	ldr	r2, [pc, #180]	; (1fbc <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1f06:	ldr	r3, [pc, #184]	; (1fc0 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    1f08:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    1f0a:	movs	r1, #224	; 0xe0
    1f0c:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    1f0e:	cmp	r2, #0
    1f10:	beq.n	1fa2 <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    1f12:	lsrs	r6, r4, #16
    1f14:	lsrs	r1, r4, #17
    1f16:	and.w	r3, r6, #127	; 0x7f
    1f1a:	and.w	r1, r1, #16256	; 0x3f80
    1f1e:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    1f20:	uxtb	r5, r5
    1f22:	sub.w	r1, r1, #8192	; 0x2000
    1f26:	mov	r0, r5
    1f28:	blx	r2
    1f2a:	uxtb	r6, r6
    1f2c:	lsrs	r4, r4, #24
    1f2e:	b.n	1da4 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    1f30:	bl	1a80 <sysex_byte>
		sysex_byte(n >> 16);
    1f34:	ubfx	r0, r4, #16, #8
    1f38:	bl	1a80 <sysex_byte>
		sysex_byte(n >> 24);
    1f3c:	lsrs	r0, r4, #24
    1f3e:	bl	1a80 <sysex_byte>
		return 0;
    1f42:	movs	r0, #0
    1f44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1f48:	ldr	r3, [pc, #120]	; (1fc4 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1f4a:	ldr	r2, [pc, #116]	; (1fc0 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    1f4c:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    1f4e:	movs	r1, #128	; 0x80
    1f50:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1f52:	uxtb	r5, r5
    1f54:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1f58:	cbz	r3, 1f7c <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    1f5a:	mov	r1, r6
    1f5c:	mov	r0, r5
    1f5e:	mov	r2, r7
    1f60:	blx	r3
    1f62:	mov	r4, r7
    1f64:	b.n	1da4 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1f66:	movs	r0, #1
    1f68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    1f6c:	ldr	r3, [pc, #64]	; (1fb0 <usb_midi_read+0x420>)
    1f6e:	ldr	r3, [r3, #0]
    1f70:	cmp	r3, #0
    1f72:	beq.w	1e0a <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    1f76:	movs	r0, #255	; 0xff
    1f78:	blx	r3
    1f7a:	b.n	1e0a <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    1f7c:	mov	r4, r3
    1f7e:	b.n	1da4 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    1f80:	cmp	r6, #13
    1f82:	bne.n	1efe <usb_midi_read+0x36e>
    1f84:	cmp	r3, #13
    1f86:	bne.w	1c10 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1f8a:	ldr	r3, [pc, #60]	; (1fc8 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1f8c:	ldr	r2, [pc, #48]	; (1fc0 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    1f8e:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    1f90:	movs	r1, #208	; 0xd0
    1f92:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1f94:	uxtb	r5, r5
    1f96:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    1f9a:	cmp	r3, #0
    1f9c:	bne.w	1d9c <usb_midi_read+0x20c>
    1fa0:	b.n	1f2c <usb_midi_read+0x39c>
    1fa2:	ubfx	r6, r4, #16, #8
    1fa6:	uxtb	r5, r5
    1fa8:	lsrs	r4, r4, #24
    1faa:	b.n	1da4 <usb_midi_read+0x214>
    1fac:	.word	0x1fff182c
    1fb0:	.word	0x1fff1808
    1fb4:	.word	0x1fff180c
    1fb8:	.word	0x1fff17fc
    1fbc:	.word	0x1fff1818
    1fc0:	.word	0x1fff1cb4
    1fc4:	.word	0x1fff1850
    1fc8:	.word	0x1fff1828

00001fcc <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    1fcc:	cpsid	i
	avail = usb_buffer_available;
    1fce:	ldr	r0, [pc, #52]	; (2004 <usb_malloc+0x38>)
    1fd0:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    1fd2:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    1fd6:	cmp	r3, #29
    1fd8:	bgt.n	1ffc <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    1fda:	mov.w	r1, #2147483648	; 0x80000000
    1fde:	lsrs	r1, r3
    1fe0:	bic.w	r2, r2, r1
    1fe4:	str	r2, [r0, #0]
	__enable_irq();
    1fe6:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    1fe8:	ldr	r0, [pc, #28]	; (2008 <usb_malloc+0x3c>)
    1fea:	add.w	r3, r3, r3, lsl #3
    1fee:	lsls	r3, r3, #3
    1ff0:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    1ff2:	movs	r1, #0
    1ff4:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    1ff6:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    1ff8:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    1ffa:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    1ffc:	cpsie	i
		return NULL;
    1ffe:	movs	r0, #0
    2000:	bx	lr
    2002:	nop
    2004:	.word	0x1fff0c5c
    2008:	.word	0x1fff03d0

0000200c <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    200c:	ldr	r3, [pc, #52]	; (2044 <usb_free+0x38>)
    200e:	ldr	r2, [pc, #56]	; (2048 <usb_free+0x3c>)
    2010:	subs	r3, r0, r3
    2012:	umull	r2, r3, r2, r3
    2016:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    2018:	cmp	r3, #29
    201a:	bhi.n	2036 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    201c:	ldr	r2, [pc, #44]	; (204c <usb_free+0x40>)
    201e:	ldrb	r2, [r2, #0]
    2020:	cbnz	r2, 2038 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    2022:	cpsid	i
	usb_buffer_available |= mask;
    2024:	ldr	r0, [pc, #40]	; (2050 <usb_free+0x44>)
    2026:	mov.w	r1, #2147483648	; 0x80000000
    202a:	ldr	r2, [r0, #0]
    202c:	lsr.w	r3, r1, r3
    2030:	orrs	r2, r3
    2032:	str	r2, [r0, #0]
	__enable_irq();
    2034:	cpsie	i
    2036:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2038:	ldr	r2, [pc, #24]	; (2054 <usb_free+0x48>)
    203a:	ldrb	r2, [r2, #0]
    203c:	cmp	r2, #0
    203e:	beq.n	2022 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    2040:	b.w	20c0 <usb_rx_memory>
    2044:	.word	0x1fff03d0
    2048:	.word	0x38e38e39
    204c:	.word	0x1fff1941
    2050:	.word	0x1fff0c5c
    2054:	.word	0x1fff194c

00002058 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    2058:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    205a:	cmp	r3, #4
    205c:	bhi.n	2088 <usb_rx+0x30>
	__disable_irq();
    205e:	cpsid	i
	ret = rx_first[endpoint];
    2060:	ldr	r1, [pc, #40]	; (208c <usb_rx+0x34>)
    2062:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    2066:	cbz	r0, 2084 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2068:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    206a:	ldr	r4, [pc, #36]	; (2090 <usb_rx+0x38>)
    206c:	ldrh	r5, [r0, #0]
    206e:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    2072:	ldr	r6, [r0, #4]
    2074:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2078:	subs	r2, r2, r5
    207a:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    207e:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2080:	pop	{r4, r5, r6}
    2082:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2084:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2086:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2088:	movs	r0, #0
    208a:	bx	lr
    208c:	.word	0x1fff18b8
    2090:	.word	0x1fff1de0

00002094 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2094:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2096:	cmp	r0, #4
    2098:	bhi.n	20b2 <usb_tx_packet_count+0x1e>
	__disable_irq();
    209a:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    209c:	ldr	r3, [pc, #28]	; (20bc <usb_tx_packet_count+0x28>)
    209e:	ldr.w	r3, [r3, r0, lsl #2]
    20a2:	cbz	r3, 20b6 <usb_tx_packet_count+0x22>
    20a4:	movs	r0, #0
    20a6:	ldr	r3, [r3, #4]
    20a8:	adds	r0, #1
    20aa:	cmp	r3, #0
    20ac:	bne.n	20a6 <usb_tx_packet_count+0x12>
	__enable_irq();
    20ae:	cpsie	i
	return count;
    20b0:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    20b2:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    20b4:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    20b6:	mov	r0, r3
    20b8:	b.n	20ae <usb_tx_packet_count+0x1a>
    20ba:	nop
    20bc:	.word	0x1fff1910

000020c0 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    20c0:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    20c2:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    20c4:	ldr	r2, [pc, #204]	; (2194 <usb_rx_memory+0xd4>)
    20c6:	ldrb	r3, [r2, #0]
    20c8:	lsls	r3, r3, #28
    20ca:	bpl.n	20da <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    20cc:	ldr	r3, [pc, #200]	; (2198 <usb_rx_memory+0xd8>)
    20ce:	ldr	r1, [r3, #32]
    20d0:	cmp	r1, #0
    20d2:	beq.n	215c <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    20d4:	ldr	r1, [r3, #40]	; 0x28
    20d6:	cmp	r1, #0
    20d8:	beq.n	2178 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    20da:	ldrb	r3, [r2, #1]
    20dc:	lsls	r5, r3, #28
    20de:	bpl.n	20ee <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    20e0:	ldr	r3, [pc, #180]	; (2198 <usb_rx_memory+0xd8>)
    20e2:	ldr	r1, [r3, #64]	; 0x40
    20e4:	cmp	r1, #0
    20e6:	beq.n	2184 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    20e8:	ldr	r1, [r3, #72]	; 0x48
    20ea:	cmp	r1, #0
    20ec:	beq.n	217c <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    20ee:	ldrb	r3, [r2, #2]
    20f0:	lsls	r4, r3, #28
    20f2:	bpl.n	2102 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    20f4:	ldr	r3, [pc, #160]	; (2198 <usb_rx_memory+0xd8>)
    20f6:	ldr	r1, [r3, #96]	; 0x60
    20f8:	cmp	r1, #0
    20fa:	beq.n	2188 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    20fc:	ldr	r1, [r3, #104]	; 0x68
    20fe:	cmp	r1, #0
    2100:	beq.n	2180 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2102:	ldrb	r3, [r2, #3]
    2104:	lsls	r1, r3, #28
    2106:	bpl.n	2118 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2108:	ldr	r3, [pc, #140]	; (2198 <usb_rx_memory+0xd8>)
    210a:	ldr.w	r1, [r3, #128]	; 0x80
    210e:	cmp	r1, #0
    2110:	beq.n	2190 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2112:	ldr.w	r1, [r3, #136]	; 0x88
    2116:	cbz	r1, 213e <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2118:	ldrb	r3, [r2, #4]
    211a:	lsls	r3, r3, #28
    211c:	bpl.n	2130 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    211e:	ldr	r3, [pc, #120]	; (2198 <usb_rx_memory+0xd8>)
    2120:	ldr.w	r2, [r3, #160]	; 0xa0
    2124:	cmp	r2, #0
    2126:	beq.n	218c <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2128:	ldr.w	r2, [r3, #168]	; 0xa8
    212c:	movs	r4, #21
    212e:	cbz	r2, 2140 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2130:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    2132:	ldr	r3, [pc, #104]	; (219c <usb_rx_memory+0xdc>)
    2134:	movs	r2, #0
    2136:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2138:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    213a:	b.w	200c <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    213e:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2140:	ldr	r1, [pc, #88]	; (219c <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2142:	ldr	r5, [pc, #92]	; (21a0 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    2144:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2146:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    214a:	add.w	r3, r3, r4, lsl #3
    214e:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2150:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2152:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2154:	strb	r2, [r1, #0]
				__enable_irq();
    2156:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2158:	pop	{r4, r5}
    215a:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    215c:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    215e:	ldr	r4, [pc, #60]	; (219c <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2160:	ldr	r5, [pc, #64]	; (21a4 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    2162:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2164:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2168:	add.w	r3, r3, r2, lsl #3
    216c:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    216e:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2170:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2172:	strb	r2, [r4, #0]
				__enable_irq();
    2174:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2176:	b.n	2158 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2178:	movs	r4, #5
    217a:	b.n	2140 <usb_rx_memory+0x80>
    217c:	movs	r4, #9
    217e:	b.n	2140 <usb_rx_memory+0x80>
    2180:	movs	r4, #13
    2182:	b.n	2140 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2184:	movs	r2, #8
    2186:	b.n	215e <usb_rx_memory+0x9e>
    2188:	movs	r2, #12
    218a:	b.n	215e <usb_rx_memory+0x9e>
    218c:	movs	r2, #20
    218e:	b.n	215e <usb_rx_memory+0x9e>
    2190:	movs	r2, #16
    2192:	b.n	215e <usb_rx_memory+0x9e>
    2194:	.word	0x00004430
    2198:	.word	0x1fff0000
    219c:	.word	0x1fff1941
    21a0:	.word	0x004000c8
    21a4:	.word	0x00400088

000021a8 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    21a8:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    21aa:	cmp	r3, #4
    21ac:	bhi.n	21ea <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    21ae:	ldr	r2, [pc, #108]	; (221c <usb_tx+0x74>)
    21b0:	lsls	r0, r0, #5
    21b2:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    21b6:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    21b8:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    21ba:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    21bc:	ldr	r4, [pc, #96]	; (2220 <usb_tx+0x78>)
    21be:	ldrb	r2, [r4, r3]
    21c0:	cmp	r2, #3
    21c2:	bhi.n	21fc <usb_tx+0x54>
    21c4:	tbb	[pc, r2]
    21c8:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    21cc:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    21ce:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    21d0:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    21d2:	tst.w	r0, #8
    21d6:	ite	ne
    21d8:	movne	r3, #200	; 0xc8
    21da:	moveq	r3, #136	; 0x88
    21dc:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    21e0:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    21e2:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    21e4:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    21e6:	cpsie	i
}
    21e8:	pop	{r4, r5}
    21ea:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    21ec:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    21ee:	movs	r2, #2
		break;
    21f0:	b.n	21ce <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    21f2:	movs	r2, #5
    21f4:	b.n	21ce <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    21f6:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    21f8:	movs	r2, #4
		break;
    21fa:	b.n	21ce <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    21fc:	ldr	r2, [pc, #36]	; (2224 <usb_tx+0x7c>)
    21fe:	ldr.w	r0, [r2, r3, lsl #2]
    2202:	cbz	r0, 2214 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    2204:	ldr	r2, [pc, #32]	; (2228 <usb_tx+0x80>)
    2206:	ldr.w	r0, [r2, r3, lsl #2]
    220a:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    220c:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    2210:	cpsie	i
		return;
    2212:	b.n	21e8 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    2214:	str.w	r1, [r2, r3, lsl #2]
    2218:	ldr	r2, [pc, #12]	; (2228 <usb_tx+0x80>)
    221a:	b.n	220c <usb_tx+0x64>
    221c:	.word	0x1fff0000
    2220:	.word	0x1fff1950
    2224:	.word	0x1fff1910
    2228:	.word	0x1fff1924

0000222c <usb_isr>:
}



void usb_isr(void)
{
    222c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2230:	ldr.w	fp, [pc, #776]	; 253c <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2234:	ldr.w	sl, [pc, #776]	; 2540 <usb_isr+0x314>
}



void usb_isr(void)
{
    2238:	sub	sp, #28
    223a:	b.n	22c6 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    223c:	ldr	r7, [pc, #680]	; (24e8 <usb_isr+0x2bc>)
    223e:	mov.w	r8, r3, lsr #2
    2242:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2246:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2248:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    224c:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2250:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2252:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2256:	and.w	r4, r3, #255	; 0xff
    225a:	cmp	r3, #0
    225c:	bne.w	2460 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2260:	ldr.w	r3, [r7, r8, lsl #3]
    2264:	lsrs	r3, r3, #16
    2266:	uxth	r1, r3
    2268:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    226c:	cmp	r3, #0
    226e:	beq.w	244e <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    2272:	ldr	r3, [pc, #632]	; (24ec <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2274:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2278:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    227c:	ldr.w	r2, [r3, r6, lsl #2]
    2280:	cmp	r2, #0
    2282:	beq.w	26f0 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2286:	ldr	r5, [pc, #616]	; (24f0 <usb_isr+0x2c4>)
    2288:	ldr.w	r3, [r5, r6, lsl #2]
    228c:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    228e:	ldr	r4, [pc, #612]	; (24f4 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2290:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2294:	ldrh.w	r3, [r4, r6, lsl #1]
    2298:	add	r1, r3
    229a:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    229e:	bl	1fcc <usb_malloc>
					if (packet) {
    22a2:	cmp	r0, #0
    22a4:	beq.w	26e2 <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    22a8:	ldr	r2, [pc, #588]	; (24f8 <usb_isr+0x2cc>)
    22aa:	ldr	r3, [pc, #592]	; (24fc <usb_isr+0x2d0>)
    22ac:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    22b0:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    22b4:	it	ne
    22b6:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    22b8:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    22bc:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    22c0:	movs	r3, #8
    22c2:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    22c6:	ldrb.w	r4, [fp]
    22ca:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    22cc:	lsls	r0, r4, #29
    22ce:	bpl.n	230a <usb_isr+0xde>
		if (usb_configuration) {
    22d0:	ldr	r3, [pc, #556]	; (2500 <usb_isr+0x2d4>)
    22d2:	ldrb	r3, [r3, #0]
    22d4:	cbz	r3, 2304 <usb_isr+0xd8>
			t = usb_reboot_timer;
    22d6:	ldr	r1, [pc, #556]	; (2504 <usb_isr+0x2d8>)
    22d8:	ldrb	r2, [r1, #0]
			if (t) {
    22da:	and.w	r3, r2, #255	; 0xff
    22de:	cbz	r2, 22ea <usb_isr+0xbe>
				usb_reboot_timer = --t;
    22e0:	subs	r3, #1
    22e2:	uxtb	r3, r3
    22e4:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    22e6:	cbnz	r3, 22ea <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    22e8:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    22ea:	ldr	r1, [pc, #540]	; (2508 <usb_isr+0x2dc>)
    22ec:	ldrb	r2, [r1, #0]
			if (t) {
    22ee:	and.w	r3, r2, #255	; 0xff
    22f2:	cbz	r2, 2300 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    22f4:	subs	r3, #1
    22f6:	uxtb	r3, r3
    22f8:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    22fa:	cmp	r3, #0
    22fc:	beq.w	268e <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    2300:	bl	1b64 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2304:	movs	r3, #4
    2306:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    230a:	and.w	r3, r4, #8
    230e:	and.w	r2, r3, #255	; 0xff
    2312:	cmp	r3, #0
    2314:	beq.w	24a8 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    2318:	ldrb.w	r3, [sl]
    231c:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    231e:	lsrs	r6, r3, #4
    2320:	bne.n	223c <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2322:	lsrs	r4, r3, #2
    2324:	ldr.w	r9, [pc, #448]	; 24e8 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2328:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    232c:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2330:	ubfx	r2, r2, #2, #4
    2334:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2336:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2338:	cmp	r2, #12
    233a:	bhi.w	2446 <usb_isr+0x21a>
    233e:	tbb	[pc, r2]
    2342:	.short	0x7878
    2344:	.word	0x82828282
    2348:	.word	0x82438282
    234c:	.short	0x8282
    234e:	.byte	0x07
    234f:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2350:	ldr	r0, [r1, #0]
    2352:	ldr	r5, [pc, #440]	; (250c <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2354:	ldr	r3, [pc, #416]	; (24f8 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2356:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2358:	ldr	r7, [pc, #436]	; (2510 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    235a:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    235e:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2360:	ldr	r6, [pc, #432]	; (2514 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2362:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2364:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2368:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    236a:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    236c:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    236e:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2372:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2374:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2378:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    237c:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    237e:	bhi.w	2544 <usb_isr+0x318>
    2382:	cmp.w	r1, #1664	; 0x680
    2386:	bcs.w	29b0 <usb_isr+0x784>
    238a:	cmp.w	r1, #258	; 0x102
    238e:	beq.w	275e <usb_isr+0x532>
    2392:	bhi.w	2728 <usb_isr+0x4fc>
    2396:	cmp	r1, #128	; 0x80
    2398:	beq.w	29e4 <usb_isr+0x7b8>
    239c:	cmp	r1, #130	; 0x82
    239e:	bne.w	276a <usb_isr+0x53e>
    23a2:	ldrh	r1, [r5, #4]
    23a4:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    23a8:	cmp	r1, #5
    23aa:	bhi.w	276a <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    23ae:	ldr	r3, [pc, #360]	; (2518 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    23b0:	ldr	r4, [pc, #360]	; (251c <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    23b2:	lsls	r1, r1, #2
    23b4:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    23b6:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    23b8:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    23ba:	ldrb	r2, [r3, #0]
    23bc:	lsls	r3, r2, #30
    23be:	bpl.w	2af4 <usb_isr+0x8c8>
    23c2:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    23c4:	movs	r0, #2
    23c6:	b.n	27f2 <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    23c8:	ldr	r7, [pc, #324]	; (2510 <usb_isr+0x2e4>)
    23ca:	ldr	r2, [r7, #0]
		if (data) {
    23cc:	cbz	r2, 241c <usb_isr+0x1f0>
			size = ep0_tx_len;
    23ce:	ldr	r3, [pc, #336]	; (2520 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    23d0:	ldr	r6, [pc, #320]	; (2514 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23d2:	ldr	r1, [pc, #336]	; (2524 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    23d4:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    23d6:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23d8:	ldrb	r5, [r1, #0]
    23da:	cmp	r0, #64	; 0x40
    23dc:	mov	lr, r0
    23de:	orr.w	r8, r5, #2
    23e2:	it	cs
    23e4:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    23e8:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    23ea:	eor.w	r4, r4, #1
    23ee:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    23f0:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    23f4:	ite	eq
    23f6:	moveq	r4, #136	; 0x88
    23f8:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    23fa:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    23fe:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2400:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2404:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2408:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    240a:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    240c:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    2410:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2412:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2414:	cmp	r0, #0
    2416:	beq.w	2586 <usb_isr+0x35a>
    241a:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    241c:	ldr	r3, [pc, #236]	; (250c <usb_isr+0x2e0>)
    241e:	ldrh	r2, [r3, #0]
    2420:	cmp.w	r2, #1280	; 0x500
    2424:	bne.n	2446 <usb_isr+0x21a>
			setup.bRequest = 0;
    2426:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2428:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    242a:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    242c:	ldr	r3, [pc, #248]	; (2528 <usb_isr+0x2fc>)
    242e:	strb	r2, [r3, #0]
    2430:	b.n	2446 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    2432:	ldr	r2, [pc, #216]	; (250c <usb_isr+0x2e0>)
    2434:	ldrh	r0, [r2, #0]
    2436:	movw	r2, #8225	; 0x2021
    243a:	cmp	r0, r2
    243c:	beq.w	2590 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2440:	ldr	r2, [pc, #180]	; (24f8 <usb_isr+0x2cc>)
    2442:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2446:	ldr	r2, [pc, #228]	; (252c <usb_isr+0x300>)
    2448:	movs	r3, #1
    244a:	strb	r3, [r2, #0]
    244c:	b.n	22c0 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    244e:	ldr	r2, [pc, #168]	; (24f8 <usb_isr+0x2cc>)
    2450:	ldr	r3, [pc, #168]	; (24fc <usb_isr+0x2d0>)
    2452:	tst.w	r9, #8
    2456:	it	ne
    2458:	movne	r3, r2
    245a:	str.w	r3, [r7, r8, lsl #3]
    245e:	b.n	22c0 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2460:	bl	200c <usb_free>
				packet = tx_first[endpoint];
    2464:	ldr	r2, [pc, #200]	; (2530 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2466:	ldr	r1, [pc, #204]	; (2534 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2468:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    246c:	cmp	r3, #0
    246e:	beq.w	26f8 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2472:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2474:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2476:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    247a:	add.w	r2, r3, #8
    247e:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    2482:	cmp	r4, #3
    2484:	bhi.n	2492 <usb_isr+0x266>
    2486:	tbb	[pc, r4]
    248a:	.short	0x022c
    248c:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    248e:	movs	r2, #2
    2490:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    2492:	ldrh	r2, [r3, #0]
    2494:	tst.w	r9, #8
    2498:	ite	eq
    249a:	moveq	r3, #136	; 0x88
    249c:	movne	r3, #200	; 0xc8
    249e:	orr.w	r3, r3, r2, lsl #16
    24a2:	str.w	r3, [r7, r8, lsl #3]
    24a6:	b.n	22c0 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    24a8:	lsls	r0, r4, #31
    24aa:	bmi.w	2694 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    24ae:	lsls	r1, r4, #24
    24b0:	bmi.w	2714 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    24b4:	lsls	r2, r4, #30
    24b6:	bpl.n	24c6 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    24b8:	ldr	r2, [pc, #124]	; (2538 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    24ba:	ldr	r1, [pc, #128]	; (253c <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    24bc:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    24be:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    24c0:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    24c2:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    24c4:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    24c6:	lsls	r3, r4, #27
    24c8:	bpl.n	24d0 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    24ca:	ldr	r3, [pc, #112]	; (253c <usb_isr+0x310>)
    24cc:	movs	r2, #16
    24ce:	strb	r2, [r3, #0]
	}

}
    24d0:	add	sp, #28
    24d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    24d6:	movs	r2, #4
    24d8:	strb	r2, [r1, r6]
						break;
    24da:	b.n	2492 <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    24dc:	movs	r2, #5
    24de:	strb	r2, [r1, r6]
						break;
    24e0:	b.n	2492 <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    24e2:	movs	r2, #3
    24e4:	strb	r2, [r1, r6]
						break;
    24e6:	b.n	2492 <usb_isr+0x266>
    24e8:	.word	0x1fff0000
    24ec:	.word	0x1fff18b8
    24f0:	.word	0x1fff1860
    24f4:	.word	0x1fff1de0
    24f8:	.word	0x004000c8
    24fc:	.word	0x00400088
    2500:	.word	0x1fff194c
    2504:	.word	0x1fff18cd
    2508:	.word	0x1fff17e0
    250c:	.word	0x1fff1938
    2510:	.word	0x1fff185c
    2514:	.word	0x1fff18cc
    2518:	.word	0x400720c0
    251c:	.word	0x1fff1944
    2520:	.word	0x1fff1874
    2524:	.word	0x1fff1940
    2528:	.word	0x40072098
    252c:	.word	0x40072094
    2530:	.word	0x1fff1910
    2534:	.word	0x1fff1950
    2538:	.word	0x40072088
    253c:	.word	0x40072080
    2540:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2544:	movw	r4, #8225	; 0x2021
    2548:	cmp	r1, r4
    254a:	beq.w	2686 <usb_isr+0x45a>
    254e:	bhi.n	25e4 <usb_isr+0x3b8>
    2550:	cmp.w	r1, #2176	; 0x880
    2554:	beq.w	27ea <usb_isr+0x5be>
    2558:	cmp.w	r1, #2304	; 0x900
    255c:	bne.w	276a <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2560:	ldr	r2, [pc, #712]	; (282c <usb_isr+0x600>)
    2562:	ldr	r4, [pc, #716]	; (2830 <usb_isr+0x604>)
    2564:	ldrb	r1, [r5, #2]
    2566:	strb	r1, [r2, #0]
    2568:	add.w	r5, r4, #160	; 0xa0
    256c:	b.n	2576 <usb_isr+0x34a>
    256e:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2570:	cmp	r5, r4
    2572:	beq.w	2888 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    2576:	ldr	r3, [r4, #32]
    2578:	lsls	r1, r3, #24
    257a:	bpl.n	256e <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    257c:	ldr	r0, [r4, #36]	; 0x24
    257e:	subs	r0, #8
    2580:	bl	200c <usb_free>
    2584:	b.n	256e <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2586:	cmp.w	lr, #64	; 0x40
    258a:	it	ne
    258c:	movne	r2, #0
    258e:	b.n	241a <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2590:	ldr	r2, [pc, #672]	; (2834 <usb_isr+0x608>)
    2592:	ldrb	r5, [r1, #0]
    2594:	ldrb	r0, [r1, #1]
    2596:	strb	r5, [r2, #0]
    2598:	strb	r0, [r2, #1]
    259a:	ldrb	r5, [r1, #2]
    259c:	ldrb	r0, [r1, #3]
    259e:	strb	r5, [r2, #2]
    25a0:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    25a2:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    25a4:	ldrb	r5, [r1, #4]
    25a6:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    25a8:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    25aa:	ldrb	r5, [r1, #5]
    25ac:	ldrb	r1, [r1, #6]
    25ae:	strb	r5, [r2, #5]
    25b0:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    25b2:	beq.w	27e2 <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    25b6:	ldr	r1, [pc, #640]	; (2838 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    25b8:	ldr	r6, [pc, #640]	; (283c <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    25ba:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    25bc:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    25be:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    25c2:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    25c4:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    25c8:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    25ca:	ite	eq
    25cc:	moveq	r1, #136	; 0x88
    25ce:	movne	r1, #200	; 0xc8
    25d0:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    25d4:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    25d8:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    25dc:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    25de:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    25e0:	str	r1, [r2, #4]
    25e2:	b.n	2440 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    25e4:	movw	r4, #8737	; 0x2221
    25e8:	cmp	r1, r4
    25ea:	bne.w	29fe <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    25ee:	ldr.w	ip, [pc, #656]	; 2880 <usb_isr+0x654>
    25f2:	ldr	r3, [pc, #588]	; (2840 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    25f4:	ldr	r1, [pc, #588]	; (2844 <usb_isr+0x618>)
    25f6:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    25f8:	ldr.w	r5, [ip]
    25fc:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    25fe:	str	r0, [sp, #4]
    2600:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2602:	movs	r0, #0
    2604:	str	r0, [sp, #8]
    2606:	mov	r8, r0
    2608:	mov	ip, r0
    260a:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    260c:	ldr	r1, [pc, #552]	; (2838 <usb_isr+0x60c>)
    260e:	ldrb	r5, [r1, #0]
    2610:	orr.w	lr, r5, #2
    2614:	add.w	r3, r9, lr, lsl #3
    2618:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    261a:	ldr	r3, [sp, #4]
    261c:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    261e:	ldr	r3, [sp, #12]
    2620:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2622:	ite	eq
    2624:	moveq	r4, #136	; 0x88
    2626:	movne	r4, #200	; 0xc8
    2628:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    262c:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2630:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    2634:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2636:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2638:	ldr.w	lr, [pc, #500]	; 2830 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    263c:	ldr	r3, [pc, #508]	; (283c <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    263e:	ldr.w	r8, [pc, #504]	; 2838 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2642:	cmp	r0, #0
    2644:	bne.w	2778 <usb_isr+0x54c>
    2648:	cmp.w	ip, #64	; 0x40
    264c:	bne.n	2686 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    264e:	orr.w	ip, r4, #2
    2652:	add.w	r3, r9, ip, lsl #3
    2656:	ldr	r4, [sp, #8]
    2658:	ldr.w	lr, [pc, #468]	; 2830 <usb_isr+0x604>
    265c:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    265e:	cmp	r2, #0
    2660:	bne.w	27a4 <usb_isr+0x578>
    2664:	lsls	r2, r0, #16
    2666:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    266a:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    266e:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2672:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2674:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2676:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2678:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    267a:	cmp	r0, #64	; 0x40
    267c:	bne.n	2686 <usb_isr+0x45a>
    267e:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    2680:	ldr	r2, [pc, #452]	; (2848 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    2682:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    2684:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2686:	ldr	r2, [pc, #452]	; (284c <usb_isr+0x620>)
    2688:	movs	r3, #1
    268a:	strb	r3, [r2, #0]
    268c:	b.n	2446 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    268e:	bl	13ec <usb_serial_flush_callback>
    2692:	b.n	2300 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2694:	ldr	r3, [pc, #408]	; (2830 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2696:	ldr	r0, [pc, #436]	; (284c <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    2698:	ldr	r1, [pc, #412]	; (2838 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    269a:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    269c:	mov.w	lr, #2
    26a0:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    26a4:	ldr	r7, [pc, #424]	; (2850 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    26a6:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    26a8:	ldr	r1, [pc, #424]	; (2854 <usb_isr+0x628>)
    26aa:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    26ac:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    26ae:	ldr	r6, [pc, #424]	; (2858 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    26b0:	ldr	r5, [pc, #424]	; (285c <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    26b2:	ldr	r4, [pc, #428]	; (2860 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    26b4:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    26b6:	movs	r1, #13
    26b8:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    26ba:	movs	r1, #255	; 0xff
    26bc:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    26be:	ldr.w	lr, [pc, #452]	; 2884 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    26c2:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    26c4:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    26c6:	ldr	r5, [pc, #412]	; (2864 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    26c8:	ldr	r2, [pc, #412]	; (2868 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    26ca:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    26ce:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    26d0:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    26d2:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    26d6:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    26d8:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    26da:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    26dc:	add	sp, #28
    26de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    26e2:	ldr	r2, [pc, #392]	; (286c <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    26e4:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    26e8:	ldrb	r3, [r2, #0]
    26ea:	adds	r3, #1
    26ec:	strb	r3, [r2, #0]
    26ee:	b.n	22c0 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    26f0:	str.w	r0, [r3, r6, lsl #2]
    26f4:	ldr	r5, [pc, #376]	; (2870 <usb_isr+0x644>)
    26f6:	b.n	228e <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    26f8:	ldrb	r3, [r1, r6]
    26fa:	cmp	r3, #3
    26fc:	bhi.n	27d4 <usb_isr+0x5a8>
    26fe:	add	r2, pc, #4	; (adr r2, 2704 <usb_isr+0x4d8>)
    2700:	ldr.w	pc, [r2, r3, lsl #2]
    2704:	.word	0x000022c1
    2708:	.word	0x000022c1
    270c:	.word	0x00002759
    2710:	.word	0x00002753
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2714:	ldr	r1, [pc, #312]	; (2850 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    2716:	ldr	r3, [pc, #324]	; (285c <usb_isr+0x630>)
    2718:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    271a:	movs	r0, #13
    271c:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    271e:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2720:	lsls	r2, r4, #30
    2722:	bpl.w	24c6 <usb_isr+0x29a>
    2726:	b.n	24b8 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2728:	movw	r2, #770	; 0x302
    272c:	cmp	r1, r2
    272e:	bne.w	29ee <usb_isr+0x7c2>
    2732:	ldrh	r1, [r5, #4]
    2734:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2738:	cmp	r1, #5
    273a:	bhi.n	276a <usb_isr+0x53e>
    273c:	ldrh	r2, [r5, #2]
    273e:	cbnz	r2, 276a <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    2740:	ldr	r4, [pc, #268]	; (2850 <usb_isr+0x624>)
    2742:	str	r0, [sp, #4]
    2744:	lsls	r1, r1, #2
    2746:	add	r4, r1
    2748:	ldrb	r1, [r4, #0]
    274a:	orr.w	r1, r1, #2
    274e:	strb	r1, [r4, #0]
    2750:	b.n	2602 <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2752:	movs	r3, #1
    2754:	strb	r3, [r1, r6]
						break;
    2756:	b.n	22c0 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2758:	movs	r3, #0
    275a:	strb	r3, [r1, r6]
						break;
    275c:	b.n	22c0 <usb_isr+0x94>
    275e:	ldrh	r1, [r5, #4]
    2760:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2764:	cmp	r1, #5
    2766:	bls.w	2a08 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    276a:	ldr	r2, [pc, #228]	; (2850 <usb_isr+0x624>)
    276c:	movs	r3, #15
    276e:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2770:	ldr	r2, [pc, #216]	; (284c <usb_isr+0x620>)
    2772:	movs	r3, #1
    2774:	strb	r3, [r2, #0]
    2776:	b.n	2446 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2778:	cmp	r0, #64	; 0x40
    277a:	bls.w	264e <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    277e:	orr.w	r4, r4, #2
    2782:	add.w	r1, lr, r4, lsl #3
    2786:	ldr	r6, [sp, #8]
    2788:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    278a:	cbz	r2, 27bc <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    278c:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2790:	ldr	r2, [pc, #224]	; (2874 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    2792:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2794:	mov	r3, r6
    2796:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2798:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    279c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    279e:	str.w	r2, [lr, r4, lsl #3]
    27a2:	b.n	2680 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    27a4:	ldrb.w	r3, [sp, #4]
    27a8:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    27aa:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    27ac:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    27ae:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    27b0:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    27b4:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    27b6:	str.w	r2, [lr, ip, lsl #3]
    27ba:	b.n	267a <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    27bc:	ldrb.w	r1, [sp, #4]
    27c0:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    27c2:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    27c4:	ldr	r2, [pc, #140]	; (2854 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    27c6:	strb.w	r5, [r8]
    27ca:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    27cc:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    27ce:	str.w	r2, [lr, r4, lsl #3]
    27d2:	b.n	2680 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    27d4:	tst.w	r9, #8
    27d8:	ite	eq
    27da:	moveq	r3, #2
    27dc:	movne	r3, #3
    27de:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    27e0:	b.n	22c0 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    27e2:	ldr	r2, [pc, #148]	; (2878 <usb_isr+0x64c>)
    27e4:	movs	r1, #15
    27e6:	strb	r1, [r2, #0]
    27e8:	b.n	25b6 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    27ea:	ldr	r2, [pc, #64]	; (282c <usb_isr+0x600>)
    27ec:	ldr	r4, [pc, #140]	; (287c <usb_isr+0x650>)
    27ee:	ldrb	r2, [r2, #0]
    27f0:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    27f2:	ldrh	r2, [r5, #6]
    27f4:	cmp	r2, r0
    27f6:	bcs.w	2bbc <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    27fa:	ldr	r1, [pc, #60]	; (2838 <usb_isr+0x60c>)
    27fc:	ldrb	r5, [r1, #0]
    27fe:	cmp	r2, #64	; 0x40
    2800:	mov	ip, r2
    2802:	orr.w	lr, r5, #2
    2806:	it	cs
    2808:	movcs.w	ip, #64	; 0x40
    280c:	add.w	r3, r4, ip
    2810:	add.w	r0, r9, lr, lsl #3
    2814:	str	r3, [sp, #8]
    2816:	movs	r3, #1
    2818:	str	r4, [r0, #4]
    281a:	mov.w	r8, ip, lsl #16
    281e:	rsb	r0, ip, r2
    2822:	str	r3, [sp, #4]
    2824:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2826:	movs	r4, #200	; 0xc8
    2828:	b.n	2628 <usb_isr+0x3fc>
    282a:	nop
    282c:	.word	0x1fff194c
    2830:	.word	0x1fff0000
    2834:	.word	0x1fff1ca8
    2838:	.word	0x1fff1940
    283c:	.word	0x1fff18cc
    2840:	.word	0x1fff1cb0
    2844:	.word	0x1fff17f0
    2848:	.word	0x1fff1874
    284c:	.word	0x40072094
    2850:	.word	0x400720c0
    2854:	.word	0x00400088
    2858:	.word	0x40072088
    285c:	.word	0x40072080
    2860:	.word	0x40072098
    2864:	.word	0x1fff1878
    2868:	.word	0x1fff18d0
    286c:	.word	0x1fff1941
    2870:	.word	0x1fff1860
    2874:	.word	0x004000c8
    2878:	.word	0x1fff18cd
    287c:	.word	0x1fff1944
    2880:	.word	0x1fff17f8
    2884:	.word	0x4007208c
    2888:	ldr	r4, [pc, #704]	; (2b4c <usb_isr+0x920>)
    288a:	ldr	r2, [pc, #708]	; (2b50 <usb_isr+0x924>)
    288c:	ldr	r1, [pc, #708]	; (2b54 <usb_isr+0x928>)
    288e:	ldr	r0, [pc, #712]	; (2b58 <usb_isr+0x92c>)
    2890:	ldr	r5, [pc, #712]	; (2b5c <usb_isr+0x930>)
    2892:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2894:	movs	r3, #0
    2896:	ldr	r4, [pc, #712]	; (2b60 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2898:	str	r4, [sp, #8]
    289a:	str	r6, [sp, #20]
    289c:	str	r5, [sp, #12]
    289e:	mov	r8, r0
    28a0:	mov	r4, r3
    28a2:	str	r7, [sp, #16]
    28a4:	mov	r6, r2
    28a6:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    28a8:	ldr	r0, [r6, #0]
			while (p) {
    28aa:	cbz	r0, 28b8 <usb_isr+0x68c>
				n = p->next;
    28ac:	ldr	r7, [r0, #4]
				usb_free(p);
    28ae:	bl	200c <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    28b2:	mov	r0, r7
    28b4:	cmp	r7, #0
    28b6:	bne.n	28ac <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    28b8:	movs	r3, #0
    28ba:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    28bc:	ldr	r3, [sp, #12]
			p = tx_first[i];
    28be:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    28c0:	mov	r2, r3
    28c2:	movs	r3, #0
    28c4:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    28c8:	cbz	r0, 28d6 <usb_isr+0x6aa>
				n = p->next;
    28ca:	ldr	r7, [r0, #4]
				usb_free(p);
    28cc:	bl	200c <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    28d0:	mov	r0, r7
    28d2:	cmp	r7, #0
    28d4:	bne.n	28ca <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    28d6:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    28d8:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    28da:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    28dc:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    28de:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    28e2:	ldr	r2, [sp, #8]
    28e4:	mov.w	r1, #0
			switch (tx_state[i]) {
    28e8:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    28ea:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    28ee:	cmp	r3, #3
    28f0:	bhi.n	2902 <usb_isr+0x6d6>
    28f2:	tbb	[pc, r3]
    28f6:	.short	0x0258
    28f8:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    28fa:	ldr	r3, [sp, #4]
    28fc:	mov.w	r2, #1
    2900:	strb	r2, [r3, #0]
    2902:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    2904:	adds	r4, #1
    2906:	adds	r3, #1
    2908:	cmp	r4, #5
    290a:	add.w	r6, r6, #4
    290e:	add.w	r5, r5, #4
    2912:	str	r3, [sp, #4]
    2914:	bne.n	28a8 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2916:	ldr	r4, [pc, #588]	; (2b64 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    2918:	ldr	r5, [pc, #588]	; (2b68 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    291a:	ldrb	r2, [r4, #0]
			*reg = epconf;
    291c:	ldr	r3, [pc, #588]	; (2b6c <usb_isr+0x940>)
    291e:	ldr	r7, [sp, #16]
    2920:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    2922:	movs	r1, #0
    2924:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2926:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2928:	lsls	r2, r2, #28
    292a:	bmi.n	2a22 <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    292c:	ldrb	r2, [r4, #1]
			*reg = epconf;
    292e:	ldr	r1, [pc, #576]	; (2b70 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2930:	ldr.w	r8, [pc, #588]	; 2b80 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2934:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2936:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2938:	mov.w	r1, #0
    293c:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    2940:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2944:	bmi.w	2ace <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2948:	ldrb	r2, [r4, #2]
			*reg = epconf;
    294a:	ldr	r1, [pc, #552]	; (2b74 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    294c:	ldr.w	r8, [pc, #560]	; 2b80 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2950:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2952:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2954:	mov.w	r1, #0
    2958:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    295c:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2960:	bmi.w	2aa6 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2964:	ldr	r1, [pc, #528]	; (2b78 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2966:	ldrb	r2, [r4, #3]
			*reg = epconf;
    2968:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    296a:	movs	r1, #0
    296c:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    2970:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2974:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2976:	ldr.w	r8, [pc, #520]	; 2b80 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    297a:	bmi.n	2a78 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    297c:	ldrb	r2, [r4, #4]
			*reg = epconf;
    297e:	ldr	r1, [pc, #508]	; (2b7c <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2980:	ldr	r4, [pc, #508]	; (2b80 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2982:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2984:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2986:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2988:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    298c:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2990:	bmi.n	2a4e <usb_isr+0x822>
    2992:	ldrb	r3, [r6, #0]
    2994:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2996:	movs	r1, #0
    2998:	eor.w	r2, r3, #1
    299c:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    29a0:	str.w	r1, [r9, #184]	; 0xb8
    29a4:	b.n	2602 <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    29a6:	ldr	r3, [sp, #4]
    29a8:	mov.w	r2, #0
    29ac:	strb	r2, [r3, #0]
    29ae:	b.n	2902 <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    29b0:	ldr	r2, [pc, #464]	; (2b84 <usb_isr+0x958>)
    29b2:	ldr	r4, [r2, #4]
    29b4:	cmp	r4, #0
    29b6:	beq.w	276a <usb_isr+0x53e>
    29ba:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    29bc:	ldrh.w	lr, [r5, #4]
    29c0:	b.n	29cc <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    29c2:	adds	r2, #12
			if (list->addr == NULL) break;
    29c4:	ldr	r4, [r2, #4]
    29c6:	cmp	r4, #0
    29c8:	beq.w	276a <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    29cc:	ldrh	r3, [r2, #0]
    29ce:	cmp	r3, r0
    29d0:	bne.n	29c2 <usb_isr+0x796>
    29d2:	ldrh	r3, [r2, #2]
    29d4:	cmp	r3, lr
    29d6:	bne.n	29c2 <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    29d8:	lsrs	r0, r0, #8
    29da:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    29dc:	ite	eq
    29de:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    29e0:	ldrhne	r0, [r2, #8]
    29e2:	b.n	27f2 <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    29e4:	ldr	r4, [pc, #416]	; (2b88 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    29e6:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    29e8:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    29ea:	strb	r2, [r4, #1]
    29ec:	b.n	27f2 <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    29ee:	cmp.w	r1, #1280	; 0x500
    29f2:	bne.w	276a <usb_isr+0x53e>
    29f6:	movs	r3, #1
    29f8:	movs	r2, #0
    29fa:	str	r3, [sp, #4]
    29fc:	b.n	2602 <usb_isr+0x3d6>
    29fe:	movw	r2, #8993	; 0x2321
    2a02:	cmp	r1, r2
    2a04:	beq.n	29f6 <usb_isr+0x7ca>
    2a06:	b.n	276a <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2a08:	ldrh	r2, [r5, #2]
    2a0a:	cmp	r2, #0
    2a0c:	bne.w	276a <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    2a10:	ldr	r4, [pc, #376]	; (2b8c <usb_isr+0x960>)
    2a12:	str	r0, [sp, #4]
    2a14:	lsls	r1, r1, #2
    2a16:	add	r4, r1
    2a18:	ldrb	r1, [r4, #0]
    2a1a:	bic.w	r1, r1, #2
    2a1e:	strb	r1, [r4, #0]
    2a20:	b.n	2602 <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2a22:	bl	1fcc <usb_malloc>
				if (p) {
    2a26:	cmp	r0, #0
    2a28:	beq.w	2b98 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    2a2c:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2a2e:	ldr	r2, [pc, #352]	; (2b90 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2a30:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2a34:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2a38:	bl	1fcc <usb_malloc>
				if (p) {
    2a3c:	cmp	r0, #0
    2a3e:	beq.n	2b40 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    2a40:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2a42:	ldr	r2, [pc, #336]	; (2b94 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2a44:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2a48:	str.w	r2, [r9, #40]	; 0x28
    2a4c:	b.n	292c <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2a4e:	bl	1fcc <usb_malloc>
				if (p) {
    2a52:	cmp	r0, #0
    2a54:	beq.n	2b04 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    2a56:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2a58:	ldr	r2, [pc, #308]	; (2b90 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2a5a:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2a5e:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2a62:	bl	1fcc <usb_malloc>
				if (p) {
    2a66:	cmp	r0, #0
    2a68:	beq.n	2af8 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    2a6a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2a6c:	ldr	r2, [pc, #292]	; (2b94 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2a6e:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2a72:	str.w	r2, [r9, #168]	; 0xa8
    2a76:	b.n	2992 <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2a78:	bl	1fcc <usb_malloc>
				if (p) {
    2a7c:	cmp	r0, #0
    2a7e:	beq.w	2bb0 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    2a82:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2a84:	ldr	r2, [pc, #264]	; (2b90 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2a86:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2a8a:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2a8e:	bl	1fcc <usb_malloc>
				if (p) {
    2a92:	cmp	r0, #0
    2a94:	beq.w	2ba4 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    2a98:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2a9a:	ldr	r2, [pc, #248]	; (2b94 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2a9c:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2aa0:	str.w	r2, [r9, #136]	; 0x88
    2aa4:	b.n	297c <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2aa6:	bl	1fcc <usb_malloc>
				if (p) {
    2aaa:	cmp	r0, #0
    2aac:	beq.n	2b34 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    2aae:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2ab0:	ldr	r2, [pc, #220]	; (2b90 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2ab2:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2ab6:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2aba:	bl	1fcc <usb_malloc>
				if (p) {
    2abe:	cbz	r0, 2b28 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    2ac0:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2ac2:	ldr	r2, [pc, #208]	; (2b94 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2ac4:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2ac8:	str.w	r2, [r9, #104]	; 0x68
    2acc:	b.n	2964 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2ace:	bl	1fcc <usb_malloc>
				if (p) {
    2ad2:	cbz	r0, 2b1c <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    2ad4:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2ad6:	ldr	r2, [pc, #184]	; (2b90 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2ad8:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2adc:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2ae0:	bl	1fcc <usb_malloc>
				if (p) {
    2ae4:	cbz	r0, 2b10 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    2ae6:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2ae8:	ldr	r2, [pc, #168]	; (2b94 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2aea:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2aee:	str.w	r2, [r9, #72]	; 0x48
    2af2:	b.n	2948 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    2af4:	movs	r0, #2
    2af6:	b.n	27f2 <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2af8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2afa:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    2afe:	adds	r2, #1
    2b00:	strb	r2, [r5, #0]
    2b02:	b.n	2992 <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2b04:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2b06:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    2b0a:	adds	r2, #1
    2b0c:	strb	r2, [r5, #0]
    2b0e:	b.n	2a62 <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2b10:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2b12:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    2b16:	adds	r2, #1
    2b18:	strb	r2, [r5, #0]
    2b1a:	b.n	2948 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2b1c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2b1e:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    2b22:	adds	r2, #1
    2b24:	strb	r2, [r5, #0]
    2b26:	b.n	2ae0 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2b28:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2b2a:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    2b2e:	adds	r2, #1
    2b30:	strb	r2, [r5, #0]
    2b32:	b.n	2964 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2b34:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2b36:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    2b3a:	adds	r2, #1
    2b3c:	strb	r2, [r5, #0]
    2b3e:	b.n	2aba <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2b40:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2b42:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    2b46:	adds	r2, #1
    2b48:	strb	r2, [r5, #0]
    2b4a:	b.n	292c <usb_isr+0x700>
    2b4c:	.word	0x1fff1950
    2b50:	.word	0x1fff18b8
    2b54:	.word	0x1fff1910
    2b58:	.word	0x1fff1924
    2b5c:	.word	0x1fff1860
    2b60:	.word	0x1fff1de0
    2b64:	.word	0x00004430
    2b68:	.word	0x1fff1941
    2b6c:	.word	0x400720c4
    2b70:	.word	0x400720c8
    2b74:	.word	0x400720cc
    2b78:	.word	0x400720d0
    2b7c:	.word	0x400720d4
    2b80:	.word	0x1fff0000
    2b84:	.word	0x00004438
    2b88:	.word	0x1fff1944
    2b8c:	.word	0x400720c0
    2b90:	.word	0x00400088
    2b94:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2b98:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2b9a:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    2b9e:	adds	r2, #1
    2ba0:	strb	r2, [r5, #0]
    2ba2:	b.n	2a38 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2ba4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2ba6:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    2baa:	adds	r2, #1
    2bac:	strb	r2, [r5, #0]
    2bae:	b.n	297c <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2bb0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2bb2:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    2bb6:	adds	r2, #1
    2bb8:	strb	r2, [r5, #0]
    2bba:	b.n	2a8e <usb_isr+0x862>
    2bbc:	cmp	r0, #64	; 0x40
    2bbe:	mov	ip, r0
    2bc0:	it	cs
    2bc2:	movcs.w	ip, #64	; 0x40
    2bc6:	add.w	r3, r4, ip
    2bca:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2bcc:	movs	r3, #1
    2bce:	rsb	r0, ip, r0
    2bd2:	mov.w	r8, ip, lsl #16
    2bd6:	movs	r2, #0
    2bd8:	str	r3, [sp, #4]
    2bda:	b.n	260c <usb_isr+0x3e0>

00002bdc <usb_init>:
}



void usb_init(void)
{
    2bdc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2be0:	ldr	r4, [pc, #156]	; (2c80 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    2be2:	bl	341c <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2be6:	movs	r2, #0
    2be8:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    2bec:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2bee:	str	r2, [r3, #0]
		table[i].addr = 0;
    2bf0:	str	r2, [r3, #4]
    2bf2:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    2bf4:	cmp	r3, r0
		table[i].desc = 0;
    2bf6:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    2bfa:	bne.n	2bee <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2bfc:	ldr	r0, [pc, #132]	; (2c84 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    2bfe:	ldr	r2, [pc, #136]	; (2c88 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2c00:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    2c02:	ldr.w	lr, [pc, #156]	; 2ca0 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    2c06:	ldr	r6, [pc, #132]	; (2c8c <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2c08:	ldr	r5, [pc, #132]	; (2c90 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2c0a:	ldr	r7, [pc, #136]	; (2c94 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2c0c:	ldr.w	ip, [pc, #148]	; 2ca4 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    2c10:	ldr.w	r8, [pc, #148]	; 2ca8 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2c14:	orr.w	r3, r3, #262144	; 0x40000
    2c18:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    2c1a:	ldr	r3, [r2, #0]
    2c1c:	orr.w	r3, r3, #50331648	; 0x3000000
    2c20:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    2c22:	movs	r3, #3
    2c24:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    2c28:	movs	r3, #160	; 0xa0
    2c2a:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2c2c:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2c30:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2c34:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2c38:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2c3a:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2c3c:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2c40:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2c42:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2c44:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2c46:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2c48:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2c4a:	ldr	r5, [pc, #76]	; (2c98 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2c4c:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2c50:	ldr	r0, [pc, #72]	; (2c9c <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    2c52:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    2c56:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    2c58:	movs	r3, #1
    2c5a:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2c5e:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2c62:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2c66:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2c68:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    2c6a:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2c6e:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2c70:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2c72:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2c76:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2c7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c7e:	nop
    2c80:	.word	0x1fff0000
    2c84:	.word	0x40048034
    2c88:	.word	0x4000d800
    2c8c:	.word	0x40072140
    2c90:	.word	0x4007209c
    2c94:	.word	0x400720b0
    2c98:	.word	0xe000e435
    2c9c:	.word	0xe000e104
    2ca0:	.word	0x40072144
    2ca4:	.word	0x40072080
    2ca8:	.word	0x40072088

00002cac <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2cac:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    2cae:	ldr	r4, [pc, #176]	; (2d60 <yield+0xb4>)
    2cb0:	ldrb	r3, [r4, #0]
    2cb2:	cbz	r3, 2cb6 <yield+0xa>
    2cb4:	pop	{r3, r4, r5, pc}
	running = 1;
    2cb6:	movs	r3, #1
    2cb8:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2cba:	bl	11d8 <usb_serial_available>
	if (Serial.available()) serialEvent();
    2cbe:	cmp	r0, #0
    2cc0:	bne.n	2d48 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    2cc2:	bl	31ec <serial_available>
	if (Serial1.available()) serialEvent1();
    2cc6:	cmp	r0, #0
    2cc8:	bne.n	2d42 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    2cca:	bl	2ed4 <serial2_available>
	if (Serial2.available()) serialEvent2();
    2cce:	cmp	r0, #0
    2cd0:	bne.n	2d3c <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    2cd2:	bl	34ec <serial3_available>
	if (Serial3.available()) serialEvent3();
    2cd6:	cbnz	r0, 2d36 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    2cd8:	bl	3000 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2cdc:	cbnz	r0, 2d30 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    2cde:	bl	2ddc <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2ce2:	cbnz	r0, 2d2a <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    2ce4:	bl	3318 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2ce8:	cbnz	r0, 2d24 <yield+0x78>
#endif
	running = 0;
    2cea:	movs	r3, #0
    2cec:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2cee:	mrs	r3, IPSR
		if (ipsr != 0) return;
    2cf2:	cmp	r3, #0
    2cf4:	bne.n	2cb4 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2cf6:	mrs	r1, PRIMASK
		__disable_irq();
    2cfa:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    2cfc:	ldr	r3, [pc, #100]	; (2d64 <yield+0xb8>)
    2cfe:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    2d00:	cbz	r0, 2d4e <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    2d02:	ldr	r4, [pc, #100]	; (2d68 <yield+0xbc>)
    2d04:	ldrb	r2, [r4, #0]
    2d06:	cbnz	r2, 2d4e <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    2d08:	ldr	r5, [r0, #20]
    2d0a:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2d0c:	movs	r3, #1
    2d0e:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    2d10:	cbz	r5, 2d56 <yield+0xaa>
			firstYield->_prev = nullptr;
    2d12:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2d14:	cbnz	r1, 2d18 <yield+0x6c>
    2d16:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2d18:	movs	r5, #0
    2d1a:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    2d1c:	ldr	r3, [r0, #8]
    2d1e:	blx	r3
		runningFromYield = false;
    2d20:	strb	r5, [r4, #0]
    2d22:	b.n	2cb4 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2d24:	bl	2dd8 <serialEvent6()>
    2d28:	b.n	2cea <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2d2a:	bl	2d70 <serialEvent5()>
    2d2e:	b.n	2ce4 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2d30:	bl	2dc4 <serialEvent4()>
    2d34:	b.n	2cde <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    2d36:	bl	35e8 <serialEvent3()>
    2d3a:	b.n	2cd8 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    2d3c:	bl	2dc0 <serialEvent2()>
    2d40:	b.n	2cd2 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    2d42:	bl	35e4 <serialEvent1()>
    2d46:	b.n	2cca <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    2d48:	bl	2d9c <serialEvent()>
    2d4c:	b.n	2cc2 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2d4e:	cmp	r1, #0
    2d50:	bne.n	2cb4 <yield+0x8>
    2d52:	cpsie	i
    2d54:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    2d56:	ldr	r3, [pc, #20]	; (2d6c <yield+0xc0>)
    2d58:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2d5a:	cmp	r1, #0
    2d5c:	bne.n	2d18 <yield+0x6c>
    2d5e:	b.n	2d16 <yield+0x6a>
    2d60:	.word	0x1fff1955
    2d64:	.word	0x1fff1c68
    2d68:	.word	0x1fff1c6c
    2d6c:	.word	0x1fff1c64

00002d70 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    2d70:	bx	lr
    2d72:	nop

00002d74 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    2d74:	b.w	11f4 <usb_serial_flush_input>

00002d78 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    2d78:	b.w	11a8 <usb_serial_peekchar>

00002d7c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    2d7c:	b.w	1160 <usb_serial_getchar>

00002d80 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2d80:	b.w	11d8 <usb_serial_available>

00002d84 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2d84:	b.w	1394 <usb_serial_flush_output>

00002d88 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2d88:	b.w	134c <usb_serial_write_buffer_free>

00002d8c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2d8c:	mov	r0, r1
    2d8e:	mov	r1, r2
    2d90:	b.w	122c <usb_serial_write>

00002d94 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2d94:	mov	r0, r1
    2d96:	b.w	1334 <usb_serial_putchar>
    2d9a:	nop

00002d9c <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    2d9c:	bx	lr
    2d9e:	nop

00002da0 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2da0:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    2da2:	ldr	r2, [pc, #24]	; (2dbc <Print::println()+0x1c>)
	return write(buf, 2);
    2da4:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2da6:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    2da8:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2daa:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    2dac:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2dae:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    2db2:	movs	r2, #2
    2db4:	blx	r3
}
    2db6:	add	sp, #12
    2db8:	ldr.w	pc, [sp], #4
    2dbc:	.word	0x0000442c

00002dc0 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    2dc0:	bx	lr
    2dc2:	nop

00002dc4 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    2dc4:	bx	lr
    2dc6:	nop

00002dc8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2dc8:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    2dca:	bl	490 <setup>
	while (1) {
		loop();
    2dce:	bl	494 <loop>
		yield();
    2dd2:	bl	2cac <yield>
    2dd6:	b.n	2dce <main+0x6>

00002dd8 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    2dd8:	bx	lr
    2dda:	nop

00002ddc <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2ddc:	ldr	r2, [pc, #20]	; (2df4 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    2dde:	ldr	r3, [pc, #24]	; (2df8 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2de0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2de2:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2de4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2de6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2de8:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    2dea:	it	cc
    2dec:	addcc	r0, #64	; 0x40
    2dee:	subs	r0, r0, r3
}
    2df0:	bx	lr
    2df2:	nop
    2df4:	.word	0x1fff195c
    2df8:	.word	0x1fff195d

00002dfc <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    2dfc:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    2dfe:	ldr	r3, [pc, #172]	; (2eac <uart4_status_isr+0xb0>)
    2e00:	ldrb	r2, [r3, #4]
    2e02:	lsls	r4, r2, #26
    2e04:	bpl.n	2e46 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2e06:	ldr	r0, [pc, #168]	; (2eb0 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2e08:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    2e0a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2e0c:	ldr	r1, [pc, #164]	; (2eb4 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2e0e:	adds	r3, #1
    2e10:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2e12:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    2e14:	it	gt
    2e16:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2e18:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    2e1a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    2e1c:	beq.n	2e26 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    2e1e:	ldr	r4, [pc, #152]	; (2eb8 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    2e20:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    2e22:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    2e24:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    2e26:	ldr	r2, [pc, #148]	; (2ebc <uart4_status_isr+0xc0>)
    2e28:	ldr	r1, [r2, #0]
    2e2a:	cbz	r1, 2e46 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    2e2c:	ldr	r2, [pc, #144]	; (2ec0 <uart4_status_isr+0xc4>)
    2e2e:	ldrb	r2, [r2, #0]
    2e30:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    2e32:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2e34:	itet	cc
    2e36:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    2e3a:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    2e3c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2e3e:	cmp	r3, #39	; 0x27
    2e40:	itt	gt
    2e42:	movgt	r3, #1
    2e44:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    2e46:	ldr	r2, [pc, #100]	; (2eac <uart4_status_isr+0xb0>)
    2e48:	ldrb	r3, [r2, #3]
    2e4a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2e4c:	lsls	r0, r3, #24
    2e4e:	bmi.n	2e74 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    2e50:	lsls	r2, r3, #25
    2e52:	bpl.n	2e70 <uart4_status_isr+0x74>
    2e54:	ldr	r3, [pc, #84]	; (2eac <uart4_status_isr+0xb0>)
    2e56:	ldrb	r3, [r3, #4]
    2e58:	lsls	r3, r3, #25
    2e5a:	bpl.n	2e70 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2e5c:	ldr	r3, [pc, #100]	; (2ec4 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2e5e:	ldr	r1, [pc, #104]	; (2ec8 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    2e60:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    2e62:	movs	r2, #0
    2e64:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2e66:	cbz	r3, 2e6a <uart4_status_isr+0x6e>
    2e68:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    2e6a:	ldr	r3, [pc, #64]	; (2eac <uart4_status_isr+0xb0>)
    2e6c:	movs	r2, #44	; 0x2c
    2e6e:	strb	r2, [r3, #3]
	}
}
    2e70:	pop	{r4, r5}
    2e72:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    2e74:	ldrb	r1, [r2, #4]
    2e76:	lsls	r1, r1, #24
    2e78:	bpl.n	2e50 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    2e7a:	ldr	r1, [pc, #80]	; (2ecc <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    2e7c:	ldr	r0, [pc, #64]	; (2ec0 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2e7e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    2e80:	ldrb	r1, [r0, #0]
    2e82:	uxtb	r1, r1
		if (head == tail) {
    2e84:	cmp	r4, r1
    2e86:	beq.n	2ea4 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    2e88:	adds	r2, r1, #1
    2e8a:	cmp	r2, #39	; 0x27
    2e8c:	itt	hi
    2e8e:	movhi	r1, #0
    2e90:	movhi	r2, r1
			n = tx_buffer[tail];
    2e92:	ldr	r5, [pc, #60]	; (2ed0 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2e94:	ldr	r4, [pc, #20]	; (2eac <uart4_status_isr+0xb0>)
    2e96:	it	ls
    2e98:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    2e9a:	ldrb	r2, [r5, r2]
    2e9c:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    2e9e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    2ea0:	strb	r1, [r0, #0]
    2ea2:	b.n	2e50 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    2ea4:	movs	r1, #108	; 0x6c
    2ea6:	strb	r1, [r2, #3]
    2ea8:	b.n	2e50 <uart4_status_isr+0x54>
    2eaa:	nop
    2eac:	.word	0x400ea000
    2eb0:	.word	0x1fff195c
    2eb4:	.word	0x1fff195d
    2eb8:	.word	0x1fff1988
    2ebc:	.word	0x1fff1958
    2ec0:	.word	0x1fff19c9
    2ec4:	.word	0x1fff19cc
    2ec8:	.word	0x1fff19c8
    2ecc:	.word	0x1fff19d0
    2ed0:	.word	0x1fff1960

00002ed4 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2ed4:	ldr	r2, [pc, #20]	; (2eec <serial2_available+0x18>)
	tail = rx_buffer_tail;
    2ed6:	ldr	r3, [pc, #24]	; (2ef0 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2ed8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2eda:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2edc:	uxtb	r0, r0
	tail = rx_buffer_tail;
    2ede:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2ee0:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    2ee2:	it	cc
    2ee4:	addcc	r0, #64	; 0x40
    2ee6:	subs	r0, r0, r3
}
    2ee8:	bx	lr
    2eea:	nop
    2eec:	.word	0x1fff1a44
    2ef0:	.word	0x1fff19d9

00002ef4 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    2ef4:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    2ef6:	ldr	r3, [pc, #224]	; (2fd8 <uart1_status_isr+0xe4>)
    2ef8:	ldrb	r2, [r3, #4]
    2efa:	tst.w	r2, #48	; 0x30
    2efe:	beq.n	2f5a <uart1_status_isr+0x66>
		__disable_irq();
    2f00:	cpsid	i
		avail = UART1_RCFIFO;
    2f02:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    2f04:	and.w	r2, r1, #255	; 0xff
    2f08:	cmp	r1, #0
    2f0a:	beq.n	2f88 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    2f0c:	cpsie	i
			head = rx_buffer_head;
    2f0e:	ldr	r7, [pc, #204]	; (2fdc <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    2f10:	ldr	r1, [pc, #204]	; (2fe0 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2f12:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    2f14:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2f16:	ldr	r6, [pc, #204]	; (2fe4 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2f18:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2f1a:	uxtb	r0, r0
			tail = rx_buffer_tail;
    2f1c:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    2f1e:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2f20:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2f22:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    2f24:	it	cs
    2f26:	movcs	r3, #0
				if (newhead != tail) {
    2f28:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    2f2a:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    2f2e:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2f30:	itt	ne
    2f32:	strbne	r1, [r6, r3]
    2f34:	movne	r0, r3
				}
			} while (--avail > 0);
    2f36:	ands.w	r2, r2, #255	; 0xff
    2f3a:	bne.n	2f1e <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    2f3c:	ldr	r3, [pc, #168]	; (2fe8 <uart1_status_isr+0xf4>)
    2f3e:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    2f40:	uxtb	r2, r0
    2f42:	strb	r2, [r7, #0]
			if (rts_pin) {
    2f44:	cbz	r3, 2f5a <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    2f46:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2f48:	itet	cc
    2f4a:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    2f4e:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    2f50:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2f52:	cmp	r0, #39	; 0x27
    2f54:	itt	gt
    2f56:	movgt	r2, #1
    2f58:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    2f5a:	ldr	r1, [pc, #124]	; (2fd8 <uart1_status_isr+0xe4>)
    2f5c:	ldrb	r2, [r1, #3]
    2f5e:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2f60:	lsls	r5, r2, #24
    2f62:	bmi.n	2f92 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    2f64:	lsls	r2, r2, #25
    2f66:	bpl.n	2f84 <uart1_status_isr+0x90>
    2f68:	ldr	r3, [pc, #108]	; (2fd8 <uart1_status_isr+0xe4>)
    2f6a:	ldrb	r3, [r3, #4]
    2f6c:	lsls	r3, r3, #25
    2f6e:	bpl.n	2f84 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2f70:	ldr	r3, [pc, #120]	; (2fec <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2f72:	ldr	r1, [pc, #124]	; (2ff0 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    2f74:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    2f76:	movs	r2, #0
    2f78:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2f7a:	cbz	r3, 2f7e <uart1_status_isr+0x8a>
    2f7c:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    2f7e:	ldr	r3, [pc, #88]	; (2fd8 <uart1_status_isr+0xe4>)
    2f80:	movs	r2, #60	; 0x3c
    2f82:	strb	r2, [r3, #3]
	}
}
    2f84:	pop	{r4, r5, r6, r7}
    2f86:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2f88:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    2f8a:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    2f8c:	strb	r2, [r3, #17]
			__enable_irq();
    2f8e:	cpsie	i
    2f90:	b.n	2f5a <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    2f92:	ldrb	r3, [r1, #4]
    2f94:	lsls	r4, r3, #24
    2f96:	bpl.n	2f64 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    2f98:	ldr	r3, [pc, #88]	; (2ff4 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    2f9a:	ldr	r6, [pc, #92]	; (2ff8 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2f9c:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    2f9e:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2fa0:	uxtb	r4, r4
		tail = tx_buffer_tail;
    2fa2:	uxtb	r3, r3
		do {
			if (tail == head) break;
    2fa4:	cmp	r4, r3
    2fa6:	beq.n	2fc6 <uart1_status_isr+0xd2>
    2fa8:	ldr	r5, [pc, #80]	; (2ffc <uart1_status_isr+0x108>)
    2faa:	b.n	2fb0 <uart1_status_isr+0xbc>
    2fac:	cmp	r3, r4
    2fae:	beq.n	2fc6 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    2fb0:	adds	r3, #1
    2fb2:	cmp	r3, #40	; 0x28
    2fb4:	it	cs
    2fb6:	movcs	r3, #0
			avail = UART1_S1;
    2fb8:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    2fba:	ldrb	r0, [r5, r3]
    2fbc:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    2fbe:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    2fc0:	ldrb	r0, [r1, #20]
    2fc2:	cmp	r0, #7
    2fc4:	bls.n	2fac <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    2fc6:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2fc8:	ldr	r1, [pc, #12]	; (2fd8 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    2fca:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    2fcc:	ldrb	r3, [r1, #4]
    2fce:	lsls	r0, r3, #24
    2fd0:	itt	mi
    2fd2:	movmi	r3, #124	; 0x7c
    2fd4:	strbmi	r3, [r1, #3]
    2fd6:	b.n	2f64 <uart1_status_isr+0x70>
    2fd8:	.word	0x4006b000
    2fdc:	.word	0x1fff1a44
    2fe0:	.word	0x1fff19d9
    2fe4:	.word	0x1fff1a04
    2fe8:	.word	0x1fff19d4
    2fec:	.word	0x1fff1a48
    2ff0:	.word	0x1fff19d8
    2ff4:	.word	0x1fff1a4c
    2ff8:	.word	0x1fff1a45
    2ffc:	.word	0x1fff19dc

00003000 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3000:	ldr	r2, [pc, #20]	; (3018 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    3002:	ldr	r3, [pc, #24]	; (301c <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3004:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3006:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3008:	uxtb	r0, r0
	tail = rx_buffer_tail;
    300a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    300c:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    300e:	it	cc
    3010:	addcc	r0, #64	; 0x40
    3012:	subs	r0, r0, r3
}
    3014:	bx	lr
    3016:	nop
    3018:	.word	0x1fff1a54
    301c:	.word	0x1fff1a55

00003020 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    3020:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    3022:	ldr	r3, [pc, #172]	; (30d0 <uart3_status_isr+0xb0>)
    3024:	ldrb	r2, [r3, #4]
    3026:	lsls	r4, r2, #26
    3028:	bpl.n	306a <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    302a:	ldr	r0, [pc, #168]	; (30d4 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    302c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    302e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3030:	ldr	r1, [pc, #164]	; (30d8 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3032:	adds	r3, #1
    3034:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3036:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3038:	it	gt
    303a:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    303c:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    303e:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3040:	beq.n	304a <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    3042:	ldr	r4, [pc, #152]	; (30dc <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    3044:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3046:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3048:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    304a:	ldr	r2, [pc, #148]	; (30e0 <uart3_status_isr+0xc0>)
    304c:	ldr	r1, [r2, #0]
    304e:	cbz	r1, 306a <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3050:	ldr	r2, [pc, #144]	; (30e4 <uart3_status_isr+0xc4>)
    3052:	ldrb	r2, [r2, #0]
    3054:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3056:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3058:	itet	cc
    305a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    305e:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3060:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3062:	cmp	r3, #39	; 0x27
    3064:	itt	gt
    3066:	movgt	r3, #1
    3068:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    306a:	ldr	r2, [pc, #100]	; (30d0 <uart3_status_isr+0xb0>)
    306c:	ldrb	r3, [r2, #3]
    306e:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3070:	lsls	r0, r3, #24
    3072:	bmi.n	3098 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    3074:	lsls	r2, r3, #25
    3076:	bpl.n	3094 <uart3_status_isr+0x74>
    3078:	ldr	r3, [pc, #84]	; (30d0 <uart3_status_isr+0xb0>)
    307a:	ldrb	r3, [r3, #4]
    307c:	lsls	r3, r3, #25
    307e:	bpl.n	3094 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3080:	ldr	r3, [pc, #100]	; (30e8 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3082:	ldr	r1, [pc, #104]	; (30ec <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3084:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3086:	movs	r2, #0
    3088:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    308a:	cbz	r3, 308e <uart3_status_isr+0x6e>
    308c:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    308e:	ldr	r3, [pc, #64]	; (30d0 <uart3_status_isr+0xb0>)
    3090:	movs	r2, #44	; 0x2c
    3092:	strb	r2, [r3, #3]
	}
}
    3094:	pop	{r4, r5}
    3096:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3098:	ldrb	r1, [r2, #4]
    309a:	lsls	r1, r1, #24
    309c:	bpl.n	3074 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    309e:	ldr	r1, [pc, #80]	; (30f0 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    30a0:	ldr	r0, [pc, #64]	; (30e4 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    30a2:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    30a4:	ldrb	r1, [r0, #0]
    30a6:	uxtb	r1, r1
		if (head == tail) {
    30a8:	cmp	r4, r1
    30aa:	beq.n	30c8 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    30ac:	adds	r2, r1, #1
    30ae:	cmp	r2, #39	; 0x27
    30b0:	itt	hi
    30b2:	movhi	r1, #0
    30b4:	movhi	r2, r1
			n = tx_buffer[tail];
    30b6:	ldr	r5, [pc, #60]	; (30f4 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    30b8:	ldr	r4, [pc, #20]	; (30d0 <uart3_status_isr+0xb0>)
    30ba:	it	ls
    30bc:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    30be:	ldrb	r2, [r5, r2]
    30c0:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    30c2:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    30c4:	strb	r1, [r0, #0]
    30c6:	b.n	3074 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    30c8:	movs	r1, #108	; 0x6c
    30ca:	strb	r1, [r2, #3]
    30cc:	b.n	3074 <uart3_status_isr+0x54>
    30ce:	nop
    30d0:	.word	0x4006d000
    30d4:	.word	0x1fff1a54
    30d8:	.word	0x1fff1a55
    30dc:	.word	0x1fff1a80
    30e0:	.word	0x1fff1a50
    30e4:	.word	0x1fff1ac1
    30e8:	.word	0x1fff1ac4
    30ec:	.word	0x1fff1ac0
    30f0:	.word	0x1fff1ac8
    30f4:	.word	0x1fff1a58

000030f8 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    30f8:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    30fa:	ldr	r4, [pc, #64]	; (313c <fault_isr+0x44>)
    30fc:	b.n	3110 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    30fe:	ldr	r3, [r4, #0]
    3100:	lsls	r1, r3, #21
    3102:	bmi.n	3120 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3104:	ldr	r3, [r4, #0]
    3106:	lsls	r2, r3, #20
    3108:	bmi.n	312a <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    310a:	ldr	r3, [r4, #0]
    310c:	lsls	r3, r3, #19
    310e:	bmi.n	3134 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3110:	ldr	r3, [r4, #0]
    3112:	lsls	r0, r3, #13
    3114:	bpl.n	30fe <fault_isr+0x6>
    3116:	bl	222c <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    311a:	ldr	r3, [r4, #0]
    311c:	lsls	r1, r3, #21
    311e:	bpl.n	3104 <fault_isr+0xc>
    3120:	bl	320c <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3124:	ldr	r3, [r4, #0]
    3126:	lsls	r2, r3, #20
    3128:	bpl.n	310a <fault_isr+0x12>
    312a:	bl	2ef4 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    312e:	ldr	r3, [r4, #0]
    3130:	lsls	r3, r3, #19
    3132:	bpl.n	3110 <fault_isr+0x18>
    3134:	bl	350c <uart2_status_isr>
    3138:	b.n	3110 <fault_isr+0x18>
    313a:	nop
    313c:	.word	0x40048034

00003140 <unused_isr>:
	}
}

void unused_isr(void)
{
    3140:	push	{r3, lr}
	fault_isr();
    3142:	bl	30f8 <fault_isr>
    3146:	nop

00003148 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3148:	ldr	r3, [pc, #4]	; (3150 <startup_early_hook+0x8>)
    314a:	movs	r2, #16
    314c:	strh	r2, [r3, #0]
    314e:	bx	lr
    3150:	.word	0x40052000

00003154 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3154:	bx	lr
    3156:	nop

00003158 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3158:	ldr	r1, [pc, #36]	; (3180 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    315a:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    315c:	ldr	r3, [r1, #0]
	if (incr != 0) {
    315e:	cbz	r0, 316e <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    3160:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    3162:	add	r0, r3
    3164:	sub.w	r2, r2, #8192	; 0x2000
    3168:	cmp	r0, r2
    316a:	bcs.n	3172 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    316c:	str	r0, [r1, #0]
	}
	return prev;
    316e:	mov	r0, r3
}
    3170:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    3172:	bl	37e0 <__errno>
    3176:	movs	r3, #12
    3178:	str	r3, [r0, #0]
			return (void *)-1;
    317a:	mov.w	r0, #4294967295
    317e:	pop	{r3, pc}
    3180:	.word	0x1fff0c70

00003184 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    3184:	ldr	r2, [pc, #32]	; (31a8 <kinetis_hsrun_disable+0x24>)
    3186:	ldrb	r3, [r2, #0]
    3188:	cmp	r3, #128	; 0x80
    318a:	beq.n	3190 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    318c:	movs	r0, #0
}
    318e:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3190:	ldr	r1, [pc, #24]	; (31ac <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3192:	ldr	r3, [pc, #28]	; (31b0 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3194:	ldr	r0, [pc, #28]	; (31b4 <kinetis_hsrun_disable+0x30>)
    3196:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3198:	movs	r1, #0
    319a:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    319c:	ldrb	r3, [r2, #0]
    319e:	cmp	r3, #128	; 0x80
    31a0:	beq.n	319c <kinetis_hsrun_disable+0x18>
		return 1;
    31a2:	movs	r0, #1
    31a4:	bx	lr
    31a6:	nop
    31a8:	.word	0x4007e003
    31ac:	.word	0x40048044
    31b0:	.word	0x4007e001
    31b4:	.word	0x22280000

000031b8 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    31b8:	ldr	r2, [pc, #36]	; (31e0 <kinetis_hsrun_enable+0x28>)
    31ba:	ldrb	r3, [r2, #0]
    31bc:	cmp	r3, #1
    31be:	beq.n	31c4 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    31c0:	movs	r0, #0
}
    31c2:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    31c4:	add.w	r3, r3, #1073741824	; 0x40000000
    31c8:	add.w	r3, r3, #516096	; 0x7e000
    31cc:	movs	r1, #96	; 0x60
    31ce:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    31d0:	ldrb	r3, [r2, #0]
    31d2:	cmp	r3, #128	; 0x80
    31d4:	bne.n	31d0 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    31d6:	ldr	r3, [pc, #12]	; (31e4 <kinetis_hsrun_enable+0x2c>)
    31d8:	ldr	r2, [pc, #12]	; (31e8 <kinetis_hsrun_enable+0x30>)
    31da:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    31dc:	movs	r0, #1
    31de:	bx	lr
    31e0:	.word	0x4007e003
    31e4:	.word	0x40048044
    31e8:	.word	0x02060000

000031ec <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    31ec:	ldr	r2, [pc, #20]	; (3204 <serial_available+0x18>)
	tail = rx_buffer_tail;
    31ee:	ldr	r3, [pc, #24]	; (3208 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    31f0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    31f2:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    31f4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    31f6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    31f8:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    31fa:	it	cc
    31fc:	addcc	r0, #64	; 0x40
    31fe:	subs	r0, r0, r3
}
    3200:	bx	lr
    3202:	nop
    3204:	.word	0x1fff1ad0
    3208:	.word	0x1fff1ad1

0000320c <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    320c:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    320e:	ldr	r3, [pc, #224]	; (32f0 <uart0_status_isr+0xe4>)
    3210:	ldrb	r2, [r3, #4]
    3212:	tst.w	r2, #48	; 0x30
    3216:	beq.n	3272 <uart0_status_isr+0x66>
		__disable_irq();
    3218:	cpsid	i
		avail = UART0_RCFIFO;
    321a:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    321c:	and.w	r2, r1, #255	; 0xff
    3220:	cmp	r1, #0
    3222:	beq.n	32a0 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3224:	cpsie	i
			head = rx_buffer_head;
    3226:	ldr	r7, [pc, #204]	; (32f4 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3228:	ldr	r1, [pc, #204]	; (32f8 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    322a:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    322c:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    322e:	ldr	r6, [pc, #204]	; (32fc <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3230:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3232:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3234:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    3236:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3238:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    323a:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    323c:	it	cs
    323e:	movcs	r3, #0
				if (newhead != tail) {
    3240:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3242:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3246:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3248:	itt	ne
    324a:	strbne	r1, [r6, r3]
    324c:	movne	r0, r3
				}
			} while (--avail > 0);
    324e:	ands.w	r2, r2, #255	; 0xff
    3252:	bne.n	3236 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3254:	ldr	r3, [pc, #168]	; (3300 <uart0_status_isr+0xf4>)
    3256:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3258:	uxtb	r2, r0
    325a:	strb	r2, [r7, #0]
			if (rts_pin) {
    325c:	cbz	r3, 3272 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    325e:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3260:	itet	cc
    3262:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3266:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3268:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    326a:	cmp	r0, #39	; 0x27
    326c:	itt	gt
    326e:	movgt	r2, #1
    3270:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    3272:	ldr	r1, [pc, #124]	; (32f0 <uart0_status_isr+0xe4>)
    3274:	ldrb	r2, [r1, #3]
    3276:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3278:	lsls	r5, r2, #24
    327a:	bmi.n	32aa <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    327c:	lsls	r2, r2, #25
    327e:	bpl.n	329c <uart0_status_isr+0x90>
    3280:	ldr	r3, [pc, #108]	; (32f0 <uart0_status_isr+0xe4>)
    3282:	ldrb	r3, [r3, #4]
    3284:	lsls	r3, r3, #25
    3286:	bpl.n	329c <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3288:	ldr	r3, [pc, #120]	; (3304 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    328a:	ldr	r1, [pc, #124]	; (3308 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    328c:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    328e:	movs	r2, #0
    3290:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3292:	cbz	r3, 3296 <uart0_status_isr+0x8a>
    3294:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3296:	ldr	r3, [pc, #88]	; (32f0 <uart0_status_isr+0xe4>)
    3298:	movs	r2, #60	; 0x3c
    329a:	strb	r2, [r3, #3]
	}
}
    329c:	pop	{r4, r5, r6, r7}
    329e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    32a0:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    32a2:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    32a4:	strb	r2, [r3, #17]
			__enable_irq();
    32a6:	cpsie	i
    32a8:	b.n	3272 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    32aa:	ldrb	r3, [r1, #4]
    32ac:	lsls	r4, r3, #24
    32ae:	bpl.n	327c <uart0_status_isr+0x70>
		head = tx_buffer_head;
    32b0:	ldr	r3, [pc, #88]	; (330c <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    32b2:	ldr	r6, [pc, #92]	; (3310 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    32b4:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    32b6:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    32b8:	uxtb	r4, r4
		tail = tx_buffer_tail;
    32ba:	uxtb	r3, r3
		do {
			if (tail == head) break;
    32bc:	cmp	r4, r3
    32be:	beq.n	32de <uart0_status_isr+0xd2>
    32c0:	ldr	r5, [pc, #80]	; (3314 <uart0_status_isr+0x108>)
    32c2:	b.n	32c8 <uart0_status_isr+0xbc>
    32c4:	cmp	r3, r4
    32c6:	beq.n	32de <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    32c8:	adds	r3, #1
    32ca:	cmp	r3, #64	; 0x40
    32cc:	it	cs
    32ce:	movcs	r3, #0
			avail = UART0_S1;
    32d0:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    32d2:	ldrb	r0, [r5, r3]
    32d4:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    32d6:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    32d8:	ldrb	r0, [r1, #20]
    32da:	cmp	r0, #7
    32dc:	bls.n	32c4 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    32de:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    32e0:	ldr	r1, [pc, #12]	; (32f0 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    32e2:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    32e4:	ldrb	r3, [r1, #4]
    32e6:	lsls	r0, r3, #24
    32e8:	itt	mi
    32ea:	movmi	r3, #124	; 0x7c
    32ec:	strbmi	r3, [r1, #3]
    32ee:	b.n	327c <uart0_status_isr+0x70>
    32f0:	.word	0x4006a000
    32f4:	.word	0x1fff1ad0
    32f8:	.word	0x1fff1ad1
    32fc:	.word	0x1fff1b14
    3300:	.word	0x1fff1acc
    3304:	.word	0x1fff1b58
    3308:	.word	0x1fff1b54
    330c:	.word	0x1fff1b5c
    3310:	.word	0x1fff1b55
    3314:	.word	0x1fff1ad4

00003318 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3318:	ldr	r2, [pc, #20]	; (3330 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    331a:	ldr	r3, [pc, #24]	; (3334 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    331c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    331e:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3320:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3322:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3324:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    3326:	it	cc
    3328:	addcc	r0, #64	; 0x40
    332a:	subs	r0, r0, r3
}
    332c:	bx	lr
    332e:	nop
    3330:	.word	0x1fff1b64
    3334:	.word	0x1fff1b65

00003338 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    3338:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    333a:	ldr	r3, [pc, #176]	; (33ec <lpuart0_status_isr+0xb4>)
    333c:	ldr	r2, [r3, #4]
    333e:	lsls	r4, r2, #10
    3340:	bpl.n	3382 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3342:	ldr	r0, [pc, #172]	; (33f0 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    3344:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    3346:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3348:	ldr	r1, [pc, #168]	; (33f4 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    334a:	adds	r3, #1
    334c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    334e:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    3350:	it	gt
    3352:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3354:	cmp	r3, r1
    3356:	beq.n	3362 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3358:	ldr	r4, [pc, #156]	; (33f8 <lpuart0_status_isr+0xc0>)
    335a:	uxtb	r2, r2
			rx_buffer_head = head;
    335c:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    335e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3360:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3362:	ldr	r2, [pc, #152]	; (33fc <lpuart0_status_isr+0xc4>)
    3364:	ldr	r1, [r2, #0]
    3366:	cbz	r1, 3382 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3368:	ldr	r2, [pc, #148]	; (3400 <lpuart0_status_isr+0xc8>)
    336a:	ldrb	r2, [r2, #0]
    336c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    336e:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3370:	itet	cc
    3372:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3376:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3378:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    337a:	cmp	r3, #39	; 0x27
    337c:	itt	gt
    337e:	movgt	r3, #1
    3380:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    3382:	ldr	r2, [pc, #104]	; (33ec <lpuart0_status_isr+0xb4>)
    3384:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    3386:	lsls	r0, r3, #8
    3388:	bpl.n	3390 <lpuart0_status_isr+0x58>
    338a:	ldr	r2, [r2, #4]
    338c:	lsls	r1, r2, #8
    338e:	bmi.n	33b4 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    3390:	lsls	r2, r3, #9
    3392:	bpl.n	33b0 <lpuart0_status_isr+0x78>
    3394:	ldr	r3, [pc, #84]	; (33ec <lpuart0_status_isr+0xb4>)
    3396:	ldr	r3, [r3, #4]
    3398:	lsls	r3, r3, #9
    339a:	bpl.n	33b0 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    339c:	ldr	r3, [pc, #100]	; (3404 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    339e:	ldr	r1, [pc, #104]	; (3408 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    33a0:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    33a2:	movs	r2, #0
    33a4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    33a6:	cbz	r3, 33aa <lpuart0_status_isr+0x72>
    33a8:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    33aa:	ldr	r3, [pc, #96]	; (340c <lpuart0_status_isr+0xd4>)
    33ac:	movs	r2, #0
    33ae:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    33b0:	pop	{r4, r5}
    33b2:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    33b4:	ldr	r2, [pc, #88]	; (3410 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    33b6:	ldr	r1, [pc, #72]	; (3400 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    33b8:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    33ba:	ldrb	r2, [r1, #0]
    33bc:	uxtb	r2, r2
		if (head == tail) {
    33be:	cmp	r0, r2
    33c0:	beq.n	33de <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    33c2:	adds	r2, #1
    33c4:	cmp	r2, #39	; 0x27
    33c6:	itt	hi
    33c8:	movhi	r0, #0
    33ca:	movhi	r2, r0
			n = tx_buffer[tail];
    33cc:	ldr	r5, [pc, #68]	; (3414 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    33ce:	ldr	r4, [pc, #28]	; (33ec <lpuart0_status_isr+0xb4>)
    33d0:	it	ls
    33d2:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    33d4:	ldrb	r2, [r5, r2]
    33d6:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    33d8:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    33da:	strb	r0, [r1, #0]
    33dc:	b.n	3390 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    33de:	ldr	r0, [pc, #56]	; (3418 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    33e0:	ldr	r2, [pc, #40]	; (340c <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    33e2:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    33e4:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    33e6:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    33e8:	str	r1, [r2, #0]
    33ea:	b.n	3390 <lpuart0_status_isr+0x58>
    33ec:	.word	0x400c4000
    33f0:	.word	0x1fff1b64
    33f4:	.word	0x1fff1b65
    33f8:	.word	0x1fff1b90
    33fc:	.word	0x1fff1b60
    3400:	.word	0x1fff1bd1
    3404:	.word	0x1fff1bd4
    3408:	.word	0x1fff1bd0
    340c:	.word	0x43880158
    3410:	.word	0x1fff1bd8
    3414:	.word	0x1fff1b68
    3418:	.word	0x4388015c

0000341c <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    341c:	push	{r4, lr}
    341e:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3420:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    3422:	bl	3184 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    3426:	ldr	r2, [pc, #96]	; (3488 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3428:	ldr	r3, [pc, #96]	; (348c <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    342a:	ldr	r1, [pc, #100]	; (3490 <usb_init_serialnumber+0x74>)
    342c:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    342e:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3430:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3432:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3434:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3436:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3438:	ldrb	r3, [r2, #0]
    343a:	lsls	r3, r3, #24
    343c:	bpl.n	3438 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    343e:	ldr	r3, [pc, #84]	; (3494 <usb_init_serialnumber+0x78>)
    3440:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    3442:	bl	31b8 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    3446:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3448:	ldr	r3, [pc, #76]	; (3498 <usb_init_serialnumber+0x7c>)
    344a:	cmp	r4, r3
    344c:	itt	ls
    344e:	addls.w	r4, r4, r4, lsl #2
    3452:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    3454:	mov	r0, r4
    3456:	ldr	r4, [pc, #68]	; (349c <usb_init_serialnumber+0x80>)
    3458:	add	r1, sp, #4
    345a:	movs	r2, #10
    345c:	bl	34a0 <ultoa>
    3460:	add	r1, sp, #4
    3462:	mov	r0, r4
	for (i=0; i<10; i++) {
    3464:	movs	r3, #0
		char c = buf[i];
    3466:	ldrb.w	r2, [r1], #1
    346a:	adds	r3, #1
		if (!c) break;
    346c:	cbz	r2, 347e <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    346e:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3470:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3474:	bne.n	3466 <usb_init_serialnumber+0x4a>
    3476:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3478:	strb	r3, [r4, #0]
}
    347a:	add	sp, #16
    347c:	pop	{r4, pc}
    347e:	lsls	r3, r3, #1
    3480:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3482:	strb	r3, [r4, #0]
}
    3484:	add	sp, #16
    3486:	pop	{r4, pc}
    3488:	.word	0x40020004
    348c:	.word	0x40020000
    3490:	.word	0x41070000
    3494:	.word	0x4002000c
    3498:	.word	0x0098967f
    349c:	.word	0x1fff0d54

000034a0 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    34a0:	push	{r4, r5, r6, r7}
    34a2:	subs	r5, r1, #1
    34a4:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    34a6:	movs	r4, #0
    34a8:	b.n	34ac <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    34aa:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    34ac:	udiv	r3, r0, r2
    34b0:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    34b4:	cmp	r0, #9
    34b6:	add.w	r7, r0, #48	; 0x30
    34ba:	itet	hi
    34bc:	addhi	r0, #55	; 0x37
    34be:	uxtbls	r0, r7
    34c0:	uxtbhi	r0, r0
    34c2:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    34c6:	mov	r0, r3
    34c8:	cmp	r3, #0
    34ca:	bne.n	34aa <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    34cc:	adds	r2, r1, r4
    34ce:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    34d0:	cbz	r4, 34e6 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    34d2:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    34d4:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    34d8:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    34da:	adds	r3, #1
    34dc:	subs	r0, r4, r3
    34de:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    34e0:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    34e4:	blt.n	34d2 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    34e6:	mov	r0, r1
    34e8:	pop	{r4, r5, r6, r7}
    34ea:	bx	lr

000034ec <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    34ec:	ldr	r2, [pc, #20]	; (3504 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    34ee:	ldr	r3, [pc, #24]	; (3508 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    34f0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    34f2:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    34f4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    34f6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    34f8:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    34fa:	it	cc
    34fc:	addcc	r0, #64	; 0x40
    34fe:	subs	r0, r0, r3
}
    3500:	bx	lr
    3502:	nop
    3504:	.word	0x1fff1be0
    3508:	.word	0x1fff1be1

0000350c <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    350c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    350e:	ldr	r3, [pc, #172]	; (35bc <uart2_status_isr+0xb0>)
    3510:	ldrb	r2, [r3, #4]
    3512:	lsls	r4, r2, #26
    3514:	bpl.n	3556 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3516:	ldr	r0, [pc, #168]	; (35c0 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3518:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    351a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    351c:	ldr	r1, [pc, #164]	; (35c4 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    351e:	adds	r3, #1
    3520:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3522:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3524:	it	gt
    3526:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3528:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    352a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    352c:	beq.n	3536 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    352e:	ldr	r4, [pc, #152]	; (35c8 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    3530:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3532:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3534:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3536:	ldr	r2, [pc, #148]	; (35cc <uart2_status_isr+0xc0>)
    3538:	ldr	r1, [r2, #0]
    353a:	cbz	r1, 3556 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    353c:	ldr	r2, [pc, #144]	; (35d0 <uart2_status_isr+0xc4>)
    353e:	ldrb	r2, [r2, #0]
    3540:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3542:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3544:	itet	cc
    3546:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    354a:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    354c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    354e:	cmp	r3, #39	; 0x27
    3550:	itt	gt
    3552:	movgt	r3, #1
    3554:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    3556:	ldr	r2, [pc, #100]	; (35bc <uart2_status_isr+0xb0>)
    3558:	ldrb	r3, [r2, #3]
    355a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    355c:	lsls	r0, r3, #24
    355e:	bmi.n	3584 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    3560:	lsls	r2, r3, #25
    3562:	bpl.n	3580 <uart2_status_isr+0x74>
    3564:	ldr	r3, [pc, #84]	; (35bc <uart2_status_isr+0xb0>)
    3566:	ldrb	r3, [r3, #4]
    3568:	lsls	r3, r3, #25
    356a:	bpl.n	3580 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    356c:	ldr	r3, [pc, #100]	; (35d4 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    356e:	ldr	r1, [pc, #104]	; (35d8 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3570:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3572:	movs	r2, #0
    3574:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3576:	cbz	r3, 357a <uart2_status_isr+0x6e>
    3578:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    357a:	ldr	r3, [pc, #64]	; (35bc <uart2_status_isr+0xb0>)
    357c:	movs	r2, #44	; 0x2c
    357e:	strb	r2, [r3, #3]
	}
}
    3580:	pop	{r4, r5}
    3582:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3584:	ldrb	r1, [r2, #4]
    3586:	lsls	r1, r1, #24
    3588:	bpl.n	3560 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    358a:	ldr	r1, [pc, #80]	; (35dc <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    358c:	ldr	r0, [pc, #64]	; (35d0 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    358e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3590:	ldrb	r1, [r0, #0]
    3592:	uxtb	r1, r1
		if (head == tail) {
    3594:	cmp	r4, r1
    3596:	beq.n	35b4 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3598:	adds	r2, r1, #1
    359a:	cmp	r2, #39	; 0x27
    359c:	itt	hi
    359e:	movhi	r1, #0
    35a0:	movhi	r2, r1
			n = tx_buffer[tail];
    35a2:	ldr	r5, [pc, #60]	; (35e0 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    35a4:	ldr	r4, [pc, #20]	; (35bc <uart2_status_isr+0xb0>)
    35a6:	it	ls
    35a8:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    35aa:	ldrb	r2, [r5, r2]
    35ac:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    35ae:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    35b0:	strb	r1, [r0, #0]
    35b2:	b.n	3560 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    35b4:	movs	r1, #108	; 0x6c
    35b6:	strb	r1, [r2, #3]
    35b8:	b.n	3560 <uart2_status_isr+0x54>
    35ba:	nop
    35bc:	.word	0x4006c000
    35c0:	.word	0x1fff1be0
    35c4:	.word	0x1fff1be1
    35c8:	.word	0x1fff1c0c
    35cc:	.word	0x1fff1bdc
    35d0:	.word	0x1fff1c4d
    35d4:	.word	0x1fff1c50
    35d8:	.word	0x1fff1c4c
    35dc:	.word	0x1fff1c54
    35e0:	.word	0x1fff1be4

000035e4 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    35e4:	bx	lr
    35e6:	nop

000035e8 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    35e8:	bx	lr
    35ea:	nop

000035ec <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    35ec:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    35ee:	mrs	r2, PRIMASK
		__disable_irq();
    35f2:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    35f4:	ldrb	r3, [r0, #29]
    35f6:	cbnz	r3, 3606 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    35f8:	ldrb	r1, [r0, #28]
    35fa:	cmp	r1, #1
    35fc:	beq.n	3610 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    35fe:	cmp	r1, #3
    3600:	beq.n	3624 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    3602:	movs	r3, #1
    3604:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3606:	cbnz	r2, 360a <EventResponder::triggerEventNotImmediate()+0x1e>
    3608:	cpsie	i
	}
	enableInterrupts(irq);
}
    360a:	ldr.w	r4, [sp], #4
    360e:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3610:	ldr	r4, [pc, #68]	; (3658 <EventResponder::triggerEventNotImmediate()+0x6c>)
    3612:	ldr	r1, [r4, #0]
    3614:	cbz	r1, 3640 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3616:	ldr	r1, [pc, #68]	; (365c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3618:	str	r3, [r0, #20]
				_prev = lastYield;
    361a:	ldr	r3, [r1, #0]
    361c:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    361e:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    3620:	str	r0, [r3, #20]
    3622:	b.n	3602 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3624:	ldr	r4, [pc, #56]	; (3660 <EventResponder::triggerEventNotImmediate()+0x74>)
    3626:	ldr	r1, [r4, #0]
    3628:	cbz	r1, 364c <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    362a:	ldr	r1, [pc, #56]	; (3664 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    362c:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    362e:	ldr	r3, [r1, #0]
    3630:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    3632:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    3634:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3636:	ldr	r3, [pc, #48]	; (3668 <EventResponder::triggerEventNotImmediate()+0x7c>)
    3638:	mov.w	r1, #268435456	; 0x10000000
    363c:	str	r1, [r3, #0]
    363e:	b.n	3602 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3640:	ldr	r3, [pc, #24]	; (365c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    3642:	str	r1, [r0, #20]
				_prev = nullptr;
    3644:	str	r1, [r0, #24]
				firstYield = this;
    3646:	str	r0, [r4, #0]
				lastYield = this;
    3648:	str	r0, [r3, #0]
    364a:	b.n	3602 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    364c:	ldr	r3, [pc, #20]	; (3664 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    364e:	str	r1, [r0, #20]
				_prev = nullptr;
    3650:	str	r1, [r0, #24]
				firstInterrupt = this;
    3652:	str	r0, [r4, #0]
				lastInterrupt = this;
    3654:	str	r0, [r3, #0]
    3656:	b.n	3636 <EventResponder::triggerEventNotImmediate()+0x4a>
    3658:	.word	0x1fff1c68
    365c:	.word	0x1fff1c64
    3660:	.word	0x1fff1c58
    3664:	.word	0x1fff1c5c
    3668:	.word	0xe000ed04

0000366c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    366c:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    366e:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3670:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3672:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3674:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3676:	beq.n	3680 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    3678:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    367c:	b.w	35ec <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3680:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    3682:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3686:	bx	r3

00003688 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3688:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    368a:	mrs	r2, PRIMASK
		__disable_irq();
    368e:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3690:	ldr	r4, [pc, #48]	; (36c4 <EventResponder::runFromInterrupt()+0x3c>)
    3692:	ldr	r0, [r4, #0]
		if (first) {
    3694:	cbz	r0, 36b8 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3696:	ldr	r6, [pc, #48]	; (36c8 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3698:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    369a:	ldr	r3, [r0, #20]
    369c:	str	r3, [r4, #0]
			if (firstInterrupt) {
    369e:	cbz	r3, 36be <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    36a0:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    36a2:	cbnz	r2, 36a6 <EventResponder::runFromInterrupt()+0x1e>
    36a4:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    36a6:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    36a8:	ldr	r3, [r0, #8]
    36aa:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    36ac:	mrs	r2, PRIMASK
		__disable_irq();
    36b0:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    36b2:	ldr	r0, [r4, #0]
		if (first) {
    36b4:	cmp	r0, #0
    36b6:	bne.n	369a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    36b8:	cbnz	r2, 36bc <EventResponder::runFromInterrupt()+0x34>
    36ba:	cpsie	i
    36bc:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    36be:	str	r3, [r6, #0]
    36c0:	b.n	36a2 <EventResponder::runFromInterrupt()+0x1a>
    36c2:	nop
    36c4:	.word	0x1fff1c58
    36c8:	.word	0x1fff1c5c

000036cc <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    36cc:	b.w	3688 <EventResponder::runFromInterrupt()>

000036d0 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    36d0:	ldr	r2, [pc, #96]	; (3734 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    36d2:	push	{r4, r5}
	if (listActive == nullptr) {
    36d4:	ldr	r4, [r2, #0]
    36d6:	cmp	r4, #0
    36d8:	beq.n	372a <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    36da:	ldr	r3, [r0, #0]
    36dc:	ldr	r1, [r4, #0]
    36de:	cmp	r3, r1
    36e0:	bcs.n	3700 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    36e2:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    36e4:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    36e6:	str	r4, [r0, #8]
		_prev = nullptr;
    36e8:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    36ea:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    36ec:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    36ee:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    36f0:	movs	r3, #2
    36f2:	strb	r3, [r0, #20]
}
    36f4:	pop	{r4, r5}
    36f6:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    36f8:	ldr	r1, [r2, #0]
    36fa:	cmp	r3, r1
    36fc:	mov	r4, r2
    36fe:	bcc.n	3712 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3700:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    3702:	subs	r3, r3, r1
    3704:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3706:	cmp	r2, #0
    3708:	bne.n	36f8 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    370a:	str	r2, [r0, #8]
		_prev = timer;
    370c:	str	r4, [r0, #12]
		timer->_next = this;
    370e:	str	r0, [r4, #8]
    3710:	b.n	36f0 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    3712:	ldr	r2, [r2, #12]
    3714:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    3716:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    3718:	str	r0, [r4, #12]
				_prev->_next = this;
    371a:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    371c:	subs	r3, r1, r3
				_state = TimerActive;
    371e:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    3720:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    3722:	str	r3, [r4, #0]
				_state = TimerActive;
    3724:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    3726:	pop	{r4, r5}
    3728:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    372a:	str	r4, [r0, #8]
		_prev = nullptr;
    372c:	str	r4, [r0, #12]
		listActive = this;
    372e:	str	r0, [r2, #0]
    3730:	b.n	36f0 <MillisTimer::addToActiveList()+0x20>
    3732:	nop
    3734:	.word	0x1fff1c60

00003738 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    3738:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    373a:	ldr	r6, [pc, #136]	; (37c4 <MillisTimer::runFromTimer()+0x8c>)
    373c:	ldr	r4, [r6, #0]
	while (timer) {
    373e:	cbz	r4, 378c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3740:	ldr	r3, [r4, #0]
    3742:	cmp	r3, #0
    3744:	bne.n	37bc <MillisTimer::runFromTimer()+0x84>
    3746:	ldr	r7, [pc, #128]	; (37c8 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    3748:	mov	r5, r3
    374a:	b.n	3756 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    374c:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    374e:	cbz	r4, 378c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3750:	ldr	r3, [r4, #0]
    3752:	cmp	r3, #0
    3754:	bne.n	37bc <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    3756:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    3758:	cbz	r3, 375c <MillisTimer::runFromTimer()+0x24>
    375a:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    375c:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    375e:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3760:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    3762:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3764:	ldr	r3, [r3, #0]
    3766:	cmp	r3, r7
    3768:	bne.n	37ae <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    376a:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    376c:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    376e:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3770:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    3772:	beq.n	37b6 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3774:	bl	35ec <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    3778:	ldr	r3, [r4, #4]
    377a:	cmp	r3, #0
    377c:	beq.n	374c <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    377e:	str	r3, [r4, #0]
				timer->addToActiveList();
    3780:	mov	r0, r4
    3782:	bl	36d0 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    3786:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3788:	cmp	r4, #0
    378a:	bne.n	3750 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    378c:	mrs	r3, PRIMASK
		__disable_irq();
    3790:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3792:	ldr	r2, [pc, #56]	; (37cc <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3794:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3796:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3798:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    379a:	cbnz	r3, 379e <MillisTimer::runFromTimer()+0x66>
    379c:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    379e:	cbz	r0, 37ac <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    37a0:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    37a2:	bl	36d0 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    37a6:	mov	r0, r4
    37a8:	cmp	r0, #0
    37aa:	bne.n	37a0 <MillisTimer::runFromTimer()+0x68>
    37ac:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    37ae:	mov	r2, r4
    37b0:	movs	r1, #0
    37b2:	blx	r3
    37b4:	b.n	3778 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    37b6:	ldr	r3, [r0, #8]
    37b8:	blx	r3
    37ba:	b.n	3778 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    37bc:	subs	r3, #1
    37be:	str	r3, [r4, #0]
			break;
    37c0:	b.n	378c <MillisTimer::runFromTimer()+0x54>
    37c2:	nop
    37c4:	.word	0x1fff1c60
    37c8:	.word	0x0000366d
    37cc:	.word	0x1fff1c70

000037d0 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    37d0:	ldr	r2, [pc, #8]	; (37dc <systick_isr+0xc>)
    37d2:	ldr	r3, [r2, #0]
    37d4:	adds	r3, #1
    37d6:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    37d8:	b.w	3738 <MillisTimer::runFromTimer()>
    37dc:	.word	0x1fff17f8

000037e0 <__errno>:
    37e0:	ldr	r3, [pc, #4]	; (37e8 <__errno+0x8>)
    37e2:	ldr	r0, [r3, #0]
    37e4:	bx	lr
    37e6:	nop
    37e8:	.word	0x1fff1198

000037ec <__libc_init_array>:
    37ec:	push	{r4, r5, r6, lr}
    37ee:	ldr	r6, [pc, #60]	; (382c <__libc_init_array+0x40>)
    37f0:	ldr	r5, [pc, #60]	; (3830 <__libc_init_array+0x44>)
    37f2:	subs	r6, r6, r5
    37f4:	asrs	r6, r6, #2
    37f6:	it	ne
    37f8:	movne	r4, #0
    37fa:	beq.n	3808 <__libc_init_array+0x1c>
    37fc:	adds	r4, #1
    37fe:	ldr.w	r3, [r5], #4
    3802:	blx	r3
    3804:	cmp	r6, r4
    3806:	bne.n	37fc <__libc_init_array+0x10>
    3808:	ldr	r6, [pc, #40]	; (3834 <__libc_init_array+0x48>)
    380a:	ldr	r5, [pc, #44]	; (3838 <__libc_init_array+0x4c>)
    380c:	subs	r6, r6, r5
    380e:	bl	4490 <_init>
    3812:	asrs	r6, r6, #2
    3814:	it	ne
    3816:	movne	r4, #0
    3818:	beq.n	3828 <__libc_init_array+0x3c>
    381a:	adds	r4, #1
    381c:	ldr.w	r3, [r5], #4
    3820:	blx	r3
    3822:	cmp	r6, r4
    3824:	bne.n	381a <__libc_init_array+0x2e>
    3826:	pop	{r4, r5, r6, pc}
    3828:	pop	{r4, r5, r6, pc}
    382a:	nop
    382c:	.word	0x0000449c
    3830:	.word	0x0000449c
    3834:	.word	0x000044a8
    3838:	.word	0x0000449c

0000383c <malloc>:
    383c:	ldr	r3, [pc, #8]	; (3848 <malloc+0xc>)
    383e:	mov	r1, r0
    3840:	ldr	r0, [r3, #0]
    3842:	b.w	384c <_malloc_r>
    3846:	nop
    3848:	.word	0x1fff1198

0000384c <_malloc_r>:
    384c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3850:	add.w	r5, r1, #11
    3854:	cmp	r5, #22
    3856:	sub	sp, #12
    3858:	mov	r6, r0
    385a:	bls.w	399c <_malloc_r+0x150>
    385e:	bics.w	r5, r5, #7
    3862:	bmi.w	39e4 <_malloc_r+0x198>
    3866:	cmp	r1, r5
    3868:	bhi.w	39e4 <_malloc_r+0x198>
    386c:	bl	3dbc <__malloc_lock>
    3870:	cmp.w	r5, #504	; 0x1f8
    3874:	bcc.w	3db0 <_malloc_r+0x564>
    3878:	lsrs	r3, r5, #9
    387a:	beq.w	39f2 <_malloc_r+0x1a6>
    387e:	cmp	r3, #4
    3880:	bhi.w	3b8a <_malloc_r+0x33e>
    3884:	lsrs	r0, r5, #6
    3886:	add.w	lr, r0, #57	; 0x39
    388a:	mov.w	r3, lr, lsl #1
    388e:	adds	r0, #56	; 0x38
    3890:	ldr	r7, [pc, #784]	; (3ba4 <_malloc_r+0x358>)
    3892:	add.w	r3, r7, r3, lsl #2
    3896:	sub.w	r1, r3, #8
    389a:	ldr	r4, [r3, #4]
    389c:	cmp	r1, r4
    389e:	bne.n	38b0 <_malloc_r+0x64>
    38a0:	b.n	39fc <_malloc_r+0x1b0>
    38a2:	cmp	r2, #0
    38a4:	bge.w	3a00 <_malloc_r+0x1b4>
    38a8:	ldr	r4, [r4, #12]
    38aa:	cmp	r1, r4
    38ac:	beq.w	39fc <_malloc_r+0x1b0>
    38b0:	ldr	r3, [r4, #4]
    38b2:	bic.w	r3, r3, #3
    38b6:	subs	r2, r3, r5
    38b8:	cmp	r2, #15
    38ba:	ble.n	38a2 <_malloc_r+0x56>
    38bc:	ldr	r1, [pc, #740]	; (3ba4 <_malloc_r+0x358>)
    38be:	ldr	r4, [r7, #16]
    38c0:	add.w	lr, r1, #8
    38c4:	cmp	r4, lr
    38c6:	beq.w	3c30 <_malloc_r+0x3e4>
    38ca:	ldr	r3, [r4, #4]
    38cc:	bic.w	r3, r3, #3
    38d0:	subs	r2, r3, r5
    38d2:	cmp	r2, #15
    38d4:	bgt.w	3c0a <_malloc_r+0x3be>
    38d8:	cmp	r2, #0
    38da:	str.w	lr, [r1, #20]
    38de:	str.w	lr, [r1, #16]
    38e2:	bge.w	3a22 <_malloc_r+0x1d6>
    38e6:	cmp.w	r3, #512	; 0x200
    38ea:	bcs.w	3bbc <_malloc_r+0x370>
    38ee:	lsrs	r3, r3, #3
    38f0:	add.w	ip, r3, #1
    38f4:	movs	r2, #1
    38f6:	asrs	r3, r3, #2
    38f8:	lsl.w	r3, r2, r3
    38fc:	ldr	r2, [r1, #4]
    38fe:	ldr.w	r8, [r1, ip, lsl #3]
    3902:	str.w	r8, [r4, #8]
    3906:	add.w	r9, r1, ip, lsl #3
    390a:	orrs	r2, r3
    390c:	sub.w	r3, r9, #8
    3910:	str	r3, [r4, #12]
    3912:	str	r2, [r1, #4]
    3914:	str.w	r4, [r1, ip, lsl #3]
    3918:	str.w	r4, [r8, #12]
    391c:	asrs	r3, r0, #2
    391e:	movs	r4, #1
    3920:	lsls	r4, r3
    3922:	cmp	r4, r2
    3924:	bhi.w	3a3c <_malloc_r+0x1f0>
    3928:	tst	r4, r2
    392a:	bne.n	393a <_malloc_r+0xee>
    392c:	bic.w	r0, r0, #3
    3930:	lsls	r4, r4, #1
    3932:	tst	r4, r2
    3934:	add.w	r0, r0, #4
    3938:	beq.n	3930 <_malloc_r+0xe4>
    393a:	add.w	r9, r7, r0, lsl #3
    393e:	mov	ip, r9
    3940:	mov	r8, r0
    3942:	ldr.w	r1, [ip, #12]
    3946:	cmp	ip, r1
    3948:	bne.n	395a <_malloc_r+0x10e>
    394a:	b.n	3c34 <_malloc_r+0x3e8>
    394c:	cmp	r2, #0
    394e:	bge.w	3c54 <_malloc_r+0x408>
    3952:	ldr	r1, [r1, #12]
    3954:	cmp	ip, r1
    3956:	beq.w	3c34 <_malloc_r+0x3e8>
    395a:	ldr	r3, [r1, #4]
    395c:	bic.w	r3, r3, #3
    3960:	subs	r2, r3, r5
    3962:	cmp	r2, #15
    3964:	ble.n	394c <_malloc_r+0x100>
    3966:	mov	r4, r1
    3968:	ldr.w	ip, [r1, #12]
    396c:	ldr.w	r8, [r4, #8]!
    3970:	adds	r3, r1, r5
    3972:	orr.w	r5, r5, #1
    3976:	str	r5, [r1, #4]
    3978:	orr.w	r1, r2, #1
    397c:	str.w	ip, [r8, #12]
    3980:	mov	r0, r6
    3982:	str.w	r8, [ip, #8]
    3986:	str	r3, [r7, #20]
    3988:	str	r3, [r7, #16]
    398a:	str.w	lr, [r3, #12]
    398e:	str.w	lr, [r3, #8]
    3992:	str	r1, [r3, #4]
    3994:	str	r2, [r3, r2]
    3996:	bl	3dc0 <__malloc_unlock>
    399a:	b.n	39dc <_malloc_r+0x190>
    399c:	cmp	r1, #16
    399e:	bhi.n	39e4 <_malloc_r+0x198>
    39a0:	bl	3dbc <__malloc_lock>
    39a4:	movs	r5, #16
    39a6:	movs	r3, #6
    39a8:	movs	r0, #2
    39aa:	ldr	r7, [pc, #504]	; (3ba4 <_malloc_r+0x358>)
    39ac:	add.w	r3, r7, r3, lsl #2
    39b0:	sub.w	r2, r3, #8
    39b4:	ldr	r4, [r3, #4]
    39b6:	cmp	r4, r2
    39b8:	beq.w	3c46 <_malloc_r+0x3fa>
    39bc:	ldr	r3, [r4, #4]
    39be:	ldr	r1, [r4, #12]
    39c0:	ldr	r5, [r4, #8]
    39c2:	bic.w	r3, r3, #3
    39c6:	add	r3, r4
    39c8:	mov	r0, r6
    39ca:	ldr	r2, [r3, #4]
    39cc:	str	r1, [r5, #12]
    39ce:	orr.w	r2, r2, #1
    39d2:	str	r5, [r1, #8]
    39d4:	str	r2, [r3, #4]
    39d6:	bl	3dc0 <__malloc_unlock>
    39da:	adds	r4, #8
    39dc:	mov	r0, r4
    39de:	add	sp, #12
    39e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39e4:	movs	r4, #0
    39e6:	movs	r3, #12
    39e8:	mov	r0, r4
    39ea:	str	r3, [r6, #0]
    39ec:	add	sp, #12
    39ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39f2:	movs	r3, #128	; 0x80
    39f4:	mov.w	lr, #64	; 0x40
    39f8:	movs	r0, #63	; 0x3f
    39fa:	b.n	3890 <_malloc_r+0x44>
    39fc:	mov	r0, lr
    39fe:	b.n	38bc <_malloc_r+0x70>
    3a00:	add	r3, r4
    3a02:	ldr	r1, [r4, #12]
    3a04:	ldr	r2, [r3, #4]
    3a06:	ldr	r5, [r4, #8]
    3a08:	orr.w	r2, r2, #1
    3a0c:	str	r1, [r5, #12]
    3a0e:	mov	r0, r6
    3a10:	str	r5, [r1, #8]
    3a12:	str	r2, [r3, #4]
    3a14:	bl	3dc0 <__malloc_unlock>
    3a18:	adds	r4, #8
    3a1a:	mov	r0, r4
    3a1c:	add	sp, #12
    3a1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a22:	add	r3, r4
    3a24:	mov	r0, r6
    3a26:	ldr	r2, [r3, #4]
    3a28:	orr.w	r2, r2, #1
    3a2c:	str	r2, [r3, #4]
    3a2e:	bl	3dc0 <__malloc_unlock>
    3a32:	adds	r4, #8
    3a34:	mov	r0, r4
    3a36:	add	sp, #12
    3a38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a3c:	ldr	r4, [r7, #8]
    3a3e:	ldr	r3, [r4, #4]
    3a40:	bic.w	r8, r3, #3
    3a44:	cmp	r8, r5
    3a46:	bcc.n	3a52 <_malloc_r+0x206>
    3a48:	rsb	r3, r5, r8
    3a4c:	cmp	r3, #15
    3a4e:	bgt.w	3b6a <_malloc_r+0x31e>
    3a52:	ldr	r3, [pc, #340]	; (3ba8 <_malloc_r+0x35c>)
    3a54:	ldr.w	r9, [pc, #352]	; 3bb8 <_malloc_r+0x36c>
    3a58:	ldr	r2, [r3, #0]
    3a5a:	ldr.w	r3, [r9]
    3a5e:	adds	r3, #1
    3a60:	add	r2, r5
    3a62:	add.w	sl, r4, r8
    3a66:	beq.w	3d2a <_malloc_r+0x4de>
    3a6a:	add.w	r2, r2, #4096	; 0x1000
    3a6e:	adds	r2, #15
    3a70:	bic.w	r2, r2, #4080	; 0xff0
    3a74:	bic.w	r2, r2, #15
    3a78:	mov	r1, r2
    3a7a:	mov	r0, r6
    3a7c:	str	r2, [sp, #4]
    3a7e:	bl	3dc4 <_sbrk_r>
    3a82:	cmp.w	r0, #4294967295
    3a86:	mov	fp, r0
    3a88:	ldr	r2, [sp, #4]
    3a8a:	beq.w	3d3e <_malloc_r+0x4f2>
    3a8e:	cmp	sl, r0
    3a90:	bhi.w	3c8c <_malloc_r+0x440>
    3a94:	ldr	r3, [pc, #276]	; (3bac <_malloc_r+0x360>)
    3a96:	ldr	r1, [r3, #0]
    3a98:	cmp	sl, fp
    3a9a:	add	r1, r2
    3a9c:	str	r1, [r3, #0]
    3a9e:	beq.w	3d48 <_malloc_r+0x4fc>
    3aa2:	ldr.w	r0, [r9]
    3aa6:	ldr.w	lr, [pc, #272]	; 3bb8 <_malloc_r+0x36c>
    3aaa:	adds	r0, #1
    3aac:	ittet	ne
    3aae:	rsbne	sl, sl, fp
    3ab2:	addne	r1, sl
    3ab4:	streq.w	fp, [lr]
    3ab8:	strne	r1, [r3, #0]
    3aba:	ands.w	r1, fp, #7
    3abe:	beq.w	3cf0 <_malloc_r+0x4a4>
    3ac2:	rsb	r0, r1, #8
    3ac6:	rsb	r1, r1, #4096	; 0x1000
    3aca:	add	fp, r0
    3acc:	adds	r1, #8
    3ace:	add	r2, fp
    3ad0:	ubfx	r2, r2, #0, #12
    3ad4:	rsb	r9, r2, r1
    3ad8:	mov	r1, r9
    3ada:	mov	r0, r6
    3adc:	str	r3, [sp, #4]
    3ade:	bl	3dc4 <_sbrk_r>
    3ae2:	adds	r3, r0, #1
    3ae4:	ldr	r3, [sp, #4]
    3ae6:	beq.w	3d68 <_malloc_r+0x51c>
    3aea:	rsb	r2, fp, r0
    3aee:	add	r2, r9
    3af0:	orr.w	r2, r2, #1
    3af4:	ldr	r1, [r3, #0]
    3af6:	str.w	fp, [r7, #8]
    3afa:	add	r1, r9
    3afc:	cmp	r4, r7
    3afe:	str.w	r2, [fp, #4]
    3b02:	str	r1, [r3, #0]
    3b04:	ldr.w	r9, [pc, #164]	; 3bac <_malloc_r+0x360>
    3b08:	beq.n	3b38 <_malloc_r+0x2ec>
    3b0a:	cmp.w	r8, #15
    3b0e:	bls.w	3d0c <_malloc_r+0x4c0>
    3b12:	ldr	r2, [r4, #4]
    3b14:	sub.w	r3, r8, #12
    3b18:	bic.w	r3, r3, #7
    3b1c:	adds	r0, r4, r3
    3b1e:	and.w	r2, r2, #1
    3b22:	mov.w	lr, #5
    3b26:	orrs	r2, r3
    3b28:	cmp	r3, #15
    3b2a:	str	r2, [r4, #4]
    3b2c:	str.w	lr, [r0, #4]
    3b30:	str.w	lr, [r0, #8]
    3b34:	bhi.w	3d70 <_malloc_r+0x524>
    3b38:	ldr	r3, [pc, #116]	; (3bb0 <_malloc_r+0x364>)
    3b3a:	ldr	r4, [r7, #8]
    3b3c:	ldr	r2, [r3, #0]
    3b3e:	cmp	r1, r2
    3b40:	it	hi
    3b42:	strhi	r1, [r3, #0]
    3b44:	ldr	r3, [pc, #108]	; (3bb4 <_malloc_r+0x368>)
    3b46:	ldr	r2, [r3, #0]
    3b48:	cmp	r1, r2
    3b4a:	ldr	r2, [r4, #4]
    3b4c:	it	hi
    3b4e:	strhi	r1, [r3, #0]
    3b50:	bic.w	r2, r2, #3
    3b54:	cmp	r5, r2
    3b56:	sub.w	r3, r2, r5
    3b5a:	bhi.n	3b60 <_malloc_r+0x314>
    3b5c:	cmp	r3, #15
    3b5e:	bgt.n	3b6a <_malloc_r+0x31e>
    3b60:	mov	r0, r6
    3b62:	bl	3dc0 <__malloc_unlock>
    3b66:	movs	r4, #0
    3b68:	b.n	39dc <_malloc_r+0x190>
    3b6a:	adds	r2, r4, r5
    3b6c:	orr.w	r3, r3, #1
    3b70:	orr.w	r5, r5, #1
    3b74:	str	r5, [r4, #4]
    3b76:	mov	r0, r6
    3b78:	str	r2, [r7, #8]
    3b7a:	str	r3, [r2, #4]
    3b7c:	bl	3dc0 <__malloc_unlock>
    3b80:	adds	r4, #8
    3b82:	mov	r0, r4
    3b84:	add	sp, #12
    3b86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b8a:	cmp	r3, #20
    3b8c:	bls.n	3c72 <_malloc_r+0x426>
    3b8e:	cmp	r3, #84	; 0x54
    3b90:	bhi.w	3cdc <_malloc_r+0x490>
    3b94:	lsrs	r0, r5, #12
    3b96:	add.w	lr, r0, #111	; 0x6f
    3b9a:	mov.w	r3, lr, lsl #1
    3b9e:	adds	r0, #110	; 0x6e
    3ba0:	b.n	3890 <_malloc_r+0x44>
    3ba2:	nop
    3ba4:	.word	0x1fff119c
    3ba8:	.word	0x1fff1c7c
    3bac:	.word	0x1fff1c80
    3bb0:	.word	0x1fff1c78
    3bb4:	.word	0x1fff1c74
    3bb8:	.word	0x1fff15a8
    3bbc:	lsrs	r2, r3, #9
    3bbe:	cmp	r2, #4
    3bc0:	bls.n	3c80 <_malloc_r+0x434>
    3bc2:	cmp	r2, #20
    3bc4:	bhi.w	3d2e <_malloc_r+0x4e2>
    3bc8:	add.w	r1, r2, #92	; 0x5c
    3bcc:	lsls	r1, r1, #1
    3bce:	adds	r2, #91	; 0x5b
    3bd0:	add.w	ip, r7, r1, lsl #2
    3bd4:	ldr.w	r1, [r7, r1, lsl #2]
    3bd8:	ldr.w	r8, [pc, #476]	; 3db8 <_malloc_r+0x56c>
    3bdc:	sub.w	ip, ip, #8
    3be0:	cmp	ip, r1
    3be2:	beq.w	3cf6 <_malloc_r+0x4aa>
    3be6:	ldr	r2, [r1, #4]
    3be8:	bic.w	r2, r2, #3
    3bec:	cmp	r3, r2
    3bee:	bcs.n	3bf6 <_malloc_r+0x3aa>
    3bf0:	ldr	r1, [r1, #8]
    3bf2:	cmp	ip, r1
    3bf4:	bne.n	3be6 <_malloc_r+0x39a>
    3bf6:	ldr.w	ip, [r1, #12]
    3bfa:	ldr	r2, [r7, #4]
    3bfc:	str.w	ip, [r4, #12]
    3c00:	str	r1, [r4, #8]
    3c02:	str.w	r4, [ip, #8]
    3c06:	str	r4, [r1, #12]
    3c08:	b.n	391c <_malloc_r+0xd0>
    3c0a:	adds	r3, r4, r5
    3c0c:	orr.w	r7, r2, #1
    3c10:	orr.w	r5, r5, #1
    3c14:	str	r5, [r4, #4]
    3c16:	mov	r0, r6
    3c18:	str	r3, [r1, #20]
    3c1a:	str	r3, [r1, #16]
    3c1c:	str.w	lr, [r3, #12]
    3c20:	str.w	lr, [r3, #8]
    3c24:	str	r7, [r3, #4]
    3c26:	str	r2, [r3, r2]
    3c28:	adds	r4, #8
    3c2a:	bl	3dc0 <__malloc_unlock>
    3c2e:	b.n	39dc <_malloc_r+0x190>
    3c30:	ldr	r2, [r1, #4]
    3c32:	b.n	391c <_malloc_r+0xd0>
    3c34:	add.w	r8, r8, #1
    3c38:	tst.w	r8, #3
    3c3c:	add.w	ip, ip, #8
    3c40:	bne.w	3942 <_malloc_r+0xf6>
    3c44:	b.n	3ca8 <_malloc_r+0x45c>
    3c46:	ldr	r4, [r3, #12]
    3c48:	cmp	r3, r4
    3c4a:	it	eq
    3c4c:	addeq	r0, #2
    3c4e:	beq.w	38bc <_malloc_r+0x70>
    3c52:	b.n	39bc <_malloc_r+0x170>
    3c54:	add	r3, r1
    3c56:	mov	r4, r1
    3c58:	ldr	r2, [r3, #4]
    3c5a:	ldr	r1, [r1, #12]
    3c5c:	ldr.w	r5, [r4, #8]!
    3c60:	orr.w	r2, r2, #1
    3c64:	str	r2, [r3, #4]
    3c66:	mov	r0, r6
    3c68:	str	r1, [r5, #12]
    3c6a:	str	r5, [r1, #8]
    3c6c:	bl	3dc0 <__malloc_unlock>
    3c70:	b.n	39dc <_malloc_r+0x190>
    3c72:	add.w	lr, r3, #92	; 0x5c
    3c76:	add.w	r0, r3, #91	; 0x5b
    3c7a:	mov.w	r3, lr, lsl #1
    3c7e:	b.n	3890 <_malloc_r+0x44>
    3c80:	lsrs	r2, r3, #6
    3c82:	add.w	r1, r2, #57	; 0x39
    3c86:	lsls	r1, r1, #1
    3c88:	adds	r2, #56	; 0x38
    3c8a:	b.n	3bd0 <_malloc_r+0x384>
    3c8c:	cmp	r4, r7
    3c8e:	ldr	r3, [pc, #296]	; (3db8 <_malloc_r+0x56c>)
    3c90:	beq.w	3a94 <_malloc_r+0x248>
    3c94:	ldr	r4, [r3, #8]
    3c96:	ldr	r2, [r4, #4]
    3c98:	bic.w	r2, r2, #3
    3c9c:	b.n	3b54 <_malloc_r+0x308>
    3c9e:	ldr.w	r3, [r9], #-8
    3ca2:	cmp	r9, r3
    3ca4:	bne.w	3dac <_malloc_r+0x560>
    3ca8:	tst.w	r0, #3
    3cac:	add.w	r0, r0, #4294967295
    3cb0:	bne.n	3c9e <_malloc_r+0x452>
    3cb2:	ldr	r3, [r7, #4]
    3cb4:	bic.w	r3, r3, r4
    3cb8:	str	r3, [r7, #4]
    3cba:	lsls	r4, r4, #1
    3cbc:	cmp	r4, r3
    3cbe:	bhi.w	3a3c <_malloc_r+0x1f0>
    3cc2:	cmp	r4, #0
    3cc4:	beq.w	3a3c <_malloc_r+0x1f0>
    3cc8:	tst	r4, r3
    3cca:	mov	r0, r8
    3ccc:	bne.w	393a <_malloc_r+0xee>
    3cd0:	lsls	r4, r4, #1
    3cd2:	tst	r4, r3
    3cd4:	add.w	r0, r0, #4
    3cd8:	beq.n	3cd0 <_malloc_r+0x484>
    3cda:	b.n	393a <_malloc_r+0xee>
    3cdc:	cmp.w	r3, #340	; 0x154
    3ce0:	bhi.n	3d14 <_malloc_r+0x4c8>
    3ce2:	lsrs	r0, r5, #15
    3ce4:	add.w	lr, r0, #120	; 0x78
    3ce8:	mov.w	r3, lr, lsl #1
    3cec:	adds	r0, #119	; 0x77
    3cee:	b.n	3890 <_malloc_r+0x44>
    3cf0:	mov.w	r1, #4096	; 0x1000
    3cf4:	b.n	3ace <_malloc_r+0x282>
    3cf6:	movs	r1, #1
    3cf8:	ldr.w	r3, [r8, #4]
    3cfc:	asrs	r2, r2, #2
    3cfe:	lsl.w	r2, r1, r2
    3d02:	orrs	r2, r3
    3d04:	str.w	r2, [r8, #4]
    3d08:	mov	r1, ip
    3d0a:	b.n	3bfc <_malloc_r+0x3b0>
    3d0c:	movs	r3, #1
    3d0e:	str.w	r3, [fp, #4]
    3d12:	b.n	3b60 <_malloc_r+0x314>
    3d14:	movw	r2, #1364	; 0x554
    3d18:	cmp	r3, r2
    3d1a:	bhi.n	3d5e <_malloc_r+0x512>
    3d1c:	lsrs	r0, r5, #18
    3d1e:	add.w	lr, r0, #125	; 0x7d
    3d22:	mov.w	r3, lr, lsl #1
    3d26:	adds	r0, #124	; 0x7c
    3d28:	b.n	3890 <_malloc_r+0x44>
    3d2a:	adds	r2, #16
    3d2c:	b.n	3a78 <_malloc_r+0x22c>
    3d2e:	cmp	r2, #84	; 0x54
    3d30:	bhi.n	3d80 <_malloc_r+0x534>
    3d32:	lsrs	r2, r3, #12
    3d34:	add.w	r1, r2, #111	; 0x6f
    3d38:	lsls	r1, r1, #1
    3d3a:	adds	r2, #110	; 0x6e
    3d3c:	b.n	3bd0 <_malloc_r+0x384>
    3d3e:	ldr	r4, [r7, #8]
    3d40:	ldr	r2, [r4, #4]
    3d42:	bic.w	r2, r2, #3
    3d46:	b.n	3b54 <_malloc_r+0x308>
    3d48:	ubfx	r0, sl, #0, #12
    3d4c:	cmp	r0, #0
    3d4e:	bne.w	3aa2 <_malloc_r+0x256>
    3d52:	add	r2, r8
    3d54:	ldr	r3, [r7, #8]
    3d56:	orr.w	r2, r2, #1
    3d5a:	str	r2, [r3, #4]
    3d5c:	b.n	3b38 <_malloc_r+0x2ec>
    3d5e:	movs	r3, #254	; 0xfe
    3d60:	mov.w	lr, #127	; 0x7f
    3d64:	movs	r0, #126	; 0x7e
    3d66:	b.n	3890 <_malloc_r+0x44>
    3d68:	movs	r2, #1
    3d6a:	mov.w	r9, #0
    3d6e:	b.n	3af4 <_malloc_r+0x2a8>
    3d70:	add.w	r1, r4, #8
    3d74:	mov	r0, r6
    3d76:	bl	3ecc <_free_r>
    3d7a:	ldr.w	r1, [r9]
    3d7e:	b.n	3b38 <_malloc_r+0x2ec>
    3d80:	cmp.w	r2, #340	; 0x154
    3d84:	bhi.n	3d92 <_malloc_r+0x546>
    3d86:	lsrs	r2, r3, #15
    3d88:	add.w	r1, r2, #120	; 0x78
    3d8c:	lsls	r1, r1, #1
    3d8e:	adds	r2, #119	; 0x77
    3d90:	b.n	3bd0 <_malloc_r+0x384>
    3d92:	movw	r1, #1364	; 0x554
    3d96:	cmp	r2, r1
    3d98:	bhi.n	3da6 <_malloc_r+0x55a>
    3d9a:	lsrs	r2, r3, #18
    3d9c:	add.w	r1, r2, #125	; 0x7d
    3da0:	lsls	r1, r1, #1
    3da2:	adds	r2, #124	; 0x7c
    3da4:	b.n	3bd0 <_malloc_r+0x384>
    3da6:	movs	r1, #254	; 0xfe
    3da8:	movs	r2, #126	; 0x7e
    3daa:	b.n	3bd0 <_malloc_r+0x384>
    3dac:	ldr	r3, [r7, #4]
    3dae:	b.n	3cba <_malloc_r+0x46e>
    3db0:	lsrs	r0, r5, #3
    3db2:	adds	r3, r0, #1
    3db4:	lsls	r3, r3, #1
    3db6:	b.n	39aa <_malloc_r+0x15e>
    3db8:	.word	0x1fff119c

00003dbc <__malloc_lock>:
    3dbc:	bx	lr
    3dbe:	nop

00003dc0 <__malloc_unlock>:
    3dc0:	bx	lr
    3dc2:	nop

00003dc4 <_sbrk_r>:
    3dc4:	push	{r3, r4, r5, lr}
    3dc6:	ldr	r4, [pc, #28]	; (3de4 <_sbrk_r+0x20>)
    3dc8:	movs	r3, #0
    3dca:	mov	r5, r0
    3dcc:	mov	r0, r1
    3dce:	str	r3, [r4, #0]
    3dd0:	bl	3158 <_sbrk>
    3dd4:	adds	r3, r0, #1
    3dd6:	beq.n	3dda <_sbrk_r+0x16>
    3dd8:	pop	{r3, r4, r5, pc}
    3dda:	ldr	r3, [r4, #0]
    3ddc:	cmp	r3, #0
    3dde:	beq.n	3dd8 <_sbrk_r+0x14>
    3de0:	str	r3, [r5, #0]
    3de2:	pop	{r3, r4, r5, pc}
    3de4:	.word	0x1fff1dec

00003de8 <register_fini>:
    3de8:	ldr	r3, [pc, #8]	; (3df4 <register_fini+0xc>)
    3dea:	cbz	r3, 3df2 <register_fini+0xa>
    3dec:	ldr	r0, [pc, #8]	; (3df8 <register_fini+0x10>)
    3dee:	b.w	3dfc <atexit>
    3df2:	bx	lr
    3df4:	.word	0x00000000
    3df8:	.word	0x00003e09

00003dfc <atexit>:
    3dfc:	movs	r3, #0
    3dfe:	mov	r1, r0
    3e00:	mov	r2, r3
    3e02:	mov	r0, r3
    3e04:	b.w	409c <__register_exitproc>

00003e08 <__libc_fini_array>:
    3e08:	push	{r3, r4, r5, lr}
    3e0a:	ldr	r5, [pc, #28]	; (3e28 <__libc_fini_array+0x20>)
    3e0c:	ldr	r4, [pc, #28]	; (3e2c <__libc_fini_array+0x24>)
    3e0e:	subs	r4, r5, r4
    3e10:	asrs	r4, r4, #2
    3e12:	beq.n	3e20 <__libc_fini_array+0x18>
    3e14:	subs	r4, #1
    3e16:	ldr.w	r3, [r5, #-4]!
    3e1a:	blx	r3
    3e1c:	cmp	r4, #0
    3e1e:	bne.n	3e14 <__libc_fini_array+0xc>
    3e20:	ldmia.w	sp!, {r3, r4, r5, lr}
    3e24:	b.w	44a8 <__init_array_end>
	...

00003e30 <_malloc_trim_r>:
    3e30:	push	{r3, r4, r5, r6, r7, lr}
    3e32:	ldr	r7, [pc, #140]	; (3ec0 <_malloc_trim_r+0x90>)
    3e34:	mov	r4, r1
    3e36:	mov	r6, r0
    3e38:	bl	3dbc <__malloc_lock>
    3e3c:	ldr	r3, [r7, #8]
    3e3e:	ldr	r5, [r3, #4]
    3e40:	bic.w	r5, r5, #3
    3e44:	subs	r1, r5, r4
    3e46:	addw	r1, r1, #4079	; 0xfef
    3e4a:	bic.w	r1, r1, #4080	; 0xff0
    3e4e:	bic.w	r1, r1, #15
    3e52:	sub.w	r4, r1, #4096	; 0x1000
    3e56:	cmp.w	r4, #4096	; 0x1000
    3e5a:	blt.n	3e6c <_malloc_trim_r+0x3c>
    3e5c:	movs	r1, #0
    3e5e:	mov	r0, r6
    3e60:	bl	3dc4 <_sbrk_r>
    3e64:	ldr	r3, [r7, #8]
    3e66:	add	r3, r5
    3e68:	cmp	r0, r3
    3e6a:	beq.n	3e76 <_malloc_trim_r+0x46>
    3e6c:	mov	r0, r6
    3e6e:	bl	3dc0 <__malloc_unlock>
    3e72:	movs	r0, #0
    3e74:	pop	{r3, r4, r5, r6, r7, pc}
    3e76:	negs	r1, r4
    3e78:	mov	r0, r6
    3e7a:	bl	3dc4 <_sbrk_r>
    3e7e:	adds	r0, #1
    3e80:	beq.n	3e9e <_malloc_trim_r+0x6e>
    3e82:	ldr	r3, [pc, #64]	; (3ec4 <_malloc_trim_r+0x94>)
    3e84:	ldr	r2, [r7, #8]
    3e86:	ldr	r1, [r3, #0]
    3e88:	subs	r5, r5, r4
    3e8a:	orr.w	r5, r5, #1
    3e8e:	mov	r0, r6
    3e90:	subs	r1, r1, r4
    3e92:	str	r5, [r2, #4]
    3e94:	str	r1, [r3, #0]
    3e96:	bl	3dc0 <__malloc_unlock>
    3e9a:	movs	r0, #1
    3e9c:	pop	{r3, r4, r5, r6, r7, pc}
    3e9e:	movs	r1, #0
    3ea0:	mov	r0, r6
    3ea2:	bl	3dc4 <_sbrk_r>
    3ea6:	ldr	r2, [r7, #8]
    3ea8:	subs	r3, r0, r2
    3eaa:	cmp	r3, #15
    3eac:	ble.n	3e6c <_malloc_trim_r+0x3c>
    3eae:	ldr	r4, [pc, #24]	; (3ec8 <_malloc_trim_r+0x98>)
    3eb0:	ldr	r1, [pc, #16]	; (3ec4 <_malloc_trim_r+0x94>)
    3eb2:	ldr	r4, [r4, #0]
    3eb4:	orr.w	r3, r3, #1
    3eb8:	subs	r0, r0, r4
    3eba:	str	r3, [r2, #4]
    3ebc:	str	r0, [r1, #0]
    3ebe:	b.n	3e6c <_malloc_trim_r+0x3c>
    3ec0:	.word	0x1fff119c
    3ec4:	.word	0x1fff1c80
    3ec8:	.word	0x1fff15a8

00003ecc <_free_r>:
    3ecc:	cmp	r1, #0
    3ece:	beq.n	3f5c <_free_r+0x90>
    3ed0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ed4:	mov	r5, r1
    3ed6:	mov	r8, r0
    3ed8:	bl	3dbc <__malloc_lock>
    3edc:	ldr.w	r7, [r5, #-4]
    3ee0:	ldr	r1, [pc, #424]	; (408c <_free_r+0x1c0>)
    3ee2:	bic.w	r3, r7, #1
    3ee6:	sub.w	r4, r5, #8
    3eea:	adds	r2, r4, r3
    3eec:	ldr	r6, [r1, #8]
    3eee:	ldr	r0, [r2, #4]
    3ef0:	cmp	r2, r6
    3ef2:	bic.w	r0, r0, #3
    3ef6:	beq.n	3fbe <_free_r+0xf2>
    3ef8:	lsls	r6, r7, #31
    3efa:	str	r0, [r2, #4]
    3efc:	bmi.n	3f16 <_free_r+0x4a>
    3efe:	ldr.w	r7, [r5, #-8]
    3f02:	subs	r4, r4, r7
    3f04:	add.w	lr, r1, #8
    3f08:	ldr	r5, [r4, #8]
    3f0a:	cmp	r5, lr
    3f0c:	add	r3, r7
    3f0e:	beq.n	3ff0 <_free_r+0x124>
    3f10:	ldr	r7, [r4, #12]
    3f12:	str	r7, [r5, #12]
    3f14:	str	r5, [r7, #8]
    3f16:	adds	r5, r2, r0
    3f18:	ldr	r5, [r5, #4]
    3f1a:	lsls	r5, r5, #31
    3f1c:	bpl.n	3fa4 <_free_r+0xd8>
    3f1e:	orr.w	r2, r3, #1
    3f22:	str	r2, [r4, #4]
    3f24:	str	r3, [r4, r3]
    3f26:	cmp.w	r3, #512	; 0x200
    3f2a:	bcs.n	3f5e <_free_r+0x92>
    3f2c:	lsrs	r3, r3, #3
    3f2e:	adds	r2, r3, #1
    3f30:	ldr	r5, [r1, #4]
    3f32:	ldr.w	r7, [r1, r2, lsl #3]
    3f36:	str	r7, [r4, #8]
    3f38:	movs	r0, #1
    3f3a:	asrs	r3, r3, #2
    3f3c:	lsl.w	r3, r0, r3
    3f40:	add.w	r0, r1, r2, lsl #3
    3f44:	orrs	r5, r3
    3f46:	subs	r0, #8
    3f48:	str	r0, [r4, #12]
    3f4a:	str	r5, [r1, #4]
    3f4c:	str.w	r4, [r1, r2, lsl #3]
    3f50:	str	r4, [r7, #12]
    3f52:	mov	r0, r8
    3f54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f58:	b.w	3dc0 <__malloc_unlock>
    3f5c:	bx	lr
    3f5e:	lsrs	r2, r3, #9
    3f60:	cmp	r2, #4
    3f62:	bhi.n	400c <_free_r+0x140>
    3f64:	lsrs	r2, r3, #6
    3f66:	add.w	r7, r2, #57	; 0x39
    3f6a:	lsls	r7, r7, #1
    3f6c:	add.w	r5, r2, #56	; 0x38
    3f70:	add.w	r0, r1, r7, lsl #2
    3f74:	ldr.w	r2, [r1, r7, lsl #2]
    3f78:	ldr	r1, [pc, #272]	; (408c <_free_r+0x1c0>)
    3f7a:	subs	r0, #8
    3f7c:	cmp	r0, r2
    3f7e:	beq.n	401c <_free_r+0x150>
    3f80:	ldr	r1, [r2, #4]
    3f82:	bic.w	r1, r1, #3
    3f86:	cmp	r3, r1
    3f88:	bcs.n	3f90 <_free_r+0xc4>
    3f8a:	ldr	r2, [r2, #8]
    3f8c:	cmp	r0, r2
    3f8e:	bne.n	3f80 <_free_r+0xb4>
    3f90:	ldr	r0, [r2, #12]
    3f92:	str	r0, [r4, #12]
    3f94:	str	r2, [r4, #8]
    3f96:	str	r4, [r0, #8]
    3f98:	str	r4, [r2, #12]
    3f9a:	mov	r0, r8
    3f9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3fa0:	b.w	3dc0 <__malloc_unlock>
    3fa4:	ldr	r5, [r2, #8]
    3fa6:	ldr	r7, [pc, #232]	; (4090 <_free_r+0x1c4>)
    3fa8:	cmp	r5, r7
    3faa:	add	r3, r0
    3fac:	beq.n	402e <_free_r+0x162>
    3fae:	ldr	r0, [r2, #12]
    3fb0:	str	r0, [r5, #12]
    3fb2:	orr.w	r2, r3, #1
    3fb6:	str	r5, [r0, #8]
    3fb8:	str	r2, [r4, #4]
    3fba:	str	r3, [r4, r3]
    3fbc:	b.n	3f26 <_free_r+0x5a>
    3fbe:	lsls	r7, r7, #31
    3fc0:	add	r3, r0
    3fc2:	bmi.n	3fd4 <_free_r+0x108>
    3fc4:	ldr.w	r2, [r5, #-8]
    3fc8:	subs	r4, r4, r2
    3fca:	add	r3, r2
    3fcc:	ldr	r0, [r4, #8]
    3fce:	ldr	r2, [r4, #12]
    3fd0:	str	r2, [r0, #12]
    3fd2:	str	r0, [r2, #8]
    3fd4:	ldr	r2, [pc, #188]	; (4094 <_free_r+0x1c8>)
    3fd6:	ldr	r2, [r2, #0]
    3fd8:	orr.w	r0, r3, #1
    3fdc:	cmp	r3, r2
    3fde:	str	r0, [r4, #4]
    3fe0:	str	r4, [r1, #8]
    3fe2:	bcc.n	3f52 <_free_r+0x86>
    3fe4:	ldr	r3, [pc, #176]	; (4098 <_free_r+0x1cc>)
    3fe6:	mov	r0, r8
    3fe8:	ldr	r1, [r3, #0]
    3fea:	bl	3e30 <_malloc_trim_r>
    3fee:	b.n	3f52 <_free_r+0x86>
    3ff0:	adds	r1, r2, r0
    3ff2:	ldr	r1, [r1, #4]
    3ff4:	lsls	r1, r1, #31
    3ff6:	bmi.n	4082 <_free_r+0x1b6>
    3ff8:	ldr	r1, [r2, #8]
    3ffa:	ldr	r2, [r2, #12]
    3ffc:	str	r2, [r1, #12]
    3ffe:	add	r3, r0
    4000:	orr.w	r0, r3, #1
    4004:	str	r1, [r2, #8]
    4006:	str	r0, [r4, #4]
    4008:	str	r3, [r4, r3]
    400a:	b.n	3f52 <_free_r+0x86>
    400c:	cmp	r2, #20
    400e:	bhi.n	4040 <_free_r+0x174>
    4010:	add.w	r7, r2, #92	; 0x5c
    4014:	lsls	r7, r7, #1
    4016:	add.w	r5, r2, #91	; 0x5b
    401a:	b.n	3f70 <_free_r+0xa4>
    401c:	asrs	r2, r5, #2
    401e:	ldr	r3, [r1, #4]
    4020:	movs	r5, #1
    4022:	lsl.w	r2, r5, r2
    4026:	orrs	r3, r2
    4028:	str	r3, [r1, #4]
    402a:	mov	r2, r0
    402c:	b.n	3f92 <_free_r+0xc6>
    402e:	orr.w	r2, r3, #1
    4032:	str	r4, [r1, #20]
    4034:	str	r4, [r1, #16]
    4036:	str	r5, [r4, #12]
    4038:	str	r5, [r4, #8]
    403a:	str	r2, [r4, #4]
    403c:	str	r3, [r4, r3]
    403e:	b.n	3f52 <_free_r+0x86>
    4040:	cmp	r2, #84	; 0x54
    4042:	bhi.n	4052 <_free_r+0x186>
    4044:	lsrs	r2, r3, #12
    4046:	add.w	r7, r2, #111	; 0x6f
    404a:	lsls	r7, r7, #1
    404c:	add.w	r5, r2, #110	; 0x6e
    4050:	b.n	3f70 <_free_r+0xa4>
    4052:	cmp.w	r2, #340	; 0x154
    4056:	bhi.n	4066 <_free_r+0x19a>
    4058:	lsrs	r2, r3, #15
    405a:	add.w	r7, r2, #120	; 0x78
    405e:	lsls	r7, r7, #1
    4060:	add.w	r5, r2, #119	; 0x77
    4064:	b.n	3f70 <_free_r+0xa4>
    4066:	movw	r0, #1364	; 0x554
    406a:	cmp	r2, r0
    406c:	bhi.n	407c <_free_r+0x1b0>
    406e:	lsrs	r2, r3, #18
    4070:	add.w	r7, r2, #125	; 0x7d
    4074:	lsls	r7, r7, #1
    4076:	add.w	r5, r2, #124	; 0x7c
    407a:	b.n	3f70 <_free_r+0xa4>
    407c:	movs	r7, #254	; 0xfe
    407e:	movs	r5, #126	; 0x7e
    4080:	b.n	3f70 <_free_r+0xa4>
    4082:	orr.w	r2, r3, #1
    4086:	str	r2, [r4, #4]
    4088:	str	r3, [r4, r3]
    408a:	b.n	3f52 <_free_r+0x86>
    408c:	.word	0x1fff119c
    4090:	.word	0x1fff11a4
    4094:	.word	0x1fff15a4
    4098:	.word	0x1fff1c7c

0000409c <__register_exitproc>:
    409c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    40a0:	ldr	r4, [pc, #148]	; (4138 <__register_exitproc+0x9c>)
    40a2:	ldr	r5, [r4, #0]
    40a4:	ldr.w	r4, [r5, #328]	; 0x148
    40a8:	mov	r6, r0
    40aa:	mov	r8, r1
    40ac:	mov	sl, r2
    40ae:	mov	r9, r3
    40b0:	cbz	r4, 4124 <__register_exitproc+0x88>
    40b2:	ldr	r0, [r4, #4]
    40b4:	cmp	r0, #31
    40b6:	bgt.n	40e8 <__register_exitproc+0x4c>
    40b8:	adds	r3, r0, #1
    40ba:	cbz	r6, 40da <__register_exitproc+0x3e>
    40bc:	add.w	r5, r4, r0, lsl #2
    40c0:	movs	r2, #1
    40c2:	str.w	sl, [r5, #136]	; 0x88
    40c6:	ldr.w	r1, [r4, #392]	; 0x188
    40ca:	lsls	r2, r0
    40cc:	orrs	r1, r2
    40ce:	cmp	r6, #2
    40d0:	str.w	r1, [r4, #392]	; 0x188
    40d4:	str.w	r9, [r5, #264]	; 0x108
    40d8:	beq.n	4118 <__register_exitproc+0x7c>
    40da:	adds	r0, #2
    40dc:	str	r3, [r4, #4]
    40de:	str.w	r8, [r4, r0, lsl #2]
    40e2:	movs	r0, #0
    40e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    40e8:	ldr	r3, [pc, #80]	; (413c <__register_exitproc+0xa0>)
    40ea:	cbz	r3, 412e <__register_exitproc+0x92>
    40ec:	mov.w	r0, #400	; 0x190
    40f0:	bl	383c <malloc>
    40f4:	mov	r4, r0
    40f6:	cbz	r0, 412e <__register_exitproc+0x92>
    40f8:	ldr.w	r3, [r5, #328]	; 0x148
    40fc:	movs	r7, #0
    40fe:	stmia.w	r0, {r3, r7}
    4102:	str.w	r4, [r5, #328]	; 0x148
    4106:	mov	r0, r7
    4108:	movs	r3, #1
    410a:	str.w	r7, [r4, #392]	; 0x188
    410e:	str.w	r7, [r4, #396]	; 0x18c
    4112:	cmp	r6, #0
    4114:	beq.n	40da <__register_exitproc+0x3e>
    4116:	b.n	40bc <__register_exitproc+0x20>
    4118:	ldr.w	r1, [r4, #396]	; 0x18c
    411c:	orrs	r2, r1
    411e:	str.w	r2, [r4, #396]	; 0x18c
    4122:	b.n	40da <__register_exitproc+0x3e>
    4124:	add.w	r4, r5, #332	; 0x14c
    4128:	str.w	r4, [r5, #328]	; 0x148
    412c:	b.n	40b2 <__register_exitproc+0x16>
    412e:	mov.w	r0, #4294967295
    4132:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4136:	nop
    4138:	.word	0x0000448c
    413c:	.word	0x0000383d
    4140:	.word	0x00000026
    4144:	.word	0x00000029
    4148:	.word	0x0000002d
    414c:	.word	0x00000033
    4150:	.word	0x00000064
    4154:	.word	0x00000064
    4158:	.word	0x00000064
    415c:	.word	0x00000064
    4160:	.word	0x00000001
    4164:	.word	0x00000001
    4168:	.word	0x00000001
    416c:	.word	0x00000001
    4170:	.word	0x7370704f
    4174:	.word	0x6e61202c
    4178:	.word	0x6b6e7520
    417c:	.word	0x6e776f6e
    4180:	.word	0x44494d20
    4184:	.word	0x656d2049
    4188:	.word	0x67617373
    418c:	.word	0x79742065
    4190:	.word	0x00216570
    4194:	.word	0x43544950
    4198:	.word	0x00000048
    419c:	.word	0x4f4c4556
    41a0:	.word	0x59544943
    41a4:	.word	0x00000000
    41a8:	.word	0x45544f4e
    41ac:	.word	0x474e454c
    41b0:	.word	0x00004854
    41b4:	.word	0x424f4c47
    41b8:	.word	0x00004c41

000041bc <pin2sc1a>:
    41bc:	................
    41cc:	................
    41dc:	................
    41ec:	................
    41fc:	........

00004204 <digital_pin_to_info_PGM>:
    4204:	@..C@..@D..CD..@
    4214:	...C...@0..C0..@
    4224:	4..C4..@...C...@
    4234:	...C...@...C...@
    4244:	...C...@...C...@
    4254:	...C...@...C...@
    4264:	...C...@...C...@
    4274:	...C...@...C...@
    4284:	...C...@...C...@
    4294:	...C...@...C...@
    42a4:	...C...@...C...@
    42b4:	...C...@...C...@
    42c4:	h .Ch..@...C...@
    42d4:	8..C8..@<..C<..@
    42e4:	@..C@..@H..CH..@
    42f4:	L..CL..@(..C(..@
    4304:	,..C,..@` .C`..@
    4314:	d .Cd..@ ..C ..@
    4324:	$..C$..@(..C(..@
    4334:	,..C,..@D..CD..@
    4344:	p..Cp..@t..Ct..@
    4354:	h..Ch..@P..CP..@
    4364:	X..CX..@\..C\..@
    4374:	T..CT..@ ..C ..@
    4384:	$..C$..@...C...@
    4394:	...C...@8..C8..@
    43a4:	4..C4..@0..C0..@
    43b4:	<..C<..@,..C,..@
    43c4:	( .C(..@, .C,..@
    43d4:	. .C...@. .C...@
    43e4:	. .C...@. .C...@
    43f4:	. .C...@. .C...@

00004404 <vtable for usb_serial_class>:
	...
    440c:	.-...-...-...-..
    441c:	.-..}-..y-..u-..
    442c:	....

00004430 <usb_endpoint_config_table>:
    4430:	........

00004438 <usb_descriptor_list>:
    4438:	....t...........
    4448:	............P...
    4458:	................
    4468:	....8...........
    4478:	T...............
    4488:	....

0000448c <_global_impure_ptr>:
    448c:	p...

00004490 <_init>:
    4490:	push	{r3, r4, r5, r6, r7, lr}
    4492:	nop
    4494:	pop	{r3, r4, r5, r6, r7}
    4496:	pop	{r3}
    4498:	mov	lr, r3
    449a:	bx	lr

0000449c <__init_array_start>:
    449c:	.word	0x00003de9

000044a0 <__frame_dummy_init_array_entry>:
    44a0:	5...}...

Disassembly of section .fini:

000044a8 <_fini>:
    44a8:	push	{r3, r4, r5, r6, r7, lr}
    44aa:	nop

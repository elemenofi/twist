
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00005398 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15b0 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00004008 l     F .text	0000000c startup_default_early_hook
00004014 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15b0 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15b4 l       .bss	00000000 object.8610
00005390 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00001df8 l     F .text	00000228 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff1839 l     O .bss	00000001 tx_noautoflush
1fff183c l     O .bss	00000004 tx_packet
1fff1840 l     O .bss	00000001 transmit_previous_timeout
1fff1844 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
000022f4 l     F .text	00000144 wait_for_cal
1fff1849 l     O .bss	00000001 analog_right_shift
1fff184a l     O .bss	00000001 calibrating
000050ac l     O .text	00000048 pin2sc1a
1fff0c58 l     O .data	00000001 analog_config_bits
1fff184b l     O .bss	00000001 analogReadBusyADC1
1fff184c l     O .bss	00000001 analogReadBusyADC0
1fff184d l     O .bss	00000001 analog_reference_internal
1fff0c59 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00002614 l     F .text	0000004c digitalWrite.part.1
00002660 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002940 l     F .text	00000048 sysex_byte
1fff1868 l     O .bss	00000001 tx_noautoflush
1fff1894 l     O .bss	00000004 tx_packet
1fff1898 l     O .bss	00000001 transmit_previous_timeout
1fff18a0 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c5c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff18b4 l     O .bss	00000004 ep0_tx_ptr
1fff18b8 l     O .bss	00000014 rx_last
1fff18cc l     O .bss	00000002 ep0_tx_len
1fff18d0 l     O .bss	00000040 ep0_rx0_buf
1fff1910 l     O .bss	00000014 rx_first
1fff1924 l     O .bss	00000001 ep0_tx_data_toggle
1fff1928 l     O .bss	00000040 ep0_rx1_buf
1fff1968 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff197c l     O .bss	00000014 tx_last
1fff1990 l     O .bss	00000008 setup
1fff1998 l     O .bss	00000001 ep0_tx_bdt_bank
1fff199c l     O .bss	00000008 reply_buffer
1fff19a8 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff19ad l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff19b0 l     O .bss	00000004 rts_pin
1fff19b4 l     O .bss	00000001 rx_buffer_head
1fff19b5 l     O .bss	00000001 rx_buffer_tail
1fff19b8 l     O .bss	00000028 tx_buffer
1fff19e0 l     O .bss	00000040 rx_buffer
1fff1a20 l     O .bss	00000001 transmitting
1fff1a21 l     O .bss	00000001 tx_buffer_tail
1fff1a24 l     O .bss	00000004 transmit_pin
1fff1a28 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1a2c l     O .bss	00000004 rts_pin
1fff1a30 l     O .bss	00000001 transmitting
1fff1a31 l     O .bss	00000001 rx_buffer_tail
1fff1a34 l     O .bss	00000028 tx_buffer
1fff1a5c l     O .bss	00000040 rx_buffer
1fff1a9c l     O .bss	00000001 rx_buffer_head
1fff1a9d l     O .bss	00000001 tx_buffer_tail
1fff1aa0 l     O .bss	00000004 transmit_pin
1fff1aa4 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1aa8 l     O .bss	00000004 rts_pin
1fff1aac l     O .bss	00000001 rx_buffer_head
1fff1aad l     O .bss	00000001 rx_buffer_tail
1fff1ab0 l     O .bss	00000028 tx_buffer
1fff1ad8 l     O .bss	00000040 rx_buffer
1fff1b18 l     O .bss	00000001 transmitting
1fff1b19 l     O .bss	00000001 tx_buffer_tail
1fff1b1c l     O .bss	00000004 transmit_pin
1fff1b20 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1b24 l     O .bss	00000004 rts_pin
1fff1b28 l     O .bss	00000001 rx_buffer_head
1fff1b29 l     O .bss	00000001 rx_buffer_tail
1fff1b2c l     O .bss	00000040 tx_buffer
1fff1b6c l     O .bss	00000040 rx_buffer
1fff1bac l     O .bss	00000001 transmitting
1fff1bad l     O .bss	00000001 tx_buffer_tail
1fff1bb0 l     O .bss	00000004 transmit_pin
1fff1bb4 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1bb8 l     O .bss	00000004 rts_pin
1fff1bbc l     O .bss	00000001 rx_buffer_head
1fff1bbd l     O .bss	00000001 rx_buffer_tail
1fff1bc0 l     O .bss	00000028 tx_buffer
1fff1be8 l     O .bss	00000040 rx_buffer
1fff1c28 l     O .bss	00000001 transmitting
1fff1c29 l     O .bss	00000001 tx_buffer_tail
1fff1c2c l     O .bss	00000004 transmit_pin
1fff1c30 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c74 l     O .data	00000012 device_descriptor
1fff0ca0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1c34 l     O .bss	00000004 rts_pin
1fff1c38 l     O .bss	00000001 rx_buffer_head
1fff1c39 l     O .bss	00000001 rx_buffer_tail
1fff1c3c l     O .bss	00000028 tx_buffer
1fff1c64 l     O .bss	00000040 rx_buffer
1fff1ca4 l     O .bss	00000001 transmitting
1fff1ca5 l     O .bss	00000001 tx_buffer_tail
1fff1ca8 l     O .bss	00000004 transmit_pin
1fff1cac l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004ca8 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d70 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15b0 l       .bss	00000000 __bss_start__
1fff1e48 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00004000  w    F .text	00000006 adc0_isr
00002098 g     F .text	0000001c usb_serial_available
00003ec0 g     F .text	00000020 serial4_available
00003b6c  w    F .text	000000c4 yield
1fff0c88 g     O .data	00000018 usb_string_manufacturer_name_default
000040ac g     F .text	00000020 serial_available
1fff186c g     O .bss	00000004 usb_midi_handleProgramChange
00003fb8  w    F .text	00000048 hard_fault_isr
00004000  w    F .text	00000006 dma_ch6_isr
00003c60 g     F .text	00000020 Print::println()
00003d94 g     F .text	00000020 serial2_available
00004000  w    F .text	00000006 uart0_lon_isr
00002f80 g     F .text	000000e8 usb_rx_memory
00003c30  w    F .text	00000002 serialEvent5()
00004000  w    F .text	00000006 dma_ch8_isr
000041d8 g     F .text	00000020 serial6_available
00004c80 g     F .text	00000002 __malloc_unlock
1fff1880 g     O .bss	00000004 usb_midi_handleAfterTouch
00002438 g     F .text	000000e0 analog_init
00003068 g     F .text	00000084 usb_tx
00004000  w    F .text	00000006 portcd_isr
1fff1890 g     O .bss	00000004 usb_midi_handleSysExComplete
000045f8 g     F .text	00000098 MillisTimer::runFromTimer()
00004000  w    F .text	00000006 can1_rx_warn_isr
0000539c g       .fini	00000000 __exidx_end
00004000  w    F .text	00000006 dma_error_isr
1fff1d0c g     O .bss	00000001 usb_midi_msg_type
1fff1cc4 g     O .bss	00000001 EventResponder::runningFromYield
00004000  w    F .text	00000006 i2c0_isr
000046a0 g     F .text	0000000c __errno
00004000  w    F .text	00000006 portd_isr
00004000  w    F .text	00000006 enet_error_isr
1fff1cb0 g     O .bss	00000004 EventResponder::firstInterrupt
00004000  w    F .text	00000006 tpm1_isr
00003c4c  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000050f4 g     O .text	00000200 digital_pin_to_info_PGM
1fff1e44 g     O .bss	00000004 errno
0000539c g       .fini	00000000 _etext
1fff15b0 g       .bss	00000000 _sbss
00003c98  w    F .text	00000002 serialEvent6()
1fff187c g     O .bss	00000004 usb_midi_handleVelocityChange
00002708 g     F .text	0000001c digitalRead
00004000  w    F .text	00000006 porte_isr
00000494 g     F .text	00001964 loop
00004000  w    F .text	00000006 portb_isr
00002a24 g     F .text	0000002c usb_midi_flush_output
00004000  w    F .text	00000006 spi1_isr
00003ee0 g     F .text	000000d8 uart3_status_isr
000044a4  w    F .text	00000002 serialEvent1()
1fff15fc g     O .bss	00000018 led4
00004000  w    F .text	00000006 mcm_isr
00004590 g     F .text	00000068 MillisTimer::addToActiveList()
00002a50 g     F .text	0000043c usb_midi_read
1fff1858 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1cb4 g     O .bss	00000004 EventResponder::lastInterrupt
00003db4 g     F .text	0000010c uart1_status_isr
1fff1d0e g     O .bss	00000002 usb_midi_msg_sysex_len
00004000  w    F .text	00000006 randnum_isr
1fff1860 g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff1850 g     O .bss	00000004 systick_millis_count
00003fb8  w    F .text	00000048 bus_fault_isr
00004000  w    F .text	00000006 watchdog_isr
00004000  w    F .text	00000006 i2c1_isr
1fff19a4 g     O .bss	00000001 usb_configuration
00004000  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00003c80  w    F .text	00000002 serialEvent2()
00004000  w    F .text	00000006 i2c2_isr
1fff0c88  w    O .data	00000018 usb_string_manufacturer_name
1fff1e38 g     O .bss	0000000a usb_rx_byte_count_data
00004000  w    F .text	00000006 pit1_isr
000046fc g     F .text	00000010 malloc
00004000  w    F .text	00000006 dma_ch4_isr
00004000  w    F .text	00000006 software_isr
00004000  w    F .text	00000006 dma_ch7_isr
0000452c  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00003a9c g     F .text	000000d0 usb_init
00004000  w    F .text	00000006 lptmr_isr
1fff1cd4 g     O .bss	00000004 __malloc_top_pad
000026d8 g     F .text	00000024 rtc_set
1fff17a8 g     O .bss	00000028 button5
1fff1810 g     O .bss	00000028 button4
1fff0c40 g       .data	00000000 _sdata
1fff18b0 g     O .bss	00000004 usb_midi_handleNoteOn
00004078 g     F .text	00000034 kinetis_hsrun_enable
00004c84 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00002020 g     F .text	00000048 usb_serial_getchar
00004000  w    F .text	00000006 can1_bus_off_isr
00004000  w    F .text	00000006 ftm2_isr
1fff1d00 g     O .bss	00000008 usb_cdc_line_coding
000026fc g     F .text	0000000a digitalWrite
00004000  w    F .text	00000006 uart5_status_isr
000041f8 g     F .text	000000e4 lpuart0_status_isr
1fff1cbc g     O .bss	00000004 EventResponder::lastYield
00005320 g     O .text	00000005 usb_endpoint_config_table
00004000  w    F .text	00000006 dma_ch9_isr
00004000  w    F .text	00000006 pit2_isr
000043ac g     F .text	00000020 serial3_available
1fff1cd0 g     O .bss	00000004 __malloc_max_sbrked_mem
00002724 g     F .text	0000000a pinMode
00002ecc g     F .text	0000004c usb_free
00004000  w    F .text	00000006 i2c3_isr
1fff162c g     O .bss	00000018 led1
1fff1878 g     O .bss	00000004 usb_midi_handleSysExPartial
0000539c g       .fini	00000000 __exidx_start
00004000  w    F .text	00000006 pit0_isr
1fff1d10 g     O .bss	00000001 usb_midi_msg_data1
1fff1cc0 g     O .bss	00000004 EventResponder::firstYield
0000537c g     O .text	00000004 _global_impure_ptr
00004000  w    F .text	00000006 can1_error_isr
000046ac g     F .text	00000050 __libc_init_array
1fff1e48 g       .bss	00000000 __bss_end
00004000  w    F .text	00000006 can0_wakeup_isr
00004000  w    F .text	00000006 flash_cmd_isr
1fff17f8 g     O .bss	00000018 knob5
00003c34  w    F .text	00000004 usb_serial_class::clear()
000043cc g     F .text	000000d8 uart2_status_isr
00004018 g     F .text	0000002c _sbrk
1fff1cc8 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c70 g     O .data	00000004 __brkval
1fff1848 g     O .bss	00000001 usb_cdc_line_rtsdtr
000022ac g     F .text	00000048 usb_serial_flush_callback
00005380 g     F .text	00000000 _init
00004000  w    F .text	00000006 svcall_isr
00004000  w    F .text	00000006 dma_ch15_isr
00004000  w    F .text	00000006 uart1_error_isr
00004cc8 g     F .text	00000028 __libc_fini_array
00004000  w    F .text	00000006 usbhs_phy_isr
1fff1e48 g       .bss	00000000 _ebss
00004000 g     F .text	00000006 unused_isr
00004000  w    F .text	00000006 spi0_isr
00004000  w    F .text	00000006 dma_ch3_isr
00004000  w    F .text	00000006 flash_error_isr
1fff1644 g     O .bss	00000018 knob2
00003c9c g     F .text	00000020 serial5_available
00004000  w    F .text	00000006 uart5_error_isr
00004000  w    F .text	00000006 rtc_seconds_isr
00004000  w    F .text	00000006 pdb_isr
00003fb8  w    F .text	00000048 usage_fault_isr
00004000  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00004000  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1d08 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff0c40 g     O .data	00000018 leds
00004690 g     F .text	00000010 systick_isr
00004000  w    F .text	00000006 rtc_alarm_isr
00004000  w    F .text	00000006 dma_ch2_isr
1fff0c60 g     O .data	00000010 Serial
00004000  w    F .text	00000006 ftm1_isr
00003c54  w    F .text	00000006 usb_serial_class::write(unsigned char)
00004008  w    F .text	0000000c startup_early_hook
00004000  w    F .text	00000006 dma_ch13_isr
00004000  w    F .text	00000006 uart2_error_isr
00002068 g     F .text	00000030 usb_serial_peekchar
1fff0d54 g     O .data	00000016 usb_string_serial_number_default
00003fb8 g     F .text	00000048 fault_isr
00004d8c g     F .text	000001d0 _free_r
1fff189c g     O .bss	00000004 usb_midi_handleStop
00004000  w    F .text	00000006 usb_charge_isr
00003c44  w    F .text	00000004 usb_serial_class::flush()
00004000  w    F .text	00000006 cmt_isr
00004000  w    F .text	00000006 usbhs_isr
1fff18ac g     O .bss	00000004 usb_midi_handleControlChange
1fff15a8 g     O .data	00000004 __malloc_sbrk_base
00003c3c  w    F .text	00000004 usb_serial_class::read()
00004000  w    F .text	00000006 ftm3_isr
00004000  w    F .text	00000006 tsi0_isr
1fff1690 g     O .bss	00000018 led6
1fff16a8 g     O .bss	00000018 knob1
00004000  w    F .text	00000006 spi2_isr
00003c84  w    F .text	00000002 serialEvent4()
00003c5c  w    F .text	00000002 serialEvent()
1fff1925 g     O .bss	00000001 usb_reboot_timer
00004f5c g     F .text	000000a4 __register_exitproc
000020b4 g     F .text	00000038 usb_serial_flush_input
000021f4 g     F .text	00000018 usb_serial_putchar
1fff1cd8 g     O .bss	00000028 __malloc_current_mallinfo
00004000  w    F .text	00000006 can0_bus_off_isr
1fff1614 g     O .bss	00000018 led5
1fff1999 g     O .bss	00000001 usb_rx_memory_needed
000030ec g     F .text	000009b0 usb_isr
1fff18a8 g     O .bss	00000004 usb_midi_handleNoteOff
000052f4  w    O .text	00000028 vtable for usb_serial_class
1fff1660 g     O .bss	00000018 knob3
00004000  w    F .text	00000006 uart3_error_isr
1fff1cb8 g     O .bss	00000004 MillisTimer::listActive
00004000  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00004000  w    F .text	00000006 low_voltage_isr
1fff16e8 g     O .bss	00000028 button2
1fff119c g     O .data	00000408 __malloc_av_
00004000  w    F .text	00000006 can0_error_isr
000027d4 g     F .text	0000016c _init_Teensyduino_internal_
00002254 g     F .text	00000058 usb_serial_flush_output
00004000  w    F .text	00000006 dma_ch12_isr
00004c7c g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00004000  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00004000  w    F .text	00000006 pit3_isr
00004000  w    F .text	00000006 enet_rx_isr
00004000  w    F .text	00000006 portc_isr
00003c88 g     F .text	00000010 main
1fff1ccc g     O .bss	00000004 __malloc_max_total_mem
1fff15e4 g     O .bss	00000018 led3
00003fb8  w    F .text	00000048 memmanage_fault_isr
000042dc g     F .text	00000084 usb_init_serialnumber
1fff165c g     O .bss	00000001 currentMode
00005398 g       .text	00000000 __init_array_end
0000470c g     F .text	00000570 _malloc_r
00004000  w    F .text	00000006 debugmonitor_isr
1fff1874 g     O .bss	00000004 usb_midi_handleSongPosition
000044ac g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1864 g     O .bss	00000004 usb_midi_handleContinue
1fff1d11 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00004000  w    F .text	00000006 cmp1_isr
1fff1710 g     O .bss	00000028 button3
00004000  w    F .text	00000006 ftm0_isr
00004cf0 g     F .text	0000009c _malloc_trim_r
1fff0d50 g     O .data	00000004 string0
000020ec g     F .text	00000108 usb_serial_write
00004014  w    F .text	00000002 startup_late_hook
00003c40  w    F .text	00000004 usb_serial_class::available()
1fff1d12 g     O .bss	00000001 usb_midi_msg_cable
1fff0d38  w    O .data	00000018 usb_string_product_name
00002730 g     F .text	000000a4 delay
00004000  w    F .text	00000006 tpm0_isr
00005398 g     F .fini	00000000 _fini
00004000  w    F .text	00000006 i2s0_rx_isr
00004000  w    F .text	00000006 uart4_error_isr
00002988 g     F .text	0000009c usb_midi_write_packed
00004cbc g     F .text	0000000c atexit
00004000  w    F .text	00000006 can0_message_isr
1fff1198 g     O .data	00000004 _impure_ptr
00004000  w    F .text	00000006 can1_message_isr
00004000  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff188c g     O .bss	00000004 usb_midi_handleTuneRequest
0000538c g       .text	00000000 __preinit_array_end
00004000  w    F .text	00000006 sdhc_isr
1fff1d13 g     O .bss	00000001 usb_midi_msg_channel
00000490 g     F .text	00000002 setup
00005328 g     O .text	00000054 usb_descriptor_list
00002f18 g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1678 g     O .bss	00000018 knob4
00004000  w    F .text	00000006 dma_ch10_isr
1fff1738 g     O .bss	00000070 sequence1
1fff1884 g     O .bss	00000004 usb_midi_handleStart
00004000  w    F .text	00000006 uart0_error_isr
00002e8c g     F .text	00000040 usb_malloc
00004000  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
0000220c g     F .text	00000048 usb_serial_write_buffer_free
00004000  w    F .text	00000006 enet_timer_isr
1fff17d0 g     O .bss	00000028 button6
1fff16c0 g     O .bss	00000028 button1
1fff15ac g       .data	00000000 _edata
00004000  w    F .text	00000006 i2s0_tx_isr
00004000  w    F .text	00000006 adc1_isr
00003c48  w    F .text	00000004 usb_serial_class::availableForWrite()
00004000  w    F .text	00000006 cmp0_isr
1fff1854 g     O .bss	00000004 usb_midi_handleClock
00004360 g     F .text	0000004c ultoa
00004548 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15a4 g     O .data	00000004 __malloc_trim_threshold
00003c38  w    F .text	00000004 usb_serial_class::peek()
1fff1838 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff1870 g     O .bss	00000004 usb_midi_handlePitchChange
00004000  w    F .text	00000006 pit_isr
1fff1888 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00004000  w    F .text	00000006 dac0_isr
0000538c g       .text	00000000 __init_array_start
00004000  w    F .text	00000006 can1_tx_warn_isr
00002518 g     F .text	000000fc analogRead
1fff1d14 g     O .bss	00000122 usb_midi_msg_sysex
000040cc g     F .text	0000010c uart0_status_isr
00004000  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d38 g     O .data	00000018 usb_string_product_name_default
00004000  w    F .text	00000006 dma_ch1_isr
00002f54 g     F .text	0000002c usb_tx_packet_count
00004000  w    F .text	00000006 dma_ch5_isr
00004000  w    F .text	00000006 can0_rx_warn_isr
00004000  w    F .text	00000006 can0_tx_warn_isr
00003cbc g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00004044 g     F .text	00000034 kinetis_hsrun_disable
0000538c g       .text	00000000 __preinit_array_start
000044a8  w    F .text	00000002 serialEvent3()
1fff18a4 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff15cc g     O .bss	00000018 led2
00004000  w    F .text	00000006 cmp2_isr
0000458c g     F .text	00000004 pendablesrvreq_isr
00004000  w    F .text	00000006 wakeup_isr
00004000  w    F .text	00000006 cmp3_isr
1fff185c g     O .bss	00000004 usb_midi_handleActiveSensing
00004000  w    F .text	00000006 tpm2_isr
00004000  w    F .text	00000006 dma_ch0_isr
1fff0d54  w    O .data	00000016 usb_string_serial_number
00004000  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... .....@...?..
      10:	.?...?...?...?..
      20:	.?...?...?...@..
      30:	.@...?...E...F..
      40:	.@...@...@...@..
      50:	.@...@...@...@..
      60:	.@...@...@...@..
      70:	.@...@...@...@..
      80:	.@...@...@...@..
      90:	.@...@...@...@..
      a0:	.@...@...@...@..
      b0:	.@...@...@...@..
      c0:	.@...=...@...C..
      d0:	.@...>...@...@..
      e0:	.@...@...@...@..
      f0:	.@...@...@...@..
     100:	.@...@...@...@..
     110:	.@...0...@...@..
     120:	.@...@...@...@..
     130:	.@...@...@...@..
     140:	.@...@...<...@..
     150:	.@...@...@...@..
     160:	.@...@...@...@..
     170:	.@...@...@...@..
     180:	.@...@...@...@..
     190:	.@...@...A...@..
     1a0:	.@...@...@...@..
     1b0:	.@...@...@...@..
     1c0:	.@...@...@...@..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	4008 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	27d4 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	26d8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	26d8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	46ac <__libc_init_array>

	startup_late_hook();
     33a:	bl	4014 <startup_late_hook>
	main();
     33e:	bl	3c88 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15ac
     374:	.word	0x00005398
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15b0
     380:	.word	0x1fff1e48
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15b0
     42c:	.word	0x00000000
     430:	.word	0x0000539c

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15b4
     460:	.word	0x0000539c
     464:	.word	0x1fff15ac
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #25
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    int blinkLength = 25;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	2724 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	26fc <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <setup>:
Knob knob2(A1, sequence1, SECOND, 1);
Knob knob3(A2, sequence1, THIRD, 2);
Knob knob4(A3, sequence1, FOURTH, 3);
Knob knob5(A4, sequence1, FIFTH, 4);

void setup() {
     490:	bx	lr
     492:	nop

00000494 <loop>:
  Serial.begin(9600);
}

void loop() {
     494:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     498:	movs	r0, #0
     49a:	sub	sp, #228	; 0xe4
     49c:	bl	2a50 <usb_midi_read>
  if (usbMIDI.read()) {
     4a0:	cmp	r0, #0
     4a2:	bne.w	84c <loop+0x3b8>
     4a6:	ldr	r4, [pc, #668]	; (744 <loop+0x2b0>)

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4a8:	ldr	r6, [pc, #668]	; (748 <loop+0x2b4>)
     4aa:	ldrb.w	r0, [r6, #32]
     4ae:	bl	2708 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b2:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b4:	str	r0, [r6, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4b6:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4b8:	mov	r5, r0
     4ba:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4bc:	beq.w	a40 <loop+0x5ac>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c0:	ldr	r3, [r4, #0]
     4c2:	str	r3, [sp, #52]	; 0x34
	return ret;
     4c4:	ldr	r3, [sp, #52]	; 0x34
        m_lastDebounceTime = millis();
     4c6:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4c8:	ldr	r1, [r4, #0]
     4ca:	str	r1, [sp, #48]	; 0x30
	return ret;
     4cc:	ldr	r1, [sp, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ce:	ldr.w	r8, [pc, #628]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     4d2:	cmp	r3, r1
     4d4:	beq.n	4e8 <loop+0x54>
        if (reading != m_state) {
     4d6:	ldr	r3, [r6, #4]
     4d8:	ldr	r7, [pc, #620]	; (748 <loop+0x2b4>)
     4da:	cmp	r5, r3
     4dc:	beq.w	a68 <loop+0x5d4>
          m_state = reading;
     4e0:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     4e2:	cmp	r5, #0
     4e4:	beq.w	aba <loop+0x626>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4e8:	ldr	r5, [pc, #608]	; (74c <loop+0x2b8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     4ea:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4ec:	ldrb.w	r0, [r5, #32]
     4f0:	bl	2708 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f4:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4f6:	str	r0, [r5, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4f8:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     4fa:	mov	r6, r0
     4fc:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     4fe:	beq.w	a54 <loop+0x5c0>
     502:	ldr	r3, [r4, #0]
     504:	str	r3, [sp, #44]	; 0x2c
	return ret;
     506:	ldr	r3, [sp, #44]	; 0x2c
        m_lastDebounceTime = millis();
     508:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     50a:	ldr	r1, [r4, #0]
     50c:	str	r1, [sp, #40]	; 0x28
	return ret;
     50e:	ldr	r1, [sp, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     510:	ldr.w	r8, [pc, #560]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     514:	cmp	r1, r3
     516:	beq.n	52a <loop+0x96>
        if (reading != m_state) {
     518:	ldr	r3, [r5, #4]
     51a:	ldr	r7, [pc, #560]	; (74c <loop+0x2b8>)
     51c:	cmp	r6, r3
     51e:	beq.w	a5c <loop+0x5c8>
          m_state = reading;
     522:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     524:	cmp	r6, #0
     526:	beq.w	af0 <loop+0x65c>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52a:	ldr	r6, [pc, #548]	; (750 <loop+0x2bc>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     52c:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     52e:	ldrb.w	r0, [r6, #32]
     532:	bl	2708 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     536:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     538:	str	r0, [r6, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     53a:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     53c:	mov	r5, r0
     53e:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     540:	beq.w	a50 <loop+0x5bc>
     544:	ldr	r3, [r4, #0]
     546:	str	r3, [sp, #36]	; 0x24
	return ret;
     548:	ldr	r3, [sp, #36]	; 0x24
        m_lastDebounceTime = millis();
     54a:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     54c:	ldr	r1, [r4, #0]
     54e:	str	r1, [sp, #32]
	return ret;
     550:	ldr	r1, [sp, #32]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     552:	ldr.w	r8, [pc, #496]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     556:	cmp	r1, r3
     558:	beq.n	56c <loop+0xd8>
        if (reading != m_state) {
     55a:	ldr	r3, [r6, #4]
     55c:	ldr	r7, [pc, #496]	; (750 <loop+0x2bc>)
     55e:	cmp	r5, r3
     560:	beq.w	a58 <loop+0x5c4>
          m_state = reading;
     564:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     566:	cmp	r5, #0
     568:	beq.w	b26 <loop+0x692>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     56c:	ldr	r5, [pc, #484]	; (754 <loop+0x2c0>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     56e:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     570:	ldrb.w	r0, [r5, #32]
     574:	bl	2708 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     578:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57a:	str	r0, [r5, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     57c:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     57e:	mov	r6, r0
     580:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     582:	beq.w	a4c <loop+0x5b8>
     586:	ldr	r3, [r4, #0]
     588:	str	r3, [sp, #28]
	return ret;
     58a:	ldr	r3, [sp, #28]
        m_lastDebounceTime = millis();
     58c:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     58e:	ldr	r1, [r4, #0]
     590:	str	r1, [sp, #24]
	return ret;
     592:	ldr	r1, [sp, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     594:	ldr.w	r8, [pc, #428]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     598:	cmp	r1, r3
     59a:	beq.n	5ae <loop+0x11a>
        if (reading != m_state) {
     59c:	ldr	r3, [r5, #4]
     59e:	ldr	r7, [pc, #436]	; (754 <loop+0x2c0>)
     5a0:	cmp	r6, r3
     5a2:	beq.w	a64 <loop+0x5d0>
          m_state = reading;
     5a6:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5a8:	cmp	r6, #0
     5aa:	beq.w	b5c <loop+0x6c8>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5ae:	ldr	r6, [pc, #424]	; (758 <loop+0x2c4>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5b0:	str	r2, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5b2:	ldrb.w	r0, [r6, #32]
     5b6:	bl	2708 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5ba:	ldr	r3, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5bc:	str	r0, [r6, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5be:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5c0:	mov	r5, r0
     5c2:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5c4:	beq.w	a48 <loop+0x5b4>
     5c8:	ldr	r3, [r4, #0]
     5ca:	str	r3, [sp, #20]
	return ret;
     5cc:	ldr	r3, [sp, #20]
        m_lastDebounceTime = millis();
     5ce:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d0:	ldr	r1, [r4, #0]
     5d2:	str	r1, [sp, #16]
	return ret;
     5d4:	ldr	r1, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d6:	ldr.w	r8, [pc, #364]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     5da:	cmp	r1, r3
     5dc:	beq.n	5f0 <loop+0x15c>
        if (reading != m_state) {
     5de:	ldr	r3, [r6, #4]
     5e0:	ldr	r7, [pc, #372]	; (758 <loop+0x2c4>)
     5e2:	cmp	r5, r3
     5e4:	beq.w	a60 <loop+0x5cc>
          m_state = reading;
     5e8:	str	r5, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     5ea:	cmp	r5, #0
     5ec:	beq.w	b92 <loop+0x6fe>

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f0:	ldr	r5, [pc, #360]	; (75c <loop+0x2c8>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     5f2:	str	r2, [r6, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5f4:	ldrb.w	r0, [r5, #32]
     5f8:	bl	2708 <digitalRead>
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     5fc:	ldr	r3, [r5, #8]

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     5fe:	str	r0, [r5, #12]
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     600:	cmp	r0, r3

      return false;
    }

    void check (void) {
      m_reading = digitalRead(m_pin);
     602:	mov	r6, r0
     604:	mov	r2, r0
        m_sequence.m_leds[3]->blink(3);
      }
    }

    boolean debounce (int reading) {
      if (reading != m_lastState) {  
     606:	beq.w	a44 <loop+0x5b0>
     60a:	ldr	r3, [r4, #0]
     60c:	str	r3, [sp, #12]
	return ret;
     60e:	ldr	r3, [sp, #12]
        m_lastDebounceTime = millis();
     610:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     612:	ldr	r1, [r4, #0]
     614:	str	r1, [sp, #8]
	return ret;
     616:	ldr	r1, [sp, #8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     618:	ldr.w	r8, [pc, #296]	; 744 <loop+0x2b0>
      }

      if ((millis() - m_lastDebounceTime) > 00) {
     61c:	cmp	r1, r3
     61e:	beq.n	632 <loop+0x19e>
        if (reading != m_state) {
     620:	ldr	r3, [r5, #4]
     622:	ldr	r7, [pc, #312]	; (75c <loop+0x2c8>)
     624:	cmp	r6, r3
     626:	beq.w	a6c <loop+0x5d8>
          m_state = reading;
     62a:	str	r6, [r7, #4]

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     62c:	cmp	r6, #0
     62e:	beq.w	a84 <loop+0x5f0>

      digitalWrite(m_pin, m_state); 
    };

    int check () {
      if (!blinking) {
     632:	ldr	r6, [pc, #300]	; (760 <loop+0x2cc>)

      if (debounced) {
        onClick();
      }
 
      m_lastState = m_reading;
     634:	str	r2, [r5, #8]
     636:	ldrb	r3, [r6, #16]
     638:	cmp	r3, #0
     63a:	bne.w	874 <loop+0x3e0>
     63e:	ldr	r5, [pc, #292]	; (764 <loop+0x2d0>)
     640:	ldrb	r3, [r5, #16]
     642:	cmp	r3, #0
     644:	bne.w	9e4 <loop+0x550>
     648:	ldr	r5, [pc, #284]	; (768 <loop+0x2d4>)
     64a:	ldrb	r3, [r5, #16]
     64c:	cmp	r3, #0
     64e:	bne.w	988 <loop+0x4f4>
     652:	ldr	r5, [pc, #280]	; (76c <loop+0x2d8>)
     654:	ldrb	r3, [r5, #16]
     656:	cmp	r3, #0
     658:	bne.w	92c <loop+0x498>
     65c:	ldr	r5, [pc, #272]	; (770 <loop+0x2dc>)
     65e:	ldrb	r3, [r5, #16]
     660:	cmp	r3, #0
     662:	bne.w	8d0 <loop+0x43c>
     666:	ldr	r5, [pc, #268]	; (774 <loop+0x2e0>)
     668:	ldrb	r3, [r5, #16]
     66a:	cmp	r3, #0
     66c:	bne.w	7f0 <loop+0x35c>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     670:	ldr	r4, [pc, #260]	; (778 <loop+0x2e4>)
     672:	ldrb	r0, [r4, #0]
     674:	bl	2518 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     678:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     67a:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     67c:	cmp	r0, r3
     67e:	beq.n	68e <loop+0x1fa>
     680:	subs	r3, r0, r3
     682:	cmp	r3, #0
     684:	it	lt
     686:	neglt	r3, r3
     688:	cmp	r3, #10
     68a:	bgt.w	7d0 <loop+0x33c>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     68e:	ldr	r4, [pc, #236]	; (77c <loop+0x2e8>)
     690:	ldrb	r0, [r4, #0]
     692:	bl	2518 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     696:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     698:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     69a:	cmp	r0, r3
     69c:	beq.n	6ac <loop+0x218>
     69e:	subs	r3, r0, r3
     6a0:	cmp	r3, #0
     6a2:	it	lt
     6a4:	neglt	r3, r3
     6a6:	cmp	r3, #10
     6a8:	bgt.w	7b0 <loop+0x31c>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6ac:	ldr	r4, [pc, #208]	; (780 <loop+0x2ec>)
     6ae:	ldrb	r0, [r4, #0]
     6b0:	bl	2518 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     6b4:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6b6:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6b8:	cmp	r0, r3
     6ba:	beq.n	6c8 <loop+0x234>
     6bc:	subs	r3, r0, r3
     6be:	cmp	r3, #0
     6c0:	it	lt
     6c2:	neglt	r3, r3
     6c4:	cmp	r3, #10
     6c6:	bgt.n	790 <loop+0x2fc>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6c8:	ldr	r4, [pc, #184]	; (784 <loop+0x2f0>)
     6ca:	ldrb	r0, [r4, #0]
     6cc:	bl	2518 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     6d0:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6d2:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6d4:	cmp	r0, r3
     6d6:	beq.n	6e4 <loop+0x250>
     6d8:	subs	r3, r0, r3
     6da:	cmp	r3, #0
     6dc:	it	lt
     6de:	neglt	r3, r3
     6e0:	cmp	r3, #10
     6e2:	bgt.n	724 <loop+0x290>
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6e4:	ldr	r4, [pc, #160]	; (788 <loop+0x2f4>)
     6e6:	ldrb	r0, [r4, #0]
     6e8:	bl	2518 <analogRead>

      // "filter"
      int diff = abs(m_value - m_lastValue);
     6ec:	ldr	r3, [r4, #8]
        m_sequence.controlLength(m_value, m_id);
      }
    }

    void check () {
      m_value = analogRead(m_pin);
     6ee:	str	r0, [r4, #4]

      // "filter"
      int diff = abs(m_value - m_lastValue);

      const boolean isChanging = m_value != m_lastValue && diff > 10;
     6f0:	cmp	r0, r3
     6f2:	beq.n	71e <loop+0x28a>
     6f4:	subs	r3, r0, r3
     6f6:	cmp	r3, #0
     6f8:	it	lt
     6fa:	neglt	r3, r3
     6fc:	cmp	r3, #10
     6fe:	ble.n	71e <loop+0x28a>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     700:	ldr	r3, [pc, #136]	; (78c <loop+0x2f8>)
     702:	ldrb	r3, [r3, #0]
     704:	cmp	r3, #0
     706:	beq.w	c04 <loop+0x770>
          // transpose
          Serial.println("Fourth");
        } else if (m_knobType == FIFTH) {
          Serial.println("Fifth");
        }
      } else if (currentMode == VELOCITY) {
     70a:	cmp	r3, #2
     70c:	beq.w	12fc <loop+0xe68>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     710:	cmp	r3, #1
     712:	beq.w	1400 <loop+0xf6c>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     716:	cmp	r3, #3
     718:	beq.w	f72 <loop+0xade>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     71c:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     71e:	add	sp, #228	; 0xe4
     720:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     724:	ldr	r3, [pc, #100]	; (78c <loop+0x2f8>)
     726:	ldrb	r3, [r3, #0]
     728:	cmp	r3, #0
     72a:	beq.w	cb8 <loop+0x824>
          // transpose
          Serial.println("Fourth");
        } else if (m_knobType == FIFTH) {
          Serial.println("Fifth");
        }
      } else if (currentMode == VELOCITY) {
     72e:	cmp	r3, #2
     730:	beq.w	1284 <loop+0xdf0>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     734:	cmp	r3, #1
     736:	beq.w	141e <loop+0xf8a>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     73a:	cmp	r3, #3
     73c:	beq.w	edc <loop+0xa48>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     740:	str	r0, [r4, #8]
     742:	b.n	6e4 <loop+0x250>
     744:	.word	0x1fff1850
     748:	.word	0x1fff16c0
     74c:	.word	0x1fff16e8
     750:	.word	0x1fff1710
     754:	.word	0x1fff1810
     758:	.word	0x1fff17a8
     75c:	.word	0x1fff17d0
     760:	.word	0x1fff162c
     764:	.word	0x1fff15cc
     768:	.word	0x1fff15e4
     76c:	.word	0x1fff15fc
     770:	.word	0x1fff1614
     774:	.word	0x1fff1690
     778:	.word	0x1fff16a8
     77c:	.word	0x1fff1644
     780:	.word	0x1fff1660
     784:	.word	0x1fff1678
     788:	.word	0x1fff17f8
     78c:	.word	0x1fff165c
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     790:	ldr	r3, [pc, #732]	; (a70 <loop+0x5dc>)
     792:	ldrb	r3, [r3, #0]
     794:	cmp	r3, #0
     796:	beq.w	c7c <loop+0x7e8>
          // transpose
          Serial.println("Fourth");
        } else if (m_knobType == FIFTH) {
          Serial.println("Fifth");
        }
      } else if (currentMode == VELOCITY) {
     79a:	cmp	r3, #2
     79c:	beq.w	12a2 <loop+0xe0e>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     7a0:	cmp	r3, #1
     7a2:	beq.w	145a <loop+0xfc6>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     7a6:	cmp	r3, #3
     7a8:	beq.w	f0e <loop+0xa7a>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     7ac:	str	r0, [r4, #8]
     7ae:	b.n	6c8 <loop+0x234>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     7b0:	ldr	r3, [pc, #700]	; (a70 <loop+0x5dc>)
     7b2:	ldrb	r3, [r3, #0]
     7b4:	cmp	r3, #0
     7b6:	beq.w	c40 <loop+0x7ac>
          // transpose
          Serial.println("Fourth");
        } else if (m_knobType == FIFTH) {
          Serial.println("Fifth");
        }
      } else if (currentMode == VELOCITY) {
     7ba:	cmp	r3, #2
     7bc:	beq.w	12de <loop+0xe4a>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     7c0:	cmp	r3, #1
     7c2:	beq.w	143c <loop+0xfa8>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     7c6:	cmp	r3, #3
     7c8:	beq.w	f40 <loop+0xaac>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     7cc:	str	r0, [r4, #8]
     7ce:	b.n	6ac <loop+0x218>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
     7d0:	ldr	r3, [pc, #668]	; (a70 <loop+0x5dc>)
     7d2:	ldrb	r3, [r3, #0]
     7d4:	cmp	r3, #0
     7d6:	beq.w	bc8 <loop+0x734>
          // transpose
          Serial.println("Fourth");
        } else if (m_knobType == FIFTH) {
          Serial.println("Fifth");
        }
      } else if (currentMode == VELOCITY) {
     7da:	cmp	r3, #2
     7dc:	beq.w	12c0 <loop+0xe2c>
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
     7e0:	cmp	r3, #1
     7e2:	beq.w	1478 <loop+0xfe4>
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
     7e6:	cmp	r3, #3
     7e8:	beq.w	fa6 <loop+0xb12>
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     7ec:	str	r0, [r4, #8]
     7ee:	b.n	68e <loop+0x1fa>
     7f0:	ldr	r3, [r4, #0]
     7f2:	str	r3, [sp, #216]	; 0xd8
	return ret;
     7f4:	ldr	r3, [sp, #216]	; 0xd8
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     7f6:	ldr	r1, [r5, #8]
     7f8:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7fa:	ldr	r4, [pc, #632]	; (a74 <loop+0x5e0>)
     7fc:	subs	r3, r3, r1
     7fe:	cmp	r3, r2
     800:	bls.w	670 <loop+0x1dc>
        digitalWrite(m_pin, !digitalRead(m_pin));
     804:	ldrb	r6, [r5, #0]
     806:	mov	r0, r6
     808:	bl	2708 <digitalRead>
     80c:	clz	r1, r0
     810:	lsrs	r1, r1, #5
     812:	mov	r0, r6
     814:	bl	26fc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     818:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     81a:	movs	r2, #0

        if (blinkingCounter > 0) {
     81c:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     81e:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     820:	ble.w	670 <loop+0x1dc>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     824:	ldrb	r6, [r5, #0]
     826:	mov	r0, r6
     828:	bl	2708 <digitalRead>
     82c:	clz	r1, r0
     830:	lsrs	r1, r1, #5
     832:	mov	r0, r6
     834:	bl	26fc <digitalWrite>
     838:	ldr	r3, [r4, #0]
     83a:	str	r3, [sp, #220]	; 0xdc
	return ret;
     83c:	ldr	r3, [sp, #220]	; 0xdc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     83e:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     840:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     842:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     846:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     848:	str	r3, [r5, #20]
     84a:	b.n	670 <loop+0x1dc>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     84c:	ldr	r3, [pc, #552]	; (a78 <loop+0x5e4>)
      channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     84e:	ldrb	r3, [r3, #0]
     850:	cmp	r3, #250	; 0xfa
     852:	beq.w	de8 <loop+0x954>
     856:	cmp	r3, #252	; 0xfc
     858:	beq.w	cf2 <loop+0x85e>
     85c:	cmp	r3, #248	; 0xf8
     85e:	beq.w	e50 <loop+0x9bc>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     862:	movs	r1, #35	; 0x23
     864:	ldr	r0, [pc, #532]	; (a7c <loop+0x5e8>)
     866:	ldr	r4, [pc, #524]	; (a74 <loop+0x5e0>)
     868:	bl	20ec <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     86c:	ldr	r0, [pc, #528]	; (a80 <loop+0x5ec>)
     86e:	bl	3c60 <Print::println()>
     872:	b.n	4a8 <loop+0x14>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     874:	ldr	r3, [r4, #0]
     876:	str	r3, [sp, #176]	; 0xb0
	return ret;
     878:	ldr	r3, [sp, #176]	; 0xb0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     87a:	ldr	r1, [r6, #8]
     87c:	ldr	r2, [r6, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     87e:	ldr	r5, [pc, #500]	; (a74 <loop+0x5e0>)
     880:	subs	r3, r3, r1
     882:	cmp	r3, r2
     884:	bls.w	63e <loop+0x1aa>
        digitalWrite(m_pin, !digitalRead(m_pin));
     888:	ldrb	r7, [r6, #0]
     88a:	mov	r0, r7
     88c:	bl	2708 <digitalRead>
     890:	clz	r1, r0
     894:	lsrs	r1, r1, #5
     896:	mov	r0, r7
     898:	bl	26fc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     89c:	ldr	r3, [r6, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     89e:	movs	r2, #0

        if (blinkingCounter > 0) {
     8a0:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     8a2:	strb	r2, [r6, #16]

        if (blinkingCounter > 0) {
     8a4:	ble.w	63e <loop+0x1aa>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     8a8:	ldrb	r7, [r6, #0]
     8aa:	mov	r0, r7
     8ac:	bl	2708 <digitalRead>
     8b0:	clz	r1, r0
     8b4:	lsrs	r1, r1, #5
     8b6:	mov	r0, r7
     8b8:	bl	26fc <digitalWrite>
     8bc:	ldr	r3, [r5, #0]
     8be:	str	r3, [sp, #180]	; 0xb4
	return ret;
     8c0:	ldr	r3, [sp, #180]	; 0xb4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     8c2:	str	r3, [r6, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     8c4:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     8c6:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     8ca:	strb	r2, [r6, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     8cc:	str	r3, [r6, #20]
     8ce:	b.n	63e <loop+0x1aa>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8d0:	ldr	r3, [r4, #0]
     8d2:	str	r3, [sp, #208]	; 0xd0
	return ret;
     8d4:	ldr	r3, [sp, #208]	; 0xd0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     8d6:	ldr	r1, [r5, #8]
     8d8:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8da:	ldr	r6, [pc, #408]	; (a74 <loop+0x5e0>)
     8dc:	subs	r3, r3, r1
     8de:	cmp	r3, r2
     8e0:	bls.w	666 <loop+0x1d2>
        digitalWrite(m_pin, !digitalRead(m_pin));
     8e4:	ldrb	r7, [r5, #0]
     8e6:	mov	r0, r7
     8e8:	bl	2708 <digitalRead>
     8ec:	clz	r1, r0
     8f0:	lsrs	r1, r1, #5
     8f2:	mov	r0, r7
     8f4:	bl	26fc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     8f8:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     8fa:	movs	r2, #0

        if (blinkingCounter > 0) {
     8fc:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     8fe:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     900:	ble.w	666 <loop+0x1d2>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     904:	ldrb	r7, [r5, #0]
     906:	mov	r0, r7
     908:	bl	2708 <digitalRead>
     90c:	clz	r1, r0
     910:	lsrs	r1, r1, #5
     912:	mov	r0, r7
     914:	bl	26fc <digitalWrite>
     918:	ldr	r3, [r6, #0]
     91a:	str	r3, [sp, #212]	; 0xd4
	return ret;
     91c:	ldr	r3, [sp, #212]	; 0xd4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     91e:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     920:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     922:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     926:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     928:	str	r3, [r5, #20]
     92a:	b.n	666 <loop+0x1d2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     92c:	ldr	r3, [r4, #0]
     92e:	str	r3, [sp, #200]	; 0xc8
	return ret;
     930:	ldr	r3, [sp, #200]	; 0xc8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     932:	ldr	r1, [r5, #8]
     934:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     936:	ldr	r6, [pc, #316]	; (a74 <loop+0x5e0>)
     938:	subs	r3, r3, r1
     93a:	cmp	r3, r2
     93c:	bls.w	65c <loop+0x1c8>
        digitalWrite(m_pin, !digitalRead(m_pin));
     940:	ldrb	r7, [r5, #0]
     942:	mov	r0, r7
     944:	bl	2708 <digitalRead>
     948:	clz	r1, r0
     94c:	lsrs	r1, r1, #5
     94e:	mov	r0, r7
     950:	bl	26fc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     954:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     956:	movs	r2, #0

        if (blinkingCounter > 0) {
     958:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     95a:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     95c:	ble.w	65c <loop+0x1c8>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     960:	ldrb	r7, [r5, #0]
     962:	mov	r0, r7
     964:	bl	2708 <digitalRead>
     968:	clz	r1, r0
     96c:	lsrs	r1, r1, #5
     96e:	mov	r0, r7
     970:	bl	26fc <digitalWrite>
     974:	ldr	r3, [r6, #0]
     976:	str	r3, [sp, #204]	; 0xcc
	return ret;
     978:	ldr	r3, [sp, #204]	; 0xcc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     97a:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     97c:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     97e:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     982:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     984:	str	r3, [r5, #20]
     986:	b.n	65c <loop+0x1c8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     988:	ldr	r3, [r4, #0]
     98a:	str	r3, [sp, #192]	; 0xc0
	return ret;
     98c:	ldr	r3, [sp, #192]	; 0xc0
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     98e:	ldr	r1, [r5, #8]
     990:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     992:	ldr	r6, [pc, #224]	; (a74 <loop+0x5e0>)
     994:	subs	r3, r3, r1
     996:	cmp	r3, r2
     998:	bls.w	652 <loop+0x1be>
        digitalWrite(m_pin, !digitalRead(m_pin));
     99c:	ldrb	r7, [r5, #0]
     99e:	mov	r0, r7
     9a0:	bl	2708 <digitalRead>
     9a4:	clz	r1, r0
     9a8:	lsrs	r1, r1, #5
     9aa:	mov	r0, r7
     9ac:	bl	26fc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     9b0:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9b2:	movs	r2, #0

        if (blinkingCounter > 0) {
     9b4:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     9b6:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     9b8:	ble.w	652 <loop+0x1be>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     9bc:	ldrb	r7, [r5, #0]
     9be:	mov	r0, r7
     9c0:	bl	2708 <digitalRead>
     9c4:	clz	r1, r0
     9c8:	lsrs	r1, r1, #5
     9ca:	mov	r0, r7
     9cc:	bl	26fc <digitalWrite>
     9d0:	ldr	r3, [r6, #0]
     9d2:	str	r3, [sp, #196]	; 0xc4
	return ret;
     9d4:	ldr	r3, [sp, #196]	; 0xc4
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     9d6:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9d8:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9da:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     9de:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     9e0:	str	r3, [r5, #20]
     9e2:	b.n	652 <loop+0x1be>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9e4:	ldr	r3, [r4, #0]
     9e6:	str	r3, [sp, #184]	; 0xb8
	return ret;
     9e8:	ldr	r3, [sp, #184]	; 0xb8
    int check () {
      if (!blinking) {
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
     9ea:	ldr	r1, [r5, #8]
     9ec:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9ee:	ldr	r6, [pc, #132]	; (a74 <loop+0x5e0>)
     9f0:	subs	r3, r3, r1
     9f2:	cmp	r3, r2
     9f4:	bls.w	648 <loop+0x1b4>
        digitalWrite(m_pin, !digitalRead(m_pin));
     9f8:	ldrb	r7, [r5, #0]
     9fa:	mov	r0, r7
     9fc:	bl	2708 <digitalRead>
     a00:	clz	r1, r0
     a04:	lsrs	r1, r1, #5
     a06:	mov	r0, r7
     a08:	bl	26fc <digitalWrite>
        blinking = false;

        if (blinkingCounter > 0) {
     a0c:	ldr	r3, [r5, #20]
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a0e:	movs	r2, #0

        if (blinkingCounter > 0) {
     a10:	cmp	r3, r2
        return 0;
      }
      
      if (millis() - lastBlink > blinkLength) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     a12:	strb	r2, [r5, #16]

        if (blinkingCounter > 0) {
     a14:	ble.w	648 <loop+0x1b4>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     a18:	ldrb	r7, [r5, #0]
     a1a:	mov	r0, r7
     a1c:	bl	2708 <digitalRead>
     a20:	clz	r1, r0
     a24:	lsrs	r1, r1, #5
     a26:	mov	r0, r7
     a28:	bl	26fc <digitalWrite>
     a2c:	ldr	r3, [r6, #0]
     a2e:	str	r3, [sp, #188]	; 0xbc
	return ret;
     a30:	ldr	r3, [sp, #188]	; 0xbc
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     a32:	str	r3, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a34:	movs	r2, #1
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a36:	mov.w	r3, #4294967295
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     a3a:	strb	r2, [r5, #16]
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;

        if (blinkingCounter > 0) {
          blink();
          blinkingCounter--;
     a3c:	str	r3, [r5, #20]
     a3e:	b.n	648 <loop+0x1b4>
     a40:	ldr	r3, [r6, #20]
     a42:	b.n	4c8 <loop+0x34>
     a44:	ldr	r3, [r5, #20]
     a46:	b.n	612 <loop+0x17e>
     a48:	ldr	r3, [r6, #20]
     a4a:	b.n	5d0 <loop+0x13c>
     a4c:	ldr	r3, [r5, #20]
     a4e:	b.n	58e <loop+0xfa>
     a50:	ldr	r3, [r6, #20]
     a52:	b.n	54c <loop+0xb8>
     a54:	ldr	r3, [r5, #20]
     a56:	b.n	50a <loop+0x76>
      if (reading != m_lastState) {  
        m_lastDebounceTime = millis();
      }

      if ((millis() - m_lastDebounceTime) > 00) {
        if (reading != m_state) {
     a58:	mov	r2, r5
     a5a:	b.n	56c <loop+0xd8>
     a5c:	mov	r2, r6
     a5e:	b.n	52a <loop+0x96>
     a60:	mov	r2, r5
     a62:	b.n	5f0 <loop+0x15c>
     a64:	mov	r2, r6
     a66:	b.n	5ae <loop+0x11a>
     a68:	mov	r2, r5
     a6a:	b.n	4e8 <loop+0x54>
     a6c:	mov	r2, r6
     a6e:	b.n	632 <loop+0x19e>
     a70:	.word	0x1fff165c
     a74:	.word	0x1fff1850
     a78:	.word	0x1fff1d0c
     a7c:	.word	0x00005030
     a80:	.word	0x1fff0c60

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     a84:	ldrb	r3, [r7, #16]
     a86:	cmp	r3, #0
     a88:	bne.w	10bc <loop+0xc28>
        m_led.toggle();
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     a8c:	ldrb	r3, [r7, #17]
     a8e:	cmp	r3, #0
     a90:	bne.w	1394 <loop+0xf00>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     a94:	ldr	r3, [r7, #24]
     a96:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     a9a:	clz	r1, r1
     a9e:	lsrs	r1, r1, #5
     aa0:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     aa2:	uxtb	r0, r0
     aa4:	bl	26fc <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     aa8:	ldr	r3, [r7, #0]
     aaa:	ldr	r0, [r7, #28]
     aac:	ldr	r2, [r7, #12]
     aae:	subs	r3, #1
    void toggle () {
      m_state = !m_state;
    };

    void toggleStep (int id) {
      m_steps[id].m_state = !m_steps[id].m_state;
     ab0:	ldrb	r1, [r0, r3]
     ab2:	eor.w	r1, r1, #1
     ab6:	strb	r1, [r0, r3]
     ab8:	b.n	632 <loop+0x19e>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     aba:	ldrb	r3, [r7, #16]
     abc:	cmp	r3, #0
     abe:	bne.w	11a0 <loop+0xd0c>
        m_led.toggle();
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     ac2:	ldrb	r3, [r7, #17]
     ac4:	cmp	r3, #0
     ac6:	bne.w	1370 <loop+0xedc>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     aca:	ldr	r3, [r7, #24]
     acc:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     ad0:	clz	r1, r1
     ad4:	lsrs	r1, r1, #5
     ad6:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     ad8:	uxtb	r0, r0
     ada:	bl	26fc <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     ade:	ldr	r3, [r7, #0]
     ae0:	ldr	r0, [r7, #28]
     ae2:	ldr	r2, [r7, #12]
     ae4:	subs	r3, #1
     ae6:	ldrb	r1, [r0, r3]
     ae8:	eor.w	r1, r1, #1
     aec:	strb	r1, [r0, r3]
     aee:	b.n	4e8 <loop+0x54>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     af0:	ldrb	r3, [r7, #16]
     af2:	cmp	r3, #0
     af4:	bne.w	112e <loop+0xc9a>
        m_led.toggle();
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     af8:	ldrb	r3, [r7, #17]
     afa:	cmp	r3, #0
     afc:	bne.w	13b8 <loop+0xf24>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b00:	ldr	r3, [r7, #24]
     b02:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b06:	clz	r1, r1
     b0a:	lsrs	r1, r1, #5
     b0c:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b0e:	uxtb	r0, r0
     b10:	bl	26fc <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     b14:	ldr	r3, [r7, #0]
     b16:	ldr	r0, [r7, #28]
     b18:	ldr	r2, [r7, #12]
     b1a:	subs	r3, #1
     b1c:	ldrb	r1, [r0, r3]
     b1e:	eor.w	r1, r1, #1
     b22:	strb	r1, [r0, r3]
     b24:	b.n	52a <loop+0x96>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b26:	ldrb	r3, [r7, #16]
     b28:	cmp	r3, #0
     b2a:	bne.w	1212 <loop+0xd7e>
        m_led.toggle();
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b2e:	ldrb	r3, [r7, #17]
     b30:	cmp	r3, #0
     b32:	bne.w	13dc <loop+0xf48>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b36:	ldr	r3, [r7, #24]
     b38:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b3c:	clz	r1, r1
     b40:	lsrs	r1, r1, #5
     b42:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b44:	uxtb	r0, r0
     b46:	bl	26fc <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     b4a:	ldr	r3, [r7, #0]
     b4c:	ldr	r0, [r7, #28]
     b4e:	ldr	r2, [r7, #12]
     b50:	subs	r3, #1
     b52:	ldrb	r1, [r0, r3]
     b54:	eor.w	r1, r1, #1
     b58:	strb	r1, [r0, r3]
     b5a:	b.n	56c <loop+0xd8>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b5c:	ldrb	r3, [r7, #16]
     b5e:	cmp	r3, #0
     b60:	bne.w	fd8 <loop+0xb44>
        m_led.toggle();
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b64:	ldrb	r3, [r7, #17]
     b66:	cmp	r3, #0
     b68:	bne.w	133e <loop+0xeaa>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     b6c:	ldr	r3, [r7, #24]
     b6e:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     b72:	clz	r1, r1
     b76:	lsrs	r1, r1, #5
     b78:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     b7a:	uxtb	r0, r0
     b7c:	bl	26fc <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     b80:	ldr	r3, [r7, #0]
     b82:	ldr	r0, [r7, #28]
     b84:	ldr	r2, [r7, #12]
     b86:	subs	r3, #1
     b88:	ldrb	r1, [r0, r3]
     b8a:	eor.w	r1, r1, #1
     b8e:	strb	r1, [r0, r3]
     b90:	b.n	5ae <loop+0x11a>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     b92:	ldrb	r3, [r7, #16]
     b94:	cmp	r3, #0
     b96:	bne.w	104a <loop+0xbb6>
        m_led.toggle();
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
     b9a:	ldrb	r3, [r7, #17]
     b9c:	cmp	r3, #0
     b9e:	bne.w	131a <loop+0xe86>
        m_led.toggle();
        play();
      } else if (m_state == LOW) {
        m_led.toggle();
     ba2:	ldr	r3, [r7, #24]
     ba4:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     ba8:	clz	r1, r1
     bac:	lsrs	r1, r1, #5
     bae:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     bb0:	uxtb	r0, r0
     bb2:	bl	26fc <digitalWrite>
        m_sequence.toggleStep(m_id - 1);
     bb6:	ldr	r3, [r7, #0]
     bb8:	ldr	r0, [r7, #28]
     bba:	ldr	r2, [r7, #12]
     bbc:	subs	r3, #1
     bbe:	ldrb	r1, [r0, r3]
     bc0:	eor.w	r1, r1, #1
     bc4:	strb	r1, [r0, r3]
     bc6:	b.n	5f0 <loop+0x15c>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     bc8:	ldrb	r3, [r4, #20]
     bca:	cmp	r3, #0
     bcc:	bne.w	d16 <loop+0x882>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     bd0:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     bd4:	ldr	r2, [r4, #16]
     bd6:	blt.w	eba <loop+0xa26>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     bda:	sub.w	r1, r0, #400	; 0x190
     bde:	cmp.w	r1, #400	; 0x190
     be2:	bcs.w	14a6 <loop+0x1012>
        max_ppqn = 8;

        if (ppqn >= 8) {
     be6:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     be8:	movs	r0, #8

        if (ppqn >= 8) {
     bea:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     bec:	str	r0, [r2, #32]

        if (ppqn >= 8) {
     bee:	ble.n	bf2 <loop+0x75e>
          ppqn = 0;
     bf0:	str	r3, [r2, #28]
     bf2:	movs	r1, #5
     bf4:	ldr	r0, [pc, #720]	; (ec8 <loop+0xa34>)
     bf6:	bl	20ec <usb_serial_write>
     bfa:	ldr	r0, [pc, #720]	; (ecc <loop+0xa38>)
     bfc:	bl	3c60 <Print::println()>
     c00:	ldr	r0, [r4, #4]
     c02:	b.n	7ec <loop+0x358>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     c04:	ldrb	r3, [r4, #20]
     c06:	cmp	r3, #0
     c08:	bne.w	d6a <loop+0x8d6>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     c0c:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     c10:	ldr	r2, [r4, #16]
     c12:	blt.w	eac <loop+0xa18>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     c16:	sub.w	r1, r0, #400	; 0x190
     c1a:	cmp.w	r1, #400	; 0x190
     c1e:	bcs.w	1496 <loop+0x1002>
        max_ppqn = 8;

        if (ppqn >= 8) {
     c22:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     c24:	movs	r0, #8

        if (ppqn >= 8) {
     c26:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     c28:	str	r0, [r2, #32]

        if (ppqn >= 8) {
     c2a:	ble.n	c2e <loop+0x79a>
          ppqn = 0;
     c2c:	str	r3, [r2, #28]
     c2e:	movs	r1, #5
     c30:	ldr	r0, [pc, #660]	; (ec8 <loop+0xa34>)
     c32:	bl	20ec <usb_serial_write>
     c36:	ldr	r0, [pc, #660]	; (ecc <loop+0xa38>)
     c38:	bl	3c60 <Print::println()>
     c3c:	ldr	r0, [r4, #4]
     c3e:	b.n	71c <loop+0x288>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     c40:	ldrb	r3, [r4, #20]
     c42:	cmp	r3, #0
     c44:	bne.w	d94 <loop+0x900>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     c48:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     c4c:	ldr	r2, [r4, #16]
     c4e:	blt.w	e9e <loop+0xa0a>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     c52:	sub.w	r1, r0, #400	; 0x190
     c56:	cmp.w	r1, #400	; 0x190
     c5a:	bcs.w	14d4 <loop+0x1040>
        max_ppqn = 8;

        if (ppqn >= 8) {
     c5e:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     c60:	movs	r0, #8

        if (ppqn >= 8) {
     c62:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     c64:	str	r0, [r2, #32]

        if (ppqn >= 8) {
     c66:	ble.n	c6a <loop+0x7d6>
          ppqn = 0;
     c68:	str	r3, [r2, #28]
     c6a:	movs	r1, #5
     c6c:	ldr	r0, [pc, #600]	; (ec8 <loop+0xa34>)
     c6e:	bl	20ec <usb_serial_write>
     c72:	ldr	r0, [pc, #600]	; (ecc <loop+0xa38>)
     c74:	bl	3c60 <Print::println()>
     c78:	ldr	r0, [r4, #4]
     c7a:	b.n	7cc <loop+0x338>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     c7c:	ldrb	r3, [r4, #20]
     c7e:	cmp	r3, #0
     c80:	bne.w	dbe <loop+0x92a>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     c84:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     c88:	ldr	r2, [r4, #16]
     c8a:	blt.w	e90 <loop+0x9fc>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     c8e:	sub.w	r1, r0, #400	; 0x190
     c92:	cmp.w	r1, #400	; 0x190
     c96:	bcs.w	14b6 <loop+0x1022>
        max_ppqn = 8;

        if (ppqn >= 8) {
     c9a:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     c9c:	movs	r0, #8

        if (ppqn >= 8) {
     c9e:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     ca0:	str	r0, [r2, #32]

        if (ppqn >= 8) {
     ca2:	ble.n	ca6 <loop+0x812>
          ppqn = 0;
     ca4:	str	r3, [r2, #28]
     ca6:	movs	r1, #5
     ca8:	ldr	r0, [pc, #540]	; (ec8 <loop+0xa34>)
     caa:	bl	20ec <usb_serial_write>
     cae:	ldr	r0, [pc, #540]	; (ecc <loop+0xa38>)
     cb0:	bl	3c60 <Print::println()>
     cb4:	ldr	r0, [r4, #4]
     cb6:	b.n	7ac <loop+0x318>
      m_id = id;
    };

    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
     cb8:	ldrb	r3, [r4, #20]
     cba:	cmp	r3, #0
     cbc:	bne.n	d40 <loop+0x8ac>
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
     cbe:	cmp.w	r0, #400	; 0x190
          m_sequence.controlTempo(m_value);
     cc2:	ldr	r2, [r4, #16]
     cc4:	blt.w	e82 <loop+0x9ee>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
     cc8:	sub.w	r1, r0, #400	; 0x190
     ccc:	cmp.w	r1, #400	; 0x190
     cd0:	bcs.w	14c6 <loop+0x1032>
        max_ppqn = 8;

        if (ppqn >= 8) {
     cd4:	ldr	r1, [r2, #28]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     cd6:	movs	r0, #8

        if (ppqn >= 8) {
     cd8:	cmp	r1, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
     cda:	str	r0, [r2, #32]

        if (ppqn >= 8) {
     cdc:	ble.n	ce0 <loop+0x84c>
          ppqn = 0;
     cde:	str	r3, [r2, #28]
     ce0:	movs	r1, #5
     ce2:	ldr	r0, [pc, #484]	; (ec8 <loop+0xa34>)
     ce4:	bl	20ec <usb_serial_write>
     ce8:	ldr	r0, [pc, #480]	; (ecc <loop+0xa38>)
     cea:	bl	3c60 <Print::println()>
     cee:	ldr	r0, [r4, #4]
     cf0:	b.n	740 <loop+0x2ac>
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     cf2:	ldr	r3, [pc, #476]	; (ed0 <loop+0xa3c>)
     cf4:	ldr	r4, [pc, #476]	; (ed4 <loop+0xa40>)
      ppqn = 0;
      m_currentStep = 0;
      m_leds[5]->toggle();
     cf6:	ldr	r2, [r3, #108]	; 0x6c
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     cf8:	movs	r5, #0
      ppqn = 0;
     cfa:	str	r5, [r3, #28]
      m_currentStep = 0;
     cfc:	str	r5, [r3, #8]
     cfe:	ldmia.w	r2, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     d02:	clz	r1, r1
     d06:	lsrs	r1, r1, #5
      doStep();
      m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     d08:	strb	r5, [r3, #4]

      digitalWrite(m_pin, m_state); 
     d0a:	uxtb	r0, r0
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     d0c:	str	r1, [r2, #4]

      digitalWrite(m_pin, m_state); 
     d0e:	bl	26fc <digitalWrite>
     d12:	b.w	4a8 <loop+0x14>
          Serial.println("First");
        } else if (m_knobType == SECOND) {
     d16:	cmp	r3, #1
     d18:	beq.w	1592 <loop+0x10fe>
          Serial.println("Second");          
        } else if (m_knobType == THIRD) {
     d1c:	cmp	r3, #2
     d1e:	beq.w	17bc <loop+0x1328>
          Serial.println("Third");
        } else if (m_knobType == FOURTH) {  
     d22:	cmp	r3, #3
     d24:	beq.w	18a4 <loop+0x1410>
          // delay
          // transpose
          Serial.println("Fourth");
        } else if (m_knobType == FIFTH) {
     d28:	cmp	r3, #4
     d2a:	bne.w	7ec <loop+0x358>
     d2e:	movs	r1, #5
     d30:	ldr	r0, [pc, #420]	; (ed8 <loop+0xa44>)
     d32:	bl	20ec <usb_serial_write>
     d36:	ldr	r0, [pc, #404]	; (ecc <loop+0xa38>)
     d38:	bl	3c60 <Print::println()>
     d3c:	ldr	r0, [r4, #4]
     d3e:	b.n	7ec <loop+0x358>
    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
          m_sequence.controlTempo(m_value);
          Serial.println("First");
        } else if (m_knobType == SECOND) {
     d40:	cmp	r3, #1
     d42:	beq.w	15ce <loop+0x113a>
          Serial.println("Second");          
        } else if (m_knobType == THIRD) {
     d46:	cmp	r3, #2
     d48:	beq.w	17f8 <loop+0x1364>
          Serial.println("Third");
        } else if (m_knobType == FOURTH) {  
     d4c:	cmp	r3, #3
     d4e:	beq.w	1890 <loop+0x13fc>
          // delay
          // transpose
          Serial.println("Fourth");
        } else if (m_knobType == FIFTH) {
     d52:	cmp	r3, #4
     d54:	bne.w	740 <loop+0x2ac>
     d58:	movs	r1, #5
     d5a:	ldr	r0, [pc, #380]	; (ed8 <loop+0xa44>)
     d5c:	bl	20ec <usb_serial_write>
     d60:	ldr	r0, [pc, #360]	; (ecc <loop+0xa38>)
     d62:	bl	3c60 <Print::println()>
     d66:	ldr	r0, [r4, #4]
     d68:	b.n	740 <loop+0x2ac>
    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
          m_sequence.controlTempo(m_value);
          Serial.println("First");
        } else if (m_knobType == SECOND) {
     d6a:	cmp	r3, #1
     d6c:	beq.w	15a6 <loop+0x1112>
          Serial.println("Second");          
        } else if (m_knobType == THIRD) {
     d70:	cmp	r3, #2
     d72:	beq.w	17d0 <loop+0x133c>
          Serial.println("Third");
        } else if (m_knobType == FOURTH) {  
     d76:	cmp	r3, #3
     d78:	beq.w	187c <loop+0x13e8>
          // delay
          // transpose
          Serial.println("Fourth");
        } else if (m_knobType == FIFTH) {
     d7c:	cmp	r3, #4
     d7e:	bne.w	71c <loop+0x288>
     d82:	movs	r1, #5
     d84:	ldr	r0, [pc, #336]	; (ed8 <loop+0xa44>)
     d86:	bl	20ec <usb_serial_write>
     d8a:	ldr	r0, [pc, #320]	; (ecc <loop+0xa38>)
     d8c:	bl	3c60 <Print::println()>
     d90:	ldr	r0, [r4, #4]
     d92:	b.n	71c <loop+0x288>
    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
          m_sequence.controlTempo(m_value);
          Serial.println("First");
        } else if (m_knobType == SECOND) {
     d94:	cmp	r3, #1
     d96:	beq.w	15ba <loop+0x1126>
          Serial.println("Second");          
        } else if (m_knobType == THIRD) {
     d9a:	cmp	r3, #2
     d9c:	beq.w	17e4 <loop+0x1350>
          Serial.println("Third");
        } else if (m_knobType == FOURTH) {  
     da0:	cmp	r3, #3
     da2:	beq.w	1868 <loop+0x13d4>
          // delay
          // transpose
          Serial.println("Fourth");
        } else if (m_knobType == FIFTH) {
     da6:	cmp	r3, #4
     da8:	bne.w	7cc <loop+0x338>
     dac:	movs	r1, #5
     dae:	ldr	r0, [pc, #296]	; (ed8 <loop+0xa44>)
     db0:	bl	20ec <usb_serial_write>
     db4:	ldr	r0, [pc, #276]	; (ecc <loop+0xa38>)
     db6:	bl	3c60 <Print::println()>
     dba:	ldr	r0, [r4, #4]
     dbc:	b.n	7cc <loop+0x338>
    void onChange () {
      if (currentMode == GLOBAL) {
        if (m_knobType == FIRST) {
          m_sequence.controlTempo(m_value);
          Serial.println("First");
        } else if (m_knobType == SECOND) {
     dbe:	cmp	r3, #1
     dc0:	beq.w	15e2 <loop+0x114e>
          Serial.println("Second");          
        } else if (m_knobType == THIRD) {
     dc4:	cmp	r3, #2
     dc6:	beq.w	17a8 <loop+0x1314>
          Serial.println("Third");
        } else if (m_knobType == FOURTH) {  
     dca:	cmp	r3, #3
     dcc:	beq.w	1854 <loop+0x13c0>
          // delay
          // transpose
          Serial.println("Fourth");
        } else if (m_knobType == FIFTH) {
     dd0:	cmp	r3, #4
     dd2:	bne.w	7ac <loop+0x318>
     dd6:	movs	r1, #5
     dd8:	ldr	r0, [pc, #252]	; (ed8 <loop+0xa44>)
     dda:	bl	20ec <usb_serial_write>
     dde:	ldr	r0, [pc, #236]	; (ecc <loop+0xa38>)
     de0:	bl	3c60 <Print::println()>
     de4:	ldr	r0, [r4, #4]
     de6:	b.n	7ac <loop+0x318>
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     de8:	ldr	r5, [pc, #228]	; (ed0 <loop+0xa3c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     dea:	ldr	r4, [pc, #232]	; (ed4 <loop+0xa40>)
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     dec:	ldr	r3, [r5, #8]
     dee:	adds	r3, #22
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     df0:	mov.w	r8, #1
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
     df4:	ldr.w	r6, [r5, r3, lsl #2]
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
     df8:	strb.w	r8, [r5, #4]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     dfc:	ldrb.w	r9, [r6]
      ppqn = 0;
     e00:	movs	r7, #0
     e02:	mov	r0, r9
     e04:	str	r7, [r5, #28]
     e06:	bl	2708 <digitalRead>
     e0a:	clz	r1, r0
     e0e:	lsrs	r1, r1, #5
     e10:	mov	r0, r9
     e12:	bl	26fc <digitalWrite>

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();

        if (m_steps[m_currentStep].m_state) {
     e16:	ldr	r3, [r5, #8]
     e18:	ldr	r2, [r4, #0]
     e1a:	str	r2, [sp, #4]
     e1c:	ldrb	r2, [r5, r3]
	return ret;
     e1e:	ldr	r1, [sp, #4]
      blinking = true;
     e20:	strb.w	r8, [r6, #16]
      blinkingCounter = times;
     e24:	str	r7, [r6, #20]
      lastBlink = millis();  
     e26:	str	r1, [r6, #8]
     e28:	cmp	r2, #0
     e2a:	bne.w	155c <loop+0x10c8>
          playStep(m_currentStep);
        }

        m_currentStep++;
     e2e:	adds	r3, #1

        if (m_currentStep > 3) {
     e30:	cmp	r3, #3
          m_currentStep = 0;
     e32:	it	gt
     e34:	movgt	r3, #0
     e36:	str	r3, [r5, #8]

    void startPPQN () {
      m_state = true;
      ppqn = 0;
      doStep();
      m_leds[5]->toggle();
     e38:	ldr	r3, [r5, #108]	; 0x6c
     e3a:	ldmia.w	r3, {r0, r1}
    };

    void toggle () {
      m_state = !m_state;
     e3e:	clz	r1, r1
     e42:	lsrs	r1, r1, #5
     e44:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     e46:	uxtb	r0, r0
     e48:	bl	26fc <digitalWrite>
     e4c:	b.w	4a8 <loop+0x14>
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     e50:	ldr	r5, [pc, #124]	; (ed0 <loop+0xa3c>)

      if (ppqn >= notesLengths[m_currentStep]) {
     e52:	ldr	r2, [r5, #8]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     e54:	ldr	r3, [r5, #28]

      if (ppqn >= notesLengths[m_currentStep]) {
     e56:	adds	r2, #18
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     e58:	adds	r3, #1

      if (ppqn >= notesLengths[m_currentStep]) {
     e5a:	ldr.w	r2, [r5, r2, lsl #2]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

     void advancePPQN () {
      ++ppqn;
     e5e:	str	r3, [r5, #28]

      if (ppqn >= notesLengths[m_currentStep]) {
     e60:	cmp	r3, r2
     e62:	bge.w	1552 <loop+0x10be>
        // of the active note to see if i do the stop step
        stopStep();
      }


      if (ppqn == max_ppqn) {
     e66:	ldr	r2, [r5, #32]
     e68:	ldr	r6, [pc, #100]	; (ed0 <loop+0xa3c>)
     e6a:	cmp	r2, r3
     e6c:	bne.w	4a6 <loop+0x12>
      noteOn(0, notes[step], notesVelocities[step]);
      activeNote = notes[step];
    };

    void doStep () {  
      if (m_state) {
     e70:	ldrb	r3, [r6, #4]
     e72:	cmp	r3, #0
     e74:	bne.w	180c <loop+0x1378>
     e78:	ldr	r4, [pc, #88]	; (ed4 <loop+0xa40>)
      }


      if (ppqn == max_ppqn) {
        doStep(); 
        ppqn = 0;
     e7a:	movs	r3, #0
     e7c:	str	r3, [r5, #28]
     e7e:	b.w	4a8 <loop+0x14>

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;

        if (ppqn >= 6) {
     e82:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e84:	movs	r0, #6

        if (ppqn >= 6) {
     e86:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e88:	str	r0, [r2, #32]

        if (ppqn >= 6) {
     e8a:	bgt.w	cde <loop+0x84a>
     e8e:	b.n	ce0 <loop+0x84c>
     e90:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e92:	movs	r0, #6

        if (ppqn >= 6) {
     e94:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     e96:	str	r0, [r2, #32]

        if (ppqn >= 6) {
     e98:	bgt.w	ca4 <loop+0x810>
     e9c:	b.n	ca6 <loop+0x812>
     e9e:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ea0:	movs	r0, #6

        if (ppqn >= 6) {
     ea2:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ea4:	str	r0, [r2, #32]

        if (ppqn >= 6) {
     ea6:	bgt.w	c68 <loop+0x7d4>
     eaa:	b.n	c6a <loop+0x7d6>
     eac:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     eae:	movs	r0, #6

        if (ppqn >= 6) {
     eb0:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     eb2:	str	r0, [r2, #32]

        if (ppqn >= 6) {
     eb4:	bgt.w	c2c <loop+0x798>
     eb8:	b.n	c2e <loop+0x79a>
     eba:	ldr	r1, [r2, #28]
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ebc:	movs	r0, #6

        if (ppqn >= 6) {
     ebe:	cmp	r1, #5
      notesVelocities[id] = newValue;
    };

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
     ec0:	str	r0, [r2, #32]

        if (ppqn >= 6) {
     ec2:	bgt.w	bf0 <loop+0x75c>
     ec6:	b.n	bf2 <loop+0x75e>
     ec8:	.word	0x00005084
     ecc:	.word	0x1fff0c60
     ed0:	.word	0x1fff1738
     ed4:	.word	0x1fff1850
     ed8:	.word	0x000050a4
      } else if (currentMode == VELOCITY) {
        m_sequence.controlVelocity(m_value, m_id);
      } else if (currentMode == PITCH) {
        m_sequence.controlPitch(m_value, m_id);
      } else if (currentMode == NOTELENGTH) {
        m_sequence.controlLength(m_value, m_id);
     edc:	ldr	r5, [r4, #16]
     ede:	ldr	r1, [r4, #12]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     ee0:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     ee2:	movw	r6, #1022	; 0x3fe
     ee6:	rsb	r3, r2, #1
     eea:	cmp	r3, r6
     eec:	bgt.w	1526 <loop+0x1092>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     ef0:	rsb	r3, r2, #2
     ef4:	mul.w	r3, r0, r3
     ef8:	cmp	r3, #0
     efa:	it	lt
     efc:	addwlt	r3, r3, #1023	; 0x3ff
     f00:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     f04:	add.w	r3, r1, #18
     f08:	str.w	r2, [r5, r3, lsl #2]
     f0c:	b.n	740 <loop+0x2ac>
     f0e:	ldr	r5, [r4, #16]
     f10:	ldr	r1, [r4, #12]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     f12:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     f14:	movw	r6, #1022	; 0x3fe
     f18:	rsb	r3, r2, #1
     f1c:	cmp	r3, r6
     f1e:	bgt.w	153c <loop+0x10a8>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     f22:	rsb	r3, r2, #2
     f26:	mul.w	r3, r0, r3
     f2a:	cmp	r3, #0
     f2c:	it	lt
     f2e:	addwlt	r3, r3, #1023	; 0x3ff
     f32:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     f36:	add.w	r3, r1, #18
     f3a:	str.w	r2, [r5, r3, lsl #2]
     f3e:	b.n	7ac <loop+0x318>
     f40:	ldr	r5, [r4, #16]
     f42:	ldr	r1, [r4, #12]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     f44:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     f46:	movw	r6, #1022	; 0x3fe
     f4a:	rsb	r3, r2, #1
     f4e:	cmp	r3, r6
     f50:	bgt.w	1510 <loop+0x107c>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     f54:	rsb	r3, r2, #2
     f58:	mul.w	r3, r0, r3
     f5c:	cmp	r3, #0
     f5e:	it	lt
     f60:	addwlt	r3, r3, #1023	; 0x3ff
     f64:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     f68:	add.w	r3, r1, #18
     f6c:	str.w	r2, [r5, r3, lsl #2]
     f70:	b.n	7cc <loop+0x338>
     f72:	ldr	r5, [r4, #16]
     f74:	ldr	r1, [r4, #12]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     f76:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     f78:	movw	r6, #1022	; 0x3fe
     f7c:	rsb	r3, r2, #1
     f80:	cmp	r3, r6
     f82:	bgt.w	14e4 <loop+0x1050>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     f86:	rsb	r3, r2, #2
     f8a:	mul.w	r3, r0, r3
     f8e:	cmp	r3, #0
     f90:	it	lt
     f92:	addwlt	r3, r3, #1023	; 0x3ff
     f96:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     f9a:	add.w	r3, r1, #18
     f9e:	str.w	r2, [r5, r3, lsl #2]
     fa2:	b.w	71c <loop+0x288>
     fa6:	ldr	r5, [r4, #16]
     fa8:	ldr	r1, [r4, #12]
      m_state = state;
      m_currentStep = 0;
    };

    void controlLength (int value, int id) {
      int newValue = map(value, 0, 1023, max_ppqn, 1);
     faa:	ldr	r2, [r5, #32]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     fac:	movw	r6, #1022	; 0x3fe
     fb0:	rsb	r3, r2, #1
     fb4:	cmp	r3, r6
     fb6:	bgt.w	14fa <loop+0x1066>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     fba:	rsb	r3, r2, #2
     fbe:	mul.w	r3, r0, r3
     fc2:	cmp	r3, #0
     fc4:	it	lt
     fc6:	addwlt	r3, r3, #1023	; 0x3ff
     fca:	add.w	r2, r2, r3, asr #10
      notesLengths[id] = newValue;
     fce:	add.w	r3, r1, #18
     fd2:	str.w	r2, [r5, r3, lsl #2]
     fd6:	b.n	7ec <loop+0x358>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
     fd8:	ldr	r3, [r7, #24]
     fda:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     fde:	clz	r1, r1
     fe2:	lsrs	r1, r1, #5
     fe4:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
     fe6:	uxtb	r0, r0
     fe8:	bl	26fc <digitalWrite>
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
     fec:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     ff0:	ldrb.w	sl, [r9]
     ff4:	mov	r0, sl
     ff6:	bl	2708 <digitalRead>
     ffa:	clz	r1, r0
     ffe:	lsrs	r1, r1, #5
    1000:	mov	r0, sl
    1002:	bl	26fc <digitalWrite>
      
      if (currentMode == GLOBAL) {
    1006:	ldr	r3, [pc, #860]	; (1364 <loop+0xed0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1008:	ldr.w	r2, [r8]
    100c:	str	r2, [sp, #116]	; 0x74
    100e:	ldrb.w	sl, [r3]
	return ret;
    1012:	ldr	r2, [sp, #116]	; 0x74
      blinking = true;
      blinkingCounter = times;
    1014:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1018:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
    101c:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1020:	strb.w	fp, [r9, #16]
    1024:	cmp.w	sl, #0
    1028:	beq.w	15f6 <loop+0x1162>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    102c:	cmp.w	sl, #1
    1030:	beq.w	1bb2 <loop+0x171e>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    1034:	cmp.w	sl, #2
    1038:	beq.w	1d28 <loop+0x1894>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    103c:	cmp.w	sl, #3
    1040:	beq.w	18fa <loop+0x1466>
    1044:	ldr	r2, [r7, #12]
    1046:	b.w	5ae <loop+0x11a>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    104a:	ldr	r3, [r7, #24]
    104c:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1050:	clz	r1, r1
    1054:	lsrs	r1, r1, #5
    1056:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1058:	uxtb	r0, r0
    105a:	bl	26fc <digitalWrite>
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
    105e:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1062:	ldrb.w	sl, [r9]
    1066:	mov	r0, sl
    1068:	bl	2708 <digitalRead>
    106c:	clz	r1, r0
    1070:	lsrs	r1, r1, #5
    1072:	mov	r0, sl
    1074:	bl	26fc <digitalWrite>
      
      if (currentMode == GLOBAL) {
    1078:	ldr	r3, [pc, #744]	; (1364 <loop+0xed0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    107a:	ldr.w	r2, [r8]
    107e:	str	r2, [sp, #136]	; 0x88
    1080:	ldrb.w	sl, [r3]
	return ret;
    1084:	ldr	r2, [sp, #136]	; 0x88
      blinking = true;
      blinkingCounter = times;
    1086:	str.w	r5, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    108a:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
    108e:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1092:	strb.w	fp, [r9, #16]
    1096:	cmp.w	sl, #0
    109a:	beq.w	163a <loop+0x11a6>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    109e:	cmp.w	sl, #1
    10a2:	beq.w	1a5e <loop+0x15ca>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    10a6:	cmp.w	sl, #2
    10aa:	beq.w	1c3e <loop+0x17aa>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    10ae:	cmp.w	sl, #3
    10b2:	beq.w	18b8 <loop+0x1424>
    10b6:	ldr	r2, [r7, #12]
    10b8:	b.w	5f0 <loop+0x15c>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    10bc:	ldr	r3, [r7, #24]
    10be:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    10c2:	clz	r1, r1
    10c6:	lsrs	r1, r1, #5
    10c8:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    10ca:	uxtb	r0, r0
    10cc:	bl	26fc <digitalWrite>
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
    10d0:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    10d4:	ldrb.w	sl, [r9]
    10d8:	mov	r0, sl
    10da:	bl	2708 <digitalRead>
    10de:	clz	r1, r0
    10e2:	lsrs	r1, r1, #5
    10e4:	mov	r0, sl
    10e6:	bl	26fc <digitalWrite>
      
      if (currentMode == GLOBAL) {
    10ea:	ldr	r3, [pc, #632]	; (1364 <loop+0xed0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10ec:	ldr.w	r2, [r8]
    10f0:	str	r2, [sp, #156]	; 0x9c
    10f2:	ldrb.w	sl, [r3]
	return ret;
    10f6:	ldr	r2, [sp, #156]	; 0x9c
      blinking = true;
      blinkingCounter = times;
    10f8:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    10fc:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1100:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1104:	strb.w	fp, [r9, #16]
    1108:	cmp.w	sl, #0
    110c:	beq.w	1698 <loop+0x1204>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    1110:	cmp.w	sl, #1
    1114:	beq.w	1aa2 <loop+0x160e>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    1118:	cmp.w	sl, #2
    111c:	beq.w	1c98 <loop+0x1804>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1120:	cmp.w	sl, #3
    1124:	beq.w	1998 <loop+0x1504>
    1128:	ldr	r2, [r7, #12]
    112a:	b.w	632 <loop+0x19e>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    112e:	ldr	r3, [r7, #24]
    1130:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1134:	clz	r1, r1
    1138:	lsrs	r1, r1, #5
    113a:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    113c:	uxtb	r0, r0
    113e:	bl	26fc <digitalWrite>
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
    1142:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1146:	ldrb.w	sl, [r9]
    114a:	mov	r0, sl
    114c:	bl	2708 <digitalRead>
    1150:	clz	r1, r0
    1154:	lsrs	r1, r1, #5
    1156:	mov	r0, sl
    1158:	bl	26fc <digitalWrite>
      
      if (currentMode == GLOBAL) {
    115c:	ldr	r3, [pc, #516]	; (1364 <loop+0xed0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    115e:	ldr.w	r2, [r8]
    1162:	str	r2, [sp, #76]	; 0x4c
    1164:	ldrb.w	sl, [r3]
	return ret;
    1168:	ldr	r2, [sp, #76]	; 0x4c
      blinking = true;
      blinkingCounter = times;
    116a:	str.w	r6, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    116e:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1172:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1176:	strb.w	fp, [r9, #16]
    117a:	cmp.w	sl, #0
    117e:	beq.w	1764 <loop+0x12d0>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    1182:	cmp.w	sl, #1
    1186:	beq.w	1b6e <loop+0x16da>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    118a:	cmp.w	sl, #2
    118e:	beq.w	1bf6 <loop+0x1762>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1192:	cmp.w	sl, #3
    1196:	beq.w	1a1c <loop+0x1588>
    119a:	ldr	r2, [r7, #12]
    119c:	b.w	52a <loop+0x96>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    11a0:	ldr	r3, [r7, #24]
    11a2:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    11a6:	clz	r1, r1
    11aa:	lsrs	r1, r1, #5
    11ac:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    11ae:	uxtb	r0, r0
    11b0:	bl	26fc <digitalWrite>
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
    11b4:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    11b8:	ldrb.w	sl, [r9]
    11bc:	mov	r0, sl
    11be:	bl	2708 <digitalRead>
    11c2:	clz	r1, r0
    11c6:	lsrs	r1, r1, #5
    11c8:	mov	r0, sl
    11ca:	bl	26fc <digitalWrite>
      
      if (currentMode == GLOBAL) {
    11ce:	ldr	r3, [pc, #404]	; (1364 <loop+0xed0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11d0:	ldr.w	r2, [r8]
    11d4:	str	r2, [sp, #56]	; 0x38
    11d6:	ldrb.w	sl, [r3]
	return ret;
    11da:	ldr	r2, [sp, #56]	; 0x38
      blinking = true;
      blinkingCounter = times;
    11dc:	str.w	r5, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    11e0:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
    11e4:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    11e8:	strb.w	fp, [r9, #16]
    11ec:	cmp.w	sl, #0
    11f0:	beq.w	16dc <loop+0x1248>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    11f4:	cmp.w	sl, #1
    11f8:	beq.w	1ae6 <loop+0x1652>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    11fc:	cmp.w	sl, #2
    1200:	beq.w	1ce0 <loop+0x184c>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1204:	cmp.w	sl, #3
    1208:	beq.w	19da <loop+0x1546>
    120c:	ldr	r2, [r7, #12]
    120e:	b.w	4e8 <loop+0x54>
      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
    1212:	ldr	r3, [r7, #24]
    1214:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1218:	clz	r1, r1
    121c:	lsrs	r1, r1, #5
    121e:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1220:	uxtb	r0, r0
    1222:	bl	26fc <digitalWrite>
    void play () {
      Serial.println("Play");
    }

    void toggleGlobalMode () {
      m_led.blink();
    1226:	ldr.w	r9, [r7, #24]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    122a:	ldrb.w	sl, [r9]
    122e:	mov	r0, sl
    1230:	bl	2708 <digitalRead>
    1234:	clz	r1, r0
    1238:	lsrs	r1, r1, #5
    123a:	mov	r0, sl
    123c:	bl	26fc <digitalWrite>
      
      if (currentMode == GLOBAL) {
    1240:	ldr	r3, [pc, #288]	; (1364 <loop+0xed0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1242:	ldr.w	r2, [r8]
    1246:	str	r2, [sp, #96]	; 0x60
    1248:	ldrb.w	sl, [r3]
	return ret;
    124c:	ldr	r2, [sp, #96]	; 0x60
      blinking = true;
      blinkingCounter = times;
    124e:	str.w	r5, [r9, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1252:	mov.w	fp, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1256:	str.w	r2, [r9, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    125a:	strb.w	fp, [r9, #16]
    125e:	cmp.w	sl, #0
    1262:	beq.w	1720 <loop+0x128c>
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
    1266:	cmp.w	sl, #1
    126a:	beq.w	1b2a <loop+0x1696>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
    126e:	cmp.w	sl, #2
    1272:	beq.w	1d70 <loop+0x18dc>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
    1276:	cmp.w	sl, #3
    127a:	beq.w	193c <loop+0x14a8>
    127e:	ldr	r2, [r7, #12]
    1280:	b.w	56c <loop+0xd8>
      notes[id] = newValue;
    };

    void controlVelocity (int value, int id) {
      int newValue = map(value, 0, 1023, 127, 63);
      notesVelocities[id] = newValue;
    1284:	ldr	r3, [r4, #12]
    1286:	ldr	r1, [r4, #16]
    1288:	add.w	r2, r3, #14
    128c:	subs.w	r3, r0, r0, lsl #6
    1290:	it	mi
    1292:	addwmi	r3, r3, #1023	; 0x3ff
    1296:	asrs	r3, r3, #10
    1298:	adds	r3, #127	; 0x7f
    129a:	str.w	r3, [r1, r2, lsl #2]
    129e:	b.w	740 <loop+0x2ac>
    12a2:	ldr	r3, [r4, #12]
    12a4:	ldr	r1, [r4, #16]
    12a6:	add.w	r2, r3, #14
    12aa:	subs.w	r3, r0, r0, lsl #6
    12ae:	it	mi
    12b0:	addwmi	r3, r3, #1023	; 0x3ff
    12b4:	asrs	r3, r3, #10
    12b6:	adds	r3, #127	; 0x7f
    12b8:	str.w	r3, [r1, r2, lsl #2]
    12bc:	b.w	7ac <loop+0x318>
    12c0:	ldr	r3, [r4, #12]
    12c2:	ldr	r1, [r4, #16]
    12c4:	add.w	r2, r3, #14
    12c8:	subs.w	r3, r0, r0, lsl #6
    12cc:	it	mi
    12ce:	addwmi	r3, r3, #1023	; 0x3ff
    12d2:	asrs	r3, r3, #10
    12d4:	adds	r3, #127	; 0x7f
    12d6:	str.w	r3, [r1, r2, lsl #2]
    12da:	b.w	7ec <loop+0x358>
    12de:	ldr	r3, [r4, #12]
    12e0:	ldr	r1, [r4, #16]
    12e2:	add.w	r2, r3, #14
    12e6:	subs.w	r3, r0, r0, lsl #6
    12ea:	it	mi
    12ec:	addwmi	r3, r3, #1023	; 0x3ff
    12f0:	asrs	r3, r3, #10
    12f2:	adds	r3, #127	; 0x7f
    12f4:	str.w	r3, [r1, r2, lsl #2]
    12f8:	b.w	7cc <loop+0x338>
    12fc:	ldr	r3, [r4, #12]
    12fe:	ldr	r1, [r4, #16]
    1300:	add.w	r2, r3, #14
    1304:	subs.w	r3, r0, r0, lsl #6
    1308:	it	mi
    130a:	addwmi	r3, r3, #1023	; 0x3ff
    130e:	asrs	r3, r3, #10
    1310:	adds	r3, #127	; 0x7f
    1312:	str.w	r3, [r1, r2, lsl #2]
    1316:	b.w	71c <loop+0x288>
    void onClick () {
      if (m_state == LOW && m_shiftButton) {
        m_led.toggle();
        toggleGlobalMode();
      } else if (m_state == LOW && m_playButton) {
        m_led.toggle();
    131a:	ldr	r3, [r7, #24]
    131c:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1320:	clz	r1, r1
    1324:	lsrs	r1, r1, #5
    1326:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    1328:	uxtb	r0, r0
    132a:	bl	26fc <digitalWrite>
    132e:	movs	r1, #4
    1330:	ldr	r0, [pc, #52]	; (1368 <loop+0xed4>)
    1332:	bl	20ec <usb_serial_write>
    1336:	ldr	r0, [pc, #52]	; (136c <loop+0xed8>)
    1338:	bl	3c60 <Print::println()>
    133c:	b.n	10b6 <loop+0xc22>
    133e:	ldr	r3, [r7, #24]
    1340:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1344:	clz	r1, r1
    1348:	lsrs	r1, r1, #5
    134a:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    134c:	uxtb	r0, r0
    134e:	bl	26fc <digitalWrite>
    1352:	movs	r1, #4
    1354:	ldr	r0, [pc, #16]	; (1368 <loop+0xed4>)
    1356:	bl	20ec <usb_serial_write>
    135a:	ldr	r0, [pc, #16]	; (136c <loop+0xed8>)
    135c:	bl	3c60 <Print::println()>
    1360:	b.n	1044 <loop+0xbb0>
    1362:	nop
    1364:	.word	0x1fff165c
    1368:	.word	0x0000507c
    136c:	.word	0x1fff0c60
    1370:	ldr	r3, [r7, #24]
    1372:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1376:	clz	r1, r1
    137a:	lsrs	r1, r1, #5
    137c:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    137e:	uxtb	r0, r0
    1380:	bl	26fc <digitalWrite>
    1384:	movs	r1, #4
    1386:	ldr	r0, [pc, #760]	; (1680 <loop+0x11ec>)
    1388:	bl	20ec <usb_serial_write>
    138c:	ldr	r0, [pc, #756]	; (1684 <loop+0x11f0>)
    138e:	bl	3c60 <Print::println()>
    1392:	b.n	120c <loop+0xd78>
    1394:	ldr	r3, [r7, #24]
    1396:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    139a:	clz	r1, r1
    139e:	lsrs	r1, r1, #5
    13a0:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    13a2:	uxtb	r0, r0
    13a4:	bl	26fc <digitalWrite>
    13a8:	movs	r1, #4
    13aa:	ldr	r0, [pc, #724]	; (1680 <loop+0x11ec>)
    13ac:	bl	20ec <usb_serial_write>
    13b0:	ldr	r0, [pc, #720]	; (1684 <loop+0x11f0>)
    13b2:	bl	3c60 <Print::println()>
    13b6:	b.n	1128 <loop+0xc94>
    13b8:	ldr	r3, [r7, #24]
    13ba:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    13be:	clz	r1, r1
    13c2:	lsrs	r1, r1, #5
    13c4:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    13c6:	uxtb	r0, r0
    13c8:	bl	26fc <digitalWrite>
    13cc:	movs	r1, #4
    13ce:	ldr	r0, [pc, #688]	; (1680 <loop+0x11ec>)
    13d0:	bl	20ec <usb_serial_write>
    13d4:	ldr	r0, [pc, #684]	; (1684 <loop+0x11f0>)
    13d6:	bl	3c60 <Print::println()>
    13da:	b.n	119a <loop+0xd06>
    13dc:	ldr	r3, [r7, #24]
    13de:	ldmia.w	r3, {r0, r1}
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    13e2:	clz	r1, r1
    13e6:	lsrs	r1, r1, #5
    13e8:	str	r1, [r3, #4]

      digitalWrite(m_pin, m_state); 
    13ea:	uxtb	r0, r0
    13ec:	bl	26fc <digitalWrite>
    13f0:	movs	r1, #4
    13f2:	ldr	r0, [pc, #652]	; (1680 <loop+0x11ec>)
    13f4:	bl	20ec <usb_serial_write>
    13f8:	ldr	r0, [pc, #648]	; (1684 <loop+0x11f0>)
    13fa:	bl	3c60 <Print::println()>
    13fe:	b.n	127e <loop+0xdea>
      notesLengths[id] = newValue;
    };

    void controlPitch (int value, int id) {
      int newValue = map(value, 0, 1023, 51, 38);
      notes[id] = newValue;
    1400:	sub.w	r3, r0, r0, lsl #2
    1404:	ldr	r2, [r4, #12]
    1406:	ldr	r1, [r4, #16]
    1408:	lsls	r3, r3, #2
    140a:	it	mi
    140c:	addwmi	r3, r3, #1023	; 0x3ff
    1410:	adds	r2, #10
    1412:	asrs	r3, r3, #10
    1414:	adds	r3, #51	; 0x33
    1416:	str.w	r3, [r1, r2, lsl #2]
    141a:	b.w	71c <loop+0x288>
    141e:	sub.w	r3, r0, r0, lsl #2
    1422:	ldr	r2, [r4, #12]
    1424:	ldr	r1, [r4, #16]
    1426:	lsls	r3, r3, #2
    1428:	it	mi
    142a:	addwmi	r3, r3, #1023	; 0x3ff
    142e:	adds	r2, #10
    1430:	asrs	r3, r3, #10
    1432:	adds	r3, #51	; 0x33
    1434:	str.w	r3, [r1, r2, lsl #2]
    1438:	b.w	740 <loop+0x2ac>
    143c:	sub.w	r3, r0, r0, lsl #2
    1440:	ldr	r2, [r4, #12]
    1442:	ldr	r1, [r4, #16]
    1444:	lsls	r3, r3, #2
    1446:	it	mi
    1448:	addwmi	r3, r3, #1023	; 0x3ff
    144c:	adds	r2, #10
    144e:	asrs	r3, r3, #10
    1450:	adds	r3, #51	; 0x33
    1452:	str.w	r3, [r1, r2, lsl #2]
    1456:	b.w	7cc <loop+0x338>
    145a:	sub.w	r3, r0, r0, lsl #2
    145e:	ldr	r2, [r4, #12]
    1460:	ldr	r1, [r4, #16]
    1462:	lsls	r3, r3, #2
    1464:	it	mi
    1466:	addwmi	r3, r3, #1023	; 0x3ff
    146a:	adds	r2, #10
    146c:	asrs	r3, r3, #10
    146e:	adds	r3, #51	; 0x33
    1470:	str.w	r3, [r1, r2, lsl #2]
    1474:	b.w	7ac <loop+0x318>
    1478:	sub.w	r3, r0, r0, lsl #2
    147c:	ldr	r2, [r4, #12]
    147e:	ldr	r1, [r4, #16]
    1480:	lsls	r3, r3, #2
    1482:	it	mi
    1484:	addwmi	r3, r3, #1023	; 0x3ff
    1488:	adds	r2, #10
    148a:	asrs	r3, r3, #10
    148c:	adds	r3, #51	; 0x33
    148e:	str.w	r3, [r1, r2, lsl #2]
    1492:	b.w	7ec <loop+0x358>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1496:	sub.w	r0, r0, #800	; 0x320
    149a:	cmp	r0, #223	; 0xdf
        max_ppqn = 12;
    149c:	itt	ls
    149e:	movls	r3, #12
    14a0:	strls	r3, [r2, #32]
    14a2:	b.w	c2e <loop+0x79a>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    14a6:	sub.w	r0, r0, #800	; 0x320
    14aa:	cmp	r0, #223	; 0xdf
        max_ppqn = 12;
    14ac:	itt	ls
    14ae:	movls	r3, #12
    14b0:	strls	r3, [r2, #32]
    14b2:	b.w	bf2 <loop+0x75e>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    14b6:	sub.w	r0, r0, #800	; 0x320
    14ba:	cmp	r0, #223	; 0xdf
        max_ppqn = 12;
    14bc:	itt	ls
    14be:	movls	r3, #12
    14c0:	strls	r3, [r2, #32]
    14c2:	b.w	ca6 <loop+0x812>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    14c6:	sub.w	r0, r0, #800	; 0x320
    14ca:	cmp	r0, #223	; 0xdf
        max_ppqn = 12;
    14cc:	itt	ls
    14ce:	movls	r3, #12
    14d0:	strls	r3, [r2, #32]
    14d2:	b.n	ce0 <loop+0x84c>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    14d4:	sub.w	r0, r0, #800	; 0x320
    14d8:	cmp	r0, #223	; 0xdf
        max_ppqn = 12;
    14da:	itt	ls
    14dc:	movls	r3, #12
    14de:	strls	r3, [r2, #32]
    14e0:	b.w	c6a <loop+0x7d6>
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    14e4:	ldr	r6, [pc, #416]	; (1688 <loop+0x11f4>)
    14e6:	mul.w	r3, r3, r0
    14ea:	smull	r7, r6, r6, r3
    14ee:	add	r6, r3
    14f0:	asrs	r3, r3, #31
    14f2:	rsb	r3, r3, r6, asr #9
    14f6:	add	r2, r3
    14f8:	b.n	f9a <loop+0xb06>
    14fa:	ldr	r6, [pc, #396]	; (1688 <loop+0x11f4>)
    14fc:	mul.w	r3, r3, r0
    1500:	smull	r7, r6, r6, r3
    1504:	add	r6, r3
    1506:	asrs	r3, r3, #31
    1508:	rsb	r3, r3, r6, asr #9
    150c:	add	r2, r3
    150e:	b.n	fce <loop+0xb3a>
    1510:	ldr	r6, [pc, #372]	; (1688 <loop+0x11f4>)
    1512:	mul.w	r3, r3, r0
    1516:	smull	r7, r6, r6, r3
    151a:	add	r6, r3
    151c:	asrs	r3, r3, #31
    151e:	rsb	r3, r3, r6, asr #9
    1522:	add	r2, r3
    1524:	b.n	f68 <loop+0xad4>
    1526:	ldr	r6, [pc, #352]	; (1688 <loop+0x11f4>)
    1528:	mul.w	r3, r3, r0
    152c:	smull	r7, r6, r6, r3
    1530:	add	r6, r3
    1532:	asrs	r3, r3, #31
    1534:	rsb	r3, r3, r6, asr #9
    1538:	add	r2, r3
    153a:	b.n	f04 <loop+0xa70>
    153c:	ldr	r6, [pc, #328]	; (1688 <loop+0x11f4>)
    153e:	mul.w	r3, r3, r0
    1542:	smull	r7, r6, r6, r3
    1546:	add	r6, r3
    1548:	asrs	r3, r3, #31
    154a:	rsb	r3, r3, r6, asr #9
    154e:	add	r2, r3
    1550:	b.n	f36 <loop+0xaa2>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1552:	ldr	r0, [pc, #312]	; (168c <loop+0x11f8>)
    1554:	bl	2988 <usb_midi_write_packed>
    1558:	ldr	r3, [r5, #28]
    155a:	b.n	e66 <loop+0x9d2>
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
    155c:	add.w	r6, r3, #10
    1560:	adds	r3, #14
    1562:	ldr.w	r2, [r5, r6, lsl #2]
    1566:	ldr.w	r3, [r5, r3, lsl #2]
    156a:	lsls	r2, r2, #16
    156c:	lsls	r0, r3, #24
    156e:	and.w	r3, r0, #2130706432	; 0x7f000000
    1572:	and.w	r0, r2, #8323072	; 0x7f0000
    1576:	orrs	r0, r3
    1578:	orr.w	r0, r0, #40704	; 0x9f00
    157c:	orr.w	r0, r0, #9
    1580:	bl	2988 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1584:	bl	2a24 <usb_midi_flush_output>
      activeNote = notes[step];
    1588:	ldr.w	r2, [r5, r6, lsl #2]
    158c:	ldr	r3, [r5, #8]
    158e:	str	r2, [r5, #36]	; 0x24
    1590:	b.n	e2e <loop+0x99a>
    1592:	movs	r1, #6
    1594:	ldr	r0, [pc, #248]	; (1690 <loop+0x11fc>)
    1596:	bl	20ec <usb_serial_write>
    159a:	ldr	r0, [pc, #232]	; (1684 <loop+0x11f0>)
    159c:	bl	3c60 <Print::println()>
    15a0:	ldr	r0, [r4, #4]
    15a2:	b.w	7ec <loop+0x358>
    15a6:	movs	r1, #6
    15a8:	ldr	r0, [pc, #228]	; (1690 <loop+0x11fc>)
    15aa:	bl	20ec <usb_serial_write>
    15ae:	ldr	r0, [pc, #212]	; (1684 <loop+0x11f0>)
    15b0:	bl	3c60 <Print::println()>
    15b4:	ldr	r0, [r4, #4]
    15b6:	b.w	71c <loop+0x288>
    15ba:	movs	r1, #6
    15bc:	ldr	r0, [pc, #208]	; (1690 <loop+0x11fc>)
    15be:	bl	20ec <usb_serial_write>
    15c2:	ldr	r0, [pc, #192]	; (1684 <loop+0x11f0>)
    15c4:	bl	3c60 <Print::println()>
    15c8:	ldr	r0, [r4, #4]
    15ca:	b.w	7cc <loop+0x338>
    15ce:	movs	r1, #6
    15d0:	ldr	r0, [pc, #188]	; (1690 <loop+0x11fc>)
    15d2:	bl	20ec <usb_serial_write>
    15d6:	ldr	r0, [pc, #172]	; (1684 <loop+0x11f0>)
    15d8:	bl	3c60 <Print::println()>
    15dc:	ldr	r0, [r4, #4]
    15de:	b.w	740 <loop+0x2ac>
    15e2:	movs	r1, #6
    15e4:	ldr	r0, [pc, #168]	; (1690 <loop+0x11fc>)
    15e6:	bl	20ec <usb_serial_write>
    15ea:	ldr	r0, [pc, #152]	; (1684 <loop+0x11f0>)
    15ec:	bl	3c60 <Print::println()>
    15f0:	ldr	r0, [r4, #4]
    15f2:	b.w	7ac <loop+0x318>
    15f6:	movs	r1, #5
    15f8:	ldr	r0, [pc, #152]	; (1694 <loop+0x1200>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    15fa:	strb.w	fp, [r3]
    15fe:	bl	20ec <usb_serial_write>
    1602:	ldr	r0, [pc, #128]	; (1684 <loop+0x11f0>)
    1604:	bl	3c60 <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    1608:	ldr	r3, [r7, #28]
    160a:	ldr	r6, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    160c:	ldrb.w	r9, [r6]
    1610:	mov	r0, r9
    1612:	bl	2708 <digitalRead>
    1616:	clz	r1, r0
    161a:	lsrs	r1, r1, #5
    161c:	mov	r0, r9
    161e:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1622:	ldr.w	r3, [r8]
    1626:	str	r3, [sp, #120]	; 0x78
	return ret;
    1628:	ldr	r3, [sp, #120]	; 0x78
    162a:	ldr	r2, [r7, #12]
      blinking = true;
    162c:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    1630:	movs	r1, #3
    1632:	str	r1, [r6, #20]
      lastBlink = millis();  
    1634:	str	r3, [r6, #8]
    1636:	b.w	5ae <loop+0x11a>
    163a:	movs	r1, #5
    163c:	ldr	r0, [pc, #84]	; (1694 <loop+0x1200>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    163e:	strb.w	fp, [r3]
    1642:	bl	20ec <usb_serial_write>
    1646:	ldr	r0, [pc, #60]	; (1684 <loop+0x11f0>)
    1648:	bl	3c60 <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    164c:	ldr	r3, [r7, #28]
    164e:	ldr	r5, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1650:	ldrb.w	r9, [r5]
    1654:	mov	r0, r9
    1656:	bl	2708 <digitalRead>
    165a:	clz	r1, r0
    165e:	lsrs	r1, r1, #5
    1660:	mov	r0, r9
    1662:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1666:	ldr.w	r3, [r8]
    166a:	str	r3, [sp, #140]	; 0x8c
	return ret;
    166c:	ldr	r3, [sp, #140]	; 0x8c
    166e:	ldr	r2, [r7, #12]
      blinking = true;
    1670:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    1674:	movs	r1, #3
    1676:	str	r1, [r5, #20]
      lastBlink = millis();  
    1678:	str	r3, [r5, #8]
    167a:	b.w	5f0 <loop+0x15c>
    167e:	nop
    1680:	.word	0x0000507c
    1684:	.word	0x1fff0c60
    1688:	.word	0x80200803
    168c:	.word	0x7f7bbf0b
    1690:	.word	0x0000508c
    1694:	.word	0x00005054
    1698:	movs	r1, #5
    169a:	ldr	r0, [pc, #740]	; (1980 <loop+0x14ec>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    169c:	strb.w	fp, [r3]
    16a0:	bl	20ec <usb_serial_write>
    16a4:	ldr	r0, [pc, #732]	; (1984 <loop+0x14f0>)
    16a6:	bl	3c60 <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    16aa:	ldr	r3, [r7, #28]
    16ac:	ldr	r6, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    16ae:	ldrb.w	r9, [r6]
    16b2:	mov	r0, r9
    16b4:	bl	2708 <digitalRead>
    16b8:	clz	r1, r0
    16bc:	lsrs	r1, r1, #5
    16be:	mov	r0, r9
    16c0:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16c4:	ldr.w	r3, [r8]
    16c8:	str	r3, [sp, #160]	; 0xa0
	return ret;
    16ca:	ldr	r3, [sp, #160]	; 0xa0
    16cc:	ldr	r2, [r7, #12]
      blinking = true;
    16ce:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    16d2:	movs	r1, #3
    16d4:	str	r1, [r6, #20]
      lastBlink = millis();  
    16d6:	str	r3, [r6, #8]
    16d8:	b.w	632 <loop+0x19e>
    16dc:	movs	r1, #5
    16de:	ldr	r0, [pc, #672]	; (1980 <loop+0x14ec>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    16e0:	strb.w	fp, [r3]
    16e4:	bl	20ec <usb_serial_write>
    16e8:	ldr	r0, [pc, #664]	; (1984 <loop+0x14f0>)
    16ea:	bl	3c60 <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    16ee:	ldr	r3, [r7, #28]
    16f0:	ldr	r5, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    16f2:	ldrb.w	r9, [r5]
    16f6:	mov	r0, r9
    16f8:	bl	2708 <digitalRead>
    16fc:	clz	r1, r0
    1700:	lsrs	r1, r1, #5
    1702:	mov	r0, r9
    1704:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1708:	ldr.w	r3, [r8]
    170c:	str	r3, [sp, #60]	; 0x3c
	return ret;
    170e:	ldr	r3, [sp, #60]	; 0x3c
    1710:	ldr	r2, [r7, #12]
      blinking = true;
    1712:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    1716:	movs	r1, #3
    1718:	str	r1, [r5, #20]
      lastBlink = millis();  
    171a:	str	r3, [r5, #8]
    171c:	b.w	4e8 <loop+0x54>
    1720:	movs	r1, #5
    1722:	ldr	r0, [pc, #604]	; (1980 <loop+0x14ec>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    1724:	strb.w	fp, [r3]
    1728:	bl	20ec <usb_serial_write>
    172c:	ldr	r0, [pc, #596]	; (1984 <loop+0x14f0>)
    172e:	bl	3c60 <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    1732:	ldr	r3, [r7, #28]
    1734:	ldr	r5, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1736:	ldrb.w	r9, [r5]
    173a:	mov	r0, r9
    173c:	bl	2708 <digitalRead>
    1740:	clz	r1, r0
    1744:	lsrs	r1, r1, #5
    1746:	mov	r0, r9
    1748:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    174c:	ldr.w	r3, [r8]
    1750:	str	r3, [sp, #100]	; 0x64
	return ret;
    1752:	ldr	r3, [sp, #100]	; 0x64
    1754:	ldr	r2, [r7, #12]
      blinking = true;
    1756:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    175a:	movs	r1, #3
    175c:	str	r1, [r5, #20]
      lastBlink = millis();  
    175e:	str	r3, [r5, #8]
    1760:	b.w	56c <loop+0xd8>
    1764:	movs	r1, #5
    1766:	ldr	r0, [pc, #536]	; (1980 <loop+0x14ec>)

    void toggleGlobalMode () {
      m_led.blink();
      
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
    1768:	strb.w	fp, [r3]
    176c:	bl	20ec <usb_serial_write>
    1770:	ldr	r0, [pc, #528]	; (1984 <loop+0x14f0>)
    1772:	bl	3c60 <Print::println()>
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
    1776:	ldr	r3, [r7, #28]
    1778:	ldr	r6, [r3, #88]	; 0x58
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    177a:	ldrb.w	r9, [r6]
    177e:	mov	r0, r9
    1780:	bl	2708 <digitalRead>
    1784:	clz	r1, r0
    1788:	lsrs	r1, r1, #5
    178a:	mov	r0, r9
    178c:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1790:	ldr.w	r3, [r8]
    1794:	str	r3, [sp, #80]	; 0x50
	return ret;
    1796:	ldr	r3, [sp, #80]	; 0x50
    1798:	ldr	r2, [r7, #12]
      blinking = true;
    179a:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    179e:	movs	r1, #3
    17a0:	str	r1, [r6, #20]
      lastBlink = millis();  
    17a2:	str	r3, [r6, #8]
    17a4:	b.w	52a <loop+0x96>
    17a8:	movs	r1, #5
    17aa:	ldr	r0, [pc, #476]	; (1988 <loop+0x14f4>)
    17ac:	bl	20ec <usb_serial_write>
    17b0:	ldr	r0, [pc, #464]	; (1984 <loop+0x14f0>)
    17b2:	bl	3c60 <Print::println()>
    17b6:	ldr	r0, [r4, #4]
    17b8:	b.w	7ac <loop+0x318>
    17bc:	movs	r1, #5
    17be:	ldr	r0, [pc, #456]	; (1988 <loop+0x14f4>)
    17c0:	bl	20ec <usb_serial_write>
    17c4:	ldr	r0, [pc, #444]	; (1984 <loop+0x14f0>)
    17c6:	bl	3c60 <Print::println()>
    17ca:	ldr	r0, [r4, #4]
    17cc:	b.w	7ec <loop+0x358>
    17d0:	movs	r1, #5
    17d2:	ldr	r0, [pc, #436]	; (1988 <loop+0x14f4>)
    17d4:	bl	20ec <usb_serial_write>
    17d8:	ldr	r0, [pc, #424]	; (1984 <loop+0x14f0>)
    17da:	bl	3c60 <Print::println()>
    17de:	ldr	r0, [r4, #4]
    17e0:	b.w	71c <loop+0x288>
    17e4:	movs	r1, #5
    17e6:	ldr	r0, [pc, #416]	; (1988 <loop+0x14f4>)
    17e8:	bl	20ec <usb_serial_write>
    17ec:	ldr	r0, [pc, #404]	; (1984 <loop+0x14f0>)
    17ee:	bl	3c60 <Print::println()>
    17f2:	ldr	r0, [r4, #4]
    17f4:	b.w	7cc <loop+0x338>
    17f8:	movs	r1, #5
    17fa:	ldr	r0, [pc, #396]	; (1988 <loop+0x14f4>)
    17fc:	bl	20ec <usb_serial_write>
    1800:	ldr	r0, [pc, #384]	; (1984 <loop+0x14f0>)
    1802:	bl	3c60 <Print::println()>
    1806:	ldr	r0, [r4, #4]
    1808:	b.w	740 <loop+0x2ac>
    };

    void doStep () {  
      if (m_state) {
        m_leds[m_currentStep]->blink();
    180c:	ldr	r3, [r6, #8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    180e:	ldr	r4, [pc, #380]	; (198c <loop+0x14f8>)
    1810:	adds	r3, #22
    1812:	ldr.w	r7, [r6, r3, lsl #2]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1816:	ldrb.w	r8, [r7]
    181a:	mov	r0, r8
    181c:	bl	2708 <digitalRead>
    1820:	clz	r1, r0
    1824:	lsrs	r1, r1, #5
    1826:	mov	r0, r8
    1828:	bl	26fc <digitalWrite>
    182c:	ldr	r2, [r4, #0]

        if (m_steps[m_currentStep].m_state) {
    182e:	ldr	r3, [r6, #8]
    1830:	str	r2, [sp, #0]
	return ret;
    1832:	ldr	r1, [sp, #0]
    1834:	ldrb	r2, [r6, r3]
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
    1836:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1838:	movs	r0, #1
      blinkingCounter = times;
    183a:	movs	r1, #0
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    183c:	strb	r0, [r7, #16]
      blinkingCounter = times;
    183e:	str	r1, [r7, #20]
    1840:	cmp	r2, #0
    1842:	bne.w	1db8 <loop+0x1924>
          playStep(m_currentStep);
        }

        m_currentStep++;
    1846:	adds	r3, #1

        if (m_currentStep > 3) {
    1848:	cmp	r3, #3
          m_currentStep = 0;
    184a:	it	gt
    184c:	movgt	r3, #0
    184e:	str	r3, [r5, #8]
    1850:	b.w	e7a <loop+0x9e6>
    1854:	movs	r1, #6
    1856:	ldr	r0, [pc, #312]	; (1990 <loop+0x14fc>)
    1858:	bl	20ec <usb_serial_write>
    185c:	ldr	r0, [pc, #292]	; (1984 <loop+0x14f0>)
    185e:	bl	3c60 <Print::println()>
    1862:	ldr	r0, [r4, #4]
    1864:	b.w	7ac <loop+0x318>
    1868:	movs	r1, #6
    186a:	ldr	r0, [pc, #292]	; (1990 <loop+0x14fc>)
    186c:	bl	20ec <usb_serial_write>
    1870:	ldr	r0, [pc, #272]	; (1984 <loop+0x14f0>)
    1872:	bl	3c60 <Print::println()>
    1876:	ldr	r0, [r4, #4]
    1878:	b.w	7cc <loop+0x338>
    187c:	movs	r1, #6
    187e:	ldr	r0, [pc, #272]	; (1990 <loop+0x14fc>)
    1880:	bl	20ec <usb_serial_write>
    1884:	ldr	r0, [pc, #252]	; (1984 <loop+0x14f0>)
    1886:	bl	3c60 <Print::println()>
    188a:	ldr	r0, [r4, #4]
    188c:	b.w	71c <loop+0x288>
    1890:	movs	r1, #6
    1892:	ldr	r0, [pc, #252]	; (1990 <loop+0x14fc>)
    1894:	bl	20ec <usb_serial_write>
    1898:	ldr	r0, [pc, #232]	; (1984 <loop+0x14f0>)
    189a:	bl	3c60 <Print::println()>
    189e:	ldr	r0, [r4, #4]
    18a0:	b.w	740 <loop+0x2ac>
    18a4:	movs	r1, #6
    18a6:	ldr	r0, [pc, #232]	; (1990 <loop+0x14fc>)
    18a8:	bl	20ec <usb_serial_write>
    18ac:	ldr	r0, [pc, #212]	; (1984 <loop+0x14f0>)
    18ae:	bl	3c60 <Print::println()>
    18b2:	ldr	r0, [r4, #4]
    18b4:	b.w	7ec <loop+0x358>
    18b8:	movs	r1, #6
    18ba:	ldr	r0, [pc, #216]	; (1994 <loop+0x1500>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    18bc:	strb	r5, [r3, #0]
    18be:	bl	20ec <usb_serial_write>
    18c2:	ldr	r0, [pc, #192]	; (1984 <loop+0x14f0>)
    18c4:	bl	3c60 <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    18c8:	ldr	r3, [r7, #28]
    18ca:	ldr	r5, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    18cc:	ldrb.w	r9, [r5]
    18d0:	mov	r0, r9
    18d2:	bl	2708 <digitalRead>
    18d6:	clz	r1, r0
    18da:	lsrs	r1, r1, #5
    18dc:	mov	r0, r9
    18de:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18e2:	ldr.w	r3, [r8]
    18e6:	str	r3, [sp, #152]	; 0x98
	return ret;
    18e8:	ldr	r3, [sp, #152]	; 0x98
    18ea:	ldr	r2, [r7, #12]
      blinking = true;
    18ec:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    18f0:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    18f4:	str	r3, [r5, #8]
    18f6:	b.w	5f0 <loop+0x15c>
    18fa:	movs	r1, #6
    18fc:	ldr	r0, [pc, #148]	; (1994 <loop+0x1500>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    18fe:	strb	r6, [r3, #0]
    1900:	bl	20ec <usb_serial_write>
    1904:	ldr	r0, [pc, #124]	; (1984 <loop+0x14f0>)
    1906:	bl	3c60 <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    190a:	ldr	r3, [r7, #28]
    190c:	ldr	r6, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    190e:	ldrb.w	r9, [r6]
    1912:	mov	r0, r9
    1914:	bl	2708 <digitalRead>
    1918:	clz	r1, r0
    191c:	lsrs	r1, r1, #5
    191e:	mov	r0, r9
    1920:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1924:	ldr.w	r3, [r8]
    1928:	str	r3, [sp, #132]	; 0x84
	return ret;
    192a:	ldr	r3, [sp, #132]	; 0x84
    192c:	ldr	r2, [r7, #12]
      blinking = true;
    192e:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    1932:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    1936:	str	r3, [r6, #8]
    1938:	b.w	5ae <loop+0x11a>
    193c:	movs	r1, #6
    193e:	ldr	r0, [pc, #84]	; (1994 <loop+0x1500>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    1940:	strb	r5, [r3, #0]
    1942:	bl	20ec <usb_serial_write>
    1946:	ldr	r0, [pc, #60]	; (1984 <loop+0x14f0>)
    1948:	bl	3c60 <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    194c:	ldr	r3, [r7, #28]
    194e:	ldr	r5, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1950:	ldrb.w	r9, [r5]
    1954:	mov	r0, r9
    1956:	bl	2708 <digitalRead>
    195a:	clz	r1, r0
    195e:	lsrs	r1, r1, #5
    1960:	mov	r0, r9
    1962:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1966:	ldr.w	r3, [r8]
    196a:	str	r3, [sp, #112]	; 0x70
	return ret;
    196c:	ldr	r3, [sp, #112]	; 0x70
    196e:	ldr	r2, [r7, #12]
      blinking = true;
    1970:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    1974:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    1978:	str	r3, [r5, #8]
    197a:	b.w	56c <loop+0xd8>
    197e:	nop
    1980:	.word	0x00005054
    1984:	.word	0x1fff0c60
    1988:	.word	0x00005094
    198c:	.word	0x1fff1850
    1990:	.word	0x0000509c
    1994:	.word	0x00005074
    1998:	movs	r1, #6
    199a:	ldr	r0, [pc, #748]	; (1c88 <loop+0x17f4>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    199c:	strb	r6, [r3, #0]
    199e:	bl	20ec <usb_serial_write>
    19a2:	ldr	r0, [pc, #744]	; (1c8c <loop+0x17f8>)
    19a4:	bl	3c60 <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    19a8:	ldr	r3, [r7, #28]
    19aa:	ldr	r6, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    19ac:	ldrb.w	r9, [r6]
    19b0:	mov	r0, r9
    19b2:	bl	2708 <digitalRead>
    19b6:	clz	r1, r0
    19ba:	lsrs	r1, r1, #5
    19bc:	mov	r0, r9
    19be:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19c2:	ldr.w	r3, [r8]
    19c6:	str	r3, [sp, #172]	; 0xac
	return ret;
    19c8:	ldr	r3, [sp, #172]	; 0xac
    19ca:	ldr	r2, [r7, #12]
      blinking = true;
    19cc:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    19d0:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    19d4:	str	r3, [r6, #8]
    19d6:	b.w	632 <loop+0x19e>
    19da:	movs	r1, #6
    19dc:	ldr	r0, [pc, #680]	; (1c88 <loop+0x17f4>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    19de:	strb	r5, [r3, #0]
    19e0:	bl	20ec <usb_serial_write>
    19e4:	ldr	r0, [pc, #676]	; (1c8c <loop+0x17f8>)
    19e6:	bl	3c60 <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    19ea:	ldr	r3, [r7, #28]
    19ec:	ldr	r5, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    19ee:	ldrb.w	r9, [r5]
    19f2:	mov	r0, r9
    19f4:	bl	2708 <digitalRead>
    19f8:	clz	r1, r0
    19fc:	lsrs	r1, r1, #5
    19fe:	mov	r0, r9
    1a00:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a04:	ldr.w	r3, [r8]
    1a08:	str	r3, [sp, #72]	; 0x48
	return ret;
    1a0a:	ldr	r3, [sp, #72]	; 0x48
    1a0c:	ldr	r2, [r7, #12]
      blinking = true;
    1a0e:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
    1a12:	str.w	sl, [r5, #20]
      lastBlink = millis();  
    1a16:	str	r3, [r5, #8]
    1a18:	b.w	4e8 <loop+0x54>
    1a1c:	movs	r1, #6
    1a1e:	ldr	r0, [pc, #616]	; (1c88 <loop+0x17f4>)
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
      } else if (currentMode == NOTELENGTH) {
        currentMode = GLOBAL;
    1a20:	strb	r6, [r3, #0]
    1a22:	bl	20ec <usb_serial_write>
    1a26:	ldr	r0, [pc, #612]	; (1c8c <loop+0x17f8>)
    1a28:	bl	3c60 <Print::println()>
        Serial.println("GLOBAL");
        m_sequence.m_leds[3]->blink(3);
    1a2c:	ldr	r3, [r7, #28]
    1a2e:	ldr	r6, [r3, #100]	; 0x64
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1a30:	ldrb.w	r9, [r6]
    1a34:	mov	r0, r9
    1a36:	bl	2708 <digitalRead>
    1a3a:	clz	r1, r0
    1a3e:	lsrs	r1, r1, #5
    1a40:	mov	r0, r9
    1a42:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a46:	ldr.w	r3, [r8]
    1a4a:	str	r3, [sp, #92]	; 0x5c
	return ret;
    1a4c:	ldr	r3, [sp, #92]	; 0x5c
    1a4e:	ldr	r2, [r7, #12]
      blinking = true;
    1a50:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
    1a54:	str.w	sl, [r6, #20]
      lastBlink = millis();  
    1a58:	str	r3, [r6, #8]
    1a5a:	b.w	52a <loop+0x96>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1a5e:	movs	r2, #2
    1a60:	movs	r1, #8
    1a62:	ldr	r0, [pc, #556]	; (1c90 <loop+0x17fc>)
    1a64:	strb	r2, [r3, #0]
    1a66:	bl	20ec <usb_serial_write>
    1a6a:	ldr	r0, [pc, #544]	; (1c8c <loop+0x17f8>)
    1a6c:	bl	3c60 <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    1a70:	ldr	r3, [r7, #28]
    1a72:	ldr	r5, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1a74:	ldrb.w	r9, [r5]
    1a78:	mov	r0, r9
    1a7a:	bl	2708 <digitalRead>
    1a7e:	clz	r1, r0
    1a82:	lsrs	r1, r1, #5
    1a84:	mov	r0, r9
    1a86:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a8a:	ldr.w	r3, [r8]
    1a8e:	str	r3, [sp, #144]	; 0x90
	return ret;
    1a90:	ldr	r3, [sp, #144]	; 0x90
    1a92:	ldr	r2, [r7, #12]
      blinking = true;
    1a94:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    1a98:	movs	r1, #3
    1a9a:	str	r1, [r5, #20]
      lastBlink = millis();  
    1a9c:	str	r3, [r5, #8]
    1a9e:	b.w	5f0 <loop+0x15c>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1aa2:	movs	r2, #2
    1aa4:	movs	r1, #8
    1aa6:	ldr	r0, [pc, #488]	; (1c90 <loop+0x17fc>)
    1aa8:	strb	r2, [r3, #0]
    1aaa:	bl	20ec <usb_serial_write>
    1aae:	ldr	r0, [pc, #476]	; (1c8c <loop+0x17f8>)
    1ab0:	bl	3c60 <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    1ab4:	ldr	r3, [r7, #28]
    1ab6:	ldr	r6, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1ab8:	ldrb.w	r9, [r6]
    1abc:	mov	r0, r9
    1abe:	bl	2708 <digitalRead>
    1ac2:	clz	r1, r0
    1ac6:	lsrs	r1, r1, #5
    1ac8:	mov	r0, r9
    1aca:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ace:	ldr.w	r3, [r8]
    1ad2:	str	r3, [sp, #164]	; 0xa4
	return ret;
    1ad4:	ldr	r3, [sp, #164]	; 0xa4
    1ad6:	ldr	r2, [r7, #12]
      blinking = true;
    1ad8:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    1adc:	movs	r1, #3
    1ade:	str	r1, [r6, #20]
      lastBlink = millis();  
    1ae0:	str	r3, [r6, #8]
    1ae2:	b.w	632 <loop+0x19e>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1ae6:	movs	r2, #2
    1ae8:	movs	r1, #8
    1aea:	ldr	r0, [pc, #420]	; (1c90 <loop+0x17fc>)
    1aec:	strb	r2, [r3, #0]
    1aee:	bl	20ec <usb_serial_write>
    1af2:	ldr	r0, [pc, #408]	; (1c8c <loop+0x17f8>)
    1af4:	bl	3c60 <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    1af8:	ldr	r3, [r7, #28]
    1afa:	ldr	r5, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1afc:	ldrb.w	r9, [r5]
    1b00:	mov	r0, r9
    1b02:	bl	2708 <digitalRead>
    1b06:	clz	r1, r0
    1b0a:	lsrs	r1, r1, #5
    1b0c:	mov	r0, r9
    1b0e:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b12:	ldr.w	r3, [r8]
    1b16:	str	r3, [sp, #64]	; 0x40
	return ret;
    1b18:	ldr	r3, [sp, #64]	; 0x40
    1b1a:	ldr	r2, [r7, #12]
      blinking = true;
    1b1c:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    1b20:	movs	r1, #3
    1b22:	str	r1, [r5, #20]
      lastBlink = millis();  
    1b24:	str	r3, [r5, #8]
    1b26:	b.w	4e8 <loop+0x54>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1b2a:	movs	r2, #2
    1b2c:	movs	r1, #8
    1b2e:	ldr	r0, [pc, #352]	; (1c90 <loop+0x17fc>)
    1b30:	strb	r2, [r3, #0]
    1b32:	bl	20ec <usb_serial_write>
    1b36:	ldr	r0, [pc, #340]	; (1c8c <loop+0x17f8>)
    1b38:	bl	3c60 <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    1b3c:	ldr	r3, [r7, #28]
    1b3e:	ldr	r5, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1b40:	ldrb.w	r9, [r5]
    1b44:	mov	r0, r9
    1b46:	bl	2708 <digitalRead>
    1b4a:	clz	r1, r0
    1b4e:	lsrs	r1, r1, #5
    1b50:	mov	r0, r9
    1b52:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b56:	ldr.w	r3, [r8]
    1b5a:	str	r3, [sp, #104]	; 0x68
	return ret;
    1b5c:	ldr	r3, [sp, #104]	; 0x68
    1b5e:	ldr	r2, [r7, #12]
      blinking = true;
    1b60:	strb.w	sl, [r5, #16]
      blinkingCounter = times;
    1b64:	movs	r1, #3
    1b66:	str	r1, [r5, #20]
      lastBlink = millis();  
    1b68:	str	r3, [r5, #8]
    1b6a:	b.w	56c <loop+0xd8>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1b6e:	movs	r2, #2
    1b70:	movs	r1, #8
    1b72:	ldr	r0, [pc, #284]	; (1c90 <loop+0x17fc>)
    1b74:	strb	r2, [r3, #0]
    1b76:	bl	20ec <usb_serial_write>
    1b7a:	ldr	r0, [pc, #272]	; (1c8c <loop+0x17f8>)
    1b7c:	bl	3c60 <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    1b80:	ldr	r3, [r7, #28]
    1b82:	ldr	r6, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1b84:	ldrb.w	r9, [r6]
    1b88:	mov	r0, r9
    1b8a:	bl	2708 <digitalRead>
    1b8e:	clz	r1, r0
    1b92:	lsrs	r1, r1, #5
    1b94:	mov	r0, r9
    1b96:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b9a:	ldr.w	r3, [r8]
    1b9e:	str	r3, [sp, #84]	; 0x54
	return ret;
    1ba0:	ldr	r3, [sp, #84]	; 0x54
    1ba2:	ldr	r2, [r7, #12]
      blinking = true;
    1ba4:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    1ba8:	movs	r1, #3
    1baa:	str	r1, [r6, #20]
      lastBlink = millis();  
    1bac:	str	r3, [r6, #8]
    1bae:	b.w	52a <loop+0x96>
      if (currentMode == GLOBAL) {
        currentMode = PITCH;
        Serial.println("PITCH");
        m_sequence.m_leds[0]->blink(3);
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1bb2:	movs	r2, #2
    1bb4:	movs	r1, #8
    1bb6:	ldr	r0, [pc, #216]	; (1c90 <loop+0x17fc>)
    1bb8:	strb	r2, [r3, #0]
    1bba:	bl	20ec <usb_serial_write>
    1bbe:	ldr	r0, [pc, #204]	; (1c8c <loop+0x17f8>)
    1bc0:	bl	3c60 <Print::println()>
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
    1bc4:	ldr	r3, [r7, #28]
    1bc6:	ldr	r6, [r3, #92]	; 0x5c
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1bc8:	ldrb.w	r9, [r6]
    1bcc:	mov	r0, r9
    1bce:	bl	2708 <digitalRead>
    1bd2:	clz	r1, r0
    1bd6:	lsrs	r1, r1, #5
    1bd8:	mov	r0, r9
    1bda:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1bde:	ldr.w	r3, [r8]
    1be2:	str	r3, [sp, #124]	; 0x7c
	return ret;
    1be4:	ldr	r3, [sp, #124]	; 0x7c
    1be6:	ldr	r2, [r7, #12]
      blinking = true;
    1be8:	strb.w	sl, [r6, #16]
      blinkingCounter = times;
    1bec:	movs	r1, #3
    1bee:	str	r1, [r6, #20]
      lastBlink = millis();  
    1bf0:	str	r3, [r6, #8]
    1bf2:	b.w	5ae <loop+0x11a>
    1bf6:	movs	r1, #10
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1bf8:	mov.w	r9, #3
    1bfc:	ldr	r0, [pc, #148]	; (1c94 <loop+0x1800>)
    1bfe:	strb.w	r9, [r3]
    1c02:	bl	20ec <usb_serial_write>
    1c06:	ldr	r0, [pc, #132]	; (1c8c <loop+0x17f8>)
    1c08:	bl	3c60 <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    1c0c:	ldr	r3, [r7, #28]
    1c0e:	ldr	r6, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1c10:	ldrb.w	sl, [r6]
    1c14:	mov	r0, sl
    1c16:	bl	2708 <digitalRead>
    1c1a:	clz	r1, r0
    1c1e:	lsrs	r1, r1, #5
    1c20:	mov	r0, sl
    1c22:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c26:	ldr.w	r3, [r8]
    1c2a:	str	r3, [sp, #88]	; 0x58
	return ret;
    1c2c:	ldr	r3, [sp, #88]	; 0x58
    1c2e:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    1c30:	str.w	r9, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1c34:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1c38:	str	r3, [r6, #8]
    1c3a:	b.w	52a <loop+0x96>
    1c3e:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1c40:	mov.w	r9, #3
    1c44:	ldr	r0, [pc, #76]	; (1c94 <loop+0x1800>)
    1c46:	strb.w	r9, [r3]
    1c4a:	bl	20ec <usb_serial_write>
    1c4e:	ldr	r0, [pc, #60]	; (1c8c <loop+0x17f8>)
    1c50:	bl	3c60 <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    1c54:	ldr	r3, [r7, #28]
    1c56:	ldr	r5, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1c58:	ldrb.w	sl, [r5]
    1c5c:	mov	r0, sl
    1c5e:	bl	2708 <digitalRead>
    1c62:	clz	r1, r0
    1c66:	lsrs	r1, r1, #5
    1c68:	mov	r0, sl
    1c6a:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c6e:	ldr.w	r3, [r8]
    1c72:	str	r3, [sp, #148]	; 0x94
	return ret;
    1c74:	ldr	r3, [sp, #148]	; 0x94
    1c76:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    1c78:	str.w	r9, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1c7c:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1c80:	str	r3, [r5, #8]
    1c82:	b.w	5f0 <loop+0x15c>
    1c86:	nop
    1c88:	.word	0x00005074
    1c8c:	.word	0x1fff0c60
    1c90:	.word	0x0000505c
    1c94:	.word	0x00005068
    1c98:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1c9a:	mov.w	r9, #3
    1c9e:	ldr	r0, [pc, #336]	; (1df0 <loop+0x195c>)
    1ca0:	strb.w	r9, [r3]
    1ca4:	bl	20ec <usb_serial_write>
    1ca8:	ldr	r0, [pc, #328]	; (1df4 <loop+0x1960>)
    1caa:	bl	3c60 <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    1cae:	ldr	r3, [r7, #28]
    1cb0:	ldr	r6, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1cb2:	ldrb.w	sl, [r6]
    1cb6:	mov	r0, sl
    1cb8:	bl	2708 <digitalRead>
    1cbc:	clz	r1, r0
    1cc0:	lsrs	r1, r1, #5
    1cc2:	mov	r0, sl
    1cc4:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1cc8:	ldr.w	r3, [r8]
    1ccc:	str	r3, [sp, #168]	; 0xa8
	return ret;
    1cce:	ldr	r3, [sp, #168]	; 0xa8
    1cd0:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    1cd2:	str.w	r9, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1cd6:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1cda:	str	r3, [r6, #8]
    1cdc:	b.w	632 <loop+0x19e>
    1ce0:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1ce2:	mov.w	r9, #3
    1ce6:	ldr	r0, [pc, #264]	; (1df0 <loop+0x195c>)
    1ce8:	strb.w	r9, [r3]
    1cec:	bl	20ec <usb_serial_write>
    1cf0:	ldr	r0, [pc, #256]	; (1df4 <loop+0x1960>)
    1cf2:	bl	3c60 <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    1cf6:	ldr	r3, [r7, #28]
    1cf8:	ldr	r5, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1cfa:	ldrb.w	sl, [r5]
    1cfe:	mov	r0, sl
    1d00:	bl	2708 <digitalRead>
    1d04:	clz	r1, r0
    1d08:	lsrs	r1, r1, #5
    1d0a:	mov	r0, sl
    1d0c:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1d10:	ldr.w	r3, [r8]
    1d14:	str	r3, [sp, #68]	; 0x44
	return ret;
    1d16:	ldr	r3, [sp, #68]	; 0x44
    1d18:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    1d1a:	str.w	r9, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1d1e:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1d22:	str	r3, [r5, #8]
    1d24:	b.w	4e8 <loop+0x54>
    1d28:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1d2a:	mov.w	r9, #3
    1d2e:	ldr	r0, [pc, #192]	; (1df0 <loop+0x195c>)
    1d30:	strb.w	r9, [r3]
    1d34:	bl	20ec <usb_serial_write>
    1d38:	ldr	r0, [pc, #184]	; (1df4 <loop+0x1960>)
    1d3a:	bl	3c60 <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    1d3e:	ldr	r3, [r7, #28]
    1d40:	ldr	r6, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1d42:	ldrb.w	sl, [r6]
    1d46:	mov	r0, sl
    1d48:	bl	2708 <digitalRead>
    1d4c:	clz	r1, r0
    1d50:	lsrs	r1, r1, #5
    1d52:	mov	r0, sl
    1d54:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1d58:	ldr.w	r3, [r8]
    1d5c:	str	r3, [sp, #128]	; 0x80
	return ret;
    1d5e:	ldr	r3, [sp, #128]	; 0x80
    1d60:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    1d62:	str.w	r9, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1d66:	strb.w	fp, [r6, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1d6a:	str	r3, [r6, #8]
    1d6c:	b.w	5ae <loop+0x11a>
    1d70:	movs	r1, #10
      } else if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_sequence.m_leds[1]->blink(3);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    1d72:	mov.w	r9, #3
    1d76:	ldr	r0, [pc, #120]	; (1df0 <loop+0x195c>)
    1d78:	strb.w	r9, [r3]
    1d7c:	bl	20ec <usb_serial_write>
    1d80:	ldr	r0, [pc, #112]	; (1df4 <loop+0x1960>)
    1d82:	bl	3c60 <Print::println()>
        Serial.println("NOTELENGTH");
        m_sequence.m_leds[2]->blink(3);
    1d86:	ldr	r3, [r7, #28]
    1d88:	ldr	r5, [r3, #96]	; 0x60
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1d8a:	ldrb.w	sl, [r5]
    1d8e:	mov	r0, sl
    1d90:	bl	2708 <digitalRead>
    1d94:	clz	r1, r0
    1d98:	lsrs	r1, r1, #5
    1d9a:	mov	r0, sl
    1d9c:	bl	26fc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1da0:	ldr.w	r3, [r8]
    1da4:	str	r3, [sp, #108]	; 0x6c
	return ret;
    1da6:	ldr	r3, [sp, #108]	; 0x6c
    1da8:	ldr	r2, [r7, #12]
      blinking = true;
      blinkingCounter = times;
    1daa:	str.w	r9, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1dae:	strb.w	fp, [r5, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1db2:	str	r3, [r5, #8]
    1db4:	b.w	56c <loop+0xd8>
      // implement polyphony
      controlChange(0, 123, 127);
    };

    void playStep (int step) {
      noteOn(0, notes[step], notesVelocities[step]);
    1db8:	add.w	r7, r3, #10
    1dbc:	adds	r3, #14
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1dbe:	ldr.w	r2, [r6, r7, lsl #2]
    1dc2:	ldr.w	r3, [r6, r3, lsl #2]
    1dc6:	lsls	r0, r2, #16
    1dc8:	lsls	r3, r3, #24
    1dca:	and.w	r3, r3, #2130706432	; 0x7f000000
    1dce:	and.w	r0, r0, #8323072	; 0x7f0000
    1dd2:	orrs	r0, r3
    1dd4:	orr.w	r0, r0, #40704	; 0x9f00
    1dd8:	orr.w	r0, r0, #9
    1ddc:	bl	2988 <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1de0:	bl	2a24 <usb_midi_flush_output>
      activeNote = notes[step];
    1de4:	ldr.w	r2, [r6, r7, lsl #2]
    1de8:	ldr	r3, [r6, #8]
    1dea:	str	r2, [r6, #36]	; 0x24
    1dec:	b.n	1846 <loop+0x13b2>
    1dee:	nop
    1df0:	.word	0x00005068
    1df4:	.word	0x1fff0c60

00001df8 <_GLOBAL__sub_I_currentMode>:
    1df8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
const int step3pin = 6;
const int step4pin = 8;
const int shiftPin = 10;
const int playPin = 12;

Led led1(3, LOW);
    1dfc:	movs	r2, #0
    1dfe:	movs	r1, #3
    1e00:	ldr	r0, [pc, #456]	; (1fcc <_GLOBAL__sub_I_currentMode+0x1d4>)
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[6], boolean state) {
    1e02:	ldr	r4, [pc, #460]	; (1fd0 <_GLOBAL__sub_I_currentMode+0x1d8>)
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1e04:	ldr	r5, [pc, #460]	; (1fd4 <_GLOBAL__sub_I_currentMode+0x1dc>)
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    1e06:	ldr	r6, [pc, #464]	; (1fd8 <_GLOBAL__sub_I_currentMode+0x1e0>)
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[6], boolean state) {
    1e08:	ldr.w	r9, [pc, #528]	; 201c <_GLOBAL__sub_I_currentMode+0x224>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1e0c:	ldr	r7, [pc, #460]	; (1fdc <_GLOBAL__sub_I_currentMode+0x1e4>)
    1e0e:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    1e12:	movs	r2, #0
    1e14:	movs	r1, #5
    1e16:	ldr	r0, [pc, #456]	; (1fe0 <_GLOBAL__sub_I_currentMode+0x1e8>)
    1e18:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    1e1c:	movs	r2, #0
    1e1e:	movs	r1, #7
    1e20:	ldr	r0, [pc, #448]	; (1fe4 <_GLOBAL__sub_I_currentMode+0x1ec>)
    1e22:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    1e26:	movs	r2, #0
    1e28:	movs	r1, #9
    1e2a:	ldr	r0, [pc, #444]	; (1fe8 <_GLOBAL__sub_I_currentMode+0x1f0>)
    1e2c:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    1e30:	movs	r2, #0
    1e32:	movs	r1, #11
    1e34:	ldr	r0, [pc, #436]	; (1fec <_GLOBAL__sub_I_currentMode+0x1f4>)
    1e36:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    1e3a:	movs	r2, #0
    1e3c:	movs	r1, #24
    1e3e:	ldr	r0, [pc, #432]	; (1ff0 <_GLOBAL__sub_I_currentMode+0x1f8>)
    1e40:	bl	46c <Led::Led(int, int)>
    1e44:	ldmia.w	r4, {r0, r1, r2, r3}
    1e48:	add.w	lr, r4, #16
    1e4c:	add.w	ip, r5, #40	; 0x28
    1e50:	stmia.w	ip, {r0, r1, r2, r3}
    1e54:	ldmia.w	lr, {r0, r1, r2, r3}
    1e58:	adds	r4, #32
    1e5a:	add.w	lr, r5, #56	; 0x38
    1e5e:	stmia.w	lr, {r0, r1, r2, r3}
    1e62:	ldmia.w	r4, {r0, r1, r2, r3}
    1e66:	movs	r4, #120	; 0x78
    1e68:	add.w	lr, r5, #72	; 0x48
    1e6c:	mov.w	ip, #24
    1e70:	mov.w	r8, #0
    1e74:	str	r4, [r5, #12]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1e76:	movs	r4, #0
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[6], boolean state) {
    1e78:	str.w	ip, [r5, #32]
    1e7c:	strd	r8, r9, [r5, #16]
class Step {
  public:
    boolean m_state;

    Step (boolean state = false) {
      m_state = state;
    1e80:	strb	r4, [r5, #0]
    1e82:	strb	r4, [r5, #1]
    1e84:	strb	r4, [r5, #2]
    1e86:	strb	r4, [r5, #3]
    int notesVelocities[4] = {100, 100, 100, 100};
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[6], boolean state) {
    1e88:	str	r4, [r5, #24]
    1e8a:	str	r4, [r5, #28]
    1e8c:	str	r4, [r5, #36]	; 0x24
    1e8e:	stmia.w	lr, {r0, r1, r2, r3}
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
    1e92:	adds	r0, r6, #4
    1e94:	ldmia	r0, {r0, r1, r2}
      m_id = id;
      m_pin = pin;
    1e96:	mov.w	r8, #2
    1e9a:	str	r2, [r5, #100]	; 0x64
      m_leds[4] = leds[4];
    1e9c:	ldr	r2, [r6, #16]
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    1e9e:	ldr	r3, [r6, #0]
      m_leds[1] = leds[1];
    1ea0:	str	r0, [r5, #92]	; 0x5c
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1ea2:	mov.w	r9, #1
      m_leds[2] = leds[2];
    1ea6:	str	r1, [r5, #96]	; 0x60
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1ea8:	mov	r0, r8
    1eaa:	mov	r1, r4
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
    1eac:	str	r2, [r5, #104]	; 0x68
      m_leds[5] = leds[5];
    1eae:	ldr	r2, [r6, #20]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1eb0:	str	r3, [r7, #24]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1eb2:	strb	r4, [r7, #16]
      m_playButton = playButton;
    1eb4:	strb	r4, [r7, #17]
      m_mode = GLOBAL;
    1eb6:	strb.w	r4, [r7, #36]	; 0x24
      m_state = state;
    1eba:	strb	r4, [r5, #4]
      m_currentStep = 0;
    1ebc:	str	r4, [r5, #8]
      m_leds[0] = leds[0];
      m_leds[1] = leds[1];
      m_leds[2] = leds[2];
      m_leds[3] = leds[3];
      m_leds[4] = leds[4];
      m_leds[5] = leds[5];
    1ebe:	str	r2, [r5, #108]	; 0x6c
    int notesLengths[4] = {1, 1, 1, 1};
  
  public:
    Led* m_leds[6];
    Sequence (Led* leds[6], boolean state) {
      m_leds[0] = leds[0];
    1ec0:	str	r3, [r5, #88]	; 0x58
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1ec2:	str	r5, [r7, #28]
      m_id = id;
    1ec4:	str.w	r9, [r7]
      m_pin = pin;
    1ec8:	str.w	r8, [r7, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1ecc:	bl	2724 <pinMode>
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1ed0:	movs	r7, #4
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1ed2:	ldr	r3, [pc, #288]	; (1ff4 <_GLOBAL__sub_I_currentMode+0x1fc>)
    1ed4:	ldr	r2, [r6, #4]
    1ed6:	str	r2, [r3, #24]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1ed8:	mov	r1, r4
    1eda:	mov	r0, r7
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1edc:	strb	r4, [r3, #16]
      m_playButton = playButton;
    1ede:	strb	r4, [r3, #17]
      m_mode = GLOBAL;
    1ee0:	strb.w	r4, [r3, #36]	; 0x24
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1ee4:	mov.w	fp, #6
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1ee8:	str	r5, [r3, #28]
      m_id = id;
    1eea:	str.w	r8, [r3]
      m_pin = pin;
    1eee:	str	r7, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1ef0:	bl	2724 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1ef4:	ldr	r3, [pc, #256]	; (1ff8 <_GLOBAL__sub_I_currentMode+0x200>)
    1ef6:	ldr	r2, [r6, #8]
    1ef8:	str	r2, [r3, #24]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1efa:	mov	r1, r4
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1efc:	mov.w	sl, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1f00:	mov	r0, fp
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1f02:	strb	r4, [r3, #16]
      m_playButton = playButton;
    1f04:	strb	r4, [r3, #17]
      m_mode = GLOBAL;
    1f06:	strb.w	r4, [r3, #36]	; 0x24
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1f0a:	str	r5, [r3, #28]
      m_id = id;
    1f0c:	str.w	sl, [r3]
      m_pin = pin;
    1f10:	str.w	fp, [r3, #32]
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1f14:	bl	2724 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1f18:	ldr	r3, [pc, #224]	; (1ffc <_GLOBAL__sub_I_currentMode+0x204>)
    1f1a:	ldr	r2, [r6, #12]
    1f1c:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1f1e:	movs	r2, #8
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1f20:	mov	r0, r2
    1f22:	mov	r1, r4
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1f24:	strb	r4, [r3, #16]
      m_playButton = playButton;
    1f26:	strb	r4, [r3, #17]
      m_mode = GLOBAL;
    1f28:	strb.w	r4, [r3, #36]	; 0x24
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1f2c:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1f2e:	str	r5, [r3, #28]
      m_id = id;
    1f30:	str	r7, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1f32:	bl	2724 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1f36:	ldr	r3, [pc, #200]	; (2000 <_GLOBAL__sub_I_currentMode+0x208>)
    1f38:	ldr	r2, [r6, #16]
    1f3a:	str	r2, [r3, #24]
      m_id = id;
    1f3c:	movs	r1, #5
      m_pin = pin;
    1f3e:	movs	r2, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1f40:	str	r1, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1f42:	mov	r0, r2
    1f44:	mov	r1, r4
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
    1f46:	strb	r4, [r3, #17]
      m_mode = GLOBAL;
    1f48:	strb.w	r4, [r3, #36]	; 0x24
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1f4c:	str	r2, [r3, #32]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1f4e:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    1f50:	strb.w	r9, [r3, #16]
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1f54:	bl	2724 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1f58:	ldr	r3, [pc, #168]	; (2004 <_GLOBAL__sub_I_currentMode+0x20c>)
    1f5a:	ldr	r2, [r6, #20]
    1f5c:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    1f5e:	movs	r6, #12
      m_shiftButton = shiftButton;
      m_playButton = playButton;
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1f60:	mov	r0, r6
    1f62:	mov	r1, r4
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    1f64:	str	r6, [r3, #32]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1f66:	ldr	r6, [pc, #160]	; (2008 <_GLOBAL__sub_I_currentMode+0x210>)
      m_shiftButton = shiftButton;
    1f68:	strb	r4, [r3, #16]
      m_playButton = playButton;
      m_mode = GLOBAL;
    1f6a:	strb.w	r4, [r3, #36]	; 0x24
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    1f6e:	str.w	fp, [r3]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean playButton = false
    ): m_led(led), m_sequence(sequence) {
    1f72:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_playButton = playButton;
    1f74:	strb.w	r9, [r3, #17]
      m_mode = GLOBAL;

      pinMode(pin, INPUT);
    1f78:	bl	2724 <pinMode>
    1f7c:	ldr	r0, [pc, #140]	; (200c <_GLOBAL__sub_I_currentMode+0x214>)
    1f7e:	ldr	r1, [pc, #144]	; (2010 <_GLOBAL__sub_I_currentMode+0x218>)
    1f80:	ldr	r2, [pc, #144]	; (2014 <_GLOBAL__sub_I_currentMode+0x21c>)
    1f82:	ldr	r3, [pc, #148]	; (2018 <_GLOBAL__sub_I_currentMode+0x220>)
      m_pin = pin;
      m_knobType = knobType;
    1f84:	strb	r4, [r6, #20]
      m_id = id;
    1f86:	str	r4, [r6, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1f88:	mov.w	lr, #15
    1f8c:	movs	r4, #14
    1f8e:	strb	r4, [r6, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1f90:	str	r5, [r6, #16]
    1f92:	str	r5, [r0, #16]
      m_pin = pin;
    1f94:	movs	r6, #16
      m_knobType = knobType;
    1f96:	strb.w	r9, [r0, #20]
      m_id = id;
    1f9a:	str.w	r9, [r0, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1f9e:	movs	r4, #17
    1fa0:	strb.w	lr, [r0]
    1fa4:	movs	r0, #18
    1fa6:	strb	r6, [r1, #0]
    1fa8:	strb	r4, [r2, #0]
    1faa:	strb	r0, [r3, #0]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1fac:	str	r5, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    1fae:	strb.w	r8, [r1, #20]
      m_id = id;
    1fb2:	str.w	r8, [r1, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1fb6:	str	r5, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    1fb8:	strb.w	sl, [r2, #20]
      m_id = id;
    1fbc:	str.w	sl, [r2, #12]
    int m_id;
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
    1fc0:	str	r5, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
    1fc2:	strb	r7, [r3, #20]
      m_id = id;
    1fc4:	str	r7, [r3, #12]
    Sequence &m_sequence;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Knobs knobType, int id): m_sequence(sequence) {
      m_pin = pin;
    1fc6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fca:	nop
    1fcc:	.word	0x1fff162c
    1fd0:	.word	0x00005000
    1fd4:	.word	0x1fff1738
    1fd8:	.word	0x1fff0c40
    1fdc:	.word	0x1fff16c0
    1fe0:	.word	0x1fff15cc
    1fe4:	.word	0x1fff15e4
    1fe8:	.word	0x1fff15fc
    1fec:	.word	0x1fff1614
    1ff0:	.word	0x1fff1690
    1ff4:	.word	0x1fff16e8
    1ff8:	.word	0x1fff1710
    1ffc:	.word	0x1fff1810
    2000:	.word	0x1fff17a8
    2004:	.word	0x1fff17d0
    2008:	.word	0x1fff16a8
    200c:	.word	0x1fff1644
    2010:	.word	0x1fff1660
    2014:	.word	0x1fff1678
    2018:	.word	0x1fff17f8
    201c:	.word	0x407f4000

00002020 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    2020:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    2022:	ldr	r5, [pc, #60]	; (2060 <usb_serial_getchar+0x40>)
    2024:	ldr	r0, [r5, #0]
    2026:	cbz	r0, 2048 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    2028:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    202a:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    202c:	adds	r1, r0, r3
    202e:	adds	r3, #1
	if (i >= rx_packet->len) {
    2030:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    2032:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    2034:	bcs.n	203c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    2036:	strh	r3, [r0, #2]
	}
	return c;
    2038:	mov	r0, r4
}
    203a:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    203c:	bl	2ecc <usb_free>
		rx_packet = NULL;
    2040:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    2042:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    2044:	str	r3, [r5, #0]
    2046:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2048:	ldr	r3, [pc, #24]	; (2064 <usb_serial_getchar+0x44>)
    204a:	ldrb	r3, [r3, #0]
    204c:	cbz	r3, 205a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    204e:	movs	r0, #2
    2050:	bl	2f18 <usb_rx>
    2054:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    2056:	cmp	r0, #0
    2058:	bne.n	2028 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    205a:	mov.w	r0, #4294967295
    205e:	pop	{r3, r4, r5, pc}
    2060:	.word	0x1fff1844
    2064:	.word	0x1fff19a4

00002068 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    2068:	push	{r4, lr}
	if (!rx_packet) {
    206a:	ldr	r4, [pc, #36]	; (2090 <usb_serial_peekchar+0x28>)
    206c:	ldr	r0, [r4, #0]
    206e:	cbz	r0, 2078 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    2070:	ldrh	r3, [r0, #2]
    2072:	add	r0, r3
    2074:	ldrb	r0, [r0, #8]
}
    2076:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2078:	ldr	r3, [pc, #24]	; (2094 <usb_serial_peekchar+0x2c>)
    207a:	ldrb	r3, [r3, #0]
    207c:	cbz	r3, 208a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    207e:	movs	r0, #2
    2080:	bl	2f18 <usb_rx>
    2084:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    2086:	cmp	r0, #0
    2088:	bne.n	2070 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    208a:	mov.w	r0, #4294967295
    208e:	pop	{r4, pc}
    2090:	.word	0x1fff1844
    2094:	.word	0x1fff19a4

00002098 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    2098:	ldr	r3, [pc, #16]	; (20ac <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    209a:	ldr	r2, [pc, #20]	; (20b0 <usb_serial_available+0x18>)
    209c:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    209e:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    20a0:	cbz	r3, 20aa <usb_serial_available+0x12>
    20a2:	ldrh	r2, [r3, #0]
    20a4:	ldrh	r3, [r3, #2]
    20a6:	subs	r3, r2, r3
    20a8:	add	r0, r3
	return count;
}
    20aa:	bx	lr
    20ac:	.word	0x1fff1844
    20b0:	.word	0x1fff1e38

000020b4 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    20b4:	ldr	r3, [pc, #44]	; (20e4 <usb_serial_flush_input+0x30>)
    20b6:	ldrb	r3, [r3, #0]
    20b8:	cbz	r3, 20e2 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    20ba:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    20bc:	ldr	r4, [pc, #40]	; (20e8 <usb_serial_flush_input+0x34>)
    20be:	ldr	r0, [r4, #0]
    20c0:	cbz	r0, 20d6 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    20c2:	bl	2ecc <usb_free>
		rx_packet = NULL;
    20c6:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    20c8:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    20ca:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    20cc:	bl	2f18 <usb_rx>
		if (!rx) break;
    20d0:	cbz	r0, 20e0 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    20d2:	bl	2ecc <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    20d6:	movs	r0, #2
    20d8:	bl	2f18 <usb_rx>
		if (!rx) break;
    20dc:	cmp	r0, #0
    20de:	bne.n	20d2 <usb_serial_flush_input+0x1e>
    20e0:	pop	{r4, pc}
    20e2:	bx	lr
    20e4:	.word	0x1fff19a4
    20e8:	.word	0x1fff1844

000020ec <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    20ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    20f0:	ldr.w	r9, [pc, #248]	; 21ec <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    20f4:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    20f6:	movs	r2, #1
    20f8:	strb.w	r2, [r9]
	while (size > 0) {
    20fc:	str	r1, [sp, #4]
    20fe:	cbz	r1, 215c <usb_serial_write+0x70>
    2100:	ldr.w	r8, [pc, #236]	; 21f0 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    2104:	ldr	r7, [pc, #212]	; (21dc <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    2106:	ldr	r6, [sp, #4]
    2108:	mov	fp, r0
		if (!tx_packet) {
    210a:	ldr.w	r0, [r8]
    210e:	cbz	r0, 217e <usb_serial_write+0x92>
    2110:	ldr	r5, [pc, #204]	; (21e0 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    2112:	ldrh	r4, [r0, #2]
    2114:	rsb	r1, r4, #64	; 0x40
    2118:	cmp	r1, r6
    211a:	it	cs
    211c:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    211e:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    2122:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    2124:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    2128:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    212a:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    212c:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    2130:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    2134:	cbz	r1, 214c <usb_serial_write+0x60>
    2136:	subs	r4, #1
    2138:	add	r2, r4
    213a:	add	r1, fp
    213c:	ldrb.w	r4, [fp], #1
    2140:	strb.w	r4, [r2, #1]!
    2144:	cmp	fp, r1
    2146:	bne.n	213c <usb_serial_write+0x50>
    2148:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    214c:	cmp.w	lr, #63	; 0x3f
    2150:	bhi.n	216a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    2152:	ldr	r2, [pc, #144]	; (21e4 <usb_serial_write+0xf8>)
    2154:	movs	r1, #5
    2156:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    2158:	cmp	r6, #0
    215a:	bne.n	210a <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    215c:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    215e:	movs	r3, #0
    2160:	strb.w	r3, [r9]
	return ret;
}
    2164:	add	sp, #12
    2166:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    216a:	movs	r2, #64	; 0x40
    216c:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    216e:	mov	r1, r0
    2170:	movs	r0, #3
    2172:	bl	3068 <usb_tx>
			tx_packet = NULL;
    2176:	movs	r2, #0
    2178:	str.w	r2, [r8]
    217c:	b.n	2152 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    217e:	ldrb	r2, [r7, #0]
    2180:	cbz	r2, 21cc <usb_serial_write+0xe0>
    2182:	ldr	r4, [pc, #100]	; (21e8 <usb_serial_write+0xfc>)
    2184:	ldr	r5, [pc, #88]	; (21e0 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    2186:	mov.w	sl, #1
    218a:	b.n	219c <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    218c:	subs	r4, #1
    218e:	beq.n	21be <usb_serial_write+0xd2>
    2190:	ldrb	r2, [r5, #0]
    2192:	cbnz	r2, 21be <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    2194:	bl	3b6c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    2198:	ldrb	r2, [r7, #0]
    219a:	cbz	r2, 21cc <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    219c:	movs	r0, #3
    219e:	bl	2f54 <usb_tx_packet_count>
    21a2:	cmp	r0, #7
    21a4:	bhi.n	218c <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    21a6:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    21aa:	bl	2e8c <usb_malloc>
    21ae:	str.w	r0, [r8]
					if (tx_packet) break;
    21b2:	cmp	r0, #0
    21b4:	bne.n	2112 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    21b6:	ldr	r3, [pc, #52]	; (21ec <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    21b8:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    21ba:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    21bc:	bne.n	2190 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    21be:	movs	r3, #1
					return -1;
    21c0:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    21c4:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    21c6:	add	sp, #12
    21c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    21cc:	movs	r3, #0
					return -1;
    21ce:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    21d2:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    21d6:	add	sp, #12
    21d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21dc:	.word	0x1fff19a4
    21e0:	.word	0x1fff1840
    21e4:	.word	0x1fff1838
    21e8:	.word	0x00014821
    21ec:	.word	0x1fff1839
    21f0:	.word	0x1fff183c

000021f4 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    21f4:	push	{lr}
    21f6:	sub	sp, #12
    21f8:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    21fa:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    21fc:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    2200:	mov	r0, r3
    2202:	bl	20ec <usb_serial_write>
}
    2206:	add	sp, #12
    2208:	ldr.w	pc, [sp], #4

0000220c <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    220c:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    220e:	ldr	r5, [pc, #56]	; (2248 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    2210:	ldr	r4, [pc, #56]	; (224c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    2212:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    2214:	movs	r3, #1
    2216:	strb	r3, [r4, #0]
	if (!tx_packet) {
    2218:	cbz	r0, 2226 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    221a:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    221c:	movs	r3, #0
    221e:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    2220:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    2224:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    2226:	ldr	r3, [pc, #40]	; (2250 <usb_serial_write_buffer_free+0x44>)
    2228:	ldrb	r3, [r3, #0]
    222a:	cbnz	r3, 2232 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    222c:	movs	r0, #0
    222e:	strb	r0, [r4, #0]
			return 0;
    2230:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    2232:	movs	r0, #3
    2234:	bl	2f54 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    2238:	cmp	r0, #7
    223a:	bhi.n	222c <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    223c:	bl	2e8c <usb_malloc>
    2240:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    2242:	cmp	r0, #0
    2244:	bne.n	221a <usb_serial_write_buffer_free+0xe>
    2246:	b.n	222c <usb_serial_write_buffer_free+0x20>
    2248:	.word	0x1fff183c
    224c:	.word	0x1fff1839
    2250:	.word	0x1fff19a4

00002254 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    2254:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    2256:	ldr	r3, [pc, #68]	; (229c <usb_serial_flush_output+0x48>)
    2258:	ldrb	r3, [r3, #0]
    225a:	cbz	r3, 2280 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    225c:	ldr	r6, [pc, #64]	; (22a0 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    225e:	ldr	r5, [pc, #68]	; (22a4 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    2260:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    2262:	movs	r7, #1
    2264:	strb	r7, [r5, #0]
	if (tx_packet) {
    2266:	cbz	r4, 2282 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    2268:	ldr	r2, [pc, #60]	; (22a8 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    226a:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    226c:	movs	r7, #0
    226e:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2270:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    2272:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2274:	movs	r0, #3
    2276:	bl	3068 <usb_tx>
		tx_packet = NULL;
    227a:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    227c:	movs	r3, #0
    227e:	strb	r3, [r5, #0]
    2280:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    2282:	bl	2e8c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    2286:	ldr	r3, [pc, #32]	; (22a8 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    2288:	cbz	r0, 2296 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    228a:	mov	r1, r0
    228c:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    228e:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    2290:	bl	3068 <usb_tx>
    2294:	b.n	227c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    2296:	strb	r7, [r3, #0]
    2298:	b.n	227c <usb_serial_flush_output+0x28>
    229a:	nop
    229c:	.word	0x1fff19a4
    22a0:	.word	0x1fff183c
    22a4:	.word	0x1fff1839
    22a8:	.word	0x1fff1838

000022ac <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    22ac:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    22ae:	ldr	r3, [pc, #56]	; (22e8 <usb_serial_flush_callback+0x3c>)
    22b0:	ldrb	r3, [r3, #0]
    22b2:	cbnz	r3, 22d2 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    22b4:	ldr	r4, [pc, #52]	; (22ec <usb_serial_flush_callback+0x40>)
    22b6:	ldr	r1, [r4, #0]
    22b8:	cbz	r1, 22d4 <usb_serial_flush_callback+0x28>
    22ba:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    22be:	ldrh	r3, [r1, #2]
    22c0:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    22c2:	movs	r0, #3
    22c4:	bl	3068 <usb_tx>
		tx_packet = NULL;
    22c8:	str	r5, [r4, #0]
    22ca:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    22cc:	ldr	r3, [pc, #32]	; (22f0 <usb_serial_flush_callback+0x44>)
    22ce:	movs	r2, #1
    22d0:	strb	r2, [r3, #0]
    22d2:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    22d4:	bl	2e8c <usb_malloc>
		if (tx) {
    22d8:	cmp	r0, #0
    22da:	beq.n	22cc <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    22dc:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    22de:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    22e2:	movs	r0, #3
    22e4:	b.w	3068 <usb_tx>
    22e8:	.word	0x1fff1839
    22ec:	.word	0x1fff183c
    22f0:	.word	0x1fff1838

000022f4 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    22f4:	ldr	r2, [pc, #220]	; (23d4 <wait_for_cal+0xe0>)
    22f6:	ldr	r1, [pc, #224]	; (23d8 <wait_for_cal+0xe4>)
    22f8:	ldr	r3, [r2, #0]
    22fa:	lsls	r3, r3, #24
    22fc:	bmi.n	22f8 <wait_for_cal+0x4>
    22fe:	ldr	r3, [r1, #0]
    2300:	ands.w	r3, r3, #128	; 0x80
    2304:	bne.n	22f8 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    2306:	cpsid	i
	if (calibrating) {
    2308:	ldr	r1, [pc, #208]	; (23dc <wait_for_cal+0xe8>)
    230a:	ldrb	r2, [r1, #0]
    230c:	cmp	r2, #0
    230e:	beq.n	23d0 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    2310:	ldr	r2, [pc, #204]	; (23e0 <wait_for_cal+0xec>)
    2312:	ldr	r0, [pc, #208]	; (23e4 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    2314:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    2316:	ldr	r4, [pc, #208]	; (23e8 <wait_for_cal+0xf4>)
    2318:	ldr	r7, [r2, #0]
    231a:	ldr	r6, [r0, #0]
    231c:	ldr	r5, [r4, #0]
    231e:	ldr	r4, [r2, #12]
    2320:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2322:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    2324:	adds	r2, #20
    2326:	ldr	r0, [r0, #0]
    2328:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    232a:	ldr	r7, [pc, #192]	; (23ec <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    232c:	add	r5, r6
    232e:	add	r4, r5
    2330:	add	r0, r4
    2332:	add	r2, r0
    2334:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2338:	ldr	r6, [pc, #180]	; (23f0 <wait_for_cal+0xfc>)
    233a:	ldr	r0, [pc, #184]	; (23f4 <wait_for_cal+0x100>)
    233c:	ldr	r5, [pc, #184]	; (23f8 <wait_for_cal+0x104>)
    233e:	ldr	r4, [pc, #188]	; (23fc <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    2340:	orr.w	r2, r2, #32768	; 0x8000
    2344:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2346:	ldr	r7, [r6, #0]
    2348:	ldr	r6, [r0, #0]
    234a:	ldr	r5, [r5, #0]
    234c:	ldr	r2, [pc, #176]	; (2400 <wait_for_cal+0x10c>)
    234e:	ldr	r4, [r4, #0]
    2350:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2352:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2354:	ldr	r0, [r0, #0]
    2356:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    2358:	ldr	r7, [pc, #168]	; (2404 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    235a:	add	r5, r6
    235c:	add	r4, r5
    235e:	add	r0, r4
    2360:	add	r2, r0
    2362:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2366:	ldr	r6, [pc, #160]	; (2408 <wait_for_cal+0x114>)
    2368:	ldr	r0, [pc, #160]	; (240c <wait_for_cal+0x118>)
    236a:	ldr	r5, [pc, #164]	; (2410 <wait_for_cal+0x11c>)
    236c:	ldr	r4, [pc, #164]	; (2414 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    236e:	orr.w	r2, r2, #32768	; 0x8000
    2372:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2374:	ldr	r7, [r6, #0]
    2376:	ldr	r6, [r0, #0]
    2378:	ldr	r5, [r5, #0]
    237a:	ldr	r2, [pc, #156]	; (2418 <wait_for_cal+0x124>)
    237c:	ldr	r4, [r4, #0]
    237e:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2380:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2382:	ldr	r0, [r0, #0]
    2384:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    2386:	ldr	r7, [pc, #148]	; (241c <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    2388:	add	r5, r6
    238a:	add	r4, r5
    238c:	add	r0, r4
    238e:	add	r2, r0
    2390:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2394:	ldr	r6, [pc, #136]	; (2420 <wait_for_cal+0x12c>)
    2396:	ldr	r0, [pc, #140]	; (2424 <wait_for_cal+0x130>)
    2398:	ldr	r5, [pc, #140]	; (2428 <wait_for_cal+0x134>)
    239a:	ldr	r4, [pc, #144]	; (242c <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    239c:	orr.w	r2, r2, #32768	; 0x8000
    23a0:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    23a2:	ldr	r7, [r6, #0]
    23a4:	ldr	r6, [r0, #0]
    23a6:	ldr	r5, [r5, #0]
    23a8:	ldr	r2, [pc, #132]	; (2430 <wait_for_cal+0x13c>)
    23aa:	ldr	r4, [r4, #0]
    23ac:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    23ae:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    23b0:	ldr	r0, [r0, #0]
    23b2:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    23b4:	add	r5, r6
    23b6:	add	r4, r5
    23b8:	add	r0, r4
    23ba:	add	r2, r0
    23bc:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    23c0:	ldr	r0, [pc, #112]	; (2434 <wait_for_cal+0x140>)
    23c2:	orr.w	r2, r2, #32768	; 0x8000
    23c6:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    23c8:	strb	r3, [r1, #0]
	}
	__enable_irq();
    23ca:	cpsie	i
}
    23cc:	pop	{r4, r5, r6, r7}
    23ce:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    23d0:	cpsie	i
    23d2:	bx	lr
    23d4:	.word	0x4003b024
    23d8:	.word	0x400bb024
    23dc:	.word	0x1fff184a
    23e0:	.word	0x4003b038
    23e4:	.word	0x4003b03c
    23e8:	.word	0x4003b040
    23ec:	.word	0x4003b02c
    23f0:	.word	0x4003b058
    23f4:	.word	0x4003b05c
    23f8:	.word	0x4003b060
    23fc:	.word	0x4003b064
    2400:	.word	0x4003b06c
    2404:	.word	0x4003b030
    2408:	.word	0x400bb038
    240c:	.word	0x400bb03c
    2410:	.word	0x400bb040
    2414:	.word	0x400bb044
    2418:	.word	0x400bb04c
    241c:	.word	0x400bb02c
    2420:	.word	0x400bb058
    2424:	.word	0x400bb05c
    2428:	.word	0x400bb060
    242c:	.word	0x400bb064
    2430:	.word	0x400bb06c
    2434:	.word	0x400bb030

00002438 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    2438:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    243a:	ldr	r0, [pc, #164]	; (24e0 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    243c:	ldr	r2, [pc, #164]	; (24e4 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    243e:	ldr	r3, [pc, #168]	; (24e8 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2440:	ldr	r5, [pc, #168]	; (24ec <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2442:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2444:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2446:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2448:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    244a:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    244c:	ldr	r4, [pc, #160]	; (24f0 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    244e:	cmp	r3, #8
    2450:	beq.n	24b4 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2452:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2454:	ldr	r0, [pc, #156]	; (24f4 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2456:	ldr	r1, [pc, #160]	; (24f8 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2458:	beq.n	24ca <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    245a:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    245c:	ite	eq
    245e:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2460:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2462:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2464:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2466:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2468:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    246a:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    246c:	ldr	r3, [pc, #140]	; (24fc <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    246e:	ldr	r1, [pc, #144]	; (2500 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2470:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2472:	ldr	r2, [pc, #144]	; (2504 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2474:	cbz	r3, 24a6 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2476:	movs	r3, #1
    2478:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    247a:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    247c:	ldr	r3, [pc, #136]	; (2508 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    247e:	ldr	r1, [pc, #140]	; (250c <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2480:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2482:	ldr	r2, [pc, #140]	; (2510 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    2484:	cmp	r3, #1
    2486:	bls.n	24d6 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2488:	cmp	r3, #4
    248a:	bls.n	24ac <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    248c:	cmp	r3, #8
    248e:	bls.n	24ce <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2490:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2492:	ite	ls
    2494:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2496:	movhi	r3, #135	; 0x87
    2498:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    249a:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    249c:	ldr	r3, [pc, #116]	; (2514 <analog_init+0xdc>)
    249e:	movs	r2, #1
    24a0:	strb	r2, [r3, #0]
}
    24a2:	pop	{r4, r5}
    24a4:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    24a6:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    24a8:	str	r3, [r2, #0]
    24aa:	b.n	247c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    24ac:	movs	r3, #132	; 0x84
    24ae:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    24b0:	str	r3, [r2, #0]
    24b2:	b.n	249c <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    24b4:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    24b8:	ldr	r1, [pc, #60]	; (24f8 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    24ba:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    24bc:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    24be:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    24c0:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    24c2:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    24c4:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    24c6:	str	r3, [r1, #0]
    24c8:	b.n	246c <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    24ca:	movs	r2, #57	; 0x39
    24cc:	b.n	24be <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    24ce:	movs	r3, #133	; 0x85
    24d0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    24d2:	str	r3, [r2, #0]
    24d4:	b.n	249c <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    24d6:	movs	r3, #128	; 0x80
    24d8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    24da:	str	r3, [r2, #0]
    24dc:	b.n	249c <analog_init+0x64>
    24de:	nop
    24e0:	.word	0x40074000
    24e4:	.word	0x40074001
    24e8:	.word	0x1fff0c58
    24ec:	.word	0x4003b008
    24f0:	.word	0x4003b00c
    24f4:	.word	0x400bb008
    24f8:	.word	0x400bb00c
    24fc:	.word	0x1fff184d
    2500:	.word	0x4003b020
    2504:	.word	0x400bb020
    2508:	.word	0x1fff0c59
    250c:	.word	0x4003b024
    2510:	.word	0x400bb024
    2514:	.word	0x1fff184a

00002518 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2518:	cmp	r0, #71	; 0x47
    251a:	bhi.n	257c <analogRead+0x64>
	channel = pin2sc1a[pin];
    251c:	ldr	r3, [pc, #204]	; (25ec <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    251e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    2522:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    2524:	cmp	r6, #255	; 0xff
    2526:	beq.n	2580 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    2528:	ldr	r3, [pc, #196]	; (25f0 <analogRead+0xd8>)
    252a:	ldrb	r3, [r3, #0]
    252c:	cmp	r3, #0
    252e:	bne.n	2586 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2530:	lsls	r2, r6, #24
    2532:	bmi.n	258e <analogRead+0x76>
#endif

	__disable_irq();
    2534:	cpsid	i
    2536:	ldr	r5, [pc, #188]	; (25f4 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2538:	ldr	r4, [pc, #188]	; (25f8 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    253a:	mov	r7, r5
    253c:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    253e:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    2540:	strb	r3, [r5, #0]
	__enable_irq();
    2542:	cpsie	i
	while (1) {
		__disable_irq();
    2544:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2546:	ldr	r3, [r4, #0]
    2548:	lsls	r3, r3, #24
    254a:	bmi.n	2566 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    254c:	ldrb	r3, [r7, #0]
    254e:	cbnz	r3, 2558 <analogRead+0x40>
    2550:	b.n	253c <analogRead+0x24>
    2552:	ldrb	r3, [r5, #0]
    2554:	cmp	r3, #0
    2556:	beq.n	253c <analogRead+0x24>
		__enable_irq();
    2558:	cpsie	i
		yield();
    255a:	bl	3b6c <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    255e:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2560:	ldr	r3, [r4, #0]
    2562:	lsls	r0, r3, #24
    2564:	bpl.n	2552 <analogRead+0x3a>
			result = ADC0_RA;
    2566:	ldr	r3, [pc, #148]	; (25fc <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    2568:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    256a:	movs	r2, #0
    256c:	strb	r2, [r5, #0]
			__enable_irq();
    256e:	cpsie	i
			result >>= analog_right_shift;
    2570:	ldr	r2, [pc, #140]	; (2600 <analogRead+0xe8>)
    2572:	ldrb	r0, [r2, #0]
    2574:	asr.w	r0, r3, r0
			return result;
    2578:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    257c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    257e:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2580:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2582:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    2586:	bl	22f4 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    258a:	lsls	r2, r6, #24
    258c:	bpl.n	2534 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    258e:	cpsid	i
    2590:	ldr	r5, [pc, #112]	; (2604 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2592:	ldr.w	r8, [pc, #124]	; 2610 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    2596:	ldr	r4, [pc, #112]	; (2608 <analogRead+0xf0>)
    2598:	and.w	r7, r6, #64	; 0x40
    259c:	uxtb	r7, r7
    259e:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    25a2:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    25a6:	cbz	r7, 25e0 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    25a8:	bic.w	r3, r3, #16
    25ac:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    25b0:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    25b2:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    25b4:	ldr	r2, [pc, #76]	; (2604 <analogRead+0xec>)
    25b6:	strb	r3, [r5, #0]
	__enable_irq();
    25b8:	cpsie	i
	while (1) {
		__disable_irq();
    25ba:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    25bc:	ldr	r3, [r4, #0]
    25be:	lsls	r1, r3, #24
    25c0:	bmi.n	25dc <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    25c2:	ldrb	r3, [r2, #0]
    25c4:	cbnz	r3, 25ce <analogRead+0xb6>
    25c6:	b.n	25a2 <analogRead+0x8a>
    25c8:	ldrb	r3, [r5, #0]
    25ca:	cmp	r3, #0
    25cc:	beq.n	25a2 <analogRead+0x8a>
		__enable_irq();
    25ce:	cpsie	i
		yield();
    25d0:	bl	3b6c <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    25d4:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    25d6:	ldr	r3, [r4, #0]
    25d8:	lsls	r3, r3, #24
    25da:	bpl.n	25c8 <analogRead+0xb0>
			result = ADC1_RA;
    25dc:	ldr	r3, [pc, #44]	; (260c <analogRead+0xf4>)
    25de:	b.n	2568 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    25e0:	orr.w	r3, r3, #16
    25e4:	str.w	r3, [r8]
    25e8:	b.n	25b0 <analogRead+0x98>
    25ea:	nop
    25ec:	.word	0x000050ac
    25f0:	.word	0x1fff184a
    25f4:	.word	0x1fff184c
    25f8:	.word	0x4003b000
    25fc:	.word	0x4003b010
    2600:	.word	0x1fff1849
    2604:	.word	0x1fff184b
    2608:	.word	0x400bb000
    260c:	.word	0x400bb010
    2610:	.word	0x400bb00c

00002614 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    2614:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    2616:	ldr	r3, [pc, #68]	; (265c <digitalWrite.part.1+0x48>)
    2618:	ldr.w	r2, [r3, r0, lsl #3]
    261c:	ldrb.w	r4, [r2, #640]	; 0x280
    2620:	cbz	r4, 2630 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    2622:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    2624:	cbz	r1, 2646 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    2626:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    262a:	ldr.w	r4, [sp], #4
    262e:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    2630:	add.w	r3, r3, r0, lsl #3
    2634:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2636:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    2638:	cbnz	r1, 2650 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    263a:	bic.w	r2, r2, #2
    263e:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2640:	ldr.w	r4, [sp], #4
    2644:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    2646:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    264a:	ldr.w	r4, [sp], #4
    264e:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2650:	orr.w	r2, r2, #3
    2654:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2656:	ldr.w	r4, [sp], #4
    265a:	bx	lr
    265c:	.word	0x000050f4

00002660 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2660:	ldr	r2, [pc, #112]	; (26d4 <pinMode.part.2+0x74>)
    2662:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2666:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2668:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    266a:	beq.n	2690 <pinMode.part.2+0x30>
    266c:	cmp	r1, #4
    266e:	beq.n	26a8 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2670:	ldr.w	r0, [r2, r0, lsl #3]
    2674:	movs	r2, #0
    2676:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    267a:	cbz	r1, 2688 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    267c:	cmp	r1, #2
    267e:	beq.n	26c2 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2680:	cmp	r1, #3
    2682:	beq.n	26ca <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2684:	str	r2, [r3, #0]
    2686:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2688:	mov.w	r2, #256	; 0x100
    268c:	str	r2, [r3, #0]
    268e:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2690:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2694:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2698:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    269c:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    269e:	ldr	r2, [r3, #0]
    26a0:	bic.w	r2, r2, #32
    26a4:	str	r2, [r3, #0]
    26a6:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    26a8:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    26ac:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    26b0:	movs	r0, #1
    26b2:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    26b6:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    26b8:	ldr	r2, [r3, #0]
    26ba:	orr.w	r2, r2, #32
    26be:	str	r2, [r3, #0]
    26c0:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    26c2:	movw	r2, #259	; 0x103
    26c6:	str	r2, [r3, #0]
    26c8:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    26ca:	mov.w	r2, #258	; 0x102
    26ce:	str	r2, [r3, #0]
    26d0:	bx	lr
    26d2:	nop
    26d4:	.word	0x000050f4

000026d8 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    26d8:	push	{r4, r5}
	RTC_SR = 0;
    26da:	ldr	r3, [pc, #20]	; (26f0 <rtc_set+0x18>)
	RTC_TPR = 0;
    26dc:	ldr	r5, [pc, #20]	; (26f4 <rtc_set+0x1c>)
	RTC_TSR = t;
    26de:	ldr	r4, [pc, #24]	; (26f8 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    26e0:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    26e2:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    26e4:	str	r2, [r3, #0]
	RTC_TPR = 0;
    26e6:	str	r2, [r5, #0]
	RTC_TSR = t;
    26e8:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    26ea:	str	r1, [r3, #0]
}
    26ec:	pop	{r4, r5}
    26ee:	bx	lr
    26f0:	.word	0x4003d014
    26f4:	.word	0x4003d004
    26f8:	.word	0x4003d000

000026fc <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    26fc:	cmp	r0, #63	; 0x3f
    26fe:	bhi.n	2704 <digitalWrite+0x8>
    2700:	b.w	2614 <digitalWrite.part.1>
    2704:	bx	lr
    2706:	nop

00002708 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2708:	cmp	r0, #63	; 0x3f
    270a:	bhi.n	271a <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    270c:	ldr	r3, [pc, #16]	; (2720 <digitalRead+0x18>)
    270e:	ldr.w	r3, [r3, r0, lsl #3]
    2712:	ldrb.w	r0, [r3, #512]	; 0x200
    2716:	uxtb	r0, r0
    2718:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    271a:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    271c:	bx	lr
    271e:	nop
    2720:	.word	0x000050f4

00002724 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    2724:	cmp	r0, #63	; 0x3f
    2726:	bhi.n	272c <pinMode+0x8>
    2728:	b.w	2660 <pinMode.part.2>
    272c:	bx	lr
    272e:	nop

00002730 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    2730:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2734:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2736:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2738:	ldr	r7, [pc, #136]	; (27c4 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    273a:	ldr	r3, [pc, #140]	; (27c8 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    273c:	ldr	r2, [pc, #140]	; (27cc <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    273e:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2740:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2742:	ldr	r2, [r2, #0]
	__enable_irq();
    2744:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2746:	lsls	r2, r2, #5
    2748:	bpl.n	2750 <delay+0x20>
    274a:	cmp	r3, #50	; 0x32
    274c:	it	hi
    274e:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2750:	cbz	r5, 27c0 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2752:	rsb	r3, r3, #179200	; 0x2bc00
    2756:	addw	r3, r3, #799	; 0x31f
    275a:	ldr	r6, [pc, #116]	; (27d0 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    275c:	ldr.w	r9, [pc, #104]	; 27c8 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2760:	ldr.w	r8, [pc, #104]	; 27cc <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2764:	lsrs	r3, r3, #2
    2766:	mov.w	r2, #1000	; 0x3e8
    276a:	umull	r1, r3, r6, r3
    276e:	mul.w	r4, r2, r4
    2772:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2776:	cpsid	i
	current = SYST_CVR;
    2778:	ldr.w	r1, [r9]
	count = systick_millis_count;
    277c:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    277e:	ldr.w	lr, [r8]
	__enable_irq();
    2782:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2784:	rsb	r3, r1, #179200	; 0x2bc00
    2788:	addw	r3, r3, #799	; 0x31f
    278c:	lsrs	r3, r3, #2
    278e:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2792:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2796:	rsb	r3, r4, r3, lsr #2
    279a:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    279e:	beq.n	27a6 <delay+0x76>
    27a0:	cmp	r1, #50	; 0x32
    27a2:	it	hi
    27a4:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    27a6:	mla	r3, r0, r2, r3
    27aa:	cmp.w	r3, #1000	; 0x3e8
    27ae:	bcc.n	27ba <delay+0x8a>
				ms--;
				if (ms == 0) return;
    27b0:	subs	r5, #1
    27b2:	beq.n	27c0 <delay+0x90>
				start += 1000;
    27b4:	add.w	r4, r4, #1000	; 0x3e8
    27b8:	b.n	2776 <delay+0x46>
			}
			yield();
    27ba:	bl	3b6c <yield>
		}
    27be:	b.n	2776 <delay+0x46>
    27c0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    27c4:	.word	0x1fff1850
    27c8:	.word	0xe000e018
    27cc:	.word	0xe000ed04
    27d0:	.word	0x16c16c17

000027d4 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    27d4:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    27d6:	ldr	r3, [pc, #312]	; (2910 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    27d8:	ldr	r0, [pc, #312]	; (2914 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    27da:	ldr.w	ip, [pc, #348]	; 2938 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    27de:	ldr	r4, [pc, #312]	; (2918 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    27e0:	ldr	r1, [pc, #312]	; (291c <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    27e2:	ldr.w	lr, [pc, #344]	; 293c <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    27e6:	ldr	r6, [pc, #312]	; (2920 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    27e8:	ldr	r5, [pc, #312]	; (2924 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    27ea:	ldr	r7, [pc, #316]	; (2928 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    27ec:	mov.w	r2, #134217728	; 0x8000000
    27f0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    27f2:	mov.w	r2, #268435456	; 0x10000000
    27f6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    27f8:	mov.w	r2, #536870912	; 0x20000000
    27fc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    27fe:	mov.w	r2, #1073741824	; 0x40000000
    2802:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    2804:	mov.w	r2, #2147483648	; 0x80000000
    2808:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    280a:	movs	r2, #0
    280c:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    280e:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2810:	movw	r0, #61439	; 0xefff
    2814:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2818:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    281c:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    281e:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    2822:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    2824:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    2826:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2828:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    282c:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    282e:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    2832:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2834:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    2838:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    283a:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    283e:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2842:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    2846:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    284a:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    284e:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2850:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2854:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2856:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2858:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    285a:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    285e:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2860:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2862:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2864:	ldr	r4, [pc, #196]	; (292c <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    2866:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2868:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    286a:	movs	r1, #9
    286c:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    286e:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2872:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2876:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2878:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    287a:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    287c:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    287e:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2880:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2882:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2886:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    288a:	add.w	r7, r7, #520192	; 0x7f000
    288e:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2890:	addw	r4, r4, #2044	; 0x7fc
    2894:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2896:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2898:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    289a:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    289c:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    28a0:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    28a2:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    28a6:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    28aa:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    28ac:	sub.w	r4, r4, #460800	; 0x70800
    28b0:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    28b4:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    28b6:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    28b8:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    28bc:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    28be:	ldr	r0, [pc, #112]	; (2930 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    28c0:	orr.w	r1, r1, #512	; 0x200
    28c4:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    28c6:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    28c8:	ldr	r4, [pc, #104]	; (2934 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    28ca:	add.w	lr, lr, #65280	; 0xff00
    28ce:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    28d2:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    28d6:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    28da:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    28de:	orr.w	r1, r1, #33554432	; 0x2000000
    28e2:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    28e4:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    28e8:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    28ec:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    28ee:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    28f0:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    28f2:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    28f4:	str	r2, [r4, #0]
#endif
	analog_init();
    28f6:	bl	2438 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    28fa:	movs	r0, #25
    28fc:	bl	2730 <delay>
	usb_init();
    2900:	bl	3a9c <usb_init>
	delay(275);
    2904:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    2908:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    290c:	b.w	2730 <delay>
    2910:	.word	0xe000e104
    2914:	.word	0x40038004
    2918:	.word	0x40038014
    291c:	.word	0x4003801c
    2920:	.word	0x40038024
    2924:	.word	0x4003802c
    2928:	.word	0x40038034
    292c:	.word	0x40038000
    2930:	.word	0x40048004
    2934:	.word	0x400c9000
    2938:	.word	0x40038008
    293c:	.word	0x4003800c

00002940 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2940:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2942:	ldr	r3, [pc, #56]	; (297c <sysex_byte+0x3c>)
    2944:	ldr	r4, [pc, #56]	; (2980 <sysex_byte+0x40>)
    2946:	ldr	r3, [r3, #0]
    2948:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    294a:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    294c:	cbz	r3, 2972 <sysex_byte+0x32>
    294e:	cmp.w	r1, #290	; 0x122
    2952:	bcs.n	2960 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2954:	ldr	r2, [pc, #44]	; (2984 <sysex_byte+0x44>)
    2956:	adds	r3, r1, #1
    2958:	strb	r5, [r2, r1]
    295a:	uxth	r3, r3
    295c:	strh	r3, [r4, #0]
	}
}
    295e:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2960:	movs	r2, #0
    2962:	ldr	r0, [pc, #32]	; (2984 <sysex_byte+0x44>)
    2964:	blx	r3
    2966:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2968:	ldr	r2, [pc, #24]	; (2984 <sysex_byte+0x44>)
    296a:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    296c:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    296e:	strh	r3, [r4, #0]
	}
}
    2970:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    2972:	cmp.w	r1, #290	; 0x122
    2976:	bcc.n	2954 <sysex_byte+0x14>
    2978:	pop	{r3, r4, r5, pc}
    297a:	nop
    297c:	.word	0x1fff1878
    2980:	.word	0x1fff1d0e
    2984:	.word	0x1fff1d14

00002988 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2988:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    298c:	ldr	r6, [pc, #132]	; (2a14 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    298e:	ldr	r7, [pc, #136]	; (2a18 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    2990:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2992:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2994:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2996:	strb	r3, [r7, #0]
	if (!tx_packet) {
    2998:	cbz	r1, 29c8 <usb_midi_write_packed+0x40>
    299a:	ldr	r5, [pc, #128]	; (2a1c <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    299c:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    299e:	add.w	r2, r1, r3, lsl #2
    29a2:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    29a4:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    29a6:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    29a8:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    29ac:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    29ae:	bhi.n	29ba <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    29b0:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    29b2:	movs	r3, #0
    29b4:	strb	r3, [r7, #0]
    29b6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    29ba:	movs	r3, #64	; 0x40
    29bc:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    29be:	movs	r0, #4
    29c0:	bl	3068 <usb_tx>
		tx_packet = NULL;
    29c4:	str	r4, [r6, #0]
    29c6:	b.n	29b2 <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    29c8:	ldr.w	r9, [pc, #84]	; 2a20 <usb_midi_write_packed+0x98>
    29cc:	ldrb.w	r3, [r9]
    29d0:	cmp	r3, #0
    29d2:	beq.n	29b6 <usb_midi_write_packed+0x2e>
    29d4:	ldr	r5, [pc, #68]	; (2a1c <usb_midi_write_packed+0x94>)
    29d6:	movw	r4, #48001	; 0xbb81
    29da:	b.n	29ee <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    29dc:	subs	r4, #1
    29de:	beq.n	2a06 <usb_midi_write_packed+0x7e>
    29e0:	ldrb	r3, [r5, #0]
    29e2:	cbnz	r3, 2a06 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    29e4:	bl	3b6c <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    29e8:	ldrb.w	r3, [r9]
    29ec:	cbz	r3, 2a0e <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    29ee:	movs	r0, #4
    29f0:	bl	2f54 <usb_tx_packet_count>
    29f4:	cmp	r0, #5
    29f6:	bhi.n	29dc <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    29f8:	bl	2e8c <usb_malloc>
    29fc:	mov	r1, r0
    29fe:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    2a00:	cmp	r0, #0
    2a02:	beq.n	29dc <usb_midi_write_packed+0x54>
    2a04:	b.n	299c <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    2a06:	movs	r3, #1
    2a08:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    2a0a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2a0e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2a12:	nop
    2a14:	.word	0x1fff1894
    2a18:	.word	0x1fff1868
    2a1c:	.word	0x1fff1898
    2a20:	.word	0x1fff19a4

00002a24 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    2a24:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    2a26:	ldr	r3, [pc, #32]	; (2a48 <usb_midi_flush_output+0x24>)
    2a28:	ldrb	r4, [r3, #0]
    2a2a:	cbnz	r4, 2a36 <usb_midi_flush_output+0x12>
    2a2c:	ldr	r5, [pc, #28]	; (2a4c <usb_midi_flush_output+0x28>)
    2a2e:	ldr	r1, [r5, #0]
    2a30:	cbz	r1, 2a36 <usb_midi_flush_output+0x12>
    2a32:	ldrh	r3, [r1, #2]
    2a34:	cbnz	r3, 2a38 <usb_midi_flush_output+0x14>
    2a36:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    2a38:	lsls	r3, r3, #2
    2a3a:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2a3c:	movs	r0, #4
    2a3e:	bl	3068 <usb_tx>
		tx_packet = NULL;
    2a42:	str	r4, [r5, #0]
    2a44:	pop	{r3, r4, r5, pc}
    2a46:	nop
    2a48:	.word	0x1fff1868
    2a4c:	.word	0x1fff1894

00002a50 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2a50:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2a54:	ldr	r6, [pc, #692]	; (2d0c <usb_midi_read+0x2bc>)
    2a56:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2a58:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2a5a:	cmp	r3, #0
    2a5c:	beq.w	2b84 <usb_midi_read+0x134>
    2a60:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    2a62:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2a64:	lsrs	r1, r2, #2
    2a66:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    2a6a:	adds	r2, #4
	if (index < rx_packet->len) {
    2a6c:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2a6e:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    2a70:	bcs.n	2af8 <usb_midi_read+0xa8>
		rx_packet->index = index;
    2a72:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    2a74:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2a78:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    2a7c:	ldr	r1, [pc, #656]	; (2d10 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2a7e:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2a82:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    2a86:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2a8a:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2a8c:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    2a90:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2a92:	bls.n	2aca <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2a94:	subs	r3, r6, #2
    2a96:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2a98:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2a9c:	bls.n	2b3c <usb_midi_read+0xec>
    2a9e:	cmp	r6, #5
    2aa0:	beq.n	2b34 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    2aa2:	cmp	r6, #4
    2aa4:	beq.w	2df0 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    2aa8:	subs	r3, r6, #5
    2aaa:	cmp	r3, #2
    2aac:	bls.n	2bae <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    2aae:	cmp	r6, #15
    2ab0:	bne.n	2ad0 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    2ab2:	cmp	r0, #247	; 0xf7
    2ab4:	bhi.n	2b3c <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    2ab6:	cmp	r0, #240	; 0xf0
    2ab8:	beq.n	2ac0 <usb_midi_read+0x70>
    2aba:	ldr	r3, [pc, #600]	; (2d14 <usb_midi_read+0x2c4>)
    2abc:	ldrh	r3, [r3, #0]
    2abe:	cbz	r3, 2ad0 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    2ac0:	bl	2940 <sysex_byte>
		}
	}
	return 0;
    2ac4:	movs	r0, #0
    2ac6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    2aca:	cbz	r7, 2ad6 <usb_midi_read+0x86>
    2acc:	cmp	r5, r7
    2ace:	beq.n	2ad6 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    2ad0:	movs	r0, #0
    2ad2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2ad6:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    2ad8:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2adc:	beq.w	2bee <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    2ae0:	cmp	r6, #9
    2ae2:	beq.n	2b08 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    2ae4:	cmp	r6, #10
    2ae6:	bne.w	2c12 <usb_midi_read+0x1c2>
    2aea:	cmp	r3, #10
    2aec:	bne.n	2ad0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    2aee:	ldr	r3, [pc, #552]	; (2d18 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    2af0:	ldr	r2, [pc, #552]	; (2d1c <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    2af2:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    2af4:	movs	r1, #160	; 0xa0
    2af6:	b.n	2bfc <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    2af8:	mov	r0, r3
    2afa:	bl	2ecc <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2afe:	movs	r0, #5
    2b00:	bl	2f18 <usb_rx>
    2b04:	str	r0, [r6, #0]
    2b06:	b.n	2a74 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    2b08:	cmp	r3, #9
    2b0a:	bne.n	2ad0 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    2b0c:	lsrs	r7, r4, #24
    2b0e:	beq.w	2e08 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    2b12:	ldr	r3, [pc, #524]	; (2d20 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2b14:	ldr	r2, [pc, #516]	; (2d1c <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    2b16:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2b18:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2b1a:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2b1e:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2b20:	uxtb	r5, r5
    2b22:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    2b24:	cmp	r3, #0
    2b26:	beq.w	2c64 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2b2a:	mov	r2, r4
    2b2c:	mov	r1, r6
    2b2e:	mov	r0, r5
    2b30:	blx	r3
    2b32:	b.n	2c64 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2b34:	cmp	r0, #240	; 0xf0
    2b36:	bls.n	2bc0 <usb_midi_read+0x170>
    2b38:	cmp	r0, #247	; 0xf7
    2b3a:	beq.n	2bc0 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    2b3c:	subs	r0, #241	; 0xf1
    2b3e:	cmp	r0, #14
    2b40:	bhi.n	2ad0 <usb_midi_read+0x80>
    2b42:	add	r3, pc, #4	; (adr r3, 2b48 <usb_midi_read+0xf8>)
    2b44:	ldr.w	pc, [r3, r0, lsl #2]
    2b48:	.word	0x00002cff
    2b4c:	.word	0x00002ce3
    2b50:	.word	0x00002cd1
    2b54:	.word	0x00002ad1
    2b58:	.word	0x00002ad1
    2b5c:	.word	0x00002cc3
    2b60:	.word	0x00002ad1
    2b64:	.word	0x00002da3
    2b68:	.word	0x00002ad1
    2b6c:	.word	0x00002d6d
    2b70:	.word	0x00002d87
    2b74:	.word	0x00002cab
    2b78:	.word	0x00002ad1
    2b7c:	.word	0x00002c93
    2b80:	.word	0x00002c77
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    2b84:	ldr	r3, [pc, #412]	; (2d24 <usb_midi_read+0x2d4>)
    2b86:	ldrb	r3, [r3, #0]
    2b88:	cmp	r3, #0
    2b8a:	beq.n	2ad0 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2b8c:	movs	r0, #5
    2b8e:	bl	2f18 <usb_rx>
    2b92:	mov	r3, r0
    2b94:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    2b96:	cmp	r0, #0
    2b98:	beq.n	2ad0 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    2b9a:	ldrh	r5, [r0, #0]
    2b9c:	cmp	r5, #0
    2b9e:	bne.w	2a62 <usb_midi_read+0x12>
			usb_free(rx_packet);
    2ba2:	bl	2ecc <usb_free>
			rx_packet = NULL;
    2ba6:	str	r5, [r6, #0]
			return 0;
    2ba8:	mov	r0, r5
    2baa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    2bae:	bl	2940 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    2bb2:	ubfx	r0, r4, #16, #8
    2bb6:	bl	2940 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    2bba:	cmp	r6, #7
    2bbc:	bne.n	2bc4 <usb_midi_read+0x174>
    2bbe:	lsrs	r0, r4, #24
    2bc0:	bl	2940 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    2bc4:	ldr	r3, [pc, #332]	; (2d14 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2bc6:	ldr	r2, [pc, #352]	; (2d28 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    2bc8:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    2bca:	ldr	r0, [pc, #352]	; (2d2c <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2bcc:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2bce:	ldr	r5, [pc, #352]	; (2d30 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2bd0:	ldr	r2, [pc, #328]	; (2d1c <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    2bd2:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2bd4:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2bd6:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2bd8:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2bda:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2bdc:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2bde:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    2be0:	cbz	r4, 2c26 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    2be2:	movs	r2, #1
    2be4:	ldr	r0, [pc, #332]	; (2d34 <usb_midi_read+0x2e4>)
    2be6:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2be8:	movs	r0, #1
    2bea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2bee:	cmp	r3, #8
    2bf0:	bne.w	2ad0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    2bf4:	ldr	r3, [pc, #320]	; (2d38 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    2bf6:	ldr	r2, [pc, #292]	; (2d1c <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    2bf8:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    2bfa:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    2bfc:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2c00:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    2c02:	uxtb	r5, r5
    2c04:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    2c06:	cbz	r3, 2c64 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    2c08:	mov	r0, r5
    2c0a:	mov	r2, r4
    2c0c:	mov	r1, r6
    2c0e:	blx	r3
    2c10:	b.n	2c64 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    2c12:	cmp	r6, #11
    2c14:	bne.n	2c3a <usb_midi_read+0x1ea>
    2c16:	cmp	r3, #11
    2c18:	bne.w	2ad0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    2c1c:	ldr	r3, [pc, #284]	; (2d3c <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2c1e:	ldr	r2, [pc, #252]	; (2d1c <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    2c20:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    2c22:	movs	r1, #176	; 0xb0
    2c24:	b.n	2bfc <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    2c26:	ldr	r3, [pc, #280]	; (2d40 <usb_midi_read+0x2f0>)
    2c28:	ldr	r3, [r3, #0]
    2c2a:	cmp	r3, #0
    2c2c:	beq.w	2e26 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    2c30:	ldr	r0, [pc, #256]	; (2d34 <usb_midi_read+0x2e4>)
    2c32:	blx	r3
		}
		return 1;
    2c34:	movs	r0, #1
    2c36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    2c3a:	cmp	r6, #12
    2c3c:	bne.w	2e40 <usb_midi_read+0x3f0>
    2c40:	cmp	r3, #12
    2c42:	bne.w	2ad0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2c46:	ldr	r3, [pc, #252]	; (2d44 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2c48:	ldr	r2, [pc, #208]	; (2d1c <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    2c4a:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    2c4c:	movs	r1, #192	; 0xc0
    2c4e:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    2c50:	uxtb	r5, r5
    2c52:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    2c56:	cmp	r3, #0
    2c58:	beq.w	2dec <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2c5c:	mov	r0, r5
    2c5e:	mov	r1, r6
    2c60:	lsrs	r4, r4, #24
    2c62:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2c64:	ldr	r1, [pc, #224]	; (2d48 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    2c66:	ldr	r2, [pc, #196]	; (2d2c <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    2c68:	ldr	r3, [pc, #196]	; (2d30 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    2c6a:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    2c6c:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    2c6e:	strb	r4, [r3, #0]
		return 1;
    2c70:	movs	r0, #1
    2c72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    2c76:	ldr	r3, [pc, #212]	; (2d4c <usb_midi_read+0x2fc>)
    2c78:	ldr	r3, [r3, #0]
    2c7a:	cmp	r3, #0
    2c7c:	beq.w	2e2c <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    2c80:	blx	r3
    2c82:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    2c86:	ldr	r3, [pc, #148]	; (2d1c <usb_midi_read+0x2cc>)
    2c88:	uxtb	r5, r5
    2c8a:	lsrs	r4, r4, #24
    2c8c:	strb.w	r8, [r3]
		goto return_message;
    2c90:	b.n	2c64 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    2c92:	ldr	r3, [pc, #188]	; (2d50 <usb_midi_read+0x300>)
    2c94:	ldr	r3, [r3, #0]
    2c96:	cmp	r3, #0
    2c98:	bne.n	2c80 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    2c9a:	ldr	r3, [pc, #184]	; (2d54 <usb_midi_read+0x304>)
    2c9c:	ldr	r3, [r3, #0]
    2c9e:	cbz	r3, 2cca <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    2ca0:	movs	r0, #254	; 0xfe
    2ca2:	blx	r3
    2ca4:	ubfx	r6, r4, #16, #8
    2ca8:	b.n	2c86 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    2caa:	ldr	r3, [pc, #172]	; (2d58 <usb_midi_read+0x308>)
    2cac:	ldr	r3, [r3, #0]
    2cae:	cmp	r3, #0
    2cb0:	bne.n	2c80 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    2cb2:	ldr	r3, [pc, #160]	; (2d54 <usb_midi_read+0x304>)
    2cb4:	ldr	r3, [r3, #0]
    2cb6:	cbz	r3, 2cca <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    2cb8:	movs	r0, #252	; 0xfc
    2cba:	blx	r3
    2cbc:	ubfx	r6, r4, #16, #8
    2cc0:	b.n	2c86 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    2cc2:	ldr	r3, [pc, #152]	; (2d5c <usb_midi_read+0x30c>)
    2cc4:	ldr	r3, [r3, #0]
    2cc6:	cmp	r3, #0
    2cc8:	bne.n	2c80 <usb_midi_read+0x230>
    2cca:	ubfx	r6, r4, #16, #8
    2cce:	b.n	2c86 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2cd0:	ldr	r3, [pc, #140]	; (2d60 <usb_midi_read+0x310>)
    2cd2:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    2cd4:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    2cd8:	cmp	r3, #0
    2cda:	beq.n	2c86 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    2cdc:	mov	r0, r6
    2cde:	blx	r3
    2ce0:	b.n	2c86 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    2ce2:	ldr	r3, [pc, #128]	; (2d64 <usb_midi_read+0x314>)
    2ce4:	ldr	r2, [r3, #0]
    2ce6:	cmp	r2, #0
    2ce8:	beq.n	2cca <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    2cea:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    2cec:	lsrs	r3, r4, #17
    2cee:	and.w	r0, r6, #127	; 0x7f
    2cf2:	and.w	r3, r3, #16256	; 0x3f80
    2cf6:	orrs	r0, r3
    2cf8:	uxtb	r6, r6
    2cfa:	blx	r2
    2cfc:	b.n	2c86 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    2cfe:	ldr	r3, [pc, #104]	; (2d68 <usb_midi_read+0x318>)
    2d00:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    2d02:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    2d06:	cmp	r3, #0
    2d08:	bne.n	2cdc <usb_midi_read+0x28c>
    2d0a:	b.n	2c86 <usb_midi_read+0x236>
    2d0c:	.word	0x1fff18a0
    2d10:	.word	0x1fff1d12
    2d14:	.word	0x1fff1d0e
    2d18:	.word	0x1fff187c
    2d1c:	.word	0x1fff1d0c
    2d20:	.word	0x1fff18b0
    2d24:	.word	0x1fff19a4
    2d28:	.word	0x1fff1878
    2d2c:	.word	0x1fff1d10
    2d30:	.word	0x1fff1d11
    2d34:	.word	0x1fff1d14
    2d38:	.word	0x1fff18a8
    2d3c:	.word	0x1fff18ac
    2d40:	.word	0x1fff1890
    2d44:	.word	0x1fff186c
    2d48:	.word	0x1fff1d13
    2d4c:	.word	0x1fff1858
    2d50:	.word	0x1fff185c
    2d54:	.word	0x1fff1860
    2d58:	.word	0x1fff189c
    2d5c:	.word	0x1fff188c
    2d60:	.word	0x1fff18a4
    2d64:	.word	0x1fff1874
    2d68:	.word	0x1fff1888
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    2d6c:	ldr	r3, [pc, #252]	; (2e6c <usb_midi_read+0x41c>)
    2d6e:	ldr	r3, [r3, #0]
    2d70:	cmp	r3, #0
    2d72:	bne.n	2c80 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    2d74:	ldr	r3, [pc, #248]	; (2e70 <usb_midi_read+0x420>)
    2d76:	ldr	r3, [r3, #0]
    2d78:	cmp	r3, #0
    2d7a:	beq.n	2cca <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    2d7c:	movs	r0, #250	; 0xfa
    2d7e:	blx	r3
    2d80:	ubfx	r6, r4, #16, #8
    2d84:	b.n	2c86 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    2d86:	ldr	r3, [pc, #236]	; (2e74 <usb_midi_read+0x424>)
    2d88:	ldr	r3, [r3, #0]
    2d8a:	cmp	r3, #0
    2d8c:	bne.w	2c80 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    2d90:	ldr	r3, [pc, #220]	; (2e70 <usb_midi_read+0x420>)
    2d92:	ldr	r3, [r3, #0]
    2d94:	cmp	r3, #0
    2d96:	beq.n	2cca <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    2d98:	movs	r0, #251	; 0xfb
    2d9a:	blx	r3
    2d9c:	ubfx	r6, r4, #16, #8
    2da0:	b.n	2c86 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    2da2:	ldr	r3, [pc, #212]	; (2e78 <usb_midi_read+0x428>)
    2da4:	ldr	r3, [r3, #0]
    2da6:	cmp	r3, #0
    2da8:	bne.w	2c80 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    2dac:	ldr	r3, [pc, #192]	; (2e70 <usb_midi_read+0x420>)
    2dae:	ldr	r3, [r3, #0]
    2db0:	cmp	r3, #0
    2db2:	beq.n	2cca <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    2db4:	movs	r0, #248	; 0xf8
    2db6:	blx	r3
    2db8:	ubfx	r6, r4, #16, #8
    2dbc:	b.n	2c86 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    2dbe:	cmp	r3, #14
    2dc0:	bne.w	2ad0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    2dc4:	ldr	r2, [pc, #180]	; (2e7c <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2dc6:	ldr	r3, [pc, #184]	; (2e80 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    2dc8:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    2dca:	movs	r1, #224	; 0xe0
    2dcc:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    2dce:	cmp	r2, #0
    2dd0:	beq.n	2e62 <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    2dd2:	lsrs	r6, r4, #16
    2dd4:	lsrs	r1, r4, #17
    2dd6:	and.w	r3, r6, #127	; 0x7f
    2dda:	and.w	r1, r1, #16256	; 0x3f80
    2dde:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    2de0:	uxtb	r5, r5
    2de2:	sub.w	r1, r1, #8192	; 0x2000
    2de6:	mov	r0, r5
    2de8:	blx	r2
    2dea:	uxtb	r6, r6
    2dec:	lsrs	r4, r4, #24
    2dee:	b.n	2c64 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    2df0:	bl	2940 <sysex_byte>
		sysex_byte(n >> 16);
    2df4:	ubfx	r0, r4, #16, #8
    2df8:	bl	2940 <sysex_byte>
		sysex_byte(n >> 24);
    2dfc:	lsrs	r0, r4, #24
    2dfe:	bl	2940 <sysex_byte>
		return 0;
    2e02:	movs	r0, #0
    2e04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2e08:	ldr	r3, [pc, #120]	; (2e84 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2e0a:	ldr	r2, [pc, #116]	; (2e80 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    2e0c:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    2e0e:	movs	r1, #128	; 0x80
    2e10:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2e12:	uxtb	r5, r5
    2e14:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2e18:	cbz	r3, 2e3c <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    2e1a:	mov	r1, r6
    2e1c:	mov	r0, r5
    2e1e:	mov	r2, r7
    2e20:	blx	r3
    2e22:	mov	r4, r7
    2e24:	b.n	2c64 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2e26:	movs	r0, #1
    2e28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    2e2c:	ldr	r3, [pc, #64]	; (2e70 <usb_midi_read+0x420>)
    2e2e:	ldr	r3, [r3, #0]
    2e30:	cmp	r3, #0
    2e32:	beq.w	2cca <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    2e36:	movs	r0, #255	; 0xff
    2e38:	blx	r3
    2e3a:	b.n	2cca <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    2e3c:	mov	r4, r3
    2e3e:	b.n	2c64 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    2e40:	cmp	r6, #13
    2e42:	bne.n	2dbe <usb_midi_read+0x36e>
    2e44:	cmp	r3, #13
    2e46:	bne.w	2ad0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2e4a:	ldr	r3, [pc, #60]	; (2e88 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2e4c:	ldr	r2, [pc, #48]	; (2e80 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    2e4e:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2e50:	movs	r1, #208	; 0xd0
    2e52:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2e54:	uxtb	r5, r5
    2e56:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    2e5a:	cmp	r3, #0
    2e5c:	bne.w	2c5c <usb_midi_read+0x20c>
    2e60:	b.n	2dec <usb_midi_read+0x39c>
    2e62:	ubfx	r6, r4, #16, #8
    2e66:	uxtb	r5, r5
    2e68:	lsrs	r4, r4, #24
    2e6a:	b.n	2c64 <usb_midi_read+0x214>
    2e6c:	.word	0x1fff1884
    2e70:	.word	0x1fff1860
    2e74:	.word	0x1fff1864
    2e78:	.word	0x1fff1854
    2e7c:	.word	0x1fff1870
    2e80:	.word	0x1fff1d0c
    2e84:	.word	0x1fff18a8
    2e88:	.word	0x1fff1880

00002e8c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    2e8c:	cpsid	i
	avail = usb_buffer_available;
    2e8e:	ldr	r0, [pc, #52]	; (2ec4 <usb_malloc+0x38>)
    2e90:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    2e92:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    2e96:	cmp	r3, #29
    2e98:	bgt.n	2ebc <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    2e9a:	mov.w	r1, #2147483648	; 0x80000000
    2e9e:	lsrs	r1, r3
    2ea0:	bic.w	r2, r2, r1
    2ea4:	str	r2, [r0, #0]
	__enable_irq();
    2ea6:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    2ea8:	ldr	r0, [pc, #28]	; (2ec8 <usb_malloc+0x3c>)
    2eaa:	add.w	r3, r3, r3, lsl #3
    2eae:	lsls	r3, r3, #3
    2eb0:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    2eb2:	movs	r1, #0
    2eb4:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    2eb6:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    2eb8:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    2eba:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    2ebc:	cpsie	i
		return NULL;
    2ebe:	movs	r0, #0
    2ec0:	bx	lr
    2ec2:	nop
    2ec4:	.word	0x1fff0c5c
    2ec8:	.word	0x1fff03d0

00002ecc <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    2ecc:	ldr	r3, [pc, #52]	; (2f04 <usb_free+0x38>)
    2ece:	ldr	r2, [pc, #56]	; (2f08 <usb_free+0x3c>)
    2ed0:	subs	r3, r0, r3
    2ed2:	umull	r2, r3, r2, r3
    2ed6:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    2ed8:	cmp	r3, #29
    2eda:	bhi.n	2ef6 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2edc:	ldr	r2, [pc, #44]	; (2f0c <usb_free+0x40>)
    2ede:	ldrb	r2, [r2, #0]
    2ee0:	cbnz	r2, 2ef8 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    2ee2:	cpsid	i
	usb_buffer_available |= mask;
    2ee4:	ldr	r0, [pc, #40]	; (2f10 <usb_free+0x44>)
    2ee6:	mov.w	r1, #2147483648	; 0x80000000
    2eea:	ldr	r2, [r0, #0]
    2eec:	lsr.w	r3, r1, r3
    2ef0:	orrs	r2, r3
    2ef2:	str	r2, [r0, #0]
	__enable_irq();
    2ef4:	cpsie	i
    2ef6:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2ef8:	ldr	r2, [pc, #24]	; (2f14 <usb_free+0x48>)
    2efa:	ldrb	r2, [r2, #0]
    2efc:	cmp	r2, #0
    2efe:	beq.n	2ee2 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    2f00:	b.w	2f80 <usb_rx_memory>
    2f04:	.word	0x1fff03d0
    2f08:	.word	0x38e38e39
    2f0c:	.word	0x1fff1999
    2f10:	.word	0x1fff0c5c
    2f14:	.word	0x1fff19a4

00002f18 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    2f18:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2f1a:	cmp	r3, #4
    2f1c:	bhi.n	2f48 <usb_rx+0x30>
	__disable_irq();
    2f1e:	cpsid	i
	ret = rx_first[endpoint];
    2f20:	ldr	r1, [pc, #40]	; (2f4c <usb_rx+0x34>)
    2f22:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    2f26:	cbz	r0, 2f44 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2f28:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2f2a:	ldr	r4, [pc, #36]	; (2f50 <usb_rx+0x38>)
    2f2c:	ldrh	r5, [r0, #0]
    2f2e:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    2f32:	ldr	r6, [r0, #4]
    2f34:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2f38:	subs	r2, r2, r5
    2f3a:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    2f3e:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2f40:	pop	{r4, r5, r6}
    2f42:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2f44:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2f46:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2f48:	movs	r0, #0
    2f4a:	bx	lr
    2f4c:	.word	0x1fff1910
    2f50:	.word	0x1fff1e38

00002f54 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2f54:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2f56:	cmp	r0, #4
    2f58:	bhi.n	2f72 <usb_tx_packet_count+0x1e>
	__disable_irq();
    2f5a:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    2f5c:	ldr	r3, [pc, #28]	; (2f7c <usb_tx_packet_count+0x28>)
    2f5e:	ldr.w	r3, [r3, r0, lsl #2]
    2f62:	cbz	r3, 2f76 <usb_tx_packet_count+0x22>
    2f64:	movs	r0, #0
    2f66:	ldr	r3, [r3, #4]
    2f68:	adds	r0, #1
    2f6a:	cmp	r3, #0
    2f6c:	bne.n	2f66 <usb_tx_packet_count+0x12>
	__enable_irq();
    2f6e:	cpsie	i
	return count;
    2f70:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2f72:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2f74:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2f76:	mov	r0, r3
    2f78:	b.n	2f6e <usb_tx_packet_count+0x1a>
    2f7a:	nop
    2f7c:	.word	0x1fff1968

00002f80 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2f80:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2f82:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2f84:	ldr	r2, [pc, #204]	; (3054 <usb_rx_memory+0xd4>)
    2f86:	ldrb	r3, [r2, #0]
    2f88:	lsls	r3, r3, #28
    2f8a:	bpl.n	2f9a <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2f8c:	ldr	r3, [pc, #200]	; (3058 <usb_rx_memory+0xd8>)
    2f8e:	ldr	r1, [r3, #32]
    2f90:	cmp	r1, #0
    2f92:	beq.n	301c <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2f94:	ldr	r1, [r3, #40]	; 0x28
    2f96:	cmp	r1, #0
    2f98:	beq.n	3038 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2f9a:	ldrb	r3, [r2, #1]
    2f9c:	lsls	r5, r3, #28
    2f9e:	bpl.n	2fae <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2fa0:	ldr	r3, [pc, #180]	; (3058 <usb_rx_memory+0xd8>)
    2fa2:	ldr	r1, [r3, #64]	; 0x40
    2fa4:	cmp	r1, #0
    2fa6:	beq.n	3044 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2fa8:	ldr	r1, [r3, #72]	; 0x48
    2faa:	cmp	r1, #0
    2fac:	beq.n	303c <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2fae:	ldrb	r3, [r2, #2]
    2fb0:	lsls	r4, r3, #28
    2fb2:	bpl.n	2fc2 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2fb4:	ldr	r3, [pc, #160]	; (3058 <usb_rx_memory+0xd8>)
    2fb6:	ldr	r1, [r3, #96]	; 0x60
    2fb8:	cmp	r1, #0
    2fba:	beq.n	3048 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2fbc:	ldr	r1, [r3, #104]	; 0x68
    2fbe:	cmp	r1, #0
    2fc0:	beq.n	3040 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2fc2:	ldrb	r3, [r2, #3]
    2fc4:	lsls	r1, r3, #28
    2fc6:	bpl.n	2fd8 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2fc8:	ldr	r3, [pc, #140]	; (3058 <usb_rx_memory+0xd8>)
    2fca:	ldr.w	r1, [r3, #128]	; 0x80
    2fce:	cmp	r1, #0
    2fd0:	beq.n	3050 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2fd2:	ldr.w	r1, [r3, #136]	; 0x88
    2fd6:	cbz	r1, 2ffe <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2fd8:	ldrb	r3, [r2, #4]
    2fda:	lsls	r3, r3, #28
    2fdc:	bpl.n	2ff0 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2fde:	ldr	r3, [pc, #120]	; (3058 <usb_rx_memory+0xd8>)
    2fe0:	ldr.w	r2, [r3, #160]	; 0xa0
    2fe4:	cmp	r2, #0
    2fe6:	beq.n	304c <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2fe8:	ldr.w	r2, [r3, #168]	; 0xa8
    2fec:	movs	r4, #21
    2fee:	cbz	r2, 3000 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2ff0:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    2ff2:	ldr	r3, [pc, #104]	; (305c <usb_rx_memory+0xdc>)
    2ff4:	movs	r2, #0
    2ff6:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2ff8:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2ffa:	b.w	2ecc <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2ffe:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3000:	ldr	r1, [pc, #88]	; (305c <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3002:	ldr	r5, [pc, #92]	; (3060 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    3004:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3006:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    300a:	add.w	r3, r3, r4, lsl #3
    300e:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3010:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    3012:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3014:	strb	r2, [r1, #0]
				__enable_irq();
    3016:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    3018:	pop	{r4, r5}
    301a:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    301c:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    301e:	ldr	r4, [pc, #60]	; (305c <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3020:	ldr	r5, [pc, #64]	; (3064 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    3022:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3024:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    3028:	add.w	r3, r3, r2, lsl #3
    302c:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    302e:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    3030:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3032:	strb	r2, [r4, #0]
				__enable_irq();
    3034:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    3036:	b.n	3018 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3038:	movs	r4, #5
    303a:	b.n	3000 <usb_rx_memory+0x80>
    303c:	movs	r4, #9
    303e:	b.n	3000 <usb_rx_memory+0x80>
    3040:	movs	r4, #13
    3042:	b.n	3000 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    3044:	movs	r2, #8
    3046:	b.n	301e <usb_rx_memory+0x9e>
    3048:	movs	r2, #12
    304a:	b.n	301e <usb_rx_memory+0x9e>
    304c:	movs	r2, #20
    304e:	b.n	301e <usb_rx_memory+0x9e>
    3050:	movs	r2, #16
    3052:	b.n	301e <usb_rx_memory+0x9e>
    3054:	.word	0x00005320
    3058:	.word	0x1fff0000
    305c:	.word	0x1fff1999
    3060:	.word	0x004000c8
    3064:	.word	0x00400088

00003068 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    3068:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    306a:	cmp	r3, #4
    306c:	bhi.n	30aa <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    306e:	ldr	r2, [pc, #108]	; (30dc <usb_tx+0x74>)
    3070:	lsls	r0, r0, #5
    3072:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    3076:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    3078:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    307a:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    307c:	ldr	r4, [pc, #96]	; (30e0 <usb_tx+0x78>)
    307e:	ldrb	r2, [r4, r3]
    3080:	cmp	r2, #3
    3082:	bhi.n	30bc <usb_tx+0x54>
    3084:	tbb	[pc, r2]
    3088:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    308c:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    308e:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    3090:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3092:	tst.w	r0, #8
    3096:	ite	ne
    3098:	movne	r3, #200	; 0xc8
    309a:	moveq	r3, #136	; 0x88
    309c:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    30a0:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    30a2:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    30a4:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    30a6:	cpsie	i
}
    30a8:	pop	{r4, r5}
    30aa:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    30ac:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    30ae:	movs	r2, #2
		break;
    30b0:	b.n	308e <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    30b2:	movs	r2, #5
    30b4:	b.n	308e <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    30b6:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    30b8:	movs	r2, #4
		break;
    30ba:	b.n	308e <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    30bc:	ldr	r2, [pc, #36]	; (30e4 <usb_tx+0x7c>)
    30be:	ldr.w	r0, [r2, r3, lsl #2]
    30c2:	cbz	r0, 30d4 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    30c4:	ldr	r2, [pc, #32]	; (30e8 <usb_tx+0x80>)
    30c6:	ldr.w	r0, [r2, r3, lsl #2]
    30ca:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    30cc:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    30d0:	cpsie	i
		return;
    30d2:	b.n	30a8 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    30d4:	str.w	r1, [r2, r3, lsl #2]
    30d8:	ldr	r2, [pc, #12]	; (30e8 <usb_tx+0x80>)
    30da:	b.n	30cc <usb_tx+0x64>
    30dc:	.word	0x1fff0000
    30e0:	.word	0x1fff19a8
    30e4:	.word	0x1fff1968
    30e8:	.word	0x1fff197c

000030ec <usb_isr>:
}



void usb_isr(void)
{
    30ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    30f0:	ldr.w	fp, [pc, #776]	; 33fc <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    30f4:	ldr.w	sl, [pc, #776]	; 3400 <usb_isr+0x314>
}



void usb_isr(void)
{
    30f8:	sub	sp, #28
    30fa:	b.n	3186 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    30fc:	ldr	r7, [pc, #680]	; (33a8 <usb_isr+0x2bc>)
    30fe:	mov.w	r8, r3, lsr #2
    3102:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3106:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3108:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    310c:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3110:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3112:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    3116:	and.w	r4, r3, #255	; 0xff
    311a:	cmp	r3, #0
    311c:	bne.w	3320 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    3120:	ldr.w	r3, [r7, r8, lsl #3]
    3124:	lsrs	r3, r3, #16
    3126:	uxth	r1, r3
    3128:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    312c:	cmp	r3, #0
    312e:	beq.w	330e <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    3132:	ldr	r3, [pc, #632]	; (33ac <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    3134:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    3138:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    313c:	ldr.w	r2, [r3, r6, lsl #2]
    3140:	cmp	r2, #0
    3142:	beq.w	35b0 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    3146:	ldr	r5, [pc, #616]	; (33b0 <usb_isr+0x2c4>)
    3148:	ldr.w	r3, [r5, r6, lsl #2]
    314c:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    314e:	ldr	r4, [pc, #612]	; (33b4 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    3150:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    3154:	ldrh.w	r3, [r4, r6, lsl #1]
    3158:	add	r1, r3
    315a:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    315e:	bl	2e8c <usb_malloc>
					if (packet) {
    3162:	cmp	r0, #0
    3164:	beq.w	35a2 <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    3168:	ldr	r2, [pc, #588]	; (33b8 <usb_isr+0x2cc>)
    316a:	ldr	r3, [pc, #592]	; (33bc <usb_isr+0x2d0>)
    316c:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    3170:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    3174:	it	ne
    3176:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    3178:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    317c:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    3180:	movs	r3, #8
    3182:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    3186:	ldrb.w	r4, [fp]
    318a:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    318c:	lsls	r0, r4, #29
    318e:	bpl.n	31ca <usb_isr+0xde>
		if (usb_configuration) {
    3190:	ldr	r3, [pc, #556]	; (33c0 <usb_isr+0x2d4>)
    3192:	ldrb	r3, [r3, #0]
    3194:	cbz	r3, 31c4 <usb_isr+0xd8>
			t = usb_reboot_timer;
    3196:	ldr	r1, [pc, #556]	; (33c4 <usb_isr+0x2d8>)
    3198:	ldrb	r2, [r1, #0]
			if (t) {
    319a:	and.w	r3, r2, #255	; 0xff
    319e:	cbz	r2, 31aa <usb_isr+0xbe>
				usb_reboot_timer = --t;
    31a0:	subs	r3, #1
    31a2:	uxtb	r3, r3
    31a4:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    31a6:	cbnz	r3, 31aa <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    31a8:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    31aa:	ldr	r1, [pc, #540]	; (33c8 <usb_isr+0x2dc>)
    31ac:	ldrb	r2, [r1, #0]
			if (t) {
    31ae:	and.w	r3, r2, #255	; 0xff
    31b2:	cbz	r2, 31c0 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    31b4:	subs	r3, #1
    31b6:	uxtb	r3, r3
    31b8:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    31ba:	cmp	r3, #0
    31bc:	beq.w	354e <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    31c0:	bl	2a24 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    31c4:	movs	r3, #4
    31c6:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    31ca:	and.w	r3, r4, #8
    31ce:	and.w	r2, r3, #255	; 0xff
    31d2:	cmp	r3, #0
    31d4:	beq.w	3368 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    31d8:	ldrb.w	r3, [sl]
    31dc:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    31de:	lsrs	r6, r3, #4
    31e0:	bne.n	30fc <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    31e2:	lsrs	r4, r3, #2
    31e4:	ldr.w	r9, [pc, #448]	; 33a8 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    31e8:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    31ec:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    31f0:	ubfx	r2, r2, #2, #4
    31f4:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    31f6:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    31f8:	cmp	r2, #12
    31fa:	bhi.w	3306 <usb_isr+0x21a>
    31fe:	tbb	[pc, r2]
    3202:	.short	0x7878
    3204:	.word	0x82828282
    3208:	.word	0x82438282
    320c:	.short	0x8282
    320e:	.byte	0x07
    320f:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    3210:	ldr	r0, [r1, #0]
    3212:	ldr	r5, [pc, #440]	; (33cc <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3214:	ldr	r3, [pc, #416]	; (33b8 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    3216:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3218:	ldr	r7, [pc, #436]	; (33d0 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    321a:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    321e:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3220:	ldr	r6, [pc, #432]	; (33d4 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    3222:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3224:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3228:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    322a:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    322c:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    322e:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3232:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    3234:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    3238:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    323c:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    323e:	bhi.w	3404 <usb_isr+0x318>
    3242:	cmp.w	r1, #1664	; 0x680
    3246:	bcs.w	3870 <usb_isr+0x784>
    324a:	cmp.w	r1, #258	; 0x102
    324e:	beq.w	361e <usb_isr+0x532>
    3252:	bhi.w	35e8 <usb_isr+0x4fc>
    3256:	cmp	r1, #128	; 0x80
    3258:	beq.w	38a4 <usb_isr+0x7b8>
    325c:	cmp	r1, #130	; 0x82
    325e:	bne.w	362a <usb_isr+0x53e>
    3262:	ldrh	r1, [r5, #4]
    3264:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    3268:	cmp	r1, #5
    326a:	bhi.w	362a <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    326e:	ldr	r3, [pc, #360]	; (33d8 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3270:	ldr	r4, [pc, #360]	; (33dc <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3272:	lsls	r1, r1, #2
    3274:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3276:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3278:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    327a:	ldrb	r2, [r3, #0]
    327c:	lsls	r3, r2, #30
    327e:	bpl.w	39b4 <usb_isr+0x8c8>
    3282:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    3284:	movs	r0, #2
    3286:	b.n	36b2 <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    3288:	ldr	r7, [pc, #324]	; (33d0 <usb_isr+0x2e4>)
    328a:	ldr	r2, [r7, #0]
		if (data) {
    328c:	cbz	r2, 32dc <usb_isr+0x1f0>
			size = ep0_tx_len;
    328e:	ldr	r3, [pc, #336]	; (33e0 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3290:	ldr	r6, [pc, #320]	; (33d4 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3292:	ldr	r1, [pc, #336]	; (33e4 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    3294:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3296:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3298:	ldrb	r5, [r1, #0]
    329a:	cmp	r0, #64	; 0x40
    329c:	mov	lr, r0
    329e:	orr.w	r8, r5, #2
    32a2:	it	cs
    32a4:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32a8:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    32aa:	eor.w	r4, r4, #1
    32ae:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    32b0:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32b4:	ite	eq
    32b6:	moveq	r4, #136	; 0x88
    32b8:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    32ba:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    32be:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    32c0:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32c4:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    32c8:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    32ca:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    32cc:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    32d0:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    32d2:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    32d4:	cmp	r0, #0
    32d6:	beq.w	3446 <usb_isr+0x35a>
    32da:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    32dc:	ldr	r3, [pc, #236]	; (33cc <usb_isr+0x2e0>)
    32de:	ldrh	r2, [r3, #0]
    32e0:	cmp.w	r2, #1280	; 0x500
    32e4:	bne.n	3306 <usb_isr+0x21a>
			setup.bRequest = 0;
    32e6:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    32e8:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    32ea:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    32ec:	ldr	r3, [pc, #248]	; (33e8 <usb_isr+0x2fc>)
    32ee:	strb	r2, [r3, #0]
    32f0:	b.n	3306 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    32f2:	ldr	r2, [pc, #216]	; (33cc <usb_isr+0x2e0>)
    32f4:	ldrh	r0, [r2, #0]
    32f6:	movw	r2, #8225	; 0x2021
    32fa:	cmp	r0, r2
    32fc:	beq.w	3450 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3300:	ldr	r2, [pc, #180]	; (33b8 <usb_isr+0x2cc>)
    3302:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3306:	ldr	r2, [pc, #228]	; (33ec <usb_isr+0x300>)
    3308:	movs	r3, #1
    330a:	strb	r3, [r2, #0]
    330c:	b.n	3180 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    330e:	ldr	r2, [pc, #168]	; (33b8 <usb_isr+0x2cc>)
    3310:	ldr	r3, [pc, #168]	; (33bc <usb_isr+0x2d0>)
    3312:	tst.w	r9, #8
    3316:	it	ne
    3318:	movne	r3, r2
    331a:	str.w	r3, [r7, r8, lsl #3]
    331e:	b.n	3180 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    3320:	bl	2ecc <usb_free>
				packet = tx_first[endpoint];
    3324:	ldr	r2, [pc, #200]	; (33f0 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    3326:	ldr	r1, [pc, #204]	; (33f4 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    3328:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    332c:	cmp	r3, #0
    332e:	beq.w	35b8 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    3332:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    3334:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    3336:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    333a:	add.w	r2, r3, #8
    333e:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    3342:	cmp	r4, #3
    3344:	bhi.n	3352 <usb_isr+0x266>
    3346:	tbb	[pc, r4]
    334a:	.short	0x022c
    334c:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    334e:	movs	r2, #2
    3350:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    3352:	ldrh	r2, [r3, #0]
    3354:	tst.w	r9, #8
    3358:	ite	eq
    335a:	moveq	r3, #136	; 0x88
    335c:	movne	r3, #200	; 0xc8
    335e:	orr.w	r3, r3, r2, lsl #16
    3362:	str.w	r3, [r7, r8, lsl #3]
    3366:	b.n	3180 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    3368:	lsls	r0, r4, #31
    336a:	bmi.w	3554 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    336e:	lsls	r1, r4, #24
    3370:	bmi.w	35d4 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3374:	lsls	r2, r4, #30
    3376:	bpl.n	3386 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    3378:	ldr	r2, [pc, #124]	; (33f8 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    337a:	ldr	r1, [pc, #128]	; (33fc <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    337c:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    337e:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3380:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    3382:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3384:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    3386:	lsls	r3, r4, #27
    3388:	bpl.n	3390 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    338a:	ldr	r3, [pc, #112]	; (33fc <usb_isr+0x310>)
    338c:	movs	r2, #16
    338e:	strb	r2, [r3, #0]
	}

}
    3390:	add	sp, #28
    3392:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    3396:	movs	r2, #4
    3398:	strb	r2, [r1, r6]
						break;
    339a:	b.n	3352 <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    339c:	movs	r2, #5
    339e:	strb	r2, [r1, r6]
						break;
    33a0:	b.n	3352 <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    33a2:	movs	r2, #3
    33a4:	strb	r2, [r1, r6]
						break;
    33a6:	b.n	3352 <usb_isr+0x266>
    33a8:	.word	0x1fff0000
    33ac:	.word	0x1fff1910
    33b0:	.word	0x1fff18b8
    33b4:	.word	0x1fff1e38
    33b8:	.word	0x004000c8
    33bc:	.word	0x00400088
    33c0:	.word	0x1fff19a4
    33c4:	.word	0x1fff1925
    33c8:	.word	0x1fff1838
    33cc:	.word	0x1fff1990
    33d0:	.word	0x1fff18b4
    33d4:	.word	0x1fff1924
    33d8:	.word	0x400720c0
    33dc:	.word	0x1fff199c
    33e0:	.word	0x1fff18cc
    33e4:	.word	0x1fff1998
    33e8:	.word	0x40072098
    33ec:	.word	0x40072094
    33f0:	.word	0x1fff1968
    33f4:	.word	0x1fff19a8
    33f8:	.word	0x40072088
    33fc:	.word	0x40072080
    3400:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3404:	movw	r4, #8225	; 0x2021
    3408:	cmp	r1, r4
    340a:	beq.w	3546 <usb_isr+0x45a>
    340e:	bhi.n	34a4 <usb_isr+0x3b8>
    3410:	cmp.w	r1, #2176	; 0x880
    3414:	beq.w	36aa <usb_isr+0x5be>
    3418:	cmp.w	r1, #2304	; 0x900
    341c:	bne.w	362a <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    3420:	ldr	r2, [pc, #712]	; (36ec <usb_isr+0x600>)
    3422:	ldr	r4, [pc, #716]	; (36f0 <usb_isr+0x604>)
    3424:	ldrb	r1, [r5, #2]
    3426:	strb	r1, [r2, #0]
    3428:	add.w	r5, r4, #160	; 0xa0
    342c:	b.n	3436 <usb_isr+0x34a>
    342e:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3430:	cmp	r5, r4
    3432:	beq.w	3748 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    3436:	ldr	r3, [r4, #32]
    3438:	lsls	r1, r3, #24
    343a:	bpl.n	342e <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    343c:	ldr	r0, [r4, #36]	; 0x24
    343e:	subs	r0, #8
    3440:	bl	2ecc <usb_free>
    3444:	b.n	342e <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3446:	cmp.w	lr, #64	; 0x40
    344a:	it	ne
    344c:	movne	r2, #0
    344e:	b.n	32da <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3450:	ldr	r2, [pc, #672]	; (36f4 <usb_isr+0x608>)
    3452:	ldrb	r5, [r1, #0]
    3454:	ldrb	r0, [r1, #1]
    3456:	strb	r5, [r2, #0]
    3458:	strb	r0, [r2, #1]
    345a:	ldrb	r5, [r1, #2]
    345c:	ldrb	r0, [r1, #3]
    345e:	strb	r5, [r2, #2]
    3460:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3462:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3464:	ldrb	r5, [r1, #4]
    3466:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3468:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    346a:	ldrb	r5, [r1, #5]
    346c:	ldrb	r1, [r1, #6]
    346e:	strb	r5, [r2, #5]
    3470:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3472:	beq.w	36a2 <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3476:	ldr	r1, [pc, #640]	; (36f8 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3478:	ldr	r6, [pc, #640]	; (36fc <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    347a:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    347c:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    347e:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3482:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3484:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3488:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    348a:	ite	eq
    348c:	moveq	r1, #136	; 0x88
    348e:	movne	r1, #200	; 0xc8
    3490:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3494:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3498:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    349c:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    349e:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    34a0:	str	r1, [r2, #4]
    34a2:	b.n	3300 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    34a4:	movw	r4, #8737	; 0x2221
    34a8:	cmp	r1, r4
    34aa:	bne.w	38be <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    34ae:	ldr.w	ip, [pc, #656]	; 3740 <usb_isr+0x654>
    34b2:	ldr	r3, [pc, #588]	; (3700 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    34b4:	ldr	r1, [pc, #588]	; (3704 <usb_isr+0x618>)
    34b6:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    34b8:	ldr.w	r5, [ip]
    34bc:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    34be:	str	r0, [sp, #4]
    34c0:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    34c2:	movs	r0, #0
    34c4:	str	r0, [sp, #8]
    34c6:	mov	r8, r0
    34c8:	mov	ip, r0
    34ca:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    34cc:	ldr	r1, [pc, #552]	; (36f8 <usb_isr+0x60c>)
    34ce:	ldrb	r5, [r1, #0]
    34d0:	orr.w	lr, r5, #2
    34d4:	add.w	r3, r9, lr, lsl #3
    34d8:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    34da:	ldr	r3, [sp, #4]
    34dc:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    34de:	ldr	r3, [sp, #12]
    34e0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    34e2:	ite	eq
    34e4:	moveq	r4, #136	; 0x88
    34e6:	movne	r4, #200	; 0xc8
    34e8:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    34ec:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    34f0:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    34f4:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    34f6:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    34f8:	ldr.w	lr, [pc, #500]	; 36f0 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    34fc:	ldr	r3, [pc, #508]	; (36fc <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    34fe:	ldr.w	r8, [pc, #504]	; 36f8 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3502:	cmp	r0, #0
    3504:	bne.w	3638 <usb_isr+0x54c>
    3508:	cmp.w	ip, #64	; 0x40
    350c:	bne.n	3546 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    350e:	orr.w	ip, r4, #2
    3512:	add.w	r3, r9, ip, lsl #3
    3516:	ldr	r4, [sp, #8]
    3518:	ldr.w	lr, [pc, #468]	; 36f0 <usb_isr+0x604>
    351c:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    351e:	cmp	r2, #0
    3520:	bne.w	3664 <usb_isr+0x578>
    3524:	lsls	r2, r0, #16
    3526:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    352a:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    352e:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3532:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3534:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3536:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3538:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    353a:	cmp	r0, #64	; 0x40
    353c:	bne.n	3546 <usb_isr+0x45a>
    353e:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3540:	ldr	r2, [pc, #452]	; (3708 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    3542:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    3544:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3546:	ldr	r2, [pc, #452]	; (370c <usb_isr+0x620>)
    3548:	movs	r3, #1
    354a:	strb	r3, [r2, #0]
    354c:	b.n	3306 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    354e:	bl	22ac <usb_serial_flush_callback>
    3552:	b.n	31c0 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3554:	ldr	r3, [pc, #408]	; (36f0 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3556:	ldr	r0, [pc, #436]	; (370c <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    3558:	ldr	r1, [pc, #412]	; (36f8 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    355a:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    355c:	mov.w	lr, #2
    3560:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3564:	ldr	r7, [pc, #424]	; (3710 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    3566:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3568:	ldr	r1, [pc, #424]	; (3714 <usb_isr+0x628>)
    356a:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    356c:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    356e:	ldr	r6, [pc, #424]	; (3718 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    3570:	ldr	r5, [pc, #424]	; (371c <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3572:	ldr	r4, [pc, #428]	; (3720 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3574:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3576:	movs	r1, #13
    3578:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    357a:	movs	r1, #255	; 0xff
    357c:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    357e:	ldr.w	lr, [pc, #452]	; 3744 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    3582:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3584:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3586:	ldr	r5, [pc, #412]	; (3724 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3588:	ldr	r2, [pc, #412]	; (3728 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    358a:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    358e:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3590:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3592:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3596:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3598:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    359a:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    359c:	add	sp, #28
    359e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    35a2:	ldr	r2, [pc, #392]	; (372c <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    35a4:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    35a8:	ldrb	r3, [r2, #0]
    35aa:	adds	r3, #1
    35ac:	strb	r3, [r2, #0]
    35ae:	b.n	3180 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    35b0:	str.w	r0, [r3, r6, lsl #2]
    35b4:	ldr	r5, [pc, #376]	; (3730 <usb_isr+0x644>)
    35b6:	b.n	314e <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    35b8:	ldrb	r3, [r1, r6]
    35ba:	cmp	r3, #3
    35bc:	bhi.n	3694 <usb_isr+0x5a8>
    35be:	add	r2, pc, #4	; (adr r2, 35c4 <usb_isr+0x4d8>)
    35c0:	ldr.w	pc, [r2, r3, lsl #2]
    35c4:	.word	0x00003181
    35c8:	.word	0x00003181
    35cc:	.word	0x00003619
    35d0:	.word	0x00003613
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    35d4:	ldr	r1, [pc, #312]	; (3710 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    35d6:	ldr	r3, [pc, #324]	; (371c <usb_isr+0x630>)
    35d8:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    35da:	movs	r0, #13
    35dc:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    35de:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    35e0:	lsls	r2, r4, #30
    35e2:	bpl.w	3386 <usb_isr+0x29a>
    35e6:	b.n	3378 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    35e8:	movw	r2, #770	; 0x302
    35ec:	cmp	r1, r2
    35ee:	bne.w	38ae <usb_isr+0x7c2>
    35f2:	ldrh	r1, [r5, #4]
    35f4:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    35f8:	cmp	r1, #5
    35fa:	bhi.n	362a <usb_isr+0x53e>
    35fc:	ldrh	r2, [r5, #2]
    35fe:	cbnz	r2, 362a <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    3600:	ldr	r4, [pc, #268]	; (3710 <usb_isr+0x624>)
    3602:	str	r0, [sp, #4]
    3604:	lsls	r1, r1, #2
    3606:	add	r4, r1
    3608:	ldrb	r1, [r4, #0]
    360a:	orr.w	r1, r1, #2
    360e:	strb	r1, [r4, #0]
    3610:	b.n	34c2 <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3612:	movs	r3, #1
    3614:	strb	r3, [r1, r6]
						break;
    3616:	b.n	3180 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3618:	movs	r3, #0
    361a:	strb	r3, [r1, r6]
						break;
    361c:	b.n	3180 <usb_isr+0x94>
    361e:	ldrh	r1, [r5, #4]
    3620:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3624:	cmp	r1, #5
    3626:	bls.w	38c8 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    362a:	ldr	r2, [pc, #228]	; (3710 <usb_isr+0x624>)
    362c:	movs	r3, #15
    362e:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3630:	ldr	r2, [pc, #216]	; (370c <usb_isr+0x620>)
    3632:	movs	r3, #1
    3634:	strb	r3, [r2, #0]
    3636:	b.n	3306 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    3638:	cmp	r0, #64	; 0x40
    363a:	bls.w	350e <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    363e:	orr.w	r4, r4, #2
    3642:	add.w	r1, lr, r4, lsl #3
    3646:	ldr	r6, [sp, #8]
    3648:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    364a:	cbz	r2, 367c <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    364c:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3650:	ldr	r2, [pc, #224]	; (3734 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    3652:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3654:	mov	r3, r6
    3656:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3658:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    365c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    365e:	str.w	r2, [lr, r4, lsl #3]
    3662:	b.n	3540 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    3664:	ldrb.w	r3, [sp, #4]
    3668:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    366a:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    366c:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    366e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3670:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3674:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3676:	str.w	r2, [lr, ip, lsl #3]
    367a:	b.n	353a <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    367c:	ldrb.w	r1, [sp, #4]
    3680:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3682:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3684:	ldr	r2, [pc, #140]	; (3714 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3686:	strb.w	r5, [r8]
    368a:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    368c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    368e:	str.w	r2, [lr, r4, lsl #3]
    3692:	b.n	3540 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3694:	tst.w	r9, #8
    3698:	ite	eq
    369a:	moveq	r3, #2
    369c:	movne	r3, #3
    369e:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    36a0:	b.n	3180 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    36a2:	ldr	r2, [pc, #148]	; (3738 <usb_isr+0x64c>)
    36a4:	movs	r1, #15
    36a6:	strb	r1, [r2, #0]
    36a8:	b.n	3476 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    36aa:	ldr	r2, [pc, #64]	; (36ec <usb_isr+0x600>)
    36ac:	ldr	r4, [pc, #140]	; (373c <usb_isr+0x650>)
    36ae:	ldrb	r2, [r2, #0]
    36b0:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    36b2:	ldrh	r2, [r5, #6]
    36b4:	cmp	r2, r0
    36b6:	bcs.w	3a7c <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    36ba:	ldr	r1, [pc, #60]	; (36f8 <usb_isr+0x60c>)
    36bc:	ldrb	r5, [r1, #0]
    36be:	cmp	r2, #64	; 0x40
    36c0:	mov	ip, r2
    36c2:	orr.w	lr, r5, #2
    36c6:	it	cs
    36c8:	movcs.w	ip, #64	; 0x40
    36cc:	add.w	r3, r4, ip
    36d0:	add.w	r0, r9, lr, lsl #3
    36d4:	str	r3, [sp, #8]
    36d6:	movs	r3, #1
    36d8:	str	r4, [r0, #4]
    36da:	mov.w	r8, ip, lsl #16
    36de:	rsb	r0, ip, r2
    36e2:	str	r3, [sp, #4]
    36e4:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36e6:	movs	r4, #200	; 0xc8
    36e8:	b.n	34e8 <usb_isr+0x3fc>
    36ea:	nop
    36ec:	.word	0x1fff19a4
    36f0:	.word	0x1fff0000
    36f4:	.word	0x1fff1d00
    36f8:	.word	0x1fff1998
    36fc:	.word	0x1fff1924
    3700:	.word	0x1fff1d08
    3704:	.word	0x1fff1848
    3708:	.word	0x1fff18cc
    370c:	.word	0x40072094
    3710:	.word	0x400720c0
    3714:	.word	0x00400088
    3718:	.word	0x40072088
    371c:	.word	0x40072080
    3720:	.word	0x40072098
    3724:	.word	0x1fff18d0
    3728:	.word	0x1fff1928
    372c:	.word	0x1fff1999
    3730:	.word	0x1fff18b8
    3734:	.word	0x004000c8
    3738:	.word	0x1fff1925
    373c:	.word	0x1fff199c
    3740:	.word	0x1fff1850
    3744:	.word	0x4007208c
    3748:	ldr	r4, [pc, #704]	; (3a0c <usb_isr+0x920>)
    374a:	ldr	r2, [pc, #708]	; (3a10 <usb_isr+0x924>)
    374c:	ldr	r1, [pc, #708]	; (3a14 <usb_isr+0x928>)
    374e:	ldr	r0, [pc, #712]	; (3a18 <usb_isr+0x92c>)
    3750:	ldr	r5, [pc, #712]	; (3a1c <usb_isr+0x930>)
    3752:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3754:	movs	r3, #0
    3756:	ldr	r4, [pc, #712]	; (3a20 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3758:	str	r4, [sp, #8]
    375a:	str	r6, [sp, #20]
    375c:	str	r5, [sp, #12]
    375e:	mov	r8, r0
    3760:	mov	r4, r3
    3762:	str	r7, [sp, #16]
    3764:	mov	r6, r2
    3766:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3768:	ldr	r0, [r6, #0]
			while (p) {
    376a:	cbz	r0, 3778 <usb_isr+0x68c>
				n = p->next;
    376c:	ldr	r7, [r0, #4]
				usb_free(p);
    376e:	bl	2ecc <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    3772:	mov	r0, r7
    3774:	cmp	r7, #0
    3776:	bne.n	376c <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3778:	movs	r3, #0
    377a:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    377c:	ldr	r3, [sp, #12]
			p = tx_first[i];
    377e:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3780:	mov	r2, r3
    3782:	movs	r3, #0
    3784:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    3788:	cbz	r0, 3796 <usb_isr+0x6aa>
				n = p->next;
    378a:	ldr	r7, [r0, #4]
				usb_free(p);
    378c:	bl	2ecc <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3790:	mov	r0, r7
    3792:	cmp	r7, #0
    3794:	bne.n	378a <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3796:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3798:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    379a:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    379c:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    379e:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    37a2:	ldr	r2, [sp, #8]
    37a4:	mov.w	r1, #0
			switch (tx_state[i]) {
    37a8:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    37aa:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    37ae:	cmp	r3, #3
    37b0:	bhi.n	37c2 <usb_isr+0x6d6>
    37b2:	tbb	[pc, r3]
    37b6:	.short	0x0258
    37b8:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    37ba:	ldr	r3, [sp, #4]
    37bc:	mov.w	r2, #1
    37c0:	strb	r2, [r3, #0]
    37c2:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    37c4:	adds	r4, #1
    37c6:	adds	r3, #1
    37c8:	cmp	r4, #5
    37ca:	add.w	r6, r6, #4
    37ce:	add.w	r5, r5, #4
    37d2:	str	r3, [sp, #4]
    37d4:	bne.n	3768 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    37d6:	ldr	r4, [pc, #588]	; (3a24 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    37d8:	ldr	r5, [pc, #588]	; (3a28 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    37da:	ldrb	r2, [r4, #0]
			*reg = epconf;
    37dc:	ldr	r3, [pc, #588]	; (3a2c <usb_isr+0x940>)
    37de:	ldr	r7, [sp, #16]
    37e0:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    37e2:	movs	r1, #0
    37e4:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    37e6:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    37e8:	lsls	r2, r2, #28
    37ea:	bmi.n	38e2 <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    37ec:	ldrb	r2, [r4, #1]
			*reg = epconf;
    37ee:	ldr	r1, [pc, #576]	; (3a30 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    37f0:	ldr.w	r8, [pc, #588]	; 3a40 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    37f4:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    37f6:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    37f8:	mov.w	r1, #0
    37fc:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    3800:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3804:	bmi.w	398e <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3808:	ldrb	r2, [r4, #2]
			*reg = epconf;
    380a:	ldr	r1, [pc, #552]	; (3a34 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    380c:	ldr.w	r8, [pc, #560]	; 3a40 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3810:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3812:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3814:	mov.w	r1, #0
    3818:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    381c:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3820:	bmi.w	3966 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3824:	ldr	r1, [pc, #528]	; (3a38 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3826:	ldrb	r2, [r4, #3]
			*reg = epconf;
    3828:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    382a:	movs	r1, #0
    382c:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3830:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3834:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3836:	ldr.w	r8, [pc, #520]	; 3a40 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    383a:	bmi.n	3938 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    383c:	ldrb	r2, [r4, #4]
			*reg = epconf;
    383e:	ldr	r1, [pc, #508]	; (3a3c <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3840:	ldr	r4, [pc, #508]	; (3a40 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3842:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3844:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3846:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3848:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    384c:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3850:	bmi.n	390e <usb_isr+0x822>
    3852:	ldrb	r3, [r6, #0]
    3854:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3856:	movs	r1, #0
    3858:	eor.w	r2, r3, #1
    385c:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3860:	str.w	r1, [r9, #184]	; 0xb8
    3864:	b.n	34c2 <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3866:	ldr	r3, [sp, #4]
    3868:	mov.w	r2, #0
    386c:	strb	r2, [r3, #0]
    386e:	b.n	37c2 <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3870:	ldr	r2, [pc, #464]	; (3a44 <usb_isr+0x958>)
    3872:	ldr	r4, [r2, #4]
    3874:	cmp	r4, #0
    3876:	beq.w	362a <usb_isr+0x53e>
    387a:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    387c:	ldrh.w	lr, [r5, #4]
    3880:	b.n	388c <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3882:	adds	r2, #12
			if (list->addr == NULL) break;
    3884:	ldr	r4, [r2, #4]
    3886:	cmp	r4, #0
    3888:	beq.w	362a <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    388c:	ldrh	r3, [r2, #0]
    388e:	cmp	r3, r0
    3890:	bne.n	3882 <usb_isr+0x796>
    3892:	ldrh	r3, [r2, #2]
    3894:	cmp	r3, lr
    3896:	bne.n	3882 <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3898:	lsrs	r0, r0, #8
    389a:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    389c:	ite	eq
    389e:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    38a0:	ldrhne	r0, [r2, #8]
    38a2:	b.n	36b2 <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    38a4:	ldr	r4, [pc, #416]	; (3a48 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    38a6:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    38a8:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    38aa:	strb	r2, [r4, #1]
    38ac:	b.n	36b2 <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    38ae:	cmp.w	r1, #1280	; 0x500
    38b2:	bne.w	362a <usb_isr+0x53e>
    38b6:	movs	r3, #1
    38b8:	movs	r2, #0
    38ba:	str	r3, [sp, #4]
    38bc:	b.n	34c2 <usb_isr+0x3d6>
    38be:	movw	r2, #8993	; 0x2321
    38c2:	cmp	r1, r2
    38c4:	beq.n	38b6 <usb_isr+0x7ca>
    38c6:	b.n	362a <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    38c8:	ldrh	r2, [r5, #2]
    38ca:	cmp	r2, #0
    38cc:	bne.w	362a <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    38d0:	ldr	r4, [pc, #376]	; (3a4c <usb_isr+0x960>)
    38d2:	str	r0, [sp, #4]
    38d4:	lsls	r1, r1, #2
    38d6:	add	r4, r1
    38d8:	ldrb	r1, [r4, #0]
    38da:	bic.w	r1, r1, #2
    38de:	strb	r1, [r4, #0]
    38e0:	b.n	34c2 <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    38e2:	bl	2e8c <usb_malloc>
				if (p) {
    38e6:	cmp	r0, #0
    38e8:	beq.w	3a58 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    38ec:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    38ee:	ldr	r2, [pc, #352]	; (3a50 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    38f0:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    38f4:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    38f8:	bl	2e8c <usb_malloc>
				if (p) {
    38fc:	cmp	r0, #0
    38fe:	beq.n	3a00 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    3900:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3902:	ldr	r2, [pc, #336]	; (3a54 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3904:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3908:	str.w	r2, [r9, #40]	; 0x28
    390c:	b.n	37ec <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    390e:	bl	2e8c <usb_malloc>
				if (p) {
    3912:	cmp	r0, #0
    3914:	beq.n	39c4 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    3916:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3918:	ldr	r2, [pc, #308]	; (3a50 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    391a:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    391e:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3922:	bl	2e8c <usb_malloc>
				if (p) {
    3926:	cmp	r0, #0
    3928:	beq.n	39b8 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    392a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    392c:	ldr	r2, [pc, #292]	; (3a54 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    392e:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3932:	str.w	r2, [r9, #168]	; 0xa8
    3936:	b.n	3852 <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3938:	bl	2e8c <usb_malloc>
				if (p) {
    393c:	cmp	r0, #0
    393e:	beq.w	3a70 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    3942:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3944:	ldr	r2, [pc, #264]	; (3a50 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3946:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    394a:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    394e:	bl	2e8c <usb_malloc>
				if (p) {
    3952:	cmp	r0, #0
    3954:	beq.w	3a64 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    3958:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    395a:	ldr	r2, [pc, #248]	; (3a54 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    395c:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3960:	str.w	r2, [r9, #136]	; 0x88
    3964:	b.n	383c <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3966:	bl	2e8c <usb_malloc>
				if (p) {
    396a:	cmp	r0, #0
    396c:	beq.n	39f4 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    396e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3970:	ldr	r2, [pc, #220]	; (3a50 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3972:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3976:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    397a:	bl	2e8c <usb_malloc>
				if (p) {
    397e:	cbz	r0, 39e8 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3980:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3982:	ldr	r2, [pc, #208]	; (3a54 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3984:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3988:	str.w	r2, [r9, #104]	; 0x68
    398c:	b.n	3824 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    398e:	bl	2e8c <usb_malloc>
				if (p) {
    3992:	cbz	r0, 39dc <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3994:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3996:	ldr	r2, [pc, #184]	; (3a50 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3998:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    399c:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    39a0:	bl	2e8c <usb_malloc>
				if (p) {
    39a4:	cbz	r0, 39d0 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    39a6:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    39a8:	ldr	r2, [pc, #168]	; (3a54 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    39aa:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    39ae:	str.w	r2, [r9, #72]	; 0x48
    39b2:	b.n	3808 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    39b4:	movs	r0, #2
    39b6:	b.n	36b2 <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    39b8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    39ba:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    39be:	adds	r2, #1
    39c0:	strb	r2, [r5, #0]
    39c2:	b.n	3852 <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    39c4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    39c6:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    39ca:	adds	r2, #1
    39cc:	strb	r2, [r5, #0]
    39ce:	b.n	3922 <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    39d0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    39d2:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    39d6:	adds	r2, #1
    39d8:	strb	r2, [r5, #0]
    39da:	b.n	3808 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    39dc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    39de:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    39e2:	adds	r2, #1
    39e4:	strb	r2, [r5, #0]
    39e6:	b.n	39a0 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    39e8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    39ea:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    39ee:	adds	r2, #1
    39f0:	strb	r2, [r5, #0]
    39f2:	b.n	3824 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    39f4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    39f6:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    39fa:	adds	r2, #1
    39fc:	strb	r2, [r5, #0]
    39fe:	b.n	397a <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3a00:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3a02:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    3a06:	adds	r2, #1
    3a08:	strb	r2, [r5, #0]
    3a0a:	b.n	37ec <usb_isr+0x700>
    3a0c:	.word	0x1fff19a8
    3a10:	.word	0x1fff1910
    3a14:	.word	0x1fff1968
    3a18:	.word	0x1fff197c
    3a1c:	.word	0x1fff18b8
    3a20:	.word	0x1fff1e38
    3a24:	.word	0x00005320
    3a28:	.word	0x1fff1999
    3a2c:	.word	0x400720c4
    3a30:	.word	0x400720c8
    3a34:	.word	0x400720cc
    3a38:	.word	0x400720d0
    3a3c:	.word	0x400720d4
    3a40:	.word	0x1fff0000
    3a44:	.word	0x00005328
    3a48:	.word	0x1fff199c
    3a4c:	.word	0x400720c0
    3a50:	.word	0x00400088
    3a54:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3a58:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3a5a:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    3a5e:	adds	r2, #1
    3a60:	strb	r2, [r5, #0]
    3a62:	b.n	38f8 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3a64:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3a66:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    3a6a:	adds	r2, #1
    3a6c:	strb	r2, [r5, #0]
    3a6e:	b.n	383c <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3a70:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3a72:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    3a76:	adds	r2, #1
    3a78:	strb	r2, [r5, #0]
    3a7a:	b.n	394e <usb_isr+0x862>
    3a7c:	cmp	r0, #64	; 0x40
    3a7e:	mov	ip, r0
    3a80:	it	cs
    3a82:	movcs.w	ip, #64	; 0x40
    3a86:	add.w	r3, r4, ip
    3a8a:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3a8c:	movs	r3, #1
    3a8e:	rsb	r0, ip, r0
    3a92:	mov.w	r8, ip, lsl #16
    3a96:	movs	r2, #0
    3a98:	str	r3, [sp, #4]
    3a9a:	b.n	34cc <usb_isr+0x3e0>

00003a9c <usb_init>:
}



void usb_init(void)
{
    3a9c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3aa0:	ldr	r4, [pc, #156]	; (3b40 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3aa2:	bl	42dc <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3aa6:	movs	r2, #0
    3aa8:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3aac:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3aae:	str	r2, [r3, #0]
		table[i].addr = 0;
    3ab0:	str	r2, [r3, #4]
    3ab2:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3ab4:	cmp	r3, r0
		table[i].desc = 0;
    3ab6:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3aba:	bne.n	3aae <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3abc:	ldr	r0, [pc, #132]	; (3b44 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3abe:	ldr	r2, [pc, #136]	; (3b48 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3ac0:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3ac2:	ldr.w	lr, [pc, #156]	; 3b60 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3ac6:	ldr	r6, [pc, #132]	; (3b4c <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3ac8:	ldr	r5, [pc, #132]	; (3b50 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3aca:	ldr	r7, [pc, #136]	; (3b54 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3acc:	ldr.w	ip, [pc, #148]	; 3b64 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    3ad0:	ldr.w	r8, [pc, #148]	; 3b68 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3ad4:	orr.w	r3, r3, #262144	; 0x40000
    3ad8:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3ada:	ldr	r3, [r2, #0]
    3adc:	orr.w	r3, r3, #50331648	; 0x3000000
    3ae0:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3ae2:	movs	r3, #3
    3ae4:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3ae8:	movs	r3, #160	; 0xa0
    3aea:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3aec:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3af0:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3af4:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3af8:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3afa:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3afc:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3b00:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3b02:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3b04:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3b06:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3b08:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3b0a:	ldr	r5, [pc, #76]	; (3b58 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3b0c:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3b10:	ldr	r0, [pc, #72]	; (3b5c <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    3b12:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    3b16:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3b18:	movs	r3, #1
    3b1a:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3b1e:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    3b22:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3b26:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3b28:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    3b2a:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3b2e:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3b30:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3b32:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    3b36:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3b3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b3e:	nop
    3b40:	.word	0x1fff0000
    3b44:	.word	0x40048034
    3b48:	.word	0x4000d800
    3b4c:	.word	0x40072140
    3b50:	.word	0x4007209c
    3b54:	.word	0x400720b0
    3b58:	.word	0xe000e435
    3b5c:	.word	0xe000e104
    3b60:	.word	0x40072144
    3b64:	.word	0x40072080
    3b68:	.word	0x40072088

00003b6c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3b6c:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    3b6e:	ldr	r4, [pc, #176]	; (3c20 <yield+0xb4>)
    3b70:	ldrb	r3, [r4, #0]
    3b72:	cbz	r3, 3b76 <yield+0xa>
    3b74:	pop	{r3, r4, r5, pc}
	running = 1;
    3b76:	movs	r3, #1
    3b78:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3b7a:	bl	2098 <usb_serial_available>
	if (Serial.available()) serialEvent();
    3b7e:	cmp	r0, #0
    3b80:	bne.n	3c08 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    3b82:	bl	40ac <serial_available>
	if (Serial1.available()) serialEvent1();
    3b86:	cmp	r0, #0
    3b88:	bne.n	3c02 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    3b8a:	bl	3d94 <serial2_available>
	if (Serial2.available()) serialEvent2();
    3b8e:	cmp	r0, #0
    3b90:	bne.n	3bfc <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    3b92:	bl	43ac <serial3_available>
	if (Serial3.available()) serialEvent3();
    3b96:	cbnz	r0, 3bf6 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    3b98:	bl	3ec0 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3b9c:	cbnz	r0, 3bf0 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    3b9e:	bl	3c9c <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3ba2:	cbnz	r0, 3bea <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    3ba4:	bl	41d8 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    3ba8:	cbnz	r0, 3be4 <yield+0x78>
#endif
	running = 0;
    3baa:	movs	r3, #0
    3bac:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3bae:	mrs	r3, IPSR
		if (ipsr != 0) return;
    3bb2:	cmp	r3, #0
    3bb4:	bne.n	3b74 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3bb6:	mrs	r1, PRIMASK
		__disable_irq();
    3bba:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3bbc:	ldr	r3, [pc, #100]	; (3c24 <yield+0xb8>)
    3bbe:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    3bc0:	cbz	r0, 3c0e <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    3bc2:	ldr	r4, [pc, #100]	; (3c28 <yield+0xbc>)
    3bc4:	ldrb	r2, [r4, #0]
    3bc6:	cbnz	r2, 3c0e <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    3bc8:	ldr	r5, [r0, #20]
    3bca:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3bcc:	movs	r3, #1
    3bce:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    3bd0:	cbz	r5, 3c16 <yield+0xaa>
			firstYield->_prev = nullptr;
    3bd2:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3bd4:	cbnz	r1, 3bd8 <yield+0x6c>
    3bd6:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3bd8:	movs	r5, #0
    3bda:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    3bdc:	ldr	r3, [r0, #8]
    3bde:	blx	r3
		runningFromYield = false;
    3be0:	strb	r5, [r4, #0]
    3be2:	b.n	3b74 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    3be4:	bl	3c98 <serialEvent6()>
    3be8:	b.n	3baa <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3bea:	bl	3c30 <serialEvent5()>
    3bee:	b.n	3ba4 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3bf0:	bl	3c84 <serialEvent4()>
    3bf4:	b.n	3b9e <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    3bf6:	bl	44a8 <serialEvent3()>
    3bfa:	b.n	3b98 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    3bfc:	bl	3c80 <serialEvent2()>
    3c00:	b.n	3b92 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    3c02:	bl	44a4 <serialEvent1()>
    3c06:	b.n	3b8a <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    3c08:	bl	3c5c <serialEvent()>
    3c0c:	b.n	3b82 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3c0e:	cmp	r1, #0
    3c10:	bne.n	3b74 <yield+0x8>
    3c12:	cpsie	i
    3c14:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    3c16:	ldr	r3, [pc, #20]	; (3c2c <yield+0xc0>)
    3c18:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3c1a:	cmp	r1, #0
    3c1c:	bne.n	3bd8 <yield+0x6c>
    3c1e:	b.n	3bd6 <yield+0x6a>
    3c20:	.word	0x1fff19ad
    3c24:	.word	0x1fff1cc0
    3c28:	.word	0x1fff1cc4
    3c2c:	.word	0x1fff1cbc

00003c30 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    3c30:	bx	lr
    3c32:	nop

00003c34 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3c34:	b.w	20b4 <usb_serial_flush_input>

00003c38 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    3c38:	b.w	2068 <usb_serial_peekchar>

00003c3c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3c3c:	b.w	2020 <usb_serial_getchar>

00003c40 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3c40:	b.w	2098 <usb_serial_available>

00003c44 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3c44:	b.w	2254 <usb_serial_flush_output>

00003c48 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3c48:	b.w	220c <usb_serial_write_buffer_free>

00003c4c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3c4c:	mov	r0, r1
    3c4e:	mov	r1, r2
    3c50:	b.w	20ec <usb_serial_write>

00003c54 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3c54:	mov	r0, r1
    3c56:	b.w	21f4 <usb_serial_putchar>
    3c5a:	nop

00003c5c <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    3c5c:	bx	lr
    3c5e:	nop

00003c60 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3c60:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    3c62:	ldr	r2, [pc, #24]	; (3c7c <Print::println()+0x1c>)
	return write(buf, 2);
    3c64:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3c66:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    3c68:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3c6a:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3c6c:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3c6e:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    3c72:	movs	r2, #2
    3c74:	blx	r3
}
    3c76:	add	sp, #12
    3c78:	ldr.w	pc, [sp], #4
    3c7c:	.word	0x0000531c

00003c80 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    3c80:	bx	lr
    3c82:	nop

00003c84 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    3c84:	bx	lr
    3c86:	nop

00003c88 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3c88:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3c8a:	bl	490 <setup>
	while (1) {
		loop();
    3c8e:	bl	494 <loop>
		yield();
    3c92:	bl	3b6c <yield>
    3c96:	b.n	3c8e <main+0x6>

00003c98 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    3c98:	bx	lr
    3c9a:	nop

00003c9c <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3c9c:	ldr	r2, [pc, #20]	; (3cb4 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    3c9e:	ldr	r3, [pc, #24]	; (3cb8 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ca0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3ca2:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ca4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3ca6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3ca8:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    3caa:	it	cc
    3cac:	addcc	r0, #64	; 0x40
    3cae:	subs	r0, r0, r3
}
    3cb0:	bx	lr
    3cb2:	nop
    3cb4:	.word	0x1fff19b4
    3cb8:	.word	0x1fff19b5

00003cbc <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    3cbc:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    3cbe:	ldr	r3, [pc, #172]	; (3d6c <uart4_status_isr+0xb0>)
    3cc0:	ldrb	r2, [r3, #4]
    3cc2:	lsls	r4, r2, #26
    3cc4:	bpl.n	3d06 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3cc6:	ldr	r0, [pc, #168]	; (3d70 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3cc8:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3cca:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ccc:	ldr	r1, [pc, #164]	; (3d74 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3cce:	adds	r3, #1
    3cd0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cd2:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    3cd4:	it	gt
    3cd6:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cd8:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    3cda:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cdc:	beq.n	3ce6 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    3cde:	ldr	r4, [pc, #152]	; (3d78 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    3ce0:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3ce2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3ce4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3ce6:	ldr	r2, [pc, #148]	; (3d7c <uart4_status_isr+0xc0>)
    3ce8:	ldr	r1, [r2, #0]
    3cea:	cbz	r1, 3d06 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3cec:	ldr	r2, [pc, #144]	; (3d80 <uart4_status_isr+0xc4>)
    3cee:	ldrb	r2, [r2, #0]
    3cf0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3cf2:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3cf4:	itet	cc
    3cf6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3cfa:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    3cfc:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3cfe:	cmp	r3, #39	; 0x27
    3d00:	itt	gt
    3d02:	movgt	r3, #1
    3d04:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    3d06:	ldr	r2, [pc, #100]	; (3d6c <uart4_status_isr+0xb0>)
    3d08:	ldrb	r3, [r2, #3]
    3d0a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3d0c:	lsls	r0, r3, #24
    3d0e:	bmi.n	3d34 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    3d10:	lsls	r2, r3, #25
    3d12:	bpl.n	3d30 <uart4_status_isr+0x74>
    3d14:	ldr	r3, [pc, #84]	; (3d6c <uart4_status_isr+0xb0>)
    3d16:	ldrb	r3, [r3, #4]
    3d18:	lsls	r3, r3, #25
    3d1a:	bpl.n	3d30 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3d1c:	ldr	r3, [pc, #100]	; (3d84 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3d1e:	ldr	r1, [pc, #104]	; (3d88 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3d20:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    3d22:	movs	r2, #0
    3d24:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3d26:	cbz	r3, 3d2a <uart4_status_isr+0x6e>
    3d28:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    3d2a:	ldr	r3, [pc, #64]	; (3d6c <uart4_status_isr+0xb0>)
    3d2c:	movs	r2, #44	; 0x2c
    3d2e:	strb	r2, [r3, #3]
	}
}
    3d30:	pop	{r4, r5}
    3d32:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3d34:	ldrb	r1, [r2, #4]
    3d36:	lsls	r1, r1, #24
    3d38:	bpl.n	3d10 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    3d3a:	ldr	r1, [pc, #80]	; (3d8c <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3d3c:	ldr	r0, [pc, #64]	; (3d80 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3d3e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3d40:	ldrb	r1, [r0, #0]
    3d42:	uxtb	r1, r1
		if (head == tail) {
    3d44:	cmp	r4, r1
    3d46:	beq.n	3d64 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    3d48:	adds	r2, r1, #1
    3d4a:	cmp	r2, #39	; 0x27
    3d4c:	itt	hi
    3d4e:	movhi	r1, #0
    3d50:	movhi	r2, r1
			n = tx_buffer[tail];
    3d52:	ldr	r5, [pc, #60]	; (3d90 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3d54:	ldr	r4, [pc, #20]	; (3d6c <uart4_status_isr+0xb0>)
    3d56:	it	ls
    3d58:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3d5a:	ldrb	r2, [r5, r2]
    3d5c:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3d5e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3d60:	strb	r1, [r0, #0]
    3d62:	b.n	3d10 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    3d64:	movs	r1, #108	; 0x6c
    3d66:	strb	r1, [r2, #3]
    3d68:	b.n	3d10 <uart4_status_isr+0x54>
    3d6a:	nop
    3d6c:	.word	0x400ea000
    3d70:	.word	0x1fff19b4
    3d74:	.word	0x1fff19b5
    3d78:	.word	0x1fff19e0
    3d7c:	.word	0x1fff19b0
    3d80:	.word	0x1fff1a21
    3d84:	.word	0x1fff1a24
    3d88:	.word	0x1fff1a20
    3d8c:	.word	0x1fff1a28
    3d90:	.word	0x1fff19b8

00003d94 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3d94:	ldr	r2, [pc, #20]	; (3dac <serial2_available+0x18>)
	tail = rx_buffer_tail;
    3d96:	ldr	r3, [pc, #24]	; (3db0 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3d98:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3d9a:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3d9c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3d9e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3da0:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    3da2:	it	cc
    3da4:	addcc	r0, #64	; 0x40
    3da6:	subs	r0, r0, r3
}
    3da8:	bx	lr
    3daa:	nop
    3dac:	.word	0x1fff1a9c
    3db0:	.word	0x1fff1a31

00003db4 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    3db4:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3db6:	ldr	r3, [pc, #224]	; (3e98 <uart1_status_isr+0xe4>)
    3db8:	ldrb	r2, [r3, #4]
    3dba:	tst.w	r2, #48	; 0x30
    3dbe:	beq.n	3e1a <uart1_status_isr+0x66>
		__disable_irq();
    3dc0:	cpsid	i
		avail = UART1_RCFIFO;
    3dc2:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3dc4:	and.w	r2, r1, #255	; 0xff
    3dc8:	cmp	r1, #0
    3dca:	beq.n	3e48 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3dcc:	cpsie	i
			head = rx_buffer_head;
    3dce:	ldr	r7, [pc, #204]	; (3e9c <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3dd0:	ldr	r1, [pc, #204]	; (3ea0 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3dd2:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3dd4:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3dd6:	ldr	r6, [pc, #204]	; (3ea4 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3dd8:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3dda:	uxtb	r0, r0
			tail = rx_buffer_tail;
    3ddc:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    3dde:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3de0:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3de2:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3de4:	it	cs
    3de6:	movcs	r3, #0
				if (newhead != tail) {
    3de8:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3dea:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3dee:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3df0:	itt	ne
    3df2:	strbne	r1, [r6, r3]
    3df4:	movne	r0, r3
				}
			} while (--avail > 0);
    3df6:	ands.w	r2, r2, #255	; 0xff
    3dfa:	bne.n	3dde <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3dfc:	ldr	r3, [pc, #168]	; (3ea8 <uart1_status_isr+0xf4>)
    3dfe:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3e00:	uxtb	r2, r0
    3e02:	strb	r2, [r7, #0]
			if (rts_pin) {
    3e04:	cbz	r3, 3e1a <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3e06:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3e08:	itet	cc
    3e0a:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3e0e:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3e10:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3e12:	cmp	r0, #39	; 0x27
    3e14:	itt	gt
    3e16:	movgt	r2, #1
    3e18:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    3e1a:	ldr	r1, [pc, #124]	; (3e98 <uart1_status_isr+0xe4>)
    3e1c:	ldrb	r2, [r1, #3]
    3e1e:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3e20:	lsls	r5, r2, #24
    3e22:	bmi.n	3e52 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    3e24:	lsls	r2, r2, #25
    3e26:	bpl.n	3e44 <uart1_status_isr+0x90>
    3e28:	ldr	r3, [pc, #108]	; (3e98 <uart1_status_isr+0xe4>)
    3e2a:	ldrb	r3, [r3, #4]
    3e2c:	lsls	r3, r3, #25
    3e2e:	bpl.n	3e44 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3e30:	ldr	r3, [pc, #120]	; (3eac <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3e32:	ldr	r1, [pc, #124]	; (3eb0 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3e34:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3e36:	movs	r2, #0
    3e38:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3e3a:	cbz	r3, 3e3e <uart1_status_isr+0x8a>
    3e3c:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    3e3e:	ldr	r3, [pc, #88]	; (3e98 <uart1_status_isr+0xe4>)
    3e40:	movs	r2, #60	; 0x3c
    3e42:	strb	r2, [r3, #3]
	}
}
    3e44:	pop	{r4, r5, r6, r7}
    3e46:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3e48:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    3e4a:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3e4c:	strb	r2, [r3, #17]
			__enable_irq();
    3e4e:	cpsie	i
    3e50:	b.n	3e1a <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3e52:	ldrb	r3, [r1, #4]
    3e54:	lsls	r4, r3, #24
    3e56:	bpl.n	3e24 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    3e58:	ldr	r3, [pc, #88]	; (3eb4 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    3e5a:	ldr	r6, [pc, #92]	; (3eb8 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3e5c:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3e5e:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3e60:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3e62:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3e64:	cmp	r4, r3
    3e66:	beq.n	3e86 <uart1_status_isr+0xd2>
    3e68:	ldr	r5, [pc, #80]	; (3ebc <uart1_status_isr+0x108>)
    3e6a:	b.n	3e70 <uart1_status_isr+0xbc>
    3e6c:	cmp	r3, r4
    3e6e:	beq.n	3e86 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    3e70:	adds	r3, #1
    3e72:	cmp	r3, #40	; 0x28
    3e74:	it	cs
    3e76:	movcs	r3, #0
			avail = UART1_S1;
    3e78:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3e7a:	ldrb	r0, [r5, r3]
    3e7c:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    3e7e:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    3e80:	ldrb	r0, [r1, #20]
    3e82:	cmp	r0, #7
    3e84:	bls.n	3e6c <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    3e86:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3e88:	ldr	r1, [pc, #12]	; (3e98 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    3e8a:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3e8c:	ldrb	r3, [r1, #4]
    3e8e:	lsls	r0, r3, #24
    3e90:	itt	mi
    3e92:	movmi	r3, #124	; 0x7c
    3e94:	strbmi	r3, [r1, #3]
    3e96:	b.n	3e24 <uart1_status_isr+0x70>
    3e98:	.word	0x4006b000
    3e9c:	.word	0x1fff1a9c
    3ea0:	.word	0x1fff1a31
    3ea4:	.word	0x1fff1a5c
    3ea8:	.word	0x1fff1a2c
    3eac:	.word	0x1fff1aa0
    3eb0:	.word	0x1fff1a30
    3eb4:	.word	0x1fff1aa4
    3eb8:	.word	0x1fff1a9d
    3ebc:	.word	0x1fff1a34

00003ec0 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ec0:	ldr	r2, [pc, #20]	; (3ed8 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    3ec2:	ldr	r3, [pc, #24]	; (3edc <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ec4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3ec6:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3ec8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3eca:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3ecc:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    3ece:	it	cc
    3ed0:	addcc	r0, #64	; 0x40
    3ed2:	subs	r0, r0, r3
}
    3ed4:	bx	lr
    3ed6:	nop
    3ed8:	.word	0x1fff1aac
    3edc:	.word	0x1fff1aad

00003ee0 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    3ee0:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    3ee2:	ldr	r3, [pc, #172]	; (3f90 <uart3_status_isr+0xb0>)
    3ee4:	ldrb	r2, [r3, #4]
    3ee6:	lsls	r4, r2, #26
    3ee8:	bpl.n	3f2a <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3eea:	ldr	r0, [pc, #168]	; (3f94 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3eec:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3eee:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ef0:	ldr	r1, [pc, #164]	; (3f98 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3ef2:	adds	r3, #1
    3ef4:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ef6:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    3ef8:	it	gt
    3efa:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3efc:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    3efe:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3f00:	beq.n	3f0a <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    3f02:	ldr	r4, [pc, #152]	; (3f9c <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    3f04:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3f06:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3f08:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3f0a:	ldr	r2, [pc, #148]	; (3fa0 <uart3_status_isr+0xc0>)
    3f0c:	ldr	r1, [r2, #0]
    3f0e:	cbz	r1, 3f2a <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3f10:	ldr	r2, [pc, #144]	; (3fa4 <uart3_status_isr+0xc4>)
    3f12:	ldrb	r2, [r2, #0]
    3f14:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3f16:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3f18:	itet	cc
    3f1a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3f1e:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3f20:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3f22:	cmp	r3, #39	; 0x27
    3f24:	itt	gt
    3f26:	movgt	r3, #1
    3f28:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    3f2a:	ldr	r2, [pc, #100]	; (3f90 <uart3_status_isr+0xb0>)
    3f2c:	ldrb	r3, [r2, #3]
    3f2e:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3f30:	lsls	r0, r3, #24
    3f32:	bmi.n	3f58 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    3f34:	lsls	r2, r3, #25
    3f36:	bpl.n	3f54 <uart3_status_isr+0x74>
    3f38:	ldr	r3, [pc, #84]	; (3f90 <uart3_status_isr+0xb0>)
    3f3a:	ldrb	r3, [r3, #4]
    3f3c:	lsls	r3, r3, #25
    3f3e:	bpl.n	3f54 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3f40:	ldr	r3, [pc, #100]	; (3fa8 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3f42:	ldr	r1, [pc, #104]	; (3fac <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3f44:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3f46:	movs	r2, #0
    3f48:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3f4a:	cbz	r3, 3f4e <uart3_status_isr+0x6e>
    3f4c:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    3f4e:	ldr	r3, [pc, #64]	; (3f90 <uart3_status_isr+0xb0>)
    3f50:	movs	r2, #44	; 0x2c
    3f52:	strb	r2, [r3, #3]
	}
}
    3f54:	pop	{r4, r5}
    3f56:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3f58:	ldrb	r1, [r2, #4]
    3f5a:	lsls	r1, r1, #24
    3f5c:	bpl.n	3f34 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    3f5e:	ldr	r1, [pc, #80]	; (3fb0 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3f60:	ldr	r0, [pc, #64]	; (3fa4 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3f62:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3f64:	ldrb	r1, [r0, #0]
    3f66:	uxtb	r1, r1
		if (head == tail) {
    3f68:	cmp	r4, r1
    3f6a:	beq.n	3f88 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    3f6c:	adds	r2, r1, #1
    3f6e:	cmp	r2, #39	; 0x27
    3f70:	itt	hi
    3f72:	movhi	r1, #0
    3f74:	movhi	r2, r1
			n = tx_buffer[tail];
    3f76:	ldr	r5, [pc, #60]	; (3fb4 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3f78:	ldr	r4, [pc, #20]	; (3f90 <uart3_status_isr+0xb0>)
    3f7a:	it	ls
    3f7c:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3f7e:	ldrb	r2, [r5, r2]
    3f80:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3f82:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3f84:	strb	r1, [r0, #0]
    3f86:	b.n	3f34 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    3f88:	movs	r1, #108	; 0x6c
    3f8a:	strb	r1, [r2, #3]
    3f8c:	b.n	3f34 <uart3_status_isr+0x54>
    3f8e:	nop
    3f90:	.word	0x4006d000
    3f94:	.word	0x1fff1aac
    3f98:	.word	0x1fff1aad
    3f9c:	.word	0x1fff1ad8
    3fa0:	.word	0x1fff1aa8
    3fa4:	.word	0x1fff1b19
    3fa8:	.word	0x1fff1b1c
    3fac:	.word	0x1fff1b18
    3fb0:	.word	0x1fff1b20
    3fb4:	.word	0x1fff1ab0

00003fb8 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3fb8:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3fba:	ldr	r4, [pc, #64]	; (3ffc <fault_isr+0x44>)
    3fbc:	b.n	3fd0 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3fbe:	ldr	r3, [r4, #0]
    3fc0:	lsls	r1, r3, #21
    3fc2:	bmi.n	3fe0 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3fc4:	ldr	r3, [r4, #0]
    3fc6:	lsls	r2, r3, #20
    3fc8:	bmi.n	3fea <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3fca:	ldr	r3, [r4, #0]
    3fcc:	lsls	r3, r3, #19
    3fce:	bmi.n	3ff4 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3fd0:	ldr	r3, [r4, #0]
    3fd2:	lsls	r0, r3, #13
    3fd4:	bpl.n	3fbe <fault_isr+0x6>
    3fd6:	bl	30ec <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3fda:	ldr	r3, [r4, #0]
    3fdc:	lsls	r1, r3, #21
    3fde:	bpl.n	3fc4 <fault_isr+0xc>
    3fe0:	bl	40cc <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3fe4:	ldr	r3, [r4, #0]
    3fe6:	lsls	r2, r3, #20
    3fe8:	bpl.n	3fca <fault_isr+0x12>
    3fea:	bl	3db4 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3fee:	ldr	r3, [r4, #0]
    3ff0:	lsls	r3, r3, #19
    3ff2:	bpl.n	3fd0 <fault_isr+0x18>
    3ff4:	bl	43cc <uart2_status_isr>
    3ff8:	b.n	3fd0 <fault_isr+0x18>
    3ffa:	nop
    3ffc:	.word	0x40048034

00004000 <unused_isr>:
	}
}

void unused_isr(void)
{
    4000:	push	{r3, lr}
	fault_isr();
    4002:	bl	3fb8 <fault_isr>
    4006:	nop

00004008 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    4008:	ldr	r3, [pc, #4]	; (4010 <startup_early_hook+0x8>)
    400a:	movs	r2, #16
    400c:	strh	r2, [r3, #0]
    400e:	bx	lr
    4010:	.word	0x40052000

00004014 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    4014:	bx	lr
    4016:	nop

00004018 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    4018:	ldr	r1, [pc, #36]	; (4040 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    401a:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    401c:	ldr	r3, [r1, #0]
	if (incr != 0) {
    401e:	cbz	r0, 402e <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    4020:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    4022:	add	r0, r3
    4024:	sub.w	r2, r2, #8192	; 0x2000
    4028:	cmp	r0, r2
    402a:	bcs.n	4032 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    402c:	str	r0, [r1, #0]
	}
	return prev;
    402e:	mov	r0, r3
}
    4030:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    4032:	bl	46a0 <__errno>
    4036:	movs	r3, #12
    4038:	str	r3, [r0, #0]
			return (void *)-1;
    403a:	mov.w	r0, #4294967295
    403e:	pop	{r3, pc}
    4040:	.word	0x1fff0c70

00004044 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    4044:	ldr	r2, [pc, #32]	; (4068 <kinetis_hsrun_disable+0x24>)
    4046:	ldrb	r3, [r2, #0]
    4048:	cmp	r3, #128	; 0x80
    404a:	beq.n	4050 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    404c:	movs	r0, #0
}
    404e:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    4050:	ldr	r1, [pc, #24]	; (406c <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    4052:	ldr	r3, [pc, #28]	; (4070 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    4054:	ldr	r0, [pc, #28]	; (4074 <kinetis_hsrun_disable+0x30>)
    4056:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    4058:	movs	r1, #0
    405a:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    405c:	ldrb	r3, [r2, #0]
    405e:	cmp	r3, #128	; 0x80
    4060:	beq.n	405c <kinetis_hsrun_disable+0x18>
		return 1;
    4062:	movs	r0, #1
    4064:	bx	lr
    4066:	nop
    4068:	.word	0x4007e003
    406c:	.word	0x40048044
    4070:	.word	0x4007e001
    4074:	.word	0x22280000

00004078 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    4078:	ldr	r2, [pc, #36]	; (40a0 <kinetis_hsrun_enable+0x28>)
    407a:	ldrb	r3, [r2, #0]
    407c:	cmp	r3, #1
    407e:	beq.n	4084 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    4080:	movs	r0, #0
}
    4082:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    4084:	add.w	r3, r3, #1073741824	; 0x40000000
    4088:	add.w	r3, r3, #516096	; 0x7e000
    408c:	movs	r1, #96	; 0x60
    408e:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    4090:	ldrb	r3, [r2, #0]
    4092:	cmp	r3, #128	; 0x80
    4094:	bne.n	4090 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    4096:	ldr	r3, [pc, #12]	; (40a4 <kinetis_hsrun_enable+0x2c>)
    4098:	ldr	r2, [pc, #12]	; (40a8 <kinetis_hsrun_enable+0x30>)
    409a:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    409c:	movs	r0, #1
    409e:	bx	lr
    40a0:	.word	0x4007e003
    40a4:	.word	0x40048044
    40a8:	.word	0x02060000

000040ac <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    40ac:	ldr	r2, [pc, #20]	; (40c4 <serial_available+0x18>)
	tail = rx_buffer_tail;
    40ae:	ldr	r3, [pc, #24]	; (40c8 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    40b0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    40b2:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    40b4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    40b6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    40b8:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    40ba:	it	cc
    40bc:	addcc	r0, #64	; 0x40
    40be:	subs	r0, r0, r3
}
    40c0:	bx	lr
    40c2:	nop
    40c4:	.word	0x1fff1b28
    40c8:	.word	0x1fff1b29

000040cc <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    40cc:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    40ce:	ldr	r3, [pc, #224]	; (41b0 <uart0_status_isr+0xe4>)
    40d0:	ldrb	r2, [r3, #4]
    40d2:	tst.w	r2, #48	; 0x30
    40d6:	beq.n	4132 <uart0_status_isr+0x66>
		__disable_irq();
    40d8:	cpsid	i
		avail = UART0_RCFIFO;
    40da:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    40dc:	and.w	r2, r1, #255	; 0xff
    40e0:	cmp	r1, #0
    40e2:	beq.n	4160 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    40e4:	cpsie	i
			head = rx_buffer_head;
    40e6:	ldr	r7, [pc, #204]	; (41b4 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    40e8:	ldr	r1, [pc, #204]	; (41b8 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    40ea:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    40ec:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    40ee:	ldr	r6, [pc, #204]	; (41bc <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    40f0:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    40f2:	uxtb	r0, r0
			tail = rx_buffer_tail;
    40f4:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    40f6:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    40f8:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    40fa:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    40fc:	it	cs
    40fe:	movcs	r3, #0
				if (newhead != tail) {
    4100:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    4102:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4106:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4108:	itt	ne
    410a:	strbne	r1, [r6, r3]
    410c:	movne	r0, r3
				}
			} while (--avail > 0);
    410e:	ands.w	r2, r2, #255	; 0xff
    4112:	bne.n	40f6 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    4114:	ldr	r3, [pc, #168]	; (41c0 <uart0_status_isr+0xf4>)
    4116:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4118:	uxtb	r2, r0
    411a:	strb	r2, [r7, #0]
			if (rts_pin) {
    411c:	cbz	r3, 4132 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    411e:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4120:	itet	cc
    4122:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    4126:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4128:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    412a:	cmp	r0, #39	; 0x27
    412c:	itt	gt
    412e:	movgt	r2, #1
    4130:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    4132:	ldr	r1, [pc, #124]	; (41b0 <uart0_status_isr+0xe4>)
    4134:	ldrb	r2, [r1, #3]
    4136:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4138:	lsls	r5, r2, #24
    413a:	bmi.n	416a <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    413c:	lsls	r2, r2, #25
    413e:	bpl.n	415c <uart0_status_isr+0x90>
    4140:	ldr	r3, [pc, #108]	; (41b0 <uart0_status_isr+0xe4>)
    4142:	ldrb	r3, [r3, #4]
    4144:	lsls	r3, r3, #25
    4146:	bpl.n	415c <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4148:	ldr	r3, [pc, #120]	; (41c4 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    414a:	ldr	r1, [pc, #124]	; (41c8 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    414c:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    414e:	movs	r2, #0
    4150:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4152:	cbz	r3, 4156 <uart0_status_isr+0x8a>
    4154:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    4156:	ldr	r3, [pc, #88]	; (41b0 <uart0_status_isr+0xe4>)
    4158:	movs	r2, #60	; 0x3c
    415a:	strb	r2, [r3, #3]
	}
}
    415c:	pop	{r4, r5, r6, r7}
    415e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    4160:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    4162:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    4164:	strb	r2, [r3, #17]
			__enable_irq();
    4166:	cpsie	i
    4168:	b.n	4132 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    416a:	ldrb	r3, [r1, #4]
    416c:	lsls	r4, r3, #24
    416e:	bpl.n	413c <uart0_status_isr+0x70>
		head = tx_buffer_head;
    4170:	ldr	r3, [pc, #88]	; (41cc <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    4172:	ldr	r6, [pc, #92]	; (41d0 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4174:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    4176:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4178:	uxtb	r4, r4
		tail = tx_buffer_tail;
    417a:	uxtb	r3, r3
		do {
			if (tail == head) break;
    417c:	cmp	r4, r3
    417e:	beq.n	419e <uart0_status_isr+0xd2>
    4180:	ldr	r5, [pc, #80]	; (41d4 <uart0_status_isr+0x108>)
    4182:	b.n	4188 <uart0_status_isr+0xbc>
    4184:	cmp	r3, r4
    4186:	beq.n	419e <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    4188:	adds	r3, #1
    418a:	cmp	r3, #64	; 0x40
    418c:	it	cs
    418e:	movcs	r3, #0
			avail = UART0_S1;
    4190:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    4192:	ldrb	r0, [r5, r3]
    4194:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    4196:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    4198:	ldrb	r0, [r1, #20]
    419a:	cmp	r0, #7
    419c:	bls.n	4184 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    419e:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    41a0:	ldr	r1, [pc, #12]	; (41b0 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    41a2:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    41a4:	ldrb	r3, [r1, #4]
    41a6:	lsls	r0, r3, #24
    41a8:	itt	mi
    41aa:	movmi	r3, #124	; 0x7c
    41ac:	strbmi	r3, [r1, #3]
    41ae:	b.n	413c <uart0_status_isr+0x70>
    41b0:	.word	0x4006a000
    41b4:	.word	0x1fff1b28
    41b8:	.word	0x1fff1b29
    41bc:	.word	0x1fff1b6c
    41c0:	.word	0x1fff1b24
    41c4:	.word	0x1fff1bb0
    41c8:	.word	0x1fff1bac
    41cc:	.word	0x1fff1bb4
    41d0:	.word	0x1fff1bad
    41d4:	.word	0x1fff1b2c

000041d8 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    41d8:	ldr	r2, [pc, #20]	; (41f0 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    41da:	ldr	r3, [pc, #24]	; (41f4 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    41dc:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    41de:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    41e0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    41e2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    41e4:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    41e6:	it	cc
    41e8:	addcc	r0, #64	; 0x40
    41ea:	subs	r0, r0, r3
}
    41ec:	bx	lr
    41ee:	nop
    41f0:	.word	0x1fff1bbc
    41f4:	.word	0x1fff1bbd

000041f8 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    41f8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    41fa:	ldr	r3, [pc, #176]	; (42ac <lpuart0_status_isr+0xb4>)
    41fc:	ldr	r2, [r3, #4]
    41fe:	lsls	r4, r2, #10
    4200:	bpl.n	4242 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4202:	ldr	r0, [pc, #172]	; (42b0 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    4204:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    4206:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4208:	ldr	r1, [pc, #168]	; (42b4 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    420a:	adds	r3, #1
    420c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    420e:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4210:	it	gt
    4212:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4214:	cmp	r3, r1
    4216:	beq.n	4222 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    4218:	ldr	r4, [pc, #156]	; (42b8 <lpuart0_status_isr+0xc0>)
    421a:	uxtb	r2, r2
			rx_buffer_head = head;
    421c:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    421e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4220:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4222:	ldr	r2, [pc, #152]	; (42bc <lpuart0_status_isr+0xc4>)
    4224:	ldr	r1, [r2, #0]
    4226:	cbz	r1, 4242 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4228:	ldr	r2, [pc, #148]	; (42c0 <lpuart0_status_isr+0xc8>)
    422a:	ldrb	r2, [r2, #0]
    422c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    422e:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    4230:	itet	cc
    4232:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    4236:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    4238:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    423a:	cmp	r3, #39	; 0x27
    423c:	itt	gt
    423e:	movgt	r3, #1
    4240:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    4242:	ldr	r2, [pc, #104]	; (42ac <lpuart0_status_isr+0xb4>)
    4244:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    4246:	lsls	r0, r3, #8
    4248:	bpl.n	4250 <lpuart0_status_isr+0x58>
    424a:	ldr	r2, [r2, #4]
    424c:	lsls	r1, r2, #8
    424e:	bmi.n	4274 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    4250:	lsls	r2, r3, #9
    4252:	bpl.n	4270 <lpuart0_status_isr+0x78>
    4254:	ldr	r3, [pc, #84]	; (42ac <lpuart0_status_isr+0xb4>)
    4256:	ldr	r3, [r3, #4]
    4258:	lsls	r3, r3, #9
    425a:	bpl.n	4270 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    425c:	ldr	r3, [pc, #100]	; (42c4 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    425e:	ldr	r1, [pc, #104]	; (42c8 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    4260:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    4262:	movs	r2, #0
    4264:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4266:	cbz	r3, 426a <lpuart0_status_isr+0x72>
    4268:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    426a:	ldr	r3, [pc, #96]	; (42cc <lpuart0_status_isr+0xd4>)
    426c:	movs	r2, #0
    426e:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    4270:	pop	{r4, r5}
    4272:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    4274:	ldr	r2, [pc, #88]	; (42d0 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    4276:	ldr	r1, [pc, #72]	; (42c0 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    4278:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    427a:	ldrb	r2, [r1, #0]
    427c:	uxtb	r2, r2
		if (head == tail) {
    427e:	cmp	r0, r2
    4280:	beq.n	429e <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    4282:	adds	r2, #1
    4284:	cmp	r2, #39	; 0x27
    4286:	itt	hi
    4288:	movhi	r0, #0
    428a:	movhi	r2, r0
			n = tx_buffer[tail];
    428c:	ldr	r5, [pc, #68]	; (42d4 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    428e:	ldr	r4, [pc, #28]	; (42ac <lpuart0_status_isr+0xb4>)
    4290:	it	ls
    4292:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4294:	ldrb	r2, [r5, r2]
    4296:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    4298:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    429a:	strb	r0, [r1, #0]
    429c:	b.n	4250 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    429e:	ldr	r0, [pc, #56]	; (42d8 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    42a0:	ldr	r2, [pc, #40]	; (42cc <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    42a2:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    42a4:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    42a6:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    42a8:	str	r1, [r2, #0]
    42aa:	b.n	4250 <lpuart0_status_isr+0x58>
    42ac:	.word	0x400c4000
    42b0:	.word	0x1fff1bbc
    42b4:	.word	0x1fff1bbd
    42b8:	.word	0x1fff1be8
    42bc:	.word	0x1fff1bb8
    42c0:	.word	0x1fff1c29
    42c4:	.word	0x1fff1c2c
    42c8:	.word	0x1fff1c28
    42cc:	.word	0x43880158
    42d0:	.word	0x1fff1c30
    42d4:	.word	0x1fff1bc0
    42d8:	.word	0x4388015c

000042dc <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    42dc:	push	{r4, lr}
    42de:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    42e0:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    42e2:	bl	4044 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    42e6:	ldr	r2, [pc, #96]	; (4348 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    42e8:	ldr	r3, [pc, #96]	; (434c <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    42ea:	ldr	r1, [pc, #100]	; (4350 <usb_init_serialnumber+0x74>)
    42ec:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    42ee:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    42f0:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    42f2:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    42f4:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    42f6:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    42f8:	ldrb	r3, [r2, #0]
    42fa:	lsls	r3, r3, #24
    42fc:	bpl.n	42f8 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    42fe:	ldr	r3, [pc, #84]	; (4354 <usb_init_serialnumber+0x78>)
    4300:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    4302:	bl	4078 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    4306:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4308:	ldr	r3, [pc, #76]	; (4358 <usb_init_serialnumber+0x7c>)
    430a:	cmp	r4, r3
    430c:	itt	ls
    430e:	addls.w	r4, r4, r4, lsl #2
    4312:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    4314:	mov	r0, r4
    4316:	ldr	r4, [pc, #68]	; (435c <usb_init_serialnumber+0x80>)
    4318:	add	r1, sp, #4
    431a:	movs	r2, #10
    431c:	bl	4360 <ultoa>
    4320:	add	r1, sp, #4
    4322:	mov	r0, r4
	for (i=0; i<10; i++) {
    4324:	movs	r3, #0
		char c = buf[i];
    4326:	ldrb.w	r2, [r1], #1
    432a:	adds	r3, #1
		if (!c) break;
    432c:	cbz	r2, 433e <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    432e:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4330:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    4334:	bne.n	4326 <usb_init_serialnumber+0x4a>
    4336:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4338:	strb	r3, [r4, #0]
}
    433a:	add	sp, #16
    433c:	pop	{r4, pc}
    433e:	lsls	r3, r3, #1
    4340:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4342:	strb	r3, [r4, #0]
}
    4344:	add	sp, #16
    4346:	pop	{r4, pc}
    4348:	.word	0x40020004
    434c:	.word	0x40020000
    4350:	.word	0x41070000
    4354:	.word	0x4002000c
    4358:	.word	0x0098967f
    435c:	.word	0x1fff0d54

00004360 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    4360:	push	{r4, r5, r6, r7}
    4362:	subs	r5, r1, #1
    4364:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    4366:	movs	r4, #0
    4368:	b.n	436c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    436a:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    436c:	udiv	r3, r0, r2
    4370:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4374:	cmp	r0, #9
    4376:	add.w	r7, r0, #48	; 0x30
    437a:	itet	hi
    437c:	addhi	r0, #55	; 0x37
    437e:	uxtbls	r0, r7
    4380:	uxtbhi	r0, r0
    4382:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    4386:	mov	r0, r3
    4388:	cmp	r3, #0
    438a:	bne.n	436a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    438c:	adds	r2, r1, r4
    438e:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    4390:	cbz	r4, 43a6 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    4392:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    4394:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    4398:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    439a:	adds	r3, #1
    439c:	subs	r0, r4, r3
    439e:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    43a0:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    43a4:	blt.n	4392 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    43a6:	mov	r0, r1
    43a8:	pop	{r4, r5, r6, r7}
    43aa:	bx	lr

000043ac <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    43ac:	ldr	r2, [pc, #20]	; (43c4 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    43ae:	ldr	r3, [pc, #24]	; (43c8 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    43b0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    43b2:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    43b4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    43b6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    43b8:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    43ba:	it	cc
    43bc:	addcc	r0, #64	; 0x40
    43be:	subs	r0, r0, r3
}
    43c0:	bx	lr
    43c2:	nop
    43c4:	.word	0x1fff1c38
    43c8:	.word	0x1fff1c39

000043cc <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    43cc:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    43ce:	ldr	r3, [pc, #172]	; (447c <uart2_status_isr+0xb0>)
    43d0:	ldrb	r2, [r3, #4]
    43d2:	lsls	r4, r2, #26
    43d4:	bpl.n	4416 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    43d6:	ldr	r0, [pc, #168]	; (4480 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    43d8:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    43da:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    43dc:	ldr	r1, [pc, #164]	; (4484 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    43de:	adds	r3, #1
    43e0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    43e2:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    43e4:	it	gt
    43e6:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    43e8:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    43ea:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    43ec:	beq.n	43f6 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    43ee:	ldr	r4, [pc, #152]	; (4488 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    43f0:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    43f2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    43f4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    43f6:	ldr	r2, [pc, #148]	; (448c <uart2_status_isr+0xc0>)
    43f8:	ldr	r1, [r2, #0]
    43fa:	cbz	r1, 4416 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    43fc:	ldr	r2, [pc, #144]	; (4490 <uart2_status_isr+0xc4>)
    43fe:	ldrb	r2, [r2, #0]
    4400:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4402:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4404:	itet	cc
    4406:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    440a:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    440c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    440e:	cmp	r3, #39	; 0x27
    4410:	itt	gt
    4412:	movgt	r3, #1
    4414:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    4416:	ldr	r2, [pc, #100]	; (447c <uart2_status_isr+0xb0>)
    4418:	ldrb	r3, [r2, #3]
    441a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    441c:	lsls	r0, r3, #24
    441e:	bmi.n	4444 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    4420:	lsls	r2, r3, #25
    4422:	bpl.n	4440 <uart2_status_isr+0x74>
    4424:	ldr	r3, [pc, #84]	; (447c <uart2_status_isr+0xb0>)
    4426:	ldrb	r3, [r3, #4]
    4428:	lsls	r3, r3, #25
    442a:	bpl.n	4440 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    442c:	ldr	r3, [pc, #100]	; (4494 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    442e:	ldr	r1, [pc, #104]	; (4498 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4430:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4432:	movs	r2, #0
    4434:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4436:	cbz	r3, 443a <uart2_status_isr+0x6e>
    4438:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    443a:	ldr	r3, [pc, #64]	; (447c <uart2_status_isr+0xb0>)
    443c:	movs	r2, #44	; 0x2c
    443e:	strb	r2, [r3, #3]
	}
}
    4440:	pop	{r4, r5}
    4442:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4444:	ldrb	r1, [r2, #4]
    4446:	lsls	r1, r1, #24
    4448:	bpl.n	4420 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    444a:	ldr	r1, [pc, #80]	; (449c <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    444c:	ldr	r0, [pc, #64]	; (4490 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    444e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4450:	ldrb	r1, [r0, #0]
    4452:	uxtb	r1, r1
		if (head == tail) {
    4454:	cmp	r4, r1
    4456:	beq.n	4474 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    4458:	adds	r2, r1, #1
    445a:	cmp	r2, #39	; 0x27
    445c:	itt	hi
    445e:	movhi	r1, #0
    4460:	movhi	r2, r1
			n = tx_buffer[tail];
    4462:	ldr	r5, [pc, #60]	; (44a0 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4464:	ldr	r4, [pc, #20]	; (447c <uart2_status_isr+0xb0>)
    4466:	it	ls
    4468:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    446a:	ldrb	r2, [r5, r2]
    446c:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    446e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4470:	strb	r1, [r0, #0]
    4472:	b.n	4420 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    4474:	movs	r1, #108	; 0x6c
    4476:	strb	r1, [r2, #3]
    4478:	b.n	4420 <uart2_status_isr+0x54>
    447a:	nop
    447c:	.word	0x4006c000
    4480:	.word	0x1fff1c38
    4484:	.word	0x1fff1c39
    4488:	.word	0x1fff1c64
    448c:	.word	0x1fff1c34
    4490:	.word	0x1fff1ca5
    4494:	.word	0x1fff1ca8
    4498:	.word	0x1fff1ca4
    449c:	.word	0x1fff1cac
    44a0:	.word	0x1fff1c3c

000044a4 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    44a4:	bx	lr
    44a6:	nop

000044a8 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    44a8:	bx	lr
    44aa:	nop

000044ac <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    44ac:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    44ae:	mrs	r2, PRIMASK
		__disable_irq();
    44b2:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    44b4:	ldrb	r3, [r0, #29]
    44b6:	cbnz	r3, 44c6 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    44b8:	ldrb	r1, [r0, #28]
    44ba:	cmp	r1, #1
    44bc:	beq.n	44d0 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    44be:	cmp	r1, #3
    44c0:	beq.n	44e4 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    44c2:	movs	r3, #1
    44c4:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    44c6:	cbnz	r2, 44ca <EventResponder::triggerEventNotImmediate()+0x1e>
    44c8:	cpsie	i
	}
	enableInterrupts(irq);
}
    44ca:	ldr.w	r4, [sp], #4
    44ce:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    44d0:	ldr	r4, [pc, #68]	; (4518 <EventResponder::triggerEventNotImmediate()+0x6c>)
    44d2:	ldr	r1, [r4, #0]
    44d4:	cbz	r1, 4500 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    44d6:	ldr	r1, [pc, #68]	; (451c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    44d8:	str	r3, [r0, #20]
				_prev = lastYield;
    44da:	ldr	r3, [r1, #0]
    44dc:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    44de:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    44e0:	str	r0, [r3, #20]
    44e2:	b.n	44c2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    44e4:	ldr	r4, [pc, #56]	; (4520 <EventResponder::triggerEventNotImmediate()+0x74>)
    44e6:	ldr	r1, [r4, #0]
    44e8:	cbz	r1, 450c <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    44ea:	ldr	r1, [pc, #56]	; (4524 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    44ec:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    44ee:	ldr	r3, [r1, #0]
    44f0:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    44f2:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    44f4:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    44f6:	ldr	r3, [pc, #48]	; (4528 <EventResponder::triggerEventNotImmediate()+0x7c>)
    44f8:	mov.w	r1, #268435456	; 0x10000000
    44fc:	str	r1, [r3, #0]
    44fe:	b.n	44c2 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    4500:	ldr	r3, [pc, #24]	; (451c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    4502:	str	r1, [r0, #20]
				_prev = nullptr;
    4504:	str	r1, [r0, #24]
				firstYield = this;
    4506:	str	r0, [r4, #0]
				lastYield = this;
    4508:	str	r0, [r3, #0]
    450a:	b.n	44c2 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    450c:	ldr	r3, [pc, #20]	; (4524 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    450e:	str	r1, [r0, #20]
				_prev = nullptr;
    4510:	str	r1, [r0, #24]
				firstInterrupt = this;
    4512:	str	r0, [r4, #0]
				lastInterrupt = this;
    4514:	str	r0, [r3, #0]
    4516:	b.n	44f6 <EventResponder::triggerEventNotImmediate()+0x4a>
    4518:	.word	0x1fff1cc0
    451c:	.word	0x1fff1cbc
    4520:	.word	0x1fff1cb0
    4524:	.word	0x1fff1cb4
    4528:	.word	0xe000ed04

0000452c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    452c:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    452e:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4530:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4532:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4534:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    4536:	beq.n	4540 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    4538:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    453c:	b.w	44ac <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4540:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    4542:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4546:	bx	r3

00004548 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    4548:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    454a:	mrs	r2, PRIMASK
		__disable_irq();
    454e:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4550:	ldr	r4, [pc, #48]	; (4584 <EventResponder::runFromInterrupt()+0x3c>)
    4552:	ldr	r0, [r4, #0]
		if (first) {
    4554:	cbz	r0, 4578 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4556:	ldr	r6, [pc, #48]	; (4588 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4558:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    455a:	ldr	r3, [r0, #20]
    455c:	str	r3, [r4, #0]
			if (firstInterrupt) {
    455e:	cbz	r3, 457e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4560:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4562:	cbnz	r2, 4566 <EventResponder::runFromInterrupt()+0x1e>
    4564:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    4566:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4568:	ldr	r3, [r0, #8]
    456a:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    456c:	mrs	r2, PRIMASK
		__disable_irq();
    4570:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4572:	ldr	r0, [r4, #0]
		if (first) {
    4574:	cmp	r0, #0
    4576:	bne.n	455a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4578:	cbnz	r2, 457c <EventResponder::runFromInterrupt()+0x34>
    457a:	cpsie	i
    457c:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    457e:	str	r3, [r6, #0]
    4580:	b.n	4562 <EventResponder::runFromInterrupt()+0x1a>
    4582:	nop
    4584:	.word	0x1fff1cb0
    4588:	.word	0x1fff1cb4

0000458c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    458c:	b.w	4548 <EventResponder::runFromInterrupt()>

00004590 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    4590:	ldr	r2, [pc, #96]	; (45f4 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    4592:	push	{r4, r5}
	if (listActive == nullptr) {
    4594:	ldr	r4, [r2, #0]
    4596:	cmp	r4, #0
    4598:	beq.n	45ea <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    459a:	ldr	r3, [r0, #0]
    459c:	ldr	r1, [r4, #0]
    459e:	cmp	r3, r1
    45a0:	bcs.n	45c0 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    45a2:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    45a4:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    45a6:	str	r4, [r0, #8]
		_prev = nullptr;
    45a8:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    45aa:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    45ac:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    45ae:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    45b0:	movs	r3, #2
    45b2:	strb	r3, [r0, #20]
}
    45b4:	pop	{r4, r5}
    45b6:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    45b8:	ldr	r1, [r2, #0]
    45ba:	cmp	r3, r1
    45bc:	mov	r4, r2
    45be:	bcc.n	45d2 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    45c0:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    45c2:	subs	r3, r3, r1
    45c4:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    45c6:	cmp	r2, #0
    45c8:	bne.n	45b8 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    45ca:	str	r2, [r0, #8]
		_prev = timer;
    45cc:	str	r4, [r0, #12]
		timer->_next = this;
    45ce:	str	r0, [r4, #8]
    45d0:	b.n	45b0 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    45d2:	ldr	r2, [r2, #12]
    45d4:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    45d6:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    45d8:	str	r0, [r4, #12]
				_prev->_next = this;
    45da:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    45dc:	subs	r3, r1, r3
				_state = TimerActive;
    45de:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    45e0:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    45e2:	str	r3, [r4, #0]
				_state = TimerActive;
    45e4:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    45e6:	pop	{r4, r5}
    45e8:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    45ea:	str	r4, [r0, #8]
		_prev = nullptr;
    45ec:	str	r4, [r0, #12]
		listActive = this;
    45ee:	str	r0, [r2, #0]
    45f0:	b.n	45b0 <MillisTimer::addToActiveList()+0x20>
    45f2:	nop
    45f4:	.word	0x1fff1cb8

000045f8 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    45f8:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    45fa:	ldr	r6, [pc, #136]	; (4684 <MillisTimer::runFromTimer()+0x8c>)
    45fc:	ldr	r4, [r6, #0]
	while (timer) {
    45fe:	cbz	r4, 464c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4600:	ldr	r3, [r4, #0]
    4602:	cmp	r3, #0
    4604:	bne.n	467c <MillisTimer::runFromTimer()+0x84>
    4606:	ldr	r7, [pc, #128]	; (4688 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    4608:	mov	r5, r3
    460a:	b.n	4616 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    460c:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    460e:	cbz	r4, 464c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4610:	ldr	r3, [r4, #0]
    4612:	cmp	r3, #0
    4614:	bne.n	467c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    4616:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    4618:	cbz	r3, 461c <MillisTimer::runFromTimer()+0x24>
    461a:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    461c:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    461e:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4620:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    4622:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4624:	ldr	r3, [r3, #0]
    4626:	cmp	r3, r7
    4628:	bne.n	466e <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    462a:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    462c:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    462e:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4630:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    4632:	beq.n	4676 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4634:	bl	44ac <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    4638:	ldr	r3, [r4, #4]
    463a:	cmp	r3, #0
    463c:	beq.n	460c <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    463e:	str	r3, [r4, #0]
				timer->addToActiveList();
    4640:	mov	r0, r4
    4642:	bl	4590 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    4646:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4648:	cmp	r4, #0
    464a:	bne.n	4610 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    464c:	mrs	r3, PRIMASK
		__disable_irq();
    4650:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4652:	ldr	r2, [pc, #56]	; (468c <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4654:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4656:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4658:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    465a:	cbnz	r3, 465e <MillisTimer::runFromTimer()+0x66>
    465c:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    465e:	cbz	r0, 466c <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4660:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    4662:	bl	4590 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    4666:	mov	r0, r4
    4668:	cmp	r0, #0
    466a:	bne.n	4660 <MillisTimer::runFromTimer()+0x68>
    466c:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    466e:	mov	r2, r4
    4670:	movs	r1, #0
    4672:	blx	r3
    4674:	b.n	4638 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4676:	ldr	r3, [r0, #8]
    4678:	blx	r3
    467a:	b.n	4638 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    467c:	subs	r3, #1
    467e:	str	r3, [r4, #0]
			break;
    4680:	b.n	464c <MillisTimer::runFromTimer()+0x54>
    4682:	nop
    4684:	.word	0x1fff1cb8
    4688:	.word	0x0000452d
    468c:	.word	0x1fff1cc8

00004690 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    4690:	ldr	r2, [pc, #8]	; (469c <systick_isr+0xc>)
    4692:	ldr	r3, [r2, #0]
    4694:	adds	r3, #1
    4696:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4698:	b.w	45f8 <MillisTimer::runFromTimer()>
    469c:	.word	0x1fff1850

000046a0 <__errno>:
    46a0:	ldr	r3, [pc, #4]	; (46a8 <__errno+0x8>)
    46a2:	ldr	r0, [r3, #0]
    46a4:	bx	lr
    46a6:	nop
    46a8:	.word	0x1fff1198

000046ac <__libc_init_array>:
    46ac:	push	{r4, r5, r6, lr}
    46ae:	ldr	r6, [pc, #60]	; (46ec <__libc_init_array+0x40>)
    46b0:	ldr	r5, [pc, #60]	; (46f0 <__libc_init_array+0x44>)
    46b2:	subs	r6, r6, r5
    46b4:	asrs	r6, r6, #2
    46b6:	it	ne
    46b8:	movne	r4, #0
    46ba:	beq.n	46c8 <__libc_init_array+0x1c>
    46bc:	adds	r4, #1
    46be:	ldr.w	r3, [r5], #4
    46c2:	blx	r3
    46c4:	cmp	r6, r4
    46c6:	bne.n	46bc <__libc_init_array+0x10>
    46c8:	ldr	r6, [pc, #40]	; (46f4 <__libc_init_array+0x48>)
    46ca:	ldr	r5, [pc, #44]	; (46f8 <__libc_init_array+0x4c>)
    46cc:	subs	r6, r6, r5
    46ce:	bl	5380 <_init>
    46d2:	asrs	r6, r6, #2
    46d4:	it	ne
    46d6:	movne	r4, #0
    46d8:	beq.n	46e8 <__libc_init_array+0x3c>
    46da:	adds	r4, #1
    46dc:	ldr.w	r3, [r5], #4
    46e0:	blx	r3
    46e2:	cmp	r6, r4
    46e4:	bne.n	46da <__libc_init_array+0x2e>
    46e6:	pop	{r4, r5, r6, pc}
    46e8:	pop	{r4, r5, r6, pc}
    46ea:	nop
    46ec:	.word	0x0000538c
    46f0:	.word	0x0000538c
    46f4:	.word	0x00005398
    46f8:	.word	0x0000538c

000046fc <malloc>:
    46fc:	ldr	r3, [pc, #8]	; (4708 <malloc+0xc>)
    46fe:	mov	r1, r0
    4700:	ldr	r0, [r3, #0]
    4702:	b.w	470c <_malloc_r>
    4706:	nop
    4708:	.word	0x1fff1198

0000470c <_malloc_r>:
    470c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4710:	add.w	r5, r1, #11
    4714:	cmp	r5, #22
    4716:	sub	sp, #12
    4718:	mov	r6, r0
    471a:	bls.w	485c <_malloc_r+0x150>
    471e:	bics.w	r5, r5, #7
    4722:	bmi.w	48a4 <_malloc_r+0x198>
    4726:	cmp	r1, r5
    4728:	bhi.w	48a4 <_malloc_r+0x198>
    472c:	bl	4c7c <__malloc_lock>
    4730:	cmp.w	r5, #504	; 0x1f8
    4734:	bcc.w	4c70 <_malloc_r+0x564>
    4738:	lsrs	r3, r5, #9
    473a:	beq.w	48b2 <_malloc_r+0x1a6>
    473e:	cmp	r3, #4
    4740:	bhi.w	4a4a <_malloc_r+0x33e>
    4744:	lsrs	r0, r5, #6
    4746:	add.w	lr, r0, #57	; 0x39
    474a:	mov.w	r3, lr, lsl #1
    474e:	adds	r0, #56	; 0x38
    4750:	ldr	r7, [pc, #784]	; (4a64 <_malloc_r+0x358>)
    4752:	add.w	r3, r7, r3, lsl #2
    4756:	sub.w	r1, r3, #8
    475a:	ldr	r4, [r3, #4]
    475c:	cmp	r1, r4
    475e:	bne.n	4770 <_malloc_r+0x64>
    4760:	b.n	48bc <_malloc_r+0x1b0>
    4762:	cmp	r2, #0
    4764:	bge.w	48c0 <_malloc_r+0x1b4>
    4768:	ldr	r4, [r4, #12]
    476a:	cmp	r1, r4
    476c:	beq.w	48bc <_malloc_r+0x1b0>
    4770:	ldr	r3, [r4, #4]
    4772:	bic.w	r3, r3, #3
    4776:	subs	r2, r3, r5
    4778:	cmp	r2, #15
    477a:	ble.n	4762 <_malloc_r+0x56>
    477c:	ldr	r1, [pc, #740]	; (4a64 <_malloc_r+0x358>)
    477e:	ldr	r4, [r7, #16]
    4780:	add.w	lr, r1, #8
    4784:	cmp	r4, lr
    4786:	beq.w	4af0 <_malloc_r+0x3e4>
    478a:	ldr	r3, [r4, #4]
    478c:	bic.w	r3, r3, #3
    4790:	subs	r2, r3, r5
    4792:	cmp	r2, #15
    4794:	bgt.w	4aca <_malloc_r+0x3be>
    4798:	cmp	r2, #0
    479a:	str.w	lr, [r1, #20]
    479e:	str.w	lr, [r1, #16]
    47a2:	bge.w	48e2 <_malloc_r+0x1d6>
    47a6:	cmp.w	r3, #512	; 0x200
    47aa:	bcs.w	4a7c <_malloc_r+0x370>
    47ae:	lsrs	r3, r3, #3
    47b0:	add.w	ip, r3, #1
    47b4:	movs	r2, #1
    47b6:	asrs	r3, r3, #2
    47b8:	lsl.w	r3, r2, r3
    47bc:	ldr	r2, [r1, #4]
    47be:	ldr.w	r8, [r1, ip, lsl #3]
    47c2:	str.w	r8, [r4, #8]
    47c6:	add.w	r9, r1, ip, lsl #3
    47ca:	orrs	r2, r3
    47cc:	sub.w	r3, r9, #8
    47d0:	str	r3, [r4, #12]
    47d2:	str	r2, [r1, #4]
    47d4:	str.w	r4, [r1, ip, lsl #3]
    47d8:	str.w	r4, [r8, #12]
    47dc:	asrs	r3, r0, #2
    47de:	movs	r4, #1
    47e0:	lsls	r4, r3
    47e2:	cmp	r4, r2
    47e4:	bhi.w	48fc <_malloc_r+0x1f0>
    47e8:	tst	r4, r2
    47ea:	bne.n	47fa <_malloc_r+0xee>
    47ec:	bic.w	r0, r0, #3
    47f0:	lsls	r4, r4, #1
    47f2:	tst	r4, r2
    47f4:	add.w	r0, r0, #4
    47f8:	beq.n	47f0 <_malloc_r+0xe4>
    47fa:	add.w	r9, r7, r0, lsl #3
    47fe:	mov	ip, r9
    4800:	mov	r8, r0
    4802:	ldr.w	r1, [ip, #12]
    4806:	cmp	ip, r1
    4808:	bne.n	481a <_malloc_r+0x10e>
    480a:	b.n	4af4 <_malloc_r+0x3e8>
    480c:	cmp	r2, #0
    480e:	bge.w	4b14 <_malloc_r+0x408>
    4812:	ldr	r1, [r1, #12]
    4814:	cmp	ip, r1
    4816:	beq.w	4af4 <_malloc_r+0x3e8>
    481a:	ldr	r3, [r1, #4]
    481c:	bic.w	r3, r3, #3
    4820:	subs	r2, r3, r5
    4822:	cmp	r2, #15
    4824:	ble.n	480c <_malloc_r+0x100>
    4826:	mov	r4, r1
    4828:	ldr.w	ip, [r1, #12]
    482c:	ldr.w	r8, [r4, #8]!
    4830:	adds	r3, r1, r5
    4832:	orr.w	r5, r5, #1
    4836:	str	r5, [r1, #4]
    4838:	orr.w	r1, r2, #1
    483c:	str.w	ip, [r8, #12]
    4840:	mov	r0, r6
    4842:	str.w	r8, [ip, #8]
    4846:	str	r3, [r7, #20]
    4848:	str	r3, [r7, #16]
    484a:	str.w	lr, [r3, #12]
    484e:	str.w	lr, [r3, #8]
    4852:	str	r1, [r3, #4]
    4854:	str	r2, [r3, r2]
    4856:	bl	4c80 <__malloc_unlock>
    485a:	b.n	489c <_malloc_r+0x190>
    485c:	cmp	r1, #16
    485e:	bhi.n	48a4 <_malloc_r+0x198>
    4860:	bl	4c7c <__malloc_lock>
    4864:	movs	r5, #16
    4866:	movs	r3, #6
    4868:	movs	r0, #2
    486a:	ldr	r7, [pc, #504]	; (4a64 <_malloc_r+0x358>)
    486c:	add.w	r3, r7, r3, lsl #2
    4870:	sub.w	r2, r3, #8
    4874:	ldr	r4, [r3, #4]
    4876:	cmp	r4, r2
    4878:	beq.w	4b06 <_malloc_r+0x3fa>
    487c:	ldr	r3, [r4, #4]
    487e:	ldr	r1, [r4, #12]
    4880:	ldr	r5, [r4, #8]
    4882:	bic.w	r3, r3, #3
    4886:	add	r3, r4
    4888:	mov	r0, r6
    488a:	ldr	r2, [r3, #4]
    488c:	str	r1, [r5, #12]
    488e:	orr.w	r2, r2, #1
    4892:	str	r5, [r1, #8]
    4894:	str	r2, [r3, #4]
    4896:	bl	4c80 <__malloc_unlock>
    489a:	adds	r4, #8
    489c:	mov	r0, r4
    489e:	add	sp, #12
    48a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48a4:	movs	r4, #0
    48a6:	movs	r3, #12
    48a8:	mov	r0, r4
    48aa:	str	r3, [r6, #0]
    48ac:	add	sp, #12
    48ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48b2:	movs	r3, #128	; 0x80
    48b4:	mov.w	lr, #64	; 0x40
    48b8:	movs	r0, #63	; 0x3f
    48ba:	b.n	4750 <_malloc_r+0x44>
    48bc:	mov	r0, lr
    48be:	b.n	477c <_malloc_r+0x70>
    48c0:	add	r3, r4
    48c2:	ldr	r1, [r4, #12]
    48c4:	ldr	r2, [r3, #4]
    48c6:	ldr	r5, [r4, #8]
    48c8:	orr.w	r2, r2, #1
    48cc:	str	r1, [r5, #12]
    48ce:	mov	r0, r6
    48d0:	str	r5, [r1, #8]
    48d2:	str	r2, [r3, #4]
    48d4:	bl	4c80 <__malloc_unlock>
    48d8:	adds	r4, #8
    48da:	mov	r0, r4
    48dc:	add	sp, #12
    48de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48e2:	add	r3, r4
    48e4:	mov	r0, r6
    48e6:	ldr	r2, [r3, #4]
    48e8:	orr.w	r2, r2, #1
    48ec:	str	r2, [r3, #4]
    48ee:	bl	4c80 <__malloc_unlock>
    48f2:	adds	r4, #8
    48f4:	mov	r0, r4
    48f6:	add	sp, #12
    48f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48fc:	ldr	r4, [r7, #8]
    48fe:	ldr	r3, [r4, #4]
    4900:	bic.w	r8, r3, #3
    4904:	cmp	r8, r5
    4906:	bcc.n	4912 <_malloc_r+0x206>
    4908:	rsb	r3, r5, r8
    490c:	cmp	r3, #15
    490e:	bgt.w	4a2a <_malloc_r+0x31e>
    4912:	ldr	r3, [pc, #340]	; (4a68 <_malloc_r+0x35c>)
    4914:	ldr.w	r9, [pc, #352]	; 4a78 <_malloc_r+0x36c>
    4918:	ldr	r2, [r3, #0]
    491a:	ldr.w	r3, [r9]
    491e:	adds	r3, #1
    4920:	add	r2, r5
    4922:	add.w	sl, r4, r8
    4926:	beq.w	4bea <_malloc_r+0x4de>
    492a:	add.w	r2, r2, #4096	; 0x1000
    492e:	adds	r2, #15
    4930:	bic.w	r2, r2, #4080	; 0xff0
    4934:	bic.w	r2, r2, #15
    4938:	mov	r1, r2
    493a:	mov	r0, r6
    493c:	str	r2, [sp, #4]
    493e:	bl	4c84 <_sbrk_r>
    4942:	cmp.w	r0, #4294967295
    4946:	mov	fp, r0
    4948:	ldr	r2, [sp, #4]
    494a:	beq.w	4bfe <_malloc_r+0x4f2>
    494e:	cmp	sl, r0
    4950:	bhi.w	4b4c <_malloc_r+0x440>
    4954:	ldr	r3, [pc, #276]	; (4a6c <_malloc_r+0x360>)
    4956:	ldr	r1, [r3, #0]
    4958:	cmp	sl, fp
    495a:	add	r1, r2
    495c:	str	r1, [r3, #0]
    495e:	beq.w	4c08 <_malloc_r+0x4fc>
    4962:	ldr.w	r0, [r9]
    4966:	ldr.w	lr, [pc, #272]	; 4a78 <_malloc_r+0x36c>
    496a:	adds	r0, #1
    496c:	ittet	ne
    496e:	rsbne	sl, sl, fp
    4972:	addne	r1, sl
    4974:	streq.w	fp, [lr]
    4978:	strne	r1, [r3, #0]
    497a:	ands.w	r1, fp, #7
    497e:	beq.w	4bb0 <_malloc_r+0x4a4>
    4982:	rsb	r0, r1, #8
    4986:	rsb	r1, r1, #4096	; 0x1000
    498a:	add	fp, r0
    498c:	adds	r1, #8
    498e:	add	r2, fp
    4990:	ubfx	r2, r2, #0, #12
    4994:	rsb	r9, r2, r1
    4998:	mov	r1, r9
    499a:	mov	r0, r6
    499c:	str	r3, [sp, #4]
    499e:	bl	4c84 <_sbrk_r>
    49a2:	adds	r3, r0, #1
    49a4:	ldr	r3, [sp, #4]
    49a6:	beq.w	4c28 <_malloc_r+0x51c>
    49aa:	rsb	r2, fp, r0
    49ae:	add	r2, r9
    49b0:	orr.w	r2, r2, #1
    49b4:	ldr	r1, [r3, #0]
    49b6:	str.w	fp, [r7, #8]
    49ba:	add	r1, r9
    49bc:	cmp	r4, r7
    49be:	str.w	r2, [fp, #4]
    49c2:	str	r1, [r3, #0]
    49c4:	ldr.w	r9, [pc, #164]	; 4a6c <_malloc_r+0x360>
    49c8:	beq.n	49f8 <_malloc_r+0x2ec>
    49ca:	cmp.w	r8, #15
    49ce:	bls.w	4bcc <_malloc_r+0x4c0>
    49d2:	ldr	r2, [r4, #4]
    49d4:	sub.w	r3, r8, #12
    49d8:	bic.w	r3, r3, #7
    49dc:	adds	r0, r4, r3
    49de:	and.w	r2, r2, #1
    49e2:	mov.w	lr, #5
    49e6:	orrs	r2, r3
    49e8:	cmp	r3, #15
    49ea:	str	r2, [r4, #4]
    49ec:	str.w	lr, [r0, #4]
    49f0:	str.w	lr, [r0, #8]
    49f4:	bhi.w	4c30 <_malloc_r+0x524>
    49f8:	ldr	r3, [pc, #116]	; (4a70 <_malloc_r+0x364>)
    49fa:	ldr	r4, [r7, #8]
    49fc:	ldr	r2, [r3, #0]
    49fe:	cmp	r1, r2
    4a00:	it	hi
    4a02:	strhi	r1, [r3, #0]
    4a04:	ldr	r3, [pc, #108]	; (4a74 <_malloc_r+0x368>)
    4a06:	ldr	r2, [r3, #0]
    4a08:	cmp	r1, r2
    4a0a:	ldr	r2, [r4, #4]
    4a0c:	it	hi
    4a0e:	strhi	r1, [r3, #0]
    4a10:	bic.w	r2, r2, #3
    4a14:	cmp	r5, r2
    4a16:	sub.w	r3, r2, r5
    4a1a:	bhi.n	4a20 <_malloc_r+0x314>
    4a1c:	cmp	r3, #15
    4a1e:	bgt.n	4a2a <_malloc_r+0x31e>
    4a20:	mov	r0, r6
    4a22:	bl	4c80 <__malloc_unlock>
    4a26:	movs	r4, #0
    4a28:	b.n	489c <_malloc_r+0x190>
    4a2a:	adds	r2, r4, r5
    4a2c:	orr.w	r3, r3, #1
    4a30:	orr.w	r5, r5, #1
    4a34:	str	r5, [r4, #4]
    4a36:	mov	r0, r6
    4a38:	str	r2, [r7, #8]
    4a3a:	str	r3, [r2, #4]
    4a3c:	bl	4c80 <__malloc_unlock>
    4a40:	adds	r4, #8
    4a42:	mov	r0, r4
    4a44:	add	sp, #12
    4a46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a4a:	cmp	r3, #20
    4a4c:	bls.n	4b32 <_malloc_r+0x426>
    4a4e:	cmp	r3, #84	; 0x54
    4a50:	bhi.w	4b9c <_malloc_r+0x490>
    4a54:	lsrs	r0, r5, #12
    4a56:	add.w	lr, r0, #111	; 0x6f
    4a5a:	mov.w	r3, lr, lsl #1
    4a5e:	adds	r0, #110	; 0x6e
    4a60:	b.n	4750 <_malloc_r+0x44>
    4a62:	nop
    4a64:	.word	0x1fff119c
    4a68:	.word	0x1fff1cd4
    4a6c:	.word	0x1fff1cd8
    4a70:	.word	0x1fff1cd0
    4a74:	.word	0x1fff1ccc
    4a78:	.word	0x1fff15a8
    4a7c:	lsrs	r2, r3, #9
    4a7e:	cmp	r2, #4
    4a80:	bls.n	4b40 <_malloc_r+0x434>
    4a82:	cmp	r2, #20
    4a84:	bhi.w	4bee <_malloc_r+0x4e2>
    4a88:	add.w	r1, r2, #92	; 0x5c
    4a8c:	lsls	r1, r1, #1
    4a8e:	adds	r2, #91	; 0x5b
    4a90:	add.w	ip, r7, r1, lsl #2
    4a94:	ldr.w	r1, [r7, r1, lsl #2]
    4a98:	ldr.w	r8, [pc, #476]	; 4c78 <_malloc_r+0x56c>
    4a9c:	sub.w	ip, ip, #8
    4aa0:	cmp	ip, r1
    4aa2:	beq.w	4bb6 <_malloc_r+0x4aa>
    4aa6:	ldr	r2, [r1, #4]
    4aa8:	bic.w	r2, r2, #3
    4aac:	cmp	r3, r2
    4aae:	bcs.n	4ab6 <_malloc_r+0x3aa>
    4ab0:	ldr	r1, [r1, #8]
    4ab2:	cmp	ip, r1
    4ab4:	bne.n	4aa6 <_malloc_r+0x39a>
    4ab6:	ldr.w	ip, [r1, #12]
    4aba:	ldr	r2, [r7, #4]
    4abc:	str.w	ip, [r4, #12]
    4ac0:	str	r1, [r4, #8]
    4ac2:	str.w	r4, [ip, #8]
    4ac6:	str	r4, [r1, #12]
    4ac8:	b.n	47dc <_malloc_r+0xd0>
    4aca:	adds	r3, r4, r5
    4acc:	orr.w	r7, r2, #1
    4ad0:	orr.w	r5, r5, #1
    4ad4:	str	r5, [r4, #4]
    4ad6:	mov	r0, r6
    4ad8:	str	r3, [r1, #20]
    4ada:	str	r3, [r1, #16]
    4adc:	str.w	lr, [r3, #12]
    4ae0:	str.w	lr, [r3, #8]
    4ae4:	str	r7, [r3, #4]
    4ae6:	str	r2, [r3, r2]
    4ae8:	adds	r4, #8
    4aea:	bl	4c80 <__malloc_unlock>
    4aee:	b.n	489c <_malloc_r+0x190>
    4af0:	ldr	r2, [r1, #4]
    4af2:	b.n	47dc <_malloc_r+0xd0>
    4af4:	add.w	r8, r8, #1
    4af8:	tst.w	r8, #3
    4afc:	add.w	ip, ip, #8
    4b00:	bne.w	4802 <_malloc_r+0xf6>
    4b04:	b.n	4b68 <_malloc_r+0x45c>
    4b06:	ldr	r4, [r3, #12]
    4b08:	cmp	r3, r4
    4b0a:	it	eq
    4b0c:	addeq	r0, #2
    4b0e:	beq.w	477c <_malloc_r+0x70>
    4b12:	b.n	487c <_malloc_r+0x170>
    4b14:	add	r3, r1
    4b16:	mov	r4, r1
    4b18:	ldr	r2, [r3, #4]
    4b1a:	ldr	r1, [r1, #12]
    4b1c:	ldr.w	r5, [r4, #8]!
    4b20:	orr.w	r2, r2, #1
    4b24:	str	r2, [r3, #4]
    4b26:	mov	r0, r6
    4b28:	str	r1, [r5, #12]
    4b2a:	str	r5, [r1, #8]
    4b2c:	bl	4c80 <__malloc_unlock>
    4b30:	b.n	489c <_malloc_r+0x190>
    4b32:	add.w	lr, r3, #92	; 0x5c
    4b36:	add.w	r0, r3, #91	; 0x5b
    4b3a:	mov.w	r3, lr, lsl #1
    4b3e:	b.n	4750 <_malloc_r+0x44>
    4b40:	lsrs	r2, r3, #6
    4b42:	add.w	r1, r2, #57	; 0x39
    4b46:	lsls	r1, r1, #1
    4b48:	adds	r2, #56	; 0x38
    4b4a:	b.n	4a90 <_malloc_r+0x384>
    4b4c:	cmp	r4, r7
    4b4e:	ldr	r3, [pc, #296]	; (4c78 <_malloc_r+0x56c>)
    4b50:	beq.w	4954 <_malloc_r+0x248>
    4b54:	ldr	r4, [r3, #8]
    4b56:	ldr	r2, [r4, #4]
    4b58:	bic.w	r2, r2, #3
    4b5c:	b.n	4a14 <_malloc_r+0x308>
    4b5e:	ldr.w	r3, [r9], #-8
    4b62:	cmp	r9, r3
    4b64:	bne.w	4c6c <_malloc_r+0x560>
    4b68:	tst.w	r0, #3
    4b6c:	add.w	r0, r0, #4294967295
    4b70:	bne.n	4b5e <_malloc_r+0x452>
    4b72:	ldr	r3, [r7, #4]
    4b74:	bic.w	r3, r3, r4
    4b78:	str	r3, [r7, #4]
    4b7a:	lsls	r4, r4, #1
    4b7c:	cmp	r4, r3
    4b7e:	bhi.w	48fc <_malloc_r+0x1f0>
    4b82:	cmp	r4, #0
    4b84:	beq.w	48fc <_malloc_r+0x1f0>
    4b88:	tst	r4, r3
    4b8a:	mov	r0, r8
    4b8c:	bne.w	47fa <_malloc_r+0xee>
    4b90:	lsls	r4, r4, #1
    4b92:	tst	r4, r3
    4b94:	add.w	r0, r0, #4
    4b98:	beq.n	4b90 <_malloc_r+0x484>
    4b9a:	b.n	47fa <_malloc_r+0xee>
    4b9c:	cmp.w	r3, #340	; 0x154
    4ba0:	bhi.n	4bd4 <_malloc_r+0x4c8>
    4ba2:	lsrs	r0, r5, #15
    4ba4:	add.w	lr, r0, #120	; 0x78
    4ba8:	mov.w	r3, lr, lsl #1
    4bac:	adds	r0, #119	; 0x77
    4bae:	b.n	4750 <_malloc_r+0x44>
    4bb0:	mov.w	r1, #4096	; 0x1000
    4bb4:	b.n	498e <_malloc_r+0x282>
    4bb6:	movs	r1, #1
    4bb8:	ldr.w	r3, [r8, #4]
    4bbc:	asrs	r2, r2, #2
    4bbe:	lsl.w	r2, r1, r2
    4bc2:	orrs	r2, r3
    4bc4:	str.w	r2, [r8, #4]
    4bc8:	mov	r1, ip
    4bca:	b.n	4abc <_malloc_r+0x3b0>
    4bcc:	movs	r3, #1
    4bce:	str.w	r3, [fp, #4]
    4bd2:	b.n	4a20 <_malloc_r+0x314>
    4bd4:	movw	r2, #1364	; 0x554
    4bd8:	cmp	r3, r2
    4bda:	bhi.n	4c1e <_malloc_r+0x512>
    4bdc:	lsrs	r0, r5, #18
    4bde:	add.w	lr, r0, #125	; 0x7d
    4be2:	mov.w	r3, lr, lsl #1
    4be6:	adds	r0, #124	; 0x7c
    4be8:	b.n	4750 <_malloc_r+0x44>
    4bea:	adds	r2, #16
    4bec:	b.n	4938 <_malloc_r+0x22c>
    4bee:	cmp	r2, #84	; 0x54
    4bf0:	bhi.n	4c40 <_malloc_r+0x534>
    4bf2:	lsrs	r2, r3, #12
    4bf4:	add.w	r1, r2, #111	; 0x6f
    4bf8:	lsls	r1, r1, #1
    4bfa:	adds	r2, #110	; 0x6e
    4bfc:	b.n	4a90 <_malloc_r+0x384>
    4bfe:	ldr	r4, [r7, #8]
    4c00:	ldr	r2, [r4, #4]
    4c02:	bic.w	r2, r2, #3
    4c06:	b.n	4a14 <_malloc_r+0x308>
    4c08:	ubfx	r0, sl, #0, #12
    4c0c:	cmp	r0, #0
    4c0e:	bne.w	4962 <_malloc_r+0x256>
    4c12:	add	r2, r8
    4c14:	ldr	r3, [r7, #8]
    4c16:	orr.w	r2, r2, #1
    4c1a:	str	r2, [r3, #4]
    4c1c:	b.n	49f8 <_malloc_r+0x2ec>
    4c1e:	movs	r3, #254	; 0xfe
    4c20:	mov.w	lr, #127	; 0x7f
    4c24:	movs	r0, #126	; 0x7e
    4c26:	b.n	4750 <_malloc_r+0x44>
    4c28:	movs	r2, #1
    4c2a:	mov.w	r9, #0
    4c2e:	b.n	49b4 <_malloc_r+0x2a8>
    4c30:	add.w	r1, r4, #8
    4c34:	mov	r0, r6
    4c36:	bl	4d8c <_free_r>
    4c3a:	ldr.w	r1, [r9]
    4c3e:	b.n	49f8 <_malloc_r+0x2ec>
    4c40:	cmp.w	r2, #340	; 0x154
    4c44:	bhi.n	4c52 <_malloc_r+0x546>
    4c46:	lsrs	r2, r3, #15
    4c48:	add.w	r1, r2, #120	; 0x78
    4c4c:	lsls	r1, r1, #1
    4c4e:	adds	r2, #119	; 0x77
    4c50:	b.n	4a90 <_malloc_r+0x384>
    4c52:	movw	r1, #1364	; 0x554
    4c56:	cmp	r2, r1
    4c58:	bhi.n	4c66 <_malloc_r+0x55a>
    4c5a:	lsrs	r2, r3, #18
    4c5c:	add.w	r1, r2, #125	; 0x7d
    4c60:	lsls	r1, r1, #1
    4c62:	adds	r2, #124	; 0x7c
    4c64:	b.n	4a90 <_malloc_r+0x384>
    4c66:	movs	r1, #254	; 0xfe
    4c68:	movs	r2, #126	; 0x7e
    4c6a:	b.n	4a90 <_malloc_r+0x384>
    4c6c:	ldr	r3, [r7, #4]
    4c6e:	b.n	4b7a <_malloc_r+0x46e>
    4c70:	lsrs	r0, r5, #3
    4c72:	adds	r3, r0, #1
    4c74:	lsls	r3, r3, #1
    4c76:	b.n	486a <_malloc_r+0x15e>
    4c78:	.word	0x1fff119c

00004c7c <__malloc_lock>:
    4c7c:	bx	lr
    4c7e:	nop

00004c80 <__malloc_unlock>:
    4c80:	bx	lr
    4c82:	nop

00004c84 <_sbrk_r>:
    4c84:	push	{r3, r4, r5, lr}
    4c86:	ldr	r4, [pc, #28]	; (4ca4 <_sbrk_r+0x20>)
    4c88:	movs	r3, #0
    4c8a:	mov	r5, r0
    4c8c:	mov	r0, r1
    4c8e:	str	r3, [r4, #0]
    4c90:	bl	4018 <_sbrk>
    4c94:	adds	r3, r0, #1
    4c96:	beq.n	4c9a <_sbrk_r+0x16>
    4c98:	pop	{r3, r4, r5, pc}
    4c9a:	ldr	r3, [r4, #0]
    4c9c:	cmp	r3, #0
    4c9e:	beq.n	4c98 <_sbrk_r+0x14>
    4ca0:	str	r3, [r5, #0]
    4ca2:	pop	{r3, r4, r5, pc}
    4ca4:	.word	0x1fff1e44

00004ca8 <register_fini>:
    4ca8:	ldr	r3, [pc, #8]	; (4cb4 <register_fini+0xc>)
    4caa:	cbz	r3, 4cb2 <register_fini+0xa>
    4cac:	ldr	r0, [pc, #8]	; (4cb8 <register_fini+0x10>)
    4cae:	b.w	4cbc <atexit>
    4cb2:	bx	lr
    4cb4:	.word	0x00000000
    4cb8:	.word	0x00004cc9

00004cbc <atexit>:
    4cbc:	movs	r3, #0
    4cbe:	mov	r1, r0
    4cc0:	mov	r2, r3
    4cc2:	mov	r0, r3
    4cc4:	b.w	4f5c <__register_exitproc>

00004cc8 <__libc_fini_array>:
    4cc8:	push	{r3, r4, r5, lr}
    4cca:	ldr	r5, [pc, #28]	; (4ce8 <__libc_fini_array+0x20>)
    4ccc:	ldr	r4, [pc, #28]	; (4cec <__libc_fini_array+0x24>)
    4cce:	subs	r4, r5, r4
    4cd0:	asrs	r4, r4, #2
    4cd2:	beq.n	4ce0 <__libc_fini_array+0x18>
    4cd4:	subs	r4, #1
    4cd6:	ldr.w	r3, [r5, #-4]!
    4cda:	blx	r3
    4cdc:	cmp	r4, #0
    4cde:	bne.n	4cd4 <__libc_fini_array+0xc>
    4ce0:	ldmia.w	sp!, {r3, r4, r5, lr}
    4ce4:	b.w	5398 <__init_array_end>
	...

00004cf0 <_malloc_trim_r>:
    4cf0:	push	{r3, r4, r5, r6, r7, lr}
    4cf2:	ldr	r7, [pc, #140]	; (4d80 <_malloc_trim_r+0x90>)
    4cf4:	mov	r4, r1
    4cf6:	mov	r6, r0
    4cf8:	bl	4c7c <__malloc_lock>
    4cfc:	ldr	r3, [r7, #8]
    4cfe:	ldr	r5, [r3, #4]
    4d00:	bic.w	r5, r5, #3
    4d04:	subs	r1, r5, r4
    4d06:	addw	r1, r1, #4079	; 0xfef
    4d0a:	bic.w	r1, r1, #4080	; 0xff0
    4d0e:	bic.w	r1, r1, #15
    4d12:	sub.w	r4, r1, #4096	; 0x1000
    4d16:	cmp.w	r4, #4096	; 0x1000
    4d1a:	blt.n	4d2c <_malloc_trim_r+0x3c>
    4d1c:	movs	r1, #0
    4d1e:	mov	r0, r6
    4d20:	bl	4c84 <_sbrk_r>
    4d24:	ldr	r3, [r7, #8]
    4d26:	add	r3, r5
    4d28:	cmp	r0, r3
    4d2a:	beq.n	4d36 <_malloc_trim_r+0x46>
    4d2c:	mov	r0, r6
    4d2e:	bl	4c80 <__malloc_unlock>
    4d32:	movs	r0, #0
    4d34:	pop	{r3, r4, r5, r6, r7, pc}
    4d36:	negs	r1, r4
    4d38:	mov	r0, r6
    4d3a:	bl	4c84 <_sbrk_r>
    4d3e:	adds	r0, #1
    4d40:	beq.n	4d5e <_malloc_trim_r+0x6e>
    4d42:	ldr	r3, [pc, #64]	; (4d84 <_malloc_trim_r+0x94>)
    4d44:	ldr	r2, [r7, #8]
    4d46:	ldr	r1, [r3, #0]
    4d48:	subs	r5, r5, r4
    4d4a:	orr.w	r5, r5, #1
    4d4e:	mov	r0, r6
    4d50:	subs	r1, r1, r4
    4d52:	str	r5, [r2, #4]
    4d54:	str	r1, [r3, #0]
    4d56:	bl	4c80 <__malloc_unlock>
    4d5a:	movs	r0, #1
    4d5c:	pop	{r3, r4, r5, r6, r7, pc}
    4d5e:	movs	r1, #0
    4d60:	mov	r0, r6
    4d62:	bl	4c84 <_sbrk_r>
    4d66:	ldr	r2, [r7, #8]
    4d68:	subs	r3, r0, r2
    4d6a:	cmp	r3, #15
    4d6c:	ble.n	4d2c <_malloc_trim_r+0x3c>
    4d6e:	ldr	r4, [pc, #24]	; (4d88 <_malloc_trim_r+0x98>)
    4d70:	ldr	r1, [pc, #16]	; (4d84 <_malloc_trim_r+0x94>)
    4d72:	ldr	r4, [r4, #0]
    4d74:	orr.w	r3, r3, #1
    4d78:	subs	r0, r0, r4
    4d7a:	str	r3, [r2, #4]
    4d7c:	str	r0, [r1, #0]
    4d7e:	b.n	4d2c <_malloc_trim_r+0x3c>
    4d80:	.word	0x1fff119c
    4d84:	.word	0x1fff1cd8
    4d88:	.word	0x1fff15a8

00004d8c <_free_r>:
    4d8c:	cmp	r1, #0
    4d8e:	beq.n	4e1c <_free_r+0x90>
    4d90:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d94:	mov	r5, r1
    4d96:	mov	r8, r0
    4d98:	bl	4c7c <__malloc_lock>
    4d9c:	ldr.w	r7, [r5, #-4]
    4da0:	ldr	r1, [pc, #424]	; (4f4c <_free_r+0x1c0>)
    4da2:	bic.w	r3, r7, #1
    4da6:	sub.w	r4, r5, #8
    4daa:	adds	r2, r4, r3
    4dac:	ldr	r6, [r1, #8]
    4dae:	ldr	r0, [r2, #4]
    4db0:	cmp	r2, r6
    4db2:	bic.w	r0, r0, #3
    4db6:	beq.n	4e7e <_free_r+0xf2>
    4db8:	lsls	r6, r7, #31
    4dba:	str	r0, [r2, #4]
    4dbc:	bmi.n	4dd6 <_free_r+0x4a>
    4dbe:	ldr.w	r7, [r5, #-8]
    4dc2:	subs	r4, r4, r7
    4dc4:	add.w	lr, r1, #8
    4dc8:	ldr	r5, [r4, #8]
    4dca:	cmp	r5, lr
    4dcc:	add	r3, r7
    4dce:	beq.n	4eb0 <_free_r+0x124>
    4dd0:	ldr	r7, [r4, #12]
    4dd2:	str	r7, [r5, #12]
    4dd4:	str	r5, [r7, #8]
    4dd6:	adds	r5, r2, r0
    4dd8:	ldr	r5, [r5, #4]
    4dda:	lsls	r5, r5, #31
    4ddc:	bpl.n	4e64 <_free_r+0xd8>
    4dde:	orr.w	r2, r3, #1
    4de2:	str	r2, [r4, #4]
    4de4:	str	r3, [r4, r3]
    4de6:	cmp.w	r3, #512	; 0x200
    4dea:	bcs.n	4e1e <_free_r+0x92>
    4dec:	lsrs	r3, r3, #3
    4dee:	adds	r2, r3, #1
    4df0:	ldr	r5, [r1, #4]
    4df2:	ldr.w	r7, [r1, r2, lsl #3]
    4df6:	str	r7, [r4, #8]
    4df8:	movs	r0, #1
    4dfa:	asrs	r3, r3, #2
    4dfc:	lsl.w	r3, r0, r3
    4e00:	add.w	r0, r1, r2, lsl #3
    4e04:	orrs	r5, r3
    4e06:	subs	r0, #8
    4e08:	str	r0, [r4, #12]
    4e0a:	str	r5, [r1, #4]
    4e0c:	str.w	r4, [r1, r2, lsl #3]
    4e10:	str	r4, [r7, #12]
    4e12:	mov	r0, r8
    4e14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4e18:	b.w	4c80 <__malloc_unlock>
    4e1c:	bx	lr
    4e1e:	lsrs	r2, r3, #9
    4e20:	cmp	r2, #4
    4e22:	bhi.n	4ecc <_free_r+0x140>
    4e24:	lsrs	r2, r3, #6
    4e26:	add.w	r7, r2, #57	; 0x39
    4e2a:	lsls	r7, r7, #1
    4e2c:	add.w	r5, r2, #56	; 0x38
    4e30:	add.w	r0, r1, r7, lsl #2
    4e34:	ldr.w	r2, [r1, r7, lsl #2]
    4e38:	ldr	r1, [pc, #272]	; (4f4c <_free_r+0x1c0>)
    4e3a:	subs	r0, #8
    4e3c:	cmp	r0, r2
    4e3e:	beq.n	4edc <_free_r+0x150>
    4e40:	ldr	r1, [r2, #4]
    4e42:	bic.w	r1, r1, #3
    4e46:	cmp	r3, r1
    4e48:	bcs.n	4e50 <_free_r+0xc4>
    4e4a:	ldr	r2, [r2, #8]
    4e4c:	cmp	r0, r2
    4e4e:	bne.n	4e40 <_free_r+0xb4>
    4e50:	ldr	r0, [r2, #12]
    4e52:	str	r0, [r4, #12]
    4e54:	str	r2, [r4, #8]
    4e56:	str	r4, [r0, #8]
    4e58:	str	r4, [r2, #12]
    4e5a:	mov	r0, r8
    4e5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4e60:	b.w	4c80 <__malloc_unlock>
    4e64:	ldr	r5, [r2, #8]
    4e66:	ldr	r7, [pc, #232]	; (4f50 <_free_r+0x1c4>)
    4e68:	cmp	r5, r7
    4e6a:	add	r3, r0
    4e6c:	beq.n	4eee <_free_r+0x162>
    4e6e:	ldr	r0, [r2, #12]
    4e70:	str	r0, [r5, #12]
    4e72:	orr.w	r2, r3, #1
    4e76:	str	r5, [r0, #8]
    4e78:	str	r2, [r4, #4]
    4e7a:	str	r3, [r4, r3]
    4e7c:	b.n	4de6 <_free_r+0x5a>
    4e7e:	lsls	r7, r7, #31
    4e80:	add	r3, r0
    4e82:	bmi.n	4e94 <_free_r+0x108>
    4e84:	ldr.w	r2, [r5, #-8]
    4e88:	subs	r4, r4, r2
    4e8a:	add	r3, r2
    4e8c:	ldr	r0, [r4, #8]
    4e8e:	ldr	r2, [r4, #12]
    4e90:	str	r2, [r0, #12]
    4e92:	str	r0, [r2, #8]
    4e94:	ldr	r2, [pc, #188]	; (4f54 <_free_r+0x1c8>)
    4e96:	ldr	r2, [r2, #0]
    4e98:	orr.w	r0, r3, #1
    4e9c:	cmp	r3, r2
    4e9e:	str	r0, [r4, #4]
    4ea0:	str	r4, [r1, #8]
    4ea2:	bcc.n	4e12 <_free_r+0x86>
    4ea4:	ldr	r3, [pc, #176]	; (4f58 <_free_r+0x1cc>)
    4ea6:	mov	r0, r8
    4ea8:	ldr	r1, [r3, #0]
    4eaa:	bl	4cf0 <_malloc_trim_r>
    4eae:	b.n	4e12 <_free_r+0x86>
    4eb0:	adds	r1, r2, r0
    4eb2:	ldr	r1, [r1, #4]
    4eb4:	lsls	r1, r1, #31
    4eb6:	bmi.n	4f42 <_free_r+0x1b6>
    4eb8:	ldr	r1, [r2, #8]
    4eba:	ldr	r2, [r2, #12]
    4ebc:	str	r2, [r1, #12]
    4ebe:	add	r3, r0
    4ec0:	orr.w	r0, r3, #1
    4ec4:	str	r1, [r2, #8]
    4ec6:	str	r0, [r4, #4]
    4ec8:	str	r3, [r4, r3]
    4eca:	b.n	4e12 <_free_r+0x86>
    4ecc:	cmp	r2, #20
    4ece:	bhi.n	4f00 <_free_r+0x174>
    4ed0:	add.w	r7, r2, #92	; 0x5c
    4ed4:	lsls	r7, r7, #1
    4ed6:	add.w	r5, r2, #91	; 0x5b
    4eda:	b.n	4e30 <_free_r+0xa4>
    4edc:	asrs	r2, r5, #2
    4ede:	ldr	r3, [r1, #4]
    4ee0:	movs	r5, #1
    4ee2:	lsl.w	r2, r5, r2
    4ee6:	orrs	r3, r2
    4ee8:	str	r3, [r1, #4]
    4eea:	mov	r2, r0
    4eec:	b.n	4e52 <_free_r+0xc6>
    4eee:	orr.w	r2, r3, #1
    4ef2:	str	r4, [r1, #20]
    4ef4:	str	r4, [r1, #16]
    4ef6:	str	r5, [r4, #12]
    4ef8:	str	r5, [r4, #8]
    4efa:	str	r2, [r4, #4]
    4efc:	str	r3, [r4, r3]
    4efe:	b.n	4e12 <_free_r+0x86>
    4f00:	cmp	r2, #84	; 0x54
    4f02:	bhi.n	4f12 <_free_r+0x186>
    4f04:	lsrs	r2, r3, #12
    4f06:	add.w	r7, r2, #111	; 0x6f
    4f0a:	lsls	r7, r7, #1
    4f0c:	add.w	r5, r2, #110	; 0x6e
    4f10:	b.n	4e30 <_free_r+0xa4>
    4f12:	cmp.w	r2, #340	; 0x154
    4f16:	bhi.n	4f26 <_free_r+0x19a>
    4f18:	lsrs	r2, r3, #15
    4f1a:	add.w	r7, r2, #120	; 0x78
    4f1e:	lsls	r7, r7, #1
    4f20:	add.w	r5, r2, #119	; 0x77
    4f24:	b.n	4e30 <_free_r+0xa4>
    4f26:	movw	r0, #1364	; 0x554
    4f2a:	cmp	r2, r0
    4f2c:	bhi.n	4f3c <_free_r+0x1b0>
    4f2e:	lsrs	r2, r3, #18
    4f30:	add.w	r7, r2, #125	; 0x7d
    4f34:	lsls	r7, r7, #1
    4f36:	add.w	r5, r2, #124	; 0x7c
    4f3a:	b.n	4e30 <_free_r+0xa4>
    4f3c:	movs	r7, #254	; 0xfe
    4f3e:	movs	r5, #126	; 0x7e
    4f40:	b.n	4e30 <_free_r+0xa4>
    4f42:	orr.w	r2, r3, #1
    4f46:	str	r2, [r4, #4]
    4f48:	str	r3, [r4, r3]
    4f4a:	b.n	4e12 <_free_r+0x86>
    4f4c:	.word	0x1fff119c
    4f50:	.word	0x1fff11a4
    4f54:	.word	0x1fff15a4
    4f58:	.word	0x1fff1cd4

00004f5c <__register_exitproc>:
    4f5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4f60:	ldr	r4, [pc, #148]	; (4ff8 <__register_exitproc+0x9c>)
    4f62:	ldr	r5, [r4, #0]
    4f64:	ldr.w	r4, [r5, #328]	; 0x148
    4f68:	mov	r6, r0
    4f6a:	mov	r8, r1
    4f6c:	mov	sl, r2
    4f6e:	mov	r9, r3
    4f70:	cbz	r4, 4fe4 <__register_exitproc+0x88>
    4f72:	ldr	r0, [r4, #4]
    4f74:	cmp	r0, #31
    4f76:	bgt.n	4fa8 <__register_exitproc+0x4c>
    4f78:	adds	r3, r0, #1
    4f7a:	cbz	r6, 4f9a <__register_exitproc+0x3e>
    4f7c:	add.w	r5, r4, r0, lsl #2
    4f80:	movs	r2, #1
    4f82:	str.w	sl, [r5, #136]	; 0x88
    4f86:	ldr.w	r1, [r4, #392]	; 0x188
    4f8a:	lsls	r2, r0
    4f8c:	orrs	r1, r2
    4f8e:	cmp	r6, #2
    4f90:	str.w	r1, [r4, #392]	; 0x188
    4f94:	str.w	r9, [r5, #264]	; 0x108
    4f98:	beq.n	4fd8 <__register_exitproc+0x7c>
    4f9a:	adds	r0, #2
    4f9c:	str	r3, [r4, #4]
    4f9e:	str.w	r8, [r4, r0, lsl #2]
    4fa2:	movs	r0, #0
    4fa4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4fa8:	ldr	r3, [pc, #80]	; (4ffc <__register_exitproc+0xa0>)
    4faa:	cbz	r3, 4fee <__register_exitproc+0x92>
    4fac:	mov.w	r0, #400	; 0x190
    4fb0:	bl	46fc <malloc>
    4fb4:	mov	r4, r0
    4fb6:	cbz	r0, 4fee <__register_exitproc+0x92>
    4fb8:	ldr.w	r3, [r5, #328]	; 0x148
    4fbc:	movs	r7, #0
    4fbe:	stmia.w	r0, {r3, r7}
    4fc2:	str.w	r4, [r5, #328]	; 0x148
    4fc6:	mov	r0, r7
    4fc8:	movs	r3, #1
    4fca:	str.w	r7, [r4, #392]	; 0x188
    4fce:	str.w	r7, [r4, #396]	; 0x18c
    4fd2:	cmp	r6, #0
    4fd4:	beq.n	4f9a <__register_exitproc+0x3e>
    4fd6:	b.n	4f7c <__register_exitproc+0x20>
    4fd8:	ldr.w	r1, [r4, #396]	; 0x18c
    4fdc:	orrs	r2, r1
    4fde:	str.w	r2, [r4, #396]	; 0x18c
    4fe2:	b.n	4f9a <__register_exitproc+0x3e>
    4fe4:	add.w	r4, r5, #332	; 0x14c
    4fe8:	str.w	r4, [r5, #328]	; 0x148
    4fec:	b.n	4f72 <__register_exitproc+0x16>
    4fee:	mov.w	r0, #4294967295
    4ff2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4ff6:	nop
    4ff8:	.word	0x0000537c
    4ffc:	.word	0x000046fd
    5000:	.word	0x00000026
    5004:	.word	0x00000029
    5008:	.word	0x0000002d
    500c:	.word	0x00000033
    5010:	.word	0x00000064
    5014:	.word	0x00000064
    5018:	.word	0x00000064
    501c:	.word	0x00000064
    5020:	.word	0x00000001
    5024:	.word	0x00000001
    5028:	.word	0x00000001
    502c:	.word	0x00000001
    5030:	.word	0x7370704f
    5034:	.word	0x6e61202c
    5038:	.word	0x6b6e7520
    503c:	.word	0x6e776f6e
    5040:	.word	0x44494d20
    5044:	.word	0x656d2049
    5048:	.word	0x67617373
    504c:	.word	0x79742065
    5050:	.word	0x00216570
    5054:	.word	0x43544950
    5058:	.word	0x00000048
    505c:	.word	0x4f4c4556
    5060:	.word	0x59544943
    5064:	.word	0x00000000
    5068:	.word	0x45544f4e
    506c:	.word	0x474e454c
    5070:	.word	0x00004854
    5074:	.word	0x424f4c47
    5078:	.word	0x00004c41
    507c:	.word	0x79616c50
    5080:	.word	0x00000000
    5084:	.word	0x73726946
    5088:	.word	0x00000074
    508c:	.word	0x6f636553
    5090:	.word	0x0000646e
    5094:	.word	0x72696854
    5098:	.word	0x00000064
    509c:	.word	0x72756f46
    50a0:	.word	0x00006874
    50a4:	.word	0x74666946
    50a8:	.word	0x00000068

000050ac <pin2sc1a>:
    50ac:	................
    50bc:	................
    50cc:	................
    50dc:	................
    50ec:	........

000050f4 <digital_pin_to_info_PGM>:
    50f4:	@..C@..@D..CD..@
    5104:	...C...@0..C0..@
    5114:	4..C4..@...C...@
    5124:	...C...@...C...@
    5134:	...C...@...C...@
    5144:	...C...@...C...@
    5154:	...C...@...C...@
    5164:	...C...@...C...@
    5174:	...C...@...C...@
    5184:	...C...@...C...@
    5194:	...C...@...C...@
    51a4:	...C...@...C...@
    51b4:	h .Ch..@...C...@
    51c4:	8..C8..@<..C<..@
    51d4:	@..C@..@H..CH..@
    51e4:	L..CL..@(..C(..@
    51f4:	,..C,..@` .C`..@
    5204:	d .Cd..@ ..C ..@
    5214:	$..C$..@(..C(..@
    5224:	,..C,..@D..CD..@
    5234:	p..Cp..@t..Ct..@
    5244:	h..Ch..@P..CP..@
    5254:	X..CX..@\..C\..@
    5264:	T..CT..@ ..C ..@
    5274:	$..C$..@...C...@
    5284:	...C...@8..C8..@
    5294:	4..C4..@0..C0..@
    52a4:	<..C<..@,..C,..@
    52b4:	( .C(..@, .C,..@
    52c4:	. .C...@. .C...@
    52d4:	. .C...@. .C...@
    52e4:	. .C...@. .C...@

000052f4 <vtable for usb_serial_class>:
	...
    52fc:	U<..M<..I<..E<..
    530c:	A<..=<..9<..5<..
    531c:	....

00005320 <usb_endpoint_config_table>:
    5320:	........

00005328 <usb_descriptor_list>:
    5328:	....t...........
    5338:	............P...
    5348:	................
    5358:	....8...........
    5368:	T...............
    5378:	....

0000537c <_global_impure_ptr>:
    537c:	p...

00005380 <_init>:
    5380:	push	{r3, r4, r5, r6, r7, lr}
    5382:	nop
    5384:	pop	{r3, r4, r5, r6, r7}
    5386:	pop	{r3}
    5388:	mov	lr, r3
    538a:	bx	lr

0000538c <__init_array_start>:
    538c:	.word	0x00004ca9

00005390 <__frame_dummy_init_array_entry>:
    5390:	5.......

Disassembly of section .fini:

00005398 <_fini>:
    5398:	push	{r3, r4, r5, r6, r7, lr}
    539a:	nop

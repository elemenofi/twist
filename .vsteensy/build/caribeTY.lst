
.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000058d4 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15bc l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
0000449c l     F .text	0000000c startup_default_early_hook
000044a8 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15bc l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15c0 l       .bss	00000000 object.8610
000058cc l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00002144 l     F .text	000002e0 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff18f9 l     O .bss	00000001 tx_noautoflush
1fff18fc l     O .bss	00000004 tx_packet
1fff1900 l     O .bss	00000001 transmit_previous_timeout
1fff1904 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
000026f8 l     F .text	00000144 wait_for_cal
1fff1909 l     O .bss	00000001 analog_right_shift
1fff190a l     O .bss	00000001 calibrating
000055e8 l     O .text	00000048 pin2sc1a
1fff0c68 l     O .data	00000001 analog_config_bits
1fff190b l     O .bss	00000001 analogReadBusyADC1
1fff190c l     O .bss	00000001 analogReadBusyADC0
1fff190d l     O .bss	00000001 analog_reference_internal
1fff0c69 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00002a18 l     F .text	0000004c digitalWrite.part.1
00002a64 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002d44 l     F .text	00000048 sysex_byte
1fff1928 l     O .bss	00000001 tx_noautoflush
1fff1954 l     O .bss	00000004 tx_packet
1fff1958 l     O .bss	00000001 transmit_previous_timeout
1fff1960 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c6c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1974 l     O .bss	00000004 ep0_tx_ptr
1fff1978 l     O .bss	00000014 rx_last
1fff198c l     O .bss	00000002 ep0_tx_len
1fff1990 l     O .bss	00000040 ep0_rx0_buf
1fff19d0 l     O .bss	00000014 rx_first
1fff19e4 l     O .bss	00000001 ep0_tx_data_toggle
1fff19e8 l     O .bss	00000040 ep0_rx1_buf
1fff1a28 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff1a3c l     O .bss	00000014 tx_last
1fff1a50 l     O .bss	00000008 setup
1fff1a58 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1a5c l     O .bss	00000008 reply_buffer
1fff1a68 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1a6d l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1a70 l     O .bss	00000004 rts_pin
1fff1a74 l     O .bss	00000001 rx_buffer_head
1fff1a75 l     O .bss	00000001 rx_buffer_tail
1fff1a78 l     O .bss	00000028 tx_buffer
1fff1aa0 l     O .bss	00000040 rx_buffer
1fff1ae0 l     O .bss	00000001 transmitting
1fff1ae1 l     O .bss	00000001 tx_buffer_tail
1fff1ae4 l     O .bss	00000004 transmit_pin
1fff1ae8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1aec l     O .bss	00000004 rts_pin
1fff1af0 l     O .bss	00000001 transmitting
1fff1af1 l     O .bss	00000001 rx_buffer_tail
1fff1af4 l     O .bss	00000028 tx_buffer
1fff1b1c l     O .bss	00000040 rx_buffer
1fff1b5c l     O .bss	00000001 rx_buffer_head
1fff1b5d l     O .bss	00000001 tx_buffer_tail
1fff1b60 l     O .bss	00000004 transmit_pin
1fff1b64 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1b68 l     O .bss	00000004 rts_pin
1fff1b6c l     O .bss	00000001 rx_buffer_head
1fff1b6d l     O .bss	00000001 rx_buffer_tail
1fff1b70 l     O .bss	00000028 tx_buffer
1fff1b98 l     O .bss	00000040 rx_buffer
1fff1bd8 l     O .bss	00000001 transmitting
1fff1bd9 l     O .bss	00000001 tx_buffer_tail
1fff1bdc l     O .bss	00000004 transmit_pin
1fff1be0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1be4 l     O .bss	00000004 rts_pin
1fff1be8 l     O .bss	00000001 rx_buffer_head
1fff1be9 l     O .bss	00000001 rx_buffer_tail
1fff1bec l     O .bss	00000040 tx_buffer
1fff1c2c l     O .bss	00000040 rx_buffer
1fff1c6c l     O .bss	00000001 transmitting
1fff1c6d l     O .bss	00000001 tx_buffer_tail
1fff1c70 l     O .bss	00000004 transmit_pin
1fff1c74 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1c78 l     O .bss	00000004 rts_pin
1fff1c7c l     O .bss	00000001 rx_buffer_head
1fff1c7d l     O .bss	00000001 rx_buffer_tail
1fff1c80 l     O .bss	00000028 tx_buffer
1fff1ca8 l     O .bss	00000040 rx_buffer
1fff1ce8 l     O .bss	00000001 transmitting
1fff1ce9 l     O .bss	00000001 tx_buffer_tail
1fff1cec l     O .bss	00000004 transmit_pin
1fff1cf0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c84 l     O .data	00000012 device_descriptor
1fff0cb0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1cf4 l     O .bss	00000004 rts_pin
1fff1cf8 l     O .bss	00000001 rx_buffer_head
1fff1cf9 l     O .bss	00000001 rx_buffer_tail
1fff1cfc l     O .bss	00000028 tx_buffer
1fff1d24 l     O .bss	00000040 rx_buffer
1fff1d64 l     O .bss	00000001 transmitting
1fff1d65 l     O .bss	00000001 tx_buffer_tail
1fff1d68 l     O .bss	00000004 transmit_pin
1fff1d6c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 __call_atexit.c
0000521c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d80 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15bc l       .bss	00000000 __bss_start__
1fff1f08 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00004494  w    F .text	00000006 adc0_isr
0000249c g     F .text	0000001c usb_serial_available
00004354 g     F .text	00000020 serial4_available
00003f70  w    F .text	000000c4 yield
1fff0c98 g     O .data	00000018 usb_string_manufacturer_name_default
00004540 g     F .text	00000020 serial_available
1fff192c g     O .bss	00000004 usb_midi_handleProgramChange
1fff1774 g     O .bss	00000034 sequence
0000444c  w    F .text	00000048 hard_fault_isr
00004494  w    F .text	00000006 dma_ch6_isr
00004064 g     F .text	00000020 Print::println()
00004228 g     F .text	00000020 serial2_available
00004494  w    F .text	00000006 uart0_lon_isr
00003384 g     F .text	000000e8 usb_rx_memory
00004034  w    F .text	00000002 serialEvent5()
00004494  w    F .text	00000006 dma_ch8_isr
0000466c g     F .text	00000020 serial6_available
00005114 g     F .text	00000002 __malloc_unlock
1fff1940 g     O .bss	00000004 usb_midi_handleAfterTouch
0000283c g     F .text	000000e0 analog_init
0000346c g     F .text	00000084 usb_tx
00004494  w    F .text	00000006 portcd_isr
1fff1950 g     O .bss	00000004 usb_midi_handleSysExComplete
00004a8c g     F .text	00000098 MillisTimer::runFromTimer()
00004494  w    F .text	00000006 can1_rx_warn_isr
000058d8 g       .fini	00000000 __exidx_end
00004494  w    F .text	00000006 dma_error_isr
1fff1dcc g     O .bss	00000001 usb_midi_msg_type
1fff1d84 g     O .bss	00000001 EventResponder::runningFromYield
00004494  w    F .text	00000006 i2c0_isr
00004b34 g     F .text	0000000c __errno
00004494  w    F .text	00000006 portd_isr
00004494  w    F .text	00000006 enet_error_isr
1fff1d70 g     O .bss	00000004 EventResponder::firstInterrupt
00004494  w    F .text	00000006 tpm1_isr
00004050  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00005630 g     O .text	00000200 digital_pin_to_info_PGM
1fff1f04 g     O .bss	00000004 errno
000058d8 g       .fini	00000000 _etext
1fff15bc g       .bss	00000000 _sbss
0000412c  w    F .text	00000002 serialEvent6()
1fff193c g     O .bss	00000004 usb_midi_handleVelocityChange
00002b0c g     F .text	0000001c digitalRead
00004494  w    F .text	00000006 porte_isr
000004ec g     F .text	00001c58 loop
00004494  w    F .text	00000006 portb_isr
1fff17d0 g     O .bss	00000014 step3
00002e28 g     F .text	0000002c usb_midi_flush_output
00004494  w    F .text	00000006 spi1_isr
00004374 g     F .text	000000d8 uart3_status_isr
00004938  w    F .text	00000002 serialEvent1()
1fff18e0 g     O .bss	00000018 led4
00004494  w    F .text	00000006 mcm_isr
00004a24 g     F .text	00000068 MillisTimer::addToActiveList()
00002e54 g     F .text	0000043c usb_midi_read
1fff1918 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1d74 g     O .bss	00000004 EventResponder::lastInterrupt
00004248 g     F .text	0000010c uart1_status_isr
1fff1dce g     O .bss	00000002 usb_midi_msg_sysex_len
00004494  w    F .text	00000006 randnum_isr
1fff1920 g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff1910 g     O .bss	00000004 systick_millis_count
0000444c  w    F .text	00000048 bus_fault_isr
00004494  w    F .text	00000006 watchdog_isr
00004494  w    F .text	00000006 i2c1_isr
1fff1a64 g     O .bss	00000001 usb_configuration
00004494  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00004114  w    F .text	00000002 serialEvent2()
00004494  w    F .text	00000006 i2c2_isr
1fff0c98  w    O .data	00000018 usb_string_manufacturer_name
1fff1ef8 g     O .bss	0000000a usb_rx_byte_count_data
00004494  w    F .text	00000006 pit1_isr
00004b90 g     F .text	00000010 malloc
00004494  w    F .text	00000006 dma_ch4_isr
00004494  w    F .text	00000006 software_isr
00004494  w    F .text	00000006 dma_ch7_isr
000049c0  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00003ea0 g     F .text	000000d0 usb_init
00004494  w    F .text	00000006 lptmr_isr
1fff1d94 g     O .bss	00000004 __malloc_top_pad
00002adc g     F .text	00000024 rtc_set
1fff16fc g     O .bss	0000003c button5
1fff16c0 g     O .bss	0000003c button4
1fff0c40 g       .data	00000000 _sdata
1fff1970 g     O .bss	00000004 usb_midi_handleNoteOn
0000450c g     F .text	00000034 kinetis_hsrun_enable
00005118 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00002424 g     F .text	00000048 usb_serial_getchar
00004494  w    F .text	00000006 can1_bus_off_isr
00004494  w    F .text	00000006 ftm2_isr
1fff1dc0 g     O .bss	00000008 usb_cdc_line_coding
00002b00 g     F .text	0000000a digitalWrite
00004494  w    F .text	00000006 uart5_status_isr
0000468c g     F .text	000000e4 lpuart0_status_isr
1fff1d7c g     O .bss	00000004 EventResponder::lastYield
0000585c g     O .text	00000005 usb_endpoint_config_table
00004494  w    F .text	00000006 dma_ch9_isr
00004494  w    F .text	00000006 pit2_isr
00004840 g     F .text	00000020 serial3_available
1fff17e4 g     O .bss	00000014 step4
1fff1d90 g     O .bss	00000004 __malloc_max_sbrked_mem
00002b28 g     F .text	0000000a pinMode
000032d0 g     F .text	0000004c usb_free
00004494  w    F .text	00000006 i2c3_isr
1fff1898 g     O .bss	00000018 led1
1fff1938 g     O .bss	00000004 usb_midi_handleSysExPartial
000058d8 g       .fini	00000000 __exidx_start
00004494  w    F .text	00000006 pit0_isr
1fff1dd0 g     O .bss	00000001 usb_midi_msg_data1
1fff1d80 g     O .bss	00000004 EventResponder::firstYield
000058b8 g     O .text	00000004 _global_impure_ptr
00004494  w    F .text	00000006 can1_error_isr
00004b40 g     F .text	00000050 __libc_init_array
1fff1f08 g       .bss	00000000 __bss_end
00004494  w    F .text	00000006 can0_wakeup_isr
00004494  w    F .text	00000006 flash_cmd_isr
1fff1868 g     O .bss	0000001c knob5
00004038  w    F .text	00000004 usb_serial_class::clear()
00004860 g     F .text	000000d8 uart2_status_isr
000044ac g     F .text	0000002c _sbrk
1fff1d88 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c80 g     O .data	00000004 __brkval
1fff1908 g     O .bss	00000001 usb_cdc_line_rtsdtr
000026b0 g     F .text	00000048 usb_serial_flush_callback
000058bc g     F .text	00000000 _init
1fff0c40 g     O .data	00000010 steps
00004494  w    F .text	00000006 svcall_isr
00004494  w    F .text	00000006 dma_ch15_isr
00004494  w    F .text	00000006 uart1_error_isr
0000523c g     F .text	00000028 __libc_fini_array
00004494  w    F .text	00000006 usbhs_phy_isr
1fff1f08 g       .bss	00000000 _ebss
00004494 g     F .text	00000006 unused_isr
00004494  w    F .text	00000006 spi0_isr
00004494  w    F .text	00000006 dma_ch3_isr
00004494  w    F .text	00000006 flash_error_isr
1fff1814 g     O .bss	0000001c knob2
00004130 g     F .text	00000020 serial5_available
00004494  w    F .text	00000006 uart5_error_isr
00004494  w    F .text	00000006 rtc_seconds_isr
00004494  w    F .text	00000006 pdb_isr
0000444c  w    F .text	00000048 usage_fault_isr
00004494  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00004494  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1dc8 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000046c  w    F .text	00000024 Print::println(char const*)
1fff1884 g     O .bss	00000010 transport
1fff0c50 g     O .data	00000018 leds
00004b24 g     F .text	00000010 systick_isr
00004494  w    F .text	00000006 rtc_alarm_isr
00004494  w    F .text	00000006 dma_ch2_isr
1fff0c70 g     O .data	00000010 Serial
00004494  w    F .text	00000006 ftm1_isr
00004058  w    F .text	00000006 usb_serial_class::write(unsigned char)
0000449c  w    F .text	0000000c startup_early_hook
00004494  w    F .text	00000006 dma_ch13_isr
00004494  w    F .text	00000006 uart2_error_isr
0000246c g     F .text	00000030 usb_serial_peekchar
000004b4  w    F .text	00000034 Led::blink(int)
1fff0d64 g     O .data	00000016 usb_string_serial_number_default
0000444c g     F .text	00000048 fault_isr
00005300 g     F .text	000001d0 _free_r
1fff195c g     O .bss	00000004 usb_midi_handleStop
00004494  w    F .text	00000006 usb_charge_isr
00004048  w    F .text	00000004 usb_serial_class::flush()
00004494  w    F .text	00000006 cmt_isr
00004494  w    F .text	00000006 usbhs_isr
1fff196c g     O .bss	00000004 usb_midi_handleControlChange
1fff15b8 g     O .data	00000004 __malloc_sbrk_base
00004040  w    F .text	00000004 usb_serial_class::read()
00004494  w    F .text	00000006 ftm3_isr
00004494  w    F .text	00000006 tsi0_isr
1fff15f0 g     O .bss	00000018 led6
1fff17f8 g     O .bss	0000001c knob1
00004494  w    F .text	00000006 spi2_isr
00004118  w    F .text	00000002 serialEvent4()
00004060  w    F .text	00000002 serialEvent()
1fff19e5 g     O .bss	00000001 usb_reboot_timer
000054d0 g     F .text	000000a4 __register_exitproc
000024b8 g     F .text	00000038 usb_serial_flush_input
000025f8 g     F .text	00000018 usb_serial_putchar
1fff1d98 g     O .bss	00000028 __malloc_current_mallinfo
00004494  w    F .text	00000006 can0_bus_off_isr
1fff15d8 g     O .bss	00000018 led5
1fff1a59 g     O .bss	00000001 usb_rx_memory_needed
000034f0 g     F .text	000009b0 usb_isr
1fff17a8 g     O .bss	00000014 step1
1fff1968 g     O .bss	00000004 usb_midi_handleNoteOff
00005830  w    O .text	00000028 vtable for usb_serial_class
1fff1830 g     O .bss	0000001c knob3
00004494  w    F .text	00000006 uart3_error_isr
1fff1d78 g     O .bss	00000004 MillisTimer::listActive
00004494  w    F .text	00000006 porta_isr
1fff1608 g     O .bss	00000001 controller
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00004494  w    F .text	00000006 low_voltage_isr
1fff1648 g     O .bss	0000003c button2
1fff11ac g     O .data	00000408 __malloc_av_
00004494  w    F .text	00000006 can0_error_isr
00002bd8 g     F .text	0000016c _init_Teensyduino_internal_
00002658 g     F .text	00000058 usb_serial_flush_output
00004494  w    F .text	00000006 dma_ch12_isr
00005110 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00004494  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00004494  w    F .text	00000006 pit3_isr
00004494  w    F .text	00000006 enet_rx_isr
00004494  w    F .text	00000006 portc_isr
0000411c g     F .text	00000010 main
1fff1d8c g     O .bss	00000004 __malloc_max_total_mem
1fff18c8 g     O .bss	00000018 led3
0000444c  w    F .text	00000048 memmanage_fault_isr
00004770 g     F .text	00000084 usb_init_serialnumber
1fff1894 g     O .bss	00000001 currentMode
000058d4 g       .text	00000000 __init_array_end
00004ba0 g     F .text	00000570 _malloc_r
00004494  w    F .text	00000006 debugmonitor_isr
1fff1934 g     O .bss	00000004 usb_midi_handleSongPosition
00004940 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1924 g     O .bss	00000004 usb_midi_handleContinue
1fff1dd1 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00004494  w    F .text	00000006 cmp1_isr
1fff1684 g     O .bss	0000003c button3
00004494  w    F .text	00000006 ftm0_isr
00005264 g     F .text	0000009c _malloc_trim_r
1fff0d60 g     O .data	00000004 string0
000024f0 g     F .text	00000108 usb_serial_write
000044a8  w    F .text	00000002 startup_late_hook
00004044  w    F .text	00000004 usb_serial_class::available()
1fff1dd2 g     O .bss	00000001 usb_midi_msg_cable
1fff0d48  w    O .data	00000018 usb_string_product_name
00002b34 g     F .text	000000a4 delay
00004494  w    F .text	00000006 tpm0_isr
000058d4 g     F .fini	00000000 _fini
1fff17bc g     O .bss	00000014 step2
00004494  w    F .text	00000006 i2s0_rx_isr
00004494  w    F .text	00000006 uart4_error_isr
00004104 g     F .text	00000010 Print::print(long)
00002d8c g     F .text	0000009c usb_midi_write_packed
00005230 g     F .text	0000000c atexit
00004494  w    F .text	00000006 can0_message_isr
1fff11a8 g     O .data	00000004 _impure_ptr
00004494  w    F .text	00000006 can1_message_isr
00004494  w    F .text	00000006 nmi_isr
00000490  w    F .text	00000024 Led::Led(int, int)
1fff194c g     O .bss	00000004 usb_midi_handleTuneRequest
000058c8 g       .text	00000000 __preinit_array_end
00004494  w    F .text	00000006 sdhc_isr
1fff1dd3 g     O .bss	00000001 usb_midi_msg_channel
000004e8 g     F .text	00000002 setup
00005864 g     O .text	00000054 usb_descriptor_list
0000331c g     F .text	0000003c usb_rx
00000490  w    F .text	00000024 Led::Led(int, int)
1fff184c g     O .bss	0000001c knob4
00004494  w    F .text	00000006 dma_ch10_isr
1fff1944 g     O .bss	00000004 usb_midi_handleStart
00004494  w    F .text	00000006 uart0_error_isr
00003290 g     F .text	00000040 usb_malloc
00004494  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00002610 g     F .text	00000048 usb_serial_write_buffer_free
00004494  w    F .text	00000006 enet_timer_isr
1fff1738 g     O .bss	0000003c button6
1fff160c g     O .bss	0000003c button1
1fff15bc g       .data	00000000 _edata
00004494  w    F .text	00000006 i2s0_tx_isr
00004494  w    F .text	00000006 adc1_isr
0000404c  w    F .text	00000004 usb_serial_class::availableForWrite()
00004494  w    F .text	00000006 cmp0_isr
1fff1914 g     O .bss	00000004 usb_midi_handleClock
000047f4 g     F .text	0000004c ultoa
000049dc g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15b4 g     O .data	00000004 __malloc_trim_threshold
0000403c  w    F .text	00000004 usb_serial_class::peek()
1fff18f8 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff1930 g     O .bss	00000004 usb_midi_handlePitchChange
00004494  w    F .text	00000006 pit_isr
1fff1948 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00004494  w    F .text	00000006 dac0_isr
000058c8 g       .text	00000000 __init_array_start
00004494  w    F .text	00000006 can1_tx_warn_isr
0000291c g     F .text	000000fc analogRead
1fff1dd4 g     O .bss	00000122 usb_midi_msg_sysex
00004560 g     F .text	0000010c uart0_status_isr
00004494  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
00005140 g     F .text	000000dc strlen
1fff0d48 g     O .data	00000018 usb_string_product_name_default
00004494  w    F .text	00000006 dma_ch1_isr
00003358 g     F .text	0000002c usb_tx_packet_count
00004494  w    F .text	00000006 dma_ch5_isr
00004494  w    F .text	00000006 can0_rx_warn_isr
00004494  w    F .text	00000006 can0_tx_warn_isr
00004150 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
000044d8 g     F .text	00000034 kinetis_hsrun_disable
000058c8 g       .text	00000000 __preinit_array_start
0000493c  w    F .text	00000002 serialEvent3()
1fff1964 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff18b0 g     O .bss	00000018 led2
00004494  w    F .text	00000006 cmp2_isr
00004a20 g     F .text	00000004 pendablesrvreq_isr
00004494  w    F .text	00000006 wakeup_isr
00004494  w    F .text	00000006 cmp3_isr
00004084 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
1fff191c g     O .bss	00000004 usb_midi_handleActiveSensing
00004494  w    F .text	00000006 tpm2_isr
00004494  w    F .text	00000006 dma_ch0_isr
1fff0d64  w    O .data	00000016 usb_string_serial_number
00004494  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... .....D..MD..
      10:	MD..MD..MD..MD..
      20:	MD..MD..MD...D..
      30:	.D..MD..!J..%K..
      40:	.D...D...D...D..
      50:	.D...D...D...D..
      60:	.D...D...D...D..
      70:	.D...D...D...D..
      80:	.D...D...D...D..
      90:	.D...D...D...D..
      a0:	.D...D...D...D..
      b0:	.D...D...D..aE..
      c0:	.D..IB...D..aH..
      d0:	.D..uC...D...D..
      e0:	.D...D...D...D..
      f0:	.D...D...D...D..
     100:	.D...D...D...D..
     110:	.D...4...D...D..
     120:	.D...D...D...D..
     130:	.D...D...D...D..
     140:	.D...D..QA...D..
     150:	.D...D...D...D..
     160:	.D...D...D...D..
     170:	.D...D...D...D..
     180:	.D...D...D...D..
     190:	.D...D...F...D..
     1a0:	.D...D...D...D..
     1b0:	.D...D...D...D..
     1c0:	.D...D...D...D..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	449c <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	2bd8 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	2adc <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	2adc <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	4b40 <__libc_init_array>

	startup_late_hook();
     33a:	bl	44a8 <startup_late_hook>
	main();
     33e:	bl	411c <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15bc
     374:	.word	0x000058d4
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15bc
     380:	.word	0x1fff1f08
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15bc
     42c:	.word	0x00000000
     430:	.word	0x000058d8

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15c0
     460:	.word	0x000058d8
     464:	.word	0x1fff15bc
     468:	.word	0x00000000

0000046c <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     470:	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     472:	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     474:	bl	5140 <strlen>
     478:	ldr	r3, [r4, #0]
     47a:	mov	r2, r0
     47c:	mov	r1, r5
     47e:	ldr	r3, [r3, #4]
     480:	mov	r0, r4
     482:	blx	r3
     484:	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     486:	mov	r0, r4
     488:	bl	4064 <Print::println()>
     48c:	add	r0, r5
     48e:	pop	{r3, r4, r5, pc}

00000490 <Led::Led(int, int)>:
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     490:	push	{r3, r4, r5, lr}
     492:	mov	r4, r0
     494:	movs	r3, #0
     496:	movs	r5, #75	; 0x4b
      m_pin = pin;
     498:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     49c:	uxtb	r0, r1
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     49e:	strb	r3, [r4, #16]
     4a0:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     4a2:	movs	r1, #1
     4a4:	bl	2b28 <pinMode>
      digitalWrite(m_pin, m_state);
     4a8:	ldrb	r0, [r4, #0]
     4aa:	ldrb	r1, [r4, #4]
     4ac:	bl	2b00 <digitalWrite>
    };
     4b0:	mov	r0, r4
     4b2:	pop	{r3, r4, r5, pc}

000004b4 <Led::blink(int)>:

    void blink (int times = 0) {
     4b4:	push	{r4, r5, r6, lr}
      digitalWrite(m_pin, !digitalRead(m_pin));
     4b6:	ldrb	r5, [r0, #0]

      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
     4b8:	sub	sp, #8
     4ba:	mov	r4, r0
      digitalWrite(m_pin, !digitalRead(m_pin));
     4bc:	mov	r0, r5

      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
     4be:	mov	r6, r1
      digitalWrite(m_pin, !digitalRead(m_pin));
     4c0:	bl	2b0c <digitalRead>
     4c4:	clz	r1, r0
     4c8:	lsrs	r1, r1, #5
     4ca:	mov	r0, r5
     4cc:	bl	2b00 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4d0:	ldr	r3, [pc, #16]	; (4e4 <Led::blink(int)+0x30>)
      blinking = true;
      blinkingCounter = times;
     4d2:	str	r6, [r4, #20]
     4d4:	ldr	r3, [r3, #0]
     4d6:	str	r3, [sp, #4]
	return ret;
     4d8:	ldr	r3, [sp, #4]
      lastBlink = millis();  
     4da:	str	r3, [r4, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     4dc:	movs	r2, #1
     4de:	strb	r2, [r4, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    };
     4e0:	add	sp, #8
     4e2:	pop	{r4, r5, r6, pc}
     4e4:	.word	0x1fff1910

000004e8 <setup>:
Knob knob3(A2, sequence, transport, THIRD, 2);
Knob knob4(A3, sequence, transport, FOURTH, 3);
Knob knob5(A4, sequence, transport, FIFTH, 4);
// implement a scale knob that transposes the sequencer

void setup() {
     4e8:	bx	lr
     4ea:	nop

000004ec <loop>:
  Serial.begin(9600);
}

void loop() {
     4ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     4f0:	movs	r0, #0
     4f2:	sub	sp, #248	; 0xf8
     4f4:	bl	2e54 <usb_midi_read>
  if (usbMIDI.read()) {
     4f8:	cmp	r0, #0
     4fa:	bne.w	d20 <loop+0x834>
     4fe:	ldr	r4, [pc, #700]	; (7bc <loop+0x2d0>)

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     500:	ldr	r6, [pc, #700]	; (7c0 <loop+0x2d4>)
     502:	ldrb.w	r0, [r6, #56]	; 0x38
     506:	bl	2b0c <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     50a:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     50c:	mov	r7, r0
     50e:	str	r0, [r6, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     510:	ldrb.w	r5, [r6, #48]	; 0x30
     514:	beq.w	d50 <loop+0x864>
     518:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     51a:	ldr	r2, [r4, #0]
     51c:	str	r2, [sp, #188]	; 0xbc
	return ret;
     51e:	ldr	r1, [sp, #188]	; 0xbc
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     520:	ldr	r2, [pc, #672]	; (7c4 <loop+0x2d8>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     522:	ldr	r0, [pc, #668]	; (7c0 <loop+0x2d4>)
     524:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     526:	smull	r1, r2, r2, r3
     52a:	asrs	r1, r3, #31
     52c:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     530:	cmp	r5, r7
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     532:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     534:	str	r2, [r6, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     536:	beq.w	d4a <loop+0x85e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     53a:	ldr	r1, [r4, #0]
     53c:	str	r1, [sp, #184]	; 0xb8
	return ret;
     53e:	ldr	r1, [sp, #184]	; 0xb8
        m_lastDebounceTime = millis();
     540:	str	r1, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     542:	ldr	r0, [r4, #0]
     544:	str	r0, [sp, #180]	; 0xb4
	return ret;
     546:	ldr	r0, [sp, #180]	; 0xb4
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     548:	cmp	r0, r1
     54a:	beq.n	560 <loop+0x74>
        // and the current changed
        if (current != m_state) {
     54c:	ldr	r1, [r6, #4]
     54e:	ldr.w	r8, [pc, #624]	; 7c0 <loop+0x2d4>
     552:	cmp	r7, r1
     554:	beq.n	560 <loop+0x74>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     556:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     558:	str.w	r7, [r8, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     55c:	ble.w	10c6 <loop+0xbda>
        onClick();
      }
 
      if (millis_held > 50) {
     560:	cmp	r3, #50	; 0x32
     562:	ble.n	574 <loop+0x88>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     564:	cbnz	r7, 574 <loop+0x88>
     566:	ldrb.w	r3, [r6, #48]	; 0x30
     56a:	ldr	r5, [pc, #596]	; (7c0 <loop+0x2d4>)
     56c:	cmp	r3, #1
     56e:	beq.w	1332 <loop+0xe46>
     572:	ldr	r7, [r6, #32]

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     574:	ldr	r5, [pc, #592]	; (7c8 <loop+0x2dc>)
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     576:	strb.w	r7, [r6, #48]	; 0x30

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     57a:	ldrb.w	r0, [r5, #56]	; 0x38
          }
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     57e:	str	r2, [r6, #44]	; 0x2c

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     580:	bl	2b0c <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     584:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     586:	mov	r6, r0
     588:	str	r0, [r5, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     58a:	ldrb.w	r7, [r5, #48]	; 0x30
     58e:	beq.w	d8c <loop+0x8a0>
     592:	ldr	r3, [r5, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     594:	ldr	r2, [r4, #0]
     596:	str	r2, [sp, #168]	; 0xa8
	return ret;
     598:	ldr	r1, [sp, #168]	; 0xa8
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     59a:	ldr	r2, [pc, #552]	; (7c4 <loop+0x2d8>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     59c:	ldr	r0, [pc, #552]	; (7c8 <loop+0x2dc>)
     59e:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     5a0:	smull	r1, r2, r2, r3
     5a4:	asrs	r1, r3, #31
     5a6:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     5aa:	cmp	r7, r6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     5ac:	str	r3, [r5, #36]	; 0x24
      secs_held = millis_held / 1000;
     5ae:	str	r2, [r5, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     5b0:	beq.w	d88 <loop+0x89c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5b4:	ldr	r1, [r4, #0]
     5b6:	str	r1, [sp, #164]	; 0xa4
	return ret;
     5b8:	ldr	r1, [sp, #164]	; 0xa4
        m_lastDebounceTime = millis();
     5ba:	str	r1, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5bc:	ldr	r0, [r4, #0]
     5be:	str	r0, [sp, #160]	; 0xa0
	return ret;
     5c0:	ldr	r0, [sp, #160]	; 0xa0
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     5c2:	cmp	r0, r1
     5c4:	beq.n	5da <loop+0xee>
        // and the current changed
        if (current != m_state) {
     5c6:	ldr	r1, [r5, #4]
     5c8:	ldr.w	r8, [pc, #508]	; 7c8 <loop+0x2dc>
     5cc:	cmp	r6, r1
     5ce:	beq.n	5da <loop+0xee>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     5d0:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     5d2:	str.w	r6, [r8, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     5d6:	ble.w	111c <loop+0xc30>
        onClick();
      }
 
      if (millis_held > 50) {
     5da:	cmp	r3, #50	; 0x32
     5dc:	ble.n	5ee <loop+0x102>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     5de:	cbnz	r6, 5ee <loop+0x102>
     5e0:	ldrb.w	r3, [r5, #48]	; 0x30
     5e4:	ldr	r7, [pc, #480]	; (7c8 <loop+0x2dc>)
     5e6:	cmp	r3, #1
     5e8:	beq.w	135a <loop+0xe6e>
     5ec:	ldr	r6, [r5, #32]

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     5ee:	ldr	r7, [pc, #476]	; (7cc <loop+0x2e0>)
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     5f0:	strb.w	r6, [r5, #48]	; 0x30

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     5f4:	ldrb.w	r0, [r7, #56]	; 0x38
          }
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     5f8:	str	r2, [r5, #44]	; 0x2c

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     5fa:	bl	2b0c <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     5fe:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     600:	mov	r5, r0
     602:	str	r0, [r7, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     604:	ldrb.w	r6, [r7, #48]	; 0x30
     608:	beq.w	e6a <loop+0x97e>
     60c:	ldr	r3, [r7, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     60e:	ldr	r2, [r4, #0]
     610:	str	r2, [sp, #148]	; 0x94
	return ret;
     612:	ldr	r1, [sp, #148]	; 0x94
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     614:	ldr	r2, [pc, #428]	; (7c4 <loop+0x2d8>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     616:	ldr	r0, [pc, #436]	; (7cc <loop+0x2e0>)
     618:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     61a:	smull	r1, r2, r2, r3
     61e:	asrs	r1, r3, #31
     620:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     624:	cmp	r6, r5
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     626:	str	r3, [r7, #36]	; 0x24
      secs_held = millis_held / 1000;
     628:	str	r2, [r7, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     62a:	beq.w	e64 <loop+0x978>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     62e:	ldr	r1, [r4, #0]
     630:	str	r1, [sp, #144]	; 0x90
	return ret;
     632:	ldr	r1, [sp, #144]	; 0x90
        m_lastDebounceTime = millis();
     634:	str	r1, [r7, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     636:	ldr	r0, [r4, #0]
     638:	str	r0, [sp, #140]	; 0x8c
	return ret;
     63a:	ldr	r0, [sp, #140]	; 0x8c
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     63c:	cmp	r0, r1
     63e:	beq.n	654 <loop+0x168>
        // and the current changed
        if (current != m_state) {
     640:	ldr	r1, [r7, #4]
     642:	ldr.w	r8, [pc, #392]	; 7cc <loop+0x2e0>
     646:	cmp	r1, r5
     648:	beq.n	654 <loop+0x168>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     64a:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     64c:	str.w	r5, [r8, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     650:	ble.w	1084 <loop+0xb98>
        onClick();
      }
 
      if (millis_held > 50) {
     654:	cmp	r3, #50	; 0x32
     656:	ble.n	668 <loop+0x17c>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     658:	cbnz	r5, 668 <loop+0x17c>
     65a:	ldrb.w	r3, [r7, #48]	; 0x30
     65e:	ldr	r6, [pc, #364]	; (7cc <loop+0x2e0>)
     660:	cmp	r3, #1
     662:	beq.w	1346 <loop+0xe5a>
     666:	ldr	r5, [r7, #32]

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     668:	ldr	r6, [pc, #356]	; (7d0 <loop+0x2e4>)
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     66a:	strb.w	r5, [r7, #48]	; 0x30

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     66e:	ldrb.w	r0, [r6, #56]	; 0x38
          }
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     672:	str	r2, [r7, #44]	; 0x2c

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     674:	bl	2b0c <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     678:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     67a:	mov	r7, r0
     67c:	str	r0, [r6, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     67e:	ldrb.w	r5, [r6, #48]	; 0x30
     682:	beq.w	ea6 <loop+0x9ba>
     686:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     688:	ldr	r2, [r4, #0]
     68a:	str	r2, [sp, #128]	; 0x80
	return ret;
     68c:	ldr	r1, [sp, #128]	; 0x80
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     68e:	ldr	r2, [pc, #308]	; (7c4 <loop+0x2d8>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     690:	ldr	r0, [pc, #316]	; (7d0 <loop+0x2e4>)
     692:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     694:	smull	r1, r2, r2, r3
     698:	asrs	r1, r3, #31
     69a:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     69e:	cmp	r5, r7
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     6a0:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     6a2:	str	r2, [r6, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     6a4:	beq.w	ea2 <loop+0x9b6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6a8:	ldr	r1, [r4, #0]
     6aa:	str	r1, [sp, #124]	; 0x7c
	return ret;
     6ac:	ldr	r1, [sp, #124]	; 0x7c
        m_lastDebounceTime = millis();
     6ae:	str	r1, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6b0:	ldr	r0, [r4, #0]
     6b2:	str	r0, [sp, #120]	; 0x78
	return ret;
     6b4:	ldr	r0, [sp, #120]	; 0x78
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     6b6:	cmp	r0, r1
     6b8:	beq.n	6ce <loop+0x1e2>
        // and the current changed
        if (current != m_state) {
     6ba:	ldr	r1, [r6, #4]
     6bc:	ldr.w	r8, [pc, #272]	; 7d0 <loop+0x2e4>
     6c0:	cmp	r7, r1
     6c2:	beq.n	6ce <loop+0x1e2>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     6c4:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     6c6:	str.w	r7, [r8, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     6ca:	ble.w	fbe <loop+0xad2>
        onClick();
      }
 
      if (millis_held > 50) {
     6ce:	cmp	r3, #50	; 0x32
     6d0:	ble.n	6e2 <loop+0x1f6>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     6d2:	cbnz	r7, 6e2 <loop+0x1f6>
     6d4:	ldrb.w	r3, [r6, #48]	; 0x30
     6d8:	ldr	r5, [pc, #244]	; (7d0 <loop+0x2e4>)
     6da:	cmp	r3, #1
     6dc:	beq.w	12f6 <loop+0xe0a>
     6e0:	ldr	r7, [r6, #32]

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     6e2:	ldr	r5, [pc, #240]	; (7d4 <loop+0x2e8>)
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     6e4:	strb.w	r7, [r6, #48]	; 0x30

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     6e8:	ldrb.w	r0, [r5, #56]	; 0x38
          }
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     6ec:	str	r2, [r6, #44]	; 0x2c

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     6ee:	bl	2b0c <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     6f2:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     6f4:	mov	r7, r0
     6f6:	str	r0, [r5, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     6f8:	ldrb.w	r6, [r5, #48]	; 0x30
     6fc:	beq.w	e2e <loop+0x942>
     700:	ldr	r3, [r5, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     702:	ldr	r2, [r4, #0]
     704:	str	r2, [sp, #108]	; 0x6c
	return ret;
     706:	ldr	r1, [sp, #108]	; 0x6c
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     708:	ldr	r2, [pc, #184]	; (7c4 <loop+0x2d8>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     70a:	ldr	r0, [pc, #200]	; (7d4 <loop+0x2e8>)
     70c:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     70e:	smull	r1, r2, r2, r3
     712:	asrs	r1, r3, #31
     714:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     718:	cmp	r6, r7
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     71a:	str	r3, [r5, #36]	; 0x24
      secs_held = millis_held / 1000;
     71c:	str	r2, [r5, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     71e:	beq.w	e2a <loop+0x93e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     722:	ldr	r1, [r4, #0]
     724:	str	r1, [sp, #104]	; 0x68
	return ret;
     726:	ldr	r1, [sp, #104]	; 0x68
        m_lastDebounceTime = millis();
     728:	str	r1, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     72a:	ldr	r0, [r4, #0]
     72c:	str	r0, [sp, #100]	; 0x64
	return ret;
     72e:	ldr	r0, [sp, #100]	; 0x64
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     730:	cmp	r0, r1
     732:	beq.n	748 <loop+0x25c>
        // and the current changed
        if (current != m_state) {
     734:	ldr	r1, [r5, #4]
     736:	ldr.w	r8, [pc, #156]	; 7d4 <loop+0x2e8>
     73a:	cmp	r1, r7
     73c:	beq.n	748 <loop+0x25c>
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     73e:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     740:	str.w	r7, [r8, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     744:	ble.w	1000 <loop+0xb14>
        onClick();
      }
 
      if (millis_held > 50) {
     748:	cmp	r3, #50	; 0x32
     74a:	ble.n	75c <loop+0x270>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     74c:	cbnz	r7, 75c <loop+0x270>
     74e:	ldrb.w	r3, [r5, #48]	; 0x30
     752:	ldr	r6, [pc, #128]	; (7d4 <loop+0x2e8>)
     754:	cmp	r3, #1
     756:	beq.w	130a <loop+0xe1e>
     75a:	ldr	r7, [r5, #32]

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     75c:	ldr	r6, [pc, #120]	; (7d8 <loop+0x2ec>)
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     75e:	strb.w	r7, [r5, #48]	; 0x30

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     762:	ldrb.w	r0, [r6, #56]	; 0x38
          }
        }
      }

      previous = current;
      prev_secs_held = secs_held;
     766:	str	r2, [r5, #44]	; 0x2c

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     768:	bl	2b0c <digitalRead>

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     76c:	cmp	r0, #1

      return false;
    }

    void check (void) {
      current = digitalRead(m_pin);
     76e:	mov	r5, r0
     770:	str	r0, [r6, #32]

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     772:	ldrb.w	r7, [r6, #48]	; 0x30
     776:	beq.w	df4 <loop+0x908>
     77a:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     77c:	ldr	r2, [r4, #0]
     77e:	str	r2, [sp, #88]	; 0x58
	return ret;
     780:	ldr	r1, [sp, #88]	; 0x58
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     782:	ldr	r2, [pc, #64]	; (7c4 <loop+0x2d8>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     784:	ldr	r0, [pc, #80]	; (7d8 <loop+0x2ec>)
     786:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     788:	smull	r1, r2, r2, r3
     78c:	asrs	r1, r3, #31
     78e:	rsb	r2, r1, r2, asr #6
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     792:	cmp	r7, r5
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     794:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     796:	str	r2, [r6, #40]	; 0x28
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     798:	beq.w	df0 <loop+0x904>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     79c:	ldr	r1, [r4, #0]
     79e:	str	r1, [sp, #84]	; 0x54
	return ret;
     7a0:	ldr	r1, [sp, #84]	; 0x54
        m_lastDebounceTime = millis();
     7a2:	str	r1, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7a4:	ldr	r0, [r4, #0]
     7a6:	str	r0, [sp, #80]	; 0x50
	return ret;
     7a8:	ldr	r0, [sp, #80]	; 0x50
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     7aa:	cmp	r0, r1
     7ac:	beq.n	7e6 <loop+0x2fa>
        // and the current changed
        if (current != m_state) {
     7ae:	ldr	r1, [r6, #4]
     7b0:	ldr.w	r8, [pc, #36]	; 7d8 <loop+0x2ec>
     7b4:	cmp	r1, r5
     7b6:	beq.n	7e6 <loop+0x2fa>
     7b8:	b.n	7dc <loop+0x2f0>
     7ba:	nop
     7bc:	.word	0x1fff1910
     7c0:	.word	0x1fff160c
     7c4:	.word	0x10624dd3
     7c8:	.word	0x1fff1648
     7cc:	.word	0x1fff1684
     7d0:	.word	0x1fff16c0
     7d4:	.word	0x1fff16fc
     7d8:	.word	0x1fff1738
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     7dc:	cmp	r2, #0

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     7de:	str.w	r5, [r8, #4]
      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;

      boolean debounced = debounce(current);

      if (debounced && secs_held < 1) {
     7e2:	ble.w	1042 <loop+0xb56>
        onClick();
      }
 
      if (millis_held > 50) {
     7e6:	cmp	r3, #50	; 0x32
     7e8:	ble.n	7fa <loop+0x30e>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
     7ea:	cbnz	r5, 7fa <loop+0x30e>
     7ec:	ldrb.w	r3, [r6, #48]	; 0x30
     7f0:	ldr	r7, [pc, #648]	; (a7c <loop+0x590>)
     7f2:	cmp	r3, #1
     7f4:	beq.w	131e <loop+0xe32>
     7f8:	ldr	r5, [r6, #32]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     7fa:	ldr	r7, [pc, #644]	; (a80 <loop+0x594>)
            m_sequence.exitShiftMode();
          }
        }
      }

      previous = current;
     7fc:	strb.w	r5, [r6, #48]	; 0x30
     800:	ldrb	r3, [r7, #16]
      prev_secs_held = secs_held;
     802:	str	r2, [r6, #44]	; 0x2c
     804:	cmp	r3, #0
     806:	beq.w	cd8 <loop+0x7ec>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     80a:	ldr	r3, [r4, #0]
     80c:	str	r3, [sp, #72]	; 0x48
	return ret;
     80e:	ldr	r3, [sp, #72]	; 0x48
     810:	ldr	r1, [r7, #8]
     812:	ldr	r2, [r7, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     814:	ldr	r6, [pc, #620]	; (a84 <loop+0x598>)
     816:	subs	r3, r3, r1
     818:	cmp	r2, r3
     81a:	bcc.w	cb8 <loop+0x7cc>
     81e:	ldr	r5, [pc, #616]	; (a88 <loop+0x59c>)
     820:	ldrb	r3, [r5, #16]
     822:	cmp	r3, #0
     824:	beq.w	c70 <loop+0x784>
     828:	ldr	r3, [r4, #0]
     82a:	str	r3, [sp, #60]	; 0x3c
	return ret;
     82c:	ldr	r3, [sp, #60]	; 0x3c
     82e:	ldr	r1, [r5, #8]
     830:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     832:	ldr	r7, [pc, #592]	; (a84 <loop+0x598>)
     834:	subs	r3, r3, r1
     836:	cmp	r2, r3
     838:	bcc.w	c50 <loop+0x764>
     83c:	ldr	r5, [pc, #588]	; (a8c <loop+0x5a0>)
     83e:	ldrb	r3, [r5, #16]
     840:	cmp	r3, #0
     842:	beq.w	c08 <loop+0x71c>
     846:	ldr	r3, [r4, #0]
     848:	str	r3, [sp, #48]	; 0x30
	return ret;
     84a:	ldr	r3, [sp, #48]	; 0x30
     84c:	ldr	r1, [r5, #8]
     84e:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     850:	ldr	r7, [pc, #560]	; (a84 <loop+0x598>)
     852:	subs	r3, r3, r1
     854:	cmp	r2, r3
     856:	bcc.w	be8 <loop+0x6fc>
     85a:	ldr	r5, [pc, #564]	; (a90 <loop+0x5a4>)
     85c:	ldrb	r3, [r5, #16]
     85e:	cmp	r3, #0
     860:	beq.w	ba0 <loop+0x6b4>
     864:	ldr	r3, [r4, #0]
     866:	str	r3, [sp, #36]	; 0x24
	return ret;
     868:	ldr	r3, [sp, #36]	; 0x24
     86a:	ldr	r1, [r5, #8]
     86c:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     86e:	ldr	r7, [pc, #532]	; (a84 <loop+0x598>)
     870:	subs	r3, r3, r1
     872:	cmp	r2, r3
     874:	bcc.w	b80 <loop+0x694>
     878:	ldr	r5, [pc, #536]	; (a94 <loop+0x5a8>)
     87a:	ldrb	r3, [r5, #16]
     87c:	cmp	r3, #0
     87e:	beq.w	b38 <loop+0x64c>
     882:	ldr	r3, [r4, #0]
     884:	str	r3, [sp, #24]
	return ret;
     886:	ldr	r3, [sp, #24]
     888:	ldr	r1, [r5, #8]
     88a:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     88c:	ldr	r7, [pc, #500]	; (a84 <loop+0x598>)
     88e:	subs	r3, r3, r1
     890:	cmp	r2, r3
     892:	bcc.w	b18 <loop+0x62c>
     896:	ldr	r5, [pc, #512]	; (a98 <loop+0x5ac>)
     898:	ldrb	r3, [r5, #16]
     89a:	cmp	r3, #0
     89c:	beq.w	ad4 <loop+0x5e8>
     8a0:	ldr	r3, [r4, #0]
     8a2:	str	r3, [sp, #12]
	return ret;
     8a4:	ldr	r3, [sp, #12]
     8a6:	ldr	r1, [r5, #8]
     8a8:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8aa:	ldr	r7, [pc, #472]	; (a84 <loop+0x598>)
     8ac:	subs	r3, r3, r1
     8ae:	cmp	r2, r3
     8b0:	bcc.w	ab4 <loop+0x5c8>
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     8b4:	ldr	r4, [pc, #484]	; (a9c <loop+0x5b0>)
     8b6:	ldrb	r0, [r4, #0]
     8b8:	bl	291c <analogRead>

      int diff = abs(m_value - m_lastValue);
     8bc:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     8be:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     8c0:	cmp	r0, r3
     8c2:	beq.n	90e <loop+0x422>
     8c4:	subs	r3, r0, r3
     8c6:	cmp	r3, #0
     8c8:	it	lt
     8ca:	neglt	r3, r3
     8cc:	cmp	r3, #10
     8ce:	ble.n	90e <loop+0x422>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     8d0:	ldrb	r3, [r4, #24]
     8d2:	cmp	r3, #4
     8d4:	beq.w	136e <loop+0xe82>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     8d8:	ldr	r3, [pc, #452]	; (aa0 <loop+0x5b4>)
     8da:	ldrb	r3, [r3, #0]
     8dc:	cmp	r3, #1
     8de:	beq.w	16c2 <loop+0x11d6>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     8e2:	cmp	r3, #0
     8e4:	beq.w	f64 <loop+0xa78>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     8e8:	cmp	r3, #2
     8ea:	bne.n	90c <loop+0x420>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     8ec:	ldr	r2, [r4, #16]
     8ee:	ldr	r1, [r4, #12]
      m_controller.controlChange(0, 123, 127);
    };

    void controlLength (int value) {
      int newValue = map(value, 0, 1023, 24, 1);
      m_length = newValue;
     8f0:	mvn.w	r3, #21
     8f4:	mul.w	r3, r3, r0
     8f8:	cmp	r3, #0
     8fa:	add.w	r2, r2, r1, lsl #2
     8fe:	it	lt
     900:	addwlt	r3, r3, #1023	; 0x3ff
     904:	ldr	r2, [r2, #4]
     906:	asrs	r3, r3, #10
     908:	adds	r3, #24
     90a:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     90c:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     90e:	ldr	r4, [pc, #404]	; (aa4 <loop+0x5b8>)
     910:	ldrb	r0, [r4, #0]
     912:	bl	291c <analogRead>

      int diff = abs(m_value - m_lastValue);
     916:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     918:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     91a:	cmp	r0, r3
     91c:	beq.n	968 <loop+0x47c>
     91e:	subs	r3, r0, r3
     920:	cmp	r3, #0
     922:	it	lt
     924:	neglt	r3, r3
     926:	cmp	r3, #10
     928:	ble.n	968 <loop+0x47c>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     92a:	ldrb	r3, [r4, #24]
     92c:	cmp	r3, #4
     92e:	beq.w	13e6 <loop+0xefa>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     932:	ldr	r3, [pc, #364]	; (aa0 <loop+0x5b4>)
     934:	ldrb	r3, [r3, #0]
     936:	cmp	r3, #1
     938:	beq.w	1668 <loop+0x117c>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     93c:	cmp	r3, #0
     93e:	beq.w	f46 <loop+0xa5a>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     942:	cmp	r3, #2
     944:	bne.n	966 <loop+0x47a>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     946:	ldr	r2, [r4, #16]
     948:	ldr	r1, [r4, #12]
     94a:	mvn.w	r3, #21
     94e:	mul.w	r3, r3, r0
     952:	cmp	r3, #0
     954:	add.w	r2, r2, r1, lsl #2
     958:	it	lt
     95a:	addwlt	r3, r3, #1023	; 0x3ff
     95e:	ldr	r2, [r2, #4]
     960:	asrs	r3, r3, #10
     962:	adds	r3, #24
     964:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     966:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     968:	ldr	r4, [pc, #316]	; (aa8 <loop+0x5bc>)
     96a:	ldrb	r0, [r4, #0]
     96c:	bl	291c <analogRead>

      int diff = abs(m_value - m_lastValue);
     970:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     972:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     974:	cmp	r0, r3
     976:	beq.n	9c2 <loop+0x4d6>
     978:	subs	r3, r0, r3
     97a:	cmp	r3, #0
     97c:	it	lt
     97e:	neglt	r3, r3
     980:	cmp	r3, #10
     982:	ble.n	9c2 <loop+0x4d6>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     984:	ldrb	r3, [r4, #24]
     986:	cmp	r3, #4
     988:	beq.w	13c8 <loop+0xedc>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     98c:	ldr	r3, [pc, #272]	; (aa0 <loop+0x5b4>)
     98e:	ldrb	r3, [r3, #0]
     990:	cmp	r3, #1
     992:	beq.w	1686 <loop+0x119a>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     996:	cmp	r3, #0
     998:	beq.w	fa0 <loop+0xab4>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     99c:	cmp	r3, #2
     99e:	bne.n	9c0 <loop+0x4d4>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     9a0:	ldr	r2, [r4, #16]
     9a2:	ldr	r1, [r4, #12]
     9a4:	mvn.w	r3, #21
     9a8:	mul.w	r3, r3, r0
     9ac:	cmp	r3, #0
     9ae:	add.w	r2, r2, r1, lsl #2
     9b2:	it	lt
     9b4:	addwlt	r3, r3, #1023	; 0x3ff
     9b8:	ldr	r2, [r2, #4]
     9ba:	asrs	r3, r3, #10
     9bc:	adds	r3, #24
     9be:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     9c0:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     9c2:	ldr	r4, [pc, #232]	; (aac <loop+0x5c0>)
     9c4:	ldrb	r0, [r4, #0]
     9c6:	bl	291c <analogRead>

      int diff = abs(m_value - m_lastValue);
     9ca:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     9cc:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     9ce:	cmp	r0, r3
     9d0:	beq.n	a1c <loop+0x530>
     9d2:	subs	r3, r0, r3
     9d4:	cmp	r3, #0
     9d6:	it	lt
     9d8:	neglt	r3, r3
     9da:	cmp	r3, #10
     9dc:	ble.n	a1c <loop+0x530>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     9de:	ldrb	r3, [r4, #24]
     9e0:	cmp	r3, #4
     9e2:	beq.w	13aa <loop+0xebe>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     9e6:	ldr	r3, [pc, #184]	; (aa0 <loop+0x5b4>)
     9e8:	ldrb	r3, [r3, #0]
     9ea:	cmp	r3, #1
     9ec:	beq.w	16a4 <loop+0x11b8>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     9f0:	cmp	r3, #0
     9f2:	beq.w	f28 <loop+0xa3c>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     9f6:	cmp	r3, #2
     9f8:	bne.n	a1a <loop+0x52e>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     9fa:	ldr	r2, [r4, #16]
     9fc:	ldr	r1, [r4, #12]
     9fe:	mvn.w	r3, #21
     a02:	mul.w	r3, r3, r0
     a06:	cmp	r3, #0
     a08:	add.w	r2, r2, r1, lsl #2
     a0c:	it	lt
     a0e:	addwlt	r3, r3, #1023	; 0x3ff
     a12:	ldr	r2, [r2, #4]
     a14:	asrs	r3, r3, #10
     a16:	adds	r3, #24
     a18:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     a1a:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     a1c:	ldr	r4, [pc, #144]	; (ab0 <loop+0x5c4>)
     a1e:	ldrb	r0, [r4, #0]
     a20:	bl	291c <analogRead>

      int diff = abs(m_value - m_lastValue);
     a24:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     a26:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     a28:	cmp	r0, r3
     a2a:	beq.n	a76 <loop+0x58a>
     a2c:	subs	r3, r0, r3
     a2e:	cmp	r3, #0
     a30:	it	lt
     a32:	neglt	r3, r3
     a34:	cmp	r3, #10
     a36:	ble.n	a76 <loop+0x58a>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     a38:	ldrb	r3, [r4, #24]
     a3a:	cmp	r3, #4
     a3c:	beq.w	138c <loop+0xea0>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     a40:	ldr	r3, [pc, #92]	; (aa0 <loop+0x5b4>)
     a42:	ldrb	r3, [r3, #0]
     a44:	cmp	r3, #1
     a46:	beq.w	16f8 <loop+0x120c>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     a4a:	cmp	r3, #0
     a4c:	beq.w	f82 <loop+0xa96>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     a50:	cmp	r3, #2
     a52:	bne.n	a74 <loop+0x588>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     a54:	ldr	r2, [r4, #16]
     a56:	ldr	r1, [r4, #12]
     a58:	mvn.w	r3, #21
     a5c:	mul.w	r3, r3, r0
     a60:	cmp	r3, #0
     a62:	add.w	r2, r2, r1, lsl #2
     a66:	it	lt
     a68:	addwlt	r3, r3, #1023	; 0x3ff
     a6c:	ldr	r2, [r2, #4]
     a6e:	asrs	r3, r3, #10
     a70:	adds	r3, #24
     a72:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     a74:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     a76:	add	sp, #248	; 0xf8
     a78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a7c:	.word	0x1fff1738
     a80:	.word	0x1fff1898
     a84:	.word	0x1fff1910
     a88:	.word	0x1fff18b0
     a8c:	.word	0x1fff18c8
     a90:	.word	0x1fff18e0
     a94:	.word	0x1fff15d8
     a98:	.word	0x1fff15f0
     a9c:	.word	0x1fff17f8
     aa0:	.word	0x1fff1894
     aa4:	.word	0x1fff1814
     aa8:	.word	0x1fff1830
     aac:	.word	0x1fff184c
     ab0:	.word	0x1fff1868
        digitalWrite(m_pin, !digitalRead(m_pin));
     ab4:	ldrb	r6, [r5, #0]
     ab6:	mov	r0, r6
     ab8:	bl	2b0c <digitalRead>
     abc:	clz	r1, r0
     ac0:	lsrs	r1, r1, #5
     ac2:	mov	r0, r6
     ac4:	bl	2b00 <digitalWrite>
     ac8:	ldr	r3, [r7, #0]
     aca:	str	r3, [sp, #16]
	return ret;
     acc:	ldr	r3, [sp, #16]
        blinking = false;
        lastBlink = millis();        
     ace:	str	r3, [r5, #8]
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     ad0:	movs	r3, #0
     ad2:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     ad4:	ldr	r6, [r5, #20]
     ad6:	ldr	r5, [pc, #748]	; (dc4 <loop+0x8d8>)
     ad8:	cmp	r6, #0
     ada:	ble.w	8b4 <loop+0x3c8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ade:	ldr	r3, [r4, #0]
     ae0:	str	r3, [sp, #8]
	return ret;
     ae2:	ldr	r3, [sp, #8]
     ae4:	ldr	r1, [r5, #8]
     ae6:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ae8:	ldr	r7, [pc, #732]	; (dc8 <loop+0x8dc>)
     aea:	subs	r3, r3, r1
     aec:	cmp	r2, r3
     aee:	bcs.w	8b4 <loop+0x3c8>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     af2:	ldrb	r4, [r5, #0]
     af4:	mov	r0, r4
     af6:	bl	2b0c <digitalRead>
     afa:	clz	r1, r0
     afe:	lsrs	r1, r1, #5
     b00:	mov	r0, r4
     b02:	bl	2b00 <digitalWrite>
     b06:	ldr	r3, [r7, #0]
     b08:	str	r3, [sp, #244]	; 0xf4
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     b0a:	subs	r6, #2
	return ret;
     b0c:	ldr	r2, [sp, #244]	; 0xf4
     b0e:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b10:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     b12:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b14:	strb	r3, [r5, #16]
     b16:	b.n	8b4 <loop+0x3c8>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     b18:	ldrb	r6, [r5, #0]
     b1a:	mov	r0, r6
     b1c:	bl	2b0c <digitalRead>
     b20:	clz	r1, r0
     b24:	lsrs	r1, r1, #5
     b26:	mov	r0, r6
     b28:	bl	2b00 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b2c:	ldr	r3, [r7, #0]
     b2e:	str	r3, [sp, #28]
	return ret;
     b30:	ldr	r3, [sp, #28]
        blinking = false;
        lastBlink = millis();        
     b32:	str	r3, [r5, #8]
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     b34:	movs	r3, #0
     b36:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     b38:	ldr	r6, [r5, #20]
     b3a:	ldr	r5, [pc, #656]	; (dcc <loop+0x8e0>)
     b3c:	cmp	r6, #0
     b3e:	ble.w	896 <loop+0x3aa>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b42:	ldr	r3, [r4, #0]
     b44:	str	r3, [sp, #20]
	return ret;
     b46:	ldr	r3, [sp, #20]
     b48:	ldr	r1, [r5, #8]
     b4a:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b4c:	ldr.w	r8, [pc, #632]	; dc8 <loop+0x8dc>
     b50:	subs	r3, r3, r1
     b52:	cmp	r2, r3
     b54:	bcs.w	896 <loop+0x3aa>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     b58:	ldrb	r7, [r5, #0]
     b5a:	mov	r0, r7
     b5c:	bl	2b0c <digitalRead>
     b60:	clz	r1, r0
     b64:	lsrs	r1, r1, #5
     b66:	mov	r0, r7
     b68:	bl	2b00 <digitalWrite>
     b6c:	ldr.w	r3, [r8]
     b70:	str	r3, [sp, #240]	; 0xf0
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     b72:	subs	r6, #2
	return ret;
     b74:	ldr	r2, [sp, #240]	; 0xf0
     b76:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b78:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     b7a:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b7c:	strb	r3, [r5, #16]
     b7e:	b.n	896 <loop+0x3aa>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     b80:	ldrb	r6, [r5, #0]
     b82:	mov	r0, r6
     b84:	bl	2b0c <digitalRead>
     b88:	clz	r1, r0
     b8c:	lsrs	r1, r1, #5
     b8e:	mov	r0, r6
     b90:	bl	2b00 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b94:	ldr	r3, [r7, #0]
     b96:	str	r3, [sp, #40]	; 0x28
	return ret;
     b98:	ldr	r3, [sp, #40]	; 0x28
        blinking = false;
        lastBlink = millis();        
     b9a:	str	r3, [r5, #8]
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     b9c:	movs	r3, #0
     b9e:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     ba0:	ldr	r6, [r5, #20]
     ba2:	ldr	r5, [pc, #556]	; (dd0 <loop+0x8e4>)
     ba4:	cmp	r6, #0
     ba6:	ble.w	878 <loop+0x38c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     baa:	ldr	r3, [r4, #0]
     bac:	str	r3, [sp, #32]
	return ret;
     bae:	ldr	r3, [sp, #32]
     bb0:	ldr	r1, [r5, #8]
     bb2:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     bb4:	ldr.w	r8, [pc, #528]	; dc8 <loop+0x8dc>
     bb8:	subs	r3, r3, r1
     bba:	cmp	r2, r3
     bbc:	bcs.w	878 <loop+0x38c>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     bc0:	ldrb	r7, [r5, #0]
     bc2:	mov	r0, r7
     bc4:	bl	2b0c <digitalRead>
     bc8:	clz	r1, r0
     bcc:	lsrs	r1, r1, #5
     bce:	mov	r0, r7
     bd0:	bl	2b00 <digitalWrite>
     bd4:	ldr.w	r3, [r8]
     bd8:	str	r3, [sp, #236]	; 0xec
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     bda:	subs	r6, #2
	return ret;
     bdc:	ldr	r2, [sp, #236]	; 0xec
     bde:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     be0:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     be2:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     be4:	strb	r3, [r5, #16]
     be6:	b.n	878 <loop+0x38c>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     be8:	ldrb	r6, [r5, #0]
     bea:	mov	r0, r6
     bec:	bl	2b0c <digitalRead>
     bf0:	clz	r1, r0
     bf4:	lsrs	r1, r1, #5
     bf6:	mov	r0, r6
     bf8:	bl	2b00 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     bfc:	ldr	r3, [r7, #0]
     bfe:	str	r3, [sp, #52]	; 0x34
	return ret;
     c00:	ldr	r3, [sp, #52]	; 0x34
        blinking = false;
        lastBlink = millis();        
     c02:	str	r3, [r5, #8]
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     c04:	movs	r3, #0
     c06:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     c08:	ldr	r6, [r5, #20]
     c0a:	ldr	r5, [pc, #456]	; (dd4 <loop+0x8e8>)
     c0c:	cmp	r6, #0
     c0e:	ble.w	85a <loop+0x36e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c12:	ldr	r3, [r4, #0]
     c14:	str	r3, [sp, #44]	; 0x2c
	return ret;
     c16:	ldr	r3, [sp, #44]	; 0x2c
     c18:	ldr	r1, [r5, #8]
     c1a:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c1c:	ldr.w	r8, [pc, #424]	; dc8 <loop+0x8dc>
     c20:	subs	r3, r3, r1
     c22:	cmp	r2, r3
     c24:	bcs.w	85a <loop+0x36e>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     c28:	ldrb	r7, [r5, #0]
     c2a:	mov	r0, r7
     c2c:	bl	2b0c <digitalRead>
     c30:	clz	r1, r0
     c34:	lsrs	r1, r1, #5
     c36:	mov	r0, r7
     c38:	bl	2b00 <digitalWrite>
     c3c:	ldr.w	r3, [r8]
     c40:	str	r3, [sp, #232]	; 0xe8
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     c42:	subs	r6, #2
	return ret;
     c44:	ldr	r2, [sp, #232]	; 0xe8
     c46:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c48:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     c4a:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c4c:	strb	r3, [r5, #16]
     c4e:	b.n	85a <loop+0x36e>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     c50:	ldrb	r6, [r5, #0]
     c52:	mov	r0, r6
     c54:	bl	2b0c <digitalRead>
     c58:	clz	r1, r0
     c5c:	lsrs	r1, r1, #5
     c5e:	mov	r0, r6
     c60:	bl	2b00 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c64:	ldr	r3, [r7, #0]
     c66:	str	r3, [sp, #64]	; 0x40
	return ret;
     c68:	ldr	r3, [sp, #64]	; 0x40
        blinking = false;
        lastBlink = millis();        
     c6a:	str	r3, [r5, #8]
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     c6c:	movs	r3, #0
     c6e:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     c70:	ldr	r6, [r5, #20]
     c72:	ldr	r5, [pc, #356]	; (dd8 <loop+0x8ec>)
     c74:	cmp	r6, #0
     c76:	ble.w	83c <loop+0x350>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c7a:	ldr	r3, [r4, #0]
     c7c:	str	r3, [sp, #56]	; 0x38
	return ret;
     c7e:	ldr	r3, [sp, #56]	; 0x38
     c80:	ldr	r1, [r5, #8]
     c82:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c84:	ldr.w	r8, [pc, #320]	; dc8 <loop+0x8dc>
     c88:	subs	r3, r3, r1
     c8a:	cmp	r2, r3
     c8c:	bcs.w	83c <loop+0x350>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     c90:	ldrb	r7, [r5, #0]
     c92:	mov	r0, r7
     c94:	bl	2b0c <digitalRead>
     c98:	clz	r1, r0
     c9c:	lsrs	r1, r1, #5
     c9e:	mov	r0, r7
     ca0:	bl	2b00 <digitalWrite>
     ca4:	ldr.w	r3, [r8]
     ca8:	str	r3, [sp, #228]	; 0xe4
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     caa:	subs	r6, #2
	return ret;
     cac:	ldr	r2, [sp, #228]	; 0xe4
     cae:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     cb0:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     cb2:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     cb4:	strb	r3, [r5, #16]
     cb6:	b.n	83c <loop+0x350>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     cb8:	ldrb	r5, [r7, #0]
     cba:	mov	r0, r5
     cbc:	bl	2b0c <digitalRead>
     cc0:	clz	r1, r0
     cc4:	lsrs	r1, r1, #5
     cc6:	mov	r0, r5
     cc8:	bl	2b00 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ccc:	ldr	r3, [r6, #0]
     cce:	str	r3, [sp, #76]	; 0x4c
	return ret;
     cd0:	ldr	r3, [sp, #76]	; 0x4c
        blinking = false;
        lastBlink = millis();        
     cd2:	str	r3, [r7, #8]
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     cd4:	movs	r3, #0
     cd6:	strb	r3, [r7, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     cd8:	ldr	r6, [r7, #20]
     cda:	ldr	r5, [pc, #256]	; (ddc <loop+0x8f0>)
     cdc:	cmp	r6, #0
     cde:	ble.w	81e <loop+0x332>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ce2:	ldr	r3, [r4, #0]
     ce4:	str	r3, [sp, #68]	; 0x44
	return ret;
     ce6:	ldr	r3, [sp, #68]	; 0x44
     ce8:	ldr	r1, [r5, #8]
     cea:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cec:	ldr.w	r8, [pc, #216]	; dc8 <loop+0x8dc>
     cf0:	subs	r3, r3, r1
     cf2:	cmp	r2, r3
     cf4:	bcs.w	81e <loop+0x332>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     cf8:	ldrb	r7, [r5, #0]
     cfa:	mov	r0, r7
     cfc:	bl	2b0c <digitalRead>
     d00:	clz	r1, r0
     d04:	lsrs	r1, r1, #5
     d06:	mov	r0, r7
     d08:	bl	2b00 <digitalWrite>
     d0c:	ldr.w	r3, [r8]
     d10:	str	r3, [sp, #224]	; 0xe0
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     d12:	subs	r6, #2
	return ret;
     d14:	ldr	r2, [sp, #224]	; 0xe0
     d16:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d18:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     d1a:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     d1c:	strb	r3, [r5, #16]
     d1e:	b.n	81e <loop+0x332>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     d20:	ldr	r3, [pc, #188]	; (de0 <loop+0x8f4>)
      // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
     d22:	ldrb	r3, [r3, #0]
     d24:	cmp	r3, #250	; 0xfa
     d26:	beq.w	1408 <loop+0xf1c>
     d2a:	cmp	r3, #252	; 0xfc
     d2c:	beq.w	ede <loop+0x9f2>
     d30:	cmp	r3, #248	; 0xf8
     d32:	beq.w	14ae <loop+0xfc2>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     d36:	movs	r1, #35	; 0x23
     d38:	ldr	r0, [pc, #168]	; (de4 <loop+0x8f8>)
     d3a:	ldr	r4, [pc, #140]	; (dc8 <loop+0x8dc>)
     d3c:	bl	24f0 <usb_serial_write>
     d40:	ldr	r0, [pc, #164]	; (de8 <loop+0x8fc>)
     d42:	bl	4064 <Print::println()>
     d46:	b.w	500 <loop+0x14>
     d4a:	ldr	r1, [r0, #20]
     d4c:	b.w	542 <loop+0x56>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     d50:	cmp	r5, #0
     d52:	bne.w	518 <loop+0x2c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d56:	ldr	r3, [r4, #0]
     d58:	str	r3, [sp, #196]	; 0xc4
	return ret;
     d5a:	ldr	r2, [sp, #196]	; 0xc4
     d5c:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d5e:	ldr.w	sl, [pc, #104]	; dc8 <loop+0x8dc>
     d62:	subs	r2, r2, r3
     d64:	cmp	r2, #200	; 0xc8
     d66:	bhi.w	115e <loop+0xc72>
     d6a:	ldr.w	r2, [sl]
     d6e:	str	r2, [sp, #188]	; 0xbc
	return ret;
     d70:	ldr	r1, [sp, #188]	; 0xbc
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     d72:	ldr	r2, [pc, #120]	; (dec <loop+0x900>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     d74:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     d76:	smull	r1, r2, r2, r3
     d7a:	asrs	r1, r3, #31
     d7c:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     d80:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     d82:	str	r2, [r6, #40]	; 0x28
     d84:	b.w	53a <loop+0x4e>
     d88:	ldr	r1, [r0, #20]
     d8a:	b.n	5bc <loop+0xd0>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     d8c:	cmp	r7, #0
     d8e:	bne.w	592 <loop+0xa6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d92:	ldr	r3, [r4, #0]
     d94:	str	r3, [sp, #176]	; 0xb0
	return ret;
     d96:	ldr	r2, [sp, #176]	; 0xb0
     d98:	ldr	r3, [r5, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d9a:	ldr.w	sl, [pc, #44]	; dc8 <loop+0x8dc>
     d9e:	subs	r2, r2, r3
     da0:	cmp	r2, #200	; 0xc8
     da2:	bhi.w	122a <loop+0xd3e>
     da6:	ldr.w	r2, [sl]
     daa:	str	r2, [sp, #168]	; 0xa8
	return ret;
     dac:	ldr	r1, [sp, #168]	; 0xa8
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     dae:	ldr	r2, [pc, #60]	; (dec <loop+0x900>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     db0:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     db2:	smull	r1, r2, r2, r3
     db6:	asrs	r1, r3, #31
     db8:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     dbc:	str	r3, [r5, #36]	; 0x24
      secs_held = millis_held / 1000;
     dbe:	str	r2, [r5, #40]	; 0x28
     dc0:	b.w	5b4 <loop+0xc8>
     dc4:	.word	0x1fff15f0
     dc8:	.word	0x1fff1910
     dcc:	.word	0x1fff15d8
     dd0:	.word	0x1fff18e0
     dd4:	.word	0x1fff18c8
     dd8:	.word	0x1fff18b0
     ddc:	.word	0x1fff1898
     de0:	.word	0x1fff1dcc
     de4:	.word	0x00005580
     de8:	.word	0x1fff0c70
     dec:	.word	0x10624dd3
     df0:	ldr	r1, [r0, #20]
     df2:	b.n	7a4 <loop+0x2b8>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     df4:	cmp	r7, #0
     df6:	bne.w	77a <loop+0x28e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     dfa:	ldr	r3, [r4, #0]
     dfc:	str	r3, [sp, #96]	; 0x60
	return ret;
     dfe:	ldr	r2, [sp, #96]	; 0x60
     e00:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e02:	ldr.w	sl, [pc, #788]	; 1118 <loop+0xc2c>
     e06:	subs	r2, r2, r3
     e08:	cmp	r2, #200	; 0xc8
     e0a:	bhi.w	12b2 <loop+0xdc6>
     e0e:	ldr.w	r2, [sl]
     e12:	str	r2, [sp, #88]	; 0x58
	return ret;
     e14:	ldr	r1, [sp, #88]	; 0x58
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     e16:	ldr	r2, [pc, #752]	; (1108 <loop+0xc1c>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     e18:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     e1a:	smull	r1, r2, r2, r3
     e1e:	asrs	r1, r3, #31
     e20:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     e24:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     e26:	str	r2, [r6, #40]	; 0x28
     e28:	b.n	79c <loop+0x2b0>
     e2a:	ldr	r1, [r0, #20]
     e2c:	b.n	72a <loop+0x23e>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     e2e:	cmp	r6, #0
     e30:	bne.w	700 <loop+0x214>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e34:	ldr	r3, [r4, #0]
     e36:	str	r3, [sp, #116]	; 0x74
	return ret;
     e38:	ldr	r2, [sp, #116]	; 0x74
     e3a:	ldr	r3, [r5, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e3c:	ldr.w	sl, [pc, #728]	; 1118 <loop+0xc2c>
     e40:	subs	r2, r2, r3
     e42:	cmp	r2, #200	; 0xc8
     e44:	bhi.w	11a2 <loop+0xcb6>
     e48:	ldr.w	r2, [sl]
     e4c:	str	r2, [sp, #108]	; 0x6c
	return ret;
     e4e:	ldr	r1, [sp, #108]	; 0x6c
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     e50:	ldr	r2, [pc, #692]	; (1108 <loop+0xc1c>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     e52:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     e54:	smull	r1, r2, r2, r3
     e58:	asrs	r1, r3, #31
     e5a:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     e5e:	str	r3, [r5, #36]	; 0x24
      secs_held = millis_held / 1000;
     e60:	str	r2, [r5, #40]	; 0x28
     e62:	b.n	722 <loop+0x236>
     e64:	ldr	r1, [r0, #20]
     e66:	b.w	636 <loop+0x14a>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     e6a:	cmp	r6, #0
     e6c:	bne.w	60c <loop+0x120>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e70:	ldr	r3, [r4, #0]
     e72:	str	r3, [sp, #156]	; 0x9c
	return ret;
     e74:	ldr	r2, [sp, #156]	; 0x9c
     e76:	ldr	r3, [r7, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     e78:	ldr.w	sl, [pc, #668]	; 1118 <loop+0xc2c>
     e7c:	subs	r2, r2, r3
     e7e:	cmp	r2, #200	; 0xc8
     e80:	bhi.w	126e <loop+0xd82>
     e84:	ldr.w	r2, [sl]
     e88:	str	r2, [sp, #148]	; 0x94
	return ret;
     e8a:	ldr	r1, [sp, #148]	; 0x94
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     e8c:	ldr	r2, [pc, #632]	; (1108 <loop+0xc1c>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     e8e:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     e90:	smull	r1, r2, r2, r3
     e94:	asrs	r1, r3, #31
     e96:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     e9a:	str	r3, [r7, #36]	; 0x24
      secs_held = millis_held / 1000;
     e9c:	str	r2, [r7, #40]	; 0x28
     e9e:	b.w	62e <loop+0x142>
     ea2:	ldr	r1, [r0, #20]
     ea4:	b.n	6b0 <loop+0x1c4>

    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
     ea6:	cmp	r5, #0
     ea8:	bne.w	686 <loop+0x19a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     eac:	ldr	r3, [r4, #0]
     eae:	str	r3, [sp, #136]	; 0x88
	return ret;
     eb0:	ldr	r2, [sp, #136]	; 0x88
     eb2:	ldr	r3, [r6, #52]	; 0x34
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     eb4:	ldr.w	sl, [pc, #608]	; 1118 <loop+0xc2c>
     eb8:	subs	r2, r2, r3
     eba:	cmp	r2, #200	; 0xc8
     ebc:	bhi.w	11e6 <loop+0xcfa>
     ec0:	ldr.w	r2, [sl]
     ec4:	str	r2, [sp, #128]	; 0x80
	return ret;
     ec6:	ldr	r1, [sp, #128]	; 0x80
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
      secs_held = millis_held / 1000;
     ec8:	ldr	r2, [pc, #572]	; (1108 <loop+0xc1c>)
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     eca:	subs	r3, r1, r3
      secs_held = millis_held / 1000;
     ecc:	smull	r1, r2, r2, r3
     ed0:	asrs	r1, r3, #31
     ed2:	rsb	r2, r1, r2, asr #6
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
      }

      millis_held = (millis() - firstTime);
     ed6:	str	r3, [r6, #36]	; 0x24
      secs_held = millis_held / 1000;
     ed8:	str	r2, [r6, #40]	; 0x28
     eda:	b.w	6a8 <loop+0x1bc>
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     ede:	ldr	r2, [pc, #556]	; (110c <loop+0xc20>)
     ee0:	ldr	r0, [pc, #556]	; (1110 <loop+0xc24>)
      ppqn = 0;
      m_sequence.resetStep();
     ee2:	ldr	r1, [r2, #12]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     ee4:	movs	r3, #0
      ppqn = 0;
      m_sequence.resetStep();
      m_sequence.m_leds[5]->toggle();
     ee6:	ldr	r4, [r1, #40]	; 0x28
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
      ppqn = 0;
     ee8:	str	r3, [r2, #8]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
     eea:	strb	r3, [r2, #0]
    void stopCurrentStep () {
      m_steps[m_currentStep]->stop();
    };

    void resetStep () {
      m_currentStep = 0;
     eec:	str	r3, [r1, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
     eee:	ldr	r3, [r4, #4]
     ef0:	clz	r3, r3
     ef4:	lsrs	r3, r3, #5
     ef6:	str	r3, [r4, #4]
     ef8:	movs	r1, #8
     efa:	bl	24f0 <usb_serial_write>
     efe:	ldr	r0, [pc, #532]	; (1114 <loop+0xc28>)
     f00:	bl	4064 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
     f04:	ldrb	r1, [r4, #4]
     f06:	ldrb	r0, [r4, #0]
     f08:	bl	2b00 <digitalWrite>

      if (blinking) {
     f0c:	ldrb	r3, [r4, #16]
     f0e:	cmp	r3, #0
     f10:	beq.w	4fe <loop+0x12>
        digitalWrite(m_pin, !m_state);
     f14:	ldr	r1, [r4, #4]
     f16:	ldrb	r0, [r4, #0]
     f18:	ldr	r4, [pc, #508]	; (1118 <loop+0xc2c>)
     f1a:	clz	r1, r1
     f1e:	lsrs	r1, r1, #5
     f20:	bl	2b00 <digitalWrite>
     f24:	b.w	500 <loop+0x14>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
          m_sequence.m_steps[m_id]->controlPitch(m_value);
     f28:	ldr	r3, [r4, #16]
     f2a:	ldr	r2, [r4, #12]
     f2c:	add.w	r2, r3, r2, lsl #2
    };

    void controlPitch (int value) {
      int newValue = map(value, 0, 1023, 51, 38);
      m_pitch = newValue;
     f30:	sub.w	r3, r0, r0, lsl #2
     f34:	lsls	r3, r3, #2
     f36:	it	mi
     f38:	addwmi	r3, r3, #1023	; 0x3ff
     f3c:	ldr	r2, [r2, #4]
     f3e:	asrs	r3, r3, #10
     f40:	adds	r3, #51	; 0x33
     f42:	str	r3, [r2, #8]
     f44:	b.n	a1a <loop+0x52e>
     f46:	ldr	r3, [r4, #16]
     f48:	ldr	r2, [r4, #12]
     f4a:	add.w	r2, r3, r2, lsl #2
     f4e:	sub.w	r3, r0, r0, lsl #2
     f52:	lsls	r3, r3, #2
     f54:	it	mi
     f56:	addwmi	r3, r3, #1023	; 0x3ff
     f5a:	ldr	r2, [r2, #4]
     f5c:	asrs	r3, r3, #10
     f5e:	adds	r3, #51	; 0x33
     f60:	str	r3, [r2, #8]
     f62:	b.n	966 <loop+0x47a>
     f64:	ldr	r3, [r4, #16]
     f66:	ldr	r2, [r4, #12]
     f68:	add.w	r2, r3, r2, lsl #2
     f6c:	sub.w	r3, r0, r0, lsl #2
     f70:	lsls	r3, r3, #2
     f72:	it	mi
     f74:	addwmi	r3, r3, #1023	; 0x3ff
     f78:	ldr	r2, [r2, #4]
     f7a:	asrs	r3, r3, #10
     f7c:	adds	r3, #51	; 0x33
     f7e:	str	r3, [r2, #8]
     f80:	b.n	90c <loop+0x420>
     f82:	ldr	r3, [r4, #16]
     f84:	ldr	r2, [r4, #12]
     f86:	add.w	r2, r3, r2, lsl #2
     f8a:	sub.w	r3, r0, r0, lsl #2
     f8e:	lsls	r3, r3, #2
     f90:	it	mi
     f92:	addwmi	r3, r3, #1023	; 0x3ff
     f96:	ldr	r2, [r2, #4]
     f98:	asrs	r3, r3, #10
     f9a:	adds	r3, #51	; 0x33
     f9c:	str	r3, [r2, #8]
     f9e:	b.n	a74 <loop+0x588>
     fa0:	ldr	r3, [r4, #16]
     fa2:	ldr	r2, [r4, #12]
     fa4:	add.w	r2, r3, r2, lsl #2
     fa8:	sub.w	r3, r0, r0, lsl #2
     fac:	lsls	r3, r3, #2
     fae:	it	mi
     fb0:	addwmi	r3, r3, #1023	; 0x3ff
     fb4:	ldr	r2, [r2, #4]
     fb6:	asrs	r3, r3, #10
     fb8:	adds	r3, #51	; 0x33
     fba:	str	r3, [r2, #8]
     fbc:	b.n	9c0 <loop+0x4d4>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
     fbe:	cmp	r7, #0
     fc0:	bne.w	6e2 <loop+0x1f6>
     fc4:	ldrb.w	r1, [r8, #16]
     fc8:	cmp	r1, #0
     fca:	beq.w	18bc <loop+0x13d0>
        if (m_sequence.getShiftMode()) {
     fce:	ldr.w	r9, [r8, #28]
     fd2:	ldrb.w	r1, [r9, #46]	; 0x2e
     fd6:	cmp	r1, #0
     fd8:	beq.w	1c02 <loop+0x1716>
    void nextPage () {
      if (m_page < 4) m_page++;
    };

    void previousPage () {
      if (m_page > 1) m_page--;
     fdc:	ldr.w	r1, [r9, #48]	; 0x30
     fe0:	cmp	r1, #1
     fe2:	ble.n	fea <loop+0xafe>
     fe4:	subs	r1, #1
     fe6:	str.w	r1, [r9, #48]	; 0x30
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     fea:	ldr	r0, [pc, #296]	; (1114 <loop+0xc28>)
     fec:	bl	4104 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ff0:	ldr	r0, [pc, #288]	; (1114 <loop+0xc28>)
     ff2:	bl	4064 <Print::println()>
     ff6:	ldr	r3, [r6, #36]	; 0x24
     ff8:	ldr	r7, [r6, #32]
     ffa:	ldr	r2, [r6, #40]	; 0x28
     ffc:	b.w	6ce <loop+0x1e2>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
    1000:	cmp	r7, #0
    1002:	bne.w	75c <loop+0x270>
    1006:	ldrb.w	r1, [r8, #16]
    100a:	cmp	r1, #0
    100c:	beq.w	1852 <loop+0x1366>
        if (m_sequence.getShiftMode()) {
    1010:	ldr.w	r9, [r8, #28]
    1014:	ldrb.w	r1, [r9, #46]	; 0x2e
    1018:	cmp	r1, #0
    101a:	beq.w	1b84 <loop+0x1698>
    101e:	ldr.w	r1, [r9, #48]	; 0x30
    1022:	cmp	r1, #1
    1024:	ble.n	102c <loop+0xb40>
    1026:	subs	r1, #1
    1028:	str.w	r1, [r9, #48]	; 0x30
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    102c:	ldr	r0, [pc, #228]	; (1114 <loop+0xc28>)
    102e:	bl	4104 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1032:	ldr	r0, [pc, #224]	; (1114 <loop+0xc28>)
    1034:	bl	4064 <Print::println()>
    1038:	ldr	r3, [r5, #36]	; 0x24
    103a:	ldr	r7, [r5, #32]
    103c:	ldr	r2, [r5, #40]	; 0x28
    103e:	b.w	748 <loop+0x25c>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
    1042:	cmp	r5, #0
    1044:	bne.w	7fa <loop+0x30e>
    1048:	ldrb.w	r1, [r8, #16]
    104c:	cmp	r1, #0
    104e:	beq.w	182e <loop+0x1342>
        if (m_sequence.getShiftMode()) {
    1052:	ldr.w	r9, [r8, #28]
    1056:	ldrb.w	r1, [r9, #46]	; 0x2e
    105a:	cmp	r1, #0
    105c:	beq.w	1bd8 <loop+0x16ec>
    1060:	ldr.w	r1, [r9, #48]	; 0x30
    1064:	cmp	r1, #1
    1066:	ble.n	106e <loop+0xb82>
    1068:	subs	r1, #1
    106a:	str.w	r1, [r9, #48]	; 0x30
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    106e:	ldr	r0, [pc, #164]	; (1114 <loop+0xc28>)
    1070:	bl	4104 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1074:	ldr	r0, [pc, #156]	; (1114 <loop+0xc28>)
    1076:	bl	4064 <Print::println()>
    107a:	ldr	r3, [r6, #36]	; 0x24
    107c:	ldr	r5, [r6, #32]
    107e:	ldr	r2, [r6, #40]	; 0x28
    1080:	b.w	7e6 <loop+0x2fa>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
    1084:	cmp	r5, #0
    1086:	bne.w	668 <loop+0x17c>
    108a:	ldrb.w	r1, [r8, #16]
    108e:	cmp	r1, #0
    1090:	beq.w	1876 <loop+0x138a>
        if (m_sequence.getShiftMode()) {
    1094:	ldr.w	r9, [r8, #28]
    1098:	ldrb.w	r1, [r9, #46]	; 0x2e
    109c:	cmp	r1, #0
    109e:	beq.w	1b30 <loop+0x1644>
    10a2:	ldr.w	r1, [r9, #48]	; 0x30
    10a6:	cmp	r1, #1
    10a8:	ble.n	10b0 <loop+0xbc4>
    10aa:	subs	r1, #1
    10ac:	str.w	r1, [r9, #48]	; 0x30
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    10b0:	ldr	r0, [pc, #96]	; (1114 <loop+0xc28>)
    10b2:	bl	4104 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    10b6:	ldr	r0, [pc, #92]	; (1114 <loop+0xc28>)
    10b8:	bl	4064 <Print::println()>
    10bc:	ldr	r3, [r7, #36]	; 0x24
    10be:	ldr	r5, [r7, #32]
    10c0:	ldr	r2, [r7, #40]	; 0x28
    10c2:	b.w	654 <loop+0x168>

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
    10c6:	cmp	r7, #0
    10c8:	bne.w	574 <loop+0x88>
    10cc:	ldrb.w	r1, [r8, #16]
    10d0:	cmp	r1, #0
    10d2:	beq.w	18e2 <loop+0x13f6>
        if (m_sequence.getShiftMode()) {
    10d6:	ldr.w	r9, [r8, #28]
    10da:	ldrb.w	r1, [r9, #46]	; 0x2e
    10de:	cmp	r1, #0
    10e0:	beq.w	1bae <loop+0x16c2>
    10e4:	ldr.w	r1, [r9, #48]	; 0x30
    10e8:	cmp	r1, #1
    10ea:	ble.n	10f2 <loop+0xc06>
    10ec:	subs	r1, #1
    10ee:	str.w	r1, [r9, #48]	; 0x30
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    10f2:	ldr	r0, [pc, #32]	; (1114 <loop+0xc28>)
    10f4:	bl	4104 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    10f8:	ldr	r0, [pc, #24]	; (1114 <loop+0xc28>)
    10fa:	bl	4064 <Print::println()>
    10fe:	ldr	r3, [r6, #36]	; 0x24
    1100:	ldr	r7, [r6, #32]
    1102:	ldr	r2, [r6, #40]	; 0x28
    1104:	b.w	560 <loop+0x74>
    1108:	.word	0x10624dd3
    110c:	.word	0x1fff1884
    1110:	.word	0x00005574
    1114:	.word	0x1fff0c70
    1118:	.word	0x1fff1910

      pinMode(pin, INPUT);
    };

    void onClick () {
      if (m_state == LOW && m_shiftButton) {
    111c:	cmp	r6, #0
    111e:	bne.w	5ee <loop+0x102>
    1122:	ldrb.w	r1, [r8, #16]
    1126:	cmp	r1, #0
    1128:	beq.w	189a <loop+0x13ae>
        if (m_sequence.getShiftMode()) {
    112c:	ldr.w	r9, [r8, #28]
    1130:	ldrb.w	r1, [r9, #46]	; 0x2e
    1134:	cmp	r1, #0
    1136:	beq.w	1b5a <loop+0x166e>
    113a:	ldr.w	r1, [r9, #48]	; 0x30
    113e:	cmp	r1, #1
    1140:	ble.n	1148 <loop+0xc5c>
    1142:	subs	r1, #1
    1144:	str.w	r1, [r9, #48]	; 0x30
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1148:	ldr	r0, [pc, #696]	; (1404 <loop+0xf18>)
    114a:	bl	4104 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    114e:	ldr	r0, [pc, #692]	; (1404 <loop+0xf18>)
    1150:	bl	4064 <Print::println()>
    1154:	ldr	r3, [r5, #36]	; 0x24
    1156:	ldr	r6, [r5, #32]
    1158:	ldr	r2, [r5, #40]	; 0x28
    115a:	b.w	5da <loop+0xee>
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
        m_led.blink();
    115e:	ldr.w	r8, [r6, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1162:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1166:	ldrb.w	r9, [r8]
    116a:	str	r3, [sp, #192]	; 0xc0
	return ret;
    116c:	ldr	r3, [sp, #192]	; 0xc0
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    116e:	str	r3, [r6, #52]	; 0x34
    1170:	mov	r0, r9
    1172:	bl	2b0c <digitalRead>
    1176:	clz	r1, r0
    117a:	lsrs	r1, r1, #5
    117c:	mov	r0, r9
    117e:	bl	2b00 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1182:	ldr.w	r3, [sl]
    1186:	str	r3, [sp, #200]	; 0xc8
	return ret;
    1188:	ldr	r3, [sp, #200]	; 0xc8
      blinking = true;
    118a:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    118e:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    1192:	str.w	r5, [r8, #20]
    1196:	ldrb.w	r5, [r6, #48]	; 0x30
    119a:	ldr	r3, [r6, #52]	; 0x34
    119c:	ldr	r7, [r6, #32]
    119e:	b.w	51a <loop+0x2e>
        m_led.blink();
    11a2:	ldr.w	r8, [r5, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11a6:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    11aa:	ldrb.w	r9, [r8]
    11ae:	str	r3, [sp, #112]	; 0x70
	return ret;
    11b0:	ldr	r3, [sp, #112]	; 0x70
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    11b2:	str	r3, [r5, #52]	; 0x34
    11b4:	mov	r0, r9
    11b6:	bl	2b0c <digitalRead>
    11ba:	clz	r1, r0
    11be:	lsrs	r1, r1, #5
    11c0:	mov	r0, r9
    11c2:	bl	2b00 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11c6:	ldr.w	r3, [sl]
    11ca:	str	r3, [sp, #216]	; 0xd8
	return ret;
    11cc:	ldr	r3, [sp, #216]	; 0xd8
      blinking = true;
    11ce:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    11d2:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    11d6:	str.w	r6, [r8, #20]
    11da:	ldrb.w	r6, [r5, #48]	; 0x30
    11de:	ldr	r3, [r5, #52]	; 0x34
    11e0:	ldr	r7, [r5, #32]
    11e2:	b.w	702 <loop+0x216>
        m_led.blink();
    11e6:	ldr.w	r8, [r6, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11ea:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    11ee:	ldrb.w	r9, [r8]
    11f2:	str	r3, [sp, #132]	; 0x84
	return ret;
    11f4:	ldr	r3, [sp, #132]	; 0x84
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    11f6:	str	r3, [r6, #52]	; 0x34
    11f8:	mov	r0, r9
    11fa:	bl	2b0c <digitalRead>
    11fe:	clz	r1, r0
    1202:	lsrs	r1, r1, #5
    1204:	mov	r0, r9
    1206:	bl	2b00 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    120a:	ldr.w	r3, [sl]
    120e:	str	r3, [sp, #212]	; 0xd4
	return ret;
    1210:	ldr	r3, [sp, #212]	; 0xd4
      blinking = true;
    1212:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1216:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    121a:	str.w	r5, [r8, #20]
    121e:	ldrb.w	r5, [r6, #48]	; 0x30
    1222:	ldr	r3, [r6, #52]	; 0x34
    1224:	ldr	r7, [r6, #32]
    1226:	b.w	688 <loop+0x19c>
        m_led.blink();
    122a:	ldr.w	r8, [r5, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    122e:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1232:	ldrb.w	r9, [r8]
    1236:	str	r3, [sp, #172]	; 0xac
	return ret;
    1238:	ldr	r3, [sp, #172]	; 0xac
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    123a:	str	r3, [r5, #52]	; 0x34
    123c:	mov	r0, r9
    123e:	bl	2b0c <digitalRead>
    1242:	clz	r1, r0
    1246:	lsrs	r1, r1, #5
    1248:	mov	r0, r9
    124a:	bl	2b00 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    124e:	ldr.w	r3, [sl]
    1252:	str	r3, [sp, #204]	; 0xcc
	return ret;
    1254:	ldr	r3, [sp, #204]	; 0xcc
      blinking = true;
    1256:	strb.w	r6, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    125a:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    125e:	str.w	r7, [r8, #20]
    1262:	ldrb.w	r7, [r5, #48]	; 0x30
    1266:	ldr	r3, [r5, #52]	; 0x34
    1268:	ldr	r6, [r5, #32]
    126a:	b.w	594 <loop+0xa8>
        m_led.blink();
    126e:	ldr.w	r8, [r7, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1272:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1276:	ldrb.w	r9, [r8]
    127a:	str	r3, [sp, #152]	; 0x98
	return ret;
    127c:	ldr	r3, [sp, #152]	; 0x98
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    127e:	str	r3, [r7, #52]	; 0x34
    1280:	mov	r0, r9
    1282:	bl	2b0c <digitalRead>
    1286:	clz	r1, r0
    128a:	lsrs	r1, r1, #5
    128c:	mov	r0, r9
    128e:	bl	2b00 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1292:	ldr.w	r3, [sl]
    1296:	str	r3, [sp, #208]	; 0xd0
	return ret;
    1298:	ldr	r3, [sp, #208]	; 0xd0
      blinking = true;
    129a:	strb.w	r5, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    129e:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    12a2:	str.w	r6, [r8, #20]
    12a6:	ldrb.w	r6, [r7, #48]	; 0x30
    12aa:	ldr	r3, [r7, #52]	; 0x34
    12ac:	ldr	r5, [r7, #32]
    12ae:	b.w	60e <loop+0x122>
        m_led.blink();
    12b2:	ldr.w	r8, [r6, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12b6:	ldr.w	r3, [sl]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    12ba:	ldrb.w	r9, [r8]
    12be:	str	r3, [sp, #92]	; 0x5c
	return ret;
    12c0:	ldr	r3, [sp, #92]	; 0x5c
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (current == HIGH && previous == LOW && (millis() - firstTime) > 200) {
        firstTime = millis();
    12c2:	str	r3, [r6, #52]	; 0x34
    12c4:	mov	r0, r9
    12c6:	bl	2b0c <digitalRead>
    12ca:	clz	r1, r0
    12ce:	lsrs	r1, r1, #5
    12d0:	mov	r0, r9
    12d2:	bl	2b00 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12d6:	ldr.w	r3, [sl]
    12da:	str	r3, [sp, #220]	; 0xdc
	return ret;
    12dc:	ldr	r3, [sp, #220]	; 0xdc
      blinking = true;
    12de:	strb.w	r5, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    12e2:	str.w	r3, [r8, #8]
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
    12e6:	str.w	r7, [r8, #20]
    12ea:	ldrb.w	r7, [r6, #48]	; 0x30
    12ee:	ldr	r3, [r6, #52]	; 0x34
    12f0:	ldr	r5, [r6, #32]
    12f2:	b.w	77c <loop+0x290>
 
      if (millis_held > 50) {

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
          if (secs_held >= 1) {
    12f6:	cmp	r2, #0
    12f8:	bgt.w	1564 <loop+0x1078>
    void enterShiftMode () {
      m_shiftMode = true;
    };

    void exitShiftMode () {
      m_shiftMode = false;
    12fc:	ldr	r3, [r6, #28]
    12fe:	ldr	r7, [r6, #32]
    1300:	movs	r1, #0
    1302:	strb.w	r1, [r3, #46]	; 0x2e
    1306:	b.w	6e2 <loop+0x1f6>
    130a:	cmp	r2, #0
    130c:	bgt.w	1598 <loop+0x10ac>
    1310:	ldr	r3, [r5, #28]
    1312:	ldr	r7, [r5, #32]
    1314:	movs	r1, #0
    1316:	strb.w	r1, [r3, #46]	; 0x2e
    131a:	b.w	75c <loop+0x270>
    131e:	cmp	r2, #0
    1320:	bgt.w	1600 <loop+0x1114>
    1324:	ldr	r3, [r6, #28]
    1326:	ldr	r5, [r6, #32]
    1328:	movs	r1, #0
    132a:	strb.w	r1, [r3, #46]	; 0x2e
    132e:	b.w	7fa <loop+0x30e>
    1332:	cmp	r2, #0
    1334:	bgt.w	15cc <loop+0x10e0>
    1338:	ldr	r3, [r6, #28]
    133a:	ldr	r7, [r6, #32]
    133c:	movs	r1, #0
    133e:	strb.w	r1, [r3, #46]	; 0x2e
    1342:	b.w	574 <loop+0x88>
    1346:	cmp	r2, #0
    1348:	bgt.w	1634 <loop+0x1148>
    134c:	ldr	r3, [r7, #28]
    134e:	ldr	r5, [r7, #32]
    1350:	movs	r1, #0
    1352:	strb.w	r1, [r3, #46]	; 0x2e
    1356:	b.w	668 <loop+0x17c>
    135a:	cmp	r2, #0
    135c:	bgt.w	1530 <loop+0x1044>
    1360:	ldr	r3, [r5, #28]
    1362:	ldr	r6, [r5, #32]
    1364:	movs	r1, #0
    1366:	strb.w	r1, [r3, #46]	; 0x2e
    136a:	b.w	5ee <loop+0x102>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    136e:	cmp.w	r0, #400	; 0x190
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
        m_transport.controlTempo(m_value);
    1372:	ldr	r3, [r4, #20]
    1374:	bge.w	178e <loop+0x12a2>
        max_ppqn = 6;

        if (ppqn >= 6) {
    1378:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    137a:	movs	r1, #6

        if (ppqn >= 6) {
    137c:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    137e:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    1380:	ble.n	1386 <loop+0xe9a>
          ppqn = 0;
    1382:	movs	r2, #0
    1384:	str	r2, [r3, #8]
    1386:	ldr	r0, [r4, #4]
    1388:	b.w	90c <loop+0x420>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    138c:	cmp.w	r0, #400	; 0x190
    1390:	ldr	r3, [r4, #20]
    1392:	bge.w	1716 <loop+0x122a>
        max_ppqn = 6;

        if (ppqn >= 6) {
    1396:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1398:	movs	r1, #6

        if (ppqn >= 6) {
    139a:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    139c:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    139e:	ble.n	13a4 <loop+0xeb8>
          ppqn = 0;
    13a0:	movs	r2, #0
    13a2:	str	r2, [r3, #8]
    13a4:	ldr	r0, [r4, #4]
    13a6:	b.w	a74 <loop+0x588>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    13aa:	cmp.w	r0, #400	; 0x190
    13ae:	ldr	r3, [r4, #20]
    13b0:	bge.w	1770 <loop+0x1284>
        max_ppqn = 6;

        if (ppqn >= 6) {
    13b4:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    13b6:	movs	r1, #6

        if (ppqn >= 6) {
    13b8:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    13ba:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    13bc:	ble.n	13c2 <loop+0xed6>
          ppqn = 0;
    13be:	movs	r2, #0
    13c0:	str	r2, [r3, #8]
    13c2:	ldr	r0, [r4, #4]
    13c4:	b.w	a1a <loop+0x52e>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    13c8:	cmp.w	r0, #400	; 0x190
    13cc:	ldr	r3, [r4, #20]
    13ce:	bge.w	1752 <loop+0x1266>
        max_ppqn = 6;

        if (ppqn >= 6) {
    13d2:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    13d4:	movs	r1, #6

        if (ppqn >= 6) {
    13d6:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    13d8:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    13da:	ble.n	13e0 <loop+0xef4>
          ppqn = 0;
    13dc:	movs	r2, #0
    13de:	str	r2, [r3, #8]
    13e0:	ldr	r0, [r4, #4]
    13e2:	b.w	9c0 <loop+0x4d4>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    13e6:	cmp.w	r0, #400	; 0x190
    13ea:	ldr	r3, [r4, #20]
    13ec:	bge.w	1734 <loop+0x1248>
        max_ppqn = 6;

        if (ppqn >= 6) {
    13f0:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    13f2:	movs	r1, #6

        if (ppqn >= 6) {
    13f4:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    13f6:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    13f8:	ble.n	13fe <loop+0xf12>
          ppqn = 0;
    13fa:	movs	r2, #0
    13fc:	str	r2, [r3, #8]
    13fe:	ldr	r0, [r4, #4]
    1400:	b.w	966 <loop+0x47a>
    1404:	.word	0x1fff0c70
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
    1408:	ldr	r5, [pc, #724]	; (16e0 <loop+0x11f4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    140a:	ldr	r4, [pc, #728]	; (16e4 <loop+0x11f8>)
      ppqn = 0;
      m_sequence.doStep(); 
    140c:	ldr	r6, [r5, #12]
        m_leds[4]->on();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
    140e:	ldr	r3, [r6, #0]
    1410:	add.w	r3, r6, r3, lsl #2
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
    1414:	mov.w	r9, #1
    1418:	ldr	r7, [r3, #20]
    141a:	strb.w	r9, [r5]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    141e:	ldrb.w	sl, [r7]
      ppqn = 0;
    1422:	mov.w	r8, #0
    1426:	mov	r0, sl
    1428:	str.w	r8, [r5, #8]
    142c:	bl	2b0c <digitalRead>
    1430:	clz	r1, r0
    1434:	lsrs	r1, r1, #5
    1436:	mov	r0, sl
    1438:	bl	2b00 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
    143c:	ldr	r3, [r6, #0]
    143e:	ldr	r2, [r4, #0]
    1440:	str	r2, [sp, #4]
    1442:	add.w	r2, r6, r3, lsl #2
	return ret;
    1446:	ldr	r0, [sp, #4]
    1448:	ldr	r2, [r2, #4]
      blinking = true;
    144a:	strb.w	r9, [r7, #16]
    144e:	ldrb	r1, [r2, #4]
      blinkingCounter = times;
    1450:	str.w	r8, [r7, #20]
      lastBlink = millis();  
    1454:	str	r0, [r7, #8]
    1456:	cmp	r1, #0
    1458:	bne.w	1808 <loop+0x131c>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
    145c:	ldrb.w	r2, [r6, #45]	; 0x2d
    1460:	cmp	r2, #0
    1462:	beq.w	17ac <loop+0x12c0>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    1466:	subs	r2, r3, #1
    1468:	cmp	r3, #0
    146a:	beq.w	1908 <loop+0x141c>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    146e:	str	r2, [r6, #0]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    1470:	ldr	r3, [r5, #12]
    1472:	ldr	r0, [pc, #628]	; (16e8 <loop+0x11fc>)
    1474:	ldr	r5, [r3, #40]	; 0x28
    };

    void toggle () {
      m_state = !m_state;
    1476:	ldr	r3, [r5, #4]
    1478:	clz	r3, r3
    147c:	lsrs	r3, r3, #5
    147e:	str	r3, [r5, #4]
    1480:	movs	r1, #8
    1482:	bl	24f0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1486:	ldr	r0, [pc, #612]	; (16ec <loop+0x1200>)
    1488:	bl	4064 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    148c:	ldrb	r1, [r5, #4]
    148e:	ldrb	r0, [r5, #0]
    1490:	bl	2b00 <digitalWrite>

      if (blinking) {
    1494:	ldrb	r3, [r5, #16]
    1496:	cmp	r3, #0
    1498:	beq.w	500 <loop+0x14>
        digitalWrite(m_pin, !m_state);
    149c:	ldr	r1, [r5, #4]
    149e:	ldrb	r0, [r5, #0]
    14a0:	clz	r1, r1
    14a4:	lsrs	r1, r1, #5
    14a6:	bl	2b00 <digitalWrite>
    14aa:	b.w	500 <loop+0x14>
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
    14ae:	ldr	r5, [pc, #560]	; (16e0 <loop+0x11f4>)

      m_sequence.stopSteps(ppqn);
    14b0:	ldr	r2, [r5, #12]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
    14b2:	ldr	r3, [r5, #8]
        }
      }
    };

    boolean stepIsOver (int ppqn) {
      return ppqn >= m_steps[m_currentStep]->m_length;
    14b4:	ldr	r1, [r2, #0]
    14b6:	add.w	r2, r2, r1, lsl #2
    14ba:	adds	r3, #1
    14bc:	ldr	r2, [r2, #4]
    14be:	str	r3, [r5, #8]
    void reverse () {
      m_reverse = !m_reverse;
    };

    void stopSteps (int ppqn) {
      if (stepIsOver(ppqn)) {
    14c0:	ldr	r2, [r2, #16]
    14c2:	cmp	r3, r2
    14c4:	bge.w	17fe <loop+0x1312>

      m_sequence.stopSteps(ppqn);

      if (ppqn == max_ppqn) {
    14c8:	ldr	r2, [r5, #4]
    14ca:	ldr	r1, [pc, #532]	; (16e0 <loop+0x11f4>)
    14cc:	cmp	r2, r3
    14ce:	bne.w	4fe <loop+0x12>
        m_sequence.doStep(); 
    14d2:	ldr	r6, [r1, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14d4:	ldr	r4, [pc, #524]	; (16e4 <loop+0x11f8>)
        m_leds[4]->on();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
    14d6:	ldr	r3, [r6, #0]
    14d8:	add.w	r3, r6, r3, lsl #2
    14dc:	ldr	r7, [r3, #20]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    14de:	ldrb.w	r8, [r7]
    14e2:	mov	r0, r8
    14e4:	bl	2b0c <digitalRead>
    14e8:	clz	r1, r0
    14ec:	lsrs	r1, r1, #5
    14ee:	mov	r0, r8
    14f0:	bl	2b00 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
    14f4:	ldr	r3, [r6, #0]
    14f6:	ldr	r2, [r4, #0]
    14f8:	str	r2, [sp, #0]
    14fa:	add.w	r2, r6, r3, lsl #2
      blinking = true;
    14fe:	movs	r1, #1
    1500:	ldr	r2, [r2, #4]
    1502:	strb	r1, [r7, #16]
      blinkingCounter = times;
    1504:	movs	r1, #0
    1506:	str	r1, [r7, #20]
    1508:	ldrb	r1, [r2, #4]
	return ret;
    150a:	ldr	r0, [sp, #0]
      lastBlink = millis();  
    150c:	str	r0, [r7, #8]
    150e:	cmp	r1, #0
    1510:	bne.w	1b04 <loop+0x1618>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
    1514:	ldrb.w	r2, [r6, #45]	; 0x2d
    1518:	cmp	r2, #0
    151a:	bne.w	1afc <loop+0x1610>
        m_currentStep++;
    151e:	adds	r3, #1
    1520:	cmp	r3, #3
    1522:	it	gt
    1524:	movgt	r3, #0
    1526:	str	r3, [r6, #0]
        ppqn = 0;
    1528:	movs	r3, #0
    152a:	str	r3, [r5, #8]
    152c:	b.w	500 <loop+0x14>
      m_leds[4]->toggle();
      m_leds[5]->toggle();
    };

    void enterShiftMode () {
      m_shiftMode = true;
    1530:	ldr	r2, [r7, #28]
    1532:	ldr	r0, [pc, #444]	; (16f0 <loop+0x1204>)
    1534:	strb.w	r3, [r2, #46]	; 0x2e
    1538:	movs	r1, #14
    153a:	bl	24f0 <usb_serial_write>
            m_sequence.enterShiftMode();
            Serial.print("Seconds held: ");
            Serial.print(secs_held);
    153e:	ldr	r1, [r7, #40]	; 0x28
    1540:	ldr	r0, [pc, #424]	; (16ec <loop+0x1200>)
    1542:	bl	4104 <Print::print(long)>
    1546:	movs	r1, #19
    1548:	ldr	r0, [pc, #424]	; (16f4 <loop+0x1208>)
    154a:	bl	24f0 <usb_serial_write>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
    154e:	ldr	r1, [r7, #36]	; 0x24
    1550:	ldr	r0, [pc, #408]	; (16ec <loop+0x1200>)
    1552:	bl	4104 <Print::print(long)>
    1556:	ldr	r0, [pc, #404]	; (16ec <loop+0x1200>)
    1558:	bl	4064 <Print::println()>
    155c:	ldr	r6, [r7, #32]
    155e:	ldr	r2, [r7, #40]	; 0x28
    1560:	b.w	5ee <loop+0x102>
    1564:	ldr	r2, [r5, #28]
    1566:	ldr	r0, [pc, #392]	; (16f0 <loop+0x1204>)
    1568:	strb.w	r3, [r2, #46]	; 0x2e
    156c:	movs	r1, #14
    156e:	bl	24f0 <usb_serial_write>
    1572:	ldr	r1, [r5, #40]	; 0x28
    1574:	ldr	r0, [pc, #372]	; (16ec <loop+0x1200>)
    1576:	bl	4104 <Print::print(long)>
    157a:	movs	r1, #19
    157c:	ldr	r0, [pc, #372]	; (16f4 <loop+0x1208>)
    157e:	bl	24f0 <usb_serial_write>
    1582:	ldr	r1, [r5, #36]	; 0x24
    1584:	ldr	r0, [pc, #356]	; (16ec <loop+0x1200>)
    1586:	bl	4104 <Print::print(long)>
    158a:	ldr	r0, [pc, #352]	; (16ec <loop+0x1200>)
    158c:	bl	4064 <Print::println()>
    1590:	ldr	r7, [r5, #32]
    1592:	ldr	r2, [r5, #40]	; 0x28
    1594:	b.w	6e2 <loop+0x1f6>
    1598:	ldr	r2, [r6, #28]
    159a:	ldr	r0, [pc, #340]	; (16f0 <loop+0x1204>)
    159c:	strb.w	r3, [r2, #46]	; 0x2e
    15a0:	movs	r1, #14
    15a2:	bl	24f0 <usb_serial_write>
    15a6:	ldr	r1, [r6, #40]	; 0x28
    15a8:	ldr	r0, [pc, #320]	; (16ec <loop+0x1200>)
    15aa:	bl	4104 <Print::print(long)>
    15ae:	movs	r1, #19
    15b0:	ldr	r0, [pc, #320]	; (16f4 <loop+0x1208>)
    15b2:	bl	24f0 <usb_serial_write>
    15b6:	ldr	r1, [r6, #36]	; 0x24
    15b8:	ldr	r0, [pc, #304]	; (16ec <loop+0x1200>)
    15ba:	bl	4104 <Print::print(long)>
    15be:	ldr	r0, [pc, #300]	; (16ec <loop+0x1200>)
    15c0:	bl	4064 <Print::println()>
    15c4:	ldr	r7, [r6, #32]
    15c6:	ldr	r2, [r6, #40]	; 0x28
    15c8:	b.w	75c <loop+0x270>
    15cc:	ldr	r2, [r5, #28]
    15ce:	ldr	r0, [pc, #288]	; (16f0 <loop+0x1204>)
    15d0:	strb.w	r3, [r2, #46]	; 0x2e
    15d4:	movs	r1, #14
    15d6:	bl	24f0 <usb_serial_write>
    15da:	ldr	r1, [r5, #40]	; 0x28
    15dc:	ldr	r0, [pc, #268]	; (16ec <loop+0x1200>)
    15de:	bl	4104 <Print::print(long)>
    15e2:	movs	r1, #19
    15e4:	ldr	r0, [pc, #268]	; (16f4 <loop+0x1208>)
    15e6:	bl	24f0 <usb_serial_write>
    15ea:	ldr	r1, [r5, #36]	; 0x24
    15ec:	ldr	r0, [pc, #252]	; (16ec <loop+0x1200>)
    15ee:	bl	4104 <Print::print(long)>
    15f2:	ldr	r0, [pc, #248]	; (16ec <loop+0x1200>)
    15f4:	bl	4064 <Print::println()>
    15f8:	ldr	r7, [r5, #32]
    15fa:	ldr	r2, [r5, #40]	; 0x28
    15fc:	b.w	574 <loop+0x88>
    1600:	ldr	r2, [r7, #28]
    1602:	ldr	r0, [pc, #236]	; (16f0 <loop+0x1204>)
    1604:	strb.w	r3, [r2, #46]	; 0x2e
    1608:	movs	r1, #14
    160a:	bl	24f0 <usb_serial_write>
    160e:	ldr	r1, [r7, #40]	; 0x28
    1610:	ldr	r0, [pc, #216]	; (16ec <loop+0x1200>)
    1612:	bl	4104 <Print::print(long)>
    1616:	movs	r1, #19
    1618:	ldr	r0, [pc, #216]	; (16f4 <loop+0x1208>)
    161a:	bl	24f0 <usb_serial_write>
    161e:	ldr	r1, [r7, #36]	; 0x24
    1620:	ldr	r0, [pc, #200]	; (16ec <loop+0x1200>)
    1622:	bl	4104 <Print::print(long)>
    1626:	ldr	r0, [pc, #196]	; (16ec <loop+0x1200>)
    1628:	bl	4064 <Print::println()>
    162c:	ldr	r5, [r7, #32]
    162e:	ldr	r2, [r7, #40]	; 0x28
    1630:	b.w	7fa <loop+0x30e>
    1634:	ldr	r2, [r6, #28]
    1636:	ldr	r0, [pc, #184]	; (16f0 <loop+0x1204>)
    1638:	strb.w	r3, [r2, #46]	; 0x2e
    163c:	movs	r1, #14
    163e:	bl	24f0 <usb_serial_write>
    1642:	ldr	r1, [r6, #40]	; 0x28
    1644:	ldr	r0, [pc, #164]	; (16ec <loop+0x1200>)
    1646:	bl	4104 <Print::print(long)>
    164a:	movs	r1, #19
    164c:	ldr	r0, [pc, #164]	; (16f4 <loop+0x1208>)
    164e:	bl	24f0 <usb_serial_write>
    1652:	ldr	r1, [r6, #36]	; 0x24
    1654:	ldr	r0, [pc, #148]	; (16ec <loop+0x1200>)
    1656:	bl	4104 <Print::print(long)>
    165a:	ldr	r0, [pc, #144]	; (16ec <loop+0x1200>)
    165c:	bl	4064 <Print::println()>
    1660:	ldr	r5, [r6, #32]
    1662:	ldr	r2, [r6, #40]	; 0x28
    1664:	b.w	668 <loop+0x17c>
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
    1668:	ldr	r2, [r4, #12]
    166a:	ldr	r3, [r4, #16]
    166c:	add.w	r3, r3, r2, lsl #2
    };

    void controlVelocity (int value) {
      int newValue = map(value, 0, 1023, 127, 63);
      m_velocity = newValue;
    1670:	ldr	r2, [r3, #4]
    1672:	subs.w	r3, r0, r0, lsl #6
    1676:	it	mi
    1678:	addwmi	r3, r3, #1023	; 0x3ff
    167c:	asrs	r3, r3, #10
    167e:	adds	r3, #127	; 0x7f
    1680:	str	r3, [r2, #12]
    1682:	b.w	966 <loop+0x47a>
    1686:	ldr	r2, [r4, #12]
    1688:	ldr	r3, [r4, #16]
    168a:	add.w	r3, r3, r2, lsl #2
    168e:	ldr	r2, [r3, #4]
    1690:	subs.w	r3, r0, r0, lsl #6
    1694:	it	mi
    1696:	addwmi	r3, r3, #1023	; 0x3ff
    169a:	asrs	r3, r3, #10
    169c:	adds	r3, #127	; 0x7f
    169e:	str	r3, [r2, #12]
    16a0:	b.w	9c0 <loop+0x4d4>
    16a4:	ldr	r2, [r4, #12]
    16a6:	ldr	r3, [r4, #16]
    16a8:	add.w	r3, r3, r2, lsl #2
    16ac:	ldr	r2, [r3, #4]
    16ae:	subs.w	r3, r0, r0, lsl #6
    16b2:	it	mi
    16b4:	addwmi	r3, r3, #1023	; 0x3ff
    16b8:	asrs	r3, r3, #10
    16ba:	adds	r3, #127	; 0x7f
    16bc:	str	r3, [r2, #12]
    16be:	b.w	a1a <loop+0x52e>
    16c2:	ldr	r2, [r4, #12]
    16c4:	ldr	r3, [r4, #16]
    16c6:	add.w	r3, r3, r2, lsl #2
    16ca:	ldr	r2, [r3, #4]
    16cc:	subs.w	r3, r0, r0, lsl #6
    16d0:	it	mi
    16d2:	addwmi	r3, r3, #1023	; 0x3ff
    16d6:	asrs	r3, r3, #10
    16d8:	adds	r3, #127	; 0x7f
    16da:	str	r3, [r2, #12]
    16dc:	b.w	90c <loop+0x420>
    16e0:	.word	0x1fff1884
    16e4:	.word	0x1fff1910
    16e8:	.word	0x00005574
    16ec:	.word	0x1fff0c70
    16f0:	.word	0x000055c4
    16f4:	.word	0x000055d4
    16f8:	ldr	r2, [r4, #12]
    16fa:	ldr	r3, [r4, #16]
    16fc:	add.w	r3, r3, r2, lsl #2
    1700:	ldr	r2, [r3, #4]
    1702:	subs.w	r3, r0, r0, lsl #6
    1706:	it	mi
    1708:	addwmi	r3, r3, #1023	; 0x3ff
    170c:	asrs	r3, r3, #10
    170e:	adds	r3, #127	; 0x7f
    1710:	str	r3, [r2, #12]
    1712:	b.w	a74 <loop+0x588>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1716:	sub.w	r2, r0, #400	; 0x190
    171a:	cmp.w	r2, #400	; 0x190
    171e:	bcc.n	17f0 <loop+0x1304>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1720:	sub.w	r2, r0, #800	; 0x320
    1724:	cmp	r2, #223	; 0xdf
    1726:	bhi.w	a74 <loop+0x588>
        max_ppqn = 10;
    172a:	movs	r2, #10
    172c:	str	r2, [r3, #4]
    172e:	ldr	r0, [r4, #4]
    1730:	b.w	a74 <loop+0x588>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1734:	sub.w	r2, r0, #400	; 0x190
    1738:	cmp.w	r2, #400	; 0x190
    173c:	bcc.n	17e2 <loop+0x12f6>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    173e:	sub.w	r2, r0, #800	; 0x320
    1742:	cmp	r2, #223	; 0xdf
    1744:	bhi.w	966 <loop+0x47a>
        max_ppqn = 10;
    1748:	movs	r2, #10
    174a:	str	r2, [r3, #4]
    174c:	ldr	r0, [r4, #4]
    174e:	b.w	966 <loop+0x47a>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1752:	sub.w	r2, r0, #400	; 0x190
    1756:	cmp.w	r2, #400	; 0x190
    175a:	bcc.n	17d4 <loop+0x12e8>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    175c:	sub.w	r2, r0, #800	; 0x320
    1760:	cmp	r2, #223	; 0xdf
    1762:	bhi.w	9c0 <loop+0x4d4>
        max_ppqn = 10;
    1766:	movs	r2, #10
    1768:	str	r2, [r3, #4]
    176a:	ldr	r0, [r4, #4]
    176c:	b.w	9c0 <loop+0x4d4>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1770:	sub.w	r2, r0, #400	; 0x190
    1774:	cmp.w	r2, #400	; 0x190
    1778:	bcc.n	17c6 <loop+0x12da>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    177a:	sub.w	r2, r0, #800	; 0x320
    177e:	cmp	r2, #223	; 0xdf
    1780:	bhi.w	a1a <loop+0x52e>
        max_ppqn = 10;
    1784:	movs	r2, #10
    1786:	str	r2, [r3, #4]
    1788:	ldr	r0, [r4, #4]
    178a:	b.w	a1a <loop+0x52e>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    178e:	sub.w	r2, r0, #400	; 0x190
    1792:	cmp.w	r2, #400	; 0x190
    1796:	bcc.n	17b8 <loop+0x12cc>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1798:	sub.w	r2, r0, #800	; 0x320
    179c:	cmp	r2, #223	; 0xdf
    179e:	bhi.w	90c <loop+0x420>
        max_ppqn = 10;
    17a2:	movs	r2, #10
    17a4:	str	r2, [r3, #4]
    17a6:	ldr	r0, [r4, #4]
    17a8:	b.w	90c <loop+0x420>
      if (m_steps[m_currentStep]->m_state) {
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
        m_currentStep++;
    17ac:	adds	r3, #1
    17ae:	cmp	r3, #3
    17b0:	it	gt
    17b2:	movgt	r3, #0
    17b4:	str	r3, [r6, #0]
    17b6:	b.n	1470 <loop+0xf84>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
    17b8:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17ba:	movs	r1, #8

        if (ppqn >= 8) {
    17bc:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17be:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    17c0:	bgt.w	1382 <loop+0xe96>
    17c4:	b.n	1386 <loop+0xe9a>
    17c6:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17c8:	movs	r1, #8

        if (ppqn >= 8) {
    17ca:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17cc:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    17ce:	bgt.w	13be <loop+0xed2>
    17d2:	b.n	13c2 <loop+0xed6>
    17d4:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17d6:	movs	r1, #8

        if (ppqn >= 8) {
    17d8:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17da:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    17dc:	bgt.w	13dc <loop+0xef0>
    17e0:	b.n	13e0 <loop+0xef4>
    17e2:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17e4:	movs	r1, #8

        if (ppqn >= 8) {
    17e6:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17e8:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    17ea:	bgt.w	13fa <loop+0xf0e>
    17ee:	b.n	13fe <loop+0xf12>
    17f0:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17f2:	movs	r1, #8

        if (ppqn >= 8) {
    17f4:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    17f6:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    17f8:	bgt.w	13a0 <loop+0xeb4>
    17fc:	b.n	13a4 <loop+0xeb8>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    17fe:	ldr	r0, [pc, #672]	; (1aa0 <loop+0x15b4>)
    1800:	bl	2d8c <usb_midi_write_packed>
    1804:	ldr	r3, [r5, #8]
    1806:	b.n	14c8 <loop+0xfdc>
    1808:	ldr	r0, [r2, #8]
    180a:	ldr	r3, [r2, #12]
    180c:	lsls	r0, r0, #16
    180e:	lsls	r3, r3, #24
    1810:	and.w	r3, r3, #2130706432	; 0x7f000000
    1814:	and.w	r0, r0, #8323072	; 0x7f0000
    1818:	orrs	r0, r3
    181a:	orr.w	r0, r0, #40704	; 0x9f00
    181e:	orr.w	r0, r0, #9
    1822:	bl	2d8c <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1826:	bl	2e28 <usb_midi_flush_output>
    182a:	ldr	r3, [r6, #0]
    182c:	b.n	145c <loop+0xf70>
          m_sequence.previousPage();
          Serial.println(m_sequence.getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    182e:	ldrb.w	r3, [r8, #17]
    1832:	cmp	r3, #0
    1834:	beq.w	1a4e <loop+0x1562>
        if (m_sequence.getShiftMode()) {
    1838:	ldr.w	r3, [r8, #28]
    183c:	ldrb.w	r2, [r3, #46]	; 0x2e
    1840:	cmp	r2, #0
    1842:	beq.w	1c2c <loop+0x1740>
    int getPage () {
      return m_page;
    }

    void nextPage () {
      if (m_page < 4) m_page++;
    1846:	ldr	r1, [r3, #48]	; 0x30
    1848:	cmp	r1, #3
    184a:	itt	le
    184c:	addle	r1, #1
    184e:	strle	r1, [r3, #48]	; 0x30
    1850:	b.n	106e <loop+0xb82>
          m_sequence.previousPage();
          Serial.println(m_sequence.getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    1852:	ldrb.w	r3, [r8, #17]
    1856:	cmp	r3, #0
    1858:	beq.n	190e <loop+0x1422>
        if (m_sequence.getShiftMode()) {
    185a:	ldr.w	r3, [r8, #28]
    185e:	ldrb.w	r2, [r3, #46]	; 0x2e
    1862:	cmp	r2, #0
    1864:	beq.w	1d16 <loop+0x182a>
    1868:	ldr	r1, [r3, #48]	; 0x30
    186a:	cmp	r1, #3
    186c:	itt	le
    186e:	addle	r1, #1
    1870:	strle	r1, [r3, #48]	; 0x30
    1872:	b.w	102c <loop+0xb40>
          m_sequence.previousPage();
          Serial.println(m_sequence.getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    1876:	ldrb.w	r3, [r8, #17]
    187a:	cmp	r3, #0
    187c:	beq.w	19ae <loop+0x14c2>
        if (m_sequence.getShiftMode()) {
    1880:	ldr.w	r3, [r8, #28]
    1884:	ldrb.w	r2, [r3, #46]	; 0x2e
    1888:	cmp	r2, #0
    188a:	beq.w	1c7a <loop+0x178e>
    188e:	ldr	r1, [r3, #48]	; 0x30
    1890:	cmp	r1, #3
    1892:	itt	le
    1894:	addle	r1, #1
    1896:	strle	r1, [r3, #48]	; 0x30
    1898:	b.n	10b0 <loop+0xbc4>
          m_sequence.previousPage();
          Serial.println(m_sequence.getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    189a:	ldrb.w	r3, [r8, #17]
    189e:	cmp	r3, #0
    18a0:	beq.n	195e <loop+0x1472>
        if (m_sequence.getShiftMode()) {
    18a2:	ldr.w	r3, [r8, #28]
    18a6:	ldrb.w	r2, [r3, #46]	; 0x2e
    18aa:	cmp	r2, #0
    18ac:	beq.w	1d64 <loop+0x1878>
    18b0:	ldr	r1, [r3, #48]	; 0x30
    18b2:	cmp	r1, #3
    18b4:	itt	le
    18b6:	addle	r1, #1
    18b8:	strle	r1, [r3, #48]	; 0x30
    18ba:	b.n	1148 <loop+0xc5c>
          m_sequence.previousPage();
          Serial.println(m_sequence.getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    18bc:	ldrb.w	r3, [r8, #17]
    18c0:	cmp	r3, #0
    18c2:	beq.w	19fe <loop+0x1512>
        if (m_sequence.getShiftMode()) {
    18c6:	ldr.w	r3, [r8, #28]
    18ca:	ldrb.w	r2, [r3, #46]	; 0x2e
    18ce:	cmp	r2, #0
    18d0:	beq.w	1cc8 <loop+0x17dc>
    18d4:	ldr	r1, [r3, #48]	; 0x30
    18d6:	cmp	r1, #3
    18d8:	itt	le
    18da:	addle	r1, #1
    18dc:	strle	r1, [r3, #48]	; 0x30
    18de:	b.w	fea <loop+0xafe>
          m_sequence.previousPage();
          Serial.println(m_sequence.getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    18e2:	ldrb.w	r3, [r8, #17]
    18e6:	cmp	r3, #0
    18e8:	beq.w	1aac <loop+0x15c0>
        if (m_sequence.getShiftMode()) {
    18ec:	ldr.w	r3, [r8, #28]
    18f0:	ldrb.w	r2, [r3, #46]	; 0x2e
    18f4:	cmp	r2, #0
    18f6:	beq.w	1dc0 <loop+0x18d4>
    18fa:	ldr	r1, [r3, #48]	; 0x30
    18fc:	cmp	r1, #3
    18fe:	itt	le
    1900:	addle	r1, #1
    1902:	strle	r1, [r3, #48]	; 0x30
    1904:	b.w	10f2 <loop+0xc06>
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
          m_currentStep = 3;
    1908:	movs	r3, #3
    190a:	str	r3, [r6, #0]
    190c:	b.n	1470 <loop+0xf84>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    190e:	ldr.w	r6, [r8, #24]
    1912:	ldr	r0, [pc, #400]	; (1aa4 <loop+0x15b8>)
    };

    void toggle () {
      m_state = !m_state;
    1914:	ldr	r3, [r6, #4]
    1916:	clz	r3, r3
    191a:	lsrs	r3, r3, #5
    191c:	str	r3, [r6, #4]
    191e:	movs	r1, #8
    1920:	bl	24f0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1924:	ldr	r0, [pc, #384]	; (1aa8 <loop+0x15bc>)
    1926:	bl	4064 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    192a:	ldrb	r1, [r6, #4]
    192c:	ldrb	r0, [r6, #0]
    192e:	bl	2b00 <digitalWrite>

      if (blinking) {
    1932:	ldrb	r3, [r6, #16]
    1934:	cbz	r3, 1944 <loop+0x1458>
        digitalWrite(m_pin, !m_state);
    1936:	ldr	r1, [r6, #4]
    1938:	ldrb	r0, [r6, #0]
    193a:	clz	r1, r1
    193e:	lsrs	r1, r1, #5
    1940:	bl	2b00 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
    1944:	ldr	r2, [r5, #28]
    1946:	ldr	r1, [r5, #0]
    1948:	ldr	r3, [r5, #36]	; 0x24
    194a:	ldr.w	r0, [r2, r1, lsl #2]
    194e:	ldr	r7, [r5, #32]
      m_velocity = 100;
      m_length = 4;
    };

    void toggle () {
      m_state = !m_state;
    1950:	ldrb	r1, [r0, #4]
    1952:	ldr	r2, [r5, #40]	; 0x28
    1954:	eor.w	r1, r1, #1
    1958:	strb	r1, [r0, #4]
    195a:	b.w	748 <loop+0x25c>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    195e:	ldr.w	r6, [r8, #24]
    1962:	ldr	r0, [pc, #320]	; (1aa4 <loop+0x15b8>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1964:	ldr	r3, [r6, #4]
    1966:	clz	r3, r3
    196a:	lsrs	r3, r3, #5
    196c:	str	r3, [r6, #4]
    196e:	movs	r1, #8
    1970:	bl	24f0 <usb_serial_write>
    1974:	ldr	r0, [pc, #304]	; (1aa8 <loop+0x15bc>)
    1976:	bl	4064 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    197a:	ldrb	r1, [r6, #4]
    197c:	ldrb	r0, [r6, #0]
    197e:	bl	2b00 <digitalWrite>

      if (blinking) {
    1982:	ldrb	r3, [r6, #16]
    1984:	cbz	r3, 1994 <loop+0x14a8>
        digitalWrite(m_pin, !m_state);
    1986:	ldr	r1, [r6, #4]
    1988:	ldrb	r0, [r6, #0]
    198a:	clz	r1, r1
    198e:	lsrs	r1, r1, #5
    1990:	bl	2b00 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
    1994:	ldr	r2, [r5, #28]
    1996:	ldr	r1, [r5, #0]
    1998:	ldr	r3, [r5, #36]	; 0x24
    199a:	ldr.w	r0, [r2, r1, lsl #2]
    199e:	ldr	r6, [r5, #32]
    19a0:	ldrb	r1, [r0, #4]
    19a2:	ldr	r2, [r5, #40]	; 0x28
    19a4:	eor.w	r1, r1, #1
    19a8:	strb	r1, [r0, #4]
    19aa:	b.w	5da <loop+0xee>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    19ae:	ldr.w	r5, [r8, #24]
    19b2:	ldr	r0, [pc, #240]	; (1aa4 <loop+0x15b8>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    19b4:	ldr	r3, [r5, #4]
    19b6:	clz	r3, r3
    19ba:	lsrs	r3, r3, #5
    19bc:	str	r3, [r5, #4]
    19be:	movs	r1, #8
    19c0:	bl	24f0 <usb_serial_write>
    19c4:	ldr	r0, [pc, #224]	; (1aa8 <loop+0x15bc>)
    19c6:	bl	4064 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    19ca:	ldrb	r1, [r5, #4]
    19cc:	ldrb	r0, [r5, #0]
    19ce:	bl	2b00 <digitalWrite>

      if (blinking) {
    19d2:	ldrb	r3, [r5, #16]
    19d4:	cbz	r3, 19e4 <loop+0x14f8>
        digitalWrite(m_pin, !m_state);
    19d6:	ldr	r1, [r5, #4]
    19d8:	ldrb	r0, [r5, #0]
    19da:	clz	r1, r1
    19de:	lsrs	r1, r1, #5
    19e0:	bl	2b00 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
    19e4:	ldr	r2, [r7, #28]
    19e6:	ldr	r1, [r7, #0]
    19e8:	ldr	r3, [r7, #36]	; 0x24
    19ea:	ldr.w	r0, [r2, r1, lsl #2]
    19ee:	ldr	r5, [r7, #32]
    19f0:	ldrb	r1, [r0, #4]
    19f2:	ldr	r2, [r7, #40]	; 0x28
    19f4:	eor.w	r1, r1, #1
    19f8:	strb	r1, [r0, #4]
    19fa:	b.w	654 <loop+0x168>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    19fe:	ldr.w	r5, [r8, #24]
    1a02:	ldr	r0, [pc, #160]	; (1aa4 <loop+0x15b8>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a04:	ldr	r3, [r5, #4]
    1a06:	clz	r3, r3
    1a0a:	lsrs	r3, r3, #5
    1a0c:	str	r3, [r5, #4]
    1a0e:	movs	r1, #8
    1a10:	bl	24f0 <usb_serial_write>
    1a14:	ldr	r0, [pc, #144]	; (1aa8 <loop+0x15bc>)
    1a16:	bl	4064 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1a1a:	ldrb	r1, [r5, #4]
    1a1c:	ldrb	r0, [r5, #0]
    1a1e:	bl	2b00 <digitalWrite>

      if (blinking) {
    1a22:	ldrb	r3, [r5, #16]
    1a24:	cbz	r3, 1a34 <loop+0x1548>
        digitalWrite(m_pin, !m_state);
    1a26:	ldr	r1, [r5, #4]
    1a28:	ldrb	r0, [r5, #0]
    1a2a:	clz	r1, r1
    1a2e:	lsrs	r1, r1, #5
    1a30:	bl	2b00 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
    1a34:	ldr	r2, [r6, #28]
    1a36:	ldr	r1, [r6, #0]
    1a38:	ldr	r3, [r6, #36]	; 0x24
    1a3a:	ldr.w	r0, [r2, r1, lsl #2]
    1a3e:	ldr	r7, [r6, #32]
    1a40:	ldrb	r1, [r0, #4]
    1a42:	ldr	r2, [r6, #40]	; 0x28
    1a44:	eor.w	r1, r1, #1
    1a48:	strb	r1, [r0, #4]
    1a4a:	b.w	6ce <loop+0x1e2>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    1a4e:	ldr.w	r5, [r8, #24]
    1a52:	ldr	r0, [pc, #80]	; (1aa4 <loop+0x15b8>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1a54:	ldr	r3, [r5, #4]
    1a56:	clz	r3, r3
    1a5a:	lsrs	r3, r3, #5
    1a5c:	str	r3, [r5, #4]
    1a5e:	movs	r1, #8
    1a60:	bl	24f0 <usb_serial_write>
    1a64:	ldr	r0, [pc, #64]	; (1aa8 <loop+0x15bc>)
    1a66:	bl	4064 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1a6a:	ldrb	r1, [r5, #4]
    1a6c:	ldrb	r0, [r5, #0]
    1a6e:	bl	2b00 <digitalWrite>

      if (blinking) {
    1a72:	ldrb	r3, [r5, #16]
    1a74:	cbz	r3, 1a84 <loop+0x1598>
        digitalWrite(m_pin, !m_state);
    1a76:	ldr	r1, [r5, #4]
    1a78:	ldrb	r0, [r5, #0]
    1a7a:	clz	r1, r1
    1a7e:	lsrs	r1, r1, #5
    1a80:	bl	2b00 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
    1a84:	ldr	r2, [r6, #28]
    1a86:	ldr	r1, [r6, #0]
    1a88:	ldr	r3, [r6, #36]	; 0x24
    1a8a:	ldr.w	r0, [r2, r1, lsl #2]
    1a8e:	ldr	r5, [r6, #32]
    1a90:	ldrb	r1, [r0, #4]
    1a92:	ldr	r2, [r6, #40]	; 0x28
    1a94:	eor.w	r1, r1, #1
    1a98:	strb	r1, [r0, #4]
    1a9a:	b.w	7e6 <loop+0x2fa>
    1a9e:	nop
    1aa0:	.word	0x7f7bbf0b
    1aa4:	.word	0x00005574
    1aa8:	.word	0x1fff0c70
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    1aac:	ldr.w	r5, [r8, #24]
    1ab0:	ldr	r0, [pc, #768]	; (1db4 <loop+0x18c8>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1ab2:	ldr	r3, [r5, #4]
    1ab4:	clz	r3, r3
    1ab8:	lsrs	r3, r3, #5
    1aba:	str	r3, [r5, #4]
    1abc:	movs	r1, #8
    1abe:	bl	24f0 <usb_serial_write>
    1ac2:	ldr	r0, [pc, #756]	; (1db8 <loop+0x18cc>)
    1ac4:	bl	4064 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1ac8:	ldrb	r1, [r5, #4]
    1aca:	ldrb	r0, [r5, #0]
    1acc:	bl	2b00 <digitalWrite>

      if (blinking) {
    1ad0:	ldrb	r3, [r5, #16]
    1ad2:	cbz	r3, 1ae2 <loop+0x15f6>
        digitalWrite(m_pin, !m_state);
    1ad4:	ldr	r1, [r5, #4]
    1ad6:	ldrb	r0, [r5, #0]
    1ad8:	clz	r1, r1
    1adc:	lsrs	r1, r1, #5
    1ade:	bl	2b00 <digitalWrite>
        m_sequence.m_steps[m_id - 1]->toggle();
    1ae2:	ldr	r2, [r6, #28]
    1ae4:	ldr	r1, [r6, #0]
    1ae6:	ldr	r3, [r6, #36]	; 0x24
    1ae8:	ldr.w	r0, [r2, r1, lsl #2]
    1aec:	ldr	r7, [r6, #32]
    1aee:	ldrb	r1, [r0, #4]
    1af0:	ldr	r2, [r6, #40]	; 0x28
    1af2:	eor.w	r1, r1, #1
    1af6:	strb	r1, [r0, #4]
    1af8:	b.w	560 <loop+0x74>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    1afc:	subs	r2, r3, #1
    1afe:	cbz	r3, 1b2a <loop+0x163e>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    1b00:	str	r2, [r6, #0]
    1b02:	b.n	1528 <loop+0x103c>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1b04:	ldr	r0, [r2, #8]
    1b06:	ldr	r3, [r2, #12]
    1b08:	lsls	r0, r0, #16
    1b0a:	lsls	r3, r3, #24
    1b0c:	and.w	r3, r3, #2130706432	; 0x7f000000
    1b10:	and.w	r0, r0, #8323072	; 0x7f0000
    1b14:	orrs	r0, r3
    1b16:	orr.w	r0, r0, #40704	; 0x9f00
    1b1a:	orr.w	r0, r0, #9
    1b1e:	bl	2d8c <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1b22:	bl	2e28 <usb_midi_flush_output>
    1b26:	ldr	r3, [r6, #0]
    1b28:	b.n	1514 <loop+0x1028>

        if (m_currentStep == -1) {
          m_currentStep = 3;
    1b2a:	movs	r3, #3
    1b2c:	str	r3, [r6, #0]
    1b2e:	b.n	1528 <loop+0x103c>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1b30:	ldr.w	lr, [pc, #648]	; 1dbc <loop+0x18d0>
    1b34:	ldrb.w	r1, [lr]
    1b38:	cmp	r1, #0
    1b3a:	beq.w	1e0e <loop+0x1922>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1b3e:	cmp	r1, #1
    1b40:	beq.w	2096 <loop+0x1baa>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1b44:	cmp	r1, #2
    1b46:	beq.w	1f0a <loop+0x1a1e>

      if (debounced && secs_held < 1) {
        onClick();
      }
 
      if (millis_held > 50) {
    1b4a:	cmp	r3, #50	; 0x32
    1b4c:	ble.w	668 <loop+0x17c>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
    1b50:	cmp	r6, #1
    1b52:	bne.w	666 <loop+0x17a>
    1b56:	b.w	134c <loop+0xe60>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1b5a:	ldr.w	lr, [pc, #608]	; 1dbc <loop+0x18d0>
    1b5e:	ldrb.w	r1, [lr]
    1b62:	cmp	r1, #0
    1b64:	beq.w	1eb6 <loop+0x19ca>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1b68:	cmp	r1, #1
    1b6a:	beq.w	20de <loop+0x1bf2>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1b6e:	cmp	r1, #2
    1b70:	beq.w	1f76 <loop+0x1a8a>

      if (debounced && secs_held < 1) {
        onClick();
      }
 
      if (millis_held > 50) {
    1b74:	cmp	r3, #50	; 0x32
    1b76:	ble.w	5ee <loop+0x102>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
    1b7a:	cmp	r7, #1
    1b7c:	bne.w	5ec <loop+0x100>
    1b80:	b.w	1360 <loop+0xe74>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1b84:	ldr.w	lr, [pc, #564]	; 1dbc <loop+0x18d0>
    1b88:	ldrb.w	r1, [lr]
    1b8c:	cmp	r1, #0
    1b8e:	beq.w	1e8c <loop+0x19a0>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1b92:	cmp	r1, #1
    1b94:	beq.w	2072 <loop+0x1b86>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1b98:	cmp	r1, #2
    1b9a:	beq.w	1fe2 <loop+0x1af6>

      if (debounced && secs_held < 1) {
        onClick();
      }
 
      if (millis_held > 50) {
    1b9e:	cmp	r3, #50	; 0x32
    1ba0:	ble.w	75c <loop+0x270>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
    1ba4:	cmp	r6, #1
    1ba6:	bne.w	75a <loop+0x26e>
    1baa:	b.w	1310 <loop+0xe24>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1bae:	ldr.w	lr, [pc, #524]	; 1dbc <loop+0x18d0>
    1bb2:	ldrb.w	r1, [lr]
    1bb6:	cmp	r1, #0
    1bb8:	beq.w	1e62 <loop+0x1976>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1bbc:	cmp	r1, #1
    1bbe:	beq.w	204e <loop+0x1b62>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1bc2:	cmp	r1, #2
    1bc4:	beq.w	2018 <loop+0x1b2c>

      if (debounced && secs_held < 1) {
        onClick();
      }
 
      if (millis_held > 50) {
    1bc8:	cmp	r3, #50	; 0x32
    1bca:	ble.w	574 <loop+0x88>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
    1bce:	cmp	r5, #1
    1bd0:	bne.w	572 <loop+0x86>
    1bd4:	b.w	1338 <loop+0xe4c>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1bd8:	ldr.w	lr, [pc, #480]	; 1dbc <loop+0x18d0>
    1bdc:	ldrb.w	r1, [lr]
    1be0:	cmp	r1, #0
    1be2:	beq.w	1ee0 <loop+0x19f4>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1be6:	cmp	r1, #1
    1be8:	beq.w	2118 <loop+0x1c2c>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1bec:	cmp	r1, #2
    1bee:	beq.w	1fac <loop+0x1ac0>

      if (debounced && secs_held < 1) {
        onClick();
      }
 
      if (millis_held > 50) {
    1bf2:	cmp	r3, #50	; 0x32
    1bf4:	ble.w	7fa <loop+0x30e>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
    1bf8:	cmp	r7, #1
    1bfa:	bne.w	7f8 <loop+0x30c>
    1bfe:	b.w	1324 <loop+0xe38>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1c02:	ldr.w	lr, [pc, #440]	; 1dbc <loop+0x18d0>
    1c06:	ldrb.w	r1, [lr]
    1c0a:	cmp	r1, #0
    1c0c:	beq.w	1e38 <loop+0x194c>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1c10:	cmp	r1, #1
    1c12:	beq.w	20ba <loop+0x1bce>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1c16:	cmp	r1, #2
    1c18:	beq.w	1f40 <loop+0x1a54>

      if (debounced && secs_held < 1) {
        onClick();
      }
 
      if (millis_held > 50) {
    1c1c:	cmp	r3, #50	; 0x32
    1c1e:	ble.w	6e2 <loop+0x1f6>

        // check if the button was released since we last checked
        if (current == LOW && previous == HIGH) {
    1c22:	cmp	r5, #1
    1c24:	bne.w	6e0 <loop+0x1f4>
    1c28:	b.w	12fc <loop+0xe10>
      } else if (m_state == LOW && m_reverseButton) {
        if (m_sequence.getShiftMode()) {
          m_sequence.nextPage();
          Serial.println(m_sequence.getPage());
        } else {
          m_led.toggle();
    1c2c:	ldr.w	r5, [r8, #24]
    1c30:	ldr	r0, [pc, #384]	; (1db4 <loop+0x18c8>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1c32:	ldr	r3, [r5, #4]
    1c34:	clz	r3, r3
    1c38:	lsrs	r3, r3, #5
    1c3a:	str	r3, [r5, #4]
    1c3c:	movs	r1, #8
    1c3e:	bl	24f0 <usb_serial_write>
    1c42:	ldr	r0, [pc, #372]	; (1db8 <loop+0x18cc>)
    1c44:	bl	4064 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1c48:	ldrb	r1, [r5, #4]
    1c4a:	ldrb	r0, [r5, #0]
    1c4c:	bl	2b00 <digitalWrite>

      if (blinking) {
    1c50:	ldrb	r3, [r5, #16]
    1c52:	cbz	r3, 1c62 <loop+0x1776>
        digitalWrite(m_pin, !m_state);
    1c54:	ldr	r1, [r5, #4]
    1c56:	ldrb	r0, [r5, #0]
    1c58:	clz	r1, r1
    1c5c:	lsrs	r1, r1, #5
    1c5e:	bl	2b00 <digitalWrite>
    1c62:	ldr	r0, [r6, #28]
    1c64:	ldr	r3, [r6, #36]	; 0x24
    void resetStep () {
      m_currentStep = 0;
    };

    void reverse () {
      m_reverse = !m_reverse;
    1c66:	ldrb.w	r1, [r0, #45]	; 0x2d
    1c6a:	ldr	r5, [r6, #32]
    1c6c:	ldr	r2, [r6, #40]	; 0x28
    1c6e:	eor.w	r1, r1, #1
    1c72:	strb.w	r1, [r0, #45]	; 0x2d
    1c76:	b.w	7e6 <loop+0x2fa>
    1c7a:	ldr.w	r5, [r8, #24]
    1c7e:	ldr	r0, [pc, #308]	; (1db4 <loop+0x18c8>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1c80:	ldr	r3, [r5, #4]
    1c82:	clz	r3, r3
    1c86:	lsrs	r3, r3, #5
    1c88:	str	r3, [r5, #4]
    1c8a:	movs	r1, #8
    1c8c:	bl	24f0 <usb_serial_write>
    1c90:	ldr	r0, [pc, #292]	; (1db8 <loop+0x18cc>)
    1c92:	bl	4064 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1c96:	ldrb	r1, [r5, #4]
    1c98:	ldrb	r0, [r5, #0]
    1c9a:	bl	2b00 <digitalWrite>

      if (blinking) {
    1c9e:	ldrb	r3, [r5, #16]
    1ca0:	cbz	r3, 1cb0 <loop+0x17c4>
        digitalWrite(m_pin, !m_state);
    1ca2:	ldr	r1, [r5, #4]
    1ca4:	ldrb	r0, [r5, #0]
    1ca6:	clz	r1, r1
    1caa:	lsrs	r1, r1, #5
    1cac:	bl	2b00 <digitalWrite>
    1cb0:	ldr	r0, [r7, #28]
    1cb2:	ldr	r3, [r7, #36]	; 0x24
    1cb4:	ldrb.w	r1, [r0, #45]	; 0x2d
    1cb8:	ldr	r5, [r7, #32]
    1cba:	ldr	r2, [r7, #40]	; 0x28
    1cbc:	eor.w	r1, r1, #1
    1cc0:	strb.w	r1, [r0, #45]	; 0x2d
    1cc4:	b.w	654 <loop+0x168>
    1cc8:	ldr.w	r5, [r8, #24]
    1ccc:	ldr	r0, [pc, #228]	; (1db4 <loop+0x18c8>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1cce:	ldr	r3, [r5, #4]
    1cd0:	clz	r3, r3
    1cd4:	lsrs	r3, r3, #5
    1cd6:	str	r3, [r5, #4]
    1cd8:	movs	r1, #8
    1cda:	bl	24f0 <usb_serial_write>
    1cde:	ldr	r0, [pc, #216]	; (1db8 <loop+0x18cc>)
    1ce0:	bl	4064 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1ce4:	ldrb	r1, [r5, #4]
    1ce6:	ldrb	r0, [r5, #0]
    1ce8:	bl	2b00 <digitalWrite>

      if (blinking) {
    1cec:	ldrb	r3, [r5, #16]
    1cee:	cbz	r3, 1cfe <loop+0x1812>
        digitalWrite(m_pin, !m_state);
    1cf0:	ldr	r1, [r5, #4]
    1cf2:	ldrb	r0, [r5, #0]
    1cf4:	clz	r1, r1
    1cf8:	lsrs	r1, r1, #5
    1cfa:	bl	2b00 <digitalWrite>
    1cfe:	ldr	r0, [r6, #28]
    1d00:	ldr	r3, [r6, #36]	; 0x24
    1d02:	ldrb.w	r1, [r0, #45]	; 0x2d
    1d06:	ldr	r7, [r6, #32]
    1d08:	ldr	r2, [r6, #40]	; 0x28
    1d0a:	eor.w	r1, r1, #1
    1d0e:	strb.w	r1, [r0, #45]	; 0x2d
    1d12:	b.w	6ce <loop+0x1e2>
    1d16:	ldr.w	r6, [r8, #24]
    1d1a:	ldr	r0, [pc, #152]	; (1db4 <loop+0x18c8>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d1c:	ldr	r3, [r6, #4]
    1d1e:	clz	r3, r3
    1d22:	lsrs	r3, r3, #5
    1d24:	str	r3, [r6, #4]
    1d26:	movs	r1, #8
    1d28:	bl	24f0 <usb_serial_write>
    1d2c:	ldr	r0, [pc, #136]	; (1db8 <loop+0x18cc>)
    1d2e:	bl	4064 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1d32:	ldrb	r1, [r6, #4]
    1d34:	ldrb	r0, [r6, #0]
    1d36:	bl	2b00 <digitalWrite>

      if (blinking) {
    1d3a:	ldrb	r3, [r6, #16]
    1d3c:	cbz	r3, 1d4c <loop+0x1860>
        digitalWrite(m_pin, !m_state);
    1d3e:	ldr	r1, [r6, #4]
    1d40:	ldrb	r0, [r6, #0]
    1d42:	clz	r1, r1
    1d46:	lsrs	r1, r1, #5
    1d48:	bl	2b00 <digitalWrite>
    1d4c:	ldr	r0, [r5, #28]
    1d4e:	ldr	r3, [r5, #36]	; 0x24
    1d50:	ldrb.w	r1, [r0, #45]	; 0x2d
    1d54:	ldr	r7, [r5, #32]
    1d56:	ldr	r2, [r5, #40]	; 0x28
    1d58:	eor.w	r1, r1, #1
    1d5c:	strb.w	r1, [r0, #45]	; 0x2d
    1d60:	b.w	748 <loop+0x25c>
    1d64:	ldr.w	r6, [r8, #24]
    1d68:	ldr	r0, [pc, #72]	; (1db4 <loop+0x18c8>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1d6a:	ldr	r3, [r6, #4]
    1d6c:	clz	r3, r3
    1d70:	lsrs	r3, r3, #5
    1d72:	str	r3, [r6, #4]
    1d74:	movs	r1, #8
    1d76:	bl	24f0 <usb_serial_write>
    1d7a:	ldr	r0, [pc, #60]	; (1db8 <loop+0x18cc>)
    1d7c:	bl	4064 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1d80:	ldrb	r1, [r6, #4]
    1d82:	ldrb	r0, [r6, #0]
    1d84:	bl	2b00 <digitalWrite>

      if (blinking) {
    1d88:	ldrb	r3, [r6, #16]
    1d8a:	cbz	r3, 1d9a <loop+0x18ae>
        digitalWrite(m_pin, !m_state);
    1d8c:	ldr	r1, [r6, #4]
    1d8e:	ldrb	r0, [r6, #0]
    1d90:	clz	r1, r1
    1d94:	lsrs	r1, r1, #5
    1d96:	bl	2b00 <digitalWrite>
    1d9a:	ldr	r0, [r5, #28]
    1d9c:	ldr	r3, [r5, #36]	; 0x24
    1d9e:	ldrb.w	r1, [r0, #45]	; 0x2d
    1da2:	ldr	r6, [r5, #32]
    1da4:	ldr	r2, [r5, #40]	; 0x28
    1da6:	eor.w	r1, r1, #1
    1daa:	strb.w	r1, [r0, #45]	; 0x2d
    1dae:	b.w	5da <loop+0xee>
    1db2:	nop
    1db4:	.word	0x00005574
    1db8:	.word	0x1fff0c70
    1dbc:	.word	0x1fff1894
    1dc0:	ldr.w	r5, [r8, #24]
    1dc4:	ldr	r0, [pc, #828]	; (2104 <loop+0x1c18>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1dc6:	ldr	r3, [r5, #4]
    1dc8:	clz	r3, r3
    1dcc:	lsrs	r3, r3, #5
    1dce:	str	r3, [r5, #4]
    1dd0:	movs	r1, #8
    1dd2:	bl	24f0 <usb_serial_write>
    1dd6:	ldr	r0, [pc, #816]	; (2108 <loop+0x1c1c>)
    1dd8:	bl	4064 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    1ddc:	ldrb	r1, [r5, #4]
    1dde:	ldrb	r0, [r5, #0]
    1de0:	bl	2b00 <digitalWrite>

      if (blinking) {
    1de4:	ldrb	r3, [r5, #16]
    1de6:	cbz	r3, 1df6 <loop+0x190a>
        digitalWrite(m_pin, !m_state);
    1de8:	ldr	r1, [r5, #4]
    1dea:	ldrb	r0, [r5, #0]
    1dec:	clz	r1, r1
    1df0:	lsrs	r1, r1, #5
    1df2:	bl	2b00 <digitalWrite>
    1df6:	ldr	r0, [r6, #28]
    1df8:	ldr	r3, [r6, #36]	; 0x24
    1dfa:	ldrb.w	r1, [r0, #45]	; 0x2d
    1dfe:	ldr	r7, [r6, #32]
    1e00:	ldr	r2, [r6, #40]	; 0x28
    1e02:	eor.w	r1, r1, #1
    1e06:	strb.w	r1, [r0, #45]	; 0x2d
    1e0a:	b.w	560 <loop+0x74>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1e0e:	movs	r3, #1
        Serial.println("VELOCITY");
    1e10:	ldr	r1, [pc, #760]	; (210c <loop+0x1c20>)
    1e12:	ldr	r0, [pc, #756]	; (2108 <loop+0x1c1c>)
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1e14:	strb.w	r3, [lr]
        Serial.println("VELOCITY");
    1e18:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(999);
    1e1c:	ldr.w	r0, [r9, #36]	; 0x24
    1e20:	movw	r1, #999	; 0x3e7
    1e24:	bl	4b4 <Led::blink(int)>
    1e28:	ldr.w	r3, [r8, #36]	; 0x24
    1e2c:	ldr.w	r5, [r8, #32]
    1e30:	ldr.w	r2, [r8, #40]	; 0x28
    1e34:	b.w	654 <loop+0x168>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1e38:	movs	r3, #1
        Serial.println("VELOCITY");
    1e3a:	ldr	r1, [pc, #720]	; (210c <loop+0x1c20>)
    1e3c:	ldr	r0, [pc, #712]	; (2108 <loop+0x1c1c>)
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1e3e:	strb.w	r3, [lr]
        Serial.println("VELOCITY");
    1e42:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(999);
    1e46:	ldr.w	r0, [r9, #36]	; 0x24
    1e4a:	movw	r1, #999	; 0x3e7
    1e4e:	bl	4b4 <Led::blink(int)>
    1e52:	ldr.w	r3, [r8, #36]	; 0x24
    1e56:	ldr.w	r7, [r8, #32]
    1e5a:	ldr.w	r2, [r8, #40]	; 0x28
    1e5e:	b.w	6ce <loop+0x1e2>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1e62:	movs	r3, #1
        Serial.println("VELOCITY");
    1e64:	ldr	r1, [pc, #676]	; (210c <loop+0x1c20>)
    1e66:	ldr	r0, [pc, #672]	; (2108 <loop+0x1c1c>)
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1e68:	strb.w	r3, [lr]
        Serial.println("VELOCITY");
    1e6c:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(999);
    1e70:	ldr.w	r0, [r9, #36]	; 0x24
    1e74:	movw	r1, #999	; 0x3e7
    1e78:	bl	4b4 <Led::blink(int)>
    1e7c:	ldr.w	r3, [r8, #36]	; 0x24
    1e80:	ldr.w	r7, [r8, #32]
    1e84:	ldr.w	r2, [r8, #40]	; 0x28
    1e88:	b.w	560 <loop+0x74>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1e8c:	movs	r3, #1
        Serial.println("VELOCITY");
    1e8e:	ldr	r1, [pc, #636]	; (210c <loop+0x1c20>)
    1e90:	ldr	r0, [pc, #628]	; (2108 <loop+0x1c1c>)
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1e92:	strb.w	r3, [lr]
        Serial.println("VELOCITY");
    1e96:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(999);
    1e9a:	ldr.w	r0, [r9, #36]	; 0x24
    1e9e:	movw	r1, #999	; 0x3e7
    1ea2:	bl	4b4 <Led::blink(int)>
    1ea6:	ldr.w	r3, [r8, #36]	; 0x24
    1eaa:	ldr.w	r7, [r8, #32]
    1eae:	ldr.w	r2, [r8, #40]	; 0x28
    1eb2:	b.w	748 <loop+0x25c>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1eb6:	movs	r3, #1
        Serial.println("VELOCITY");
    1eb8:	ldr	r1, [pc, #592]	; (210c <loop+0x1c20>)
    1eba:	ldr	r0, [pc, #588]	; (2108 <loop+0x1c1c>)
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1ebc:	strb.w	r3, [lr]
        Serial.println("VELOCITY");
    1ec0:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(999);
    1ec4:	ldr.w	r0, [r9, #36]	; 0x24
    1ec8:	movw	r1, #999	; 0x3e7
    1ecc:	bl	4b4 <Led::blink(int)>
    1ed0:	ldr.w	r3, [r8, #36]	; 0x24
    1ed4:	ldr.w	r6, [r8, #32]
    1ed8:	ldr.w	r2, [r8, #40]	; 0x28
    1edc:	b.w	5da <loop+0xee>
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1ee0:	movs	r3, #1
        Serial.println("VELOCITY");
    1ee2:	ldr	r1, [pc, #552]	; (210c <loop+0x1c20>)
    1ee4:	ldr	r0, [pc, #544]	; (2108 <loop+0x1c1c>)
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1ee6:	strb.w	r3, [lr]
        Serial.println("VELOCITY");
    1eea:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(999);
    1eee:	ldr.w	r0, [r9, #36]	; 0x24
    1ef2:	movw	r1, #999	; 0x3e7
    1ef6:	bl	4b4 <Led::blink(int)>
    1efa:	ldr.w	r3, [r8, #36]	; 0x24
    1efe:	ldr.w	r5, [r8, #32]
    1f02:	ldr.w	r2, [r8, #40]	; 0x28
    1f06:	b.w	7e6 <loop+0x2fa>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
        Serial.println("PITCH");
    1f0a:	ldr	r1, [pc, #516]	; (2110 <loop+0x1c24>)
    1f0c:	ldr	r0, [pc, #504]	; (2108 <loop+0x1c1c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1f0e:	strb.w	r5, [lr]
        Serial.println("PITCH");
    1f12:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(); // shut the 999 blinks off
    1f16:	mov	r1, r5
    1f18:	ldr.w	r0, [r9, #36]	; 0x24
    1f1c:	bl	4b4 <Led::blink(int)>
        m_leds[4]->on();
    1f20:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1f24:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1f26:	strb	r5, [r3, #16]
      m_state = 1;
    1f28:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
    1f2a:	ldrb	r0, [r3, #0]
    1f2c:	bl	2b00 <digitalWrite>
    1f30:	ldr.w	r3, [r8, #36]	; 0x24
    1f34:	ldr.w	r5, [r8, #32]
    1f38:	ldr.w	r2, [r8, #40]	; 0x28
    1f3c:	b.w	654 <loop+0x168>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
        Serial.println("PITCH");
    1f40:	ldr	r1, [pc, #460]	; (2110 <loop+0x1c24>)
    1f42:	ldr	r0, [pc, #452]	; (2108 <loop+0x1c1c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1f44:	strb.w	r7, [lr]
        Serial.println("PITCH");
    1f48:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(); // shut the 999 blinks off
    1f4c:	mov	r1, r7
    1f4e:	ldr.w	r0, [r9, #36]	; 0x24
    1f52:	bl	4b4 <Led::blink(int)>
        m_leds[4]->on();
    1f56:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1f5a:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1f5c:	strb	r7, [r3, #16]
      m_state = 1;
    1f5e:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
    1f60:	ldrb	r0, [r3, #0]
    1f62:	bl	2b00 <digitalWrite>
    1f66:	ldr.w	r3, [r8, #36]	; 0x24
    1f6a:	ldr.w	r7, [r8, #32]
    1f6e:	ldr.w	r2, [r8, #40]	; 0x28
    1f72:	b.w	6ce <loop+0x1e2>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
        Serial.println("PITCH");
    1f76:	ldr	r1, [pc, #408]	; (2110 <loop+0x1c24>)
    1f78:	ldr	r0, [pc, #396]	; (2108 <loop+0x1c1c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1f7a:	strb.w	r6, [lr]
        Serial.println("PITCH");
    1f7e:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(); // shut the 999 blinks off
    1f82:	mov	r1, r6
    1f84:	ldr.w	r0, [r9, #36]	; 0x24
    1f88:	bl	4b4 <Led::blink(int)>
        m_leds[4]->on();
    1f8c:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1f90:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1f92:	strb	r6, [r3, #16]
      m_state = 1;
    1f94:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
    1f96:	ldrb	r0, [r3, #0]
    1f98:	bl	2b00 <digitalWrite>
    1f9c:	ldr.w	r3, [r8, #36]	; 0x24
    1fa0:	ldr.w	r6, [r8, #32]
    1fa4:	ldr.w	r2, [r8, #40]	; 0x28
    1fa8:	b.w	5da <loop+0xee>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
        Serial.println("PITCH");
    1fac:	ldr	r1, [pc, #352]	; (2110 <loop+0x1c24>)
    1fae:	ldr	r0, [pc, #344]	; (2108 <loop+0x1c1c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1fb0:	strb.w	r5, [lr]
        Serial.println("PITCH");
    1fb4:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(); // shut the 999 blinks off
    1fb8:	mov	r1, r5
    1fba:	ldr.w	r0, [r9, #36]	; 0x24
    1fbe:	bl	4b4 <Led::blink(int)>
        m_leds[4]->on();
    1fc2:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1fc6:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1fc8:	strb	r5, [r3, #16]
      m_state = 1;
    1fca:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
    1fcc:	ldrb	r0, [r3, #0]
    1fce:	bl	2b00 <digitalWrite>
    1fd2:	ldr.w	r3, [r8, #36]	; 0x24
    1fd6:	ldr.w	r5, [r8, #32]
    1fda:	ldr.w	r2, [r8, #40]	; 0x28
    1fde:	b.w	7e6 <loop+0x2fa>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
        Serial.println("PITCH");
    1fe2:	ldr	r1, [pc, #300]	; (2110 <loop+0x1c24>)
    1fe4:	ldr	r0, [pc, #288]	; (2108 <loop+0x1c1c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    1fe6:	strb.w	r7, [lr]
        Serial.println("PITCH");
    1fea:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(); // shut the 999 blinks off
    1fee:	mov	r1, r7
    1ff0:	ldr.w	r0, [r9, #36]	; 0x24
    1ff4:	bl	4b4 <Led::blink(int)>
        m_leds[4]->on();
    1ff8:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1ffc:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1ffe:	strb	r7, [r3, #16]
      m_state = 1;
    2000:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
    2002:	ldrb	r0, [r3, #0]
    2004:	bl	2b00 <digitalWrite>
    2008:	ldr.w	r3, [r8, #36]	; 0x24
    200c:	ldr.w	r7, [r8, #32]
    2010:	ldr.w	r2, [r8, #40]	; 0x28
    2014:	b.w	748 <loop+0x25c>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
        Serial.println("PITCH");
    2018:	ldr	r1, [pc, #244]	; (2110 <loop+0x1c24>)
    201a:	ldr	r0, [pc, #236]	; (2108 <loop+0x1c1c>)
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
        currentMode = PITCH;
    201c:	strb.w	r7, [lr]
        Serial.println("PITCH");
    2020:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink(); // shut the 999 blinks off
    2024:	mov	r1, r7
    2026:	ldr.w	r0, [r9, #36]	; 0x24
    202a:	bl	4b4 <Led::blink(int)>
        m_leds[4]->on();
    202e:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    2032:	movs	r1, #1
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    2034:	strb	r7, [r3, #16]
      m_state = 1;
    2036:	str	r1, [r3, #4]
      digitalWrite(m_pin, m_state);
    2038:	ldrb	r0, [r3, #0]
    203a:	bl	2b00 <digitalWrite>
    203e:	ldr.w	r3, [r8, #36]	; 0x24
    2042:	ldr.w	r7, [r8, #32]
    2046:	ldr.w	r2, [r8, #40]	; 0x28
    204a:	b.w	560 <loop+0x74>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    204e:	movs	r3, #2
        Serial.println("NOTELENGTH");
    2050:	ldr	r1, [pc, #192]	; (2114 <loop+0x1c28>)
    2052:	ldr	r0, [pc, #180]	; (2108 <loop+0x1c1c>)
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    2054:	strb.w	r3, [lr]
        Serial.println("NOTELENGTH");
    2058:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink();
    205c:	mov	r1, r7
    205e:	ldr.w	r0, [r9, #36]	; 0x24
    2062:	bl	4b4 <Led::blink(int)>
        m_leds[4]->off();
    2066:	ldr.w	r3, [r9, #36]	; 0x24
    };

    void off () {
      blinking = false;
      m_state = 0;
      digitalWrite(m_pin, m_state);
    206a:	mov	r1, r7
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    206c:	strb	r7, [r3, #16]
      m_state = 0;
    206e:	str	r7, [r3, #4]
    2070:	b.n	2038 <loop+0x1b4c>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    2072:	movs	r3, #2
        Serial.println("NOTELENGTH");
    2074:	ldr	r1, [pc, #156]	; (2114 <loop+0x1c28>)
    2076:	ldr	r0, [pc, #144]	; (2108 <loop+0x1c1c>)
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    2078:	strb.w	r3, [lr]
        Serial.println("NOTELENGTH");
    207c:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink();
    2080:	mov	r1, r7
    2082:	ldr.w	r0, [r9, #36]	; 0x24
    2086:	bl	4b4 <Led::blink(int)>
        m_leds[4]->off();
    208a:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    208e:	mov	r1, r7
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    2090:	strb	r7, [r3, #16]
      m_state = 0;
    2092:	str	r7, [r3, #4]
    2094:	b.n	2002 <loop+0x1b16>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    2096:	movs	r3, #2
        Serial.println("NOTELENGTH");
    2098:	ldr	r1, [pc, #120]	; (2114 <loop+0x1c28>)
    209a:	ldr	r0, [pc, #108]	; (2108 <loop+0x1c1c>)
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    209c:	strb.w	r3, [lr]
        Serial.println("NOTELENGTH");
    20a0:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink();
    20a4:	mov	r1, r5
    20a6:	ldr.w	r0, [r9, #36]	; 0x24
    20aa:	bl	4b4 <Led::blink(int)>
        m_leds[4]->off();
    20ae:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    20b2:	mov	r1, r5
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    20b4:	strb	r5, [r3, #16]
      m_state = 0;
    20b6:	str	r5, [r3, #4]
    20b8:	b.n	1f2a <loop+0x1a3e>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    20ba:	movs	r3, #2
        Serial.println("NOTELENGTH");
    20bc:	ldr	r1, [pc, #84]	; (2114 <loop+0x1c28>)
    20be:	ldr	r0, [pc, #72]	; (2108 <loop+0x1c1c>)
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    20c0:	strb.w	r3, [lr]
        Serial.println("NOTELENGTH");
    20c4:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink();
    20c8:	mov	r1, r7
    20ca:	ldr.w	r0, [r9, #36]	; 0x24
    20ce:	bl	4b4 <Led::blink(int)>
        m_leds[4]->off();
    20d2:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    20d6:	mov	r1, r7
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    20d8:	strb	r7, [r3, #16]
      m_state = 0;
    20da:	str	r7, [r3, #4]
    20dc:	b.n	1f60 <loop+0x1a74>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    20de:	movs	r3, #2
        Serial.println("NOTELENGTH");
    20e0:	ldr	r1, [pc, #48]	; (2114 <loop+0x1c28>)
    20e2:	ldr	r0, [pc, #36]	; (2108 <loop+0x1c1c>)
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    20e4:	strb.w	r3, [lr]
        Serial.println("NOTELENGTH");
    20e8:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink();
    20ec:	mov	r1, r6
    20ee:	ldr.w	r0, [r9, #36]	; 0x24
    20f2:	bl	4b4 <Led::blink(int)>
        m_leds[4]->off();
    20f6:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    20fa:	mov	r1, r6
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    20fc:	strb	r6, [r3, #16]
      m_state = 0;
    20fe:	str	r6, [r3, #4]
    2100:	b.n	1f96 <loop+0x1aaa>
    2102:	nop
    2104:	.word	0x00005574
    2108:	.word	0x1fff0c70
    210c:	.word	0x000055a4
    2110:	.word	0x000055bc
    2114:	.word	0x000055b0
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    2118:	movs	r3, #2
        Serial.println("NOTELENGTH");
    211a:	ldr	r1, [pc, #32]	; (213c <loop+0x1c50>)
    211c:	ldr	r0, [pc, #32]	; (2140 <loop+0x1c54>)
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    211e:	strb.w	r3, [lr]
        Serial.println("NOTELENGTH");
    2122:	bl	46c <Print::println(char const*)>
        m_leds[4]->blink();
    2126:	mov	r1, r5
    2128:	ldr.w	r0, [r9, #36]	; 0x24
    212c:	bl	4b4 <Led::blink(int)>
        m_leds[4]->off();
    2130:	ldr.w	r3, [r9, #36]	; 0x24
      digitalWrite(m_pin, m_state);
    2134:	mov	r1, r5
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    2136:	strb	r5, [r3, #16]
      m_state = 0;
    2138:	str	r5, [r3, #4]
    213a:	b.n	1fcc <loop+0x1ae0>
    213c:	.word	0x000055b0
    2140:	.word	0x1fff0c70

00002144 <_GLOBAL__sub_I_currentMode>:
    2144:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#include "definitions.h"
#include "controller.h"
#include "transport.h"
#include "step.h"

Led led1(3, LOW);
    2148:	movs	r2, #0
    214a:	movs	r1, #3
    214c:	ldr	r0, [pc, #612]	; (23b4 <_GLOBAL__sub_I_currentMode+0x270>)
    Modes m_mode;
    boolean m_reverse;
    boolean m_shiftMode;
    int m_page = 1;

    Sequence (Step* steps[4], Led* leds[6]) {
    214e:	ldr	r5, [pc, #616]	; (23b8 <_GLOBAL__sub_I_currentMode+0x274>)
    2150:	ldr	r7, [pc, #616]	; (23bc <_GLOBAL__sub_I_currentMode+0x278>)
    2152:	bl	490 <Led::Led(int, int)>
Led led2(5, LOW);
    2156:	movs	r2, #0
    2158:	movs	r1, #5
    215a:	ldr	r0, [pc, #612]	; (23c0 <_GLOBAL__sub_I_currentMode+0x27c>)
    215c:	bl	490 <Led::Led(int, int)>
Led led3(7, LOW);
    2160:	movs	r2, #0
    2162:	movs	r1, #7
    2164:	ldr	r0, [pc, #604]	; (23c4 <_GLOBAL__sub_I_currentMode+0x280>)
    2166:	bl	490 <Led::Led(int, int)>
Led led4(9, LOW);
    216a:	movs	r2, #0
    216c:	movs	r1, #9
    216e:	ldr	r0, [pc, #600]	; (23c8 <_GLOBAL__sub_I_currentMode+0x284>)
    2170:	bl	490 <Led::Led(int, int)>
Led led5(11, LOW);
    2174:	movs	r2, #0
    2176:	movs	r1, #11
    2178:	ldr	r0, [pc, #592]	; (23cc <_GLOBAL__sub_I_currentMode+0x288>)
    217a:	bl	490 <Led::Led(int, int)>
Led led6(24, LOW);
    217e:	movs	r2, #0
    2180:	movs	r1, #24
    2182:	ldr	r0, [pc, #588]	; (23d0 <_GLOBAL__sub_I_currentMode+0x28c>)
    2184:	bl	490 <Led::Led(int, int)>
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    2188:	ldr	r2, [pc, #584]	; (23d4 <_GLOBAL__sub_I_currentMode+0x290>)
    218a:	ldr	r3, [pc, #588]	; (23d8 <_GLOBAL__sub_I_currentMode+0x294>)
    218c:	ldr.w	lr, [pc, #656]	; 2420 <_GLOBAL__sub_I_currentMode+0x2dc>
    2190:	str.w	lr, [r2]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    2194:	movs	r0, #100	; 0x64
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    2196:	movs	r6, #0
      m_controller = controller;
      m_pitch = 38;
    2198:	movs	r4, #38	; 0x26
      m_velocity = 100;
      m_length = 4;
    219a:	movs	r1, #4

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    219c:	str	r0, [r2, #12]
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    219e:	strb	r6, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
    21a0:	str	r4, [r2, #8]
      m_velocity = 100;
      m_length = 4;
    21a2:	str	r1, [r2, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    21a4:	ldr	r2, [pc, #564]	; (23dc <_GLOBAL__sub_I_currentMode+0x298>)
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    21a6:	str	r0, [r3, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    21a8:	str.w	lr, [r3]
      m_state = false;
    21ac:	strb	r6, [r3, #4]
      m_controller = controller;
      m_pitch = 38;
    21ae:	str	r4, [r3, #8]
      m_velocity = 100;
      m_length = 4;
    21b0:	str	r1, [r3, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    21b2:	ldr	r3, [pc, #556]	; (23e0 <_GLOBAL__sub_I_currentMode+0x29c>)
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    21b4:	str	r0, [r2, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    21b6:	str.w	lr, [r2]
      m_state = false;
    21ba:	strb	r6, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
    21bc:	str	r4, [r2, #8]
      m_velocity = 100;
      m_length = 4;
    21be:	str	r1, [r2, #16]
    21c0:	movs	r2, #1

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    21c2:	str	r0, [r3, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    21c4:	str.w	lr, [r3]
      m_state = false;
    21c8:	strb	r6, [r3, #4]
      m_controller = controller;
      m_pitch = 38;
    21ca:	str	r4, [r3, #8]
      m_velocity = 100;
      m_length = 4;
    21cc:	str	r1, [r3, #16]
    21ce:	str	r2, [r5, #48]	; 0x30
    21d0:	add.w	r3, r5, #16
    21d4:	add.w	r0, r5, #40	; 0x28
    21d8:	mov	r2, r7
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
    21da:	ldr.w	r1, [r2], #4
    21de:	str.w	r1, [r3, #4]!
    boolean m_reverse;
    boolean m_shiftMode;
    int m_page = 1;

    Sequence (Step* steps[4], Led* leds[6]) {
      for (int i = 0; i < 6; i++) {
    21e2:	cmp	r0, r3
    21e4:	bne.n	21da <_GLOBAL__sub_I_currentMode+0x96>
      
      m_currentStep = 0;
      m_mode = PITCH;
      m_reverse = false;
      
      m_leds[4]->toggle();
    21e6:	ldr	r4, [r5, #36]	; 0x24
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    21e8:	ldr	r2, [pc, #504]	; (23e4 <_GLOBAL__sub_I_currentMode+0x2a0>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    21ea:	ldr	r3, [r4, #4]
    21ec:	ldr	r1, [r2, #0]
    21ee:	ldr	r0, [r2, #4]
    21f0:	ldr	r6, [r2, #12]
    21f2:	str	r1, [r5, #4]
    21f4:	clz	r3, r3
    21f8:	lsrs	r3, r3, #5
    21fa:	ldr	r1, [r2, #8]
    21fc:	str	r0, [r5, #8]
      };
      
      m_currentStep = 0;
    21fe:	movs	r2, #0
      m_mode = PITCH;
    2200:	strb.w	r2, [r5, #44]	; 0x2c
      m_reverse = false;
    2204:	strb.w	r2, [r5, #45]	; 0x2d
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    2208:	str	r1, [r5, #12]
    220a:	str	r6, [r5, #16]
    220c:	movs	r1, #8
    220e:	str	r3, [r4, #4]
    2210:	ldr	r0, [pc, #468]	; (23e8 <_GLOBAL__sub_I_currentMode+0x2a4>)
      };
      
      m_currentStep = 0;
    2212:	str	r2, [r5, #0]
    2214:	bl	24f0 <usb_serial_write>
    2218:	ldr	r0, [pc, #464]	; (23ec <_GLOBAL__sub_I_currentMode+0x2a8>)
    221a:	bl	4064 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    221e:	ldrb	r1, [r4, #4]
    2220:	ldrb	r0, [r4, #0]
    2222:	bl	2b00 <digitalWrite>

      if (blinking) {
    2226:	ldrb	r3, [r4, #16]
    2228:	cbz	r3, 2238 <_GLOBAL__sub_I_currentMode+0xf4>
        digitalWrite(m_pin, !m_state);
    222a:	ldr	r1, [r4, #4]
    222c:	ldrb	r0, [r4, #0]
    222e:	clz	r1, r1
    2232:	lsrs	r1, r1, #5
    2234:	bl	2b00 <digitalWrite>
      m_mode = PITCH;
      m_reverse = false;
      
      m_leds[4]->toggle();
      m_leds[5]->toggle();
    2238:	ldr	r4, [r5, #40]	; 0x28
    223a:	ldr	r0, [pc, #428]	; (23e8 <_GLOBAL__sub_I_currentMode+0x2a4>)
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    223c:	ldr	r3, [r4, #4]
    223e:	clz	r3, r3
    2242:	lsrs	r3, r3, #5
    2244:	str	r3, [r4, #4]
    2246:	movs	r1, #8
    2248:	bl	24f0 <usb_serial_write>
    224c:	ldr	r0, [pc, #412]	; (23ec <_GLOBAL__sub_I_currentMode+0x2a8>)
    224e:	bl	4064 <Print::println()>
      Serial.println("Toggling");

      digitalWrite(m_pin, m_state);
    2252:	ldrb	r1, [r4, #4]
    2254:	ldrb	r0, [r4, #0]
    2256:	bl	2b00 <digitalWrite>

      if (blinking) {
    225a:	ldrb	r3, [r4, #16]
    225c:	cbz	r3, 226c <_GLOBAL__sub_I_currentMode+0x128>
        digitalWrite(m_pin, !m_state);
    225e:	ldr	r1, [r4, #4]
    2260:	ldrb	r0, [r4, #0]
    2262:	clz	r1, r1
    2266:	lsrs	r1, r1, #5
    2268:	bl	2b00 <digitalWrite>
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    226c:	ldr	r6, [pc, #384]	; (23f0 <_GLOBAL__sub_I_currentMode+0x2ac>)
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    226e:	ldr	r2, [pc, #388]	; (23f4 <_GLOBAL__sub_I_currentMode+0x2b0>)
    2270:	str	r5, [r6, #12]
    2272:	movs	r4, #0
      m_id = id;
      m_pin = pin;
    2274:	mov.w	r9, #2
    2278:	movs	r3, #24
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    227a:	mov.w	sl, #1
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    227e:	mov	r1, r4
    2280:	mov	r0, r9
    2282:	str	r3, [r6, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2284:	ldr	r3, [r7, #0]
    2286:	strb.w	r4, [r2, #48]	; 0x30
      m_id = id;
      m_pin = pin;
    228a:	mov.w	r8, #4
      m_shiftButton = shiftButton;
    228e:	strb	r4, [r2, #16]
      m_reverseButton = reverseButton;
    2290:	strb	r4, [r2, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2292:	str	r3, [r2, #24]
    2294:	str	r4, [r6, #8]
      m_state = false;
    2296:	strb	r4, [r6, #0]
    2298:	str	r5, [r2, #28]
      m_id = id;
    229a:	str.w	sl, [r2]
      m_pin = pin;
    229e:	str.w	r9, [r2, #56]	; 0x38
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    22a2:	bl	2b28 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    22a6:	ldr	r2, [pc, #336]	; (23f8 <_GLOBAL__sub_I_currentMode+0x2b4>)
    22a8:	ldr	r3, [r7, #4]
    22aa:	strb.w	r4, [r2, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    22ae:	mov	r1, r4
    22b0:	mov	r0, r8
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    22b2:	strb	r4, [r2, #16]
      m_reverseButton = reverseButton;
    22b4:	strb	r4, [r2, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    22b6:	str	r3, [r2, #24]
    22b8:	str	r5, [r2, #28]
      m_id = id;
    22ba:	str.w	r9, [r2]
      m_pin = pin;
    22be:	str.w	r8, [r2, #56]	; 0x38
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    22c2:	bl	2b28 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    22c6:	ldr	r3, [pc, #308]	; (23fc <_GLOBAL__sub_I_currentMode+0x2b8>)
    22c8:	ldr	r2, [r7, #8]
    22ca:	strb.w	r4, [r3, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    22ce:	mov	r1, r4
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    22d0:	mov.w	fp, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    22d4:	movs	r0, #6
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    22d6:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    22d8:	strb	r4, [r3, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    22da:	str	r2, [r3, #24]
      m_id = id;
      m_pin = pin;
    22dc:	str	r0, [r3, #56]	; 0x38
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    22de:	str	r5, [r3, #28]
      m_id = id;
    22e0:	str.w	fp, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    22e4:	bl	2b28 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    22e8:	ldr	r3, [pc, #276]	; (2400 <_GLOBAL__sub_I_currentMode+0x2bc>)
    22ea:	ldr	r0, [r7, #12]
    22ec:	str	r0, [r3, #24]
      m_id = id;
      m_pin = pin;
    22ee:	movs	r2, #8
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    22f0:	mov	r1, r4
    22f2:	mov	r0, r2
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    22f4:	strb.w	r4, [r3, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    22f8:	strb	r4, [r3, #16]
      m_reverseButton = reverseButton;
    22fa:	strb	r4, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    22fc:	str	r2, [r3, #56]	; 0x38
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    22fe:	str	r5, [r3, #28]
      m_id = id;
    2300:	str.w	r8, [r3]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    2304:	bl	2b28 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2308:	ldr	r3, [pc, #248]	; (2404 <_GLOBAL__sub_I_currentMode+0x2c0>)
    230a:	ldr	r0, [r7, #16]
    230c:	str	r0, [r3, #24]
      m_id = id;
      m_pin = pin;
    230e:	movs	r2, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    2310:	movs	r0, #5
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    2312:	mov	r1, r4
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    2314:	str	r0, [r3, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    2316:	mov	r0, r2
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2318:	strb.w	r4, [r3, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    231c:	strb	r4, [r3, #17]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    231e:	str	r2, [r3, #56]	; 0x38
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2320:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    2322:	strb.w	sl, [r3, #16]
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    2326:	bl	2b28 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    232a:	ldr	r3, [pc, #220]	; (2408 <_GLOBAL__sub_I_currentMode+0x2c4>)
    232c:	ldr	r7, [r7, #20]
    232e:	str	r7, [r3, #24]
      m_id = id;
    2330:	movs	r2, #6
    2332:	str	r2, [r3, #0]
      m_pin = pin;
    2334:	movs	r2, #12
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2336:	ldr	r7, [pc, #212]	; (240c <_GLOBAL__sub_I_currentMode+0x2c8>)
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2338:	strb.w	r4, [r3, #48]	; 0x30
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;

      pinMode(pin, INPUT);
    233c:	mov	r0, r2
    233e:	mov	r1, r4
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    2340:	strb	r4, [r3, #16]
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    2342:	str	r2, [r3, #56]	; 0x38
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2344:	str	r5, [r3, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
    2346:	strb.w	sl, [r3, #17]

      pinMode(pin, INPUT);
    234a:	bl	2b28 <pinMode>
    234e:	ldr	r0, [pc, #192]	; (2410 <_GLOBAL__sub_I_currentMode+0x2cc>)
    2350:	ldr	r1, [pc, #192]	; (2414 <_GLOBAL__sub_I_currentMode+0x2d0>)
    2352:	ldr	r2, [pc, #196]	; (2418 <_GLOBAL__sub_I_currentMode+0x2d4>)
    2354:	ldr	r3, [pc, #196]	; (241c <_GLOBAL__sub_I_currentMode+0x2d8>)
      m_pin = pin;
      m_knobType = knobType;
    2356:	strb	r4, [r7, #24]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    2358:	mov.w	ip, #14
      m_knobType = knobType;
      m_id = id;
    235c:	str	r4, [r7, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    235e:	strb.w	ip, [r7]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2362:	str	r6, [r7, #20]
    2364:	str	r5, [r7, #16]
      m_pin = pin;
    2366:	mov.w	lr, #15
    236a:	mov.w	ip, #16
    236e:	movs	r7, #17
    2370:	movs	r4, #18
    2372:	strb.w	lr, [r0]
    2376:	strb.w	ip, [r1]
    237a:	strb	r7, [r2, #0]
    237c:	strb	r4, [r3, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    237e:	str	r6, [r0, #20]
    2380:	str	r5, [r0, #16]
      m_pin = pin;
      m_knobType = knobType;
    2382:	strb.w	sl, [r0, #24]
      m_id = id;
    2386:	str.w	sl, [r0, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    238a:	str	r6, [r1, #20]
    238c:	str	r5, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    238e:	strb.w	r9, [r1, #24]
      m_id = id;
    2392:	str.w	r9, [r1, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2396:	str	r6, [r2, #20]
    2398:	str	r5, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    239a:	strb.w	fp, [r2, #24]
      m_id = id;
    239e:	str.w	fp, [r2, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    23a2:	str	r6, [r3, #20]
    23a4:	str	r5, [r3, #16]
      m_pin = pin;
      m_knobType = knobType;
    23a6:	strb.w	r8, [r3, #24]
      m_id = id;
    23aa:	str.w	r8, [r3, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    23ae:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23b2:	nop
    23b4:	.word	0x1fff1898
    23b8:	.word	0x1fff1774
    23bc:	.word	0x1fff0c50
    23c0:	.word	0x1fff18b0
    23c4:	.word	0x1fff18c8
    23c8:	.word	0x1fff18e0
    23cc:	.word	0x1fff15d8
    23d0:	.word	0x1fff15f0
    23d4:	.word	0x1fff17a8
    23d8:	.word	0x1fff17bc
    23dc:	.word	0x1fff17d0
    23e0:	.word	0x1fff17e4
    23e4:	.word	0x1fff0c40
    23e8:	.word	0x00005574
    23ec:	.word	0x1fff0c70
    23f0:	.word	0x1fff1884
    23f4:	.word	0x1fff160c
    23f8:	.word	0x1fff1648
    23fc:	.word	0x1fff1684
    2400:	.word	0x1fff16c0
    2404:	.word	0x1fff16fc
    2408:	.word	0x1fff1738
    240c:	.word	0x1fff17f8
    2410:	.word	0x1fff1814
    2414:	.word	0x1fff1830
    2418:	.word	0x1fff184c
    241c:	.word	0x1fff1868
    2420:	.word	0x1fff1608

00002424 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    2424:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    2426:	ldr	r5, [pc, #60]	; (2464 <usb_serial_getchar+0x40>)
    2428:	ldr	r0, [r5, #0]
    242a:	cbz	r0, 244c <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    242c:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    242e:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    2430:	adds	r1, r0, r3
    2432:	adds	r3, #1
	if (i >= rx_packet->len) {
    2434:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    2436:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    2438:	bcs.n	2440 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    243a:	strh	r3, [r0, #2]
	}
	return c;
    243c:	mov	r0, r4
}
    243e:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    2440:	bl	32d0 <usb_free>
		rx_packet = NULL;
    2444:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    2446:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    2448:	str	r3, [r5, #0]
    244a:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    244c:	ldr	r3, [pc, #24]	; (2468 <usb_serial_getchar+0x44>)
    244e:	ldrb	r3, [r3, #0]
    2450:	cbz	r3, 245e <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    2452:	movs	r0, #2
    2454:	bl	331c <usb_rx>
    2458:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    245a:	cmp	r0, #0
    245c:	bne.n	242c <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    245e:	mov.w	r0, #4294967295
    2462:	pop	{r3, r4, r5, pc}
    2464:	.word	0x1fff1904
    2468:	.word	0x1fff1a64

0000246c <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    246c:	push	{r4, lr}
	if (!rx_packet) {
    246e:	ldr	r4, [pc, #36]	; (2494 <usb_serial_peekchar+0x28>)
    2470:	ldr	r0, [r4, #0]
    2472:	cbz	r0, 247c <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    2474:	ldrh	r3, [r0, #2]
    2476:	add	r0, r3
    2478:	ldrb	r0, [r0, #8]
}
    247a:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    247c:	ldr	r3, [pc, #24]	; (2498 <usb_serial_peekchar+0x2c>)
    247e:	ldrb	r3, [r3, #0]
    2480:	cbz	r3, 248e <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    2482:	movs	r0, #2
    2484:	bl	331c <usb_rx>
    2488:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    248a:	cmp	r0, #0
    248c:	bne.n	2474 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    248e:	mov.w	r0, #4294967295
    2492:	pop	{r4, pc}
    2494:	.word	0x1fff1904
    2498:	.word	0x1fff1a64

0000249c <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    249c:	ldr	r3, [pc, #16]	; (24b0 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    249e:	ldr	r2, [pc, #20]	; (24b4 <usb_serial_available+0x18>)
    24a0:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    24a2:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    24a4:	cbz	r3, 24ae <usb_serial_available+0x12>
    24a6:	ldrh	r2, [r3, #0]
    24a8:	ldrh	r3, [r3, #2]
    24aa:	subs	r3, r2, r3
    24ac:	add	r0, r3
	return count;
}
    24ae:	bx	lr
    24b0:	.word	0x1fff1904
    24b4:	.word	0x1fff1ef8

000024b8 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    24b8:	ldr	r3, [pc, #44]	; (24e8 <usb_serial_flush_input+0x30>)
    24ba:	ldrb	r3, [r3, #0]
    24bc:	cbz	r3, 24e6 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    24be:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    24c0:	ldr	r4, [pc, #40]	; (24ec <usb_serial_flush_input+0x34>)
    24c2:	ldr	r0, [r4, #0]
    24c4:	cbz	r0, 24da <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    24c6:	bl	32d0 <usb_free>
		rx_packet = NULL;
    24ca:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    24cc:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    24ce:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    24d0:	bl	331c <usb_rx>
		if (!rx) break;
    24d4:	cbz	r0, 24e4 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    24d6:	bl	32d0 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    24da:	movs	r0, #2
    24dc:	bl	331c <usb_rx>
		if (!rx) break;
    24e0:	cmp	r0, #0
    24e2:	bne.n	24d6 <usb_serial_flush_input+0x1e>
    24e4:	pop	{r4, pc}
    24e6:	bx	lr
    24e8:	.word	0x1fff1a64
    24ec:	.word	0x1fff1904

000024f0 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    24f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    24f4:	ldr.w	r9, [pc, #248]	; 25f0 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    24f8:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    24fa:	movs	r2, #1
    24fc:	strb.w	r2, [r9]
	while (size > 0) {
    2500:	str	r1, [sp, #4]
    2502:	cbz	r1, 2560 <usb_serial_write+0x70>
    2504:	ldr.w	r8, [pc, #236]	; 25f4 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    2508:	ldr	r7, [pc, #212]	; (25e0 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    250a:	ldr	r6, [sp, #4]
    250c:	mov	fp, r0
		if (!tx_packet) {
    250e:	ldr.w	r0, [r8]
    2512:	cbz	r0, 2582 <usb_serial_write+0x92>
    2514:	ldr	r5, [pc, #204]	; (25e4 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    2516:	ldrh	r4, [r0, #2]
    2518:	rsb	r1, r4, #64	; 0x40
    251c:	cmp	r1, r6
    251e:	it	cs
    2520:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    2522:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    2526:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    2528:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    252c:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    252e:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    2530:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    2534:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    2538:	cbz	r1, 2550 <usb_serial_write+0x60>
    253a:	subs	r4, #1
    253c:	add	r2, r4
    253e:	add	r1, fp
    2540:	ldrb.w	r4, [fp], #1
    2544:	strb.w	r4, [r2, #1]!
    2548:	cmp	fp, r1
    254a:	bne.n	2540 <usb_serial_write+0x50>
    254c:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    2550:	cmp.w	lr, #63	; 0x3f
    2554:	bhi.n	256e <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    2556:	ldr	r2, [pc, #144]	; (25e8 <usb_serial_write+0xf8>)
    2558:	movs	r1, #5
    255a:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    255c:	cmp	r6, #0
    255e:	bne.n	250e <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    2560:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    2562:	movs	r3, #0
    2564:	strb.w	r3, [r9]
	return ret;
}
    2568:	add	sp, #12
    256a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    256e:	movs	r2, #64	; 0x40
    2570:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2572:	mov	r1, r0
    2574:	movs	r0, #3
    2576:	bl	346c <usb_tx>
			tx_packet = NULL;
    257a:	movs	r2, #0
    257c:	str.w	r2, [r8]
    2580:	b.n	2556 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    2582:	ldrb	r2, [r7, #0]
    2584:	cbz	r2, 25d0 <usb_serial_write+0xe0>
    2586:	ldr	r4, [pc, #100]	; (25ec <usb_serial_write+0xfc>)
    2588:	ldr	r5, [pc, #88]	; (25e4 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    258a:	mov.w	sl, #1
    258e:	b.n	25a0 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2590:	subs	r4, #1
    2592:	beq.n	25c2 <usb_serial_write+0xd2>
    2594:	ldrb	r2, [r5, #0]
    2596:	cbnz	r2, 25c2 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    2598:	bl	3f70 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    259c:	ldrb	r2, [r7, #0]
    259e:	cbz	r2, 25d0 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    25a0:	movs	r0, #3
    25a2:	bl	3358 <usb_tx_packet_count>
    25a6:	cmp	r0, #7
    25a8:	bhi.n	2590 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    25aa:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    25ae:	bl	3290 <usb_malloc>
    25b2:	str.w	r0, [r8]
					if (tx_packet) break;
    25b6:	cmp	r0, #0
    25b8:	bne.n	2516 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    25ba:	ldr	r3, [pc, #52]	; (25f0 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    25bc:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    25be:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    25c0:	bne.n	2594 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    25c2:	movs	r3, #1
					return -1;
    25c4:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    25c8:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    25ca:	add	sp, #12
    25cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    25d0:	movs	r3, #0
					return -1;
    25d2:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    25d6:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    25da:	add	sp, #12
    25dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25e0:	.word	0x1fff1a64
    25e4:	.word	0x1fff1900
    25e8:	.word	0x1fff18f8
    25ec:	.word	0x00014821
    25f0:	.word	0x1fff18f9
    25f4:	.word	0x1fff18fc

000025f8 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    25f8:	push	{lr}
    25fa:	sub	sp, #12
    25fc:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    25fe:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2600:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    2604:	mov	r0, r3
    2606:	bl	24f0 <usb_serial_write>
}
    260a:	add	sp, #12
    260c:	ldr.w	pc, [sp], #4

00002610 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    2610:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    2612:	ldr	r5, [pc, #56]	; (264c <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    2614:	ldr	r4, [pc, #56]	; (2650 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    2616:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    2618:	movs	r3, #1
    261a:	strb	r3, [r4, #0]
	if (!tx_packet) {
    261c:	cbz	r0, 262a <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    261e:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    2620:	movs	r3, #0
    2622:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    2624:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    2628:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    262a:	ldr	r3, [pc, #40]	; (2654 <usb_serial_write_buffer_free+0x44>)
    262c:	ldrb	r3, [r3, #0]
    262e:	cbnz	r3, 2636 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    2630:	movs	r0, #0
    2632:	strb	r0, [r4, #0]
			return 0;
    2634:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    2636:	movs	r0, #3
    2638:	bl	3358 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    263c:	cmp	r0, #7
    263e:	bhi.n	2630 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    2640:	bl	3290 <usb_malloc>
    2644:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    2646:	cmp	r0, #0
    2648:	bne.n	261e <usb_serial_write_buffer_free+0xe>
    264a:	b.n	2630 <usb_serial_write_buffer_free+0x20>
    264c:	.word	0x1fff18fc
    2650:	.word	0x1fff18f9
    2654:	.word	0x1fff1a64

00002658 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    2658:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    265a:	ldr	r3, [pc, #68]	; (26a0 <usb_serial_flush_output+0x48>)
    265c:	ldrb	r3, [r3, #0]
    265e:	cbz	r3, 2684 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    2660:	ldr	r6, [pc, #64]	; (26a4 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    2662:	ldr	r5, [pc, #68]	; (26a8 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    2664:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    2666:	movs	r7, #1
    2668:	strb	r7, [r5, #0]
	if (tx_packet) {
    266a:	cbz	r4, 2686 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    266c:	ldr	r2, [pc, #60]	; (26ac <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    266e:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    2670:	movs	r7, #0
    2672:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2674:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    2676:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2678:	movs	r0, #3
    267a:	bl	346c <usb_tx>
		tx_packet = NULL;
    267e:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    2680:	movs	r3, #0
    2682:	strb	r3, [r5, #0]
    2684:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    2686:	bl	3290 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    268a:	ldr	r3, [pc, #32]	; (26ac <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    268c:	cbz	r0, 269a <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    268e:	mov	r1, r0
    2690:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    2692:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    2694:	bl	346c <usb_tx>
    2698:	b.n	2680 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    269a:	strb	r7, [r3, #0]
    269c:	b.n	2680 <usb_serial_flush_output+0x28>
    269e:	nop
    26a0:	.word	0x1fff1a64
    26a4:	.word	0x1fff18fc
    26a8:	.word	0x1fff18f9
    26ac:	.word	0x1fff18f8

000026b0 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    26b0:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    26b2:	ldr	r3, [pc, #56]	; (26ec <usb_serial_flush_callback+0x3c>)
    26b4:	ldrb	r3, [r3, #0]
    26b6:	cbnz	r3, 26d6 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    26b8:	ldr	r4, [pc, #52]	; (26f0 <usb_serial_flush_callback+0x40>)
    26ba:	ldr	r1, [r4, #0]
    26bc:	cbz	r1, 26d8 <usb_serial_flush_callback+0x28>
    26be:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    26c2:	ldrh	r3, [r1, #2]
    26c4:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    26c6:	movs	r0, #3
    26c8:	bl	346c <usb_tx>
		tx_packet = NULL;
    26cc:	str	r5, [r4, #0]
    26ce:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    26d0:	ldr	r3, [pc, #32]	; (26f4 <usb_serial_flush_callback+0x44>)
    26d2:	movs	r2, #1
    26d4:	strb	r2, [r3, #0]
    26d6:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    26d8:	bl	3290 <usb_malloc>
		if (tx) {
    26dc:	cmp	r0, #0
    26de:	beq.n	26d0 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    26e0:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    26e2:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    26e6:	movs	r0, #3
    26e8:	b.w	346c <usb_tx>
    26ec:	.word	0x1fff18f9
    26f0:	.word	0x1fff18fc
    26f4:	.word	0x1fff18f8

000026f8 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    26f8:	ldr	r2, [pc, #220]	; (27d8 <wait_for_cal+0xe0>)
    26fa:	ldr	r1, [pc, #224]	; (27dc <wait_for_cal+0xe4>)
    26fc:	ldr	r3, [r2, #0]
    26fe:	lsls	r3, r3, #24
    2700:	bmi.n	26fc <wait_for_cal+0x4>
    2702:	ldr	r3, [r1, #0]
    2704:	ands.w	r3, r3, #128	; 0x80
    2708:	bne.n	26fc <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    270a:	cpsid	i
	if (calibrating) {
    270c:	ldr	r1, [pc, #208]	; (27e0 <wait_for_cal+0xe8>)
    270e:	ldrb	r2, [r1, #0]
    2710:	cmp	r2, #0
    2712:	beq.n	27d4 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    2714:	ldr	r2, [pc, #204]	; (27e4 <wait_for_cal+0xec>)
    2716:	ldr	r0, [pc, #208]	; (27e8 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    2718:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    271a:	ldr	r4, [pc, #208]	; (27ec <wait_for_cal+0xf4>)
    271c:	ldr	r7, [r2, #0]
    271e:	ldr	r6, [r0, #0]
    2720:	ldr	r5, [r4, #0]
    2722:	ldr	r4, [r2, #12]
    2724:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2726:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    2728:	adds	r2, #20
    272a:	ldr	r0, [r0, #0]
    272c:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    272e:	ldr	r7, [pc, #192]	; (27f0 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    2730:	add	r5, r6
    2732:	add	r4, r5
    2734:	add	r0, r4
    2736:	add	r2, r0
    2738:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    273c:	ldr	r6, [pc, #180]	; (27f4 <wait_for_cal+0xfc>)
    273e:	ldr	r0, [pc, #184]	; (27f8 <wait_for_cal+0x100>)
    2740:	ldr	r5, [pc, #184]	; (27fc <wait_for_cal+0x104>)
    2742:	ldr	r4, [pc, #188]	; (2800 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    2744:	orr.w	r2, r2, #32768	; 0x8000
    2748:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    274a:	ldr	r7, [r6, #0]
    274c:	ldr	r6, [r0, #0]
    274e:	ldr	r5, [r5, #0]
    2750:	ldr	r2, [pc, #176]	; (2804 <wait_for_cal+0x10c>)
    2752:	ldr	r4, [r4, #0]
    2754:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2756:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2758:	ldr	r0, [r0, #0]
    275a:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    275c:	ldr	r7, [pc, #168]	; (2808 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    275e:	add	r5, r6
    2760:	add	r4, r5
    2762:	add	r0, r4
    2764:	add	r2, r0
    2766:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    276a:	ldr	r6, [pc, #160]	; (280c <wait_for_cal+0x114>)
    276c:	ldr	r0, [pc, #160]	; (2810 <wait_for_cal+0x118>)
    276e:	ldr	r5, [pc, #164]	; (2814 <wait_for_cal+0x11c>)
    2770:	ldr	r4, [pc, #164]	; (2818 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    2772:	orr.w	r2, r2, #32768	; 0x8000
    2776:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2778:	ldr	r7, [r6, #0]
    277a:	ldr	r6, [r0, #0]
    277c:	ldr	r5, [r5, #0]
    277e:	ldr	r2, [pc, #156]	; (281c <wait_for_cal+0x124>)
    2780:	ldr	r4, [r4, #0]
    2782:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2784:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2786:	ldr	r0, [r0, #0]
    2788:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    278a:	ldr	r7, [pc, #148]	; (2820 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    278c:	add	r5, r6
    278e:	add	r4, r5
    2790:	add	r0, r4
    2792:	add	r2, r0
    2794:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2798:	ldr	r6, [pc, #136]	; (2824 <wait_for_cal+0x12c>)
    279a:	ldr	r0, [pc, #140]	; (2828 <wait_for_cal+0x130>)
    279c:	ldr	r5, [pc, #140]	; (282c <wait_for_cal+0x134>)
    279e:	ldr	r4, [pc, #144]	; (2830 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    27a0:	orr.w	r2, r2, #32768	; 0x8000
    27a4:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    27a6:	ldr	r7, [r6, #0]
    27a8:	ldr	r6, [r0, #0]
    27aa:	ldr	r5, [r5, #0]
    27ac:	ldr	r2, [pc, #132]	; (2834 <wait_for_cal+0x13c>)
    27ae:	ldr	r4, [r4, #0]
    27b0:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    27b2:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    27b4:	ldr	r0, [r0, #0]
    27b6:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    27b8:	add	r5, r6
    27ba:	add	r4, r5
    27bc:	add	r0, r4
    27be:	add	r2, r0
    27c0:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    27c4:	ldr	r0, [pc, #112]	; (2838 <wait_for_cal+0x140>)
    27c6:	orr.w	r2, r2, #32768	; 0x8000
    27ca:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    27cc:	strb	r3, [r1, #0]
	}
	__enable_irq();
    27ce:	cpsie	i
}
    27d0:	pop	{r4, r5, r6, r7}
    27d2:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    27d4:	cpsie	i
    27d6:	bx	lr
    27d8:	.word	0x4003b024
    27dc:	.word	0x400bb024
    27e0:	.word	0x1fff190a
    27e4:	.word	0x4003b038
    27e8:	.word	0x4003b03c
    27ec:	.word	0x4003b040
    27f0:	.word	0x4003b02c
    27f4:	.word	0x4003b058
    27f8:	.word	0x4003b05c
    27fc:	.word	0x4003b060
    2800:	.word	0x4003b064
    2804:	.word	0x4003b06c
    2808:	.word	0x4003b030
    280c:	.word	0x400bb038
    2810:	.word	0x400bb03c
    2814:	.word	0x400bb040
    2818:	.word	0x400bb044
    281c:	.word	0x400bb04c
    2820:	.word	0x400bb02c
    2824:	.word	0x400bb058
    2828:	.word	0x400bb05c
    282c:	.word	0x400bb060
    2830:	.word	0x400bb064
    2834:	.word	0x400bb06c
    2838:	.word	0x400bb030

0000283c <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    283c:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    283e:	ldr	r0, [pc, #164]	; (28e4 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2840:	ldr	r2, [pc, #164]	; (28e8 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    2842:	ldr	r3, [pc, #168]	; (28ec <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2844:	ldr	r5, [pc, #168]	; (28f0 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2846:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2848:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    284a:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    284c:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    284e:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2850:	ldr	r4, [pc, #160]	; (28f4 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    2852:	cmp	r3, #8
    2854:	beq.n	28b8 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2856:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2858:	ldr	r0, [pc, #156]	; (28f8 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    285a:	ldr	r1, [pc, #160]	; (28fc <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    285c:	beq.n	28ce <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    285e:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    2860:	ite	eq
    2862:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2864:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2866:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2868:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    286a:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    286c:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    286e:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2870:	ldr	r3, [pc, #140]	; (2900 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2872:	ldr	r1, [pc, #144]	; (2904 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2874:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2876:	ldr	r2, [pc, #144]	; (2908 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2878:	cbz	r3, 28aa <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    287a:	movs	r3, #1
    287c:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    287e:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2880:	ldr	r3, [pc, #136]	; (290c <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2882:	ldr	r1, [pc, #140]	; (2910 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2884:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2886:	ldr	r2, [pc, #140]	; (2914 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    2888:	cmp	r3, #1
    288a:	bls.n	28da <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    288c:	cmp	r3, #4
    288e:	bls.n	28b0 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    2890:	cmp	r3, #8
    2892:	bls.n	28d2 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2894:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2896:	ite	ls
    2898:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    289a:	movhi	r3, #135	; 0x87
    289c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    289e:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    28a0:	ldr	r3, [pc, #116]	; (2918 <analog_init+0xdc>)
    28a2:	movs	r2, #1
    28a4:	strb	r2, [r3, #0]
}
    28a6:	pop	{r4, r5}
    28a8:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    28aa:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    28ac:	str	r3, [r2, #0]
    28ae:	b.n	2880 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    28b0:	movs	r3, #132	; 0x84
    28b2:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    28b4:	str	r3, [r2, #0]
    28b6:	b.n	28a0 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    28b8:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    28bc:	ldr	r1, [pc, #60]	; (28fc <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    28be:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    28c0:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    28c2:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    28c4:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    28c6:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    28c8:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    28ca:	str	r3, [r1, #0]
    28cc:	b.n	2870 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    28ce:	movs	r2, #57	; 0x39
    28d0:	b.n	28c2 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    28d2:	movs	r3, #133	; 0x85
    28d4:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    28d6:	str	r3, [r2, #0]
    28d8:	b.n	28a0 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    28da:	movs	r3, #128	; 0x80
    28dc:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    28de:	str	r3, [r2, #0]
    28e0:	b.n	28a0 <analog_init+0x64>
    28e2:	nop
    28e4:	.word	0x40074000
    28e8:	.word	0x40074001
    28ec:	.word	0x1fff0c68
    28f0:	.word	0x4003b008
    28f4:	.word	0x4003b00c
    28f8:	.word	0x400bb008
    28fc:	.word	0x400bb00c
    2900:	.word	0x1fff190d
    2904:	.word	0x4003b020
    2908:	.word	0x400bb020
    290c:	.word	0x1fff0c69
    2910:	.word	0x4003b024
    2914:	.word	0x400bb024
    2918:	.word	0x1fff190a

0000291c <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    291c:	cmp	r0, #71	; 0x47
    291e:	bhi.n	2980 <analogRead+0x64>
	channel = pin2sc1a[pin];
    2920:	ldr	r3, [pc, #204]	; (29f0 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    2922:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    2926:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    2928:	cmp	r6, #255	; 0xff
    292a:	beq.n	2984 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    292c:	ldr	r3, [pc, #196]	; (29f4 <analogRead+0xd8>)
    292e:	ldrb	r3, [r3, #0]
    2930:	cmp	r3, #0
    2932:	bne.n	298a <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2934:	lsls	r2, r6, #24
    2936:	bmi.n	2992 <analogRead+0x76>
#endif

	__disable_irq();
    2938:	cpsid	i
    293a:	ldr	r5, [pc, #188]	; (29f8 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    293c:	ldr	r4, [pc, #188]	; (29fc <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    293e:	mov	r7, r5
    2940:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2942:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    2944:	strb	r3, [r5, #0]
	__enable_irq();
    2946:	cpsie	i
	while (1) {
		__disable_irq();
    2948:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    294a:	ldr	r3, [r4, #0]
    294c:	lsls	r3, r3, #24
    294e:	bmi.n	296a <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    2950:	ldrb	r3, [r7, #0]
    2952:	cbnz	r3, 295c <analogRead+0x40>
    2954:	b.n	2940 <analogRead+0x24>
    2956:	ldrb	r3, [r5, #0]
    2958:	cmp	r3, #0
    295a:	beq.n	2940 <analogRead+0x24>
		__enable_irq();
    295c:	cpsie	i
		yield();
    295e:	bl	3f70 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2962:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2964:	ldr	r3, [r4, #0]
    2966:	lsls	r0, r3, #24
    2968:	bpl.n	2956 <analogRead+0x3a>
			result = ADC0_RA;
    296a:	ldr	r3, [pc, #148]	; (2a00 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    296c:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    296e:	movs	r2, #0
    2970:	strb	r2, [r5, #0]
			__enable_irq();
    2972:	cpsie	i
			result >>= analog_right_shift;
    2974:	ldr	r2, [pc, #140]	; (2a04 <analogRead+0xe8>)
    2976:	ldrb	r0, [r2, #0]
    2978:	asr.w	r0, r3, r0
			return result;
    297c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2980:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2982:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2984:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2986:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    298a:	bl	26f8 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    298e:	lsls	r2, r6, #24
    2990:	bpl.n	2938 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    2992:	cpsid	i
    2994:	ldr	r5, [pc, #112]	; (2a08 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2996:	ldr.w	r8, [pc, #124]	; 2a14 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    299a:	ldr	r4, [pc, #112]	; (2a0c <analogRead+0xf0>)
    299c:	and.w	r7, r6, #64	; 0x40
    29a0:	uxtb	r7, r7
    29a2:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    29a6:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    29aa:	cbz	r7, 29e4 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    29ac:	bic.w	r3, r3, #16
    29b0:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    29b4:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    29b6:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    29b8:	ldr	r2, [pc, #76]	; (2a08 <analogRead+0xec>)
    29ba:	strb	r3, [r5, #0]
	__enable_irq();
    29bc:	cpsie	i
	while (1) {
		__disable_irq();
    29be:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    29c0:	ldr	r3, [r4, #0]
    29c2:	lsls	r1, r3, #24
    29c4:	bmi.n	29e0 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    29c6:	ldrb	r3, [r2, #0]
    29c8:	cbnz	r3, 29d2 <analogRead+0xb6>
    29ca:	b.n	29a6 <analogRead+0x8a>
    29cc:	ldrb	r3, [r5, #0]
    29ce:	cmp	r3, #0
    29d0:	beq.n	29a6 <analogRead+0x8a>
		__enable_irq();
    29d2:	cpsie	i
		yield();
    29d4:	bl	3f70 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    29d8:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    29da:	ldr	r3, [r4, #0]
    29dc:	lsls	r3, r3, #24
    29de:	bpl.n	29cc <analogRead+0xb0>
			result = ADC1_RA;
    29e0:	ldr	r3, [pc, #44]	; (2a10 <analogRead+0xf4>)
    29e2:	b.n	296c <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    29e4:	orr.w	r3, r3, #16
    29e8:	str.w	r3, [r8]
    29ec:	b.n	29b4 <analogRead+0x98>
    29ee:	nop
    29f0:	.word	0x000055e8
    29f4:	.word	0x1fff190a
    29f8:	.word	0x1fff190c
    29fc:	.word	0x4003b000
    2a00:	.word	0x4003b010
    2a04:	.word	0x1fff1909
    2a08:	.word	0x1fff190b
    2a0c:	.word	0x400bb000
    2a10:	.word	0x400bb010
    2a14:	.word	0x400bb00c

00002a18 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    2a18:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    2a1a:	ldr	r3, [pc, #68]	; (2a60 <digitalWrite.part.1+0x48>)
    2a1c:	ldr.w	r2, [r3, r0, lsl #3]
    2a20:	ldrb.w	r4, [r2, #640]	; 0x280
    2a24:	cbz	r4, 2a34 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    2a26:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    2a28:	cbz	r1, 2a4a <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    2a2a:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2a2e:	ldr.w	r4, [sp], #4
    2a32:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    2a34:	add.w	r3, r3, r0, lsl #3
    2a38:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2a3a:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    2a3c:	cbnz	r1, 2a54 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    2a3e:	bic.w	r2, r2, #2
    2a42:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2a44:	ldr.w	r4, [sp], #4
    2a48:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    2a4a:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2a4e:	ldr.w	r4, [sp], #4
    2a52:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2a54:	orr.w	r2, r2, #3
    2a58:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2a5a:	ldr.w	r4, [sp], #4
    2a5e:	bx	lr
    2a60:	.word	0x00005630

00002a64 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2a64:	ldr	r2, [pc, #112]	; (2ad8 <pinMode.part.2+0x74>)
    2a66:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2a6a:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2a6c:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2a6e:	beq.n	2a94 <pinMode.part.2+0x30>
    2a70:	cmp	r1, #4
    2a72:	beq.n	2aac <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2a74:	ldr.w	r0, [r2, r0, lsl #3]
    2a78:	movs	r2, #0
    2a7a:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    2a7e:	cbz	r1, 2a8c <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2a80:	cmp	r1, #2
    2a82:	beq.n	2ac6 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2a84:	cmp	r1, #3
    2a86:	beq.n	2ace <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2a88:	str	r2, [r3, #0]
    2a8a:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2a8c:	mov.w	r2, #256	; 0x100
    2a90:	str	r2, [r3, #0]
    2a92:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2a94:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2a98:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2a9c:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2aa0:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2aa2:	ldr	r2, [r3, #0]
    2aa4:	bic.w	r2, r2, #32
    2aa8:	str	r2, [r3, #0]
    2aaa:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2aac:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2ab0:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2ab4:	movs	r0, #1
    2ab6:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2aba:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    2abc:	ldr	r2, [r3, #0]
    2abe:	orr.w	r2, r2, #32
    2ac2:	str	r2, [r3, #0]
    2ac4:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    2ac6:	movw	r2, #259	; 0x103
    2aca:	str	r2, [r3, #0]
    2acc:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    2ace:	mov.w	r2, #258	; 0x102
    2ad2:	str	r2, [r3, #0]
    2ad4:	bx	lr
    2ad6:	nop
    2ad8:	.word	0x00005630

00002adc <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    2adc:	push	{r4, r5}
	RTC_SR = 0;
    2ade:	ldr	r3, [pc, #20]	; (2af4 <rtc_set+0x18>)
	RTC_TPR = 0;
    2ae0:	ldr	r5, [pc, #20]	; (2af8 <rtc_set+0x1c>)
	RTC_TSR = t;
    2ae2:	ldr	r4, [pc, #24]	; (2afc <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2ae4:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    2ae6:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2ae8:	str	r2, [r3, #0]
	RTC_TPR = 0;
    2aea:	str	r2, [r5, #0]
	RTC_TSR = t;
    2aec:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    2aee:	str	r1, [r3, #0]
}
    2af0:	pop	{r4, r5}
    2af2:	bx	lr
    2af4:	.word	0x4003d014
    2af8:	.word	0x4003d004
    2afc:	.word	0x4003d000

00002b00 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    2b00:	cmp	r0, #63	; 0x3f
    2b02:	bhi.n	2b08 <digitalWrite+0x8>
    2b04:	b.w	2a18 <digitalWrite.part.1>
    2b08:	bx	lr
    2b0a:	nop

00002b0c <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2b0c:	cmp	r0, #63	; 0x3f
    2b0e:	bhi.n	2b1e <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    2b10:	ldr	r3, [pc, #16]	; (2b24 <digitalRead+0x18>)
    2b12:	ldr.w	r3, [r3, r0, lsl #3]
    2b16:	ldrb.w	r0, [r3, #512]	; 0x200
    2b1a:	uxtb	r0, r0
    2b1c:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2b1e:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    2b20:	bx	lr
    2b22:	nop
    2b24:	.word	0x00005630

00002b28 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    2b28:	cmp	r0, #63	; 0x3f
    2b2a:	bhi.n	2b30 <pinMode+0x8>
    2b2c:	b.w	2a64 <pinMode.part.2>
    2b30:	bx	lr
    2b32:	nop

00002b34 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    2b34:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2b38:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2b3a:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2b3c:	ldr	r7, [pc, #136]	; (2bc8 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2b3e:	ldr	r3, [pc, #140]	; (2bcc <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2b40:	ldr	r2, [pc, #140]	; (2bd0 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2b42:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2b44:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2b46:	ldr	r2, [r2, #0]
	__enable_irq();
    2b48:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2b4a:	lsls	r2, r2, #5
    2b4c:	bpl.n	2b54 <delay+0x20>
    2b4e:	cmp	r3, #50	; 0x32
    2b50:	it	hi
    2b52:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2b54:	cbz	r5, 2bc4 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2b56:	rsb	r3, r3, #179200	; 0x2bc00
    2b5a:	addw	r3, r3, #799	; 0x31f
    2b5e:	ldr	r6, [pc, #116]	; (2bd4 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2b60:	ldr.w	r9, [pc, #104]	; 2bcc <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2b64:	ldr.w	r8, [pc, #104]	; 2bd0 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2b68:	lsrs	r3, r3, #2
    2b6a:	mov.w	r2, #1000	; 0x3e8
    2b6e:	umull	r1, r3, r6, r3
    2b72:	mul.w	r4, r2, r4
    2b76:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2b7a:	cpsid	i
	current = SYST_CVR;
    2b7c:	ldr.w	r1, [r9]
	count = systick_millis_count;
    2b80:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2b82:	ldr.w	lr, [r8]
	__enable_irq();
    2b86:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2b88:	rsb	r3, r1, #179200	; 0x2bc00
    2b8c:	addw	r3, r3, #799	; 0x31f
    2b90:	lsrs	r3, r3, #2
    2b92:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2b96:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2b9a:	rsb	r3, r4, r3, lsr #2
    2b9e:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2ba2:	beq.n	2baa <delay+0x76>
    2ba4:	cmp	r1, #50	; 0x32
    2ba6:	it	hi
    2ba8:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2baa:	mla	r3, r0, r2, r3
    2bae:	cmp.w	r3, #1000	; 0x3e8
    2bb2:	bcc.n	2bbe <delay+0x8a>
				ms--;
				if (ms == 0) return;
    2bb4:	subs	r5, #1
    2bb6:	beq.n	2bc4 <delay+0x90>
				start += 1000;
    2bb8:	add.w	r4, r4, #1000	; 0x3e8
    2bbc:	b.n	2b7a <delay+0x46>
			}
			yield();
    2bbe:	bl	3f70 <yield>
		}
    2bc2:	b.n	2b7a <delay+0x46>
    2bc4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2bc8:	.word	0x1fff1910
    2bcc:	.word	0xe000e018
    2bd0:	.word	0xe000ed04
    2bd4:	.word	0x16c16c17

00002bd8 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    2bd8:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2bda:	ldr	r3, [pc, #312]	; (2d14 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2bdc:	ldr	r0, [pc, #312]	; (2d18 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    2bde:	ldr.w	ip, [pc, #348]	; 2d3c <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    2be2:	ldr	r4, [pc, #312]	; (2d1c <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    2be4:	ldr	r1, [pc, #312]	; (2d20 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2be6:	ldr.w	lr, [pc, #344]	; 2d40 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    2bea:	ldr	r6, [pc, #312]	; (2d24 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    2bec:	ldr	r5, [pc, #312]	; (2d28 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    2bee:	ldr	r7, [pc, #316]	; (2d2c <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2bf0:	mov.w	r2, #134217728	; 0x8000000
    2bf4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    2bf6:	mov.w	r2, #268435456	; 0x10000000
    2bfa:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    2bfc:	mov.w	r2, #536870912	; 0x20000000
    2c00:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    2c02:	mov.w	r2, #1073741824	; 0x40000000
    2c06:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    2c08:	mov.w	r2, #2147483648	; 0x80000000
    2c0c:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2c0e:	movs	r2, #0
    2c10:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2c12:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2c14:	movw	r0, #61439	; 0xefff
    2c18:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2c1c:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    2c20:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2c22:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    2c26:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    2c28:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    2c2a:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2c2c:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    2c30:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    2c32:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    2c36:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2c38:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    2c3c:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2c3e:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    2c42:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2c46:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    2c4a:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2c4e:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    2c52:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2c54:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2c58:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2c5a:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2c5c:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    2c5e:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    2c62:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2c64:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2c66:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2c68:	ldr	r4, [pc, #196]	; (2d30 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    2c6a:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2c6c:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2c6e:	movs	r1, #9
    2c70:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    2c72:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2c76:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2c7a:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2c7c:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2c7e:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    2c80:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    2c82:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2c84:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2c86:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2c8a:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    2c8e:	add.w	r7, r7, #520192	; 0x7f000
    2c92:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2c94:	addw	r4, r4, #2044	; 0x7fc
    2c98:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2c9a:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2c9c:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    2c9e:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2ca0:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2ca4:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    2ca6:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    2caa:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    2cae:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2cb0:	sub.w	r4, r4, #460800	; 0x70800
    2cb4:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    2cb8:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2cba:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2cbc:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2cc0:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2cc2:	ldr	r0, [pc, #112]	; (2d34 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2cc4:	orr.w	r1, r1, #512	; 0x200
    2cc8:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2cca:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2ccc:	ldr	r4, [pc, #104]	; (2d38 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    2cce:	add.w	lr, lr, #65280	; 0xff00
    2cd2:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    2cd6:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    2cda:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    2cde:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2ce2:	orr.w	r1, r1, #33554432	; 0x2000000
    2ce6:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    2ce8:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    2cec:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2cf0:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    2cf2:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    2cf4:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    2cf6:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2cf8:	str	r2, [r4, #0]
#endif
	analog_init();
    2cfa:	bl	283c <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    2cfe:	movs	r0, #25
    2d00:	bl	2b34 <delay>
	usb_init();
    2d04:	bl	3ea0 <usb_init>
	delay(275);
    2d08:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    2d0c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    2d10:	b.w	2b34 <delay>
    2d14:	.word	0xe000e104
    2d18:	.word	0x40038004
    2d1c:	.word	0x40038014
    2d20:	.word	0x4003801c
    2d24:	.word	0x40038024
    2d28:	.word	0x4003802c
    2d2c:	.word	0x40038034
    2d30:	.word	0x40038000
    2d34:	.word	0x40048004
    2d38:	.word	0x400c9000
    2d3c:	.word	0x40038008
    2d40:	.word	0x4003800c

00002d44 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2d44:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2d46:	ldr	r3, [pc, #56]	; (2d80 <sysex_byte+0x3c>)
    2d48:	ldr	r4, [pc, #56]	; (2d84 <sysex_byte+0x40>)
    2d4a:	ldr	r3, [r3, #0]
    2d4c:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2d4e:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2d50:	cbz	r3, 2d76 <sysex_byte+0x32>
    2d52:	cmp.w	r1, #290	; 0x122
    2d56:	bcs.n	2d64 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2d58:	ldr	r2, [pc, #44]	; (2d88 <sysex_byte+0x44>)
    2d5a:	adds	r3, r1, #1
    2d5c:	strb	r5, [r2, r1]
    2d5e:	uxth	r3, r3
    2d60:	strh	r3, [r4, #0]
	}
}
    2d62:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2d64:	movs	r2, #0
    2d66:	ldr	r0, [pc, #32]	; (2d88 <sysex_byte+0x44>)
    2d68:	blx	r3
    2d6a:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2d6c:	ldr	r2, [pc, #24]	; (2d88 <sysex_byte+0x44>)
    2d6e:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2d70:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2d72:	strh	r3, [r4, #0]
	}
}
    2d74:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    2d76:	cmp.w	r1, #290	; 0x122
    2d7a:	bcc.n	2d58 <sysex_byte+0x14>
    2d7c:	pop	{r3, r4, r5, pc}
    2d7e:	nop
    2d80:	.word	0x1fff1938
    2d84:	.word	0x1fff1dce
    2d88:	.word	0x1fff1dd4

00002d8c <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2d8c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    2d90:	ldr	r6, [pc, #132]	; (2e18 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2d92:	ldr	r7, [pc, #136]	; (2e1c <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    2d94:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2d96:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2d98:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2d9a:	strb	r3, [r7, #0]
	if (!tx_packet) {
    2d9c:	cbz	r1, 2dcc <usb_midi_write_packed+0x40>
    2d9e:	ldr	r5, [pc, #128]	; (2e20 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    2da0:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2da2:	add.w	r2, r1, r3, lsl #2
    2da6:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2da8:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2daa:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2dac:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2db0:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2db2:	bhi.n	2dbe <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    2db4:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    2db6:	movs	r3, #0
    2db8:	strb	r3, [r7, #0]
    2dba:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    2dbe:	movs	r3, #64	; 0x40
    2dc0:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2dc2:	movs	r0, #4
    2dc4:	bl	346c <usb_tx>
		tx_packet = NULL;
    2dc8:	str	r4, [r6, #0]
    2dca:	b.n	2db6 <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2dcc:	ldr.w	r9, [pc, #84]	; 2e24 <usb_midi_write_packed+0x98>
    2dd0:	ldrb.w	r3, [r9]
    2dd4:	cmp	r3, #0
    2dd6:	beq.n	2dba <usb_midi_write_packed+0x2e>
    2dd8:	ldr	r5, [pc, #68]	; (2e20 <usb_midi_write_packed+0x94>)
    2dda:	movw	r4, #48001	; 0xbb81
    2dde:	b.n	2df2 <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2de0:	subs	r4, #1
    2de2:	beq.n	2e0a <usb_midi_write_packed+0x7e>
    2de4:	ldrb	r3, [r5, #0]
    2de6:	cbnz	r3, 2e0a <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    2de8:	bl	3f70 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2dec:	ldrb.w	r3, [r9]
    2df0:	cbz	r3, 2e12 <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2df2:	movs	r0, #4
    2df4:	bl	3358 <usb_tx_packet_count>
    2df8:	cmp	r0, #5
    2dfa:	bhi.n	2de0 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    2dfc:	bl	3290 <usb_malloc>
    2e00:	mov	r1, r0
    2e02:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    2e04:	cmp	r0, #0
    2e06:	beq.n	2de0 <usb_midi_write_packed+0x54>
    2e08:	b.n	2da0 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    2e0a:	movs	r3, #1
    2e0c:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    2e0e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e12:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e16:	nop
    2e18:	.word	0x1fff1954
    2e1c:	.word	0x1fff1928
    2e20:	.word	0x1fff1958
    2e24:	.word	0x1fff1a64

00002e28 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    2e28:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    2e2a:	ldr	r3, [pc, #32]	; (2e4c <usb_midi_flush_output+0x24>)
    2e2c:	ldrb	r4, [r3, #0]
    2e2e:	cbnz	r4, 2e3a <usb_midi_flush_output+0x12>
    2e30:	ldr	r5, [pc, #28]	; (2e50 <usb_midi_flush_output+0x28>)
    2e32:	ldr	r1, [r5, #0]
    2e34:	cbz	r1, 2e3a <usb_midi_flush_output+0x12>
    2e36:	ldrh	r3, [r1, #2]
    2e38:	cbnz	r3, 2e3c <usb_midi_flush_output+0x14>
    2e3a:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    2e3c:	lsls	r3, r3, #2
    2e3e:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2e40:	movs	r0, #4
    2e42:	bl	346c <usb_tx>
		tx_packet = NULL;
    2e46:	str	r4, [r5, #0]
    2e48:	pop	{r3, r4, r5, pc}
    2e4a:	nop
    2e4c:	.word	0x1fff1928
    2e50:	.word	0x1fff1954

00002e54 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2e54:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2e58:	ldr	r6, [pc, #692]	; (3110 <usb_midi_read+0x2bc>)
    2e5a:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    2e5c:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    2e5e:	cmp	r3, #0
    2e60:	beq.w	2f88 <usb_midi_read+0x134>
    2e64:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    2e66:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2e68:	lsrs	r1, r2, #2
    2e6a:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    2e6e:	adds	r2, #4
	if (index < rx_packet->len) {
    2e70:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    2e72:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    2e74:	bcs.n	2efc <usb_midi_read+0xa8>
		rx_packet->index = index;
    2e76:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    2e78:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2e7c:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    2e80:	ldr	r1, [pc, #656]	; (3114 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2e82:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2e86:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    2e8a:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2e8e:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    2e90:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    2e94:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    2e96:	bls.n	2ece <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2e98:	subs	r3, r6, #2
    2e9a:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    2e9c:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2ea0:	bls.n	2f40 <usb_midi_read+0xec>
    2ea2:	cmp	r6, #5
    2ea4:	beq.n	2f38 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    2ea6:	cmp	r6, #4
    2ea8:	beq.w	31f4 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    2eac:	subs	r3, r6, #5
    2eae:	cmp	r3, #2
    2eb0:	bls.n	2fb2 <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    2eb2:	cmp	r6, #15
    2eb4:	bne.n	2ed4 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    2eb6:	cmp	r0, #247	; 0xf7
    2eb8:	bhi.n	2f40 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    2eba:	cmp	r0, #240	; 0xf0
    2ebc:	beq.n	2ec4 <usb_midi_read+0x70>
    2ebe:	ldr	r3, [pc, #600]	; (3118 <usb_midi_read+0x2c4>)
    2ec0:	ldrh	r3, [r3, #0]
    2ec2:	cbz	r3, 2ed4 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    2ec4:	bl	2d44 <sysex_byte>
		}
	}
	return 0;
    2ec8:	movs	r0, #0
    2eca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    2ece:	cbz	r7, 2eda <usb_midi_read+0x86>
    2ed0:	cmp	r5, r7
    2ed2:	beq.n	2eda <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    2ed4:	movs	r0, #0
    2ed6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2eda:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    2edc:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2ee0:	beq.w	2ff2 <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    2ee4:	cmp	r6, #9
    2ee6:	beq.n	2f0c <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    2ee8:	cmp	r6, #10
    2eea:	bne.w	3016 <usb_midi_read+0x1c2>
    2eee:	cmp	r3, #10
    2ef0:	bne.n	2ed4 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    2ef2:	ldr	r3, [pc, #552]	; (311c <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    2ef4:	ldr	r2, [pc, #552]	; (3120 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    2ef6:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    2ef8:	movs	r1, #160	; 0xa0
    2efa:	b.n	3000 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    2efc:	mov	r0, r3
    2efe:	bl	32d0 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2f02:	movs	r0, #5
    2f04:	bl	331c <usb_rx>
    2f08:	str	r0, [r6, #0]
    2f0a:	b.n	2e78 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    2f0c:	cmp	r3, #9
    2f0e:	bne.n	2ed4 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    2f10:	lsrs	r7, r4, #24
    2f12:	beq.w	320c <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    2f16:	ldr	r3, [pc, #524]	; (3124 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2f18:	ldr	r2, [pc, #516]	; (3120 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    2f1a:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2f1c:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2f1e:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    2f22:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2f24:	uxtb	r5, r5
    2f26:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    2f28:	cmp	r3, #0
    2f2a:	beq.w	3068 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    2f2e:	mov	r2, r4
    2f30:	mov	r1, r6
    2f32:	mov	r0, r5
    2f34:	blx	r3
    2f36:	b.n	3068 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    2f38:	cmp	r0, #240	; 0xf0
    2f3a:	bls.n	2fc4 <usb_midi_read+0x170>
    2f3c:	cmp	r0, #247	; 0xf7
    2f3e:	beq.n	2fc4 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    2f40:	subs	r0, #241	; 0xf1
    2f42:	cmp	r0, #14
    2f44:	bhi.n	2ed4 <usb_midi_read+0x80>
    2f46:	add	r3, pc, #4	; (adr r3, 2f4c <usb_midi_read+0xf8>)
    2f48:	ldr.w	pc, [r3, r0, lsl #2]
    2f4c:	.word	0x00003103
    2f50:	.word	0x000030e7
    2f54:	.word	0x000030d5
    2f58:	.word	0x00002ed5
    2f5c:	.word	0x00002ed5
    2f60:	.word	0x000030c7
    2f64:	.word	0x00002ed5
    2f68:	.word	0x000031a7
    2f6c:	.word	0x00002ed5
    2f70:	.word	0x00003171
    2f74:	.word	0x0000318b
    2f78:	.word	0x000030af
    2f7c:	.word	0x00002ed5
    2f80:	.word	0x00003097
    2f84:	.word	0x0000307b
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    2f88:	ldr	r3, [pc, #412]	; (3128 <usb_midi_read+0x2d4>)
    2f8a:	ldrb	r3, [r3, #0]
    2f8c:	cmp	r3, #0
    2f8e:	beq.n	2ed4 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    2f90:	movs	r0, #5
    2f92:	bl	331c <usb_rx>
    2f96:	mov	r3, r0
    2f98:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    2f9a:	cmp	r0, #0
    2f9c:	beq.n	2ed4 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    2f9e:	ldrh	r5, [r0, #0]
    2fa0:	cmp	r5, #0
    2fa2:	bne.w	2e66 <usb_midi_read+0x12>
			usb_free(rx_packet);
    2fa6:	bl	32d0 <usb_free>
			rx_packet = NULL;
    2faa:	str	r5, [r6, #0]
			return 0;
    2fac:	mov	r0, r5
    2fae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    2fb2:	bl	2d44 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    2fb6:	ubfx	r0, r4, #16, #8
    2fba:	bl	2d44 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    2fbe:	cmp	r6, #7
    2fc0:	bne.n	2fc8 <usb_midi_read+0x174>
    2fc2:	lsrs	r0, r4, #24
    2fc4:	bl	2d44 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    2fc8:	ldr	r3, [pc, #332]	; (3118 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2fca:	ldr	r2, [pc, #352]	; (312c <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    2fcc:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    2fce:	ldr	r0, [pc, #352]	; (3130 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    2fd0:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2fd2:	ldr	r5, [pc, #352]	; (3134 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2fd4:	ldr	r2, [pc, #328]	; (3120 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    2fd6:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2fd8:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2fda:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2fdc:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    2fde:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    2fe0:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    2fe2:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    2fe4:	cbz	r4, 302a <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    2fe6:	movs	r2, #1
    2fe8:	ldr	r0, [pc, #332]	; (3138 <usb_midi_read+0x2e4>)
    2fea:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2fec:	movs	r0, #1
    2fee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    2ff2:	cmp	r3, #8
    2ff4:	bne.w	2ed4 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    2ff8:	ldr	r3, [pc, #320]	; (313c <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    2ffa:	ldr	r2, [pc, #292]	; (3120 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    2ffc:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    2ffe:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    3000:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    3004:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    3006:	uxtb	r5, r5
    3008:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    300a:	cbz	r3, 3068 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    300c:	mov	r0, r5
    300e:	mov	r2, r4
    3010:	mov	r1, r6
    3012:	blx	r3
    3014:	b.n	3068 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    3016:	cmp	r6, #11
    3018:	bne.n	303e <usb_midi_read+0x1ea>
    301a:	cmp	r3, #11
    301c:	bne.w	2ed4 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    3020:	ldr	r3, [pc, #284]	; (3140 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    3022:	ldr	r2, [pc, #252]	; (3120 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    3024:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    3026:	movs	r1, #176	; 0xb0
    3028:	b.n	3000 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    302a:	ldr	r3, [pc, #280]	; (3144 <usb_midi_read+0x2f0>)
    302c:	ldr	r3, [r3, #0]
    302e:	cmp	r3, #0
    3030:	beq.w	322a <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    3034:	ldr	r0, [pc, #256]	; (3138 <usb_midi_read+0x2e4>)
    3036:	blx	r3
		}
		return 1;
    3038:	movs	r0, #1
    303a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    303e:	cmp	r6, #12
    3040:	bne.w	3244 <usb_midi_read+0x3f0>
    3044:	cmp	r3, #12
    3046:	bne.w	2ed4 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    304a:	ldr	r3, [pc, #252]	; (3148 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    304c:	ldr	r2, [pc, #208]	; (3120 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    304e:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    3050:	movs	r1, #192	; 0xc0
    3052:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    3054:	uxtb	r5, r5
    3056:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    305a:	cmp	r3, #0
    305c:	beq.w	31f0 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    3060:	mov	r0, r5
    3062:	mov	r1, r6
    3064:	lsrs	r4, r4, #24
    3066:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    3068:	ldr	r1, [pc, #224]	; (314c <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    306a:	ldr	r2, [pc, #196]	; (3130 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    306c:	ldr	r3, [pc, #196]	; (3134 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    306e:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    3070:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    3072:	strb	r4, [r3, #0]
		return 1;
    3074:	movs	r0, #1
    3076:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    307a:	ldr	r3, [pc, #212]	; (3150 <usb_midi_read+0x2fc>)
    307c:	ldr	r3, [r3, #0]
    307e:	cmp	r3, #0
    3080:	beq.w	3230 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    3084:	blx	r3
    3086:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    308a:	ldr	r3, [pc, #148]	; (3120 <usb_midi_read+0x2cc>)
    308c:	uxtb	r5, r5
    308e:	lsrs	r4, r4, #24
    3090:	strb.w	r8, [r3]
		goto return_message;
    3094:	b.n	3068 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    3096:	ldr	r3, [pc, #188]	; (3154 <usb_midi_read+0x300>)
    3098:	ldr	r3, [r3, #0]
    309a:	cmp	r3, #0
    309c:	bne.n	3084 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    309e:	ldr	r3, [pc, #184]	; (3158 <usb_midi_read+0x304>)
    30a0:	ldr	r3, [r3, #0]
    30a2:	cbz	r3, 30ce <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    30a4:	movs	r0, #254	; 0xfe
    30a6:	blx	r3
    30a8:	ubfx	r6, r4, #16, #8
    30ac:	b.n	308a <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    30ae:	ldr	r3, [pc, #172]	; (315c <usb_midi_read+0x308>)
    30b0:	ldr	r3, [r3, #0]
    30b2:	cmp	r3, #0
    30b4:	bne.n	3084 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    30b6:	ldr	r3, [pc, #160]	; (3158 <usb_midi_read+0x304>)
    30b8:	ldr	r3, [r3, #0]
    30ba:	cbz	r3, 30ce <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    30bc:	movs	r0, #252	; 0xfc
    30be:	blx	r3
    30c0:	ubfx	r6, r4, #16, #8
    30c4:	b.n	308a <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    30c6:	ldr	r3, [pc, #152]	; (3160 <usb_midi_read+0x30c>)
    30c8:	ldr	r3, [r3, #0]
    30ca:	cmp	r3, #0
    30cc:	bne.n	3084 <usb_midi_read+0x230>
    30ce:	ubfx	r6, r4, #16, #8
    30d2:	b.n	308a <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    30d4:	ldr	r3, [pc, #140]	; (3164 <usb_midi_read+0x310>)
    30d6:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    30d8:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    30dc:	cmp	r3, #0
    30de:	beq.n	308a <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    30e0:	mov	r0, r6
    30e2:	blx	r3
    30e4:	b.n	308a <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    30e6:	ldr	r3, [pc, #128]	; (3168 <usb_midi_read+0x314>)
    30e8:	ldr	r2, [r3, #0]
    30ea:	cmp	r2, #0
    30ec:	beq.n	30ce <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    30ee:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    30f0:	lsrs	r3, r4, #17
    30f2:	and.w	r0, r6, #127	; 0x7f
    30f6:	and.w	r3, r3, #16256	; 0x3f80
    30fa:	orrs	r0, r3
    30fc:	uxtb	r6, r6
    30fe:	blx	r2
    3100:	b.n	308a <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    3102:	ldr	r3, [pc, #104]	; (316c <usb_midi_read+0x318>)
    3104:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    3106:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    310a:	cmp	r3, #0
    310c:	bne.n	30e0 <usb_midi_read+0x28c>
    310e:	b.n	308a <usb_midi_read+0x236>
    3110:	.word	0x1fff1960
    3114:	.word	0x1fff1dd2
    3118:	.word	0x1fff1dce
    311c:	.word	0x1fff193c
    3120:	.word	0x1fff1dcc
    3124:	.word	0x1fff1970
    3128:	.word	0x1fff1a64
    312c:	.word	0x1fff1938
    3130:	.word	0x1fff1dd0
    3134:	.word	0x1fff1dd1
    3138:	.word	0x1fff1dd4
    313c:	.word	0x1fff1968
    3140:	.word	0x1fff196c
    3144:	.word	0x1fff1950
    3148:	.word	0x1fff192c
    314c:	.word	0x1fff1dd3
    3150:	.word	0x1fff1918
    3154:	.word	0x1fff191c
    3158:	.word	0x1fff1920
    315c:	.word	0x1fff195c
    3160:	.word	0x1fff194c
    3164:	.word	0x1fff1964
    3168:	.word	0x1fff1934
    316c:	.word	0x1fff1948
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    3170:	ldr	r3, [pc, #252]	; (3270 <usb_midi_read+0x41c>)
    3172:	ldr	r3, [r3, #0]
    3174:	cmp	r3, #0
    3176:	bne.n	3084 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    3178:	ldr	r3, [pc, #248]	; (3274 <usb_midi_read+0x420>)
    317a:	ldr	r3, [r3, #0]
    317c:	cmp	r3, #0
    317e:	beq.n	30ce <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    3180:	movs	r0, #250	; 0xfa
    3182:	blx	r3
    3184:	ubfx	r6, r4, #16, #8
    3188:	b.n	308a <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    318a:	ldr	r3, [pc, #236]	; (3278 <usb_midi_read+0x424>)
    318c:	ldr	r3, [r3, #0]
    318e:	cmp	r3, #0
    3190:	bne.w	3084 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    3194:	ldr	r3, [pc, #220]	; (3274 <usb_midi_read+0x420>)
    3196:	ldr	r3, [r3, #0]
    3198:	cmp	r3, #0
    319a:	beq.n	30ce <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    319c:	movs	r0, #251	; 0xfb
    319e:	blx	r3
    31a0:	ubfx	r6, r4, #16, #8
    31a4:	b.n	308a <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    31a6:	ldr	r3, [pc, #212]	; (327c <usb_midi_read+0x428>)
    31a8:	ldr	r3, [r3, #0]
    31aa:	cmp	r3, #0
    31ac:	bne.w	3084 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    31b0:	ldr	r3, [pc, #192]	; (3274 <usb_midi_read+0x420>)
    31b2:	ldr	r3, [r3, #0]
    31b4:	cmp	r3, #0
    31b6:	beq.n	30ce <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    31b8:	movs	r0, #248	; 0xf8
    31ba:	blx	r3
    31bc:	ubfx	r6, r4, #16, #8
    31c0:	b.n	308a <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    31c2:	cmp	r3, #14
    31c4:	bne.w	2ed4 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    31c8:	ldr	r2, [pc, #180]	; (3280 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    31ca:	ldr	r3, [pc, #184]	; (3284 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    31cc:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    31ce:	movs	r1, #224	; 0xe0
    31d0:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    31d2:	cmp	r2, #0
    31d4:	beq.n	3266 <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    31d6:	lsrs	r6, r4, #16
    31d8:	lsrs	r1, r4, #17
    31da:	and.w	r3, r6, #127	; 0x7f
    31de:	and.w	r1, r1, #16256	; 0x3f80
    31e2:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    31e4:	uxtb	r5, r5
    31e6:	sub.w	r1, r1, #8192	; 0x2000
    31ea:	mov	r0, r5
    31ec:	blx	r2
    31ee:	uxtb	r6, r6
    31f0:	lsrs	r4, r4, #24
    31f2:	b.n	3068 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    31f4:	bl	2d44 <sysex_byte>
		sysex_byte(n >> 16);
    31f8:	ubfx	r0, r4, #16, #8
    31fc:	bl	2d44 <sysex_byte>
		sysex_byte(n >> 24);
    3200:	lsrs	r0, r4, #24
    3202:	bl	2d44 <sysex_byte>
		return 0;
    3206:	movs	r0, #0
    3208:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    320c:	ldr	r3, [pc, #120]	; (3288 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    320e:	ldr	r2, [pc, #116]	; (3284 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    3210:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    3212:	movs	r1, #128	; 0x80
    3214:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    3216:	uxtb	r5, r5
    3218:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    321c:	cbz	r3, 3240 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    321e:	mov	r1, r6
    3220:	mov	r0, r5
    3222:	mov	r2, r7
    3224:	blx	r3
    3226:	mov	r4, r7
    3228:	b.n	3068 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    322a:	movs	r0, #1
    322c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    3230:	ldr	r3, [pc, #64]	; (3274 <usb_midi_read+0x420>)
    3232:	ldr	r3, [r3, #0]
    3234:	cmp	r3, #0
    3236:	beq.w	30ce <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    323a:	movs	r0, #255	; 0xff
    323c:	blx	r3
    323e:	b.n	30ce <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    3240:	mov	r4, r3
    3242:	b.n	3068 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    3244:	cmp	r6, #13
    3246:	bne.n	31c2 <usb_midi_read+0x36e>
    3248:	cmp	r3, #13
    324a:	bne.w	2ed4 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    324e:	ldr	r3, [pc, #60]	; (328c <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    3250:	ldr	r2, [pc, #48]	; (3284 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    3252:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    3254:	movs	r1, #208	; 0xd0
    3256:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    3258:	uxtb	r5, r5
    325a:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    325e:	cmp	r3, #0
    3260:	bne.w	3060 <usb_midi_read+0x20c>
    3264:	b.n	31f0 <usb_midi_read+0x39c>
    3266:	ubfx	r6, r4, #16, #8
    326a:	uxtb	r5, r5
    326c:	lsrs	r4, r4, #24
    326e:	b.n	3068 <usb_midi_read+0x214>
    3270:	.word	0x1fff1944
    3274:	.word	0x1fff1920
    3278:	.word	0x1fff1924
    327c:	.word	0x1fff1914
    3280:	.word	0x1fff1930
    3284:	.word	0x1fff1dcc
    3288:	.word	0x1fff1968
    328c:	.word	0x1fff1940

00003290 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    3290:	cpsid	i
	avail = usb_buffer_available;
    3292:	ldr	r0, [pc, #52]	; (32c8 <usb_malloc+0x38>)
    3294:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    3296:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    329a:	cmp	r3, #29
    329c:	bgt.n	32c0 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    329e:	mov.w	r1, #2147483648	; 0x80000000
    32a2:	lsrs	r1, r3
    32a4:	bic.w	r2, r2, r1
    32a8:	str	r2, [r0, #0]
	__enable_irq();
    32aa:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    32ac:	ldr	r0, [pc, #28]	; (32cc <usb_malloc+0x3c>)
    32ae:	add.w	r3, r3, r3, lsl #3
    32b2:	lsls	r3, r3, #3
    32b4:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    32b6:	movs	r1, #0
    32b8:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    32ba:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    32bc:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    32be:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    32c0:	cpsie	i
		return NULL;
    32c2:	movs	r0, #0
    32c4:	bx	lr
    32c6:	nop
    32c8:	.word	0x1fff0c6c
    32cc:	.word	0x1fff03d0

000032d0 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    32d0:	ldr	r3, [pc, #52]	; (3308 <usb_free+0x38>)
    32d2:	ldr	r2, [pc, #56]	; (330c <usb_free+0x3c>)
    32d4:	subs	r3, r0, r3
    32d6:	umull	r2, r3, r2, r3
    32da:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    32dc:	cmp	r3, #29
    32de:	bhi.n	32fa <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    32e0:	ldr	r2, [pc, #44]	; (3310 <usb_free+0x40>)
    32e2:	ldrb	r2, [r2, #0]
    32e4:	cbnz	r2, 32fc <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    32e6:	cpsid	i
	usb_buffer_available |= mask;
    32e8:	ldr	r0, [pc, #40]	; (3314 <usb_free+0x44>)
    32ea:	mov.w	r1, #2147483648	; 0x80000000
    32ee:	ldr	r2, [r0, #0]
    32f0:	lsr.w	r3, r1, r3
    32f4:	orrs	r2, r3
    32f6:	str	r2, [r0, #0]
	__enable_irq();
    32f8:	cpsie	i
    32fa:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    32fc:	ldr	r2, [pc, #24]	; (3318 <usb_free+0x48>)
    32fe:	ldrb	r2, [r2, #0]
    3300:	cmp	r2, #0
    3302:	beq.n	32e6 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    3304:	b.w	3384 <usb_rx_memory>
    3308:	.word	0x1fff03d0
    330c:	.word	0x38e38e39
    3310:	.word	0x1fff1a59
    3314:	.word	0x1fff0c6c
    3318:	.word	0x1fff1a64

0000331c <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    331c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    331e:	cmp	r3, #4
    3320:	bhi.n	334c <usb_rx+0x30>
	__disable_irq();
    3322:	cpsid	i
	ret = rx_first[endpoint];
    3324:	ldr	r1, [pc, #40]	; (3350 <usb_rx+0x34>)
    3326:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    332a:	cbz	r0, 3348 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    332c:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    332e:	ldr	r4, [pc, #36]	; (3354 <usb_rx+0x38>)
    3330:	ldrh	r5, [r0, #0]
    3332:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    3336:	ldr	r6, [r0, #4]
    3338:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    333c:	subs	r2, r2, r5
    333e:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    3342:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    3344:	pop	{r4, r5, r6}
    3346:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    3348:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    334a:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    334c:	movs	r0, #0
    334e:	bx	lr
    3350:	.word	0x1fff19d0
    3354:	.word	0x1fff1ef8

00003358 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    3358:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    335a:	cmp	r0, #4
    335c:	bhi.n	3376 <usb_tx_packet_count+0x1e>
	__disable_irq();
    335e:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    3360:	ldr	r3, [pc, #28]	; (3380 <usb_tx_packet_count+0x28>)
    3362:	ldr.w	r3, [r3, r0, lsl #2]
    3366:	cbz	r3, 337a <usb_tx_packet_count+0x22>
    3368:	movs	r0, #0
    336a:	ldr	r3, [r3, #4]
    336c:	adds	r0, #1
    336e:	cmp	r3, #0
    3370:	bne.n	336a <usb_tx_packet_count+0x12>
	__enable_irq();
    3372:	cpsie	i
	return count;
    3374:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    3376:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    3378:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    337a:	mov	r0, r3
    337c:	b.n	3372 <usb_tx_packet_count+0x1a>
    337e:	nop
    3380:	.word	0x1fff1a28

00003384 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    3384:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    3386:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3388:	ldr	r2, [pc, #204]	; (3458 <usb_rx_memory+0xd4>)
    338a:	ldrb	r3, [r2, #0]
    338c:	lsls	r3, r3, #28
    338e:	bpl.n	339e <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3390:	ldr	r3, [pc, #200]	; (345c <usb_rx_memory+0xd8>)
    3392:	ldr	r1, [r3, #32]
    3394:	cmp	r1, #0
    3396:	beq.n	3420 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3398:	ldr	r1, [r3, #40]	; 0x28
    339a:	cmp	r1, #0
    339c:	beq.n	343c <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    339e:	ldrb	r3, [r2, #1]
    33a0:	lsls	r5, r3, #28
    33a2:	bpl.n	33b2 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    33a4:	ldr	r3, [pc, #180]	; (345c <usb_rx_memory+0xd8>)
    33a6:	ldr	r1, [r3, #64]	; 0x40
    33a8:	cmp	r1, #0
    33aa:	beq.n	3448 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    33ac:	ldr	r1, [r3, #72]	; 0x48
    33ae:	cmp	r1, #0
    33b0:	beq.n	3440 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    33b2:	ldrb	r3, [r2, #2]
    33b4:	lsls	r4, r3, #28
    33b6:	bpl.n	33c6 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    33b8:	ldr	r3, [pc, #160]	; (345c <usb_rx_memory+0xd8>)
    33ba:	ldr	r1, [r3, #96]	; 0x60
    33bc:	cmp	r1, #0
    33be:	beq.n	344c <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    33c0:	ldr	r1, [r3, #104]	; 0x68
    33c2:	cmp	r1, #0
    33c4:	beq.n	3444 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    33c6:	ldrb	r3, [r2, #3]
    33c8:	lsls	r1, r3, #28
    33ca:	bpl.n	33dc <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    33cc:	ldr	r3, [pc, #140]	; (345c <usb_rx_memory+0xd8>)
    33ce:	ldr.w	r1, [r3, #128]	; 0x80
    33d2:	cmp	r1, #0
    33d4:	beq.n	3454 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    33d6:	ldr.w	r1, [r3, #136]	; 0x88
    33da:	cbz	r1, 3402 <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    33dc:	ldrb	r3, [r2, #4]
    33de:	lsls	r3, r3, #28
    33e0:	bpl.n	33f4 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    33e2:	ldr	r3, [pc, #120]	; (345c <usb_rx_memory+0xd8>)
    33e4:	ldr.w	r2, [r3, #160]	; 0xa0
    33e8:	cmp	r2, #0
    33ea:	beq.n	3450 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    33ec:	ldr.w	r2, [r3, #168]	; 0xa8
    33f0:	movs	r4, #21
    33f2:	cbz	r2, 3404 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    33f4:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    33f6:	ldr	r3, [pc, #104]	; (3460 <usb_rx_memory+0xdc>)
    33f8:	movs	r2, #0
    33fa:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    33fc:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    33fe:	b.w	32d0 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3402:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3404:	ldr	r1, [pc, #88]	; (3460 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3406:	ldr	r5, [pc, #92]	; (3464 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    3408:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    340a:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    340e:	add.w	r3, r3, r4, lsl #3
    3412:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3414:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    3416:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3418:	strb	r2, [r1, #0]
				__enable_irq();
    341a:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    341c:	pop	{r4, r5}
    341e:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    3420:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3422:	ldr	r4, [pc, #60]	; (3460 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3424:	ldr	r5, [pc, #64]	; (3468 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    3426:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3428:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    342c:	add.w	r3, r3, r2, lsl #3
    3430:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3432:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    3434:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3436:	strb	r2, [r4, #0]
				__enable_irq();
    3438:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    343a:	b.n	341c <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    343c:	movs	r4, #5
    343e:	b.n	3404 <usb_rx_memory+0x80>
    3440:	movs	r4, #9
    3442:	b.n	3404 <usb_rx_memory+0x80>
    3444:	movs	r4, #13
    3446:	b.n	3404 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    3448:	movs	r2, #8
    344a:	b.n	3422 <usb_rx_memory+0x9e>
    344c:	movs	r2, #12
    344e:	b.n	3422 <usb_rx_memory+0x9e>
    3450:	movs	r2, #20
    3452:	b.n	3422 <usb_rx_memory+0x9e>
    3454:	movs	r2, #16
    3456:	b.n	3422 <usb_rx_memory+0x9e>
    3458:	.word	0x0000585c
    345c:	.word	0x1fff0000
    3460:	.word	0x1fff1a59
    3464:	.word	0x004000c8
    3468:	.word	0x00400088

0000346c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    346c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    346e:	cmp	r3, #4
    3470:	bhi.n	34ae <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    3472:	ldr	r2, [pc, #108]	; (34e0 <usb_tx+0x74>)
    3474:	lsls	r0, r0, #5
    3476:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    347a:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    347c:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    347e:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    3480:	ldr	r4, [pc, #96]	; (34e4 <usb_tx+0x78>)
    3482:	ldrb	r2, [r4, r3]
    3484:	cmp	r2, #3
    3486:	bhi.n	34c0 <usb_tx+0x54>
    3488:	tbb	[pc, r2]
    348c:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    3490:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3492:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    3494:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3496:	tst.w	r0, #8
    349a:	ite	ne
    349c:	movne	r3, #200	; 0xc8
    349e:	moveq	r3, #136	; 0x88
    34a0:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    34a4:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    34a6:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    34a8:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    34aa:	cpsie	i
}
    34ac:	pop	{r4, r5}
    34ae:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    34b0:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    34b2:	movs	r2, #2
		break;
    34b4:	b.n	3492 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    34b6:	movs	r2, #5
    34b8:	b.n	3492 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    34ba:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    34bc:	movs	r2, #4
		break;
    34be:	b.n	3492 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    34c0:	ldr	r2, [pc, #36]	; (34e8 <usb_tx+0x7c>)
    34c2:	ldr.w	r0, [r2, r3, lsl #2]
    34c6:	cbz	r0, 34d8 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    34c8:	ldr	r2, [pc, #32]	; (34ec <usb_tx+0x80>)
    34ca:	ldr.w	r0, [r2, r3, lsl #2]
    34ce:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    34d0:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    34d4:	cpsie	i
		return;
    34d6:	b.n	34ac <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    34d8:	str.w	r1, [r2, r3, lsl #2]
    34dc:	ldr	r2, [pc, #12]	; (34ec <usb_tx+0x80>)
    34de:	b.n	34d0 <usb_tx+0x64>
    34e0:	.word	0x1fff0000
    34e4:	.word	0x1fff1a68
    34e8:	.word	0x1fff1a28
    34ec:	.word	0x1fff1a3c

000034f0 <usb_isr>:
}



void usb_isr(void)
{
    34f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    34f4:	ldr.w	fp, [pc, #776]	; 3800 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    34f8:	ldr.w	sl, [pc, #776]	; 3804 <usb_isr+0x314>
}



void usb_isr(void)
{
    34fc:	sub	sp, #28
    34fe:	b.n	358a <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    3500:	ldr	r7, [pc, #680]	; (37ac <usb_isr+0x2bc>)
    3502:	mov.w	r8, r3, lsr #2
    3506:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    350a:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    350c:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    3510:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3514:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3516:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    351a:	and.w	r4, r3, #255	; 0xff
    351e:	cmp	r3, #0
    3520:	bne.w	3724 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    3524:	ldr.w	r3, [r7, r8, lsl #3]
    3528:	lsrs	r3, r3, #16
    352a:	uxth	r1, r3
    352c:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    3530:	cmp	r3, #0
    3532:	beq.w	3712 <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    3536:	ldr	r3, [pc, #632]	; (37b0 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    3538:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    353c:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    3540:	ldr.w	r2, [r3, r6, lsl #2]
    3544:	cmp	r2, #0
    3546:	beq.w	39b4 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    354a:	ldr	r5, [pc, #616]	; (37b4 <usb_isr+0x2c4>)
    354c:	ldr.w	r3, [r5, r6, lsl #2]
    3550:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    3552:	ldr	r4, [pc, #612]	; (37b8 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    3554:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    3558:	ldrh.w	r3, [r4, r6, lsl #1]
    355c:	add	r1, r3
    355e:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    3562:	bl	3290 <usb_malloc>
					if (packet) {
    3566:	cmp	r0, #0
    3568:	beq.w	39a6 <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    356c:	ldr	r2, [pc, #588]	; (37bc <usb_isr+0x2cc>)
    356e:	ldr	r3, [pc, #592]	; (37c0 <usb_isr+0x2d0>)
    3570:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    3574:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    3578:	it	ne
    357a:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    357c:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    3580:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    3584:	movs	r3, #8
    3586:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    358a:	ldrb.w	r4, [fp]
    358e:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    3590:	lsls	r0, r4, #29
    3592:	bpl.n	35ce <usb_isr+0xde>
		if (usb_configuration) {
    3594:	ldr	r3, [pc, #556]	; (37c4 <usb_isr+0x2d4>)
    3596:	ldrb	r3, [r3, #0]
    3598:	cbz	r3, 35c8 <usb_isr+0xd8>
			t = usb_reboot_timer;
    359a:	ldr	r1, [pc, #556]	; (37c8 <usb_isr+0x2d8>)
    359c:	ldrb	r2, [r1, #0]
			if (t) {
    359e:	and.w	r3, r2, #255	; 0xff
    35a2:	cbz	r2, 35ae <usb_isr+0xbe>
				usb_reboot_timer = --t;
    35a4:	subs	r3, #1
    35a6:	uxtb	r3, r3
    35a8:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    35aa:	cbnz	r3, 35ae <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    35ac:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    35ae:	ldr	r1, [pc, #540]	; (37cc <usb_isr+0x2dc>)
    35b0:	ldrb	r2, [r1, #0]
			if (t) {
    35b2:	and.w	r3, r2, #255	; 0xff
    35b6:	cbz	r2, 35c4 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    35b8:	subs	r3, #1
    35ba:	uxtb	r3, r3
    35bc:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    35be:	cmp	r3, #0
    35c0:	beq.w	3952 <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    35c4:	bl	2e28 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    35c8:	movs	r3, #4
    35ca:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    35ce:	and.w	r3, r4, #8
    35d2:	and.w	r2, r3, #255	; 0xff
    35d6:	cmp	r3, #0
    35d8:	beq.w	376c <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    35dc:	ldrb.w	r3, [sl]
    35e0:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    35e2:	lsrs	r6, r3, #4
    35e4:	bne.n	3500 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    35e6:	lsrs	r4, r3, #2
    35e8:	ldr.w	r9, [pc, #448]	; 37ac <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    35ec:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    35f0:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    35f4:	ubfx	r2, r2, #2, #4
    35f8:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    35fa:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    35fc:	cmp	r2, #12
    35fe:	bhi.w	370a <usb_isr+0x21a>
    3602:	tbb	[pc, r2]
    3606:	.short	0x7878
    3608:	.word	0x82828282
    360c:	.word	0x82438282
    3610:	.short	0x8282
    3612:	.byte	0x07
    3613:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    3614:	ldr	r0, [r1, #0]
    3616:	ldr	r5, [pc, #440]	; (37d0 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3618:	ldr	r3, [pc, #416]	; (37bc <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    361a:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    361c:	ldr	r7, [pc, #436]	; (37d4 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    361e:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3622:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3624:	ldr	r6, [pc, #432]	; (37d8 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    3626:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3628:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    362c:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    362e:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3630:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3632:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3636:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    3638:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    363c:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3640:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3642:	bhi.w	3808 <usb_isr+0x318>
    3646:	cmp.w	r1, #1664	; 0x680
    364a:	bcs.w	3c74 <usb_isr+0x784>
    364e:	cmp.w	r1, #258	; 0x102
    3652:	beq.w	3a22 <usb_isr+0x532>
    3656:	bhi.w	39ec <usb_isr+0x4fc>
    365a:	cmp	r1, #128	; 0x80
    365c:	beq.w	3ca8 <usb_isr+0x7b8>
    3660:	cmp	r1, #130	; 0x82
    3662:	bne.w	3a2e <usb_isr+0x53e>
    3666:	ldrh	r1, [r5, #4]
    3668:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    366c:	cmp	r1, #5
    366e:	bhi.w	3a2e <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3672:	ldr	r3, [pc, #360]	; (37dc <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3674:	ldr	r4, [pc, #360]	; (37e0 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3676:	lsls	r1, r1, #2
    3678:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    367a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    367c:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    367e:	ldrb	r2, [r3, #0]
    3680:	lsls	r3, r2, #30
    3682:	bpl.w	3db8 <usb_isr+0x8c8>
    3686:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    3688:	movs	r0, #2
    368a:	b.n	3ab6 <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    368c:	ldr	r7, [pc, #324]	; (37d4 <usb_isr+0x2e4>)
    368e:	ldr	r2, [r7, #0]
		if (data) {
    3690:	cbz	r2, 36e0 <usb_isr+0x1f0>
			size = ep0_tx_len;
    3692:	ldr	r3, [pc, #336]	; (37e4 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3694:	ldr	r6, [pc, #320]	; (37d8 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3696:	ldr	r1, [pc, #336]	; (37e8 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    3698:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    369a:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    369c:	ldrb	r5, [r1, #0]
    369e:	cmp	r0, #64	; 0x40
    36a0:	mov	lr, r0
    36a2:	orr.w	r8, r5, #2
    36a6:	it	cs
    36a8:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36ac:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    36ae:	eor.w	r4, r4, #1
    36b2:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    36b4:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36b8:	ite	eq
    36ba:	moveq	r4, #136	; 0x88
    36bc:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    36be:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    36c2:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    36c4:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36c8:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    36cc:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    36ce:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36d0:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    36d4:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    36d6:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    36d8:	cmp	r0, #0
    36da:	beq.w	384a <usb_isr+0x35a>
    36de:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    36e0:	ldr	r3, [pc, #236]	; (37d0 <usb_isr+0x2e0>)
    36e2:	ldrh	r2, [r3, #0]
    36e4:	cmp.w	r2, #1280	; 0x500
    36e8:	bne.n	370a <usb_isr+0x21a>
			setup.bRequest = 0;
    36ea:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    36ec:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    36ee:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    36f0:	ldr	r3, [pc, #248]	; (37ec <usb_isr+0x2fc>)
    36f2:	strb	r2, [r3, #0]
    36f4:	b.n	370a <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    36f6:	ldr	r2, [pc, #216]	; (37d0 <usb_isr+0x2e0>)
    36f8:	ldrh	r0, [r2, #0]
    36fa:	movw	r2, #8225	; 0x2021
    36fe:	cmp	r0, r2
    3700:	beq.w	3854 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3704:	ldr	r2, [pc, #180]	; (37bc <usb_isr+0x2cc>)
    3706:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    370a:	ldr	r2, [pc, #228]	; (37f0 <usb_isr+0x300>)
    370c:	movs	r3, #1
    370e:	strb	r3, [r2, #0]
    3710:	b.n	3584 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3712:	ldr	r2, [pc, #168]	; (37bc <usb_isr+0x2cc>)
    3714:	ldr	r3, [pc, #168]	; (37c0 <usb_isr+0x2d0>)
    3716:	tst.w	r9, #8
    371a:	it	ne
    371c:	movne	r3, r2
    371e:	str.w	r3, [r7, r8, lsl #3]
    3722:	b.n	3584 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    3724:	bl	32d0 <usb_free>
				packet = tx_first[endpoint];
    3728:	ldr	r2, [pc, #200]	; (37f4 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    372a:	ldr	r1, [pc, #204]	; (37f8 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    372c:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    3730:	cmp	r3, #0
    3732:	beq.w	39bc <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    3736:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    3738:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    373a:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    373e:	add.w	r2, r3, #8
    3742:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    3746:	cmp	r4, #3
    3748:	bhi.n	3756 <usb_isr+0x266>
    374a:	tbb	[pc, r4]
    374e:	.short	0x022c
    3750:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    3752:	movs	r2, #2
    3754:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    3756:	ldrh	r2, [r3, #0]
    3758:	tst.w	r9, #8
    375c:	ite	eq
    375e:	moveq	r3, #136	; 0x88
    3760:	movne	r3, #200	; 0xc8
    3762:	orr.w	r3, r3, r2, lsl #16
    3766:	str.w	r3, [r7, r8, lsl #3]
    376a:	b.n	3584 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    376c:	lsls	r0, r4, #31
    376e:	bmi.w	3958 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    3772:	lsls	r1, r4, #24
    3774:	bmi.w	39d8 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3778:	lsls	r2, r4, #30
    377a:	bpl.n	378a <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    377c:	ldr	r2, [pc, #124]	; (37fc <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    377e:	ldr	r1, [pc, #128]	; (3800 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3780:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3782:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3784:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    3786:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3788:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    378a:	lsls	r3, r4, #27
    378c:	bpl.n	3794 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    378e:	ldr	r3, [pc, #112]	; (3800 <usb_isr+0x310>)
    3790:	movs	r2, #16
    3792:	strb	r2, [r3, #0]
	}

}
    3794:	add	sp, #28
    3796:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    379a:	movs	r2, #4
    379c:	strb	r2, [r1, r6]
						break;
    379e:	b.n	3756 <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    37a0:	movs	r2, #5
    37a2:	strb	r2, [r1, r6]
						break;
    37a4:	b.n	3756 <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    37a6:	movs	r2, #3
    37a8:	strb	r2, [r1, r6]
						break;
    37aa:	b.n	3756 <usb_isr+0x266>
    37ac:	.word	0x1fff0000
    37b0:	.word	0x1fff19d0
    37b4:	.word	0x1fff1978
    37b8:	.word	0x1fff1ef8
    37bc:	.word	0x004000c8
    37c0:	.word	0x00400088
    37c4:	.word	0x1fff1a64
    37c8:	.word	0x1fff19e5
    37cc:	.word	0x1fff18f8
    37d0:	.word	0x1fff1a50
    37d4:	.word	0x1fff1974
    37d8:	.word	0x1fff19e4
    37dc:	.word	0x400720c0
    37e0:	.word	0x1fff1a5c
    37e4:	.word	0x1fff198c
    37e8:	.word	0x1fff1a58
    37ec:	.word	0x40072098
    37f0:	.word	0x40072094
    37f4:	.word	0x1fff1a28
    37f8:	.word	0x1fff1a68
    37fc:	.word	0x40072088
    3800:	.word	0x40072080
    3804:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3808:	movw	r4, #8225	; 0x2021
    380c:	cmp	r1, r4
    380e:	beq.w	394a <usb_isr+0x45a>
    3812:	bhi.n	38a8 <usb_isr+0x3b8>
    3814:	cmp.w	r1, #2176	; 0x880
    3818:	beq.w	3aae <usb_isr+0x5be>
    381c:	cmp.w	r1, #2304	; 0x900
    3820:	bne.w	3a2e <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    3824:	ldr	r2, [pc, #712]	; (3af0 <usb_isr+0x600>)
    3826:	ldr	r4, [pc, #716]	; (3af4 <usb_isr+0x604>)
    3828:	ldrb	r1, [r5, #2]
    382a:	strb	r1, [r2, #0]
    382c:	add.w	r5, r4, #160	; 0xa0
    3830:	b.n	383a <usb_isr+0x34a>
    3832:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3834:	cmp	r5, r4
    3836:	beq.w	3b4c <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    383a:	ldr	r3, [r4, #32]
    383c:	lsls	r1, r3, #24
    383e:	bpl.n	3832 <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    3840:	ldr	r0, [r4, #36]	; 0x24
    3842:	subs	r0, #8
    3844:	bl	32d0 <usb_free>
    3848:	b.n	3832 <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    384a:	cmp.w	lr, #64	; 0x40
    384e:	it	ne
    3850:	movne	r2, #0
    3852:	b.n	36de <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3854:	ldr	r2, [pc, #672]	; (3af8 <usb_isr+0x608>)
    3856:	ldrb	r5, [r1, #0]
    3858:	ldrb	r0, [r1, #1]
    385a:	strb	r5, [r2, #0]
    385c:	strb	r0, [r2, #1]
    385e:	ldrb	r5, [r1, #2]
    3860:	ldrb	r0, [r1, #3]
    3862:	strb	r5, [r2, #2]
    3864:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3866:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3868:	ldrb	r5, [r1, #4]
    386a:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    386c:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    386e:	ldrb	r5, [r1, #5]
    3870:	ldrb	r1, [r1, #6]
    3872:	strb	r5, [r2, #5]
    3874:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3876:	beq.w	3aa6 <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    387a:	ldr	r1, [pc, #640]	; (3afc <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    387c:	ldr	r6, [pc, #640]	; (3b00 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    387e:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3880:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3882:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3886:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3888:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    388c:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    388e:	ite	eq
    3890:	moveq	r1, #136	; 0x88
    3892:	movne	r1, #200	; 0xc8
    3894:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3898:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    389c:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    38a0:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    38a2:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    38a4:	str	r1, [r2, #4]
    38a6:	b.n	3704 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    38a8:	movw	r4, #8737	; 0x2221
    38ac:	cmp	r1, r4
    38ae:	bne.w	3cc2 <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    38b2:	ldr.w	ip, [pc, #656]	; 3b44 <usb_isr+0x654>
    38b6:	ldr	r3, [pc, #588]	; (3b04 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    38b8:	ldr	r1, [pc, #588]	; (3b08 <usb_isr+0x618>)
    38ba:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    38bc:	ldr.w	r5, [ip]
    38c0:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    38c2:	str	r0, [sp, #4]
    38c4:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    38c6:	movs	r0, #0
    38c8:	str	r0, [sp, #8]
    38ca:	mov	r8, r0
    38cc:	mov	ip, r0
    38ce:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    38d0:	ldr	r1, [pc, #552]	; (3afc <usb_isr+0x60c>)
    38d2:	ldrb	r5, [r1, #0]
    38d4:	orr.w	lr, r5, #2
    38d8:	add.w	r3, r9, lr, lsl #3
    38dc:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    38de:	ldr	r3, [sp, #4]
    38e0:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    38e2:	ldr	r3, [sp, #12]
    38e4:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    38e6:	ite	eq
    38e8:	moveq	r4, #136	; 0x88
    38ea:	movne	r4, #200	; 0xc8
    38ec:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    38f0:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    38f4:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    38f8:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    38fa:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    38fc:	ldr.w	lr, [pc, #500]	; 3af4 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    3900:	ldr	r3, [pc, #508]	; (3b00 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    3902:	ldr.w	r8, [pc, #504]	; 3afc <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3906:	cmp	r0, #0
    3908:	bne.w	3a3c <usb_isr+0x54c>
    390c:	cmp.w	ip, #64	; 0x40
    3910:	bne.n	394a <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3912:	orr.w	ip, r4, #2
    3916:	add.w	r3, r9, ip, lsl #3
    391a:	ldr	r4, [sp, #8]
    391c:	ldr.w	lr, [pc, #468]	; 3af4 <usb_isr+0x604>
    3920:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3922:	cmp	r2, #0
    3924:	bne.w	3a68 <usb_isr+0x578>
    3928:	lsls	r2, r0, #16
    392a:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    392e:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3932:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3936:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3938:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    393a:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    393c:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    393e:	cmp	r0, #64	; 0x40
    3940:	bne.n	394a <usb_isr+0x45a>
    3942:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3944:	ldr	r2, [pc, #452]	; (3b0c <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    3946:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    3948:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    394a:	ldr	r2, [pc, #452]	; (3b10 <usb_isr+0x620>)
    394c:	movs	r3, #1
    394e:	strb	r3, [r2, #0]
    3950:	b.n	370a <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    3952:	bl	26b0 <usb_serial_flush_callback>
    3956:	b.n	35c4 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3958:	ldr	r3, [pc, #408]	; (3af4 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    395a:	ldr	r0, [pc, #436]	; (3b10 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    395c:	ldr	r1, [pc, #412]	; (3afc <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    395e:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3960:	mov.w	lr, #2
    3964:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3968:	ldr	r7, [pc, #424]	; (3b14 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    396a:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    396c:	ldr	r1, [pc, #424]	; (3b18 <usb_isr+0x628>)
    396e:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3970:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3972:	ldr	r6, [pc, #424]	; (3b1c <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    3974:	ldr	r5, [pc, #424]	; (3b20 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3976:	ldr	r4, [pc, #428]	; (3b24 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3978:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    397a:	movs	r1, #13
    397c:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    397e:	movs	r1, #255	; 0xff
    3980:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3982:	ldr.w	lr, [pc, #452]	; 3b48 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    3986:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3988:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    398a:	ldr	r5, [pc, #412]	; (3b28 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    398c:	ldr	r2, [pc, #412]	; (3b2c <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    398e:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3992:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3994:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3996:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    399a:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    399c:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    399e:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    39a0:	add	sp, #28
    39a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    39a6:	ldr	r2, [pc, #392]	; (3b30 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    39a8:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    39ac:	ldrb	r3, [r2, #0]
    39ae:	adds	r3, #1
    39b0:	strb	r3, [r2, #0]
    39b2:	b.n	3584 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    39b4:	str.w	r0, [r3, r6, lsl #2]
    39b8:	ldr	r5, [pc, #376]	; (3b34 <usb_isr+0x644>)
    39ba:	b.n	3552 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    39bc:	ldrb	r3, [r1, r6]
    39be:	cmp	r3, #3
    39c0:	bhi.n	3a98 <usb_isr+0x5a8>
    39c2:	add	r2, pc, #4	; (adr r2, 39c8 <usb_isr+0x4d8>)
    39c4:	ldr.w	pc, [r2, r3, lsl #2]
    39c8:	.word	0x00003585
    39cc:	.word	0x00003585
    39d0:	.word	0x00003a1d
    39d4:	.word	0x00003a17
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    39d8:	ldr	r1, [pc, #312]	; (3b14 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    39da:	ldr	r3, [pc, #324]	; (3b20 <usb_isr+0x630>)
    39dc:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    39de:	movs	r0, #13
    39e0:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    39e2:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    39e4:	lsls	r2, r4, #30
    39e6:	bpl.w	378a <usb_isr+0x29a>
    39ea:	b.n	377c <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    39ec:	movw	r2, #770	; 0x302
    39f0:	cmp	r1, r2
    39f2:	bne.w	3cb2 <usb_isr+0x7c2>
    39f6:	ldrh	r1, [r5, #4]
    39f8:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    39fc:	cmp	r1, #5
    39fe:	bhi.n	3a2e <usb_isr+0x53e>
    3a00:	ldrh	r2, [r5, #2]
    3a02:	cbnz	r2, 3a2e <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    3a04:	ldr	r4, [pc, #268]	; (3b14 <usb_isr+0x624>)
    3a06:	str	r0, [sp, #4]
    3a08:	lsls	r1, r1, #2
    3a0a:	add	r4, r1
    3a0c:	ldrb	r1, [r4, #0]
    3a0e:	orr.w	r1, r1, #2
    3a12:	strb	r1, [r4, #0]
    3a14:	b.n	38c6 <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3a16:	movs	r3, #1
    3a18:	strb	r3, [r1, r6]
						break;
    3a1a:	b.n	3584 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3a1c:	movs	r3, #0
    3a1e:	strb	r3, [r1, r6]
						break;
    3a20:	b.n	3584 <usb_isr+0x94>
    3a22:	ldrh	r1, [r5, #4]
    3a24:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3a28:	cmp	r1, #5
    3a2a:	bls.w	3ccc <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3a2e:	ldr	r2, [pc, #228]	; (3b14 <usb_isr+0x624>)
    3a30:	movs	r3, #15
    3a32:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3a34:	ldr	r2, [pc, #216]	; (3b10 <usb_isr+0x620>)
    3a36:	movs	r3, #1
    3a38:	strb	r3, [r2, #0]
    3a3a:	b.n	370a <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    3a3c:	cmp	r0, #64	; 0x40
    3a3e:	bls.w	3912 <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a42:	orr.w	r4, r4, #2
    3a46:	add.w	r1, lr, r4, lsl #3
    3a4a:	ldr	r6, [sp, #8]
    3a4c:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a4e:	cbz	r2, 3a80 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    3a50:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a54:	ldr	r2, [pc, #224]	; (3b38 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    3a56:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3a58:	mov	r3, r6
    3a5a:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3a5c:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3a60:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a62:	str.w	r2, [lr, r4, lsl #3]
    3a66:	b.n	3944 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    3a68:	ldrb.w	r3, [sp, #4]
    3a6c:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a6e:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3a70:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3a72:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a74:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3a78:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a7a:	str.w	r2, [lr, ip, lsl #3]
    3a7e:	b.n	393e <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    3a80:	ldrb.w	r1, [sp, #4]
    3a84:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3a86:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a88:	ldr	r2, [pc, #140]	; (3b18 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3a8a:	strb.w	r5, [r8]
    3a8e:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3a90:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a92:	str.w	r2, [lr, r4, lsl #3]
    3a96:	b.n	3944 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3a98:	tst.w	r9, #8
    3a9c:	ite	eq
    3a9e:	moveq	r3, #2
    3aa0:	movne	r3, #3
    3aa2:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3aa4:	b.n	3584 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3aa6:	ldr	r2, [pc, #148]	; (3b3c <usb_isr+0x64c>)
    3aa8:	movs	r1, #15
    3aaa:	strb	r1, [r2, #0]
    3aac:	b.n	387a <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3aae:	ldr	r2, [pc, #64]	; (3af0 <usb_isr+0x600>)
    3ab0:	ldr	r4, [pc, #140]	; (3b40 <usb_isr+0x650>)
    3ab2:	ldrb	r2, [r2, #0]
    3ab4:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3ab6:	ldrh	r2, [r5, #6]
    3ab8:	cmp	r2, r0
    3aba:	bcs.w	3e80 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3abe:	ldr	r1, [pc, #60]	; (3afc <usb_isr+0x60c>)
    3ac0:	ldrb	r5, [r1, #0]
    3ac2:	cmp	r2, #64	; 0x40
    3ac4:	mov	ip, r2
    3ac6:	orr.w	lr, r5, #2
    3aca:	it	cs
    3acc:	movcs.w	ip, #64	; 0x40
    3ad0:	add.w	r3, r4, ip
    3ad4:	add.w	r0, r9, lr, lsl #3
    3ad8:	str	r3, [sp, #8]
    3ada:	movs	r3, #1
    3adc:	str	r4, [r0, #4]
    3ade:	mov.w	r8, ip, lsl #16
    3ae2:	rsb	r0, ip, r2
    3ae6:	str	r3, [sp, #4]
    3ae8:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3aea:	movs	r4, #200	; 0xc8
    3aec:	b.n	38ec <usb_isr+0x3fc>
    3aee:	nop
    3af0:	.word	0x1fff1a64
    3af4:	.word	0x1fff0000
    3af8:	.word	0x1fff1dc0
    3afc:	.word	0x1fff1a58
    3b00:	.word	0x1fff19e4
    3b04:	.word	0x1fff1dc8
    3b08:	.word	0x1fff1908
    3b0c:	.word	0x1fff198c
    3b10:	.word	0x40072094
    3b14:	.word	0x400720c0
    3b18:	.word	0x00400088
    3b1c:	.word	0x40072088
    3b20:	.word	0x40072080
    3b24:	.word	0x40072098
    3b28:	.word	0x1fff1990
    3b2c:	.word	0x1fff19e8
    3b30:	.word	0x1fff1a59
    3b34:	.word	0x1fff1978
    3b38:	.word	0x004000c8
    3b3c:	.word	0x1fff19e5
    3b40:	.word	0x1fff1a5c
    3b44:	.word	0x1fff1910
    3b48:	.word	0x4007208c
    3b4c:	ldr	r4, [pc, #704]	; (3e10 <usb_isr+0x920>)
    3b4e:	ldr	r2, [pc, #708]	; (3e14 <usb_isr+0x924>)
    3b50:	ldr	r1, [pc, #708]	; (3e18 <usb_isr+0x928>)
    3b52:	ldr	r0, [pc, #712]	; (3e1c <usb_isr+0x92c>)
    3b54:	ldr	r5, [pc, #712]	; (3e20 <usb_isr+0x930>)
    3b56:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3b58:	movs	r3, #0
    3b5a:	ldr	r4, [pc, #712]	; (3e24 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3b5c:	str	r4, [sp, #8]
    3b5e:	str	r6, [sp, #20]
    3b60:	str	r5, [sp, #12]
    3b62:	mov	r8, r0
    3b64:	mov	r4, r3
    3b66:	str	r7, [sp, #16]
    3b68:	mov	r6, r2
    3b6a:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3b6c:	ldr	r0, [r6, #0]
			while (p) {
    3b6e:	cbz	r0, 3b7c <usb_isr+0x68c>
				n = p->next;
    3b70:	ldr	r7, [r0, #4]
				usb_free(p);
    3b72:	bl	32d0 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    3b76:	mov	r0, r7
    3b78:	cmp	r7, #0
    3b7a:	bne.n	3b70 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3b7c:	movs	r3, #0
    3b7e:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3b80:	ldr	r3, [sp, #12]
			p = tx_first[i];
    3b82:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3b84:	mov	r2, r3
    3b86:	movs	r3, #0
    3b88:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    3b8c:	cbz	r0, 3b9a <usb_isr+0x6aa>
				n = p->next;
    3b8e:	ldr	r7, [r0, #4]
				usb_free(p);
    3b90:	bl	32d0 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3b94:	mov	r0, r7
    3b96:	cmp	r7, #0
    3b98:	bne.n	3b8e <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3b9a:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3b9c:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3b9e:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3ba0:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    3ba2:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    3ba6:	ldr	r2, [sp, #8]
    3ba8:	mov.w	r1, #0
			switch (tx_state[i]) {
    3bac:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    3bae:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    3bb2:	cmp	r3, #3
    3bb4:	bhi.n	3bc6 <usb_isr+0x6d6>
    3bb6:	tbb	[pc, r3]
    3bba:	.short	0x0258
    3bbc:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3bbe:	ldr	r3, [sp, #4]
    3bc0:	mov.w	r2, #1
    3bc4:	strb	r2, [r3, #0]
    3bc6:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3bc8:	adds	r4, #1
    3bca:	adds	r3, #1
    3bcc:	cmp	r4, #5
    3bce:	add.w	r6, r6, #4
    3bd2:	add.w	r5, r5, #4
    3bd6:	str	r3, [sp, #4]
    3bd8:	bne.n	3b6c <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3bda:	ldr	r4, [pc, #588]	; (3e28 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3bdc:	ldr	r5, [pc, #588]	; (3e2c <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3bde:	ldrb	r2, [r4, #0]
			*reg = epconf;
    3be0:	ldr	r3, [pc, #588]	; (3e30 <usb_isr+0x940>)
    3be2:	ldr	r7, [sp, #16]
    3be4:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3be6:	movs	r1, #0
    3be8:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3bea:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3bec:	lsls	r2, r2, #28
    3bee:	bmi.n	3ce6 <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3bf0:	ldrb	r2, [r4, #1]
			*reg = epconf;
    3bf2:	ldr	r1, [pc, #576]	; (3e34 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3bf4:	ldr.w	r8, [pc, #588]	; 3e44 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3bf8:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3bfa:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3bfc:	mov.w	r1, #0
    3c00:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    3c04:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3c08:	bmi.w	3d92 <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3c0c:	ldrb	r2, [r4, #2]
			*reg = epconf;
    3c0e:	ldr	r1, [pc, #552]	; (3e38 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3c10:	ldr.w	r8, [pc, #560]	; 3e44 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3c14:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3c16:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3c18:	mov.w	r1, #0
    3c1c:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    3c20:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3c24:	bmi.w	3d6a <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3c28:	ldr	r1, [pc, #528]	; (3e3c <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3c2a:	ldrb	r2, [r4, #3]
			*reg = epconf;
    3c2c:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3c2e:	movs	r1, #0
    3c30:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3c34:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3c38:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3c3a:	ldr.w	r8, [pc, #520]	; 3e44 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3c3e:	bmi.n	3d3c <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3c40:	ldrb	r2, [r4, #4]
			*reg = epconf;
    3c42:	ldr	r1, [pc, #508]	; (3e40 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3c44:	ldr	r4, [pc, #508]	; (3e44 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3c46:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3c48:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3c4a:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3c4c:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3c50:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3c54:	bmi.n	3d12 <usb_isr+0x822>
    3c56:	ldrb	r3, [r6, #0]
    3c58:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3c5a:	movs	r1, #0
    3c5c:	eor.w	r2, r3, #1
    3c60:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3c64:	str.w	r1, [r9, #184]	; 0xb8
    3c68:	b.n	38c6 <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3c6a:	ldr	r3, [sp, #4]
    3c6c:	mov.w	r2, #0
    3c70:	strb	r2, [r3, #0]
    3c72:	b.n	3bc6 <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3c74:	ldr	r2, [pc, #464]	; (3e48 <usb_isr+0x958>)
    3c76:	ldr	r4, [r2, #4]
    3c78:	cmp	r4, #0
    3c7a:	beq.w	3a2e <usb_isr+0x53e>
    3c7e:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3c80:	ldrh.w	lr, [r5, #4]
    3c84:	b.n	3c90 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3c86:	adds	r2, #12
			if (list->addr == NULL) break;
    3c88:	ldr	r4, [r2, #4]
    3c8a:	cmp	r4, #0
    3c8c:	beq.w	3a2e <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3c90:	ldrh	r3, [r2, #0]
    3c92:	cmp	r3, r0
    3c94:	bne.n	3c86 <usb_isr+0x796>
    3c96:	ldrh	r3, [r2, #2]
    3c98:	cmp	r3, lr
    3c9a:	bne.n	3c86 <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3c9c:	lsrs	r0, r0, #8
    3c9e:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3ca0:	ite	eq
    3ca2:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    3ca4:	ldrhne	r0, [r2, #8]
    3ca6:	b.n	3ab6 <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3ca8:	ldr	r4, [pc, #416]	; (3e4c <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    3caa:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3cac:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3cae:	strb	r2, [r4, #1]
    3cb0:	b.n	3ab6 <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3cb2:	cmp.w	r1, #1280	; 0x500
    3cb6:	bne.w	3a2e <usb_isr+0x53e>
    3cba:	movs	r3, #1
    3cbc:	movs	r2, #0
    3cbe:	str	r3, [sp, #4]
    3cc0:	b.n	38c6 <usb_isr+0x3d6>
    3cc2:	movw	r2, #8993	; 0x2321
    3cc6:	cmp	r1, r2
    3cc8:	beq.n	3cba <usb_isr+0x7ca>
    3cca:	b.n	3a2e <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3ccc:	ldrh	r2, [r5, #2]
    3cce:	cmp	r2, #0
    3cd0:	bne.w	3a2e <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3cd4:	ldr	r4, [pc, #376]	; (3e50 <usb_isr+0x960>)
    3cd6:	str	r0, [sp, #4]
    3cd8:	lsls	r1, r1, #2
    3cda:	add	r4, r1
    3cdc:	ldrb	r1, [r4, #0]
    3cde:	bic.w	r1, r1, #2
    3ce2:	strb	r1, [r4, #0]
    3ce4:	b.n	38c6 <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3ce6:	bl	3290 <usb_malloc>
				if (p) {
    3cea:	cmp	r0, #0
    3cec:	beq.w	3e5c <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    3cf0:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3cf2:	ldr	r2, [pc, #352]	; (3e54 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3cf4:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3cf8:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3cfc:	bl	3290 <usb_malloc>
				if (p) {
    3d00:	cmp	r0, #0
    3d02:	beq.n	3e04 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    3d04:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3d06:	ldr	r2, [pc, #336]	; (3e58 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3d08:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3d0c:	str.w	r2, [r9, #40]	; 0x28
    3d10:	b.n	3bf0 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3d12:	bl	3290 <usb_malloc>
				if (p) {
    3d16:	cmp	r0, #0
    3d18:	beq.n	3dc8 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    3d1a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3d1c:	ldr	r2, [pc, #308]	; (3e54 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3d1e:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3d22:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3d26:	bl	3290 <usb_malloc>
				if (p) {
    3d2a:	cmp	r0, #0
    3d2c:	beq.n	3dbc <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    3d2e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3d30:	ldr	r2, [pc, #292]	; (3e58 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3d32:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3d36:	str.w	r2, [r9, #168]	; 0xa8
    3d3a:	b.n	3c56 <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3d3c:	bl	3290 <usb_malloc>
				if (p) {
    3d40:	cmp	r0, #0
    3d42:	beq.w	3e74 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    3d46:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3d48:	ldr	r2, [pc, #264]	; (3e54 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3d4a:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3d4e:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3d52:	bl	3290 <usb_malloc>
				if (p) {
    3d56:	cmp	r0, #0
    3d58:	beq.w	3e68 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    3d5c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3d5e:	ldr	r2, [pc, #248]	; (3e58 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3d60:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3d64:	str.w	r2, [r9, #136]	; 0x88
    3d68:	b.n	3c40 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3d6a:	bl	3290 <usb_malloc>
				if (p) {
    3d6e:	cmp	r0, #0
    3d70:	beq.n	3df8 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    3d72:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3d74:	ldr	r2, [pc, #220]	; (3e54 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3d76:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3d7a:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3d7e:	bl	3290 <usb_malloc>
				if (p) {
    3d82:	cbz	r0, 3dec <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3d84:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3d86:	ldr	r2, [pc, #208]	; (3e58 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3d88:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3d8c:	str.w	r2, [r9, #104]	; 0x68
    3d90:	b.n	3c28 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3d92:	bl	3290 <usb_malloc>
				if (p) {
    3d96:	cbz	r0, 3de0 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3d98:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3d9a:	ldr	r2, [pc, #184]	; (3e54 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3d9c:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3da0:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3da4:	bl	3290 <usb_malloc>
				if (p) {
    3da8:	cbz	r0, 3dd4 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    3daa:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3dac:	ldr	r2, [pc, #168]	; (3e58 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3dae:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3db2:	str.w	r2, [r9, #72]	; 0x48
    3db6:	b.n	3c0c <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3db8:	movs	r0, #2
    3dba:	b.n	3ab6 <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3dbc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3dbe:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    3dc2:	adds	r2, #1
    3dc4:	strb	r2, [r5, #0]
    3dc6:	b.n	3c56 <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3dc8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3dca:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    3dce:	adds	r2, #1
    3dd0:	strb	r2, [r5, #0]
    3dd2:	b.n	3d26 <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3dd4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3dd6:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    3dda:	adds	r2, #1
    3ddc:	strb	r2, [r5, #0]
    3dde:	b.n	3c0c <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3de0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3de2:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    3de6:	adds	r2, #1
    3de8:	strb	r2, [r5, #0]
    3dea:	b.n	3da4 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3dec:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3dee:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    3df2:	adds	r2, #1
    3df4:	strb	r2, [r5, #0]
    3df6:	b.n	3c28 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3df8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3dfa:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    3dfe:	adds	r2, #1
    3e00:	strb	r2, [r5, #0]
    3e02:	b.n	3d7e <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3e04:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3e06:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    3e0a:	adds	r2, #1
    3e0c:	strb	r2, [r5, #0]
    3e0e:	b.n	3bf0 <usb_isr+0x700>
    3e10:	.word	0x1fff1a68
    3e14:	.word	0x1fff19d0
    3e18:	.word	0x1fff1a28
    3e1c:	.word	0x1fff1a3c
    3e20:	.word	0x1fff1978
    3e24:	.word	0x1fff1ef8
    3e28:	.word	0x0000585c
    3e2c:	.word	0x1fff1a59
    3e30:	.word	0x400720c4
    3e34:	.word	0x400720c8
    3e38:	.word	0x400720cc
    3e3c:	.word	0x400720d0
    3e40:	.word	0x400720d4
    3e44:	.word	0x1fff0000
    3e48:	.word	0x00005864
    3e4c:	.word	0x1fff1a5c
    3e50:	.word	0x400720c0
    3e54:	.word	0x00400088
    3e58:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3e5c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3e5e:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    3e62:	adds	r2, #1
    3e64:	strb	r2, [r5, #0]
    3e66:	b.n	3cfc <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3e68:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3e6a:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    3e6e:	adds	r2, #1
    3e70:	strb	r2, [r5, #0]
    3e72:	b.n	3c40 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3e74:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3e76:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    3e7a:	adds	r2, #1
    3e7c:	strb	r2, [r5, #0]
    3e7e:	b.n	3d52 <usb_isr+0x862>
    3e80:	cmp	r0, #64	; 0x40
    3e82:	mov	ip, r0
    3e84:	it	cs
    3e86:	movcs.w	ip, #64	; 0x40
    3e8a:	add.w	r3, r4, ip
    3e8e:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3e90:	movs	r3, #1
    3e92:	rsb	r0, ip, r0
    3e96:	mov.w	r8, ip, lsl #16
    3e9a:	movs	r2, #0
    3e9c:	str	r3, [sp, #4]
    3e9e:	b.n	38d0 <usb_isr+0x3e0>

00003ea0 <usb_init>:
}



void usb_init(void)
{
    3ea0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ea4:	ldr	r4, [pc, #156]	; (3f44 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3ea6:	bl	4770 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3eaa:	movs	r2, #0
    3eac:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3eb0:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3eb2:	str	r2, [r3, #0]
		table[i].addr = 0;
    3eb4:	str	r2, [r3, #4]
    3eb6:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3eb8:	cmp	r3, r0
		table[i].desc = 0;
    3eba:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    3ebe:	bne.n	3eb2 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3ec0:	ldr	r0, [pc, #132]	; (3f48 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3ec2:	ldr	r2, [pc, #136]	; (3f4c <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3ec4:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3ec6:	ldr.w	lr, [pc, #156]	; 3f64 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3eca:	ldr	r6, [pc, #132]	; (3f50 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3ecc:	ldr	r5, [pc, #132]	; (3f54 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3ece:	ldr	r7, [pc, #136]	; (3f58 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3ed0:	ldr.w	ip, [pc, #148]	; 3f68 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    3ed4:	ldr.w	r8, [pc, #148]	; 3f6c <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3ed8:	orr.w	r3, r3, #262144	; 0x40000
    3edc:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3ede:	ldr	r3, [r2, #0]
    3ee0:	orr.w	r3, r3, #50331648	; 0x3000000
    3ee4:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3ee6:	movs	r3, #3
    3ee8:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3eec:	movs	r3, #160	; 0xa0
    3eee:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3ef0:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3ef4:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3ef8:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3efc:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3efe:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3f00:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3f04:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3f06:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3f08:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3f0a:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3f0c:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3f0e:	ldr	r5, [pc, #76]	; (3f5c <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3f10:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3f14:	ldr	r0, [pc, #72]	; (3f60 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    3f16:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    3f1a:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3f1c:	movs	r3, #1
    3f1e:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3f22:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    3f26:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3f2a:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3f2c:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    3f2e:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3f32:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3f34:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3f36:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    3f3a:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3f3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f42:	nop
    3f44:	.word	0x1fff0000
    3f48:	.word	0x40048034
    3f4c:	.word	0x4000d800
    3f50:	.word	0x40072140
    3f54:	.word	0x4007209c
    3f58:	.word	0x400720b0
    3f5c:	.word	0xe000e435
    3f60:	.word	0xe000e104
    3f64:	.word	0x40072144
    3f68:	.word	0x40072080
    3f6c:	.word	0x40072088

00003f70 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3f70:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    3f72:	ldr	r4, [pc, #176]	; (4024 <yield+0xb4>)
    3f74:	ldrb	r3, [r4, #0]
    3f76:	cbz	r3, 3f7a <yield+0xa>
    3f78:	pop	{r3, r4, r5, pc}
	running = 1;
    3f7a:	movs	r3, #1
    3f7c:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3f7e:	bl	249c <usb_serial_available>
	if (Serial.available()) serialEvent();
    3f82:	cmp	r0, #0
    3f84:	bne.n	400c <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    3f86:	bl	4540 <serial_available>
	if (Serial1.available()) serialEvent1();
    3f8a:	cmp	r0, #0
    3f8c:	bne.n	4006 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    3f8e:	bl	4228 <serial2_available>
	if (Serial2.available()) serialEvent2();
    3f92:	cmp	r0, #0
    3f94:	bne.n	4000 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    3f96:	bl	4840 <serial3_available>
	if (Serial3.available()) serialEvent3();
    3f9a:	cbnz	r0, 3ffa <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    3f9c:	bl	4354 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3fa0:	cbnz	r0, 3ff4 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    3fa2:	bl	4130 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3fa6:	cbnz	r0, 3fee <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    3fa8:	bl	466c <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    3fac:	cbnz	r0, 3fe8 <yield+0x78>
#endif
	running = 0;
    3fae:	movs	r3, #0
    3fb0:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3fb2:	mrs	r3, IPSR
		if (ipsr != 0) return;
    3fb6:	cmp	r3, #0
    3fb8:	bne.n	3f78 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3fba:	mrs	r1, PRIMASK
		__disable_irq();
    3fbe:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3fc0:	ldr	r3, [pc, #100]	; (4028 <yield+0xb8>)
    3fc2:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    3fc4:	cbz	r0, 4012 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    3fc6:	ldr	r4, [pc, #100]	; (402c <yield+0xbc>)
    3fc8:	ldrb	r2, [r4, #0]
    3fca:	cbnz	r2, 4012 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    3fcc:	ldr	r5, [r0, #20]
    3fce:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3fd0:	movs	r3, #1
    3fd2:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    3fd4:	cbz	r5, 401a <yield+0xaa>
			firstYield->_prev = nullptr;
    3fd6:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3fd8:	cbnz	r1, 3fdc <yield+0x6c>
    3fda:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3fdc:	movs	r5, #0
    3fde:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    3fe0:	ldr	r3, [r0, #8]
    3fe2:	blx	r3
		runningFromYield = false;
    3fe4:	strb	r5, [r4, #0]
    3fe6:	b.n	3f78 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    3fe8:	bl	412c <serialEvent6()>
    3fec:	b.n	3fae <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    3fee:	bl	4034 <serialEvent5()>
    3ff2:	b.n	3fa8 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    3ff4:	bl	4118 <serialEvent4()>
    3ff8:	b.n	3fa2 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    3ffa:	bl	493c <serialEvent3()>
    3ffe:	b.n	3f9c <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    4000:	bl	4114 <serialEvent2()>
    4004:	b.n	3f96 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    4006:	bl	4938 <serialEvent1()>
    400a:	b.n	3f8e <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    400c:	bl	4060 <serialEvent()>
    4010:	b.n	3f86 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4012:	cmp	r1, #0
    4014:	bne.n	3f78 <yield+0x8>
    4016:	cpsie	i
    4018:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    401a:	ldr	r3, [pc, #20]	; (4030 <yield+0xc0>)
    401c:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    401e:	cmp	r1, #0
    4020:	bne.n	3fdc <yield+0x6c>
    4022:	b.n	3fda <yield+0x6a>
    4024:	.word	0x1fff1a6d
    4028:	.word	0x1fff1d80
    402c:	.word	0x1fff1d84
    4030:	.word	0x1fff1d7c

00004034 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    4034:	bx	lr
    4036:	nop

00004038 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    4038:	b.w	24b8 <usb_serial_flush_input>

0000403c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    403c:	b.w	246c <usb_serial_peekchar>

00004040 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    4040:	b.w	2424 <usb_serial_getchar>

00004044 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4044:	b.w	249c <usb_serial_available>

00004048 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    4048:	b.w	2658 <usb_serial_flush_output>

0000404c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    404c:	b.w	2610 <usb_serial_write_buffer_free>

00004050 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4050:	mov	r0, r1
    4052:	mov	r1, r2
    4054:	b.w	24f0 <usb_serial_write>

00004058 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4058:	mov	r0, r1
    405a:	b.w	25f8 <usb_serial_putchar>
    405e:	nop

00004060 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    4060:	bx	lr
    4062:	nop

00004064 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4064:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    4066:	ldr	r2, [pc, #24]	; (4080 <Print::println()+0x1c>)
	return write(buf, 2);
    4068:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    406a:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    406c:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    406e:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    4070:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    4072:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    4076:	movs	r2, #2
    4078:	blx	r3
}
    407a:	add	sp, #12
    407c:	ldr.w	pc, [sp], #4
    4080:	.word	0x00005858

00004084 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    4084:	push	{r4, r5, r6, r7, lr}
    4086:	mov	r7, r0
    4088:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    408a:	cmp	r2, #0
    408c:	beq.n	40f6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    408e:	cmp	r2, #1
    4090:	it	eq
    4092:	moveq	r2, #10
	}


	if (n == 0) {
    4094:	cbz	r1, 40ec <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    4096:	movs	r4, #33	; 0x21
    4098:	b.n	409c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    409a:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    409c:	udiv	r5, r1, r2
    40a0:	mls	r1, r2, r5, r1
    40a4:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    40a6:	cmp	r1, #9
    40a8:	add.w	r1, r0, #48	; 0x30
    40ac:	it	ls
    40ae:	uxtbls	r0, r1
    40b0:	add	r1, sp, #40	; 0x28
    40b2:	it	hi
    40b4:	addhi	r0, #55	; 0x37
    40b6:	add	r1, r4
    40b8:	it	hi
    40ba:	uxtbhi	r0, r0
    40bc:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    40c0:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    40c2:	mov	r1, r5
    40c4:	cmp	r5, #0
    40c6:	bne.n	409a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    40c8:	cbz	r3, 40d8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    40ca:	subs	r4, #1
    40cc:	uxtb	r4, r4
		buf[i] = '-';
    40ce:	add	r3, sp, #40	; 0x28
    40d0:	add	r3, r4
    40d2:	movs	r2, #45	; 0x2d
    40d4:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    40d8:	ldr	r3, [r7, #0]
    40da:	add	r2, sp, #4
    40dc:	adds	r1, r2, r4
    40de:	ldr	r3, [r3, #4]
    40e0:	mov	r0, r7
    40e2:	rsb	r2, r4, #34	; 0x22
    40e6:	blx	r3
}
    40e8:	add	sp, #44	; 0x2c
    40ea:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    40ec:	movs	r2, #48	; 0x30
    40ee:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    40f2:	movs	r4, #33	; 0x21
    40f4:	b.n	40c8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    40f6:	ldr	r3, [r0, #0]
    40f8:	uxtb	r1, r1
    40fa:	ldr	r3, [r3, #0]
    40fc:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    40fe:	add	sp, #44	; 0x2c
    4100:	pop	{r4, r5, r6, r7, pc}
    4102:	nop

00004104 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    4104:	cmp	r1, #0
		sign = '-';
		n = -n;
    4106:	itte	lt
    4108:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    410a:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    410c:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    410e:	movs	r2, #10
    4110:	b.w	4084 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00004114 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    4114:	bx	lr
    4116:	nop

00004118 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    4118:	bx	lr
    411a:	nop

0000411c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    411c:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    411e:	bl	4e8 <setup>
	while (1) {
		loop();
    4122:	bl	4ec <loop>
		yield();
    4126:	bl	3f70 <yield>
    412a:	b.n	4122 <main+0x6>

0000412c <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    412c:	bx	lr
    412e:	nop

00004130 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4130:	ldr	r2, [pc, #20]	; (4148 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    4132:	ldr	r3, [pc, #24]	; (414c <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4134:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4136:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4138:	uxtb	r0, r0
	tail = rx_buffer_tail;
    413a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    413c:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    413e:	it	cc
    4140:	addcc	r0, #64	; 0x40
    4142:	subs	r0, r0, r3
}
    4144:	bx	lr
    4146:	nop
    4148:	.word	0x1fff1a74
    414c:	.word	0x1fff1a75

00004150 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    4150:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    4152:	ldr	r3, [pc, #172]	; (4200 <uart4_status_isr+0xb0>)
    4154:	ldrb	r2, [r3, #4]
    4156:	lsls	r4, r2, #26
    4158:	bpl.n	419a <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    415a:	ldr	r0, [pc, #168]	; (4204 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    415c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    415e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4160:	ldr	r1, [pc, #164]	; (4208 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    4162:	adds	r3, #1
    4164:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4166:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    4168:	it	gt
    416a:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    416c:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    416e:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4170:	beq.n	417a <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    4172:	ldr	r4, [pc, #152]	; (420c <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    4174:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4176:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4178:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    417a:	ldr	r2, [pc, #148]	; (4210 <uart4_status_isr+0xc0>)
    417c:	ldr	r1, [r2, #0]
    417e:	cbz	r1, 419a <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4180:	ldr	r2, [pc, #144]	; (4214 <uart4_status_isr+0xc4>)
    4182:	ldrb	r2, [r2, #0]
    4184:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4186:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    4188:	itet	cc
    418a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    418e:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    4190:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4192:	cmp	r3, #39	; 0x27
    4194:	itt	gt
    4196:	movgt	r3, #1
    4198:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    419a:	ldr	r2, [pc, #100]	; (4200 <uart4_status_isr+0xb0>)
    419c:	ldrb	r3, [r2, #3]
    419e:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    41a0:	lsls	r0, r3, #24
    41a2:	bmi.n	41c8 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    41a4:	lsls	r2, r3, #25
    41a6:	bpl.n	41c4 <uart4_status_isr+0x74>
    41a8:	ldr	r3, [pc, #84]	; (4200 <uart4_status_isr+0xb0>)
    41aa:	ldrb	r3, [r3, #4]
    41ac:	lsls	r3, r3, #25
    41ae:	bpl.n	41c4 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    41b0:	ldr	r3, [pc, #100]	; (4218 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    41b2:	ldr	r1, [pc, #104]	; (421c <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    41b4:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    41b6:	movs	r2, #0
    41b8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    41ba:	cbz	r3, 41be <uart4_status_isr+0x6e>
    41bc:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    41be:	ldr	r3, [pc, #64]	; (4200 <uart4_status_isr+0xb0>)
    41c0:	movs	r2, #44	; 0x2c
    41c2:	strb	r2, [r3, #3]
	}
}
    41c4:	pop	{r4, r5}
    41c6:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    41c8:	ldrb	r1, [r2, #4]
    41ca:	lsls	r1, r1, #24
    41cc:	bpl.n	41a4 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    41ce:	ldr	r1, [pc, #80]	; (4220 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    41d0:	ldr	r0, [pc, #64]	; (4214 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    41d2:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    41d4:	ldrb	r1, [r0, #0]
    41d6:	uxtb	r1, r1
		if (head == tail) {
    41d8:	cmp	r4, r1
    41da:	beq.n	41f8 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    41dc:	adds	r2, r1, #1
    41de:	cmp	r2, #39	; 0x27
    41e0:	itt	hi
    41e2:	movhi	r1, #0
    41e4:	movhi	r2, r1
			n = tx_buffer[tail];
    41e6:	ldr	r5, [pc, #60]	; (4224 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    41e8:	ldr	r4, [pc, #20]	; (4200 <uart4_status_isr+0xb0>)
    41ea:	it	ls
    41ec:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    41ee:	ldrb	r2, [r5, r2]
    41f0:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    41f2:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    41f4:	strb	r1, [r0, #0]
    41f6:	b.n	41a4 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    41f8:	movs	r1, #108	; 0x6c
    41fa:	strb	r1, [r2, #3]
    41fc:	b.n	41a4 <uart4_status_isr+0x54>
    41fe:	nop
    4200:	.word	0x400ea000
    4204:	.word	0x1fff1a74
    4208:	.word	0x1fff1a75
    420c:	.word	0x1fff1aa0
    4210:	.word	0x1fff1a70
    4214:	.word	0x1fff1ae1
    4218:	.word	0x1fff1ae4
    421c:	.word	0x1fff1ae0
    4220:	.word	0x1fff1ae8
    4224:	.word	0x1fff1a78

00004228 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4228:	ldr	r2, [pc, #20]	; (4240 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    422a:	ldr	r3, [pc, #24]	; (4244 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    422c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    422e:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4230:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4232:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4234:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    4236:	it	cc
    4238:	addcc	r0, #64	; 0x40
    423a:	subs	r0, r0, r3
}
    423c:	bx	lr
    423e:	nop
    4240:	.word	0x1fff1b5c
    4244:	.word	0x1fff1af1

00004248 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    4248:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    424a:	ldr	r3, [pc, #224]	; (432c <uart1_status_isr+0xe4>)
    424c:	ldrb	r2, [r3, #4]
    424e:	tst.w	r2, #48	; 0x30
    4252:	beq.n	42ae <uart1_status_isr+0x66>
		__disable_irq();
    4254:	cpsid	i
		avail = UART1_RCFIFO;
    4256:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    4258:	and.w	r2, r1, #255	; 0xff
    425c:	cmp	r1, #0
    425e:	beq.n	42dc <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    4260:	cpsie	i
			head = rx_buffer_head;
    4262:	ldr	r7, [pc, #204]	; (4330 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4264:	ldr	r1, [pc, #204]	; (4334 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4266:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    4268:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    426a:	ldr	r6, [pc, #204]	; (4338 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    426c:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    426e:	uxtb	r0, r0
			tail = rx_buffer_tail;
    4270:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    4272:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    4274:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    4276:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    4278:	it	cs
    427a:	movcs	r3, #0
				if (newhead != tail) {
    427c:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    427e:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    4282:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4284:	itt	ne
    4286:	strbne	r1, [r6, r3]
    4288:	movne	r0, r3
				}
			} while (--avail > 0);
    428a:	ands.w	r2, r2, #255	; 0xff
    428e:	bne.n	4272 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    4290:	ldr	r3, [pc, #168]	; (433c <uart1_status_isr+0xf4>)
    4292:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4294:	uxtb	r2, r0
    4296:	strb	r2, [r7, #0]
			if (rts_pin) {
    4298:	cbz	r3, 42ae <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    429a:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    429c:	itet	cc
    429e:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    42a2:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    42a4:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    42a6:	cmp	r0, #39	; 0x27
    42a8:	itt	gt
    42aa:	movgt	r2, #1
    42ac:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    42ae:	ldr	r1, [pc, #124]	; (432c <uart1_status_isr+0xe4>)
    42b0:	ldrb	r2, [r1, #3]
    42b2:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    42b4:	lsls	r5, r2, #24
    42b6:	bmi.n	42e6 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    42b8:	lsls	r2, r2, #25
    42ba:	bpl.n	42d8 <uart1_status_isr+0x90>
    42bc:	ldr	r3, [pc, #108]	; (432c <uart1_status_isr+0xe4>)
    42be:	ldrb	r3, [r3, #4]
    42c0:	lsls	r3, r3, #25
    42c2:	bpl.n	42d8 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    42c4:	ldr	r3, [pc, #120]	; (4340 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    42c6:	ldr	r1, [pc, #124]	; (4344 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    42c8:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    42ca:	movs	r2, #0
    42cc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    42ce:	cbz	r3, 42d2 <uart1_status_isr+0x8a>
    42d0:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    42d2:	ldr	r3, [pc, #88]	; (432c <uart1_status_isr+0xe4>)
    42d4:	movs	r2, #60	; 0x3c
    42d6:	strb	r2, [r3, #3]
	}
}
    42d8:	pop	{r4, r5, r6, r7}
    42da:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    42dc:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    42de:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    42e0:	strb	r2, [r3, #17]
			__enable_irq();
    42e2:	cpsie	i
    42e4:	b.n	42ae <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    42e6:	ldrb	r3, [r1, #4]
    42e8:	lsls	r4, r3, #24
    42ea:	bpl.n	42b8 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    42ec:	ldr	r3, [pc, #88]	; (4348 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    42ee:	ldr	r6, [pc, #92]	; (434c <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    42f0:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    42f2:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    42f4:	uxtb	r4, r4
		tail = tx_buffer_tail;
    42f6:	uxtb	r3, r3
		do {
			if (tail == head) break;
    42f8:	cmp	r4, r3
    42fa:	beq.n	431a <uart1_status_isr+0xd2>
    42fc:	ldr	r5, [pc, #80]	; (4350 <uart1_status_isr+0x108>)
    42fe:	b.n	4304 <uart1_status_isr+0xbc>
    4300:	cmp	r3, r4
    4302:	beq.n	431a <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    4304:	adds	r3, #1
    4306:	cmp	r3, #40	; 0x28
    4308:	it	cs
    430a:	movcs	r3, #0
			avail = UART1_S1;
    430c:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    430e:	ldrb	r0, [r5, r3]
    4310:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    4312:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    4314:	ldrb	r0, [r1, #20]
    4316:	cmp	r0, #7
    4318:	bls.n	4300 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    431a:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    431c:	ldr	r1, [pc, #12]	; (432c <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    431e:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    4320:	ldrb	r3, [r1, #4]
    4322:	lsls	r0, r3, #24
    4324:	itt	mi
    4326:	movmi	r3, #124	; 0x7c
    4328:	strbmi	r3, [r1, #3]
    432a:	b.n	42b8 <uart1_status_isr+0x70>
    432c:	.word	0x4006b000
    4330:	.word	0x1fff1b5c
    4334:	.word	0x1fff1af1
    4338:	.word	0x1fff1b1c
    433c:	.word	0x1fff1aec
    4340:	.word	0x1fff1b60
    4344:	.word	0x1fff1af0
    4348:	.word	0x1fff1b64
    434c:	.word	0x1fff1b5d
    4350:	.word	0x1fff1af4

00004354 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4354:	ldr	r2, [pc, #20]	; (436c <serial4_available+0x18>)
	tail = rx_buffer_tail;
    4356:	ldr	r3, [pc, #24]	; (4370 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4358:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    435a:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    435c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    435e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4360:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    4362:	it	cc
    4364:	addcc	r0, #64	; 0x40
    4366:	subs	r0, r0, r3
}
    4368:	bx	lr
    436a:	nop
    436c:	.word	0x1fff1b6c
    4370:	.word	0x1fff1b6d

00004374 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    4374:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    4376:	ldr	r3, [pc, #172]	; (4424 <uart3_status_isr+0xb0>)
    4378:	ldrb	r2, [r3, #4]
    437a:	lsls	r4, r2, #26
    437c:	bpl.n	43be <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    437e:	ldr	r0, [pc, #168]	; (4428 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    4380:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    4382:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4384:	ldr	r1, [pc, #164]	; (442c <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    4386:	adds	r3, #1
    4388:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    438a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    438c:	it	gt
    438e:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4390:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    4392:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4394:	beq.n	439e <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    4396:	ldr	r4, [pc, #152]	; (4430 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    4398:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    439a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    439c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    439e:	ldr	r2, [pc, #148]	; (4434 <uart3_status_isr+0xc0>)
    43a0:	ldr	r1, [r2, #0]
    43a2:	cbz	r1, 43be <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    43a4:	ldr	r2, [pc, #144]	; (4438 <uart3_status_isr+0xc4>)
    43a6:	ldrb	r2, [r2, #0]
    43a8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    43aa:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    43ac:	itet	cc
    43ae:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    43b2:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    43b4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    43b6:	cmp	r3, #39	; 0x27
    43b8:	itt	gt
    43ba:	movgt	r3, #1
    43bc:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    43be:	ldr	r2, [pc, #100]	; (4424 <uart3_status_isr+0xb0>)
    43c0:	ldrb	r3, [r2, #3]
    43c2:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    43c4:	lsls	r0, r3, #24
    43c6:	bmi.n	43ec <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    43c8:	lsls	r2, r3, #25
    43ca:	bpl.n	43e8 <uart3_status_isr+0x74>
    43cc:	ldr	r3, [pc, #84]	; (4424 <uart3_status_isr+0xb0>)
    43ce:	ldrb	r3, [r3, #4]
    43d0:	lsls	r3, r3, #25
    43d2:	bpl.n	43e8 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    43d4:	ldr	r3, [pc, #100]	; (443c <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    43d6:	ldr	r1, [pc, #104]	; (4440 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    43d8:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    43da:	movs	r2, #0
    43dc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    43de:	cbz	r3, 43e2 <uart3_status_isr+0x6e>
    43e0:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    43e2:	ldr	r3, [pc, #64]	; (4424 <uart3_status_isr+0xb0>)
    43e4:	movs	r2, #44	; 0x2c
    43e6:	strb	r2, [r3, #3]
	}
}
    43e8:	pop	{r4, r5}
    43ea:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    43ec:	ldrb	r1, [r2, #4]
    43ee:	lsls	r1, r1, #24
    43f0:	bpl.n	43c8 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    43f2:	ldr	r1, [pc, #80]	; (4444 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    43f4:	ldr	r0, [pc, #64]	; (4438 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    43f6:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    43f8:	ldrb	r1, [r0, #0]
    43fa:	uxtb	r1, r1
		if (head == tail) {
    43fc:	cmp	r4, r1
    43fe:	beq.n	441c <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    4400:	adds	r2, r1, #1
    4402:	cmp	r2, #39	; 0x27
    4404:	itt	hi
    4406:	movhi	r1, #0
    4408:	movhi	r2, r1
			n = tx_buffer[tail];
    440a:	ldr	r5, [pc, #60]	; (4448 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    440c:	ldr	r4, [pc, #20]	; (4424 <uart3_status_isr+0xb0>)
    440e:	it	ls
    4410:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4412:	ldrb	r2, [r5, r2]
    4414:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    4416:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4418:	strb	r1, [r0, #0]
    441a:	b.n	43c8 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    441c:	movs	r1, #108	; 0x6c
    441e:	strb	r1, [r2, #3]
    4420:	b.n	43c8 <uart3_status_isr+0x54>
    4422:	nop
    4424:	.word	0x4006d000
    4428:	.word	0x1fff1b6c
    442c:	.word	0x1fff1b6d
    4430:	.word	0x1fff1b98
    4434:	.word	0x1fff1b68
    4438:	.word	0x1fff1bd9
    443c:	.word	0x1fff1bdc
    4440:	.word	0x1fff1bd8
    4444:	.word	0x1fff1be0
    4448:	.word	0x1fff1b70

0000444c <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    444c:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    444e:	ldr	r4, [pc, #64]	; (4490 <fault_isr+0x44>)
    4450:	b.n	4464 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    4452:	ldr	r3, [r4, #0]
    4454:	lsls	r1, r3, #21
    4456:	bmi.n	4474 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4458:	ldr	r3, [r4, #0]
    445a:	lsls	r2, r3, #20
    445c:	bmi.n	447e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    445e:	ldr	r3, [r4, #0]
    4460:	lsls	r3, r3, #19
    4462:	bmi.n	4488 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    4464:	ldr	r3, [r4, #0]
    4466:	lsls	r0, r3, #13
    4468:	bpl.n	4452 <fault_isr+0x6>
    446a:	bl	34f0 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    446e:	ldr	r3, [r4, #0]
    4470:	lsls	r1, r3, #21
    4472:	bpl.n	4458 <fault_isr+0xc>
    4474:	bl	4560 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4478:	ldr	r3, [r4, #0]
    447a:	lsls	r2, r3, #20
    447c:	bpl.n	445e <fault_isr+0x12>
    447e:	bl	4248 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    4482:	ldr	r3, [r4, #0]
    4484:	lsls	r3, r3, #19
    4486:	bpl.n	4464 <fault_isr+0x18>
    4488:	bl	4860 <uart2_status_isr>
    448c:	b.n	4464 <fault_isr+0x18>
    448e:	nop
    4490:	.word	0x40048034

00004494 <unused_isr>:
	}
}

void unused_isr(void)
{
    4494:	push	{r3, lr}
	fault_isr();
    4496:	bl	444c <fault_isr>
    449a:	nop

0000449c <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    449c:	ldr	r3, [pc, #4]	; (44a4 <startup_early_hook+0x8>)
    449e:	movs	r2, #16
    44a0:	strh	r2, [r3, #0]
    44a2:	bx	lr
    44a4:	.word	0x40052000

000044a8 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    44a8:	bx	lr
    44aa:	nop

000044ac <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    44ac:	ldr	r1, [pc, #36]	; (44d4 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    44ae:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    44b0:	ldr	r3, [r1, #0]
	if (incr != 0) {
    44b2:	cbz	r0, 44c2 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    44b4:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    44b6:	add	r0, r3
    44b8:	sub.w	r2, r2, #8192	; 0x2000
    44bc:	cmp	r0, r2
    44be:	bcs.n	44c6 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    44c0:	str	r0, [r1, #0]
	}
	return prev;
    44c2:	mov	r0, r3
}
    44c4:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    44c6:	bl	4b34 <__errno>
    44ca:	movs	r3, #12
    44cc:	str	r3, [r0, #0]
			return (void *)-1;
    44ce:	mov.w	r0, #4294967295
    44d2:	pop	{r3, pc}
    44d4:	.word	0x1fff0c80

000044d8 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    44d8:	ldr	r2, [pc, #32]	; (44fc <kinetis_hsrun_disable+0x24>)
    44da:	ldrb	r3, [r2, #0]
    44dc:	cmp	r3, #128	; 0x80
    44de:	beq.n	44e4 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    44e0:	movs	r0, #0
}
    44e2:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    44e4:	ldr	r1, [pc, #24]	; (4500 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    44e6:	ldr	r3, [pc, #28]	; (4504 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    44e8:	ldr	r0, [pc, #28]	; (4508 <kinetis_hsrun_disable+0x30>)
    44ea:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    44ec:	movs	r1, #0
    44ee:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    44f0:	ldrb	r3, [r2, #0]
    44f2:	cmp	r3, #128	; 0x80
    44f4:	beq.n	44f0 <kinetis_hsrun_disable+0x18>
		return 1;
    44f6:	movs	r0, #1
    44f8:	bx	lr
    44fa:	nop
    44fc:	.word	0x4007e003
    4500:	.word	0x40048044
    4504:	.word	0x4007e001
    4508:	.word	0x22280000

0000450c <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    450c:	ldr	r2, [pc, #36]	; (4534 <kinetis_hsrun_enable+0x28>)
    450e:	ldrb	r3, [r2, #0]
    4510:	cmp	r3, #1
    4512:	beq.n	4518 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    4514:	movs	r0, #0
}
    4516:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    4518:	add.w	r3, r3, #1073741824	; 0x40000000
    451c:	add.w	r3, r3, #516096	; 0x7e000
    4520:	movs	r1, #96	; 0x60
    4522:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    4524:	ldrb	r3, [r2, #0]
    4526:	cmp	r3, #128	; 0x80
    4528:	bne.n	4524 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    452a:	ldr	r3, [pc, #12]	; (4538 <kinetis_hsrun_enable+0x2c>)
    452c:	ldr	r2, [pc, #12]	; (453c <kinetis_hsrun_enable+0x30>)
    452e:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    4530:	movs	r0, #1
    4532:	bx	lr
    4534:	.word	0x4007e003
    4538:	.word	0x40048044
    453c:	.word	0x02060000

00004540 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4540:	ldr	r2, [pc, #20]	; (4558 <serial_available+0x18>)
	tail = rx_buffer_tail;
    4542:	ldr	r3, [pc, #24]	; (455c <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4544:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4546:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4548:	uxtb	r0, r0
	tail = rx_buffer_tail;
    454a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    454c:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    454e:	it	cc
    4550:	addcc	r0, #64	; 0x40
    4552:	subs	r0, r0, r3
}
    4554:	bx	lr
    4556:	nop
    4558:	.word	0x1fff1be8
    455c:	.word	0x1fff1be9

00004560 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    4560:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    4562:	ldr	r3, [pc, #224]	; (4644 <uart0_status_isr+0xe4>)
    4564:	ldrb	r2, [r3, #4]
    4566:	tst.w	r2, #48	; 0x30
    456a:	beq.n	45c6 <uart0_status_isr+0x66>
		__disable_irq();
    456c:	cpsid	i
		avail = UART0_RCFIFO;
    456e:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    4570:	and.w	r2, r1, #255	; 0xff
    4574:	cmp	r1, #0
    4576:	beq.n	45f4 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    4578:	cpsie	i
			head = rx_buffer_head;
    457a:	ldr	r7, [pc, #204]	; (4648 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    457c:	ldr	r1, [pc, #204]	; (464c <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    457e:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    4580:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4582:	ldr	r6, [pc, #204]	; (4650 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4584:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4586:	uxtb	r0, r0
			tail = rx_buffer_tail;
    4588:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    458a:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    458c:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    458e:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4590:	it	cs
    4592:	movcs	r3, #0
				if (newhead != tail) {
    4594:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    4596:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    459a:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    459c:	itt	ne
    459e:	strbne	r1, [r6, r3]
    45a0:	movne	r0, r3
				}
			} while (--avail > 0);
    45a2:	ands.w	r2, r2, #255	; 0xff
    45a6:	bne.n	458a <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    45a8:	ldr	r3, [pc, #168]	; (4654 <uart0_status_isr+0xf4>)
    45aa:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    45ac:	uxtb	r2, r0
    45ae:	strb	r2, [r7, #0]
			if (rts_pin) {
    45b0:	cbz	r3, 45c6 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    45b2:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    45b4:	itet	cc
    45b6:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    45ba:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    45bc:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    45be:	cmp	r0, #39	; 0x27
    45c0:	itt	gt
    45c2:	movgt	r2, #1
    45c4:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    45c6:	ldr	r1, [pc, #124]	; (4644 <uart0_status_isr+0xe4>)
    45c8:	ldrb	r2, [r1, #3]
    45ca:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    45cc:	lsls	r5, r2, #24
    45ce:	bmi.n	45fe <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    45d0:	lsls	r2, r2, #25
    45d2:	bpl.n	45f0 <uart0_status_isr+0x90>
    45d4:	ldr	r3, [pc, #108]	; (4644 <uart0_status_isr+0xe4>)
    45d6:	ldrb	r3, [r3, #4]
    45d8:	lsls	r3, r3, #25
    45da:	bpl.n	45f0 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    45dc:	ldr	r3, [pc, #120]	; (4658 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    45de:	ldr	r1, [pc, #124]	; (465c <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    45e0:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    45e2:	movs	r2, #0
    45e4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    45e6:	cbz	r3, 45ea <uart0_status_isr+0x8a>
    45e8:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    45ea:	ldr	r3, [pc, #88]	; (4644 <uart0_status_isr+0xe4>)
    45ec:	movs	r2, #60	; 0x3c
    45ee:	strb	r2, [r3, #3]
	}
}
    45f0:	pop	{r4, r5, r6, r7}
    45f2:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    45f4:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    45f6:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    45f8:	strb	r2, [r3, #17]
			__enable_irq();
    45fa:	cpsie	i
    45fc:	b.n	45c6 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    45fe:	ldrb	r3, [r1, #4]
    4600:	lsls	r4, r3, #24
    4602:	bpl.n	45d0 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    4604:	ldr	r3, [pc, #88]	; (4660 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    4606:	ldr	r6, [pc, #92]	; (4664 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4608:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    460a:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    460c:	uxtb	r4, r4
		tail = tx_buffer_tail;
    460e:	uxtb	r3, r3
		do {
			if (tail == head) break;
    4610:	cmp	r4, r3
    4612:	beq.n	4632 <uart0_status_isr+0xd2>
    4614:	ldr	r5, [pc, #80]	; (4668 <uart0_status_isr+0x108>)
    4616:	b.n	461c <uart0_status_isr+0xbc>
    4618:	cmp	r3, r4
    461a:	beq.n	4632 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    461c:	adds	r3, #1
    461e:	cmp	r3, #64	; 0x40
    4620:	it	cs
    4622:	movcs	r3, #0
			avail = UART0_S1;
    4624:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    4626:	ldrb	r0, [r5, r3]
    4628:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    462a:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    462c:	ldrb	r0, [r1, #20]
    462e:	cmp	r0, #7
    4630:	bls.n	4618 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    4632:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4634:	ldr	r1, [pc, #12]	; (4644 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    4636:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4638:	ldrb	r3, [r1, #4]
    463a:	lsls	r0, r3, #24
    463c:	itt	mi
    463e:	movmi	r3, #124	; 0x7c
    4640:	strbmi	r3, [r1, #3]
    4642:	b.n	45d0 <uart0_status_isr+0x70>
    4644:	.word	0x4006a000
    4648:	.word	0x1fff1be8
    464c:	.word	0x1fff1be9
    4650:	.word	0x1fff1c2c
    4654:	.word	0x1fff1be4
    4658:	.word	0x1fff1c70
    465c:	.word	0x1fff1c6c
    4660:	.word	0x1fff1c74
    4664:	.word	0x1fff1c6d
    4668:	.word	0x1fff1bec

0000466c <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    466c:	ldr	r2, [pc, #20]	; (4684 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    466e:	ldr	r3, [pc, #24]	; (4688 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4670:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4672:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4674:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4676:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4678:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    467a:	it	cc
    467c:	addcc	r0, #64	; 0x40
    467e:	subs	r0, r0, r3
}
    4680:	bx	lr
    4682:	nop
    4684:	.word	0x1fff1c7c
    4688:	.word	0x1fff1c7d

0000468c <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    468c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    468e:	ldr	r3, [pc, #176]	; (4740 <lpuart0_status_isr+0xb4>)
    4690:	ldr	r2, [r3, #4]
    4692:	lsls	r4, r2, #10
    4694:	bpl.n	46d6 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4696:	ldr	r0, [pc, #172]	; (4744 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    4698:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    469a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    469c:	ldr	r1, [pc, #168]	; (4748 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    469e:	adds	r3, #1
    46a0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    46a2:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    46a4:	it	gt
    46a6:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    46a8:	cmp	r3, r1
    46aa:	beq.n	46b6 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    46ac:	ldr	r4, [pc, #156]	; (474c <lpuart0_status_isr+0xc0>)
    46ae:	uxtb	r2, r2
			rx_buffer_head = head;
    46b0:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    46b2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    46b4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    46b6:	ldr	r2, [pc, #152]	; (4750 <lpuart0_status_isr+0xc4>)
    46b8:	ldr	r1, [r2, #0]
    46ba:	cbz	r1, 46d6 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    46bc:	ldr	r2, [pc, #148]	; (4754 <lpuart0_status_isr+0xc8>)
    46be:	ldrb	r2, [r2, #0]
    46c0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    46c2:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    46c4:	itet	cc
    46c6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    46ca:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    46cc:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    46ce:	cmp	r3, #39	; 0x27
    46d0:	itt	gt
    46d2:	movgt	r3, #1
    46d4:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    46d6:	ldr	r2, [pc, #104]	; (4740 <lpuart0_status_isr+0xb4>)
    46d8:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    46da:	lsls	r0, r3, #8
    46dc:	bpl.n	46e4 <lpuart0_status_isr+0x58>
    46de:	ldr	r2, [r2, #4]
    46e0:	lsls	r1, r2, #8
    46e2:	bmi.n	4708 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    46e4:	lsls	r2, r3, #9
    46e6:	bpl.n	4704 <lpuart0_status_isr+0x78>
    46e8:	ldr	r3, [pc, #84]	; (4740 <lpuart0_status_isr+0xb4>)
    46ea:	ldr	r3, [r3, #4]
    46ec:	lsls	r3, r3, #9
    46ee:	bpl.n	4704 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    46f0:	ldr	r3, [pc, #100]	; (4758 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    46f2:	ldr	r1, [pc, #104]	; (475c <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    46f4:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    46f6:	movs	r2, #0
    46f8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    46fa:	cbz	r3, 46fe <lpuart0_status_isr+0x72>
    46fc:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    46fe:	ldr	r3, [pc, #96]	; (4760 <lpuart0_status_isr+0xd4>)
    4700:	movs	r2, #0
    4702:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    4704:	pop	{r4, r5}
    4706:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    4708:	ldr	r2, [pc, #88]	; (4764 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    470a:	ldr	r1, [pc, #72]	; (4754 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    470c:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    470e:	ldrb	r2, [r1, #0]
    4710:	uxtb	r2, r2
		if (head == tail) {
    4712:	cmp	r0, r2
    4714:	beq.n	4732 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    4716:	adds	r2, #1
    4718:	cmp	r2, #39	; 0x27
    471a:	itt	hi
    471c:	movhi	r0, #0
    471e:	movhi	r2, r0
			n = tx_buffer[tail];
    4720:	ldr	r5, [pc, #68]	; (4768 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    4722:	ldr	r4, [pc, #28]	; (4740 <lpuart0_status_isr+0xb4>)
    4724:	it	ls
    4726:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4728:	ldrb	r2, [r5, r2]
    472a:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    472c:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    472e:	strb	r0, [r1, #0]
    4730:	b.n	46e4 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    4732:	ldr	r0, [pc, #56]	; (476c <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4734:	ldr	r2, [pc, #40]	; (4760 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    4736:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4738:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    473a:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    473c:	str	r1, [r2, #0]
    473e:	b.n	46e4 <lpuart0_status_isr+0x58>
    4740:	.word	0x400c4000
    4744:	.word	0x1fff1c7c
    4748:	.word	0x1fff1c7d
    474c:	.word	0x1fff1ca8
    4750:	.word	0x1fff1c78
    4754:	.word	0x1fff1ce9
    4758:	.word	0x1fff1cec
    475c:	.word	0x1fff1ce8
    4760:	.word	0x43880158
    4764:	.word	0x1fff1cf0
    4768:	.word	0x1fff1c80
    476c:	.word	0x4388015c

00004770 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    4770:	push	{r4, lr}
    4772:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    4774:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    4776:	bl	44d8 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    477a:	ldr	r2, [pc, #96]	; (47dc <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    477c:	ldr	r3, [pc, #96]	; (47e0 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    477e:	ldr	r1, [pc, #100]	; (47e4 <usb_init_serialnumber+0x74>)
    4780:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4782:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    4784:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4786:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4788:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    478a:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    478c:	ldrb	r3, [r2, #0]
    478e:	lsls	r3, r3, #24
    4790:	bpl.n	478c <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    4792:	ldr	r3, [pc, #84]	; (47e8 <usb_init_serialnumber+0x78>)
    4794:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    4796:	bl	450c <kinetis_hsrun_enable>
#endif
	__enable_irq();
    479a:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    479c:	ldr	r3, [pc, #76]	; (47ec <usb_init_serialnumber+0x7c>)
    479e:	cmp	r4, r3
    47a0:	itt	ls
    47a2:	addls.w	r4, r4, r4, lsl #2
    47a6:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    47a8:	mov	r0, r4
    47aa:	ldr	r4, [pc, #68]	; (47f0 <usb_init_serialnumber+0x80>)
    47ac:	add	r1, sp, #4
    47ae:	movs	r2, #10
    47b0:	bl	47f4 <ultoa>
    47b4:	add	r1, sp, #4
    47b6:	mov	r0, r4
	for (i=0; i<10; i++) {
    47b8:	movs	r3, #0
		char c = buf[i];
    47ba:	ldrb.w	r2, [r1], #1
    47be:	adds	r3, #1
		if (!c) break;
    47c0:	cbz	r2, 47d2 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    47c2:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    47c4:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    47c8:	bne.n	47ba <usb_init_serialnumber+0x4a>
    47ca:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    47cc:	strb	r3, [r4, #0]
}
    47ce:	add	sp, #16
    47d0:	pop	{r4, pc}
    47d2:	lsls	r3, r3, #1
    47d4:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    47d6:	strb	r3, [r4, #0]
}
    47d8:	add	sp, #16
    47da:	pop	{r4, pc}
    47dc:	.word	0x40020004
    47e0:	.word	0x40020000
    47e4:	.word	0x41070000
    47e8:	.word	0x4002000c
    47ec:	.word	0x0098967f
    47f0:	.word	0x1fff0d64

000047f4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    47f4:	push	{r4, r5, r6, r7}
    47f6:	subs	r5, r1, #1
    47f8:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    47fa:	movs	r4, #0
    47fc:	b.n	4800 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    47fe:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    4800:	udiv	r3, r0, r2
    4804:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4808:	cmp	r0, #9
    480a:	add.w	r7, r0, #48	; 0x30
    480e:	itet	hi
    4810:	addhi	r0, #55	; 0x37
    4812:	uxtbls	r0, r7
    4814:	uxtbhi	r0, r0
    4816:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    481a:	mov	r0, r3
    481c:	cmp	r3, #0
    481e:	bne.n	47fe <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    4820:	adds	r2, r1, r4
    4822:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    4824:	cbz	r4, 483a <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    4826:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    4828:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    482c:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    482e:	adds	r3, #1
    4830:	subs	r0, r4, r3
    4832:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    4834:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4838:	blt.n	4826 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    483a:	mov	r0, r1
    483c:	pop	{r4, r5, r6, r7}
    483e:	bx	lr

00004840 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4840:	ldr	r2, [pc, #20]	; (4858 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    4842:	ldr	r3, [pc, #24]	; (485c <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4844:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4846:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4848:	uxtb	r0, r0
	tail = rx_buffer_tail;
    484a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    484c:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    484e:	it	cc
    4850:	addcc	r0, #64	; 0x40
    4852:	subs	r0, r0, r3
}
    4854:	bx	lr
    4856:	nop
    4858:	.word	0x1fff1cf8
    485c:	.word	0x1fff1cf9

00004860 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    4860:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    4862:	ldr	r3, [pc, #172]	; (4910 <uart2_status_isr+0xb0>)
    4864:	ldrb	r2, [r3, #4]
    4866:	lsls	r4, r2, #26
    4868:	bpl.n	48aa <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    486a:	ldr	r0, [pc, #168]	; (4914 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    486c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    486e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4870:	ldr	r1, [pc, #164]	; (4918 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4872:	adds	r3, #1
    4874:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4876:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4878:	it	gt
    487a:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    487c:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    487e:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4880:	beq.n	488a <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    4882:	ldr	r4, [pc, #152]	; (491c <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    4884:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4886:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4888:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    488a:	ldr	r2, [pc, #148]	; (4920 <uart2_status_isr+0xc0>)
    488c:	ldr	r1, [r2, #0]
    488e:	cbz	r1, 48aa <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4890:	ldr	r2, [pc, #144]	; (4924 <uart2_status_isr+0xc4>)
    4892:	ldrb	r2, [r2, #0]
    4894:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4896:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4898:	itet	cc
    489a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    489e:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    48a0:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    48a2:	cmp	r3, #39	; 0x27
    48a4:	itt	gt
    48a6:	movgt	r3, #1
    48a8:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    48aa:	ldr	r2, [pc, #100]	; (4910 <uart2_status_isr+0xb0>)
    48ac:	ldrb	r3, [r2, #3]
    48ae:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    48b0:	lsls	r0, r3, #24
    48b2:	bmi.n	48d8 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    48b4:	lsls	r2, r3, #25
    48b6:	bpl.n	48d4 <uart2_status_isr+0x74>
    48b8:	ldr	r3, [pc, #84]	; (4910 <uart2_status_isr+0xb0>)
    48ba:	ldrb	r3, [r3, #4]
    48bc:	lsls	r3, r3, #25
    48be:	bpl.n	48d4 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    48c0:	ldr	r3, [pc, #100]	; (4928 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    48c2:	ldr	r1, [pc, #104]	; (492c <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    48c4:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    48c6:	movs	r2, #0
    48c8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    48ca:	cbz	r3, 48ce <uart2_status_isr+0x6e>
    48cc:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    48ce:	ldr	r3, [pc, #64]	; (4910 <uart2_status_isr+0xb0>)
    48d0:	movs	r2, #44	; 0x2c
    48d2:	strb	r2, [r3, #3]
	}
}
    48d4:	pop	{r4, r5}
    48d6:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    48d8:	ldrb	r1, [r2, #4]
    48da:	lsls	r1, r1, #24
    48dc:	bpl.n	48b4 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    48de:	ldr	r1, [pc, #80]	; (4930 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    48e0:	ldr	r0, [pc, #64]	; (4924 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    48e2:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    48e4:	ldrb	r1, [r0, #0]
    48e6:	uxtb	r1, r1
		if (head == tail) {
    48e8:	cmp	r4, r1
    48ea:	beq.n	4908 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    48ec:	adds	r2, r1, #1
    48ee:	cmp	r2, #39	; 0x27
    48f0:	itt	hi
    48f2:	movhi	r1, #0
    48f4:	movhi	r2, r1
			n = tx_buffer[tail];
    48f6:	ldr	r5, [pc, #60]	; (4934 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    48f8:	ldr	r4, [pc, #20]	; (4910 <uart2_status_isr+0xb0>)
    48fa:	it	ls
    48fc:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    48fe:	ldrb	r2, [r5, r2]
    4900:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4902:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4904:	strb	r1, [r0, #0]
    4906:	b.n	48b4 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    4908:	movs	r1, #108	; 0x6c
    490a:	strb	r1, [r2, #3]
    490c:	b.n	48b4 <uart2_status_isr+0x54>
    490e:	nop
    4910:	.word	0x4006c000
    4914:	.word	0x1fff1cf8
    4918:	.word	0x1fff1cf9
    491c:	.word	0x1fff1d24
    4920:	.word	0x1fff1cf4
    4924:	.word	0x1fff1d65
    4928:	.word	0x1fff1d68
    492c:	.word	0x1fff1d64
    4930:	.word	0x1fff1d6c
    4934:	.word	0x1fff1cfc

00004938 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    4938:	bx	lr
    493a:	nop

0000493c <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    493c:	bx	lr
    493e:	nop

00004940 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    4940:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4942:	mrs	r2, PRIMASK
		__disable_irq();
    4946:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    4948:	ldrb	r3, [r0, #29]
    494a:	cbnz	r3, 495a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    494c:	ldrb	r1, [r0, #28]
    494e:	cmp	r1, #1
    4950:	beq.n	4964 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    4952:	cmp	r1, #3
    4954:	beq.n	4978 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    4956:	movs	r3, #1
    4958:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    495a:	cbnz	r2, 495e <EventResponder::triggerEventNotImmediate()+0x1e>
    495c:	cpsie	i
	}
	enableInterrupts(irq);
}
    495e:	ldr.w	r4, [sp], #4
    4962:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4964:	ldr	r4, [pc, #68]	; (49ac <EventResponder::triggerEventNotImmediate()+0x6c>)
    4966:	ldr	r1, [r4, #0]
    4968:	cbz	r1, 4994 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    496a:	ldr	r1, [pc, #68]	; (49b0 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    496c:	str	r3, [r0, #20]
				_prev = lastYield;
    496e:	ldr	r3, [r1, #0]
    4970:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    4972:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    4974:	str	r0, [r3, #20]
    4976:	b.n	4956 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    4978:	ldr	r4, [pc, #56]	; (49b4 <EventResponder::triggerEventNotImmediate()+0x74>)
    497a:	ldr	r1, [r4, #0]
    497c:	cbz	r1, 49a0 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    497e:	ldr	r1, [pc, #56]	; (49b8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    4980:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    4982:	ldr	r3, [r1, #0]
    4984:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    4986:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    4988:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    498a:	ldr	r3, [pc, #48]	; (49bc <EventResponder::triggerEventNotImmediate()+0x7c>)
    498c:	mov.w	r1, #268435456	; 0x10000000
    4990:	str	r1, [r3, #0]
    4992:	b.n	4956 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    4994:	ldr	r3, [pc, #24]	; (49b0 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    4996:	str	r1, [r0, #20]
				_prev = nullptr;
    4998:	str	r1, [r0, #24]
				firstYield = this;
    499a:	str	r0, [r4, #0]
				lastYield = this;
    499c:	str	r0, [r3, #0]
    499e:	b.n	4956 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    49a0:	ldr	r3, [pc, #20]	; (49b8 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    49a2:	str	r1, [r0, #20]
				_prev = nullptr;
    49a4:	str	r1, [r0, #24]
				firstInterrupt = this;
    49a6:	str	r0, [r4, #0]
				lastInterrupt = this;
    49a8:	str	r0, [r3, #0]
    49aa:	b.n	498a <EventResponder::triggerEventNotImmediate()+0x4a>
    49ac:	.word	0x1fff1d80
    49b0:	.word	0x1fff1d7c
    49b4:	.word	0x1fff1d70
    49b8:	.word	0x1fff1d74
    49bc:	.word	0xe000ed04

000049c0 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    49c0:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    49c2:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    49c4:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    49c6:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    49c8:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    49ca:	beq.n	49d4 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    49cc:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    49d0:	b.w	4940 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    49d4:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    49d6:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    49da:	bx	r3

000049dc <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    49dc:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    49de:	mrs	r2, PRIMASK
		__disable_irq();
    49e2:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    49e4:	ldr	r4, [pc, #48]	; (4a18 <EventResponder::runFromInterrupt()+0x3c>)
    49e6:	ldr	r0, [r4, #0]
		if (first) {
    49e8:	cbz	r0, 4a0c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    49ea:	ldr	r6, [pc, #48]	; (4a1c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    49ec:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    49ee:	ldr	r3, [r0, #20]
    49f0:	str	r3, [r4, #0]
			if (firstInterrupt) {
    49f2:	cbz	r3, 4a12 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    49f4:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    49f6:	cbnz	r2, 49fa <EventResponder::runFromInterrupt()+0x1e>
    49f8:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    49fa:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    49fc:	ldr	r3, [r0, #8]
    49fe:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4a00:	mrs	r2, PRIMASK
		__disable_irq();
    4a04:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4a06:	ldr	r0, [r4, #0]
		if (first) {
    4a08:	cmp	r0, #0
    4a0a:	bne.n	49ee <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4a0c:	cbnz	r2, 4a10 <EventResponder::runFromInterrupt()+0x34>
    4a0e:	cpsie	i
    4a10:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4a12:	str	r3, [r6, #0]
    4a14:	b.n	49f6 <EventResponder::runFromInterrupt()+0x1a>
    4a16:	nop
    4a18:	.word	0x1fff1d70
    4a1c:	.word	0x1fff1d74

00004a20 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    4a20:	b.w	49dc <EventResponder::runFromInterrupt()>

00004a24 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    4a24:	ldr	r2, [pc, #96]	; (4a88 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    4a26:	push	{r4, r5}
	if (listActive == nullptr) {
    4a28:	ldr	r4, [r2, #0]
    4a2a:	cmp	r4, #0
    4a2c:	beq.n	4a7e <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    4a2e:	ldr	r3, [r0, #0]
    4a30:	ldr	r1, [r4, #0]
    4a32:	cmp	r3, r1
    4a34:	bcs.n	4a54 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4a36:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4a38:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    4a3a:	str	r4, [r0, #8]
		_prev = nullptr;
    4a3c:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4a3e:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4a40:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    4a42:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4a44:	movs	r3, #2
    4a46:	strb	r3, [r0, #20]
}
    4a48:	pop	{r4, r5}
    4a4a:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4a4c:	ldr	r1, [r2, #0]
    4a4e:	cmp	r3, r1
    4a50:	mov	r4, r2
    4a52:	bcc.n	4a66 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4a54:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    4a56:	subs	r3, r3, r1
    4a58:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4a5a:	cmp	r2, #0
    4a5c:	bne.n	4a4c <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    4a5e:	str	r2, [r0, #8]
		_prev = timer;
    4a60:	str	r4, [r0, #12]
		timer->_next = this;
    4a62:	str	r0, [r4, #8]
    4a64:	b.n	4a44 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    4a66:	ldr	r2, [r2, #12]
    4a68:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    4a6a:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    4a6c:	str	r0, [r4, #12]
				_prev->_next = this;
    4a6e:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    4a70:	subs	r3, r1, r3
				_state = TimerActive;
    4a72:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    4a74:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    4a76:	str	r3, [r4, #0]
				_state = TimerActive;
    4a78:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    4a7a:	pop	{r4, r5}
    4a7c:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    4a7e:	str	r4, [r0, #8]
		_prev = nullptr;
    4a80:	str	r4, [r0, #12]
		listActive = this;
    4a82:	str	r0, [r2, #0]
    4a84:	b.n	4a44 <MillisTimer::addToActiveList()+0x20>
    4a86:	nop
    4a88:	.word	0x1fff1d78

00004a8c <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    4a8c:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    4a8e:	ldr	r6, [pc, #136]	; (4b18 <MillisTimer::runFromTimer()+0x8c>)
    4a90:	ldr	r4, [r6, #0]
	while (timer) {
    4a92:	cbz	r4, 4ae0 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4a94:	ldr	r3, [r4, #0]
    4a96:	cmp	r3, #0
    4a98:	bne.n	4b10 <MillisTimer::runFromTimer()+0x84>
    4a9a:	ldr	r7, [pc, #128]	; (4b1c <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    4a9c:	mov	r5, r3
    4a9e:	b.n	4aaa <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    4aa0:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4aa2:	cbz	r4, 4ae0 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4aa4:	ldr	r3, [r4, #0]
    4aa6:	cmp	r3, #0
    4aa8:	bne.n	4b10 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    4aaa:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    4aac:	cbz	r3, 4ab0 <MillisTimer::runFromTimer()+0x24>
    4aae:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    4ab0:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    4ab2:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4ab4:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    4ab6:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4ab8:	ldr	r3, [r3, #0]
    4aba:	cmp	r3, r7
    4abc:	bne.n	4b02 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4abe:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4ac0:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4ac2:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4ac4:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    4ac6:	beq.n	4b0a <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4ac8:	bl	4940 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    4acc:	ldr	r3, [r4, #4]
    4ace:	cmp	r3, #0
    4ad0:	beq.n	4aa0 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    4ad2:	str	r3, [r4, #0]
				timer->addToActiveList();
    4ad4:	mov	r0, r4
    4ad6:	bl	4a24 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    4ada:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4adc:	cmp	r4, #0
    4ade:	bne.n	4aa4 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4ae0:	mrs	r3, PRIMASK
		__disable_irq();
    4ae4:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4ae6:	ldr	r2, [pc, #56]	; (4b20 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4ae8:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4aea:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4aec:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    4aee:	cbnz	r3, 4af2 <MillisTimer::runFromTimer()+0x66>
    4af0:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    4af2:	cbz	r0, 4b00 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4af4:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    4af6:	bl	4a24 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    4afa:	mov	r0, r4
    4afc:	cmp	r0, #0
    4afe:	bne.n	4af4 <MillisTimer::runFromTimer()+0x68>
    4b00:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4b02:	mov	r2, r4
    4b04:	movs	r1, #0
    4b06:	blx	r3
    4b08:	b.n	4acc <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4b0a:	ldr	r3, [r0, #8]
    4b0c:	blx	r3
    4b0e:	b.n	4acc <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    4b10:	subs	r3, #1
    4b12:	str	r3, [r4, #0]
			break;
    4b14:	b.n	4ae0 <MillisTimer::runFromTimer()+0x54>
    4b16:	nop
    4b18:	.word	0x1fff1d78
    4b1c:	.word	0x000049c1
    4b20:	.word	0x1fff1d88

00004b24 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    4b24:	ldr	r2, [pc, #8]	; (4b30 <systick_isr+0xc>)
    4b26:	ldr	r3, [r2, #0]
    4b28:	adds	r3, #1
    4b2a:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4b2c:	b.w	4a8c <MillisTimer::runFromTimer()>
    4b30:	.word	0x1fff1910

00004b34 <__errno>:
    4b34:	ldr	r3, [pc, #4]	; (4b3c <__errno+0x8>)
    4b36:	ldr	r0, [r3, #0]
    4b38:	bx	lr
    4b3a:	nop
    4b3c:	.word	0x1fff11a8

00004b40 <__libc_init_array>:
    4b40:	push	{r4, r5, r6, lr}
    4b42:	ldr	r6, [pc, #60]	; (4b80 <__libc_init_array+0x40>)
    4b44:	ldr	r5, [pc, #60]	; (4b84 <__libc_init_array+0x44>)
    4b46:	subs	r6, r6, r5
    4b48:	asrs	r6, r6, #2
    4b4a:	it	ne
    4b4c:	movne	r4, #0
    4b4e:	beq.n	4b5c <__libc_init_array+0x1c>
    4b50:	adds	r4, #1
    4b52:	ldr.w	r3, [r5], #4
    4b56:	blx	r3
    4b58:	cmp	r6, r4
    4b5a:	bne.n	4b50 <__libc_init_array+0x10>
    4b5c:	ldr	r6, [pc, #40]	; (4b88 <__libc_init_array+0x48>)
    4b5e:	ldr	r5, [pc, #44]	; (4b8c <__libc_init_array+0x4c>)
    4b60:	subs	r6, r6, r5
    4b62:	bl	58bc <_init>
    4b66:	asrs	r6, r6, #2
    4b68:	it	ne
    4b6a:	movne	r4, #0
    4b6c:	beq.n	4b7c <__libc_init_array+0x3c>
    4b6e:	adds	r4, #1
    4b70:	ldr.w	r3, [r5], #4
    4b74:	blx	r3
    4b76:	cmp	r6, r4
    4b78:	bne.n	4b6e <__libc_init_array+0x2e>
    4b7a:	pop	{r4, r5, r6, pc}
    4b7c:	pop	{r4, r5, r6, pc}
    4b7e:	nop
    4b80:	.word	0x000058c8
    4b84:	.word	0x000058c8
    4b88:	.word	0x000058d4
    4b8c:	.word	0x000058c8

00004b90 <malloc>:
    4b90:	ldr	r3, [pc, #8]	; (4b9c <malloc+0xc>)
    4b92:	mov	r1, r0
    4b94:	ldr	r0, [r3, #0]
    4b96:	b.w	4ba0 <_malloc_r>
    4b9a:	nop
    4b9c:	.word	0x1fff11a8

00004ba0 <_malloc_r>:
    4ba0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ba4:	add.w	r5, r1, #11
    4ba8:	cmp	r5, #22
    4baa:	sub	sp, #12
    4bac:	mov	r6, r0
    4bae:	bls.w	4cf0 <_malloc_r+0x150>
    4bb2:	bics.w	r5, r5, #7
    4bb6:	bmi.w	4d38 <_malloc_r+0x198>
    4bba:	cmp	r1, r5
    4bbc:	bhi.w	4d38 <_malloc_r+0x198>
    4bc0:	bl	5110 <__malloc_lock>
    4bc4:	cmp.w	r5, #504	; 0x1f8
    4bc8:	bcc.w	5104 <_malloc_r+0x564>
    4bcc:	lsrs	r3, r5, #9
    4bce:	beq.w	4d46 <_malloc_r+0x1a6>
    4bd2:	cmp	r3, #4
    4bd4:	bhi.w	4ede <_malloc_r+0x33e>
    4bd8:	lsrs	r0, r5, #6
    4bda:	add.w	lr, r0, #57	; 0x39
    4bde:	mov.w	r3, lr, lsl #1
    4be2:	adds	r0, #56	; 0x38
    4be4:	ldr	r7, [pc, #784]	; (4ef8 <_malloc_r+0x358>)
    4be6:	add.w	r3, r7, r3, lsl #2
    4bea:	sub.w	r1, r3, #8
    4bee:	ldr	r4, [r3, #4]
    4bf0:	cmp	r1, r4
    4bf2:	bne.n	4c04 <_malloc_r+0x64>
    4bf4:	b.n	4d50 <_malloc_r+0x1b0>
    4bf6:	cmp	r2, #0
    4bf8:	bge.w	4d54 <_malloc_r+0x1b4>
    4bfc:	ldr	r4, [r4, #12]
    4bfe:	cmp	r1, r4
    4c00:	beq.w	4d50 <_malloc_r+0x1b0>
    4c04:	ldr	r3, [r4, #4]
    4c06:	bic.w	r3, r3, #3
    4c0a:	subs	r2, r3, r5
    4c0c:	cmp	r2, #15
    4c0e:	ble.n	4bf6 <_malloc_r+0x56>
    4c10:	ldr	r1, [pc, #740]	; (4ef8 <_malloc_r+0x358>)
    4c12:	ldr	r4, [r7, #16]
    4c14:	add.w	lr, r1, #8
    4c18:	cmp	r4, lr
    4c1a:	beq.w	4f84 <_malloc_r+0x3e4>
    4c1e:	ldr	r3, [r4, #4]
    4c20:	bic.w	r3, r3, #3
    4c24:	subs	r2, r3, r5
    4c26:	cmp	r2, #15
    4c28:	bgt.w	4f5e <_malloc_r+0x3be>
    4c2c:	cmp	r2, #0
    4c2e:	str.w	lr, [r1, #20]
    4c32:	str.w	lr, [r1, #16]
    4c36:	bge.w	4d76 <_malloc_r+0x1d6>
    4c3a:	cmp.w	r3, #512	; 0x200
    4c3e:	bcs.w	4f10 <_malloc_r+0x370>
    4c42:	lsrs	r3, r3, #3
    4c44:	add.w	ip, r3, #1
    4c48:	movs	r2, #1
    4c4a:	asrs	r3, r3, #2
    4c4c:	lsl.w	r3, r2, r3
    4c50:	ldr	r2, [r1, #4]
    4c52:	ldr.w	r8, [r1, ip, lsl #3]
    4c56:	str.w	r8, [r4, #8]
    4c5a:	add.w	r9, r1, ip, lsl #3
    4c5e:	orrs	r2, r3
    4c60:	sub.w	r3, r9, #8
    4c64:	str	r3, [r4, #12]
    4c66:	str	r2, [r1, #4]
    4c68:	str.w	r4, [r1, ip, lsl #3]
    4c6c:	str.w	r4, [r8, #12]
    4c70:	asrs	r3, r0, #2
    4c72:	movs	r4, #1
    4c74:	lsls	r4, r3
    4c76:	cmp	r4, r2
    4c78:	bhi.w	4d90 <_malloc_r+0x1f0>
    4c7c:	tst	r4, r2
    4c7e:	bne.n	4c8e <_malloc_r+0xee>
    4c80:	bic.w	r0, r0, #3
    4c84:	lsls	r4, r4, #1
    4c86:	tst	r4, r2
    4c88:	add.w	r0, r0, #4
    4c8c:	beq.n	4c84 <_malloc_r+0xe4>
    4c8e:	add.w	r9, r7, r0, lsl #3
    4c92:	mov	ip, r9
    4c94:	mov	r8, r0
    4c96:	ldr.w	r1, [ip, #12]
    4c9a:	cmp	ip, r1
    4c9c:	bne.n	4cae <_malloc_r+0x10e>
    4c9e:	b.n	4f88 <_malloc_r+0x3e8>
    4ca0:	cmp	r2, #0
    4ca2:	bge.w	4fa8 <_malloc_r+0x408>
    4ca6:	ldr	r1, [r1, #12]
    4ca8:	cmp	ip, r1
    4caa:	beq.w	4f88 <_malloc_r+0x3e8>
    4cae:	ldr	r3, [r1, #4]
    4cb0:	bic.w	r3, r3, #3
    4cb4:	subs	r2, r3, r5
    4cb6:	cmp	r2, #15
    4cb8:	ble.n	4ca0 <_malloc_r+0x100>
    4cba:	mov	r4, r1
    4cbc:	ldr.w	ip, [r1, #12]
    4cc0:	ldr.w	r8, [r4, #8]!
    4cc4:	adds	r3, r1, r5
    4cc6:	orr.w	r5, r5, #1
    4cca:	str	r5, [r1, #4]
    4ccc:	orr.w	r1, r2, #1
    4cd0:	str.w	ip, [r8, #12]
    4cd4:	mov	r0, r6
    4cd6:	str.w	r8, [ip, #8]
    4cda:	str	r3, [r7, #20]
    4cdc:	str	r3, [r7, #16]
    4cde:	str.w	lr, [r3, #12]
    4ce2:	str.w	lr, [r3, #8]
    4ce6:	str	r1, [r3, #4]
    4ce8:	str	r2, [r3, r2]
    4cea:	bl	5114 <__malloc_unlock>
    4cee:	b.n	4d30 <_malloc_r+0x190>
    4cf0:	cmp	r1, #16
    4cf2:	bhi.n	4d38 <_malloc_r+0x198>
    4cf4:	bl	5110 <__malloc_lock>
    4cf8:	movs	r5, #16
    4cfa:	movs	r3, #6
    4cfc:	movs	r0, #2
    4cfe:	ldr	r7, [pc, #504]	; (4ef8 <_malloc_r+0x358>)
    4d00:	add.w	r3, r7, r3, lsl #2
    4d04:	sub.w	r2, r3, #8
    4d08:	ldr	r4, [r3, #4]
    4d0a:	cmp	r4, r2
    4d0c:	beq.w	4f9a <_malloc_r+0x3fa>
    4d10:	ldr	r3, [r4, #4]
    4d12:	ldr	r1, [r4, #12]
    4d14:	ldr	r5, [r4, #8]
    4d16:	bic.w	r3, r3, #3
    4d1a:	add	r3, r4
    4d1c:	mov	r0, r6
    4d1e:	ldr	r2, [r3, #4]
    4d20:	str	r1, [r5, #12]
    4d22:	orr.w	r2, r2, #1
    4d26:	str	r5, [r1, #8]
    4d28:	str	r2, [r3, #4]
    4d2a:	bl	5114 <__malloc_unlock>
    4d2e:	adds	r4, #8
    4d30:	mov	r0, r4
    4d32:	add	sp, #12
    4d34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d38:	movs	r4, #0
    4d3a:	movs	r3, #12
    4d3c:	mov	r0, r4
    4d3e:	str	r3, [r6, #0]
    4d40:	add	sp, #12
    4d42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d46:	movs	r3, #128	; 0x80
    4d48:	mov.w	lr, #64	; 0x40
    4d4c:	movs	r0, #63	; 0x3f
    4d4e:	b.n	4be4 <_malloc_r+0x44>
    4d50:	mov	r0, lr
    4d52:	b.n	4c10 <_malloc_r+0x70>
    4d54:	add	r3, r4
    4d56:	ldr	r1, [r4, #12]
    4d58:	ldr	r2, [r3, #4]
    4d5a:	ldr	r5, [r4, #8]
    4d5c:	orr.w	r2, r2, #1
    4d60:	str	r1, [r5, #12]
    4d62:	mov	r0, r6
    4d64:	str	r5, [r1, #8]
    4d66:	str	r2, [r3, #4]
    4d68:	bl	5114 <__malloc_unlock>
    4d6c:	adds	r4, #8
    4d6e:	mov	r0, r4
    4d70:	add	sp, #12
    4d72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d76:	add	r3, r4
    4d78:	mov	r0, r6
    4d7a:	ldr	r2, [r3, #4]
    4d7c:	orr.w	r2, r2, #1
    4d80:	str	r2, [r3, #4]
    4d82:	bl	5114 <__malloc_unlock>
    4d86:	adds	r4, #8
    4d88:	mov	r0, r4
    4d8a:	add	sp, #12
    4d8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d90:	ldr	r4, [r7, #8]
    4d92:	ldr	r3, [r4, #4]
    4d94:	bic.w	r8, r3, #3
    4d98:	cmp	r8, r5
    4d9a:	bcc.n	4da6 <_malloc_r+0x206>
    4d9c:	rsb	r3, r5, r8
    4da0:	cmp	r3, #15
    4da2:	bgt.w	4ebe <_malloc_r+0x31e>
    4da6:	ldr	r3, [pc, #340]	; (4efc <_malloc_r+0x35c>)
    4da8:	ldr.w	r9, [pc, #352]	; 4f0c <_malloc_r+0x36c>
    4dac:	ldr	r2, [r3, #0]
    4dae:	ldr.w	r3, [r9]
    4db2:	adds	r3, #1
    4db4:	add	r2, r5
    4db6:	add.w	sl, r4, r8
    4dba:	beq.w	507e <_malloc_r+0x4de>
    4dbe:	add.w	r2, r2, #4096	; 0x1000
    4dc2:	adds	r2, #15
    4dc4:	bic.w	r2, r2, #4080	; 0xff0
    4dc8:	bic.w	r2, r2, #15
    4dcc:	mov	r1, r2
    4dce:	mov	r0, r6
    4dd0:	str	r2, [sp, #4]
    4dd2:	bl	5118 <_sbrk_r>
    4dd6:	cmp.w	r0, #4294967295
    4dda:	mov	fp, r0
    4ddc:	ldr	r2, [sp, #4]
    4dde:	beq.w	5092 <_malloc_r+0x4f2>
    4de2:	cmp	sl, r0
    4de4:	bhi.w	4fe0 <_malloc_r+0x440>
    4de8:	ldr	r3, [pc, #276]	; (4f00 <_malloc_r+0x360>)
    4dea:	ldr	r1, [r3, #0]
    4dec:	cmp	sl, fp
    4dee:	add	r1, r2
    4df0:	str	r1, [r3, #0]
    4df2:	beq.w	509c <_malloc_r+0x4fc>
    4df6:	ldr.w	r0, [r9]
    4dfa:	ldr.w	lr, [pc, #272]	; 4f0c <_malloc_r+0x36c>
    4dfe:	adds	r0, #1
    4e00:	ittet	ne
    4e02:	rsbne	sl, sl, fp
    4e06:	addne	r1, sl
    4e08:	streq.w	fp, [lr]
    4e0c:	strne	r1, [r3, #0]
    4e0e:	ands.w	r1, fp, #7
    4e12:	beq.w	5044 <_malloc_r+0x4a4>
    4e16:	rsb	r0, r1, #8
    4e1a:	rsb	r1, r1, #4096	; 0x1000
    4e1e:	add	fp, r0
    4e20:	adds	r1, #8
    4e22:	add	r2, fp
    4e24:	ubfx	r2, r2, #0, #12
    4e28:	rsb	r9, r2, r1
    4e2c:	mov	r1, r9
    4e2e:	mov	r0, r6
    4e30:	str	r3, [sp, #4]
    4e32:	bl	5118 <_sbrk_r>
    4e36:	adds	r3, r0, #1
    4e38:	ldr	r3, [sp, #4]
    4e3a:	beq.w	50bc <_malloc_r+0x51c>
    4e3e:	rsb	r2, fp, r0
    4e42:	add	r2, r9
    4e44:	orr.w	r2, r2, #1
    4e48:	ldr	r1, [r3, #0]
    4e4a:	str.w	fp, [r7, #8]
    4e4e:	add	r1, r9
    4e50:	cmp	r4, r7
    4e52:	str.w	r2, [fp, #4]
    4e56:	str	r1, [r3, #0]
    4e58:	ldr.w	r9, [pc, #164]	; 4f00 <_malloc_r+0x360>
    4e5c:	beq.n	4e8c <_malloc_r+0x2ec>
    4e5e:	cmp.w	r8, #15
    4e62:	bls.w	5060 <_malloc_r+0x4c0>
    4e66:	ldr	r2, [r4, #4]
    4e68:	sub.w	r3, r8, #12
    4e6c:	bic.w	r3, r3, #7
    4e70:	adds	r0, r4, r3
    4e72:	and.w	r2, r2, #1
    4e76:	mov.w	lr, #5
    4e7a:	orrs	r2, r3
    4e7c:	cmp	r3, #15
    4e7e:	str	r2, [r4, #4]
    4e80:	str.w	lr, [r0, #4]
    4e84:	str.w	lr, [r0, #8]
    4e88:	bhi.w	50c4 <_malloc_r+0x524>
    4e8c:	ldr	r3, [pc, #116]	; (4f04 <_malloc_r+0x364>)
    4e8e:	ldr	r4, [r7, #8]
    4e90:	ldr	r2, [r3, #0]
    4e92:	cmp	r1, r2
    4e94:	it	hi
    4e96:	strhi	r1, [r3, #0]
    4e98:	ldr	r3, [pc, #108]	; (4f08 <_malloc_r+0x368>)
    4e9a:	ldr	r2, [r3, #0]
    4e9c:	cmp	r1, r2
    4e9e:	ldr	r2, [r4, #4]
    4ea0:	it	hi
    4ea2:	strhi	r1, [r3, #0]
    4ea4:	bic.w	r2, r2, #3
    4ea8:	cmp	r5, r2
    4eaa:	sub.w	r3, r2, r5
    4eae:	bhi.n	4eb4 <_malloc_r+0x314>
    4eb0:	cmp	r3, #15
    4eb2:	bgt.n	4ebe <_malloc_r+0x31e>
    4eb4:	mov	r0, r6
    4eb6:	bl	5114 <__malloc_unlock>
    4eba:	movs	r4, #0
    4ebc:	b.n	4d30 <_malloc_r+0x190>
    4ebe:	adds	r2, r4, r5
    4ec0:	orr.w	r3, r3, #1
    4ec4:	orr.w	r5, r5, #1
    4ec8:	str	r5, [r4, #4]
    4eca:	mov	r0, r6
    4ecc:	str	r2, [r7, #8]
    4ece:	str	r3, [r2, #4]
    4ed0:	bl	5114 <__malloc_unlock>
    4ed4:	adds	r4, #8
    4ed6:	mov	r0, r4
    4ed8:	add	sp, #12
    4eda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ede:	cmp	r3, #20
    4ee0:	bls.n	4fc6 <_malloc_r+0x426>
    4ee2:	cmp	r3, #84	; 0x54
    4ee4:	bhi.w	5030 <_malloc_r+0x490>
    4ee8:	lsrs	r0, r5, #12
    4eea:	add.w	lr, r0, #111	; 0x6f
    4eee:	mov.w	r3, lr, lsl #1
    4ef2:	adds	r0, #110	; 0x6e
    4ef4:	b.n	4be4 <_malloc_r+0x44>
    4ef6:	nop
    4ef8:	.word	0x1fff11ac
    4efc:	.word	0x1fff1d94
    4f00:	.word	0x1fff1d98
    4f04:	.word	0x1fff1d90
    4f08:	.word	0x1fff1d8c
    4f0c:	.word	0x1fff15b8
    4f10:	lsrs	r2, r3, #9
    4f12:	cmp	r2, #4
    4f14:	bls.n	4fd4 <_malloc_r+0x434>
    4f16:	cmp	r2, #20
    4f18:	bhi.w	5082 <_malloc_r+0x4e2>
    4f1c:	add.w	r1, r2, #92	; 0x5c
    4f20:	lsls	r1, r1, #1
    4f22:	adds	r2, #91	; 0x5b
    4f24:	add.w	ip, r7, r1, lsl #2
    4f28:	ldr.w	r1, [r7, r1, lsl #2]
    4f2c:	ldr.w	r8, [pc, #476]	; 510c <_malloc_r+0x56c>
    4f30:	sub.w	ip, ip, #8
    4f34:	cmp	ip, r1
    4f36:	beq.w	504a <_malloc_r+0x4aa>
    4f3a:	ldr	r2, [r1, #4]
    4f3c:	bic.w	r2, r2, #3
    4f40:	cmp	r3, r2
    4f42:	bcs.n	4f4a <_malloc_r+0x3aa>
    4f44:	ldr	r1, [r1, #8]
    4f46:	cmp	ip, r1
    4f48:	bne.n	4f3a <_malloc_r+0x39a>
    4f4a:	ldr.w	ip, [r1, #12]
    4f4e:	ldr	r2, [r7, #4]
    4f50:	str.w	ip, [r4, #12]
    4f54:	str	r1, [r4, #8]
    4f56:	str.w	r4, [ip, #8]
    4f5a:	str	r4, [r1, #12]
    4f5c:	b.n	4c70 <_malloc_r+0xd0>
    4f5e:	adds	r3, r4, r5
    4f60:	orr.w	r7, r2, #1
    4f64:	orr.w	r5, r5, #1
    4f68:	str	r5, [r4, #4]
    4f6a:	mov	r0, r6
    4f6c:	str	r3, [r1, #20]
    4f6e:	str	r3, [r1, #16]
    4f70:	str.w	lr, [r3, #12]
    4f74:	str.w	lr, [r3, #8]
    4f78:	str	r7, [r3, #4]
    4f7a:	str	r2, [r3, r2]
    4f7c:	adds	r4, #8
    4f7e:	bl	5114 <__malloc_unlock>
    4f82:	b.n	4d30 <_malloc_r+0x190>
    4f84:	ldr	r2, [r1, #4]
    4f86:	b.n	4c70 <_malloc_r+0xd0>
    4f88:	add.w	r8, r8, #1
    4f8c:	tst.w	r8, #3
    4f90:	add.w	ip, ip, #8
    4f94:	bne.w	4c96 <_malloc_r+0xf6>
    4f98:	b.n	4ffc <_malloc_r+0x45c>
    4f9a:	ldr	r4, [r3, #12]
    4f9c:	cmp	r3, r4
    4f9e:	it	eq
    4fa0:	addeq	r0, #2
    4fa2:	beq.w	4c10 <_malloc_r+0x70>
    4fa6:	b.n	4d10 <_malloc_r+0x170>
    4fa8:	add	r3, r1
    4faa:	mov	r4, r1
    4fac:	ldr	r2, [r3, #4]
    4fae:	ldr	r1, [r1, #12]
    4fb0:	ldr.w	r5, [r4, #8]!
    4fb4:	orr.w	r2, r2, #1
    4fb8:	str	r2, [r3, #4]
    4fba:	mov	r0, r6
    4fbc:	str	r1, [r5, #12]
    4fbe:	str	r5, [r1, #8]
    4fc0:	bl	5114 <__malloc_unlock>
    4fc4:	b.n	4d30 <_malloc_r+0x190>
    4fc6:	add.w	lr, r3, #92	; 0x5c
    4fca:	add.w	r0, r3, #91	; 0x5b
    4fce:	mov.w	r3, lr, lsl #1
    4fd2:	b.n	4be4 <_malloc_r+0x44>
    4fd4:	lsrs	r2, r3, #6
    4fd6:	add.w	r1, r2, #57	; 0x39
    4fda:	lsls	r1, r1, #1
    4fdc:	adds	r2, #56	; 0x38
    4fde:	b.n	4f24 <_malloc_r+0x384>
    4fe0:	cmp	r4, r7
    4fe2:	ldr	r3, [pc, #296]	; (510c <_malloc_r+0x56c>)
    4fe4:	beq.w	4de8 <_malloc_r+0x248>
    4fe8:	ldr	r4, [r3, #8]
    4fea:	ldr	r2, [r4, #4]
    4fec:	bic.w	r2, r2, #3
    4ff0:	b.n	4ea8 <_malloc_r+0x308>
    4ff2:	ldr.w	r3, [r9], #-8
    4ff6:	cmp	r9, r3
    4ff8:	bne.w	5100 <_malloc_r+0x560>
    4ffc:	tst.w	r0, #3
    5000:	add.w	r0, r0, #4294967295
    5004:	bne.n	4ff2 <_malloc_r+0x452>
    5006:	ldr	r3, [r7, #4]
    5008:	bic.w	r3, r3, r4
    500c:	str	r3, [r7, #4]
    500e:	lsls	r4, r4, #1
    5010:	cmp	r4, r3
    5012:	bhi.w	4d90 <_malloc_r+0x1f0>
    5016:	cmp	r4, #0
    5018:	beq.w	4d90 <_malloc_r+0x1f0>
    501c:	tst	r4, r3
    501e:	mov	r0, r8
    5020:	bne.w	4c8e <_malloc_r+0xee>
    5024:	lsls	r4, r4, #1
    5026:	tst	r4, r3
    5028:	add.w	r0, r0, #4
    502c:	beq.n	5024 <_malloc_r+0x484>
    502e:	b.n	4c8e <_malloc_r+0xee>
    5030:	cmp.w	r3, #340	; 0x154
    5034:	bhi.n	5068 <_malloc_r+0x4c8>
    5036:	lsrs	r0, r5, #15
    5038:	add.w	lr, r0, #120	; 0x78
    503c:	mov.w	r3, lr, lsl #1
    5040:	adds	r0, #119	; 0x77
    5042:	b.n	4be4 <_malloc_r+0x44>
    5044:	mov.w	r1, #4096	; 0x1000
    5048:	b.n	4e22 <_malloc_r+0x282>
    504a:	movs	r1, #1
    504c:	ldr.w	r3, [r8, #4]
    5050:	asrs	r2, r2, #2
    5052:	lsl.w	r2, r1, r2
    5056:	orrs	r2, r3
    5058:	str.w	r2, [r8, #4]
    505c:	mov	r1, ip
    505e:	b.n	4f50 <_malloc_r+0x3b0>
    5060:	movs	r3, #1
    5062:	str.w	r3, [fp, #4]
    5066:	b.n	4eb4 <_malloc_r+0x314>
    5068:	movw	r2, #1364	; 0x554
    506c:	cmp	r3, r2
    506e:	bhi.n	50b2 <_malloc_r+0x512>
    5070:	lsrs	r0, r5, #18
    5072:	add.w	lr, r0, #125	; 0x7d
    5076:	mov.w	r3, lr, lsl #1
    507a:	adds	r0, #124	; 0x7c
    507c:	b.n	4be4 <_malloc_r+0x44>
    507e:	adds	r2, #16
    5080:	b.n	4dcc <_malloc_r+0x22c>
    5082:	cmp	r2, #84	; 0x54
    5084:	bhi.n	50d4 <_malloc_r+0x534>
    5086:	lsrs	r2, r3, #12
    5088:	add.w	r1, r2, #111	; 0x6f
    508c:	lsls	r1, r1, #1
    508e:	adds	r2, #110	; 0x6e
    5090:	b.n	4f24 <_malloc_r+0x384>
    5092:	ldr	r4, [r7, #8]
    5094:	ldr	r2, [r4, #4]
    5096:	bic.w	r2, r2, #3
    509a:	b.n	4ea8 <_malloc_r+0x308>
    509c:	ubfx	r0, sl, #0, #12
    50a0:	cmp	r0, #0
    50a2:	bne.w	4df6 <_malloc_r+0x256>
    50a6:	add	r2, r8
    50a8:	ldr	r3, [r7, #8]
    50aa:	orr.w	r2, r2, #1
    50ae:	str	r2, [r3, #4]
    50b0:	b.n	4e8c <_malloc_r+0x2ec>
    50b2:	movs	r3, #254	; 0xfe
    50b4:	mov.w	lr, #127	; 0x7f
    50b8:	movs	r0, #126	; 0x7e
    50ba:	b.n	4be4 <_malloc_r+0x44>
    50bc:	movs	r2, #1
    50be:	mov.w	r9, #0
    50c2:	b.n	4e48 <_malloc_r+0x2a8>
    50c4:	add.w	r1, r4, #8
    50c8:	mov	r0, r6
    50ca:	bl	5300 <_free_r>
    50ce:	ldr.w	r1, [r9]
    50d2:	b.n	4e8c <_malloc_r+0x2ec>
    50d4:	cmp.w	r2, #340	; 0x154
    50d8:	bhi.n	50e6 <_malloc_r+0x546>
    50da:	lsrs	r2, r3, #15
    50dc:	add.w	r1, r2, #120	; 0x78
    50e0:	lsls	r1, r1, #1
    50e2:	adds	r2, #119	; 0x77
    50e4:	b.n	4f24 <_malloc_r+0x384>
    50e6:	movw	r1, #1364	; 0x554
    50ea:	cmp	r2, r1
    50ec:	bhi.n	50fa <_malloc_r+0x55a>
    50ee:	lsrs	r2, r3, #18
    50f0:	add.w	r1, r2, #125	; 0x7d
    50f4:	lsls	r1, r1, #1
    50f6:	adds	r2, #124	; 0x7c
    50f8:	b.n	4f24 <_malloc_r+0x384>
    50fa:	movs	r1, #254	; 0xfe
    50fc:	movs	r2, #126	; 0x7e
    50fe:	b.n	4f24 <_malloc_r+0x384>
    5100:	ldr	r3, [r7, #4]
    5102:	b.n	500e <_malloc_r+0x46e>
    5104:	lsrs	r0, r5, #3
    5106:	adds	r3, r0, #1
    5108:	lsls	r3, r3, #1
    510a:	b.n	4cfe <_malloc_r+0x15e>
    510c:	.word	0x1fff11ac

00005110 <__malloc_lock>:
    5110:	bx	lr
    5112:	nop

00005114 <__malloc_unlock>:
    5114:	bx	lr
    5116:	nop

00005118 <_sbrk_r>:
    5118:	push	{r3, r4, r5, lr}
    511a:	ldr	r4, [pc, #28]	; (5138 <_sbrk_r+0x20>)
    511c:	movs	r3, #0
    511e:	mov	r5, r0
    5120:	mov	r0, r1
    5122:	str	r3, [r4, #0]
    5124:	bl	44ac <_sbrk>
    5128:	adds	r3, r0, #1
    512a:	beq.n	512e <_sbrk_r+0x16>
    512c:	pop	{r3, r4, r5, pc}
    512e:	ldr	r3, [r4, #0]
    5130:	cmp	r3, #0
    5132:	beq.n	512c <_sbrk_r+0x14>
    5134:	str	r3, [r5, #0]
    5136:	pop	{r3, r4, r5, pc}
    5138:	.word	0x1fff1f04
    513c:	.word	0xffffffff

00005140 <strlen>:
    5140:	pld	[r0]
    5144:	strd	r4, r5, [sp, #-8]!
    5148:	bic.w	r1, r0, #7
    514c:	mvn.w	ip, #0
    5150:	ands.w	r4, r0, #7
    5154:	pld	[r1, #32]
    5158:	bne.w	51ee <strlen+0xae>
    515c:	mov.w	r4, #0
    5160:	mvn.w	r0, #7
    5164:	ldrd	r2, r3, [r1]
    5168:	pld	[r1, #64]	; 0x40
    516c:	add.w	r0, r0, #8
    5170:	uadd8	r2, r2, ip
    5174:	sel	r2, r4, ip
    5178:	uadd8	r3, r3, ip
    517c:	sel	r3, r2, ip
    5180:	cbnz	r3, 51d6 <strlen+0x96>
    5182:	ldrd	r2, r3, [r1, #8]
    5186:	uadd8	r2, r2, ip
    518a:	add.w	r0, r0, #8
    518e:	sel	r2, r4, ip
    5192:	uadd8	r3, r3, ip
    5196:	sel	r3, r2, ip
    519a:	cbnz	r3, 51d6 <strlen+0x96>
    519c:	ldrd	r2, r3, [r1, #16]
    51a0:	uadd8	r2, r2, ip
    51a4:	add.w	r0, r0, #8
    51a8:	sel	r2, r4, ip
    51ac:	uadd8	r3, r3, ip
    51b0:	sel	r3, r2, ip
    51b4:	cbnz	r3, 51d6 <strlen+0x96>
    51b6:	ldrd	r2, r3, [r1, #24]
    51ba:	add.w	r1, r1, #32
    51be:	uadd8	r2, r2, ip
    51c2:	add.w	r0, r0, #8
    51c6:	sel	r2, r4, ip
    51ca:	uadd8	r3, r3, ip
    51ce:	sel	r3, r2, ip
    51d2:	cmp	r3, #0
    51d4:	beq.n	5164 <strlen+0x24>
    51d6:	cmp	r2, #0
    51d8:	itt	eq
    51da:	addeq	r0, #4
    51dc:	moveq	r2, r3
    51de:	rev	r2, r2
    51e0:	clz	r2, r2
    51e4:	ldrd	r4, r5, [sp], #8
    51e8:	add.w	r0, r0, r2, lsr #3
    51ec:	bx	lr
    51ee:	ldrd	r2, r3, [r1]
    51f2:	and.w	r5, r4, #3
    51f6:	rsb	r0, r4, #0
    51fa:	mov.w	r5, r5, lsl #3
    51fe:	tst.w	r4, #4
    5202:	pld	[r1, #64]	; 0x40
    5206:	lsl.w	r5, ip, r5
    520a:	orn	r2, r2, r5
    520e:	itt	ne
    5210:	ornne	r3, r3, r5
    5214:	movne	r2, ip
    5216:	mov.w	r4, #0
    521a:	b.n	5170 <strlen+0x30>

0000521c <register_fini>:
    521c:	ldr	r3, [pc, #8]	; (5228 <register_fini+0xc>)
    521e:	cbz	r3, 5226 <register_fini+0xa>
    5220:	ldr	r0, [pc, #8]	; (522c <register_fini+0x10>)
    5222:	b.w	5230 <atexit>
    5226:	bx	lr
    5228:	.word	0x00000000
    522c:	.word	0x0000523d

00005230 <atexit>:
    5230:	movs	r3, #0
    5232:	mov	r1, r0
    5234:	mov	r2, r3
    5236:	mov	r0, r3
    5238:	b.w	54d0 <__register_exitproc>

0000523c <__libc_fini_array>:
    523c:	push	{r3, r4, r5, lr}
    523e:	ldr	r5, [pc, #28]	; (525c <__libc_fini_array+0x20>)
    5240:	ldr	r4, [pc, #28]	; (5260 <__libc_fini_array+0x24>)
    5242:	subs	r4, r5, r4
    5244:	asrs	r4, r4, #2
    5246:	beq.n	5254 <__libc_fini_array+0x18>
    5248:	subs	r4, #1
    524a:	ldr.w	r3, [r5, #-4]!
    524e:	blx	r3
    5250:	cmp	r4, #0
    5252:	bne.n	5248 <__libc_fini_array+0xc>
    5254:	ldmia.w	sp!, {r3, r4, r5, lr}
    5258:	b.w	58d4 <__init_array_end>
	...

00005264 <_malloc_trim_r>:
    5264:	push	{r3, r4, r5, r6, r7, lr}
    5266:	ldr	r7, [pc, #140]	; (52f4 <_malloc_trim_r+0x90>)
    5268:	mov	r4, r1
    526a:	mov	r6, r0
    526c:	bl	5110 <__malloc_lock>
    5270:	ldr	r3, [r7, #8]
    5272:	ldr	r5, [r3, #4]
    5274:	bic.w	r5, r5, #3
    5278:	subs	r1, r5, r4
    527a:	addw	r1, r1, #4079	; 0xfef
    527e:	bic.w	r1, r1, #4080	; 0xff0
    5282:	bic.w	r1, r1, #15
    5286:	sub.w	r4, r1, #4096	; 0x1000
    528a:	cmp.w	r4, #4096	; 0x1000
    528e:	blt.n	52a0 <_malloc_trim_r+0x3c>
    5290:	movs	r1, #0
    5292:	mov	r0, r6
    5294:	bl	5118 <_sbrk_r>
    5298:	ldr	r3, [r7, #8]
    529a:	add	r3, r5
    529c:	cmp	r0, r3
    529e:	beq.n	52aa <_malloc_trim_r+0x46>
    52a0:	mov	r0, r6
    52a2:	bl	5114 <__malloc_unlock>
    52a6:	movs	r0, #0
    52a8:	pop	{r3, r4, r5, r6, r7, pc}
    52aa:	negs	r1, r4
    52ac:	mov	r0, r6
    52ae:	bl	5118 <_sbrk_r>
    52b2:	adds	r0, #1
    52b4:	beq.n	52d2 <_malloc_trim_r+0x6e>
    52b6:	ldr	r3, [pc, #64]	; (52f8 <_malloc_trim_r+0x94>)
    52b8:	ldr	r2, [r7, #8]
    52ba:	ldr	r1, [r3, #0]
    52bc:	subs	r5, r5, r4
    52be:	orr.w	r5, r5, #1
    52c2:	mov	r0, r6
    52c4:	subs	r1, r1, r4
    52c6:	str	r5, [r2, #4]
    52c8:	str	r1, [r3, #0]
    52ca:	bl	5114 <__malloc_unlock>
    52ce:	movs	r0, #1
    52d0:	pop	{r3, r4, r5, r6, r7, pc}
    52d2:	movs	r1, #0
    52d4:	mov	r0, r6
    52d6:	bl	5118 <_sbrk_r>
    52da:	ldr	r2, [r7, #8]
    52dc:	subs	r3, r0, r2
    52de:	cmp	r3, #15
    52e0:	ble.n	52a0 <_malloc_trim_r+0x3c>
    52e2:	ldr	r4, [pc, #24]	; (52fc <_malloc_trim_r+0x98>)
    52e4:	ldr	r1, [pc, #16]	; (52f8 <_malloc_trim_r+0x94>)
    52e6:	ldr	r4, [r4, #0]
    52e8:	orr.w	r3, r3, #1
    52ec:	subs	r0, r0, r4
    52ee:	str	r3, [r2, #4]
    52f0:	str	r0, [r1, #0]
    52f2:	b.n	52a0 <_malloc_trim_r+0x3c>
    52f4:	.word	0x1fff11ac
    52f8:	.word	0x1fff1d98
    52fc:	.word	0x1fff15b8

00005300 <_free_r>:
    5300:	cmp	r1, #0
    5302:	beq.n	5390 <_free_r+0x90>
    5304:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5308:	mov	r5, r1
    530a:	mov	r8, r0
    530c:	bl	5110 <__malloc_lock>
    5310:	ldr.w	r7, [r5, #-4]
    5314:	ldr	r1, [pc, #424]	; (54c0 <_free_r+0x1c0>)
    5316:	bic.w	r3, r7, #1
    531a:	sub.w	r4, r5, #8
    531e:	adds	r2, r4, r3
    5320:	ldr	r6, [r1, #8]
    5322:	ldr	r0, [r2, #4]
    5324:	cmp	r2, r6
    5326:	bic.w	r0, r0, #3
    532a:	beq.n	53f2 <_free_r+0xf2>
    532c:	lsls	r6, r7, #31
    532e:	str	r0, [r2, #4]
    5330:	bmi.n	534a <_free_r+0x4a>
    5332:	ldr.w	r7, [r5, #-8]
    5336:	subs	r4, r4, r7
    5338:	add.w	lr, r1, #8
    533c:	ldr	r5, [r4, #8]
    533e:	cmp	r5, lr
    5340:	add	r3, r7
    5342:	beq.n	5424 <_free_r+0x124>
    5344:	ldr	r7, [r4, #12]
    5346:	str	r7, [r5, #12]
    5348:	str	r5, [r7, #8]
    534a:	adds	r5, r2, r0
    534c:	ldr	r5, [r5, #4]
    534e:	lsls	r5, r5, #31
    5350:	bpl.n	53d8 <_free_r+0xd8>
    5352:	orr.w	r2, r3, #1
    5356:	str	r2, [r4, #4]
    5358:	str	r3, [r4, r3]
    535a:	cmp.w	r3, #512	; 0x200
    535e:	bcs.n	5392 <_free_r+0x92>
    5360:	lsrs	r3, r3, #3
    5362:	adds	r2, r3, #1
    5364:	ldr	r5, [r1, #4]
    5366:	ldr.w	r7, [r1, r2, lsl #3]
    536a:	str	r7, [r4, #8]
    536c:	movs	r0, #1
    536e:	asrs	r3, r3, #2
    5370:	lsl.w	r3, r0, r3
    5374:	add.w	r0, r1, r2, lsl #3
    5378:	orrs	r5, r3
    537a:	subs	r0, #8
    537c:	str	r0, [r4, #12]
    537e:	str	r5, [r1, #4]
    5380:	str.w	r4, [r1, r2, lsl #3]
    5384:	str	r4, [r7, #12]
    5386:	mov	r0, r8
    5388:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    538c:	b.w	5114 <__malloc_unlock>
    5390:	bx	lr
    5392:	lsrs	r2, r3, #9
    5394:	cmp	r2, #4
    5396:	bhi.n	5440 <_free_r+0x140>
    5398:	lsrs	r2, r3, #6
    539a:	add.w	r7, r2, #57	; 0x39
    539e:	lsls	r7, r7, #1
    53a0:	add.w	r5, r2, #56	; 0x38
    53a4:	add.w	r0, r1, r7, lsl #2
    53a8:	ldr.w	r2, [r1, r7, lsl #2]
    53ac:	ldr	r1, [pc, #272]	; (54c0 <_free_r+0x1c0>)
    53ae:	subs	r0, #8
    53b0:	cmp	r0, r2
    53b2:	beq.n	5450 <_free_r+0x150>
    53b4:	ldr	r1, [r2, #4]
    53b6:	bic.w	r1, r1, #3
    53ba:	cmp	r3, r1
    53bc:	bcs.n	53c4 <_free_r+0xc4>
    53be:	ldr	r2, [r2, #8]
    53c0:	cmp	r0, r2
    53c2:	bne.n	53b4 <_free_r+0xb4>
    53c4:	ldr	r0, [r2, #12]
    53c6:	str	r0, [r4, #12]
    53c8:	str	r2, [r4, #8]
    53ca:	str	r4, [r0, #8]
    53cc:	str	r4, [r2, #12]
    53ce:	mov	r0, r8
    53d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    53d4:	b.w	5114 <__malloc_unlock>
    53d8:	ldr	r5, [r2, #8]
    53da:	ldr	r7, [pc, #232]	; (54c4 <_free_r+0x1c4>)
    53dc:	cmp	r5, r7
    53de:	add	r3, r0
    53e0:	beq.n	5462 <_free_r+0x162>
    53e2:	ldr	r0, [r2, #12]
    53e4:	str	r0, [r5, #12]
    53e6:	orr.w	r2, r3, #1
    53ea:	str	r5, [r0, #8]
    53ec:	str	r2, [r4, #4]
    53ee:	str	r3, [r4, r3]
    53f0:	b.n	535a <_free_r+0x5a>
    53f2:	lsls	r7, r7, #31
    53f4:	add	r3, r0
    53f6:	bmi.n	5408 <_free_r+0x108>
    53f8:	ldr.w	r2, [r5, #-8]
    53fc:	subs	r4, r4, r2
    53fe:	add	r3, r2
    5400:	ldr	r0, [r4, #8]
    5402:	ldr	r2, [r4, #12]
    5404:	str	r2, [r0, #12]
    5406:	str	r0, [r2, #8]
    5408:	ldr	r2, [pc, #188]	; (54c8 <_free_r+0x1c8>)
    540a:	ldr	r2, [r2, #0]
    540c:	orr.w	r0, r3, #1
    5410:	cmp	r3, r2
    5412:	str	r0, [r4, #4]
    5414:	str	r4, [r1, #8]
    5416:	bcc.n	5386 <_free_r+0x86>
    5418:	ldr	r3, [pc, #176]	; (54cc <_free_r+0x1cc>)
    541a:	mov	r0, r8
    541c:	ldr	r1, [r3, #0]
    541e:	bl	5264 <_malloc_trim_r>
    5422:	b.n	5386 <_free_r+0x86>
    5424:	adds	r1, r2, r0
    5426:	ldr	r1, [r1, #4]
    5428:	lsls	r1, r1, #31
    542a:	bmi.n	54b6 <_free_r+0x1b6>
    542c:	ldr	r1, [r2, #8]
    542e:	ldr	r2, [r2, #12]
    5430:	str	r2, [r1, #12]
    5432:	add	r3, r0
    5434:	orr.w	r0, r3, #1
    5438:	str	r1, [r2, #8]
    543a:	str	r0, [r4, #4]
    543c:	str	r3, [r4, r3]
    543e:	b.n	5386 <_free_r+0x86>
    5440:	cmp	r2, #20
    5442:	bhi.n	5474 <_free_r+0x174>
    5444:	add.w	r7, r2, #92	; 0x5c
    5448:	lsls	r7, r7, #1
    544a:	add.w	r5, r2, #91	; 0x5b
    544e:	b.n	53a4 <_free_r+0xa4>
    5450:	asrs	r2, r5, #2
    5452:	ldr	r3, [r1, #4]
    5454:	movs	r5, #1
    5456:	lsl.w	r2, r5, r2
    545a:	orrs	r3, r2
    545c:	str	r3, [r1, #4]
    545e:	mov	r2, r0
    5460:	b.n	53c6 <_free_r+0xc6>
    5462:	orr.w	r2, r3, #1
    5466:	str	r4, [r1, #20]
    5468:	str	r4, [r1, #16]
    546a:	str	r5, [r4, #12]
    546c:	str	r5, [r4, #8]
    546e:	str	r2, [r4, #4]
    5470:	str	r3, [r4, r3]
    5472:	b.n	5386 <_free_r+0x86>
    5474:	cmp	r2, #84	; 0x54
    5476:	bhi.n	5486 <_free_r+0x186>
    5478:	lsrs	r2, r3, #12
    547a:	add.w	r7, r2, #111	; 0x6f
    547e:	lsls	r7, r7, #1
    5480:	add.w	r5, r2, #110	; 0x6e
    5484:	b.n	53a4 <_free_r+0xa4>
    5486:	cmp.w	r2, #340	; 0x154
    548a:	bhi.n	549a <_free_r+0x19a>
    548c:	lsrs	r2, r3, #15
    548e:	add.w	r7, r2, #120	; 0x78
    5492:	lsls	r7, r7, #1
    5494:	add.w	r5, r2, #119	; 0x77
    5498:	b.n	53a4 <_free_r+0xa4>
    549a:	movw	r0, #1364	; 0x554
    549e:	cmp	r2, r0
    54a0:	bhi.n	54b0 <_free_r+0x1b0>
    54a2:	lsrs	r2, r3, #18
    54a4:	add.w	r7, r2, #125	; 0x7d
    54a8:	lsls	r7, r7, #1
    54aa:	add.w	r5, r2, #124	; 0x7c
    54ae:	b.n	53a4 <_free_r+0xa4>
    54b0:	movs	r7, #254	; 0xfe
    54b2:	movs	r5, #126	; 0x7e
    54b4:	b.n	53a4 <_free_r+0xa4>
    54b6:	orr.w	r2, r3, #1
    54ba:	str	r2, [r4, #4]
    54bc:	str	r3, [r4, r3]
    54be:	b.n	5386 <_free_r+0x86>
    54c0:	.word	0x1fff11ac
    54c4:	.word	0x1fff11b4
    54c8:	.word	0x1fff15b4
    54cc:	.word	0x1fff1d94

000054d0 <__register_exitproc>:
    54d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    54d4:	ldr	r4, [pc, #148]	; (556c <__register_exitproc+0x9c>)
    54d6:	ldr	r5, [r4, #0]
    54d8:	ldr.w	r4, [r5, #328]	; 0x148
    54dc:	mov	r6, r0
    54de:	mov	r8, r1
    54e0:	mov	sl, r2
    54e2:	mov	r9, r3
    54e4:	cbz	r4, 5558 <__register_exitproc+0x88>
    54e6:	ldr	r0, [r4, #4]
    54e8:	cmp	r0, #31
    54ea:	bgt.n	551c <__register_exitproc+0x4c>
    54ec:	adds	r3, r0, #1
    54ee:	cbz	r6, 550e <__register_exitproc+0x3e>
    54f0:	add.w	r5, r4, r0, lsl #2
    54f4:	movs	r2, #1
    54f6:	str.w	sl, [r5, #136]	; 0x88
    54fa:	ldr.w	r1, [r4, #392]	; 0x188
    54fe:	lsls	r2, r0
    5500:	orrs	r1, r2
    5502:	cmp	r6, #2
    5504:	str.w	r1, [r4, #392]	; 0x188
    5508:	str.w	r9, [r5, #264]	; 0x108
    550c:	beq.n	554c <__register_exitproc+0x7c>
    550e:	adds	r0, #2
    5510:	str	r3, [r4, #4]
    5512:	str.w	r8, [r4, r0, lsl #2]
    5516:	movs	r0, #0
    5518:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    551c:	ldr	r3, [pc, #80]	; (5570 <__register_exitproc+0xa0>)
    551e:	cbz	r3, 5562 <__register_exitproc+0x92>
    5520:	mov.w	r0, #400	; 0x190
    5524:	bl	4b90 <malloc>
    5528:	mov	r4, r0
    552a:	cbz	r0, 5562 <__register_exitproc+0x92>
    552c:	ldr.w	r3, [r5, #328]	; 0x148
    5530:	movs	r7, #0
    5532:	stmia.w	r0, {r3, r7}
    5536:	str.w	r4, [r5, #328]	; 0x148
    553a:	mov	r0, r7
    553c:	movs	r3, #1
    553e:	str.w	r7, [r4, #392]	; 0x188
    5542:	str.w	r7, [r4, #396]	; 0x18c
    5546:	cmp	r6, #0
    5548:	beq.n	550e <__register_exitproc+0x3e>
    554a:	b.n	54f0 <__register_exitproc+0x20>
    554c:	ldr.w	r1, [r4, #396]	; 0x18c
    5550:	orrs	r2, r1
    5552:	str.w	r2, [r4, #396]	; 0x18c
    5556:	b.n	550e <__register_exitproc+0x3e>
    5558:	add.w	r4, r5, #332	; 0x14c
    555c:	str.w	r4, [r5, #328]	; 0x148
    5560:	b.n	54e6 <__register_exitproc+0x16>
    5562:	mov.w	r0, #4294967295
    5566:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    556a:	nop
    556c:	.word	0x000058b8
    5570:	.word	0x00004b91
    5574:	.word	0x67676f54
    5578:	.word	0x676e696c
    557c:	.word	0x00000000
    5580:	.word	0x7370704f
    5584:	.word	0x6e61202c
    5588:	.word	0x6b6e7520
    558c:	.word	0x6e776f6e
    5590:	.word	0x44494d20
    5594:	.word	0x656d2049
    5598:	.word	0x67617373
    559c:	.word	0x79742065
    55a0:	.word	0x00216570
    55a4:	.word	0x4f4c4556
    55a8:	.word	0x59544943
    55ac:	.word	0x00000000
    55b0:	.word	0x45544f4e
    55b4:	.word	0x474e454c
    55b8:	.word	0x00004854
    55bc:	.word	0x43544950
    55c0:	.word	0x00000048
    55c4:	.word	0x6f636553
    55c8:	.word	0x2073646e
    55cc:	.word	0x646c6568
    55d0:	.word	0x0000203a
    55d4:	.word	0x6c6c694d
    55d8:	.word	0x63657369
    55dc:	.word	0x73646e6f
    55e0:	.word	0x6c656820
    55e4:	.word	0x00203a64

000055e8 <pin2sc1a>:
    55e8:	................
    55f8:	................
    5608:	................
    5618:	................
    5628:	........

00005630 <digital_pin_to_info_PGM>:
    5630:	@..C@..@D..CD..@
    5640:	...C...@0..C0..@
    5650:	4..C4..@...C...@
    5660:	...C...@...C...@
    5670:	...C...@...C...@
    5680:	...C...@...C...@
    5690:	...C...@...C...@
    56a0:	...C...@...C...@
    56b0:	...C...@...C...@
    56c0:	...C...@...C...@
    56d0:	...C...@...C...@
    56e0:	...C...@...C...@
    56f0:	h .Ch..@...C...@
    5700:	8..C8..@<..C<..@
    5710:	@..C@..@H..CH..@
    5720:	L..CL..@(..C(..@
    5730:	,..C,..@` .C`..@
    5740:	d .Cd..@ ..C ..@
    5750:	$..C$..@(..C(..@
    5760:	,..C,..@D..CD..@
    5770:	p..Cp..@t..Ct..@
    5780:	h..Ch..@P..CP..@
    5790:	X..CX..@\..C\..@
    57a0:	T..CT..@ ..C ..@
    57b0:	$..C$..@...C...@
    57c0:	...C...@8..C8..@
    57d0:	4..C4..@0..C0..@
    57e0:	<..C<..@,..C,..@
    57f0:	( .C(..@, .C,..@
    5800:	. .C...@. .C...@
    5810:	. .C...@. .C...@
    5820:	. .C...@. .C...@

00005830 <vtable for usb_serial_class>:
	...
    5838:	Y@..Q@..M@..I@..
    5848:	E@..A@..=@..9@..
    5858:	....

0000585c <usb_endpoint_config_table>:
    585c:	........

00005864 <usb_descriptor_list>:
    5864:	................
    5874:	............`...
    5884:	................
    5894:	....H...........
    58a4:	d...............
    58b4:	....

000058b8 <_global_impure_ptr>:
    58b8:	....

000058bc <_init>:
    58bc:	push	{r3, r4, r5, r6, r7, lr}
    58be:	nop
    58c0:	pop	{r3, r4, r5, r6, r7}
    58c2:	pop	{r3}
    58c4:	mov	lr, r3
    58c6:	bx	lr

000058c8 <__init_array_start>:
    58c8:	.word	0x0000521d

000058cc <__frame_dummy_init_array_entry>:
    58cc:	5...E!..

Disassembly of section .fini:

000058d4 <_fini>:
    58d4:	push	{r3, r4, r5, r6, r7, lr}
    58d6:	nop


.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000047e0 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff1594 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
000033f4 l     F .text	0000000c startup_default_early_hook
00003400 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1594 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff1598 l       .bss	00000000 object.8610
000047d8 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 sequencer.cpp
00000000 l    df *ABS*	00000000 button.cpp
00000000 l    df *ABS*	00000000 piano.cpp
00000000 l    df *ABS*	00000000 led.cpp
00000000 l    df *ABS*	00000000 main.cpp
0000097c l     F .text	00000018 _GLOBAL__sub_I_sequencer
00000000 l    df *ABS*	00000000 note.cpp
00000000 l    df *ABS*	00000000 transport.cpp
00000000 l    df *ABS*	00000000 paginator.cpp
00000000 l    df *ABS*	00000000 step.cpp
00000000 l    df *ABS*	00000000 knob.cpp
00000000 l    df *ABS*	00000000 controller.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
1fff15b5 l     O .bss	00000001 tx_noautoflush
1fff15b8 l     O .bss	00000004 tx_packet
1fff15bc l     O .bss	00000001 transmit_previous_timeout
1fff15c0 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
000015d4 l     F .text	00000144 wait_for_cal
1fff15c5 l     O .bss	00000001 analog_right_shift
1fff15c6 l     O .bss	00000001 calibrating
000044f4 l     O .text	00000048 pin2sc1a
1fff0c40 l     O .data	00000001 analog_config_bits
1fff15c7 l     O .bss	00000001 analogReadBusyADC1
1fff15c8 l     O .bss	00000001 analogReadBusyADC0
1fff15c9 l     O .bss	00000001 analog_reference_internal
1fff0c41 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
000018f4 l     F .text	0000004c digitalWrite.part.1
00001940 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00001c20 l     F .text	00000048 sysex_byte
1fff15e4 l     O .bss	00000001 tx_noautoflush
1fff1610 l     O .bss	00000004 tx_packet
1fff1614 l     O .bss	00000001 transmit_previous_timeout
1fff161c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c44 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1630 l     O .bss	00000004 ep0_tx_ptr
1fff1634 l     O .bss	00000014 rx_last
1fff1648 l     O .bss	00000002 ep0_tx_len
1fff164c l     O .bss	00000040 ep0_rx0_buf
1fff168c l     O .bss	00000014 rx_first
1fff16a0 l     O .bss	00000001 ep0_tx_data_toggle
1fff16a4 l     O .bss	00000040 ep0_rx1_buf
1fff16e4 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff16f8 l     O .bss	00000014 tx_last
1fff170c l     O .bss	00000008 setup
1fff1714 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1718 l     O .bss	00000008 reply_buffer
1fff1724 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1729 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 WMath.cpp
00003008 l     F .text	00000070 random(unsigned long) [clone .part.0]
1fff172c l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1730 l     O .bss	00000004 rts_pin
1fff1734 l     O .bss	00000001 rx_buffer_head
1fff1735 l     O .bss	00000001 rx_buffer_tail
1fff1738 l     O .bss	00000028 tx_buffer
1fff1760 l     O .bss	00000040 rx_buffer
1fff17a0 l     O .bss	00000001 transmitting
1fff17a1 l     O .bss	00000001 tx_buffer_tail
1fff17a4 l     O .bss	00000004 transmit_pin
1fff17a8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff17ac l     O .bss	00000004 rts_pin
1fff17b0 l     O .bss	00000001 transmitting
1fff17b1 l     O .bss	00000001 rx_buffer_tail
1fff17b4 l     O .bss	00000028 tx_buffer
1fff17dc l     O .bss	00000040 rx_buffer
1fff181c l     O .bss	00000001 rx_buffer_head
1fff181d l     O .bss	00000001 tx_buffer_tail
1fff1820 l     O .bss	00000004 transmit_pin
1fff1824 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1828 l     O .bss	00000004 rts_pin
1fff182c l     O .bss	00000001 rx_buffer_head
1fff182d l     O .bss	00000001 rx_buffer_tail
1fff1830 l     O .bss	00000028 tx_buffer
1fff1858 l     O .bss	00000040 rx_buffer
1fff1898 l     O .bss	00000001 transmitting
1fff1899 l     O .bss	00000001 tx_buffer_tail
1fff189c l     O .bss	00000004 transmit_pin
1fff18a0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff18a4 l     O .bss	00000004 rts_pin
1fff18a8 l     O .bss	00000001 rx_buffer_head
1fff18a9 l     O .bss	00000001 rx_buffer_tail
1fff18ac l     O .bss	00000040 tx_buffer
1fff18ec l     O .bss	00000040 rx_buffer
1fff192c l     O .bss	00000001 transmitting
1fff192d l     O .bss	00000001 tx_buffer_tail
1fff1930 l     O .bss	00000004 transmit_pin
1fff1934 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1938 l     O .bss	00000004 rts_pin
1fff193c l     O .bss	00000001 rx_buffer_head
1fff193d l     O .bss	00000001 rx_buffer_tail
1fff1940 l     O .bss	00000028 tx_buffer
1fff1968 l     O .bss	00000040 rx_buffer
1fff19a8 l     O .bss	00000001 transmitting
1fff19a9 l     O .bss	00000001 tx_buffer_tail
1fff19ac l     O .bss	00000004 transmit_pin
1fff19b0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c5c l     O .data	00000012 device_descriptor
1fff0c88 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff19b4 l     O .bss	00000004 rts_pin
1fff19b8 l     O .bss	00000001 rx_buffer_head
1fff19b9 l     O .bss	00000001 rx_buffer_tail
1fff19bc l     O .bss	00000028 tx_buffer
1fff19e4 l     O .bss	00000040 rx_buffer
1fff1a24 l     O .bss	00000001 transmitting
1fff1a25 l     O .bss	00000001 tx_buffer_tail
1fff1a28 l     O .bss	00000004 transmit_pin
1fff1a2c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004130 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d58 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1594 l       .bss	00000000 __bss_start__
1fff1bc8 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
000033ec  w    F .text	00000006 adc0_isr
00001378 g     F .text	0000001c usb_serial_available
000032ac g     F .text	00000020 serial4_available
00002e4c  w    F .text	000000c4 yield
1fff0c70 g     O .data	00000018 usb_string_manufacturer_name_default
00003498 g     F .text	00000020 serial_available
1fff15e8 g     O .bss	00000004 usb_midi_handleProgramChange
000012bc g     F .text	0000000a Controller::exitSwingMode()
000033a4  w    F .text	00000048 hard_fault_isr
000033ec  w    F .text	00000006 dma_ch6_isr
00002f40 g     F .text	00000020 Print::println()
00003180 g     F .text	00000020 serial2_available
000033ec  w    F .text	00000006 uart0_lon_isr
00002260 g     F .text	000000e8 usb_rx_memory
00002f10  w    F .text	00000002 serialEvent5()
000012f0 g     F .text	00000006 Controller::getShiftMode()
000033ec  w    F .text	00000006 dma_ch8_isr
000035c4 g     F .text	00000020 serial6_available
00004108 g     F .text	00000002 __malloc_unlock
1fff15fc g     O .bss	00000004 usb_midi_handleAfterTouch
000004fc g     F .text	00000050 Sequencer::step()
00001718 g     F .text	000000e0 analog_init
00002348 g     F .text	00000084 usb_tx
000033ec  w    F .text	00000006 portcd_isr
1fff160c g     O .bss	00000004 usb_midi_handleSysExComplete
000039e4 g     F .text	00000098 MillisTimer::runFromTimer()
000033ec  w    F .text	00000006 can1_rx_warn_isr
000047e4 g       .fini	00000000 __exidx_end
000033ec  w    F .text	00000006 dma_error_isr
1fff1a8c g     O .bss	00000001 usb_midi_msg_type
1fff1a44 g     O .bss	00000001 EventResponder::runningFromYield
000033ec  w    F .text	00000006 i2c0_isr
00003a8c g     F .text	0000000c __errno
000033ec  w    F .text	00000006 portd_isr
000033ec  w    F .text	00000006 enet_error_isr
1fff1a30 g     O .bss	00000004 EventResponder::firstInterrupt
00000a28 g     F .text	0000002c Note::tick()
00000f3c g     F .text	0000002a Knob::tick()
000033ec  w    F .text	00000006 tpm1_isr
00002f2c  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
0000453c g     O .text	00000200 digital_pin_to_info_PGM
000012f8 g     F .text	00000006 Controller::getMode()
1fff1bc4 g     O .bss	00000004 errno
000047e4 g       .fini	00000000 _etext
1fff1594 g       .bss	00000000 _sbss
00003080  w    F .text	00000002 serialEvent6()
1fff15f8 g     O .bss	00000004 usb_midi_handleVelocityChange
000019e8 g     F .text	0000001c digitalRead
000033ec  w    F .text	00000006 porte_isr
00000970 g     F .text	0000000c loop
000033ec  w    F .text	00000006 portb_isr
000004dc g     F .text	00000014 Sequencer::tick()
00001d04 g     F .text	0000002c usb_midi_flush_output
000033ec  w    F .text	00000006 spi1_isr
000032cc g     F .text	000000d8 uart3_status_isr
00003890  w    F .text	00000002 serialEvent1()
00001118 g     F .text	0000002c Controller::tick()
000033ec  w    F .text	00000006 mcm_isr
0000397c g     F .text	00000068 MillisTimer::addToActiveList()
00001d30 g     F .text	0000043c usb_midi_read
000011d8 g     F .text	00000040 Controller::enterShiftMode()
1fff15d4 g     O .bss	00000004 usb_midi_handleSystemReset
00000788 g     F .text	00000040 Piano::Piano(Sequencer*)
0000063c g     F .text	00000058 Button::onHold()
1fff1a34 g     O .bss	00000004 EventResponder::lastInterrupt
000012e8 g     F .text	00000006 Controller::getCopyMode()
000031a0 g     F .text	0000010c uart1_status_isr
000008f4 g     F .text	00000078 Led::tick()
1fff1a8e g     O .bss	00000002 usb_midi_msg_sysex_len
0000054c g     F .text	00000006 Sequencer::resetStep()
000033ec  w    F .text	00000006 randnum_isr
000009a4 g     F .text	0000002e Note::noteOn(unsigned char, unsigned char, unsigned char)
1fff15dc g     O .bss	00000004 usb_midi_handleRealTimeSystem
00001248 g     F .text	00000008 Controller::exitCopyMode()
1fff15cc g     O .bss	00000004 systick_millis_count
000033a4  w    F .text	00000048 bus_fault_isr
000008ac g     F .text	0000002c Led::toggle()
000033ec  w    F .text	00000006 watchdog_isr
000033ec  w    F .text	00000006 i2c1_isr
1fff1720 g     O .bss	00000001 usb_configuration
000033ec  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00002ff0  w    F .text	00000002 serialEvent2()
000033ec  w    F .text	00000006 i2c2_isr
1fff0c70  w    O .data	00000018 usb_string_manufacturer_name
1fff1bb8 g     O .bss	0000000a usb_rx_byte_count_data
000033ec  w    F .text	00000006 pit1_isr
00000d54 g     F .text	00000032 Paginator::previousPage()
00003ae8 g     F .text	00000010 malloc
000033ec  w    F .text	00000006 dma_ch4_isr
000033ec  w    F .text	00000006 software_isr
000033ec  w    F .text	00000006 dma_ch7_isr
00003918  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00002d7c g     F .text	000000d0 usb_init
000033ec  w    F .text	00000006 lptmr_isr
00000b4c g     F .text	00000024 Transport::processMidi()
1fff1a54 g     O .bss	00000004 __malloc_top_pad
000019b8 g     F .text	00000024 rtc_set
000005c0 g     F .text	0000007c Button::onRelease()
00000db0 g     F .text	0000001c Step::controlLength(int)
1fff0c40 g       .data	00000000 _sdata
1fff162c g     O .bss	00000004 usb_midi_handleNoteOn
000009f8 g     F .text	0000002e Note::noteOff(unsigned char, unsigned char, unsigned char)
00003464 g     F .text	00000034 kinetis_hsrun_enable
0000410c g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00001300 g     F .text	00000048 usb_serial_getchar
000033ec  w    F .text	00000006 can1_bus_off_isr
000033ec  w    F .text	00000006 ftm2_isr
00000554 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1a80 g     O .bss	00000008 usb_cdc_line_coding
000019dc g     F .text	0000000a digitalWrite
000033ec  w    F .text	00000006 uart5_status_isr
000035e4 g     F .text	000000e4 lpuart0_status_isr
1fff1a3c g     O .bss	00000004 EventResponder::lastYield
00000a68 g     F .text	0000003a Transport::controlTempo(int)
00004768 g     O .text	00000005 usb_endpoint_config_table
00000f68 g     F .text	000001ae Controller::Controller(Sequencer*)
000033ec  w    F .text	00000006 dma_ch9_isr
000033ec  w    F .text	00000006 pit2_isr
00003798 g     F .text	00000020 serial3_available
1fff1a50 g     O .bss	00000004 __malloc_max_sbrked_mem
00000ba8 g     F .text	00000078 Paginator::getNextPlaybackPage(int)
00001250 g     F .text	00000034 Controller::enterChanceMode()
00001a04 g     F .text	0000000a pinMode
000021ac g     F .text	0000004c usb_free
000033ec  w    F .text	00000006 i2c3_isr
1fff15f4 g     O .bss	00000004 usb_midi_handleSysExPartial
000047e4 g       .fini	00000000 __exidx_start
000033ec  w    F .text	00000006 pit0_isr
1fff1a90 g     O .bss	00000001 usb_midi_msg_data1
1fff1a40 g     O .bss	00000004 EventResponder::firstYield
000047c4 g     O .text	00000004 _global_impure_ptr
000033ec  w    F .text	00000006 can1_error_isr
00003a98 g     F .text	00000050 __libc_init_array
1fff1bc8 g       .bss	00000000 __bss_end
000033ec  w    F .text	00000006 can0_wakeup_isr
000033ec  w    F .text	00000006 flash_cmd_isr
00002f14  w    F .text	00000004 usb_serial_class::clear()
000037b8 g     F .text	000000d8 uart2_status_isr
00003404 g     F .text	0000002c _sbrk
1fff1a48 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c58 g     O .data	00000004 __brkval
1fff15c4 g     O .bss	00000001 usb_cdc_line_rtsdtr
0000158c g     F .text	00000048 usb_serial_flush_callback
000047c8 g     F .text	00000000 _init
000033ec  w    F .text	00000006 svcall_isr
00000e04 g     F .text	0000002c Step::controlChance(int)
000033ec  w    F .text	00000006 dma_ch15_isr
000033ec  w    F .text	00000006 uart1_error_isr
00004150 g     F .text	00000028 __libc_fini_array
000033ec  w    F .text	00000006 usbhs_phy_isr
00000b88 g     F .text	0000001e Paginator::Paginator(Sequencer*)
00000554 g     F .text	0000002c Button::Button(int, int, Led*, bool, bool, Controller*)
1fff1bc8 g       .bss	00000000 _ebss
000033ec g     F .text	00000006 unused_isr
00000e64 g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
000033ec  w    F .text	00000006 spi0_isr
000033ec  w    F .text	00000006 dma_ch3_isr
00000d24 g     F .text	00000030 Paginator::nextPage()
00000d88 g     F .text	0000001c Step::Step(Sequencer*)
00000d88 g     F .text	0000001c Step::Step(Sequencer*)
000033ec  w    F .text	00000006 flash_error_isr
00003088 g     F .text	00000020 serial5_available
000033ec  w    F .text	00000006 uart5_error_isr
000033ec  w    F .text	00000006 rtc_seconds_isr
000033ec  w    F .text	00000006 pdb_isr
000033a4  w    F .text	00000048 usage_fault_isr
000033ec  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00000b70 g     F .text	00000018 Transport::tick()
000033ec  w    F .text	00000006 dma_ch14_isr
00000e74 g     F .text	000000c6 Knob::onChange()
00000994 g     F .text	0000000e Note::Note()
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1a88 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00000a54 g     F .text	00000014 Transport::Transport(Sequencer*)
00003a7c g     F .text	00000010 systick_isr
000033ec  w    F .text	00000006 rtc_alarm_isr
0000046c g     F .text	0000006e Sequencer::Sequencer()
000033ec  w    F .text	00000006 dma_ch2_isr
1fff0c48 g     O .data	00000010 Serial
00000a54 g     F .text	00000014 Transport::Transport(Sequencer*)
000033ec  w    F .text	00000006 ftm1_isr
00002f34  w    F .text	00000006 usb_serial_class::write(unsigned char)
000033f4  w    F .text	0000000c startup_early_hook
000033ec  w    F .text	00000006 dma_ch13_isr
000033ec  w    F .text	00000006 uart2_error_isr
00001348 g     F .text	00000030 usb_serial_peekchar
00000878 g     F .text	00000034 Led::blink(int)
1fff0d3c g     O .data	00000016 usb_string_serial_number_default
000033a4 g     F .text	00000048 fault_isr
00004214 g     F .text	000001d0 _free_r
1fff1618 g     O .bss	00000004 usb_midi_handleStop
000033ec  w    F .text	00000006 usb_charge_isr
00002f24  w    F .text	00000004 usb_serial_class::flush()
000033ec  w    F .text	00000006 cmt_isr
000033ec  w    F .text	00000006 usbhs_isr
1fff1628 g     O .bss	00000004 usb_midi_handleControlChange
1fff1590 g     O .data	00000004 __malloc_sbrk_base
00002f1c  w    F .text	00000004 usb_serial_class::read()
000033ec  w    F .text	00000006 ftm3_isr
00000788 g     F .text	00000040 Piano::Piano(Sequencer*)
000033ec  w    F .text	00000006 tsi0_isr
000033ec  w    F .text	00000006 spi2_isr
00002ff4  w    F .text	00000002 serialEvent4()
00002f3c  w    F .text	00000002 serialEvent()
1fff16a1 g     O .bss	00000001 usb_reboot_timer
000043e4 g     F .text	000000a4 __register_exitproc
00001394 g     F .text	00000038 usb_serial_flush_input
000014d4 g     F .text	00000018 usb_serial_putchar
1fff1a58 g     O .bss	00000028 __malloc_current_mallinfo
000033ec  w    F .text	00000006 can0_bus_off_isr
00000f68 g     F .text	000001ae Controller::Controller(Sequencer*)
1fff1715 g     O .bss	00000001 usb_rx_memory_needed
000004f0 g     F .text	0000000a Sequencer::reverse()
000023cc g     F .text	000009b0 usb_isr
00000b2c g     F .text	0000001e Transport::stopPPQN()
1fff1624 g     O .bss	00000004 usb_midi_handleNoteOff
00000994 g     F .text	0000000e Note::Note()
00003078 g     F .text	00000008 random(unsigned long)
0000473c  w    O .text	00000028 vtable for usb_serial_class
000006e0 g     F .text	000000a8 Button::tick()
000033ec  w    F .text	00000006 uart3_error_isr
1fff1a38 g     O .bss	00000004 MillisTimer::listActive
000033ec  w    F .text	00000006 porta_isr
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
000033ec  w    F .text	00000006 low_voltage_isr
1fff1184 g     O .data	00000408 __malloc_av_
000033ec  w    F .text	00000006 can0_error_isr
00001218 g     F .text	00000026 Controller::exitShiftMode()
00001ab4 g     F .text	0000016c _init_Teensyduino_internal_
00000e64 g     F .text	00000010 Knob::Knob(unsigned char, int, Controller*)
00001534 g     F .text	00000058 usb_serial_flush_output
000033ec  w    F .text	00000006 dma_ch12_isr
00004104 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
000033ec  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
000033ec  w    F .text	00000006 pit3_isr
00000580 g     F .text	00000040 Button::onPressWhileHolding()
000007e0 g     F .text	0000002a Piano::play(Step*)
00000b88 g     F .text	0000001e Paginator::Paginator(Sequencer*)
000033ec  w    F .text	00000006 enet_rx_isr
000033ec  w    F .text	00000006 portc_isr
00004068 g     F .text	0000009a memset
00002ff8 g     F .text	00000010 main
1fff1a4c g     O .bss	00000004 __malloc_max_total_mem
000008e4 g     F .text	0000000e Led::on()
000033a4  w    F .text	00000048 memmanage_fault_isr
000036c8 g     F .text	00000084 usb_init_serialnumber
000047e0 g       .text	00000000 __init_array_end
00003af8 g     F .text	00000570 _malloc_r
000033ec  w    F .text	00000006 debugmonitor_isr
1fff15f0 g     O .bss	00000004 usb_midi_handleSongPosition
00001284 g     F .text	0000000a Controller::exitChanceMode()
00003898 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff15e0 g     O .bss	00000004 usb_midi_handleContinue
1fff1a91 g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
000033ec  w    F .text	00000006 cmp1_isr
000033ec  w    F .text	00000006 ftm0_isr
00004178 g     F .text	0000009c _malloc_trim_r
1fff0d38 g     O .data	00000004 string0
000013cc g     F .text	00000108 usb_serial_write
00003400  w    F .text	00000002 startup_late_hook
00000dcc g     F .text	00000024 Step::controlPitch(int)
00002f20  w    F .text	00000004 usb_serial_class::available()
1fff1a92 g     O .bss	00000001 usb_midi_msg_cable
1fff0d20  w    O .data	00000018 usb_string_product_name
00001a10 g     F .text	000000a4 delay
00001240 g     F .text	00000008 Controller::enterCopyMode()
000033ec  w    F .text	00000006 tpm0_isr
000047e0 g     F .fini	00000000 _fini
000033ec  w    F .text	00000006 i2s0_rx_isr
00000aa4 g     F .text	0000005e Transport::advancePPQN()
000033ec  w    F .text	00000006 uart4_error_isr
00002fe0 g     F .text	00000010 Print::print(long)
00001c68 g     F .text	0000009c usb_midi_write_packed
00000c3c g     F .text	000000b6 Paginator::changePage(int)
00004144 g     F .text	0000000c atexit
000033ec  w    F .text	00000006 can0_message_isr
00001144 g     F .text	00000094 Controller::toggleMode()
1fff1180 g     O .data	00000004 _impure_ptr
000033ec  w    F .text	00000006 can1_message_isr
000033ec  w    F .text	00000006 nmi_isr
00000850 g     F .text	00000026 Led::Led(int, int)
0000046c g     F .text	0000006e Sequencer::Sequencer()
1fff1608 g     O .bss	00000004 usb_midi_handleTuneRequest
000007c8 g     F .text	00000016 Piano::tick()
000047d4 g       .text	00000000 __preinit_array_end
00000da4 g     F .text	0000000a Step::toggle()
000033ec  w    F .text	00000006 sdhc_isr
00000e30 g     F .text	00000032 Step::controlSwing(int)
1fff1a93 g     O .bss	00000001 usb_midi_msg_channel
0000096c g     F .text	00000002 setup
00004770 g     O .text	00000054 usb_descriptor_list
000021f8 g     F .text	0000003c usb_rx
00000850 g     F .text	00000026 Led::Led(int, int)
00000cf4 g     F .text	00000030 Paginator::debugPages()
000033ec  w    F .text	00000006 dma_ch10_isr
1fff1600 g     O .bss	00000004 usb_midi_handleStart
000033ec  w    F .text	00000006 uart0_error_isr
000012d8 g     F .text	00000010 Controller::getSwingMode()
000009d4 g     F .text	00000022 Note::play(Step*, int*)
0000216c g     F .text	00000040 usb_malloc
0000080c g     F .text	00000044 Piano::transpose(int)
000033ec  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
000014ec g     F .text	00000048 usb_serial_write_buffer_free
000033ec  w    F .text	00000006 enet_timer_isr
1fff1594 g       .data	00000000 _edata
000033ec  w    F .text	00000006 i2s0_tx_isr
000033ec  w    F .text	00000006 adc1_isr
00000df0 g     F .text	00000014 Step::controlVelocity(int)
00002f28  w    F .text	00000004 usb_serial_class::availableForWrite()
000033ec  w    F .text	00000006 cmp0_isr
1fff15d0 g     O .bss	00000004 usb_midi_handleClock
0000374c g     F .text	0000004c ultoa
00000694 g     F .text	0000004c Button::onHoldRelease()
00003084 g     F .text	00000004 operator new(unsigned int)
00003934 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff158c g     O .data	00000004 __malloc_trim_threshold
00002f18  w    F .text	00000004 usb_serial_class::peek()
000012c8 g     F .text	00000010 Controller::getChanceMode()
1fff15b4 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff15ec g     O .bss	00000004 usb_midi_handlePitchChange
000033ec  w    F .text	00000006 pit_isr
1fff1604 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
000033ec  w    F .text	00000006 dac0_isr
000047d4 g       .text	00000000 __init_array_start
000033ec  w    F .text	00000006 can1_tx_warn_isr
000017f8 g     F .text	000000fc analogRead
1fff1a94 g     O .bss	00000122 usb_midi_msg_sysex
000034b8 g     F .text	0000010c uart0_status_isr
000033ec  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d20 g     O .data	00000018 usb_string_product_name_default
000033ec  w    F .text	00000006 dma_ch1_isr
00000b04 g     F .text	00000028 Transport::startPPQN()
00002234 g     F .text	0000002c usb_tx_packet_count
000033ec  w    F .text	00000006 dma_ch5_isr
000033ec  w    F .text	00000006 can0_rx_warn_isr
000033ec  w    F .text	00000006 can0_tx_warn_isr
000030a8 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00003430 g     F .text	00000034 kinetis_hsrun_disable
000047d4 g       .text	00000000 __preinit_array_start
1fff15b0 g     O .bss	00000004 sequencer
00003894  w    F .text	00000002 serialEvent3()
1fff1620 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
000033ec  w    F .text	00000006 cmp2_isr
00003978 g     F .text	00000004 pendablesrvreq_isr
000033ec  w    F .text	00000006 wakeup_isr
00000c20 g     F .text	0000001c Paginator::setLeds(unsigned int)
000033ec  w    F .text	00000006 cmp3_isr
00002f60 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
000008d8 g     F .text	0000000c Led::off()
1fff15d8 g     O .bss	00000004 usb_midi_handleActiveSensing
00001290 g     F .text	0000002c Controller::enterSwingMode()
000033ec  w    F .text	00000006 tpm2_isr
000033ec  w    F .text	00000006 dma_ch0_isr
1fff0d3c  w    O .data	00000016 usb_string_serial_number
000033ec  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
  free(ptr);
}

void operator delete[](void * ptr)
{
  free(ptr);
       0:	... .....3...3..
      10:	.3...3...3...3..
      20:	.3...3...3...3..
      30:	.3...3..y9..}:..
      40:	.3...3...3...3..
      50:	.3...3...3...3..
      60:	.3...3...3...3..
      70:	.3...3...3...3..
      80:	.3...3...3...3..
      90:	.3...3...3...3..
      a0:	.3...3...3...3..
      b0:	.3...3...3...4..
      c0:	.3...1...3...7..
      d0:	.3...2...3...3..
      e0:	.3...3...3...3..
      f0:	.3...3...3...3..
     100:	.3...3...3...3..
     110:	.3...#...3...3..
     120:	.3...3...3...3..
     130:	.3...3...3...3..
     140:	.3...3...0...3..
     150:	.3...3...3...3..
     160:	.3...3...3...3..
     170:	.3...3...3...3..
     180:	.3...3...3...3..
     190:	.3...3...5...3..
     1a0:	.3...3...3...3..
     1b0:	.3...3...3...3..
     1c0:	.3...3...3...3..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	33f4 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	1ab4 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	19b8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	19b8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	3a98 <__libc_init_array>

	startup_late_hook();
     33a:	bl	3400 <startup_late_hook>
	main();
     33e:	bl	2ff8 <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff1594
     374:	.word	0x000047e0
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff1594
     380:	.word	0x1fff1bc8
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1594
     42c:	.word	0x00000000
     430:	.word	0x000047e4

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff1598
     460:	.word	0x000047e4
     464:	.word	0x1fff1594
     468:	.word	0x00000000

0000046c <Sequencer::Sequencer()>:
#include "paginator.h"
#include "step.h"
#include "led.h"
#include "piano.h"

Sequencer::Sequencer () {
     46c:	push	{r3, r4, r5, r6, r7, lr}
     46e:	mov	r4, r0
  _controller = new Controller(this);
     470:	movs	r0, #84	; 0x54
     472:	bl	3084 <operator new(unsigned int)>
     476:	mov	r1, r4
     478:	mov	r5, r0
     47a:	bl	f68 <Controller::Controller(Sequencer*)>
     47e:	str	r5, [r4, #8]
  _transport = new Transport(this);
     480:	movs	r0, #16
     482:	bl	3084 <operator new(unsigned int)>
     486:	mov	r1, r4
     488:	mov	r5, r0
     48a:	bl	a54 <Transport::Transport(Sequencer*)>
     48e:	str	r5, [r4, #4]
  _paginator = new Paginator(this);
     490:	movs	r0, #80	; 0x50
     492:	bl	3084 <operator new(unsigned int)>
     496:	mov	r1, r4
     498:	mov	r5, r0
     49a:	bl	b88 <Paginator::Paginator(Sequencer*)>
     49e:	str	r5, [r4, #12]
  _piano = new Piano(this);
     4a0:	movs	r0, #60	; 0x3c
     4a2:	bl	3084 <operator new(unsigned int)>
     4a6:	mov	r1, r4
     4a8:	mov	r5, r0
     4aa:	bl	788 <Piano::Piano(Sequencer*)>
  _reversed = false;
     4ae:	movs	r3, #0

Sequencer::Sequencer () {
  _controller = new Controller(this);
  _transport = new Transport(this);
  _paginator = new Paginator(this);
  _piano = new Piano(this);
     4b0:	str	r5, [r4, #52]	; 0x34
  _reversed = false;
     4b2:	strb	r3, [r4, #0]
  _currentStep = 0;
     4b4:	str	r3, [r4, #48]	; 0x30
     4b6:	add.w	r5, r4, #12
     4ba:	add.w	r7, r4, #28

  for (int i = 0; i < 4; i++) {
    _stepsEdit[i] = new Step(this);
     4be:	movs	r0, #32
     4c0:	bl	3084 <operator new(unsigned int)>
     4c4:	mov	r1, r4
     4c6:	mov	r6, r0
     4c8:	bl	d88 <Step::Step(Sequencer*)>
     4cc:	str.w	r6, [r5, #4]!
  _paginator = new Paginator(this);
  _piano = new Piano(this);
  _reversed = false;
  _currentStep = 0;

  for (int i = 0; i < 4; i++) {
     4d0:	cmp	r5, r7
    _stepsEdit[i] = new Step(this);
    _stepsPlayback[i] = _stepsEdit[i];
     4d2:	str	r6, [r5, #16]
  _paginator = new Paginator(this);
  _piano = new Piano(this);
  _reversed = false;
  _currentStep = 0;

  for (int i = 0; i < 4; i++) {
     4d4:	bne.n	4be <Sequencer::Sequencer()+0x52>
    _stepsEdit[i] = new Step(this);
    _stepsPlayback[i] = _stepsEdit[i];
  };
};
     4d6:	mov	r0, r4
     4d8:	pop	{r3, r4, r5, r6, r7, pc}
     4da:	nop

000004dc <Sequencer::tick()>:

// todo: implement sequencer motion record
// todo: implement multi midi channel

void Sequencer::tick() {
     4dc:	push	{r4, lr}
     4de:	mov	r4, r0
  _transport->tick();
     4e0:	ldr	r0, [r0, #4]
     4e2:	bl	b70 <Transport::tick()>
  _controller->tick();
     4e6:	ldr	r0, [r4, #8]
}
     4e8:	ldmia.w	sp!, {r4, lr}
// todo: implement sequencer motion record
// todo: implement multi midi channel

void Sequencer::tick() {
  _transport->tick();
  _controller->tick();
     4ec:	b.w	1118 <Controller::tick()>

000004f0 <Sequencer::reverse()>:
}

void Sequencer::reverse() {
  _reversed = !_reversed;
     4f0:	ldrb	r3, [r0, #0]
     4f2:	eor.w	r3, r3, #1
     4f6:	strb	r3, [r0, #0]
     4f8:	bx	lr
     4fa:	nop

000004fc <Sequencer::step()>:
}

void Sequencer::step () {  
     4fc:	push	{r3, r4, r5, lr}
     4fe:	mov	r4, r0
  if (!_controller->getShiftMode()) {
     500:	ldr	r0, [r0, #8]
     502:	bl	12f0 <Controller::getShiftMode()>
     506:	cbz	r0, 52e <Sequencer::step()+0x32>
    _controller->_leds[_currentStep]->blink();
  }

  if (!_reversed) {
     508:	ldrb	r5, [r4, #0]
     50a:	cbnz	r5, 518 <Sequencer::step()+0x1c>
    _currentStep++;
     50c:	ldr	r3, [r4, #48]	; 0x30
     50e:	adds	r3, #1

    if (_currentStep > 3) {
     510:	cmp	r3, #3
  if (!_controller->getShiftMode()) {
    _controller->_leds[_currentStep]->blink();
  }

  if (!_reversed) {
    _currentStep++;
     512:	str	r3, [r4, #48]	; 0x30

    if (_currentStep > 3) {
     514:	bgt.n	540 <Sequencer::step()+0x44>
     516:	pop	{r3, r4, r5, pc}
      _paginator->getNextPlaybackPage(1);
      _currentStep = 0;
    }
  } else {
    _currentStep--;
     518:	ldr	r1, [r4, #48]	; 0x30
     51a:	subs	r1, #1

    if (_currentStep == -1) {
     51c:	adds	r3, r1, #1
    if (_currentStep > 3) {
      _paginator->getNextPlaybackPage(1);
      _currentStep = 0;
    }
  } else {
    _currentStep--;
     51e:	str	r1, [r4, #48]	; 0x30

    if (_currentStep == -1) {
     520:	bne.n	516 <Sequencer::step()+0x1a>
      _paginator->getNextPlaybackPage(-1);
     522:	ldr	r0, [r4, #12]
     524:	bl	ba8 <Paginator::getNextPlaybackPage(int)>
      _currentStep = 3;
     528:	movs	r3, #3
     52a:	str	r3, [r4, #48]	; 0x30
    }
  }
};
     52c:	b.n	516 <Sequencer::step()+0x1a>
  _reversed = !_reversed;
}

void Sequencer::step () {  
  if (!_controller->getShiftMode()) {
    _controller->_leds[_currentStep]->blink();
     52e:	ldr	r3, [r4, #8]
     530:	ldr	r2, [r4, #48]	; 0x30
     532:	add.w	r3, r3, r2, lsl #2
     536:	mov	r1, r0
     538:	ldr	r0, [r3, #52]	; 0x34
     53a:	bl	878 <Led::blink(int)>
     53e:	b.n	508 <Sequencer::step()+0xc>

  if (!_reversed) {
    _currentStep++;

    if (_currentStep > 3) {
      _paginator->getNextPlaybackPage(1);
     540:	movs	r1, #1
     542:	ldr	r0, [r4, #12]
     544:	bl	ba8 <Paginator::getNextPlaybackPage(int)>
      _currentStep = 0;
     548:	str	r5, [r4, #48]	; 0x30
     54a:	pop	{r3, r4, r5, pc}

0000054c <Sequencer::resetStep()>:
    }
  }
};

void Sequencer::resetStep () {
  _currentStep = 0;
     54c:	movs	r3, #0
     54e:	str	r3, [r0, #48]	; 0x30
     550:	bx	lr
     552:	nop

00000554 <Button::Button(int, int, Led*, bool, bool, Controller*)>:
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     554:	push	{r3, r4, r5, r6, r7, lr}
     556:	mov	r4, r0
  Led* led,
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
     558:	str	r1, [r0, #0]
#include "controller.h"
#include "sequencer.h"
#include "paginator.h"
#include "step.h"

Button::Button (
     55a:	ldrb.w	r7, [sp, #24]
     55e:	ldrb.w	r6, [sp, #28]
     562:	ldr	r5, [sp, #32]
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 300;
  _led = led;
     564:	str	r3, [r0, #52]	; 0x34
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 300;
     566:	mov.w	r1, #300	; 0x12c
  bool shiftButton,
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
     56a:	str	r2, [r0, #24]
  _reverseButton = reverseButton;
  _holdThreshold = 300;
  _led = led;
  _controller = controller;

  pinMode(pin, INPUT);
     56c:	uxtb	r0, r2
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
  _reverseButton = reverseButton;
  _holdThreshold = 300;
     56e:	str	r1, [r4, #44]	; 0x2c
  bool reverseButton,
  Controller* controller
) {
  _id = id;
  _pin = pin;
  _shiftButton = shiftButton;
     570:	strb	r7, [r4, #16]
  _reverseButton = reverseButton;
     572:	strb	r6, [r4, #17]
  _holdThreshold = 300;
  _led = led;
  _controller = controller;
     574:	str	r5, [r4, #48]	; 0x30

  pinMode(pin, INPUT);
     576:	movs	r1, #0
     578:	bl	1a04 <pinMode>
};
     57c:	mov	r0, r4
     57e:	pop	{r3, r4, r5, r6, r7, pc}

00000580 <Button::onPressWhileHolding()>:
// in the tick function, i have to take a look at refactoring this
// im handling only shift and reverse
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
     580:	ldr	r3, [r0, #4]
     582:	cmp	r3, #1
     584:	beq.n	588 <Button::onPressWhileHolding()+0x8>
     586:	bx	lr
     588:	mov	r3, r0
// and maybe i dont need this function, there is
// also a redundancy with _state == HIGH 
// in the tick function, i have to take a look at refactoring this
// im handling only shift and reverse
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;
     58a:	ldr	r0, [r0, #48]	; 0x30

  if (_state == HIGH && _shiftButton) {
     58c:	ldrb	r2, [r3, #16]
// and maybe i dont need this function, there is
// also a redundancy with _state == HIGH 
// in the tick function, i have to take a look at refactoring this
// im handling only shift and reverse
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;
     58e:	ldr	r1, [r0, #76]	; 0x4c
// this is actually on press while hold
// and maybe i dont need this function, there is
// also a redundancy with _state == HIGH 
// in the tick function, i have to take a look at refactoring this
// im handling only shift and reverse
void Button::onPressWhileHolding () {
     590:	push	{r4, lr}
  Paginator * paginator = _controller->_sequencer->_paginator;
     592:	ldr	r4, [r1, #12]

  if (_state == HIGH && _shiftButton) {
     594:	cbnz	r2, 59c <Button::onPressWhileHolding()+0x1c>
    if (_controller->getShiftMode()) {
      paginator->previousPage();
    }
  } else if (_state == HIGH && _reverseButton) {
     596:	ldrb	r3, [r3, #17]
     598:	cbnz	r3, 5ae <Button::onPressWhileHolding()+0x2e>
     59a:	pop	{r4, pc}
// im handling only shift and reverse
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
     59c:	bl	12f0 <Controller::getShiftMode()>
     5a0:	cmp	r0, #0
     5a2:	beq.n	59a <Button::onPressWhileHolding()+0x1a>
      paginator->previousPage();
     5a4:	mov	r0, r4
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
      paginator->nextPage();
    }
  }
}
     5a6:	ldmia.w	sp!, {r4, lr}
void Button::onPressWhileHolding () {
  Paginator * paginator = _controller->_sequencer->_paginator;

  if (_state == HIGH && _shiftButton) {
    if (_controller->getShiftMode()) {
      paginator->previousPage();
     5aa:	b.w	d54 <Paginator::previousPage()>
    }
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
     5ae:	bl	12f0 <Controller::getShiftMode()>
     5b2:	cmp	r0, #0
     5b4:	beq.n	59a <Button::onPressWhileHolding()+0x1a>
      paginator->nextPage();
     5b6:	mov	r0, r4
    }
  }
}
     5b8:	ldmia.w	sp!, {r4, lr}
    if (_controller->getShiftMode()) {
      paginator->previousPage();
    }
  } else if (_state == HIGH && _reverseButton) {
    if (_controller->getShiftMode()) {
      paginator->nextPage();
     5bc:	b.w	d24 <Paginator::nextPage()>

000005c0 <Button::onRelease()>:
    }
  }
}

void Button::onRelease () {
     5c0:	push	{r4, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5c2:	ldr	r3, [pc, #116]	; (638 <Button::onRelease()+0x78>)
  if (timeSincePress() < _holdThreshold) {
     5c4:	ldr	r1, [r0, #36]	; 0x24
     5c6:	ldr	r3, [r3, #0]
     5c8:	ldr	r2, [r0, #44]	; 0x2c
      paginator->nextPage();
    }
  }
}

void Button::onRelease () {
     5ca:	sub	sp, #8
     5cc:	str	r3, [sp, #4]
	return ret;
     5ce:	ldr	r3, [sp, #4]
  if (timeSincePress() < _holdThreshold) {
     5d0:	subs	r3, r3, r1
     5d2:	cmp	r2, r3
     5d4:	bls.n	5f6 <Button::onRelease()+0x36>
    if (_shiftButton && !_controller->getShiftMode()) {
     5d6:	ldrb	r3, [r0, #16]
     5d8:	mov	r4, r0
     5da:	cbnz	r3, 5fa <Button::onRelease()+0x3a>
      _controller->toggleMode();
    } else if (_reverseButton && !_controller->getShiftMode()) {
     5dc:	ldrb	r3, [r0, #17]
     5de:	cbz	r3, 60e <Button::onRelease()+0x4e>
     5e0:	ldr	r0, [r4, #48]	; 0x30
     5e2:	bl	12f0 <Controller::getShiftMode()>
     5e6:	cbnz	r0, 630 <Button::onRelease()+0x70>
      // todo: make reverse wait until current page is done
      _controller->_sequencer->reverse();
     5e8:	ldr	r3, [r4, #48]	; 0x30
     5ea:	ldr	r0, [r3, #76]	; 0x4c
     5ec:	bl	4f0 <Sequencer::reverse()>
      _led->toggle();
     5f0:	ldr	r0, [r4, #52]	; 0x34
     5f2:	bl	8ac <Led::toggle()>
    } else if (!_reverseButton && !_shiftButton) {
      _led->toggle();
      _controller->_sequencer->_stepsEdit[_id - 1]->toggle();
    }
  } 
};
     5f6:	add	sp, #8
     5f8:	pop	{r4, pc}
  }
}

void Button::onRelease () {
  if (timeSincePress() < _holdThreshold) {
    if (_shiftButton && !_controller->getShiftMode()) {
     5fa:	ldr	r0, [r0, #48]	; 0x30
     5fc:	bl	12f0 <Controller::getShiftMode()>
     600:	cbz	r0, 626 <Button::onRelease()+0x66>
      _controller->toggleMode();
    } else if (_reverseButton && !_controller->getShiftMode()) {
     602:	ldrb	r3, [r4, #17]
     604:	cmp	r3, #0
     606:	bne.n	5e0 <Button::onRelease()+0x20>
      // todo: make reverse wait until current page is done
      _controller->_sequencer->reverse();
      _led->toggle();
    } else if (!_reverseButton && !_shiftButton) {
     608:	ldrb	r3, [r4, #16]
     60a:	cmp	r3, #0
     60c:	bne.n	5f6 <Button::onRelease()+0x36>
      _led->toggle();
     60e:	ldr	r0, [r4, #52]	; 0x34
     610:	bl	8ac <Led::toggle()>
      _controller->_sequencer->_stepsEdit[_id - 1]->toggle();
     614:	ldr	r2, [r4, #48]	; 0x30
     616:	ldr	r3, [r4, #0]
     618:	ldr	r2, [r2, #76]	; 0x4c
     61a:	adds	r3, #3
     61c:	ldr.w	r0, [r2, r3, lsl #2]
     620:	bl	da4 <Step::toggle()>
    }
  } 
};
     624:	b.n	5f6 <Button::onRelease()+0x36>
}

void Button::onRelease () {
  if (timeSincePress() < _holdThreshold) {
    if (_shiftButton && !_controller->getShiftMode()) {
      _controller->toggleMode();
     626:	ldr	r0, [r4, #48]	; 0x30
     628:	bl	1144 <Controller::toggleMode()>
    } else if (!_reverseButton && !_shiftButton) {
      _led->toggle();
      _controller->_sequencer->_stepsEdit[_id - 1]->toggle();
    }
  } 
};
     62c:	add	sp, #8
     62e:	pop	{r4, pc}
      _controller->toggleMode();
    } else if (_reverseButton && !_controller->getShiftMode()) {
      // todo: make reverse wait until current page is done
      _controller->_sequencer->reverse();
      _led->toggle();
    } else if (!_reverseButton && !_shiftButton) {
     630:	ldrb	r3, [r4, #17]
     632:	cmp	r3, #0
     634:	bne.n	5f6 <Button::onRelease()+0x36>
     636:	b.n	608 <Button::onRelease()+0x48>
     638:	.word	0x1fff15cc

0000063c <Button::onHold()>:
    }
  } 
};

void Button::onHold () {
  if (_id == 1) _controller->enterShiftMode();
     63c:	ldr	r3, [r0, #0]
     63e:	cmp	r3, #1
      _controller->_sequencer->_stepsEdit[_id - 1]->toggle();
    }
  } 
};

void Button::onHold () {
     640:	push	{r4, lr}
     642:	mov	r4, r0
  if (_id == 1) _controller->enterShiftMode();
     644:	beq.n	654 <Button::onHold()+0x18>
  if (_id == 2 && _controller->getShiftMode()) {
     646:	cmp	r3, #2
     648:	beq.n	660 <Button::onHold()+0x24>
    _controller->enterCopyMode();
  } 
  else if (_id == 5) _controller->enterChanceMode();
     64a:	cmp	r3, #5
     64c:	beq.n	688 <Button::onHold()+0x4c>
  else if (_id == 6 && _controller->getChanceMode()) {
     64e:	cmp	r3, #6
     650:	beq.n	676 <Button::onHold()+0x3a>
     652:	pop	{r4, pc}
    }
  } 
};

void Button::onHold () {
  if (_id == 1) _controller->enterShiftMode();
     654:	ldr	r0, [r0, #48]	; 0x30
     656:	bl	11d8 <Controller::enterShiftMode()>
     65a:	ldr	r3, [r4, #0]
  if (_id == 2 && _controller->getShiftMode()) {
     65c:	cmp	r3, #2
     65e:	bne.n	64a <Button::onHold()+0xe>
     660:	ldr	r0, [r4, #48]	; 0x30
     662:	bl	12f0 <Controller::getShiftMode()>
     666:	cbnz	r0, 66c <Button::onHold()+0x30>
     668:	ldr	r3, [r4, #0]
     66a:	b.n	64a <Button::onHold()+0xe>
    _controller->enterCopyMode();
     66c:	ldr	r0, [r4, #48]	; 0x30
  } 
  else if (_id == 5) _controller->enterChanceMode();
  else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
  }
}
     66e:	ldmia.w	sp!, {r4, lr}
};

void Button::onHold () {
  if (_id == 1) _controller->enterShiftMode();
  if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
     672:	b.w	1240 <Controller::enterCopyMode()>
  } 
  else if (_id == 5) _controller->enterChanceMode();
  else if (_id == 6 && _controller->getChanceMode()) {
     676:	ldr	r0, [r4, #48]	; 0x30
     678:	bl	12c8 <Controller::getChanceMode()>
     67c:	cbz	r0, 692 <Button::onHold()+0x56>
    _controller->enterSwingMode();
     67e:	ldr	r0, [r4, #48]	; 0x30
  }
}
     680:	ldmia.w	sp!, {r4, lr}
  if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
  } 
  else if (_id == 5) _controller->enterChanceMode();
  else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
     684:	b.w	1290 <Controller::enterSwingMode()>
void Button::onHold () {
  if (_id == 1) _controller->enterShiftMode();
  if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
  } 
  else if (_id == 5) _controller->enterChanceMode();
     688:	ldr	r0, [r4, #48]	; 0x30
  else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
  }
}
     68a:	ldmia.w	sp!, {r4, lr}
void Button::onHold () {
  if (_id == 1) _controller->enterShiftMode();
  if (_id == 2 && _controller->getShiftMode()) {
    _controller->enterCopyMode();
  } 
  else if (_id == 5) _controller->enterChanceMode();
     68e:	b.w	1250 <Controller::enterChanceMode()>
     692:	pop	{r4, pc}

00000694 <Button::onHoldRelease()>:
    _controller->enterSwingMode();
  }
}

void Button::onHoldRelease () {
  if (_id == 1) {
     694:	ldr	r3, [r0, #0]
     696:	cmp	r3, #1
  else if (_id == 6 && _controller->getChanceMode()) {
    _controller->enterSwingMode();
  }
}

void Button::onHoldRelease () {
     698:	push	{r4, lr}
     69a:	mov	r4, r0
  if (_id == 1) {
     69c:	beq.n	6c6 <Button::onHoldRelease()+0x32>
    _controller->exitShiftMode();

    if (_controller->getCopyMode()) {
      _controller->exitCopyMode();
    }
  } else if (_id == 2) {
     69e:	cmp	r3, #2
     6a0:	beq.n	6d6 <Button::onHoldRelease()+0x42>
    _controller->exitCopyMode();
  } else if (_id == 5) {
     6a2:	cmp	r3, #5
     6a4:	beq.n	6ac <Button::onHoldRelease()+0x18>
    _controller->exitChanceMode();

    if (_controller->getSwingMode()) {
      _controller->exitSwingMode();
    }
  } else if (_id == 6) {
     6a6:	cmp	r3, #6
     6a8:	beq.n	6bc <Button::onHoldRelease()+0x28>
     6aa:	pop	{r4, pc}
      _controller->exitCopyMode();
    }
  } else if (_id == 2) {
    _controller->exitCopyMode();
  } else if (_id == 5) {
    _controller->exitChanceMode();
     6ac:	ldr	r0, [r0, #48]	; 0x30
     6ae:	bl	1284 <Controller::exitChanceMode()>

    if (_controller->getSwingMode()) {
     6b2:	ldr	r0, [r4, #48]	; 0x30
     6b4:	bl	12d8 <Controller::getSwingMode()>
     6b8:	cmp	r0, #0
     6ba:	beq.n	6aa <Button::onHoldRelease()+0x16>
      _controller->exitSwingMode();
    }
  } else if (_id == 6) {
    _controller->exitSwingMode();
     6bc:	ldr	r0, [r4, #48]	; 0x30
  }
};
     6be:	ldmia.w	sp!, {r4, lr}

    if (_controller->getSwingMode()) {
      _controller->exitSwingMode();
    }
  } else if (_id == 6) {
    _controller->exitSwingMode();
     6c2:	b.w	12bc <Controller::exitSwingMode()>
  }
}

void Button::onHoldRelease () {
  if (_id == 1) {
    _controller->exitShiftMode();
     6c6:	ldr	r0, [r0, #48]	; 0x30
     6c8:	bl	1218 <Controller::exitShiftMode()>

    if (_controller->getCopyMode()) {
     6cc:	ldr	r0, [r4, #48]	; 0x30
     6ce:	bl	12e8 <Controller::getCopyMode()>
     6d2:	cmp	r0, #0
     6d4:	beq.n	6aa <Button::onHoldRelease()+0x16>
      _controller->exitCopyMode();
    }
  } else if (_id == 2) {
    _controller->exitCopyMode();
     6d6:	ldr	r0, [r4, #48]	; 0x30
      _controller->exitSwingMode();
    }
  } else if (_id == 6) {
    _controller->exitSwingMode();
  }
};
     6d8:	ldmia.w	sp!, {r4, lr}

    if (_controller->getCopyMode()) {
      _controller->exitCopyMode();
    }
  } else if (_id == 2) {
    _controller->exitCopyMode();
     6dc:	b.w	1248 <Controller::exitCopyMode()>

000006e0 <Button::tick()>:
  } else if (_id == 6) {
    _controller->exitSwingMode();
  }
};

void Button::tick () {
     6e0:	push	{r4, r5, lr}
     6e2:	mov	r4, r0
     6e4:	sub	sp, #28
  _current = digitalRead(_pin);
     6e6:	ldrb	r0, [r0, #24]
     6e8:	bl	19e8 <digitalRead>
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     6ec:	cmp	r0, #1
    _controller->exitSwingMode();
  }
};

void Button::tick () {
  _current = digitalRead(_pin);
     6ee:	str	r0, [r4, #28]
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     6f0:	beq.n	72c <Button::tick()+0x4c>
     6f2:	ldr	r3, [r4, #36]	; 0x24
     6f4:	ldr	r5, [pc, #140]	; (784 <Button::tick()+0xa4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6f6:	ldr	r2, [r5, #0]
     6f8:	str	r2, [sp, #16]
	return ret;
     6fa:	ldr	r2, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6fc:	ldr	r1, [pc, #132]	; (784 <Button::tick()+0xa4>)
    };
    //Serial.println("onHold");
    onHold();
  }

  if (timeSincePress() > 10) {    
     6fe:	subs	r2, r2, r3
     700:	cmp	r2, #10
     702:	bls.n	726 <Button::tick()+0x46>
    if (_state != _current) {
     704:	ldr	r2, [r4, #4]
     706:	cmp	r0, r2
     708:	beq.n	726 <Button::tick()+0x46>
      _state = _current;

      if (_state == HIGH) {
     70a:	cmp	r0, #1
    onHold();
  }

  if (timeSincePress() > 10) {    
    if (_state != _current) {
      _state = _current;
     70c:	str	r0, [r4, #4]

      if (_state == HIGH) {
     70e:	beq.n	778 <Button::tick()+0x98>
     710:	ldr	r2, [r1, #0]
     712:	str	r2, [sp, #20]
	return ret;
     714:	ldr	r2, [sp, #20]
        //Serial.println("onPressWhileHolding");      
        onPressWhileHolding();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
     716:	ldr	r1, [r4, #44]	; 0x2c
     718:	subs	r3, r2, r3
     71a:	cmp	r1, r3
          //Serial.println("onHoldRelease");
          onHoldRelease();
     71c:	mov	r0, r4
      if (_state == HIGH) {
        //Serial.println("onPressWhileHolding");      
        onPressWhileHolding();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
     71e:	bls.n	76c <Button::tick()+0x8c>
          //Serial.println("onHoldRelease");
          onHoldRelease();
        } else {
          onRelease();
     720:	bl	5c0 <Button::onRelease()>
     724:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     726:	str	r0, [r4, #32]
};
     728:	add	sp, #28
     72a:	pop	{r4, r5, pc}
bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
};

bool Button::currentWentUp() {
  return _current == HIGH && _previous == LOW;
     72c:	ldr	r2, [r4, #32]
     72e:	cbz	r2, 760 <Button::tick()+0x80>

  _previous = _current;
};

bool Button::currentIsUp() {
  return _current == HIGH && _previous == HIGH;
     730:	cmp	r2, #1
     732:	ldr	r3, [r4, #36]	; 0x24
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     734:	ldr	r5, [pc, #76]	; (784 <Button::tick()+0xa4>)
     736:	bne.n	6f6 <Button::tick()+0x16>
     738:	ldr	r2, [r5, #0]
     73a:	str	r2, [sp, #12]
	return ret;
     73c:	ldr	r2, [sp, #12]

  if (currentWentUp()) {
    _firstTime = millis();
  }

  if (currentIsUp() && timeSincePress() > _holdThreshold) {
     73e:	ldr	r1, [r4, #44]	; 0x2c
     740:	subs	r2, r2, r3
     742:	cmp	r1, r2
     744:	bcs.n	6f6 <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     746:	ldr	r3, [r5, #0]
     748:	str	r3, [sp, #8]
	return ret;
     74a:	ldr	r3, [sp, #8]
    _firstHoldTime = millis();
     74c:	str	r3, [r4, #40]	; 0x28
    if (!_controller->getShiftMode()) {
     74e:	ldr	r0, [r4, #48]	; 0x30
     750:	bl	12f0 <Controller::getShiftMode()>
      //Serial.println("shiftMode")
    };
    //Serial.println("onHold");
    onHold();
     754:	mov	r0, r4
     756:	bl	63c <Button::onHold()>
     75a:	ldr	r0, [r4, #28]
     75c:	ldr	r3, [r4, #36]	; 0x24
     75e:	b.n	6f6 <Button::tick()+0x16>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     760:	ldr	r5, [pc, #32]	; (784 <Button::tick()+0xa4>)
     762:	ldr	r3, [r5, #0]
     764:	str	r3, [sp, #4]
	return ret;
     766:	ldr	r3, [sp, #4]

void Button::tick () {
  _current = digitalRead(_pin);

  if (currentWentUp()) {
    _firstTime = millis();
     768:	str	r3, [r4, #36]	; 0x24
     76a:	b.n	6f6 <Button::tick()+0x16>
        onPressWhileHolding();
      } else {
        
        if (timeSincePress() >= _holdThreshold) {
          //Serial.println("onHoldRelease");
          onHoldRelease();
     76c:	bl	694 <Button::onHoldRelease()>
     770:	ldr	r0, [r4, #28]
        }
      }
    }
  }

  _previous = _current;
     772:	str	r0, [r4, #32]
};
     774:	add	sp, #28
     776:	pop	{r4, r5, pc}
    if (_state != _current) {
      _state = _current;

      if (_state == HIGH) {
        //Serial.println("onPressWhileHolding");      
        onPressWhileHolding();
     778:	mov	r0, r4
     77a:	bl	580 <Button::onPressWhileHolding()>
     77e:	ldr	r0, [r4, #28]
     780:	b.n	726 <Button::tick()+0x46>
     782:	nop
     784:	.word	0x1fff15cc

00000788 <Piano::Piano(Sequencer*)>:
#include "note.h"
#include "piano.h"
#include "step.h"
#include "sequencer.h"

Piano::Piano (Sequencer* sequencer) {
     788:	push	{r3, r4, r5, r6, r7, lr}
     78a:	ldr	r5, [pc, #56]	; (7c4 <Piano::Piano(Sequencer*)+0x3c>)
     78c:	mov	r6, r0
     78e:	mov	r7, r1
     790:	ldmia	r5!, {r0, r1, r2, r3}
     792:	add.w	r4, r6, #20
     796:	stmia	r4!, {r0, r1, r2, r3}
     798:	ldmia	r5!, {r0, r1, r2, r3}
     79a:	stmia	r4!, {r0, r1, r2, r3}
     79c:	ldr	r3, [r5, #0]
     79e:	str	r3, [r4, #0]
  _sequencer = sequencer;

  _currentScale = 0;
     7a0:	movs	r3, #0
#include "piano.h"
#include "step.h"
#include "sequencer.h"

Piano::Piano (Sequencer* sequencer) {
  _sequencer = sequencer;
     7a2:	str	r7, [r6, #16]

  _currentScale = 0;
     7a4:	str	r3, [r6, #56]	; 0x38
     7a6:	subs	r4, r6, #4
     7a8:	add.w	r7, r6, #12

  for (int i = 0; i < 4; i++) {
    _notes[i] = new Note();
     7ac:	movs	r0, #20
     7ae:	bl	3084 <operator new(unsigned int)>
     7b2:	mov	r5, r0
     7b4:	bl	994 <Note::Note()>
     7b8:	str.w	r5, [r4, #4]!
Piano::Piano (Sequencer* sequencer) {
  _sequencer = sequencer;

  _currentScale = 0;

  for (int i = 0; i < 4; i++) {
     7bc:	cmp	r4, r7
     7be:	bne.n	7ac <Piano::Piano(Sequencer*)+0x24>
    _notes[i] = new Note();
  } 
};
     7c0:	mov	r0, r6
     7c2:	pop	{r3, r4, r5, r6, r7, pc}
     7c4:	.word	0x00004488

000007c8 <Piano::tick()>:

void Piano::tick () {
     7c8:	push	{r3, r4, r5, lr}
     7ca:	subs	r4, r0, #4
     7cc:	add.w	r5, r0, #12
  for (int i = 0; i < 4; i++) {
    _notes[i]->tick();
     7d0:	ldr.w	r0, [r4, #4]!
     7d4:	bl	a28 <Note::tick()>
    _notes[i] = new Note();
  } 
};

void Piano::tick () {
  for (int i = 0; i < 4; i++) {
     7d8:	cmp	r4, r5
     7da:	bne.n	7d0 <Piano::tick()+0x8>
    _notes[i]->tick();
  } 
};
     7dc:	pop	{r3, r4, r5, pc}
     7de:	nop

000007e0 <Piano::play(Step*)>:
  }

  return 0; // <-- hack to get rid of a warning, hate my life
};

void Piano::play (Step* step) {
     7e0:	push	{r4, r5}
     7e2:	subs	r3, r0, #4
     7e4:	add.w	r2, r0, #12
  } 
};

Note* Piano::findNote() {
  for (int i = 0; i < 4; i++) {
    if (!_notes[i]->_active) {
     7e8:	ldr.w	r4, [r3, #4]!
     7ec:	ldr	r5, [r4, #16]
     7ee:	cbz	r5, 7f6 <Piano::play(Step*)+0x16>
    _notes[i]->tick();
  } 
};

Note* Piano::findNote() {
  for (int i = 0; i < 4; i++) {
     7f0:	cmp	r3, r2
     7f2:	bne.n	7e8 <Piano::play(Step*)+0x8>
    if (!_notes[i]->_active) {
      return _notes[i];
    }
  }

  return 0; // <-- hack to get rid of a warning, hate my life
     7f4:	movs	r4, #0
};

void Piano::play (Step* step) {
  Note* note = findNote();
  auto& scale = _scale[step->pitchScale];
     7f6:	ldr	r2, [r1, #4]
     7f8:	add.w	r2, r2, r2, lsl #1
     7fc:	add.w	r2, r0, r2, lsl #2
  note->play(step, scale);
     800:	adds	r2, #20
     802:	mov	r0, r4
};
     804:	pop	{r4, r5}
};

void Piano::play (Step* step) {
  Note* note = findNote();
  auto& scale = _scale[step->pitchScale];
  note->play(step, scale);
     806:	b.w	9d4 <Note::play(Step*, int*)>
     80a:	nop

0000080c <Piano::transpose(int)>:

// todo: implement global transpose
void Piano::transpose (int value) {
  int newValue = value;

  if (value < 330) {
     80c:	cmp.w	r1, #330	; 0x14a
     810:	blt.n	824 <Piano::transpose(int)+0x18>
    newValue = 2;
  } else if (value < 660) {
     812:	cmp.w	r1, #660	; 0x294
     816:	bge.n	846 <Piano::transpose(int)+0x3a>
    newValue = 1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  if (_currentScale != newValue) {
     818:	ldr	r3, [r0, #56]	; 0x38
  int newValue = value;

  if (value < 330) {
    newValue = 2;
  } else if (value < 660) {
    newValue = 1;
     81a:	movs	r1, #1
  } else if (value <= 1023) {
    newValue = 0;
  }

  if (_currentScale != newValue) {
     81c:	cmp	r1, r3
     81e:	bne.n	82c <Piano::transpose(int)+0x20>
    for (size_t i = 0; i < 4; i++) {
      _sequencer->_stepsEdit[i]->pitchScale = newValue;
    }
  }

  _currentScale = newValue;
     820:	str	r1, [r0, #56]	; 0x38
     822:	bx	lr
// todo: implement global transpose
void Piano::transpose (int value) {
  int newValue = value;

  if (value < 330) {
    newValue = 2;
     824:	movs	r1, #2
    newValue = 1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  if (_currentScale != newValue) {
     826:	ldr	r3, [r0, #56]	; 0x38
     828:	cmp	r1, r3
     82a:	beq.n	820 <Piano::transpose(int)+0x14>
  auto& scale = _scale[step->pitchScale];
  note->play(step, scale);
};

// todo: implement global transpose
void Piano::transpose (int value) {
     82c:	push	{r4, r5}
     82e:	ldr	r3, [r0, #16]
    newValue = 0;
  }

  if (_currentScale != newValue) {
    for (size_t i = 0; i < 4; i++) {
      _sequencer->_stepsEdit[i]->pitchScale = newValue;
     830:	ldr	r5, [r3, #16]
     832:	ldr	r4, [r3, #20]
     834:	ldr	r2, [r3, #24]
     836:	ldr	r3, [r3, #28]
     838:	str	r1, [r5, #4]
     83a:	str	r1, [r4, #4]
     83c:	str	r1, [r2, #4]
    }
  }

  _currentScale = newValue;
};
     83e:	pop	{r4, r5}
    newValue = 0;
  }

  if (_currentScale != newValue) {
    for (size_t i = 0; i < 4; i++) {
      _sequencer->_stepsEdit[i]->pitchScale = newValue;
     840:	str	r1, [r3, #4]
    }
  }

  _currentScale = newValue;
     842:	str	r1, [r0, #56]	; 0x38
};
     844:	bx	lr

  if (value < 330) {
    newValue = 2;
  } else if (value < 660) {
    newValue = 1;
  } else if (value <= 1023) {
     846:	cmp.w	r1, #1024	; 0x400
    newValue = 0;
     84a:	it	lt
     84c:	movlt	r1, #0
     84e:	b.n	826 <Piano::transpose(int)+0x1a>

00000850 <Led::Led(int, int)>:
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
     850:	push	{r3, r4, r5, lr}
     852:	mov	r4, r0
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     854:	movs	r3, #0
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     856:	movs	r5, #75	; 0x4b
#include <Arduino.h>
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
     858:	stmia.w	r0, {r1, r2}
  _state = state;
  _blinkLength = 75;
  _blinking = false;
  _blinkingCounter = 0;

  pinMode(_pin, OUTPUT);
     85c:	uxtb	r0, r1

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
  _blinking = false;
     85e:	strb	r3, [r4, #16]
  _blinkingCounter = 0;
     860:	str	r3, [r4, #20]
#include "led.h"

Led::Led (int pin = 0, int state = LOW) {
  _pin = pin;
  _state = state;
  _blinkLength = 75;
     862:	str	r5, [r4, #12]
  _blinking = false;
  _blinkingCounter = 0;

  pinMode(_pin, OUTPUT);
     864:	movs	r1, #1
     866:	bl	1a04 <pinMode>
  digitalWrite(_pin, _state);
     86a:	ldrb	r0, [r4, #0]
     86c:	ldrb	r1, [r4, #4]
     86e:	bl	19dc <digitalWrite>
};
     872:	mov	r0, r4
     874:	pop	{r3, r4, r5, pc}
     876:	nop

00000878 <Led::blink(int)>:

void Led::blink (int times) {
     878:	push	{r4, r5, r6, lr}
  digitalWrite(_pin, !digitalRead(_pin));
     87a:	ldrb	r5, [r0, #0]

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     87c:	sub	sp, #8
     87e:	mov	r4, r0
  digitalWrite(_pin, !digitalRead(_pin));
     880:	mov	r0, r5

  pinMode(_pin, OUTPUT);
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
     882:	mov	r6, r1
  digitalWrite(_pin, !digitalRead(_pin));
     884:	bl	19e8 <digitalRead>
     888:	clz	r1, r0
     88c:	lsrs	r1, r1, #5
     88e:	mov	r0, r5
     890:	bl	19dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     894:	ldr	r3, [pc, #16]	; (8a8 <Led::blink(int)+0x30>)
  _blinking = true;
  _blinkingCounter = times;
     896:	str	r6, [r4, #20]
     898:	ldr	r3, [r3, #0]
     89a:	str	r3, [sp, #4]
	return ret;
     89c:	ldr	r3, [sp, #4]
  _lastBlink = millis();  
     89e:	str	r3, [r4, #8]
  digitalWrite(_pin, _state);
};

void Led::blink (int times) {
  digitalWrite(_pin, !digitalRead(_pin));
  _blinking = true;
     8a0:	movs	r2, #1
     8a2:	strb	r2, [r4, #16]
  _blinkingCounter = times;
  _lastBlink = millis();  
};
     8a4:	add	sp, #8
     8a6:	pop	{r4, r5, r6, pc}
     8a8:	.word	0x1fff15cc

000008ac <Led::toggle()>:

void Led::toggle () {
  _state = !_state;
     8ac:	ldr	r1, [r0, #4]
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     8ae:	push	{r4, lr}
  _state = !_state;
     8b0:	clz	r1, r1
  _blinking = true;
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
     8b4:	mov	r4, r0
  _state = !_state;
     8b6:	lsrs	r1, r1, #5

  digitalWrite(_pin, _state);
     8b8:	ldrb	r0, [r0, #0]
  _blinkingCounter = times;
  _lastBlink = millis();  
};

void Led::toggle () {
  _state = !_state;
     8ba:	str	r1, [r4, #4]

  digitalWrite(_pin, _state);
     8bc:	bl	19dc <digitalWrite>

  if (_blinking) {
     8c0:	ldrb	r3, [r4, #16]
     8c2:	cbnz	r3, 8c6 <Led::toggle()+0x1a>
     8c4:	pop	{r4, pc}
    digitalWrite(_pin, !_state);
     8c6:	ldr	r1, [r4, #4]
     8c8:	ldrb	r0, [r4, #0]
     8ca:	clz	r1, r1
     8ce:	lsrs	r1, r1, #5
  }
};
     8d0:	ldmia.w	sp!, {r4, lr}
  _state = !_state;

  digitalWrite(_pin, _state);

  if (_blinking) {
    digitalWrite(_pin, !_state);
     8d4:	b.w	19dc <digitalWrite>

000008d8 <Led::off()>:
  }
};

void Led::off () {
  _blinking = false;
     8d8:	movs	r1, #0
     8da:	strb	r1, [r0, #16]
  _state = 0;
     8dc:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     8de:	ldrb	r0, [r0, #0]
     8e0:	b.w	19dc <digitalWrite>

000008e4 <Led::on()>:
}

void Led::on () {
  _blinking = false;
     8e4:	movs	r3, #0
  _state = 1;
     8e6:	movs	r1, #1
  _state = 0;
  digitalWrite(_pin, _state);
}

void Led::on () {
  _blinking = false;
     8e8:	strb	r3, [r0, #16]
  _state = 1;
     8ea:	str	r1, [r0, #4]
  digitalWrite(_pin, _state);
     8ec:	ldrb	r0, [r0, #0]
     8ee:	b.w	19dc <digitalWrite>
     8f2:	nop

000008f4 <Led::tick()>:

bool Led::blinkTimePassed () {
  return millis() - _lastBlink > _blinkLength;
};

void Led::tick () {
     8f4:	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8f6:	ldr	r5, [pc, #112]	; (968 <Led::tick()+0x74>)
     8f8:	sub	sp, #16
     8fa:	ldr	r3, [r5, #0]
     8fc:	str	r3, [sp, #0]
	return ret;
     8fe:	ldr	r2, [sp, #0]
  // hack
  if (millis() < 3000) return; 
     900:	movw	r3, #2999	; 0xbb7
     904:	cmp	r2, r3
     906:	bls.n	932 <Led::tick()+0x3e>

  if (_blinking && blinkTimePassed()) {
     908:	ldrb	r3, [r0, #16]
     90a:	mov	r4, r0
     90c:	cbnz	r3, 936 <Led::tick()+0x42>
    digitalWrite(_pin, !digitalRead(_pin));
    _blinking = false;
    _lastBlink = millis();        
  }

  if (!_blinking && _blinkingCounter > 0 && blinkTimePassed()) {
     90e:	ldr	r1, [r4, #20]
     910:	cmp	r1, #0
     912:	ble.n	932 <Led::tick()+0x3e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     914:	ldr	r3, [r5, #0]
     916:	str	r3, [sp, #12]
	return ret;
     918:	ldr	r3, [sp, #12]
     91a:	ldr	r0, [r4, #8]
     91c:	ldr	r2, [r4, #12]
     91e:	subs	r3, r3, r0
     920:	cmp	r3, r2
     922:	bls.n	932 <Led::tick()+0x3e>
    blink(_blinkingCounter - 1);
     924:	subs	r1, #1
     926:	mov	r0, r4
     928:	bl	878 <Led::blink(int)>
    _blinkingCounter--;
     92c:	ldr	r3, [r4, #20]
     92e:	subs	r3, #1
     930:	str	r3, [r4, #20]
  }
};
     932:	add	sp, #16
     934:	pop	{r4, r5, r6, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     936:	ldr	r3, [r5, #0]
     938:	str	r3, [sp, #8]
	return ret;
     93a:	ldr	r3, [sp, #8]

void Led::tick () {
  // hack
  if (millis() < 3000) return; 

  if (_blinking && blinkTimePassed()) {
     93c:	ldr	r1, [r0, #8]
     93e:	ldr	r2, [r0, #12]
     940:	subs	r3, r3, r1
     942:	cmp	r3, r2
     944:	bls.n	932 <Led::tick()+0x3e>
    digitalWrite(_pin, !digitalRead(_pin));
     946:	ldrb	r6, [r0, #0]
     948:	mov	r0, r6
     94a:	bl	19e8 <digitalRead>
     94e:	clz	r1, r0
     952:	lsrs	r1, r1, #5
     954:	mov	r0, r6
     956:	bl	19dc <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     95a:	ldr	r3, [r5, #0]
     95c:	str	r3, [sp, #4]
	return ret;
     95e:	ldr	r3, [sp, #4]
    _blinking = false;
    _lastBlink = millis();        
     960:	str	r3, [r4, #8]
  // hack
  if (millis() < 3000) return; 

  if (_blinking && blinkTimePassed()) {
    digitalWrite(_pin, !digitalRead(_pin));
    _blinking = false;
     962:	movs	r3, #0
     964:	strb	r3, [r4, #16]
     966:	b.n	90e <Led::tick()+0x1a>
     968:	.word	0x1fff15cc

0000096c <setup>:
// channel, this would be cool to program
// for example drum machines or maybe more 
// complex polyphonic stuff
Sequencer* sequencer = new Sequencer();

void setup() {
     96c:	bx	lr
     96e:	nop

00000970 <loop>:
  Serial.begin(9600); 
}

void loop() {
  sequencer->tick();
     970:	ldr	r3, [pc, #4]	; (978 <loop+0x8>)
     972:	ldr	r0, [r3, #0]
     974:	b.w	4dc <Sequencer::tick()>
     978:	.word	0x1fff15b0

0000097c <_GLOBAL__sub_I_sequencer>:
     97c:	push	{r4, lr}
// but actually many tracks with each one 
// having a sequencer but all in the same
// channel, this would be cool to program
// for example drum machines or maybe more 
// complex polyphonic stuff
Sequencer* sequencer = new Sequencer();
     97e:	movs	r0, #56	; 0x38
     980:	bl	3084 <operator new(unsigned int)>
     984:	mov	r4, r0
     986:	bl	46c <Sequencer::Sequencer()>
     98a:	ldr	r3, [pc, #4]	; (990 <_GLOBAL__sub_I_sequencer+0x14>)
     98c:	str	r4, [r3, #0]
     98e:	pop	{r4, pc}
     990:	.word	0x1fff15b0

00000994 <Note::Note()>:
bool Note::isActive() {
  return _active;
};

void Note::reset() {
  _length = 0;
     994:	movs	r2, #0
     996:	str	r2, [r0, #8]
  _pitch = 0;
     998:	str	r2, [r0, #0]
  _velocity = 0;
     99a:	str	r2, [r0, #4]
  _channel = 0;
     99c:	str	r2, [r0, #12]
  _active = false;
     99e:	str	r2, [r0, #16]
#include "step.h"
#include "note.h"

Note::Note () {
  reset();
};
     9a0:	bx	lr
     9a2:	nop

000009a4 <Note::noteOn(unsigned char, unsigned char, unsigned char)>:
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     9a4:	subs	r1, #1
// First parameter is the event type (0x09 = note on, 0x08 = note off).
// Second parameter is note-on/note-off, combined with the channel.
// Channel can be anything between 0-15. Typically reported to the user as 1-16.
// Third parameter is the note number (48 = middle C).
// Fourth parameter is the velocity (64 = normal, 127 = fastest).
void Note::noteOn(byte channel, byte pitch, byte velocity) {
     9a6:	push	{r3, lr}
     9a8:	lsls	r1, r1, #8
     9aa:	lsls	r3, r3, #24
     9ac:	and.w	r1, r1, #3840	; 0xf00
     9b0:	and.w	r3, r3, #2130706432	; 0x7f000000
     9b4:	orrs	r3, r1
     9b6:	lsls	r2, r2, #16
     9b8:	orr.w	r3, r3, #36864	; 0x9000
     9bc:	orr.w	r3, r3, #9
     9c0:	and.w	r0, r2, #8323072	; 0x7f0000
     9c4:	orrs	r0, r3
     9c6:	bl	1c68 <usb_midi_write_packed>
  usbMIDI.sendNoteOn(pitch, velocity, channel);
  usbMIDI.send_now();
};
     9ca:	ldmia.w	sp!, {r3, lr}
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     9ce:	b.w	1d04 <usb_midi_flush_output>
     9d2:	nop

000009d4 <Note::play(Step*, int*)>:
  _velocity = 0;
  _channel = 0;
  _active = false;
};

void Note::play(Step* step, int scale[3]) {
     9d4:	push	{r4, r5}
  _active = true;
  _length = step->length;
     9d6:	ldr	r5, [r1, #16]
  _pitch = scale[step->pitchGrade];
     9d8:	ldr	r3, [r1, #8]
  _active = false;
};

void Note::play(Step* step, int scale[3]) {
  _active = true;
  _length = step->length;
     9da:	str	r5, [r0, #8]
  _channel = 0;
  _active = false;
};

void Note::play(Step* step, int scale[3]) {
  _active = true;
     9dc:	movs	r5, #1
     9de:	str	r5, [r0, #16]
  _length = step->length;
  _pitch = scale[step->pitchGrade];
     9e0:	ldr.w	r2, [r2, r3, lsl #2]
  _velocity = step->velocity;
     9e4:	ldr	r3, [r1, #12]
     9e6:	str	r3, [r0, #4]
};

void Note::play(Step* step, int scale[3]) {
  _active = true;
  _length = step->length;
  _pitch = scale[step->pitchGrade];
     9e8:	str	r2, [r0, #0]
  _velocity = step->velocity;
  // String noteLog = "Playing note, length: ";
  // //Serial.println(noteLog + _length);
  noteOn(_channel, _pitch, _velocity);
     9ea:	uxtb	r3, r3
     9ec:	uxtb	r2, r2
     9ee:	ldrb	r1, [r0, #12]
};
     9f0:	pop	{r4, r5}
  _length = step->length;
  _pitch = scale[step->pitchGrade];
  _velocity = step->velocity;
  // String noteLog = "Playing note, length: ";
  // //Serial.println(noteLog + _length);
  noteOn(_channel, _pitch, _velocity);
     9f2:	b.w	9a4 <Note::noteOn(unsigned char, unsigned char, unsigned char)>
     9f6:	nop

000009f8 <Note::noteOff(unsigned char, unsigned char, unsigned char)>:
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
     9f8:	subs	r1, #1
void Note::noteOn(byte channel, byte pitch, byte velocity) {
  usbMIDI.sendNoteOn(pitch, velocity, channel);
  usbMIDI.send_now();
};

void Note::noteOff(byte channel, byte pitch, byte velocity) {
     9fa:	push	{r3, lr}
     9fc:	lsls	r1, r1, #8
     9fe:	lsls	r3, r3, #24
     a00:	and.w	r1, r1, #3840	; 0xf00
     a04:	and.w	r3, r3, #2130706432	; 0x7f000000
     a08:	orrs	r3, r1
     a0a:	lsls	r2, r2, #16
     a0c:	orr.w	r3, r3, #32768	; 0x8000
     a10:	orr.w	r3, r3, #8
     a14:	and.w	r0, r2, #8323072	; 0x7f0000
     a18:	orrs	r0, r3
     a1a:	bl	1c68 <usb_midi_write_packed>
  usbMIDI.sendNoteOff(pitch, velocity, channel);
  usbMIDI.send_now();
};
     a1e:	ldmia.w	sp!, {r3, lr}
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
     a22:	b.w	1d04 <usb_midi_flush_output>
     a26:	nop

00000a28 <Note::tick()>:
Note::Note () {
  reset();
};

void Note::tick() {
  if (!_active) return;
     a28:	ldr	r2, [r0, #16]
     a2a:	cbz	r2, a36 <Note::tick()+0xe>

  _length--;
     a2c:	ldr	r2, [r0, #8]
     a2e:	subs	r2, #1

  if (_length <= 0) {
     a30:	cmp	r2, #0
};

void Note::tick() {
  if (!_active) return;

  _length--;
     a32:	str	r2, [r0, #8]

  if (_length <= 0) {
     a34:	ble.n	a38 <Note::tick()+0x10>
     a36:	bx	lr

Note::Note () {
  reset();
};

void Note::tick() {
     a38:	push	{r4, lr}
  _length--;

  if (_length <= 0) {
    // String noteLog = "Note off, pitch: ";
    // //Serial.println(noteLog + _pitch);    
    noteOff(_channel, _pitch, _velocity);
     a3a:	ldrb	r3, [r0, #4]
     a3c:	ldrb	r2, [r0, #0]
     a3e:	ldrb	r1, [r0, #12]
     a40:	mov	r4, r0
     a42:	bl	9f8 <Note::noteOff(unsigned char, unsigned char, unsigned char)>
bool Note::isActive() {
  return _active;
};

void Note::reset() {
  _length = 0;
     a46:	movs	r3, #0
     a48:	str	r3, [r4, #8]
  _pitch = 0;
     a4a:	str	r3, [r4, #0]
  _velocity = 0;
     a4c:	str	r3, [r4, #4]
  _channel = 0;
     a4e:	str	r3, [r4, #12]
  _active = false;
     a50:	str	r3, [r4, #16]
     a52:	pop	{r4, pc}

00000a54 <Transport::Transport(Sequencer*)>:
// this class has to keep track of the midi packets coming from the outside
// it also has the implementation of the top right knob that controls resolution
// and its job is also to tell the sequence when the next step starts
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
     a54:	push	{r4}
  _sequencer = sequencer;
  _state = false;
  max_ppqn = 24;
     a56:	movs	r4, #24
// and its job is also to tell the sequence when the next step starts
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     a58:	movs	r2, #0
  max_ppqn = 24;
     a5a:	stmia.w	r0, {r1, r4}
// and its job is also to tell the sequence when the next step starts
// step timing is what is handled here

Transport::Transport (Sequencer* sequencer) {
  _sequencer = sequencer;
  _state = false;
     a5e:	str	r2, [r0, #12]
  max_ppqn = 24;
  ppqn = 0;
     a60:	str	r2, [r0, #8]
};
     a62:	ldr.w	r4, [sp], #4
     a66:	bx	lr

00000a68 <Transport::controlTempo(int)>:
int Transport::getPPQN () {
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
     a68:	cmp.w	r1, #400	; 0x190
     a6c:	bge.n	a7e <Transport::controlTempo(int)+0x16>
    max_ppqn = 6;

    if (ppqn >= 6) {
     a6e:	ldr	r3, [r0, #8]
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
    max_ppqn = 6;
     a70:	movs	r2, #6

    if (ppqn >= 6) {
     a72:	cmp	r3, #5
  return max_ppqn;
}

void Transport::controlTempo (int value) {
  if (value < 400) {
    max_ppqn = 6;
     a74:	str	r2, [r0, #4]

    if (ppqn >= 6) {
     a76:	ble.n	a94 <Transport::controlTempo(int)+0x2c>
      ppqn = 0;
     a78:	movs	r3, #0
     a7a:	str	r3, [r0, #8]
     a7c:	bx	lr
    }
  } else if (value >= 400 && value < 800) {
     a7e:	sub.w	r3, r1, #400	; 0x190
     a82:	cmp.w	r3, #400	; 0x190
     a86:	bcc.n	a96 <Transport::controlTempo(int)+0x2e>
    max_ppqn = 8;

    if (ppqn >= 8) {
      ppqn = 0;
    }
  } else if (value >= 800 && value <= 1023) {
     a88:	sub.w	r1, r1, #800	; 0x320
     a8c:	cmp	r1, #223	; 0xdf
    max_ppqn = 10;
     a8e:	itt	ls
     a90:	movls	r3, #10
     a92:	strls	r3, [r0, #4]
     a94:	bx	lr
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;

    if (ppqn >= 8) {
     a96:	ldr	r3, [r0, #8]

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;
     a98:	movs	r2, #8

    if (ppqn >= 8) {
     a9a:	cmp	r3, #7

    if (ppqn >= 6) {
      ppqn = 0;
    }
  } else if (value >= 400 && value < 800) {
    max_ppqn = 8;
     a9c:	str	r2, [r0, #4]

    if (ppqn >= 8) {
     a9e:	bgt.n	a78 <Transport::controlTempo(int)+0x10>
     aa0:	bx	lr
     aa2:	nop

00000aa4 <Transport::advancePPQN()>:
    default:;
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
     aa4:	push	{r3, r4, r5, lr}
  ++ppqn;
     aa6:	ldr	r3, [r0, #8]

  _sequencer->_piano->tick();
     aa8:	ldr	r2, [r0, #0]
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
  ++ppqn;
     aaa:	adds	r3, #1
    default:;
      //Serial.println("Opps, an unknown MIDI message type!");
  }
}

void Transport::advancePPQN () {
     aac:	mov	r4, r0
  ++ppqn;
     aae:	str	r3, [r0, #8]

  _sequencer->_piano->tick();
     ab0:	ldr	r0, [r2, #52]	; 0x34
     ab2:	bl	7c8 <Piano::tick()>
  // so sequencer should have a play step function that
  // gets called when the transport knows about a steps swing
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing
  
  if (ppqn == (max_ppqn + current->swing) && current->_state) {
     ab6:	ldmia.w	r4, {r1, r2}
void Transport::advancePPQN () {
  ++ppqn;

  _sequencer->_piano->tick();

  Step* current = _sequencer->_stepsPlayback[_sequencer->_currentStep];
     aba:	ldr	r3, [r1, #48]	; 0x30
  // so sequencer should have a play step function that
  // gets called when the transport knows about a steps swing
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing
  
  if (ppqn == (max_ppqn + current->swing) && current->_state) {
     abc:	ldr	r0, [r4, #8]
void Transport::advancePPQN () {
  ++ppqn;

  _sequencer->_piano->tick();

  Step* current = _sequencer->_stepsPlayback[_sequencer->_currentStep];
     abe:	adds	r3, #8
     ac0:	ldr.w	r5, [r1, r3, lsl #2]
  // so sequencer should have a play step function that
  // gets called when the transport knows about a steps swing
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing
  
  if (ppqn == (max_ppqn + current->swing) && current->_state) {
     ac4:	ldr	r3, [r5, #28]
     ac6:	add	r3, r2
     ac8:	cmp	r0, r3
     aca:	beq.n	ad2 <Transport::advancePPQN()+0x2e>
    int rand = random(100);
    if (rand <= current->chance) _sequencer->_piano->play(current);
  }

  if (ppqn == max_ppqn) {
     acc:	cmp	r0, r2
     ace:	beq.n	aea <Transport::advancePPQN()+0x46>
     ad0:	pop	{r3, r4, r5, pc}
  // so sequencer should have a play step function that
  // gets called when the transport knows about a steps swing
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing
  
  if (ppqn == (max_ppqn + current->swing) && current->_state) {
     ad2:	ldrb	r3, [r5, #20]
     ad4:	cmp	r3, #0
     ad6:	beq.n	acc <Transport::advancePPQN()+0x28>
    int rand = random(100);
     ad8:	movs	r0, #100	; 0x64
     ada:	bl	3078 <random(unsigned long)>
    if (rand <= current->chance) _sequencer->_piano->play(current);
     ade:	ldr	r3, [r5, #24]
     ae0:	cmp	r0, r3
     ae2:	ble.n	af6 <Transport::advancePPQN()+0x52>
     ae4:	ldr	r0, [r4, #8]
     ae6:	ldr	r2, [r4, #4]
     ae8:	b.n	acc <Transport::advancePPQN()+0x28>
  }

  if (ppqn == max_ppqn) {
    _sequencer->step();
     aea:	ldr	r0, [r4, #0]
     aec:	bl	4fc <Sequencer::step()>
    ppqn = 0;
     af0:	movs	r3, #0
     af2:	str	r3, [r4, #8]
     af4:	pop	{r3, r4, r5, pc}
  // and then a normal step function to just advance the ui
  // because that should be unaffected by swing
  
  if (ppqn == (max_ppqn + current->swing) && current->_state) {
    int rand = random(100);
    if (rand <= current->chance) _sequencer->_piano->play(current);
     af6:	ldr	r3, [r4, #0]
     af8:	mov	r1, r5
     afa:	ldr	r0, [r3, #52]	; 0x34
     afc:	bl	7e0 <Piano::play(Step*)>
     b00:	b.n	ae4 <Transport::advancePPQN()+0x40>
     b02:	nop

00000b04 <Transport::startPPQN()>:
    _sequencer->step();
    ppqn = 0;
  }
};

void Transport::startPPQN () {
     b04:	push	{r4, lr}
  _state = true;
     b06:	movs	r2, #1
    _sequencer->step();
    ppqn = 0;
  }
};

void Transport::startPPQN () {
     b08:	mov	r4, r0
  _state = true;
  ppqn = 0;
     b0a:	movs	r3, #0
    ppqn = 0;
  }
};

void Transport::startPPQN () {
  _state = true;
     b0c:	str	r2, [r0, #12]
  ppqn = 0;
     b0e:	str	r3, [r0, #8]
  _sequencer->step();
     b10:	ldr	r0, [r0, #0]
     b12:	bl	4fc <Sequencer::step()>
  _sequencer->_piano->tick();
     b16:	ldr	r3, [r4, #0]
     b18:	ldr	r0, [r3, #52]	; 0x34
     b1a:	bl	7c8 <Piano::tick()>
  _sequencer->_controller->_leds[5]->toggle();
     b1e:	ldr	r3, [r4, #0]
     b20:	ldr	r3, [r3, #8]
};
     b22:	ldmia.w	sp!, {r4, lr}
void Transport::startPPQN () {
  _state = true;
  ppqn = 0;
  _sequencer->step();
  _sequencer->_piano->tick();
  _sequencer->_controller->_leds[5]->toggle();
     b26:	ldr	r0, [r3, #72]	; 0x48
     b28:	b.w	8ac <Led::toggle()>

00000b2c <Transport::stopPPQN()>:
};

void Transport::stopPPQN () {
     b2c:	push	{r4, lr}
  _state = false;
     b2e:	movs	r3, #0
  _sequencer->step();
  _sequencer->_piano->tick();
  _sequencer->_controller->_leds[5]->toggle();
};

void Transport::stopPPQN () {
     b30:	mov	r4, r0
  _state = false;
     b32:	str	r3, [r0, #12]
  ppqn = 0;
     b34:	str	r3, [r0, #8]
  _sequencer->resetStep();
     b36:	ldr	r0, [r0, #0]
     b38:	bl	54c <Sequencer::resetStep()>
  _sequencer->_controller->_leds[5]->toggle();
     b3c:	ldr	r3, [r4, #0]
     b3e:	ldr	r3, [r3, #8]
};
     b40:	ldmia.w	sp!, {r4, lr}

void Transport::stopPPQN () {
  _state = false;
  ppqn = 0;
  _sequencer->resetStep();
  _sequencer->_controller->_leds[5]->toggle();
     b44:	ldr	r0, [r3, #72]	; 0x48
     b46:	b.w	8ac <Led::toggle()>
     b4a:	nop

00000b4c <Transport::processMidi()>:
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
     b4c:	ldr	r3, [pc, #28]	; (b6c <Transport::processMidi()+0x20>)
  // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
  // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
  // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
  // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

  switch (type) {
     b4e:	ldrb	r3, [r3, #0]
     b50:	cmp	r3, #250	; 0xfa
     b52:	beq.n	b66 <Transport::processMidi()+0x1a>
     b54:	cmp	r3, #252	; 0xfc
     b56:	beq.n	b62 <Transport::processMidi()+0x16>
     b58:	cmp	r3, #248	; 0xf8
     b5a:	beq.n	b5e <Transport::processMidi()+0x12>
     b5c:	bx	lr
    case usbMIDI.Clock: // 0xF8 
      advancePPQN();
     b5e:	b.w	aa4 <Transport::advancePPQN()>
    case usbMIDI.Start: // 0xFA
      startPPQN();
      break;

    case usbMIDI.Stop: // 0xFC
      stopPPQN();
     b62:	b.w	b2c <Transport::stopPPQN()>
    case usbMIDI.Clock: // 0xF8 
      advancePPQN();
      break;

    case usbMIDI.Start: // 0xFA
      startPPQN();
     b66:	b.w	b04 <Transport::startPPQN()>
     b6a:	nop
     b6c:	.word	0x1fff1a8c

00000b70 <Transport::tick()>:
  _state = false;
  max_ppqn = 24;
  ppqn = 0;
};

void Transport::tick () {
     b70:	push	{r4, lr}
     b72:	mov	r4, r0
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     b74:	movs	r0, #0
     b76:	bl	1d30 <usb_midi_read>
  if (usbMIDI.read()) {
     b7a:	cbnz	r0, b7e <Transport::tick()+0xe>
     b7c:	pop	{r4, pc}
    processMidi();
     b7e:	mov	r0, r4
  }
};
     b80:	ldmia.w	sp!, {r4, lr}
  ppqn = 0;
};

void Transport::tick () {
  if (usbMIDI.read()) {
    processMidi();
     b84:	b.w	b4c <Transport::processMidi()>

00000b88 <Paginator::Paginator(Sequencer*)>:
#include "paginator.h"
#include "step.h"
#include "controller.h"
#include "led.h"

Paginator::Paginator (Sequencer* sequencer) {
     b88:	push	{r3, r4, r5, lr}
     b8a:	movs	r2, #64	; 0x40
     b8c:	mov	r4, r0
     b8e:	mov	r5, r1
     b90:	adds	r0, #16
     b92:	movs	r1, #0
     b94:	bl	4068 <memset>
  _sequencer = sequencer;
  _currentEditPage = 0;
     b98:	movs	r3, #0
#include "step.h"
#include "controller.h"
#include "led.h"

Paginator::Paginator (Sequencer* sequencer) {
  _sequencer = sequencer;
     b9a:	str	r5, [r4, #0]
  _currentEditPage = 0;
     b9c:	str	r3, [r4, #4]
  _createdPages = 0;
     b9e:	str	r3, [r4, #12]
  _currentPlaybackPage = 0;
     ba0:	str	r3, [r4, #8]
};
     ba2:	mov	r0, r4
     ba4:	pop	{r3, r4, r5, pc}
     ba6:	nop

00000ba8 <Paginator::getNextPlaybackPage(int)>:

int Paginator::getPage () {
  return _currentEditPage;
};

void Paginator::getNextPlaybackPage (int direction) {
     ba8:	push	{r3, r4, r5, lr}
  if (_createdPages == 0) return;
     baa:	ldr	r3, [r0, #12]
     bac:	cbz	r3, bfa <Paginator::getNextPlaybackPage(int)+0x52>

  if (_currentPlaybackPage < _createdPages && direction == 1) {
     bae:	ldr	r2, [r0, #8]
     bb0:	cmp	r3, r2
     bb2:	ble.n	bb8 <Paginator::getNextPlaybackPage(int)+0x10>
     bb4:	cmp	r1, #1
     bb6:	beq.n	c0a <Paginator::getNextPlaybackPage(int)+0x62>
    _currentPlaybackPage++;
  } else if (_currentPlaybackPage > 0 && direction == -1) {
     bb8:	cmp	r2, #0
     bba:	ble.n	bfc <Paginator::getNextPlaybackPage(int)+0x54>
     bbc:	adds	r1, #1
     bbe:	beq.n	c10 <Paginator::getNextPlaybackPage(int)+0x68>
    _currentPlaybackPage--;
  } else if (_currentPlaybackPage == 0 && direction == -1) {
    _currentPlaybackPage = _createdPages;
  } else if (_currentPlaybackPage == _createdPages) {
     bc0:	cmp	r3, r2
     bc2:	beq.n	c06 <Paginator::getNextPlaybackPage(int)+0x5e>
     bc4:	mov	r4, r0
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     bc6:	movs	r1, #21
     bc8:	ldr	r0, [pc, #76]	; (c18 <Paginator::getNextPlaybackPage(int)+0x70>)
     bca:	bl	13cc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     bce:	ldr	r0, [pc, #76]	; (c1c <Paginator::getNextPlaybackPage(int)+0x74>)
     bd0:	bl	2f40 <Print::println()>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     bd4:	ldr	r1, [r4, #8]
     bd6:	ldr	r0, [pc, #68]	; (c1c <Paginator::getNextPlaybackPage(int)+0x74>)
     bd8:	bl	2fe0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     bdc:	ldr	r0, [pc, #60]	; (c1c <Paginator::getNextPlaybackPage(int)+0x74>)
     bde:	bl	2f40 <Print::println()>
     be2:	ldr	r0, [r4, #8]
     be4:	ldr	r3, [r4, #0]

  Serial.println("Current playback page");
  Serial.println(_currentPlaybackPage);

  for (size_t i = 0; i < 4; i++) {
    _sequencer->_stepsPlayback[i] = _pages[_currentPlaybackPage][i];
     be6:	add.w	r2, r4, r0, lsl #4
     bea:	add.w	r0, r2, #20
     bee:	ldr	r5, [r2, #16]
     bf0:	ldmia	r0, {r0, r1, r2}
     bf2:	str	r5, [r3, #32]
     bf4:	str	r0, [r3, #36]	; 0x24
     bf6:	str	r1, [r3, #40]	; 0x28
     bf8:	str	r2, [r3, #44]	; 0x2c
     bfa:	pop	{r3, r4, r5, pc}

  if (_currentPlaybackPage < _createdPages && direction == 1) {
    _currentPlaybackPage++;
  } else if (_currentPlaybackPage > 0 && direction == -1) {
    _currentPlaybackPage--;
  } else if (_currentPlaybackPage == 0 && direction == -1) {
     bfc:	bne.n	bc0 <Paginator::getNextPlaybackPage(int)+0x18>
     bfe:	adds	r1, #1
     c00:	bne.n	bc4 <Paginator::getNextPlaybackPage(int)+0x1c>
    _currentPlaybackPage = _createdPages;
  } else if (_currentPlaybackPage == _createdPages) {
    _currentPlaybackPage = 0;
     c02:	str	r3, [r0, #8]
     c04:	b.n	bc4 <Paginator::getNextPlaybackPage(int)+0x1c>
     c06:	movs	r3, #0
     c08:	b.n	c02 <Paginator::getNextPlaybackPage(int)+0x5a>

void Paginator::getNextPlaybackPage (int direction) {
  if (_createdPages == 0) return;

  if (_currentPlaybackPage < _createdPages && direction == 1) {
    _currentPlaybackPage++;
     c0a:	adds	r2, #1
     c0c:	str	r2, [r0, #8]
     c0e:	b.n	bc4 <Paginator::getNextPlaybackPage(int)+0x1c>
  } else if (_currentPlaybackPage > 0 && direction == -1) {
    _currentPlaybackPage--;
     c10:	subs	r2, #1
     c12:	str	r2, [r0, #8]
     c14:	b.n	bc4 <Paginator::getNextPlaybackPage(int)+0x1c>
     c16:	nop
     c18:	.word	0x000044ac
     c1c:	.word	0x1fff0c48

00000c20 <Paginator::setLeds(unsigned int)>:



void Paginator::setLeds (size_t i) {
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
     c20:	ldr	r2, [r0, #0]
     c22:	adds	r0, r1, #4
  Led * newStepLed = _sequencer->_controller->_leds[i];
     c24:	ldr	r3, [r2, #8]

  if (newStep->_state == 0) {
     c26:	ldr.w	r2, [r2, r0, lsl #2]


void Paginator::setLeds (size_t i) {
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
  Led * newStepLed = _sequencer->_controller->_leds[i];
     c2a:	add.w	r1, r3, r1, lsl #2

  if (newStep->_state == 0) {
     c2e:	ldrb	r3, [r2, #20]


void Paginator::setLeds (size_t i) {
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
  Led * newStepLed = _sequencer->_controller->_leds[i];
     c30:	ldr	r0, [r1, #52]	; 0x34

  if (newStep->_state == 0) {
     c32:	cbz	r3, c38 <Paginator::setLeds(unsigned int)+0x18>
    newStepLed->off();
  } else {
    newStepLed->on();
     c34:	b.w	8e4 <Led::on()>
  // toggle the leds for the loaded steps
  Step * newStep = _sequencer->_stepsEdit[i];
  Led * newStepLed = _sequencer->_controller->_leds[i];

  if (newStep->_state == 0) {
    newStepLed->off();
     c38:	b.w	8d8 <Led::off()>

00000c3c <Paginator::changePage(int)>:
  };

  debugPages();
};

void Paginator::changePage (int direction) {
     c3c:	push	{r4, r5, r6, r7, lr}
  if (direction == 1 && _createdPages < 3 && _currentEditPage == _createdPages) {
     c3e:	cmp	r1, #1
  };

  debugPages();
};

void Paginator::changePage (int direction) {
     c40:	sub	sp, #12
     c42:	mov	r6, r1
     c44:	mov	r5, r0
  if (direction == 1 && _createdPages < 3 && _currentEditPage == _createdPages) {
     c46:	beq.n	c84 <Paginator::changePage(int)+0x48>
     c48:	ldr	r3, [r5, #4]
  };

  debugPages();
};

void Paginator::changePage (int direction) {
     c4a:	movs	r4, #0
     c4c:	ldr	r2, [r5, #0]
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
    // put current page steps in memory
    _pages[_currentEditPage][i] = _sequencer->_stepsEdit[i];
     c4e:	add.w	r1, r4, r3, lsl #2
     c52:	add.w	r2, r2, r4, lsl #2
     c56:	adds	r1, #4

    // if there is not a defined step for the page then create steps
    // if there are steps put them into the stepsEdit of the sequencer
    if (_pages[_currentEditPage + direction][i] == 0) {
     c58:	add	r3, r6
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
    // put current page steps in memory
    _pages[_currentEditPage][i] = _sequencer->_stepsEdit[i];
     c5a:	ldr	r0, [r2, #16]
     c5c:	str.w	r0, [r5, r1, lsl #2]

    // if there is not a defined step for the page then create steps
    // if there are steps put them into the stepsEdit of the sequencer
    if (_pages[_currentEditPage + direction][i] == 0) {
     c60:	add.w	r3, r4, r3, lsl #2
     c64:	adds	r3, #4
     c66:	ldr.w	r3, [r5, r3, lsl #2]
     c6a:	cbz	r3, c96 <Paginator::changePage(int)+0x5a>
      }

      _sequencer->_stepsEdit[i] = step;
      _pages[_currentEditPage + direction][i] = step;
    } else {
      _sequencer->_stepsEdit[i] = _pages[_currentEditPage + direction][i];
     c6c:	str	r3, [r2, #16]
    }
    
    setLeds(i);
     c6e:	mov	r1, r4
     c70:	mov	r0, r5
    _createdPages++;
    // //Serial.println("Incrementing created pages to:");
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
     c72:	adds	r4, #1
      _pages[_currentEditPage + direction][i] = step;
    } else {
      _sequencer->_stepsEdit[i] = _pages[_currentEditPage + direction][i];
    }
    
    setLeds(i);
     c74:	bl	c20 <Paginator::setLeds(unsigned int)>
    _createdPages++;
    // //Serial.println("Incrementing created pages to:");
    // //Serial.println(_createdPages);
  }

  for (size_t i = 0; i < 4; i++) {
     c78:	cmp	r4, #4
     c7a:	beq.n	c80 <Paginator::changePage(int)+0x44>
     c7c:	ldr	r3, [r5, #4]
     c7e:	b.n	c4c <Paginator::changePage(int)+0x10>
      _sequencer->_stepsEdit[i] = _pages[_currentEditPage + direction][i];
    }
    
    setLeds(i);
  }
};
     c80:	add	sp, #12
     c82:	pop	{r4, r5, r6, r7, pc}

  debugPages();
};

void Paginator::changePage (int direction) {
  if (direction == 1 && _createdPages < 3 && _currentEditPage == _createdPages) {
     c84:	ldr	r2, [r0, #12]
     c86:	cmp	r2, #2
     c88:	bgt.n	c48 <Paginator::changePage(int)+0xc>
     c8a:	ldr	r3, [r0, #4]
     c8c:	cmp	r2, r3
    // this is a nasty flag i should get rid of
    _createdPages++;
     c8e:	itt	eq
     c90:	addeq	r2, r3, #1
     c92:	streq	r2, [r0, #12]
     c94:	b.n	c4a <Paginator::changePage(int)+0xe>
    _pages[_currentEditPage][i] = _sequencer->_stepsEdit[i];

    // if there is not a defined step for the page then create steps
    // if there are steps put them into the stepsEdit of the sequencer
    if (_pages[_currentEditPage + direction][i] == 0) {
      Step * step = new Step(_sequencer);
     c96:	movs	r0, #32
     c98:	bl	3084 <operator new(unsigned int)>
     c9c:	ldr	r1, [r5, #0]
     c9e:	mov	r7, r0
     ca0:	bl	d88 <Step::Step(Sequencer*)>
      if (_sequencer->_controller->getCopyMode()) {
     ca4:	ldr	r3, [r5, #0]
     ca6:	ldr	r0, [r3, #8]
     ca8:	bl	12e8 <Controller::getCopyMode()>
        step->pitchScale = _sequencer->_stepsEdit[i]->pitchScale;
     cac:	adds	r2, r4, #4
     cae:	ldr	r1, [r5, #0]

    // if there is not a defined step for the page then create steps
    // if there are steps put them into the stepsEdit of the sequencer
    if (_pages[_currentEditPage + direction][i] == 0) {
      Step * step = new Step(_sequencer);
      if (_sequencer->_controller->getCopyMode()) {
     cb0:	cbz	r0, cde <Paginator::changePage(int)+0xa2>
        step->pitchScale = _sequencer->_stepsEdit[i]->pitchScale;
     cb2:	ldr.w	r3, [r1, r2, lsl #2]
     cb6:	ldr	r0, [r3, #4]
     cb8:	str	r0, [sp, #4]
        step->pitchGrade = _sequencer->_stepsEdit[i]->pitchGrade;
     cba:	ldr	r0, [r3, #8]
     cbc:	str	r0, [r7, #8]
    // if there is not a defined step for the page then create steps
    // if there are steps put them into the stepsEdit of the sequencer
    if (_pages[_currentEditPage + direction][i] == 0) {
      Step * step = new Step(_sequencer);
      if (_sequencer->_controller->getCopyMode()) {
        step->pitchScale = _sequencer->_stepsEdit[i]->pitchScale;
     cbe:	ldr	r0, [sp, #4]
     cc0:	str	r0, [r7, #4]
        step->pitchGrade = _sequencer->_stepsEdit[i]->pitchGrade;
        step->velocity = _sequencer->_stepsEdit[i]->velocity;
     cc2:	ldr	r0, [r3, #12]
     cc4:	str	r0, [sp, #4]
        step->length = _sequencer->_stepsEdit[i]->length;
     cc6:	ldr	r0, [r3, #16]
     cc8:	str	r0, [r7, #16]
    if (_pages[_currentEditPage + direction][i] == 0) {
      Step * step = new Step(_sequencer);
      if (_sequencer->_controller->getCopyMode()) {
        step->pitchScale = _sequencer->_stepsEdit[i]->pitchScale;
        step->pitchGrade = _sequencer->_stepsEdit[i]->pitchGrade;
        step->velocity = _sequencer->_stepsEdit[i]->velocity;
     cca:	ldr	r0, [sp, #4]
        step->length = _sequencer->_stepsEdit[i]->length;
        step->_state = _sequencer->_stepsEdit[i]->_state;
     ccc:	ldrb.w	lr, [r3, #20]
    if (_pages[_currentEditPage + direction][i] == 0) {
      Step * step = new Step(_sequencer);
      if (_sequencer->_controller->getCopyMode()) {
        step->pitchScale = _sequencer->_stepsEdit[i]->pitchScale;
        step->pitchGrade = _sequencer->_stepsEdit[i]->pitchGrade;
        step->velocity = _sequencer->_stepsEdit[i]->velocity;
     cd0:	str	r0, [r7, #12]
        step->length = _sequencer->_stepsEdit[i]->length;
        step->_state = _sequencer->_stepsEdit[i]->_state;
        step->chance = _sequencer->_stepsEdit[i]->chance;
     cd2:	ldr	r0, [r3, #24]
        step->swing = _sequencer->_stepsEdit[i]->swing;
     cd4:	ldr	r3, [r3, #28]
        step->pitchScale = _sequencer->_stepsEdit[i]->pitchScale;
        step->pitchGrade = _sequencer->_stepsEdit[i]->pitchGrade;
        step->velocity = _sequencer->_stepsEdit[i]->velocity;
        step->length = _sequencer->_stepsEdit[i]->length;
        step->_state = _sequencer->_stepsEdit[i]->_state;
        step->chance = _sequencer->_stepsEdit[i]->chance;
     cd6:	str	r0, [r7, #24]
      if (_sequencer->_controller->getCopyMode()) {
        step->pitchScale = _sequencer->_stepsEdit[i]->pitchScale;
        step->pitchGrade = _sequencer->_stepsEdit[i]->pitchGrade;
        step->velocity = _sequencer->_stepsEdit[i]->velocity;
        step->length = _sequencer->_stepsEdit[i]->length;
        step->_state = _sequencer->_stepsEdit[i]->_state;
     cd8:	strb.w	lr, [r7, #20]
        step->chance = _sequencer->_stepsEdit[i]->chance;
        step->swing = _sequencer->_stepsEdit[i]->swing;
     cdc:	str	r3, [r7, #28]
      }

      _sequencer->_stepsEdit[i] = step;
      _pages[_currentEditPage + direction][i] = step;
     cde:	ldr	r3, [r5, #4]
        step->_state = _sequencer->_stepsEdit[i]->_state;
        step->chance = _sequencer->_stepsEdit[i]->chance;
        step->swing = _sequencer->_stepsEdit[i]->swing;
      }

      _sequencer->_stepsEdit[i] = step;
     ce0:	str.w	r7, [r1, r2, lsl #2]
      _pages[_currentEditPage + direction][i] = step;
     ce4:	add	r3, r6
     ce6:	add.w	r3, r4, r3, lsl #2
     cea:	adds	r3, #4
     cec:	str.w	r7, [r5, r3, lsl #2]
     cf0:	b.n	c6e <Paginator::changePage(int)+0x32>
     cf2:	nop

00000cf4 <Paginator::debugPages()>:
  } else {
    newStepLed->on();
  }
};

void Paginator::debugPages () {
     cf4:	push	{r4, r5, r6, lr}
     cf6:	add.w	r4, r0, #16
     cfa:	add.w	r6, r0, #80	; 0x50
     cfe:	add.w	r5, r4, #16
  for (size_t i = 0; i < 4; i++) {
    for (size_t y = 0; y < 4; y++) {
      Step * step = _pages[i][y];
     d02:	ldr.w	r3, [r4], #4
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d06:	ldr	r0, [pc, #24]	; (d20 <Paginator::debugPages()+0x2c>)
     d08:	ldrb	r1, [r3, #20]
     d0a:	bl	2fe0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d0e:	ldr	r0, [pc, #16]	; (d20 <Paginator::debugPages()+0x2c>)
     d10:	bl	2f40 <Print::println()>
  }
};

void Paginator::debugPages () {
  for (size_t i = 0; i < 4; i++) {
    for (size_t y = 0; y < 4; y++) {
     d14:	cmp	r4, r5
     d16:	bne.n	d02 <Paginator::debugPages()+0xe>
    newStepLed->on();
  }
};

void Paginator::debugPages () {
  for (size_t i = 0; i < 4; i++) {
     d18:	cmp	r6, r4
     d1a:	bne.n	cfe <Paginator::debugPages()+0xa>
    for (size_t y = 0; y < 4; y++) {
      Step * step = _pages[i][y];
      Serial.println(step->_state);
    }
  }
};
     d1c:	pop	{r4, r5, r6, pc}
     d1e:	nop
     d20:	.word	0x1fff0c48

00000d24 <Paginator::nextPage()>:
    _sequencer->_stepsPlayback[i] = _pages[_currentPlaybackPage][i];
  }
};

void Paginator::nextPage () {
  if (_currentEditPage < 3) {
     d24:	ldr	r3, [r0, #4]
     d26:	cmp	r3, #2
  for (size_t i = 0; i < 4; i++) {
    _sequencer->_stepsPlayback[i] = _pages[_currentPlaybackPage][i];
  }
};

void Paginator::nextPage () {
     d28:	push	{r4, lr}
     d2a:	mov	r4, r0
  if (_currentEditPage < 3) {
     d2c:	bgt.n	d4a <Paginator::nextPage()+0x26>
    changePage(1);
     d2e:	movs	r1, #1
     d30:	bl	c3c <Paginator::changePage(int)>
    _currentEditPage++;
     d34:	ldmia.w	r4, {r2, r3}
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     d38:	ldr	r2, [r2, #8]
     d3a:	add.w	r2, r2, r3, lsl #2
};

void Paginator::nextPage () {
  if (_currentEditPage < 3) {
    changePage(1);
    _currentEditPage++;
     d3e:	adds	r3, #1
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     d40:	ldr	r0, [r2, #56]	; 0x38
};

void Paginator::nextPage () {
  if (_currentEditPage < 3) {
    changePage(1);
    _currentEditPage++;
     d42:	str	r3, [r4, #4]
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     d44:	movs	r1, #3
     d46:	bl	878 <Led::blink(int)>
  }

  debugPages();
     d4a:	mov	r0, r4
};
     d4c:	ldmia.w	sp!, {r4, lr}
    changePage(1);
    _currentEditPage++;
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
  }

  debugPages();
     d50:	b.w	cf4 <Paginator::debugPages()>

00000d54 <Paginator::previousPage()>:
};

void Paginator::previousPage () {
  if (_currentEditPage > 0) {
     d54:	ldr	r3, [r0, #4]
     d56:	cmp	r3, #0
  }

  debugPages();
};

void Paginator::previousPage () {
     d58:	push	{r4, lr}
     d5a:	mov	r4, r0
  if (_currentEditPage > 0) {
     d5c:	ble.n	d7c <Paginator::previousPage()+0x28>
    changePage(-1);
     d5e:	mov.w	r1, #4294967295
     d62:	bl	c3c <Paginator::changePage(int)>
    _currentEditPage--;
     d66:	ldmia.w	r4, {r2, r3}
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     d6a:	ldr	r2, [r2, #8]
     d6c:	add.w	r2, r2, r3, lsl #2
};

void Paginator::previousPage () {
  if (_currentEditPage > 0) {
    changePage(-1);
    _currentEditPage--;
     d70:	subs	r3, #1
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     d72:	ldr	r0, [r2, #48]	; 0x30
};

void Paginator::previousPage () {
  if (_currentEditPage > 0) {
    changePage(-1);
    _currentEditPage--;
     d74:	str	r3, [r4, #4]
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
     d76:	movs	r1, #3
     d78:	bl	878 <Led::blink(int)>
  };

  debugPages();
     d7c:	mov	r0, r4
};
     d7e:	ldmia.w	sp!, {r4, lr}
    changePage(-1);
    _currentEditPage--;
    _sequencer->_controller->_leds[_currentEditPage]->blink(3);
  };

  debugPages();
     d82:	b.w	cf4 <Paginator::debugPages()>
     d86:	nop

00000d88 <Step::Step(Sequencer*)>:
#include <Arduino.h>
#include "step.h"
#include "sequencer.h"
#include "piano.h"

Step::Step(Sequencer* sequencer) {
     d88:	push	{r4, r5}
  _state = false;
     d8a:	movs	r2, #0
  _sequencer = sequencer;
  pitchScale = 0;
  pitchGrade = 0;
  velocity = 100;
     d8c:	movs	r4, #100	; 0x64
  length = 4;
     d8e:	movs	r5, #4
     d90:	str	r5, [r0, #16]
Step::Step(Sequencer* sequencer) {
  _state = false;
  _sequencer = sequencer;
  pitchScale = 0;
  pitchGrade = 0;
  velocity = 100;
     d92:	str	r4, [r0, #12]
  length = 4;
  chance = 100;
     d94:	str	r4, [r0, #24]
#include "sequencer.h"
#include "piano.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
  _sequencer = sequencer;
     d96:	str	r1, [r0, #0]
#include "step.h"
#include "sequencer.h"
#include "piano.h"

Step::Step(Sequencer* sequencer) {
  _state = false;
     d98:	strb	r2, [r0, #20]
  _sequencer = sequencer;
  pitchScale = 0;
     d9a:	str	r2, [r0, #4]
  pitchGrade = 0;
     d9c:	str	r2, [r0, #8]
  velocity = 100;
  length = 4;
  chance = 100;
  swing = 0;
     d9e:	str	r2, [r0, #28]
};
     da0:	pop	{r4, r5}
     da2:	bx	lr

00000da4 <Step::toggle()>:
void Step::setStep (Step* step) {
  _state = step->_state;
};

void Step::toggle () {
  _state = !_state;
     da4:	ldrb	r3, [r0, #20]
     da6:	eor.w	r3, r3, #1
     daa:	strb	r3, [r0, #20]
     dac:	bx	lr
     dae:	nop

00000db0 <Step::controlLength(int)>:
};

void Step::controlLength (int value) {
  int newValue = map(value, 0, 1000, 16, 0); // <- hack i guess
  length = newValue;
     db0:	ldr	r3, [pc, #20]	; (dc8 <Step::controlLength(int)+0x18>)
     db2:	sub.w	r1, r1, r1, lsl #4
     db6:	smull	r2, r3, r3, r1
     dba:	asrs	r1, r1, #31
     dbc:	rsb	r1, r1, r3, asr #8
     dc0:	adds	r1, #16
     dc2:	str	r1, [r0, #16]
     dc4:	bx	lr
     dc6:	nop
     dc8:	.word	0x4178749f

00000dcc <Step::controlPitch(int)>:
};

void Step::controlPitch (int value) {
  int newValue = value;

  if (value < 330) {
     dcc:	cmp.w	r1, #330	; 0x14a
     dd0:	blt.n	dea <Step::controlPitch(int)+0x1e>
    newValue = 2;
  } else if (value < 660) {
     dd2:	cmp.w	r1, #660	; 0x294
     dd6:	blt.n	de4 <Step::controlPitch(int)+0x18>
    newValue = 1;
  } else if (value <= 1023) {
     dd8:	cmp.w	r1, #1024	; 0x400
    newValue = 0;
     ddc:	it	lt
     dde:	movlt	r1, #0
  }

  pitchGrade = newValue;
     de0:	str	r1, [r0, #8]
     de2:	bx	lr
  int newValue = value;

  if (value < 330) {
    newValue = 2;
  } else if (value < 660) {
    newValue = 1;
     de4:	movs	r1, #1
  } else if (value <= 1023) {
    newValue = 0;
  }

  pitchGrade = newValue;
     de6:	str	r1, [r0, #8]
     de8:	bx	lr

void Step::controlPitch (int value) {
  int newValue = value;

  if (value < 330) {
    newValue = 2;
     dea:	movs	r1, #2
    newValue = 1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  pitchGrade = newValue;
     dec:	str	r1, [r0, #8]
     dee:	bx	lr

00000df0 <Step::controlVelocity(int)>:
};

void Step::controlVelocity (int value) {
  int newValue = map(value, 0, 1023, 127, 62);
  velocity = newValue;
     df0:	rsb	r1, r1, r1, lsl #26
     df4:	lsls	r1, r1, #6
     df6:	it	mi
     df8:	addwmi	r1, r1, #1023	; 0x3ff
     dfc:	asrs	r1, r1, #10
     dfe:	adds	r1, #127	; 0x7f
     e00:	str	r1, [r0, #12]
     e02:	bx	lr

00000e04 <Step::controlChance(int)>:
};

void Step::controlChance (int value) {
     e04:	push	{r3, lr}
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     e06:	mvn.w	r3, #98	; 0x62
     e0a:	mul.w	r1, r3, r1
     e0e:	cmp	r1, #0
     e10:	it	lt
     e12:	addwlt	r1, r1, #1023	; 0x3ff
     e16:	asrs	r1, r1, #10
     e18:	adds	r1, #100	; 0x64
  int newValue = map(value, 0, 1023, 100, 0);
  chance = newValue;
     e1a:	str	r1, [r0, #24]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e1c:	ldr	r0, [pc, #12]	; (e2c <Step::controlChance(int)+0x28>)
     e1e:	bl	2fe0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e22:	ldr	r0, [pc, #8]	; (e2c <Step::controlChance(int)+0x28>)
  Serial.println(chance);
};
     e24:	ldmia.w	sp!, {r3, lr}
     e28:	b.w	2f40 <Print::println()>
     e2c:	.word	0x1fff0c48

00000e30 <Step::controlSwing(int)>:

void Step::controlSwing (int value) {
  int newValue = value;

  if (value < 100) {
     e30:	cmp	r1, #99	; 0x63
     e32:	ble.n	e52 <Step::controlSwing(int)+0x22>
    newValue = -3;
  } else if (value < 200) {
     e34:	cmp	r1, #199	; 0xc7
     e36:	ble.n	e4a <Step::controlSwing(int)+0x1a>
    newValue = -2;
  } else if (value <= 600) {
     e38:	cmp.w	r1, #600	; 0x258
     e3c:	ble.n	e5a <Step::controlSwing(int)+0x2a>
    newValue = -1;
  } else if (value <= 1023) {
     e3e:	cmp.w	r1, #1024	; 0x400
    newValue = 0;
     e42:	it	lt
     e44:	movlt	r1, #0
  }

  swing = newValue;
     e46:	str	r1, [r0, #28]
     e48:	bx	lr
  int newValue = value;

  if (value < 100) {
    newValue = -3;
  } else if (value < 200) {
    newValue = -2;
     e4a:	mvn.w	r1, #1
    newValue = -1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  swing = newValue;
     e4e:	str	r1, [r0, #28]
     e50:	bx	lr

void Step::controlSwing (int value) {
  int newValue = value;

  if (value < 100) {
    newValue = -3;
     e52:	mvn.w	r1, #2
    newValue = -1;
  } else if (value <= 1023) {
    newValue = 0;
  }

  swing = newValue;
     e56:	str	r1, [r0, #28]
     e58:	bx	lr
  if (value < 100) {
    newValue = -3;
  } else if (value < 200) {
    newValue = -2;
  } else if (value <= 600) {
    newValue = -1;
     e5a:	mov.w	r1, #4294967295
  } else if (value <= 1023) {
    newValue = 0;
  }

  swing = newValue;
     e5e:	str	r1, [r0, #28]
     e60:	bx	lr
     e62:	nop

00000e64 <Knob::Knob(unsigned char, int, Controller*)>:
#include "step.h"
#include "sequencer.h"
#include "transport.h"
#include "piano.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
     e64:	push	{r4, r5}
  _pin = pin;
  _id = id;
  _controller = controller;
  _value = 0;
     e66:	movs	r5, #0
     e68:	str	r5, [r0, #4]
#include "sequencer.h"
#include "transport.h"
#include "piano.h"

Knob::Knob (uint8_t pin, int id, Controller* controller) {
  _pin = pin;
     e6a:	str	r1, [r0, #0]
  _id = id;
     e6c:	str	r2, [r0, #12]
  _controller = controller;
     e6e:	str	r3, [r0, #16]
  _value = 0;
};
     e70:	pop	{r4, r5}
     e72:	bx	lr

00000e74 <Knob::onChange()>:

void Knob::onChange () {
  if (_id == 4) {
     e74:	ldr	r3, [r0, #12]
     e76:	cmp	r3, #4
     e78:	beq.n	eec <Knob::onChange()+0x78>
    _controller->_sequencer->_piano->transpose(_value);
  } else if (_id == 5) {
     e7a:	cmp	r3, #5
     e7c:	beq.n	eca <Knob::onChange()+0x56>
  _id = id;
  _controller = controller;
  _value = 0;
};

void Knob::onChange () {
     e7e:	push	{r4, lr}
     e80:	mov	r4, r0
  if (_id == 4) {
    _controller->_sequencer->_piano->transpose(_value);
  } else if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
     e82:	ldr	r0, [r0, #16]
     e84:	bl	12f8 <Controller::getMode()>
     e88:	cmp	r0, #1
     e8a:	beq.n	ed6 <Knob::onChange()+0x62>
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
     e8c:	ldr	r0, [r4, #16]
     e8e:	bl	12f8 <Controller::getMode()>
     e92:	cbz	r0, eb4 <Knob::onChange()+0x40>
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
     e94:	ldr	r0, [r4, #16]
     e96:	bl	12f8 <Controller::getMode()>
     e9a:	cmp	r0, #2
     e9c:	beq.n	ef8 <Knob::onChange()+0x84>
    _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
  } else if (_controller->getMode() == CHANCE) {
     e9e:	ldr	r0, [r4, #16]
     ea0:	bl	12f8 <Controller::getMode()>
     ea4:	cmp	r0, #3
     ea6:	beq.n	f0e <Knob::onChange()+0x9a>
    _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
  } else if (_controller->getMode() == SWING) {
     ea8:	ldr	r0, [r4, #16]
     eaa:	bl	12f8 <Controller::getMode()>
     eae:	cmp	r0, #4
     eb0:	beq.n	f24 <Knob::onChange()+0xb0>
     eb2:	pop	{r4, pc}
  } else if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
     eb4:	ldr	r2, [r4, #16]
     eb6:	ldr	r3, [r4, #12]
     eb8:	ldr	r2, [r2, #76]	; 0x4c
     eba:	ldr	r1, [r4, #4]
     ebc:	adds	r3, #4
  } else if (_controller->getMode() == CHANCE) {
    _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
  } else if (_controller->getMode() == SWING) {
    _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
  }
}
     ebe:	ldmia.w	sp!, {r4, lr}
  } else if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
     ec2:	ldr.w	r0, [r2, r3, lsl #2]
     ec6:	b.w	dcc <Step::controlPitch(int)>

void Knob::onChange () {
  if (_id == 4) {
    _controller->_sequencer->_piano->transpose(_value);
  } else if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
     eca:	ldr	r3, [r0, #16]
     ecc:	ldr	r1, [r0, #4]
     ece:	ldr	r3, [r3, #76]	; 0x4c
     ed0:	ldr	r0, [r3, #4]
     ed2:	b.w	a68 <Transport::controlTempo(int)>
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
     ed6:	ldr	r2, [r4, #16]
     ed8:	ldr	r3, [r4, #12]
     eda:	ldr	r2, [r2, #76]	; 0x4c
     edc:	ldr	r1, [r4, #4]
     ede:	adds	r3, #4
  } else if (_controller->getMode() == CHANCE) {
    _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
  } else if (_controller->getMode() == SWING) {
    _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
  }
}
     ee0:	ldmia.w	sp!, {r4, lr}
  if (_id == 4) {
    _controller->_sequencer->_piano->transpose(_value);
  } else if (_id == 5) {
    _controller->_sequencer->_transport->controlTempo(_value);
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
     ee4:	ldr.w	r0, [r2, r3, lsl #2]
     ee8:	b.w	df0 <Step::controlVelocity(int)>
  _value = 0;
};

void Knob::onChange () {
  if (_id == 4) {
    _controller->_sequencer->_piano->transpose(_value);
     eec:	ldr	r3, [r0, #16]
     eee:	ldr	r1, [r0, #4]
     ef0:	ldr	r3, [r3, #76]	; 0x4c
     ef2:	ldr	r0, [r3, #52]	; 0x34
     ef4:	b.w	80c <Piano::transpose(int)>
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
     ef8:	ldr	r2, [r4, #16]
     efa:	ldr	r3, [r4, #12]
     efc:	ldr	r2, [r2, #76]	; 0x4c
     efe:	ldr	r1, [r4, #4]
     f00:	adds	r3, #4
  } else if (_controller->getMode() == CHANCE) {
    _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
  } else if (_controller->getMode() == SWING) {
    _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
  }
}
     f02:	ldmia.w	sp!, {r4, lr}
  } else if (_controller->getMode() == VELOCITY) {
    _controller->_sequencer->_stepsEdit[_id]->controlVelocity(_value);
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
     f06:	ldr.w	r0, [r2, r3, lsl #2]
     f0a:	b.w	db0 <Step::controlLength(int)>
  } else if (_controller->getMode() == CHANCE) {
    _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
     f0e:	ldr	r2, [r4, #16]
     f10:	ldr	r3, [r4, #12]
     f12:	ldr	r2, [r2, #76]	; 0x4c
     f14:	ldr	r1, [r4, #4]
     f16:	adds	r3, #4
  } else if (_controller->getMode() == SWING) {
    _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
  }
}
     f18:	ldmia.w	sp!, {r4, lr}
  } else if (_controller->getMode() == PITCH) {
   _controller->_sequencer->_stepsEdit[_id]->controlPitch(_value);
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
  } else if (_controller->getMode() == CHANCE) {
    _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
     f1c:	ldr.w	r0, [r2, r3, lsl #2]
     f20:	b.w	e04 <Step::controlChance(int)>
  } else if (_controller->getMode() == SWING) {
    _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
     f24:	ldr	r2, [r4, #16]
     f26:	ldr	r3, [r4, #12]
     f28:	ldr	r2, [r2, #76]	; 0x4c
     f2a:	ldr	r1, [r4, #4]
     f2c:	adds	r3, #4
  }
}
     f2e:	ldmia.w	sp!, {r4, lr}
  } else if (_controller->getMode() == NOTELENGTH) {
    _controller->_sequencer->_stepsEdit[_id]->controlLength(_value);
  } else if (_controller->getMode() == CHANCE) {
    _controller->_sequencer->_stepsEdit[_id]->controlChance(_value);
  } else if (_controller->getMode() == SWING) {
    _controller->_sequencer->_stepsEdit[_id]->controlSwing(_value);
     f32:	ldr.w	r0, [r2, r3, lsl #2]
     f36:	b.w	e30 <Step::controlSwing(int)>
     f3a:	nop

00000f3c <Knob::tick()>:
  }
}

// todo latch
void Knob::tick () {
     f3c:	push	{r4, lr}
     f3e:	mov	r4, r0
  _value = analogRead(_pin);
     f40:	ldrb	r0, [r0, #0]
     f42:	bl	17f8 <analogRead>

  int diff = abs(_value - _lastValue);
     f46:	ldr	r3, [r4, #8]
  }
}

// todo latch
void Knob::tick () {
  _value = analogRead(_pin);
     f48:	str	r0, [r4, #4]

  int diff = abs(_value - _lastValue);

  // "filter"
  const boolean isChanging = _value != _lastValue && diff > 10;
     f4a:	cmp	r0, r3
     f4c:	beq.n	f64 <Knob::tick()+0x28>
     f4e:	subs	r0, r0, r3
     f50:	cmp	r0, #0
     f52:	it	lt
     f54:	neglt	r0, r0
     f56:	cmp	r0, #10
     f58:	ble.n	f64 <Knob::tick()+0x28>

  if (isChanging) {
    onChange();
     f5a:	mov	r0, r4
     f5c:	bl	e74 <Knob::onChange()>

    _lastValue = _value;
     f60:	ldr	r3, [r4, #4]
     f62:	str	r3, [r4, #8]
     f64:	pop	{r4, pc}
     f66:	nop

00000f68 <Controller::Controller(Sequencer*)>:
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"
#include "paginator.h"

Controller::Controller (Sequencer* sequencer) {
     f68:	push	{r4, r5, r6, r7, lr}
  _sequencer = sequencer;
  _modeBeforeChance = PITCH;
     f6a:	movs	r5, #0
#include "knob.h"
#include "definitions.h"
#include "sequencer.h"
#include "paginator.h"

Controller::Controller (Sequencer* sequencer) {
     f6c:	sub	sp, #20
     f6e:	mov	r4, r0
  _sequencer = sequencer;
     f70:	str	r1, [r0, #76]	; 0x4c
  _modeBeforeChance = PITCH;
     f72:	strb.w	r5, [r0, #50]	; 0x32
  _currentMode = PITCH;
     f76:	strb.w	r5, [r0, #49]	; 0x31
  _shiftMode = false;
     f7a:	strb.w	r5, [r0, #48]	; 0x30
  _copyMode = false;
     f7e:	strb.w	r5, [r0, #80]	; 0x50
  
  _leds[0] = new Led(3, LOW);
     f82:	movs	r0, #24
     f84:	bl	3084 <operator new(unsigned int)>
     f88:	mov	r2, r5
     f8a:	mov	r6, r0
     f8c:	movs	r1, #3
     f8e:	bl	850 <Led::Led(int, int)>
     f92:	str	r6, [r4, #52]	; 0x34
  _leds[1] = new Led(5, LOW);
     f94:	movs	r0, #24
     f96:	bl	3084 <operator new(unsigned int)>
     f9a:	mov	r2, r5
     f9c:	mov	r6, r0
     f9e:	movs	r1, #5
     fa0:	bl	850 <Led::Led(int, int)>
     fa4:	str	r6, [r4, #56]	; 0x38
  _leds[2] = new Led(7, LOW);
     fa6:	movs	r0, #24
     fa8:	bl	3084 <operator new(unsigned int)>
     fac:	mov	r2, r5
     fae:	mov	r6, r0
     fb0:	movs	r1, #7
     fb2:	bl	850 <Led::Led(int, int)>
     fb6:	str	r6, [r4, #60]	; 0x3c
  _leds[3] = new Led(9, LOW);
     fb8:	movs	r0, #24
     fba:	bl	3084 <operator new(unsigned int)>
     fbe:	mov	r2, r5
     fc0:	mov	r6, r0
     fc2:	movs	r1, #9
     fc4:	bl	850 <Led::Led(int, int)>
     fc8:	str	r6, [r4, #64]	; 0x40
  _leds[4] = new Led(11, LOW);
     fca:	movs	r0, #24
     fcc:	bl	3084 <operator new(unsigned int)>
     fd0:	mov	r2, r5
     fd2:	mov	r6, r0
     fd4:	movs	r1, #11
     fd6:	bl	850 <Led::Led(int, int)>
     fda:	str	r6, [r4, #68]	; 0x44
  _leds[5] = new Led(24, LOW);
     fdc:	movs	r0, #24
     fde:	bl	3084 <operator new(unsigned int)>
     fe2:	mov	r2, r5
     fe4:	movs	r1, #24
     fe6:	mov	r6, r0
     fe8:	bl	850 <Led::Led(int, int)>
     fec:	str	r6, [r4, #72]	; 0x48

  _leds[4]->toggle();
     fee:	ldr	r0, [r4, #68]	; 0x44
     ff0:	bl	8ac <Led::toggle()>
  _leds[5]->toggle();
     ff4:	ldr	r0, [r4, #72]	; 0x48
     ff6:	bl	8ac <Led::toggle()>

  _buttons[0] = new Button(1, step1pin, _leds[0], false, false, this);
     ffa:	movs	r0, #56	; 0x38
     ffc:	bl	3084 <operator new(unsigned int)>
    1000:	ldr	r3, [r4, #52]	; 0x34
    1002:	str	r5, [sp, #4]
    1004:	mov	r6, r0
    1006:	str	r5, [sp, #0]
    1008:	movs	r2, #2
    100a:	movs	r1, #1
    100c:	str	r4, [sp, #8]
    100e:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    1012:	str	r6, [r4, #0]
  _buttons[1] = new Button(2, step2pin, _leds[1], false, false, this);
    1014:	movs	r0, #56	; 0x38
    1016:	bl	3084 <operator new(unsigned int)>
    101a:	ldr	r3, [r4, #56]	; 0x38
    101c:	str	r5, [sp, #4]
    101e:	mov	r6, r0
    1020:	str	r5, [sp, #0]
    1022:	movs	r2, #4
    1024:	movs	r1, #2
    1026:	str	r4, [sp, #8]
    1028:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    102c:	str	r6, [r4, #4]
  _buttons[2] = new Button(3, step3pin, _leds[2], false, false, this);
    102e:	movs	r0, #56	; 0x38
    1030:	bl	3084 <operator new(unsigned int)>
    1034:	ldr	r3, [r4, #60]	; 0x3c
    1036:	str	r5, [sp, #4]
    1038:	mov	r6, r0
    103a:	str	r5, [sp, #0]
    103c:	movs	r2, #6
    103e:	movs	r1, #3
    1040:	str	r4, [sp, #8]
    1042:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    1046:	str	r6, [r4, #8]
  _buttons[3] = new Button(4, step4pin, _leds[3], false, false, this);
    1048:	movs	r0, #56	; 0x38
    104a:	bl	3084 <operator new(unsigned int)>
    104e:	ldr	r3, [r4, #64]	; 0x40
    1050:	str	r5, [sp, #4]
    1052:	mov	r6, r0
    1054:	str	r5, [sp, #0]
    1056:	movs	r2, #8
    1058:	movs	r1, #4
    105a:	str	r4, [sp, #8]
    105c:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    1060:	str	r6, [r4, #12]
  _buttons[4] = new Button(5, shiftPin, _leds[4], true, false, this);
    1062:	movs	r0, #56	; 0x38
    1064:	bl	3084 <operator new(unsigned int)>
    1068:	movs	r6, #1
    106a:	ldr	r3, [r4, #68]	; 0x44
    106c:	str	r5, [sp, #4]
    106e:	mov	r7, r0
    1070:	movs	r2, #10
    1072:	movs	r1, #5
    1074:	str	r4, [sp, #8]
    1076:	str	r6, [sp, #0]
    1078:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    107c:	str	r7, [r4, #16]
  _buttons[5] = new Button(6, playPin, _leds[5], false, true, this);
    107e:	movs	r0, #56	; 0x38
    1080:	bl	3084 <operator new(unsigned int)>
    1084:	ldr	r3, [r4, #72]	; 0x48
    1086:	str	r4, [sp, #8]
    1088:	mov	r7, r0
    108a:	stmia.w	sp, {r5, r6}
    108e:	movs	r2, #12
    1090:	movs	r1, #6
    1092:	bl	554 <Button::Button(int, int, Led*, bool, bool, Controller*)>
    1096:	str	r7, [r4, #20]

  _knobs[0] = new Knob(A0, 0, this);
    1098:	movs	r0, #20
    109a:	bl	3084 <operator new(unsigned int)>
    109e:	mov	r3, r4
    10a0:	mov	r2, r5
    10a2:	mov	r7, r0
    10a4:	movs	r1, #14
    10a6:	bl	e64 <Knob::Knob(unsigned char, int, Controller*)>
    10aa:	str	r7, [r4, #24]
  _knobs[1] = new Knob(A1, 1, this);
    10ac:	movs	r0, #20
    10ae:	bl	3084 <operator new(unsigned int)>
    10b2:	mov	r3, r4
    10b4:	mov	r2, r6
    10b6:	mov	r5, r0
    10b8:	movs	r1, #15
    10ba:	bl	e64 <Knob::Knob(unsigned char, int, Controller*)>
    10be:	str	r5, [r4, #28]
  _knobs[2] = new Knob(A2, 2, this);
    10c0:	movs	r0, #20
    10c2:	bl	3084 <operator new(unsigned int)>
    10c6:	mov	r3, r4
    10c8:	mov	r5, r0
    10ca:	movs	r2, #2
    10cc:	movs	r1, #16
    10ce:	bl	e64 <Knob::Knob(unsigned char, int, Controller*)>
    10d2:	str	r5, [r4, #32]
  _knobs[3] = new Knob(A3, 3, this);
    10d4:	movs	r0, #20
    10d6:	bl	3084 <operator new(unsigned int)>
    10da:	mov	r3, r4
    10dc:	mov	r5, r0
    10de:	movs	r2, #3
    10e0:	movs	r1, #17
    10e2:	bl	e64 <Knob::Knob(unsigned char, int, Controller*)>
    10e6:	str	r5, [r4, #36]	; 0x24
  _knobs[4] = new Knob(A4, 4, this);
    10e8:	movs	r0, #20
    10ea:	bl	3084 <operator new(unsigned int)>
    10ee:	mov	r3, r4
    10f0:	mov	r5, r0
    10f2:	movs	r2, #4
    10f4:	movs	r1, #18
    10f6:	bl	e64 <Knob::Knob(unsigned char, int, Controller*)>
    10fa:	str	r5, [r4, #40]	; 0x28
  _knobs[5] = new Knob(A5, 5, this);
    10fc:	movs	r0, #20
    10fe:	bl	3084 <operator new(unsigned int)>
    1102:	mov	r3, r4
    1104:	movs	r2, #5
    1106:	movs	r1, #19
    1108:	mov	r5, r0
    110a:	bl	e64 <Knob::Knob(unsigned char, int, Controller*)>
};
    110e:	mov	r0, r4
  _knobs[0] = new Knob(A0, 0, this);
  _knobs[1] = new Knob(A1, 1, this);
  _knobs[2] = new Knob(A2, 2, this);
  _knobs[3] = new Knob(A3, 3, this);
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
    1110:	str	r5, [r4, #44]	; 0x2c
};
    1112:	add	sp, #20
    1114:	pop	{r4, r5, r6, r7, pc}
    1116:	nop

00001118 <Controller::tick()>:

void Controller::tick() {
    1118:	push	{r3, r4, r5, r6, r7, lr}
    111a:	add.w	r7, r0, #20
    111e:	mov	r6, r7
    1120:	subs	r4, r0, #4
    1122:	add.w	r5, r0, #48	; 0x30
  for (size_t i = 0; i < 6; i++) {
    _buttons[i]->tick();
    1126:	ldr.w	r0, [r4, #4]!
    112a:	bl	6e0 <Button::tick()>
    _leds[i]->tick();
    112e:	ldr.w	r0, [r5, #4]!
    1132:	bl	8f4 <Led::tick()>
    _knobs[i]->tick();
    1136:	ldr.w	r0, [r6, #4]!
    113a:	bl	f3c <Knob::tick()>
  _knobs[4] = new Knob(A4, 4, this);
  _knobs[5] = new Knob(A5, 5, this);
};

void Controller::tick() {
  for (size_t i = 0; i < 6; i++) {
    113e:	cmp	r4, r7
    1140:	bne.n	1126 <Controller::tick()+0xe>
    _buttons[i]->tick();
    _leds[i]->tick();
    _knobs[i]->tick();
  }
}
    1142:	pop	{r3, r4, r5, r6, r7, pc}

00001144 <Controller::toggleMode()>:

void Controller::toggleMode () {
    1144:	push	{r3, r4, r5, lr}
  if (_currentMode == PITCH) {
    1146:	ldrb.w	r3, [r0, #49]	; 0x31
    _leds[i]->tick();
    _knobs[i]->tick();
  }
}

void Controller::toggleMode () {
    114a:	mov	r4, r0
  if (_currentMode == PITCH) {
    114c:	cbz	r3, 1158 <Controller::toggleMode()+0x14>
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    114e:	cmp	r3, #1
    1150:	beq.n	11a0 <Controller::toggleMode()+0x5c>
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    1152:	cmp	r3, #2
    1154:	beq.n	117a <Controller::toggleMode()+0x36>
    1156:	pop	{r3, r4, r5, pc}
  }
}

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    1158:	movs	r3, #1
    115a:	strb.w	r3, [r0, #49]	; 0x31
    115e:	movs	r1, #8
    1160:	ldr	r0, [pc, #100]	; (11c8 <Controller::toggleMode()+0x84>)
    1162:	bl	13cc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1166:	ldr	r0, [pc, #100]	; (11cc <Controller::toggleMode()+0x88>)
    1168:	bl	2f40 <Print::println()>
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
    116c:	ldr	r0, [r4, #68]	; 0x44
    116e:	movw	r1, #999	; 0x3e7
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};
    1172:	ldmia.w	sp!, {r3, r4, r5, lr}

void Controller::toggleMode () {
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
    1176:	b.w	878 <Led::blink(int)>
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
    117a:	movs	r5, #0
    117c:	strb.w	r5, [r0, #49]	; 0x31
    1180:	movs	r1, #5
    1182:	ldr	r0, [pc, #76]	; (11d0 <Controller::toggleMode()+0x8c>)
    1184:	bl	13cc <usb_serial_write>
    1188:	ldr	r0, [pc, #64]	; (11cc <Controller::toggleMode()+0x88>)
    118a:	bl	2f40 <Print::println()>
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    118e:	ldr	r0, [r4, #68]	; 0x44
    1190:	mov	r1, r5
    1192:	bl	878 <Led::blink(int)>
    _leds[4]->on();
    1196:	ldr	r0, [r4, #68]	; 0x44
  }
};
    1198:	ldmia.w	sp!, {r3, r4, r5, lr}
    _leds[4]->off();
  } else if (_currentMode == NOTELENGTH) {
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
    119c:	b.w	8e4 <Led::on()>
  if (_currentMode == PITCH) {
    _currentMode = VELOCITY;
    Serial.println("VELOCITY");
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
    11a0:	movs	r3, #2
    11a2:	strb.w	r3, [r0, #49]	; 0x31
    11a6:	movs	r1, #10
    11a8:	ldr	r0, [pc, #40]	; (11d4 <Controller::toggleMode()+0x90>)
    11aa:	bl	13cc <usb_serial_write>
    11ae:	ldr	r0, [pc, #28]	; (11cc <Controller::toggleMode()+0x88>)
    11b0:	bl	2f40 <Print::println()>
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    11b4:	ldr	r0, [r4, #68]	; 0x44
    11b6:	movs	r1, #0
    11b8:	bl	878 <Led::blink(int)>
    _leds[4]->off();
    11bc:	ldr	r0, [r4, #68]	; 0x44
    _currentMode = PITCH;
    Serial.println("PITCH");
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};
    11be:	ldmia.w	sp!, {r3, r4, r5, lr}
    _leds[4]->blink(999);
  } else if (_currentMode == VELOCITY) {
    _currentMode = NOTELENGTH;
    Serial.println("NOTELENGTH");
    _leds[4]->blink();
    _leds[4]->off();
    11c2:	b.w	8d8 <Led::off()>
    11c6:	nop
    11c8:	.word	0x000044c4
    11cc:	.word	0x1fff0c48
    11d0:	.word	0x000044dc
    11d4:	.word	0x000044d0

000011d8 <Controller::enterShiftMode()>:
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};

void Controller::enterShiftMode () {
    11d8:	ldr	r3, [r0, #76]	; 0x4c
    11da:	ldr	r3, [r3, #12]
  // todo: maybe shift mode should be a mode like the others duh
  _shiftMode = true;
    11dc:	movs	r2, #1
    11de:	ldr	r3, [r3, #4]
    _leds[4]->blink(); // shut the 999 blinks off
    _leds[4]->on();
  }
};

void Controller::enterShiftMode () {
    11e0:	push	{r4, r5, r6, lr}
    11e2:	mov	r6, r0
  // todo: maybe shift mode should be a mode like the others duh
  _shiftMode = true;
    11e4:	strb.w	r2, [r0, #48]	; 0x30
    11e8:	add.w	r5, r0, #52	; 0x34

  for (int i = 0; i < 4; i++) {
    11ec:	movs	r4, #0
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
    11ee:	cmp	r4, r3

void Controller::enterShiftMode () {
  // todo: maybe shift mode should be a mode like the others duh
  _shiftMode = true;

  for (int i = 0; i < 4; i++) {
    11f0:	add.w	r4, r4, #1
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
    11f4:	beq.n	1202 <Controller::enterShiftMode()+0x2a>
    11f6:	ldr	r0, [r5, #0]
    11f8:	bl	8d8 <Led::off()>
    11fc:	ldr	r3, [r6, #76]	; 0x4c
    11fe:	ldr	r3, [r3, #12]
    1200:	ldr	r3, [r3, #4]

void Controller::enterShiftMode () {
  // todo: maybe shift mode should be a mode like the others duh
  _shiftMode = true;

  for (int i = 0; i < 4; i++) {
    1202:	cmp	r4, #4
    1204:	add.w	r5, r5, #4
    1208:	bne.n	11ee <Controller::enterShiftMode()+0x16>
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
  }

  _leds[_sequencer->_paginator->_currentEditPage]->on();
    120a:	add.w	r6, r6, r3, lsl #2
    120e:	ldr	r0, [r6, #52]	; 0x34
};
    1210:	ldmia.w	sp!, {r4, r5, r6, lr}

  for (int i = 0; i < 4; i++) {
    if (_sequencer->_paginator->_currentEditPage != i) _leds[i]->off();
  }

  _leds[_sequencer->_paginator->_currentEditPage]->on();
    1214:	b.w	8e4 <Led::on()>

00001218 <Controller::exitShiftMode()>:
};

void Controller::exitShiftMode () {
    1218:	push	{r4, r5, r6, lr}
  _shiftMode = false;
    121a:	mov	r5, r0
    121c:	movs	r4, #0
    121e:	strb.w	r4, [r5, #48]!
  }

  _leds[_sequencer->_paginator->_currentEditPage]->on();
};

void Controller::exitShiftMode () {
    1222:	mov	r6, r0
  _shiftMode = false;

  for (size_t i = 0; i < 4; i++) {
    _leds[i]->off();
    1224:	ldr.w	r0, [r5, #4]!
    1228:	bl	8d8 <Led::off()>
    _sequencer->_paginator->setLeds(i);
    122c:	ldr	r3, [r6, #76]	; 0x4c
    122e:	mov	r1, r4
    1230:	ldr	r0, [r3, #12]
};

void Controller::exitShiftMode () {
  _shiftMode = false;

  for (size_t i = 0; i < 4; i++) {
    1232:	adds	r4, #1
    _leds[i]->off();
    _sequencer->_paginator->setLeds(i);
    1234:	bl	c20 <Paginator::setLeds(unsigned int)>
};

void Controller::exitShiftMode () {
  _shiftMode = false;

  for (size_t i = 0; i < 4; i++) {
    1238:	cmp	r4, #4
    123a:	bne.n	1224 <Controller::exitShiftMode()+0xc>
    _leds[i]->off();
    _sequencer->_paginator->setLeds(i);
  }
};
    123c:	pop	{r4, r5, r6, pc}
    123e:	nop

00001240 <Controller::enterCopyMode()>:

void Controller::enterCopyMode () {
  _copyMode = true;
    1240:	movs	r3, #1
    1242:	strb.w	r3, [r0, #80]	; 0x50
    1246:	bx	lr

00001248 <Controller::exitCopyMode()>:
}

void Controller::exitCopyMode () {
  _copyMode = false;
    1248:	movs	r3, #0
    124a:	strb.w	r3, [r0, #80]	; 0x50
    124e:	bx	lr

00001250 <Controller::enterChanceMode()>:
}

void Controller::enterChanceMode () {
  if (_currentMode != CHANCE && _currentMode != SWING) {
    1250:	ldrb.w	r3, [r0, #49]	; 0x31
    1254:	subs	r2, r3, #3
    1256:	cmp	r2, #1
    1258:	bls.n	1278 <Controller::enterChanceMode()+0x28>

void Controller::exitCopyMode () {
  _copyMode = false;
}

void Controller::enterChanceMode () {
    125a:	push	{r4, lr}
    125c:	movs	r1, #6
  if (_currentMode != CHANCE && _currentMode != SWING) {
    _modeBeforeChance = _currentMode;
    125e:	strb.w	r3, [r0, #50]	; 0x32
    1262:	mov	r4, r0
    1264:	ldr	r0, [pc, #20]	; (127c <Controller::enterChanceMode()+0x2c>)
    1266:	bl	13cc <usb_serial_write>
    126a:	ldr	r0, [pc, #20]	; (1280 <Controller::enterChanceMode()+0x30>)
    126c:	bl	2f40 <Print::println()>
    Serial.println("CHANCE");
    _currentMode = CHANCE;
    1270:	movs	r3, #3
    1272:	strb.w	r3, [r4, #49]	; 0x31
    1276:	pop	{r4, pc}
    1278:	bx	lr
    127a:	nop
    127c:	.word	0x000044e4
    1280:	.word	0x1fff0c48

00001284 <Controller::exitChanceMode()>:
    1284:	ldrb.w	r3, [r0, #50]	; 0x32
    1288:	strb.w	r3, [r0, #49]	; 0x31
    128c:	bx	lr
    128e:	nop

00001290 <Controller::enterSwingMode()>:
void Controller::exitChanceMode () {
  _currentMode = _modeBeforeChance;
};

void Controller::enterSwingMode () {
  if (_currentMode != SWING) {
    1290:	ldrb.w	r3, [r0, #49]	; 0x31
    1294:	cmp	r3, #4

void Controller::exitChanceMode () {
  _currentMode = _modeBeforeChance;
};

void Controller::enterSwingMode () {
    1296:	push	{r4, lr}
    1298:	mov	r4, r0
  if (_currentMode != SWING) {
    129a:	beq.n	12aa <Controller::enterSwingMode()+0x1a>
    129c:	movs	r1, #5
    129e:	ldr	r0, [pc, #20]	; (12b4 <Controller::enterSwingMode()+0x24>)
    12a0:	bl	13cc <usb_serial_write>
    12a4:	ldr	r0, [pc, #16]	; (12b8 <Controller::enterSwingMode()+0x28>)
    12a6:	bl	2f40 <Print::println()>
    Serial.println("SWING");
  }

  _currentMode = SWING;
    12aa:	movs	r3, #4
    12ac:	strb.w	r3, [r4, #49]	; 0x31
    12b0:	pop	{r4, pc}
    12b2:	nop
    12b4:	.word	0x000044ec
    12b8:	.word	0x1fff0c48

000012bc <Controller::exitSwingMode()>:
};

void Controller::exitSwingMode () {
  _currentMode = _modeBeforeChance;
    12bc:	ldrb.w	r3, [r0, #50]	; 0x32
    12c0:	strb.w	r3, [r0, #49]	; 0x31
    12c4:	bx	lr
    12c6:	nop

000012c8 <Controller::getChanceMode()>:
};

bool Controller::getChanceMode () {
  return _currentMode == CHANCE;
    12c8:	ldrb.w	r0, [r0, #49]	; 0x31
};
    12cc:	sub.w	r0, r0, #3
    12d0:	clz	r0, r0
    12d4:	lsrs	r0, r0, #5
    12d6:	bx	lr

000012d8 <Controller::getSwingMode()>:

bool Controller::getSwingMode () {
  return _currentMode == SWING;
    12d8:	ldrb.w	r0, [r0, #49]	; 0x31
}
    12dc:	sub.w	r0, r0, #4
    12e0:	clz	r0, r0
    12e4:	lsrs	r0, r0, #5
    12e6:	bx	lr

000012e8 <Controller::getCopyMode()>:

bool Controller::getCopyMode () {
  return _copyMode;
}
    12e8:	ldrb.w	r0, [r0, #80]	; 0x50
    12ec:	bx	lr
    12ee:	nop

000012f0 <Controller::getShiftMode()>:

bool Controller::getShiftMode () {
  return _shiftMode;
};
    12f0:	ldrb.w	r0, [r0, #48]	; 0x30
    12f4:	bx	lr
    12f6:	nop

000012f8 <Controller::getMode()>:

Modes Controller::getMode() {
  return _currentMode;
};
    12f8:	ldrb.w	r0, [r0, #49]	; 0x31
    12fc:	bx	lr
    12fe:	nop

00001300 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1300:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    1302:	ldr	r5, [pc, #60]	; (1340 <usb_serial_getchar+0x40>)
    1304:	ldr	r0, [r5, #0]
    1306:	cbz	r0, 1328 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    1308:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    130a:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    130c:	adds	r1, r0, r3
    130e:	adds	r3, #1
	if (i >= rx_packet->len) {
    1310:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    1312:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    1314:	bcs.n	131c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    1316:	strh	r3, [r0, #2]
	}
	return c;
    1318:	mov	r0, r4
}
    131a:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    131c:	bl	21ac <usb_free>
		rx_packet = NULL;
    1320:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    1322:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    1324:	str	r3, [r5, #0]
    1326:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1328:	ldr	r3, [pc, #24]	; (1344 <usb_serial_getchar+0x44>)
    132a:	ldrb	r3, [r3, #0]
    132c:	cbz	r3, 133a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    132e:	movs	r0, #2
    1330:	bl	21f8 <usb_rx>
    1334:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    1336:	cmp	r0, #0
    1338:	bne.n	1308 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    133a:	mov.w	r0, #4294967295
    133e:	pop	{r3, r4, r5, pc}
    1340:	.word	0x1fff15c0
    1344:	.word	0x1fff1720

00001348 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    1348:	push	{r4, lr}
	if (!rx_packet) {
    134a:	ldr	r4, [pc, #36]	; (1370 <usb_serial_peekchar+0x28>)
    134c:	ldr	r0, [r4, #0]
    134e:	cbz	r0, 1358 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    1350:	ldrh	r3, [r0, #2]
    1352:	add	r0, r3
    1354:	ldrb	r0, [r0, #8]
}
    1356:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    1358:	ldr	r3, [pc, #24]	; (1374 <usb_serial_peekchar+0x2c>)
    135a:	ldrb	r3, [r3, #0]
    135c:	cbz	r3, 136a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    135e:	movs	r0, #2
    1360:	bl	21f8 <usb_rx>
    1364:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    1366:	cmp	r0, #0
    1368:	bne.n	1350 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    136a:	mov.w	r0, #4294967295
    136e:	pop	{r4, pc}
    1370:	.word	0x1fff15c0
    1374:	.word	0x1fff1720

00001378 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1378:	ldr	r3, [pc, #16]	; (138c <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    137a:	ldr	r2, [pc, #20]	; (1390 <usb_serial_available+0x18>)
    137c:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    137e:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    1380:	cbz	r3, 138a <usb_serial_available+0x12>
    1382:	ldrh	r2, [r3, #0]
    1384:	ldrh	r3, [r3, #2]
    1386:	subs	r3, r2, r3
    1388:	add	r0, r3
	return count;
}
    138a:	bx	lr
    138c:	.word	0x1fff15c0
    1390:	.word	0x1fff1bb8

00001394 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    1394:	ldr	r3, [pc, #44]	; (13c4 <usb_serial_flush_input+0x30>)
    1396:	ldrb	r3, [r3, #0]
    1398:	cbz	r3, 13c2 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    139a:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    139c:	ldr	r4, [pc, #40]	; (13c8 <usb_serial_flush_input+0x34>)
    139e:	ldr	r0, [r4, #0]
    13a0:	cbz	r0, 13b6 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    13a2:	bl	21ac <usb_free>
		rx_packet = NULL;
    13a6:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    13a8:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    13aa:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    13ac:	bl	21f8 <usb_rx>
		if (!rx) break;
    13b0:	cbz	r0, 13c0 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    13b2:	bl	21ac <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    13b6:	movs	r0, #2
    13b8:	bl	21f8 <usb_rx>
		if (!rx) break;
    13bc:	cmp	r0, #0
    13be:	bne.n	13b2 <usb_serial_flush_input+0x1e>
    13c0:	pop	{r4, pc}
    13c2:	bx	lr
    13c4:	.word	0x1fff1720
    13c8:	.word	0x1fff15c0

000013cc <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    13cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    13d0:	ldr.w	r9, [pc, #248]	; 14cc <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    13d4:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    13d6:	movs	r2, #1
    13d8:	strb.w	r2, [r9]
	while (size > 0) {
    13dc:	str	r1, [sp, #4]
    13de:	cbz	r1, 143c <usb_serial_write+0x70>
    13e0:	ldr.w	r8, [pc, #236]	; 14d0 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    13e4:	ldr	r7, [pc, #212]	; (14bc <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    13e6:	ldr	r6, [sp, #4]
    13e8:	mov	fp, r0
		if (!tx_packet) {
    13ea:	ldr.w	r0, [r8]
    13ee:	cbz	r0, 145e <usb_serial_write+0x92>
    13f0:	ldr	r5, [pc, #204]	; (14c0 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    13f2:	ldrh	r4, [r0, #2]
    13f4:	rsb	r1, r4, #64	; 0x40
    13f8:	cmp	r1, r6
    13fa:	it	cs
    13fc:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    13fe:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1402:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    1404:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    1408:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    140a:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    140c:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    1410:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    1414:	cbz	r1, 142c <usb_serial_write+0x60>
    1416:	subs	r4, #1
    1418:	add	r2, r4
    141a:	add	r1, fp
    141c:	ldrb.w	r4, [fp], #1
    1420:	strb.w	r4, [r2, #1]!
    1424:	cmp	fp, r1
    1426:	bne.n	141c <usb_serial_write+0x50>
    1428:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    142c:	cmp.w	lr, #63	; 0x3f
    1430:	bhi.n	144a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1432:	ldr	r2, [pc, #144]	; (14c4 <usb_serial_write+0xf8>)
    1434:	movs	r1, #5
    1436:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    1438:	cmp	r6, #0
    143a:	bne.n	13ea <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    143c:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    143e:	movs	r3, #0
    1440:	strb.w	r3, [r9]
	return ret;
}
    1444:	add	sp, #12
    1446:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    144a:	movs	r2, #64	; 0x40
    144c:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    144e:	mov	r1, r0
    1450:	movs	r0, #3
    1452:	bl	2348 <usb_tx>
			tx_packet = NULL;
    1456:	movs	r2, #0
    1458:	str.w	r2, [r8]
    145c:	b.n	1432 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    145e:	ldrb	r2, [r7, #0]
    1460:	cbz	r2, 14ac <usb_serial_write+0xe0>
    1462:	ldr	r4, [pc, #100]	; (14c8 <usb_serial_write+0xfc>)
    1464:	ldr	r5, [pc, #88]	; (14c0 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    1466:	mov.w	sl, #1
    146a:	b.n	147c <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    146c:	subs	r4, #1
    146e:	beq.n	149e <usb_serial_write+0xd2>
    1470:	ldrb	r2, [r5, #0]
    1472:	cbnz	r2, 149e <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    1474:	bl	2e4c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    1478:	ldrb	r2, [r7, #0]
    147a:	cbz	r2, 14ac <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    147c:	movs	r0, #3
    147e:	bl	2234 <usb_tx_packet_count>
    1482:	cmp	r0, #7
    1484:	bhi.n	146c <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    1486:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    148a:	bl	216c <usb_malloc>
    148e:	str.w	r0, [r8]
					if (tx_packet) break;
    1492:	cmp	r0, #0
    1494:	bne.n	13f2 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    1496:	ldr	r3, [pc, #52]	; (14cc <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1498:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    149a:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    149c:	bne.n	1470 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    149e:	movs	r3, #1
					return -1;
    14a0:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    14a4:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    14a6:	add	sp, #12
    14a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    14ac:	movs	r3, #0
					return -1;
    14ae:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    14b2:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    14b6:	add	sp, #12
    14b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14bc:	.word	0x1fff1720
    14c0:	.word	0x1fff15bc
    14c4:	.word	0x1fff15b4
    14c8:	.word	0x00014821
    14cc:	.word	0x1fff15b5
    14d0:	.word	0x1fff15b8

000014d4 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    14d4:	push	{lr}
    14d6:	sub	sp, #12
    14d8:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    14da:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    14dc:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    14e0:	mov	r0, r3
    14e2:	bl	13cc <usb_serial_write>
}
    14e6:	add	sp, #12
    14e8:	ldr.w	pc, [sp], #4

000014ec <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    14ec:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    14ee:	ldr	r5, [pc, #56]	; (1528 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    14f0:	ldr	r4, [pc, #56]	; (152c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    14f2:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    14f4:	movs	r3, #1
    14f6:	strb	r3, [r4, #0]
	if (!tx_packet) {
    14f8:	cbz	r0, 1506 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    14fa:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    14fc:	movs	r3, #0
    14fe:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    1500:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    1504:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1506:	ldr	r3, [pc, #40]	; (1530 <usb_serial_write_buffer_free+0x44>)
    1508:	ldrb	r3, [r3, #0]
    150a:	cbnz	r3, 1512 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    150c:	movs	r0, #0
    150e:	strb	r0, [r4, #0]
			return 0;
    1510:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1512:	movs	r0, #3
    1514:	bl	2234 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    1518:	cmp	r0, #7
    151a:	bhi.n	150c <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    151c:	bl	216c <usb_malloc>
    1520:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    1522:	cmp	r0, #0
    1524:	bne.n	14fa <usb_serial_write_buffer_free+0xe>
    1526:	b.n	150c <usb_serial_write_buffer_free+0x20>
    1528:	.word	0x1fff15b8
    152c:	.word	0x1fff15b5
    1530:	.word	0x1fff1720

00001534 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    1534:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    1536:	ldr	r3, [pc, #68]	; (157c <usb_serial_flush_output+0x48>)
    1538:	ldrb	r3, [r3, #0]
    153a:	cbz	r3, 1560 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    153c:	ldr	r6, [pc, #64]	; (1580 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    153e:	ldr	r5, [pc, #68]	; (1584 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    1540:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    1542:	movs	r7, #1
    1544:	strb	r7, [r5, #0]
	if (tx_packet) {
    1546:	cbz	r4, 1562 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    1548:	ldr	r2, [pc, #60]	; (1588 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    154a:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    154c:	movs	r7, #0
    154e:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1550:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    1552:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    1554:	movs	r0, #3
    1556:	bl	2348 <usb_tx>
		tx_packet = NULL;
    155a:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    155c:	movs	r3, #0
    155e:	strb	r3, [r5, #0]
    1560:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    1562:	bl	216c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    1566:	ldr	r3, [pc, #32]	; (1588 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    1568:	cbz	r0, 1576 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    156a:	mov	r1, r0
    156c:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    156e:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    1570:	bl	2348 <usb_tx>
    1574:	b.n	155c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    1576:	strb	r7, [r3, #0]
    1578:	b.n	155c <usb_serial_flush_output+0x28>
    157a:	nop
    157c:	.word	0x1fff1720
    1580:	.word	0x1fff15b8
    1584:	.word	0x1fff15b5
    1588:	.word	0x1fff15b4

0000158c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    158c:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    158e:	ldr	r3, [pc, #56]	; (15c8 <usb_serial_flush_callback+0x3c>)
    1590:	ldrb	r3, [r3, #0]
    1592:	cbnz	r3, 15b2 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    1594:	ldr	r4, [pc, #52]	; (15cc <usb_serial_flush_callback+0x40>)
    1596:	ldr	r1, [r4, #0]
    1598:	cbz	r1, 15b4 <usb_serial_flush_callback+0x28>
    159a:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    159e:	ldrh	r3, [r1, #2]
    15a0:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    15a2:	movs	r0, #3
    15a4:	bl	2348 <usb_tx>
		tx_packet = NULL;
    15a8:	str	r5, [r4, #0]
    15aa:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    15ac:	ldr	r3, [pc, #32]	; (15d0 <usb_serial_flush_callback+0x44>)
    15ae:	movs	r2, #1
    15b0:	strb	r2, [r3, #0]
    15b2:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    15b4:	bl	216c <usb_malloc>
		if (tx) {
    15b8:	cmp	r0, #0
    15ba:	beq.n	15ac <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    15bc:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    15be:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    15c2:	movs	r0, #3
    15c4:	b.w	2348 <usb_tx>
    15c8:	.word	0x1fff15b5
    15cc:	.word	0x1fff15b8
    15d0:	.word	0x1fff15b4

000015d4 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    15d4:	ldr	r2, [pc, #220]	; (16b4 <wait_for_cal+0xe0>)
    15d6:	ldr	r1, [pc, #224]	; (16b8 <wait_for_cal+0xe4>)
    15d8:	ldr	r3, [r2, #0]
    15da:	lsls	r3, r3, #24
    15dc:	bmi.n	15d8 <wait_for_cal+0x4>
    15de:	ldr	r3, [r1, #0]
    15e0:	ands.w	r3, r3, #128	; 0x80
    15e4:	bne.n	15d8 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    15e6:	cpsid	i
	if (calibrating) {
    15e8:	ldr	r1, [pc, #208]	; (16bc <wait_for_cal+0xe8>)
    15ea:	ldrb	r2, [r1, #0]
    15ec:	cmp	r2, #0
    15ee:	beq.n	16b0 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    15f0:	ldr	r2, [pc, #204]	; (16c0 <wait_for_cal+0xec>)
    15f2:	ldr	r0, [pc, #208]	; (16c4 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    15f4:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    15f6:	ldr	r4, [pc, #208]	; (16c8 <wait_for_cal+0xf4>)
    15f8:	ldr	r7, [r2, #0]
    15fa:	ldr	r6, [r0, #0]
    15fc:	ldr	r5, [r4, #0]
    15fe:	ldr	r4, [r2, #12]
    1600:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1602:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1604:	adds	r2, #20
    1606:	ldr	r0, [r0, #0]
    1608:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    160a:	ldr	r7, [pc, #192]	; (16cc <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    160c:	add	r5, r6
    160e:	add	r4, r5
    1610:	add	r0, r4
    1612:	add	r2, r0
    1614:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1618:	ldr	r6, [pc, #180]	; (16d0 <wait_for_cal+0xfc>)
    161a:	ldr	r0, [pc, #184]	; (16d4 <wait_for_cal+0x100>)
    161c:	ldr	r5, [pc, #184]	; (16d8 <wait_for_cal+0x104>)
    161e:	ldr	r4, [pc, #188]	; (16dc <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    1620:	orr.w	r2, r2, #32768	; 0x8000
    1624:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1626:	ldr	r7, [r6, #0]
    1628:	ldr	r6, [r0, #0]
    162a:	ldr	r5, [r5, #0]
    162c:	ldr	r2, [pc, #176]	; (16e0 <wait_for_cal+0x10c>)
    162e:	ldr	r4, [r4, #0]
    1630:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1632:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    1634:	ldr	r0, [r0, #0]
    1636:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    1638:	ldr	r7, [pc, #168]	; (16e4 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    163a:	add	r5, r6
    163c:	add	r4, r5
    163e:	add	r0, r4
    1640:	add	r2, r0
    1642:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1646:	ldr	r6, [pc, #160]	; (16e8 <wait_for_cal+0x114>)
    1648:	ldr	r0, [pc, #160]	; (16ec <wait_for_cal+0x118>)
    164a:	ldr	r5, [pc, #164]	; (16f0 <wait_for_cal+0x11c>)
    164c:	ldr	r4, [pc, #164]	; (16f4 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    164e:	orr.w	r2, r2, #32768	; 0x8000
    1652:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1654:	ldr	r7, [r6, #0]
    1656:	ldr	r6, [r0, #0]
    1658:	ldr	r5, [r5, #0]
    165a:	ldr	r2, [pc, #156]	; (16f8 <wait_for_cal+0x124>)
    165c:	ldr	r4, [r4, #0]
    165e:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    1660:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    1662:	ldr	r0, [r0, #0]
    1664:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    1666:	ldr	r7, [pc, #148]	; (16fc <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    1668:	add	r5, r6
    166a:	add	r4, r5
    166c:	add	r0, r4
    166e:	add	r2, r0
    1670:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1674:	ldr	r6, [pc, #136]	; (1700 <wait_for_cal+0x12c>)
    1676:	ldr	r0, [pc, #140]	; (1704 <wait_for_cal+0x130>)
    1678:	ldr	r5, [pc, #140]	; (1708 <wait_for_cal+0x134>)
    167a:	ldr	r4, [pc, #144]	; (170c <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    167c:	orr.w	r2, r2, #32768	; 0x8000
    1680:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1682:	ldr	r7, [r6, #0]
    1684:	ldr	r6, [r0, #0]
    1686:	ldr	r5, [r5, #0]
    1688:	ldr	r2, [pc, #132]	; (1710 <wait_for_cal+0x13c>)
    168a:	ldr	r4, [r4, #0]
    168c:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    168e:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    1690:	ldr	r0, [r0, #0]
    1692:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    1694:	add	r5, r6
    1696:	add	r4, r5
    1698:	add	r0, r4
    169a:	add	r2, r0
    169c:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    16a0:	ldr	r0, [pc, #112]	; (1714 <wait_for_cal+0x140>)
    16a2:	orr.w	r2, r2, #32768	; 0x8000
    16a6:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    16a8:	strb	r3, [r1, #0]
	}
	__enable_irq();
    16aa:	cpsie	i
}
    16ac:	pop	{r4, r5, r6, r7}
    16ae:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    16b0:	cpsie	i
    16b2:	bx	lr
    16b4:	.word	0x4003b024
    16b8:	.word	0x400bb024
    16bc:	.word	0x1fff15c6
    16c0:	.word	0x4003b038
    16c4:	.word	0x4003b03c
    16c8:	.word	0x4003b040
    16cc:	.word	0x4003b02c
    16d0:	.word	0x4003b058
    16d4:	.word	0x4003b05c
    16d8:	.word	0x4003b060
    16dc:	.word	0x4003b064
    16e0:	.word	0x4003b06c
    16e4:	.word	0x4003b030
    16e8:	.word	0x400bb038
    16ec:	.word	0x400bb03c
    16f0:	.word	0x400bb040
    16f4:	.word	0x400bb044
    16f8:	.word	0x400bb04c
    16fc:	.word	0x400bb02c
    1700:	.word	0x400bb058
    1704:	.word	0x400bb05c
    1708:	.word	0x400bb060
    170c:	.word	0x400bb064
    1710:	.word	0x400bb06c
    1714:	.word	0x400bb030

00001718 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    1718:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    171a:	ldr	r0, [pc, #164]	; (17c0 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    171c:	ldr	r2, [pc, #164]	; (17c4 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    171e:	ldr	r3, [pc, #168]	; (17c8 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1720:	ldr	r5, [pc, #168]	; (17cc <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1722:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1724:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    1726:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    1728:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    172a:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    172c:	ldr	r4, [pc, #160]	; (17d0 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    172e:	cmp	r3, #8
    1730:	beq.n	1794 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1732:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1734:	ldr	r0, [pc, #156]	; (17d4 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1736:	ldr	r1, [pc, #160]	; (17d8 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1738:	beq.n	17aa <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    173a:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    173c:	ite	eq
    173e:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1740:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1742:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1744:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1746:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1748:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    174a:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    174c:	ldr	r3, [pc, #140]	; (17dc <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    174e:	ldr	r1, [pc, #144]	; (17e0 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1750:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1752:	ldr	r2, [pc, #144]	; (17e4 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1754:	cbz	r3, 1786 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1756:	movs	r3, #1
    1758:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    175a:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    175c:	ldr	r3, [pc, #136]	; (17e8 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    175e:	ldr	r1, [pc, #140]	; (17ec <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1760:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1762:	ldr	r2, [pc, #140]	; (17f0 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    1764:	cmp	r3, #1
    1766:	bls.n	17b6 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    1768:	cmp	r3, #4
    176a:	bls.n	178c <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    176c:	cmp	r3, #8
    176e:	bls.n	17ae <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    1770:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    1772:	ite	ls
    1774:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1776:	movhi	r3, #135	; 0x87
    1778:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    177a:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    177c:	ldr	r3, [pc, #116]	; (17f4 <analog_init+0xdc>)
    177e:	movs	r2, #1
    1780:	strb	r2, [r3, #0]
}
    1782:	pop	{r4, r5}
    1784:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1786:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1788:	str	r3, [r2, #0]
    178a:	b.n	175c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    178c:	movs	r3, #132	; 0x84
    178e:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1790:	str	r3, [r2, #0]
    1792:	b.n	177c <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1794:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1798:	ldr	r1, [pc, #60]	; (17d8 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    179a:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    179c:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    179e:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    17a0:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    17a2:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    17a4:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    17a6:	str	r3, [r1, #0]
    17a8:	b.n	174c <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    17aa:	movs	r2, #57	; 0x39
    17ac:	b.n	179e <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    17ae:	movs	r3, #133	; 0x85
    17b0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    17b2:	str	r3, [r2, #0]
    17b4:	b.n	177c <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    17b6:	movs	r3, #128	; 0x80
    17b8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    17ba:	str	r3, [r2, #0]
    17bc:	b.n	177c <analog_init+0x64>
    17be:	nop
    17c0:	.word	0x40074000
    17c4:	.word	0x40074001
    17c8:	.word	0x1fff0c40
    17cc:	.word	0x4003b008
    17d0:	.word	0x4003b00c
    17d4:	.word	0x400bb008
    17d8:	.word	0x400bb00c
    17dc:	.word	0x1fff15c9
    17e0:	.word	0x4003b020
    17e4:	.word	0x400bb020
    17e8:	.word	0x1fff0c41
    17ec:	.word	0x4003b024
    17f0:	.word	0x400bb024
    17f4:	.word	0x1fff15c6

000017f8 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    17f8:	cmp	r0, #71	; 0x47
    17fa:	bhi.n	185c <analogRead+0x64>
	channel = pin2sc1a[pin];
    17fc:	ldr	r3, [pc, #204]	; (18cc <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    17fe:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    1802:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    1804:	cmp	r6, #255	; 0xff
    1806:	beq.n	1860 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    1808:	ldr	r3, [pc, #196]	; (18d0 <analogRead+0xd8>)
    180a:	ldrb	r3, [r3, #0]
    180c:	cmp	r3, #0
    180e:	bne.n	1866 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    1810:	lsls	r2, r6, #24
    1812:	bmi.n	186e <analogRead+0x76>
#endif

	__disable_irq();
    1814:	cpsid	i
    1816:	ldr	r5, [pc, #188]	; (18d4 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    1818:	ldr	r4, [pc, #188]	; (18d8 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    181a:	mov	r7, r5
    181c:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    181e:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    1820:	strb	r3, [r5, #0]
	__enable_irq();
    1822:	cpsie	i
	while (1) {
		__disable_irq();
    1824:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1826:	ldr	r3, [r4, #0]
    1828:	lsls	r3, r3, #24
    182a:	bmi.n	1846 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    182c:	ldrb	r3, [r7, #0]
    182e:	cbnz	r3, 1838 <analogRead+0x40>
    1830:	b.n	181c <analogRead+0x24>
    1832:	ldrb	r3, [r5, #0]
    1834:	cmp	r3, #0
    1836:	beq.n	181c <analogRead+0x24>
		__enable_irq();
    1838:	cpsie	i
		yield();
    183a:	bl	2e4c <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    183e:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    1840:	ldr	r3, [r4, #0]
    1842:	lsls	r0, r3, #24
    1844:	bpl.n	1832 <analogRead+0x3a>
			result = ADC0_RA;
    1846:	ldr	r3, [pc, #148]	; (18dc <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    1848:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    184a:	movs	r2, #0
    184c:	strb	r2, [r5, #0]
			__enable_irq();
    184e:	cpsie	i
			result >>= analog_right_shift;
    1850:	ldr	r2, [pc, #140]	; (18e0 <analogRead+0xe8>)
    1852:	ldrb	r0, [r2, #0]
    1854:	asr.w	r0, r3, r0
			return result;
    1858:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    185c:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    185e:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    1860:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    1862:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    1866:	bl	15d4 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    186a:	lsls	r2, r6, #24
    186c:	bpl.n	1814 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    186e:	cpsid	i
    1870:	ldr	r5, [pc, #112]	; (18e4 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    1872:	ldr.w	r8, [pc, #124]	; 18f0 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    1876:	ldr	r4, [pc, #112]	; (18e8 <analogRead+0xf0>)
    1878:	and.w	r7, r6, #64	; 0x40
    187c:	uxtb	r7, r7
    187e:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1882:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    1886:	cbz	r7, 18c0 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    1888:	bic.w	r3, r3, #16
    188c:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    1890:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    1892:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    1894:	ldr	r2, [pc, #76]	; (18e4 <analogRead+0xec>)
    1896:	strb	r3, [r5, #0]
	__enable_irq();
    1898:	cpsie	i
	while (1) {
		__disable_irq();
    189a:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    189c:	ldr	r3, [r4, #0]
    189e:	lsls	r1, r3, #24
    18a0:	bmi.n	18bc <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    18a2:	ldrb	r3, [r2, #0]
    18a4:	cbnz	r3, 18ae <analogRead+0xb6>
    18a6:	b.n	1882 <analogRead+0x8a>
    18a8:	ldrb	r3, [r5, #0]
    18aa:	cmp	r3, #0
    18ac:	beq.n	1882 <analogRead+0x8a>
		__enable_irq();
    18ae:	cpsie	i
		yield();
    18b0:	bl	2e4c <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    18b4:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    18b6:	ldr	r3, [r4, #0]
    18b8:	lsls	r3, r3, #24
    18ba:	bpl.n	18a8 <analogRead+0xb0>
			result = ADC1_RA;
    18bc:	ldr	r3, [pc, #44]	; (18ec <analogRead+0xf4>)
    18be:	b.n	1848 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    18c0:	orr.w	r3, r3, #16
    18c4:	str.w	r3, [r8]
    18c8:	b.n	1890 <analogRead+0x98>
    18ca:	nop
    18cc:	.word	0x000044f4
    18d0:	.word	0x1fff15c6
    18d4:	.word	0x1fff15c8
    18d8:	.word	0x4003b000
    18dc:	.word	0x4003b010
    18e0:	.word	0x1fff15c5
    18e4:	.word	0x1fff15c7
    18e8:	.word	0x400bb000
    18ec:	.word	0x400bb010
    18f0:	.word	0x400bb00c

000018f4 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    18f4:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    18f6:	ldr	r3, [pc, #68]	; (193c <digitalWrite.part.1+0x48>)
    18f8:	ldr.w	r2, [r3, r0, lsl #3]
    18fc:	ldrb.w	r4, [r2, #640]	; 0x280
    1900:	cbz	r4, 1910 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    1902:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    1904:	cbz	r1, 1926 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    1906:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    190a:	ldr.w	r4, [sp], #4
    190e:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    1910:	add.w	r3, r3, r0, lsl #3
    1914:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1916:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    1918:	cbnz	r1, 1930 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    191a:	bic.w	r2, r2, #2
    191e:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1920:	ldr.w	r4, [sp], #4
    1924:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    1926:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    192a:	ldr.w	r4, [sp], #4
    192e:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    1930:	orr.w	r2, r2, #3
    1934:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    1936:	ldr.w	r4, [sp], #4
    193a:	bx	lr
    193c:	.word	0x0000453c

00001940 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1940:	ldr	r2, [pc, #112]	; (19b4 <pinMode.part.2+0x74>)
    1942:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    1946:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    1948:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    194a:	beq.n	1970 <pinMode.part.2+0x30>
    194c:	cmp	r1, #4
    194e:	beq.n	1988 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    1950:	ldr.w	r0, [r2, r0, lsl #3]
    1954:	movs	r2, #0
    1956:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    195a:	cbz	r1, 1968 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    195c:	cmp	r1, #2
    195e:	beq.n	19a2 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    1960:	cmp	r1, #3
    1962:	beq.n	19aa <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    1964:	str	r2, [r3, #0]
    1966:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    1968:	mov.w	r2, #256	; 0x100
    196c:	str	r2, [r3, #0]
    196e:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1970:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1974:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1978:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    197c:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    197e:	ldr	r2, [r3, #0]
    1980:	bic.w	r2, r2, #32
    1984:	str	r2, [r3, #0]
    1986:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1988:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    198c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    1990:	movs	r0, #1
    1992:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    1996:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    1998:	ldr	r2, [r3, #0]
    199a:	orr.w	r2, r2, #32
    199e:	str	r2, [r3, #0]
    19a0:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    19a2:	movw	r2, #259	; 0x103
    19a6:	str	r2, [r3, #0]
    19a8:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    19aa:	mov.w	r2, #258	; 0x102
    19ae:	str	r2, [r3, #0]
    19b0:	bx	lr
    19b2:	nop
    19b4:	.word	0x0000453c

000019b8 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    19b8:	push	{r4, r5}
	RTC_SR = 0;
    19ba:	ldr	r3, [pc, #20]	; (19d0 <rtc_set+0x18>)
	RTC_TPR = 0;
    19bc:	ldr	r5, [pc, #20]	; (19d4 <rtc_set+0x1c>)
	RTC_TSR = t;
    19be:	ldr	r4, [pc, #24]	; (19d8 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    19c0:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    19c2:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    19c4:	str	r2, [r3, #0]
	RTC_TPR = 0;
    19c6:	str	r2, [r5, #0]
	RTC_TSR = t;
    19c8:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    19ca:	str	r1, [r3, #0]
}
    19cc:	pop	{r4, r5}
    19ce:	bx	lr
    19d0:	.word	0x4003d014
    19d4:	.word	0x4003d004
    19d8:	.word	0x4003d000

000019dc <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    19dc:	cmp	r0, #63	; 0x3f
    19de:	bhi.n	19e4 <digitalWrite+0x8>
    19e0:	b.w	18f4 <digitalWrite.part.1>
    19e4:	bx	lr
    19e6:	nop

000019e8 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    19e8:	cmp	r0, #63	; 0x3f
    19ea:	bhi.n	19fa <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    19ec:	ldr	r3, [pc, #16]	; (1a00 <digitalRead+0x18>)
    19ee:	ldr.w	r3, [r3, r0, lsl #3]
    19f2:	ldrb.w	r0, [r3, #512]	; 0x200
    19f6:	uxtb	r0, r0
    19f8:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    19fa:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    19fc:	bx	lr
    19fe:	nop
    1a00:	.word	0x0000453c

00001a04 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    1a04:	cmp	r0, #63	; 0x3f
    1a06:	bhi.n	1a0c <pinMode+0x8>
    1a08:	b.w	1940 <pinMode.part.2>
    1a0c:	bx	lr
    1a0e:	nop

00001a10 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    1a10:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1a14:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1a16:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    1a18:	ldr	r7, [pc, #136]	; (1aa4 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1a1a:	ldr	r3, [pc, #140]	; (1aa8 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1a1c:	ldr	r2, [pc, #140]	; (1aac <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1a1e:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    1a20:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1a22:	ldr	r2, [r2, #0]
	__enable_irq();
    1a24:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1a26:	lsls	r2, r2, #5
    1a28:	bpl.n	1a30 <delay+0x20>
    1a2a:	cmp	r3, #50	; 0x32
    1a2c:	it	hi
    1a2e:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    1a30:	cbz	r5, 1aa0 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1a32:	rsb	r3, r3, #179200	; 0x2bc00
    1a36:	addw	r3, r3, #799	; 0x31f
    1a3a:	ldr	r6, [pc, #116]	; (1ab0 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    1a3c:	ldr.w	r9, [pc, #104]	; 1aa8 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1a40:	ldr.w	r8, [pc, #104]	; 1aac <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    1a44:	lsrs	r3, r3, #2
    1a46:	mov.w	r2, #1000	; 0x3e8
    1a4a:	umull	r1, r3, r6, r3
    1a4e:	mul.w	r4, r2, r4
    1a52:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    1a56:	cpsid	i
	current = SYST_CVR;
    1a58:	ldr.w	r1, [r9]
	count = systick_millis_count;
    1a5c:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    1a5e:	ldr.w	lr, [r8]
	__enable_irq();
    1a62:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1a64:	rsb	r3, r1, #179200	; 0x2bc00
    1a68:	addw	r3, r3, #799	; 0x31f
    1a6c:	lsrs	r3, r3, #2
    1a6e:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1a72:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1a76:	rsb	r3, r4, r3, lsr #2
    1a7a:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    1a7e:	beq.n	1a86 <delay+0x76>
    1a80:	cmp	r1, #50	; 0x32
    1a82:	it	hi
    1a84:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    1a86:	mla	r3, r0, r2, r3
    1a8a:	cmp.w	r3, #1000	; 0x3e8
    1a8e:	bcc.n	1a9a <delay+0x8a>
				ms--;
				if (ms == 0) return;
    1a90:	subs	r5, #1
    1a92:	beq.n	1aa0 <delay+0x90>
				start += 1000;
    1a94:	add.w	r4, r4, #1000	; 0x3e8
    1a98:	b.n	1a56 <delay+0x46>
			}
			yield();
    1a9a:	bl	2e4c <yield>
		}
    1a9e:	b.n	1a56 <delay+0x46>
    1aa0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1aa4:	.word	0x1fff15cc
    1aa8:	.word	0xe000e018
    1aac:	.word	0xe000ed04
    1ab0:	.word	0x16c16c17

00001ab4 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    1ab4:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1ab6:	ldr	r3, [pc, #312]	; (1bf0 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1ab8:	ldr	r0, [pc, #312]	; (1bf4 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    1aba:	ldr.w	ip, [pc, #348]	; 1c18 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    1abe:	ldr	r4, [pc, #312]	; (1bf8 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    1ac0:	ldr	r1, [pc, #312]	; (1bfc <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1ac2:	ldr.w	lr, [pc, #344]	; 1c1c <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    1ac6:	ldr	r6, [pc, #312]	; (1c00 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    1ac8:	ldr	r5, [pc, #312]	; (1c04 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    1aca:	ldr	r7, [pc, #316]	; (1c08 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    1acc:	mov.w	r2, #134217728	; 0x8000000
    1ad0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    1ad2:	mov.w	r2, #268435456	; 0x10000000
    1ad6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    1ad8:	mov.w	r2, #536870912	; 0x20000000
    1adc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    1ade:	mov.w	r2, #1073741824	; 0x40000000
    1ae2:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    1ae4:	mov.w	r2, #2147483648	; 0x80000000
    1ae8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    1aea:	movs	r2, #0
    1aec:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1aee:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    1af0:	movw	r0, #61439	; 0xefff
    1af4:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    1af8:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    1afc:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    1afe:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    1b02:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    1b04:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    1b06:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1b08:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    1b0c:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    1b0e:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    1b12:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1b14:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    1b18:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1b1a:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    1b1e:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1b22:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    1b26:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    1b2a:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    1b2e:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    1b30:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    1b34:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    1b36:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    1b38:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    1b3a:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    1b3e:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    1b40:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    1b42:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1b44:	ldr	r4, [pc, #196]	; (1c0c <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    1b46:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    1b48:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1b4a:	movs	r1, #9
    1b4c:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    1b4e:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    1b52:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    1b56:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    1b58:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    1b5a:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    1b5c:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    1b5e:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    1b60:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1b62:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    1b66:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    1b6a:	add.w	r7, r7, #520192	; 0x7f000
    1b6e:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    1b70:	addw	r4, r4, #2044	; 0x7fc
    1b74:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    1b76:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    1b78:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    1b7a:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1b7c:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    1b80:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    1b82:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    1b86:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    1b8a:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    1b8c:	sub.w	r4, r4, #460800	; 0x70800
    1b90:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    1b94:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    1b96:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    1b98:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    1b9c:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    1b9e:	ldr	r0, [pc, #112]	; (1c10 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    1ba0:	orr.w	r1, r1, #512	; 0x200
    1ba4:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    1ba6:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1ba8:	ldr	r4, [pc, #104]	; (1c14 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    1baa:	add.w	lr, lr, #65280	; 0xff00
    1bae:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    1bb2:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    1bb6:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    1bba:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    1bbe:	orr.w	r1, r1, #33554432	; 0x2000000
    1bc2:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    1bc4:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    1bc8:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1bcc:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    1bce:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    1bd0:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    1bd2:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    1bd4:	str	r2, [r4, #0]
#endif
	analog_init();
    1bd6:	bl	1718 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    1bda:	movs	r0, #25
    1bdc:	bl	1a10 <delay>
	usb_init();
    1be0:	bl	2d7c <usb_init>
	delay(275);
    1be4:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    1be8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    1bec:	b.w	1a10 <delay>
    1bf0:	.word	0xe000e104
    1bf4:	.word	0x40038004
    1bf8:	.word	0x40038014
    1bfc:	.word	0x4003801c
    1c00:	.word	0x40038024
    1c04:	.word	0x4003802c
    1c08:	.word	0x40038034
    1c0c:	.word	0x40038000
    1c10:	.word	0x40048004
    1c14:	.word	0x400c9000
    1c18:	.word	0x40038008
    1c1c:	.word	0x4003800c

00001c20 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    1c20:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    1c22:	ldr	r3, [pc, #56]	; (1c5c <sysex_byte+0x3c>)
    1c24:	ldr	r4, [pc, #56]	; (1c60 <sysex_byte+0x40>)
    1c26:	ldr	r3, [r3, #0]
    1c28:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    1c2a:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    1c2c:	cbz	r3, 1c52 <sysex_byte+0x32>
    1c2e:	cmp.w	r1, #290	; 0x122
    1c32:	bcs.n	1c40 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1c34:	ldr	r2, [pc, #44]	; (1c64 <sysex_byte+0x44>)
    1c36:	adds	r3, r1, #1
    1c38:	strb	r5, [r2, r1]
    1c3a:	uxth	r3, r3
    1c3c:	strh	r3, [r4, #0]
	}
}
    1c3e:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    1c40:	movs	r2, #0
    1c42:	ldr	r0, [pc, #32]	; (1c64 <sysex_byte+0x44>)
    1c44:	blx	r3
    1c46:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1c48:	ldr	r2, [pc, #24]	; (1c64 <sysex_byte+0x44>)
    1c4a:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    1c4c:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    1c4e:	strh	r3, [r4, #0]
	}
}
    1c50:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    1c52:	cmp.w	r1, #290	; 0x122
    1c56:	bcc.n	1c34 <sysex_byte+0x14>
    1c58:	pop	{r3, r4, r5, pc}
    1c5a:	nop
    1c5c:	.word	0x1fff15f4
    1c60:	.word	0x1fff1a8e
    1c64:	.word	0x1fff1a94

00001c68 <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    1c68:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    1c6c:	ldr	r6, [pc, #132]	; (1cf4 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1c6e:	ldr	r7, [pc, #136]	; (1cf8 <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    1c70:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1c72:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    1c74:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    1c76:	strb	r3, [r7, #0]
	if (!tx_packet) {
    1c78:	cbz	r1, 1ca8 <usb_midi_write_packed+0x40>
    1c7a:	ldr	r5, [pc, #128]	; (1cfc <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    1c7c:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    1c7e:	add.w	r2, r1, r3, lsl #2
    1c82:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    1c84:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    1c86:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    1c88:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    1c8c:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    1c8e:	bhi.n	1c9a <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    1c90:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    1c92:	movs	r3, #0
    1c94:	strb	r3, [r7, #0]
    1c96:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    1c9a:	movs	r3, #64	; 0x40
    1c9c:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    1c9e:	movs	r0, #4
    1ca0:	bl	2348 <usb_tx>
		tx_packet = NULL;
    1ca4:	str	r4, [r6, #0]
    1ca6:	b.n	1c92 <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    1ca8:	ldr.w	r9, [pc, #84]	; 1d00 <usb_midi_write_packed+0x98>
    1cac:	ldrb.w	r3, [r9]
    1cb0:	cmp	r3, #0
    1cb2:	beq.n	1c96 <usb_midi_write_packed+0x2e>
    1cb4:	ldr	r5, [pc, #68]	; (1cfc <usb_midi_write_packed+0x94>)
    1cb6:	movw	r4, #48001	; 0xbb81
    1cba:	b.n	1cce <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    1cbc:	subs	r4, #1
    1cbe:	beq.n	1ce6 <usb_midi_write_packed+0x7e>
    1cc0:	ldrb	r3, [r5, #0]
    1cc2:	cbnz	r3, 1ce6 <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    1cc4:	bl	2e4c <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    1cc8:	ldrb.w	r3, [r9]
    1ccc:	cbz	r3, 1cee <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    1cce:	movs	r0, #4
    1cd0:	bl	2234 <usb_tx_packet_count>
    1cd4:	cmp	r0, #5
    1cd6:	bhi.n	1cbc <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    1cd8:	bl	216c <usb_malloc>
    1cdc:	mov	r1, r0
    1cde:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    1ce0:	cmp	r0, #0
    1ce2:	beq.n	1cbc <usb_midi_write_packed+0x54>
    1ce4:	b.n	1c7c <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    1ce6:	movs	r3, #1
    1ce8:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    1cea:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1cee:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1cf2:	nop
    1cf4:	.word	0x1fff1610
    1cf8:	.word	0x1fff15e4
    1cfc:	.word	0x1fff1614
    1d00:	.word	0x1fff1720

00001d04 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    1d04:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    1d06:	ldr	r3, [pc, #32]	; (1d28 <usb_midi_flush_output+0x24>)
    1d08:	ldrb	r4, [r3, #0]
    1d0a:	cbnz	r4, 1d16 <usb_midi_flush_output+0x12>
    1d0c:	ldr	r5, [pc, #28]	; (1d2c <usb_midi_flush_output+0x28>)
    1d0e:	ldr	r1, [r5, #0]
    1d10:	cbz	r1, 1d16 <usb_midi_flush_output+0x12>
    1d12:	ldrh	r3, [r1, #2]
    1d14:	cbnz	r3, 1d18 <usb_midi_flush_output+0x14>
    1d16:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    1d18:	lsls	r3, r3, #2
    1d1a:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    1d1c:	movs	r0, #4
    1d1e:	bl	2348 <usb_tx>
		tx_packet = NULL;
    1d22:	str	r4, [r5, #0]
    1d24:	pop	{r3, r4, r5, pc}
    1d26:	nop
    1d28:	.word	0x1fff15e4
    1d2c:	.word	0x1fff1610

00001d30 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1d30:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    1d34:	ldr	r6, [pc, #692]	; (1fec <usb_midi_read+0x2bc>)
    1d36:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    1d38:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    1d3a:	cmp	r3, #0
    1d3c:	beq.w	1e64 <usb_midi_read+0x134>
    1d40:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    1d42:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    1d44:	lsrs	r1, r2, #2
    1d46:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    1d4a:	adds	r2, #4
	if (index < rx_packet->len) {
    1d4c:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    1d4e:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    1d50:	bcs.n	1dd8 <usb_midi_read+0xa8>
		rx_packet->index = index;
    1d52:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    1d54:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1d58:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    1d5c:	ldr	r1, [pc, #656]	; (1ff0 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1d5e:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    1d62:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    1d66:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1d6a:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    1d6c:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    1d70:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    1d72:	bls.n	1daa <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1d74:	subs	r3, r6, #2
    1d76:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    1d78:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1d7c:	bls.n	1e1c <usb_midi_read+0xec>
    1d7e:	cmp	r6, #5
    1d80:	beq.n	1e14 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    1d82:	cmp	r6, #4
    1d84:	beq.w	20d0 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    1d88:	subs	r3, r6, #5
    1d8a:	cmp	r3, #2
    1d8c:	bls.n	1e8e <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    1d8e:	cmp	r6, #15
    1d90:	bne.n	1db0 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    1d92:	cmp	r0, #247	; 0xf7
    1d94:	bhi.n	1e1c <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    1d96:	cmp	r0, #240	; 0xf0
    1d98:	beq.n	1da0 <usb_midi_read+0x70>
    1d9a:	ldr	r3, [pc, #600]	; (1ff4 <usb_midi_read+0x2c4>)
    1d9c:	ldrh	r3, [r3, #0]
    1d9e:	cbz	r3, 1db0 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    1da0:	bl	1c20 <sysex_byte>
		}
	}
	return 0;
    1da4:	movs	r0, #0
    1da6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    1daa:	cbz	r7, 1db6 <usb_midi_read+0x86>
    1dac:	cmp	r5, r7
    1dae:	beq.n	1db6 <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    1db0:	movs	r0, #0
    1db2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1db6:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    1db8:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1dbc:	beq.w	1ece <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    1dc0:	cmp	r6, #9
    1dc2:	beq.n	1de8 <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    1dc4:	cmp	r6, #10
    1dc6:	bne.w	1ef2 <usb_midi_read+0x1c2>
    1dca:	cmp	r3, #10
    1dcc:	bne.n	1db0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    1dce:	ldr	r3, [pc, #552]	; (1ff8 <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    1dd0:	ldr	r2, [pc, #552]	; (1ffc <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    1dd2:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    1dd4:	movs	r1, #160	; 0xa0
    1dd6:	b.n	1edc <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    1dd8:	mov	r0, r3
    1dda:	bl	21ac <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    1dde:	movs	r0, #5
    1de0:	bl	21f8 <usb_rx>
    1de4:	str	r0, [r6, #0]
    1de6:	b.n	1d54 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    1de8:	cmp	r3, #9
    1dea:	bne.n	1db0 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    1dec:	lsrs	r7, r4, #24
    1dee:	beq.w	20e8 <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    1df2:	ldr	r3, [pc, #524]	; (2000 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1df4:	ldr	r2, [pc, #516]	; (1ffc <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    1df6:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1df8:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1dfa:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    1dfe:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1e00:	uxtb	r5, r5
    1e02:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    1e04:	cmp	r3, #0
    1e06:	beq.w	1f44 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    1e0a:	mov	r2, r4
    1e0c:	mov	r1, r6
    1e0e:	mov	r0, r5
    1e10:	blx	r3
    1e12:	b.n	1f44 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    1e14:	cmp	r0, #240	; 0xf0
    1e16:	bls.n	1ea0 <usb_midi_read+0x170>
    1e18:	cmp	r0, #247	; 0xf7
    1e1a:	beq.n	1ea0 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    1e1c:	subs	r0, #241	; 0xf1
    1e1e:	cmp	r0, #14
    1e20:	bhi.n	1db0 <usb_midi_read+0x80>
    1e22:	add	r3, pc, #4	; (adr r3, 1e28 <usb_midi_read+0xf8>)
    1e24:	ldr.w	pc, [r3, r0, lsl #2]
    1e28:	.word	0x00001fdf
    1e2c:	.word	0x00001fc3
    1e30:	.word	0x00001fb1
    1e34:	.word	0x00001db1
    1e38:	.word	0x00001db1
    1e3c:	.word	0x00001fa3
    1e40:	.word	0x00001db1
    1e44:	.word	0x00002083
    1e48:	.word	0x00001db1
    1e4c:	.word	0x0000204d
    1e50:	.word	0x00002067
    1e54:	.word	0x00001f8b
    1e58:	.word	0x00001db1
    1e5c:	.word	0x00001f73
    1e60:	.word	0x00001f57
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    1e64:	ldr	r3, [pc, #412]	; (2004 <usb_midi_read+0x2d4>)
    1e66:	ldrb	r3, [r3, #0]
    1e68:	cmp	r3, #0
    1e6a:	beq.n	1db0 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    1e6c:	movs	r0, #5
    1e6e:	bl	21f8 <usb_rx>
    1e72:	mov	r3, r0
    1e74:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    1e76:	cmp	r0, #0
    1e78:	beq.n	1db0 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    1e7a:	ldrh	r5, [r0, #0]
    1e7c:	cmp	r5, #0
    1e7e:	bne.w	1d42 <usb_midi_read+0x12>
			usb_free(rx_packet);
    1e82:	bl	21ac <usb_free>
			rx_packet = NULL;
    1e86:	str	r5, [r6, #0]
			return 0;
    1e88:	mov	r0, r5
    1e8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    1e8e:	bl	1c20 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    1e92:	ubfx	r0, r4, #16, #8
    1e96:	bl	1c20 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    1e9a:	cmp	r6, #7
    1e9c:	bne.n	1ea4 <usb_midi_read+0x174>
    1e9e:	lsrs	r0, r4, #24
    1ea0:	bl	1c20 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    1ea4:	ldr	r3, [pc, #332]	; (1ff4 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1ea6:	ldr	r2, [pc, #352]	; (2008 <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    1ea8:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    1eaa:	ldr	r0, [pc, #352]	; (200c <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    1eac:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1eae:	ldr	r5, [pc, #352]	; (2010 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1eb0:	ldr	r2, [pc, #328]	; (1ffc <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    1eb2:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1eb4:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1eb6:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1eb8:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    1eba:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    1ebc:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    1ebe:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    1ec0:	cbz	r4, 1f06 <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    1ec2:	movs	r2, #1
    1ec4:	ldr	r0, [pc, #332]	; (2014 <usb_midi_read+0x2e4>)
    1ec6:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    1ec8:	movs	r0, #1
    1eca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    1ece:	cmp	r3, #8
    1ed0:	bne.w	1db0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    1ed4:	ldr	r3, [pc, #320]	; (2018 <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1ed6:	ldr	r2, [pc, #292]	; (1ffc <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    1ed8:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    1eda:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1edc:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1ee0:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1ee2:	uxtb	r5, r5
    1ee4:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    1ee6:	cbz	r3, 1f44 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    1ee8:	mov	r0, r5
    1eea:	mov	r2, r4
    1eec:	mov	r1, r6
    1eee:	blx	r3
    1ef0:	b.n	1f44 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    1ef2:	cmp	r6, #11
    1ef4:	bne.n	1f1a <usb_midi_read+0x1ea>
    1ef6:	cmp	r3, #11
    1ef8:	bne.w	1db0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    1efc:	ldr	r3, [pc, #284]	; (201c <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1efe:	ldr	r2, [pc, #252]	; (1ffc <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    1f00:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    1f02:	movs	r1, #176	; 0xb0
    1f04:	b.n	1edc <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    1f06:	ldr	r3, [pc, #280]	; (2020 <usb_midi_read+0x2f0>)
    1f08:	ldr	r3, [r3, #0]
    1f0a:	cmp	r3, #0
    1f0c:	beq.w	2106 <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    1f10:	ldr	r0, [pc, #256]	; (2014 <usb_midi_read+0x2e4>)
    1f12:	blx	r3
		}
		return 1;
    1f14:	movs	r0, #1
    1f16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    1f1a:	cmp	r6, #12
    1f1c:	bne.w	2120 <usb_midi_read+0x3f0>
    1f20:	cmp	r3, #12
    1f22:	bne.w	1db0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1f26:	ldr	r3, [pc, #252]	; (2024 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1f28:	ldr	r2, [pc, #208]	; (1ffc <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    1f2a:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    1f2c:	movs	r1, #192	; 0xc0
    1f2e:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    1f30:	uxtb	r5, r5
    1f32:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    1f36:	cmp	r3, #0
    1f38:	beq.w	20cc <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    1f3c:	mov	r0, r5
    1f3e:	mov	r1, r6
    1f40:	lsrs	r4, r4, #24
    1f42:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1f44:	ldr	r1, [pc, #224]	; (2028 <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    1f46:	ldr	r2, [pc, #196]	; (200c <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    1f48:	ldr	r3, [pc, #196]	; (2010 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    1f4a:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    1f4c:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    1f4e:	strb	r4, [r3, #0]
		return 1;
    1f50:	movs	r0, #1
    1f52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    1f56:	ldr	r3, [pc, #212]	; (202c <usb_midi_read+0x2fc>)
    1f58:	ldr	r3, [r3, #0]
    1f5a:	cmp	r3, #0
    1f5c:	beq.w	210c <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    1f60:	blx	r3
    1f62:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    1f66:	ldr	r3, [pc, #148]	; (1ffc <usb_midi_read+0x2cc>)
    1f68:	uxtb	r5, r5
    1f6a:	lsrs	r4, r4, #24
    1f6c:	strb.w	r8, [r3]
		goto return_message;
    1f70:	b.n	1f44 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    1f72:	ldr	r3, [pc, #188]	; (2030 <usb_midi_read+0x300>)
    1f74:	ldr	r3, [r3, #0]
    1f76:	cmp	r3, #0
    1f78:	bne.n	1f60 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    1f7a:	ldr	r3, [pc, #184]	; (2034 <usb_midi_read+0x304>)
    1f7c:	ldr	r3, [r3, #0]
    1f7e:	cbz	r3, 1faa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    1f80:	movs	r0, #254	; 0xfe
    1f82:	blx	r3
    1f84:	ubfx	r6, r4, #16, #8
    1f88:	b.n	1f66 <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    1f8a:	ldr	r3, [pc, #172]	; (2038 <usb_midi_read+0x308>)
    1f8c:	ldr	r3, [r3, #0]
    1f8e:	cmp	r3, #0
    1f90:	bne.n	1f60 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    1f92:	ldr	r3, [pc, #160]	; (2034 <usb_midi_read+0x304>)
    1f94:	ldr	r3, [r3, #0]
    1f96:	cbz	r3, 1faa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    1f98:	movs	r0, #252	; 0xfc
    1f9a:	blx	r3
    1f9c:	ubfx	r6, r4, #16, #8
    1fa0:	b.n	1f66 <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    1fa2:	ldr	r3, [pc, #152]	; (203c <usb_midi_read+0x30c>)
    1fa4:	ldr	r3, [r3, #0]
    1fa6:	cmp	r3, #0
    1fa8:	bne.n	1f60 <usb_midi_read+0x230>
    1faa:	ubfx	r6, r4, #16, #8
    1fae:	b.n	1f66 <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1fb0:	ldr	r3, [pc, #140]	; (2040 <usb_midi_read+0x310>)
    1fb2:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    1fb4:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    1fb8:	cmp	r3, #0
    1fba:	beq.n	1f66 <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    1fbc:	mov	r0, r6
    1fbe:	blx	r3
    1fc0:	b.n	1f66 <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    1fc2:	ldr	r3, [pc, #128]	; (2044 <usb_midi_read+0x314>)
    1fc4:	ldr	r2, [r3, #0]
    1fc6:	cmp	r2, #0
    1fc8:	beq.n	1faa <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    1fca:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    1fcc:	lsrs	r3, r4, #17
    1fce:	and.w	r0, r6, #127	; 0x7f
    1fd2:	and.w	r3, r3, #16256	; 0x3f80
    1fd6:	orrs	r0, r3
    1fd8:	uxtb	r6, r6
    1fda:	blx	r2
    1fdc:	b.n	1f66 <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1fde:	ldr	r3, [pc, #104]	; (2048 <usb_midi_read+0x318>)
    1fe0:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    1fe2:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    1fe6:	cmp	r3, #0
    1fe8:	bne.n	1fbc <usb_midi_read+0x28c>
    1fea:	b.n	1f66 <usb_midi_read+0x236>
    1fec:	.word	0x1fff161c
    1ff0:	.word	0x1fff1a92
    1ff4:	.word	0x1fff1a8e
    1ff8:	.word	0x1fff15f8
    1ffc:	.word	0x1fff1a8c
    2000:	.word	0x1fff162c
    2004:	.word	0x1fff1720
    2008:	.word	0x1fff15f4
    200c:	.word	0x1fff1a90
    2010:	.word	0x1fff1a91
    2014:	.word	0x1fff1a94
    2018:	.word	0x1fff1624
    201c:	.word	0x1fff1628
    2020:	.word	0x1fff160c
    2024:	.word	0x1fff15e8
    2028:	.word	0x1fff1a93
    202c:	.word	0x1fff15d4
    2030:	.word	0x1fff15d8
    2034:	.word	0x1fff15dc
    2038:	.word	0x1fff1618
    203c:	.word	0x1fff1608
    2040:	.word	0x1fff1620
    2044:	.word	0x1fff15f0
    2048:	.word	0x1fff1604
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    204c:	ldr	r3, [pc, #252]	; (214c <usb_midi_read+0x41c>)
    204e:	ldr	r3, [r3, #0]
    2050:	cmp	r3, #0
    2052:	bne.n	1f60 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    2054:	ldr	r3, [pc, #248]	; (2150 <usb_midi_read+0x420>)
    2056:	ldr	r3, [r3, #0]
    2058:	cmp	r3, #0
    205a:	beq.n	1faa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    205c:	movs	r0, #250	; 0xfa
    205e:	blx	r3
    2060:	ubfx	r6, r4, #16, #8
    2064:	b.n	1f66 <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    2066:	ldr	r3, [pc, #236]	; (2154 <usb_midi_read+0x424>)
    2068:	ldr	r3, [r3, #0]
    206a:	cmp	r3, #0
    206c:	bne.w	1f60 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    2070:	ldr	r3, [pc, #220]	; (2150 <usb_midi_read+0x420>)
    2072:	ldr	r3, [r3, #0]
    2074:	cmp	r3, #0
    2076:	beq.n	1faa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    2078:	movs	r0, #251	; 0xfb
    207a:	blx	r3
    207c:	ubfx	r6, r4, #16, #8
    2080:	b.n	1f66 <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    2082:	ldr	r3, [pc, #212]	; (2158 <usb_midi_read+0x428>)
    2084:	ldr	r3, [r3, #0]
    2086:	cmp	r3, #0
    2088:	bne.w	1f60 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    208c:	ldr	r3, [pc, #192]	; (2150 <usb_midi_read+0x420>)
    208e:	ldr	r3, [r3, #0]
    2090:	cmp	r3, #0
    2092:	beq.n	1faa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    2094:	movs	r0, #248	; 0xf8
    2096:	blx	r3
    2098:	ubfx	r6, r4, #16, #8
    209c:	b.n	1f66 <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    209e:	cmp	r3, #14
    20a0:	bne.w	1db0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    20a4:	ldr	r2, [pc, #180]	; (215c <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    20a6:	ldr	r3, [pc, #184]	; (2160 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    20a8:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    20aa:	movs	r1, #224	; 0xe0
    20ac:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    20ae:	cmp	r2, #0
    20b0:	beq.n	2142 <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    20b2:	lsrs	r6, r4, #16
    20b4:	lsrs	r1, r4, #17
    20b6:	and.w	r3, r6, #127	; 0x7f
    20ba:	and.w	r1, r1, #16256	; 0x3f80
    20be:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    20c0:	uxtb	r5, r5
    20c2:	sub.w	r1, r1, #8192	; 0x2000
    20c6:	mov	r0, r5
    20c8:	blx	r2
    20ca:	uxtb	r6, r6
    20cc:	lsrs	r4, r4, #24
    20ce:	b.n	1f44 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    20d0:	bl	1c20 <sysex_byte>
		sysex_byte(n >> 16);
    20d4:	ubfx	r0, r4, #16, #8
    20d8:	bl	1c20 <sysex_byte>
		sysex_byte(n >> 24);
    20dc:	lsrs	r0, r4, #24
    20de:	bl	1c20 <sysex_byte>
		return 0;
    20e2:	movs	r0, #0
    20e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    20e8:	ldr	r3, [pc, #120]	; (2164 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    20ea:	ldr	r2, [pc, #116]	; (2160 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    20ec:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    20ee:	movs	r1, #128	; 0x80
    20f0:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    20f2:	uxtb	r5, r5
    20f4:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    20f8:	cbz	r3, 211c <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    20fa:	mov	r1, r6
    20fc:	mov	r0, r5
    20fe:	mov	r2, r7
    2100:	blx	r3
    2102:	mov	r4, r7
    2104:	b.n	1f44 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    2106:	movs	r0, #1
    2108:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    210c:	ldr	r3, [pc, #64]	; (2150 <usb_midi_read+0x420>)
    210e:	ldr	r3, [r3, #0]
    2110:	cmp	r3, #0
    2112:	beq.w	1faa <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    2116:	movs	r0, #255	; 0xff
    2118:	blx	r3
    211a:	b.n	1faa <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    211c:	mov	r4, r3
    211e:	b.n	1f44 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    2120:	cmp	r6, #13
    2122:	bne.n	209e <usb_midi_read+0x36e>
    2124:	cmp	r3, #13
    2126:	bne.w	1db0 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    212a:	ldr	r3, [pc, #60]	; (2168 <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    212c:	ldr	r2, [pc, #48]	; (2160 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    212e:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    2130:	movs	r1, #208	; 0xd0
    2132:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    2134:	uxtb	r5, r5
    2136:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    213a:	cmp	r3, #0
    213c:	bne.w	1f3c <usb_midi_read+0x20c>
    2140:	b.n	20cc <usb_midi_read+0x39c>
    2142:	ubfx	r6, r4, #16, #8
    2146:	uxtb	r5, r5
    2148:	lsrs	r4, r4, #24
    214a:	b.n	1f44 <usb_midi_read+0x214>
    214c:	.word	0x1fff1600
    2150:	.word	0x1fff15dc
    2154:	.word	0x1fff15e0
    2158:	.word	0x1fff15d0
    215c:	.word	0x1fff15ec
    2160:	.word	0x1fff1a8c
    2164:	.word	0x1fff1624
    2168:	.word	0x1fff15fc

0000216c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    216c:	cpsid	i
	avail = usb_buffer_available;
    216e:	ldr	r0, [pc, #52]	; (21a4 <usb_malloc+0x38>)
    2170:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    2172:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    2176:	cmp	r3, #29
    2178:	bgt.n	219c <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    217a:	mov.w	r1, #2147483648	; 0x80000000
    217e:	lsrs	r1, r3
    2180:	bic.w	r2, r2, r1
    2184:	str	r2, [r0, #0]
	__enable_irq();
    2186:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    2188:	ldr	r0, [pc, #28]	; (21a8 <usb_malloc+0x3c>)
    218a:	add.w	r3, r3, r3, lsl #3
    218e:	lsls	r3, r3, #3
    2190:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    2192:	movs	r1, #0
    2194:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    2196:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    2198:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    219a:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    219c:	cpsie	i
		return NULL;
    219e:	movs	r0, #0
    21a0:	bx	lr
    21a2:	nop
    21a4:	.word	0x1fff0c44
    21a8:	.word	0x1fff03d0

000021ac <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    21ac:	ldr	r3, [pc, #52]	; (21e4 <usb_free+0x38>)
    21ae:	ldr	r2, [pc, #56]	; (21e8 <usb_free+0x3c>)
    21b0:	subs	r3, r0, r3
    21b2:	umull	r2, r3, r2, r3
    21b6:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    21b8:	cmp	r3, #29
    21ba:	bhi.n	21d6 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    21bc:	ldr	r2, [pc, #44]	; (21ec <usb_free+0x40>)
    21be:	ldrb	r2, [r2, #0]
    21c0:	cbnz	r2, 21d8 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    21c2:	cpsid	i
	usb_buffer_available |= mask;
    21c4:	ldr	r0, [pc, #40]	; (21f0 <usb_free+0x44>)
    21c6:	mov.w	r1, #2147483648	; 0x80000000
    21ca:	ldr	r2, [r0, #0]
    21cc:	lsr.w	r3, r1, r3
    21d0:	orrs	r2, r3
    21d2:	str	r2, [r0, #0]
	__enable_irq();
    21d4:	cpsie	i
    21d6:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    21d8:	ldr	r2, [pc, #24]	; (21f4 <usb_free+0x48>)
    21da:	ldrb	r2, [r2, #0]
    21dc:	cmp	r2, #0
    21de:	beq.n	21c2 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    21e0:	b.w	2260 <usb_rx_memory>
    21e4:	.word	0x1fff03d0
    21e8:	.word	0x38e38e39
    21ec:	.word	0x1fff1715
    21f0:	.word	0x1fff0c44
    21f4:	.word	0x1fff1720

000021f8 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    21f8:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    21fa:	cmp	r3, #4
    21fc:	bhi.n	2228 <usb_rx+0x30>
	__disable_irq();
    21fe:	cpsid	i
	ret = rx_first[endpoint];
    2200:	ldr	r1, [pc, #40]	; (222c <usb_rx+0x34>)
    2202:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    2206:	cbz	r0, 2224 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2208:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    220a:	ldr	r4, [pc, #36]	; (2230 <usb_rx+0x38>)
    220c:	ldrh	r5, [r0, #0]
    220e:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    2212:	ldr	r6, [r0, #4]
    2214:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2218:	subs	r2, r2, r5
    221a:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    221e:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2220:	pop	{r4, r5, r6}
    2222:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2224:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2226:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2228:	movs	r0, #0
    222a:	bx	lr
    222c:	.word	0x1fff168c
    2230:	.word	0x1fff1bb8

00002234 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2234:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2236:	cmp	r0, #4
    2238:	bhi.n	2252 <usb_tx_packet_count+0x1e>
	__disable_irq();
    223a:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    223c:	ldr	r3, [pc, #28]	; (225c <usb_tx_packet_count+0x28>)
    223e:	ldr.w	r3, [r3, r0, lsl #2]
    2242:	cbz	r3, 2256 <usb_tx_packet_count+0x22>
    2244:	movs	r0, #0
    2246:	ldr	r3, [r3, #4]
    2248:	adds	r0, #1
    224a:	cmp	r3, #0
    224c:	bne.n	2246 <usb_tx_packet_count+0x12>
	__enable_irq();
    224e:	cpsie	i
	return count;
    2250:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2252:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2254:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2256:	mov	r0, r3
    2258:	b.n	224e <usb_tx_packet_count+0x1a>
    225a:	nop
    225c:	.word	0x1fff16e4

00002260 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2260:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2262:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2264:	ldr	r2, [pc, #204]	; (2334 <usb_rx_memory+0xd4>)
    2266:	ldrb	r3, [r2, #0]
    2268:	lsls	r3, r3, #28
    226a:	bpl.n	227a <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    226c:	ldr	r3, [pc, #200]	; (2338 <usb_rx_memory+0xd8>)
    226e:	ldr	r1, [r3, #32]
    2270:	cmp	r1, #0
    2272:	beq.n	22fc <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2274:	ldr	r1, [r3, #40]	; 0x28
    2276:	cmp	r1, #0
    2278:	beq.n	2318 <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    227a:	ldrb	r3, [r2, #1]
    227c:	lsls	r5, r3, #28
    227e:	bpl.n	228e <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2280:	ldr	r3, [pc, #180]	; (2338 <usb_rx_memory+0xd8>)
    2282:	ldr	r1, [r3, #64]	; 0x40
    2284:	cmp	r1, #0
    2286:	beq.n	2324 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2288:	ldr	r1, [r3, #72]	; 0x48
    228a:	cmp	r1, #0
    228c:	beq.n	231c <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    228e:	ldrb	r3, [r2, #2]
    2290:	lsls	r4, r3, #28
    2292:	bpl.n	22a2 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2294:	ldr	r3, [pc, #160]	; (2338 <usb_rx_memory+0xd8>)
    2296:	ldr	r1, [r3, #96]	; 0x60
    2298:	cmp	r1, #0
    229a:	beq.n	2328 <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    229c:	ldr	r1, [r3, #104]	; 0x68
    229e:	cmp	r1, #0
    22a0:	beq.n	2320 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    22a2:	ldrb	r3, [r2, #3]
    22a4:	lsls	r1, r3, #28
    22a6:	bpl.n	22b8 <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    22a8:	ldr	r3, [pc, #140]	; (2338 <usb_rx_memory+0xd8>)
    22aa:	ldr.w	r1, [r3, #128]	; 0x80
    22ae:	cmp	r1, #0
    22b0:	beq.n	2330 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    22b2:	ldr.w	r1, [r3, #136]	; 0x88
    22b6:	cbz	r1, 22de <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    22b8:	ldrb	r3, [r2, #4]
    22ba:	lsls	r3, r3, #28
    22bc:	bpl.n	22d0 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    22be:	ldr	r3, [pc, #120]	; (2338 <usb_rx_memory+0xd8>)
    22c0:	ldr.w	r2, [r3, #160]	; 0xa0
    22c4:	cmp	r2, #0
    22c6:	beq.n	232c <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    22c8:	ldr.w	r2, [r3, #168]	; 0xa8
    22cc:	movs	r4, #21
    22ce:	cbz	r2, 22e0 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    22d0:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    22d2:	ldr	r3, [pc, #104]	; (233c <usb_rx_memory+0xdc>)
    22d4:	movs	r2, #0
    22d6:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    22d8:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    22da:	b.w	21ac <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    22de:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    22e0:	ldr	r1, [pc, #88]	; (233c <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    22e2:	ldr	r5, [pc, #92]	; (2340 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    22e4:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    22e6:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    22ea:	add.w	r3, r3, r4, lsl #3
    22ee:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    22f0:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    22f2:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    22f4:	strb	r2, [r1, #0]
				__enable_irq();
    22f6:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    22f8:	pop	{r4, r5}
    22fa:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    22fc:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    22fe:	ldr	r4, [pc, #60]	; (233c <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2300:	ldr	r5, [pc, #64]	; (2344 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    2302:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2304:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2308:	add.w	r3, r3, r2, lsl #3
    230c:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    230e:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2310:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2312:	strb	r2, [r4, #0]
				__enable_irq();
    2314:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2316:	b.n	22f8 <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2318:	movs	r4, #5
    231a:	b.n	22e0 <usb_rx_memory+0x80>
    231c:	movs	r4, #9
    231e:	b.n	22e0 <usb_rx_memory+0x80>
    2320:	movs	r4, #13
    2322:	b.n	22e0 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2324:	movs	r2, #8
    2326:	b.n	22fe <usb_rx_memory+0x9e>
    2328:	movs	r2, #12
    232a:	b.n	22fe <usb_rx_memory+0x9e>
    232c:	movs	r2, #20
    232e:	b.n	22fe <usb_rx_memory+0x9e>
    2330:	movs	r2, #16
    2332:	b.n	22fe <usb_rx_memory+0x9e>
    2334:	.word	0x00004768
    2338:	.word	0x1fff0000
    233c:	.word	0x1fff1715
    2340:	.word	0x004000c8
    2344:	.word	0x00400088

00002348 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2348:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    234a:	cmp	r3, #4
    234c:	bhi.n	238a <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    234e:	ldr	r2, [pc, #108]	; (23bc <usb_tx+0x74>)
    2350:	lsls	r0, r0, #5
    2352:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2356:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2358:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    235a:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    235c:	ldr	r4, [pc, #96]	; (23c0 <usb_tx+0x78>)
    235e:	ldrb	r2, [r4, r3]
    2360:	cmp	r2, #3
    2362:	bhi.n	239c <usb_tx+0x54>
    2364:	tbb	[pc, r2]
    2368:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    236c:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    236e:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2370:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2372:	tst.w	r0, #8
    2376:	ite	ne
    2378:	movne	r3, #200	; 0xc8
    237a:	moveq	r3, #136	; 0x88
    237c:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2380:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2382:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2384:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2386:	cpsie	i
}
    2388:	pop	{r4, r5}
    238a:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    238c:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    238e:	movs	r2, #2
		break;
    2390:	b.n	236e <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    2392:	movs	r2, #5
    2394:	b.n	236e <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    2396:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2398:	movs	r2, #4
		break;
    239a:	b.n	236e <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    239c:	ldr	r2, [pc, #36]	; (23c4 <usb_tx+0x7c>)
    239e:	ldr.w	r0, [r2, r3, lsl #2]
    23a2:	cbz	r0, 23b4 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    23a4:	ldr	r2, [pc, #32]	; (23c8 <usb_tx+0x80>)
    23a6:	ldr.w	r0, [r2, r3, lsl #2]
    23aa:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    23ac:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    23b0:	cpsie	i
		return;
    23b2:	b.n	2388 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    23b4:	str.w	r1, [r2, r3, lsl #2]
    23b8:	ldr	r2, [pc, #12]	; (23c8 <usb_tx+0x80>)
    23ba:	b.n	23ac <usb_tx+0x64>
    23bc:	.word	0x1fff0000
    23c0:	.word	0x1fff1724
    23c4:	.word	0x1fff16e4
    23c8:	.word	0x1fff16f8

000023cc <usb_isr>:
}



void usb_isr(void)
{
    23cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    23d0:	ldr.w	fp, [pc, #776]	; 26dc <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    23d4:	ldr.w	sl, [pc, #776]	; 26e0 <usb_isr+0x314>
}



void usb_isr(void)
{
    23d8:	sub	sp, #28
    23da:	b.n	2466 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    23dc:	ldr	r7, [pc, #680]	; (2688 <usb_isr+0x2bc>)
    23de:	mov.w	r8, r3, lsr #2
    23e2:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    23e6:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    23e8:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    23ec:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    23f0:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    23f2:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    23f6:	and.w	r4, r3, #255	; 0xff
    23fa:	cmp	r3, #0
    23fc:	bne.w	2600 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2400:	ldr.w	r3, [r7, r8, lsl #3]
    2404:	lsrs	r3, r3, #16
    2406:	uxth	r1, r3
    2408:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    240c:	cmp	r3, #0
    240e:	beq.w	25ee <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    2412:	ldr	r3, [pc, #632]	; (268c <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2414:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2418:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    241c:	ldr.w	r2, [r3, r6, lsl #2]
    2420:	cmp	r2, #0
    2422:	beq.w	2890 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2426:	ldr	r5, [pc, #616]	; (2690 <usb_isr+0x2c4>)
    2428:	ldr.w	r3, [r5, r6, lsl #2]
    242c:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    242e:	ldr	r4, [pc, #612]	; (2694 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2430:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2434:	ldrh.w	r3, [r4, r6, lsl #1]
    2438:	add	r1, r3
    243a:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    243e:	bl	216c <usb_malloc>
					if (packet) {
    2442:	cmp	r0, #0
    2444:	beq.w	2882 <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2448:	ldr	r2, [pc, #588]	; (2698 <usb_isr+0x2cc>)
    244a:	ldr	r3, [pc, #592]	; (269c <usb_isr+0x2d0>)
    244c:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2450:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2454:	it	ne
    2456:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2458:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    245c:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2460:	movs	r3, #8
    2462:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2466:	ldrb.w	r4, [fp]
    246a:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    246c:	lsls	r0, r4, #29
    246e:	bpl.n	24aa <usb_isr+0xde>
		if (usb_configuration) {
    2470:	ldr	r3, [pc, #556]	; (26a0 <usb_isr+0x2d4>)
    2472:	ldrb	r3, [r3, #0]
    2474:	cbz	r3, 24a4 <usb_isr+0xd8>
			t = usb_reboot_timer;
    2476:	ldr	r1, [pc, #556]	; (26a4 <usb_isr+0x2d8>)
    2478:	ldrb	r2, [r1, #0]
			if (t) {
    247a:	and.w	r3, r2, #255	; 0xff
    247e:	cbz	r2, 248a <usb_isr+0xbe>
				usb_reboot_timer = --t;
    2480:	subs	r3, #1
    2482:	uxtb	r3, r3
    2484:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2486:	cbnz	r3, 248a <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2488:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    248a:	ldr	r1, [pc, #540]	; (26a8 <usb_isr+0x2dc>)
    248c:	ldrb	r2, [r1, #0]
			if (t) {
    248e:	and.w	r3, r2, #255	; 0xff
    2492:	cbz	r2, 24a0 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    2494:	subs	r3, #1
    2496:	uxtb	r3, r3
    2498:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    249a:	cmp	r3, #0
    249c:	beq.w	282e <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    24a0:	bl	1d04 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    24a4:	movs	r3, #4
    24a6:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    24aa:	and.w	r3, r4, #8
    24ae:	and.w	r2, r3, #255	; 0xff
    24b2:	cmp	r3, #0
    24b4:	beq.w	2648 <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    24b8:	ldrb.w	r3, [sl]
    24bc:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    24be:	lsrs	r6, r3, #4
    24c0:	bne.n	23dc <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    24c2:	lsrs	r4, r3, #2
    24c4:	ldr.w	r9, [pc, #448]	; 2688 <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    24c8:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    24cc:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    24d0:	ubfx	r2, r2, #2, #4
    24d4:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    24d6:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    24d8:	cmp	r2, #12
    24da:	bhi.w	25e6 <usb_isr+0x21a>
    24de:	tbb	[pc, r2]
    24e2:	.short	0x7878
    24e4:	.word	0x82828282
    24e8:	.word	0x82438282
    24ec:	.short	0x8282
    24ee:	.byte	0x07
    24ef:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    24f0:	ldr	r0, [r1, #0]
    24f2:	ldr	r5, [pc, #440]	; (26ac <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    24f4:	ldr	r3, [pc, #416]	; (2698 <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    24f6:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    24f8:	ldr	r7, [pc, #436]	; (26b0 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    24fa:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    24fe:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2500:	ldr	r6, [pc, #432]	; (26b4 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2502:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2504:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2508:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    250a:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    250c:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    250e:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2512:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2514:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2518:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    251c:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    251e:	bhi.w	26e4 <usb_isr+0x318>
    2522:	cmp.w	r1, #1664	; 0x680
    2526:	bcs.w	2b50 <usb_isr+0x784>
    252a:	cmp.w	r1, #258	; 0x102
    252e:	beq.w	28fe <usb_isr+0x532>
    2532:	bhi.w	28c8 <usb_isr+0x4fc>
    2536:	cmp	r1, #128	; 0x80
    2538:	beq.w	2b84 <usb_isr+0x7b8>
    253c:	cmp	r1, #130	; 0x82
    253e:	bne.w	290a <usb_isr+0x53e>
    2542:	ldrh	r1, [r5, #4]
    2544:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2548:	cmp	r1, #5
    254a:	bhi.w	290a <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    254e:	ldr	r3, [pc, #360]	; (26b8 <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2550:	ldr	r4, [pc, #360]	; (26bc <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2552:	lsls	r1, r1, #2
    2554:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2556:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2558:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    255a:	ldrb	r2, [r3, #0]
    255c:	lsls	r3, r2, #30
    255e:	bpl.w	2c94 <usb_isr+0x8c8>
    2562:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    2564:	movs	r0, #2
    2566:	b.n	2992 <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2568:	ldr	r7, [pc, #324]	; (26b0 <usb_isr+0x2e4>)
    256a:	ldr	r2, [r7, #0]
		if (data) {
    256c:	cbz	r2, 25bc <usb_isr+0x1f0>
			size = ep0_tx_len;
    256e:	ldr	r3, [pc, #336]	; (26c0 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2570:	ldr	r6, [pc, #320]	; (26b4 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2572:	ldr	r1, [pc, #336]	; (26c4 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2574:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2576:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2578:	ldrb	r5, [r1, #0]
    257a:	cmp	r0, #64	; 0x40
    257c:	mov	lr, r0
    257e:	orr.w	r8, r5, #2
    2582:	it	cs
    2584:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2588:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    258a:	eor.w	r4, r4, #1
    258e:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2590:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2594:	ite	eq
    2596:	moveq	r4, #136	; 0x88
    2598:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    259a:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    259e:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    25a0:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    25a4:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    25a8:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    25aa:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    25ac:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    25b0:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    25b2:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    25b4:	cmp	r0, #0
    25b6:	beq.w	2726 <usb_isr+0x35a>
    25ba:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    25bc:	ldr	r3, [pc, #236]	; (26ac <usb_isr+0x2e0>)
    25be:	ldrh	r2, [r3, #0]
    25c0:	cmp.w	r2, #1280	; 0x500
    25c4:	bne.n	25e6 <usb_isr+0x21a>
			setup.bRequest = 0;
    25c6:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    25c8:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    25ca:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    25cc:	ldr	r3, [pc, #248]	; (26c8 <usb_isr+0x2fc>)
    25ce:	strb	r2, [r3, #0]
    25d0:	b.n	25e6 <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    25d2:	ldr	r2, [pc, #216]	; (26ac <usb_isr+0x2e0>)
    25d4:	ldrh	r0, [r2, #0]
    25d6:	movw	r2, #8225	; 0x2021
    25da:	cmp	r0, r2
    25dc:	beq.w	2730 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    25e0:	ldr	r2, [pc, #180]	; (2698 <usb_isr+0x2cc>)
    25e2:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    25e6:	ldr	r2, [pc, #228]	; (26cc <usb_isr+0x300>)
    25e8:	movs	r3, #1
    25ea:	strb	r3, [r2, #0]
    25ec:	b.n	2460 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    25ee:	ldr	r2, [pc, #168]	; (2698 <usb_isr+0x2cc>)
    25f0:	ldr	r3, [pc, #168]	; (269c <usb_isr+0x2d0>)
    25f2:	tst.w	r9, #8
    25f6:	it	ne
    25f8:	movne	r3, r2
    25fa:	str.w	r3, [r7, r8, lsl #3]
    25fe:	b.n	2460 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2600:	bl	21ac <usb_free>
				packet = tx_first[endpoint];
    2604:	ldr	r2, [pc, #200]	; (26d0 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2606:	ldr	r1, [pc, #204]	; (26d4 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2608:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    260c:	cmp	r3, #0
    260e:	beq.w	2898 <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2612:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2614:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2616:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    261a:	add.w	r2, r3, #8
    261e:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    2622:	cmp	r4, #3
    2624:	bhi.n	2632 <usb_isr+0x266>
    2626:	tbb	[pc, r4]
    262a:	.short	0x022c
    262c:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    262e:	movs	r2, #2
    2630:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    2632:	ldrh	r2, [r3, #0]
    2634:	tst.w	r9, #8
    2638:	ite	eq
    263a:	moveq	r3, #136	; 0x88
    263c:	movne	r3, #200	; 0xc8
    263e:	orr.w	r3, r3, r2, lsl #16
    2642:	str.w	r3, [r7, r8, lsl #3]
    2646:	b.n	2460 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2648:	lsls	r0, r4, #31
    264a:	bmi.w	2834 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    264e:	lsls	r1, r4, #24
    2650:	bmi.w	28b4 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2654:	lsls	r2, r4, #30
    2656:	bpl.n	2666 <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    2658:	ldr	r2, [pc, #124]	; (26d8 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    265a:	ldr	r1, [pc, #128]	; (26dc <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    265c:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    265e:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2660:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    2662:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2664:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2666:	lsls	r3, r4, #27
    2668:	bpl.n	2670 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    266a:	ldr	r3, [pc, #112]	; (26dc <usb_isr+0x310>)
    266c:	movs	r2, #16
    266e:	strb	r2, [r3, #0]
	}

}
    2670:	add	sp, #28
    2672:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2676:	movs	r2, #4
    2678:	strb	r2, [r1, r6]
						break;
    267a:	b.n	2632 <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    267c:	movs	r2, #5
    267e:	strb	r2, [r1, r6]
						break;
    2680:	b.n	2632 <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    2682:	movs	r2, #3
    2684:	strb	r2, [r1, r6]
						break;
    2686:	b.n	2632 <usb_isr+0x266>
    2688:	.word	0x1fff0000
    268c:	.word	0x1fff168c
    2690:	.word	0x1fff1634
    2694:	.word	0x1fff1bb8
    2698:	.word	0x004000c8
    269c:	.word	0x00400088
    26a0:	.word	0x1fff1720
    26a4:	.word	0x1fff16a1
    26a8:	.word	0x1fff15b4
    26ac:	.word	0x1fff170c
    26b0:	.word	0x1fff1630
    26b4:	.word	0x1fff16a0
    26b8:	.word	0x400720c0
    26bc:	.word	0x1fff1718
    26c0:	.word	0x1fff1648
    26c4:	.word	0x1fff1714
    26c8:	.word	0x40072098
    26cc:	.word	0x40072094
    26d0:	.word	0x1fff16e4
    26d4:	.word	0x1fff1724
    26d8:	.word	0x40072088
    26dc:	.word	0x40072080
    26e0:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    26e4:	movw	r4, #8225	; 0x2021
    26e8:	cmp	r1, r4
    26ea:	beq.w	2826 <usb_isr+0x45a>
    26ee:	bhi.n	2784 <usb_isr+0x3b8>
    26f0:	cmp.w	r1, #2176	; 0x880
    26f4:	beq.w	298a <usb_isr+0x5be>
    26f8:	cmp.w	r1, #2304	; 0x900
    26fc:	bne.w	290a <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2700:	ldr	r2, [pc, #712]	; (29cc <usb_isr+0x600>)
    2702:	ldr	r4, [pc, #716]	; (29d0 <usb_isr+0x604>)
    2704:	ldrb	r1, [r5, #2]
    2706:	strb	r1, [r2, #0]
    2708:	add.w	r5, r4, #160	; 0xa0
    270c:	b.n	2716 <usb_isr+0x34a>
    270e:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2710:	cmp	r5, r4
    2712:	beq.w	2a28 <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    2716:	ldr	r3, [r4, #32]
    2718:	lsls	r1, r3, #24
    271a:	bpl.n	270e <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    271c:	ldr	r0, [r4, #36]	; 0x24
    271e:	subs	r0, #8
    2720:	bl	21ac <usb_free>
    2724:	b.n	270e <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2726:	cmp.w	lr, #64	; 0x40
    272a:	it	ne
    272c:	movne	r2, #0
    272e:	b.n	25ba <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2730:	ldr	r2, [pc, #672]	; (29d4 <usb_isr+0x608>)
    2732:	ldrb	r5, [r1, #0]
    2734:	ldrb	r0, [r1, #1]
    2736:	strb	r5, [r2, #0]
    2738:	strb	r0, [r2, #1]
    273a:	ldrb	r5, [r1, #2]
    273c:	ldrb	r0, [r1, #3]
    273e:	strb	r5, [r2, #2]
    2740:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2742:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2744:	ldrb	r5, [r1, #4]
    2746:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2748:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    274a:	ldrb	r5, [r1, #5]
    274c:	ldrb	r1, [r1, #6]
    274e:	strb	r5, [r2, #5]
    2750:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2752:	beq.w	2982 <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2756:	ldr	r1, [pc, #640]	; (29d8 <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2758:	ldr	r6, [pc, #640]	; (29dc <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    275a:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    275c:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    275e:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2762:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2764:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2768:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    276a:	ite	eq
    276c:	moveq	r1, #136	; 0x88
    276e:	movne	r1, #200	; 0xc8
    2770:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2774:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2778:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    277c:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    277e:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2780:	str	r1, [r2, #4]
    2782:	b.n	25e0 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2784:	movw	r4, #8737	; 0x2221
    2788:	cmp	r1, r4
    278a:	bne.w	2b9e <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    278e:	ldr.w	ip, [pc, #656]	; 2a20 <usb_isr+0x654>
    2792:	ldr	r3, [pc, #588]	; (29e0 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    2794:	ldr	r1, [pc, #588]	; (29e4 <usb_isr+0x618>)
    2796:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2798:	ldr.w	r5, [ip]
    279c:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    279e:	str	r0, [sp, #4]
    27a0:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    27a2:	movs	r0, #0
    27a4:	str	r0, [sp, #8]
    27a6:	mov	r8, r0
    27a8:	mov	ip, r0
    27aa:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    27ac:	ldr	r1, [pc, #552]	; (29d8 <usb_isr+0x60c>)
    27ae:	ldrb	r5, [r1, #0]
    27b0:	orr.w	lr, r5, #2
    27b4:	add.w	r3, r9, lr, lsl #3
    27b8:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    27ba:	ldr	r3, [sp, #4]
    27bc:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    27be:	ldr	r3, [sp, #12]
    27c0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    27c2:	ite	eq
    27c4:	moveq	r4, #136	; 0x88
    27c6:	movne	r4, #200	; 0xc8
    27c8:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    27cc:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    27d0:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    27d4:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    27d6:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    27d8:	ldr.w	lr, [pc, #500]	; 29d0 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    27dc:	ldr	r3, [pc, #508]	; (29dc <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    27de:	ldr.w	r8, [pc, #504]	; 29d8 <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    27e2:	cmp	r0, #0
    27e4:	bne.w	2918 <usb_isr+0x54c>
    27e8:	cmp.w	ip, #64	; 0x40
    27ec:	bne.n	2826 <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    27ee:	orr.w	ip, r4, #2
    27f2:	add.w	r3, r9, ip, lsl #3
    27f6:	ldr	r4, [sp, #8]
    27f8:	ldr.w	lr, [pc, #468]	; 29d0 <usb_isr+0x604>
    27fc:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    27fe:	cmp	r2, #0
    2800:	bne.w	2944 <usb_isr+0x578>
    2804:	lsls	r2, r0, #16
    2806:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    280a:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    280e:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2812:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2814:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2816:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2818:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    281a:	cmp	r0, #64	; 0x40
    281c:	bne.n	2826 <usb_isr+0x45a>
    281e:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    2820:	ldr	r2, [pc, #452]	; (29e8 <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    2822:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    2824:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2826:	ldr	r2, [pc, #452]	; (29ec <usb_isr+0x620>)
    2828:	movs	r3, #1
    282a:	strb	r3, [r2, #0]
    282c:	b.n	25e6 <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    282e:	bl	158c <usb_serial_flush_callback>
    2832:	b.n	24a0 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2834:	ldr	r3, [pc, #408]	; (29d0 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2836:	ldr	r0, [pc, #436]	; (29ec <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    2838:	ldr	r1, [pc, #412]	; (29d8 <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    283a:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    283c:	mov.w	lr, #2
    2840:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2844:	ldr	r7, [pc, #424]	; (29f0 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    2846:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2848:	ldr	r1, [pc, #424]	; (29f4 <usb_isr+0x628>)
    284a:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    284c:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    284e:	ldr	r6, [pc, #424]	; (29f8 <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    2850:	ldr	r5, [pc, #424]	; (29fc <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2852:	ldr	r4, [pc, #428]	; (2a00 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    2854:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2856:	movs	r1, #13
    2858:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    285a:	movs	r1, #255	; 0xff
    285c:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    285e:	ldr.w	lr, [pc, #452]	; 2a24 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    2862:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2864:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2866:	ldr	r5, [pc, #412]	; (2a04 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2868:	ldr	r2, [pc, #412]	; (2a08 <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    286a:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    286e:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2870:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2872:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2876:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2878:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    287a:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    287c:	add	sp, #28
    287e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    2882:	ldr	r2, [pc, #392]	; (2a0c <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    2884:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    2888:	ldrb	r3, [r2, #0]
    288a:	adds	r3, #1
    288c:	strb	r3, [r2, #0]
    288e:	b.n	2460 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    2890:	str.w	r0, [r3, r6, lsl #2]
    2894:	ldr	r5, [pc, #376]	; (2a10 <usb_isr+0x644>)
    2896:	b.n	242e <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    2898:	ldrb	r3, [r1, r6]
    289a:	cmp	r3, #3
    289c:	bhi.n	2974 <usb_isr+0x5a8>
    289e:	add	r2, pc, #4	; (adr r2, 28a4 <usb_isr+0x4d8>)
    28a0:	ldr.w	pc, [r2, r3, lsl #2]
    28a4:	.word	0x00002461
    28a8:	.word	0x00002461
    28ac:	.word	0x000028f9
    28b0:	.word	0x000028f3
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    28b4:	ldr	r1, [pc, #312]	; (29f0 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    28b6:	ldr	r3, [pc, #324]	; (29fc <usb_isr+0x630>)
    28b8:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    28ba:	movs	r0, #13
    28bc:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    28be:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    28c0:	lsls	r2, r4, #30
    28c2:	bpl.w	2666 <usb_isr+0x29a>
    28c6:	b.n	2658 <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    28c8:	movw	r2, #770	; 0x302
    28cc:	cmp	r1, r2
    28ce:	bne.w	2b8e <usb_isr+0x7c2>
    28d2:	ldrh	r1, [r5, #4]
    28d4:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    28d8:	cmp	r1, #5
    28da:	bhi.n	290a <usb_isr+0x53e>
    28dc:	ldrh	r2, [r5, #2]
    28de:	cbnz	r2, 290a <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    28e0:	ldr	r4, [pc, #268]	; (29f0 <usb_isr+0x624>)
    28e2:	str	r0, [sp, #4]
    28e4:	lsls	r1, r1, #2
    28e6:	add	r4, r1
    28e8:	ldrb	r1, [r4, #0]
    28ea:	orr.w	r1, r1, #2
    28ee:	strb	r1, [r4, #0]
    28f0:	b.n	27a2 <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    28f2:	movs	r3, #1
    28f4:	strb	r3, [r1, r6]
						break;
    28f6:	b.n	2460 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    28f8:	movs	r3, #0
    28fa:	strb	r3, [r1, r6]
						break;
    28fc:	b.n	2460 <usb_isr+0x94>
    28fe:	ldrh	r1, [r5, #4]
    2900:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2904:	cmp	r1, #5
    2906:	bls.w	2ba8 <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    290a:	ldr	r2, [pc, #228]	; (29f0 <usb_isr+0x624>)
    290c:	movs	r3, #15
    290e:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2910:	ldr	r2, [pc, #216]	; (29ec <usb_isr+0x620>)
    2912:	movs	r3, #1
    2914:	strb	r3, [r2, #0]
    2916:	b.n	25e6 <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2918:	cmp	r0, #64	; 0x40
    291a:	bls.w	27ee <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    291e:	orr.w	r4, r4, #2
    2922:	add.w	r1, lr, r4, lsl #3
    2926:	ldr	r6, [sp, #8]
    2928:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    292a:	cbz	r2, 295c <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    292c:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2930:	ldr	r2, [pc, #224]	; (2a14 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    2932:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2934:	mov	r3, r6
    2936:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2938:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    293c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    293e:	str.w	r2, [lr, r4, lsl #3]
    2942:	b.n	2820 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    2944:	ldrb.w	r3, [sp, #4]
    2948:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    294a:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    294c:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    294e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2950:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2954:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2956:	str.w	r2, [lr, ip, lsl #3]
    295a:	b.n	281a <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    295c:	ldrb.w	r1, [sp, #4]
    2960:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2962:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2964:	ldr	r2, [pc, #140]	; (29f4 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2966:	strb.w	r5, [r8]
    296a:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    296c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    296e:	str.w	r2, [lr, r4, lsl #3]
    2972:	b.n	2820 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    2974:	tst.w	r9, #8
    2978:	ite	eq
    297a:	moveq	r3, #2
    297c:	movne	r3, #3
    297e:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    2980:	b.n	2460 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2982:	ldr	r2, [pc, #148]	; (2a18 <usb_isr+0x64c>)
    2984:	movs	r1, #15
    2986:	strb	r1, [r2, #0]
    2988:	b.n	2756 <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    298a:	ldr	r2, [pc, #64]	; (29cc <usb_isr+0x600>)
    298c:	ldr	r4, [pc, #140]	; (2a1c <usb_isr+0x650>)
    298e:	ldrb	r2, [r2, #0]
    2990:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2992:	ldrh	r2, [r5, #6]
    2994:	cmp	r2, r0
    2996:	bcs.w	2d5c <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    299a:	ldr	r1, [pc, #60]	; (29d8 <usb_isr+0x60c>)
    299c:	ldrb	r5, [r1, #0]
    299e:	cmp	r2, #64	; 0x40
    29a0:	mov	ip, r2
    29a2:	orr.w	lr, r5, #2
    29a6:	it	cs
    29a8:	movcs.w	ip, #64	; 0x40
    29ac:	add.w	r3, r4, ip
    29b0:	add.w	r0, r9, lr, lsl #3
    29b4:	str	r3, [sp, #8]
    29b6:	movs	r3, #1
    29b8:	str	r4, [r0, #4]
    29ba:	mov.w	r8, ip, lsl #16
    29be:	rsb	r0, ip, r2
    29c2:	str	r3, [sp, #4]
    29c4:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    29c6:	movs	r4, #200	; 0xc8
    29c8:	b.n	27c8 <usb_isr+0x3fc>
    29ca:	nop
    29cc:	.word	0x1fff1720
    29d0:	.word	0x1fff0000
    29d4:	.word	0x1fff1a80
    29d8:	.word	0x1fff1714
    29dc:	.word	0x1fff16a0
    29e0:	.word	0x1fff1a88
    29e4:	.word	0x1fff15c4
    29e8:	.word	0x1fff1648
    29ec:	.word	0x40072094
    29f0:	.word	0x400720c0
    29f4:	.word	0x00400088
    29f8:	.word	0x40072088
    29fc:	.word	0x40072080
    2a00:	.word	0x40072098
    2a04:	.word	0x1fff164c
    2a08:	.word	0x1fff16a4
    2a0c:	.word	0x1fff1715
    2a10:	.word	0x1fff1634
    2a14:	.word	0x004000c8
    2a18:	.word	0x1fff16a1
    2a1c:	.word	0x1fff1718
    2a20:	.word	0x1fff15cc
    2a24:	.word	0x4007208c
    2a28:	ldr	r4, [pc, #704]	; (2cec <usb_isr+0x920>)
    2a2a:	ldr	r2, [pc, #708]	; (2cf0 <usb_isr+0x924>)
    2a2c:	ldr	r1, [pc, #708]	; (2cf4 <usb_isr+0x928>)
    2a2e:	ldr	r0, [pc, #712]	; (2cf8 <usb_isr+0x92c>)
    2a30:	ldr	r5, [pc, #712]	; (2cfc <usb_isr+0x930>)
    2a32:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    2a34:	movs	r3, #0
    2a36:	ldr	r4, [pc, #712]	; (2d00 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2a38:	str	r4, [sp, #8]
    2a3a:	str	r6, [sp, #20]
    2a3c:	str	r5, [sp, #12]
    2a3e:	mov	r8, r0
    2a40:	mov	r4, r3
    2a42:	str	r7, [sp, #16]
    2a44:	mov	r6, r2
    2a46:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    2a48:	ldr	r0, [r6, #0]
			while (p) {
    2a4a:	cbz	r0, 2a58 <usb_isr+0x68c>
				n = p->next;
    2a4c:	ldr	r7, [r0, #4]
				usb_free(p);
    2a4e:	bl	21ac <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    2a52:	mov	r0, r7
    2a54:	cmp	r7, #0
    2a56:	bne.n	2a4c <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    2a58:	movs	r3, #0
    2a5a:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    2a5c:	ldr	r3, [sp, #12]
			p = tx_first[i];
    2a5e:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    2a60:	mov	r2, r3
    2a62:	movs	r3, #0
    2a64:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    2a68:	cbz	r0, 2a76 <usb_isr+0x6aa>
				n = p->next;
    2a6a:	ldr	r7, [r0, #4]
				usb_free(p);
    2a6c:	bl	21ac <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    2a70:	mov	r0, r7
    2a72:	cmp	r7, #0
    2a74:	bne.n	2a6a <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    2a76:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2a78:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    2a7a:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2a7c:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    2a7e:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    2a82:	ldr	r2, [sp, #8]
    2a84:	mov.w	r1, #0
			switch (tx_state[i]) {
    2a88:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    2a8a:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    2a8e:	cmp	r3, #3
    2a90:	bhi.n	2aa2 <usb_isr+0x6d6>
    2a92:	tbb	[pc, r3]
    2a96:	.short	0x0258
    2a98:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2a9a:	ldr	r3, [sp, #4]
    2a9c:	mov.w	r2, #1
    2aa0:	strb	r2, [r3, #0]
    2aa2:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    2aa4:	adds	r4, #1
    2aa6:	adds	r3, #1
    2aa8:	cmp	r4, #5
    2aaa:	add.w	r6, r6, #4
    2aae:	add.w	r5, r5, #4
    2ab2:	str	r3, [sp, #4]
    2ab4:	bne.n	2a48 <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2ab6:	ldr	r4, [pc, #588]	; (2d04 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    2ab8:	ldr	r5, [pc, #588]	; (2d08 <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2aba:	ldrb	r2, [r4, #0]
			*reg = epconf;
    2abc:	ldr	r3, [pc, #588]	; (2d0c <usb_isr+0x940>)
    2abe:	ldr	r7, [sp, #16]
    2ac0:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    2ac2:	movs	r1, #0
    2ac4:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2ac6:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2ac8:	lsls	r2, r2, #28
    2aca:	bmi.n	2bc2 <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2acc:	ldrb	r2, [r4, #1]
			*reg = epconf;
    2ace:	ldr	r1, [pc, #576]	; (2d10 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2ad0:	ldr.w	r8, [pc, #588]	; 2d20 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2ad4:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2ad6:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2ad8:	mov.w	r1, #0
    2adc:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    2ae0:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2ae4:	bmi.w	2c6e <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2ae8:	ldrb	r2, [r4, #2]
			*reg = epconf;
    2aea:	ldr	r1, [pc, #552]	; (2d14 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2aec:	ldr.w	r8, [pc, #560]	; 2d20 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2af0:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2af2:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2af4:	mov.w	r1, #0
    2af8:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    2afc:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2b00:	bmi.w	2c46 <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2b04:	ldr	r1, [pc, #528]	; (2d18 <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2b06:	ldrb	r2, [r4, #3]
			*reg = epconf;
    2b08:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2b0a:	movs	r1, #0
    2b0c:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    2b10:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2b14:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2b16:	ldr.w	r8, [pc, #520]	; 2d20 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2b1a:	bmi.n	2c18 <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2b1c:	ldrb	r2, [r4, #4]
			*reg = epconf;
    2b1e:	ldr	r1, [pc, #508]	; (2d1c <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2b20:	ldr	r4, [pc, #508]	; (2d20 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2b22:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2b24:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2b26:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2b28:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    2b2c:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2b30:	bmi.n	2bee <usb_isr+0x822>
    2b32:	ldrb	r3, [r6, #0]
    2b34:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2b36:	movs	r1, #0
    2b38:	eor.w	r2, r3, #1
    2b3c:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    2b40:	str.w	r1, [r9, #184]	; 0xb8
    2b44:	b.n	27a2 <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2b46:	ldr	r3, [sp, #4]
    2b48:	mov.w	r2, #0
    2b4c:	strb	r2, [r3, #0]
    2b4e:	b.n	2aa2 <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    2b50:	ldr	r2, [pc, #464]	; (2d24 <usb_isr+0x958>)
    2b52:	ldr	r4, [r2, #4]
    2b54:	cmp	r4, #0
    2b56:	beq.w	290a <usb_isr+0x53e>
    2b5a:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2b5c:	ldrh.w	lr, [r5, #4]
    2b60:	b.n	2b6c <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    2b62:	adds	r2, #12
			if (list->addr == NULL) break;
    2b64:	ldr	r4, [r2, #4]
    2b66:	cmp	r4, #0
    2b68:	beq.w	290a <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2b6c:	ldrh	r3, [r2, #0]
    2b6e:	cmp	r3, r0
    2b70:	bne.n	2b62 <usb_isr+0x796>
    2b72:	ldrh	r3, [r2, #2]
    2b74:	cmp	r3, lr
    2b76:	bne.n	2b62 <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    2b78:	lsrs	r0, r0, #8
    2b7a:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    2b7c:	ite	eq
    2b7e:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    2b80:	ldrhne	r0, [r2, #8]
    2b82:	b.n	2992 <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2b84:	ldr	r4, [pc, #416]	; (2d28 <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    2b86:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2b88:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2b8a:	strb	r2, [r4, #1]
    2b8c:	b.n	2992 <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2b8e:	cmp.w	r1, #1280	; 0x500
    2b92:	bne.w	290a <usb_isr+0x53e>
    2b96:	movs	r3, #1
    2b98:	movs	r2, #0
    2b9a:	str	r3, [sp, #4]
    2b9c:	b.n	27a2 <usb_isr+0x3d6>
    2b9e:	movw	r2, #8993	; 0x2321
    2ba2:	cmp	r1, r2
    2ba4:	beq.n	2b96 <usb_isr+0x7ca>
    2ba6:	b.n	290a <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2ba8:	ldrh	r2, [r5, #2]
    2baa:	cmp	r2, #0
    2bac:	bne.w	290a <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    2bb0:	ldr	r4, [pc, #376]	; (2d2c <usb_isr+0x960>)
    2bb2:	str	r0, [sp, #4]
    2bb4:	lsls	r1, r1, #2
    2bb6:	add	r4, r1
    2bb8:	ldrb	r1, [r4, #0]
    2bba:	bic.w	r1, r1, #2
    2bbe:	strb	r1, [r4, #0]
    2bc0:	b.n	27a2 <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2bc2:	bl	216c <usb_malloc>
				if (p) {
    2bc6:	cmp	r0, #0
    2bc8:	beq.w	2d38 <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    2bcc:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2bce:	ldr	r2, [pc, #352]	; (2d30 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2bd0:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2bd4:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2bd8:	bl	216c <usb_malloc>
				if (p) {
    2bdc:	cmp	r0, #0
    2bde:	beq.n	2ce0 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    2be0:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2be2:	ldr	r2, [pc, #336]	; (2d34 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2be4:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2be8:	str.w	r2, [r9, #40]	; 0x28
    2bec:	b.n	2acc <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2bee:	bl	216c <usb_malloc>
				if (p) {
    2bf2:	cmp	r0, #0
    2bf4:	beq.n	2ca4 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    2bf6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2bf8:	ldr	r2, [pc, #308]	; (2d30 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2bfa:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2bfe:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2c02:	bl	216c <usb_malloc>
				if (p) {
    2c06:	cmp	r0, #0
    2c08:	beq.n	2c98 <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    2c0a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2c0c:	ldr	r2, [pc, #292]	; (2d34 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2c0e:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2c12:	str.w	r2, [r9, #168]	; 0xa8
    2c16:	b.n	2b32 <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2c18:	bl	216c <usb_malloc>
				if (p) {
    2c1c:	cmp	r0, #0
    2c1e:	beq.w	2d50 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    2c22:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2c24:	ldr	r2, [pc, #264]	; (2d30 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2c26:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2c2a:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2c2e:	bl	216c <usb_malloc>
				if (p) {
    2c32:	cmp	r0, #0
    2c34:	beq.w	2d44 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    2c38:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2c3a:	ldr	r2, [pc, #248]	; (2d34 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2c3c:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2c40:	str.w	r2, [r9, #136]	; 0x88
    2c44:	b.n	2b1c <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2c46:	bl	216c <usb_malloc>
				if (p) {
    2c4a:	cmp	r0, #0
    2c4c:	beq.n	2cd4 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    2c4e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2c50:	ldr	r2, [pc, #220]	; (2d30 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2c52:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2c56:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2c5a:	bl	216c <usb_malloc>
				if (p) {
    2c5e:	cbz	r0, 2cc8 <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    2c60:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2c62:	ldr	r2, [pc, #208]	; (2d34 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2c64:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2c68:	str.w	r2, [r9, #104]	; 0x68
    2c6c:	b.n	2b04 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    2c6e:	bl	216c <usb_malloc>
				if (p) {
    2c72:	cbz	r0, 2cbc <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    2c74:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2c76:	ldr	r2, [pc, #184]	; (2d30 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    2c78:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2c7c:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    2c80:	bl	216c <usb_malloc>
				if (p) {
    2c84:	cbz	r0, 2cb0 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    2c86:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2c88:	ldr	r2, [pc, #168]	; (2d34 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    2c8a:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2c8e:	str.w	r2, [r9, #72]	; 0x48
    2c92:	b.n	2ae8 <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    2c94:	movs	r0, #2
    2c96:	b.n	2992 <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2c98:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2c9a:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    2c9e:	adds	r2, #1
    2ca0:	strb	r2, [r5, #0]
    2ca2:	b.n	2b32 <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2ca4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2ca6:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    2caa:	adds	r2, #1
    2cac:	strb	r2, [r5, #0]
    2cae:	b.n	2c02 <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2cb0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2cb2:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    2cb6:	adds	r2, #1
    2cb8:	strb	r2, [r5, #0]
    2cba:	b.n	2ae8 <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2cbc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2cbe:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    2cc2:	adds	r2, #1
    2cc4:	strb	r2, [r5, #0]
    2cc6:	b.n	2c80 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2cc8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2cca:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    2cce:	adds	r2, #1
    2cd0:	strb	r2, [r5, #0]
    2cd2:	b.n	2b04 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2cd4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2cd6:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    2cda:	adds	r2, #1
    2cdc:	strb	r2, [r5, #0]
    2cde:	b.n	2c5a <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2ce0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2ce2:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    2ce6:	adds	r2, #1
    2ce8:	strb	r2, [r5, #0]
    2cea:	b.n	2acc <usb_isr+0x700>
    2cec:	.word	0x1fff1724
    2cf0:	.word	0x1fff168c
    2cf4:	.word	0x1fff16e4
    2cf8:	.word	0x1fff16f8
    2cfc:	.word	0x1fff1634
    2d00:	.word	0x1fff1bb8
    2d04:	.word	0x00004768
    2d08:	.word	0x1fff1715
    2d0c:	.word	0x400720c4
    2d10:	.word	0x400720c8
    2d14:	.word	0x400720cc
    2d18:	.word	0x400720d0
    2d1c:	.word	0x400720d4
    2d20:	.word	0x1fff0000
    2d24:	.word	0x00004770
    2d28:	.word	0x1fff1718
    2d2c:	.word	0x400720c0
    2d30:	.word	0x00400088
    2d34:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2d38:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2d3a:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    2d3e:	adds	r2, #1
    2d40:	strb	r2, [r5, #0]
    2d42:	b.n	2bd8 <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    2d44:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2d46:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    2d4a:	adds	r2, #1
    2d4c:	strb	r2, [r5, #0]
    2d4e:	b.n	2b1c <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    2d50:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    2d52:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    2d56:	adds	r2, #1
    2d58:	strb	r2, [r5, #0]
    2d5a:	b.n	2c2e <usb_isr+0x862>
    2d5c:	cmp	r0, #64	; 0x40
    2d5e:	mov	ip, r0
    2d60:	it	cs
    2d62:	movcs.w	ip, #64	; 0x40
    2d66:	add.w	r3, r4, ip
    2d6a:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2d6c:	movs	r3, #1
    2d6e:	rsb	r0, ip, r0
    2d72:	mov.w	r8, ip, lsl #16
    2d76:	movs	r2, #0
    2d78:	str	r3, [sp, #4]
    2d7a:	b.n	27ac <usb_isr+0x3e0>

00002d7c <usb_init>:
}



void usb_init(void)
{
    2d7c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d80:	ldr	r4, [pc, #156]	; (2e20 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    2d82:	bl	36c8 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2d86:	movs	r2, #0
    2d88:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    2d8c:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2d8e:	str	r2, [r3, #0]
		table[i].addr = 0;
    2d90:	str	r2, [r3, #4]
    2d92:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    2d94:	cmp	r3, r0
		table[i].desc = 0;
    2d96:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    2d9a:	bne.n	2d8e <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2d9c:	ldr	r0, [pc, #132]	; (2e24 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    2d9e:	ldr	r2, [pc, #136]	; (2e28 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2da0:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    2da2:	ldr.w	lr, [pc, #156]	; 2e40 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    2da6:	ldr	r6, [pc, #132]	; (2e2c <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2da8:	ldr	r5, [pc, #132]	; (2e30 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2daa:	ldr	r7, [pc, #136]	; (2e34 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2dac:	ldr.w	ip, [pc, #148]	; 2e44 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    2db0:	ldr.w	r8, [pc, #148]	; 2e48 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2db4:	orr.w	r3, r3, #262144	; 0x40000
    2db8:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    2dba:	ldr	r3, [r2, #0]
    2dbc:	orr.w	r3, r3, #50331648	; 0x3000000
    2dc0:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    2dc2:	movs	r3, #3
    2dc4:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    2dc8:	movs	r3, #160	; 0xa0
    2dca:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2dcc:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2dd0:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2dd4:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2dd8:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2dda:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2ddc:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    2de0:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2de2:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2de4:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2de6:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2de8:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2dea:	ldr	r5, [pc, #76]	; (2e38 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2dec:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2df0:	ldr	r0, [pc, #72]	; (2e3c <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    2df2:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    2df6:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    2df8:	movs	r3, #1
    2dfa:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2dfe:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2e02:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2e06:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2e08:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    2e0a:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2e0e:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2e10:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2e12:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    2e16:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2e1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e1e:	nop
    2e20:	.word	0x1fff0000
    2e24:	.word	0x40048034
    2e28:	.word	0x4000d800
    2e2c:	.word	0x40072140
    2e30:	.word	0x4007209c
    2e34:	.word	0x400720b0
    2e38:	.word	0xe000e435
    2e3c:	.word	0xe000e104
    2e40:	.word	0x40072144
    2e44:	.word	0x40072080
    2e48:	.word	0x40072088

00002e4c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2e4c:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    2e4e:	ldr	r4, [pc, #176]	; (2f00 <yield+0xb4>)
    2e50:	ldrb	r3, [r4, #0]
    2e52:	cbz	r3, 2e56 <yield+0xa>
    2e54:	pop	{r3, r4, r5, pc}
	running = 1;
    2e56:	movs	r3, #1
    2e58:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2e5a:	bl	1378 <usb_serial_available>
	if (Serial.available()) serialEvent();
    2e5e:	cmp	r0, #0
    2e60:	bne.n	2ee8 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    2e62:	bl	3498 <serial_available>
	if (Serial1.available()) serialEvent1();
    2e66:	cmp	r0, #0
    2e68:	bne.n	2ee2 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    2e6a:	bl	3180 <serial2_available>
	if (Serial2.available()) serialEvent2();
    2e6e:	cmp	r0, #0
    2e70:	bne.n	2edc <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    2e72:	bl	3798 <serial3_available>
	if (Serial3.available()) serialEvent3();
    2e76:	cbnz	r0, 2ed6 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    2e78:	bl	32ac <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2e7c:	cbnz	r0, 2ed0 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    2e7e:	bl	3088 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2e82:	cbnz	r0, 2eca <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    2e84:	bl	35c4 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2e88:	cbnz	r0, 2ec4 <yield+0x78>
#endif
	running = 0;
    2e8a:	movs	r3, #0
    2e8c:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2e8e:	mrs	r3, IPSR
		if (ipsr != 0) return;
    2e92:	cmp	r3, #0
    2e94:	bne.n	2e54 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2e96:	mrs	r1, PRIMASK
		__disable_irq();
    2e9a:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    2e9c:	ldr	r3, [pc, #100]	; (2f04 <yield+0xb8>)
    2e9e:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    2ea0:	cbz	r0, 2eee <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    2ea2:	ldr	r4, [pc, #100]	; (2f08 <yield+0xbc>)
    2ea4:	ldrb	r2, [r4, #0]
    2ea6:	cbnz	r2, 2eee <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    2ea8:	ldr	r5, [r0, #20]
    2eaa:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2eac:	movs	r3, #1
    2eae:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    2eb0:	cbz	r5, 2ef6 <yield+0xaa>
			firstYield->_prev = nullptr;
    2eb2:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2eb4:	cbnz	r1, 2eb8 <yield+0x6c>
    2eb6:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2eb8:	movs	r5, #0
    2eba:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    2ebc:	ldr	r3, [r0, #8]
    2ebe:	blx	r3
		runningFromYield = false;
    2ec0:	strb	r5, [r4, #0]
    2ec2:	b.n	2e54 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    2ec4:	bl	3080 <serialEvent6()>
    2ec8:	b.n	2e8a <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    2eca:	bl	2f10 <serialEvent5()>
    2ece:	b.n	2e84 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    2ed0:	bl	2ff4 <serialEvent4()>
    2ed4:	b.n	2e7e <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    2ed6:	bl	3894 <serialEvent3()>
    2eda:	b.n	2e78 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    2edc:	bl	2ff0 <serialEvent2()>
    2ee0:	b.n	2e72 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    2ee2:	bl	3890 <serialEvent1()>
    2ee6:	b.n	2e6a <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    2ee8:	bl	2f3c <serialEvent()>
    2eec:	b.n	2e62 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2eee:	cmp	r1, #0
    2ef0:	bne.n	2e54 <yield+0x8>
    2ef2:	cpsie	i
    2ef4:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    2ef6:	ldr	r3, [pc, #20]	; (2f0c <yield+0xc0>)
    2ef8:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2efa:	cmp	r1, #0
    2efc:	bne.n	2eb8 <yield+0x6c>
    2efe:	b.n	2eb6 <yield+0x6a>
    2f00:	.word	0x1fff1729
    2f04:	.word	0x1fff1a40
    2f08:	.word	0x1fff1a44
    2f0c:	.word	0x1fff1a3c

00002f10 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    2f10:	bx	lr
    2f12:	nop

00002f14 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    2f14:	b.w	1394 <usb_serial_flush_input>

00002f18 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    2f18:	b.w	1348 <usb_serial_peekchar>

00002f1c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    2f1c:	b.w	1300 <usb_serial_getchar>

00002f20 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2f20:	b.w	1378 <usb_serial_available>

00002f24 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2f24:	b.w	1534 <usb_serial_flush_output>

00002f28 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2f28:	b.w	14ec <usb_serial_write_buffer_free>

00002f2c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2f2c:	mov	r0, r1
    2f2e:	mov	r1, r2
    2f30:	b.w	13cc <usb_serial_write>

00002f34 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2f34:	mov	r0, r1
    2f36:	b.w	14d4 <usb_serial_putchar>
    2f3a:	nop

00002f3c <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    2f3c:	bx	lr
    2f3e:	nop

00002f40 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2f40:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    2f42:	ldr	r2, [pc, #24]	; (2f5c <Print::println()+0x1c>)
	return write(buf, 2);
    2f44:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2f46:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    2f48:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    2f4a:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    2f4c:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    2f4e:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    2f52:	movs	r2, #2
    2f54:	blx	r3
}
    2f56:	add	sp, #12
    2f58:	ldr.w	pc, [sp], #4
    2f5c:	.word	0x00004764

00002f60 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    2f60:	push	{r4, r5, r6, r7, lr}
    2f62:	mov	r7, r0
    2f64:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    2f66:	cmp	r2, #0
    2f68:	beq.n	2fd2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    2f6a:	cmp	r2, #1
    2f6c:	it	eq
    2f6e:	moveq	r2, #10
	}


	if (n == 0) {
    2f70:	cbz	r1, 2fc8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    2f72:	movs	r4, #33	; 0x21
    2f74:	b.n	2f78 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    2f76:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    2f78:	udiv	r5, r1, r2
    2f7c:	mls	r1, r2, r5, r1
    2f80:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2f82:	cmp	r1, #9
    2f84:	add.w	r1, r0, #48	; 0x30
    2f88:	it	ls
    2f8a:	uxtbls	r0, r1
    2f8c:	add	r1, sp, #40	; 0x28
    2f8e:	it	hi
    2f90:	addhi	r0, #55	; 0x37
    2f92:	add	r1, r4
    2f94:	it	hi
    2f96:	uxtbhi	r0, r0
    2f98:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    2f9c:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    2f9e:	mov	r1, r5
    2fa0:	cmp	r5, #0
    2fa2:	bne.n	2f76 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    2fa4:	cbz	r3, 2fb4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    2fa6:	subs	r4, #1
    2fa8:	uxtb	r4, r4
		buf[i] = '-';
    2faa:	add	r3, sp, #40	; 0x28
    2fac:	add	r3, r4
    2fae:	movs	r2, #45	; 0x2d
    2fb0:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    2fb4:	ldr	r3, [r7, #0]
    2fb6:	add	r2, sp, #4
    2fb8:	adds	r1, r2, r4
    2fba:	ldr	r3, [r3, #4]
    2fbc:	mov	r0, r7
    2fbe:	rsb	r2, r4, #34	; 0x22
    2fc2:	blx	r3
}
    2fc4:	add	sp, #44	; 0x2c
    2fc6:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2fc8:	movs	r2, #48	; 0x30
    2fca:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    2fce:	movs	r4, #33	; 0x21
    2fd0:	b.n	2fa4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    2fd2:	ldr	r3, [r0, #0]
    2fd4:	uxtb	r1, r1
    2fd6:	ldr	r3, [r3, #0]
    2fd8:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    2fda:	add	sp, #44	; 0x2c
    2fdc:	pop	{r4, r5, r6, r7, pc}
    2fde:	nop

00002fe0 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    2fe0:	cmp	r1, #0
		sign = '-';
		n = -n;
    2fe2:	itte	lt
    2fe4:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    2fe6:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    2fe8:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    2fea:	movs	r2, #10
    2fec:	b.w	2f60 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00002ff0 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    2ff0:	bx	lr
    2ff2:	nop

00002ff4 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    2ff4:	bx	lr
    2ff6:	nop

00002ff8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2ff8:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    2ffa:	bl	96c <setup>
	while (1) {
		loop();
    2ffe:	bl	970 <loop>
		yield();
    3002:	bl	2e4c <yield>
    3006:	b.n	2ffe <main+0x6>

00003008 <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    3008:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    300a:	ldr	r5, [pc, #88]	; (3064 <random(unsigned long) [clone .part.0]+0x5c>)
    300c:	ldr	r2, [r5, #0]
	if (x == 0) x = 123459876;
    300e:	cbz	r2, 3054 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    3010:	ldr	r1, [pc, #84]	; (3068 <random(unsigned long) [clone .part.0]+0x60>)
    3012:	ldr	r3, [pc, #88]	; (306c <random(unsigned long) [clone .part.0]+0x64>)
    3014:	ldr.w	lr, [pc, #92]	; 3074 <random(unsigned long) [clone .part.0]+0x6c>
    3018:	smull	r6, r7, r2, r1
    301c:	smull	r1, r4, r1, r2
    3020:	asrs	r6, r2, #31
    3022:	adds	r1, r2, r7
    3024:	add	r4, r2
    3026:	rsb	r1, r6, r1, asr #16
    302a:	rsb	r4, r6, r4, asr #16
    302e:	mul.w	r4, r3, r4
    3032:	mls	r2, lr, r1, r2
    3036:	movw	r3, #16807	; 0x41a7
    303a:	mla	r3, r3, r2, r4
	if (x < 0) x += 0x7FFFFFFF;
    303e:	cmp	r3, #0
    3040:	bge.n	3048 <random(unsigned long) [clone .part.0]+0x40>
    3042:	add.w	r3, r3, #2147483648	; 0x80000000
    3046:	subs	r3, #1
    3048:	udiv	r2, r3, r0
	seed = x;
    304c:	str	r3, [r5, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    304e:	mls	r0, r0, r2, r3
    3052:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    3054:	ldr	r3, [pc, #24]	; (3070 <random(unsigned long) [clone .part.0]+0x68>)
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    3056:	str	r3, [r5, #0]
    3058:	udiv	r2, r3, r0

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    305c:	mls	r0, r0, r2, r3
    3060:	pop	{r4, r5, r6, r7, pc}
    3062:	nop
    3064:	.word	0x1fff172c
    3068:	.word	0x834e0b5f
    306c:	.word	0xfffff4ec
    3070:	.word	0x1f0cce42
    3074:	.word	0x0001f31d

00003078 <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    3078:	cbz	r0, 307e <random(unsigned long)+0x6>
    307a:	b.w	3008 <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    307e:	bx	lr

00003080 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    3080:	bx	lr
    3082:	nop

00003084 <operator new(unsigned int)>:
    3084:	b.w	3ae8 <malloc>

00003088 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3088:	ldr	r2, [pc, #20]	; (30a0 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    308a:	ldr	r3, [pc, #24]	; (30a4 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    308c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    308e:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3090:	uxtb	r0, r0
	tail = rx_buffer_tail;
    3092:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3094:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    3096:	it	cc
    3098:	addcc	r0, #64	; 0x40
    309a:	subs	r0, r0, r3
}
    309c:	bx	lr
    309e:	nop
    30a0:	.word	0x1fff1734
    30a4:	.word	0x1fff1735

000030a8 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    30a8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    30aa:	ldr	r3, [pc, #172]	; (3158 <uart4_status_isr+0xb0>)
    30ac:	ldrb	r2, [r3, #4]
    30ae:	lsls	r4, r2, #26
    30b0:	bpl.n	30f2 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    30b2:	ldr	r0, [pc, #168]	; (315c <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    30b4:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    30b6:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    30b8:	ldr	r1, [pc, #164]	; (3160 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    30ba:	adds	r3, #1
    30bc:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    30be:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    30c0:	it	gt
    30c2:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    30c4:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    30c6:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    30c8:	beq.n	30d2 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    30ca:	ldr	r4, [pc, #152]	; (3164 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    30cc:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    30ce:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    30d0:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    30d2:	ldr	r2, [pc, #148]	; (3168 <uart4_status_isr+0xc0>)
    30d4:	ldr	r1, [r2, #0]
    30d6:	cbz	r1, 30f2 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    30d8:	ldr	r2, [pc, #144]	; (316c <uart4_status_isr+0xc4>)
    30da:	ldrb	r2, [r2, #0]
    30dc:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    30de:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    30e0:	itet	cc
    30e2:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    30e6:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    30e8:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    30ea:	cmp	r3, #39	; 0x27
    30ec:	itt	gt
    30ee:	movgt	r3, #1
    30f0:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    30f2:	ldr	r2, [pc, #100]	; (3158 <uart4_status_isr+0xb0>)
    30f4:	ldrb	r3, [r2, #3]
    30f6:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    30f8:	lsls	r0, r3, #24
    30fa:	bmi.n	3120 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    30fc:	lsls	r2, r3, #25
    30fe:	bpl.n	311c <uart4_status_isr+0x74>
    3100:	ldr	r3, [pc, #84]	; (3158 <uart4_status_isr+0xb0>)
    3102:	ldrb	r3, [r3, #4]
    3104:	lsls	r3, r3, #25
    3106:	bpl.n	311c <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3108:	ldr	r3, [pc, #100]	; (3170 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    310a:	ldr	r1, [pc, #104]	; (3174 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    310c:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    310e:	movs	r2, #0
    3110:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3112:	cbz	r3, 3116 <uart4_status_isr+0x6e>
    3114:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    3116:	ldr	r3, [pc, #64]	; (3158 <uart4_status_isr+0xb0>)
    3118:	movs	r2, #44	; 0x2c
    311a:	strb	r2, [r3, #3]
	}
}
    311c:	pop	{r4, r5}
    311e:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    3120:	ldrb	r1, [r2, #4]
    3122:	lsls	r1, r1, #24
    3124:	bpl.n	30fc <uart4_status_isr+0x54>
		head = tx_buffer_head;
    3126:	ldr	r1, [pc, #80]	; (3178 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3128:	ldr	r0, [pc, #64]	; (316c <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    312a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    312c:	ldrb	r1, [r0, #0]
    312e:	uxtb	r1, r1
		if (head == tail) {
    3130:	cmp	r4, r1
    3132:	beq.n	3150 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    3134:	adds	r2, r1, #1
    3136:	cmp	r2, #39	; 0x27
    3138:	itt	hi
    313a:	movhi	r1, #0
    313c:	movhi	r2, r1
			n = tx_buffer[tail];
    313e:	ldr	r5, [pc, #60]	; (317c <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    3140:	ldr	r4, [pc, #20]	; (3158 <uart4_status_isr+0xb0>)
    3142:	it	ls
    3144:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3146:	ldrb	r2, [r5, r2]
    3148:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    314a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    314c:	strb	r1, [r0, #0]
    314e:	b.n	30fc <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    3150:	movs	r1, #108	; 0x6c
    3152:	strb	r1, [r2, #3]
    3154:	b.n	30fc <uart4_status_isr+0x54>
    3156:	nop
    3158:	.word	0x400ea000
    315c:	.word	0x1fff1734
    3160:	.word	0x1fff1735
    3164:	.word	0x1fff1760
    3168:	.word	0x1fff1730
    316c:	.word	0x1fff17a1
    3170:	.word	0x1fff17a4
    3174:	.word	0x1fff17a0
    3178:	.word	0x1fff17a8
    317c:	.word	0x1fff1738

00003180 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3180:	ldr	r2, [pc, #20]	; (3198 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    3182:	ldr	r3, [pc, #24]	; (319c <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3184:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3186:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3188:	uxtb	r0, r0
	tail = rx_buffer_tail;
    318a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    318c:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    318e:	it	cc
    3190:	addcc	r0, #64	; 0x40
    3192:	subs	r0, r0, r3
}
    3194:	bx	lr
    3196:	nop
    3198:	.word	0x1fff181c
    319c:	.word	0x1fff17b1

000031a0 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    31a0:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    31a2:	ldr	r3, [pc, #224]	; (3284 <uart1_status_isr+0xe4>)
    31a4:	ldrb	r2, [r3, #4]
    31a6:	tst.w	r2, #48	; 0x30
    31aa:	beq.n	3206 <uart1_status_isr+0x66>
		__disable_irq();
    31ac:	cpsid	i
		avail = UART1_RCFIFO;
    31ae:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    31b0:	and.w	r2, r1, #255	; 0xff
    31b4:	cmp	r1, #0
    31b6:	beq.n	3234 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    31b8:	cpsie	i
			head = rx_buffer_head;
    31ba:	ldr	r7, [pc, #204]	; (3288 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    31bc:	ldr	r1, [pc, #204]	; (328c <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    31be:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    31c0:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    31c2:	ldr	r6, [pc, #204]	; (3290 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    31c4:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    31c6:	uxtb	r0, r0
			tail = rx_buffer_tail;
    31c8:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    31ca:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    31cc:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    31ce:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    31d0:	it	cs
    31d2:	movcs	r3, #0
				if (newhead != tail) {
    31d4:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    31d6:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    31da:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    31dc:	itt	ne
    31de:	strbne	r1, [r6, r3]
    31e0:	movne	r0, r3
				}
			} while (--avail > 0);
    31e2:	ands.w	r2, r2, #255	; 0xff
    31e6:	bne.n	31ca <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    31e8:	ldr	r3, [pc, #168]	; (3294 <uart1_status_isr+0xf4>)
    31ea:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    31ec:	uxtb	r2, r0
    31ee:	strb	r2, [r7, #0]
			if (rts_pin) {
    31f0:	cbz	r3, 3206 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    31f2:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    31f4:	itet	cc
    31f6:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    31fa:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    31fc:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    31fe:	cmp	r0, #39	; 0x27
    3200:	itt	gt
    3202:	movgt	r2, #1
    3204:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    3206:	ldr	r1, [pc, #124]	; (3284 <uart1_status_isr+0xe4>)
    3208:	ldrb	r2, [r1, #3]
    320a:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    320c:	lsls	r5, r2, #24
    320e:	bmi.n	323e <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    3210:	lsls	r2, r2, #25
    3212:	bpl.n	3230 <uart1_status_isr+0x90>
    3214:	ldr	r3, [pc, #108]	; (3284 <uart1_status_isr+0xe4>)
    3216:	ldrb	r3, [r3, #4]
    3218:	lsls	r3, r3, #25
    321a:	bpl.n	3230 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    321c:	ldr	r3, [pc, #120]	; (3298 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    321e:	ldr	r1, [pc, #124]	; (329c <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3220:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3222:	movs	r2, #0
    3224:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3226:	cbz	r3, 322a <uart1_status_isr+0x8a>
    3228:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    322a:	ldr	r3, [pc, #88]	; (3284 <uart1_status_isr+0xe4>)
    322c:	movs	r2, #60	; 0x3c
    322e:	strb	r2, [r3, #3]
	}
}
    3230:	pop	{r4, r5, r6, r7}
    3232:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3234:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    3236:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3238:	strb	r2, [r3, #17]
			__enable_irq();
    323a:	cpsie	i
    323c:	b.n	3206 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    323e:	ldrb	r3, [r1, #4]
    3240:	lsls	r4, r3, #24
    3242:	bpl.n	3210 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    3244:	ldr	r3, [pc, #88]	; (32a0 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    3246:	ldr	r6, [pc, #92]	; (32a4 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3248:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    324a:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    324c:	uxtb	r4, r4
		tail = tx_buffer_tail;
    324e:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3250:	cmp	r4, r3
    3252:	beq.n	3272 <uart1_status_isr+0xd2>
    3254:	ldr	r5, [pc, #80]	; (32a8 <uart1_status_isr+0x108>)
    3256:	b.n	325c <uart1_status_isr+0xbc>
    3258:	cmp	r3, r4
    325a:	beq.n	3272 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    325c:	adds	r3, #1
    325e:	cmp	r3, #40	; 0x28
    3260:	it	cs
    3262:	movcs	r3, #0
			avail = UART1_S1;
    3264:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3266:	ldrb	r0, [r5, r3]
    3268:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    326a:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    326c:	ldrb	r0, [r1, #20]
    326e:	cmp	r0, #7
    3270:	bls.n	3258 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    3272:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3274:	ldr	r1, [pc, #12]	; (3284 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    3276:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3278:	ldrb	r3, [r1, #4]
    327a:	lsls	r0, r3, #24
    327c:	itt	mi
    327e:	movmi	r3, #124	; 0x7c
    3280:	strbmi	r3, [r1, #3]
    3282:	b.n	3210 <uart1_status_isr+0x70>
    3284:	.word	0x4006b000
    3288:	.word	0x1fff181c
    328c:	.word	0x1fff17b1
    3290:	.word	0x1fff17dc
    3294:	.word	0x1fff17ac
    3298:	.word	0x1fff1820
    329c:	.word	0x1fff17b0
    32a0:	.word	0x1fff1824
    32a4:	.word	0x1fff181d
    32a8:	.word	0x1fff17b4

000032ac <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    32ac:	ldr	r2, [pc, #20]	; (32c4 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    32ae:	ldr	r3, [pc, #24]	; (32c8 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    32b0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    32b2:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    32b4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    32b6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    32b8:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    32ba:	it	cc
    32bc:	addcc	r0, #64	; 0x40
    32be:	subs	r0, r0, r3
}
    32c0:	bx	lr
    32c2:	nop
    32c4:	.word	0x1fff182c
    32c8:	.word	0x1fff182d

000032cc <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    32cc:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    32ce:	ldr	r3, [pc, #172]	; (337c <uart3_status_isr+0xb0>)
    32d0:	ldrb	r2, [r3, #4]
    32d2:	lsls	r4, r2, #26
    32d4:	bpl.n	3316 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    32d6:	ldr	r0, [pc, #168]	; (3380 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    32d8:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    32da:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    32dc:	ldr	r1, [pc, #164]	; (3384 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    32de:	adds	r3, #1
    32e0:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    32e2:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    32e4:	it	gt
    32e6:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    32e8:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    32ea:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    32ec:	beq.n	32f6 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    32ee:	ldr	r4, [pc, #152]	; (3388 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    32f0:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    32f2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    32f4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    32f6:	ldr	r2, [pc, #148]	; (338c <uart3_status_isr+0xc0>)
    32f8:	ldr	r1, [r2, #0]
    32fa:	cbz	r1, 3316 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    32fc:	ldr	r2, [pc, #144]	; (3390 <uart3_status_isr+0xc4>)
    32fe:	ldrb	r2, [r2, #0]
    3300:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3302:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    3304:	itet	cc
    3306:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    330a:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    330c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    330e:	cmp	r3, #39	; 0x27
    3310:	itt	gt
    3312:	movgt	r3, #1
    3314:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    3316:	ldr	r2, [pc, #100]	; (337c <uart3_status_isr+0xb0>)
    3318:	ldrb	r3, [r2, #3]
    331a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    331c:	lsls	r0, r3, #24
    331e:	bmi.n	3344 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    3320:	lsls	r2, r3, #25
    3322:	bpl.n	3340 <uart3_status_isr+0x74>
    3324:	ldr	r3, [pc, #84]	; (337c <uart3_status_isr+0xb0>)
    3326:	ldrb	r3, [r3, #4]
    3328:	lsls	r3, r3, #25
    332a:	bpl.n	3340 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    332c:	ldr	r3, [pc, #100]	; (3394 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    332e:	ldr	r1, [pc, #104]	; (3398 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3330:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    3332:	movs	r2, #0
    3334:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3336:	cbz	r3, 333a <uart3_status_isr+0x6e>
    3338:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    333a:	ldr	r3, [pc, #64]	; (337c <uart3_status_isr+0xb0>)
    333c:	movs	r2, #44	; 0x2c
    333e:	strb	r2, [r3, #3]
	}
}
    3340:	pop	{r4, r5}
    3342:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    3344:	ldrb	r1, [r2, #4]
    3346:	lsls	r1, r1, #24
    3348:	bpl.n	3320 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    334a:	ldr	r1, [pc, #80]	; (339c <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    334c:	ldr	r0, [pc, #64]	; (3390 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    334e:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3350:	ldrb	r1, [r0, #0]
    3352:	uxtb	r1, r1
		if (head == tail) {
    3354:	cmp	r4, r1
    3356:	beq.n	3374 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    3358:	adds	r2, r1, #1
    335a:	cmp	r2, #39	; 0x27
    335c:	itt	hi
    335e:	movhi	r1, #0
    3360:	movhi	r2, r1
			n = tx_buffer[tail];
    3362:	ldr	r5, [pc, #60]	; (33a0 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    3364:	ldr	r4, [pc, #20]	; (337c <uart3_status_isr+0xb0>)
    3366:	it	ls
    3368:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    336a:	ldrb	r2, [r5, r2]
    336c:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    336e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3370:	strb	r1, [r0, #0]
    3372:	b.n	3320 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    3374:	movs	r1, #108	; 0x6c
    3376:	strb	r1, [r2, #3]
    3378:	b.n	3320 <uart3_status_isr+0x54>
    337a:	nop
    337c:	.word	0x4006d000
    3380:	.word	0x1fff182c
    3384:	.word	0x1fff182d
    3388:	.word	0x1fff1858
    338c:	.word	0x1fff1828
    3390:	.word	0x1fff1899
    3394:	.word	0x1fff189c
    3398:	.word	0x1fff1898
    339c:	.word	0x1fff18a0
    33a0:	.word	0x1fff1830

000033a4 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    33a4:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    33a6:	ldr	r4, [pc, #64]	; (33e8 <fault_isr+0x44>)
    33a8:	b.n	33bc <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    33aa:	ldr	r3, [r4, #0]
    33ac:	lsls	r1, r3, #21
    33ae:	bmi.n	33cc <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    33b0:	ldr	r3, [r4, #0]
    33b2:	lsls	r2, r3, #20
    33b4:	bmi.n	33d6 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    33b6:	ldr	r3, [r4, #0]
    33b8:	lsls	r3, r3, #19
    33ba:	bmi.n	33e0 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    33bc:	ldr	r3, [r4, #0]
    33be:	lsls	r0, r3, #13
    33c0:	bpl.n	33aa <fault_isr+0x6>
    33c2:	bl	23cc <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    33c6:	ldr	r3, [r4, #0]
    33c8:	lsls	r1, r3, #21
    33ca:	bpl.n	33b0 <fault_isr+0xc>
    33cc:	bl	34b8 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    33d0:	ldr	r3, [r4, #0]
    33d2:	lsls	r2, r3, #20
    33d4:	bpl.n	33b6 <fault_isr+0x12>
    33d6:	bl	31a0 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    33da:	ldr	r3, [r4, #0]
    33dc:	lsls	r3, r3, #19
    33de:	bpl.n	33bc <fault_isr+0x18>
    33e0:	bl	37b8 <uart2_status_isr>
    33e4:	b.n	33bc <fault_isr+0x18>
    33e6:	nop
    33e8:	.word	0x40048034

000033ec <unused_isr>:
	}
}

void unused_isr(void)
{
    33ec:	push	{r3, lr}
	fault_isr();
    33ee:	bl	33a4 <fault_isr>
    33f2:	nop

000033f4 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    33f4:	ldr	r3, [pc, #4]	; (33fc <startup_early_hook+0x8>)
    33f6:	movs	r2, #16
    33f8:	strh	r2, [r3, #0]
    33fa:	bx	lr
    33fc:	.word	0x40052000

00003400 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3400:	bx	lr
    3402:	nop

00003404 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3404:	ldr	r1, [pc, #36]	; (342c <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3406:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3408:	ldr	r3, [r1, #0]
	if (incr != 0) {
    340a:	cbz	r0, 341a <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    340c:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    340e:	add	r0, r3
    3410:	sub.w	r2, r2, #8192	; 0x2000
    3414:	cmp	r0, r2
    3416:	bcs.n	341e <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3418:	str	r0, [r1, #0]
	}
	return prev;
    341a:	mov	r0, r3
}
    341c:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    341e:	bl	3a8c <__errno>
    3422:	movs	r3, #12
    3424:	str	r3, [r0, #0]
			return (void *)-1;
    3426:	mov.w	r0, #4294967295
    342a:	pop	{r3, pc}
    342c:	.word	0x1fff0c58

00003430 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    3430:	ldr	r2, [pc, #32]	; (3454 <kinetis_hsrun_disable+0x24>)
    3432:	ldrb	r3, [r2, #0]
    3434:	cmp	r3, #128	; 0x80
    3436:	beq.n	343c <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3438:	movs	r0, #0
}
    343a:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    343c:	ldr	r1, [pc, #24]	; (3458 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    343e:	ldr	r3, [pc, #28]	; (345c <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3440:	ldr	r0, [pc, #28]	; (3460 <kinetis_hsrun_disable+0x30>)
    3442:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3444:	movs	r1, #0
    3446:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3448:	ldrb	r3, [r2, #0]
    344a:	cmp	r3, #128	; 0x80
    344c:	beq.n	3448 <kinetis_hsrun_disable+0x18>
		return 1;
    344e:	movs	r0, #1
    3450:	bx	lr
    3452:	nop
    3454:	.word	0x4007e003
    3458:	.word	0x40048044
    345c:	.word	0x4007e001
    3460:	.word	0x22280000

00003464 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3464:	ldr	r2, [pc, #36]	; (348c <kinetis_hsrun_enable+0x28>)
    3466:	ldrb	r3, [r2, #0]
    3468:	cmp	r3, #1
    346a:	beq.n	3470 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    346c:	movs	r0, #0
}
    346e:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3470:	add.w	r3, r3, #1073741824	; 0x40000000
    3474:	add.w	r3, r3, #516096	; 0x7e000
    3478:	movs	r1, #96	; 0x60
    347a:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    347c:	ldrb	r3, [r2, #0]
    347e:	cmp	r3, #128	; 0x80
    3480:	bne.n	347c <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3482:	ldr	r3, [pc, #12]	; (3490 <kinetis_hsrun_enable+0x2c>)
    3484:	ldr	r2, [pc, #12]	; (3494 <kinetis_hsrun_enable+0x30>)
    3486:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3488:	movs	r0, #1
    348a:	bx	lr
    348c:	.word	0x4007e003
    3490:	.word	0x40048044
    3494:	.word	0x02060000

00003498 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3498:	ldr	r2, [pc, #20]	; (34b0 <serial_available+0x18>)
	tail = rx_buffer_tail;
    349a:	ldr	r3, [pc, #24]	; (34b4 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    349c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    349e:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    34a0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    34a2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    34a4:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    34a6:	it	cc
    34a8:	addcc	r0, #64	; 0x40
    34aa:	subs	r0, r0, r3
}
    34ac:	bx	lr
    34ae:	nop
    34b0:	.word	0x1fff18a8
    34b4:	.word	0x1fff18a9

000034b8 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    34b8:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    34ba:	ldr	r3, [pc, #224]	; (359c <uart0_status_isr+0xe4>)
    34bc:	ldrb	r2, [r3, #4]
    34be:	tst.w	r2, #48	; 0x30
    34c2:	beq.n	351e <uart0_status_isr+0x66>
		__disable_irq();
    34c4:	cpsid	i
		avail = UART0_RCFIFO;
    34c6:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    34c8:	and.w	r2, r1, #255	; 0xff
    34cc:	cmp	r1, #0
    34ce:	beq.n	354c <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    34d0:	cpsie	i
			head = rx_buffer_head;
    34d2:	ldr	r7, [pc, #204]	; (35a0 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    34d4:	ldr	r1, [pc, #204]	; (35a4 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    34d6:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    34d8:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    34da:	ldr	r6, [pc, #204]	; (35a8 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    34dc:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    34de:	uxtb	r0, r0
			tail = rx_buffer_tail;
    34e0:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    34e2:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    34e4:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    34e6:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    34e8:	it	cs
    34ea:	movcs	r3, #0
				if (newhead != tail) {
    34ec:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    34ee:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    34f2:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    34f4:	itt	ne
    34f6:	strbne	r1, [r6, r3]
    34f8:	movne	r0, r3
				}
			} while (--avail > 0);
    34fa:	ands.w	r2, r2, #255	; 0xff
    34fe:	bne.n	34e2 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3500:	ldr	r3, [pc, #168]	; (35ac <uart0_status_isr+0xf4>)
    3502:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3504:	uxtb	r2, r0
    3506:	strb	r2, [r7, #0]
			if (rts_pin) {
    3508:	cbz	r3, 351e <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    350a:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    350c:	itet	cc
    350e:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3512:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3514:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3516:	cmp	r0, #39	; 0x27
    3518:	itt	gt
    351a:	movgt	r2, #1
    351c:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    351e:	ldr	r1, [pc, #124]	; (359c <uart0_status_isr+0xe4>)
    3520:	ldrb	r2, [r1, #3]
    3522:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3524:	lsls	r5, r2, #24
    3526:	bmi.n	3556 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3528:	lsls	r2, r2, #25
    352a:	bpl.n	3548 <uart0_status_isr+0x90>
    352c:	ldr	r3, [pc, #108]	; (359c <uart0_status_isr+0xe4>)
    352e:	ldrb	r3, [r3, #4]
    3530:	lsls	r3, r3, #25
    3532:	bpl.n	3548 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3534:	ldr	r3, [pc, #120]	; (35b0 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3536:	ldr	r1, [pc, #124]	; (35b4 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3538:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    353a:	movs	r2, #0
    353c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    353e:	cbz	r3, 3542 <uart0_status_isr+0x8a>
    3540:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3542:	ldr	r3, [pc, #88]	; (359c <uart0_status_isr+0xe4>)
    3544:	movs	r2, #60	; 0x3c
    3546:	strb	r2, [r3, #3]
	}
}
    3548:	pop	{r4, r5, r6, r7}
    354a:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    354c:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    354e:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3550:	strb	r2, [r3, #17]
			__enable_irq();
    3552:	cpsie	i
    3554:	b.n	351e <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3556:	ldrb	r3, [r1, #4]
    3558:	lsls	r4, r3, #24
    355a:	bpl.n	3528 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    355c:	ldr	r3, [pc, #88]	; (35b8 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    355e:	ldr	r6, [pc, #92]	; (35bc <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3560:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3562:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3564:	uxtb	r4, r4
		tail = tx_buffer_tail;
    3566:	uxtb	r3, r3
		do {
			if (tail == head) break;
    3568:	cmp	r4, r3
    356a:	beq.n	358a <uart0_status_isr+0xd2>
    356c:	ldr	r5, [pc, #80]	; (35c0 <uart0_status_isr+0x108>)
    356e:	b.n	3574 <uart0_status_isr+0xbc>
    3570:	cmp	r3, r4
    3572:	beq.n	358a <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3574:	adds	r3, #1
    3576:	cmp	r3, #64	; 0x40
    3578:	it	cs
    357a:	movcs	r3, #0
			avail = UART0_S1;
    357c:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    357e:	ldrb	r0, [r5, r3]
    3580:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3582:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3584:	ldrb	r0, [r1, #20]
    3586:	cmp	r0, #7
    3588:	bls.n	3570 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    358a:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    358c:	ldr	r1, [pc, #12]	; (359c <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    358e:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3590:	ldrb	r3, [r1, #4]
    3592:	lsls	r0, r3, #24
    3594:	itt	mi
    3596:	movmi	r3, #124	; 0x7c
    3598:	strbmi	r3, [r1, #3]
    359a:	b.n	3528 <uart0_status_isr+0x70>
    359c:	.word	0x4006a000
    35a0:	.word	0x1fff18a8
    35a4:	.word	0x1fff18a9
    35a8:	.word	0x1fff18ec
    35ac:	.word	0x1fff18a4
    35b0:	.word	0x1fff1930
    35b4:	.word	0x1fff192c
    35b8:	.word	0x1fff1934
    35bc:	.word	0x1fff192d
    35c0:	.word	0x1fff18ac

000035c4 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    35c4:	ldr	r2, [pc, #20]	; (35dc <serial6_available+0x18>)
	tail = rx_buffer_tail;
    35c6:	ldr	r3, [pc, #24]	; (35e0 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    35c8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    35ca:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    35cc:	uxtb	r0, r0
	tail = rx_buffer_tail;
    35ce:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    35d0:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    35d2:	it	cc
    35d4:	addcc	r0, #64	; 0x40
    35d6:	subs	r0, r0, r3
}
    35d8:	bx	lr
    35da:	nop
    35dc:	.word	0x1fff193c
    35e0:	.word	0x1fff193d

000035e4 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    35e4:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    35e6:	ldr	r3, [pc, #176]	; (3698 <lpuart0_status_isr+0xb4>)
    35e8:	ldr	r2, [r3, #4]
    35ea:	lsls	r4, r2, #10
    35ec:	bpl.n	362e <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    35ee:	ldr	r0, [pc, #172]	; (369c <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    35f0:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    35f2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    35f4:	ldr	r1, [pc, #168]	; (36a0 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    35f6:	adds	r3, #1
    35f8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    35fa:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    35fc:	it	gt
    35fe:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3600:	cmp	r3, r1
    3602:	beq.n	360e <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    3604:	ldr	r4, [pc, #156]	; (36a4 <lpuart0_status_isr+0xc0>)
    3606:	uxtb	r2, r2
			rx_buffer_head = head;
    3608:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    360a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    360c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    360e:	ldr	r2, [pc, #152]	; (36a8 <lpuart0_status_isr+0xc4>)
    3610:	ldr	r1, [r2, #0]
    3612:	cbz	r1, 362e <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3614:	ldr	r2, [pc, #148]	; (36ac <lpuart0_status_isr+0xc8>)
    3616:	ldrb	r2, [r2, #0]
    3618:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    361a:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    361c:	itet	cc
    361e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3622:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    3624:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3626:	cmp	r3, #39	; 0x27
    3628:	itt	gt
    362a:	movgt	r3, #1
    362c:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    362e:	ldr	r2, [pc, #104]	; (3698 <lpuart0_status_isr+0xb4>)
    3630:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    3632:	lsls	r0, r3, #8
    3634:	bpl.n	363c <lpuart0_status_isr+0x58>
    3636:	ldr	r2, [r2, #4]
    3638:	lsls	r1, r2, #8
    363a:	bmi.n	3660 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    363c:	lsls	r2, r3, #9
    363e:	bpl.n	365c <lpuart0_status_isr+0x78>
    3640:	ldr	r3, [pc, #84]	; (3698 <lpuart0_status_isr+0xb4>)
    3642:	ldr	r3, [r3, #4]
    3644:	lsls	r3, r3, #9
    3646:	bpl.n	365c <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3648:	ldr	r3, [pc, #100]	; (36b0 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    364a:	ldr	r1, [pc, #104]	; (36b4 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    364c:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    364e:	movs	r2, #0
    3650:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3652:	cbz	r3, 3656 <lpuart0_status_isr+0x72>
    3654:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    3656:	ldr	r3, [pc, #96]	; (36b8 <lpuart0_status_isr+0xd4>)
    3658:	movs	r2, #0
    365a:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    365c:	pop	{r4, r5}
    365e:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3660:	ldr	r2, [pc, #88]	; (36bc <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    3662:	ldr	r1, [pc, #72]	; (36ac <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    3664:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    3666:	ldrb	r2, [r1, #0]
    3668:	uxtb	r2, r2
		if (head == tail) {
    366a:	cmp	r0, r2
    366c:	beq.n	368a <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    366e:	adds	r2, #1
    3670:	cmp	r2, #39	; 0x27
    3672:	itt	hi
    3674:	movhi	r0, #0
    3676:	movhi	r2, r0
			n = tx_buffer[tail];
    3678:	ldr	r5, [pc, #68]	; (36c0 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    367a:	ldr	r4, [pc, #28]	; (3698 <lpuart0_status_isr+0xb4>)
    367c:	it	ls
    367e:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3680:	ldrb	r2, [r5, r2]
    3682:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    3684:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    3686:	strb	r0, [r1, #0]
    3688:	b.n	363c <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    368a:	ldr	r0, [pc, #56]	; (36c4 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    368c:	ldr	r2, [pc, #40]	; (36b8 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    368e:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3690:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    3692:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    3694:	str	r1, [r2, #0]
    3696:	b.n	363c <lpuart0_status_isr+0x58>
    3698:	.word	0x400c4000
    369c:	.word	0x1fff193c
    36a0:	.word	0x1fff193d
    36a4:	.word	0x1fff1968
    36a8:	.word	0x1fff1938
    36ac:	.word	0x1fff19a9
    36b0:	.word	0x1fff19ac
    36b4:	.word	0x1fff19a8
    36b8:	.word	0x43880158
    36bc:	.word	0x1fff19b0
    36c0:	.word	0x1fff1940
    36c4:	.word	0x4388015c

000036c8 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    36c8:	push	{r4, lr}
    36ca:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    36cc:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    36ce:	bl	3430 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    36d2:	ldr	r2, [pc, #96]	; (3734 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    36d4:	ldr	r3, [pc, #96]	; (3738 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    36d6:	ldr	r1, [pc, #100]	; (373c <usb_init_serialnumber+0x74>)
    36d8:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    36da:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    36dc:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    36de:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    36e0:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    36e2:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    36e4:	ldrb	r3, [r2, #0]
    36e6:	lsls	r3, r3, #24
    36e8:	bpl.n	36e4 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    36ea:	ldr	r3, [pc, #84]	; (3740 <usb_init_serialnumber+0x78>)
    36ec:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    36ee:	bl	3464 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    36f2:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    36f4:	ldr	r3, [pc, #76]	; (3744 <usb_init_serialnumber+0x7c>)
    36f6:	cmp	r4, r3
    36f8:	itt	ls
    36fa:	addls.w	r4, r4, r4, lsl #2
    36fe:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    3700:	mov	r0, r4
    3702:	ldr	r4, [pc, #68]	; (3748 <usb_init_serialnumber+0x80>)
    3704:	add	r1, sp, #4
    3706:	movs	r2, #10
    3708:	bl	374c <ultoa>
    370c:	add	r1, sp, #4
    370e:	mov	r0, r4
	for (i=0; i<10; i++) {
    3710:	movs	r3, #0
		char c = buf[i];
    3712:	ldrb.w	r2, [r1], #1
    3716:	adds	r3, #1
		if (!c) break;
    3718:	cbz	r2, 372a <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    371a:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    371c:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3720:	bne.n	3712 <usb_init_serialnumber+0x4a>
    3722:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3724:	strb	r3, [r4, #0]
}
    3726:	add	sp, #16
    3728:	pop	{r4, pc}
    372a:	lsls	r3, r3, #1
    372c:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    372e:	strb	r3, [r4, #0]
}
    3730:	add	sp, #16
    3732:	pop	{r4, pc}
    3734:	.word	0x40020004
    3738:	.word	0x40020000
    373c:	.word	0x41070000
    3740:	.word	0x4002000c
    3744:	.word	0x0098967f
    3748:	.word	0x1fff0d3c

0000374c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    374c:	push	{r4, r5, r6, r7}
    374e:	subs	r5, r1, #1
    3750:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3752:	movs	r4, #0
    3754:	b.n	3758 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3756:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3758:	udiv	r3, r0, r2
    375c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3760:	cmp	r0, #9
    3762:	add.w	r7, r0, #48	; 0x30
    3766:	itet	hi
    3768:	addhi	r0, #55	; 0x37
    376a:	uxtbls	r0, r7
    376c:	uxtbhi	r0, r0
    376e:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3772:	mov	r0, r3
    3774:	cmp	r3, #0
    3776:	bne.n	3756 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3778:	adds	r2, r1, r4
    377a:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    377c:	cbz	r4, 3792 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    377e:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3780:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3784:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3786:	adds	r3, #1
    3788:	subs	r0, r4, r3
    378a:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    378c:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3790:	blt.n	377e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3792:	mov	r0, r1
    3794:	pop	{r4, r5, r6, r7}
    3796:	bx	lr

00003798 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3798:	ldr	r2, [pc, #20]	; (37b0 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    379a:	ldr	r3, [pc, #24]	; (37b4 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    379c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    379e:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    37a0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    37a2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    37a4:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    37a6:	it	cc
    37a8:	addcc	r0, #64	; 0x40
    37aa:	subs	r0, r0, r3
}
    37ac:	bx	lr
    37ae:	nop
    37b0:	.word	0x1fff19b8
    37b4:	.word	0x1fff19b9

000037b8 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    37b8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    37ba:	ldr	r3, [pc, #172]	; (3868 <uart2_status_isr+0xb0>)
    37bc:	ldrb	r2, [r3, #4]
    37be:	lsls	r4, r2, #26
    37c0:	bpl.n	3802 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    37c2:	ldr	r0, [pc, #168]	; (386c <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    37c4:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    37c6:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    37c8:	ldr	r1, [pc, #164]	; (3870 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    37ca:	adds	r3, #1
    37cc:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    37ce:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    37d0:	it	gt
    37d2:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    37d4:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    37d6:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    37d8:	beq.n	37e2 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    37da:	ldr	r4, [pc, #152]	; (3874 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    37dc:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    37de:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    37e0:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    37e2:	ldr	r2, [pc, #148]	; (3878 <uart2_status_isr+0xc0>)
    37e4:	ldr	r1, [r2, #0]
    37e6:	cbz	r1, 3802 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    37e8:	ldr	r2, [pc, #144]	; (387c <uart2_status_isr+0xc4>)
    37ea:	ldrb	r2, [r2, #0]
    37ec:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    37ee:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    37f0:	itet	cc
    37f2:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    37f6:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    37f8:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    37fa:	cmp	r3, #39	; 0x27
    37fc:	itt	gt
    37fe:	movgt	r3, #1
    3800:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    3802:	ldr	r2, [pc, #100]	; (3868 <uart2_status_isr+0xb0>)
    3804:	ldrb	r3, [r2, #3]
    3806:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3808:	lsls	r0, r3, #24
    380a:	bmi.n	3830 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    380c:	lsls	r2, r3, #25
    380e:	bpl.n	382c <uart2_status_isr+0x74>
    3810:	ldr	r3, [pc, #84]	; (3868 <uart2_status_isr+0xb0>)
    3812:	ldrb	r3, [r3, #4]
    3814:	lsls	r3, r3, #25
    3816:	bpl.n	382c <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3818:	ldr	r3, [pc, #100]	; (3880 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    381a:	ldr	r1, [pc, #104]	; (3884 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    381c:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    381e:	movs	r2, #0
    3820:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3822:	cbz	r3, 3826 <uart2_status_isr+0x6e>
    3824:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3826:	ldr	r3, [pc, #64]	; (3868 <uart2_status_isr+0xb0>)
    3828:	movs	r2, #44	; 0x2c
    382a:	strb	r2, [r3, #3]
	}
}
    382c:	pop	{r4, r5}
    382e:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3830:	ldrb	r1, [r2, #4]
    3832:	lsls	r1, r1, #24
    3834:	bpl.n	380c <uart2_status_isr+0x54>
		head = tx_buffer_head;
    3836:	ldr	r1, [pc, #80]	; (3888 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3838:	ldr	r0, [pc, #64]	; (387c <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    383a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    383c:	ldrb	r1, [r0, #0]
    383e:	uxtb	r1, r1
		if (head == tail) {
    3840:	cmp	r4, r1
    3842:	beq.n	3860 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3844:	adds	r2, r1, #1
    3846:	cmp	r2, #39	; 0x27
    3848:	itt	hi
    384a:	movhi	r1, #0
    384c:	movhi	r2, r1
			n = tx_buffer[tail];
    384e:	ldr	r5, [pc, #60]	; (388c <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3850:	ldr	r4, [pc, #20]	; (3868 <uart2_status_isr+0xb0>)
    3852:	it	ls
    3854:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3856:	ldrb	r2, [r5, r2]
    3858:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    385a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    385c:	strb	r1, [r0, #0]
    385e:	b.n	380c <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    3860:	movs	r1, #108	; 0x6c
    3862:	strb	r1, [r2, #3]
    3864:	b.n	380c <uart2_status_isr+0x54>
    3866:	nop
    3868:	.word	0x4006c000
    386c:	.word	0x1fff19b8
    3870:	.word	0x1fff19b9
    3874:	.word	0x1fff19e4
    3878:	.word	0x1fff19b4
    387c:	.word	0x1fff1a25
    3880:	.word	0x1fff1a28
    3884:	.word	0x1fff1a24
    3888:	.word	0x1fff1a2c
    388c:	.word	0x1fff19bc

00003890 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    3890:	bx	lr
    3892:	nop

00003894 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    3894:	bx	lr
    3896:	nop

00003898 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    3898:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    389a:	mrs	r2, PRIMASK
		__disable_irq();
    389e:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    38a0:	ldrb	r3, [r0, #29]
    38a2:	cbnz	r3, 38b2 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    38a4:	ldrb	r1, [r0, #28]
    38a6:	cmp	r1, #1
    38a8:	beq.n	38bc <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    38aa:	cmp	r1, #3
    38ac:	beq.n	38d0 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    38ae:	movs	r3, #1
    38b0:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    38b2:	cbnz	r2, 38b6 <EventResponder::triggerEventNotImmediate()+0x1e>
    38b4:	cpsie	i
	}
	enableInterrupts(irq);
}
    38b6:	ldr.w	r4, [sp], #4
    38ba:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    38bc:	ldr	r4, [pc, #68]	; (3904 <EventResponder::triggerEventNotImmediate()+0x6c>)
    38be:	ldr	r1, [r4, #0]
    38c0:	cbz	r1, 38ec <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    38c2:	ldr	r1, [pc, #68]	; (3908 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    38c4:	str	r3, [r0, #20]
				_prev = lastYield;
    38c6:	ldr	r3, [r1, #0]
    38c8:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    38ca:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    38cc:	str	r0, [r3, #20]
    38ce:	b.n	38ae <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    38d0:	ldr	r4, [pc, #56]	; (390c <EventResponder::triggerEventNotImmediate()+0x74>)
    38d2:	ldr	r1, [r4, #0]
    38d4:	cbz	r1, 38f8 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    38d6:	ldr	r1, [pc, #56]	; (3910 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    38d8:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    38da:	ldr	r3, [r1, #0]
    38dc:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    38de:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    38e0:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    38e2:	ldr	r3, [pc, #48]	; (3914 <EventResponder::triggerEventNotImmediate()+0x7c>)
    38e4:	mov.w	r1, #268435456	; 0x10000000
    38e8:	str	r1, [r3, #0]
    38ea:	b.n	38ae <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    38ec:	ldr	r3, [pc, #24]	; (3908 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    38ee:	str	r1, [r0, #20]
				_prev = nullptr;
    38f0:	str	r1, [r0, #24]
				firstYield = this;
    38f2:	str	r0, [r4, #0]
				lastYield = this;
    38f4:	str	r0, [r3, #0]
    38f6:	b.n	38ae <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    38f8:	ldr	r3, [pc, #20]	; (3910 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    38fa:	str	r1, [r0, #20]
				_prev = nullptr;
    38fc:	str	r1, [r0, #24]
				firstInterrupt = this;
    38fe:	str	r0, [r4, #0]
				lastInterrupt = this;
    3900:	str	r0, [r3, #0]
    3902:	b.n	38e2 <EventResponder::triggerEventNotImmediate()+0x4a>
    3904:	.word	0x1fff1a40
    3908:	.word	0x1fff1a3c
    390c:	.word	0x1fff1a30
    3910:	.word	0x1fff1a34
    3914:	.word	0xe000ed04

00003918 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    3918:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    391a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    391c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    391e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3920:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3922:	beq.n	392c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    3924:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3928:	b.w	3898 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    392c:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    392e:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3932:	bx	r3

00003934 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3934:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3936:	mrs	r2, PRIMASK
		__disable_irq();
    393a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    393c:	ldr	r4, [pc, #48]	; (3970 <EventResponder::runFromInterrupt()+0x3c>)
    393e:	ldr	r0, [r4, #0]
		if (first) {
    3940:	cbz	r0, 3964 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3942:	ldr	r6, [pc, #48]	; (3974 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3944:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3946:	ldr	r3, [r0, #20]
    3948:	str	r3, [r4, #0]
			if (firstInterrupt) {
    394a:	cbz	r3, 396a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    394c:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    394e:	cbnz	r2, 3952 <EventResponder::runFromInterrupt()+0x1e>
    3950:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3952:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3954:	ldr	r3, [r0, #8]
    3956:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3958:	mrs	r2, PRIMASK
		__disable_irq();
    395c:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    395e:	ldr	r0, [r4, #0]
		if (first) {
    3960:	cmp	r0, #0
    3962:	bne.n	3946 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3964:	cbnz	r2, 3968 <EventResponder::runFromInterrupt()+0x34>
    3966:	cpsie	i
    3968:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    396a:	str	r3, [r6, #0]
    396c:	b.n	394e <EventResponder::runFromInterrupt()+0x1a>
    396e:	nop
    3970:	.word	0x1fff1a30
    3974:	.word	0x1fff1a34

00003978 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3978:	b.w	3934 <EventResponder::runFromInterrupt()>

0000397c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    397c:	ldr	r2, [pc, #96]	; (39e0 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    397e:	push	{r4, r5}
	if (listActive == nullptr) {
    3980:	ldr	r4, [r2, #0]
    3982:	cmp	r4, #0
    3984:	beq.n	39d6 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    3986:	ldr	r3, [r0, #0]
    3988:	ldr	r1, [r4, #0]
    398a:	cmp	r3, r1
    398c:	bcs.n	39ac <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    398e:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    3990:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    3992:	str	r4, [r0, #8]
		_prev = nullptr;
    3994:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3996:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    3998:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    399a:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    399c:	movs	r3, #2
    399e:	strb	r3, [r0, #20]
}
    39a0:	pop	{r4, r5}
    39a2:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    39a4:	ldr	r1, [r2, #0]
    39a6:	cmp	r3, r1
    39a8:	mov	r4, r2
    39aa:	bcc.n	39be <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    39ac:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    39ae:	subs	r3, r3, r1
    39b0:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    39b2:	cmp	r2, #0
    39b4:	bne.n	39a4 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    39b6:	str	r2, [r0, #8]
		_prev = timer;
    39b8:	str	r4, [r0, #12]
		timer->_next = this;
    39ba:	str	r0, [r4, #8]
    39bc:	b.n	399c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    39be:	ldr	r2, [r2, #12]
    39c0:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    39c2:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    39c4:	str	r0, [r4, #12]
				_prev->_next = this;
    39c6:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    39c8:	subs	r3, r1, r3
				_state = TimerActive;
    39ca:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    39cc:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    39ce:	str	r3, [r4, #0]
				_state = TimerActive;
    39d0:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    39d2:	pop	{r4, r5}
    39d4:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    39d6:	str	r4, [r0, #8]
		_prev = nullptr;
    39d8:	str	r4, [r0, #12]
		listActive = this;
    39da:	str	r0, [r2, #0]
    39dc:	b.n	399c <MillisTimer::addToActiveList()+0x20>
    39de:	nop
    39e0:	.word	0x1fff1a38

000039e4 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    39e4:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    39e6:	ldr	r6, [pc, #136]	; (3a70 <MillisTimer::runFromTimer()+0x8c>)
    39e8:	ldr	r4, [r6, #0]
	while (timer) {
    39ea:	cbz	r4, 3a38 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    39ec:	ldr	r3, [r4, #0]
    39ee:	cmp	r3, #0
    39f0:	bne.n	3a68 <MillisTimer::runFromTimer()+0x84>
    39f2:	ldr	r7, [pc, #128]	; (3a74 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    39f4:	mov	r5, r3
    39f6:	b.n	3a02 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    39f8:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    39fa:	cbz	r4, 3a38 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    39fc:	ldr	r3, [r4, #0]
    39fe:	cmp	r3, #0
    3a00:	bne.n	3a68 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    3a02:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    3a04:	cbz	r3, 3a08 <MillisTimer::runFromTimer()+0x24>
    3a06:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    3a08:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    3a0a:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3a0c:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    3a0e:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3a10:	ldr	r3, [r3, #0]
    3a12:	cmp	r3, r7
    3a14:	bne.n	3a5a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3a16:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3a18:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3a1a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3a1c:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    3a1e:	beq.n	3a62 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3a20:	bl	3898 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    3a24:	ldr	r3, [r4, #4]
    3a26:	cmp	r3, #0
    3a28:	beq.n	39f8 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    3a2a:	str	r3, [r4, #0]
				timer->addToActiveList();
    3a2c:	mov	r0, r4
    3a2e:	bl	397c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    3a32:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3a34:	cmp	r4, #0
    3a36:	bne.n	39fc <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3a38:	mrs	r3, PRIMASK
		__disable_irq();
    3a3c:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3a3e:	ldr	r2, [pc, #56]	; (3a78 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3a40:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3a42:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3a44:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    3a46:	cbnz	r3, 3a4a <MillisTimer::runFromTimer()+0x66>
    3a48:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    3a4a:	cbz	r0, 3a58 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    3a4c:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    3a4e:	bl	397c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    3a52:	mov	r0, r4
    3a54:	cmp	r0, #0
    3a56:	bne.n	3a4c <MillisTimer::runFromTimer()+0x68>
    3a58:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3a5a:	mov	r2, r4
    3a5c:	movs	r1, #0
    3a5e:	blx	r3
    3a60:	b.n	3a24 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3a62:	ldr	r3, [r0, #8]
    3a64:	blx	r3
    3a66:	b.n	3a24 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    3a68:	subs	r3, #1
    3a6a:	str	r3, [r4, #0]
			break;
    3a6c:	b.n	3a38 <MillisTimer::runFromTimer()+0x54>
    3a6e:	nop
    3a70:	.word	0x1fff1a38
    3a74:	.word	0x00003919
    3a78:	.word	0x1fff1a48

00003a7c <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    3a7c:	ldr	r2, [pc, #8]	; (3a88 <systick_isr+0xc>)
    3a7e:	ldr	r3, [r2, #0]
    3a80:	adds	r3, #1
    3a82:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    3a84:	b.w	39e4 <MillisTimer::runFromTimer()>
    3a88:	.word	0x1fff15cc

00003a8c <__errno>:
    3a8c:	ldr	r3, [pc, #4]	; (3a94 <__errno+0x8>)
    3a8e:	ldr	r0, [r3, #0]
    3a90:	bx	lr
    3a92:	nop
    3a94:	.word	0x1fff1180

00003a98 <__libc_init_array>:
    3a98:	push	{r4, r5, r6, lr}
    3a9a:	ldr	r6, [pc, #60]	; (3ad8 <__libc_init_array+0x40>)
    3a9c:	ldr	r5, [pc, #60]	; (3adc <__libc_init_array+0x44>)
    3a9e:	subs	r6, r6, r5
    3aa0:	asrs	r6, r6, #2
    3aa2:	it	ne
    3aa4:	movne	r4, #0
    3aa6:	beq.n	3ab4 <__libc_init_array+0x1c>
    3aa8:	adds	r4, #1
    3aaa:	ldr.w	r3, [r5], #4
    3aae:	blx	r3
    3ab0:	cmp	r6, r4
    3ab2:	bne.n	3aa8 <__libc_init_array+0x10>
    3ab4:	ldr	r6, [pc, #40]	; (3ae0 <__libc_init_array+0x48>)
    3ab6:	ldr	r5, [pc, #44]	; (3ae4 <__libc_init_array+0x4c>)
    3ab8:	subs	r6, r6, r5
    3aba:	bl	47c8 <_init>
    3abe:	asrs	r6, r6, #2
    3ac0:	it	ne
    3ac2:	movne	r4, #0
    3ac4:	beq.n	3ad4 <__libc_init_array+0x3c>
    3ac6:	adds	r4, #1
    3ac8:	ldr.w	r3, [r5], #4
    3acc:	blx	r3
    3ace:	cmp	r6, r4
    3ad0:	bne.n	3ac6 <__libc_init_array+0x2e>
    3ad2:	pop	{r4, r5, r6, pc}
    3ad4:	pop	{r4, r5, r6, pc}
    3ad6:	nop
    3ad8:	.word	0x000047d4
    3adc:	.word	0x000047d4
    3ae0:	.word	0x000047e0
    3ae4:	.word	0x000047d4

00003ae8 <malloc>:
    3ae8:	ldr	r3, [pc, #8]	; (3af4 <malloc+0xc>)
    3aea:	mov	r1, r0
    3aec:	ldr	r0, [r3, #0]
    3aee:	b.w	3af8 <_malloc_r>
    3af2:	nop
    3af4:	.word	0x1fff1180

00003af8 <_malloc_r>:
    3af8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3afc:	add.w	r5, r1, #11
    3b00:	cmp	r5, #22
    3b02:	sub	sp, #12
    3b04:	mov	r6, r0
    3b06:	bls.w	3c48 <_malloc_r+0x150>
    3b0a:	bics.w	r5, r5, #7
    3b0e:	bmi.w	3c90 <_malloc_r+0x198>
    3b12:	cmp	r1, r5
    3b14:	bhi.w	3c90 <_malloc_r+0x198>
    3b18:	bl	4104 <__malloc_lock>
    3b1c:	cmp.w	r5, #504	; 0x1f8
    3b20:	bcc.w	405c <_malloc_r+0x564>
    3b24:	lsrs	r3, r5, #9
    3b26:	beq.w	3c9e <_malloc_r+0x1a6>
    3b2a:	cmp	r3, #4
    3b2c:	bhi.w	3e36 <_malloc_r+0x33e>
    3b30:	lsrs	r0, r5, #6
    3b32:	add.w	lr, r0, #57	; 0x39
    3b36:	mov.w	r3, lr, lsl #1
    3b3a:	adds	r0, #56	; 0x38
    3b3c:	ldr	r7, [pc, #784]	; (3e50 <_malloc_r+0x358>)
    3b3e:	add.w	r3, r7, r3, lsl #2
    3b42:	sub.w	r1, r3, #8
    3b46:	ldr	r4, [r3, #4]
    3b48:	cmp	r1, r4
    3b4a:	bne.n	3b5c <_malloc_r+0x64>
    3b4c:	b.n	3ca8 <_malloc_r+0x1b0>
    3b4e:	cmp	r2, #0
    3b50:	bge.w	3cac <_malloc_r+0x1b4>
    3b54:	ldr	r4, [r4, #12]
    3b56:	cmp	r1, r4
    3b58:	beq.w	3ca8 <_malloc_r+0x1b0>
    3b5c:	ldr	r3, [r4, #4]
    3b5e:	bic.w	r3, r3, #3
    3b62:	subs	r2, r3, r5
    3b64:	cmp	r2, #15
    3b66:	ble.n	3b4e <_malloc_r+0x56>
    3b68:	ldr	r1, [pc, #740]	; (3e50 <_malloc_r+0x358>)
    3b6a:	ldr	r4, [r7, #16]
    3b6c:	add.w	lr, r1, #8
    3b70:	cmp	r4, lr
    3b72:	beq.w	3edc <_malloc_r+0x3e4>
    3b76:	ldr	r3, [r4, #4]
    3b78:	bic.w	r3, r3, #3
    3b7c:	subs	r2, r3, r5
    3b7e:	cmp	r2, #15
    3b80:	bgt.w	3eb6 <_malloc_r+0x3be>
    3b84:	cmp	r2, #0
    3b86:	str.w	lr, [r1, #20]
    3b8a:	str.w	lr, [r1, #16]
    3b8e:	bge.w	3cce <_malloc_r+0x1d6>
    3b92:	cmp.w	r3, #512	; 0x200
    3b96:	bcs.w	3e68 <_malloc_r+0x370>
    3b9a:	lsrs	r3, r3, #3
    3b9c:	add.w	ip, r3, #1
    3ba0:	movs	r2, #1
    3ba2:	asrs	r3, r3, #2
    3ba4:	lsl.w	r3, r2, r3
    3ba8:	ldr	r2, [r1, #4]
    3baa:	ldr.w	r8, [r1, ip, lsl #3]
    3bae:	str.w	r8, [r4, #8]
    3bb2:	add.w	r9, r1, ip, lsl #3
    3bb6:	orrs	r2, r3
    3bb8:	sub.w	r3, r9, #8
    3bbc:	str	r3, [r4, #12]
    3bbe:	str	r2, [r1, #4]
    3bc0:	str.w	r4, [r1, ip, lsl #3]
    3bc4:	str.w	r4, [r8, #12]
    3bc8:	asrs	r3, r0, #2
    3bca:	movs	r4, #1
    3bcc:	lsls	r4, r3
    3bce:	cmp	r4, r2
    3bd0:	bhi.w	3ce8 <_malloc_r+0x1f0>
    3bd4:	tst	r4, r2
    3bd6:	bne.n	3be6 <_malloc_r+0xee>
    3bd8:	bic.w	r0, r0, #3
    3bdc:	lsls	r4, r4, #1
    3bde:	tst	r4, r2
    3be0:	add.w	r0, r0, #4
    3be4:	beq.n	3bdc <_malloc_r+0xe4>
    3be6:	add.w	r9, r7, r0, lsl #3
    3bea:	mov	ip, r9
    3bec:	mov	r8, r0
    3bee:	ldr.w	r1, [ip, #12]
    3bf2:	cmp	ip, r1
    3bf4:	bne.n	3c06 <_malloc_r+0x10e>
    3bf6:	b.n	3ee0 <_malloc_r+0x3e8>
    3bf8:	cmp	r2, #0
    3bfa:	bge.w	3f00 <_malloc_r+0x408>
    3bfe:	ldr	r1, [r1, #12]
    3c00:	cmp	ip, r1
    3c02:	beq.w	3ee0 <_malloc_r+0x3e8>
    3c06:	ldr	r3, [r1, #4]
    3c08:	bic.w	r3, r3, #3
    3c0c:	subs	r2, r3, r5
    3c0e:	cmp	r2, #15
    3c10:	ble.n	3bf8 <_malloc_r+0x100>
    3c12:	mov	r4, r1
    3c14:	ldr.w	ip, [r1, #12]
    3c18:	ldr.w	r8, [r4, #8]!
    3c1c:	adds	r3, r1, r5
    3c1e:	orr.w	r5, r5, #1
    3c22:	str	r5, [r1, #4]
    3c24:	orr.w	r1, r2, #1
    3c28:	str.w	ip, [r8, #12]
    3c2c:	mov	r0, r6
    3c2e:	str.w	r8, [ip, #8]
    3c32:	str	r3, [r7, #20]
    3c34:	str	r3, [r7, #16]
    3c36:	str.w	lr, [r3, #12]
    3c3a:	str.w	lr, [r3, #8]
    3c3e:	str	r1, [r3, #4]
    3c40:	str	r2, [r3, r2]
    3c42:	bl	4108 <__malloc_unlock>
    3c46:	b.n	3c88 <_malloc_r+0x190>
    3c48:	cmp	r1, #16
    3c4a:	bhi.n	3c90 <_malloc_r+0x198>
    3c4c:	bl	4104 <__malloc_lock>
    3c50:	movs	r5, #16
    3c52:	movs	r3, #6
    3c54:	movs	r0, #2
    3c56:	ldr	r7, [pc, #504]	; (3e50 <_malloc_r+0x358>)
    3c58:	add.w	r3, r7, r3, lsl #2
    3c5c:	sub.w	r2, r3, #8
    3c60:	ldr	r4, [r3, #4]
    3c62:	cmp	r4, r2
    3c64:	beq.w	3ef2 <_malloc_r+0x3fa>
    3c68:	ldr	r3, [r4, #4]
    3c6a:	ldr	r1, [r4, #12]
    3c6c:	ldr	r5, [r4, #8]
    3c6e:	bic.w	r3, r3, #3
    3c72:	add	r3, r4
    3c74:	mov	r0, r6
    3c76:	ldr	r2, [r3, #4]
    3c78:	str	r1, [r5, #12]
    3c7a:	orr.w	r2, r2, #1
    3c7e:	str	r5, [r1, #8]
    3c80:	str	r2, [r3, #4]
    3c82:	bl	4108 <__malloc_unlock>
    3c86:	adds	r4, #8
    3c88:	mov	r0, r4
    3c8a:	add	sp, #12
    3c8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c90:	movs	r4, #0
    3c92:	movs	r3, #12
    3c94:	mov	r0, r4
    3c96:	str	r3, [r6, #0]
    3c98:	add	sp, #12
    3c9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c9e:	movs	r3, #128	; 0x80
    3ca0:	mov.w	lr, #64	; 0x40
    3ca4:	movs	r0, #63	; 0x3f
    3ca6:	b.n	3b3c <_malloc_r+0x44>
    3ca8:	mov	r0, lr
    3caa:	b.n	3b68 <_malloc_r+0x70>
    3cac:	add	r3, r4
    3cae:	ldr	r1, [r4, #12]
    3cb0:	ldr	r2, [r3, #4]
    3cb2:	ldr	r5, [r4, #8]
    3cb4:	orr.w	r2, r2, #1
    3cb8:	str	r1, [r5, #12]
    3cba:	mov	r0, r6
    3cbc:	str	r5, [r1, #8]
    3cbe:	str	r2, [r3, #4]
    3cc0:	bl	4108 <__malloc_unlock>
    3cc4:	adds	r4, #8
    3cc6:	mov	r0, r4
    3cc8:	add	sp, #12
    3cca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3cce:	add	r3, r4
    3cd0:	mov	r0, r6
    3cd2:	ldr	r2, [r3, #4]
    3cd4:	orr.w	r2, r2, #1
    3cd8:	str	r2, [r3, #4]
    3cda:	bl	4108 <__malloc_unlock>
    3cde:	adds	r4, #8
    3ce0:	mov	r0, r4
    3ce2:	add	sp, #12
    3ce4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ce8:	ldr	r4, [r7, #8]
    3cea:	ldr	r3, [r4, #4]
    3cec:	bic.w	r8, r3, #3
    3cf0:	cmp	r8, r5
    3cf2:	bcc.n	3cfe <_malloc_r+0x206>
    3cf4:	rsb	r3, r5, r8
    3cf8:	cmp	r3, #15
    3cfa:	bgt.w	3e16 <_malloc_r+0x31e>
    3cfe:	ldr	r3, [pc, #340]	; (3e54 <_malloc_r+0x35c>)
    3d00:	ldr.w	r9, [pc, #352]	; 3e64 <_malloc_r+0x36c>
    3d04:	ldr	r2, [r3, #0]
    3d06:	ldr.w	r3, [r9]
    3d0a:	adds	r3, #1
    3d0c:	add	r2, r5
    3d0e:	add.w	sl, r4, r8
    3d12:	beq.w	3fd6 <_malloc_r+0x4de>
    3d16:	add.w	r2, r2, #4096	; 0x1000
    3d1a:	adds	r2, #15
    3d1c:	bic.w	r2, r2, #4080	; 0xff0
    3d20:	bic.w	r2, r2, #15
    3d24:	mov	r1, r2
    3d26:	mov	r0, r6
    3d28:	str	r2, [sp, #4]
    3d2a:	bl	410c <_sbrk_r>
    3d2e:	cmp.w	r0, #4294967295
    3d32:	mov	fp, r0
    3d34:	ldr	r2, [sp, #4]
    3d36:	beq.w	3fea <_malloc_r+0x4f2>
    3d3a:	cmp	sl, r0
    3d3c:	bhi.w	3f38 <_malloc_r+0x440>
    3d40:	ldr	r3, [pc, #276]	; (3e58 <_malloc_r+0x360>)
    3d42:	ldr	r1, [r3, #0]
    3d44:	cmp	sl, fp
    3d46:	add	r1, r2
    3d48:	str	r1, [r3, #0]
    3d4a:	beq.w	3ff4 <_malloc_r+0x4fc>
    3d4e:	ldr.w	r0, [r9]
    3d52:	ldr.w	lr, [pc, #272]	; 3e64 <_malloc_r+0x36c>
    3d56:	adds	r0, #1
    3d58:	ittet	ne
    3d5a:	rsbne	sl, sl, fp
    3d5e:	addne	r1, sl
    3d60:	streq.w	fp, [lr]
    3d64:	strne	r1, [r3, #0]
    3d66:	ands.w	r1, fp, #7
    3d6a:	beq.w	3f9c <_malloc_r+0x4a4>
    3d6e:	rsb	r0, r1, #8
    3d72:	rsb	r1, r1, #4096	; 0x1000
    3d76:	add	fp, r0
    3d78:	adds	r1, #8
    3d7a:	add	r2, fp
    3d7c:	ubfx	r2, r2, #0, #12
    3d80:	rsb	r9, r2, r1
    3d84:	mov	r1, r9
    3d86:	mov	r0, r6
    3d88:	str	r3, [sp, #4]
    3d8a:	bl	410c <_sbrk_r>
    3d8e:	adds	r3, r0, #1
    3d90:	ldr	r3, [sp, #4]
    3d92:	beq.w	4014 <_malloc_r+0x51c>
    3d96:	rsb	r2, fp, r0
    3d9a:	add	r2, r9
    3d9c:	orr.w	r2, r2, #1
    3da0:	ldr	r1, [r3, #0]
    3da2:	str.w	fp, [r7, #8]
    3da6:	add	r1, r9
    3da8:	cmp	r4, r7
    3daa:	str.w	r2, [fp, #4]
    3dae:	str	r1, [r3, #0]
    3db0:	ldr.w	r9, [pc, #164]	; 3e58 <_malloc_r+0x360>
    3db4:	beq.n	3de4 <_malloc_r+0x2ec>
    3db6:	cmp.w	r8, #15
    3dba:	bls.w	3fb8 <_malloc_r+0x4c0>
    3dbe:	ldr	r2, [r4, #4]
    3dc0:	sub.w	r3, r8, #12
    3dc4:	bic.w	r3, r3, #7
    3dc8:	adds	r0, r4, r3
    3dca:	and.w	r2, r2, #1
    3dce:	mov.w	lr, #5
    3dd2:	orrs	r2, r3
    3dd4:	cmp	r3, #15
    3dd6:	str	r2, [r4, #4]
    3dd8:	str.w	lr, [r0, #4]
    3ddc:	str.w	lr, [r0, #8]
    3de0:	bhi.w	401c <_malloc_r+0x524>
    3de4:	ldr	r3, [pc, #116]	; (3e5c <_malloc_r+0x364>)
    3de6:	ldr	r4, [r7, #8]
    3de8:	ldr	r2, [r3, #0]
    3dea:	cmp	r1, r2
    3dec:	it	hi
    3dee:	strhi	r1, [r3, #0]
    3df0:	ldr	r3, [pc, #108]	; (3e60 <_malloc_r+0x368>)
    3df2:	ldr	r2, [r3, #0]
    3df4:	cmp	r1, r2
    3df6:	ldr	r2, [r4, #4]
    3df8:	it	hi
    3dfa:	strhi	r1, [r3, #0]
    3dfc:	bic.w	r2, r2, #3
    3e00:	cmp	r5, r2
    3e02:	sub.w	r3, r2, r5
    3e06:	bhi.n	3e0c <_malloc_r+0x314>
    3e08:	cmp	r3, #15
    3e0a:	bgt.n	3e16 <_malloc_r+0x31e>
    3e0c:	mov	r0, r6
    3e0e:	bl	4108 <__malloc_unlock>
    3e12:	movs	r4, #0
    3e14:	b.n	3c88 <_malloc_r+0x190>
    3e16:	adds	r2, r4, r5
    3e18:	orr.w	r3, r3, #1
    3e1c:	orr.w	r5, r5, #1
    3e20:	str	r5, [r4, #4]
    3e22:	mov	r0, r6
    3e24:	str	r2, [r7, #8]
    3e26:	str	r3, [r2, #4]
    3e28:	bl	4108 <__malloc_unlock>
    3e2c:	adds	r4, #8
    3e2e:	mov	r0, r4
    3e30:	add	sp, #12
    3e32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e36:	cmp	r3, #20
    3e38:	bls.n	3f1e <_malloc_r+0x426>
    3e3a:	cmp	r3, #84	; 0x54
    3e3c:	bhi.w	3f88 <_malloc_r+0x490>
    3e40:	lsrs	r0, r5, #12
    3e42:	add.w	lr, r0, #111	; 0x6f
    3e46:	mov.w	r3, lr, lsl #1
    3e4a:	adds	r0, #110	; 0x6e
    3e4c:	b.n	3b3c <_malloc_r+0x44>
    3e4e:	nop
    3e50:	.word	0x1fff1184
    3e54:	.word	0x1fff1a54
    3e58:	.word	0x1fff1a58
    3e5c:	.word	0x1fff1a50
    3e60:	.word	0x1fff1a4c
    3e64:	.word	0x1fff1590
    3e68:	lsrs	r2, r3, #9
    3e6a:	cmp	r2, #4
    3e6c:	bls.n	3f2c <_malloc_r+0x434>
    3e6e:	cmp	r2, #20
    3e70:	bhi.w	3fda <_malloc_r+0x4e2>
    3e74:	add.w	r1, r2, #92	; 0x5c
    3e78:	lsls	r1, r1, #1
    3e7a:	adds	r2, #91	; 0x5b
    3e7c:	add.w	ip, r7, r1, lsl #2
    3e80:	ldr.w	r1, [r7, r1, lsl #2]
    3e84:	ldr.w	r8, [pc, #476]	; 4064 <_malloc_r+0x56c>
    3e88:	sub.w	ip, ip, #8
    3e8c:	cmp	ip, r1
    3e8e:	beq.w	3fa2 <_malloc_r+0x4aa>
    3e92:	ldr	r2, [r1, #4]
    3e94:	bic.w	r2, r2, #3
    3e98:	cmp	r3, r2
    3e9a:	bcs.n	3ea2 <_malloc_r+0x3aa>
    3e9c:	ldr	r1, [r1, #8]
    3e9e:	cmp	ip, r1
    3ea0:	bne.n	3e92 <_malloc_r+0x39a>
    3ea2:	ldr.w	ip, [r1, #12]
    3ea6:	ldr	r2, [r7, #4]
    3ea8:	str.w	ip, [r4, #12]
    3eac:	str	r1, [r4, #8]
    3eae:	str.w	r4, [ip, #8]
    3eb2:	str	r4, [r1, #12]
    3eb4:	b.n	3bc8 <_malloc_r+0xd0>
    3eb6:	adds	r3, r4, r5
    3eb8:	orr.w	r7, r2, #1
    3ebc:	orr.w	r5, r5, #1
    3ec0:	str	r5, [r4, #4]
    3ec2:	mov	r0, r6
    3ec4:	str	r3, [r1, #20]
    3ec6:	str	r3, [r1, #16]
    3ec8:	str.w	lr, [r3, #12]
    3ecc:	str.w	lr, [r3, #8]
    3ed0:	str	r7, [r3, #4]
    3ed2:	str	r2, [r3, r2]
    3ed4:	adds	r4, #8
    3ed6:	bl	4108 <__malloc_unlock>
    3eda:	b.n	3c88 <_malloc_r+0x190>
    3edc:	ldr	r2, [r1, #4]
    3ede:	b.n	3bc8 <_malloc_r+0xd0>
    3ee0:	add.w	r8, r8, #1
    3ee4:	tst.w	r8, #3
    3ee8:	add.w	ip, ip, #8
    3eec:	bne.w	3bee <_malloc_r+0xf6>
    3ef0:	b.n	3f54 <_malloc_r+0x45c>
    3ef2:	ldr	r4, [r3, #12]
    3ef4:	cmp	r3, r4
    3ef6:	it	eq
    3ef8:	addeq	r0, #2
    3efa:	beq.w	3b68 <_malloc_r+0x70>
    3efe:	b.n	3c68 <_malloc_r+0x170>
    3f00:	add	r3, r1
    3f02:	mov	r4, r1
    3f04:	ldr	r2, [r3, #4]
    3f06:	ldr	r1, [r1, #12]
    3f08:	ldr.w	r5, [r4, #8]!
    3f0c:	orr.w	r2, r2, #1
    3f10:	str	r2, [r3, #4]
    3f12:	mov	r0, r6
    3f14:	str	r1, [r5, #12]
    3f16:	str	r5, [r1, #8]
    3f18:	bl	4108 <__malloc_unlock>
    3f1c:	b.n	3c88 <_malloc_r+0x190>
    3f1e:	add.w	lr, r3, #92	; 0x5c
    3f22:	add.w	r0, r3, #91	; 0x5b
    3f26:	mov.w	r3, lr, lsl #1
    3f2a:	b.n	3b3c <_malloc_r+0x44>
    3f2c:	lsrs	r2, r3, #6
    3f2e:	add.w	r1, r2, #57	; 0x39
    3f32:	lsls	r1, r1, #1
    3f34:	adds	r2, #56	; 0x38
    3f36:	b.n	3e7c <_malloc_r+0x384>
    3f38:	cmp	r4, r7
    3f3a:	ldr	r3, [pc, #296]	; (4064 <_malloc_r+0x56c>)
    3f3c:	beq.w	3d40 <_malloc_r+0x248>
    3f40:	ldr	r4, [r3, #8]
    3f42:	ldr	r2, [r4, #4]
    3f44:	bic.w	r2, r2, #3
    3f48:	b.n	3e00 <_malloc_r+0x308>
    3f4a:	ldr.w	r3, [r9], #-8
    3f4e:	cmp	r9, r3
    3f50:	bne.w	4058 <_malloc_r+0x560>
    3f54:	tst.w	r0, #3
    3f58:	add.w	r0, r0, #4294967295
    3f5c:	bne.n	3f4a <_malloc_r+0x452>
    3f5e:	ldr	r3, [r7, #4]
    3f60:	bic.w	r3, r3, r4
    3f64:	str	r3, [r7, #4]
    3f66:	lsls	r4, r4, #1
    3f68:	cmp	r4, r3
    3f6a:	bhi.w	3ce8 <_malloc_r+0x1f0>
    3f6e:	cmp	r4, #0
    3f70:	beq.w	3ce8 <_malloc_r+0x1f0>
    3f74:	tst	r4, r3
    3f76:	mov	r0, r8
    3f78:	bne.w	3be6 <_malloc_r+0xee>
    3f7c:	lsls	r4, r4, #1
    3f7e:	tst	r4, r3
    3f80:	add.w	r0, r0, #4
    3f84:	beq.n	3f7c <_malloc_r+0x484>
    3f86:	b.n	3be6 <_malloc_r+0xee>
    3f88:	cmp.w	r3, #340	; 0x154
    3f8c:	bhi.n	3fc0 <_malloc_r+0x4c8>
    3f8e:	lsrs	r0, r5, #15
    3f90:	add.w	lr, r0, #120	; 0x78
    3f94:	mov.w	r3, lr, lsl #1
    3f98:	adds	r0, #119	; 0x77
    3f9a:	b.n	3b3c <_malloc_r+0x44>
    3f9c:	mov.w	r1, #4096	; 0x1000
    3fa0:	b.n	3d7a <_malloc_r+0x282>
    3fa2:	movs	r1, #1
    3fa4:	ldr.w	r3, [r8, #4]
    3fa8:	asrs	r2, r2, #2
    3faa:	lsl.w	r2, r1, r2
    3fae:	orrs	r2, r3
    3fb0:	str.w	r2, [r8, #4]
    3fb4:	mov	r1, ip
    3fb6:	b.n	3ea8 <_malloc_r+0x3b0>
    3fb8:	movs	r3, #1
    3fba:	str.w	r3, [fp, #4]
    3fbe:	b.n	3e0c <_malloc_r+0x314>
    3fc0:	movw	r2, #1364	; 0x554
    3fc4:	cmp	r3, r2
    3fc6:	bhi.n	400a <_malloc_r+0x512>
    3fc8:	lsrs	r0, r5, #18
    3fca:	add.w	lr, r0, #125	; 0x7d
    3fce:	mov.w	r3, lr, lsl #1
    3fd2:	adds	r0, #124	; 0x7c
    3fd4:	b.n	3b3c <_malloc_r+0x44>
    3fd6:	adds	r2, #16
    3fd8:	b.n	3d24 <_malloc_r+0x22c>
    3fda:	cmp	r2, #84	; 0x54
    3fdc:	bhi.n	402c <_malloc_r+0x534>
    3fde:	lsrs	r2, r3, #12
    3fe0:	add.w	r1, r2, #111	; 0x6f
    3fe4:	lsls	r1, r1, #1
    3fe6:	adds	r2, #110	; 0x6e
    3fe8:	b.n	3e7c <_malloc_r+0x384>
    3fea:	ldr	r4, [r7, #8]
    3fec:	ldr	r2, [r4, #4]
    3fee:	bic.w	r2, r2, #3
    3ff2:	b.n	3e00 <_malloc_r+0x308>
    3ff4:	ubfx	r0, sl, #0, #12
    3ff8:	cmp	r0, #0
    3ffa:	bne.w	3d4e <_malloc_r+0x256>
    3ffe:	add	r2, r8
    4000:	ldr	r3, [r7, #8]
    4002:	orr.w	r2, r2, #1
    4006:	str	r2, [r3, #4]
    4008:	b.n	3de4 <_malloc_r+0x2ec>
    400a:	movs	r3, #254	; 0xfe
    400c:	mov.w	lr, #127	; 0x7f
    4010:	movs	r0, #126	; 0x7e
    4012:	b.n	3b3c <_malloc_r+0x44>
    4014:	movs	r2, #1
    4016:	mov.w	r9, #0
    401a:	b.n	3da0 <_malloc_r+0x2a8>
    401c:	add.w	r1, r4, #8
    4020:	mov	r0, r6
    4022:	bl	4214 <_free_r>
    4026:	ldr.w	r1, [r9]
    402a:	b.n	3de4 <_malloc_r+0x2ec>
    402c:	cmp.w	r2, #340	; 0x154
    4030:	bhi.n	403e <_malloc_r+0x546>
    4032:	lsrs	r2, r3, #15
    4034:	add.w	r1, r2, #120	; 0x78
    4038:	lsls	r1, r1, #1
    403a:	adds	r2, #119	; 0x77
    403c:	b.n	3e7c <_malloc_r+0x384>
    403e:	movw	r1, #1364	; 0x554
    4042:	cmp	r2, r1
    4044:	bhi.n	4052 <_malloc_r+0x55a>
    4046:	lsrs	r2, r3, #18
    4048:	add.w	r1, r2, #125	; 0x7d
    404c:	lsls	r1, r1, #1
    404e:	adds	r2, #124	; 0x7c
    4050:	b.n	3e7c <_malloc_r+0x384>
    4052:	movs	r1, #254	; 0xfe
    4054:	movs	r2, #126	; 0x7e
    4056:	b.n	3e7c <_malloc_r+0x384>
    4058:	ldr	r3, [r7, #4]
    405a:	b.n	3f66 <_malloc_r+0x46e>
    405c:	lsrs	r0, r5, #3
    405e:	adds	r3, r0, #1
    4060:	lsls	r3, r3, #1
    4062:	b.n	3c56 <_malloc_r+0x15e>
    4064:	.word	0x1fff1184

00004068 <memset>:
    4068:	push	{r4, r5, r6}
    406a:	lsls	r4, r0, #30
    406c:	beq.n	40fc <memset+0x94>
    406e:	subs	r4, r2, #1
    4070:	cmp	r2, #0
    4072:	beq.n	40f8 <memset+0x90>
    4074:	uxtb	r5, r1
    4076:	mov	r3, r0
    4078:	b.n	4080 <memset+0x18>
    407a:	subs	r2, r4, #1
    407c:	cbz	r4, 40f8 <memset+0x90>
    407e:	mov	r4, r2
    4080:	strb.w	r5, [r3], #1
    4084:	lsls	r2, r3, #30
    4086:	bne.n	407a <memset+0x12>
    4088:	cmp	r4, #3
    408a:	bls.n	40ea <memset+0x82>
    408c:	uxtb	r5, r1
    408e:	orr.w	r5, r5, r5, lsl #8
    4092:	cmp	r4, #15
    4094:	orr.w	r5, r5, r5, lsl #16
    4098:	bls.n	40ce <memset+0x66>
    409a:	add.w	r2, r3, #16
    409e:	mov	r6, r4
    40a0:	subs	r6, #16
    40a2:	cmp	r6, #15
    40a4:	str.w	r5, [r2, #-16]
    40a8:	str.w	r5, [r2, #-12]
    40ac:	str.w	r5, [r2, #-8]
    40b0:	str.w	r5, [r2, #-4]
    40b4:	add.w	r2, r2, #16
    40b8:	bhi.n	40a0 <memset+0x38>
    40ba:	sub.w	r2, r4, #16
    40be:	bic.w	r2, r2, #15
    40c2:	and.w	r4, r4, #15
    40c6:	adds	r2, #16
    40c8:	cmp	r4, #3
    40ca:	add	r3, r2
    40cc:	bls.n	40ea <memset+0x82>
    40ce:	mov	r6, r3
    40d0:	mov	r2, r4
    40d2:	subs	r2, #4
    40d4:	cmp	r2, #3
    40d6:	str.w	r5, [r6], #4
    40da:	bhi.n	40d2 <memset+0x6a>
    40dc:	subs	r2, r4, #4
    40de:	bic.w	r2, r2, #3
    40e2:	adds	r2, #4
    40e4:	add	r3, r2
    40e6:	and.w	r4, r4, #3
    40ea:	cbz	r4, 40f8 <memset+0x90>
    40ec:	uxtb	r1, r1
    40ee:	add	r4, r3
    40f0:	strb.w	r1, [r3], #1
    40f4:	cmp	r3, r4
    40f6:	bne.n	40f0 <memset+0x88>
    40f8:	pop	{r4, r5, r6}
    40fa:	bx	lr
    40fc:	mov	r4, r2
    40fe:	mov	r3, r0
    4100:	b.n	4088 <memset+0x20>
    4102:	nop

00004104 <__malloc_lock>:
    4104:	bx	lr
    4106:	nop

00004108 <__malloc_unlock>:
    4108:	bx	lr
    410a:	nop

0000410c <_sbrk_r>:
    410c:	push	{r3, r4, r5, lr}
    410e:	ldr	r4, [pc, #28]	; (412c <_sbrk_r+0x20>)
    4110:	movs	r3, #0
    4112:	mov	r5, r0
    4114:	mov	r0, r1
    4116:	str	r3, [r4, #0]
    4118:	bl	3404 <_sbrk>
    411c:	adds	r3, r0, #1
    411e:	beq.n	4122 <_sbrk_r+0x16>
    4120:	pop	{r3, r4, r5, pc}
    4122:	ldr	r3, [r4, #0]
    4124:	cmp	r3, #0
    4126:	beq.n	4120 <_sbrk_r+0x14>
    4128:	str	r3, [r5, #0]
    412a:	pop	{r3, r4, r5, pc}
    412c:	.word	0x1fff1bc4

00004130 <register_fini>:
    4130:	ldr	r3, [pc, #8]	; (413c <register_fini+0xc>)
    4132:	cbz	r3, 413a <register_fini+0xa>
    4134:	ldr	r0, [pc, #8]	; (4140 <register_fini+0x10>)
    4136:	b.w	4144 <atexit>
    413a:	bx	lr
    413c:	.word	0x00000000
    4140:	.word	0x00004151

00004144 <atexit>:
    4144:	movs	r3, #0
    4146:	mov	r1, r0
    4148:	mov	r2, r3
    414a:	mov	r0, r3
    414c:	b.w	43e4 <__register_exitproc>

00004150 <__libc_fini_array>:
    4150:	push	{r3, r4, r5, lr}
    4152:	ldr	r5, [pc, #28]	; (4170 <__libc_fini_array+0x20>)
    4154:	ldr	r4, [pc, #28]	; (4174 <__libc_fini_array+0x24>)
    4156:	subs	r4, r5, r4
    4158:	asrs	r4, r4, #2
    415a:	beq.n	4168 <__libc_fini_array+0x18>
    415c:	subs	r4, #1
    415e:	ldr.w	r3, [r5, #-4]!
    4162:	blx	r3
    4164:	cmp	r4, #0
    4166:	bne.n	415c <__libc_fini_array+0xc>
    4168:	ldmia.w	sp!, {r3, r4, r5, lr}
    416c:	b.w	47e0 <__init_array_end>
	...

00004178 <_malloc_trim_r>:
    4178:	push	{r3, r4, r5, r6, r7, lr}
    417a:	ldr	r7, [pc, #140]	; (4208 <_malloc_trim_r+0x90>)
    417c:	mov	r4, r1
    417e:	mov	r6, r0
    4180:	bl	4104 <__malloc_lock>
    4184:	ldr	r3, [r7, #8]
    4186:	ldr	r5, [r3, #4]
    4188:	bic.w	r5, r5, #3
    418c:	subs	r1, r5, r4
    418e:	addw	r1, r1, #4079	; 0xfef
    4192:	bic.w	r1, r1, #4080	; 0xff0
    4196:	bic.w	r1, r1, #15
    419a:	sub.w	r4, r1, #4096	; 0x1000
    419e:	cmp.w	r4, #4096	; 0x1000
    41a2:	blt.n	41b4 <_malloc_trim_r+0x3c>
    41a4:	movs	r1, #0
    41a6:	mov	r0, r6
    41a8:	bl	410c <_sbrk_r>
    41ac:	ldr	r3, [r7, #8]
    41ae:	add	r3, r5
    41b0:	cmp	r0, r3
    41b2:	beq.n	41be <_malloc_trim_r+0x46>
    41b4:	mov	r0, r6
    41b6:	bl	4108 <__malloc_unlock>
    41ba:	movs	r0, #0
    41bc:	pop	{r3, r4, r5, r6, r7, pc}
    41be:	negs	r1, r4
    41c0:	mov	r0, r6
    41c2:	bl	410c <_sbrk_r>
    41c6:	adds	r0, #1
    41c8:	beq.n	41e6 <_malloc_trim_r+0x6e>
    41ca:	ldr	r3, [pc, #64]	; (420c <_malloc_trim_r+0x94>)
    41cc:	ldr	r2, [r7, #8]
    41ce:	ldr	r1, [r3, #0]
    41d0:	subs	r5, r5, r4
    41d2:	orr.w	r5, r5, #1
    41d6:	mov	r0, r6
    41d8:	subs	r1, r1, r4
    41da:	str	r5, [r2, #4]
    41dc:	str	r1, [r3, #0]
    41de:	bl	4108 <__malloc_unlock>
    41e2:	movs	r0, #1
    41e4:	pop	{r3, r4, r5, r6, r7, pc}
    41e6:	movs	r1, #0
    41e8:	mov	r0, r6
    41ea:	bl	410c <_sbrk_r>
    41ee:	ldr	r2, [r7, #8]
    41f0:	subs	r3, r0, r2
    41f2:	cmp	r3, #15
    41f4:	ble.n	41b4 <_malloc_trim_r+0x3c>
    41f6:	ldr	r4, [pc, #24]	; (4210 <_malloc_trim_r+0x98>)
    41f8:	ldr	r1, [pc, #16]	; (420c <_malloc_trim_r+0x94>)
    41fa:	ldr	r4, [r4, #0]
    41fc:	orr.w	r3, r3, #1
    4200:	subs	r0, r0, r4
    4202:	str	r3, [r2, #4]
    4204:	str	r0, [r1, #0]
    4206:	b.n	41b4 <_malloc_trim_r+0x3c>
    4208:	.word	0x1fff1184
    420c:	.word	0x1fff1a58
    4210:	.word	0x1fff1590

00004214 <_free_r>:
    4214:	cmp	r1, #0
    4216:	beq.n	42a4 <_free_r+0x90>
    4218:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    421c:	mov	r5, r1
    421e:	mov	r8, r0
    4220:	bl	4104 <__malloc_lock>
    4224:	ldr.w	r7, [r5, #-4]
    4228:	ldr	r1, [pc, #424]	; (43d4 <_free_r+0x1c0>)
    422a:	bic.w	r3, r7, #1
    422e:	sub.w	r4, r5, #8
    4232:	adds	r2, r4, r3
    4234:	ldr	r6, [r1, #8]
    4236:	ldr	r0, [r2, #4]
    4238:	cmp	r2, r6
    423a:	bic.w	r0, r0, #3
    423e:	beq.n	4306 <_free_r+0xf2>
    4240:	lsls	r6, r7, #31
    4242:	str	r0, [r2, #4]
    4244:	bmi.n	425e <_free_r+0x4a>
    4246:	ldr.w	r7, [r5, #-8]
    424a:	subs	r4, r4, r7
    424c:	add.w	lr, r1, #8
    4250:	ldr	r5, [r4, #8]
    4252:	cmp	r5, lr
    4254:	add	r3, r7
    4256:	beq.n	4338 <_free_r+0x124>
    4258:	ldr	r7, [r4, #12]
    425a:	str	r7, [r5, #12]
    425c:	str	r5, [r7, #8]
    425e:	adds	r5, r2, r0
    4260:	ldr	r5, [r5, #4]
    4262:	lsls	r5, r5, #31
    4264:	bpl.n	42ec <_free_r+0xd8>
    4266:	orr.w	r2, r3, #1
    426a:	str	r2, [r4, #4]
    426c:	str	r3, [r4, r3]
    426e:	cmp.w	r3, #512	; 0x200
    4272:	bcs.n	42a6 <_free_r+0x92>
    4274:	lsrs	r3, r3, #3
    4276:	adds	r2, r3, #1
    4278:	ldr	r5, [r1, #4]
    427a:	ldr.w	r7, [r1, r2, lsl #3]
    427e:	str	r7, [r4, #8]
    4280:	movs	r0, #1
    4282:	asrs	r3, r3, #2
    4284:	lsl.w	r3, r0, r3
    4288:	add.w	r0, r1, r2, lsl #3
    428c:	orrs	r5, r3
    428e:	subs	r0, #8
    4290:	str	r0, [r4, #12]
    4292:	str	r5, [r1, #4]
    4294:	str.w	r4, [r1, r2, lsl #3]
    4298:	str	r4, [r7, #12]
    429a:	mov	r0, r8
    429c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    42a0:	b.w	4108 <__malloc_unlock>
    42a4:	bx	lr
    42a6:	lsrs	r2, r3, #9
    42a8:	cmp	r2, #4
    42aa:	bhi.n	4354 <_free_r+0x140>
    42ac:	lsrs	r2, r3, #6
    42ae:	add.w	r7, r2, #57	; 0x39
    42b2:	lsls	r7, r7, #1
    42b4:	add.w	r5, r2, #56	; 0x38
    42b8:	add.w	r0, r1, r7, lsl #2
    42bc:	ldr.w	r2, [r1, r7, lsl #2]
    42c0:	ldr	r1, [pc, #272]	; (43d4 <_free_r+0x1c0>)
    42c2:	subs	r0, #8
    42c4:	cmp	r0, r2
    42c6:	beq.n	4364 <_free_r+0x150>
    42c8:	ldr	r1, [r2, #4]
    42ca:	bic.w	r1, r1, #3
    42ce:	cmp	r3, r1
    42d0:	bcs.n	42d8 <_free_r+0xc4>
    42d2:	ldr	r2, [r2, #8]
    42d4:	cmp	r0, r2
    42d6:	bne.n	42c8 <_free_r+0xb4>
    42d8:	ldr	r0, [r2, #12]
    42da:	str	r0, [r4, #12]
    42dc:	str	r2, [r4, #8]
    42de:	str	r4, [r0, #8]
    42e0:	str	r4, [r2, #12]
    42e2:	mov	r0, r8
    42e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    42e8:	b.w	4108 <__malloc_unlock>
    42ec:	ldr	r5, [r2, #8]
    42ee:	ldr	r7, [pc, #232]	; (43d8 <_free_r+0x1c4>)
    42f0:	cmp	r5, r7
    42f2:	add	r3, r0
    42f4:	beq.n	4376 <_free_r+0x162>
    42f6:	ldr	r0, [r2, #12]
    42f8:	str	r0, [r5, #12]
    42fa:	orr.w	r2, r3, #1
    42fe:	str	r5, [r0, #8]
    4300:	str	r2, [r4, #4]
    4302:	str	r3, [r4, r3]
    4304:	b.n	426e <_free_r+0x5a>
    4306:	lsls	r7, r7, #31
    4308:	add	r3, r0
    430a:	bmi.n	431c <_free_r+0x108>
    430c:	ldr.w	r2, [r5, #-8]
    4310:	subs	r4, r4, r2
    4312:	add	r3, r2
    4314:	ldr	r0, [r4, #8]
    4316:	ldr	r2, [r4, #12]
    4318:	str	r2, [r0, #12]
    431a:	str	r0, [r2, #8]
    431c:	ldr	r2, [pc, #188]	; (43dc <_free_r+0x1c8>)
    431e:	ldr	r2, [r2, #0]
    4320:	orr.w	r0, r3, #1
    4324:	cmp	r3, r2
    4326:	str	r0, [r4, #4]
    4328:	str	r4, [r1, #8]
    432a:	bcc.n	429a <_free_r+0x86>
    432c:	ldr	r3, [pc, #176]	; (43e0 <_free_r+0x1cc>)
    432e:	mov	r0, r8
    4330:	ldr	r1, [r3, #0]
    4332:	bl	4178 <_malloc_trim_r>
    4336:	b.n	429a <_free_r+0x86>
    4338:	adds	r1, r2, r0
    433a:	ldr	r1, [r1, #4]
    433c:	lsls	r1, r1, #31
    433e:	bmi.n	43ca <_free_r+0x1b6>
    4340:	ldr	r1, [r2, #8]
    4342:	ldr	r2, [r2, #12]
    4344:	str	r2, [r1, #12]
    4346:	add	r3, r0
    4348:	orr.w	r0, r3, #1
    434c:	str	r1, [r2, #8]
    434e:	str	r0, [r4, #4]
    4350:	str	r3, [r4, r3]
    4352:	b.n	429a <_free_r+0x86>
    4354:	cmp	r2, #20
    4356:	bhi.n	4388 <_free_r+0x174>
    4358:	add.w	r7, r2, #92	; 0x5c
    435c:	lsls	r7, r7, #1
    435e:	add.w	r5, r2, #91	; 0x5b
    4362:	b.n	42b8 <_free_r+0xa4>
    4364:	asrs	r2, r5, #2
    4366:	ldr	r3, [r1, #4]
    4368:	movs	r5, #1
    436a:	lsl.w	r2, r5, r2
    436e:	orrs	r3, r2
    4370:	str	r3, [r1, #4]
    4372:	mov	r2, r0
    4374:	b.n	42da <_free_r+0xc6>
    4376:	orr.w	r2, r3, #1
    437a:	str	r4, [r1, #20]
    437c:	str	r4, [r1, #16]
    437e:	str	r5, [r4, #12]
    4380:	str	r5, [r4, #8]
    4382:	str	r2, [r4, #4]
    4384:	str	r3, [r4, r3]
    4386:	b.n	429a <_free_r+0x86>
    4388:	cmp	r2, #84	; 0x54
    438a:	bhi.n	439a <_free_r+0x186>
    438c:	lsrs	r2, r3, #12
    438e:	add.w	r7, r2, #111	; 0x6f
    4392:	lsls	r7, r7, #1
    4394:	add.w	r5, r2, #110	; 0x6e
    4398:	b.n	42b8 <_free_r+0xa4>
    439a:	cmp.w	r2, #340	; 0x154
    439e:	bhi.n	43ae <_free_r+0x19a>
    43a0:	lsrs	r2, r3, #15
    43a2:	add.w	r7, r2, #120	; 0x78
    43a6:	lsls	r7, r7, #1
    43a8:	add.w	r5, r2, #119	; 0x77
    43ac:	b.n	42b8 <_free_r+0xa4>
    43ae:	movw	r0, #1364	; 0x554
    43b2:	cmp	r2, r0
    43b4:	bhi.n	43c4 <_free_r+0x1b0>
    43b6:	lsrs	r2, r3, #18
    43b8:	add.w	r7, r2, #125	; 0x7d
    43bc:	lsls	r7, r7, #1
    43be:	add.w	r5, r2, #124	; 0x7c
    43c2:	b.n	42b8 <_free_r+0xa4>
    43c4:	movs	r7, #254	; 0xfe
    43c6:	movs	r5, #126	; 0x7e
    43c8:	b.n	42b8 <_free_r+0xa4>
    43ca:	orr.w	r2, r3, #1
    43ce:	str	r2, [r4, #4]
    43d0:	str	r3, [r4, r3]
    43d2:	b.n	429a <_free_r+0x86>
    43d4:	.word	0x1fff1184
    43d8:	.word	0x1fff118c
    43dc:	.word	0x1fff158c
    43e0:	.word	0x1fff1a54

000043e4 <__register_exitproc>:
    43e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    43e8:	ldr	r4, [pc, #148]	; (4480 <__register_exitproc+0x9c>)
    43ea:	ldr	r5, [r4, #0]
    43ec:	ldr.w	r4, [r5, #328]	; 0x148
    43f0:	mov	r6, r0
    43f2:	mov	r8, r1
    43f4:	mov	sl, r2
    43f6:	mov	r9, r3
    43f8:	cbz	r4, 446c <__register_exitproc+0x88>
    43fa:	ldr	r0, [r4, #4]
    43fc:	cmp	r0, #31
    43fe:	bgt.n	4430 <__register_exitproc+0x4c>
    4400:	adds	r3, r0, #1
    4402:	cbz	r6, 4422 <__register_exitproc+0x3e>
    4404:	add.w	r5, r4, r0, lsl #2
    4408:	movs	r2, #1
    440a:	str.w	sl, [r5, #136]	; 0x88
    440e:	ldr.w	r1, [r4, #392]	; 0x188
    4412:	lsls	r2, r0
    4414:	orrs	r1, r2
    4416:	cmp	r6, #2
    4418:	str.w	r1, [r4, #392]	; 0x188
    441c:	str.w	r9, [r5, #264]	; 0x108
    4420:	beq.n	4460 <__register_exitproc+0x7c>
    4422:	adds	r0, #2
    4424:	str	r3, [r4, #4]
    4426:	str.w	r8, [r4, r0, lsl #2]
    442a:	movs	r0, #0
    442c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4430:	ldr	r3, [pc, #80]	; (4484 <__register_exitproc+0xa0>)
    4432:	cbz	r3, 4476 <__register_exitproc+0x92>
    4434:	mov.w	r0, #400	; 0x190
    4438:	bl	3ae8 <malloc>
    443c:	mov	r4, r0
    443e:	cbz	r0, 4476 <__register_exitproc+0x92>
    4440:	ldr.w	r3, [r5, #328]	; 0x148
    4444:	movs	r7, #0
    4446:	stmia.w	r0, {r3, r7}
    444a:	str.w	r4, [r5, #328]	; 0x148
    444e:	mov	r0, r7
    4450:	movs	r3, #1
    4452:	str.w	r7, [r4, #392]	; 0x188
    4456:	str.w	r7, [r4, #396]	; 0x18c
    445a:	cmp	r6, #0
    445c:	beq.n	4422 <__register_exitproc+0x3e>
    445e:	b.n	4404 <__register_exitproc+0x20>
    4460:	ldr.w	r1, [r4, #396]	; 0x18c
    4464:	orrs	r2, r1
    4466:	str.w	r2, [r4, #396]	; 0x18c
    446a:	b.n	4422 <__register_exitproc+0x3e>
    446c:	add.w	r4, r5, #332	; 0x14c
    4470:	str.w	r4, [r5, #328]	; 0x148
    4474:	b.n	43fa <__register_exitproc+0x16>
    4476:	mov.w	r0, #4294967295
    447a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    447e:	nop
    4480:	.word	0x000047c4
    4484:	.word	0x00003ae9
    4488:	.word	0x00000024
    448c:	.word	0x00000029
    4490:	.word	0x0000002b
    4494:	.word	0x0000002d
    4498:	.word	0x00000032
    449c:	.word	0x00000034
    44a0:	.word	0x00000026
    44a4:	.word	0x0000002d
    44a8:	.word	0x0000002f
    44ac:	.word	0x72727543
    44b0:	.word	0x20746e65
    44b4:	.word	0x79616c70
    44b8:	.word	0x6b636162
    44bc:	.word	0x67617020
    44c0:	.word	0xffff0065
    44c4:	.word	0x4f4c4556
    44c8:	.word	0x59544943
    44cc:	.word	0x00000000
    44d0:	.word	0x45544f4e
    44d4:	.word	0x474e454c
    44d8:	.word	0x00004854
    44dc:	.word	0x43544950
    44e0:	.word	0x00000048
    44e4:	.word	0x4e414843
    44e8:	.word	0x00004543
    44ec:	.word	0x4e495753
    44f0:	.word	0x00000047

000044f4 <pin2sc1a>:
    44f4:	................
    4504:	................
    4514:	................
    4524:	................
    4534:	........

0000453c <digital_pin_to_info_PGM>:
    453c:	@..C@..@D..CD..@
    454c:	...C...@0..C0..@
    455c:	4..C4..@...C...@
    456c:	...C...@...C...@
    457c:	...C...@...C...@
    458c:	...C...@...C...@
    459c:	...C...@...C...@
    45ac:	...C...@...C...@
    45bc:	...C...@...C...@
    45cc:	...C...@...C...@
    45dc:	...C...@...C...@
    45ec:	...C...@...C...@
    45fc:	h .Ch..@...C...@
    460c:	8..C8..@<..C<..@
    461c:	@..C@..@H..CH..@
    462c:	L..CL..@(..C(..@
    463c:	,..C,..@` .C`..@
    464c:	d .Cd..@ ..C ..@
    465c:	$..C$..@(..C(..@
    466c:	,..C,..@D..CD..@
    467c:	p..Cp..@t..Ct..@
    468c:	h..Ch..@P..CP..@
    469c:	X..CX..@\..C\..@
    46ac:	T..CT..@ ..C ..@
    46bc:	$..C$..@...C...@
    46cc:	...C...@8..C8..@
    46dc:	4..C4..@0..C0..@
    46ec:	<..C<..@,..C,..@
    46fc:	( .C(..@, .C,..@
    470c:	. .C...@. .C...@
    471c:	. .C...@. .C...@
    472c:	. .C...@. .C...@

0000473c <vtable for usb_serial_class>:
	...
    4744:	5/..-/..)/..%/..
    4754:	!/.../.../.../..
    4764:	....

00004768 <usb_endpoint_config_table>:
    4768:	........

00004770 <usb_descriptor_list>:
    4770:	....\...........
    4780:	............8...
    4790:	........p.......
    47a0:	.... ...........
    47b0:	<...............
    47c0:	....

000047c4 <_global_impure_ptr>:
    47c4:	X...

000047c8 <_init>:
    47c8:	push	{r3, r4, r5, r6, r7, lr}
    47ca:	nop
    47cc:	pop	{r3, r4, r5, r6, r7}
    47ce:	pop	{r3}
    47d0:	mov	lr, r3
    47d2:	bx	lr

000047d4 <__init_array_start>:
    47d4:	.word	0x00004131

000047d8 <__frame_dummy_init_array_entry>:
    47d8:	5...}...

Disassembly of section .fini:

000047e0 <_fini>:
    47e0:	push	{r3, r4, r5, r6, r7, lr}
    47e2:	nop


.vsteensy/build/caribeTY.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000059b4 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0c40 l    d  .data	00000000 .data
1fff15bc l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00004660 l     F .text	0000000c startup_default_early_hook
0000466c l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff15bc l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff15c0 l       .bss	00000000 object.8610
000059ac l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000022ac l     F .text	00000338 _GLOBAL__sub_I_currentMode
00000000 l    df *ABS*	00000000 usb_serial.c
1fff18e5 l     O .bss	00000001 tx_noautoflush
1fff18e8 l     O .bss	00000004 tx_packet
1fff18ec l     O .bss	00000001 transmit_previous_timeout
1fff18f0 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
000028b8 l     F .text	00000144 wait_for_cal
1fff18f5 l     O .bss	00000001 analog_right_shift
1fff18f6 l     O .bss	00000001 calibrating
000056c8 l     O .text	00000048 pin2sc1a
1fff0c68 l     O .data	00000001 analog_config_bits
1fff18f7 l     O .bss	00000001 analogReadBusyADC1
1fff18f8 l     O .bss	00000001 analogReadBusyADC0
1fff18f9 l     O .bss	00000001 analog_reference_internal
1fff0c69 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00002bd8 l     F .text	0000004c digitalWrite.part.1
00002c24 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_midi.c
00002f04 l     F .text	00000048 sysex_byte
1fff1914 l     O .bss	00000001 tx_noautoflush
1fff1940 l     O .bss	00000004 tx_packet
1fff1944 l     O .bss	00000001 transmit_previous_timeout
1fff194c l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0c6c l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1960 l     O .bss	00000004 ep0_tx_ptr
1fff1964 l     O .bss	00000014 rx_last
1fff1978 l     O .bss	00000002 ep0_tx_len
1fff197c l     O .bss	00000040 ep0_rx0_buf
1fff19bc l     O .bss	00000014 rx_first
1fff19d0 l     O .bss	00000001 ep0_tx_data_toggle
1fff19d4 l     O .bss	00000040 ep0_rx1_buf
1fff1a14 l     O .bss	00000014 tx_first
1fff0000 l     O .usbdescriptortable	000000c0 table
1fff1a28 l     O .bss	00000014 tx_last
1fff1a3c l     O .bss	00000008 setup
1fff1a44 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1a48 l     O .bss	00000008 reply_buffer
1fff1a54 l     O .bss	00000005 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1a59 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1a5c l     O .bss	00000004 rts_pin
1fff1a60 l     O .bss	00000001 rx_buffer_head
1fff1a61 l     O .bss	00000001 rx_buffer_tail
1fff1a64 l     O .bss	00000028 tx_buffer
1fff1a8c l     O .bss	00000040 rx_buffer
1fff1acc l     O .bss	00000001 transmitting
1fff1acd l     O .bss	00000001 tx_buffer_tail
1fff1ad0 l     O .bss	00000004 transmit_pin
1fff1ad4 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fff1ad8 l     O .bss	00000004 rts_pin
1fff1adc l     O .bss	00000001 transmitting
1fff1add l     O .bss	00000001 rx_buffer_tail
1fff1ae0 l     O .bss	00000028 tx_buffer
1fff1b08 l     O .bss	00000040 rx_buffer
1fff1b48 l     O .bss	00000001 rx_buffer_head
1fff1b49 l     O .bss	00000001 tx_buffer_tail
1fff1b4c l     O .bss	00000004 transmit_pin
1fff1b50 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1b54 l     O .bss	00000004 rts_pin
1fff1b58 l     O .bss	00000001 rx_buffer_head
1fff1b59 l     O .bss	00000001 rx_buffer_tail
1fff1b5c l     O .bss	00000028 tx_buffer
1fff1b84 l     O .bss	00000040 rx_buffer
1fff1bc4 l     O .bss	00000001 transmitting
1fff1bc5 l     O .bss	00000001 tx_buffer_tail
1fff1bc8 l     O .bss	00000004 transmit_pin
1fff1bcc l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1bd0 l     O .bss	00000004 rts_pin
1fff1bd4 l     O .bss	00000001 rx_buffer_head
1fff1bd5 l     O .bss	00000001 rx_buffer_tail
1fff1bd8 l     O .bss	00000040 tx_buffer
1fff1c18 l     O .bss	00000040 rx_buffer
1fff1c58 l     O .bss	00000001 transmitting
1fff1c59 l     O .bss	00000001 tx_buffer_tail
1fff1c5c l     O .bss	00000004 transmit_pin
1fff1c60 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1c64 l     O .bss	00000004 rts_pin
1fff1c68 l     O .bss	00000001 rx_buffer_head
1fff1c69 l     O .bss	00000001 rx_buffer_tail
1fff1c6c l     O .bss	00000028 tx_buffer
1fff1c94 l     O .bss	00000040 rx_buffer
1fff1cd4 l     O .bss	00000001 transmitting
1fff1cd5 l     O .bss	00000001 tx_buffer_tail
1fff1cd8 l     O .bss	00000004 transmit_pin
1fff1cdc l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff0c84 l     O .data	00000012 device_descriptor
1fff0cb0 l     O .data	00000095 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1ce0 l     O .bss	00000004 rts_pin
1fff1ce4 l     O .bss	00000001 rx_buffer_head
1fff1ce5 l     O .bss	00000001 rx_buffer_tail
1fff1ce8 l     O .bss	00000028 tx_buffer
1fff1d10 l     O .bss	00000040 rx_buffer
1fff1d50 l     O .bss	00000001 transmitting
1fff1d51 l     O .bss	00000001 tx_buffer_tail
1fff1d54 l     O .bss	00000004 transmit_pin
1fff1d58 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00005300 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
1fff0d80 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff15bc l       .bss	00000000 __bss_start__
1fff1ef4 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00004658  w    F .text	00000006 adc0_isr
0000265c g     F .text	0000001c usb_serial_available
00004518 g     F .text	00000020 serial4_available
00004130  w    F .text	000000c4 yield
1fff0c98 g     O .data	00000018 usb_string_manufacturer_name_default
00004704 g     F .text	00000020 serial_available
1fff1918 g     O .bss	00000004 usb_midi_handleProgramChange
1fff175c g     O .bss	00000038 sequence
00004610  w    F .text	00000048 hard_fault_isr
00004658  w    F .text	00000006 dma_ch6_isr
00004224 g     F .text	00000020 Print::println()
000043ec g     F .text	00000020 serial2_available
00004658  w    F .text	00000006 uart0_lon_isr
00003544 g     F .text	000000e8 usb_rx_memory
000041f4  w    F .text	00000002 serialEvent5()
00004658  w    F .text	00000006 dma_ch8_isr
00004830 g     F .text	00000020 serial6_available
000052d8 g     F .text	00000002 __malloc_unlock
1fff192c g     O .bss	00000004 usb_midi_handleAfterTouch
000029fc g     F .text	000000e0 analog_init
0000362c g     F .text	00000084 usb_tx
00004658  w    F .text	00000006 portcd_isr
1fff193c g     O .bss	00000004 usb_midi_handleSysExComplete
00004c50 g     F .text	00000098 MillisTimer::runFromTimer()
00004658  w    F .text	00000006 can1_rx_warn_isr
000059b8 g       .fini	00000000 __exidx_end
00004658  w    F .text	00000006 dma_error_isr
1fff1db8 g     O .bss	00000001 usb_midi_msg_type
1fff1d70 g     O .bss	00000001 EventResponder::runningFromYield
00004658  w    F .text	00000006 i2c0_isr
00004cf8 g     F .text	0000000c __errno
00004658  w    F .text	00000006 portd_isr
00004658  w    F .text	00000006 enet_error_isr
1fff1d5c g     O .bss	00000004 EventResponder::firstInterrupt
00004658  w    F .text	00000006 tpm1_isr
00004210  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00005710 g     O .text	00000200 digital_pin_to_info_PGM
1fff1ef0 g     O .bss	00000004 errno
000059b8 g       .fini	00000000 _etext
1fff15bc g       .bss	00000000 _sbss
000042ec  w    F .text	00000002 serialEvent6()
1fff1928 g     O .bss	00000004 usb_midi_handleVelocityChange
00002ccc g     F .text	0000001c digitalRead
00004658  w    F .text	00000006 porte_isr
000004c8 g     F .text	00001de4 loop
00004658  w    F .text	00000006 portb_isr
1fff17bc g     O .bss	00000014 step3
00002fe8 g     F .text	0000002c usb_midi_flush_output
00004658  w    F .text	00000006 spi1_isr
00004538 g     F .text	000000d8 uart3_status_isr
00004afc  w    F .text	00000002 serialEvent1()
1fff18cc g     O .bss	00000018 led4
00004658  w    F .text	00000006 mcm_isr
00004be8 g     F .text	00000068 MillisTimer::addToActiveList()
00003014 g     F .text	0000043c usb_midi_read
1fff1904 g     O .bss	00000004 usb_midi_handleSystemReset
1fff1d60 g     O .bss	00000004 EventResponder::lastInterrupt
0000440c g     F .text	0000010c uart1_status_isr
1fff1dba g     O .bss	00000002 usb_midi_msg_sysex_len
00004658  w    F .text	00000006 randnum_isr
1fff190c g     O .bss	00000004 usb_midi_handleRealTimeSystem
1fff18fc g     O .bss	00000004 systick_millis_count
00004610  w    F .text	00000048 bus_fault_isr
00004658  w    F .text	00000006 watchdog_isr
00004658  w    F .text	00000006 i2c1_isr
1fff1a50 g     O .bss	00000001 usb_configuration
00004658  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
000042d4  w    F .text	00000002 serialEvent2()
00004658  w    F .text	00000006 i2c2_isr
1fff0c98  w    O .data	00000018 usb_string_manufacturer_name
1fff1ee4 g     O .bss	0000000a usb_rx_byte_count_data
00004658  w    F .text	00000006 pit1_isr
00004d54 g     F .text	00000010 malloc
00004658  w    F .text	00000006 dma_ch4_isr
00004658  w    F .text	00000006 software_isr
00004658  w    F .text	00000006 dma_ch7_isr
00004b84  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00004060 g     F .text	000000d0 usb_init
00004658  w    F .text	00000006 lptmr_isr
1fff1d80 g     O .bss	00000004 __malloc_top_pad
00002c9c g     F .text	00000024 rtc_set
1fff16ec g     O .bss	00000038 button5
1fff16b4 g     O .bss	00000038 button4
1fff0c40 g       .data	00000000 _sdata
1fff195c g     O .bss	00000004 usb_midi_handleNoteOn
000046d0 g     F .text	00000034 kinetis_hsrun_enable
000052dc g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
000025e4 g     F .text	00000048 usb_serial_getchar
00004658  w    F .text	00000006 can1_bus_off_isr
00004658  w    F .text	00000006 ftm2_isr
1fff1dac g     O .bss	00000008 usb_cdc_line_coding
00002cc0 g     F .text	0000000a digitalWrite
00004658  w    F .text	00000006 uart5_status_isr
00004850 g     F .text	000000e4 lpuart0_status_isr
1fff1d68 g     O .bss	00000004 EventResponder::lastYield
0000593c g     O .text	00000005 usb_endpoint_config_table
00004658  w    F .text	00000006 dma_ch9_isr
00004658  w    F .text	00000006 pit2_isr
00004a04 g     F .text	00000020 serial3_available
1fff17d0 g     O .bss	00000014 step4
1fff1d7c g     O .bss	00000004 __malloc_max_sbrked_mem
00002ce8 g     F .text	0000000a pinMode
00003490 g     F .text	0000004c usb_free
00004658  w    F .text	00000006 i2c3_isr
1fff1884 g     O .bss	00000018 led1
1fff1924 g     O .bss	00000004 usb_midi_handleSysExPartial
000059b8 g       .fini	00000000 __exidx_start
00004658  w    F .text	00000006 pit0_isr
1fff1dbc g     O .bss	00000001 usb_midi_msg_data1
1fff1d6c g     O .bss	00000004 EventResponder::firstYield
00005998 g     O .text	00000004 _global_impure_ptr
00004658  w    F .text	00000006 can1_error_isr
00004d04 g     F .text	00000050 __libc_init_array
1fff1ef4 g       .bss	00000000 __bss_end
00004658  w    F .text	00000006 can0_wakeup_isr
00004658  w    F .text	00000006 flash_cmd_isr
1fff1854 g     O .bss	0000001c knob5
000041f8  w    F .text	00000004 usb_serial_class::clear()
00004a24 g     F .text	000000d8 uart2_status_isr
00004670 g     F .text	0000002c _sbrk
1fff1d74 g     O .bss	00000004 MillisTimer::listWaiting
1fff0c80 g     O .data	00000004 __brkval
1fff18f4 g     O .bss	00000001 usb_cdc_line_rtsdtr
00002870 g     F .text	00000048 usb_serial_flush_callback
0000599c g     F .text	00000000 _init
1fff0c40 g     O .data	00000010 steps
00004658  w    F .text	00000006 svcall_isr
00004658  w    F .text	00000006 dma_ch15_isr
00004658  w    F .text	00000006 uart1_error_isr
00005320 g     F .text	00000028 __libc_fini_array
00004658  w    F .text	00000006 usbhs_phy_isr
1fff1ef4 g       .bss	00000000 _ebss
00004658 g     F .text	00000006 unused_isr
00004658  w    F .text	00000006 spi0_isr
00004658  w    F .text	00000006 dma_ch3_isr
00004658  w    F .text	00000006 flash_error_isr
1fff1800 g     O .bss	0000001c knob2
000042f4 g     F .text	00000020 serial5_available
00004658  w    F .text	00000006 uart5_error_isr
00004658  w    F .text	00000006 rtc_seconds_isr
00004658  w    F .text	00000006 pdb_isr
00004610  w    F .text	00000048 usage_fault_isr
00004658  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00004658  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1db4 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fff1870 g     O .bss	00000010 transport
1fff0c50 g     O .data	00000018 leds
00004ce8 g     F .text	00000010 systick_isr
00004658  w    F .text	00000006 rtc_alarm_isr
00004658  w    F .text	00000006 dma_ch2_isr
1fff0c70 g     O .data	00000010 Serial
00004658  w    F .text	00000006 ftm1_isr
00004218  w    F .text	00000006 usb_serial_class::write(unsigned char)
00004660  w    F .text	0000000c startup_early_hook
00004658  w    F .text	00000006 dma_ch13_isr
00004658  w    F .text	00000006 uart2_error_isr
0000262c g     F .text	00000030 usb_serial_peekchar
00000490  w    F .text	00000034 Led::blink(int)
1fff0d64 g     O .data	00000016 usb_string_serial_number_default
00004610 g     F .text	00000048 fault_isr
000053e4 g     F .text	000001d0 _free_r
1fff1948 g     O .bss	00000004 usb_midi_handleStop
00004658  w    F .text	00000006 usb_charge_isr
00004208  w    F .text	00000004 usb_serial_class::flush()
00004658  w    F .text	00000006 cmt_isr
00004658  w    F .text	00000006 usbhs_isr
1fff1958 g     O .bss	00000004 usb_midi_handleControlChange
1fff15b8 g     O .data	00000004 __malloc_sbrk_base
00004200  w    F .text	00000004 usb_serial_class::read()
00004658  w    F .text	00000006 ftm3_isr
00004658  w    F .text	00000006 tsi0_isr
1fff15f0 g     O .bss	00000018 led6
1fff17e4 g     O .bss	0000001c knob1
00004658  w    F .text	00000006 spi2_isr
000042d8  w    F .text	00000002 serialEvent4()
00004220  w    F .text	00000002 serialEvent()
1fff19d1 g     O .bss	00000001 usb_reboot_timer
000055b4 g     F .text	000000a4 __register_exitproc
00002678 g     F .text	00000038 usb_serial_flush_input
000027b8 g     F .text	00000018 usb_serial_putchar
1fff1d84 g     O .bss	00000028 __malloc_current_mallinfo
00004658  w    F .text	00000006 can0_bus_off_isr
1fff15d8 g     O .bss	00000018 led5
1fff1a45 g     O .bss	00000001 usb_rx_memory_needed
000036b0 g     F .text	000009b0 usb_isr
1fff1794 g     O .bss	00000014 step1
1fff1954 g     O .bss	00000004 usb_midi_handleNoteOff
00005910  w    O .text	00000028 vtable for usb_serial_class
1fff181c g     O .bss	0000001c knob3
00004658  w    F .text	00000006 uart3_error_isr
1fff1d64 g     O .bss	00000004 MillisTimer::listActive
00004658  w    F .text	00000006 porta_isr
1fff1608 g     O .bss	00000001 controller
1fff03d0 g     O .usbbuffers	00000870 usb_buffer_memory
00004658  w    F .text	00000006 low_voltage_isr
1fff1644 g     O .bss	00000038 button2
1fff11ac g     O .data	00000408 __malloc_av_
00004658  w    F .text	00000006 can0_error_isr
00002d98 g     F .text	0000016c _init_Teensyduino_internal_
00002818 g     F .text	00000058 usb_serial_flush_output
00004658  w    F .text	00000006 dma_ch12_isr
000052d4 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00004658  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00004658  w    F .text	00000006 pit3_isr
00004658  w    F .text	00000006 enet_rx_isr
00004658  w    F .text	00000006 portc_isr
000042dc g     F .text	00000010 main
1fff1d78 g     O .bss	00000004 __malloc_max_total_mem
1fff18b4 g     O .bss	00000018 led3
00004610  w    F .text	00000048 memmanage_fault_isr
00004934 g     F .text	00000084 usb_init_serialnumber
1fff1880 g     O .bss	00000001 currentMode
000059b4 g       .text	00000000 __init_array_end
00004d64 g     F .text	00000570 _malloc_r
00004658  w    F .text	00000006 debugmonitor_isr
1fff1920 g     O .bss	00000004 usb_midi_handleSongPosition
00004b04 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
1fff1910 g     O .bss	00000004 usb_midi_handleContinue
1fff1dbd g     O .bss	00000001 usb_midi_msg_data2
00000031 g       *ABS*	00000000 __rtc_localtime
00000000  w      *UND*	00000000 __libc_fini
00004658  w    F .text	00000006 cmp1_isr
1fff167c g     O .bss	00000038 button3
00004658  w    F .text	00000006 ftm0_isr
00005348 g     F .text	0000009c _malloc_trim_r
1fff0d60 g     O .data	00000004 string0
000026b0 g     F .text	00000108 usb_serial_write
0000466c  w    F .text	00000002 startup_late_hook
00004204  w    F .text	00000004 usb_serial_class::available()
1fff1dbe g     O .bss	00000001 usb_midi_msg_cable
1fff0d48  w    O .data	00000018 usb_string_product_name
00002cf4 g     F .text	000000a4 delay
00004658  w    F .text	00000006 tpm0_isr
000059b4 g     F .fini	00000000 _fini
1fff17a8 g     O .bss	00000014 step2
00004658  w    F .text	00000006 i2s0_rx_isr
00004658  w    F .text	00000006 uart4_error_isr
000042c4 g     F .text	00000010 Print::print(long)
00002f4c g     F .text	0000009c usb_midi_write_packed
00005314 g     F .text	0000000c atexit
00004658  w    F .text	00000006 can0_message_isr
1fff11a8 g     O .data	00000004 _impure_ptr
00004658  w    F .text	00000006 can1_message_isr
00004658  w    F .text	00000006 nmi_isr
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1938 g     O .bss	00000004 usb_midi_handleTuneRequest
000059a8 g       .text	00000000 __preinit_array_end
00004658  w    F .text	00000006 sdhc_isr
1fff1dbf g     O .bss	00000001 usb_midi_msg_channel
000004c4 g     F .text	00000002 setup
00005944 g     O .text	00000054 usb_descriptor_list
000034dc g     F .text	0000003c usb_rx
0000046c  w    F .text	00000024 Led::Led(int, int)
1fff1838 g     O .bss	0000001c knob4
00004658  w    F .text	00000006 dma_ch10_isr
1fff1930 g     O .bss	00000004 usb_midi_handleStart
00004658  w    F .text	00000006 uart0_error_isr
00003450 g     F .text	00000040 usb_malloc
00004658  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
000027d0 g     F .text	00000048 usb_serial_write_buffer_free
00004658  w    F .text	00000006 enet_timer_isr
1fff1724 g     O .bss	00000038 button6
1fff160c g     O .bss	00000038 button1
1fff15bc g       .data	00000000 _edata
00004658  w    F .text	00000006 i2s0_tx_isr
00004658  w    F .text	00000006 adc1_isr
0000420c  w    F .text	00000004 usb_serial_class::availableForWrite()
00004658  w    F .text	00000006 cmp0_isr
1fff1900 g     O .bss	00000004 usb_midi_handleClock
000049b8 g     F .text	0000004c ultoa
000042f0 g     F .text	00000004 operator new(unsigned int)
00004ba0 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff15b4 g     O .data	00000004 __malloc_trim_threshold
000041fc  w    F .text	00000004 usb_serial_class::peek()
1fff18e4 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fff191c g     O .bss	00000004 usb_midi_handlePitchChange
00004658  w    F .text	00000006 pit_isr
1fff1934 g     O .bss	00000004 usb_midi_handleTimeCodeQuarterFrame
00004658  w    F .text	00000006 dac0_isr
000059a8 g       .text	00000000 __init_array_start
00004658  w    F .text	00000006 can1_tx_warn_isr
00002adc g     F .text	000000fc analogRead
1fff1dc0 g     O .bss	00000122 usb_midi_msg_sysex
00004724 g     F .text	0000010c uart0_status_isr
00004658  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
1fff0d48 g     O .data	00000018 usb_string_product_name_default
00004658  w    F .text	00000006 dma_ch1_isr
00003518 g     F .text	0000002c usb_tx_packet_count
00004658  w    F .text	00000006 dma_ch5_isr
00004658  w    F .text	00000006 can0_rx_warn_isr
00004658  w    F .text	00000006 can0_tx_warn_isr
00004314 g     F .text	000000d8 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000469c g     F .text	00000034 kinetis_hsrun_disable
000059a8 g       .text	00000000 __preinit_array_start
00004b00  w    F .text	00000002 serialEvent3()
1fff1950 g     O .bss	00000004 usb_midi_handleSongSelect
00000000  w      *UND*	00000000 __register_frame_info
1fff189c g     O .bss	00000018 led2
00004658  w    F .text	00000006 cmp2_isr
00004be4 g     F .text	00000004 pendablesrvreq_isr
00004658  w    F .text	00000006 wakeup_isr
00004658  w    F .text	00000006 cmp3_isr
00004244 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
1fff1908 g     O .bss	00000004 usb_midi_handleActiveSensing
00004658  w    F .text	00000006 tpm2_isr
00004658  w    F .text	00000006 dma_ch0_isr
1fff0d64  w    O .data	00000016 usb_string_serial_number
00004658  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
  free(ptr);
}

void operator delete[](void * ptr)
{
  free(ptr);
       0:	... ....YF...F..
      10:	.F...F...F...F..
      20:	.F...F...F..YF..
      30:	YF...F...K...L..
      40:	YF..YF..YF..YF..
      50:	YF..YF..YF..YF..
      60:	YF..YF..YF..YF..
      70:	YF..YF..YF..YF..
      80:	YF..YF..YF..YF..
      90:	YF..YF..YF..YF..
      a0:	YF..YF..YF..YF..
      b0:	YF..YF..YF..%G..
      c0:	YF...D..YF..%J..
      d0:	YF..9E..YF..YF..
      e0:	YF..YF..YF..YF..
      f0:	YF..YF..YF..YF..
     100:	YF..YF..YF..YF..
     110:	YF...6..YF..YF..
     120:	YF..YF..YF..YF..
     130:	YF..YF..YF..YF..
     140:	YF..YF...C..YF..
     150:	YF..YF..YF..YF..
     160:	YF..YF..YF..YF..
     170:	YF..YF..YF..YF..
     180:	YF..YF..YF..YF..
     190:	YF..YF..QH..YF..
     1a0:	YF..YF..YF..YF..
     1b0:	YF..YF..YF..YF..
     1c0:	YF..YF..YF..YF..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	4660 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	2d98 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	2c9c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	2c9c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	4d04 <__libc_init_array>

	startup_late_hook();
     33a:	bl	466c <startup_late_hook>
	main();
     33e:	bl	42dc <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fff15bc
     374:	.word	0x000059b4
     378:	.word	0x1fff0c40
     37c:	.word	0x1fff15bc
     380:	.word	0x1fff1ef4
     384:	.word	0x1fff0200
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff15bc
     42c:	.word	0x00000000
     430:	.word	0x000059b8

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff15c0
     460:	.word	0x000059b8
     464:	.word	0x1fff15bc
     468:	.word	0x00000000

0000046c <Led::Led(int, int)>:
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     46c:	push	{r3, r4, r5, lr}
     46e:	mov	r4, r0
     470:	movs	r3, #0
     472:	movs	r5, #75	; 0x4b
      m_pin = pin;
     474:	stmia.w	r0, {r1, r2}
      m_state = state;

      pinMode(m_pin, OUTPUT);
     478:	uxtb	r0, r1
    unsigned long blinkLength = 75;
    boolean blinking = false;
  
  public:
    int blinkingCounter;
    Led (int pin = 0, int state = LOW) {
     47a:	strb	r3, [r4, #16]
     47c:	str	r5, [r4, #12]
      m_pin = pin;
      m_state = state;

      pinMode(m_pin, OUTPUT);
     47e:	movs	r1, #1
     480:	bl	2ce8 <pinMode>
      digitalWrite(m_pin, m_state);
     484:	ldrb	r0, [r4, #0]
     486:	ldrb	r1, [r4, #4]
     488:	bl	2cc0 <digitalWrite>
    };
     48c:	mov	r0, r4
     48e:	pop	{r3, r4, r5, pc}

00000490 <Led::blink(int)>:

    void blink (int times = 0) {
     490:	push	{r4, r5, r6, lr}
      digitalWrite(m_pin, !digitalRead(m_pin));
     492:	ldrb	r5, [r0, #0]

      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
     494:	sub	sp, #8
     496:	mov	r4, r0
      digitalWrite(m_pin, !digitalRead(m_pin));
     498:	mov	r0, r5

      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
     49a:	mov	r6, r1
      digitalWrite(m_pin, !digitalRead(m_pin));
     49c:	bl	2ccc <digitalRead>
     4a0:	clz	r1, r0
     4a4:	lsrs	r1, r1, #5
     4a6:	mov	r0, r5
     4a8:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4ac:	ldr	r3, [pc, #16]	; (4c0 <Led::blink(int)+0x30>)
      blinking = true;
      blinkingCounter = times;
     4ae:	str	r6, [r4, #20]
     4b0:	ldr	r3, [r3, #0]
     4b2:	str	r3, [sp, #4]
	return ret;
     4b4:	ldr	r3, [sp, #4]
      lastBlink = millis();  
     4b6:	str	r3, [r4, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     4b8:	movs	r2, #1
     4ba:	strb	r2, [r4, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    };
     4bc:	add	sp, #8
     4be:	pop	{r4, r5, r6, pc}
     4c0:	.word	0x1fff18fc

000004c4 <setup>:
Knob knob3(A2, sequence, transport, THIRD, 2);
Knob knob4(A3, sequence, transport, FOURTH, 3);
Knob knob5(A4, sequence, transport, FIFTH, 4);
// implement a scale knob that transposes the sequencer

void setup() {
     4c4:	bx	lr
     4c6:	nop

000004c8 <loop>:
  Serial.begin(9600);
}

void loop() {
     4c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
	}
        uint8_t analog2velocity(uint16_t val, uint8_t range);
        bool read(uint8_t channel=0) __attribute__((always_inline)) {
		return usb_midi_read(channel);
     4cc:	movs	r0, #0
     4ce:	sub	sp, #376	; 0x178
     4d0:	bl	3014 <usb_midi_read>
  if (usbMIDI.read()) {
     4d4:	cmp	r0, #0
     4d6:	bne.w	1012 <loop+0xb4a>
     4da:	ldr	r4, [pc, #692]	; (790 <loop+0x2c8>)
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     4dc:	ldr	r6, [pc, #692]	; (794 <loop+0x2cc>)
     4de:	ldrb.w	r0, [r6, #52]	; 0x34
     4e2:	bl	2ccc <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     4e6:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     4e8:	mov	r7, r0
     4ea:	str	r0, [r6, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     4ec:	ldrb.w	r5, [r6, #36]	; 0x24
     4f0:	beq.w	1208 <loop+0xd40>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     4f4:	cmp	r5, r7
     4f6:	beq.w	1000 <loop+0xb38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4fa:	ldr	r3, [r4, #0]
     4fc:	str	r3, [sp, #260]	; 0x104
	return ret;
     4fe:	ldr	r3, [sp, #260]	; 0x104
        m_lastDebounceTime = millis();
     500:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     502:	ldr	r2, [r4, #0]
     504:	str	r2, [sp, #256]	; 0x100
	return ret;
     506:	ldr	r2, [sp, #256]	; 0x100
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     508:	ldr.w	r8, [pc, #644]	; 790 <loop+0x2c8>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     50c:	cmp	r2, r3
     50e:	beq.n	52e <loop+0x66>
        // and the current changed
        if (current != m_state) {
     510:	ldr	r3, [r6, #4]
     512:	ldr	r5, [pc, #640]	; (794 <loop+0x2cc>)
     514:	cmp	r7, r3
     516:	beq.n	52e <loop+0x66>
     518:	ldr.w	r3, [r8]
     51c:	str	r3, [sp, #252]	; 0xfc
	return ret;
     51e:	ldr	r3, [sp, #252]	; 0xfc
     520:	ldr	r1, [r5, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     522:	ldr	r2, [r5, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     524:	str	r7, [r5, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     526:	subs	r3, r3, r1
     528:	cmp	r3, r2
     52a:	bcc.w	e28 <loop+0x960>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     52e:	cbnz	r7, 53c <loop+0x74>
     530:	ldrb.w	r3, [r6, #36]	; 0x24
     534:	ldr	r5, [pc, #604]	; (794 <loop+0x2cc>)
     536:	cmp	r3, #1
     538:	beq.w	c3e <loop+0x776>
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     53c:	ldr	r5, [pc, #600]	; (798 <loop+0x2d0>)
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     53e:	strb.w	r7, [r6, #36]	; 0x24
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     542:	ldrb.w	r0, [r5, #52]	; 0x34
     546:	bl	2ccc <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     54a:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     54c:	mov	r7, r0
     54e:	str	r0, [r5, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     550:	ldrb.w	r6, [r5, #36]	; 0x24
     554:	beq.w	116e <loop+0xca6>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     558:	cmp	r6, r7
     55a:	beq.w	100c <loop+0xb44>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     55e:	ldr	r3, [r4, #0]
     560:	str	r3, [sp, #228]	; 0xe4
	return ret;
     562:	ldr	r3, [sp, #228]	; 0xe4
        m_lastDebounceTime = millis();
     564:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     566:	ldr	r2, [r4, #0]
     568:	str	r2, [sp, #224]	; 0xe0
	return ret;
     56a:	ldr	r2, [sp, #224]	; 0xe0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     56c:	ldr.w	r8, [pc, #544]	; 790 <loop+0x2c8>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     570:	cmp	r2, r3
     572:	beq.n	592 <loop+0xca>
        // and the current changed
        if (current != m_state) {
     574:	ldr	r3, [r5, #4]
     576:	ldr	r6, [pc, #544]	; (798 <loop+0x2d0>)
     578:	cmp	r7, r3
     57a:	beq.n	592 <loop+0xca>
     57c:	ldr.w	r3, [r8]
     580:	str	r3, [sp, #220]	; 0xdc
	return ret;
     582:	ldr	r3, [sp, #220]	; 0xdc
     584:	ldr	r1, [r6, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     586:	ldr	r2, [r6, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     588:	str	r7, [r6, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     58a:	subs	r3, r3, r1
     58c:	cmp	r3, r2
     58e:	bcc.w	d98 <loop+0x8d0>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     592:	cbnz	r7, 5a0 <loop+0xd8>
     594:	ldrb.w	r3, [r5, #36]	; 0x24
     598:	ldr	r6, [pc, #508]	; (798 <loop+0x2d0>)
     59a:	cmp	r3, #1
     59c:	beq.w	c68 <loop+0x7a0>
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     5a0:	ldr	r6, [pc, #504]	; (79c <loop+0x2d4>)
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     5a2:	strb.w	r7, [r5, #36]	; 0x24
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     5a6:	ldrb.w	r0, [r6, #52]	; 0x34
     5aa:	bl	2ccc <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     5ae:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     5b0:	mov	r7, r0
     5b2:	str	r0, [r6, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     5b4:	ldrb.w	r5, [r6, #36]	; 0x24
     5b8:	beq.w	103c <loop+0xb74>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     5bc:	cmp	r5, r7
     5be:	beq.w	ff4 <loop+0xb2c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5c2:	ldr	r3, [r4, #0]
     5c4:	str	r3, [sp, #196]	; 0xc4
	return ret;
     5c6:	ldr	r3, [sp, #196]	; 0xc4
        m_lastDebounceTime = millis();
     5c8:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5ca:	ldr	r2, [r4, #0]
     5cc:	str	r2, [sp, #192]	; 0xc0
	return ret;
     5ce:	ldr	r2, [sp, #192]	; 0xc0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5d0:	ldr.w	r8, [pc, #444]	; 790 <loop+0x2c8>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     5d4:	cmp	r2, r3
     5d6:	beq.n	5f6 <loop+0x12e>
        // and the current changed
        if (current != m_state) {
     5d8:	ldr	r3, [r6, #4]
     5da:	ldr	r5, [pc, #448]	; (79c <loop+0x2d4>)
     5dc:	cmp	r7, r3
     5de:	beq.n	5f6 <loop+0x12e>
     5e0:	ldr.w	r3, [r8]
     5e4:	str	r3, [sp, #188]	; 0xbc
	return ret;
     5e6:	ldr	r3, [sp, #188]	; 0xbc
     5e8:	ldr	r1, [r5, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     5ea:	ldr	r2, [r5, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     5ec:	str	r7, [r5, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     5ee:	subs	r3, r3, r1
     5f0:	cmp	r3, r2
     5f2:	bcc.w	de0 <loop+0x918>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     5f6:	cbnz	r7, 604 <loop+0x13c>
     5f8:	ldrb.w	r3, [r6, #36]	; 0x24
     5fc:	ldr	r5, [pc, #412]	; (79c <loop+0x2d4>)
     5fe:	cmp	r3, #1
     600:	beq.w	c92 <loop+0x7ca>
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     604:	ldr	r5, [pc, #408]	; (7a0 <loop+0x2d8>)
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     606:	strb.w	r7, [r6, #36]	; 0x24
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     60a:	ldrb.w	r0, [r5, #52]	; 0x34
     60e:	bl	2ccc <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     612:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     614:	mov	r7, r0
     616:	str	r0, [r5, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     618:	ldrb.w	r6, [r5, #36]	; 0x24
     61c:	beq.w	135e <loop+0xe96>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     620:	cmp	r6, r7
     622:	beq.w	fce <loop+0xb06>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     626:	ldr	r3, [r4, #0]
     628:	str	r3, [sp, #164]	; 0xa4
	return ret;
     62a:	ldr	r3, [sp, #164]	; 0xa4
        m_lastDebounceTime = millis();
     62c:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     62e:	ldr	r2, [r4, #0]
     630:	str	r2, [sp, #160]	; 0xa0
	return ret;
     632:	ldr	r2, [sp, #160]	; 0xa0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     634:	ldr.w	r8, [pc, #344]	; 790 <loop+0x2c8>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     638:	cmp	r2, r3
     63a:	beq.n	65a <loop+0x192>
        // and the current changed
        if (current != m_state) {
     63c:	ldr	r3, [r5, #4]
     63e:	ldr	r6, [pc, #352]	; (7a0 <loop+0x2d8>)
     640:	cmp	r3, r7
     642:	beq.n	65a <loop+0x192>
     644:	ldr.w	r3, [r8]
     648:	str	r3, [sp, #156]	; 0x9c
	return ret;
     64a:	ldr	r3, [sp, #156]	; 0x9c
     64c:	ldr	r1, [r6, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     64e:	ldr	r2, [r6, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     650:	str	r7, [r6, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     652:	subs	r3, r3, r1
     654:	cmp	r3, r2
     656:	bcc.w	e70 <loop+0x9a8>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     65a:	cbnz	r7, 668 <loop+0x1a0>
     65c:	ldrb.w	r3, [r5, #36]	; 0x24
     660:	ldr	r6, [pc, #316]	; (7a0 <loop+0x2d8>)
     662:	cmp	r3, #1
     664:	beq.w	cbc <loop+0x7f4>
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     668:	ldr	r6, [pc, #312]	; (7a4 <loop+0x2dc>)
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     66a:	strb.w	r7, [r5, #36]	; 0x24
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     66e:	ldrb.w	r0, [r6, #52]	; 0x34
     672:	bl	2ccc <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     676:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     678:	mov	r7, r0
     67a:	str	r0, [r6, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     67c:	ldrb.w	r5, [r6, #36]	; 0x24
     680:	beq.w	12c4 <loop+0xdfc>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     684:	cmp	r5, r7
     686:	beq.w	ffa <loop+0xb32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     68a:	ldr	r3, [r4, #0]
     68c:	str	r3, [sp, #132]	; 0x84
	return ret;
     68e:	ldr	r3, [sp, #132]	; 0x84
        m_lastDebounceTime = millis();
     690:	str	r3, [r6, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     692:	ldr	r2, [r4, #0]
     694:	str	r2, [sp, #128]	; 0x80
	return ret;
     696:	ldr	r2, [sp, #128]	; 0x80
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     698:	ldr.w	r8, [pc, #244]	; 790 <loop+0x2c8>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     69c:	cmp	r2, r3
     69e:	beq.n	6be <loop+0x1f6>
        // and the current changed
        if (current != m_state) {
     6a0:	ldr	r3, [r6, #4]
     6a2:	ldr	r5, [pc, #256]	; (7a4 <loop+0x2dc>)
     6a4:	cmp	r7, r3
     6a6:	beq.n	6be <loop+0x1f6>
     6a8:	ldr.w	r3, [r8]
     6ac:	str	r3, [sp, #124]	; 0x7c
	return ret;
     6ae:	ldr	r3, [sp, #124]	; 0x7c
     6b0:	ldr	r1, [r5, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     6b2:	ldr	r2, [r5, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     6b4:	str	r7, [r5, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     6b6:	subs	r3, r3, r1
     6b8:	cmp	r3, r2
     6ba:	bcc.w	d52 <loop+0x88a>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     6be:	cbnz	r7, 6cc <loop+0x204>
     6c0:	ldrb.w	r3, [r6, #36]	; 0x24
     6c4:	ldr	r5, [pc, #220]	; (7a4 <loop+0x2dc>)
     6c6:	cmp	r3, #1
     6c8:	beq.w	9da <loop+0x512>
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     6cc:	ldr	r5, [pc, #216]	; (7a8 <loop+0x2e0>)
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     6ce:	strb.w	r7, [r6, #36]	; 0x24
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     6d2:	ldrb.w	r0, [r5, #52]	; 0x34
     6d6:	bl	2ccc <digitalRead>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     6da:	cmp	r0, #1
    unsigned long timeSincePress () {
      return (millis() - firstTime);
    }
    
    void check (void) {
      current = digitalRead(m_pin);
     6dc:	mov	r6, r0
     6de:	str	r0, [r5, #32]
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
     6e0:	ldrb.w	r7, [r5, #36]	; 0x24
     6e4:	beq.w	10d4 <loop+0xc0c>
    void reverse () {
      m_sequence.reverse();
    }

    boolean debounce (int current) {
      if (current != previous) {  
     6e8:	cmp	r7, r6
     6ea:	beq.w	1006 <loop+0xb3e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6ee:	ldr	r3, [r4, #0]
     6f0:	str	r3, [sp, #100]	; 0x64
	return ret;
     6f2:	ldr	r3, [sp, #100]	; 0x64
        m_lastDebounceTime = millis();
     6f4:	str	r3, [r5, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6f6:	ldr	r2, [r4, #0]
     6f8:	str	r2, [sp, #96]	; 0x60
	return ret;
     6fa:	ldr	r2, [sp, #96]	; 0x60
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6fc:	ldr.w	r8, [pc, #144]	; 790 <loop+0x2c8>
      }

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
     700:	cmp	r2, r3
     702:	beq.n	722 <loop+0x25a>
        // and the current changed
        if (current != m_state) {
     704:	ldr	r3, [r5, #4]
     706:	ldr	r7, [pc, #160]	; (7a8 <loop+0x2e0>)
     708:	cmp	r6, r3
     70a:	beq.n	722 <loop+0x25a>
     70c:	ldr.w	r3, [r8]
     710:	str	r3, [sp, #92]	; 0x5c
	return ret;
     712:	ldr	r3, [sp, #92]	; 0x5c
     714:	ldr	r1, [r7, #40]	; 0x28
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     716:	ldr	r2, [r7, #48]	; 0x30

      // if the debounce time has passed
      if ((millis() - m_lastDebounceTime) > 00) {
        // and the current changed
        if (current != m_state) {
          m_state = current;
     718:	str	r6, [r7, #4]
        m_sequence.enterShiftMode();
      }

      boolean debounced = debounce(current);

      if (debounced && timeSincePress() < m_holdThreshold) {
     71a:	subs	r3, r3, r1
     71c:	cmp	r3, r2
     71e:	bcc.w	d0c <loop+0x844>
    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    };

    boolean currentWentDown () {
      return current == LOW && previous == HIGH;
     722:	cbnz	r6, 730 <loop+0x268>
     724:	ldrb.w	r3, [r5, #36]	; 0x24
     728:	ldr	r7, [pc, #124]	; (7a8 <loop+0x2e0>)
     72a:	cmp	r3, #1
     72c:	beq.w	a34 <loop+0x56c>
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     730:	ldr	r7, [pc, #120]	; (7ac <loop+0x2e4>)
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     732:	strb.w	r6, [r5, #36]	; 0x24
     736:	ldrb	r3, [r7, #16]
     738:	cmp	r3, #0
     73a:	beq.w	a6a <loop+0x5a2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     73e:	ldr	r3, [r4, #0]
     740:	str	r3, [sp, #80]	; 0x50
	return ret;
     742:	ldr	r3, [sp, #80]	; 0x50
     744:	ldr	r1, [r7, #8]
     746:	ldr	r2, [r7, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     748:	ldr	r6, [pc, #68]	; (790 <loop+0x2c8>)
     74a:	subs	r3, r3, r1
     74c:	cmp	r2, r3
     74e:	bcc.w	ee6 <loop+0xa1e>
     752:	ldr	r5, [pc, #92]	; (7b0 <loop+0x2e8>)
     754:	ldrb	r3, [r5, #16]
     756:	cmp	r3, #0
     758:	beq.w	aba <loop+0x5f2>
     75c:	ldr	r3, [r4, #0]
     75e:	str	r3, [sp, #68]	; 0x44
	return ret;
     760:	ldr	r3, [sp, #68]	; 0x44
     762:	ldr	r1, [r5, #8]
     764:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     766:	ldr	r7, [pc, #40]	; (790 <loop+0x2c8>)
     768:	subs	r3, r3, r1
     76a:	cmp	r2, r3
     76c:	bcc.w	f9e <loop+0xad6>
     770:	ldr	r5, [pc, #64]	; (7b4 <loop+0x2ec>)
     772:	ldrb	r3, [r5, #16]
     774:	cmp	r3, #0
     776:	beq.w	b0a <loop+0x642>
     77a:	ldr	r3, [r4, #0]
     77c:	str	r3, [sp, #56]	; 0x38
	return ret;
     77e:	ldr	r3, [sp, #56]	; 0x38
     780:	ldr	r1, [r5, #8]
     782:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     784:	ldr	r7, [pc, #8]	; (790 <loop+0x2c8>)
     786:	subs	r3, r3, r1
     788:	cmp	r2, r3
     78a:	bcc.w	f70 <loop+0xaa8>
     78e:	b.n	7b8 <loop+0x2f0>
     790:	.word	0x1fff18fc
     794:	.word	0x1fff160c
     798:	.word	0x1fff1644
     79c:	.word	0x1fff167c
     7a0:	.word	0x1fff16b4
     7a4:	.word	0x1fff16ec
     7a8:	.word	0x1fff1724
     7ac:	.word	0x1fff1884
     7b0:	.word	0x1fff189c
     7b4:	.word	0x1fff18b4
     7b8:	ldr	r5, [pc, #584]	; (a04 <loop+0x53c>)
     7ba:	ldrb	r3, [r5, #16]
     7bc:	cmp	r3, #0
     7be:	beq.w	b5a <loop+0x692>
     7c2:	ldr	r3, [r4, #0]
     7c4:	str	r3, [sp, #44]	; 0x2c
	return ret;
     7c6:	ldr	r3, [sp, #44]	; 0x2c
     7c8:	ldr	r1, [r5, #8]
     7ca:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7cc:	ldr	r7, [pc, #568]	; (a08 <loop+0x540>)
     7ce:	subs	r3, r3, r1
     7d0:	cmp	r2, r3
     7d2:	bcc.w	f42 <loop+0xa7a>
     7d6:	ldr	r5, [pc, #564]	; (a0c <loop+0x544>)
     7d8:	ldrb	r3, [r5, #16]
     7da:	cmp	r3, #0
     7dc:	beq.w	baa <loop+0x6e2>
     7e0:	ldr	r3, [r4, #0]
     7e2:	str	r3, [sp, #32]
	return ret;
     7e4:	ldr	r3, [sp, #32]
     7e6:	ldr	r1, [r5, #8]
     7e8:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7ea:	ldr	r7, [pc, #540]	; (a08 <loop+0x540>)
     7ec:	subs	r3, r3, r1
     7ee:	cmp	r2, r3
     7f0:	bcc.w	f14 <loop+0xa4c>
     7f4:	ldr	r5, [pc, #536]	; (a10 <loop+0x548>)
     7f6:	ldrb	r3, [r5, #16]
     7f8:	cmp	r3, #0
     7fa:	beq.w	bfa <loop+0x732>
     7fe:	ldr	r3, [r4, #0]
     800:	str	r3, [sp, #20]
	return ret;
     802:	ldr	r3, [sp, #20]
     804:	ldr	r1, [r5, #8]
     806:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     808:	ldr	r7, [pc, #508]	; (a08 <loop+0x540>)
     80a:	subs	r3, r3, r1
     80c:	cmp	r2, r3
     80e:	bcc.w	eb8 <loop+0x9f0>
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     812:	ldr	r4, [pc, #512]	; (a14 <loop+0x54c>)
     814:	ldrb	r0, [r4, #0]
     816:	bl	2adc <analogRead>

      int diff = abs(m_value - m_lastValue);
     81a:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     81c:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     81e:	cmp	r0, r3
     820:	beq.n	86c <loop+0x3a4>
     822:	subs	r3, r0, r3
     824:	cmp	r3, #0
     826:	it	lt
     828:	neglt	r3, r3
     82a:	cmp	r3, #10
     82c:	ble.n	86c <loop+0x3a4>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     82e:	ldrb	r3, [r4, #24]
     830:	cmp	r3, #4
     832:	beq.w	1596 <loop+0x10ce>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     836:	ldr	r3, [pc, #480]	; (a18 <loop+0x550>)
     838:	ldrb	r3, [r3, #0]
     83a:	cmp	r3, #1
     83c:	beq.w	1984 <loop+0x14bc>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     840:	cmp	r3, #0
     842:	beq.w	1450 <loop+0xf88>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     846:	cmp	r3, #2
     848:	bne.n	86a <loop+0x3a2>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     84a:	ldr	r2, [r4, #16]
     84c:	ldr	r1, [r4, #12]
      m_controller.controlChange(0, 123, 127);
    };

    void controlLength (int value) {
      int newValue = map(value, 0, 1023, 24, 1);
      m_length = newValue;
     84e:	mvn.w	r3, #21
     852:	mul.w	r3, r3, r0
     856:	cmp	r3, #0
     858:	add.w	r2, r2, r1, lsl #2
     85c:	it	lt
     85e:	addwlt	r3, r3, #1023	; 0x3ff
     862:	ldr	r2, [r2, #4]
     864:	asrs	r3, r3, #10
     866:	adds	r3, #24
     868:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     86a:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     86c:	ldr	r4, [pc, #428]	; (a1c <loop+0x554>)
     86e:	ldrb	r0, [r4, #0]
     870:	bl	2adc <analogRead>

      int diff = abs(m_value - m_lastValue);
     874:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     876:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     878:	cmp	r0, r3
     87a:	beq.n	8c6 <loop+0x3fe>
     87c:	subs	r3, r0, r3
     87e:	cmp	r3, #0
     880:	it	lt
     882:	neglt	r3, r3
     884:	cmp	r3, #10
     886:	ble.n	8c6 <loop+0x3fe>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     888:	ldrb	r3, [r4, #24]
     88a:	cmp	r3, #4
     88c:	beq.w	15b4 <loop+0x10ec>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     890:	ldr	r3, [pc, #388]	; (a18 <loop+0x550>)
     892:	ldrb	r3, [r3, #0]
     894:	cmp	r3, #1
     896:	beq.w	1966 <loop+0x149e>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     89a:	cmp	r3, #0
     89c:	beq.w	1490 <loop+0xfc8>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     8a0:	cmp	r3, #2
     8a2:	bne.n	8c4 <loop+0x3fc>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     8a4:	ldr	r2, [r4, #16]
     8a6:	ldr	r1, [r4, #12]
     8a8:	mvn.w	r3, #21
     8ac:	mul.w	r3, r3, r0
     8b0:	cmp	r3, #0
     8b2:	add.w	r2, r2, r1, lsl #2
     8b6:	it	lt
     8b8:	addwlt	r3, r3, #1023	; 0x3ff
     8bc:	ldr	r2, [r2, #4]
     8be:	asrs	r3, r3, #10
     8c0:	adds	r3, #24
     8c2:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     8c4:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     8c6:	ldr	r4, [pc, #344]	; (a20 <loop+0x558>)
     8c8:	ldrb	r0, [r4, #0]
     8ca:	bl	2adc <analogRead>

      int diff = abs(m_value - m_lastValue);
     8ce:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     8d0:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     8d2:	cmp	r0, r3
     8d4:	beq.n	920 <loop+0x458>
     8d6:	subs	r3, r0, r3
     8d8:	cmp	r3, #0
     8da:	it	lt
     8dc:	neglt	r3, r3
     8de:	cmp	r3, #10
     8e0:	ble.n	920 <loop+0x458>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     8e2:	ldrb	r3, [r4, #24]
     8e4:	cmp	r3, #4
     8e6:	beq.w	15d2 <loop+0x110a>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     8ea:	ldr	r3, [pc, #300]	; (a18 <loop+0x550>)
     8ec:	ldrb	r3, [r3, #0]
     8ee:	cmp	r3, #1
     8f0:	beq.w	192a <loop+0x1462>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     8f4:	cmp	r3, #0
     8f6:	beq.w	1430 <loop+0xf68>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     8fa:	cmp	r3, #2
     8fc:	bne.n	91e <loop+0x456>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     8fe:	ldr	r2, [r4, #16]
     900:	ldr	r1, [r4, #12]
     902:	mvn.w	r3, #21
     906:	mul.w	r3, r3, r0
     90a:	cmp	r3, #0
     90c:	add.w	r2, r2, r1, lsl #2
     910:	it	lt
     912:	addwlt	r3, r3, #1023	; 0x3ff
     916:	ldr	r2, [r2, #4]
     918:	asrs	r3, r3, #10
     91a:	adds	r3, #24
     91c:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     91e:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     920:	ldr	r4, [pc, #256]	; (a24 <loop+0x55c>)
     922:	ldrb	r0, [r4, #0]
     924:	bl	2adc <analogRead>

      int diff = abs(m_value - m_lastValue);
     928:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     92a:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     92c:	cmp	r0, r3
     92e:	beq.n	97a <loop+0x4b2>
     930:	subs	r3, r0, r3
     932:	cmp	r3, #0
     934:	it	lt
     936:	neglt	r3, r3
     938:	cmp	r3, #10
     93a:	ble.n	97a <loop+0x4b2>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     93c:	ldrb	r3, [r4, #24]
     93e:	cmp	r3, #4
     940:	beq.w	1578 <loop+0x10b0>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     944:	ldr	r3, [pc, #208]	; (a18 <loop+0x550>)
     946:	ldrb	r3, [r3, #0]
     948:	cmp	r3, #1
     94a:	beq.w	1948 <loop+0x1480>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     94e:	cmp	r3, #0
     950:	beq.w	14b0 <loop+0xfe8>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     954:	cmp	r3, #2
     956:	bne.n	978 <loop+0x4b0>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     958:	ldr	r2, [r4, #16]
     95a:	ldr	r1, [r4, #12]
     95c:	mvn.w	r3, #21
     960:	mul.w	r3, r3, r0
     964:	cmp	r3, #0
     966:	add.w	r2, r2, r1, lsl #2
     96a:	it	lt
     96c:	addwlt	r3, r3, #1023	; 0x3ff
     970:	ldr	r2, [r2, #4]
     972:	asrs	r3, r3, #10
     974:	adds	r3, #24
     976:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     978:	str	r0, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     97a:	ldr	r4, [pc, #172]	; (a28 <loop+0x560>)
     97c:	ldrb	r0, [r4, #0]
     97e:	bl	2adc <analogRead>

      int diff = abs(m_value - m_lastValue);
     982:	ldr	r3, [r4, #8]
    }

    void check () {
      // todo latch

      m_value = analogRead(m_pin);
     984:	str	r0, [r4, #4]

      int diff = abs(m_value - m_lastValue);

      // "filter"
      const boolean isChanging = m_value != m_lastValue && diff > 10;
     986:	cmp	r0, r3
     988:	beq.n	9d4 <loop+0x50c>
     98a:	subs	r3, r0, r3
     98c:	cmp	r3, #0
     98e:	it	lt
     990:	neglt	r3, r3
     992:	cmp	r3, #10
     994:	ble.n	9d4 <loop+0x50c>
      m_knobType = knobType;
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
     996:	ldrb	r3, [r4, #24]
     998:	cmp	r3, #4
     99a:	beq.w	15f0 <loop+0x1128>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
     99e:	ldr	r3, [pc, #120]	; (a18 <loop+0x550>)
     9a0:	ldrb	r3, [r3, #0]
     9a2:	cmp	r3, #1
     9a4:	beq.w	19a2 <loop+0x14da>
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
     9a8:	cmp	r3, #0
     9aa:	beq.w	1470 <loop+0xfa8>
          m_sequence.m_steps[m_id]->controlPitch(m_value);
        } else if (currentMode == NOTELENGTH) {
     9ae:	cmp	r3, #2
     9b0:	bne.n	9d2 <loop+0x50a>
          m_sequence.m_steps[m_id]->controlLength(m_value);
     9b2:	ldr	r2, [r4, #16]
     9b4:	ldr	r1, [r4, #12]
     9b6:	mvn.w	r3, #21
     9ba:	mul.w	r3, r3, r0
     9be:	cmp	r3, #0
     9c0:	add.w	r2, r2, r1, lsl #2
     9c4:	it	lt
     9c6:	addwlt	r3, r3, #1023	; 0x3ff
     9ca:	ldr	r2, [r2, #4]
     9cc:	asrs	r3, r3, #10
     9ce:	adds	r3, #24
     9d0:	str	r3, [r2, #16]
      const boolean isChanging = m_value != m_lastValue && diff > 10;

      if (isChanging) {
        onChange();

        m_lastValue = m_value;
     9d2:	str	r0, [r4, #8]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
     9d4:	add	sp, #376	; 0x178
     9d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9da:	ldr	r3, [r4, #0]
     9dc:	str	r3, [sp, #120]	; 0x78
	return ret;
     9de:	ldr	r3, [sp, #120]	; 0x78
     9e0:	ldr	r1, [r5, #40]	; 0x28

      if (debounced && timeSincePress() < m_holdThreshold) {
        onPress();
      }
 
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
     9e2:	ldr	r2, [r5, #48]	; 0x30
     9e4:	subs	r3, r3, r1
     9e6:	cmp	r3, r2
     9e8:	bcc.w	6cc <loop+0x204>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     9ec:	movs	r1, #9
     9ee:	ldr	r0, [pc, #60]	; (a2c <loop+0x564>)
     9f0:	bl	26b0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     9f4:	ldr	r0, [pc, #56]	; (a30 <loop+0x568>)
     9f6:	bl	4224 <Print::println()>
    void enterShiftMode () {
      m_shiftMode = true;
    };

    void exitShiftMode () {
      m_shiftMode = false;
     9fa:	ldr	r3, [r5, #28]
     9fc:	strb.w	r7, [r3, #46]	; 0x2e
     a00:	ldr	r7, [r5, #32]
     a02:	b.n	6cc <loop+0x204>
     a04:	.word	0x1fff18cc
     a08:	.word	0x1fff18fc
     a0c:	.word	0x1fff15d8
     a10:	.word	0x1fff15f0
     a14:	.word	0x1fff17e4
     a18:	.word	0x1fff1880
     a1c:	.word	0x1fff1800
     a20:	.word	0x1fff181c
     a24:	.word	0x1fff1838
     a28:	.word	0x1fff1854
     a2c:	.word	0x000056ac
     a30:	.word	0x1fff0c70
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a34:	ldr	r3, [r4, #0]
     a36:	str	r3, [sp, #88]	; 0x58
	return ret;
     a38:	ldr	r3, [sp, #88]	; 0x58
     a3a:	ldr	r1, [r7, #40]	; 0x28
     a3c:	ldr	r2, [r7, #48]	; 0x30
     a3e:	subs	r3, r3, r1
     a40:	cmp	r3, r2
     a42:	bcc.w	730 <loop+0x268>
     a46:	movs	r1, #9
     a48:	ldr	r0, [pc, #668]	; (ce8 <loop+0x820>)
     a4a:	bl	26b0 <usb_serial_write>
     a4e:	ldr	r0, [pc, #668]	; (cec <loop+0x824>)
     a50:	bl	4224 <Print::println()>
     a54:	ldr	r3, [r7, #28]
     a56:	strb.w	r6, [r3, #46]	; 0x2e
     a5a:	ldr	r6, [r7, #32]
     a5c:	ldr	r7, [pc, #656]	; (cf0 <loop+0x828>)
        Serial.println("onRelease");
        m_sequence.exitShiftMode();
      }

      previous = current;
     a5e:	strb.w	r6, [r5, #36]	; 0x24
     a62:	ldrb	r3, [r7, #16]
     a64:	cmp	r3, #0
     a66:	bne.w	73e <loop+0x276>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     a6a:	ldr	r6, [r7, #20]
     a6c:	ldr	r5, [pc, #640]	; (cf0 <loop+0x828>)
     a6e:	cmp	r6, #0
     a70:	ble.w	752 <loop+0x28a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a74:	ldr	r3, [r4, #0]
     a76:	str	r3, [sp, #76]	; 0x4c
	return ret;
     a78:	ldr	r3, [sp, #76]	; 0x4c
     a7a:	ldr	r1, [r5, #8]
     a7c:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a7e:	ldr.w	r8, [pc, #648]	; d08 <loop+0x840>
     a82:	subs	r3, r3, r1
     a84:	cmp	r2, r3
     a86:	bcs.w	752 <loop+0x28a>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     a8a:	ldrb	r7, [r5, #0]
     a8c:	mov	r0, r7
     a8e:	bl	2ccc <digitalRead>
     a92:	clz	r1, r0
     a96:	lsrs	r1, r1, #5
     a98:	mov	r0, r7
     a9a:	bl	2cc0 <digitalWrite>
     a9e:	ldr.w	r3, [r8]
     aa2:	str	r3, [sp, #352]	; 0x160
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     aa4:	subs	r6, #2
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     aa6:	movs	r3, #1
	return ret;
     aa8:	ldr	r2, [sp, #352]	; 0x160
     aaa:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     aac:	str	r6, [r5, #20]

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     aae:	str	r2, [r5, #8]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     ab0:	ldr	r5, [pc, #576]	; (cf4 <loop+0x82c>)
     ab2:	ldrb	r3, [r5, #16]
     ab4:	cmp	r3, #0
     ab6:	bne.w	75c <loop+0x294>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     aba:	ldr	r6, [r5, #20]
     abc:	ldr	r5, [pc, #564]	; (cf4 <loop+0x82c>)
     abe:	cmp	r6, #0
     ac0:	ble.w	770 <loop+0x2a8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ac4:	ldr	r3, [r4, #0]
     ac6:	str	r3, [sp, #64]	; 0x40
	return ret;
     ac8:	ldr	r3, [sp, #64]	; 0x40
     aca:	ldr	r1, [r5, #8]
     acc:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ace:	ldr.w	r8, [pc, #568]	; d08 <loop+0x840>
     ad2:	subs	r3, r3, r1
     ad4:	cmp	r2, r3
     ad6:	bcs.w	770 <loop+0x2a8>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     ada:	ldrb	r7, [r5, #0]
     adc:	mov	r0, r7
     ade:	bl	2ccc <digitalRead>
     ae2:	clz	r1, r0
     ae6:	lsrs	r1, r1, #5
     ae8:	mov	r0, r7
     aea:	bl	2cc0 <digitalWrite>
     aee:	ldr.w	r3, [r8]
     af2:	str	r3, [sp, #356]	; 0x164
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     af4:	subs	r6, #2
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     af6:	movs	r3, #1
	return ret;
     af8:	ldr	r2, [sp, #356]	; 0x164
     afa:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     afc:	str	r6, [r5, #20]

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     afe:	str	r2, [r5, #8]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     b00:	ldr	r5, [pc, #500]	; (cf8 <loop+0x830>)
     b02:	ldrb	r3, [r5, #16]
     b04:	cmp	r3, #0
     b06:	bne.w	77a <loop+0x2b2>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     b0a:	ldr	r6, [r5, #20]
     b0c:	ldr	r5, [pc, #488]	; (cf8 <loop+0x830>)
     b0e:	cmp	r6, #0
     b10:	ble.w	7b8 <loop+0x2f0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b14:	ldr	r3, [r4, #0]
     b16:	str	r3, [sp, #52]	; 0x34
	return ret;
     b18:	ldr	r3, [sp, #52]	; 0x34
     b1a:	ldr	r1, [r5, #8]
     b1c:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b1e:	ldr.w	r8, [pc, #488]	; d08 <loop+0x840>
     b22:	subs	r3, r3, r1
     b24:	cmp	r2, r3
     b26:	bcs.w	7b8 <loop+0x2f0>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     b2a:	ldrb	r7, [r5, #0]
     b2c:	mov	r0, r7
     b2e:	bl	2ccc <digitalRead>
     b32:	clz	r1, r0
     b36:	lsrs	r1, r1, #5
     b38:	mov	r0, r7
     b3a:	bl	2cc0 <digitalWrite>
     b3e:	ldr.w	r3, [r8]
     b42:	str	r3, [sp, #360]	; 0x168
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     b44:	subs	r6, #2
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b46:	movs	r3, #1
	return ret;
     b48:	ldr	r2, [sp, #360]	; 0x168
     b4a:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     b4c:	str	r6, [r5, #20]

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     b4e:	str	r2, [r5, #8]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     b50:	ldr	r5, [pc, #424]	; (cfc <loop+0x834>)
     b52:	ldrb	r3, [r5, #16]
     b54:	cmp	r3, #0
     b56:	bne.w	7c2 <loop+0x2fa>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     b5a:	ldr	r6, [r5, #20]
     b5c:	ldr	r5, [pc, #412]	; (cfc <loop+0x834>)
     b5e:	cmp	r6, #0
     b60:	ble.w	7d6 <loop+0x30e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b64:	ldr	r3, [r4, #0]
     b66:	str	r3, [sp, #40]	; 0x28
	return ret;
     b68:	ldr	r3, [sp, #40]	; 0x28
     b6a:	ldr	r1, [r5, #8]
     b6c:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b6e:	ldr.w	r8, [pc, #408]	; d08 <loop+0x840>
     b72:	subs	r3, r3, r1
     b74:	cmp	r2, r3
     b76:	bcs.w	7d6 <loop+0x30e>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     b7a:	ldrb	r7, [r5, #0]
     b7c:	mov	r0, r7
     b7e:	bl	2ccc <digitalRead>
     b82:	clz	r1, r0
     b86:	lsrs	r1, r1, #5
     b88:	mov	r0, r7
     b8a:	bl	2cc0 <digitalWrite>
     b8e:	ldr.w	r3, [r8]
     b92:	str	r3, [sp, #364]	; 0x16c
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     b94:	subs	r6, #2
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     b96:	movs	r3, #1
	return ret;
     b98:	ldr	r2, [sp, #364]	; 0x16c
     b9a:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     b9c:	str	r6, [r5, #20]

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     b9e:	str	r2, [r5, #8]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     ba0:	ldr	r5, [pc, #348]	; (d00 <loop+0x838>)
     ba2:	ldrb	r3, [r5, #16]
     ba4:	cmp	r3, #0
     ba6:	bne.w	7e0 <loop+0x318>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     baa:	ldr	r6, [r5, #20]
     bac:	ldr	r5, [pc, #336]	; (d00 <loop+0x838>)
     bae:	cmp	r6, #0
     bb0:	ble.w	7f4 <loop+0x32c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     bb4:	ldr	r3, [r4, #0]
     bb6:	str	r3, [sp, #28]
	return ret;
     bb8:	ldr	r3, [sp, #28]
     bba:	ldr	r1, [r5, #8]
     bbc:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     bbe:	ldr.w	r8, [pc, #328]	; d08 <loop+0x840>
     bc2:	subs	r3, r3, r1
     bc4:	cmp	r2, r3
     bc6:	bcs.w	7f4 <loop+0x32c>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     bca:	ldrb	r7, [r5, #0]
     bcc:	mov	r0, r7
     bce:	bl	2ccc <digitalRead>
     bd2:	clz	r1, r0
     bd6:	lsrs	r1, r1, #5
     bd8:	mov	r0, r7
     bda:	bl	2cc0 <digitalWrite>
     bde:	ldr.w	r3, [r8]
     be2:	str	r3, [sp, #368]	; 0x170
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     be4:	subs	r6, #2
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     be6:	movs	r3, #1
	return ret;
     be8:	ldr	r2, [sp, #368]	; 0x170
     bea:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     bec:	str	r6, [r5, #20]

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
      blinkingCounter = times;
      lastBlink = millis();  
     bee:	str	r2, [r5, #8]
    boolean blinkTimePassed () {
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
     bf0:	ldr	r5, [pc, #272]	; (d04 <loop+0x83c>)
     bf2:	ldrb	r3, [r5, #16]
     bf4:	cmp	r3, #0
     bf6:	bne.w	7fe <loop+0x336>
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     bfa:	ldr	r6, [r5, #20]
     bfc:	ldr	r5, [pc, #260]	; (d04 <loop+0x83c>)
     bfe:	cmp	r6, #0
     c00:	ble.w	812 <loop+0x34a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c04:	ldr	r3, [r4, #0]
     c06:	str	r3, [sp, #16]
	return ret;
     c08:	ldr	r3, [sp, #16]
     c0a:	ldr	r1, [r5, #8]
     c0c:	ldr	r2, [r5, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c0e:	ldr	r7, [pc, #248]	; (d08 <loop+0x840>)
     c10:	subs	r3, r3, r1
     c12:	cmp	r2, r3
     c14:	bcs.w	812 <loop+0x34a>
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
     c18:	ldrb	r4, [r5, #0]
     c1a:	mov	r0, r4
     c1c:	bl	2ccc <digitalRead>
     c20:	clz	r1, r0
     c24:	lsrs	r1, r1, #5
     c26:	mov	r0, r4
     c28:	bl	2cc0 <digitalWrite>
     c2c:	ldr	r3, [r7, #0]
     c2e:	str	r3, [sp, #372]	; 0x174
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
        blink(blinkingCounter - 1);
        blinkingCounter--;
     c30:	subs	r6, #2
	return ret;
     c32:	ldr	r2, [sp, #372]	; 0x174
     c34:	str	r6, [r5, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c36:	movs	r3, #1
      blinkingCounter = times;
      lastBlink = millis();  
     c38:	str	r2, [r5, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
     c3a:	strb	r3, [r5, #16]
     c3c:	b.n	812 <loop+0x34a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c3e:	ldr	r3, [r4, #0]
     c40:	str	r3, [sp, #248]	; 0xf8
	return ret;
     c42:	ldr	r3, [sp, #248]	; 0xf8
     c44:	ldr	r1, [r5, #40]	; 0x28

      if (debounced && timeSincePress() < m_holdThreshold) {
        onPress();
      }
 
      if (currentWentDown() && timeSincePress() >= m_holdThreshold) {
     c46:	ldr	r2, [r5, #48]	; 0x30
     c48:	subs	r3, r3, r1
     c4a:	cmp	r3, r2
     c4c:	bcc.w	53c <loop+0x74>
     c50:	movs	r1, #9
     c52:	ldr	r0, [pc, #148]	; (ce8 <loop+0x820>)
     c54:	bl	26b0 <usb_serial_write>
     c58:	ldr	r0, [pc, #144]	; (cec <loop+0x824>)
     c5a:	bl	4224 <Print::println()>
     c5e:	ldr	r3, [r5, #28]
     c60:	strb.w	r7, [r3, #46]	; 0x2e
     c64:	ldr	r7, [r5, #32]
     c66:	b.n	53c <loop+0x74>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c68:	ldr	r3, [r4, #0]
     c6a:	str	r3, [sp, #216]	; 0xd8
	return ret;
     c6c:	ldr	r3, [sp, #216]	; 0xd8
     c6e:	ldr	r1, [r6, #40]	; 0x28
     c70:	ldr	r2, [r6, #48]	; 0x30
     c72:	subs	r3, r3, r1
     c74:	cmp	r3, r2
     c76:	bcc.w	5a0 <loop+0xd8>
     c7a:	movs	r1, #9
     c7c:	ldr	r0, [pc, #104]	; (ce8 <loop+0x820>)
     c7e:	bl	26b0 <usb_serial_write>
     c82:	ldr	r0, [pc, #104]	; (cec <loop+0x824>)
     c84:	bl	4224 <Print::println()>
     c88:	ldr	r3, [r6, #28]
     c8a:	strb.w	r7, [r3, #46]	; 0x2e
     c8e:	ldr	r7, [r6, #32]
     c90:	b.n	5a0 <loop+0xd8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c92:	ldr	r3, [r4, #0]
     c94:	str	r3, [sp, #184]	; 0xb8
	return ret;
     c96:	ldr	r3, [sp, #184]	; 0xb8
     c98:	ldr	r1, [r5, #40]	; 0x28
     c9a:	ldr	r2, [r5, #48]	; 0x30
     c9c:	subs	r3, r3, r1
     c9e:	cmp	r3, r2
     ca0:	bcc.w	604 <loop+0x13c>
     ca4:	movs	r1, #9
     ca6:	ldr	r0, [pc, #64]	; (ce8 <loop+0x820>)
     ca8:	bl	26b0 <usb_serial_write>
     cac:	ldr	r0, [pc, #60]	; (cec <loop+0x824>)
     cae:	bl	4224 <Print::println()>
     cb2:	ldr	r3, [r5, #28]
     cb4:	strb.w	r7, [r3, #46]	; 0x2e
     cb8:	ldr	r7, [r5, #32]
     cba:	b.n	604 <loop+0x13c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cbc:	ldr	r3, [r4, #0]
     cbe:	str	r3, [sp, #152]	; 0x98
	return ret;
     cc0:	ldr	r3, [sp, #152]	; 0x98
     cc2:	ldr	r1, [r6, #40]	; 0x28
     cc4:	ldr	r2, [r6, #48]	; 0x30
     cc6:	subs	r3, r3, r1
     cc8:	cmp	r3, r2
     cca:	bcc.w	668 <loop+0x1a0>
     cce:	movs	r1, #9
     cd0:	ldr	r0, [pc, #20]	; (ce8 <loop+0x820>)
     cd2:	bl	26b0 <usb_serial_write>
     cd6:	ldr	r0, [pc, #20]	; (cec <loop+0x824>)
     cd8:	bl	4224 <Print::println()>
     cdc:	ldr	r3, [r6, #28]
     cde:	strb.w	r7, [r3, #46]	; 0x2e
     ce2:	ldr	r7, [r6, #32]
     ce4:	b.n	668 <loop+0x1a0>
     ce6:	nop
     ce8:	.word	0x000056ac
     cec:	.word	0x1fff0c70
     cf0:	.word	0x1fff1884
     cf4:	.word	0x1fff189c
     cf8:	.word	0x1fff18b4
     cfc:	.word	0x1fff18cc
     d00:	.word	0x1fff15d8
     d04:	.word	0x1fff15f0
     d08:	.word	0x1fff18fc

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
     d0c:	ldr	r3, [r7, #28]
     d0e:	ldr	r0, [pc, #708]	; (fd4 <loop+0xb0c>)
     d10:	ldr	r6, [r3, #52]	; 0x34
     d12:	movs	r1, #7
     d14:	bl	26b0 <usb_serial_write>
     d18:	ldr	r0, [pc, #700]	; (fd8 <loop+0xb10>)
     d1a:	bl	4224 <Print::println()>
      // Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
     d1e:	ldr	r3, [r7, #4]
     d20:	cbnz	r3, d4e <loop+0x886>
     d22:	ldrb	r3, [r7, #16]
     d24:	cmp	r3, #0
     d26:	beq.w	168c <loop+0x11c4>
        if (m_sequence.getShiftMode()) {
     d2a:	ldr.w	r9, [r7, #28]
     d2e:	ldrb.w	r3, [r9, #46]	; 0x2e
     d32:	cmp	r3, #0
     d34:	beq.w	1e40 <loop+0x1978>
    void nextPage () {
      if (m_page < 4) m_page++;
    };

    void previousPage () {
      if (m_page > 1) m_page--;
     d38:	ldr	r1, [r6, #4]
     d3a:	cmp	r1, #1
     d3c:	ble.n	d42 <loop+0x87a>
     d3e:	subs	r1, #1
     d40:	str	r1, [r6, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d42:	ldr	r0, [pc, #660]	; (fd8 <loop+0xb10>)
     d44:	bl	42c4 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d48:	ldr	r0, [pc, #652]	; (fd8 <loop+0xb10>)
     d4a:	bl	4224 <Print::println()>
     d4e:	ldr	r6, [r5, #32]
     d50:	b.n	722 <loop+0x25a>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
     d52:	ldr	r3, [r5, #28]
     d54:	ldr	r0, [pc, #636]	; (fd4 <loop+0xb0c>)
     d56:	ldr	r7, [r3, #52]	; 0x34
     d58:	movs	r1, #7
     d5a:	bl	26b0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     d5e:	ldr	r0, [pc, #632]	; (fd8 <loop+0xb10>)
     d60:	bl	4224 <Print::println()>
      // Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
     d64:	ldr	r3, [r5, #4]
     d66:	cbnz	r3, d94 <loop+0x8cc>
     d68:	ldrb	r3, [r5, #16]
     d6a:	cmp	r3, #0
     d6c:	beq.w	166a <loop+0x11a2>
        if (m_sequence.getShiftMode()) {
     d70:	ldr.w	r9, [r5, #28]
     d74:	ldrb.w	r3, [r9, #46]	; 0x2e
     d78:	cmp	r3, #0
     d7a:	beq.w	1eaa <loop+0x19e2>
     d7e:	ldr	r1, [r7, #4]
     d80:	cmp	r1, #1
     d82:	ble.n	d88 <loop+0x8c0>
     d84:	subs	r1, #1
     d86:	str	r1, [r7, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d88:	ldr	r0, [pc, #588]	; (fd8 <loop+0xb10>)
     d8a:	bl	42c4 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d8e:	ldr	r0, [pc, #584]	; (fd8 <loop+0xb10>)
     d90:	bl	4224 <Print::println()>
     d94:	ldr	r7, [r6, #32]
     d96:	b.n	6be <loop+0x1f6>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
     d98:	ldr	r3, [r6, #28]
     d9a:	ldr	r0, [pc, #568]	; (fd4 <loop+0xb0c>)
     d9c:	ldr	r7, [r3, #52]	; 0x34
     d9e:	movs	r1, #7
     da0:	bl	26b0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     da4:	ldr	r0, [pc, #560]	; (fd8 <loop+0xb10>)
     da6:	bl	4224 <Print::println()>
      // Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
     daa:	ldr	r3, [r6, #4]
     dac:	cbnz	r3, dda <loop+0x912>
     dae:	ldrb	r3, [r6, #16]
     db0:	cmp	r3, #0
     db2:	beq.w	16ae <loop+0x11e6>
        if (m_sequence.getShiftMode()) {
     db6:	ldr.w	r9, [r6, #28]
     dba:	ldrb.w	r3, [r9, #46]	; 0x2e
     dbe:	cmp	r3, #0
     dc0:	beq.w	1dd6 <loop+0x190e>
     dc4:	ldr	r1, [r7, #4]
     dc6:	cmp	r1, #1
     dc8:	ble.n	dce <loop+0x906>
     dca:	subs	r1, #1
     dcc:	str	r1, [r7, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     dce:	ldr	r0, [pc, #520]	; (fd8 <loop+0xb10>)
     dd0:	bl	42c4 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     dd4:	ldr	r0, [pc, #512]	; (fd8 <loop+0xb10>)
     dd6:	bl	4224 <Print::println()>
     dda:	ldr	r7, [r5, #32]
     ddc:	b.w	592 <loop+0xca>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
     de0:	ldr	r3, [r5, #28]
     de2:	ldr	r0, [pc, #496]	; (fd4 <loop+0xb0c>)
     de4:	ldr	r7, [r3, #52]	; 0x34
     de6:	movs	r1, #7
     de8:	bl	26b0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     dec:	ldr	r0, [pc, #488]	; (fd8 <loop+0xb10>)
     dee:	bl	4224 <Print::println()>
      // Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
     df2:	ldr	r3, [r5, #4]
     df4:	cbnz	r3, e22 <loop+0x95a>
     df6:	ldrb	r3, [r5, #16]
     df8:	cmp	r3, #0
     dfa:	beq.w	16d0 <loop+0x1208>
        if (m_sequence.getShiftMode()) {
     dfe:	ldr.w	r9, [r5, #28]
     e02:	ldrb.w	r3, [r9, #46]	; 0x2e
     e06:	cmp	r3, #0
     e08:	beq.w	1c98 <loop+0x17d0>
     e0c:	ldr	r1, [r7, #4]
     e0e:	cmp	r1, #1
     e10:	ble.n	e16 <loop+0x94e>
     e12:	subs	r1, #1
     e14:	str	r1, [r7, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e16:	ldr	r0, [pc, #448]	; (fd8 <loop+0xb10>)
     e18:	bl	42c4 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e1c:	ldr	r0, [pc, #440]	; (fd8 <loop+0xb10>)
     e1e:	bl	4224 <Print::println()>
     e22:	ldr	r7, [r6, #32]
     e24:	b.w	5f6 <loop+0x12e>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
     e28:	ldr	r3, [r5, #28]
     e2a:	ldr	r0, [pc, #424]	; (fd4 <loop+0xb0c>)
     e2c:	ldr	r7, [r3, #52]	; 0x34
     e2e:	movs	r1, #7
     e30:	bl	26b0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     e34:	ldr	r0, [pc, #416]	; (fd8 <loop+0xb10>)
     e36:	bl	4224 <Print::println()>
      // Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
     e3a:	ldr	r3, [r5, #4]
     e3c:	cbnz	r3, e6a <loop+0x9a2>
     e3e:	ldrb	r3, [r5, #16]
     e40:	cmp	r3, #0
     e42:	beq.w	1648 <loop+0x1180>
        if (m_sequence.getShiftMode()) {
     e46:	ldr.w	r9, [r5, #28]
     e4a:	ldrb.w	r3, [r9, #46]	; 0x2e
     e4e:	cmp	r3, #0
     e50:	beq.w	1d6c <loop+0x18a4>
     e54:	ldr	r1, [r7, #4]
     e56:	cmp	r1, #1
     e58:	ble.n	e5e <loop+0x996>
     e5a:	subs	r1, #1
     e5c:	str	r1, [r7, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e5e:	ldr	r0, [pc, #376]	; (fd8 <loop+0xb10>)
     e60:	bl	42c4 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e64:	ldr	r0, [pc, #368]	; (fd8 <loop+0xb10>)
     e66:	bl	4224 <Print::println()>
     e6a:	ldr	r7, [r6, #32]
     e6c:	b.w	52e <loop+0x66>

      pinMode(pin, INPUT);
    };

    void onPress () {
      Paginator* paginator = m_sequence.m_paginator;
     e70:	ldr	r3, [r6, #28]
     e72:	ldr	r0, [pc, #352]	; (fd4 <loop+0xb0c>)
     e74:	ldr	r7, [r3, #52]	; 0x34
     e76:	movs	r1, #7
     e78:	bl	26b0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     e7c:	ldr	r0, [pc, #344]	; (fd8 <loop+0xb10>)
     e7e:	bl	4224 <Print::println()>
      // Serial.println(m_id);
      // Serial.println(m_sequence.getShiftMode());
      // Serial.println("currentPage");
      // Serial.println(m_sequence.m_paginator->getPage());

      if (m_state == LOW && m_shiftButton) {
     e82:	ldr	r3, [r6, #4]
     e84:	cbnz	r3, eb2 <loop+0x9ea>
     e86:	ldrb	r3, [r6, #16]
     e88:	cmp	r3, #0
     e8a:	beq.w	160e <loop+0x1146>
        if (m_sequence.getShiftMode()) {
     e8e:	ldr.w	r9, [r6, #28]
     e92:	ldrb.w	r3, [r9, #46]	; 0x2e
     e96:	cmp	r3, #0
     e98:	beq.w	1d02 <loop+0x183a>
     e9c:	ldr	r1, [r7, #4]
     e9e:	cmp	r1, #1
     ea0:	ble.n	ea6 <loop+0x9de>
     ea2:	subs	r1, #1
     ea4:	str	r1, [r7, #4]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ea6:	ldr	r0, [pc, #304]	; (fd8 <loop+0xb10>)
     ea8:	bl	42c4 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     eac:	ldr	r0, [pc, #296]	; (fd8 <loop+0xb10>)
     eae:	bl	4224 <Print::println()>
     eb2:	ldr	r7, [r5, #32]
     eb4:	b.w	65a <loop+0x192>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     eb8:	ldrb	r6, [r5, #0]
     eba:	mov	r0, r6
     ebc:	bl	2ccc <digitalRead>
     ec0:	clz	r1, r0
     ec4:	lsrs	r1, r1, #5
     ec6:	mov	r0, r6
     ec8:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ecc:	ldr	r3, [r7, #0]
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     ece:	ldr	r6, [r5, #20]
     ed0:	str	r3, [sp, #24]
	return ret;
     ed2:	ldr	r3, [sp, #24]

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
     ed4:	str	r3, [r5, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     ed6:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     ed8:	mov.w	r3, #0
     edc:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     ede:	ldr	r5, [pc, #252]	; (fdc <loop+0xb14>)
     ee0:	bgt.w	c04 <loop+0x73c>
     ee4:	b.n	812 <loop+0x34a>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     ee6:	ldrb	r5, [r7, #0]
     ee8:	mov	r0, r5
     eea:	bl	2ccc <digitalRead>
     eee:	clz	r1, r0
     ef2:	lsrs	r1, r1, #5
     ef4:	mov	r0, r5
     ef6:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     efa:	ldr	r3, [r6, #0]
     efc:	str	r3, [sp, #84]	; 0x54
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     efe:	ldr	r6, [r7, #20]
	return ret;
     f00:	ldr	r3, [sp, #84]	; 0x54

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
     f02:	str	r3, [r7, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     f04:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     f06:	mov.w	r3, #0
     f0a:	strb	r3, [r7, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     f0c:	ldr	r5, [pc, #208]	; (fe0 <loop+0xb18>)
     f0e:	bgt.w	a74 <loop+0x5ac>
     f12:	b.n	752 <loop+0x28a>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     f14:	ldrb	r6, [r5, #0]
     f16:	mov	r0, r6
     f18:	bl	2ccc <digitalRead>
     f1c:	clz	r1, r0
     f20:	lsrs	r1, r1, #5
     f22:	mov	r0, r6
     f24:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f28:	ldr	r3, [r7, #0]
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     f2a:	ldr	r6, [r5, #20]
     f2c:	str	r3, [sp, #36]	; 0x24
	return ret;
     f2e:	ldr	r3, [sp, #36]	; 0x24

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
     f30:	str	r3, [r5, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     f32:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     f34:	mov.w	r3, #0
     f38:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     f3a:	ldr	r5, [pc, #168]	; (fe4 <loop+0xb1c>)
     f3c:	bgt.w	bb4 <loop+0x6ec>
     f40:	b.n	7f4 <loop+0x32c>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     f42:	ldrb	r6, [r5, #0]
     f44:	mov	r0, r6
     f46:	bl	2ccc <digitalRead>
     f4a:	clz	r1, r0
     f4e:	lsrs	r1, r1, #5
     f50:	mov	r0, r6
     f52:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f56:	ldr	r3, [r7, #0]
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     f58:	ldr	r6, [r5, #20]
     f5a:	str	r3, [sp, #48]	; 0x30
	return ret;
     f5c:	ldr	r3, [sp, #48]	; 0x30

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
     f5e:	str	r3, [r5, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     f60:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     f62:	mov.w	r3, #0
     f66:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     f68:	ldr	r5, [pc, #124]	; (fe8 <loop+0xb20>)
     f6a:	bgt.w	b64 <loop+0x69c>
     f6e:	b.n	7d6 <loop+0x30e>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     f70:	ldrb	r6, [r5, #0]
     f72:	mov	r0, r6
     f74:	bl	2ccc <digitalRead>
     f78:	clz	r1, r0
     f7c:	lsrs	r1, r1, #5
     f7e:	mov	r0, r6
     f80:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f84:	ldr	r3, [r7, #0]
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     f86:	ldr	r6, [r5, #20]
     f88:	str	r3, [sp, #60]	; 0x3c
	return ret;
     f8a:	ldr	r3, [sp, #60]	; 0x3c

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
     f8c:	str	r3, [r5, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     f8e:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     f90:	mov.w	r3, #0
     f94:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     f96:	ldr	r5, [pc, #84]	; (fec <loop+0xb24>)
     f98:	bgt.w	b14 <loop+0x64c>
     f9c:	b.n	7b8 <loop+0x2f0>
      return millis() - lastBlink > blinkLength;
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
     f9e:	ldrb	r6, [r5, #0]
     fa0:	mov	r0, r6
     fa2:	bl	2ccc <digitalRead>
     fa6:	clz	r1, r0
     faa:	lsrs	r1, r1, #5
     fac:	mov	r0, r6
     fae:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     fb2:	ldr	r3, [r7, #0]
        blinking = false;
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     fb4:	ldr	r6, [r5, #20]
     fb6:	str	r3, [sp, #72]	; 0x48
	return ret;
     fb8:	ldr	r3, [sp, #72]	; 0x48

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
        lastBlink = millis();        
     fba:	str	r3, [r5, #8]
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     fbc:	cmp	r6, #0
    };

    void check () {
      if (blinking && blinkTimePassed()) {
        digitalWrite(m_pin, !digitalRead(m_pin));
        blinking = false;
     fbe:	mov.w	r3, #0
     fc2:	strb	r3, [r5, #16]
        lastBlink = millis();        
      }

      if (!blinking && blinkingCounter > 0 && blinkTimePassed()) {
     fc4:	ldr	r5, [pc, #40]	; (ff0 <loop+0xb28>)
     fc6:	bgt.w	ac4 <loop+0x5fc>
     fca:	b.w	770 <loop+0x2a8>
     fce:	ldr	r3, [r5, #20]
     fd0:	b.w	62e <loop+0x166>
     fd4:	.word	0x00005684
     fd8:	.word	0x1fff0c70
     fdc:	.word	0x1fff15f0
     fe0:	.word	0x1fff1884
     fe4:	.word	0x1fff15d8
     fe8:	.word	0x1fff18cc
     fec:	.word	0x1fff18b4
     ff0:	.word	0x1fff189c
     ff4:	ldr	r3, [r6, #20]
     ff6:	b.w	5ca <loop+0x102>
     ffa:	ldr	r3, [r6, #20]
     ffc:	b.w	692 <loop+0x1ca>
    1000:	ldr	r3, [r6, #20]
    1002:	b.w	502 <loop+0x3a>
    1006:	ldr	r3, [r5, #20]
    1008:	b.w	6f6 <loop+0x22e>
    100c:	ldr	r3, [r5, #20]
    100e:	b.w	566 <loop+0x9e>
	}
        uint8_t getType(void) __attribute__((always_inline)) {
                return usb_midi_msg_type;
    1012:	ldr	r3, [pc, #656]	; (12a4 <loop+0xddc>)
      // channel = usbMIDI.getChannel(); // which MIDI channel, 1-16
      // data1 = usbMIDI.getData1();     // first data byte of message, 0-127
      // data2 = usbMIDI.getData2();     // second data byte of message, 0-127
      // cable = usbMIDI.getCable();     // which virtual cable with MIDIx8, 0-7

      switch (type) {
    1014:	ldrb	r3, [r3, #0]
    1016:	cmp	r3, #250	; 0xfa
    1018:	beq.w	16f2 <loop+0x122a>
    101c:	cmp	r3, #252	; 0xfc
    101e:	beq.w	13f6 <loop+0xf2e>
    1022:	cmp	r3, #248	; 0xf8
    1024:	beq.w	1788 <loop+0x12c0>
    1028:	movs	r1, #35	; 0x23
    102a:	ldr	r0, [pc, #636]	; (12a8 <loop+0xde0>)
    102c:	ldr	r4, [pc, #636]	; (12ac <loop+0xde4>)
    102e:	bl	26b0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1032:	ldr	r0, [pc, #636]	; (12b0 <loop+0xde8>)
    1034:	bl	4224 <Print::println()>
    1038:	b.w	4dc <loop+0x14>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    103c:	cbnz	r5, 1096 <loop+0xbce>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    103e:	ldr	r3, [r4, #0]
    1040:	str	r3, [sp, #204]	; 0xcc
	return ret;
    1042:	ldr	r3, [sp, #204]	; 0xcc
    1044:	ldr	r2, [r6, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1046:	ldr.w	r9, [pc, #612]	; 12ac <loop+0xde4>
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
    104a:	subs	r3, r3, r2
    104c:	cmp	r3, #200	; 0xc8
    104e:	bls.w	5c2 <loop+0xfa>
        firstTime = millis();
        m_led.blink();
    1052:	ldr.w	r8, [r6, #24]
    1056:	ldr.w	r3, [r9]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    105a:	ldrb.w	sl, [r8]
    105e:	str	r3, [sp, #212]	; 0xd4
	return ret;
    1060:	ldr	r3, [sp, #212]	; 0xd4
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
    1062:	str	r3, [r6, #40]	; 0x28
    1064:	mov	r0, sl
    1066:	bl	2ccc <digitalRead>
    106a:	clz	r1, r0
    106e:	lsrs	r1, r1, #5
    1070:	mov	r0, sl
    1072:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1076:	ldr.w	r3, [r9]
      blinking = true;
      blinkingCounter = times;
    107a:	str.w	r5, [r8, #20]
    107e:	str	r3, [sp, #304]	; 0x130
    1080:	ldr	r3, [r6, #32]
	return ret;
    1082:	ldr	r2, [sp, #304]	; 0x130
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1084:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1088:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    108c:	cmp	r3, #1
    108e:	ldrb.w	r5, [r6, #36]	; 0x24
    1092:	bne.w	2294 <loop+0x1dcc>
    1096:	cmp	r5, #1
    1098:	bne.w	5bc <loop+0xf4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    109c:	ldr	r3, [r4, #0]
    109e:	str	r3, [sp, #200]	; 0xc8
	return ret;
    10a0:	ldr	r3, [sp, #200]	; 0xc8
    10a2:	ldr	r1, [r6, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
    10a4:	ldr	r2, [r6, #48]	; 0x30
    10a6:	ldr.w	r8, [pc, #524]	; 12b4 <loop+0xdec>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10aa:	ldr	r0, [pc, #512]	; (12ac <loop+0xde4>)
    10ac:	subs	r3, r3, r1
    10ae:	cmp	r3, r2
    10b0:	bls.n	ff4 <loop+0xb2c>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    10b2:	ldr.w	r3, [r8, #28]
    10b6:	ldr	r2, [r0, #0]
    10b8:	str	r2, [sp, #208]	; 0xd0
    10ba:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
    10be:	ldr	r1, [sp, #208]	; 0xd0
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
    10c0:	str.w	r1, [r8, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    10c4:	cmp	r2, #0
    10c6:	beq.w	155c <loop+0x1094>
      Serial.println("Inited Sequence");
      Serial.println(m_paginator->getPage());
    };

    void enterShiftMode () {
      m_shiftMode = true;
    10ca:	movs	r2, #1
    10cc:	strb.w	r2, [r3, #46]	; 0x2e
    10d0:	b.w	5bc <loop+0xf4>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    10d4:	cbnz	r7, 112e <loop+0xc66>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10d6:	ldr	r3, [r4, #0]
    10d8:	str	r3, [sp, #108]	; 0x6c
	return ret;
    10da:	ldr	r3, [sp, #108]	; 0x6c
    10dc:	ldr	r2, [r5, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10de:	ldr.w	r9, [pc, #460]	; 12ac <loop+0xde4>
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
    10e2:	subs	r3, r3, r2
    10e4:	cmp	r3, #200	; 0xc8
    10e6:	bls.w	6ee <loop+0x226>
        firstTime = millis();
        m_led.blink();
    10ea:	ldr.w	r8, [r5, #24]
    10ee:	ldr.w	r3, [r9]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    10f2:	ldrb.w	sl, [r8]
    10f6:	str	r3, [sp, #116]	; 0x74
	return ret;
    10f8:	ldr	r3, [sp, #116]	; 0x74
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
    10fa:	str	r3, [r5, #40]	; 0x28
    10fc:	mov	r0, sl
    10fe:	bl	2ccc <digitalRead>
    1102:	clz	r1, r0
    1106:	lsrs	r1, r1, #5
    1108:	mov	r0, sl
    110a:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    110e:	ldr.w	r3, [r9]
      blinking = true;
      blinkingCounter = times;
    1112:	str.w	r7, [r8, #20]
    1116:	str	r3, [sp, #340]	; 0x154
    1118:	ldr	r3, [r5, #32]
	return ret;
    111a:	ldr	r2, [sp, #340]	; 0x154
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    111c:	strb.w	r6, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1120:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    1124:	cmp	r3, #1
    1126:	ldrb.w	r7, [r5, #36]	; 0x24
    112a:	bne.w	229a <loop+0x1dd2>
    112e:	cmp	r7, #1
    1130:	bne.w	6e8 <loop+0x220>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1134:	ldr	r3, [r4, #0]
    1136:	str	r3, [sp, #104]	; 0x68
	return ret;
    1138:	ldr	r3, [sp, #104]	; 0x68
    113a:	ldr	r1, [r5, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
    113c:	ldr	r2, [r5, #48]	; 0x30
    113e:	ldr.w	r8, [pc, #376]	; 12b8 <loop+0xdf0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1142:	ldr	r0, [pc, #360]	; (12ac <loop+0xde4>)
    1144:	subs	r3, r3, r1
    1146:	cmp	r3, r2
    1148:	bls.w	1006 <loop+0xb3e>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    114c:	ldr.w	r3, [r8, #28]
    1150:	ldr	r2, [r0, #0]
    1152:	str	r2, [sp, #112]	; 0x70
    1154:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
    1158:	ldr	r1, [sp, #112]	; 0x70
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
    115a:	str.w	r1, [r8, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    115e:	cmp	r2, #0
    1160:	beq.w	1540 <loop+0x1078>
    1164:	movs	r2, #1
    1166:	strb.w	r2, [r3, #46]	; 0x2e
    116a:	b.w	6e8 <loop+0x220>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    116e:	cbnz	r6, 11c8 <loop+0xd00>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1170:	ldr	r3, [r4, #0]
    1172:	str	r3, [sp, #236]	; 0xec
	return ret;
    1174:	ldr	r3, [sp, #236]	; 0xec
    1176:	ldr	r2, [r5, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1178:	ldr.w	r9, [pc, #304]	; 12ac <loop+0xde4>
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
    117c:	subs	r3, r3, r2
    117e:	cmp	r3, #200	; 0xc8
    1180:	bls.w	55e <loop+0x96>
        firstTime = millis();
        m_led.blink();
    1184:	ldr.w	r8, [r5, #24]
    1188:	ldr.w	r3, [r9]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    118c:	ldrb.w	sl, [r8]
    1190:	str	r3, [sp, #244]	; 0xf4
	return ret;
    1192:	ldr	r3, [sp, #244]	; 0xf4
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
    1194:	str	r3, [r5, #40]	; 0x28
    1196:	mov	r0, sl
    1198:	bl	2ccc <digitalRead>
    119c:	clz	r1, r0
    11a0:	lsrs	r1, r1, #5
    11a2:	mov	r0, sl
    11a4:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11a8:	ldr.w	r3, [r9]
      blinking = true;
      blinkingCounter = times;
    11ac:	str.w	r6, [r8, #20]
    11b0:	str	r3, [sp, #292]	; 0x124
    11b2:	ldr	r3, [r5, #32]
	return ret;
    11b4:	ldr	r2, [sp, #292]	; 0x124
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    11b6:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    11ba:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    11be:	cmp	r3, #1
    11c0:	ldrb.w	r6, [r5, #36]	; 0x24
    11c4:	bne.w	2288 <loop+0x1dc0>
    11c8:	cmp	r6, #1
    11ca:	bne.w	558 <loop+0x90>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11ce:	ldr	r3, [r4, #0]
    11d0:	str	r3, [sp, #232]	; 0xe8
	return ret;
    11d2:	ldr	r3, [sp, #232]	; 0xe8
    11d4:	ldr	r1, [r5, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
    11d6:	ldr	r2, [r5, #48]	; 0x30
    11d8:	ldr.w	r8, [pc, #224]	; 12bc <loop+0xdf4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11dc:	ldr	r0, [pc, #204]	; (12ac <loop+0xde4>)
    11de:	subs	r3, r3, r1
    11e0:	cmp	r3, r2
    11e2:	bls.w	100c <loop+0xb44>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    11e6:	ldr.w	r3, [r8, #28]
    11ea:	ldr	r2, [r0, #0]
    11ec:	str	r2, [sp, #240]	; 0xf0
    11ee:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
    11f2:	ldr	r1, [sp, #240]	; 0xf0
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
    11f4:	str.w	r1, [r8, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    11f8:	cmp	r2, #0
    11fa:	beq.w	1524 <loop+0x105c>
    11fe:	movs	r2, #1
    1200:	strb.w	r2, [r3, #46]	; 0x2e
    1204:	b.w	558 <loop+0x90>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    1208:	cbnz	r5, 1262 <loop+0xd9a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    120a:	ldr	r3, [r4, #0]
    120c:	str	r3, [sp, #268]	; 0x10c
	return ret;
    120e:	ldr	r3, [sp, #268]	; 0x10c
    1210:	ldr	r2, [r6, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1212:	ldr.w	r9, [pc, #152]	; 12ac <loop+0xde4>
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
    1216:	subs	r3, r3, r2
    1218:	cmp	r3, #200	; 0xc8
    121a:	bls.w	4fa <loop+0x32>
        firstTime = millis();
        m_led.blink();
    121e:	ldr.w	r8, [r6, #24]
    1222:	ldr.w	r3, [r9]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1226:	ldrb.w	sl, [r8]
    122a:	str	r3, [sp, #276]	; 0x114
	return ret;
    122c:	ldr	r3, [sp, #276]	; 0x114
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
    122e:	str	r3, [r6, #40]	; 0x28
    1230:	mov	r0, sl
    1232:	bl	2ccc <digitalRead>
    1236:	clz	r1, r0
    123a:	lsrs	r1, r1, #5
    123c:	mov	r0, sl
    123e:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1242:	ldr.w	r3, [r9]
      blinking = true;
      blinkingCounter = times;
    1246:	str.w	r5, [r8, #20]
    124a:	str	r3, [sp, #280]	; 0x118
    124c:	ldr	r3, [r6, #32]
	return ret;
    124e:	ldr	r2, [sp, #280]	; 0x118
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1250:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1254:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    1258:	cmp	r3, #1
    125a:	ldrb.w	r5, [r6, #36]	; 0x24
    125e:	bne.w	228e <loop+0x1dc6>
    1262:	cmp	r5, #1
    1264:	bne.w	4f4 <loop+0x2c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1268:	ldr	r3, [r4, #0]
    126a:	str	r3, [sp, #264]	; 0x108
	return ret;
    126c:	ldr	r3, [sp, #264]	; 0x108
    126e:	ldr	r1, [r6, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
    1270:	ldr	r2, [r6, #48]	; 0x30
    1272:	ldr.w	r8, [pc, #76]	; 12c0 <loop+0xdf8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1276:	ldr	r0, [pc, #52]	; (12ac <loop+0xde4>)
    1278:	subs	r3, r3, r1
    127a:	cmp	r3, r2
    127c:	bls.w	1000 <loop+0xb38>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    1280:	ldr.w	r3, [r8, #28]
    1284:	ldr	r2, [r0, #0]
    1286:	str	r2, [sp, #272]	; 0x110
    1288:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
    128c:	ldr	r1, [sp, #272]	; 0x110
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
    128e:	str.w	r1, [r8, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    1292:	cmp	r2, #0
    1294:	beq.w	1508 <loop+0x1040>
    1298:	movs	r2, #1
    129a:	strb.w	r2, [r3, #46]	; 0x2e
    129e:	b.w	4f4 <loop+0x2c>
    12a2:	nop
    12a4:	.word	0x1fff1db8
    12a8:	.word	0x00005658
    12ac:	.word	0x1fff18fc
    12b0:	.word	0x1fff0c70
    12b4:	.word	0x1fff167c
    12b8:	.word	0x1fff1724
    12bc:	.word	0x1fff1644
    12c0:	.word	0x1fff160c
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    12c4:	cbnz	r5, 131e <loop+0xe56>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12c6:	ldr	r3, [r4, #0]
    12c8:	str	r3, [sp, #140]	; 0x8c
	return ret;
    12ca:	ldr	r3, [sp, #140]	; 0x8c
    12cc:	ldr	r2, [r6, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12ce:	ldr.w	r9, [pc, #864]	; 1630 <loop+0x1168>
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
    12d2:	subs	r3, r3, r2
    12d4:	cmp	r3, #200	; 0xc8
    12d6:	bls.w	68a <loop+0x1c2>
        firstTime = millis();
        m_led.blink();
    12da:	ldr.w	r8, [r6, #24]
    12de:	ldr.w	r3, [r9]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    12e2:	ldrb.w	sl, [r8]
    12e6:	str	r3, [sp, #148]	; 0x94
	return ret;
    12e8:	ldr	r3, [sp, #148]	; 0x94
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
    12ea:	str	r3, [r6, #40]	; 0x28
    12ec:	mov	r0, sl
    12ee:	bl	2ccc <digitalRead>
    12f2:	clz	r1, r0
    12f6:	lsrs	r1, r1, #5
    12f8:	mov	r0, sl
    12fa:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12fe:	ldr.w	r3, [r9]
      blinking = true;
      blinkingCounter = times;
    1302:	str.w	r5, [r8, #20]
    1306:	str	r3, [sp, #328]	; 0x148
    1308:	ldr	r3, [r6, #32]
	return ret;
    130a:	ldr	r2, [sp, #328]	; 0x148
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    130c:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1310:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    1314:	cmp	r3, #1
    1316:	ldrb.w	r5, [r6, #36]	; 0x24
    131a:	bne.w	227c <loop+0x1db4>
    131e:	cmp	r5, #1
    1320:	bne.w	684 <loop+0x1bc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1324:	ldr	r3, [r4, #0]
    1326:	str	r3, [sp, #136]	; 0x88
	return ret;
    1328:	ldr	r3, [sp, #136]	; 0x88
    132a:	ldr	r1, [r6, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
    132c:	ldr	r2, [r6, #48]	; 0x30
    132e:	ldr.w	r8, [pc, #784]	; 1640 <loop+0x1178>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1332:	ldr	r0, [pc, #764]	; (1630 <loop+0x1168>)
    1334:	subs	r3, r3, r1
    1336:	cmp	r3, r2
    1338:	bls.w	ffa <loop+0xb32>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    133c:	ldr.w	r3, [r8, #28]
    1340:	ldr	r2, [r0, #0]
    1342:	str	r2, [sp, #144]	; 0x90
    1344:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
    1348:	ldr	r1, [sp, #144]	; 0x90
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
    134a:	str.w	r1, [r8, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    134e:	cmp	r2, #0
    1350:	beq.w	14ec <loop+0x1024>
    1354:	movs	r2, #1
    1356:	strb.w	r2, [r3, #46]	; 0x2e
    135a:	b.w	684 <loop+0x1bc>
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    };

    boolean currentWentUp() {
      return current == HIGH && previous == LOW;
    135e:	cbnz	r6, 13b8 <loop+0xef0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1360:	ldr	r3, [r4, #0]
    1362:	str	r3, [sp, #172]	; 0xac
	return ret;
    1364:	ldr	r3, [sp, #172]	; 0xac
    1366:	ldr	r2, [r5, #40]	; 0x28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1368:	ldr.w	r9, [pc, #708]	; 1630 <loop+0x1168>
    
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
    136c:	subs	r3, r3, r2
    136e:	cmp	r3, #200	; 0xc8
    1370:	bls.w	626 <loop+0x15e>
        firstTime = millis();
        m_led.blink();
    1374:	ldr.w	r8, [r5, #24]
    1378:	ldr.w	r3, [r9]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    137c:	ldrb.w	sl, [r8]
    1380:	str	r3, [sp, #180]	; 0xb4
	return ret;
    1382:	ldr	r3, [sp, #180]	; 0xb4
    void check (void) {
      current = digitalRead(m_pin);

      // if the button state changes to pressed, remember the start time 
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
    1384:	str	r3, [r5, #40]	; 0x28
    1386:	mov	r0, sl
    1388:	bl	2ccc <digitalRead>
    138c:	clz	r1, r0
    1390:	lsrs	r1, r1, #5
    1392:	mov	r0, sl
    1394:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1398:	ldr.w	r3, [r9]
      blinking = true;
      blinkingCounter = times;
    139c:	str.w	r6, [r8, #20]
    13a0:	str	r3, [sp, #316]	; 0x13c
    13a2:	ldr	r3, [r5, #32]
	return ret;
    13a4:	ldr	r2, [sp, #316]	; 0x13c
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    13a6:	strb.w	r7, [r8, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    13aa:	str.w	r2, [r8, #8]
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    13ae:	cmp	r3, #1
    13b0:	ldrb.w	r6, [r5, #36]	; 0x24
    13b4:	bne.w	2282 <loop+0x1dba>
    13b8:	cmp	r6, #1
    13ba:	bne.w	620 <loop+0x158>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13be:	ldr	r3, [r4, #0]
    13c0:	str	r3, [sp, #168]	; 0xa8
	return ret;
    13c2:	ldr	r3, [sp, #168]	; 0xa8
    13c4:	ldr	r1, [r5, #40]	; 0x28
      if (currentWentUp() && timeSincePress() > 200) {
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
    13c6:	ldr	r2, [r5, #48]	; 0x30
    13c8:	ldr.w	r8, [pc, #632]	; 1644 <loop+0x117c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13cc:	ldr	r0, [pc, #608]	; (1630 <loop+0x1168>)
    13ce:	subs	r3, r3, r1
    13d0:	cmp	r3, r2
    13d2:	bls.w	fce <loop+0xb06>
        firstHoldTime = millis();
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    13d6:	ldr.w	r3, [r8, #28]
    13da:	ldr	r2, [r0, #0]
    13dc:	str	r2, [sp, #176]	; 0xb0
    13de:	ldrb.w	r2, [r3, #46]	; 0x2e
	return ret;
    13e2:	ldr	r1, [sp, #176]	; 0xb0
        firstTime = millis();
        m_led.blink();
      }

      if (currentIsSame() && timeSincePress() > m_holdThreshold) {
        firstHoldTime = millis();
    13e4:	str.w	r1, [r8, #44]	; 0x2c
        if (!m_sequence.getShiftMode()) Serial.println("onHold");
    13e8:	cmp	r2, #0
    13ea:	beq.n	14d0 <loop+0x1008>
    13ec:	movs	r2, #1
    13ee:	strb.w	r2, [r3, #46]	; 0x2e
    13f2:	b.w	620 <loop+0x158>
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
    13f6:	ldr	r2, [pc, #572]	; (1634 <loop+0x116c>)
      ppqn = 0;
      m_sequence.resetStep();
    13f8:	ldr	r1, [r2, #12]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
    13fa:	movs	r3, #0
      ppqn = 0;
      m_sequence.resetStep();
      m_sequence.m_leds[5]->toggle();
    13fc:	ldr	r4, [r1, #40]	; 0x28
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
      ppqn = 0;
    13fe:	str	r3, [r2, #8]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    };

    void stopPPQN () {
      m_state = false;
    1400:	strb	r3, [r2, #0]
    void stopCurrentStep () {
      m_steps[m_currentStep]->stop();
    };

    void resetStep () {
      m_currentStep = 0;
    1402:	str	r3, [r1, #0]
    };

    void toggle () {
      m_state = !m_state;
    1404:	ldr	r1, [r4, #4]

      digitalWrite(m_pin, m_state);
    1406:	ldrb	r0, [r4, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1408:	clz	r1, r1
    140c:	lsrs	r1, r1, #5
    140e:	str	r1, [r4, #4]

      digitalWrite(m_pin, m_state);
    1410:	bl	2cc0 <digitalWrite>

      if (blinking) {
    1414:	ldrb	r3, [r4, #16]
    1416:	cmp	r3, #0
    1418:	beq.w	4da <loop+0x12>
        digitalWrite(m_pin, !m_state);
    141c:	ldr	r1, [r4, #4]
    141e:	ldrb	r0, [r4, #0]
    1420:	ldr	r4, [pc, #524]	; (1630 <loop+0x1168>)
    1422:	clz	r1, r1
    1426:	lsrs	r1, r1, #5
    1428:	bl	2cc0 <digitalWrite>
    142c:	b.w	4dc <loop+0x14>
        m_transport.controlTempo(m_value);
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
        } else if (currentMode == PITCH) {
          m_sequence.m_steps[m_id]->controlPitch(m_value);
    1430:	ldr	r3, [r4, #16]
    1432:	ldr	r2, [r4, #12]
    1434:	add.w	r2, r3, r2, lsl #2
    };

    void controlPitch (int value) {
      int newValue = map(value, 0, 1023, 51, 38);
      m_pitch = newValue;
    1438:	sub.w	r3, r0, r0, lsl #2
    143c:	lsls	r3, r3, #2
    143e:	it	mi
    1440:	addwmi	r3, r3, #1023	; 0x3ff
    1444:	ldr	r2, [r2, #4]
    1446:	asrs	r3, r3, #10
    1448:	adds	r3, #51	; 0x33
    144a:	str	r3, [r2, #8]
    144c:	b.w	91e <loop+0x456>
    1450:	ldr	r3, [r4, #16]
    1452:	ldr	r2, [r4, #12]
    1454:	add.w	r2, r3, r2, lsl #2
    1458:	sub.w	r3, r0, r0, lsl #2
    145c:	lsls	r3, r3, #2
    145e:	it	mi
    1460:	addwmi	r3, r3, #1023	; 0x3ff
    1464:	ldr	r2, [r2, #4]
    1466:	asrs	r3, r3, #10
    1468:	adds	r3, #51	; 0x33
    146a:	str	r3, [r2, #8]
    146c:	b.w	86a <loop+0x3a2>
    1470:	ldr	r3, [r4, #16]
    1472:	ldr	r2, [r4, #12]
    1474:	add.w	r2, r3, r2, lsl #2
    1478:	sub.w	r3, r0, r0, lsl #2
    147c:	lsls	r3, r3, #2
    147e:	it	mi
    1480:	addwmi	r3, r3, #1023	; 0x3ff
    1484:	ldr	r2, [r2, #4]
    1486:	asrs	r3, r3, #10
    1488:	adds	r3, #51	; 0x33
    148a:	str	r3, [r2, #8]
    148c:	b.w	9d2 <loop+0x50a>
    1490:	ldr	r3, [r4, #16]
    1492:	ldr	r2, [r4, #12]
    1494:	add.w	r2, r3, r2, lsl #2
    1498:	sub.w	r3, r0, r0, lsl #2
    149c:	lsls	r3, r3, #2
    149e:	it	mi
    14a0:	addwmi	r3, r3, #1023	; 0x3ff
    14a4:	ldr	r2, [r2, #4]
    14a6:	asrs	r3, r3, #10
    14a8:	adds	r3, #51	; 0x33
    14aa:	str	r3, [r2, #8]
    14ac:	b.w	8c4 <loop+0x3fc>
    14b0:	ldr	r3, [r4, #16]
    14b2:	ldr	r2, [r4, #12]
    14b4:	add.w	r2, r3, r2, lsl #2
    14b8:	sub.w	r3, r0, r0, lsl #2
    14bc:	lsls	r3, r3, #2
    14be:	it	mi
    14c0:	addwmi	r3, r3, #1023	; 0x3ff
    14c4:	ldr	r2, [r2, #4]
    14c6:	asrs	r3, r3, #10
    14c8:	adds	r3, #51	; 0x33
    14ca:	str	r3, [r2, #8]
    14cc:	b.w	978 <loop+0x4b0>
    14d0:	movs	r1, #6
    14d2:	ldr	r0, [pc, #356]	; (1638 <loop+0x1170>)
    14d4:	bl	26b0 <usb_serial_write>
    14d8:	ldr	r0, [pc, #352]	; (163c <loop+0x1174>)
    14da:	bl	4224 <Print::println()>
    14de:	ldr.w	r3, [r8, #28]
    14e2:	ldr.w	r7, [r8, #32]
    14e6:	ldrb.w	r6, [r8, #36]	; 0x24
    14ea:	b.n	13ec <loop+0xf24>
    14ec:	movs	r1, #6
    14ee:	ldr	r0, [pc, #328]	; (1638 <loop+0x1170>)
    14f0:	bl	26b0 <usb_serial_write>
    14f4:	ldr	r0, [pc, #324]	; (163c <loop+0x1174>)
    14f6:	bl	4224 <Print::println()>
    14fa:	ldr.w	r3, [r8, #28]
    14fe:	ldr.w	r7, [r8, #32]
    1502:	ldrb.w	r5, [r8, #36]	; 0x24
    1506:	b.n	1354 <loop+0xe8c>
    1508:	movs	r1, #6
    150a:	ldr	r0, [pc, #300]	; (1638 <loop+0x1170>)
    150c:	bl	26b0 <usb_serial_write>
    1510:	ldr	r0, [pc, #296]	; (163c <loop+0x1174>)
    1512:	bl	4224 <Print::println()>
    1516:	ldr.w	r3, [r8, #28]
    151a:	ldr.w	r7, [r8, #32]
    151e:	ldrb.w	r5, [r8, #36]	; 0x24
    1522:	b.n	1298 <loop+0xdd0>
    1524:	movs	r1, #6
    1526:	ldr	r0, [pc, #272]	; (1638 <loop+0x1170>)
    1528:	bl	26b0 <usb_serial_write>
    152c:	ldr	r0, [pc, #268]	; (163c <loop+0x1174>)
    152e:	bl	4224 <Print::println()>
    1532:	ldr.w	r3, [r8, #28]
    1536:	ldr.w	r7, [r8, #32]
    153a:	ldrb.w	r6, [r8, #36]	; 0x24
    153e:	b.n	11fe <loop+0xd36>
    1540:	movs	r1, #6
    1542:	ldr	r0, [pc, #244]	; (1638 <loop+0x1170>)
    1544:	bl	26b0 <usb_serial_write>
    1548:	ldr	r0, [pc, #240]	; (163c <loop+0x1174>)
    154a:	bl	4224 <Print::println()>
    154e:	ldr.w	r3, [r8, #28]
    1552:	ldr.w	r6, [r8, #32]
    1556:	ldrb.w	r7, [r8, #36]	; 0x24
    155a:	b.n	1164 <loop+0xc9c>
    155c:	movs	r1, #6
    155e:	ldr	r0, [pc, #216]	; (1638 <loop+0x1170>)
    1560:	bl	26b0 <usb_serial_write>
    1564:	ldr	r0, [pc, #212]	; (163c <loop+0x1174>)
    1566:	bl	4224 <Print::println()>
    156a:	ldr.w	r3, [r8, #28]
    156e:	ldr.w	r7, [r8, #32]
    1572:	ldrb.w	r5, [r8, #36]	; 0x24
    1576:	b.n	10ca <loop+0xc02>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    1578:	cmp.w	r0, #400	; 0x190
      m_id = id;
    };

    void onChange () {
      if (m_knobType == FIFTH) {
        m_transport.controlTempo(m_value);
    157c:	ldr	r3, [r4, #20]
    157e:	bge.w	1a42 <loop+0x157a>
        max_ppqn = 6;

        if (ppqn >= 6) {
    1582:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1584:	movs	r1, #6

        if (ppqn >= 6) {
    1586:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1588:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    158a:	ble.n	1590 <loop+0x10c8>
          ppqn = 0;
    158c:	movs	r2, #0
    158e:	str	r2, [r3, #8]
    1590:	ldr	r0, [r4, #4]
    1592:	b.w	978 <loop+0x4b0>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    1596:	cmp.w	r0, #400	; 0x190
    159a:	ldr	r3, [r4, #20]
    159c:	bge.w	1a06 <loop+0x153e>
        max_ppqn = 6;

        if (ppqn >= 6) {
    15a0:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    15a2:	movs	r1, #6

        if (ppqn >= 6) {
    15a4:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    15a6:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    15a8:	ble.n	15ae <loop+0x10e6>
          ppqn = 0;
    15aa:	movs	r2, #0
    15ac:	str	r2, [r3, #8]
    15ae:	ldr	r0, [r4, #4]
    15b0:	b.w	86a <loop+0x3a2>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    15b4:	cmp.w	r0, #400	; 0x190
    15b8:	ldr	r3, [r4, #20]
    15ba:	bge.w	19e8 <loop+0x1520>
        max_ppqn = 6;

        if (ppqn >= 6) {
    15be:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    15c0:	movs	r1, #6

        if (ppqn >= 6) {
    15c2:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    15c4:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    15c6:	ble.n	15cc <loop+0x1104>
          ppqn = 0;
    15c8:	movs	r2, #0
    15ca:	str	r2, [r3, #8]
    15cc:	ldr	r0, [r4, #4]
    15ce:	b.w	8c4 <loop+0x3fc>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    15d2:	cmp.w	r0, #400	; 0x190
    15d6:	ldr	r3, [r4, #20]
    15d8:	bge.w	1a24 <loop+0x155c>
        max_ppqn = 6;

        if (ppqn >= 6) {
    15dc:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    15de:	movs	r1, #6

        if (ppqn >= 6) {
    15e0:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    15e2:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    15e4:	ble.n	15ea <loop+0x1122>
          ppqn = 0;
    15e6:	movs	r2, #0
    15e8:	str	r2, [r3, #8]
    15ea:	ldr	r0, [r4, #4]
    15ec:	b.w	91e <loop+0x456>
    int getPPQN () {
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
    15f0:	cmp.w	r0, #400	; 0x190
    15f4:	ldr	r3, [r4, #20]
    15f6:	bge.w	19c0 <loop+0x14f8>
        max_ppqn = 6;

        if (ppqn >= 6) {
    15fa:	ldr	r2, [r3, #8]
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    15fc:	movs	r1, #6

        if (ppqn >= 6) {
    15fe:	cmp	r2, #5
      return max_ppqn;
    }

    void controlTempo (int value) {
      if (value < 400) {
        max_ppqn = 6;
    1600:	str	r1, [r3, #4]

        if (ppqn >= 6) {
    1602:	ble.n	1608 <loop+0x1140>
          ppqn = 0;
    1604:	movs	r2, #0
    1606:	str	r2, [r3, #8]
    1608:	ldr	r0, [r4, #4]
    160a:	b.w	9d2 <loop+0x50a>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    160e:	ldrb	r3, [r6, #17]
    1610:	cmp	r3, #0
    1612:	beq.w	180a <loop+0x1342>
    1616:	ldr	r3, [r6, #28]
        if (m_sequence.getShiftMode()) {
    1618:	ldrb.w	r3, [r3, #46]	; 0x2e
    161c:	cmp	r3, #0
    161e:	beq.w	1bba <loop+0x16f2>
    int getPage () {
      return m_page;
    }

    void nextPage () {
      if (m_page < 4) m_page++;
    1622:	ldr	r1, [r7, #4]
    1624:	cmp	r1, #3
    1626:	itt	le
    1628:	addle	r1, #1
    162a:	strle	r1, [r7, #4]
    162c:	b.n	ea6 <loop+0x9de>
    162e:	nop
    1630:	.word	0x1fff18fc
    1634:	.word	0x1fff1870
    1638:	.word	0x0000567c
    163c:	.word	0x1fff0c70
    1640:	.word	0x1fff16ec
    1644:	.word	0x1fff16b4
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    1648:	ldrb	r3, [r5, #17]
    164a:	cmp	r3, #0
    164c:	beq.w	186a <loop+0x13a2>
    1650:	ldr	r3, [r5, #28]
        if (m_sequence.getShiftMode()) {
    1652:	ldrb.w	r3, [r3, #46]	; 0x2e
    1656:	cmp	r3, #0
    1658:	beq.w	1b82 <loop+0x16ba>
    165c:	ldr	r1, [r7, #4]
    165e:	cmp	r1, #3
    1660:	itt	le
    1662:	addle	r1, #1
    1664:	strle	r1, [r7, #4]
    1666:	b.w	e5e <loop+0x996>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    166a:	ldrb	r3, [r5, #17]
    166c:	cmp	r3, #0
    166e:	beq.w	18ca <loop+0x1402>
    1672:	ldr	r3, [r5, #28]
        if (m_sequence.getShiftMode()) {
    1674:	ldrb.w	r3, [r3, #46]	; 0x2e
    1678:	cmp	r3, #0
    167a:	beq.w	1b4a <loop+0x1682>
    167e:	ldr	r1, [r7, #4]
    1680:	cmp	r1, #3
    1682:	itt	le
    1684:	addle	r1, #1
    1686:	strle	r1, [r7, #4]
    1688:	b.w	d88 <loop+0x8c0>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    168c:	ldrb	r3, [r7, #17]
    168e:	cmp	r3, #0
    1690:	beq.w	189a <loop+0x13d2>
    1694:	ldr	r3, [r7, #28]
        if (m_sequence.getShiftMode()) {
    1696:	ldrb.w	r3, [r3, #46]	; 0x2e
    169a:	cmp	r3, #0
    169c:	beq.w	1c2a <loop+0x1762>
    16a0:	ldr	r1, [r6, #4]
    16a2:	cmp	r1, #3
    16a4:	itt	le
    16a6:	addle	r1, #1
    16a8:	strle	r1, [r6, #4]
    16aa:	b.w	d42 <loop+0x87a>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    16ae:	ldrb	r3, [r6, #17]
    16b0:	cmp	r3, #0
    16b2:	beq.w	18fa <loop+0x1432>
    16b6:	ldr	r3, [r6, #28]
        if (m_sequence.getShiftMode()) {
    16b8:	ldrb.w	r3, [r3, #46]	; 0x2e
    16bc:	cmp	r3, #0
    16be:	beq.w	1bf2 <loop+0x172a>
    16c2:	ldr	r1, [r7, #4]
    16c4:	cmp	r1, #3
    16c6:	itt	le
    16c8:	addle	r1, #1
    16ca:	strle	r1, [r7, #4]
    16cc:	b.w	dce <loop+0x906>
          paginator->previousPage();
          Serial.println(paginator->getPage());
        } else {
          m_sequence.toggleGlobalMode();
        }
      } else if (m_state == LOW && m_reverseButton) {
    16d0:	ldrb	r3, [r5, #17]
    16d2:	cmp	r3, #0
    16d4:	beq.w	183a <loop+0x1372>
    16d8:	ldr	r3, [r5, #28]
        if (m_sequence.getShiftMode()) {
    16da:	ldrb.w	r3, [r3, #46]	; 0x2e
    16de:	cmp	r3, #0
    16e0:	beq.w	1b12 <loop+0x164a>
    16e4:	ldr	r1, [r7, #4]
    16e6:	cmp	r1, #3
    16e8:	itt	le
    16ea:	addle	r1, #1
    16ec:	strle	r1, [r7, #4]
    16ee:	b.w	e16 <loop+0x94e>
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
    16f2:	ldr	r5, [pc, #748]	; (19e0 <loop+0x1518>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16f4:	ldr	r4, [pc, #748]	; (19e4 <loop+0x151c>)
      ppqn = 0;
      m_sequence.doStep(); 
    16f6:	ldr	r6, [r5, #12]
        m_leds[4]->on();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
    16f8:	ldr	r3, [r6, #0]
    16fa:	add.w	r3, r6, r3, lsl #2
        ppqn = 0;
      }
    };

    void startPPQN () {
      m_state = true;
    16fe:	mov.w	r9, #1
    1702:	ldr	r7, [r3, #20]
    1704:	strb.w	r9, [r5]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1708:	ldrb.w	sl, [r7]
      ppqn = 0;
    170c:	mov.w	r8, #0
    1710:	mov	r0, sl
    1712:	str.w	r8, [r5, #8]
    1716:	bl	2ccc <digitalRead>
    171a:	clz	r1, r0
    171e:	lsrs	r1, r1, #5
    1720:	mov	r0, sl
    1722:	bl	2cc0 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
    1726:	ldr	r3, [r6, #0]
    1728:	ldr	r1, [r4, #0]
    172a:	str	r1, [sp, #12]
    172c:	add.w	r2, r6, r3, lsl #2
	return ret;
    1730:	ldr	r0, [sp, #12]
    1732:	ldr	r2, [r2, #4]
      blinking = true;
    1734:	strb.w	r9, [r7, #16]
    1738:	ldrb	r1, [r2, #4]
      blinkingCounter = times;
    173a:	str.w	r8, [r7, #20]
      lastBlink = millis();  
    173e:	str	r0, [r7, #8]
    1740:	cmp	r1, #0
    1742:	bne.w	1c6c <loop+0x17a4>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
    1746:	ldrb.w	r2, [r6, #45]	; 0x2d
    174a:	cmp	r2, #0
    174c:	beq.w	1a60 <loop+0x1598>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    1750:	subs	r2, r3, #1
    1752:	cmp	r3, #0
    1754:	beq.w	1c92 <loop+0x17ca>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    1758:	str	r2, [r6, #0]
      m_sequence.doStep(); 
      m_sequence.m_leds[5]->toggle();
    175a:	ldr	r3, [r5, #12]
    175c:	ldr	r5, [r3, #40]	; 0x28
    };

    void toggle () {
      m_state = !m_state;
    175e:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1760:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1762:	clz	r1, r1
    1766:	lsrs	r1, r1, #5
    1768:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    176a:	bl	2cc0 <digitalWrite>

      if (blinking) {
    176e:	ldrb	r3, [r5, #16]
    1770:	cmp	r3, #0
    1772:	beq.w	4dc <loop+0x14>
        digitalWrite(m_pin, !m_state);
    1776:	ldr	r1, [r5, #4]
    1778:	ldrb	r0, [r5, #0]
    177a:	clz	r1, r1
    177e:	lsrs	r1, r1, #5
    1780:	bl	2cc0 <digitalWrite>
    1784:	b.w	4dc <loop+0x14>
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
    1788:	ldr	r5, [pc, #596]	; (19e0 <loop+0x1518>)

      m_sequence.stopSteps(ppqn);
    178a:	ldr	r2, [r5, #12]
          Serial.println("Opps, an unknown MIDI message type!");
      }
    }

    void advancePPQN () {
      ++ppqn;
    178c:	ldr	r3, [r5, #8]
        }
      }
    };

    boolean stepIsOver (int ppqn) {
      return ppqn >= m_steps[m_currentStep]->m_length;
    178e:	ldr	r1, [r2, #0]
    1790:	add.w	r2, r2, r1, lsl #2
    1794:	adds	r3, #1
    1796:	ldr	r2, [r2, #4]
    1798:	str	r3, [r5, #8]
    void reverse () {
      m_reverse = !m_reverse;
    };

    void stopSteps (int ppqn) {
      if (stepIsOver(ppqn)) {
    179a:	ldr	r2, [r2, #16]
    179c:	cmp	r3, r2
    179e:	bge.w	1c62 <loop+0x179a>

      m_sequence.stopSteps(ppqn);

      if (ppqn == max_ppqn) {
    17a2:	ldr	r2, [r5, #4]
    17a4:	ldr	r1, [pc, #568]	; (19e0 <loop+0x1518>)
    17a6:	cmp	r2, r3
    17a8:	bne.w	4da <loop+0x12>
        m_sequence.doStep(); 
    17ac:	ldr	r6, [r1, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17ae:	ldr	r4, [pc, #564]	; (19e4 <loop+0x151c>)
        m_leds[4]->on();
      }
    }

    void doStep () {  
      m_leds[m_currentStep]->blink();
    17b0:	ldr	r3, [r6, #0]
    17b2:	add.w	r3, r6, r3, lsl #2
    17b6:	ldr	r7, [r3, #20]
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    17b8:	ldrb.w	r8, [r7]
    17bc:	mov	r0, r8
    17be:	bl	2ccc <digitalRead>
    17c2:	clz	r1, r0
    17c6:	lsrs	r1, r1, #5
    17c8:	mov	r0, r8
    17ca:	bl	2cc0 <digitalWrite>

      if (m_steps[m_currentStep]->m_state) {
    17ce:	ldr	r3, [r6, #0]
    17d0:	ldr	r0, [r4, #0]
    17d2:	str	r0, [sp, #8]
    17d4:	add.w	r2, r6, r3, lsl #2
      blinking = true;
    17d8:	movs	r1, #1
    17da:	ldr	r2, [r2, #4]
    17dc:	strb	r1, [r7, #16]
      blinkingCounter = times;
    17de:	movs	r1, #0
    17e0:	str	r1, [r7, #20]
    17e2:	ldrb	r1, [r2, #4]
	return ret;
    17e4:	ldr	r0, [sp, #8]
      lastBlink = millis();  
    17e6:	str	r0, [r7, #8]
    17e8:	cmp	r1, #0
    17ea:	bne.w	1f1c <loop+0x1a54>
        m_steps[m_currentStep]->play();
      }

      if (!m_reverse) {
    17ee:	ldrb.w	r2, [r6, #45]	; 0x2d
    17f2:	cmp	r2, #0
    17f4:	bne.w	1f14 <loop+0x1a4c>
        m_currentStep++;
    17f8:	adds	r3, #1
    17fa:	cmp	r3, #3
    17fc:	it	gt
    17fe:	movgt	r3, #0
    1800:	str	r3, [r6, #0]
        ppqn = 0;
    1802:	movs	r3, #0
    1804:	str	r3, [r5, #8]
    1806:	b.w	4dc <loop+0x14>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    180a:	ldr	r6, [r6, #24]
    };

    void toggle () {
      m_state = !m_state;
    180c:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    180e:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1810:	clz	r1, r1
    1814:	lsrs	r1, r1, #5
    1816:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1818:	bl	2cc0 <digitalWrite>

      if (blinking) {
    181c:	ldrb	r3, [r6, #16]
    181e:	cmp	r3, #0
    1820:	bne.w	1b02 <loop+0x163a>
        m_sequence.m_steps[m_id - 1]->toggle();
    1824:	ldr	r3, [r5, #28]
    1826:	ldr	r2, [r5, #0]
    1828:	ldr	r7, [r5, #32]
    182a:	ldr.w	r2, [r3, r2, lsl #2]
      m_velocity = 100;
      m_length = 4;
    };

    void toggle () {
      m_state = !m_state;
    182e:	ldrb	r3, [r2, #4]
    1830:	eor.w	r3, r3, #1
    1834:	strb	r3, [r2, #4]
    1836:	b.w	65a <loop+0x192>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    183a:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    183c:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    183e:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1840:	clz	r1, r1
    1844:	lsrs	r1, r1, #5
    1846:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1848:	bl	2cc0 <digitalWrite>

      if (blinking) {
    184c:	ldrb	r3, [r5, #16]
    184e:	cmp	r3, #0
    1850:	bne.w	1af2 <loop+0x162a>
        m_sequence.m_steps[m_id - 1]->toggle();
    1854:	ldr	r3, [r6, #28]
    1856:	ldr	r2, [r6, #0]
    1858:	ldr	r7, [r6, #32]
    185a:	ldr.w	r2, [r3, r2, lsl #2]
    185e:	ldrb	r3, [r2, #4]
    1860:	eor.w	r3, r3, #1
    1864:	strb	r3, [r2, #4]
    1866:	b.w	5f6 <loop+0x12e>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    186a:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    186c:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    186e:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1870:	clz	r1, r1
    1874:	lsrs	r1, r1, #5
    1876:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1878:	bl	2cc0 <digitalWrite>

      if (blinking) {
    187c:	ldrb	r3, [r5, #16]
    187e:	cmp	r3, #0
    1880:	bne.w	1ae2 <loop+0x161a>
        m_sequence.m_steps[m_id - 1]->toggle();
    1884:	ldr	r3, [r6, #28]
    1886:	ldr	r2, [r6, #0]
    1888:	ldr	r7, [r6, #32]
    188a:	ldr.w	r2, [r3, r2, lsl #2]
    188e:	ldrb	r3, [r2, #4]
    1890:	eor.w	r3, r3, #1
    1894:	strb	r3, [r2, #4]
    1896:	b.w	52e <loop+0x66>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    189a:	ldr	r6, [r7, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    189c:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    189e:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    18a0:	clz	r1, r1
    18a4:	lsrs	r1, r1, #5
    18a6:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    18a8:	bl	2cc0 <digitalWrite>

      if (blinking) {
    18ac:	ldrb	r3, [r6, #16]
    18ae:	cmp	r3, #0
    18b0:	bne.w	1ad2 <loop+0x160a>
        m_sequence.m_steps[m_id - 1]->toggle();
    18b4:	ldr	r3, [r5, #28]
    18b6:	ldr	r2, [r5, #0]
    18b8:	ldr	r6, [r5, #32]
    18ba:	ldr.w	r2, [r3, r2, lsl #2]
    18be:	ldrb	r3, [r2, #4]
    18c0:	eor.w	r3, r3, #1
    18c4:	strb	r3, [r2, #4]
    18c6:	b.w	722 <loop+0x25a>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    18ca:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    18cc:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    18ce:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    18d0:	clz	r1, r1
    18d4:	lsrs	r1, r1, #5
    18d6:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    18d8:	bl	2cc0 <digitalWrite>

      if (blinking) {
    18dc:	ldrb	r3, [r5, #16]
    18de:	cmp	r3, #0
    18e0:	bne.w	1ac2 <loop+0x15fa>
        m_sequence.m_steps[m_id - 1]->toggle();
    18e4:	ldr	r3, [r6, #28]
    18e6:	ldr	r2, [r6, #0]
    18e8:	ldr	r7, [r6, #32]
    18ea:	ldr.w	r2, [r3, r2, lsl #2]
    18ee:	ldrb	r3, [r2, #4]
    18f0:	eor.w	r3, r3, #1
    18f4:	strb	r3, [r2, #4]
    18f6:	b.w	6be <loop+0x1f6>
        } else {
          m_led.toggle();
          reverse();
        }
      } else if (m_state == LOW) {
        m_led.toggle();
    18fa:	ldr	r6, [r6, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    18fc:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    18fe:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1900:	clz	r1, r1
    1904:	lsrs	r1, r1, #5
    1906:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1908:	bl	2cc0 <digitalWrite>

      if (blinking) {
    190c:	ldrb	r3, [r6, #16]
    190e:	cmp	r3, #0
    1910:	bne.w	1ab2 <loop+0x15ea>
        m_sequence.m_steps[m_id - 1]->toggle();
    1914:	ldr	r3, [r5, #28]
    1916:	ldr	r2, [r5, #0]
    1918:	ldr	r7, [r5, #32]
    191a:	ldr.w	r2, [r3, r2, lsl #2]
    191e:	ldrb	r3, [r2, #4]
    1920:	eor.w	r3, r3, #1
    1924:	strb	r3, [r2, #4]
    1926:	b.w	592 <loop+0xca>
      } else {
        if (currentMode == VELOCITY) {
          m_sequence.m_steps[m_id]->controlVelocity(m_value);
    192a:	ldr	r2, [r4, #12]
    192c:	ldr	r3, [r4, #16]
    192e:	add.w	r3, r3, r2, lsl #2
      m_pitch = newValue;
    };

    void controlVelocity (int value) {
      int newValue = map(value, 0, 1023, 127, 63);
      m_velocity = newValue;
    1932:	ldr	r2, [r3, #4]
    1934:	subs.w	r3, r0, r0, lsl #6
    1938:	it	mi
    193a:	addwmi	r3, r3, #1023	; 0x3ff
    193e:	asrs	r3, r3, #10
    1940:	adds	r3, #127	; 0x7f
    1942:	str	r3, [r2, #12]
    1944:	b.w	91e <loop+0x456>
    1948:	ldr	r2, [r4, #12]
    194a:	ldr	r3, [r4, #16]
    194c:	add.w	r3, r3, r2, lsl #2
    1950:	ldr	r2, [r3, #4]
    1952:	subs.w	r3, r0, r0, lsl #6
    1956:	it	mi
    1958:	addwmi	r3, r3, #1023	; 0x3ff
    195c:	asrs	r3, r3, #10
    195e:	adds	r3, #127	; 0x7f
    1960:	str	r3, [r2, #12]
    1962:	b.w	978 <loop+0x4b0>
    1966:	ldr	r2, [r4, #12]
    1968:	ldr	r3, [r4, #16]
    196a:	add.w	r3, r3, r2, lsl #2
    196e:	ldr	r2, [r3, #4]
    1970:	subs.w	r3, r0, r0, lsl #6
    1974:	it	mi
    1976:	addwmi	r3, r3, #1023	; 0x3ff
    197a:	asrs	r3, r3, #10
    197c:	adds	r3, #127	; 0x7f
    197e:	str	r3, [r2, #12]
    1980:	b.w	8c4 <loop+0x3fc>
    1984:	ldr	r2, [r4, #12]
    1986:	ldr	r3, [r4, #16]
    1988:	add.w	r3, r3, r2, lsl #2
    198c:	ldr	r2, [r3, #4]
    198e:	subs.w	r3, r0, r0, lsl #6
    1992:	it	mi
    1994:	addwmi	r3, r3, #1023	; 0x3ff
    1998:	asrs	r3, r3, #10
    199a:	adds	r3, #127	; 0x7f
    199c:	str	r3, [r2, #12]
    199e:	b.w	86a <loop+0x3a2>
    19a2:	ldr	r2, [r4, #12]
    19a4:	ldr	r3, [r4, #16]
    19a6:	add.w	r3, r3, r2, lsl #2
    19aa:	ldr	r2, [r3, #4]
    19ac:	subs.w	r3, r0, r0, lsl #6
    19b0:	it	mi
    19b2:	addwmi	r3, r3, #1023	; 0x3ff
    19b6:	asrs	r3, r3, #10
    19b8:	adds	r3, #127	; 0x7f
    19ba:	str	r3, [r2, #12]
    19bc:	b.w	9d2 <loop+0x50a>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    19c0:	sub.w	r2, r0, #400	; 0x190
    19c4:	cmp.w	r2, #400	; 0x190
    19c8:	bcc.n	1aa4 <loop+0x15dc>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    19ca:	sub.w	r2, r0, #800	; 0x320
    19ce:	cmp	r2, #223	; 0xdf
    19d0:	bhi.w	9d2 <loop+0x50a>
        max_ppqn = 10;
    19d4:	movs	r2, #10
    19d6:	str	r2, [r3, #4]
    19d8:	ldr	r0, [r4, #4]
    19da:	b.w	9d2 <loop+0x50a>
    19de:	nop
    19e0:	.word	0x1fff1870
    19e4:	.word	0x1fff18fc
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    19e8:	sub.w	r2, r0, #400	; 0x190
    19ec:	cmp.w	r2, #400	; 0x190
    19f0:	bcc.n	1a96 <loop+0x15ce>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    19f2:	sub.w	r2, r0, #800	; 0x320
    19f6:	cmp	r2, #223	; 0xdf
    19f8:	bhi.w	8c4 <loop+0x3fc>
        max_ppqn = 10;
    19fc:	movs	r2, #10
    19fe:	str	r2, [r3, #4]
    1a00:	ldr	r0, [r4, #4]
    1a02:	b.w	8c4 <loop+0x3fc>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1a06:	sub.w	r2, r0, #400	; 0x190
    1a0a:	cmp.w	r2, #400	; 0x190
    1a0e:	bcc.n	1a88 <loop+0x15c0>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1a10:	sub.w	r2, r0, #800	; 0x320
    1a14:	cmp	r2, #223	; 0xdf
    1a16:	bhi.w	86a <loop+0x3a2>
        max_ppqn = 10;
    1a1a:	movs	r2, #10
    1a1c:	str	r2, [r3, #4]
    1a1e:	ldr	r0, [r4, #4]
    1a20:	b.w	86a <loop+0x3a2>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1a24:	sub.w	r2, r0, #400	; 0x190
    1a28:	cmp.w	r2, #400	; 0x190
    1a2c:	bcc.n	1a7a <loop+0x15b2>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1a2e:	sub.w	r2, r0, #800	; 0x320
    1a32:	cmp	r2, #223	; 0xdf
    1a34:	bhi.w	91e <loop+0x456>
        max_ppqn = 10;
    1a38:	movs	r2, #10
    1a3a:	str	r2, [r3, #4]
    1a3c:	ldr	r0, [r4, #4]
    1a3e:	b.w	91e <loop+0x456>
        max_ppqn = 6;

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
    1a42:	sub.w	r2, r0, #400	; 0x190
    1a46:	cmp.w	r2, #400	; 0x190
    1a4a:	bcc.n	1a6c <loop+0x15a4>
        max_ppqn = 8;

        if (ppqn >= 8) {
          ppqn = 0;
        }
      } else if (value >= 800 && value <= 1023) {
    1a4c:	sub.w	r2, r0, #800	; 0x320
    1a50:	cmp	r2, #223	; 0xdf
    1a52:	bhi.w	978 <loop+0x4b0>
        max_ppqn = 10;
    1a56:	movs	r2, #10
    1a58:	str	r2, [r3, #4]
    1a5a:	ldr	r0, [r4, #4]
    1a5c:	b.w	978 <loop+0x4b0>
    1a60:	adds	r3, #1
    1a62:	cmp	r3, #3
    1a64:	it	gt
    1a66:	movgt	r3, #0
    1a68:	str	r3, [r6, #0]
    1a6a:	b.n	175a <loop+0x1292>
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;

        if (ppqn >= 8) {
    1a6c:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1a6e:	movs	r1, #8

        if (ppqn >= 8) {
    1a70:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1a72:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1a74:	bgt.w	158c <loop+0x10c4>
    1a78:	b.n	1590 <loop+0x10c8>
    1a7a:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1a7c:	movs	r1, #8

        if (ppqn >= 8) {
    1a7e:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1a80:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1a82:	bgt.w	15e6 <loop+0x111e>
    1a86:	b.n	15ea <loop+0x1122>
    1a88:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1a8a:	movs	r1, #8

        if (ppqn >= 8) {
    1a8c:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1a8e:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1a90:	bgt.w	15aa <loop+0x10e2>
    1a94:	b.n	15ae <loop+0x10e6>
    1a96:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1a98:	movs	r1, #8

        if (ppqn >= 8) {
    1a9a:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1a9c:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1a9e:	bgt.w	15c8 <loop+0x1100>
    1aa2:	b.n	15cc <loop+0x1104>
    1aa4:	ldr	r2, [r3, #8]

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1aa6:	movs	r1, #8

        if (ppqn >= 8) {
    1aa8:	cmp	r2, #7

        if (ppqn >= 6) {
          ppqn = 0;
        }
      } else if (value >= 400 && value < 800) {
        max_ppqn = 8;
    1aaa:	str	r1, [r3, #4]

        if (ppqn >= 8) {
    1aac:	bgt.w	1604 <loop+0x113c>
    1ab0:	b.n	1608 <loop+0x1140>
        digitalWrite(m_pin, !m_state);
    1ab2:	ldr	r1, [r6, #4]
    1ab4:	ldrb	r0, [r6, #0]
    1ab6:	clz	r1, r1
    1aba:	lsrs	r1, r1, #5
    1abc:	bl	2cc0 <digitalWrite>
    1ac0:	b.n	1914 <loop+0x144c>
    1ac2:	ldr	r1, [r5, #4]
    1ac4:	ldrb	r0, [r5, #0]
    1ac6:	clz	r1, r1
    1aca:	lsrs	r1, r1, #5
    1acc:	bl	2cc0 <digitalWrite>
    1ad0:	b.n	18e4 <loop+0x141c>
    1ad2:	ldr	r1, [r6, #4]
    1ad4:	ldrb	r0, [r6, #0]
    1ad6:	clz	r1, r1
    1ada:	lsrs	r1, r1, #5
    1adc:	bl	2cc0 <digitalWrite>
    1ae0:	b.n	18b4 <loop+0x13ec>
    1ae2:	ldr	r1, [r5, #4]
    1ae4:	ldrb	r0, [r5, #0]
    1ae6:	clz	r1, r1
    1aea:	lsrs	r1, r1, #5
    1aec:	bl	2cc0 <digitalWrite>
    1af0:	b.n	1884 <loop+0x13bc>
    1af2:	ldr	r1, [r5, #4]
    1af4:	ldrb	r0, [r5, #0]
    1af6:	clz	r1, r1
    1afa:	lsrs	r1, r1, #5
    1afc:	bl	2cc0 <digitalWrite>
    1b00:	b.n	1854 <loop+0x138c>
    1b02:	ldr	r1, [r6, #4]
    1b04:	ldrb	r0, [r6, #0]
    1b06:	clz	r1, r1
    1b0a:	lsrs	r1, r1, #5
    1b0c:	bl	2cc0 <digitalWrite>
    1b10:	b.n	1824 <loop+0x135c>
      } else if (m_state == LOW && m_reverseButton) {
        if (m_sequence.getShiftMode()) {
          paginator->nextPage();
          Serial.println(paginator->getPage());
        } else {
          m_led.toggle();
    1b12:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1b14:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1b16:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1b18:	clz	r1, r1
    1b1c:	lsrs	r1, r1, #5
    1b1e:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1b20:	bl	2cc0 <digitalWrite>

      if (blinking) {
    1b24:	ldrb	r3, [r5, #16]
    1b26:	cbz	r3, 1b36 <loop+0x166e>
        digitalWrite(m_pin, !m_state);
    1b28:	ldr	r1, [r5, #4]
    1b2a:	ldrb	r0, [r5, #0]
    1b2c:	clz	r1, r1
    1b30:	lsrs	r1, r1, #5
    1b32:	bl	2cc0 <digitalWrite>
    1b36:	ldr	r2, [r6, #28]
    1b38:	ldr	r7, [r6, #32]
    void resetStep () {
      m_currentStep = 0;
    };

    void reverse () {
      m_reverse = !m_reverse;
    1b3a:	ldrb.w	r3, [r2, #45]	; 0x2d
    1b3e:	eor.w	r3, r3, #1
    1b42:	strb.w	r3, [r2, #45]	; 0x2d
    1b46:	b.w	5f6 <loop+0x12e>
    1b4a:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1b4c:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1b4e:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1b50:	clz	r1, r1
    1b54:	lsrs	r1, r1, #5
    1b56:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1b58:	bl	2cc0 <digitalWrite>

      if (blinking) {
    1b5c:	ldrb	r3, [r5, #16]
    1b5e:	cbz	r3, 1b6e <loop+0x16a6>
        digitalWrite(m_pin, !m_state);
    1b60:	ldr	r1, [r5, #4]
    1b62:	ldrb	r0, [r5, #0]
    1b64:	clz	r1, r1
    1b68:	lsrs	r1, r1, #5
    1b6a:	bl	2cc0 <digitalWrite>
    1b6e:	ldr	r2, [r6, #28]
    1b70:	ldr	r7, [r6, #32]
    1b72:	ldrb.w	r3, [r2, #45]	; 0x2d
    1b76:	eor.w	r3, r3, #1
    1b7a:	strb.w	r3, [r2, #45]	; 0x2d
    1b7e:	b.w	6be <loop+0x1f6>
    1b82:	ldr	r5, [r5, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1b84:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1b86:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1b88:	clz	r1, r1
    1b8c:	lsrs	r1, r1, #5
    1b8e:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    1b90:	bl	2cc0 <digitalWrite>

      if (blinking) {
    1b94:	ldrb	r3, [r5, #16]
    1b96:	cbz	r3, 1ba6 <loop+0x16de>
        digitalWrite(m_pin, !m_state);
    1b98:	ldr	r1, [r5, #4]
    1b9a:	ldrb	r0, [r5, #0]
    1b9c:	clz	r1, r1
    1ba0:	lsrs	r1, r1, #5
    1ba2:	bl	2cc0 <digitalWrite>
    1ba6:	ldr	r2, [r6, #28]
    1ba8:	ldr	r7, [r6, #32]
    1baa:	ldrb.w	r3, [r2, #45]	; 0x2d
    1bae:	eor.w	r3, r3, #1
    1bb2:	strb.w	r3, [r2, #45]	; 0x2d
    1bb6:	b.w	52e <loop+0x66>
    1bba:	ldr	r6, [r6, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1bbc:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1bbe:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1bc0:	clz	r1, r1
    1bc4:	lsrs	r1, r1, #5
    1bc6:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1bc8:	bl	2cc0 <digitalWrite>

      if (blinking) {
    1bcc:	ldrb	r3, [r6, #16]
    1bce:	cbz	r3, 1bde <loop+0x1716>
        digitalWrite(m_pin, !m_state);
    1bd0:	ldr	r1, [r6, #4]
    1bd2:	ldrb	r0, [r6, #0]
    1bd4:	clz	r1, r1
    1bd8:	lsrs	r1, r1, #5
    1bda:	bl	2cc0 <digitalWrite>
    1bde:	ldr	r2, [r5, #28]
    1be0:	ldr	r7, [r5, #32]
    1be2:	ldrb.w	r3, [r2, #45]	; 0x2d
    1be6:	eor.w	r3, r3, #1
    1bea:	strb.w	r3, [r2, #45]	; 0x2d
    1bee:	b.w	65a <loop+0x192>
    1bf2:	ldr	r6, [r6, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1bf4:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1bf6:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1bf8:	clz	r1, r1
    1bfc:	lsrs	r1, r1, #5
    1bfe:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1c00:	bl	2cc0 <digitalWrite>

      if (blinking) {
    1c04:	ldrb	r3, [r6, #16]
    1c06:	cbz	r3, 1c16 <loop+0x174e>
        digitalWrite(m_pin, !m_state);
    1c08:	ldr	r1, [r6, #4]
    1c0a:	ldrb	r0, [r6, #0]
    1c0c:	clz	r1, r1
    1c10:	lsrs	r1, r1, #5
    1c12:	bl	2cc0 <digitalWrite>
    1c16:	ldr	r2, [r5, #28]
    1c18:	ldr	r7, [r5, #32]
    1c1a:	ldrb.w	r3, [r2, #45]	; 0x2d
    1c1e:	eor.w	r3, r3, #1
    1c22:	strb.w	r3, [r2, #45]	; 0x2d
    1c26:	b.w	592 <loop+0xca>
    1c2a:	ldr	r6, [r7, #24]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1c2c:	ldr	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1c2e:	ldrb	r0, [r6, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    1c30:	clz	r1, r1
    1c34:	lsrs	r1, r1, #5
    1c36:	str	r1, [r6, #4]

      digitalWrite(m_pin, m_state);
    1c38:	bl	2cc0 <digitalWrite>

      if (blinking) {
    1c3c:	ldrb	r3, [r6, #16]
    1c3e:	cbz	r3, 1c4e <loop+0x1786>
        digitalWrite(m_pin, !m_state);
    1c40:	ldr	r1, [r6, #4]
    1c42:	ldrb	r0, [r6, #0]
    1c44:	clz	r1, r1
    1c48:	lsrs	r1, r1, #5
    1c4a:	bl	2cc0 <digitalWrite>
    1c4e:	ldr	r2, [r5, #28]
    1c50:	ldr	r6, [r5, #32]
    1c52:	ldrb.w	r3, [r2, #45]	; 0x2d
    1c56:	eor.w	r3, r3, #1
    1c5a:	strb.w	r3, [r2, #45]	; 0x2d
    1c5e:	b.w	722 <loop+0x25a>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1c62:	ldr	r0, [pc, #740]	; (1f48 <loop+0x1a80>)
    1c64:	bl	2f4c <usb_midi_write_packed>
    1c68:	ldr	r3, [r5, #8]
    1c6a:	b.n	17a2 <loop+0x12da>
    1c6c:	ldr	r0, [r2, #8]
    1c6e:	ldr	r3, [r2, #12]
    1c70:	lsls	r0, r0, #16
    1c72:	lsls	r3, r3, #24
    1c74:	and.w	r3, r3, #2130706432	; 0x7f000000
    1c78:	and.w	r0, r0, #8323072	; 0x7f0000
    1c7c:	orrs	r0, r3
    1c7e:	orr.w	r0, r0, #40704	; 0x9f00
    1c82:	orr.w	r0, r0, #9
    1c86:	bl	2f4c <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1c8a:	bl	2fe8 <usb_midi_flush_output>
    1c8e:	ldr	r3, [r6, #0]
    1c90:	b.n	1746 <loop+0x127e>
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
          m_currentStep = 3;
    1c92:	movs	r3, #3
    1c94:	str	r3, [r6, #0]
    1c96:	b.n	175a <loop+0x1292>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1c98:	ldr	r7, [pc, #688]	; (1f4c <loop+0x1a84>)
    1c9a:	ldrb	r2, [r7, #0]
    1c9c:	cmp	r2, #0
    1c9e:	beq.w	1ff4 <loop+0x1b2c>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1ca2:	cmp	r2, #1
    1ca4:	beq.w	220c <loop+0x1d44>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1ca8:	cmp	r2, #2
    1caa:	bne.w	e22 <loop+0x95a>
    1cae:	movs	r1, #5
    1cb0:	ldr	r0, [pc, #668]	; (1f50 <loop+0x1a88>)
        currentMode = PITCH;
    1cb2:	strb	r3, [r7, #0]
    1cb4:	str	r3, [sp, #4]
    1cb6:	bl	26b0 <usb_serial_write>
    1cba:	ldr	r0, [pc, #664]	; (1f54 <loop+0x1a8c>)
    1cbc:	bl	4224 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1cc0:	ldr.w	r7, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1cc4:	ldrb.w	sl, [r7]
    1cc8:	mov	r0, sl
    1cca:	bl	2ccc <digitalRead>
    1cce:	clz	r1, r0
    1cd2:	lsrs	r1, r1, #5
    1cd4:	mov	r0, sl
    1cd6:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1cda:	ldr.w	r2, [r8]
    1cde:	str	r2, [sp, #312]	; 0x138
      blinking = true;
      blinkingCounter = times;
    1ce0:	ldr	r3, [sp, #4]
        m_leds[4]->on();
    1ce2:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1ce6:	ldr	r1, [sp, #312]	; 0x138
    1ce8:	str	r3, [r7, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1cea:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1cec:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1cee:	strb	r0, [r7, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1cf0:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1cf2:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1cf4:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1cf6:	ldrb	r0, [r2, #0]
    1cf8:	bl	2cc0 <digitalWrite>
    1cfc:	ldr	r7, [r5, #32]
    1cfe:	b.w	5f6 <loop+0x12e>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1d02:	ldr	r7, [pc, #584]	; (1f4c <loop+0x1a84>)
    1d04:	ldrb	r2, [r7, #0]
    1d06:	cmp	r2, #0
    1d08:	beq.w	2042 <loop+0x1b7a>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1d0c:	cmp	r2, #1
    1d0e:	beq.w	2244 <loop+0x1d7c>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1d12:	cmp	r2, #2
    1d14:	bne.w	eb2 <loop+0x9ea>
    1d18:	movs	r1, #5
    1d1a:	ldr	r0, [pc, #564]	; (1f50 <loop+0x1a88>)
        currentMode = PITCH;
    1d1c:	strb	r3, [r7, #0]
    1d1e:	str	r3, [sp, #4]
    1d20:	bl	26b0 <usb_serial_write>
    1d24:	ldr	r0, [pc, #556]	; (1f54 <loop+0x1a8c>)
    1d26:	bl	4224 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1d2a:	ldr.w	r7, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1d2e:	ldrb.w	sl, [r7]
    1d32:	mov	r0, sl
    1d34:	bl	2ccc <digitalRead>
    1d38:	clz	r1, r0
    1d3c:	lsrs	r1, r1, #5
    1d3e:	mov	r0, sl
    1d40:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1d44:	ldr.w	r2, [r8]
    1d48:	str	r2, [sp, #324]	; 0x144
      blinking = true;
      blinkingCounter = times;
    1d4a:	ldr	r3, [sp, #4]
        m_leds[4]->on();
    1d4c:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1d50:	ldr	r1, [sp, #324]	; 0x144
    1d52:	str	r3, [r7, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1d54:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1d56:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1d58:	strb	r0, [r7, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1d5a:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1d5c:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1d5e:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1d60:	ldrb	r0, [r2, #0]
    1d62:	bl	2cc0 <digitalWrite>
    1d66:	ldr	r7, [r6, #32]
    1d68:	b.w	65a <loop+0x192>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1d6c:	ldr	r7, [pc, #476]	; (1f4c <loop+0x1a84>)
    1d6e:	ldrb	r2, [r7, #0]
    1d70:	cmp	r2, #0
    1d72:	beq.w	1fa6 <loop+0x1ade>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1d76:	cmp	r2, #1
    1d78:	beq.w	21d4 <loop+0x1d0c>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1d7c:	cmp	r2, #2
    1d7e:	bne.w	e6a <loop+0x9a2>
    1d82:	movs	r1, #5
    1d84:	ldr	r0, [pc, #456]	; (1f50 <loop+0x1a88>)
        currentMode = PITCH;
    1d86:	strb	r3, [r7, #0]
    1d88:	str	r3, [sp, #4]
    1d8a:	bl	26b0 <usb_serial_write>
    1d8e:	ldr	r0, [pc, #452]	; (1f54 <loop+0x1a8c>)
    1d90:	bl	4224 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1d94:	ldr.w	r7, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1d98:	ldrb.w	sl, [r7]
    1d9c:	mov	r0, sl
    1d9e:	bl	2ccc <digitalRead>
    1da2:	clz	r1, r0
    1da6:	lsrs	r1, r1, #5
    1da8:	mov	r0, sl
    1daa:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1dae:	ldr.w	r2, [r8]
    1db2:	str	r2, [sp, #288]	; 0x120
      blinking = true;
      blinkingCounter = times;
    1db4:	ldr	r3, [sp, #4]
        m_leds[4]->on();
    1db6:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1dba:	ldr	r1, [sp, #288]	; 0x120
    1dbc:	str	r3, [r7, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1dbe:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1dc0:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1dc2:	strb	r0, [r7, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1dc4:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1dc6:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1dc8:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1dca:	ldrb	r0, [r2, #0]
    1dcc:	bl	2cc0 <digitalWrite>
    1dd0:	ldr	r7, [r5, #32]
    1dd2:	b.w	52e <loop+0x66>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1dd6:	ldr	r7, [pc, #372]	; (1f4c <loop+0x1a84>)
    1dd8:	ldrb	r2, [r7, #0]
    1dda:	cmp	r2, #0
    1ddc:	beq.w	2090 <loop+0x1bc8>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1de0:	cmp	r2, #1
    1de2:	beq.w	212c <loop+0x1c64>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1de6:	cmp	r2, #2
    1de8:	bne.w	dda <loop+0x912>
    1dec:	movs	r1, #5
    1dee:	ldr	r0, [pc, #352]	; (1f50 <loop+0x1a88>)
        currentMode = PITCH;
    1df0:	strb	r3, [r7, #0]
    1df2:	str	r3, [sp, #4]
    1df4:	bl	26b0 <usb_serial_write>
    1df8:	ldr	r0, [pc, #344]	; (1f54 <loop+0x1a8c>)
    1dfa:	bl	4224 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1dfe:	ldr.w	r7, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1e02:	ldrb.w	sl, [r7]
    1e06:	mov	r0, sl
    1e08:	bl	2ccc <digitalRead>
    1e0c:	clz	r1, r0
    1e10:	lsrs	r1, r1, #5
    1e12:	mov	r0, sl
    1e14:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e18:	ldr.w	r2, [r8]
    1e1c:	str	r2, [sp, #300]	; 0x12c
      blinking = true;
      blinkingCounter = times;
    1e1e:	ldr	r3, [sp, #4]
        m_leds[4]->on();
    1e20:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1e24:	ldr	r1, [sp, #300]	; 0x12c
    1e26:	str	r3, [r7, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1e28:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1e2a:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1e2c:	strb	r0, [r7, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1e2e:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1e30:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1e32:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1e34:	ldrb	r0, [r2, #0]
    1e36:	bl	2cc0 <digitalWrite>
    1e3a:	ldr	r7, [r6, #32]
    1e3c:	b.w	592 <loop+0xca>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1e40:	ldr	r6, [pc, #264]	; (1f4c <loop+0x1a84>)
    1e42:	ldrb	r2, [r6, #0]
    1e44:	cmp	r2, #0
    1e46:	beq.w	1f58 <loop+0x1a90>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1e4a:	cmp	r2, #1
    1e4c:	beq.w	219c <loop+0x1cd4>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1e50:	cmp	r2, #2
    1e52:	bne.w	d4e <loop+0x886>
    1e56:	movs	r1, #5
    1e58:	ldr	r0, [pc, #244]	; (1f50 <loop+0x1a88>)
        currentMode = PITCH;
    1e5a:	strb	r3, [r6, #0]
    1e5c:	str	r3, [sp, #4]
    1e5e:	bl	26b0 <usb_serial_write>
    1e62:	ldr	r0, [pc, #240]	; (1f54 <loop+0x1a8c>)
    1e64:	bl	4224 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1e68:	ldr.w	r6, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1e6c:	ldrb.w	sl, [r6]
    1e70:	mov	r0, sl
    1e72:	bl	2ccc <digitalRead>
    1e76:	clz	r1, r0
    1e7a:	lsrs	r1, r1, #5
    1e7c:	mov	r0, sl
    1e7e:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e82:	ldr.w	r2, [r8]
    1e86:	str	r2, [sp, #348]	; 0x15c
      blinking = true;
      blinkingCounter = times;
    1e88:	ldr	r3, [sp, #4]
        m_leds[4]->on();
    1e8a:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1e8e:	ldr	r1, [sp, #348]	; 0x15c
    1e90:	str	r3, [r6, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1e92:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1e94:	str	r1, [r6, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1e96:	strb	r0, [r6, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1e98:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1e9a:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1e9c:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1e9e:	ldrb	r0, [r2, #0]
    1ea0:	bl	2cc0 <digitalWrite>
    1ea4:	ldr	r6, [r7, #32]
    1ea6:	b.w	722 <loop+0x25a>
      // i would like to add a global mode here 
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
    1eaa:	ldr	r7, [pc, #160]	; (1f4c <loop+0x1a84>)
    1eac:	ldrb	r2, [r7, #0]
    1eae:	cmp	r2, #0
    1eb0:	beq.w	20de <loop+0x1c16>
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
    1eb4:	cmp	r2, #1
    1eb6:	beq.w	2164 <loop+0x1c9c>
        currentMode = NOTELENGTH;
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
        m_leds[4]->off();
      } else if (currentMode == NOTELENGTH) {
    1eba:	cmp	r2, #2
    1ebc:	bne.w	d94 <loop+0x8cc>
    1ec0:	movs	r1, #5
    1ec2:	ldr	r0, [pc, #140]	; (1f50 <loop+0x1a88>)
        currentMode = PITCH;
    1ec4:	strb	r3, [r7, #0]
    1ec6:	str	r3, [sp, #4]
    1ec8:	bl	26b0 <usb_serial_write>
    1ecc:	ldr	r0, [pc, #132]	; (1f54 <loop+0x1a8c>)
    1ece:	bl	4224 <Print::println()>
        Serial.println("PITCH");
        m_leds[4]->blink(); // shut the 999 blinks off
    1ed2:	ldr.w	r7, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1ed6:	ldrb.w	sl, [r7]
    1eda:	mov	r0, sl
    1edc:	bl	2ccc <digitalRead>
    1ee0:	clz	r1, r0
    1ee4:	lsrs	r1, r1, #5
    1ee6:	mov	r0, sl
    1ee8:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1eec:	ldr.w	r2, [r8]
    1ef0:	str	r2, [sp, #336]	; 0x150
      blinking = true;
      blinkingCounter = times;
    1ef2:	ldr	r3, [sp, #4]
        m_leds[4]->on();
    1ef4:	ldr.w	r2, [r9, #36]	; 0x24
	return ret;
    1ef8:	ldr	r1, [sp, #336]	; 0x150
    1efa:	str	r3, [r7, #20]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1efc:	movs	r0, #1
      blinkingCounter = times;
      lastBlink = millis();  
    1efe:	str	r1, [r7, #8]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1f00:	strb	r0, [r7, #16]
    }

    void on () {
      blinking = false;
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1f02:	mov	r1, r0
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
      m_state = 1;
    1f04:	str	r0, [r2, #4]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    }

    void on () {
      blinking = false;
    1f06:	strb	r3, [r2, #16]
      m_state = 1;
      digitalWrite(m_pin, m_state);
    1f08:	ldrb	r0, [r2, #0]
    1f0a:	bl	2cc0 <digitalWrite>
    1f0e:	ldr	r7, [r5, #32]
    1f10:	b.w	6be <loop+0x1f6>
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;

        if (m_currentStep == -1) {
    1f14:	subs	r2, r3, #1
    1f16:	cbz	r3, 1f42 <loop+0x1a7a>

        if (m_currentStep > 3) {
          m_currentStep = 0;
        }
      } else {
        m_currentStep--;
    1f18:	str	r2, [r6, #0]
    1f1a:	b.n	1802 <loop+0x133a>
		if (type < 0xF0) {
			if (type < 0x80) return;
			type &= 0xF0;
			usb_midi_write_packed((type << 8) | (type >> 4) | ((cable & 0x0F) << 4)
			  | (((channel - 1) & 0x0F) << 8) | ((data1 & 0x7F) << 16)
			  | ((data2 & 0x7F) << 24));
    1f1c:	ldr	r0, [r2, #8]
    1f1e:	ldr	r3, [r2, #12]
    1f20:	lsls	r0, r0, #16
    1f22:	lsls	r3, r3, #24
    1f24:	and.w	r3, r3, #2130706432	; 0x7f000000
    1f28:	and.w	r0, r0, #8323072	; 0x7f0000
    1f2c:	orrs	r0, r3
    1f2e:	orr.w	r0, r0, #40704	; 0x9f00
    1f32:	orr.w	r0, r0, #9
    1f36:	bl	2f4c <usb_midi_write_packed>
			usb_midi_write_packed((type << 8) | 0x03 | ((cable & 0x0F) << 4)
			  | ((data1 & 0x7F) << 16) | ((data2 & 0x7F) << 24));
		}
	}
        void send_now(void) __attribute__((always_inline)) {
		usb_midi_flush_output();
    1f3a:	bl	2fe8 <usb_midi_flush_output>
    1f3e:	ldr	r3, [r6, #0]
    1f40:	b.n	17ee <loop+0x1326>

        if (m_currentStep == -1) {
          m_currentStep = 3;
    1f42:	movs	r3, #3
    1f44:	str	r3, [r6, #0]
    1f46:	b.n	1802 <loop+0x133a>
    1f48:	.word	0x7f7bbf0b
    1f4c:	.word	0x1fff1880
    1f50:	.word	0x000056a4
    1f54:	.word	0x1fff0c70
    1f58:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1f5a:	mov.w	sl, #1
    1f5e:	ldr	r0, [pc, #832]	; (22a0 <loop+0x1dd8>)
    1f60:	strb.w	sl, [r6]
    1f64:	bl	26b0 <usb_serial_write>
    1f68:	ldr	r0, [pc, #824]	; (22a4 <loop+0x1ddc>)
    1f6a:	bl	4224 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    1f6e:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1f72:	ldrb.w	r6, [r9]
    1f76:	mov	r0, r6
    1f78:	bl	2ccc <digitalRead>
    1f7c:	clz	r1, r0
    1f80:	lsrs	r1, r1, #5
    1f82:	mov	r0, r6
    1f84:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1f88:	ldr.w	r3, [r8]
    1f8c:	str	r3, [sp, #344]	; 0x158
      blinking = true;
      blinkingCounter = times;
    1f8e:	movw	r3, #999	; 0x3e7
    1f92:	str.w	r3, [r9, #20]
	return ret;
    1f96:	ldr	r3, [sp, #344]	; 0x158
    1f98:	ldr	r6, [r7, #32]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1f9a:	strb.w	sl, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1f9e:	str.w	r3, [r9, #8]
    1fa2:	b.w	722 <loop+0x25a>
    1fa6:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1fa8:	mov.w	sl, #1
    1fac:	ldr	r0, [pc, #752]	; (22a0 <loop+0x1dd8>)
    1fae:	strb.w	sl, [r7]
    1fb2:	bl	26b0 <usb_serial_write>
    1fb6:	ldr	r0, [pc, #748]	; (22a4 <loop+0x1ddc>)
    1fb8:	bl	4224 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    1fbc:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    1fc0:	ldrb.w	r7, [r9]
    1fc4:	mov	r0, r7
    1fc6:	bl	2ccc <digitalRead>
    1fca:	clz	r1, r0
    1fce:	lsrs	r1, r1, #5
    1fd0:	mov	r0, r7
    1fd2:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1fd6:	ldr.w	r3, [r8]
    1fda:	str	r3, [sp, #284]	; 0x11c
      blinking = true;
      blinkingCounter = times;
    1fdc:	movw	r3, #999	; 0x3e7
    1fe0:	str.w	r3, [r9, #20]
	return ret;
    1fe4:	ldr	r3, [sp, #284]	; 0x11c
    1fe6:	ldr	r7, [r5, #32]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    1fe8:	strb.w	sl, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    1fec:	str.w	r3, [r9, #8]
    1ff0:	b.w	52e <loop+0x66>
    1ff4:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    1ff6:	mov.w	sl, #1
    1ffa:	ldr	r0, [pc, #676]	; (22a0 <loop+0x1dd8>)
    1ffc:	strb.w	sl, [r7]
    2000:	bl	26b0 <usb_serial_write>
    2004:	ldr	r0, [pc, #668]	; (22a4 <loop+0x1ddc>)
    2006:	bl	4224 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    200a:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    200e:	ldrb.w	r7, [r9]
    2012:	mov	r0, r7
    2014:	bl	2ccc <digitalRead>
    2018:	clz	r1, r0
    201c:	lsrs	r1, r1, #5
    201e:	mov	r0, r7
    2020:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2024:	ldr.w	r3, [r8]
    2028:	str	r3, [sp, #308]	; 0x134
      blinking = true;
      blinkingCounter = times;
    202a:	movw	r3, #999	; 0x3e7
    202e:	str.w	r3, [r9, #20]
	return ret;
    2032:	ldr	r3, [sp, #308]	; 0x134
    2034:	ldr	r7, [r5, #32]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    2036:	strb.w	sl, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    203a:	str.w	r3, [r9, #8]
    203e:	b.w	5f6 <loop+0x12e>
    2042:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    2044:	mov.w	sl, #1
    2048:	ldr	r0, [pc, #596]	; (22a0 <loop+0x1dd8>)
    204a:	strb.w	sl, [r7]
    204e:	bl	26b0 <usb_serial_write>
    2052:	ldr	r0, [pc, #592]	; (22a4 <loop+0x1ddc>)
    2054:	bl	4224 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    2058:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    205c:	ldrb.w	r7, [r9]
    2060:	mov	r0, r7
    2062:	bl	2ccc <digitalRead>
    2066:	clz	r1, r0
    206a:	lsrs	r1, r1, #5
    206c:	mov	r0, r7
    206e:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2072:	ldr.w	r3, [r8]
    2076:	str	r3, [sp, #320]	; 0x140
      blinking = true;
      blinkingCounter = times;
    2078:	movw	r3, #999	; 0x3e7
    207c:	str.w	r3, [r9, #20]
	return ret;
    2080:	ldr	r3, [sp, #320]	; 0x140
    2082:	ldr	r7, [r6, #32]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    2084:	strb.w	sl, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    2088:	str.w	r3, [r9, #8]
    208c:	b.w	65a <loop+0x192>
    2090:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    2092:	mov.w	sl, #1
    2096:	ldr	r0, [pc, #520]	; (22a0 <loop+0x1dd8>)
    2098:	strb.w	sl, [r7]
    209c:	bl	26b0 <usb_serial_write>
    20a0:	ldr	r0, [pc, #512]	; (22a4 <loop+0x1ddc>)
    20a2:	bl	4224 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    20a6:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    20aa:	ldrb.w	r7, [r9]
    20ae:	mov	r0, r7
    20b0:	bl	2ccc <digitalRead>
    20b4:	clz	r1, r0
    20b8:	lsrs	r1, r1, #5
    20ba:	mov	r0, r7
    20bc:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    20c0:	ldr.w	r3, [r8]
    20c4:	str	r3, [sp, #296]	; 0x128
      blinking = true;
      blinkingCounter = times;
    20c6:	movw	r3, #999	; 0x3e7
    20ca:	str.w	r3, [r9, #20]
	return ret;
    20ce:	ldr	r3, [sp, #296]	; 0x128
    20d0:	ldr	r7, [r6, #32]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    20d2:	strb.w	sl, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    20d6:	str.w	r3, [r9, #8]
    20da:	b.w	592 <loop+0xca>
    20de:	movs	r1, #8
      // where each knob does something globally
      // special, but no good ideas yet so just a
      // reminder
      
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
    20e0:	mov.w	sl, #1
    20e4:	ldr	r0, [pc, #440]	; (22a0 <loop+0x1dd8>)
    20e6:	strb.w	sl, [r7]
    20ea:	bl	26b0 <usb_serial_write>
    20ee:	ldr	r0, [pc, #436]	; (22a4 <loop+0x1ddc>)
    20f0:	bl	4224 <Print::println()>
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
    20f4:	ldr.w	r9, [r9, #36]	; 0x24
      pinMode(m_pin, OUTPUT);
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
    20f8:	ldrb.w	r7, [r9]
    20fc:	mov	r0, r7
    20fe:	bl	2ccc <digitalRead>
    2102:	clz	r1, r0
    2106:	lsrs	r1, r1, #5
    2108:	mov	r0, r7
    210a:	bl	2cc0 <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    210e:	ldr.w	r3, [r8]
    2112:	str	r3, [sp, #332]	; 0x14c
      blinking = true;
      blinkingCounter = times;
    2114:	movw	r3, #999	; 0x3e7
    2118:	str.w	r3, [r9, #20]
	return ret;
    211c:	ldr	r3, [sp, #332]	; 0x14c
    211e:	ldr	r7, [r5, #32]
      digitalWrite(m_pin, m_state);
    };

    void blink (int times = 0) {
      digitalWrite(m_pin, !digitalRead(m_pin));
      blinking = true;
    2120:	strb.w	sl, [r9, #16]
      blinkingCounter = times;
      lastBlink = millis();  
    2124:	str.w	r3, [r9, #8]
    2128:	b.w	6be <loop+0x1f6>
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    212c:	movs	r2, #2
    212e:	movs	r1, #10
    2130:	ldr	r0, [pc, #372]	; (22a8 <loop+0x1de0>)
    2132:	strb	r2, [r7, #0]
    2134:	str	r3, [sp, #4]
    2136:	bl	26b0 <usb_serial_write>
    213a:	ldr	r0, [pc, #360]	; (22a4 <loop+0x1ddc>)
    213c:	bl	4224 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    2140:	ldr	r3, [sp, #4]
    2142:	ldr.w	r0, [r9, #36]	; 0x24
    2146:	mov	r1, r3
    2148:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    214c:	ldr.w	r2, [r9, #36]	; 0x24
    };

    void off () {
      blinking = false;
      m_state = 0;
      digitalWrite(m_pin, m_state);
    2150:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    2152:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    2154:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
    2156:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
    2158:	ldrb	r0, [r2, #0]
    215a:	bl	2cc0 <digitalWrite>
    215e:	ldr	r7, [r6, #32]
    2160:	b.w	592 <loop+0xca>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    2164:	movs	r2, #2
    2166:	movs	r1, #10
    2168:	ldr	r0, [pc, #316]	; (22a8 <loop+0x1de0>)
    216a:	strb	r2, [r7, #0]
    216c:	str	r3, [sp, #4]
    216e:	bl	26b0 <usb_serial_write>
    2172:	ldr	r0, [pc, #304]	; (22a4 <loop+0x1ddc>)
    2174:	bl	4224 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    2178:	ldr	r3, [sp, #4]
    217a:	ldr.w	r0, [r9, #36]	; 0x24
    217e:	mov	r1, r3
    2180:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    2184:	ldr.w	r2, [r9, #36]	; 0x24
    2188:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    218a:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    218c:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
    218e:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
    2190:	ldrb	r0, [r2, #0]
    2192:	bl	2cc0 <digitalWrite>
    2196:	ldr	r7, [r5, #32]
    2198:	b.w	6be <loop+0x1f6>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    219c:	movs	r2, #2
    219e:	movs	r1, #10
    21a0:	ldr	r0, [pc, #260]	; (22a8 <loop+0x1de0>)
    21a2:	strb	r2, [r6, #0]
    21a4:	str	r3, [sp, #4]
    21a6:	bl	26b0 <usb_serial_write>
    21aa:	ldr	r0, [pc, #248]	; (22a4 <loop+0x1ddc>)
    21ac:	bl	4224 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    21b0:	ldr	r3, [sp, #4]
    21b2:	ldr.w	r0, [r9, #36]	; 0x24
    21b6:	mov	r1, r3
    21b8:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    21bc:	ldr.w	r2, [r9, #36]	; 0x24
    21c0:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    21c2:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    21c4:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
    21c6:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
    21c8:	ldrb	r0, [r2, #0]
    21ca:	bl	2cc0 <digitalWrite>
    21ce:	ldr	r6, [r7, #32]
    21d0:	b.w	722 <loop+0x25a>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    21d4:	movs	r2, #2
    21d6:	movs	r1, #10
    21d8:	ldr	r0, [pc, #204]	; (22a8 <loop+0x1de0>)
    21da:	strb	r2, [r7, #0]
    21dc:	str	r3, [sp, #4]
    21de:	bl	26b0 <usb_serial_write>
    21e2:	ldr	r0, [pc, #192]	; (22a4 <loop+0x1ddc>)
    21e4:	bl	4224 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    21e8:	ldr	r3, [sp, #4]
    21ea:	ldr.w	r0, [r9, #36]	; 0x24
    21ee:	mov	r1, r3
    21f0:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    21f4:	ldr.w	r2, [r9, #36]	; 0x24
    21f8:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    21fa:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    21fc:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
    21fe:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
    2200:	ldrb	r0, [r2, #0]
    2202:	bl	2cc0 <digitalWrite>
    2206:	ldr	r7, [r5, #32]
    2208:	b.w	52e <loop+0x66>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    220c:	movs	r2, #2
    220e:	movs	r1, #10
    2210:	ldr	r0, [pc, #148]	; (22a8 <loop+0x1de0>)
    2212:	strb	r2, [r7, #0]
    2214:	str	r3, [sp, #4]
    2216:	bl	26b0 <usb_serial_write>
    221a:	ldr	r0, [pc, #136]	; (22a4 <loop+0x1ddc>)
    221c:	bl	4224 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    2220:	ldr	r3, [sp, #4]
    2222:	ldr.w	r0, [r9, #36]	; 0x24
    2226:	mov	r1, r3
    2228:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    222c:	ldr.w	r2, [r9, #36]	; 0x24
    2230:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    2232:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    2234:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
    2236:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
    2238:	ldrb	r0, [r2, #0]
    223a:	bl	2cc0 <digitalWrite>
    223e:	ldr	r7, [r5, #32]
    2240:	b.w	5f6 <loop+0x12e>
      if (currentMode == PITCH) {
        currentMode = VELOCITY;
        Serial.println("VELOCITY");
        m_leds[4]->blink(999);
      } else if (currentMode == VELOCITY) {
        currentMode = NOTELENGTH;
    2244:	movs	r2, #2
    2246:	movs	r1, #10
    2248:	ldr	r0, [pc, #92]	; (22a8 <loop+0x1de0>)
    224a:	strb	r2, [r7, #0]
    224c:	str	r3, [sp, #4]
    224e:	bl	26b0 <usb_serial_write>
    2252:	ldr	r0, [pc, #80]	; (22a4 <loop+0x1ddc>)
    2254:	bl	4224 <Print::println()>
        Serial.println("NOTELENGTH");
        m_leds[4]->blink();
    2258:	ldr	r3, [sp, #4]
    225a:	ldr.w	r0, [r9, #36]	; 0x24
    225e:	mov	r1, r3
    2260:	bl	490 <Led::blink(int)>
        m_leds[4]->off();
    2264:	ldr.w	r2, [r9, #36]	; 0x24
    2268:	ldr	r3, [sp, #4]
        digitalWrite(m_pin, !m_state);
      }
    };

    void off () {
      blinking = false;
    226a:	strb	r3, [r2, #16]
      m_state = 0;
      digitalWrite(m_pin, m_state);
    226c:	mov	r1, r3
      }
    };

    void off () {
      blinking = false;
      m_state = 0;
    226e:	str	r3, [r2, #4]
      digitalWrite(m_pin, m_state);
    2270:	ldrb	r0, [r2, #0]
    2272:	bl	2cc0 <digitalWrite>
    2276:	ldr	r7, [r6, #32]
    2278:	b.w	65a <loop+0x192>
    // and then if x < millis() it is in the past
    // and if x > millis() its in the future
    // and if i want to know how much time has passed i do millis() - x
    // and if i compare millis() - x > z i check if z time has passed
    boolean currentIsSame() {
      return current == HIGH && previous == HIGH;
    227c:	mov	r7, r3
    227e:	b.w	684 <loop+0x1bc>
    2282:	mov	r7, r3
    2284:	b.w	620 <loop+0x158>
    2288:	mov	r7, r3
    228a:	b.w	558 <loop+0x90>
    228e:	mov	r7, r3
    2290:	b.w	4f4 <loop+0x2c>
    2294:	mov	r7, r3
    2296:	b.w	5bc <loop+0xf4>
    229a:	mov	r6, r3
    229c:	b.w	6e8 <loop+0x220>
    22a0:	.word	0x0000568c
    22a4:	.word	0x1fff0c70
    22a8:	.word	0x00005698

000022ac <_GLOBAL__sub_I_currentMode>:
    22ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#include "definitions.h"
#include "controller.h"
#include "transport.h"
#include "step.h"

Led led1(3, LOW);
    22b0:	movs	r2, #0
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
    22b2:	sub	sp, #12
#include "definitions.h"
#include "controller.h"
#include "transport.h"
#include "step.h"

Led led1(3, LOW);
    22b4:	movs	r1, #3
    22b6:	ldr	r0, [pc, #700]	; (2574 <_GLOBAL__sub_I_currentMode+0x2c8>)
    boolean m_reverse;
    boolean m_shiftMode;
    int m_page = 1;
    Paginator* m_paginator;

    Sequence (Step* steps[4], Led* leds[6]) {
    22b8:	ldr	r4, [pc, #700]	; (2578 <_GLOBAL__sub_I_currentMode+0x2cc>)
    22ba:	ldr	r7, [pc, #704]	; (257c <_GLOBAL__sub_I_currentMode+0x2d0>)
    22bc:	bl	46c <Led::Led(int, int)>
Led led2(5, LOW);
    22c0:	movs	r2, #0
    22c2:	movs	r1, #5
    22c4:	ldr	r0, [pc, #696]	; (2580 <_GLOBAL__sub_I_currentMode+0x2d4>)
    22c6:	bl	46c <Led::Led(int, int)>
Led led3(7, LOW);
    22ca:	movs	r2, #0
    22cc:	movs	r1, #7
    22ce:	ldr	r0, [pc, #692]	; (2584 <_GLOBAL__sub_I_currentMode+0x2d8>)
    22d0:	bl	46c <Led::Led(int, int)>
Led led4(9, LOW);
    22d4:	movs	r2, #0
    22d6:	movs	r1, #9
    22d8:	ldr	r0, [pc, #684]	; (2588 <_GLOBAL__sub_I_currentMode+0x2dc>)
    22da:	bl	46c <Led::Led(int, int)>
Led led5(11, LOW);
    22de:	movs	r2, #0
    22e0:	movs	r1, #11
    22e2:	ldr	r0, [pc, #680]	; (258c <_GLOBAL__sub_I_currentMode+0x2e0>)
    22e4:	bl	46c <Led::Led(int, int)>
Led led6(24, LOW);
    22e8:	movs	r2, #0
    22ea:	movs	r1, #24
    22ec:	ldr	r0, [pc, #672]	; (2590 <_GLOBAL__sub_I_currentMode+0x2e4>)
    22ee:	bl	46c <Led::Led(int, int)>
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    22f2:	ldr	r2, [pc, #672]	; (2594 <_GLOBAL__sub_I_currentMode+0x2e8>)
    22f4:	ldr	r3, [pc, #672]	; (2598 <_GLOBAL__sub_I_currentMode+0x2ec>)
    22f6:	ldr.w	lr, [pc, #736]	; 25d8 <_GLOBAL__sub_I_currentMode+0x32c>
    22fa:	str.w	lr, [r2]
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    22fe:	movs	r0, #100	; 0x64
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    2300:	movs	r6, #0
      m_controller = controller;
      m_pitch = 38;
    2302:	movs	r5, #38	; 0x26
      m_velocity = 100;
      m_length = 4;
    2304:	movs	r1, #4

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    2306:	str	r0, [r2, #12]
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
    2308:	strb	r6, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
    230a:	str	r5, [r2, #8]
      m_velocity = 100;
      m_length = 4;
    230c:	str	r1, [r2, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    230e:	ldr	r2, [pc, #652]	; (259c <_GLOBAL__sub_I_currentMode+0x2f0>)
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    2310:	str	r0, [r3, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    2312:	str.w	lr, [r3]
      m_state = false;
    2316:	strb	r6, [r3, #4]
      m_controller = controller;
      m_pitch = 38;
    2318:	str	r5, [r3, #8]
      m_velocity = 100;
      m_length = 4;
    231a:	str	r1, [r3, #16]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    231c:	ldr	r3, [pc, #640]	; (25a0 <_GLOBAL__sub_I_currentMode+0x2f4>)
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    231e:	str	r0, [r2, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    2320:	str.w	lr, [r2]
      m_state = false;
    2324:	strb	r6, [r2, #4]
      m_controller = controller;
      m_pitch = 38;
    2326:	str	r5, [r2, #8]
      m_velocity = 100;
      m_length = 4;
    2328:	str	r1, [r2, #16]
    232a:	movs	r2, #1

    Step (Controller& controller): m_controller(controller) {
      m_state = false;
      m_controller = controller;
      m_pitch = 38;
      m_velocity = 100;
    232c:	str	r0, [r3, #12]
    boolean m_state;
    int m_pitch;
    int m_velocity;
    int m_length;

    Step (Controller& controller): m_controller(controller) {
    232e:	str.w	lr, [r3]
      m_state = false;
    2332:	strb	r6, [r3, #4]
      m_controller = controller;
      m_pitch = 38;
    2334:	str	r5, [r3, #8]
      m_velocity = 100;
      m_length = 4;
    2336:	str	r1, [r3, #16]
    2338:	str	r2, [r4, #48]	; 0x30
    233a:	add.w	r3, r4, #16
    233e:	add.w	r0, r4, #40	; 0x28
    2342:	mov	r2, r7
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
    2344:	ldr.w	r1, [r2], #4
    2348:	str.w	r1, [r3, #4]!
    boolean m_shiftMode;
    int m_page = 1;
    Paginator* m_paginator;

    Sequence (Step* steps[4], Led* leds[6]) {
      for (int i = 0; i < 6; i++) {
    234c:	cmp	r0, r3
    234e:	bne.n	2344 <_GLOBAL__sub_I_currentMode+0x98>
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    2350:	ldr	r3, [pc, #592]	; (25a4 <_GLOBAL__sub_I_currentMode+0x2f8>)
    2352:	ldmia.w	r3, {r0, r5}
      };
      
      m_currentStep = 0;
    2356:	movs	r2, #0
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    2358:	ldr	r1, [r3, #8]
    235a:	str	r0, [r4, #4]
    235c:	ldr	r3, [r3, #12]
    235e:	str	r5, [r4, #8]
      
      m_currentStep = 0;
      m_mode = PITCH;
      m_reverse = false;

      m_paginator = new Paginator();
    2360:	movs	r0, #8
      for (int i = 0; i < 6; i++) {
        m_leds[i] = leds[i];
      };

      for (int i = 0; i < 4; i++) {
        m_steps[i] = steps[i];
    2362:	str	r1, [r4, #12]
    2364:	str	r3, [r4, #16]
      };
      
      m_currentStep = 0;
    2366:	str	r2, [r4, #0]
      m_mode = PITCH;
    2368:	strb.w	r2, [r4, #44]	; 0x2c
      m_reverse = false;
    236c:	strb.w	r2, [r4, #45]	; 0x2d

      m_paginator = new Paginator();
    2370:	bl	42f0 <operator new(unsigned int)>
      m_leds[4]->toggle();
    2374:	ldr	r5, [r4, #36]	; 0x24
      
      m_currentStep = 0;
      m_mode = PITCH;
      m_reverse = false;

      m_paginator = new Paginator();
    2376:	str	r0, [r4, #52]	; 0x34
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    2378:	ldr	r3, [r5, #4]
    237a:	mov	r2, r0
    237c:	clz	r3, r3
    2380:	lsrs	r3, r3, #5
  Sequence* m_sequence;
  private:
    int m_page = 1;  

  public:
    Paginator () {
    2382:	movs	r1, #1

      digitalWrite(m_pin, m_state);
    2384:	ldrb	r0, [r5, #0]
    2386:	str	r1, [r2, #4]
    2388:	mov	r1, r3
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    238a:	str	r3, [r5, #4]

      digitalWrite(m_pin, m_state);
    238c:	bl	2cc0 <digitalWrite>

      if (blinking) {
    2390:	ldrb	r3, [r5, #16]
    2392:	cbz	r3, 23a2 <_GLOBAL__sub_I_currentMode+0xf6>
        digitalWrite(m_pin, !m_state);
    2394:	ldr	r1, [r5, #4]
    2396:	ldrb	r0, [r5, #0]
    2398:	clz	r1, r1
    239c:	lsrs	r1, r1, #5
    239e:	bl	2cc0 <digitalWrite>
      m_leds[4]->toggle();
      m_leds[5]->toggle();
    23a2:	ldr	r5, [r4, #40]	; 0x28
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    23a4:	ldr	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    23a6:	ldrb	r0, [r5, #0]
      blinkingCounter = times;
      lastBlink = millis();  
    };

    void toggle () {
      m_state = !m_state;
    23a8:	clz	r1, r1
    23ac:	lsrs	r1, r1, #5
    23ae:	str	r1, [r5, #4]

      digitalWrite(m_pin, m_state);
    23b0:	bl	2cc0 <digitalWrite>

      if (blinking) {
    23b4:	ldrb	r3, [r5, #16]
    23b6:	cbz	r3, 23c6 <_GLOBAL__sub_I_currentMode+0x11a>
        digitalWrite(m_pin, !m_state);
    23b8:	ldr	r1, [r5, #4]
    23ba:	ldrb	r0, [r5, #0]
    23bc:	clz	r1, r1
    23c0:	lsrs	r1, r1, #5
    23c2:	bl	2cc0 <digitalWrite>
    23c6:	movs	r1, #15
    23c8:	ldr	r0, [pc, #476]	; (25a8 <_GLOBAL__sub_I_currentMode+0x2fc>)
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    23ca:	ldr	r6, [pc, #480]	; (25ac <_GLOBAL__sub_I_currentMode+0x300>)
    23cc:	bl	26b0 <usb_serial_write>
    23d0:	ldr	r0, [pc, #476]	; (25b0 <_GLOBAL__sub_I_currentMode+0x304>)
    23d2:	bl	4224 <Print::println()>
    23d6:	ldr	r3, [r4, #52]	; 0x34
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    23d8:	ldr	r0, [pc, #468]	; (25b0 <_GLOBAL__sub_I_currentMode+0x304>)
    23da:	ldr	r1, [r3, #4]
    23dc:	bl	42c4 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    23e0:	ldr	r0, [pc, #460]	; (25b0 <_GLOBAL__sub_I_currentMode+0x304>)
    23e2:	movs	r5, #0
    23e4:	bl	4224 <Print::println()>
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    23e8:	mov.w	sl, #2
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    23ec:	ldr	r2, [pc, #452]	; (25b4 <_GLOBAL__sub_I_currentMode+0x308>)
    23ee:	str	r5, [r6, #8]
    23f0:	movs	r3, #24
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;
    23f2:	mov.w	r8, #1000	; 0x3e8
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    23f6:	mov.w	fp, #1
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    23fa:	mov	r1, r5
    23fc:	mov	r0, sl
    23fe:	str	r3, [r6, #4]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2400:	ldr	r3, [r7, #0]
      m_state = false;
    2402:	strb	r5, [r6, #0]
      m_id = id;
      m_pin = pin;
    2404:	mov.w	r9, #4
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2408:	strb.w	r5, [r2, #36]	; 0x24
    240c:	str	r4, [r2, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    240e:	strb	r5, [r2, #16]
      m_reverseButton = reverseButton;
    2410:	strb	r5, [r2, #17]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2412:	str	r3, [r2, #24]
      m_id = id;
    2414:	str.w	fp, [r2]
      m_pin = pin;
    2418:	str.w	sl, [r2, #52]	; 0x34
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;
    241c:	str.w	r8, [r2, #48]	; 0x30
    int max_ppqn = 24;
    int ppqn = 0;
    Sequence &m_sequence;
    
  public:
    Transport (Sequence& sequence): m_sequence(sequence) {
    2420:	str	r4, [r6, #12]

      pinMode(pin, INPUT);
    2422:	bl	2ce8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2426:	ldr	r2, [pc, #400]	; (25b8 <_GLOBAL__sub_I_currentMode+0x30c>)
    2428:	ldr	r3, [r7, #4]
    242a:	strb.w	r5, [r2, #36]	; 0x24
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    242e:	mov	r1, r5
    2430:	mov	r0, r9
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2432:	str	r4, [r2, #28]
      m_id = id;
    2434:	str.w	sl, [r2]
      m_pin = pin;
      m_shiftButton = shiftButton;
    2438:	strb	r5, [r2, #16]
      m_reverseButton = reverseButton;
    243a:	strb	r5, [r2, #17]
      m_holdThreshold = 1000;
    243c:	str.w	r8, [r2, #48]	; 0x30
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2440:	str	r3, [r2, #24]
      m_id = id;
      m_pin = pin;
    2442:	str.w	r9, [r2, #52]	; 0x34
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    2446:	bl	2ce8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    244a:	ldr	r2, [pc, #368]	; (25bc <_GLOBAL__sub_I_currentMode+0x310>)
    244c:	ldr	r3, [r7, #8]
    244e:	str	r3, [r2, #24]
      m_id = id;
    2450:	mov.w	ip, #3
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    2454:	mov	r1, r5
    2456:	movs	r0, #6
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2458:	strb.w	r5, [r2, #36]	; 0x24
    245c:	str	r4, [r2, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    245e:	strb	r5, [r2, #16]
      m_reverseButton = reverseButton;
    2460:	strb	r5, [r2, #17]
      m_holdThreshold = 1000;
    2462:	str.w	r8, [r2, #48]	; 0x30
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    2466:	str.w	ip, [r2]
    246a:	str.w	ip, [sp, #4]
      m_pin = pin;
    246e:	str	r0, [r2, #52]	; 0x34
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    2470:	bl	2ce8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2474:	ldr	r2, [pc, #328]	; (25c0 <_GLOBAL__sub_I_currentMode+0x314>)
    2476:	ldr	r0, [r7, #12]
    2478:	str	r0, [r2, #24]
      m_id = id;
      m_pin = pin;
    247a:	mov.w	ip, #8
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    247e:	mov	r1, r5
    2480:	mov	r0, ip
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    2482:	strb.w	r5, [r2, #36]	; 0x24
    2486:	str	r4, [r2, #28]
      m_id = id;
    2488:	str.w	r9, [r2]
      m_pin = pin;
      m_shiftButton = shiftButton;
    248c:	strb	r5, [r2, #16]
      m_reverseButton = reverseButton;
    248e:	strb	r5, [r2, #17]
      m_holdThreshold = 1000;
    2490:	str.w	r8, [r2, #48]	; 0x30
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    2494:	str.w	ip, [r2, #52]	; 0x34
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    2498:	bl	2ce8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    249c:	ldr	r2, [pc, #292]	; (25c4 <_GLOBAL__sub_I_currentMode+0x318>)
    249e:	ldr	r0, [r7, #16]
    24a0:	str	r0, [r2, #24]
      m_id = id;
      m_pin = pin;
    24a2:	mov.w	ip, #10
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    24a6:	movs	r0, #5
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    24a8:	mov	r1, r5
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    24aa:	str	r0, [r2, #0]
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    24ac:	mov	r0, ip
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    24ae:	str.w	ip, [r2, #52]	; 0x34
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24b2:	strb.w	r5, [r2, #36]	; 0x24
    24b6:	str	r4, [r2, #28]
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    24b8:	strb.w	fp, [r2, #16]
      m_reverseButton = reverseButton;
    24bc:	strb	r5, [r2, #17]
      m_holdThreshold = 1000;
    24be:	str.w	r8, [r2, #48]	; 0x30

      pinMode(pin, INPUT);
    24c2:	bl	2ce8 <pinMode>
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24c6:	ldr.w	lr, [pc, #276]	; 25dc <_GLOBAL__sub_I_currentMode+0x330>
    24ca:	ldr	r7, [r7, #20]
    24cc:	str.w	r7, [lr, #24]
      m_id = id;
      m_pin = pin;
    24d0:	movs	r2, #12
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    24d2:	ldr	r7, [pc, #244]	; (25c8 <_GLOBAL__sub_I_currentMode+0x31c>)
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24d4:	str.w	r4, [lr, #28]
      m_id = id;
    24d8:	movs	r3, #6
      m_pin = pin;
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    24da:	mov	r0, r2
    24dc:	mov	r1, r5
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
    24de:	str.w	r3, [lr]
      int pin, 
      Led& led,
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
    24e2:	strb.w	r5, [lr, #36]	; 0x24
      m_id = id;
      m_pin = pin;
      m_shiftButton = shiftButton;
    24e6:	strb.w	r5, [lr, #16]
      m_reverseButton = reverseButton;
    24ea:	strb.w	fp, [lr, #17]
      m_holdThreshold = 1000;
    24ee:	str.w	r8, [lr, #48]	; 0x30
      Sequence& sequence,
      boolean shiftButton = false,
      boolean reverseButton = false
    ): m_led(led), m_sequence(sequence) {
      m_id = id;
      m_pin = pin;
    24f2:	str.w	r2, [lr, #52]	; 0x34
      m_shiftButton = shiftButton;
      m_reverseButton = reverseButton;
      m_holdThreshold = 1000;

      pinMode(pin, INPUT);
    24f6:	bl	2ce8 <pinMode>
    24fa:	ldr.w	lr, [pc, #228]	; 25e0 <_GLOBAL__sub_I_currentMode+0x334>
    24fe:	ldr	r0, [pc, #204]	; (25cc <_GLOBAL__sub_I_currentMode+0x320>)
    2500:	ldr	r1, [pc, #204]	; (25d0 <_GLOBAL__sub_I_currentMode+0x324>)
    2502:	ldr	r2, [pc, #208]	; (25d4 <_GLOBAL__sub_I_currentMode+0x328>)
      m_pin = pin;
      m_knobType = knobType;
    2504:	strb.w	r5, [lr, #24]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    2508:	mov.w	ip, #15
    250c:	mov.w	r8, #14
    2510:	strb.w	ip, [r7]
      m_knobType = knobType;
    2514:	ldr.w	ip, [sp, #4]
      m_id = id;
    2518:	str.w	r5, [lr, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    251c:	strb.w	r8, [lr]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2520:	str.w	r6, [lr, #20]
    2524:	str.w	r4, [lr, #16]
      m_pin = pin;
    2528:	movs	r5, #16
    252a:	mov.w	r8, #17
    252e:	mov.w	lr, #18
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    2532:	str	r6, [r7, #20]
    2534:	str	r4, [r7, #16]
      m_pin = pin;
      m_knobType = knobType;
    2536:	strb.w	fp, [r7, #24]
      m_id = id;
    253a:	str.w	fp, [r7, #12]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    253e:	str	r6, [r0, #20]
    2540:	str	r4, [r0, #16]
      m_pin = pin;
      m_knobType = knobType;
    2542:	strb.w	sl, [r0, #24]
      m_id = id;
    2546:	str.w	sl, [r0, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    254a:	strb	r5, [r0, #0]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    254c:	str	r6, [r1, #20]
    254e:	str	r4, [r1, #16]
      m_pin = pin;
      m_knobType = knobType;
    2550:	strb.w	ip, [r1, #24]
      m_id = id;
    2554:	str.w	ip, [r1, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    2558:	strb.w	r8, [r1]
    Sequence &m_sequence;
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
    255c:	str	r6, [r2, #20]
    255e:	str	r4, [r2, #16]
      m_pin = pin;
      m_knobType = knobType;
    2560:	strb.w	r9, [r2, #24]
      m_id = id;
    2564:	str.w	r9, [r2, #12]
    Transport &m_transport;
    Knobs m_knobType;
  
  public:
    Knob (uint8_t pin, Sequence& sequence, Transport& transport, Knobs knobType, int id): m_sequence(sequence), m_transport(transport) {
      m_pin = pin;
    2568:	strb.w	lr, [r2]
  knob1.check();
  knob2.check();
  knob3.check();
  knob4.check();
  knob5.check();
}
    256c:	add	sp, #12
    256e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2572:	nop
    2574:	.word	0x1fff1884
    2578:	.word	0x1fff175c
    257c:	.word	0x1fff0c50
    2580:	.word	0x1fff189c
    2584:	.word	0x1fff18b4
    2588:	.word	0x1fff18cc
    258c:	.word	0x1fff15d8
    2590:	.word	0x1fff15f0
    2594:	.word	0x1fff1794
    2598:	.word	0x1fff17a8
    259c:	.word	0x1fff17bc
    25a0:	.word	0x1fff17d0
    25a4:	.word	0x1fff0c40
    25a8:	.word	0x000056b8
    25ac:	.word	0x1fff1870
    25b0:	.word	0x1fff0c70
    25b4:	.word	0x1fff160c
    25b8:	.word	0x1fff1644
    25bc:	.word	0x1fff167c
    25c0:	.word	0x1fff16b4
    25c4:	.word	0x1fff16ec
    25c8:	.word	0x1fff1800
    25cc:	.word	0x1fff181c
    25d0:	.word	0x1fff1838
    25d4:	.word	0x1fff1854
    25d8:	.word	0x1fff1608
    25dc:	.word	0x1fff1724
    25e0:	.word	0x1fff17e4

000025e4 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    25e4:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    25e6:	ldr	r5, [pc, #60]	; (2624 <usb_serial_getchar+0x40>)
    25e8:	ldr	r0, [r5, #0]
    25ea:	cbz	r0, 260c <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    25ec:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    25ee:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    25f0:	adds	r1, r0, r3
    25f2:	adds	r3, #1
	if (i >= rx_packet->len) {
    25f4:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    25f6:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    25f8:	bcs.n	2600 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    25fa:	strh	r3, [r0, #2]
	}
	return c;
    25fc:	mov	r0, r4
}
    25fe:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    2600:	bl	3490 <usb_free>
		rx_packet = NULL;
    2604:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    2606:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    2608:	str	r3, [r5, #0]
    260a:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    260c:	ldr	r3, [pc, #24]	; (2628 <usb_serial_getchar+0x44>)
    260e:	ldrb	r3, [r3, #0]
    2610:	cbz	r3, 261e <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    2612:	movs	r0, #2
    2614:	bl	34dc <usb_rx>
    2618:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    261a:	cmp	r0, #0
    261c:	bne.n	25ec <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    261e:	mov.w	r0, #4294967295
    2622:	pop	{r3, r4, r5, pc}
    2624:	.word	0x1fff18f0
    2628:	.word	0x1fff1a50

0000262c <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    262c:	push	{r4, lr}
	if (!rx_packet) {
    262e:	ldr	r4, [pc, #36]	; (2654 <usb_serial_peekchar+0x28>)
    2630:	ldr	r0, [r4, #0]
    2632:	cbz	r0, 263c <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    2634:	ldrh	r3, [r0, #2]
    2636:	add	r0, r3
    2638:	ldrb	r0, [r0, #8]
}
    263a:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    263c:	ldr	r3, [pc, #24]	; (2658 <usb_serial_peekchar+0x2c>)
    263e:	ldrb	r3, [r3, #0]
    2640:	cbz	r3, 264e <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    2642:	movs	r0, #2
    2644:	bl	34dc <usb_rx>
    2648:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    264a:	cmp	r0, #0
    264c:	bne.n	2634 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    264e:	mov.w	r0, #4294967295
    2652:	pop	{r4, pc}
    2654:	.word	0x1fff18f0
    2658:	.word	0x1fff1a50

0000265c <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    265c:	ldr	r3, [pc, #16]	; (2670 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    265e:	ldr	r2, [pc, #20]	; (2674 <usb_serial_available+0x18>)
    2660:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    2662:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    2664:	cbz	r3, 266e <usb_serial_available+0x12>
    2666:	ldrh	r2, [r3, #0]
    2668:	ldrh	r3, [r3, #2]
    266a:	subs	r3, r2, r3
    266c:	add	r0, r3
	return count;
}
    266e:	bx	lr
    2670:	.word	0x1fff18f0
    2674:	.word	0x1fff1ee4

00002678 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    2678:	ldr	r3, [pc, #44]	; (26a8 <usb_serial_flush_input+0x30>)
    267a:	ldrb	r3, [r3, #0]
    267c:	cbz	r3, 26a6 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    267e:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    2680:	ldr	r4, [pc, #40]	; (26ac <usb_serial_flush_input+0x34>)
    2682:	ldr	r0, [r4, #0]
    2684:	cbz	r0, 269a <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    2686:	bl	3490 <usb_free>
		rx_packet = NULL;
    268a:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    268c:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    268e:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    2690:	bl	34dc <usb_rx>
		if (!rx) break;
    2694:	cbz	r0, 26a4 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    2696:	bl	3490 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    269a:	movs	r0, #2
    269c:	bl	34dc <usb_rx>
		if (!rx) break;
    26a0:	cmp	r0, #0
    26a2:	bne.n	2696 <usb_serial_flush_input+0x1e>
    26a4:	pop	{r4, pc}
    26a6:	bx	lr
    26a8:	.word	0x1fff1a50
    26ac:	.word	0x1fff18f0

000026b0 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    26b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    26b4:	ldr.w	r9, [pc, #248]	; 27b0 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    26b8:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    26ba:	movs	r2, #1
    26bc:	strb.w	r2, [r9]
	while (size > 0) {
    26c0:	str	r1, [sp, #4]
    26c2:	cbz	r1, 2720 <usb_serial_write+0x70>
    26c4:	ldr.w	r8, [pc, #236]	; 27b4 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    26c8:	ldr	r7, [pc, #212]	; (27a0 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    26ca:	ldr	r6, [sp, #4]
    26cc:	mov	fp, r0
		if (!tx_packet) {
    26ce:	ldr.w	r0, [r8]
    26d2:	cbz	r0, 2742 <usb_serial_write+0x92>
    26d4:	ldr	r5, [pc, #204]	; (27a4 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    26d6:	ldrh	r4, [r0, #2]
    26d8:	rsb	r1, r4, #64	; 0x40
    26dc:	cmp	r1, r6
    26de:	it	cs
    26e0:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    26e2:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    26e6:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    26e8:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    26ec:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    26ee:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    26f0:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    26f4:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    26f8:	cbz	r1, 2710 <usb_serial_write+0x60>
    26fa:	subs	r4, #1
    26fc:	add	r2, r4
    26fe:	add	r1, fp
    2700:	ldrb.w	r4, [fp], #1
    2704:	strb.w	r4, [r2, #1]!
    2708:	cmp	fp, r1
    270a:	bne.n	2700 <usb_serial_write+0x50>
    270c:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    2710:	cmp.w	lr, #63	; 0x3f
    2714:	bhi.n	272e <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    2716:	ldr	r2, [pc, #144]	; (27a8 <usb_serial_write+0xf8>)
    2718:	movs	r1, #5
    271a:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    271c:	cmp	r6, #0
    271e:	bne.n	26ce <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    2720:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    2722:	movs	r3, #0
    2724:	strb.w	r3, [r9]
	return ret;
}
    2728:	add	sp, #12
    272a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    272e:	movs	r2, #64	; 0x40
    2730:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2732:	mov	r1, r0
    2734:	movs	r0, #3
    2736:	bl	362c <usb_tx>
			tx_packet = NULL;
    273a:	movs	r2, #0
    273c:	str.w	r2, [r8]
    2740:	b.n	2716 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    2742:	ldrb	r2, [r7, #0]
    2744:	cbz	r2, 2790 <usb_serial_write+0xe0>
    2746:	ldr	r4, [pc, #100]	; (27ac <usb_serial_write+0xfc>)
    2748:	ldr	r5, [pc, #88]	; (27a4 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    274a:	mov.w	sl, #1
    274e:	b.n	2760 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2750:	subs	r4, #1
    2752:	beq.n	2782 <usb_serial_write+0xd2>
    2754:	ldrb	r2, [r5, #0]
    2756:	cbnz	r2, 2782 <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    2758:	bl	4130 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    275c:	ldrb	r2, [r7, #0]
    275e:	cbz	r2, 2790 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2760:	movs	r0, #3
    2762:	bl	3518 <usb_tx_packet_count>
    2766:	cmp	r0, #7
    2768:	bhi.n	2750 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    276a:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    276e:	bl	3450 <usb_malloc>
    2772:	str.w	r0, [r8]
					if (tx_packet) break;
    2776:	cmp	r0, #0
    2778:	bne.n	26d6 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    277a:	ldr	r3, [pc, #52]	; (27b0 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    277c:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    277e:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2780:	bne.n	2754 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    2782:	movs	r3, #1
					return -1;
    2784:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    2788:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    278a:	add	sp, #12
    278c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    2790:	movs	r3, #0
					return -1;
    2792:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    2796:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    279a:	add	sp, #12
    279c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27a0:	.word	0x1fff1a50
    27a4:	.word	0x1fff18ec
    27a8:	.word	0x1fff18e4
    27ac:	.word	0x00014821
    27b0:	.word	0x1fff18e5
    27b4:	.word	0x1fff18e8

000027b8 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    27b8:	push	{lr}
    27ba:	sub	sp, #12
    27bc:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    27be:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    27c0:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    27c4:	mov	r0, r3
    27c6:	bl	26b0 <usb_serial_write>
}
    27ca:	add	sp, #12
    27cc:	ldr.w	pc, [sp], #4

000027d0 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    27d0:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    27d2:	ldr	r5, [pc, #56]	; (280c <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    27d4:	ldr	r4, [pc, #56]	; (2810 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    27d6:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    27d8:	movs	r3, #1
    27da:	strb	r3, [r4, #0]
	if (!tx_packet) {
    27dc:	cbz	r0, 27ea <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    27de:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    27e0:	movs	r3, #0
    27e2:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    27e4:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    27e8:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    27ea:	ldr	r3, [pc, #40]	; (2814 <usb_serial_write_buffer_free+0x44>)
    27ec:	ldrb	r3, [r3, #0]
    27ee:	cbnz	r3, 27f6 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    27f0:	movs	r0, #0
    27f2:	strb	r0, [r4, #0]
			return 0;
    27f4:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    27f6:	movs	r0, #3
    27f8:	bl	3518 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    27fc:	cmp	r0, #7
    27fe:	bhi.n	27f0 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    2800:	bl	3450 <usb_malloc>
    2804:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    2806:	cmp	r0, #0
    2808:	bne.n	27de <usb_serial_write_buffer_free+0xe>
    280a:	b.n	27f0 <usb_serial_write_buffer_free+0x20>
    280c:	.word	0x1fff18e8
    2810:	.word	0x1fff18e5
    2814:	.word	0x1fff1a50

00002818 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    2818:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    281a:	ldr	r3, [pc, #68]	; (2860 <usb_serial_flush_output+0x48>)
    281c:	ldrb	r3, [r3, #0]
    281e:	cbz	r3, 2844 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    2820:	ldr	r6, [pc, #64]	; (2864 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    2822:	ldr	r5, [pc, #68]	; (2868 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    2824:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    2826:	movs	r7, #1
    2828:	strb	r7, [r5, #0]
	if (tx_packet) {
    282a:	cbz	r4, 2846 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    282c:	ldr	r2, [pc, #60]	; (286c <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    282e:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    2830:	movs	r7, #0
    2832:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2834:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    2836:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2838:	movs	r0, #3
    283a:	bl	362c <usb_tx>
		tx_packet = NULL;
    283e:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    2840:	movs	r3, #0
    2842:	strb	r3, [r5, #0]
    2844:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    2846:	bl	3450 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    284a:	ldr	r3, [pc, #32]	; (286c <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    284c:	cbz	r0, 285a <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    284e:	mov	r1, r0
    2850:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    2852:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    2854:	bl	362c <usb_tx>
    2858:	b.n	2840 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    285a:	strb	r7, [r3, #0]
    285c:	b.n	2840 <usb_serial_flush_output+0x28>
    285e:	nop
    2860:	.word	0x1fff1a50
    2864:	.word	0x1fff18e8
    2868:	.word	0x1fff18e5
    286c:	.word	0x1fff18e4

00002870 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    2870:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    2872:	ldr	r3, [pc, #56]	; (28ac <usb_serial_flush_callback+0x3c>)
    2874:	ldrb	r3, [r3, #0]
    2876:	cbnz	r3, 2896 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    2878:	ldr	r4, [pc, #52]	; (28b0 <usb_serial_flush_callback+0x40>)
    287a:	ldr	r1, [r4, #0]
    287c:	cbz	r1, 2898 <usb_serial_flush_callback+0x28>
    287e:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    2882:	ldrh	r3, [r1, #2]
    2884:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2886:	movs	r0, #3
    2888:	bl	362c <usb_tx>
		tx_packet = NULL;
    288c:	str	r5, [r4, #0]
    288e:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    2890:	ldr	r3, [pc, #32]	; (28b4 <usb_serial_flush_callback+0x44>)
    2892:	movs	r2, #1
    2894:	strb	r2, [r3, #0]
    2896:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    2898:	bl	3450 <usb_malloc>
		if (tx) {
    289c:	cmp	r0, #0
    289e:	beq.n	2890 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    28a0:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    28a2:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    28a6:	movs	r0, #3
    28a8:	b.w	362c <usb_tx>
    28ac:	.word	0x1fff18e5
    28b0:	.word	0x1fff18e8
    28b4:	.word	0x1fff18e4

000028b8 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    28b8:	ldr	r2, [pc, #220]	; (2998 <wait_for_cal+0xe0>)
    28ba:	ldr	r1, [pc, #224]	; (299c <wait_for_cal+0xe4>)
    28bc:	ldr	r3, [r2, #0]
    28be:	lsls	r3, r3, #24
    28c0:	bmi.n	28bc <wait_for_cal+0x4>
    28c2:	ldr	r3, [r1, #0]
    28c4:	ands.w	r3, r3, #128	; 0x80
    28c8:	bne.n	28bc <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    28ca:	cpsid	i
	if (calibrating) {
    28cc:	ldr	r1, [pc, #208]	; (29a0 <wait_for_cal+0xe8>)
    28ce:	ldrb	r2, [r1, #0]
    28d0:	cmp	r2, #0
    28d2:	beq.n	2994 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    28d4:	ldr	r2, [pc, #204]	; (29a4 <wait_for_cal+0xec>)
    28d6:	ldr	r0, [pc, #208]	; (29a8 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    28d8:	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    28da:	ldr	r4, [pc, #208]	; (29ac <wait_for_cal+0xf4>)
    28dc:	ldr	r7, [r2, #0]
    28de:	ldr	r6, [r0, #0]
    28e0:	ldr	r5, [r4, #0]
    28e2:	ldr	r4, [r2, #12]
    28e4:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    28e6:	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    28e8:	adds	r2, #20
    28ea:	ldr	r0, [r0, #0]
    28ec:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    28ee:	ldr	r7, [pc, #192]	; (29b0 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    28f0:	add	r5, r6
    28f2:	add	r4, r5
    28f4:	add	r0, r4
    28f6:	add	r2, r0
    28f8:	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    28fc:	ldr	r6, [pc, #180]	; (29b4 <wait_for_cal+0xfc>)
    28fe:	ldr	r0, [pc, #184]	; (29b8 <wait_for_cal+0x100>)
    2900:	ldr	r5, [pc, #184]	; (29bc <wait_for_cal+0x104>)
    2902:	ldr	r4, [pc, #188]	; (29c0 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    2904:	orr.w	r2, r2, #32768	; 0x8000
    2908:	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    290a:	ldr	r7, [r6, #0]
    290c:	ldr	r6, [r0, #0]
    290e:	ldr	r5, [r5, #0]
    2910:	ldr	r2, [pc, #176]	; (29c4 <wait_for_cal+0x10c>)
    2912:	ldr	r4, [r4, #0]
    2914:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2916:	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2918:	ldr	r0, [r0, #0]
    291a:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    291c:	ldr	r7, [pc, #168]	; (29c8 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    291e:	add	r5, r6
    2920:	add	r4, r5
    2922:	add	r0, r4
    2924:	add	r2, r0
    2926:	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    292a:	ldr	r6, [pc, #160]	; (29cc <wait_for_cal+0x114>)
    292c:	ldr	r0, [pc, #160]	; (29d0 <wait_for_cal+0x118>)
    292e:	ldr	r5, [pc, #164]	; (29d4 <wait_for_cal+0x11c>)
    2930:	ldr	r4, [pc, #164]	; (29d8 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    2932:	orr.w	r2, r2, #32768	; 0x8000
    2936:	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2938:	ldr	r7, [r6, #0]
    293a:	ldr	r6, [r0, #0]
    293c:	ldr	r5, [r5, #0]
    293e:	ldr	r2, [pc, #156]	; (29dc <wait_for_cal+0x124>)
    2940:	ldr	r4, [r4, #0]
    2942:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2944:	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    2946:	ldr	r0, [r0, #0]
    2948:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    294a:	ldr	r7, [pc, #148]	; (29e0 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    294c:	add	r5, r6
    294e:	add	r4, r5
    2950:	add	r0, r4
    2952:	add	r2, r0
    2954:	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2958:	ldr	r6, [pc, #136]	; (29e4 <wait_for_cal+0x12c>)
    295a:	ldr	r0, [pc, #140]	; (29e8 <wait_for_cal+0x130>)
    295c:	ldr	r5, [pc, #140]	; (29ec <wait_for_cal+0x134>)
    295e:	ldr	r4, [pc, #144]	; (29f0 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    2960:	orr.w	r2, r2, #32768	; 0x8000
    2964:	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2966:	ldr	r7, [r6, #0]
    2968:	ldr	r6, [r0, #0]
    296a:	ldr	r5, [r5, #0]
    296c:	ldr	r2, [pc, #132]	; (29f4 <wait_for_cal+0x13c>)
    296e:	ldr	r4, [r4, #0]
    2970:	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2972:	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2974:	ldr	r0, [r0, #0]
    2976:	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    2978:	add	r5, r6
    297a:	add	r4, r5
    297c:	add	r0, r4
    297e:	add	r2, r0
    2980:	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    2984:	ldr	r0, [pc, #112]	; (29f8 <wait_for_cal+0x140>)
    2986:	orr.w	r2, r2, #32768	; 0x8000
    298a:	str	r2, [r0, #0]
#endif
		calibrating = 0;
    298c:	strb	r3, [r1, #0]
	}
	__enable_irq();
    298e:	cpsie	i
}
    2990:	pop	{r4, r5, r6, r7}
    2992:	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    2994:	cpsie	i
    2996:	bx	lr
    2998:	.word	0x4003b024
    299c:	.word	0x400bb024
    29a0:	.word	0x1fff18f6
    29a4:	.word	0x4003b038
    29a8:	.word	0x4003b03c
    29ac:	.word	0x4003b040
    29b0:	.word	0x4003b02c
    29b4:	.word	0x4003b058
    29b8:	.word	0x4003b05c
    29bc:	.word	0x4003b060
    29c0:	.word	0x4003b064
    29c4:	.word	0x4003b06c
    29c8:	.word	0x4003b030
    29cc:	.word	0x400bb038
    29d0:	.word	0x400bb03c
    29d4:	.word	0x400bb040
    29d8:	.word	0x400bb044
    29dc:	.word	0x400bb04c
    29e0:	.word	0x400bb02c
    29e4:	.word	0x400bb058
    29e8:	.word	0x400bb05c
    29ec:	.word	0x400bb060
    29f0:	.word	0x400bb064
    29f4:	.word	0x400bb06c
    29f8:	.word	0x400bb030

000029fc <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    29fc:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    29fe:	ldr	r0, [pc, #164]	; (2aa4 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2a00:	ldr	r2, [pc, #164]	; (2aa8 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    2a02:	ldr	r3, [pc, #168]	; (2aac <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2a04:	ldr	r5, [pc, #168]	; (2ab0 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2a06:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2a08:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2a0a:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2a0c:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    2a0e:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2a10:	ldr	r4, [pc, #160]	; (2ab4 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    2a12:	cmp	r3, #8
    2a14:	beq.n	2a78 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2a16:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2a18:	ldr	r0, [pc, #156]	; (2ab8 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2a1a:	ldr	r1, [pc, #160]	; (2abc <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2a1c:	beq.n	2a8e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    2a1e:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    2a20:	ite	eq
    2a22:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2a24:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2a26:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2a28:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2a2a:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2a2c:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2a2e:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2a30:	ldr	r3, [pc, #140]	; (2ac0 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2a32:	ldr	r1, [pc, #144]	; (2ac4 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2a34:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2a36:	ldr	r2, [pc, #144]	; (2ac8 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2a38:	cbz	r3, 2a6a <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2a3a:	movs	r3, #1
    2a3c:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2a3e:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2a40:	ldr	r3, [pc, #136]	; (2acc <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2a42:	ldr	r1, [pc, #140]	; (2ad0 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2a44:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2a46:	ldr	r2, [pc, #140]	; (2ad4 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    2a48:	cmp	r3, #1
    2a4a:	bls.n	2a9a <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2a4c:	cmp	r3, #4
    2a4e:	bls.n	2a70 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    2a50:	cmp	r3, #8
    2a52:	bls.n	2a92 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2a54:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2a56:	ite	ls
    2a58:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2a5a:	movhi	r3, #135	; 0x87
    2a5c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2a5e:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    2a60:	ldr	r3, [pc, #116]	; (2ad8 <analog_init+0xdc>)
    2a62:	movs	r2, #1
    2a64:	strb	r2, [r3, #0]
}
    2a66:	pop	{r4, r5}
    2a68:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2a6a:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2a6c:	str	r3, [r2, #0]
    2a6e:	b.n	2a40 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2a70:	movs	r3, #132	; 0x84
    2a72:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2a74:	str	r3, [r2, #0]
    2a76:	b.n	2a60 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2a78:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2a7c:	ldr	r1, [pc, #60]	; (2abc <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2a7e:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2a80:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2a82:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2a84:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2a86:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2a88:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2a8a:	str	r3, [r1, #0]
    2a8c:	b.n	2a30 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2a8e:	movs	r2, #57	; 0x39
    2a90:	b.n	2a82 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2a92:	movs	r3, #133	; 0x85
    2a94:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2a96:	str	r3, [r2, #0]
    2a98:	b.n	2a60 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2a9a:	movs	r3, #128	; 0x80
    2a9c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2a9e:	str	r3, [r2, #0]
    2aa0:	b.n	2a60 <analog_init+0x64>
    2aa2:	nop
    2aa4:	.word	0x40074000
    2aa8:	.word	0x40074001
    2aac:	.word	0x1fff0c68
    2ab0:	.word	0x4003b008
    2ab4:	.word	0x4003b00c
    2ab8:	.word	0x400bb008
    2abc:	.word	0x400bb00c
    2ac0:	.word	0x1fff18f9
    2ac4:	.word	0x4003b020
    2ac8:	.word	0x400bb020
    2acc:	.word	0x1fff0c69
    2ad0:	.word	0x4003b024
    2ad4:	.word	0x400bb024
    2ad8:	.word	0x1fff18f6

00002adc <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2adc:	cmp	r0, #71	; 0x47
    2ade:	bhi.n	2b40 <analogRead+0x64>
	channel = pin2sc1a[pin];
    2ae0:	ldr	r3, [pc, #204]	; (2bb0 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    2ae2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    2ae6:	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    2ae8:	cmp	r6, #255	; 0xff
    2aea:	beq.n	2b44 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    2aec:	ldr	r3, [pc, #196]	; (2bb4 <analogRead+0xd8>)
    2aee:	ldrb	r3, [r3, #0]
    2af0:	cmp	r3, #0
    2af2:	bne.n	2b4a <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2af4:	lsls	r2, r6, #24
    2af6:	bmi.n	2b52 <analogRead+0x76>
#endif

	__disable_irq();
    2af8:	cpsid	i
    2afa:	ldr	r5, [pc, #188]	; (2bb8 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2afc:	ldr	r4, [pc, #188]	; (2bbc <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    2afe:	mov	r7, r5
    2b00:	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2b02:	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    2b04:	strb	r3, [r5, #0]
	__enable_irq();
    2b06:	cpsie	i
	while (1) {
		__disable_irq();
    2b08:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2b0a:	ldr	r3, [r4, #0]
    2b0c:	lsls	r3, r3, #24
    2b0e:	bmi.n	2b2a <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    2b10:	ldrb	r3, [r7, #0]
    2b12:	cbnz	r3, 2b1c <analogRead+0x40>
    2b14:	b.n	2b00 <analogRead+0x24>
    2b16:	ldrb	r3, [r5, #0]
    2b18:	cmp	r3, #0
    2b1a:	beq.n	2b00 <analogRead+0x24>
		__enable_irq();
    2b1c:	cpsie	i
		yield();
    2b1e:	bl	4130 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2b22:	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2b24:	ldr	r3, [r4, #0]
    2b26:	lsls	r0, r3, #24
    2b28:	bpl.n	2b16 <analogRead+0x3a>
			result = ADC0_RA;
    2b2a:	ldr	r3, [pc, #148]	; (2bc0 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    2b2c:	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    2b2e:	movs	r2, #0
    2b30:	strb	r2, [r5, #0]
			__enable_irq();
    2b32:	cpsie	i
			result >>= analog_right_shift;
    2b34:	ldr	r2, [pc, #140]	; (2bc4 <analogRead+0xe8>)
    2b36:	ldrb	r0, [r2, #0]
    2b38:	asr.w	r0, r3, r0
			return result;
    2b3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2b40:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2b42:	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2b44:	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2b46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    2b4a:	bl	28b8 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2b4e:	lsls	r2, r6, #24
    2b50:	bpl.n	2af8 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    2b52:	cpsid	i
    2b54:	ldr	r5, [pc, #112]	; (2bc8 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2b56:	ldr.w	r8, [pc, #124]	; 2bd4 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    2b5a:	ldr	r4, [pc, #112]	; (2bcc <analogRead+0xf0>)
    2b5c:	and.w	r7, r6, #64	; 0x40
    2b60:	uxtb	r7, r7
    2b62:	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2b66:	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    2b6a:	cbz	r7, 2ba4 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2b6c:	bic.w	r3, r3, #16
    2b70:	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    2b74:	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    2b76:	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    2b78:	ldr	r2, [pc, #76]	; (2bc8 <analogRead+0xec>)
    2b7a:	strb	r3, [r5, #0]
	__enable_irq();
    2b7c:	cpsie	i
	while (1) {
		__disable_irq();
    2b7e:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2b80:	ldr	r3, [r4, #0]
    2b82:	lsls	r1, r3, #24
    2b84:	bmi.n	2ba0 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    2b86:	ldrb	r3, [r2, #0]
    2b88:	cbnz	r3, 2b92 <analogRead+0xb6>
    2b8a:	b.n	2b66 <analogRead+0x8a>
    2b8c:	ldrb	r3, [r5, #0]
    2b8e:	cmp	r3, #0
    2b90:	beq.n	2b66 <analogRead+0x8a>
		__enable_irq();
    2b92:	cpsie	i
		yield();
    2b94:	bl	4130 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2b98:	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    2b9a:	ldr	r3, [r4, #0]
    2b9c:	lsls	r3, r3, #24
    2b9e:	bpl.n	2b8c <analogRead+0xb0>
			result = ADC1_RA;
    2ba0:	ldr	r3, [pc, #44]	; (2bd0 <analogRead+0xf4>)
    2ba2:	b.n	2b2c <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    2ba4:	orr.w	r3, r3, #16
    2ba8:	str.w	r3, [r8]
    2bac:	b.n	2b74 <analogRead+0x98>
    2bae:	nop
    2bb0:	.word	0x000056c8
    2bb4:	.word	0x1fff18f6
    2bb8:	.word	0x1fff18f8
    2bbc:	.word	0x4003b000
    2bc0:	.word	0x4003b010
    2bc4:	.word	0x1fff18f5
    2bc8:	.word	0x1fff18f7
    2bcc:	.word	0x400bb000
    2bd0:	.word	0x400bb010
    2bd4:	.word	0x400bb00c

00002bd8 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    2bd8:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    2bda:	ldr	r3, [pc, #68]	; (2c20 <digitalWrite.part.1+0x48>)
    2bdc:	ldr.w	r2, [r3, r0, lsl #3]
    2be0:	ldrb.w	r4, [r2, #640]	; 0x280
    2be4:	cbz	r4, 2bf4 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    2be6:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    2be8:	cbz	r1, 2c0a <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    2bea:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2bee:	ldr.w	r4, [sp], #4
    2bf2:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    2bf4:	add.w	r3, r3, r0, lsl #3
    2bf8:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2bfa:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    2bfc:	cbnz	r1, 2c14 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    2bfe:	bic.w	r2, r2, #2
    2c02:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2c04:	ldr.w	r4, [sp], #4
    2c08:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    2c0a:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2c0e:	ldr.w	r4, [sp], #4
    2c12:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2c14:	orr.w	r2, r2, #3
    2c18:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2c1a:	ldr.w	r4, [sp], #4
    2c1e:	bx	lr
    2c20:	.word	0x00005710

00002c24 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2c24:	ldr	r2, [pc, #112]	; (2c98 <pinMode.part.2+0x74>)
    2c26:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2c2a:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2c2c:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2c2e:	beq.n	2c54 <pinMode.part.2+0x30>
    2c30:	cmp	r1, #4
    2c32:	beq.n	2c6c <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2c34:	ldr.w	r0, [r2, r0, lsl #3]
    2c38:	movs	r2, #0
    2c3a:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    2c3e:	cbz	r1, 2c4c <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2c40:	cmp	r1, #2
    2c42:	beq.n	2c86 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2c44:	cmp	r1, #3
    2c46:	beq.n	2c8e <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2c48:	str	r2, [r3, #0]
    2c4a:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2c4c:	mov.w	r2, #256	; 0x100
    2c50:	str	r2, [r3, #0]
    2c52:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2c54:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2c58:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2c5c:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2c60:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2c62:	ldr	r2, [r3, #0]
    2c64:	bic.w	r2, r2, #32
    2c68:	str	r2, [r3, #0]
    2c6a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2c6c:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2c70:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2c74:	movs	r0, #1
    2c76:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2c7a:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    2c7c:	ldr	r2, [r3, #0]
    2c7e:	orr.w	r2, r2, #32
    2c82:	str	r2, [r3, #0]
    2c84:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    2c86:	movw	r2, #259	; 0x103
    2c8a:	str	r2, [r3, #0]
    2c8c:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    2c8e:	mov.w	r2, #258	; 0x102
    2c92:	str	r2, [r3, #0]
    2c94:	bx	lr
    2c96:	nop
    2c98:	.word	0x00005710

00002c9c <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    2c9c:	push	{r4, r5}
	RTC_SR = 0;
    2c9e:	ldr	r3, [pc, #20]	; (2cb4 <rtc_set+0x18>)
	RTC_TPR = 0;
    2ca0:	ldr	r5, [pc, #20]	; (2cb8 <rtc_set+0x1c>)
	RTC_TSR = t;
    2ca2:	ldr	r4, [pc, #24]	; (2cbc <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2ca4:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    2ca6:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2ca8:	str	r2, [r3, #0]
	RTC_TPR = 0;
    2caa:	str	r2, [r5, #0]
	RTC_TSR = t;
    2cac:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    2cae:	str	r1, [r3, #0]
}
    2cb0:	pop	{r4, r5}
    2cb2:	bx	lr
    2cb4:	.word	0x4003d014
    2cb8:	.word	0x4003d004
    2cbc:	.word	0x4003d000

00002cc0 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    2cc0:	cmp	r0, #63	; 0x3f
    2cc2:	bhi.n	2cc8 <digitalWrite+0x8>
    2cc4:	b.w	2bd8 <digitalWrite.part.1>
    2cc8:	bx	lr
    2cca:	nop

00002ccc <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2ccc:	cmp	r0, #63	; 0x3f
    2cce:	bhi.n	2cde <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    2cd0:	ldr	r3, [pc, #16]	; (2ce4 <digitalRead+0x18>)
    2cd2:	ldr.w	r3, [r3, r0, lsl #3]
    2cd6:	ldrb.w	r0, [r3, #512]	; 0x200
    2cda:	uxtb	r0, r0
    2cdc:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2cde:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    2ce0:	bx	lr
    2ce2:	nop
    2ce4:	.word	0x00005710

00002ce8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    2ce8:	cmp	r0, #63	; 0x3f
    2cea:	bhi.n	2cf0 <pinMode+0x8>
    2cec:	b.w	2c24 <pinMode.part.2>
    2cf0:	bx	lr
    2cf2:	nop

00002cf4 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    2cf4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2cf8:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2cfa:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2cfc:	ldr	r7, [pc, #136]	; (2d88 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2cfe:	ldr	r3, [pc, #140]	; (2d8c <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2d00:	ldr	r2, [pc, #140]	; (2d90 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2d02:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2d04:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2d06:	ldr	r2, [r2, #0]
	__enable_irq();
    2d08:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2d0a:	lsls	r2, r2, #5
    2d0c:	bpl.n	2d14 <delay+0x20>
    2d0e:	cmp	r3, #50	; 0x32
    2d10:	it	hi
    2d12:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2d14:	cbz	r5, 2d84 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2d16:	rsb	r3, r3, #179200	; 0x2bc00
    2d1a:	addw	r3, r3, #799	; 0x31f
    2d1e:	ldr	r6, [pc, #116]	; (2d94 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2d20:	ldr.w	r9, [pc, #104]	; 2d8c <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2d24:	ldr.w	r8, [pc, #104]	; 2d90 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2d28:	lsrs	r3, r3, #2
    2d2a:	mov.w	r2, #1000	; 0x3e8
    2d2e:	umull	r1, r3, r6, r3
    2d32:	mul.w	r4, r2, r4
    2d36:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2d3a:	cpsid	i
	current = SYST_CVR;
    2d3c:	ldr.w	r1, [r9]
	count = systick_millis_count;
    2d40:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2d42:	ldr.w	lr, [r8]
	__enable_irq();
    2d46:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2d48:	rsb	r3, r1, #179200	; 0x2bc00
    2d4c:	addw	r3, r3, #799	; 0x31f
    2d50:	lsrs	r3, r3, #2
    2d52:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2d56:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2d5a:	rsb	r3, r4, r3, lsr #2
    2d5e:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2d62:	beq.n	2d6a <delay+0x76>
    2d64:	cmp	r1, #50	; 0x32
    2d66:	it	hi
    2d68:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2d6a:	mla	r3, r0, r2, r3
    2d6e:	cmp.w	r3, #1000	; 0x3e8
    2d72:	bcc.n	2d7e <delay+0x8a>
				ms--;
				if (ms == 0) return;
    2d74:	subs	r5, #1
    2d76:	beq.n	2d84 <delay+0x90>
				start += 1000;
    2d78:	add.w	r4, r4, #1000	; 0x3e8
    2d7c:	b.n	2d3a <delay+0x46>
			}
			yield();
    2d7e:	bl	4130 <yield>
		}
    2d82:	b.n	2d3a <delay+0x46>
    2d84:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2d88:	.word	0x1fff18fc
    2d8c:	.word	0xe000e018
    2d90:	.word	0xe000ed04
    2d94:	.word	0x16c16c17

00002d98 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    2d98:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2d9a:	ldr	r3, [pc, #312]	; (2ed4 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2d9c:	ldr	r0, [pc, #312]	; (2ed8 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    2d9e:	ldr.w	ip, [pc, #348]	; 2efc <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    2da2:	ldr	r4, [pc, #312]	; (2edc <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    2da4:	ldr	r1, [pc, #312]	; (2ee0 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2da6:	ldr.w	lr, [pc, #344]	; 2f00 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    2daa:	ldr	r6, [pc, #312]	; (2ee4 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    2dac:	ldr	r5, [pc, #312]	; (2ee8 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    2dae:	ldr	r7, [pc, #316]	; (2eec <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2db0:	mov.w	r2, #134217728	; 0x8000000
    2db4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    2db6:	mov.w	r2, #268435456	; 0x10000000
    2dba:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    2dbc:	mov.w	r2, #536870912	; 0x20000000
    2dc0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    2dc2:	mov.w	r2, #1073741824	; 0x40000000
    2dc6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    2dc8:	mov.w	r2, #2147483648	; 0x80000000
    2dcc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2dce:	movs	r2, #0
    2dd0:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2dd2:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2dd4:	movw	r0, #61439	; 0xefff
    2dd8:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2ddc:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    2de0:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2de2:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    2de6:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    2de8:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    2dea:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2dec:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    2df0:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    2df2:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    2df6:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2df8:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    2dfc:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2dfe:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    2e02:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2e06:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    2e0a:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2e0e:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    2e12:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2e14:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2e18:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2e1a:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2e1c:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    2e1e:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    2e22:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2e24:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2e26:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e28:	ldr	r4, [pc, #196]	; (2ef0 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    2e2a:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2e2c:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e2e:	movs	r1, #9
    2e30:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    2e32:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2e36:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2e3a:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2e3c:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2e3e:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    2e40:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    2e42:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2e44:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e46:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2e4a:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    2e4e:	add.w	r7, r7, #520192	; 0x7f000
    2e52:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2e54:	addw	r4, r4, #2044	; 0x7fc
    2e58:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2e5a:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2e5c:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    2e5e:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e60:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2e64:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    2e66:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    2e6a:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    2e6e:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2e70:	sub.w	r4, r4, #460800	; 0x70800
    2e74:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    2e78:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2e7a:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2e7c:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2e80:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2e82:	ldr	r0, [pc, #112]	; (2ef4 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2e84:	orr.w	r1, r1, #512	; 0x200
    2e88:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2e8a:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2e8c:	ldr	r4, [pc, #104]	; (2ef8 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    2e8e:	add.w	lr, lr, #65280	; 0xff00
    2e92:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    2e96:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    2e9a:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    2e9e:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2ea2:	orr.w	r1, r1, #33554432	; 0x2000000
    2ea6:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    2ea8:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    2eac:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2eb0:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    2eb2:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    2eb4:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    2eb6:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2eb8:	str	r2, [r4, #0]
#endif
	analog_init();
    2eba:	bl	29fc <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    2ebe:	movs	r0, #25
    2ec0:	bl	2cf4 <delay>
	usb_init();
    2ec4:	bl	4060 <usb_init>
	delay(275);
    2ec8:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    2ecc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    2ed0:	b.w	2cf4 <delay>
    2ed4:	.word	0xe000e104
    2ed8:	.word	0x40038004
    2edc:	.word	0x40038014
    2ee0:	.word	0x4003801c
    2ee4:	.word	0x40038024
    2ee8:	.word	0x4003802c
    2eec:	.word	0x40038034
    2ef0:	.word	0x40038000
    2ef4:	.word	0x40048004
    2ef8:	.word	0x400c9000
    2efc:	.word	0x40038008
    2f00:	.word	0x4003800c

00002f04 <sysex_byte>:
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2f04:	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2f06:	ldr	r3, [pc, #56]	; (2f40 <sysex_byte+0x3c>)
    2f08:	ldr	r4, [pc, #56]	; (2f44 <sysex_byte+0x40>)
    2f0a:	ldr	r3, [r3, #0]
    2f0c:	ldrh	r1, [r4, #0]
		tx_packet = NULL;
	}
}

void static sysex_byte(uint8_t b)
{
    2f0e:	mov	r5, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
    2f10:	cbz	r3, 2f36 <sysex_byte+0x32>
    2f12:	cmp.w	r1, #290	; 0x122
    2f16:	bcs.n	2f24 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2f18:	ldr	r2, [pc, #44]	; (2f48 <sysex_byte+0x44>)
    2f1a:	adds	r3, r1, #1
    2f1c:	strb	r5, [r2, r1]
    2f1e:	uxth	r3, r3
    2f20:	strh	r3, [r4, #0]
	}
}
    2f22:	pop	{r3, r4, r5, pc}

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2f24:	movs	r2, #0
    2f26:	ldr	r0, [pc, #32]	; (2f48 <sysex_byte+0x44>)
    2f28:	blx	r3
    2f2a:	movs	r1, #0
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2f2c:	ldr	r2, [pc, #24]	; (2f48 <sysex_byte+0x44>)
    2f2e:	strb	r5, [r2, r1]

void static sysex_byte(uint8_t b)
{
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
    2f30:	movs	r3, #1
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
    2f32:	strh	r3, [r4, #0]
	}
}
    2f34:	pop	{r3, r4, r5, pc}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
    2f36:	cmp.w	r1, #290	; 0x122
    2f3a:	bcc.n	2f18 <sysex_byte+0x14>
    2f3c:	pop	{r3, r4, r5, pc}
    2f3e:	nop
    2f40:	.word	0x1fff1924
    2f44:	.word	0x1fff1dba
    2f48:	.word	0x1fff1dc0

00002f4c <usb_midi_write_packed>:
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2f4c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
    2f50:	ldr	r6, [pc, #132]	; (2fd8 <usb_midi_write_packed+0x8c>)

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2f52:	ldr	r7, [pc, #136]	; (2fdc <usb_midi_write_packed+0x90>)
	if (!tx_packet) {
    2f54:	ldr	r1, [r6, #0]

void usb_midi_write_packed(uint32_t n)
{
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2f56:	movs	r3, #1
  #define TX_TIMEOUT (TX_TIMEOUT_MSEC * 262)
#endif


void usb_midi_write_packed(uint32_t n)
{
    2f58:	mov	r8, r0
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
    2f5a:	strb	r3, [r7, #0]
	if (!tx_packet) {
    2f5c:	cbz	r1, 2f8c <usb_midi_write_packed+0x40>
    2f5e:	ldr	r5, [pc, #128]	; (2fe0 <usb_midi_write_packed+0x94>)
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
    2f60:	ldrh	r3, [r1, #2]
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2f62:	add.w	r2, r1, r3, lsl #2
    2f66:	adds	r3, #1
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2f68:	movs	r4, #0
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2f6a:	cmp	r3, #15
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
    2f6c:	str.w	r8, [r2, #8]
                        	return;
                	}
                	yield();
        	}
	}
	transmit_previous_timeout = 0;
    2f70:	strb	r4, [r5, #0]
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
    2f72:	bhi.n	2f7e <usb_midi_write_packed+0x32>
		tx_packet->index = index;
    2f74:	strh	r3, [r1, #2]
	} else {
		tx_packet->len = MIDI_TX_SIZE;
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	}
	tx_noautoflush = 0;
    2f76:	movs	r3, #0
    2f78:	strb	r3, [r7, #0]
    2f7a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	index = tx_packet->index;
	((uint32_t *)(tx_packet->buf))[index++] = n;
	if (index < MIDI_TX_SIZE/4) {
		tx_packet->index = index;
	} else {
		tx_packet->len = MIDI_TX_SIZE;
    2f7e:	movs	r3, #64	; 0x40
    2f80:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    2f82:	movs	r0, #4
    2f84:	bl	362c <usb_tx>
		tx_packet = NULL;
    2f88:	str	r4, [r6, #0]
    2f8a:	b.n	2f76 <usb_midi_write_packed+0x2a>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2f8c:	ldr.w	r9, [pc, #84]	; 2fe4 <usb_midi_write_packed+0x98>
    2f90:	ldrb.w	r3, [r9]
    2f94:	cmp	r3, #0
    2f96:	beq.n	2f7a <usb_midi_write_packed+0x2e>
    2f98:	ldr	r5, [pc, #68]	; (2fe0 <usb_midi_write_packed+0x94>)
    2f9a:	movw	r4, #48001	; 0xbb81
    2f9e:	b.n	2fb2 <usb_midi_write_packed+0x66>
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
                        	tx_packet = usb_malloc();
                        	if (tx_packet) break;
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2fa0:	subs	r4, #1
    2fa2:	beq.n	2fca <usb_midi_write_packed+0x7e>
    2fa4:	ldrb	r3, [r5, #0]
    2fa6:	cbnz	r3, 2fca <usb_midi_write_packed+0x7e>
                        	transmit_previous_timeout = 1;
				//serial_print("error2\n");
                        	return;
                	}
                	yield();
    2fa8:	bl	4130 <yield>
	uint32_t index, wait_count=0;

	tx_noautoflush = 1;
	if (!tx_packet) {
        	while (1) {
                	if (!usb_configuration) {
    2fac:	ldrb.w	r3, [r9]
    2fb0:	cbz	r3, 2fd2 <usb_midi_write_packed+0x86>
				//serial_print("error1\n");
                        	return;
                	}
                	if (usb_tx_packet_count(MIDI_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2fb2:	movs	r0, #4
    2fb4:	bl	3518 <usb_tx_packet_count>
    2fb8:	cmp	r0, #5
    2fba:	bhi.n	2fa0 <usb_midi_write_packed+0x54>
                        	tx_packet = usb_malloc();
    2fbc:	bl	3450 <usb_malloc>
    2fc0:	mov	r1, r0
    2fc2:	str	r0, [r6, #0]
                        	if (tx_packet) break;
    2fc4:	cmp	r0, #0
    2fc6:	beq.n	2fa0 <usb_midi_write_packed+0x54>
    2fc8:	b.n	2f60 <usb_midi_write_packed+0x14>
                	}
                	if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
                        	transmit_previous_timeout = 1;
    2fca:	movs	r3, #1
    2fcc:	strb	r3, [r5, #0]
				//serial_print("error2\n");
                        	return;
    2fce:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2fd2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2fd6:	nop
    2fd8:	.word	0x1fff1940
    2fdc:	.word	0x1fff1914
    2fe0:	.word	0x1fff1944
    2fe4:	.word	0x1fff1a50

00002fe8 <usb_midi_flush_output>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

void usb_midi_flush_output(void)
{
    2fe8:	push	{r3, r4, r5, lr}
	if (tx_noautoflush == 0 && tx_packet && tx_packet->index > 0) {
    2fea:	ldr	r3, [pc, #32]	; (300c <usb_midi_flush_output+0x24>)
    2fec:	ldrb	r4, [r3, #0]
    2fee:	cbnz	r4, 2ffa <usb_midi_flush_output+0x12>
    2ff0:	ldr	r5, [pc, #28]	; (3010 <usb_midi_flush_output+0x28>)
    2ff2:	ldr	r1, [r5, #0]
    2ff4:	cbz	r1, 2ffa <usb_midi_flush_output+0x12>
    2ff6:	ldrh	r3, [r1, #2]
    2ff8:	cbnz	r3, 2ffc <usb_midi_flush_output+0x14>
    2ffa:	pop	{r3, r4, r5, pc}
		tx_packet->len = tx_packet->index * 4;
    2ffc:	lsls	r3, r3, #2
    2ffe:	strh	r3, [r1, #0]
		usb_tx(MIDI_TX_ENDPOINT, tx_packet);
    3000:	movs	r0, #4
    3002:	bl	362c <usb_tx>
		tx_packet = NULL;
    3006:	str	r4, [r5, #0]
    3008:	pop	{r3, r4, r5, pc}
    300a:	nop
    300c:	.word	0x1fff1914
    3010:	.word	0x1fff1940

00003014 <usb_midi_read>:
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    3014:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    3018:	ldr	r6, [pc, #692]	; (32d0 <usb_midi_read+0x2bc>)
    301a:	ldr	r3, [r6, #0]
	}
	return n;
}

int usb_midi_read(uint32_t channel)
{
    301c:	mov	r7, r0
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
    301e:	cmp	r3, #0
    3020:	beq.w	3148 <usb_midi_read+0x134>
    3024:	ldrh	r5, [r3, #0]
			usb_free(rx_packet);
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
    3026:	ldrh	r2, [r3, #2]
	n = ((uint32_t *)rx_packet->buf)[index/4];
    3028:	lsrs	r1, r2, #2
    302a:	add.w	r1, r3, r1, lsl #2
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
    302e:	adds	r2, #4
	if (index < rx_packet->len) {
    3030:	cmp	r2, r5
			rx_packet = NULL;
			return 0;
		}
	}
	index = rx_packet->index;
	n = ((uint32_t *)rx_packet->buf)[index/4];
    3032:	ldr	r4, [r1, #8]
	//serial_print("midi rx, n=");
	//serial_phex32(n);
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
    3034:	bcs.n	30bc <usb_midi_read+0xa8>
		rx_packet->index = index;
    3036:	strh	r2, [r3, #2]
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
    3038:	and.w	r6, r4, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    303c:	mov.w	r8, r4, lsr #8
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
    3040:	ldr	r1, [pc, #656]	; (32d4 <usb_midi_read+0x2c0>)
	if (type1 >= 0x08 && type1 <= 0x0E) {
    3042:	sub.w	r2, r6, #8
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    3046:	and.w	r0, r8, #15
	usb_midi_msg_cable = (n >> 4) & 15;
    304a:	ubfx	r3, r4, #4, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
    304e:	cmp	r2, #6
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
    3050:	add.w	r5, r0, #1
	usb_midi_msg_cable = (n >> 4) & 15;
    3054:	strb	r3, [r1, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
    3056:	bls.n	308e <usb_midi_read+0x7a>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    3058:	subs	r3, r6, #2
    305a:	cmp	r3, #1
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
    305c:	uxtb.w	r0, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    3060:	bls.n	3100 <usb_midi_read+0xec>
    3062:	cmp	r6, #5
    3064:	beq.n	30f8 <usb_midi_read+0xe4>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
    3066:	cmp	r6, #4
    3068:	beq.w	33b4 <usb_midi_read+0x3a0>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
    306c:	subs	r3, r6, #5
    306e:	cmp	r3, #2
    3070:	bls.n	3172 <usb_midi_read+0x15e>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
    3072:	cmp	r6, #15
    3074:	bne.n	3094 <usb_midi_read+0x80>
		if (b1 >= 0xF8) {
    3076:	cmp	r0, #247	; 0xf7
    3078:	bhi.n	3100 <usb_midi_read+0xec>
			// From Sebastian Tomczak, seb.tomczak at gmail.com
			// http://little-scale.blogspot.com/2011/08/usb-midi-game-boy-sync-for-16.html
			goto system_common_or_realtime;
		}
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
    307a:	cmp	r0, #240	; 0xf0
    307c:	beq.n	3084 <usb_midi_read+0x70>
    307e:	ldr	r3, [pc, #600]	; (32d8 <usb_midi_read+0x2c4>)
    3080:	ldrh	r3, [r3, #0]
    3082:	cbz	r3, 3094 <usb_midi_read+0x80>
			// From David Sorlien, dsorlien at gmail.com, http://axe4live.wordpress.com
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
    3084:	bl	2f04 <sysex_byte>
		}
	}
	return 0;
    3088:	movs	r0, #0
    308a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
	usb_midi_msg_cable = (n >> 4) & 15;
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
    308e:	cbz	r7, 309a <usb_midi_read+0x86>
    3090:	cmp	r5, r7
    3092:	beq.n	309a <usb_midi_read+0x86>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFF);
			}
			break;
		  default:
			return 0; // unknown message, ignore it
    3094:	movs	r0, #0
    3096:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    309a:	cmp	r6, #8
	} else {
		usb_free(rx_packet);
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
	}
	type1 = n & 15;
	type2 = (n >> 12) & 15;
    309c:	ubfx	r3, r4, #12, #4
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    30a0:	beq.w	31b2 <usb_midi_read+0x19e>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    30a4:	cmp	r6, #9
    30a6:	beq.n	30cc <usb_midi_read+0xb8>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
    30a8:	cmp	r6, #10
    30aa:	bne.w	31d6 <usb_midi_read+0x1c2>
    30ae:	cmp	r3, #10
    30b0:	bne.n	3094 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
    30b2:	ldr	r3, [pc, #552]	; (32dc <usb_midi_read+0x2c8>)
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    30b4:	ldr	r2, [pc, #552]	; (32e0 <usb_midi_read+0x2cc>)
			if (usb_midi_handleVelocityChange)
    30b6:	ldr	r3, [r3, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
    30b8:	movs	r1, #160	; 0xa0
    30ba:	b.n	31c0 <usb_midi_read+0x1ac>
	//serial_print("\n");
	index += 4;
	if (index < rx_packet->len) {
		rx_packet->index = index;
	} else {
		usb_free(rx_packet);
    30bc:	mov	r0, r3
    30be:	bl	3490 <usb_free>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    30c2:	movs	r0, #5
    30c4:	bl	34dc <usb_rx>
    30c8:	str	r0, [r6, #0]
    30ca:	b.n	3038 <usb_midi_read+0x24>
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
    30cc:	cmp	r3, #9
    30ce:	bne.n	3094 <usb_midi_read+0x80>
			if ((n >> 24) > 0) {
    30d0:	lsrs	r7, r4, #24
    30d2:	beq.w	33cc <usb_midi_read+0x3b8>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    30d6:	ldr	r3, [pc, #524]	; (32e4 <usb_midi_read+0x2d0>)
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    30d8:	ldr	r2, [pc, #516]	; (32e0 <usb_midi_read+0x2cc>)
				if (usb_midi_handleNoteOn)
    30da:	ldr	r3, [r3, #0]
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    30dc:	movs	r1, #144	; 0x90
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    30de:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
    30e2:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    30e4:	uxtb	r5, r5
    30e6:	uxtb	r4, r7
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x09 && type2 == 0x09) {
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
    30e8:	cmp	r3, #0
    30ea:	beq.w	3228 <usb_midi_read+0x214>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
    30ee:	mov	r2, r4
    30f0:	mov	r1, r6
    30f2:	mov	r0, r5
    30f4:	blx	r3
    30f6:	b.n	3228 <usb_midi_read+0x214>
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
    30f8:	cmp	r0, #240	; 0xf0
    30fa:	bls.n	3184 <usb_midi_read+0x170>
    30fc:	cmp	r0, #247	; 0xf7
    30fe:	beq.n	3184 <usb_midi_read+0x170>
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
    3100:	subs	r0, #241	; 0xf1
    3102:	cmp	r0, #14
    3104:	bhi.n	3094 <usb_midi_read+0x80>
    3106:	add	r3, pc, #4	; (adr r3, 310c <usb_midi_read+0xf8>)
    3108:	ldr.w	pc, [r3, r0, lsl #2]
    310c:	.word	0x000032c3
    3110:	.word	0x000032a7
    3114:	.word	0x00003295
    3118:	.word	0x00003095
    311c:	.word	0x00003095
    3120:	.word	0x00003287
    3124:	.word	0x00003095
    3128:	.word	0x00003367
    312c:	.word	0x00003095
    3130:	.word	0x00003331
    3134:	.word	0x0000334b
    3138:	.word	0x0000326f
    313c:	.word	0x00003095
    3140:	.word	0x00003257
    3144:	.word	0x0000323b
int usb_midi_read(uint32_t channel)
{
	uint32_t n, index, ch, type1, type2, b1;

	if (!rx_packet) {
		if (!usb_configuration) return 0;
    3148:	ldr	r3, [pc, #412]	; (32e8 <usb_midi_read+0x2d4>)
    314a:	ldrb	r3, [r3, #0]
    314c:	cmp	r3, #0
    314e:	beq.n	3094 <usb_midi_read+0x80>
		rx_packet = usb_rx(MIDI_RX_ENDPOINT);
    3150:	movs	r0, #5
    3152:	bl	34dc <usb_rx>
    3156:	mov	r3, r0
    3158:	str	r0, [r6, #0]
		if (!rx_packet) return 0;
    315a:	cmp	r0, #0
    315c:	beq.n	3094 <usb_midi_read+0x80>
		if (rx_packet->len == 0) {
    315e:	ldrh	r5, [r0, #0]
    3160:	cmp	r5, #0
    3162:	bne.w	3026 <usb_midi_read+0x12>
			usb_free(rx_packet);
    3166:	bl	3490 <usb_free>
			rx_packet = NULL;
    316a:	str	r5, [r6, #0]
			return 0;
    316c:	mov	r0, r5
    316e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
    3172:	bl	2f04 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
    3176:	ubfx	r0, r4, #16, #8
    317a:	bl	2f04 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
    317e:	cmp	r6, #7
    3180:	bne.n	3188 <usb_midi_read+0x174>
    3182:	lsrs	r0, r4, #24
    3184:	bl	2f04 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
    3188:	ldr	r3, [pc, #332]	; (32d8 <usb_midi_read+0x2c4>)
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    318a:	ldr	r2, [pc, #352]	; (32ec <usb_midi_read+0x2d8>)
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
    318c:	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
    318e:	ldr	r0, [pc, #352]	; (32f0 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
    3190:	ldr	r4, [r2, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    3192:	ldr	r5, [pc, #352]	; (32f4 <usb_midi_read+0x2e0>)
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    3194:	ldr	r2, [pc, #328]	; (32e0 <usb_midi_read+0x2cc>)
	if (type1 >= 0x05 && type1 <= 0x07) {
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
    3196:	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    3198:	movs	r7, #0
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    319a:	lsrs	r6, r1, #8
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    319c:	movs	r0, #240	; 0xf0
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
    319e:	strh	r7, [r3, #0]
		sysex_byte(b1);
		if (type1 >= 0x06) sysex_byte(n >> 16);
		if (type1 == 0x07) sysex_byte(n >> 24);
		uint16_t len = usb_midi_msg_sysex_len;
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
    31a0:	strb	r6, [r5, #0]
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
    31a2:	strb	r0, [r2, #0]
		if (usb_midi_handleSysExPartial) {
    31a4:	cbz	r4, 31ea <usb_midi_read+0x1d6>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
    31a6:	movs	r2, #1
    31a8:	ldr	r0, [pc, #332]	; (32f8 <usb_midi_read+0x2e4>)
    31aa:	blx	r4
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    31ac:	movs	r0, #1
    31ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 >= 0x08 && type1 <= 0x0E) {
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
    31b2:	cmp	r3, #8
    31b4:	bne.w	3094 <usb_midi_read+0x80>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
    31b8:	ldr	r3, [pc, #320]	; (32fc <usb_midi_read+0x2e8>)
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    31ba:	ldr	r2, [pc, #292]	; (32e0 <usb_midi_read+0x2cc>)
			if (usb_midi_handleNoteOff)
    31bc:	ldr	r3, [r3, #0]
		if (channel && channel != ch) {
			// ignore other channels when user wants single channel read
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
    31be:	movs	r1, #128	; 0x80
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    31c0:	ubfx	r6, r4, #16, #8
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    31c4:	strb	r1, [r2, #0]
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    31c6:	uxtb	r5, r5
    31c8:	lsrs	r4, r4, #24
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    31ca:	cbz	r3, 3228 <usb_midi_read+0x214>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
    31cc:	mov	r0, r5
    31ce:	mov	r2, r4
    31d0:	mov	r1, r6
    31d2:	blx	r3
    31d4:	b.n	3228 <usb_midi_read+0x214>
		if (type1 == 0x0A && type2 == 0x0A) {
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
    31d6:	cmp	r6, #11
    31d8:	bne.n	31fe <usb_midi_read+0x1ea>
    31da:	cmp	r3, #11
    31dc:	bne.w	3094 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
    31e0:	ldr	r3, [pc, #284]	; (3300 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    31e2:	ldr	r2, [pc, #252]	; (32e0 <usb_midi_read+0x2cc>)
			if (usb_midi_handleControlChange)
    31e4:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
			if (usb_midi_handleVelocityChange)
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
    31e6:	movs	r1, #176	; 0xb0
    31e8:	b.n	31c0 <usb_midi_read+0x1ac>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
    31ea:	ldr	r3, [pc, #280]	; (3304 <usb_midi_read+0x2f0>)
    31ec:	ldr	r3, [r3, #0]
    31ee:	cmp	r3, #0
    31f0:	beq.w	33ea <usb_midi_read+0x3d6>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
    31f4:	ldr	r0, [pc, #256]	; (32f8 <usb_midi_read+0x2e4>)
    31f6:	blx	r3
		}
		return 1;
    31f8:	movs	r0, #1
    31fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x0B && type2 == 0x0B) {
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
    31fe:	cmp	r6, #12
    3200:	bne.w	3404 <usb_midi_read+0x3f0>
    3204:	cmp	r3, #12
    3206:	bne.w	3094 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    320a:	ldr	r3, [pc, #252]	; (3308 <usb_midi_read+0x2f4>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    320c:	ldr	r2, [pc, #208]	; (32e0 <usb_midi_read+0x2cc>)
			if (usb_midi_handleProgramChange)
    320e:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
    3210:	movs	r1, #192	; 0xc0
    3212:	strb	r1, [r2, #0]
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
    3214:	uxtb	r5, r5
    3216:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleControlChange)
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
    321a:	cmp	r3, #0
    321c:	beq.w	33b0 <usb_midi_read+0x39c>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    3220:	mov	r0, r5
    3222:	mov	r1, r6
    3224:	lsrs	r4, r4, #24
    3226:	blx	r3
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    3228:	ldr	r1, [pc, #224]	; (330c <usb_midi_read+0x2f8>)
		usb_midi_msg_data1 = (n >> 16);
    322a:	ldr	r2, [pc, #196]	; (32f0 <usb_midi_read+0x2dc>)
		usb_midi_msg_data2 = (n >> 24);
    322c:	ldr	r3, [pc, #196]	; (32f4 <usb_midi_read+0x2e0>)
			}
		} else {
			return 0;
		}
		return_message:
		usb_midi_msg_channel = ch;
    322e:	strb	r5, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
    3230:	strb	r6, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
    3232:	strb	r4, [r3, #0]
		return 1;
    3234:	movs	r0, #1
    3236:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFE);
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
    323a:	ldr	r3, [pc, #212]	; (3310 <usb_midi_read+0x2fc>)
    323c:	ldr	r3, [r3, #0]
    323e:	cmp	r3, #0
    3240:	beq.w	33f0 <usb_midi_read+0x3dc>
				(*usb_midi_handleSystemReset)();
    3244:	blx	r3
    3246:	ubfx	r6, r4, #16, #8
			}
			break;
		  default:
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
    324a:	ldr	r3, [pc, #148]	; (32e0 <usb_midi_read+0x2cc>)
    324c:	uxtb	r5, r5
    324e:	lsrs	r4, r4, #24
    3250:	strb.w	r8, [r3]
		goto return_message;
    3254:	b.n	3228 <usb_midi_read+0x214>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFC);
			}
			break;
		  case 0xFE: // usbMIDI.ActiveSensing
			if (usb_midi_handleActiveSensing) {
    3256:	ldr	r3, [pc, #188]	; (3314 <usb_midi_read+0x300>)
    3258:	ldr	r3, [r3, #0]
    325a:	cmp	r3, #0
    325c:	bne.n	3244 <usb_midi_read+0x230>
				(*usb_midi_handleActiveSensing)();
			} else if (usb_midi_handleRealTimeSystem) {
    325e:	ldr	r3, [pc, #184]	; (3318 <usb_midi_read+0x304>)
    3260:	ldr	r3, [r3, #0]
    3262:	cbz	r3, 328e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFE);
    3264:	movs	r0, #254	; 0xfe
    3266:	blx	r3
    3268:	ubfx	r6, r4, #16, #8
    326c:	b.n	324a <usb_midi_read+0x236>
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xFB);
			}
			break;
		  case 0xFC: // usbMIDI.Stop
			if (usb_midi_handleStop) {
    326e:	ldr	r3, [pc, #172]	; (331c <usb_midi_read+0x308>)
    3270:	ldr	r3, [r3, #0]
    3272:	cmp	r3, #0
    3274:	bne.n	3244 <usb_midi_read+0x230>
				(*usb_midi_handleStop)();
			} else if (usb_midi_handleRealTimeSystem) {
    3276:	ldr	r3, [pc, #160]	; (3318 <usb_midi_read+0x304>)
    3278:	ldr	r3, [r3, #0]
    327a:	cbz	r3, 328e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFC);
    327c:	movs	r0, #252	; 0xfc
    327e:	blx	r3
    3280:	ubfx	r6, r4, #16, #8
    3284:	b.n	324a <usb_midi_read+0x236>
			if (usb_midi_handleSongSelect) {
				(*usb_midi_handleSongSelect)(n >> 16);
			}
			break;
		  case 0xF6: // usbMIDI.TuneRequest
			if (usb_midi_handleTuneRequest) {
    3286:	ldr	r3, [pc, #152]	; (3320 <usb_midi_read+0x30c>)
    3288:	ldr	r3, [r3, #0]
    328a:	cmp	r3, #0
    328c:	bne.n	3244 <usb_midi_read+0x230>
    328e:	ubfx	r6, r4, #16, #8
    3292:	b.n	324a <usb_midi_read+0x236>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    3294:	ldr	r3, [pc, #140]	; (3324 <usb_midi_read+0x310>)
    3296:	ldr	r3, [r3, #0]
				(*usb_midi_handleSongSelect)(n >> 16);
    3298:	ubfx	r6, r4, #16, #8
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
			}
			break;
		  case 0xF3: // usbMIDI.SongSelect
			if (usb_midi_handleSongSelect) {
    329c:	cmp	r3, #0
    329e:	beq.n	324a <usb_midi_read+0x236>
				(*usb_midi_handleSongSelect)(n >> 16);
    32a0:	mov	r0, r6
    32a2:	blx	r3
    32a4:	b.n	324a <usb_midi_read+0x236>
			if (usb_midi_handleTimeCodeQuarterFrame) {
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
    32a6:	ldr	r3, [pc, #128]	; (3328 <usb_midi_read+0x314>)
    32a8:	ldr	r2, [r3, #0]
    32aa:	cmp	r2, #0
    32ac:	beq.n	328e <usb_midi_read+0x27a>
				(*usb_midi_handleSongPosition)(
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
    32ae:	lsrs	r6, r4, #16
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
			}
			break;
		  case 0xF2: // usbMIDI.SongPosition
			if (usb_midi_handleSongPosition) {
				(*usb_midi_handleSongPosition)(
    32b0:	lsrs	r3, r4, #17
    32b2:	and.w	r0, r6, #127	; 0x7f
    32b6:	and.w	r3, r3, #16256	; 0x3f80
    32ba:	orrs	r0, r3
    32bc:	uxtb	r6, r6
    32be:	blx	r2
    32c0:	b.n	324a <usb_midi_read+0x236>
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    32c2:	ldr	r3, [pc, #104]	; (332c <usb_midi_read+0x318>)
    32c4:	ldr	r3, [r3, #0]
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
    32c6:	ubfx	r6, r4, #16, #8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
		// system common or system realtime message
		system_common_or_realtime:
		switch (b1) {
		  case 0xF1: // usbMIDI.TimeCodeQuarterFrame
			if (usb_midi_handleTimeCodeQuarterFrame) {
    32ca:	cmp	r3, #0
    32cc:	bne.n	32a0 <usb_midi_read+0x28c>
    32ce:	b.n	324a <usb_midi_read+0x236>
    32d0:	.word	0x1fff194c
    32d4:	.word	0x1fff1dbe
    32d8:	.word	0x1fff1dba
    32dc:	.word	0x1fff1928
    32e0:	.word	0x1fff1db8
    32e4:	.word	0x1fff195c
    32e8:	.word	0x1fff1a50
    32ec:	.word	0x1fff1924
    32f0:	.word	0x1fff1dbc
    32f4:	.word	0x1fff1dbd
    32f8:	.word	0x1fff1dc0
    32fc:	.word	0x1fff1954
    3300:	.word	0x1fff1958
    3304:	.word	0x1fff193c
    3308:	.word	0x1fff1918
    330c:	.word	0x1fff1dbf
    3310:	.word	0x1fff1904
    3314:	.word	0x1fff1908
    3318:	.word	0x1fff190c
    331c:	.word	0x1fff1948
    3320:	.word	0x1fff1938
    3324:	.word	0x1fff1950
    3328:	.word	0x1fff1920
    332c:	.word	0x1fff1934
			} else if (usb_midi_handleRealTimeSystem) {
				(*usb_midi_handleRealTimeSystem)(0xF8);
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
    3330:	ldr	r3, [pc, #252]	; (3430 <usb_midi_read+0x41c>)
    3332:	ldr	r3, [r3, #0]
    3334:	cmp	r3, #0
    3336:	bne.n	3244 <usb_midi_read+0x230>
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
    3338:	ldr	r3, [pc, #248]	; (3434 <usb_midi_read+0x420>)
    333a:	ldr	r3, [r3, #0]
    333c:	cmp	r3, #0
    333e:	beq.n	328e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFA);
    3340:	movs	r0, #250	; 0xfa
    3342:	blx	r3
    3344:	ubfx	r6, r4, #16, #8
    3348:	b.n	324a <usb_midi_read+0x236>
			}
			break;
		  case 0xFB: // usbMIDI.Continue
			if (usb_midi_handleContinue) {
    334a:	ldr	r3, [pc, #236]	; (3438 <usb_midi_read+0x424>)
    334c:	ldr	r3, [r3, #0]
    334e:	cmp	r3, #0
    3350:	bne.w	3244 <usb_midi_read+0x230>
				(*usb_midi_handleContinue)();
			} else if (usb_midi_handleRealTimeSystem) {
    3354:	ldr	r3, [pc, #220]	; (3434 <usb_midi_read+0x420>)
    3356:	ldr	r3, [r3, #0]
    3358:	cmp	r3, #0
    335a:	beq.n	328e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFB);
    335c:	movs	r0, #251	; 0xfb
    335e:	blx	r3
    3360:	ubfx	r6, r4, #16, #8
    3364:	b.n	324a <usb_midi_read+0x236>
			if (usb_midi_handleTuneRequest) {
				(*usb_midi_handleTuneRequest)();
			}
			break;
		  case 0xF8: // usbMIDI.Clock
			if (usb_midi_handleClock) {
    3366:	ldr	r3, [pc, #212]	; (343c <usb_midi_read+0x428>)
    3368:	ldr	r3, [r3, #0]
    336a:	cmp	r3, #0
    336c:	bne.w	3244 <usb_midi_read+0x230>
				(*usb_midi_handleClock)();
			} else if (usb_midi_handleRealTimeSystem) {
    3370:	ldr	r3, [pc, #192]	; (3434 <usb_midi_read+0x420>)
    3372:	ldr	r3, [r3, #0]
    3374:	cmp	r3, #0
    3376:	beq.n	328e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xF8);
    3378:	movs	r0, #248	; 0xf8
    337a:	blx	r3
    337c:	ubfx	r6, r4, #16, #8
    3380:	b.n	324a <usb_midi_read+0x236>
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
    3382:	cmp	r3, #14
    3384:	bne.w	3094 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
			if (usb_midi_handlePitchChange) {
    3388:	ldr	r2, [pc, #180]	; (3440 <usb_midi_read+0x42c>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    338a:	ldr	r3, [pc, #184]	; (3444 <usb_midi_read+0x430>)
			if (usb_midi_handlePitchChange) {
    338c:	ldr	r2, [r2, #0]
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
    338e:	movs	r1, #224	; 0xe0
    3390:	strb	r1, [r3, #0]
			if (usb_midi_handlePitchChange) {
    3392:	cmp	r2, #0
    3394:	beq.n	3426 <usb_midi_read+0x412>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
    3396:	lsrs	r6, r4, #16
    3398:	lsrs	r1, r4, #17
    339a:	and.w	r3, r6, #127	; 0x7f
    339e:	and.w	r1, r1, #16256	; 0x3f80
    33a2:	orrs	r1, r3
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
    33a4:	uxtb	r5, r5
    33a6:	sub.w	r1, r1, #8192	; 0x2000
    33aa:	mov	r0, r5
    33ac:	blx	r2
    33ae:	uxtb	r6, r6
    33b0:	lsrs	r4, r4, #24
    33b2:	b.n	3228 <usb_midi_read+0x214>
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
		sysex_byte(n >> 8);
    33b4:	bl	2f04 <sysex_byte>
		sysex_byte(n >> 16);
    33b8:	ubfx	r0, r4, #16, #8
    33bc:	bl	2f04 <sysex_byte>
		sysex_byte(n >> 24);
    33c0:	lsrs	r0, r4, #24
    33c2:	bl	2f04 <sysex_byte>
		return 0;
    33c6:	movs	r0, #0
    33c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    33cc:	ldr	r3, [pc, #120]	; (3448 <usb_midi_read+0x434>)
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    33ce:	ldr	r2, [pc, #116]	; (3444 <usb_midi_read+0x430>)
				if (usb_midi_handleNoteOff)
    33d0:	ldr	r3, [r3, #0]
			if ((n >> 24) > 0) {
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
    33d2:	movs	r1, #128	; 0x80
    33d4:	strb	r1, [r2, #0]
				if (usb_midi_handleNoteOff)
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    33d6:	uxtb	r5, r5
    33d8:	ubfx	r6, r4, #16, #8
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    33dc:	cbz	r3, 3400 <usb_midi_read+0x3ec>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
    33de:	mov	r1, r6
    33e0:	mov	r0, r5
    33e2:	mov	r2, r7
    33e4:	blx	r3
    33e6:	mov	r4, r7
    33e8:	b.n	3228 <usb_midi_read+0x214>
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
    33ea:	movs	r0, #1
    33ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			break;
		  case 0xFF: // usbMIDI.SystemReset
			if (usb_midi_handleSystemReset) {
				(*usb_midi_handleSystemReset)();
			} else if (usb_midi_handleRealTimeSystem) {
    33f0:	ldr	r3, [pc, #64]	; (3434 <usb_midi_read+0x420>)
    33f2:	ldr	r3, [r3, #0]
    33f4:	cmp	r3, #0
    33f6:	beq.w	328e <usb_midi_read+0x27a>
				(*usb_midi_handleRealTimeSystem)(0xFF);
    33fa:	movs	r0, #255	; 0xff
    33fc:	blx	r3
    33fe:	b.n	328e <usb_midi_read+0x27a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
				if (usb_midi_handleNoteOn)
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
				if (usb_midi_handleNoteOff)
    3400:	mov	r4, r3
    3402:	b.n	3228 <usb_midi_read+0x214>
		if (type1 == 0x0C && type2 == 0x0C) {
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
    3404:	cmp	r6, #13
    3406:	bne.n	3382 <usb_midi_read+0x36e>
    3408:	cmp	r3, #13
    340a:	bne.w	3094 <usb_midi_read+0x80>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    340e:	ldr	r3, [pc, #60]	; (344c <usb_midi_read+0x438>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    3410:	ldr	r2, [pc, #48]	; (3444 <usb_midi_read+0x430>)
			if (usb_midi_handleAfterTouch)
    3412:	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
    3414:	movs	r1, #208	; 0xd0
    3416:	strb	r1, [r2, #0]
			if (usb_midi_handleAfterTouch)
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
    3418:	uxtb	r5, r5
    341a:	ubfx	r6, r4, #16, #8
			if (usb_midi_handleProgramChange)
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
			if (usb_midi_handleAfterTouch)
    341e:	cmp	r3, #0
    3420:	bne.w	3220 <usb_midi_read+0x20c>
    3424:	b.n	33b0 <usb_midi_read+0x39c>
    3426:	ubfx	r6, r4, #16, #8
    342a:	uxtb	r5, r5
    342c:	lsrs	r4, r4, #24
    342e:	b.n	3228 <usb_midi_read+0x214>
    3430:	.word	0x1fff1930
    3434:	.word	0x1fff190c
    3438:	.word	0x1fff1910
    343c:	.word	0x1fff1900
    3440:	.word	0x1fff191c
    3444:	.word	0x1fff1db8
    3448:	.word	0x1fff1954
    344c:	.word	0x1fff192c

00003450 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    3450:	cpsid	i
	avail = usb_buffer_available;
    3452:	ldr	r0, [pc, #52]	; (3488 <usb_malloc+0x38>)
    3454:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    3456:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    345a:	cmp	r3, #29
    345c:	bgt.n	3480 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    345e:	mov.w	r1, #2147483648	; 0x80000000
    3462:	lsrs	r1, r3
    3464:	bic.w	r2, r2, r1
    3468:	str	r2, [r0, #0]
	__enable_irq();
    346a:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    346c:	ldr	r0, [pc, #28]	; (348c <usb_malloc+0x3c>)
    346e:	add.w	r3, r3, r3, lsl #3
    3472:	lsls	r3, r3, #3
    3474:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    3476:	movs	r1, #0
    3478:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    347a:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    347c:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    347e:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    3480:	cpsie	i
		return NULL;
    3482:	movs	r0, #0
    3484:	bx	lr
    3486:	nop
    3488:	.word	0x1fff0c6c
    348c:	.word	0x1fff03d0

00003490 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    3490:	ldr	r3, [pc, #52]	; (34c8 <usb_free+0x38>)
    3492:	ldr	r2, [pc, #56]	; (34cc <usb_free+0x3c>)
    3494:	subs	r3, r0, r3
    3496:	umull	r2, r3, r2, r3
    349a:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    349c:	cmp	r3, #29
    349e:	bhi.n	34ba <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    34a0:	ldr	r2, [pc, #44]	; (34d0 <usb_free+0x40>)
    34a2:	ldrb	r2, [r2, #0]
    34a4:	cbnz	r2, 34bc <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    34a6:	cpsid	i
	usb_buffer_available |= mask;
    34a8:	ldr	r0, [pc, #40]	; (34d4 <usb_free+0x44>)
    34aa:	mov.w	r1, #2147483648	; 0x80000000
    34ae:	ldr	r2, [r0, #0]
    34b0:	lsr.w	r3, r1, r3
    34b4:	orrs	r2, r3
    34b6:	str	r2, [r0, #0]
	__enable_irq();
    34b8:	cpsie	i
    34ba:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    34bc:	ldr	r2, [pc, #24]	; (34d8 <usb_free+0x48>)
    34be:	ldrb	r2, [r2, #0]
    34c0:	cmp	r2, #0
    34c2:	beq.n	34a6 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    34c4:	b.w	3544 <usb_rx_memory>
    34c8:	.word	0x1fff03d0
    34cc:	.word	0x38e38e39
    34d0:	.word	0x1fff1a45
    34d4:	.word	0x1fff0c6c
    34d8:	.word	0x1fff1a50

000034dc <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    34dc:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    34de:	cmp	r3, #4
    34e0:	bhi.n	350c <usb_rx+0x30>
	__disable_irq();
    34e2:	cpsid	i
	ret = rx_first[endpoint];
    34e4:	ldr	r1, [pc, #40]	; (3510 <usb_rx+0x34>)
    34e6:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    34ea:	cbz	r0, 3508 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    34ec:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    34ee:	ldr	r4, [pc, #36]	; (3514 <usb_rx+0x38>)
    34f0:	ldrh	r5, [r0, #0]
    34f2:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    34f6:	ldr	r6, [r0, #4]
    34f8:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    34fc:	subs	r2, r2, r5
    34fe:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    3502:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    3504:	pop	{r4, r5, r6}
    3506:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    3508:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    350a:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    350c:	movs	r0, #0
    350e:	bx	lr
    3510:	.word	0x1fff19bc
    3514:	.word	0x1fff1ee4

00003518 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    3518:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    351a:	cmp	r0, #4
    351c:	bhi.n	3536 <usb_tx_packet_count+0x1e>
	__disable_irq();
    351e:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    3520:	ldr	r3, [pc, #28]	; (3540 <usb_tx_packet_count+0x28>)
    3522:	ldr.w	r3, [r3, r0, lsl #2]
    3526:	cbz	r3, 353a <usb_tx_packet_count+0x22>
    3528:	movs	r0, #0
    352a:	ldr	r3, [r3, #4]
    352c:	adds	r0, #1
    352e:	cmp	r3, #0
    3530:	bne.n	352a <usb_tx_packet_count+0x12>
	__enable_irq();
    3532:	cpsie	i
	return count;
    3534:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    3536:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    3538:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    353a:	mov	r0, r3
    353c:	b.n	3532 <usb_tx_packet_count+0x1a>
    353e:	nop
    3540:	.word	0x1fff1a14

00003544 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    3544:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    3546:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3548:	ldr	r2, [pc, #204]	; (3618 <usb_rx_memory+0xd4>)
    354a:	ldrb	r3, [r2, #0]
    354c:	lsls	r3, r3, #28
    354e:	bpl.n	355e <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3550:	ldr	r3, [pc, #200]	; (361c <usb_rx_memory+0xd8>)
    3552:	ldr	r1, [r3, #32]
    3554:	cmp	r1, #0
    3556:	beq.n	35e0 <usb_rx_memory+0x9c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3558:	ldr	r1, [r3, #40]	; 0x28
    355a:	cmp	r1, #0
    355c:	beq.n	35fc <usb_rx_memory+0xb8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    355e:	ldrb	r3, [r2, #1]
    3560:	lsls	r5, r3, #28
    3562:	bpl.n	3572 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3564:	ldr	r3, [pc, #180]	; (361c <usb_rx_memory+0xd8>)
    3566:	ldr	r1, [r3, #64]	; 0x40
    3568:	cmp	r1, #0
    356a:	beq.n	3608 <usb_rx_memory+0xc4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    356c:	ldr	r1, [r3, #72]	; 0x48
    356e:	cmp	r1, #0
    3570:	beq.n	3600 <usb_rx_memory+0xbc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3572:	ldrb	r3, [r2, #2]
    3574:	lsls	r4, r3, #28
    3576:	bpl.n	3586 <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3578:	ldr	r3, [pc, #160]	; (361c <usb_rx_memory+0xd8>)
    357a:	ldr	r1, [r3, #96]	; 0x60
    357c:	cmp	r1, #0
    357e:	beq.n	360c <usb_rx_memory+0xc8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3580:	ldr	r1, [r3, #104]	; 0x68
    3582:	cmp	r1, #0
    3584:	beq.n	3604 <usb_rx_memory+0xc0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3586:	ldrb	r3, [r2, #3]
    3588:	lsls	r1, r3, #28
    358a:	bpl.n	359c <usb_rx_memory+0x58>
			if (table[index(i, RX, EVEN)].desc == 0) {
    358c:	ldr	r3, [pc, #140]	; (361c <usb_rx_memory+0xd8>)
    358e:	ldr.w	r1, [r3, #128]	; 0x80
    3592:	cmp	r1, #0
    3594:	beq.n	3614 <usb_rx_memory+0xd0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3596:	ldr.w	r1, [r3, #136]	; 0x88
    359a:	cbz	r1, 35c2 <usb_rx_memory+0x7e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    359c:	ldrb	r3, [r2, #4]
    359e:	lsls	r3, r3, #28
    35a0:	bpl.n	35b4 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    35a2:	ldr	r3, [pc, #120]	; (361c <usb_rx_memory+0xd8>)
    35a4:	ldr.w	r2, [r3, #160]	; 0xa0
    35a8:	cmp	r2, #0
    35aa:	beq.n	3610 <usb_rx_memory+0xcc>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    35ac:	ldr.w	r2, [r3, #168]	; 0xa8
    35b0:	movs	r4, #21
    35b2:	cbz	r2, 35c4 <usb_rx_memory+0x80>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    35b4:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    35b6:	ldr	r3, [pc, #104]	; (3620 <usb_rx_memory+0xdc>)
    35b8:	movs	r2, #0
    35ba:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    35bc:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    35be:	b.w	3490 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    35c2:	movs	r4, #17
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    35c4:	ldr	r1, [pc, #88]	; (3620 <usb_rx_memory+0xdc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    35c6:	ldr	r5, [pc, #92]	; (3624 <usb_rx_memory+0xe0>)
				usb_rx_memory_needed--;
    35c8:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    35ca:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    35ce:	add.w	r3, r3, r4, lsl #3
    35d2:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    35d4:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    35d6:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    35d8:	strb	r2, [r1, #0]
				__enable_irq();
    35da:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    35dc:	pop	{r4, r5}
    35de:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    35e0:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    35e2:	ldr	r4, [pc, #60]	; (3620 <usb_rx_memory+0xdc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    35e4:	ldr	r5, [pc, #64]	; (3628 <usb_rx_memory+0xe4>)
				usb_rx_memory_needed--;
    35e6:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    35e8:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    35ec:	add.w	r3, r3, r2, lsl #3
    35f0:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    35f2:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    35f4:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    35f6:	strb	r2, [r4, #0]
				__enable_irq();
    35f8:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    35fa:	b.n	35dc <usb_rx_memory+0x98>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    35fc:	movs	r4, #5
    35fe:	b.n	35c4 <usb_rx_memory+0x80>
    3600:	movs	r4, #9
    3602:	b.n	35c4 <usb_rx_memory+0x80>
    3604:	movs	r4, #13
    3606:	b.n	35c4 <usb_rx_memory+0x80>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    3608:	movs	r2, #8
    360a:	b.n	35e2 <usb_rx_memory+0x9e>
    360c:	movs	r2, #12
    360e:	b.n	35e2 <usb_rx_memory+0x9e>
    3610:	movs	r2, #20
    3612:	b.n	35e2 <usb_rx_memory+0x9e>
    3614:	movs	r2, #16
    3616:	b.n	35e2 <usb_rx_memory+0x9e>
    3618:	.word	0x0000593c
    361c:	.word	0x1fff0000
    3620:	.word	0x1fff1a45
    3624:	.word	0x004000c8
    3628:	.word	0x00400088

0000362c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    362c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    362e:	cmp	r3, #4
    3630:	bhi.n	366e <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    3632:	ldr	r2, [pc, #108]	; (36a0 <usb_tx+0x74>)
    3634:	lsls	r0, r0, #5
    3636:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    363a:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    363c:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    363e:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    3640:	ldr	r4, [pc, #96]	; (36a4 <usb_tx+0x78>)
    3642:	ldrb	r2, [r4, r3]
    3644:	cmp	r2, #3
    3646:	bhi.n	3680 <usb_tx+0x54>
    3648:	tbb	[pc, r2]
    364c:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    3650:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3652:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    3654:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3656:	tst.w	r0, #8
    365a:	ite	ne
    365c:	movne	r3, #200	; 0xc8
    365e:	moveq	r3, #136	; 0x88
    3660:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3664:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3666:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3668:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    366a:	cpsie	i
}
    366c:	pop	{r4, r5}
    366e:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    3670:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    3672:	movs	r2, #2
		break;
    3674:	b.n	3652 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    3676:	movs	r2, #5
    3678:	b.n	3652 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    367a:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    367c:	movs	r2, #4
		break;
    367e:	b.n	3652 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    3680:	ldr	r2, [pc, #36]	; (36a8 <usb_tx+0x7c>)
    3682:	ldr.w	r0, [r2, r3, lsl #2]
    3686:	cbz	r0, 3698 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    3688:	ldr	r2, [pc, #32]	; (36ac <usb_tx+0x80>)
    368a:	ldr.w	r0, [r2, r3, lsl #2]
    368e:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    3690:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    3694:	cpsie	i
		return;
    3696:	b.n	366c <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    3698:	str.w	r1, [r2, r3, lsl #2]
    369c:	ldr	r2, [pc, #12]	; (36ac <usb_tx+0x80>)
    369e:	b.n	3690 <usb_tx+0x64>
    36a0:	.word	0x1fff0000
    36a4:	.word	0x1fff1a54
    36a8:	.word	0x1fff1a14
    36ac:	.word	0x1fff1a28

000036b0 <usb_isr>:
}



void usb_isr(void)
{
    36b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    36b4:	ldr.w	fp, [pc, #776]	; 39c0 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    36b8:	ldr.w	sl, [pc, #776]	; 39c4 <usb_isr+0x314>
}



void usb_isr(void)
{
    36bc:	sub	sp, #28
    36be:	b.n	374a <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    36c0:	ldr	r7, [pc, #680]	; (396c <usb_isr+0x2bc>)
    36c2:	mov.w	r8, r3, lsr #2
    36c6:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    36ca:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    36cc:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    36d0:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    36d4:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    36d6:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    36da:	and.w	r4, r3, #255	; 0xff
    36de:	cmp	r3, #0
    36e0:	bne.w	38e4 <usb_isr+0x234>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    36e4:	ldr.w	r3, [r7, r8, lsl #3]
    36e8:	lsrs	r3, r3, #16
    36ea:	uxth	r1, r3
    36ec:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    36f0:	cmp	r3, #0
    36f2:	beq.w	38d2 <usb_isr+0x222>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    36f6:	ldr	r3, [pc, #632]	; (3970 <usb_isr+0x2c0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    36f8:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    36fc:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    3700:	ldr.w	r2, [r3, r6, lsl #2]
    3704:	cmp	r2, #0
    3706:	beq.w	3b74 <usb_isr+0x4c4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    370a:	ldr	r5, [pc, #616]	; (3974 <usb_isr+0x2c4>)
    370c:	ldr.w	r3, [r5, r6, lsl #2]
    3710:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    3712:	ldr	r4, [pc, #612]	; (3978 <usb_isr+0x2c8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    3714:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    3718:	ldrh.w	r3, [r4, r6, lsl #1]
    371c:	add	r1, r3
    371e:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    3722:	bl	3450 <usb_malloc>
					if (packet) {
    3726:	cmp	r0, #0
    3728:	beq.w	3b66 <usb_isr+0x4b6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    372c:	ldr	r2, [pc, #588]	; (397c <usb_isr+0x2cc>)
    372e:	ldr	r3, [pc, #592]	; (3980 <usb_isr+0x2d0>)
    3730:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    3734:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    3738:	it	ne
    373a:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    373c:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    3740:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    3744:	movs	r3, #8
    3746:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    374a:	ldrb.w	r4, [fp]
    374e:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    3750:	lsls	r0, r4, #29
    3752:	bpl.n	378e <usb_isr+0xde>
		if (usb_configuration) {
    3754:	ldr	r3, [pc, #556]	; (3984 <usb_isr+0x2d4>)
    3756:	ldrb	r3, [r3, #0]
    3758:	cbz	r3, 3788 <usb_isr+0xd8>
			t = usb_reboot_timer;
    375a:	ldr	r1, [pc, #556]	; (3988 <usb_isr+0x2d8>)
    375c:	ldrb	r2, [r1, #0]
			if (t) {
    375e:	and.w	r3, r2, #255	; 0xff
    3762:	cbz	r2, 376e <usb_isr+0xbe>
				usb_reboot_timer = --t;
    3764:	subs	r3, #1
    3766:	uxtb	r3, r3
    3768:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    376a:	cbnz	r3, 376e <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    376c:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    376e:	ldr	r1, [pc, #540]	; (398c <usb_isr+0x2dc>)
    3770:	ldrb	r2, [r1, #0]
			if (t) {
    3772:	and.w	r3, r2, #255	; 0xff
    3776:	cbz	r2, 3784 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    3778:	subs	r3, #1
    377a:	uxtb	r3, r3
    377c:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    377e:	cmp	r3, #0
    3780:	beq.w	3b12 <usb_isr+0x462>
				usb_seremu_transmit_flush_timer = --t;
				if (t == 0) usb_seremu_flush_callback();
			}
#endif
#ifdef MIDI_INTERFACE
                        usb_midi_flush_output();
    3784:	bl	2fe8 <usb_midi_flush_output>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    3788:	movs	r3, #4
    378a:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    378e:	and.w	r3, r4, #8
    3792:	and.w	r2, r3, #255	; 0xff
    3796:	cmp	r3, #0
    3798:	beq.w	392c <usb_isr+0x27c>
		uint8_t endpoint;
		stat = USB0_STAT;
    379c:	ldrb.w	r3, [sl]
    37a0:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    37a2:	lsrs	r6, r3, #4
    37a4:	bne.n	36c0 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    37a6:	lsrs	r4, r3, #2
    37a8:	ldr.w	r9, [pc, #448]	; 396c <usb_isr+0x2bc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    37ac:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    37b0:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    37b4:	ubfx	r2, r2, #2, #4
    37b8:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    37ba:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    37bc:	cmp	r2, #12
    37be:	bhi.w	38ca <usb_isr+0x21a>
    37c2:	tbb	[pc, r2]
    37c6:	.short	0x7878
    37c8:	.word	0x82828282
    37cc:	.word	0x82438282
    37d0:	.short	0x8282
    37d2:	.byte	0x07
    37d3:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    37d4:	ldr	r0, [r1, #0]
    37d6:	ldr	r5, [pc, #440]	; (3990 <usb_isr+0x2e0>)
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    37d8:	ldr	r3, [pc, #416]	; (397c <usb_isr+0x2cc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    37da:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    37dc:	ldr	r7, [pc, #436]	; (3994 <usb_isr+0x2e4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    37de:	str.w	r3, [r9, r4, lsl #3]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    37e2:	uxth	r1, r0
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    37e4:	ldr	r6, [pc, #432]	; (3998 <usb_isr+0x2e8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    37e6:	str	r2, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    37e8:	movw	r4, #1665	; 0x681
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    37ec:	movs	r2, #0
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    37ee:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    37f0:	cmp	r1, r4
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    37f2:	mov.w	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    37f6:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    37f8:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    37fc:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3800:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3802:	bhi.w	39c8 <usb_isr+0x318>
    3806:	cmp.w	r1, #1664	; 0x680
    380a:	bcs.w	3e34 <usb_isr+0x784>
    380e:	cmp.w	r1, #258	; 0x102
    3812:	beq.w	3be2 <usb_isr+0x532>
    3816:	bhi.w	3bac <usb_isr+0x4fc>
    381a:	cmp	r1, #128	; 0x80
    381c:	beq.w	3e68 <usb_isr+0x7b8>
    3820:	cmp	r1, #130	; 0x82
    3822:	bne.w	3bee <usb_isr+0x53e>
    3826:	ldrh	r1, [r5, #4]
    3828:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    382c:	cmp	r1, #5
    382e:	bhi.w	3bee <usb_isr+0x53e>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3832:	ldr	r3, [pc, #360]	; (399c <usb_isr+0x2ec>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3834:	ldr	r4, [pc, #360]	; (39a0 <usb_isr+0x2f0>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3836:	lsls	r1, r1, #2
    3838:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    383a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    383c:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    383e:	ldrb	r2, [r3, #0]
    3840:	lsls	r3, r2, #30
    3842:	bpl.w	3f78 <usb_isr+0x8c8>
    3846:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    3848:	movs	r0, #2
    384a:	b.n	3c76 <usb_isr+0x5c6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    384c:	ldr	r7, [pc, #324]	; (3994 <usb_isr+0x2e4>)
    384e:	ldr	r2, [r7, #0]
		if (data) {
    3850:	cbz	r2, 38a0 <usb_isr+0x1f0>
			size = ep0_tx_len;
    3852:	ldr	r3, [pc, #336]	; (39a4 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3854:	ldr	r6, [pc, #320]	; (3998 <usb_isr+0x2e8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3856:	ldr	r1, [pc, #336]	; (39a8 <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    3858:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    385a:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    385c:	ldrb	r5, [r1, #0]
    385e:	cmp	r0, #64	; 0x40
    3860:	mov	lr, r0
    3862:	orr.w	r8, r5, #2
    3866:	it	cs
    3868:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    386c:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    386e:	eor.w	r4, r4, #1
    3872:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3874:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3878:	ite	eq
    387a:	moveq	r4, #136	; 0x88
    387c:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    387e:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3882:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3884:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3888:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    388c:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    388e:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3890:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    3894:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3896:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3898:	cmp	r0, #0
    389a:	beq.w	3a0a <usb_isr+0x35a>
    389e:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    38a0:	ldr	r3, [pc, #236]	; (3990 <usb_isr+0x2e0>)
    38a2:	ldrh	r2, [r3, #0]
    38a4:	cmp.w	r2, #1280	; 0x500
    38a8:	bne.n	38ca <usb_isr+0x21a>
			setup.bRequest = 0;
    38aa:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    38ac:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    38ae:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    38b0:	ldr	r3, [pc, #248]	; (39ac <usb_isr+0x2fc>)
    38b2:	strb	r2, [r3, #0]
    38b4:	b.n	38ca <usb_isr+0x21a>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    38b6:	ldr	r2, [pc, #216]	; (3990 <usb_isr+0x2e0>)
    38b8:	ldrh	r0, [r2, #0]
    38ba:	movw	r2, #8225	; 0x2021
    38be:	cmp	r0, r2
    38c0:	beq.w	3a14 <usb_isr+0x364>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    38c4:	ldr	r2, [pc, #180]	; (397c <usb_isr+0x2cc>)
    38c6:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    38ca:	ldr	r2, [pc, #228]	; (39b0 <usb_isr+0x300>)
    38cc:	movs	r3, #1
    38ce:	strb	r3, [r2, #0]
    38d0:	b.n	3744 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    38d2:	ldr	r2, [pc, #168]	; (397c <usb_isr+0x2cc>)
    38d4:	ldr	r3, [pc, #168]	; (3980 <usb_isr+0x2d0>)
    38d6:	tst.w	r9, #8
    38da:	it	ne
    38dc:	movne	r3, r2
    38de:	str.w	r3, [r7, r8, lsl #3]
    38e2:	b.n	3744 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    38e4:	bl	3490 <usb_free>
				packet = tx_first[endpoint];
    38e8:	ldr	r2, [pc, #200]	; (39b4 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    38ea:	ldr	r1, [pc, #204]	; (39b8 <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    38ec:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    38f0:	cmp	r3, #0
    38f2:	beq.w	3b7c <usb_isr+0x4cc>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    38f6:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    38f8:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    38fa:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    38fe:	add.w	r2, r3, #8
    3902:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    3906:	cmp	r4, #3
    3908:	bhi.n	3916 <usb_isr+0x266>
    390a:	tbb	[pc, r4]
    390e:	.short	0x022c
    3910:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    3912:	movs	r2, #2
    3914:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    3916:	ldrh	r2, [r3, #0]
    3918:	tst.w	r9, #8
    391c:	ite	eq
    391e:	moveq	r3, #136	; 0x88
    3920:	movne	r3, #200	; 0xc8
    3922:	orr.w	r3, r3, r2, lsl #16
    3926:	str.w	r3, [r7, r8, lsl #3]
    392a:	b.n	3744 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    392c:	lsls	r0, r4, #31
    392e:	bmi.w	3b18 <usb_isr+0x468>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    3932:	lsls	r1, r4, #24
    3934:	bmi.w	3b98 <usb_isr+0x4e8>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3938:	lsls	r2, r4, #30
    393a:	bpl.n	394a <usb_isr+0x29a>
		uint8_t err = USB0_ERRSTAT;
    393c:	ldr	r2, [pc, #124]	; (39bc <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    393e:	ldr	r1, [pc, #128]	; (39c0 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3940:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3942:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3944:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    3946:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3948:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    394a:	lsls	r3, r4, #27
    394c:	bpl.n	3954 <usb_isr+0x2a4>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    394e:	ldr	r3, [pc, #112]	; (39c0 <usb_isr+0x310>)
    3950:	movs	r2, #16
    3952:	strb	r2, [r3, #0]
	}

}
    3954:	add	sp, #28
    3956:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    395a:	movs	r2, #4
    395c:	strb	r2, [r1, r6]
						break;
    395e:	b.n	3916 <usb_isr+0x266>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    3960:	movs	r2, #5
    3962:	strb	r2, [r1, r6]
						break;
    3964:	b.n	3916 <usb_isr+0x266>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    3966:	movs	r2, #3
    3968:	strb	r2, [r1, r6]
						break;
    396a:	b.n	3916 <usb_isr+0x266>
    396c:	.word	0x1fff0000
    3970:	.word	0x1fff19bc
    3974:	.word	0x1fff1964
    3978:	.word	0x1fff1ee4
    397c:	.word	0x004000c8
    3980:	.word	0x00400088
    3984:	.word	0x1fff1a50
    3988:	.word	0x1fff19d1
    398c:	.word	0x1fff18e4
    3990:	.word	0x1fff1a3c
    3994:	.word	0x1fff1960
    3998:	.word	0x1fff19d0
    399c:	.word	0x400720c0
    39a0:	.word	0x1fff1a48
    39a4:	.word	0x1fff1978
    39a8:	.word	0x1fff1a44
    39ac:	.word	0x40072098
    39b0:	.word	0x40072094
    39b4:	.word	0x1fff1a14
    39b8:	.word	0x1fff1a54
    39bc:	.word	0x40072088
    39c0:	.word	0x40072080
    39c4:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    39c8:	movw	r4, #8225	; 0x2021
    39cc:	cmp	r1, r4
    39ce:	beq.w	3b0a <usb_isr+0x45a>
    39d2:	bhi.n	3a68 <usb_isr+0x3b8>
    39d4:	cmp.w	r1, #2176	; 0x880
    39d8:	beq.w	3c6e <usb_isr+0x5be>
    39dc:	cmp.w	r1, #2304	; 0x900
    39e0:	bne.w	3bee <usb_isr+0x53e>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    39e4:	ldr	r2, [pc, #712]	; (3cb0 <usb_isr+0x600>)
    39e6:	ldr	r4, [pc, #716]	; (3cb4 <usb_isr+0x604>)
    39e8:	ldrb	r1, [r5, #2]
    39ea:	strb	r1, [r2, #0]
    39ec:	add.w	r5, r4, #160	; 0xa0
    39f0:	b.n	39fa <usb_isr+0x34a>
    39f2:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    39f4:	cmp	r5, r4
    39f6:	beq.w	3d0c <usb_isr+0x65c>
			if (table[i].desc & BDT_OWN) {
    39fa:	ldr	r3, [r4, #32]
    39fc:	lsls	r1, r3, #24
    39fe:	bpl.n	39f2 <usb_isr+0x342>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    3a00:	ldr	r0, [r4, #36]	; 0x24
    3a02:	subs	r0, #8
    3a04:	bl	3490 <usb_free>
    3a08:	b.n	39f2 <usb_isr+0x342>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3a0a:	cmp.w	lr, #64	; 0x40
    3a0e:	it	ne
    3a10:	movne	r2, #0
    3a12:	b.n	389e <usb_isr+0x1ee>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3a14:	ldr	r2, [pc, #672]	; (3cb8 <usb_isr+0x608>)
    3a16:	ldrb	r5, [r1, #0]
    3a18:	ldrb	r0, [r1, #1]
    3a1a:	strb	r5, [r2, #0]
    3a1c:	strb	r0, [r2, #1]
    3a1e:	ldrb	r5, [r1, #2]
    3a20:	ldrb	r0, [r1, #3]
    3a22:	strb	r5, [r2, #2]
    3a24:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3a26:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3a28:	ldrb	r5, [r1, #4]
    3a2a:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3a2c:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3a2e:	ldrb	r5, [r1, #5]
    3a30:	ldrb	r1, [r1, #6]
    3a32:	strb	r5, [r2, #5]
    3a34:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3a36:	beq.w	3c66 <usb_isr+0x5b6>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a3a:	ldr	r1, [pc, #640]	; (3cbc <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a3c:	ldr	r6, [pc, #640]	; (3cc0 <usb_isr+0x610>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a3e:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a40:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3a42:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a46:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a48:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3a4c:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a4e:	ite	eq
    3a50:	moveq	r1, #136	; 0x88
    3a52:	movne	r1, #200	; 0xc8
    3a54:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a58:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3a5c:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a60:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3a62:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a64:	str	r1, [r2, #4]
    3a66:	b.n	38c4 <usb_isr+0x214>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3a68:	movw	r4, #8737	; 0x2221
    3a6c:	cmp	r1, r4
    3a6e:	bne.w	3e82 <usb_isr+0x7d2>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3a72:	ldr.w	ip, [pc, #656]	; 3d04 <usb_isr+0x654>
    3a76:	ldr	r3, [pc, #588]	; (3cc4 <usb_isr+0x614>)
		usb_cdc_line_rtsdtr = setup.wValue;
    3a78:	ldr	r1, [pc, #588]	; (3cc8 <usb_isr+0x618>)
    3a7a:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3a7c:	ldr.w	r5, [ip]
    3a80:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    3a82:	str	r0, [sp, #4]
    3a84:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3a86:	movs	r0, #0
    3a88:	str	r0, [sp, #8]
    3a8a:	mov	r8, r0
    3a8c:	mov	ip, r0
    3a8e:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3a90:	ldr	r1, [pc, #552]	; (3cbc <usb_isr+0x60c>)
    3a92:	ldrb	r5, [r1, #0]
    3a94:	orr.w	lr, r5, #2
    3a98:	add.w	r3, r9, lr, lsl #3
    3a9c:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3a9e:	ldr	r3, [sp, #4]
    3aa0:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3aa2:	ldr	r3, [sp, #12]
    3aa4:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3aa6:	ite	eq
    3aa8:	moveq	r4, #136	; 0x88
    3aaa:	movne	r4, #200	; 0xc8
    3aac:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3ab0:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3ab4:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    3ab8:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3aba:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3abc:	ldr.w	lr, [pc, #500]	; 3cb4 <usb_isr+0x604>
	ep0_tx_data_toggle ^= 1;
    3ac0:	ldr	r3, [pc, #508]	; (3cc0 <usb_isr+0x610>)
	ep0_tx_bdt_bank ^= 1;
    3ac2:	ldr.w	r8, [pc, #504]	; 3cbc <usb_isr+0x60c>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3ac6:	cmp	r0, #0
    3ac8:	bne.w	3bfc <usb_isr+0x54c>
    3acc:	cmp.w	ip, #64	; 0x40
    3ad0:	bne.n	3b0a <usb_isr+0x45a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3ad2:	orr.w	ip, r4, #2
    3ad6:	add.w	r3, r9, ip, lsl #3
    3ada:	ldr	r4, [sp, #8]
    3adc:	ldr.w	lr, [pc, #468]	; 3cb4 <usb_isr+0x604>
    3ae0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3ae2:	cmp	r2, #0
    3ae4:	bne.w	3c28 <usb_isr+0x578>
    3ae8:	lsls	r2, r0, #16
    3aea:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    3aee:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3af2:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3af6:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3af8:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3afa:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3afc:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3afe:	cmp	r0, #64	; 0x40
    3b00:	bne.n	3b0a <usb_isr+0x45a>
    3b02:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3b04:	ldr	r2, [pc, #452]	; (3ccc <usb_isr+0x61c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    3b06:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    3b08:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3b0a:	ldr	r2, [pc, #452]	; (3cd0 <usb_isr+0x620>)
    3b0c:	movs	r3, #1
    3b0e:	strb	r3, [r2, #0]
    3b10:	b.n	38ca <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    3b12:	bl	2870 <usb_serial_flush_callback>
    3b16:	b.n	3784 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3b18:	ldr	r3, [pc, #408]	; (3cb4 <usb_isr+0x604>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3b1a:	ldr	r0, [pc, #436]	; (3cd0 <usb_isr+0x620>)
		ep0_tx_bdt_bank = 0;
    3b1c:	ldr	r1, [pc, #412]	; (3cbc <usb_isr+0x60c>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    3b1e:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3b20:	mov.w	lr, #2
    3b24:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3b28:	ldr	r7, [pc, #424]	; (3cd4 <usb_isr+0x624>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    3b2a:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3b2c:	ldr	r1, [pc, #424]	; (3cd8 <usb_isr+0x628>)
    3b2e:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3b30:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3b32:	ldr	r6, [pc, #424]	; (3cdc <usb_isr+0x62c>)
		USB0_ISTAT = 0xFF;
    3b34:	ldr	r5, [pc, #424]	; (3ce0 <usb_isr+0x630>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3b36:	ldr	r4, [pc, #428]	; (3ce4 <usb_isr+0x634>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3b38:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3b3a:	movs	r1, #13
    3b3c:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3b3e:	movs	r1, #255	; 0xff
    3b40:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3b42:	ldr.w	lr, [pc, #452]	; 3d08 <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    3b46:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3b48:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3b4a:	ldr	r5, [pc, #412]	; (3ce8 <usb_isr+0x638>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3b4c:	ldr	r2, [pc, #412]	; (3cec <usb_isr+0x63c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3b4e:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3b52:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3b54:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3b56:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3b5a:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3b5c:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3b5e:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    3b60:	add	sp, #28
    3b62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    3b66:	ldr	r2, [pc, #392]	; (3cf0 <usb_isr+0x640>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    3b68:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    3b6c:	ldrb	r3, [r2, #0]
    3b6e:	adds	r3, #1
    3b70:	strb	r3, [r2, #0]
    3b72:	b.n	3744 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3b74:	str.w	r0, [r3, r6, lsl #2]
    3b78:	ldr	r5, [pc, #376]	; (3cf4 <usb_isr+0x644>)
    3b7a:	b.n	3712 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3b7c:	ldrb	r3, [r1, r6]
    3b7e:	cmp	r3, #3
    3b80:	bhi.n	3c58 <usb_isr+0x5a8>
    3b82:	add	r2, pc, #4	; (adr r2, 3b88 <usb_isr+0x4d8>)
    3b84:	ldr.w	pc, [r2, r3, lsl #2]
    3b88:	.word	0x00003745
    3b8c:	.word	0x00003745
    3b90:	.word	0x00003bdd
    3b94:	.word	0x00003bd7
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3b98:	ldr	r1, [pc, #312]	; (3cd4 <usb_isr+0x624>)
		USB0_ISTAT = USB_ISTAT_STALL;
    3b9a:	ldr	r3, [pc, #324]	; (3ce0 <usb_isr+0x630>)
    3b9c:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3b9e:	movs	r0, #13
    3ba0:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    3ba2:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3ba4:	lsls	r2, r4, #30
    3ba6:	bpl.w	394a <usb_isr+0x29a>
    3baa:	b.n	393c <usb_isr+0x28c>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3bac:	movw	r2, #770	; 0x302
    3bb0:	cmp	r1, r2
    3bb2:	bne.w	3e72 <usb_isr+0x7c2>
    3bb6:	ldrh	r1, [r5, #4]
    3bb8:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3bbc:	cmp	r1, #5
    3bbe:	bhi.n	3bee <usb_isr+0x53e>
    3bc0:	ldrh	r2, [r5, #2]
    3bc2:	cbnz	r2, 3bee <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    3bc4:	ldr	r4, [pc, #268]	; (3cd4 <usb_isr+0x624>)
    3bc6:	str	r0, [sp, #4]
    3bc8:	lsls	r1, r1, #2
    3bca:	add	r4, r1
    3bcc:	ldrb	r1, [r4, #0]
    3bce:	orr.w	r1, r1, #2
    3bd2:	strb	r1, [r4, #0]
    3bd4:	b.n	3a86 <usb_isr+0x3d6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3bd6:	movs	r3, #1
    3bd8:	strb	r3, [r1, r6]
						break;
    3bda:	b.n	3744 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3bdc:	movs	r3, #0
    3bde:	strb	r3, [r1, r6]
						break;
    3be0:	b.n	3744 <usb_isr+0x94>
    3be2:	ldrh	r1, [r5, #4]
    3be4:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3be8:	cmp	r1, #5
    3bea:	bls.w	3e8c <usb_isr+0x7dc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3bee:	ldr	r2, [pc, #228]	; (3cd4 <usb_isr+0x624>)
    3bf0:	movs	r3, #15
    3bf2:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3bf4:	ldr	r2, [pc, #216]	; (3cd0 <usb_isr+0x620>)
    3bf6:	movs	r3, #1
    3bf8:	strb	r3, [r2, #0]
    3bfa:	b.n	38ca <usb_isr+0x21a>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    3bfc:	cmp	r0, #64	; 0x40
    3bfe:	bls.w	3ad2 <usb_isr+0x422>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3c02:	orr.w	r4, r4, #2
    3c06:	add.w	r1, lr, r4, lsl #3
    3c0a:	ldr	r6, [sp, #8]
    3c0c:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c0e:	cbz	r2, 3c40 <usb_isr+0x590>
	ep0_tx_data_toggle ^= 1;
    3c10:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c14:	ldr	r2, [pc, #224]	; (3cf8 <usb_isr+0x648>)
	ep0_tx_data_toggle ^= 1;
    3c16:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c18:	mov	r3, r6
    3c1a:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3c1c:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c20:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c22:	str.w	r2, [lr, r4, lsl #3]
    3c26:	b.n	3b04 <usb_isr+0x454>
	ep0_tx_data_toggle ^= 1;
    3c28:	ldrb.w	r3, [sp, #4]
    3c2c:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c2e:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c30:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3c32:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c34:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c38:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c3a:	str.w	r2, [lr, ip, lsl #3]
    3c3e:	b.n	3afe <usb_isr+0x44e>
	ep0_tx_data_toggle ^= 1;
    3c40:	ldrb.w	r1, [sp, #4]
    3c44:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c46:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c48:	ldr	r2, [pc, #140]	; (3cd8 <usb_isr+0x628>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3c4a:	strb.w	r5, [r8]
    3c4e:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c50:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c52:	str.w	r2, [lr, r4, lsl #3]
    3c56:	b.n	3b04 <usb_isr+0x454>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3c58:	tst.w	r9, #8
    3c5c:	ite	eq
    3c5e:	moveq	r3, #2
    3c60:	movne	r3, #3
    3c62:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3c64:	b.n	3744 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3c66:	ldr	r2, [pc, #148]	; (3cfc <usb_isr+0x64c>)
    3c68:	movs	r1, #15
    3c6a:	strb	r1, [r2, #0]
    3c6c:	b.n	3a3a <usb_isr+0x38a>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3c6e:	ldr	r2, [pc, #64]	; (3cb0 <usb_isr+0x600>)
    3c70:	ldr	r4, [pc, #140]	; (3d00 <usb_isr+0x650>)
    3c72:	ldrb	r2, [r2, #0]
    3c74:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3c76:	ldrh	r2, [r5, #6]
    3c78:	cmp	r2, r0
    3c7a:	bcs.w	4040 <usb_isr+0x990>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3c7e:	ldr	r1, [pc, #60]	; (3cbc <usb_isr+0x60c>)
    3c80:	ldrb	r5, [r1, #0]
    3c82:	cmp	r2, #64	; 0x40
    3c84:	mov	ip, r2
    3c86:	orr.w	lr, r5, #2
    3c8a:	it	cs
    3c8c:	movcs.w	ip, #64	; 0x40
    3c90:	add.w	r3, r4, ip
    3c94:	add.w	r0, r9, lr, lsl #3
    3c98:	str	r3, [sp, #8]
    3c9a:	movs	r3, #1
    3c9c:	str	r4, [r0, #4]
    3c9e:	mov.w	r8, ip, lsl #16
    3ca2:	rsb	r0, ip, r2
    3ca6:	str	r3, [sp, #4]
    3ca8:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3caa:	movs	r4, #200	; 0xc8
    3cac:	b.n	3aac <usb_isr+0x3fc>
    3cae:	nop
    3cb0:	.word	0x1fff1a50
    3cb4:	.word	0x1fff0000
    3cb8:	.word	0x1fff1dac
    3cbc:	.word	0x1fff1a44
    3cc0:	.word	0x1fff19d0
    3cc4:	.word	0x1fff1db4
    3cc8:	.word	0x1fff18f4
    3ccc:	.word	0x1fff1978
    3cd0:	.word	0x40072094
    3cd4:	.word	0x400720c0
    3cd8:	.word	0x00400088
    3cdc:	.word	0x40072088
    3ce0:	.word	0x40072080
    3ce4:	.word	0x40072098
    3ce8:	.word	0x1fff197c
    3cec:	.word	0x1fff19d4
    3cf0:	.word	0x1fff1a45
    3cf4:	.word	0x1fff1964
    3cf8:	.word	0x004000c8
    3cfc:	.word	0x1fff19d1
    3d00:	.word	0x1fff1a48
    3d04:	.word	0x1fff18fc
    3d08:	.word	0x4007208c
    3d0c:	ldr	r4, [pc, #704]	; (3fd0 <usb_isr+0x920>)
    3d0e:	ldr	r2, [pc, #708]	; (3fd4 <usb_isr+0x924>)
    3d10:	ldr	r1, [pc, #708]	; (3fd8 <usb_isr+0x928>)
    3d12:	ldr	r0, [pc, #712]	; (3fdc <usb_isr+0x92c>)
    3d14:	ldr	r5, [pc, #712]	; (3fe0 <usb_isr+0x930>)
    3d16:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    3d18:	movs	r3, #0
    3d1a:	ldr	r4, [pc, #712]	; (3fe4 <usb_isr+0x934>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3d1c:	str	r4, [sp, #8]
    3d1e:	str	r6, [sp, #20]
    3d20:	str	r5, [sp, #12]
    3d22:	mov	r8, r0
    3d24:	mov	r4, r3
    3d26:	str	r7, [sp, #16]
    3d28:	mov	r6, r2
    3d2a:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3d2c:	ldr	r0, [r6, #0]
			while (p) {
    3d2e:	cbz	r0, 3d3c <usb_isr+0x68c>
				n = p->next;
    3d30:	ldr	r7, [r0, #4]
				usb_free(p);
    3d32:	bl	3490 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    3d36:	mov	r0, r7
    3d38:	cmp	r7, #0
    3d3a:	bne.n	3d30 <usb_isr+0x680>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3d3c:	movs	r3, #0
    3d3e:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3d40:	ldr	r3, [sp, #12]
			p = tx_first[i];
    3d42:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3d44:	mov	r2, r3
    3d46:	movs	r3, #0
    3d48:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    3d4c:	cbz	r0, 3d5a <usb_isr+0x6aa>
				n = p->next;
    3d4e:	ldr	r7, [r0, #4]
				usb_free(p);
    3d50:	bl	3490 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3d54:	mov	r0, r7
    3d56:	cmp	r7, #0
    3d58:	bne.n	3d4e <usb_isr+0x69e>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3d5a:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3d5c:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3d5e:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3d60:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    3d62:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    3d66:	ldr	r2, [sp, #8]
    3d68:	mov.w	r1, #0
			switch (tx_state[i]) {
    3d6c:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    3d6e:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    3d72:	cmp	r3, #3
    3d74:	bhi.n	3d86 <usb_isr+0x6d6>
    3d76:	tbb	[pc, r3]
    3d7a:	.short	0x0258
    3d7c:	.short	0x0258
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3d7e:	ldr	r3, [sp, #4]
    3d80:	mov.w	r2, #1
    3d84:	strb	r2, [r3, #0]
    3d86:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3d88:	adds	r4, #1
    3d8a:	adds	r3, #1
    3d8c:	cmp	r4, #5
    3d8e:	add.w	r6, r6, #4
    3d92:	add.w	r5, r5, #4
    3d96:	str	r3, [sp, #4]
    3d98:	bne.n	3d2c <usb_isr+0x67c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3d9a:	ldr	r4, [pc, #588]	; (3fe8 <usb_isr+0x938>)
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3d9c:	ldr	r5, [pc, #588]	; (3fec <usb_isr+0x93c>)
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3d9e:	ldrb	r2, [r4, #0]
			*reg = epconf;
    3da0:	ldr	r3, [pc, #588]	; (3ff0 <usb_isr+0x940>)
    3da2:	ldr	r7, [sp, #16]
    3da4:	ldr	r6, [sp, #20]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3da6:	movs	r1, #0
    3da8:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3daa:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3dac:	lsls	r2, r2, #28
    3dae:	bmi.n	3ea6 <usb_isr+0x7f6>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3db0:	ldrb	r2, [r4, #1]
			*reg = epconf;
    3db2:	ldr	r1, [pc, #576]	; (3ff4 <usb_isr+0x944>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3db4:	ldr.w	r8, [pc, #588]	; 4004 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3db8:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3dba:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3dbc:	mov.w	r1, #0
    3dc0:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    3dc4:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3dc8:	bmi.w	3f52 <usb_isr+0x8a2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3dcc:	ldrb	r2, [r4, #2]
			*reg = epconf;
    3dce:	ldr	r1, [pc, #552]	; (3ff8 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3dd0:	ldr.w	r8, [pc, #560]	; 4004 <usb_isr+0x954>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3dd4:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3dd6:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3dd8:	mov.w	r1, #0
    3ddc:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    3de0:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3de4:	bmi.w	3f2a <usb_isr+0x87a>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3de8:	ldr	r1, [pc, #528]	; (3ffc <usb_isr+0x94c>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3dea:	ldrb	r2, [r4, #3]
			*reg = epconf;
    3dec:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3dee:	movs	r1, #0
    3df0:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3df4:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3df8:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3dfa:	ldr.w	r8, [pc, #520]	; 4004 <usb_isr+0x954>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3dfe:	bmi.n	3efc <usb_isr+0x84c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3e00:	ldrb	r2, [r4, #4]
			*reg = epconf;
    3e02:	ldr	r1, [pc, #508]	; (4000 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3e04:	ldr	r4, [pc, #508]	; (4004 <usb_isr+0x954>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3e06:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3e08:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3e0a:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3e0c:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3e10:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3e14:	bmi.n	3ed2 <usb_isr+0x822>
    3e16:	ldrb	r3, [r6, #0]
    3e18:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3e1a:	movs	r1, #0
    3e1c:	eor.w	r2, r3, #1
    3e20:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    3e24:	str.w	r1, [r9, #184]	; 0xb8
    3e28:	b.n	3a86 <usb_isr+0x3d6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3e2a:	ldr	r3, [sp, #4]
    3e2c:	mov.w	r2, #0
    3e30:	strb	r2, [r3, #0]
    3e32:	b.n	3d86 <usb_isr+0x6d6>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3e34:	ldr	r2, [pc, #464]	; (4008 <usb_isr+0x958>)
    3e36:	ldr	r4, [r2, #4]
    3e38:	cmp	r4, #0
    3e3a:	beq.w	3bee <usb_isr+0x53e>
    3e3e:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3e40:	ldrh.w	lr, [r5, #4]
    3e44:	b.n	3e50 <usb_isr+0x7a0>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3e46:	adds	r2, #12
			if (list->addr == NULL) break;
    3e48:	ldr	r4, [r2, #4]
    3e4a:	cmp	r4, #0
    3e4c:	beq.w	3bee <usb_isr+0x53e>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3e50:	ldrh	r3, [r2, #0]
    3e52:	cmp	r3, r0
    3e54:	bne.n	3e46 <usb_isr+0x796>
    3e56:	ldrh	r3, [r2, #2]
    3e58:	cmp	r3, lr
    3e5a:	bne.n	3e46 <usb_isr+0x796>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3e5c:	lsrs	r0, r0, #8
    3e5e:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3e60:	ite	eq
    3e62:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    3e64:	ldrhne	r0, [r2, #8]
    3e66:	b.n	3c76 <usb_isr+0x5c6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3e68:	ldr	r4, [pc, #416]	; (400c <usb_isr+0x95c>)
		reply_buffer[1] = 0;
		datalen = 2;
    3e6a:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3e6c:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3e6e:	strb	r2, [r4, #1]
    3e70:	b.n	3c76 <usb_isr+0x5c6>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3e72:	cmp.w	r1, #1280	; 0x500
    3e76:	bne.w	3bee <usb_isr+0x53e>
    3e7a:	movs	r3, #1
    3e7c:	movs	r2, #0
    3e7e:	str	r3, [sp, #4]
    3e80:	b.n	3a86 <usb_isr+0x3d6>
    3e82:	movw	r2, #8993	; 0x2321
    3e86:	cmp	r1, r2
    3e88:	beq.n	3e7a <usb_isr+0x7ca>
    3e8a:	b.n	3bee <usb_isr+0x53e>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3e8c:	ldrh	r2, [r5, #2]
    3e8e:	cmp	r2, #0
    3e90:	bne.w	3bee <usb_isr+0x53e>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3e94:	ldr	r4, [pc, #376]	; (4010 <usb_isr+0x960>)
    3e96:	str	r0, [sp, #4]
    3e98:	lsls	r1, r1, #2
    3e9a:	add	r4, r1
    3e9c:	ldrb	r1, [r4, #0]
    3e9e:	bic.w	r1, r1, #2
    3ea2:	strb	r1, [r4, #0]
    3ea4:	b.n	3a86 <usb_isr+0x3d6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3ea6:	bl	3450 <usb_malloc>
				if (p) {
    3eaa:	cmp	r0, #0
    3eac:	beq.w	401c <usb_isr+0x96c>
					table[index(i, RX, EVEN)].addr = p->buf;
    3eb0:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3eb2:	ldr	r2, [pc, #352]	; (4014 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3eb4:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3eb8:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3ebc:	bl	3450 <usb_malloc>
				if (p) {
    3ec0:	cmp	r0, #0
    3ec2:	beq.n	3fc4 <usb_isr+0x914>
					table[index(i, RX, ODD)].addr = p->buf;
    3ec4:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ec6:	ldr	r2, [pc, #336]	; (4018 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3ec8:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ecc:	str.w	r2, [r9, #40]	; 0x28
    3ed0:	b.n	3db0 <usb_isr+0x700>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3ed2:	bl	3450 <usb_malloc>
				if (p) {
    3ed6:	cmp	r0, #0
    3ed8:	beq.n	3f88 <usb_isr+0x8d8>
					table[index(i, RX, EVEN)].addr = p->buf;
    3eda:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3edc:	ldr	r2, [pc, #308]	; (4014 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3ede:	str.w	r0, [r4, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3ee2:	str.w	r2, [r4, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3ee6:	bl	3450 <usb_malloc>
				if (p) {
    3eea:	cmp	r0, #0
    3eec:	beq.n	3f7c <usb_isr+0x8cc>
					table[index(i, RX, ODD)].addr = p->buf;
    3eee:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ef0:	ldr	r2, [pc, #292]	; (4018 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3ef2:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ef6:	str.w	r2, [r9, #168]	; 0xa8
    3efa:	b.n	3e16 <usb_isr+0x766>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3efc:	bl	3450 <usb_malloc>
				if (p) {
    3f00:	cmp	r0, #0
    3f02:	beq.w	4034 <usb_isr+0x984>
					table[index(i, RX, EVEN)].addr = p->buf;
    3f06:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f08:	ldr	r2, [pc, #264]	; (4014 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3f0a:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f0e:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3f12:	bl	3450 <usb_malloc>
				if (p) {
    3f16:	cmp	r0, #0
    3f18:	beq.w	4028 <usb_isr+0x978>
					table[index(i, RX, ODD)].addr = p->buf;
    3f1c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f1e:	ldr	r2, [pc, #248]	; (4018 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3f20:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f24:	str.w	r2, [r9, #136]	; 0x88
    3f28:	b.n	3e00 <usb_isr+0x750>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3f2a:	bl	3450 <usb_malloc>
				if (p) {
    3f2e:	cmp	r0, #0
    3f30:	beq.n	3fb8 <usb_isr+0x908>
					table[index(i, RX, EVEN)].addr = p->buf;
    3f32:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f34:	ldr	r2, [pc, #220]	; (4014 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3f36:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f3a:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3f3e:	bl	3450 <usb_malloc>
				if (p) {
    3f42:	cbz	r0, 3fac <usb_isr+0x8fc>
					table[index(i, RX, ODD)].addr = p->buf;
    3f44:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f46:	ldr	r2, [pc, #208]	; (4018 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3f48:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f4c:	str.w	r2, [r9, #104]	; 0x68
    3f50:	b.n	3de8 <usb_isr+0x738>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3f52:	bl	3450 <usb_malloc>
				if (p) {
    3f56:	cbz	r0, 3fa0 <usb_isr+0x8f0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3f58:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f5a:	ldr	r2, [pc, #184]	; (4014 <usb_isr+0x964>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3f5c:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f60:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3f64:	bl	3450 <usb_malloc>
				if (p) {
    3f68:	cbz	r0, 3f94 <usb_isr+0x8e4>
					table[index(i, RX, ODD)].addr = p->buf;
    3f6a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f6c:	ldr	r2, [pc, #168]	; (4018 <usb_isr+0x968>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3f6e:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f72:	str.w	r2, [r9, #72]	; 0x48
    3f76:	b.n	3dcc <usb_isr+0x71c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3f78:	movs	r0, #2
    3f7a:	b.n	3c76 <usb_isr+0x5c6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3f7c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3f7e:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    3f82:	adds	r2, #1
    3f84:	strb	r2, [r5, #0]
    3f86:	b.n	3e16 <usb_isr+0x766>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3f88:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3f8a:	str.w	r0, [r4, #160]	; 0xa0
					usb_rx_memory_needed++;
    3f8e:	adds	r2, #1
    3f90:	strb	r2, [r5, #0]
    3f92:	b.n	3ee6 <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3f94:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3f96:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    3f9a:	adds	r2, #1
    3f9c:	strb	r2, [r5, #0]
    3f9e:	b.n	3dcc <usb_isr+0x71c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3fa0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3fa2:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    3fa6:	adds	r2, #1
    3fa8:	strb	r2, [r5, #0]
    3faa:	b.n	3f64 <usb_isr+0x8b4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3fac:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3fae:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    3fb2:	adds	r2, #1
    3fb4:	strb	r2, [r5, #0]
    3fb6:	b.n	3de8 <usb_isr+0x738>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3fb8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3fba:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    3fbe:	adds	r2, #1
    3fc0:	strb	r2, [r5, #0]
    3fc2:	b.n	3f3e <usb_isr+0x88e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3fc4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3fc6:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    3fca:	adds	r2, #1
    3fcc:	strb	r2, [r5, #0]
    3fce:	b.n	3db0 <usb_isr+0x700>
    3fd0:	.word	0x1fff1a54
    3fd4:	.word	0x1fff19bc
    3fd8:	.word	0x1fff1a14
    3fdc:	.word	0x1fff1a28
    3fe0:	.word	0x1fff1964
    3fe4:	.word	0x1fff1ee4
    3fe8:	.word	0x0000593c
    3fec:	.word	0x1fff1a45
    3ff0:	.word	0x400720c4
    3ff4:	.word	0x400720c8
    3ff8:	.word	0x400720cc
    3ffc:	.word	0x400720d0
    4000:	.word	0x400720d4
    4004:	.word	0x1fff0000
    4008:	.word	0x00005944
    400c:	.word	0x1fff1a48
    4010:	.word	0x400720c0
    4014:	.word	0x00400088
    4018:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    401c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    401e:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    4022:	adds	r2, #1
    4024:	strb	r2, [r5, #0]
    4026:	b.n	3ebc <usb_isr+0x80c>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    4028:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    402a:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    402e:	adds	r2, #1
    4030:	strb	r2, [r5, #0]
    4032:	b.n	3e00 <usb_isr+0x750>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    4034:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    4036:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    403a:	adds	r2, #1
    403c:	strb	r2, [r5, #0]
    403e:	b.n	3f12 <usb_isr+0x862>
    4040:	cmp	r0, #64	; 0x40
    4042:	mov	ip, r0
    4044:	it	cs
    4046:	movcs.w	ip, #64	; 0x40
    404a:	add.w	r3, r4, ip
    404e:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    4050:	movs	r3, #1
    4052:	rsb	r0, ip, r0
    4056:	mov.w	r8, ip, lsl #16
    405a:	movs	r2, #0
    405c:	str	r3, [sp, #4]
    405e:	b.n	3a90 <usb_isr+0x3e0>

00004060 <usb_init>:
}



void usb_init(void)
{
    4060:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4064:	ldr	r4, [pc, #156]	; (4104 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    4066:	bl	4934 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    406a:	movs	r2, #0
    406c:	add.w	r0, r4, #168	; 0xa8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    4070:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4072:	str	r2, [r3, #0]
		table[i].addr = 0;
    4074:	str	r2, [r3, #4]
    4076:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    4078:	cmp	r3, r0
		table[i].desc = 0;
    407a:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    407e:	bne.n	4072 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4080:	ldr	r0, [pc, #132]	; (4108 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    4082:	ldr	r2, [pc, #136]	; (410c <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4084:	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    4086:	ldr.w	lr, [pc, #156]	; 4124 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    408a:	ldr	r6, [pc, #132]	; (4110 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    408c:	ldr	r5, [pc, #132]	; (4114 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    408e:	ldr	r7, [pc, #136]	; (4118 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    4090:	ldr.w	ip, [pc, #148]	; 4128 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    4094:	ldr.w	r8, [pc, #148]	; 412c <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4098:	orr.w	r3, r3, #262144	; 0x40000
    409c:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    409e:	ldr	r3, [r2, #0]
    40a0:	orr.w	r3, r3, #50331648	; 0x3000000
    40a4:	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    40a6:	movs	r3, #3
    40a8:	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    40ac:	movs	r3, #160	; 0xa0
    40ae:	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    40b0:	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    40b4:	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    40b8:	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    40bc:	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    40be:	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    40c0:	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    40c4:	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    40c6:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    40c8:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    40ca:	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    40cc:	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    40ce:	ldr	r5, [pc, #76]	; (411c <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    40d0:	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    40d4:	ldr	r0, [pc, #72]	; (4120 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    40d6:	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    40da:	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    40dc:	movs	r3, #1
    40de:	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    40e2:	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    40e6:	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    40ea:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    40ec:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    40ee:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    40f2:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    40f4:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    40f6:	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    40fa:	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    40fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4102:	nop
    4104:	.word	0x1fff0000
    4108:	.word	0x40048034
    410c:	.word	0x4000d800
    4110:	.word	0x40072140
    4114:	.word	0x4007209c
    4118:	.word	0x400720b0
    411c:	.word	0xe000e435
    4120:	.word	0xe000e104
    4124:	.word	0x40072144
    4128:	.word	0x40072080
    412c:	.word	0x40072088

00004130 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    4130:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    4132:	ldr	r4, [pc, #176]	; (41e4 <yield+0xb4>)
    4134:	ldrb	r3, [r4, #0]
    4136:	cbz	r3, 413a <yield+0xa>
    4138:	pop	{r3, r4, r5, pc}
	running = 1;
    413a:	movs	r3, #1
    413c:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    413e:	bl	265c <usb_serial_available>
	if (Serial.available()) serialEvent();
    4142:	cmp	r0, #0
    4144:	bne.n	41cc <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    4146:	bl	4704 <serial_available>
	if (Serial1.available()) serialEvent1();
    414a:	cmp	r0, #0
    414c:	bne.n	41c6 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    414e:	bl	43ec <serial2_available>
	if (Serial2.available()) serialEvent2();
    4152:	cmp	r0, #0
    4154:	bne.n	41c0 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    4156:	bl	4a04 <serial3_available>
	if (Serial3.available()) serialEvent3();
    415a:	cbnz	r0, 41ba <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    415c:	bl	4518 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    4160:	cbnz	r0, 41b4 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    4162:	bl	42f4 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    4166:	cbnz	r0, 41ae <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    4168:	bl	4830 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    416c:	cbnz	r0, 41a8 <yield+0x78>
#endif
	running = 0;
    416e:	movs	r3, #0
    4170:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    4172:	mrs	r3, IPSR
		if (ipsr != 0) return;
    4176:	cmp	r3, #0
    4178:	bne.n	4138 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    417a:	mrs	r1, PRIMASK
		__disable_irq();
    417e:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    4180:	ldr	r3, [pc, #100]	; (41e8 <yield+0xb8>)
    4182:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    4184:	cbz	r0, 41d2 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    4186:	ldr	r4, [pc, #100]	; (41ec <yield+0xbc>)
    4188:	ldrb	r2, [r4, #0]
    418a:	cbnz	r2, 41d2 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    418c:	ldr	r5, [r0, #20]
    418e:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    4190:	movs	r3, #1
    4192:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    4194:	cbz	r5, 41da <yield+0xaa>
			firstYield->_prev = nullptr;
    4196:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4198:	cbnz	r1, 419c <yield+0x6c>
    419a:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    419c:	movs	r5, #0
    419e:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    41a0:	ldr	r3, [r0, #8]
    41a2:	blx	r3
		runningFromYield = false;
    41a4:	strb	r5, [r4, #0]
    41a6:	b.n	4138 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    41a8:	bl	42ec <serialEvent6()>
    41ac:	b.n	416e <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    41ae:	bl	41f4 <serialEvent5()>
    41b2:	b.n	4168 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    41b4:	bl	42d8 <serialEvent4()>
    41b8:	b.n	4162 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    41ba:	bl	4b00 <serialEvent3()>
    41be:	b.n	415c <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    41c0:	bl	42d4 <serialEvent2()>
    41c4:	b.n	4156 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    41c6:	bl	4afc <serialEvent1()>
    41ca:	b.n	414e <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    41cc:	bl	4220 <serialEvent()>
    41d0:	b.n	4146 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    41d2:	cmp	r1, #0
    41d4:	bne.n	4138 <yield+0x8>
    41d6:	cpsie	i
    41d8:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    41da:	ldr	r3, [pc, #20]	; (41f0 <yield+0xc0>)
    41dc:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    41de:	cmp	r1, #0
    41e0:	bne.n	419c <yield+0x6c>
    41e2:	b.n	419a <yield+0x6a>
    41e4:	.word	0x1fff1a59
    41e8:	.word	0x1fff1d6c
    41ec:	.word	0x1fff1d70
    41f0:	.word	0x1fff1d68

000041f4 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    41f4:	bx	lr
    41f6:	nop

000041f8 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    41f8:	b.w	2678 <usb_serial_flush_input>

000041fc <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    41fc:	b.w	262c <usb_serial_peekchar>

00004200 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    4200:	b.w	25e4 <usb_serial_getchar>

00004204 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4204:	b.w	265c <usb_serial_available>

00004208 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    4208:	b.w	2818 <usb_serial_flush_output>

0000420c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    420c:	b.w	27d0 <usb_serial_write_buffer_free>

00004210 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4210:	mov	r0, r1
    4212:	mov	r1, r2
    4214:	b.w	26b0 <usb_serial_write>

00004218 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4218:	mov	r0, r1
    421a:	b.w	27b8 <usb_serial_putchar>
    421e:	nop

00004220 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    4220:	bx	lr
    4222:	nop

00004224 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4224:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    4226:	ldr	r2, [pc, #24]	; (4240 <Print::println()+0x1c>)
	return write(buf, 2);
    4228:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    422a:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    422c:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    422e:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    4230:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    4232:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    4236:	movs	r2, #2
    4238:	blx	r3
}
    423a:	add	sp, #12
    423c:	ldr.w	pc, [sp], #4
    4240:	.word	0x00005938

00004244 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    4244:	push	{r4, r5, r6, r7, lr}
    4246:	mov	r7, r0
    4248:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    424a:	cmp	r2, #0
    424c:	beq.n	42b6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    424e:	cmp	r2, #1
    4250:	it	eq
    4252:	moveq	r2, #10
	}


	if (n == 0) {
    4254:	cbz	r1, 42ac <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    4256:	movs	r4, #33	; 0x21
    4258:	b.n	425c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    425a:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    425c:	udiv	r5, r1, r2
    4260:	mls	r1, r2, r5, r1
    4264:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4266:	cmp	r1, #9
    4268:	add.w	r1, r0, #48	; 0x30
    426c:	it	ls
    426e:	uxtbls	r0, r1
    4270:	add	r1, sp, #40	; 0x28
    4272:	it	hi
    4274:	addhi	r0, #55	; 0x37
    4276:	add	r1, r4
    4278:	it	hi
    427a:	uxtbhi	r0, r0
    427c:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    4280:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    4282:	mov	r1, r5
    4284:	cmp	r5, #0
    4286:	bne.n	425a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    4288:	cbz	r3, 4298 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    428a:	subs	r4, #1
    428c:	uxtb	r4, r4
		buf[i] = '-';
    428e:	add	r3, sp, #40	; 0x28
    4290:	add	r3, r4
    4292:	movs	r2, #45	; 0x2d
    4294:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    4298:	ldr	r3, [r7, #0]
    429a:	add	r2, sp, #4
    429c:	adds	r1, r2, r4
    429e:	ldr	r3, [r3, #4]
    42a0:	mov	r0, r7
    42a2:	rsb	r2, r4, #34	; 0x22
    42a6:	blx	r3
}
    42a8:	add	sp, #44	; 0x2c
    42aa:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    42ac:	movs	r2, #48	; 0x30
    42ae:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    42b2:	movs	r4, #33	; 0x21
    42b4:	b.n	4288 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    42b6:	ldr	r3, [r0, #0]
    42b8:	uxtb	r1, r1
    42ba:	ldr	r3, [r3, #0]
    42bc:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    42be:	add	sp, #44	; 0x2c
    42c0:	pop	{r4, r5, r6, r7, pc}
    42c2:	nop

000042c4 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    42c4:	cmp	r1, #0
		sign = '-';
		n = -n;
    42c6:	itte	lt
    42c8:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    42ca:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    42cc:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    42ce:	movs	r2, #10
    42d0:	b.w	4244 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000042d4 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    42d4:	bx	lr
    42d6:	nop

000042d8 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    42d8:	bx	lr
    42da:	nop

000042dc <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    42dc:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    42de:	bl	4c4 <setup>
	while (1) {
		loop();
    42e2:	bl	4c8 <loop>
		yield();
    42e6:	bl	4130 <yield>
    42ea:	b.n	42e2 <main+0x6>

000042ec <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    42ec:	bx	lr
    42ee:	nop

000042f0 <operator new(unsigned int)>:
    42f0:	b.w	4d54 <malloc>

000042f4 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    42f4:	ldr	r2, [pc, #20]	; (430c <serial5_available+0x18>)
	tail = rx_buffer_tail;
    42f6:	ldr	r3, [pc, #24]	; (4310 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    42f8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    42fa:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    42fc:	uxtb	r0, r0
	tail = rx_buffer_tail;
    42fe:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4300:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    4302:	it	cc
    4304:	addcc	r0, #64	; 0x40
    4306:	subs	r0, r0, r3
}
    4308:	bx	lr
    430a:	nop
    430c:	.word	0x1fff1a60
    4310:	.word	0x1fff1a61

00004314 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    4314:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    4316:	ldr	r3, [pc, #172]	; (43c4 <uart4_status_isr+0xb0>)
    4318:	ldrb	r2, [r3, #4]
    431a:	lsls	r4, r2, #26
    431c:	bpl.n	435e <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    431e:	ldr	r0, [pc, #168]	; (43c8 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    4320:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    4322:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4324:	ldr	r1, [pc, #164]	; (43cc <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    4326:	adds	r3, #1
    4328:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    432a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    432c:	it	gt
    432e:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4330:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    4332:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4334:	beq.n	433e <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    4336:	ldr	r4, [pc, #152]	; (43d0 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    4338:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    433a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    433c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    433e:	ldr	r2, [pc, #148]	; (43d4 <uart4_status_isr+0xc0>)
    4340:	ldr	r1, [r2, #0]
    4342:	cbz	r1, 435e <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4344:	ldr	r2, [pc, #144]	; (43d8 <uart4_status_isr+0xc4>)
    4346:	ldrb	r2, [r2, #0]
    4348:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    434a:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    434c:	itet	cc
    434e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    4352:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    4354:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4356:	cmp	r3, #39	; 0x27
    4358:	itt	gt
    435a:	movgt	r3, #1
    435c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    435e:	ldr	r2, [pc, #100]	; (43c4 <uart4_status_isr+0xb0>)
    4360:	ldrb	r3, [r2, #3]
    4362:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    4364:	lsls	r0, r3, #24
    4366:	bmi.n	438c <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    4368:	lsls	r2, r3, #25
    436a:	bpl.n	4388 <uart4_status_isr+0x74>
    436c:	ldr	r3, [pc, #84]	; (43c4 <uart4_status_isr+0xb0>)
    436e:	ldrb	r3, [r3, #4]
    4370:	lsls	r3, r3, #25
    4372:	bpl.n	4388 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4374:	ldr	r3, [pc, #100]	; (43dc <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    4376:	ldr	r1, [pc, #104]	; (43e0 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4378:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    437a:	movs	r2, #0
    437c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    437e:	cbz	r3, 4382 <uart4_status_isr+0x6e>
    4380:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    4382:	ldr	r3, [pc, #64]	; (43c4 <uart4_status_isr+0xb0>)
    4384:	movs	r2, #44	; 0x2c
    4386:	strb	r2, [r3, #3]
	}
}
    4388:	pop	{r4, r5}
    438a:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    438c:	ldrb	r1, [r2, #4]
    438e:	lsls	r1, r1, #24
    4390:	bpl.n	4368 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    4392:	ldr	r1, [pc, #80]	; (43e4 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    4394:	ldr	r0, [pc, #64]	; (43d8 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4396:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4398:	ldrb	r1, [r0, #0]
    439a:	uxtb	r1, r1
		if (head == tail) {
    439c:	cmp	r4, r1
    439e:	beq.n	43bc <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    43a0:	adds	r2, r1, #1
    43a2:	cmp	r2, #39	; 0x27
    43a4:	itt	hi
    43a6:	movhi	r1, #0
    43a8:	movhi	r2, r1
			n = tx_buffer[tail];
    43aa:	ldr	r5, [pc, #60]	; (43e8 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    43ac:	ldr	r4, [pc, #20]	; (43c4 <uart4_status_isr+0xb0>)
    43ae:	it	ls
    43b0:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    43b2:	ldrb	r2, [r5, r2]
    43b4:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    43b6:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    43b8:	strb	r1, [r0, #0]
    43ba:	b.n	4368 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    43bc:	movs	r1, #108	; 0x6c
    43be:	strb	r1, [r2, #3]
    43c0:	b.n	4368 <uart4_status_isr+0x54>
    43c2:	nop
    43c4:	.word	0x400ea000
    43c8:	.word	0x1fff1a60
    43cc:	.word	0x1fff1a61
    43d0:	.word	0x1fff1a8c
    43d4:	.word	0x1fff1a5c
    43d8:	.word	0x1fff1acd
    43dc:	.word	0x1fff1ad0
    43e0:	.word	0x1fff1acc
    43e4:	.word	0x1fff1ad4
    43e8:	.word	0x1fff1a64

000043ec <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    43ec:	ldr	r2, [pc, #20]	; (4404 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    43ee:	ldr	r3, [pc, #24]	; (4408 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    43f0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    43f2:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    43f4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    43f6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    43f8:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    43fa:	it	cc
    43fc:	addcc	r0, #64	; 0x40
    43fe:	subs	r0, r0, r3
}
    4400:	bx	lr
    4402:	nop
    4404:	.word	0x1fff1b48
    4408:	.word	0x1fff1add

0000440c <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    440c:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    440e:	ldr	r3, [pc, #224]	; (44f0 <uart1_status_isr+0xe4>)
    4410:	ldrb	r2, [r3, #4]
    4412:	tst.w	r2, #48	; 0x30
    4416:	beq.n	4472 <uart1_status_isr+0x66>
		__disable_irq();
    4418:	cpsid	i
		avail = UART1_RCFIFO;
    441a:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    441c:	and.w	r2, r1, #255	; 0xff
    4420:	cmp	r1, #0
    4422:	beq.n	44a0 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    4424:	cpsie	i
			head = rx_buffer_head;
    4426:	ldr	r7, [pc, #204]	; (44f4 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4428:	ldr	r1, [pc, #204]	; (44f8 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    442a:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    442c:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    442e:	ldr	r6, [pc, #204]	; (44fc <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    4430:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4432:	uxtb	r0, r0
			tail = rx_buffer_tail;
    4434:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    4436:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    4438:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    443a:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    443c:	it	cs
    443e:	movcs	r3, #0
				if (newhead != tail) {
    4440:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    4442:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    4446:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4448:	itt	ne
    444a:	strbne	r1, [r6, r3]
    444c:	movne	r0, r3
				}
			} while (--avail > 0);
    444e:	ands.w	r2, r2, #255	; 0xff
    4452:	bne.n	4436 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    4454:	ldr	r3, [pc, #168]	; (4500 <uart1_status_isr+0xf4>)
    4456:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4458:	uxtb	r2, r0
    445a:	strb	r2, [r7, #0]
			if (rts_pin) {
    445c:	cbz	r3, 4472 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    445e:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    4460:	itet	cc
    4462:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    4466:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    4468:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    446a:	cmp	r0, #39	; 0x27
    446c:	itt	gt
    446e:	movgt	r2, #1
    4470:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    4472:	ldr	r1, [pc, #124]	; (44f0 <uart1_status_isr+0xe4>)
    4474:	ldrb	r2, [r1, #3]
    4476:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    4478:	lsls	r5, r2, #24
    447a:	bmi.n	44aa <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    447c:	lsls	r2, r2, #25
    447e:	bpl.n	449c <uart1_status_isr+0x90>
    4480:	ldr	r3, [pc, #108]	; (44f0 <uart1_status_isr+0xe4>)
    4482:	ldrb	r3, [r3, #4]
    4484:	lsls	r3, r3, #25
    4486:	bpl.n	449c <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4488:	ldr	r3, [pc, #120]	; (4504 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    448a:	ldr	r1, [pc, #124]	; (4508 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    448c:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    448e:	movs	r2, #0
    4490:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4492:	cbz	r3, 4496 <uart1_status_isr+0x8a>
    4494:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    4496:	ldr	r3, [pc, #88]	; (44f0 <uart1_status_isr+0xe4>)
    4498:	movs	r2, #60	; 0x3c
    449a:	strb	r2, [r3, #3]
	}
}
    449c:	pop	{r4, r5, r6, r7}
    449e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    44a0:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    44a2:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    44a4:	strb	r2, [r3, #17]
			__enable_irq();
    44a6:	cpsie	i
    44a8:	b.n	4472 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    44aa:	ldrb	r3, [r1, #4]
    44ac:	lsls	r4, r3, #24
    44ae:	bpl.n	447c <uart1_status_isr+0x70>
		head = tx_buffer_head;
    44b0:	ldr	r3, [pc, #88]	; (450c <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    44b2:	ldr	r6, [pc, #92]	; (4510 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    44b4:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    44b6:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    44b8:	uxtb	r4, r4
		tail = tx_buffer_tail;
    44ba:	uxtb	r3, r3
		do {
			if (tail == head) break;
    44bc:	cmp	r4, r3
    44be:	beq.n	44de <uart1_status_isr+0xd2>
    44c0:	ldr	r5, [pc, #80]	; (4514 <uart1_status_isr+0x108>)
    44c2:	b.n	44c8 <uart1_status_isr+0xbc>
    44c4:	cmp	r3, r4
    44c6:	beq.n	44de <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    44c8:	adds	r3, #1
    44ca:	cmp	r3, #40	; 0x28
    44cc:	it	cs
    44ce:	movcs	r3, #0
			avail = UART1_S1;
    44d0:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    44d2:	ldrb	r0, [r5, r3]
    44d4:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    44d6:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    44d8:	ldrb	r0, [r1, #20]
    44da:	cmp	r0, #7
    44dc:	bls.n	44c4 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    44de:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    44e0:	ldr	r1, [pc, #12]	; (44f0 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    44e2:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    44e4:	ldrb	r3, [r1, #4]
    44e6:	lsls	r0, r3, #24
    44e8:	itt	mi
    44ea:	movmi	r3, #124	; 0x7c
    44ec:	strbmi	r3, [r1, #3]
    44ee:	b.n	447c <uart1_status_isr+0x70>
    44f0:	.word	0x4006b000
    44f4:	.word	0x1fff1b48
    44f8:	.word	0x1fff1add
    44fc:	.word	0x1fff1b08
    4500:	.word	0x1fff1ad8
    4504:	.word	0x1fff1b4c
    4508:	.word	0x1fff1adc
    450c:	.word	0x1fff1b50
    4510:	.word	0x1fff1b49
    4514:	.word	0x1fff1ae0

00004518 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4518:	ldr	r2, [pc, #20]	; (4530 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    451a:	ldr	r3, [pc, #24]	; (4534 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    451c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    451e:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4520:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4522:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4524:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    4526:	it	cc
    4528:	addcc	r0, #64	; 0x40
    452a:	subs	r0, r0, r3
}
    452c:	bx	lr
    452e:	nop
    4530:	.word	0x1fff1b58
    4534:	.word	0x1fff1b59

00004538 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    4538:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    453a:	ldr	r3, [pc, #172]	; (45e8 <uart3_status_isr+0xb0>)
    453c:	ldrb	r2, [r3, #4]
    453e:	lsls	r4, r2, #26
    4540:	bpl.n	4582 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    4542:	ldr	r0, [pc, #168]	; (45ec <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    4544:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    4546:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4548:	ldr	r1, [pc, #164]	; (45f0 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    454a:	adds	r3, #1
    454c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    454e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    4550:	it	gt
    4552:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4554:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    4556:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4558:	beq.n	4562 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    455a:	ldr	r4, [pc, #152]	; (45f4 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    455c:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    455e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4560:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4562:	ldr	r2, [pc, #148]	; (45f8 <uart3_status_isr+0xc0>)
    4564:	ldr	r1, [r2, #0]
    4566:	cbz	r1, 4582 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4568:	ldr	r2, [pc, #144]	; (45fc <uart3_status_isr+0xc4>)
    456a:	ldrb	r2, [r2, #0]
    456c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    456e:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    4570:	itet	cc
    4572:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    4576:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    4578:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    457a:	cmp	r3, #39	; 0x27
    457c:	itt	gt
    457e:	movgt	r3, #1
    4580:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    4582:	ldr	r2, [pc, #100]	; (45e8 <uart3_status_isr+0xb0>)
    4584:	ldrb	r3, [r2, #3]
    4586:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    4588:	lsls	r0, r3, #24
    458a:	bmi.n	45b0 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    458c:	lsls	r2, r3, #25
    458e:	bpl.n	45ac <uart3_status_isr+0x74>
    4590:	ldr	r3, [pc, #84]	; (45e8 <uart3_status_isr+0xb0>)
    4592:	ldrb	r3, [r3, #4]
    4594:	lsls	r3, r3, #25
    4596:	bpl.n	45ac <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4598:	ldr	r3, [pc, #100]	; (4600 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    459a:	ldr	r1, [pc, #104]	; (4604 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    459c:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    459e:	movs	r2, #0
    45a0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    45a2:	cbz	r3, 45a6 <uart3_status_isr+0x6e>
    45a4:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    45a6:	ldr	r3, [pc, #64]	; (45e8 <uart3_status_isr+0xb0>)
    45a8:	movs	r2, #44	; 0x2c
    45aa:	strb	r2, [r3, #3]
	}
}
    45ac:	pop	{r4, r5}
    45ae:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    45b0:	ldrb	r1, [r2, #4]
    45b2:	lsls	r1, r1, #24
    45b4:	bpl.n	458c <uart3_status_isr+0x54>
		head = tx_buffer_head;
    45b6:	ldr	r1, [pc, #80]	; (4608 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    45b8:	ldr	r0, [pc, #64]	; (45fc <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    45ba:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    45bc:	ldrb	r1, [r0, #0]
    45be:	uxtb	r1, r1
		if (head == tail) {
    45c0:	cmp	r4, r1
    45c2:	beq.n	45e0 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    45c4:	adds	r2, r1, #1
    45c6:	cmp	r2, #39	; 0x27
    45c8:	itt	hi
    45ca:	movhi	r1, #0
    45cc:	movhi	r2, r1
			n = tx_buffer[tail];
    45ce:	ldr	r5, [pc, #60]	; (460c <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    45d0:	ldr	r4, [pc, #20]	; (45e8 <uart3_status_isr+0xb0>)
    45d2:	it	ls
    45d4:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    45d6:	ldrb	r2, [r5, r2]
    45d8:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    45da:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    45dc:	strb	r1, [r0, #0]
    45de:	b.n	458c <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    45e0:	movs	r1, #108	; 0x6c
    45e2:	strb	r1, [r2, #3]
    45e4:	b.n	458c <uart3_status_isr+0x54>
    45e6:	nop
    45e8:	.word	0x4006d000
    45ec:	.word	0x1fff1b58
    45f0:	.word	0x1fff1b59
    45f4:	.word	0x1fff1b84
    45f8:	.word	0x1fff1b54
    45fc:	.word	0x1fff1bc5
    4600:	.word	0x1fff1bc8
    4604:	.word	0x1fff1bc4
    4608:	.word	0x1fff1bcc
    460c:	.word	0x1fff1b5c

00004610 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    4610:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    4612:	ldr	r4, [pc, #64]	; (4654 <fault_isr+0x44>)
    4614:	b.n	4628 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    4616:	ldr	r3, [r4, #0]
    4618:	lsls	r1, r3, #21
    461a:	bmi.n	4638 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    461c:	ldr	r3, [r4, #0]
    461e:	lsls	r2, r3, #20
    4620:	bmi.n	4642 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    4622:	ldr	r3, [r4, #0]
    4624:	lsls	r3, r3, #19
    4626:	bmi.n	464c <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    4628:	ldr	r3, [r4, #0]
    462a:	lsls	r0, r3, #13
    462c:	bpl.n	4616 <fault_isr+0x6>
    462e:	bl	36b0 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    4632:	ldr	r3, [r4, #0]
    4634:	lsls	r1, r3, #21
    4636:	bpl.n	461c <fault_isr+0xc>
    4638:	bl	4724 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    463c:	ldr	r3, [r4, #0]
    463e:	lsls	r2, r3, #20
    4640:	bpl.n	4622 <fault_isr+0x12>
    4642:	bl	440c <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    4646:	ldr	r3, [r4, #0]
    4648:	lsls	r3, r3, #19
    464a:	bpl.n	4628 <fault_isr+0x18>
    464c:	bl	4a24 <uart2_status_isr>
    4650:	b.n	4628 <fault_isr+0x18>
    4652:	nop
    4654:	.word	0x40048034

00004658 <unused_isr>:
	}
}

void unused_isr(void)
{
    4658:	push	{r3, lr}
	fault_isr();
    465a:	bl	4610 <fault_isr>
    465e:	nop

00004660 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    4660:	ldr	r3, [pc, #4]	; (4668 <startup_early_hook+0x8>)
    4662:	movs	r2, #16
    4664:	strh	r2, [r3, #0]
    4666:	bx	lr
    4668:	.word	0x40052000

0000466c <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    466c:	bx	lr
    466e:	nop

00004670 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    4670:	ldr	r1, [pc, #36]	; (4698 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    4672:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    4674:	ldr	r3, [r1, #0]
	if (incr != 0) {
    4676:	cbz	r0, 4686 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    4678:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    467a:	add	r0, r3
    467c:	sub.w	r2, r2, #8192	; 0x2000
    4680:	cmp	r0, r2
    4682:	bcs.n	468a <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    4684:	str	r0, [r1, #0]
	}
	return prev;
    4686:	mov	r0, r3
}
    4688:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    468a:	bl	4cf8 <__errno>
    468e:	movs	r3, #12
    4690:	str	r3, [r0, #0]
			return (void *)-1;
    4692:	mov.w	r0, #4294967295
    4696:	pop	{r3, pc}
    4698:	.word	0x1fff0c80

0000469c <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    469c:	ldr	r2, [pc, #32]	; (46c0 <kinetis_hsrun_disable+0x24>)
    469e:	ldrb	r3, [r2, #0]
    46a0:	cmp	r3, #128	; 0x80
    46a2:	beq.n	46a8 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    46a4:	movs	r0, #0
}
    46a6:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    46a8:	ldr	r1, [pc, #24]	; (46c4 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    46aa:	ldr	r3, [pc, #28]	; (46c8 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    46ac:	ldr	r0, [pc, #28]	; (46cc <kinetis_hsrun_disable+0x30>)
    46ae:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    46b0:	movs	r1, #0
    46b2:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    46b4:	ldrb	r3, [r2, #0]
    46b6:	cmp	r3, #128	; 0x80
    46b8:	beq.n	46b4 <kinetis_hsrun_disable+0x18>
		return 1;
    46ba:	movs	r0, #1
    46bc:	bx	lr
    46be:	nop
    46c0:	.word	0x4007e003
    46c4:	.word	0x40048044
    46c8:	.word	0x4007e001
    46cc:	.word	0x22280000

000046d0 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    46d0:	ldr	r2, [pc, #36]	; (46f8 <kinetis_hsrun_enable+0x28>)
    46d2:	ldrb	r3, [r2, #0]
    46d4:	cmp	r3, #1
    46d6:	beq.n	46dc <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    46d8:	movs	r0, #0
}
    46da:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    46dc:	add.w	r3, r3, #1073741824	; 0x40000000
    46e0:	add.w	r3, r3, #516096	; 0x7e000
    46e4:	movs	r1, #96	; 0x60
    46e6:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    46e8:	ldrb	r3, [r2, #0]
    46ea:	cmp	r3, #128	; 0x80
    46ec:	bne.n	46e8 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    46ee:	ldr	r3, [pc, #12]	; (46fc <kinetis_hsrun_enable+0x2c>)
    46f0:	ldr	r2, [pc, #12]	; (4700 <kinetis_hsrun_enable+0x30>)
    46f2:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    46f4:	movs	r0, #1
    46f6:	bx	lr
    46f8:	.word	0x4007e003
    46fc:	.word	0x40048044
    4700:	.word	0x02060000

00004704 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4704:	ldr	r2, [pc, #20]	; (471c <serial_available+0x18>)
	tail = rx_buffer_tail;
    4706:	ldr	r3, [pc, #24]	; (4720 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4708:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    470a:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    470c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    470e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4710:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    4712:	it	cc
    4714:	addcc	r0, #64	; 0x40
    4716:	subs	r0, r0, r3
}
    4718:	bx	lr
    471a:	nop
    471c:	.word	0x1fff1bd4
    4720:	.word	0x1fff1bd5

00004724 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    4724:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    4726:	ldr	r3, [pc, #224]	; (4808 <uart0_status_isr+0xe4>)
    4728:	ldrb	r2, [r3, #4]
    472a:	tst.w	r2, #48	; 0x30
    472e:	beq.n	478a <uart0_status_isr+0x66>
		__disable_irq();
    4730:	cpsid	i
		avail = UART0_RCFIFO;
    4732:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    4734:	and.w	r2, r1, #255	; 0xff
    4738:	cmp	r1, #0
    473a:	beq.n	47b8 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    473c:	cpsie	i
			head = rx_buffer_head;
    473e:	ldr	r7, [pc, #204]	; (480c <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4740:	ldr	r1, [pc, #204]	; (4810 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4742:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    4744:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4746:	ldr	r6, [pc, #204]	; (4814 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4748:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    474a:	uxtb	r0, r0
			tail = rx_buffer_tail;
    474c:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    474e:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4750:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4752:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4754:	it	cs
    4756:	movcs	r3, #0
				if (newhead != tail) {
    4758:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    475a:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    475e:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4760:	itt	ne
    4762:	strbne	r1, [r6, r3]
    4764:	movne	r0, r3
				}
			} while (--avail > 0);
    4766:	ands.w	r2, r2, #255	; 0xff
    476a:	bne.n	474e <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    476c:	ldr	r3, [pc, #168]	; (4818 <uart0_status_isr+0xf4>)
    476e:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4770:	uxtb	r2, r0
    4772:	strb	r2, [r7, #0]
			if (rts_pin) {
    4774:	cbz	r3, 478a <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    4776:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4778:	itet	cc
    477a:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    477e:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4780:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4782:	cmp	r0, #39	; 0x27
    4784:	itt	gt
    4786:	movgt	r2, #1
    4788:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    478a:	ldr	r1, [pc, #124]	; (4808 <uart0_status_isr+0xe4>)
    478c:	ldrb	r2, [r1, #3]
    478e:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4790:	lsls	r5, r2, #24
    4792:	bmi.n	47c2 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    4794:	lsls	r2, r2, #25
    4796:	bpl.n	47b4 <uart0_status_isr+0x90>
    4798:	ldr	r3, [pc, #108]	; (4808 <uart0_status_isr+0xe4>)
    479a:	ldrb	r3, [r3, #4]
    479c:	lsls	r3, r3, #25
    479e:	bpl.n	47b4 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    47a0:	ldr	r3, [pc, #120]	; (481c <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    47a2:	ldr	r1, [pc, #124]	; (4820 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    47a4:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    47a6:	movs	r2, #0
    47a8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    47aa:	cbz	r3, 47ae <uart0_status_isr+0x8a>
    47ac:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    47ae:	ldr	r3, [pc, #88]	; (4808 <uart0_status_isr+0xe4>)
    47b0:	movs	r2, #60	; 0x3c
    47b2:	strb	r2, [r3, #3]
	}
}
    47b4:	pop	{r4, r5, r6, r7}
    47b6:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    47b8:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    47ba:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    47bc:	strb	r2, [r3, #17]
			__enable_irq();
    47be:	cpsie	i
    47c0:	b.n	478a <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    47c2:	ldrb	r3, [r1, #4]
    47c4:	lsls	r4, r3, #24
    47c6:	bpl.n	4794 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    47c8:	ldr	r3, [pc, #88]	; (4824 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    47ca:	ldr	r6, [pc, #92]	; (4828 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    47cc:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    47ce:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    47d0:	uxtb	r4, r4
		tail = tx_buffer_tail;
    47d2:	uxtb	r3, r3
		do {
			if (tail == head) break;
    47d4:	cmp	r4, r3
    47d6:	beq.n	47f6 <uart0_status_isr+0xd2>
    47d8:	ldr	r5, [pc, #80]	; (482c <uart0_status_isr+0x108>)
    47da:	b.n	47e0 <uart0_status_isr+0xbc>
    47dc:	cmp	r3, r4
    47de:	beq.n	47f6 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    47e0:	adds	r3, #1
    47e2:	cmp	r3, #64	; 0x40
    47e4:	it	cs
    47e6:	movcs	r3, #0
			avail = UART0_S1;
    47e8:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    47ea:	ldrb	r0, [r5, r3]
    47ec:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    47ee:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    47f0:	ldrb	r0, [r1, #20]
    47f2:	cmp	r0, #7
    47f4:	bls.n	47dc <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    47f6:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    47f8:	ldr	r1, [pc, #12]	; (4808 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    47fa:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    47fc:	ldrb	r3, [r1, #4]
    47fe:	lsls	r0, r3, #24
    4800:	itt	mi
    4802:	movmi	r3, #124	; 0x7c
    4804:	strbmi	r3, [r1, #3]
    4806:	b.n	4794 <uart0_status_isr+0x70>
    4808:	.word	0x4006a000
    480c:	.word	0x1fff1bd4
    4810:	.word	0x1fff1bd5
    4814:	.word	0x1fff1c18
    4818:	.word	0x1fff1bd0
    481c:	.word	0x1fff1c5c
    4820:	.word	0x1fff1c58
    4824:	.word	0x1fff1c60
    4828:	.word	0x1fff1c59
    482c:	.word	0x1fff1bd8

00004830 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4830:	ldr	r2, [pc, #20]	; (4848 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    4832:	ldr	r3, [pc, #24]	; (484c <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4834:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4836:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4838:	uxtb	r0, r0
	tail = rx_buffer_tail;
    483a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    483c:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    483e:	it	cc
    4840:	addcc	r0, #64	; 0x40
    4842:	subs	r0, r0, r3
}
    4844:	bx	lr
    4846:	nop
    4848:	.word	0x1fff1c68
    484c:	.word	0x1fff1c69

00004850 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    4850:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    4852:	ldr	r3, [pc, #176]	; (4904 <lpuart0_status_isr+0xb4>)
    4854:	ldr	r2, [r3, #4]
    4856:	lsls	r4, r2, #10
    4858:	bpl.n	489a <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    485a:	ldr	r0, [pc, #172]	; (4908 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    485c:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    485e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4860:	ldr	r1, [pc, #168]	; (490c <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4862:	adds	r3, #1
    4864:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4866:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    4868:	it	gt
    486a:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    486c:	cmp	r3, r1
    486e:	beq.n	487a <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    4870:	ldr	r4, [pc, #156]	; (4910 <lpuart0_status_isr+0xc0>)
    4872:	uxtb	r2, r2
			rx_buffer_head = head;
    4874:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4876:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4878:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    487a:	ldr	r2, [pc, #152]	; (4914 <lpuart0_status_isr+0xc4>)
    487c:	ldr	r1, [r2, #0]
    487e:	cbz	r1, 489a <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4880:	ldr	r2, [pc, #148]	; (4918 <lpuart0_status_isr+0xc8>)
    4882:	ldrb	r2, [r2, #0]
    4884:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4886:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    4888:	itet	cc
    488a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    488e:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    4890:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4892:	cmp	r3, #39	; 0x27
    4894:	itt	gt
    4896:	movgt	r3, #1
    4898:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    489a:	ldr	r2, [pc, #104]	; (4904 <lpuart0_status_isr+0xb4>)
    489c:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    489e:	lsls	r0, r3, #8
    48a0:	bpl.n	48a8 <lpuart0_status_isr+0x58>
    48a2:	ldr	r2, [r2, #4]
    48a4:	lsls	r1, r2, #8
    48a6:	bmi.n	48cc <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    48a8:	lsls	r2, r3, #9
    48aa:	bpl.n	48c8 <lpuart0_status_isr+0x78>
    48ac:	ldr	r3, [pc, #84]	; (4904 <lpuart0_status_isr+0xb4>)
    48ae:	ldr	r3, [r3, #4]
    48b0:	lsls	r3, r3, #9
    48b2:	bpl.n	48c8 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    48b4:	ldr	r3, [pc, #100]	; (491c <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    48b6:	ldr	r1, [pc, #104]	; (4920 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    48b8:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    48ba:	movs	r2, #0
    48bc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    48be:	cbz	r3, 48c2 <lpuart0_status_isr+0x72>
    48c0:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    48c2:	ldr	r3, [pc, #96]	; (4924 <lpuart0_status_isr+0xd4>)
    48c4:	movs	r2, #0
    48c6:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    48c8:	pop	{r4, r5}
    48ca:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    48cc:	ldr	r2, [pc, #88]	; (4928 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    48ce:	ldr	r1, [pc, #72]	; (4918 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    48d0:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    48d2:	ldrb	r2, [r1, #0]
    48d4:	uxtb	r2, r2
		if (head == tail) {
    48d6:	cmp	r0, r2
    48d8:	beq.n	48f6 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    48da:	adds	r2, #1
    48dc:	cmp	r2, #39	; 0x27
    48de:	itt	hi
    48e0:	movhi	r0, #0
    48e2:	movhi	r2, r0
			n = tx_buffer[tail];
    48e4:	ldr	r5, [pc, #68]	; (492c <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    48e6:	ldr	r4, [pc, #28]	; (4904 <lpuart0_status_isr+0xb4>)
    48e8:	it	ls
    48ea:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    48ec:	ldrb	r2, [r5, r2]
    48ee:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    48f0:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    48f2:	strb	r0, [r1, #0]
    48f4:	b.n	48a8 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    48f6:	ldr	r0, [pc, #56]	; (4930 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    48f8:	ldr	r2, [pc, #40]	; (4924 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    48fa:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    48fc:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    48fe:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    4900:	str	r1, [r2, #0]
    4902:	b.n	48a8 <lpuart0_status_isr+0x58>
    4904:	.word	0x400c4000
    4908:	.word	0x1fff1c68
    490c:	.word	0x1fff1c69
    4910:	.word	0x1fff1c94
    4914:	.word	0x1fff1c64
    4918:	.word	0x1fff1cd5
    491c:	.word	0x1fff1cd8
    4920:	.word	0x1fff1cd4
    4924:	.word	0x43880158
    4928:	.word	0x1fff1cdc
    492c:	.word	0x1fff1c6c
    4930:	.word	0x4388015c

00004934 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    4934:	push	{r4, lr}
    4936:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    4938:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    493a:	bl	469c <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    493e:	ldr	r2, [pc, #96]	; (49a0 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4940:	ldr	r3, [pc, #96]	; (49a4 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    4942:	ldr	r1, [pc, #100]	; (49a8 <usb_init_serialnumber+0x74>)
    4944:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4946:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    4948:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    494a:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    494c:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    494e:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4950:	ldrb	r3, [r2, #0]
    4952:	lsls	r3, r3, #24
    4954:	bpl.n	4950 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    4956:	ldr	r3, [pc, #84]	; (49ac <usb_init_serialnumber+0x78>)
    4958:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    495a:	bl	46d0 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    495e:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4960:	ldr	r3, [pc, #76]	; (49b0 <usb_init_serialnumber+0x7c>)
    4962:	cmp	r4, r3
    4964:	itt	ls
    4966:	addls.w	r4, r4, r4, lsl #2
    496a:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    496c:	mov	r0, r4
    496e:	ldr	r4, [pc, #68]	; (49b4 <usb_init_serialnumber+0x80>)
    4970:	add	r1, sp, #4
    4972:	movs	r2, #10
    4974:	bl	49b8 <ultoa>
    4978:	add	r1, sp, #4
    497a:	mov	r0, r4
	for (i=0; i<10; i++) {
    497c:	movs	r3, #0
		char c = buf[i];
    497e:	ldrb.w	r2, [r1], #1
    4982:	adds	r3, #1
		if (!c) break;
    4984:	cbz	r2, 4996 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    4986:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4988:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    498c:	bne.n	497e <usb_init_serialnumber+0x4a>
    498e:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4990:	strb	r3, [r4, #0]
}
    4992:	add	sp, #16
    4994:	pop	{r4, pc}
    4996:	lsls	r3, r3, #1
    4998:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    499a:	strb	r3, [r4, #0]
}
    499c:	add	sp, #16
    499e:	pop	{r4, pc}
    49a0:	.word	0x40020004
    49a4:	.word	0x40020000
    49a8:	.word	0x41070000
    49ac:	.word	0x4002000c
    49b0:	.word	0x0098967f
    49b4:	.word	0x1fff0d64

000049b8 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    49b8:	push	{r4, r5, r6, r7}
    49ba:	subs	r5, r1, #1
    49bc:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    49be:	movs	r4, #0
    49c0:	b.n	49c4 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    49c2:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    49c4:	udiv	r3, r0, r2
    49c8:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    49cc:	cmp	r0, #9
    49ce:	add.w	r7, r0, #48	; 0x30
    49d2:	itet	hi
    49d4:	addhi	r0, #55	; 0x37
    49d6:	uxtbls	r0, r7
    49d8:	uxtbhi	r0, r0
    49da:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    49de:	mov	r0, r3
    49e0:	cmp	r3, #0
    49e2:	bne.n	49c2 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    49e4:	adds	r2, r1, r4
    49e6:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    49e8:	cbz	r4, 49fe <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    49ea:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    49ec:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    49f0:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    49f2:	adds	r3, #1
    49f4:	subs	r0, r4, r3
    49f6:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    49f8:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    49fc:	blt.n	49ea <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    49fe:	mov	r0, r1
    4a00:	pop	{r4, r5, r6, r7}
    4a02:	bx	lr

00004a04 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4a04:	ldr	r2, [pc, #20]	; (4a1c <serial3_available+0x18>)
	tail = rx_buffer_tail;
    4a06:	ldr	r3, [pc, #24]	; (4a20 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4a08:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4a0a:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4a0c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4a0e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4a10:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    4a12:	it	cc
    4a14:	addcc	r0, #64	; 0x40
    4a16:	subs	r0, r0, r3
}
    4a18:	bx	lr
    4a1a:	nop
    4a1c:	.word	0x1fff1ce4
    4a20:	.word	0x1fff1ce5

00004a24 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    4a24:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    4a26:	ldr	r3, [pc, #172]	; (4ad4 <uart2_status_isr+0xb0>)
    4a28:	ldrb	r2, [r3, #4]
    4a2a:	lsls	r4, r2, #26
    4a2c:	bpl.n	4a6e <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4a2e:	ldr	r0, [pc, #168]	; (4ad8 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    4a30:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    4a32:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4a34:	ldr	r1, [pc, #164]	; (4adc <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4a36:	adds	r3, #1
    4a38:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4a3a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4a3c:	it	gt
    4a3e:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4a40:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    4a42:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4a44:	beq.n	4a4e <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    4a46:	ldr	r4, [pc, #152]	; (4ae0 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    4a48:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4a4a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4a4c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4a4e:	ldr	r2, [pc, #148]	; (4ae4 <uart2_status_isr+0xc0>)
    4a50:	ldr	r1, [r2, #0]
    4a52:	cbz	r1, 4a6e <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4a54:	ldr	r2, [pc, #144]	; (4ae8 <uart2_status_isr+0xc4>)
    4a56:	ldrb	r2, [r2, #0]
    4a58:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4a5a:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4a5c:	itet	cc
    4a5e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    4a62:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4a64:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4a66:	cmp	r3, #39	; 0x27
    4a68:	itt	gt
    4a6a:	movgt	r3, #1
    4a6c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    4a6e:	ldr	r2, [pc, #100]	; (4ad4 <uart2_status_isr+0xb0>)
    4a70:	ldrb	r3, [r2, #3]
    4a72:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4a74:	lsls	r0, r3, #24
    4a76:	bmi.n	4a9c <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    4a78:	lsls	r2, r3, #25
    4a7a:	bpl.n	4a98 <uart2_status_isr+0x74>
    4a7c:	ldr	r3, [pc, #84]	; (4ad4 <uart2_status_isr+0xb0>)
    4a7e:	ldrb	r3, [r3, #4]
    4a80:	lsls	r3, r3, #25
    4a82:	bpl.n	4a98 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4a84:	ldr	r3, [pc, #100]	; (4aec <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4a86:	ldr	r1, [pc, #104]	; (4af0 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4a88:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4a8a:	movs	r2, #0
    4a8c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4a8e:	cbz	r3, 4a92 <uart2_status_isr+0x6e>
    4a90:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    4a92:	ldr	r3, [pc, #64]	; (4ad4 <uart2_status_isr+0xb0>)
    4a94:	movs	r2, #44	; 0x2c
    4a96:	strb	r2, [r3, #3]
	}
}
    4a98:	pop	{r4, r5}
    4a9a:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4a9c:	ldrb	r1, [r2, #4]
    4a9e:	lsls	r1, r1, #24
    4aa0:	bpl.n	4a78 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    4aa2:	ldr	r1, [pc, #80]	; (4af4 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    4aa4:	ldr	r0, [pc, #64]	; (4ae8 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4aa6:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4aa8:	ldrb	r1, [r0, #0]
    4aaa:	uxtb	r1, r1
		if (head == tail) {
    4aac:	cmp	r4, r1
    4aae:	beq.n	4acc <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    4ab0:	adds	r2, r1, #1
    4ab2:	cmp	r2, #39	; 0x27
    4ab4:	itt	hi
    4ab6:	movhi	r1, #0
    4ab8:	movhi	r2, r1
			n = tx_buffer[tail];
    4aba:	ldr	r5, [pc, #60]	; (4af8 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4abc:	ldr	r4, [pc, #20]	; (4ad4 <uart2_status_isr+0xb0>)
    4abe:	it	ls
    4ac0:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4ac2:	ldrb	r2, [r5, r2]
    4ac4:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4ac6:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4ac8:	strb	r1, [r0, #0]
    4aca:	b.n	4a78 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    4acc:	movs	r1, #108	; 0x6c
    4ace:	strb	r1, [r2, #3]
    4ad0:	b.n	4a78 <uart2_status_isr+0x54>
    4ad2:	nop
    4ad4:	.word	0x4006c000
    4ad8:	.word	0x1fff1ce4
    4adc:	.word	0x1fff1ce5
    4ae0:	.word	0x1fff1d10
    4ae4:	.word	0x1fff1ce0
    4ae8:	.word	0x1fff1d51
    4aec:	.word	0x1fff1d54
    4af0:	.word	0x1fff1d50
    4af4:	.word	0x1fff1d58
    4af8:	.word	0x1fff1ce8

00004afc <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    4afc:	bx	lr
    4afe:	nop

00004b00 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    4b00:	bx	lr
    4b02:	nop

00004b04 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    4b04:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4b06:	mrs	r2, PRIMASK
		__disable_irq();
    4b0a:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    4b0c:	ldrb	r3, [r0, #29]
    4b0e:	cbnz	r3, 4b1e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    4b10:	ldrb	r1, [r0, #28]
    4b12:	cmp	r1, #1
    4b14:	beq.n	4b28 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    4b16:	cmp	r1, #3
    4b18:	beq.n	4b3c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    4b1a:	movs	r3, #1
    4b1c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4b1e:	cbnz	r2, 4b22 <EventResponder::triggerEventNotImmediate()+0x1e>
    4b20:	cpsie	i
	}
	enableInterrupts(irq);
}
    4b22:	ldr.w	r4, [sp], #4
    4b26:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4b28:	ldr	r4, [pc, #68]	; (4b70 <EventResponder::triggerEventNotImmediate()+0x6c>)
    4b2a:	ldr	r1, [r4, #0]
    4b2c:	cbz	r1, 4b58 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    4b2e:	ldr	r1, [pc, #68]	; (4b74 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    4b30:	str	r3, [r0, #20]
				_prev = lastYield;
    4b32:	ldr	r3, [r1, #0]
    4b34:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    4b36:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    4b38:	str	r0, [r3, #20]
    4b3a:	b.n	4b1a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    4b3c:	ldr	r4, [pc, #56]	; (4b78 <EventResponder::triggerEventNotImmediate()+0x74>)
    4b3e:	ldr	r1, [r4, #0]
    4b40:	cbz	r1, 4b64 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4b42:	ldr	r1, [pc, #56]	; (4b7c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    4b44:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    4b46:	ldr	r3, [r1, #0]
    4b48:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    4b4a:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    4b4c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    4b4e:	ldr	r3, [pc, #48]	; (4b80 <EventResponder::triggerEventNotImmediate()+0x7c>)
    4b50:	mov.w	r1, #268435456	; 0x10000000
    4b54:	str	r1, [r3, #0]
    4b56:	b.n	4b1a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    4b58:	ldr	r3, [pc, #24]	; (4b74 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    4b5a:	str	r1, [r0, #20]
				_prev = nullptr;
    4b5c:	str	r1, [r0, #24]
				firstYield = this;
    4b5e:	str	r0, [r4, #0]
				lastYield = this;
    4b60:	str	r0, [r3, #0]
    4b62:	b.n	4b1a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    4b64:	ldr	r3, [pc, #20]	; (4b7c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    4b66:	str	r1, [r0, #20]
				_prev = nullptr;
    4b68:	str	r1, [r0, #24]
				firstInterrupt = this;
    4b6a:	str	r0, [r4, #0]
				lastInterrupt = this;
    4b6c:	str	r0, [r3, #0]
    4b6e:	b.n	4b4e <EventResponder::triggerEventNotImmediate()+0x4a>
    4b70:	.word	0x1fff1d6c
    4b74:	.word	0x1fff1d68
    4b78:	.word	0x1fff1d5c
    4b7c:	.word	0x1fff1d60
    4b80:	.word	0xe000ed04

00004b84 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    4b84:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4b86:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4b88:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4b8a:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4b8c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    4b8e:	beq.n	4b98 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    4b90:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4b94:	b.w	4b04 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4b98:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    4b9a:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4b9e:	bx	r3

00004ba0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    4ba0:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4ba2:	mrs	r2, PRIMASK
		__disable_irq();
    4ba6:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4ba8:	ldr	r4, [pc, #48]	; (4bdc <EventResponder::runFromInterrupt()+0x3c>)
    4baa:	ldr	r0, [r4, #0]
		if (first) {
    4bac:	cbz	r0, 4bd0 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4bae:	ldr	r6, [pc, #48]	; (4be0 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4bb0:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    4bb2:	ldr	r3, [r0, #20]
    4bb4:	str	r3, [r4, #0]
			if (firstInterrupt) {
    4bb6:	cbz	r3, 4bd6 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4bb8:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4bba:	cbnz	r2, 4bbe <EventResponder::runFromInterrupt()+0x1e>
    4bbc:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    4bbe:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4bc0:	ldr	r3, [r0, #8]
    4bc2:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4bc4:	mrs	r2, PRIMASK
		__disable_irq();
    4bc8:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4bca:	ldr	r0, [r4, #0]
		if (first) {
    4bcc:	cmp	r0, #0
    4bce:	bne.n	4bb2 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4bd0:	cbnz	r2, 4bd4 <EventResponder::runFromInterrupt()+0x34>
    4bd2:	cpsie	i
    4bd4:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4bd6:	str	r3, [r6, #0]
    4bd8:	b.n	4bba <EventResponder::runFromInterrupt()+0x1a>
    4bda:	nop
    4bdc:	.word	0x1fff1d5c
    4be0:	.word	0x1fff1d60

00004be4 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    4be4:	b.w	4ba0 <EventResponder::runFromInterrupt()>

00004be8 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    4be8:	ldr	r2, [pc, #96]	; (4c4c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    4bea:	push	{r4, r5}
	if (listActive == nullptr) {
    4bec:	ldr	r4, [r2, #0]
    4bee:	cmp	r4, #0
    4bf0:	beq.n	4c42 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    4bf2:	ldr	r3, [r0, #0]
    4bf4:	ldr	r1, [r4, #0]
    4bf6:	cmp	r3, r1
    4bf8:	bcs.n	4c18 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4bfa:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4bfc:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    4bfe:	str	r4, [r0, #8]
		_prev = nullptr;
    4c00:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4c02:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4c04:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    4c06:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4c08:	movs	r3, #2
    4c0a:	strb	r3, [r0, #20]
}
    4c0c:	pop	{r4, r5}
    4c0e:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4c10:	ldr	r1, [r2, #0]
    4c12:	cmp	r3, r1
    4c14:	mov	r4, r2
    4c16:	bcc.n	4c2a <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4c18:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    4c1a:	subs	r3, r3, r1
    4c1c:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4c1e:	cmp	r2, #0
    4c20:	bne.n	4c10 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    4c22:	str	r2, [r0, #8]
		_prev = timer;
    4c24:	str	r4, [r0, #12]
		timer->_next = this;
    4c26:	str	r0, [r4, #8]
    4c28:	b.n	4c08 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    4c2a:	ldr	r2, [r2, #12]
    4c2c:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    4c2e:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    4c30:	str	r0, [r4, #12]
				_prev->_next = this;
    4c32:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    4c34:	subs	r3, r1, r3
				_state = TimerActive;
    4c36:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    4c38:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    4c3a:	str	r3, [r4, #0]
				_state = TimerActive;
    4c3c:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    4c3e:	pop	{r4, r5}
    4c40:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    4c42:	str	r4, [r0, #8]
		_prev = nullptr;
    4c44:	str	r4, [r0, #12]
		listActive = this;
    4c46:	str	r0, [r2, #0]
    4c48:	b.n	4c08 <MillisTimer::addToActiveList()+0x20>
    4c4a:	nop
    4c4c:	.word	0x1fff1d64

00004c50 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    4c50:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    4c52:	ldr	r6, [pc, #136]	; (4cdc <MillisTimer::runFromTimer()+0x8c>)
    4c54:	ldr	r4, [r6, #0]
	while (timer) {
    4c56:	cbz	r4, 4ca4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4c58:	ldr	r3, [r4, #0]
    4c5a:	cmp	r3, #0
    4c5c:	bne.n	4cd4 <MillisTimer::runFromTimer()+0x84>
    4c5e:	ldr	r7, [pc, #128]	; (4ce0 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    4c60:	mov	r5, r3
    4c62:	b.n	4c6e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    4c64:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4c66:	cbz	r4, 4ca4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4c68:	ldr	r3, [r4, #0]
    4c6a:	cmp	r3, #0
    4c6c:	bne.n	4cd4 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    4c6e:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    4c70:	cbz	r3, 4c74 <MillisTimer::runFromTimer()+0x24>
    4c72:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    4c74:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    4c76:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4c78:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    4c7a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4c7c:	ldr	r3, [r3, #0]
    4c7e:	cmp	r3, r7
    4c80:	bne.n	4cc6 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4c82:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4c84:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4c86:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4c88:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    4c8a:	beq.n	4cce <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4c8c:	bl	4b04 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    4c90:	ldr	r3, [r4, #4]
    4c92:	cmp	r3, #0
    4c94:	beq.n	4c64 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    4c96:	str	r3, [r4, #0]
				timer->addToActiveList();
    4c98:	mov	r0, r4
    4c9a:	bl	4be8 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    4c9e:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4ca0:	cmp	r4, #0
    4ca2:	bne.n	4c68 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4ca4:	mrs	r3, PRIMASK
		__disable_irq();
    4ca8:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4caa:	ldr	r2, [pc, #56]	; (4ce4 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4cac:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4cae:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4cb0:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    4cb2:	cbnz	r3, 4cb6 <MillisTimer::runFromTimer()+0x66>
    4cb4:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    4cb6:	cbz	r0, 4cc4 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4cb8:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    4cba:	bl	4be8 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    4cbe:	mov	r0, r4
    4cc0:	cmp	r0, #0
    4cc2:	bne.n	4cb8 <MillisTimer::runFromTimer()+0x68>
    4cc4:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4cc6:	mov	r2, r4
    4cc8:	movs	r1, #0
    4cca:	blx	r3
    4ccc:	b.n	4c90 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4cce:	ldr	r3, [r0, #8]
    4cd0:	blx	r3
    4cd2:	b.n	4c90 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    4cd4:	subs	r3, #1
    4cd6:	str	r3, [r4, #0]
			break;
    4cd8:	b.n	4ca4 <MillisTimer::runFromTimer()+0x54>
    4cda:	nop
    4cdc:	.word	0x1fff1d64
    4ce0:	.word	0x00004b85
    4ce4:	.word	0x1fff1d74

00004ce8 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    4ce8:	ldr	r2, [pc, #8]	; (4cf4 <systick_isr+0xc>)
    4cea:	ldr	r3, [r2, #0]
    4cec:	adds	r3, #1
    4cee:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4cf0:	b.w	4c50 <MillisTimer::runFromTimer()>
    4cf4:	.word	0x1fff18fc

00004cf8 <__errno>:
    4cf8:	ldr	r3, [pc, #4]	; (4d00 <__errno+0x8>)
    4cfa:	ldr	r0, [r3, #0]
    4cfc:	bx	lr
    4cfe:	nop
    4d00:	.word	0x1fff11a8

00004d04 <__libc_init_array>:
    4d04:	push	{r4, r5, r6, lr}
    4d06:	ldr	r6, [pc, #60]	; (4d44 <__libc_init_array+0x40>)
    4d08:	ldr	r5, [pc, #60]	; (4d48 <__libc_init_array+0x44>)
    4d0a:	subs	r6, r6, r5
    4d0c:	asrs	r6, r6, #2
    4d0e:	it	ne
    4d10:	movne	r4, #0
    4d12:	beq.n	4d20 <__libc_init_array+0x1c>
    4d14:	adds	r4, #1
    4d16:	ldr.w	r3, [r5], #4
    4d1a:	blx	r3
    4d1c:	cmp	r6, r4
    4d1e:	bne.n	4d14 <__libc_init_array+0x10>
    4d20:	ldr	r6, [pc, #40]	; (4d4c <__libc_init_array+0x48>)
    4d22:	ldr	r5, [pc, #44]	; (4d50 <__libc_init_array+0x4c>)
    4d24:	subs	r6, r6, r5
    4d26:	bl	599c <_init>
    4d2a:	asrs	r6, r6, #2
    4d2c:	it	ne
    4d2e:	movne	r4, #0
    4d30:	beq.n	4d40 <__libc_init_array+0x3c>
    4d32:	adds	r4, #1
    4d34:	ldr.w	r3, [r5], #4
    4d38:	blx	r3
    4d3a:	cmp	r6, r4
    4d3c:	bne.n	4d32 <__libc_init_array+0x2e>
    4d3e:	pop	{r4, r5, r6, pc}
    4d40:	pop	{r4, r5, r6, pc}
    4d42:	nop
    4d44:	.word	0x000059a8
    4d48:	.word	0x000059a8
    4d4c:	.word	0x000059b4
    4d50:	.word	0x000059a8

00004d54 <malloc>:
    4d54:	ldr	r3, [pc, #8]	; (4d60 <malloc+0xc>)
    4d56:	mov	r1, r0
    4d58:	ldr	r0, [r3, #0]
    4d5a:	b.w	4d64 <_malloc_r>
    4d5e:	nop
    4d60:	.word	0x1fff11a8

00004d64 <_malloc_r>:
    4d64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d68:	add.w	r5, r1, #11
    4d6c:	cmp	r5, #22
    4d6e:	sub	sp, #12
    4d70:	mov	r6, r0
    4d72:	bls.w	4eb4 <_malloc_r+0x150>
    4d76:	bics.w	r5, r5, #7
    4d7a:	bmi.w	4efc <_malloc_r+0x198>
    4d7e:	cmp	r1, r5
    4d80:	bhi.w	4efc <_malloc_r+0x198>
    4d84:	bl	52d4 <__malloc_lock>
    4d88:	cmp.w	r5, #504	; 0x1f8
    4d8c:	bcc.w	52c8 <_malloc_r+0x564>
    4d90:	lsrs	r3, r5, #9
    4d92:	beq.w	4f0a <_malloc_r+0x1a6>
    4d96:	cmp	r3, #4
    4d98:	bhi.w	50a2 <_malloc_r+0x33e>
    4d9c:	lsrs	r0, r5, #6
    4d9e:	add.w	lr, r0, #57	; 0x39
    4da2:	mov.w	r3, lr, lsl #1
    4da6:	adds	r0, #56	; 0x38
    4da8:	ldr	r7, [pc, #784]	; (50bc <_malloc_r+0x358>)
    4daa:	add.w	r3, r7, r3, lsl #2
    4dae:	sub.w	r1, r3, #8
    4db2:	ldr	r4, [r3, #4]
    4db4:	cmp	r1, r4
    4db6:	bne.n	4dc8 <_malloc_r+0x64>
    4db8:	b.n	4f14 <_malloc_r+0x1b0>
    4dba:	cmp	r2, #0
    4dbc:	bge.w	4f18 <_malloc_r+0x1b4>
    4dc0:	ldr	r4, [r4, #12]
    4dc2:	cmp	r1, r4
    4dc4:	beq.w	4f14 <_malloc_r+0x1b0>
    4dc8:	ldr	r3, [r4, #4]
    4dca:	bic.w	r3, r3, #3
    4dce:	subs	r2, r3, r5
    4dd0:	cmp	r2, #15
    4dd2:	ble.n	4dba <_malloc_r+0x56>
    4dd4:	ldr	r1, [pc, #740]	; (50bc <_malloc_r+0x358>)
    4dd6:	ldr	r4, [r7, #16]
    4dd8:	add.w	lr, r1, #8
    4ddc:	cmp	r4, lr
    4dde:	beq.w	5148 <_malloc_r+0x3e4>
    4de2:	ldr	r3, [r4, #4]
    4de4:	bic.w	r3, r3, #3
    4de8:	subs	r2, r3, r5
    4dea:	cmp	r2, #15
    4dec:	bgt.w	5122 <_malloc_r+0x3be>
    4df0:	cmp	r2, #0
    4df2:	str.w	lr, [r1, #20]
    4df6:	str.w	lr, [r1, #16]
    4dfa:	bge.w	4f3a <_malloc_r+0x1d6>
    4dfe:	cmp.w	r3, #512	; 0x200
    4e02:	bcs.w	50d4 <_malloc_r+0x370>
    4e06:	lsrs	r3, r3, #3
    4e08:	add.w	ip, r3, #1
    4e0c:	movs	r2, #1
    4e0e:	asrs	r3, r3, #2
    4e10:	lsl.w	r3, r2, r3
    4e14:	ldr	r2, [r1, #4]
    4e16:	ldr.w	r8, [r1, ip, lsl #3]
    4e1a:	str.w	r8, [r4, #8]
    4e1e:	add.w	r9, r1, ip, lsl #3
    4e22:	orrs	r2, r3
    4e24:	sub.w	r3, r9, #8
    4e28:	str	r3, [r4, #12]
    4e2a:	str	r2, [r1, #4]
    4e2c:	str.w	r4, [r1, ip, lsl #3]
    4e30:	str.w	r4, [r8, #12]
    4e34:	asrs	r3, r0, #2
    4e36:	movs	r4, #1
    4e38:	lsls	r4, r3
    4e3a:	cmp	r4, r2
    4e3c:	bhi.w	4f54 <_malloc_r+0x1f0>
    4e40:	tst	r4, r2
    4e42:	bne.n	4e52 <_malloc_r+0xee>
    4e44:	bic.w	r0, r0, #3
    4e48:	lsls	r4, r4, #1
    4e4a:	tst	r4, r2
    4e4c:	add.w	r0, r0, #4
    4e50:	beq.n	4e48 <_malloc_r+0xe4>
    4e52:	add.w	r9, r7, r0, lsl #3
    4e56:	mov	ip, r9
    4e58:	mov	r8, r0
    4e5a:	ldr.w	r1, [ip, #12]
    4e5e:	cmp	ip, r1
    4e60:	bne.n	4e72 <_malloc_r+0x10e>
    4e62:	b.n	514c <_malloc_r+0x3e8>
    4e64:	cmp	r2, #0
    4e66:	bge.w	516c <_malloc_r+0x408>
    4e6a:	ldr	r1, [r1, #12]
    4e6c:	cmp	ip, r1
    4e6e:	beq.w	514c <_malloc_r+0x3e8>
    4e72:	ldr	r3, [r1, #4]
    4e74:	bic.w	r3, r3, #3
    4e78:	subs	r2, r3, r5
    4e7a:	cmp	r2, #15
    4e7c:	ble.n	4e64 <_malloc_r+0x100>
    4e7e:	mov	r4, r1
    4e80:	ldr.w	ip, [r1, #12]
    4e84:	ldr.w	r8, [r4, #8]!
    4e88:	adds	r3, r1, r5
    4e8a:	orr.w	r5, r5, #1
    4e8e:	str	r5, [r1, #4]
    4e90:	orr.w	r1, r2, #1
    4e94:	str.w	ip, [r8, #12]
    4e98:	mov	r0, r6
    4e9a:	str.w	r8, [ip, #8]
    4e9e:	str	r3, [r7, #20]
    4ea0:	str	r3, [r7, #16]
    4ea2:	str.w	lr, [r3, #12]
    4ea6:	str.w	lr, [r3, #8]
    4eaa:	str	r1, [r3, #4]
    4eac:	str	r2, [r3, r2]
    4eae:	bl	52d8 <__malloc_unlock>
    4eb2:	b.n	4ef4 <_malloc_r+0x190>
    4eb4:	cmp	r1, #16
    4eb6:	bhi.n	4efc <_malloc_r+0x198>
    4eb8:	bl	52d4 <__malloc_lock>
    4ebc:	movs	r5, #16
    4ebe:	movs	r3, #6
    4ec0:	movs	r0, #2
    4ec2:	ldr	r7, [pc, #504]	; (50bc <_malloc_r+0x358>)
    4ec4:	add.w	r3, r7, r3, lsl #2
    4ec8:	sub.w	r2, r3, #8
    4ecc:	ldr	r4, [r3, #4]
    4ece:	cmp	r4, r2
    4ed0:	beq.w	515e <_malloc_r+0x3fa>
    4ed4:	ldr	r3, [r4, #4]
    4ed6:	ldr	r1, [r4, #12]
    4ed8:	ldr	r5, [r4, #8]
    4eda:	bic.w	r3, r3, #3
    4ede:	add	r3, r4
    4ee0:	mov	r0, r6
    4ee2:	ldr	r2, [r3, #4]
    4ee4:	str	r1, [r5, #12]
    4ee6:	orr.w	r2, r2, #1
    4eea:	str	r5, [r1, #8]
    4eec:	str	r2, [r3, #4]
    4eee:	bl	52d8 <__malloc_unlock>
    4ef2:	adds	r4, #8
    4ef4:	mov	r0, r4
    4ef6:	add	sp, #12
    4ef8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4efc:	movs	r4, #0
    4efe:	movs	r3, #12
    4f00:	mov	r0, r4
    4f02:	str	r3, [r6, #0]
    4f04:	add	sp, #12
    4f06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f0a:	movs	r3, #128	; 0x80
    4f0c:	mov.w	lr, #64	; 0x40
    4f10:	movs	r0, #63	; 0x3f
    4f12:	b.n	4da8 <_malloc_r+0x44>
    4f14:	mov	r0, lr
    4f16:	b.n	4dd4 <_malloc_r+0x70>
    4f18:	add	r3, r4
    4f1a:	ldr	r1, [r4, #12]
    4f1c:	ldr	r2, [r3, #4]
    4f1e:	ldr	r5, [r4, #8]
    4f20:	orr.w	r2, r2, #1
    4f24:	str	r1, [r5, #12]
    4f26:	mov	r0, r6
    4f28:	str	r5, [r1, #8]
    4f2a:	str	r2, [r3, #4]
    4f2c:	bl	52d8 <__malloc_unlock>
    4f30:	adds	r4, #8
    4f32:	mov	r0, r4
    4f34:	add	sp, #12
    4f36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f3a:	add	r3, r4
    4f3c:	mov	r0, r6
    4f3e:	ldr	r2, [r3, #4]
    4f40:	orr.w	r2, r2, #1
    4f44:	str	r2, [r3, #4]
    4f46:	bl	52d8 <__malloc_unlock>
    4f4a:	adds	r4, #8
    4f4c:	mov	r0, r4
    4f4e:	add	sp, #12
    4f50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f54:	ldr	r4, [r7, #8]
    4f56:	ldr	r3, [r4, #4]
    4f58:	bic.w	r8, r3, #3
    4f5c:	cmp	r8, r5
    4f5e:	bcc.n	4f6a <_malloc_r+0x206>
    4f60:	rsb	r3, r5, r8
    4f64:	cmp	r3, #15
    4f66:	bgt.w	5082 <_malloc_r+0x31e>
    4f6a:	ldr	r3, [pc, #340]	; (50c0 <_malloc_r+0x35c>)
    4f6c:	ldr.w	r9, [pc, #352]	; 50d0 <_malloc_r+0x36c>
    4f70:	ldr	r2, [r3, #0]
    4f72:	ldr.w	r3, [r9]
    4f76:	adds	r3, #1
    4f78:	add	r2, r5
    4f7a:	add.w	sl, r4, r8
    4f7e:	beq.w	5242 <_malloc_r+0x4de>
    4f82:	add.w	r2, r2, #4096	; 0x1000
    4f86:	adds	r2, #15
    4f88:	bic.w	r2, r2, #4080	; 0xff0
    4f8c:	bic.w	r2, r2, #15
    4f90:	mov	r1, r2
    4f92:	mov	r0, r6
    4f94:	str	r2, [sp, #4]
    4f96:	bl	52dc <_sbrk_r>
    4f9a:	cmp.w	r0, #4294967295
    4f9e:	mov	fp, r0
    4fa0:	ldr	r2, [sp, #4]
    4fa2:	beq.w	5256 <_malloc_r+0x4f2>
    4fa6:	cmp	sl, r0
    4fa8:	bhi.w	51a4 <_malloc_r+0x440>
    4fac:	ldr	r3, [pc, #276]	; (50c4 <_malloc_r+0x360>)
    4fae:	ldr	r1, [r3, #0]
    4fb0:	cmp	sl, fp
    4fb2:	add	r1, r2
    4fb4:	str	r1, [r3, #0]
    4fb6:	beq.w	5260 <_malloc_r+0x4fc>
    4fba:	ldr.w	r0, [r9]
    4fbe:	ldr.w	lr, [pc, #272]	; 50d0 <_malloc_r+0x36c>
    4fc2:	adds	r0, #1
    4fc4:	ittet	ne
    4fc6:	rsbne	sl, sl, fp
    4fca:	addne	r1, sl
    4fcc:	streq.w	fp, [lr]
    4fd0:	strne	r1, [r3, #0]
    4fd2:	ands.w	r1, fp, #7
    4fd6:	beq.w	5208 <_malloc_r+0x4a4>
    4fda:	rsb	r0, r1, #8
    4fde:	rsb	r1, r1, #4096	; 0x1000
    4fe2:	add	fp, r0
    4fe4:	adds	r1, #8
    4fe6:	add	r2, fp
    4fe8:	ubfx	r2, r2, #0, #12
    4fec:	rsb	r9, r2, r1
    4ff0:	mov	r1, r9
    4ff2:	mov	r0, r6
    4ff4:	str	r3, [sp, #4]
    4ff6:	bl	52dc <_sbrk_r>
    4ffa:	adds	r3, r0, #1
    4ffc:	ldr	r3, [sp, #4]
    4ffe:	beq.w	5280 <_malloc_r+0x51c>
    5002:	rsb	r2, fp, r0
    5006:	add	r2, r9
    5008:	orr.w	r2, r2, #1
    500c:	ldr	r1, [r3, #0]
    500e:	str.w	fp, [r7, #8]
    5012:	add	r1, r9
    5014:	cmp	r4, r7
    5016:	str.w	r2, [fp, #4]
    501a:	str	r1, [r3, #0]
    501c:	ldr.w	r9, [pc, #164]	; 50c4 <_malloc_r+0x360>
    5020:	beq.n	5050 <_malloc_r+0x2ec>
    5022:	cmp.w	r8, #15
    5026:	bls.w	5224 <_malloc_r+0x4c0>
    502a:	ldr	r2, [r4, #4]
    502c:	sub.w	r3, r8, #12
    5030:	bic.w	r3, r3, #7
    5034:	adds	r0, r4, r3
    5036:	and.w	r2, r2, #1
    503a:	mov.w	lr, #5
    503e:	orrs	r2, r3
    5040:	cmp	r3, #15
    5042:	str	r2, [r4, #4]
    5044:	str.w	lr, [r0, #4]
    5048:	str.w	lr, [r0, #8]
    504c:	bhi.w	5288 <_malloc_r+0x524>
    5050:	ldr	r3, [pc, #116]	; (50c8 <_malloc_r+0x364>)
    5052:	ldr	r4, [r7, #8]
    5054:	ldr	r2, [r3, #0]
    5056:	cmp	r1, r2
    5058:	it	hi
    505a:	strhi	r1, [r3, #0]
    505c:	ldr	r3, [pc, #108]	; (50cc <_malloc_r+0x368>)
    505e:	ldr	r2, [r3, #0]
    5060:	cmp	r1, r2
    5062:	ldr	r2, [r4, #4]
    5064:	it	hi
    5066:	strhi	r1, [r3, #0]
    5068:	bic.w	r2, r2, #3
    506c:	cmp	r5, r2
    506e:	sub.w	r3, r2, r5
    5072:	bhi.n	5078 <_malloc_r+0x314>
    5074:	cmp	r3, #15
    5076:	bgt.n	5082 <_malloc_r+0x31e>
    5078:	mov	r0, r6
    507a:	bl	52d8 <__malloc_unlock>
    507e:	movs	r4, #0
    5080:	b.n	4ef4 <_malloc_r+0x190>
    5082:	adds	r2, r4, r5
    5084:	orr.w	r3, r3, #1
    5088:	orr.w	r5, r5, #1
    508c:	str	r5, [r4, #4]
    508e:	mov	r0, r6
    5090:	str	r2, [r7, #8]
    5092:	str	r3, [r2, #4]
    5094:	bl	52d8 <__malloc_unlock>
    5098:	adds	r4, #8
    509a:	mov	r0, r4
    509c:	add	sp, #12
    509e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50a2:	cmp	r3, #20
    50a4:	bls.n	518a <_malloc_r+0x426>
    50a6:	cmp	r3, #84	; 0x54
    50a8:	bhi.w	51f4 <_malloc_r+0x490>
    50ac:	lsrs	r0, r5, #12
    50ae:	add.w	lr, r0, #111	; 0x6f
    50b2:	mov.w	r3, lr, lsl #1
    50b6:	adds	r0, #110	; 0x6e
    50b8:	b.n	4da8 <_malloc_r+0x44>
    50ba:	nop
    50bc:	.word	0x1fff11ac
    50c0:	.word	0x1fff1d80
    50c4:	.word	0x1fff1d84
    50c8:	.word	0x1fff1d7c
    50cc:	.word	0x1fff1d78
    50d0:	.word	0x1fff15b8
    50d4:	lsrs	r2, r3, #9
    50d6:	cmp	r2, #4
    50d8:	bls.n	5198 <_malloc_r+0x434>
    50da:	cmp	r2, #20
    50dc:	bhi.w	5246 <_malloc_r+0x4e2>
    50e0:	add.w	r1, r2, #92	; 0x5c
    50e4:	lsls	r1, r1, #1
    50e6:	adds	r2, #91	; 0x5b
    50e8:	add.w	ip, r7, r1, lsl #2
    50ec:	ldr.w	r1, [r7, r1, lsl #2]
    50f0:	ldr.w	r8, [pc, #476]	; 52d0 <_malloc_r+0x56c>
    50f4:	sub.w	ip, ip, #8
    50f8:	cmp	ip, r1
    50fa:	beq.w	520e <_malloc_r+0x4aa>
    50fe:	ldr	r2, [r1, #4]
    5100:	bic.w	r2, r2, #3
    5104:	cmp	r3, r2
    5106:	bcs.n	510e <_malloc_r+0x3aa>
    5108:	ldr	r1, [r1, #8]
    510a:	cmp	ip, r1
    510c:	bne.n	50fe <_malloc_r+0x39a>
    510e:	ldr.w	ip, [r1, #12]
    5112:	ldr	r2, [r7, #4]
    5114:	str.w	ip, [r4, #12]
    5118:	str	r1, [r4, #8]
    511a:	str.w	r4, [ip, #8]
    511e:	str	r4, [r1, #12]
    5120:	b.n	4e34 <_malloc_r+0xd0>
    5122:	adds	r3, r4, r5
    5124:	orr.w	r7, r2, #1
    5128:	orr.w	r5, r5, #1
    512c:	str	r5, [r4, #4]
    512e:	mov	r0, r6
    5130:	str	r3, [r1, #20]
    5132:	str	r3, [r1, #16]
    5134:	str.w	lr, [r3, #12]
    5138:	str.w	lr, [r3, #8]
    513c:	str	r7, [r3, #4]
    513e:	str	r2, [r3, r2]
    5140:	adds	r4, #8
    5142:	bl	52d8 <__malloc_unlock>
    5146:	b.n	4ef4 <_malloc_r+0x190>
    5148:	ldr	r2, [r1, #4]
    514a:	b.n	4e34 <_malloc_r+0xd0>
    514c:	add.w	r8, r8, #1
    5150:	tst.w	r8, #3
    5154:	add.w	ip, ip, #8
    5158:	bne.w	4e5a <_malloc_r+0xf6>
    515c:	b.n	51c0 <_malloc_r+0x45c>
    515e:	ldr	r4, [r3, #12]
    5160:	cmp	r3, r4
    5162:	it	eq
    5164:	addeq	r0, #2
    5166:	beq.w	4dd4 <_malloc_r+0x70>
    516a:	b.n	4ed4 <_malloc_r+0x170>
    516c:	add	r3, r1
    516e:	mov	r4, r1
    5170:	ldr	r2, [r3, #4]
    5172:	ldr	r1, [r1, #12]
    5174:	ldr.w	r5, [r4, #8]!
    5178:	orr.w	r2, r2, #1
    517c:	str	r2, [r3, #4]
    517e:	mov	r0, r6
    5180:	str	r1, [r5, #12]
    5182:	str	r5, [r1, #8]
    5184:	bl	52d8 <__malloc_unlock>
    5188:	b.n	4ef4 <_malloc_r+0x190>
    518a:	add.w	lr, r3, #92	; 0x5c
    518e:	add.w	r0, r3, #91	; 0x5b
    5192:	mov.w	r3, lr, lsl #1
    5196:	b.n	4da8 <_malloc_r+0x44>
    5198:	lsrs	r2, r3, #6
    519a:	add.w	r1, r2, #57	; 0x39
    519e:	lsls	r1, r1, #1
    51a0:	adds	r2, #56	; 0x38
    51a2:	b.n	50e8 <_malloc_r+0x384>
    51a4:	cmp	r4, r7
    51a6:	ldr	r3, [pc, #296]	; (52d0 <_malloc_r+0x56c>)
    51a8:	beq.w	4fac <_malloc_r+0x248>
    51ac:	ldr	r4, [r3, #8]
    51ae:	ldr	r2, [r4, #4]
    51b0:	bic.w	r2, r2, #3
    51b4:	b.n	506c <_malloc_r+0x308>
    51b6:	ldr.w	r3, [r9], #-8
    51ba:	cmp	r9, r3
    51bc:	bne.w	52c4 <_malloc_r+0x560>
    51c0:	tst.w	r0, #3
    51c4:	add.w	r0, r0, #4294967295
    51c8:	bne.n	51b6 <_malloc_r+0x452>
    51ca:	ldr	r3, [r7, #4]
    51cc:	bic.w	r3, r3, r4
    51d0:	str	r3, [r7, #4]
    51d2:	lsls	r4, r4, #1
    51d4:	cmp	r4, r3
    51d6:	bhi.w	4f54 <_malloc_r+0x1f0>
    51da:	cmp	r4, #0
    51dc:	beq.w	4f54 <_malloc_r+0x1f0>
    51e0:	tst	r4, r3
    51e2:	mov	r0, r8
    51e4:	bne.w	4e52 <_malloc_r+0xee>
    51e8:	lsls	r4, r4, #1
    51ea:	tst	r4, r3
    51ec:	add.w	r0, r0, #4
    51f0:	beq.n	51e8 <_malloc_r+0x484>
    51f2:	b.n	4e52 <_malloc_r+0xee>
    51f4:	cmp.w	r3, #340	; 0x154
    51f8:	bhi.n	522c <_malloc_r+0x4c8>
    51fa:	lsrs	r0, r5, #15
    51fc:	add.w	lr, r0, #120	; 0x78
    5200:	mov.w	r3, lr, lsl #1
    5204:	adds	r0, #119	; 0x77
    5206:	b.n	4da8 <_malloc_r+0x44>
    5208:	mov.w	r1, #4096	; 0x1000
    520c:	b.n	4fe6 <_malloc_r+0x282>
    520e:	movs	r1, #1
    5210:	ldr.w	r3, [r8, #4]
    5214:	asrs	r2, r2, #2
    5216:	lsl.w	r2, r1, r2
    521a:	orrs	r2, r3
    521c:	str.w	r2, [r8, #4]
    5220:	mov	r1, ip
    5222:	b.n	5114 <_malloc_r+0x3b0>
    5224:	movs	r3, #1
    5226:	str.w	r3, [fp, #4]
    522a:	b.n	5078 <_malloc_r+0x314>
    522c:	movw	r2, #1364	; 0x554
    5230:	cmp	r3, r2
    5232:	bhi.n	5276 <_malloc_r+0x512>
    5234:	lsrs	r0, r5, #18
    5236:	add.w	lr, r0, #125	; 0x7d
    523a:	mov.w	r3, lr, lsl #1
    523e:	adds	r0, #124	; 0x7c
    5240:	b.n	4da8 <_malloc_r+0x44>
    5242:	adds	r2, #16
    5244:	b.n	4f90 <_malloc_r+0x22c>
    5246:	cmp	r2, #84	; 0x54
    5248:	bhi.n	5298 <_malloc_r+0x534>
    524a:	lsrs	r2, r3, #12
    524c:	add.w	r1, r2, #111	; 0x6f
    5250:	lsls	r1, r1, #1
    5252:	adds	r2, #110	; 0x6e
    5254:	b.n	50e8 <_malloc_r+0x384>
    5256:	ldr	r4, [r7, #8]
    5258:	ldr	r2, [r4, #4]
    525a:	bic.w	r2, r2, #3
    525e:	b.n	506c <_malloc_r+0x308>
    5260:	ubfx	r0, sl, #0, #12
    5264:	cmp	r0, #0
    5266:	bne.w	4fba <_malloc_r+0x256>
    526a:	add	r2, r8
    526c:	ldr	r3, [r7, #8]
    526e:	orr.w	r2, r2, #1
    5272:	str	r2, [r3, #4]
    5274:	b.n	5050 <_malloc_r+0x2ec>
    5276:	movs	r3, #254	; 0xfe
    5278:	mov.w	lr, #127	; 0x7f
    527c:	movs	r0, #126	; 0x7e
    527e:	b.n	4da8 <_malloc_r+0x44>
    5280:	movs	r2, #1
    5282:	mov.w	r9, #0
    5286:	b.n	500c <_malloc_r+0x2a8>
    5288:	add.w	r1, r4, #8
    528c:	mov	r0, r6
    528e:	bl	53e4 <_free_r>
    5292:	ldr.w	r1, [r9]
    5296:	b.n	5050 <_malloc_r+0x2ec>
    5298:	cmp.w	r2, #340	; 0x154
    529c:	bhi.n	52aa <_malloc_r+0x546>
    529e:	lsrs	r2, r3, #15
    52a0:	add.w	r1, r2, #120	; 0x78
    52a4:	lsls	r1, r1, #1
    52a6:	adds	r2, #119	; 0x77
    52a8:	b.n	50e8 <_malloc_r+0x384>
    52aa:	movw	r1, #1364	; 0x554
    52ae:	cmp	r2, r1
    52b0:	bhi.n	52be <_malloc_r+0x55a>
    52b2:	lsrs	r2, r3, #18
    52b4:	add.w	r1, r2, #125	; 0x7d
    52b8:	lsls	r1, r1, #1
    52ba:	adds	r2, #124	; 0x7c
    52bc:	b.n	50e8 <_malloc_r+0x384>
    52be:	movs	r1, #254	; 0xfe
    52c0:	movs	r2, #126	; 0x7e
    52c2:	b.n	50e8 <_malloc_r+0x384>
    52c4:	ldr	r3, [r7, #4]
    52c6:	b.n	51d2 <_malloc_r+0x46e>
    52c8:	lsrs	r0, r5, #3
    52ca:	adds	r3, r0, #1
    52cc:	lsls	r3, r3, #1
    52ce:	b.n	4ec2 <_malloc_r+0x15e>
    52d0:	.word	0x1fff11ac

000052d4 <__malloc_lock>:
    52d4:	bx	lr
    52d6:	nop

000052d8 <__malloc_unlock>:
    52d8:	bx	lr
    52da:	nop

000052dc <_sbrk_r>:
    52dc:	push	{r3, r4, r5, lr}
    52de:	ldr	r4, [pc, #28]	; (52fc <_sbrk_r+0x20>)
    52e0:	movs	r3, #0
    52e2:	mov	r5, r0
    52e4:	mov	r0, r1
    52e6:	str	r3, [r4, #0]
    52e8:	bl	4670 <_sbrk>
    52ec:	adds	r3, r0, #1
    52ee:	beq.n	52f2 <_sbrk_r+0x16>
    52f0:	pop	{r3, r4, r5, pc}
    52f2:	ldr	r3, [r4, #0]
    52f4:	cmp	r3, #0
    52f6:	beq.n	52f0 <_sbrk_r+0x14>
    52f8:	str	r3, [r5, #0]
    52fa:	pop	{r3, r4, r5, pc}
    52fc:	.word	0x1fff1ef0

00005300 <register_fini>:
    5300:	ldr	r3, [pc, #8]	; (530c <register_fini+0xc>)
    5302:	cbz	r3, 530a <register_fini+0xa>
    5304:	ldr	r0, [pc, #8]	; (5310 <register_fini+0x10>)
    5306:	b.w	5314 <atexit>
    530a:	bx	lr
    530c:	.word	0x00000000
    5310:	.word	0x00005321

00005314 <atexit>:
    5314:	movs	r3, #0
    5316:	mov	r1, r0
    5318:	mov	r2, r3
    531a:	mov	r0, r3
    531c:	b.w	55b4 <__register_exitproc>

00005320 <__libc_fini_array>:
    5320:	push	{r3, r4, r5, lr}
    5322:	ldr	r5, [pc, #28]	; (5340 <__libc_fini_array+0x20>)
    5324:	ldr	r4, [pc, #28]	; (5344 <__libc_fini_array+0x24>)
    5326:	subs	r4, r5, r4
    5328:	asrs	r4, r4, #2
    532a:	beq.n	5338 <__libc_fini_array+0x18>
    532c:	subs	r4, #1
    532e:	ldr.w	r3, [r5, #-4]!
    5332:	blx	r3
    5334:	cmp	r4, #0
    5336:	bne.n	532c <__libc_fini_array+0xc>
    5338:	ldmia.w	sp!, {r3, r4, r5, lr}
    533c:	b.w	59b4 <__init_array_end>
	...

00005348 <_malloc_trim_r>:
    5348:	push	{r3, r4, r5, r6, r7, lr}
    534a:	ldr	r7, [pc, #140]	; (53d8 <_malloc_trim_r+0x90>)
    534c:	mov	r4, r1
    534e:	mov	r6, r0
    5350:	bl	52d4 <__malloc_lock>
    5354:	ldr	r3, [r7, #8]
    5356:	ldr	r5, [r3, #4]
    5358:	bic.w	r5, r5, #3
    535c:	subs	r1, r5, r4
    535e:	addw	r1, r1, #4079	; 0xfef
    5362:	bic.w	r1, r1, #4080	; 0xff0
    5366:	bic.w	r1, r1, #15
    536a:	sub.w	r4, r1, #4096	; 0x1000
    536e:	cmp.w	r4, #4096	; 0x1000
    5372:	blt.n	5384 <_malloc_trim_r+0x3c>
    5374:	movs	r1, #0
    5376:	mov	r0, r6
    5378:	bl	52dc <_sbrk_r>
    537c:	ldr	r3, [r7, #8]
    537e:	add	r3, r5
    5380:	cmp	r0, r3
    5382:	beq.n	538e <_malloc_trim_r+0x46>
    5384:	mov	r0, r6
    5386:	bl	52d8 <__malloc_unlock>
    538a:	movs	r0, #0
    538c:	pop	{r3, r4, r5, r6, r7, pc}
    538e:	negs	r1, r4
    5390:	mov	r0, r6
    5392:	bl	52dc <_sbrk_r>
    5396:	adds	r0, #1
    5398:	beq.n	53b6 <_malloc_trim_r+0x6e>
    539a:	ldr	r3, [pc, #64]	; (53dc <_malloc_trim_r+0x94>)
    539c:	ldr	r2, [r7, #8]
    539e:	ldr	r1, [r3, #0]
    53a0:	subs	r5, r5, r4
    53a2:	orr.w	r5, r5, #1
    53a6:	mov	r0, r6
    53a8:	subs	r1, r1, r4
    53aa:	str	r5, [r2, #4]
    53ac:	str	r1, [r3, #0]
    53ae:	bl	52d8 <__malloc_unlock>
    53b2:	movs	r0, #1
    53b4:	pop	{r3, r4, r5, r6, r7, pc}
    53b6:	movs	r1, #0
    53b8:	mov	r0, r6
    53ba:	bl	52dc <_sbrk_r>
    53be:	ldr	r2, [r7, #8]
    53c0:	subs	r3, r0, r2
    53c2:	cmp	r3, #15
    53c4:	ble.n	5384 <_malloc_trim_r+0x3c>
    53c6:	ldr	r4, [pc, #24]	; (53e0 <_malloc_trim_r+0x98>)
    53c8:	ldr	r1, [pc, #16]	; (53dc <_malloc_trim_r+0x94>)
    53ca:	ldr	r4, [r4, #0]
    53cc:	orr.w	r3, r3, #1
    53d0:	subs	r0, r0, r4
    53d2:	str	r3, [r2, #4]
    53d4:	str	r0, [r1, #0]
    53d6:	b.n	5384 <_malloc_trim_r+0x3c>
    53d8:	.word	0x1fff11ac
    53dc:	.word	0x1fff1d84
    53e0:	.word	0x1fff15b8

000053e4 <_free_r>:
    53e4:	cmp	r1, #0
    53e6:	beq.n	5474 <_free_r+0x90>
    53e8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53ec:	mov	r5, r1
    53ee:	mov	r8, r0
    53f0:	bl	52d4 <__malloc_lock>
    53f4:	ldr.w	r7, [r5, #-4]
    53f8:	ldr	r1, [pc, #424]	; (55a4 <_free_r+0x1c0>)
    53fa:	bic.w	r3, r7, #1
    53fe:	sub.w	r4, r5, #8
    5402:	adds	r2, r4, r3
    5404:	ldr	r6, [r1, #8]
    5406:	ldr	r0, [r2, #4]
    5408:	cmp	r2, r6
    540a:	bic.w	r0, r0, #3
    540e:	beq.n	54d6 <_free_r+0xf2>
    5410:	lsls	r6, r7, #31
    5412:	str	r0, [r2, #4]
    5414:	bmi.n	542e <_free_r+0x4a>
    5416:	ldr.w	r7, [r5, #-8]
    541a:	subs	r4, r4, r7
    541c:	add.w	lr, r1, #8
    5420:	ldr	r5, [r4, #8]
    5422:	cmp	r5, lr
    5424:	add	r3, r7
    5426:	beq.n	5508 <_free_r+0x124>
    5428:	ldr	r7, [r4, #12]
    542a:	str	r7, [r5, #12]
    542c:	str	r5, [r7, #8]
    542e:	adds	r5, r2, r0
    5430:	ldr	r5, [r5, #4]
    5432:	lsls	r5, r5, #31
    5434:	bpl.n	54bc <_free_r+0xd8>
    5436:	orr.w	r2, r3, #1
    543a:	str	r2, [r4, #4]
    543c:	str	r3, [r4, r3]
    543e:	cmp.w	r3, #512	; 0x200
    5442:	bcs.n	5476 <_free_r+0x92>
    5444:	lsrs	r3, r3, #3
    5446:	adds	r2, r3, #1
    5448:	ldr	r5, [r1, #4]
    544a:	ldr.w	r7, [r1, r2, lsl #3]
    544e:	str	r7, [r4, #8]
    5450:	movs	r0, #1
    5452:	asrs	r3, r3, #2
    5454:	lsl.w	r3, r0, r3
    5458:	add.w	r0, r1, r2, lsl #3
    545c:	orrs	r5, r3
    545e:	subs	r0, #8
    5460:	str	r0, [r4, #12]
    5462:	str	r5, [r1, #4]
    5464:	str.w	r4, [r1, r2, lsl #3]
    5468:	str	r4, [r7, #12]
    546a:	mov	r0, r8
    546c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5470:	b.w	52d8 <__malloc_unlock>
    5474:	bx	lr
    5476:	lsrs	r2, r3, #9
    5478:	cmp	r2, #4
    547a:	bhi.n	5524 <_free_r+0x140>
    547c:	lsrs	r2, r3, #6
    547e:	add.w	r7, r2, #57	; 0x39
    5482:	lsls	r7, r7, #1
    5484:	add.w	r5, r2, #56	; 0x38
    5488:	add.w	r0, r1, r7, lsl #2
    548c:	ldr.w	r2, [r1, r7, lsl #2]
    5490:	ldr	r1, [pc, #272]	; (55a4 <_free_r+0x1c0>)
    5492:	subs	r0, #8
    5494:	cmp	r0, r2
    5496:	beq.n	5534 <_free_r+0x150>
    5498:	ldr	r1, [r2, #4]
    549a:	bic.w	r1, r1, #3
    549e:	cmp	r3, r1
    54a0:	bcs.n	54a8 <_free_r+0xc4>
    54a2:	ldr	r2, [r2, #8]
    54a4:	cmp	r0, r2
    54a6:	bne.n	5498 <_free_r+0xb4>
    54a8:	ldr	r0, [r2, #12]
    54aa:	str	r0, [r4, #12]
    54ac:	str	r2, [r4, #8]
    54ae:	str	r4, [r0, #8]
    54b0:	str	r4, [r2, #12]
    54b2:	mov	r0, r8
    54b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    54b8:	b.w	52d8 <__malloc_unlock>
    54bc:	ldr	r5, [r2, #8]
    54be:	ldr	r7, [pc, #232]	; (55a8 <_free_r+0x1c4>)
    54c0:	cmp	r5, r7
    54c2:	add	r3, r0
    54c4:	beq.n	5546 <_free_r+0x162>
    54c6:	ldr	r0, [r2, #12]
    54c8:	str	r0, [r5, #12]
    54ca:	orr.w	r2, r3, #1
    54ce:	str	r5, [r0, #8]
    54d0:	str	r2, [r4, #4]
    54d2:	str	r3, [r4, r3]
    54d4:	b.n	543e <_free_r+0x5a>
    54d6:	lsls	r7, r7, #31
    54d8:	add	r3, r0
    54da:	bmi.n	54ec <_free_r+0x108>
    54dc:	ldr.w	r2, [r5, #-8]
    54e0:	subs	r4, r4, r2
    54e2:	add	r3, r2
    54e4:	ldr	r0, [r4, #8]
    54e6:	ldr	r2, [r4, #12]
    54e8:	str	r2, [r0, #12]
    54ea:	str	r0, [r2, #8]
    54ec:	ldr	r2, [pc, #188]	; (55ac <_free_r+0x1c8>)
    54ee:	ldr	r2, [r2, #0]
    54f0:	orr.w	r0, r3, #1
    54f4:	cmp	r3, r2
    54f6:	str	r0, [r4, #4]
    54f8:	str	r4, [r1, #8]
    54fa:	bcc.n	546a <_free_r+0x86>
    54fc:	ldr	r3, [pc, #176]	; (55b0 <_free_r+0x1cc>)
    54fe:	mov	r0, r8
    5500:	ldr	r1, [r3, #0]
    5502:	bl	5348 <_malloc_trim_r>
    5506:	b.n	546a <_free_r+0x86>
    5508:	adds	r1, r2, r0
    550a:	ldr	r1, [r1, #4]
    550c:	lsls	r1, r1, #31
    550e:	bmi.n	559a <_free_r+0x1b6>
    5510:	ldr	r1, [r2, #8]
    5512:	ldr	r2, [r2, #12]
    5514:	str	r2, [r1, #12]
    5516:	add	r3, r0
    5518:	orr.w	r0, r3, #1
    551c:	str	r1, [r2, #8]
    551e:	str	r0, [r4, #4]
    5520:	str	r3, [r4, r3]
    5522:	b.n	546a <_free_r+0x86>
    5524:	cmp	r2, #20
    5526:	bhi.n	5558 <_free_r+0x174>
    5528:	add.w	r7, r2, #92	; 0x5c
    552c:	lsls	r7, r7, #1
    552e:	add.w	r5, r2, #91	; 0x5b
    5532:	b.n	5488 <_free_r+0xa4>
    5534:	asrs	r2, r5, #2
    5536:	ldr	r3, [r1, #4]
    5538:	movs	r5, #1
    553a:	lsl.w	r2, r5, r2
    553e:	orrs	r3, r2
    5540:	str	r3, [r1, #4]
    5542:	mov	r2, r0
    5544:	b.n	54aa <_free_r+0xc6>
    5546:	orr.w	r2, r3, #1
    554a:	str	r4, [r1, #20]
    554c:	str	r4, [r1, #16]
    554e:	str	r5, [r4, #12]
    5550:	str	r5, [r4, #8]
    5552:	str	r2, [r4, #4]
    5554:	str	r3, [r4, r3]
    5556:	b.n	546a <_free_r+0x86>
    5558:	cmp	r2, #84	; 0x54
    555a:	bhi.n	556a <_free_r+0x186>
    555c:	lsrs	r2, r3, #12
    555e:	add.w	r7, r2, #111	; 0x6f
    5562:	lsls	r7, r7, #1
    5564:	add.w	r5, r2, #110	; 0x6e
    5568:	b.n	5488 <_free_r+0xa4>
    556a:	cmp.w	r2, #340	; 0x154
    556e:	bhi.n	557e <_free_r+0x19a>
    5570:	lsrs	r2, r3, #15
    5572:	add.w	r7, r2, #120	; 0x78
    5576:	lsls	r7, r7, #1
    5578:	add.w	r5, r2, #119	; 0x77
    557c:	b.n	5488 <_free_r+0xa4>
    557e:	movw	r0, #1364	; 0x554
    5582:	cmp	r2, r0
    5584:	bhi.n	5594 <_free_r+0x1b0>
    5586:	lsrs	r2, r3, #18
    5588:	add.w	r7, r2, #125	; 0x7d
    558c:	lsls	r7, r7, #1
    558e:	add.w	r5, r2, #124	; 0x7c
    5592:	b.n	5488 <_free_r+0xa4>
    5594:	movs	r7, #254	; 0xfe
    5596:	movs	r5, #126	; 0x7e
    5598:	b.n	5488 <_free_r+0xa4>
    559a:	orr.w	r2, r3, #1
    559e:	str	r2, [r4, #4]
    55a0:	str	r3, [r4, r3]
    55a2:	b.n	546a <_free_r+0x86>
    55a4:	.word	0x1fff11ac
    55a8:	.word	0x1fff11b4
    55ac:	.word	0x1fff15b4
    55b0:	.word	0x1fff1d80

000055b4 <__register_exitproc>:
    55b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    55b8:	ldr	r4, [pc, #148]	; (5650 <__register_exitproc+0x9c>)
    55ba:	ldr	r5, [r4, #0]
    55bc:	ldr.w	r4, [r5, #328]	; 0x148
    55c0:	mov	r6, r0
    55c2:	mov	r8, r1
    55c4:	mov	sl, r2
    55c6:	mov	r9, r3
    55c8:	cbz	r4, 563c <__register_exitproc+0x88>
    55ca:	ldr	r0, [r4, #4]
    55cc:	cmp	r0, #31
    55ce:	bgt.n	5600 <__register_exitproc+0x4c>
    55d0:	adds	r3, r0, #1
    55d2:	cbz	r6, 55f2 <__register_exitproc+0x3e>
    55d4:	add.w	r5, r4, r0, lsl #2
    55d8:	movs	r2, #1
    55da:	str.w	sl, [r5, #136]	; 0x88
    55de:	ldr.w	r1, [r4, #392]	; 0x188
    55e2:	lsls	r2, r0
    55e4:	orrs	r1, r2
    55e6:	cmp	r6, #2
    55e8:	str.w	r1, [r4, #392]	; 0x188
    55ec:	str.w	r9, [r5, #264]	; 0x108
    55f0:	beq.n	5630 <__register_exitproc+0x7c>
    55f2:	adds	r0, #2
    55f4:	str	r3, [r4, #4]
    55f6:	str.w	r8, [r4, r0, lsl #2]
    55fa:	movs	r0, #0
    55fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5600:	ldr	r3, [pc, #80]	; (5654 <__register_exitproc+0xa0>)
    5602:	cbz	r3, 5646 <__register_exitproc+0x92>
    5604:	mov.w	r0, #400	; 0x190
    5608:	bl	4d54 <malloc>
    560c:	mov	r4, r0
    560e:	cbz	r0, 5646 <__register_exitproc+0x92>
    5610:	ldr.w	r3, [r5, #328]	; 0x148
    5614:	movs	r7, #0
    5616:	stmia.w	r0, {r3, r7}
    561a:	str.w	r4, [r5, #328]	; 0x148
    561e:	mov	r0, r7
    5620:	movs	r3, #1
    5622:	str.w	r7, [r4, #392]	; 0x188
    5626:	str.w	r7, [r4, #396]	; 0x18c
    562a:	cmp	r6, #0
    562c:	beq.n	55f2 <__register_exitproc+0x3e>
    562e:	b.n	55d4 <__register_exitproc+0x20>
    5630:	ldr.w	r1, [r4, #396]	; 0x18c
    5634:	orrs	r2, r1
    5636:	str.w	r2, [r4, #396]	; 0x18c
    563a:	b.n	55f2 <__register_exitproc+0x3e>
    563c:	add.w	r4, r5, #332	; 0x14c
    5640:	str.w	r4, [r5, #328]	; 0x148
    5644:	b.n	55ca <__register_exitproc+0x16>
    5646:	mov.w	r0, #4294967295
    564a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    564e:	nop
    5650:	.word	0x00005998
    5654:	.word	0x00004d55
    5658:	.word	0x7370704f
    565c:	.word	0x6e61202c
    5660:	.word	0x6b6e7520
    5664:	.word	0x6e776f6e
    5668:	.word	0x44494d20
    566c:	.word	0x656d2049
    5670:	.word	0x67617373
    5674:	.word	0x79742065
    5678:	.word	0x00216570
    567c:	.word	0x6f486e6f
    5680:	.word	0x0000646c
    5684:	.word	0x72506e6f
    5688:	.word	0x00737365
    568c:	.word	0x4f4c4556
    5690:	.word	0x59544943
    5694:	.word	0x00000000
    5698:	.word	0x45544f4e
    569c:	.word	0x474e454c
    56a0:	.word	0x00004854
    56a4:	.word	0x43544950
    56a8:	.word	0x00000048
    56ac:	.word	0x65526e6f
    56b0:	.word	0x7361656c
    56b4:	.word	0x00000065
    56b8:	.word	0x74696e49
    56bc:	.word	0x53206465
    56c0:	.word	0x65757165
    56c4:	.word	0x0065636e

000056c8 <pin2sc1a>:
    56c8:	................
    56d8:	................
    56e8:	................
    56f8:	................
    5708:	........

00005710 <digital_pin_to_info_PGM>:
    5710:	@..C@..@D..CD..@
    5720:	...C...@0..C0..@
    5730:	4..C4..@...C...@
    5740:	...C...@...C...@
    5750:	...C...@...C...@
    5760:	...C...@...C...@
    5770:	...C...@...C...@
    5780:	...C...@...C...@
    5790:	...C...@...C...@
    57a0:	...C...@...C...@
    57b0:	...C...@...C...@
    57c0:	...C...@...C...@
    57d0:	h .Ch..@...C...@
    57e0:	8..C8..@<..C<..@
    57f0:	@..C@..@H..CH..@
    5800:	L..CL..@(..C(..@
    5810:	,..C,..@` .C`..@
    5820:	d .Cd..@ ..C ..@
    5830:	$..C$..@(..C(..@
    5840:	,..C,..@D..CD..@
    5850:	p..Cp..@t..Ct..@
    5860:	h..Ch..@P..CP..@
    5870:	X..CX..@\..C\..@
    5880:	T..CT..@ ..C ..@
    5890:	$..C$..@...C...@
    58a0:	...C...@8..C8..@
    58b0:	4..C4..@0..C0..@
    58c0:	<..C<..@,..C,..@
    58d0:	( .C(..@, .C,..@
    58e0:	. .C...@. .C...@
    58f0:	. .C...@. .C...@
    5900:	. .C...@. .C...@

00005910 <vtable for usb_serial_class>:
	...
    5918:	.B...B...B...B..
    5928:	.B...B...A...A..
    5938:	....

0000593c <usb_endpoint_config_table>:
    593c:	........

00005944 <usb_descriptor_list>:
    5944:	................
    5954:	............`...
    5964:	................
    5974:	....H...........
    5984:	d...............
    5994:	....

00005998 <_global_impure_ptr>:
    5998:	....

0000599c <_init>:
    599c:	push	{r3, r4, r5, r6, r7, lr}
    599e:	nop
    59a0:	pop	{r3, r4, r5, r6, r7}
    59a2:	pop	{r3}
    59a4:	mov	lr, r3
    59a6:	bx	lr

000059a8 <__init_array_start>:
    59a8:	.word	0x00005301

000059ac <__frame_dummy_init_array_entry>:
    59ac:	5...."..

Disassembly of section .fini:

000059b4 <_fini>:
    59b4:	push	{r3, r4, r5, r6, r7, lr}
    59b6:	nop
